// export MissionStart ; export RussianAssault ; export RU2_MineBase_FirstAttemptFailed , RU2_MineBase_SecondAttempt ; export EndTime , EndTime2 , TimeOutFirstWarning ; starting begin RandomizeAll ;
   0: CALL_OW 11
// InitMacro ;
   4: CALL 16420 0 0
// PrepareDifficulty ;
   8: CALL 13269 0 0
// PreparePlayerSquad ;
  12: CALL 2332 0 0
// CreatePersonnel ;
  16: CALL 3068 0 0
// CreateAlliedPersonnel ;
  20: CALL 3495 0 0
// SetAggressivenessLevel ( 1 ) ;
  24: LD_INT 1
  26: PPUSH
  27: CALL 79888 0 1
// EndTime = 10 10$00 ;
  31: LD_ADDR_EXP 5
  35: PUSH
  36: LD_INT 21000
  38: ST_TO_ADDR
// EndTime2 = 2 2$00 ;
  39: LD_ADDR_EXP 6
  43: PUSH
  44: LD_INT 4200
  46: ST_TO_ADDR
// Garrison_Buildings ( 3 ) ;
  47: LD_INT 3
  49: PPUSH
  50: CALL 6051 0 1
// Assemble_Barracks ( 3 ) ;
  54: LD_INT 3
  56: PPUSH
  57: CALL 6956 0 1
// Assemble_Armories ( 3 ) ;
  61: LD_INT 3
  63: PPUSH
  64: CALL 7240 0 1
// Fill_Turrets ( 3 ) ;
  68: LD_INT 3
  70: PPUSH
  71: CALL 7699 0 1
// Fill_Bunkers ( 3 ) ;
  75: LD_INT 3
  77: PPUSH
  78: CALL 7538 0 1
// PrepareNature ( 11 , 6 , 22 , 14 , 7 , 0 , 0 , Animals_Area , 0 ) ;
  82: LD_INT 11
  84: PPUSH
  85: LD_INT 6
  87: PPUSH
  88: LD_INT 22
  90: PPUSH
  91: LD_INT 14
  93: PPUSH
  94: LD_INT 7
  96: PPUSH
  97: LD_INT 0
  99: PPUSH
 100: LD_INT 0
 102: PPUSH
 103: LD_INT 17
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL 72109 0 9
// PlaceUnitXY ( Smithy , 125 , 160 , false ) ;
 113: LD_EXP 12
 117: PPUSH
 118: LD_INT 125
 120: PPUSH
 121: LD_INT 160
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: CALL_OW 48
// ComTurnUnit ( Smithy , Simone ) ;
 131: LD_EXP 12
 135: PPUSH
 136: LD_EXP 8
 140: PPUSH
 141: CALL_OW 119
// InGameOn ;
 145: CALL_OW 8
// CenterNowOnUnits ( Sim_Veh ) ;
 149: LD_EXP 18
 153: PPUSH
 154: CALL_OW 87
// ComMoveXY ( [ FilterAllUnits ( [ f_side , 7 ] ) diff Simone ] , 110 , 157 ) ;
 158: LD_INT 22
 160: PUSH
 161: LD_INT 7
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: PPUSH
 168: CALL_OW 69
 172: PUSH
 173: LD_EXP 8
 177: DIFF
 178: PUSH
 179: EMPTY
 180: LIST
 181: PPUSH
 182: LD_INT 110
 184: PPUSH
 185: LD_INT 157
 187: PPUSH
 188: CALL_OW 111
// wait ( 0 0$1 ) ;
 192: LD_INT 35
 194: PPUSH
 195: CALL_OW 67
// ComMoveXY ( Simone , 120 , 160 ) ;
 199: LD_EXP 8
 203: PPUSH
 204: LD_INT 120
 206: PPUSH
 207: LD_INT 160
 209: PPUSH
 210: CALL_OW 111
// wait ( 0 0$1 ) ;
 214: LD_INT 35
 216: PPUSH
 217: CALL_OW 67
// repeat begin CenterNowOnUnits ( Sim_Veh ) ;
 221: LD_EXP 18
 225: PPUSH
 226: CALL_OW 87
// wait ( 0 0$1 ) ;
 230: LD_INT 35
 232: PPUSH
 233: CALL_OW 67
// end until IsInArea ( Simone , AM_Base_Area ) ;
 237: LD_EXP 8
 241: PPUSH
 242: LD_INT 10
 244: PPUSH
 245: CALL_OW 308
 249: IFFALSE 221
// ComExitVehicle ( Simone ) ;
 251: LD_EXP 8
 255: PPUSH
 256: CALL_OW 121
// wait ( 0 0$1 ) ;
 260: LD_INT 35
 262: PPUSH
 263: CALL_OW 67
// ComMoveXY ( Simone , 124 , 160 ) ;
 267: LD_EXP 8
 271: PPUSH
 272: LD_INT 124
 274: PPUSH
 275: LD_INT 160
 277: PPUSH
 278: CALL_OW 111
// AddComTurnUnit ( Simone , Smithy ) ;
 282: LD_EXP 8
 286: PPUSH
 287: LD_EXP 12
 291: PPUSH
 292: CALL_OW 179
// wait ( 0 0$7 ) ;
 296: LD_INT 245
 298: PPUSH
 299: CALL_OW 67
// CenterNowOnUnits ( Simone ) ;
 303: LD_EXP 8
 307: PPUSH
 308: CALL_OW 87
// Say ( Simone , D1-Simone-1 ) ;
 312: LD_EXP 8
 316: PPUSH
 317: LD_STRING D1-Simone-1
 319: PPUSH
 320: CALL_OW 88
// Say ( Smithy , D1-Smithy-1 ) ;
 324: LD_EXP 12
 328: PPUSH
 329: LD_STRING D1-Smithy-1
 331: PPUSH
 332: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 336: LD_EXP 8
 340: PPUSH
 341: LD_STRING D1-Simone-2
 343: PPUSH
 344: CALL_OW 88
// Say ( Smithy , D1-Smithy-2 ) ;
 348: LD_EXP 12
 352: PPUSH
 353: LD_STRING D1-Smithy-2
 355: PPUSH
 356: CALL_OW 88
// Say ( Simone , D1-Simone-3 ) ;
 360: LD_EXP 8
 364: PPUSH
 365: LD_STRING D1-Simone-3
 367: PPUSH
 368: CALL_OW 88
// Say ( Smithy , D1-Smithy-3 ) ;
 372: LD_EXP 12
 376: PPUSH
 377: LD_STRING D1-Smithy-3
 379: PPUSH
 380: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 384: LD_EXP 8
 388: PPUSH
 389: LD_STRING D1-Simone-4
 391: PPUSH
 392: CALL_OW 88
// Say ( Smithy , D1-Smithy-4 ) ;
 396: LD_EXP 12
 400: PPUSH
 401: LD_STRING D1-Smithy-4
 403: PPUSH
 404: CALL_OW 88
// ComEnterUnit ( Simone , Sim_Veh ) ;
 408: LD_EXP 8
 412: PPUSH
 413: LD_EXP 18
 417: PPUSH
 418: CALL_OW 120
// AddComMoveXY ( FilterAllUnits ( [ f_side , 7 ] ) , 149 , 195 ) ;
 422: LD_INT 22
 424: PUSH
 425: LD_INT 7
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PPUSH
 437: LD_INT 149
 439: PPUSH
 440: LD_INT 195
 442: PPUSH
 443: CALL_OW 171
// wait ( 0 0$5 ) ;
 447: LD_INT 175
 449: PPUSH
 450: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
 454: LD_STRING M1
 456: PPUSH
 457: CALL_OW 337
// ComEnterUnit ( Smithy , AM_Depot ) ;
 461: LD_EXP 12
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL_OW 120
// InGameOff ;
 473: CALL_OW 9
// SetSide ( MnBase , 7 ) ;
 477: LD_INT 157
 479: PPUSH
 480: LD_INT 7
 482: PPUSH
 483: CALL_OW 235
// MissionStart = true ;
 487: LD_ADDR_EXP 1
 491: PUSH
 492: LD_INT 1
 494: ST_TO_ADDR
// SaveForQuickRestart ;
 495: CALL_OW 22
// end ;
 499: END
// every 0 0$1 trigger MissionStart do
 500: LD_EXP 1
 504: IFFALSE 624
 506: GO 508
 508: DISABLE
// begin Wait ( 11 11$0 ) ;
 509: LD_INT 23100
 511: PPUSH
 512: CALL_OW 67
// Say ( Simone , D2a-Simone-1 ) ;
 516: LD_EXP 8
 520: PPUSH
 521: LD_STRING D2a-Simone-1
 523: PPUSH
 524: CALL_OW 88
// Say ( Smithy , D2a-Smithy-1 ) ;
 528: LD_EXP 12
 532: PPUSH
 533: LD_STRING D2a-Smithy-1
 535: PPUSH
 536: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 540: LD_EXP 8
 544: PPUSH
 545: LD_STRING D2a-Simone-2
 547: PPUSH
 548: CALL_OW 88
// Say ( Smithy , D2a-Smithy-2 ) ;
 552: LD_EXP 12
 556: PPUSH
 557: LD_STRING D2a-Smithy-2
 559: PPUSH
 560: CALL_OW 88
// Say ( Smithy , D2a-Smithy-3 ) ;
 564: LD_EXP 12
 568: PPUSH
 569: LD_STRING D2a-Smithy-3
 571: PPUSH
 572: CALL_OW 88
// Say ( Simone , D2a-Simone-3 ) ;
 576: LD_EXP 8
 580: PPUSH
 581: LD_STRING D2a-Simone-3
 583: PPUSH
 584: CALL_OW 88
// Say ( Smithy , D2a-Smithy-4 ) ;
 588: LD_EXP 12
 592: PPUSH
 593: LD_STRING D2a-Smithy-4
 595: PPUSH
 596: CALL_OW 88
// Say ( Smithy , D2a-Smithy-5 ) ;
 600: LD_EXP 12
 604: PPUSH
 605: LD_STRING D2a-Smithy-5
 607: PPUSH
 608: CALL_OW 88
// Say ( Smithy , D2a-Smithy-6 ) ;
 612: LD_EXP 12
 616: PPUSH
 617: LD_STRING D2a-Smithy-6
 619: PPUSH
 620: CALL_OW 88
// end ;
 624: END
// every 0 0$1 trigger See ( 1 , RU2_SibMine ) do
 625: LD_INT 1
 627: PPUSH
 628: LD_EXP 38
 632: PPUSH
 633: CALL_OW 292
 637: IFFALSE 654
 639: GO 641
 641: DISABLE
// begin Say ( Simone , D2-Simone-1a ) ;
 642: LD_EXP 8
 646: PPUSH
 647: LD_STRING D2-Simone-1a
 649: PPUSH
 650: CALL_OW 88
// end ;
 654: END
// every 0 0$1 trigger MissionStart do var Edmonds_Car ;
 655: LD_EXP 1
 659: IFFALSE 939
 661: GO 663
 663: DISABLE
 664: LD_INT 0
 666: PPUSH
// begin Wait ( 17 17$0 ) ;
 667: LD_INT 35700
 669: PPUSH
 670: CALL_OW 67
// uc_side = 1 ;
 674: LD_ADDR_OWVAR 20
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// uc_nation := nation_american ;
 682: LD_ADDR_OWVAR 21
 686: PUSH
 687: LD_INT 1
 689: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
 690: LD_ADDR_OWVAR 37
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// vc_engine := engine_combustion ;
 698: LD_ADDR_OWVAR 39
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
 706: LD_ADDR_OWVAR 40
 710: PUSH
 711: LD_INT 2
 713: ST_TO_ADDR
// vc_control := control_manual ;
 714: LD_ADDR_OWVAR 38
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// Edmonds_Car := CreateVehicle ;
 722: LD_ADDR_VAR 0 1
 726: PUSH
 727: CALL_OW 45
 731: ST_TO_ADDR
// PlaceHumanInUnit ( Edmonds , Edmonds_Car ) ;
 732: LD_EXP 14
 736: PPUSH
 737: LD_VAR 0 1
 741: PPUSH
 742: CALL_OW 52
// PlaceUnitArea ( Edmonds_Car , AM_Start , false ) ;
 746: LD_VAR 0 1
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// ComMoveXY ( Edmonds , 162 , 208 ) ;
 761: LD_EXP 14
 765: PPUSH
 766: LD_INT 162
 768: PPUSH
 769: LD_INT 208
 771: PPUSH
 772: CALL_OW 111
// AddComExitVehicle ( Edmonds ) ;
 776: LD_EXP 14
 780: PPUSH
 781: CALL_OW 181
// Wait ( 0 0$20 ) ;
 785: LD_INT 700
 787: PPUSH
 788: CALL_OW 67
// Say ( Simone , D3-Simone-1 ) ;
 792: LD_EXP 8
 796: PPUSH
 797: LD_STRING D3-Simone-1
 799: PPUSH
 800: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
 804: LD_EXP 14
 808: PPUSH
 809: LD_STRING D3-Edmonds-1
 811: PPUSH
 812: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
 816: LD_EXP 14
 820: PPUSH
 821: LD_STRING D3-Edmonds-2
 823: PPUSH
 824: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
 828: LD_EXP 8
 832: PPUSH
 833: LD_STRING D3-Simone-2
 835: PPUSH
 836: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-3 ) ;
 840: LD_EXP 14
 844: PPUSH
 845: LD_STRING D3-Edmonds-3
 847: PPUSH
 848: CALL_OW 88
// SetSide ( Edmonds , 7 ) ;
 852: LD_EXP 14
 856: PPUSH
 857: LD_INT 7
 859: PPUSH
 860: CALL_OW 235
// SetTech ( tech_LasDouble , 7 , state_enabled ) ;
 864: LD_INT 14
 866: PPUSH
 867: LD_INT 7
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 322
// ChangeMissionObjectives ( M1a ) ;
 877: LD_STRING M1a
 879: PPUSH
 880: CALL_OW 337
// Wait ( 0 0$40 ) ;
 884: LD_INT 1400
 886: PPUSH
 887: CALL_OW 67
// Say ( Simone , D3a-Simone-1 ) ;
 891: LD_EXP 8
 895: PPUSH
 896: LD_STRING D3a-Simone-1
 898: PPUSH
 899: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-1 ) ;
 903: LD_EXP 14
 907: PPUSH
 908: LD_STRING D3a-Edmonds-1
 910: PPUSH
 911: CALL_OW 88
// Say ( Simone , D3a-Simone-2 ) ;
 915: LD_EXP 8
 919: PPUSH
 920: LD_STRING D3a-Simone-2
 922: PPUSH
 923: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-2 ) ;
 927: LD_EXP 14
 931: PPUSH
 932: LD_STRING D3a-Edmonds-2
 934: PPUSH
 935: CALL_OW 88
// end ;
 939: PPOPN 1
 941: END
// every 0 0$1 trigger MissionStart do
 942: LD_EXP 1
 946: IFFALSE 1245
 948: GO 950
 950: DISABLE
// begin Wait ( 19 19$30 ) ;
 951: LD_INT 40950
 953: PPUSH
 954: CALL_OW 67
// PlaceUnitXYR ( Stone , 137 , 107 , 5 , false ) ;
 958: LD_EXP 13
 962: PPUSH
 963: LD_INT 137
 965: PPUSH
 966: LD_INT 107
 968: PPUSH
 969: LD_INT 5
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 50
// ComMoveXY ( Stone , 128 , 162 ) ;
 979: LD_EXP 13
 983: PPUSH
 984: LD_INT 128
 986: PPUSH
 987: LD_INT 162
 989: PPUSH
 990: CALL_OW 111
// repeat Wait ( 0 0$1 ) ;
 994: LD_INT 35
 996: PPUSH
 997: CALL_OW 67
// until IsInArea ( Stone , AM_Base_Area ) ;
1001: LD_EXP 13
1005: PPUSH
1006: LD_INT 10
1008: PPUSH
1009: CALL_OW 308
1013: IFFALSE 994
// DialogueOn ;
1015: CALL_OW 6
// CenterOnUnits ( Stone ) ;
1019: LD_EXP 13
1023: PPUSH
1024: CALL_OW 85
// Say ( Smithy , D4-Smithy-1 ) ;
1028: LD_EXP 12
1032: PPUSH
1033: LD_STRING D4-Smithy-1
1035: PPUSH
1036: CALL_OW 88
// DWait ( 0 0$1 ) ;
1040: LD_INT 35
1042: PPUSH
1043: CALL_OW 68
// Say ( Stone , D4-Stone-1 ) ;
1047: LD_EXP 13
1051: PPUSH
1052: LD_STRING D4-Stone-1
1054: PPUSH
1055: CALL_OW 88
// Say ( Smithy , D4-Smithy-2 ) ;
1059: LD_EXP 12
1063: PPUSH
1064: LD_STRING D4-Smithy-2
1066: PPUSH
1067: CALL_OW 88
// DWait ( 0 0$1 ) ;
1071: LD_INT 35
1073: PPUSH
1074: CALL_OW 68
// Say ( Simone , D4-Simone-1 ) ;
1078: LD_EXP 8
1082: PPUSH
1083: LD_STRING D4-Simone-1
1085: PPUSH
1086: CALL_OW 88
// Say ( Stone , D4-Stone-2 ) ;
1090: LD_EXP 13
1094: PPUSH
1095: LD_STRING D4-Stone-2
1097: PPUSH
1098: CALL_OW 88
// Say ( Simone , D4-Simone-2 ) ;
1102: LD_EXP 8
1106: PPUSH
1107: LD_STRING D4-Simone-2
1109: PPUSH
1110: CALL_OW 88
// Say ( Stone , D4-Stone-3 ) ;
1114: LD_EXP 13
1118: PPUSH
1119: LD_STRING D4-Stone-3
1121: PPUSH
1122: CALL_OW 88
// Say ( Simone , D4-Simone-3 ) ;
1126: LD_EXP 8
1130: PPUSH
1131: LD_STRING D4-Simone-3
1133: PPUSH
1134: CALL_OW 88
// Say ( Stone , D4-Stone-4 ) ;
1138: LD_EXP 13
1142: PPUSH
1143: LD_STRING D4-Stone-4
1145: PPUSH
1146: CALL_OW 88
// Say ( Simone , D4-Simone-4 ) ;
1150: LD_EXP 8
1154: PPUSH
1155: LD_STRING D4-Simone-4
1157: PPUSH
1158: CALL_OW 88
// ChangeMissionObjectives ( M1b ) ;
1162: LD_STRING M1b
1164: PPUSH
1165: CALL_OW 337
// SetSide ( Stone , 7 ) ;
1169: LD_EXP 13
1173: PPUSH
1174: LD_INT 7
1176: PPUSH
1177: CALL_OW 235
// Say ( Simone , D4c-Simone-1 ) ;
1181: LD_EXP 8
1185: PPUSH
1186: LD_STRING D4c-Simone-1
1188: PPUSH
1189: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-1 ) ;
1193: LD_EXP 15
1197: PPUSH
1198: LD_STRING D4c-Barnes-1
1200: PPUSH
1201: CALL_OW 94
// Say ( Simone , D4c-Simone-2 ) ;
1205: LD_EXP 8
1209: PPUSH
1210: LD_STRING D4c-Simone-2
1212: PPUSH
1213: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-2 ) ;
1217: LD_EXP 15
1221: PPUSH
1222: LD_STRING D4c-Barnes-2
1224: PPUSH
1225: CALL_OW 94
// Say ( Simone , D4c-Simone-3 ) ;
1229: LD_EXP 8
1233: PPUSH
1234: LD_STRING D4c-Simone-3
1236: PPUSH
1237: CALL_OW 88
// DialogueOff ;
1241: CALL_OW 7
// end ;
1245: END
// every 0 0$1 trigger MissionStart do var Squad ;
1246: LD_EXP 1
1250: IFFALSE 1434
1252: GO 1254
1254: DISABLE
1255: LD_INT 0
1257: PPUSH
// begin Wait ( 21 21$0 ) ;
1258: LD_INT 44100
1260: PPUSH
1261: CALL_OW 67
// RussianAssault = true ;
1265: LD_ADDR_EXP 2
1269: PUSH
1270: LD_INT 1
1272: ST_TO_ADDR
// RussianFirstAssault ;
1273: CALL 7855 0 0
// Wait ( 0 0$25 ) ;
1277: LD_INT 875
1279: PPUSH
1280: CALL_OW 67
// Squad := FilterAllUnits ( [ f_side , 7 ] ) diff [ Simone , Kathryn , Miller ] ;
1284: LD_ADDR_VAR 0 1
1288: PUSH
1289: LD_INT 22
1291: PUSH
1292: LD_INT 7
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: LD_EXP 8
1308: PUSH
1309: LD_EXP 9
1313: PUSH
1314: LD_EXP 10
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: DIFF
1324: ST_TO_ADDR
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2b-Sol-1 , D2b-FemSol-1 ) ;
1325: LD_VAR 0 1
1329: PUSH
1330: LD_INT 1
1332: PPUSH
1333: LD_VAR 0 1
1337: PPUSH
1338: CALL_OW 12
1342: ARRAY
1343: PPUSH
1344: LD_STRING D2b-Sol-1
1346: PPUSH
1347: LD_STRING D2b-FemSol-1
1349: PPUSH
1350: CALL 7804 0 3
// Say ( Simone , D2b-Simone-1 ) ;
1354: LD_EXP 8
1358: PPUSH
1359: LD_STRING D2b-Simone-1
1361: PPUSH
1362: CALL_OW 88
// Wait ( 1 1$20 ) ;
1366: LD_INT 2800
1368: PPUSH
1369: CALL_OW 67
// DialogueOn ;
1373: CALL_OW 6
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2c-Sol-1 , D2c-FemSol-1 ) ;
1377: LD_VAR 0 1
1381: PUSH
1382: LD_INT 1
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: CALL_OW 12
1394: ARRAY
1395: PPUSH
1396: LD_STRING D2c-Sol-1
1398: PPUSH
1399: LD_STRING D2c-FemSol-1
1401: PPUSH
1402: CALL 7804 0 3
// Say ( Smithy , D2c-Smithy-1 ) ;
1406: LD_EXP 12
1410: PPUSH
1411: LD_STRING D2c-Smithy-1
1413: PPUSH
1414: CALL_OW 88
// Say ( Simone , D2c-Simone-1 ) ;
1418: LD_EXP 8
1422: PPUSH
1423: LD_STRING D2c-Simone-1
1425: PPUSH
1426: CALL_OW 88
// DialogueOff ;
1430: CALL_OW 7
// end ;
1434: PPOPN 1
1436: END
// every 0 0$1 trigger MissionStart do
1437: LD_EXP 1
1441: IFFALSE 1794
1443: GO 1445
1445: DISABLE
// begin Wait ( 54 54$0 ) ;
1446: LD_INT 113400
1448: PPUSH
1449: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_E ) ;
1453: LD_INT 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 4
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 0
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: LD_INT 7
1479: PPUSH
1480: CALL 5473 0 9
// Wait ( 0 0$15 ) ;
1484: LD_INT 525
1486: PPUSH
1487: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 3 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1491: LD_INT 7
1493: PPUSH
1494: LD_INT 8
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 5
1502: PPUSH
1503: LD_INT 2
1505: PPUSH
1506: LD_INT 1
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 3
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: EMPTY
1524: PPUSH
1525: LD_INT 25
1527: PUSH
1528: LD_INT 26
1530: PUSH
1531: LD_INT 27
1533: PUSH
1534: LD_INT 28
1536: PUSH
1537: LD_INT 72
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PPUSH
1547: EMPTY
1548: PPUSH
1549: CALL 3989 0 10
// Wait ( 0 0$45 ) ;
1553: LD_INT 1575
1555: PPUSH
1556: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 3 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_S ) ;
1560: LD_INT 8
1562: PPUSH
1563: LD_INT 2
1565: PPUSH
1566: LD_INT 3
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 6
1583: PPUSH
1584: LD_INT 6
1586: PPUSH
1587: CALL 5473 0 9
// Wait ( 5 5$25 ) ;
1591: LD_INT 11375
1593: PPUSH
1594: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 5 , 0 , 0 , 2 , 0 , 6 , GU_Spawn_E ) ;
1598: LD_INT 8
1600: PPUSH
1601: LD_INT 2
1603: PPUSH
1604: LD_INT 5
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: LD_INT 6
1621: PPUSH
1622: LD_INT 7
1624: PPUSH
1625: CALL 5473 0 9
// Wait ( 0 0$25 ) ;
1629: LD_INT 875
1631: PPUSH
1632: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1636: LD_INT 7
1638: PPUSH
1639: LD_INT 8
1641: PPUSH
1642: LD_INT 2
1644: PPUSH
1645: LD_INT 5
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: LD_INT 3
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: LD_INT 1
1667: PPUSH
1668: EMPTY
1669: PPUSH
1670: LD_INT 25
1672: PUSH
1673: LD_INT 26
1675: PUSH
1676: LD_INT 27
1678: PUSH
1679: LD_INT 28
1681: PUSH
1682: LD_INT 72
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PPUSH
1692: EMPTY
1693: PPUSH
1694: CALL 3989 0 10
// Wait ( 0 0$10 ) ;
1698: LD_INT 350
1700: PPUSH
1701: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 1 , 0 , 6 , GU_Spawn_S ) ;
1705: LD_INT 8
1707: PPUSH
1708: LD_INT 2
1710: PPUSH
1711: LD_INT 4
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 6
1728: PPUSH
1729: LD_INT 6
1731: PPUSH
1732: CALL 5473 0 9
// RespawnAttackVehicle ( GU_Spawn_S , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] ) ;
1736: LD_INT 6
1738: PPUSH
1739: LD_INT 8
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 5
1747: PPUSH
1748: LD_INT 2
1750: PPUSH
1751: LD_INT 1
1753: PUSH
1754: LD_INT 2
1756: PUSH
1757: LD_INT 3
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: EMPTY
1769: PPUSH
1770: LD_INT 25
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 27
1778: PUSH
1779: LD_INT 28
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PPUSH
1788: EMPTY
1789: PPUSH
1790: CALL 3989 0 10
// end ;
1794: END
// every 0 0$1 trigger ( Difficulty = 1 and RusMainAttacks < 3 ) or ( Difficulty = 2 and RusMainAttacks < 5 ) or ( Difficulty = 3 and RusMainAttacks < 7 ) do
1795: LD_OWVAR 67
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: PUSH
1804: LD_EXP 45
1808: PUSH
1809: LD_INT 3
1811: LESS
1812: AND
1813: PUSH
1814: LD_OWVAR 67
1818: PUSH
1819: LD_INT 2
1821: EQUAL
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_INT 5
1830: LESS
1831: AND
1832: OR
1833: PUSH
1834: LD_OWVAR 67
1838: PUSH
1839: LD_INT 3
1841: EQUAL
1842: PUSH
1843: LD_EXP 45
1847: PUSH
1848: LD_INT 7
1850: LESS
1851: AND
1852: OR
1853: IFFALSE 1961
1855: GO 1857
1857: DISABLE
// begin Wait ( 1 1$20 ) ;
1858: LD_INT 2800
1860: PPUSH
1861: CALL_OW 67
// Say ( Miller , D4d-Miller-1 ) ;
1865: LD_EXP 10
1869: PPUSH
1870: LD_STRING D4d-Miller-1
1872: PPUSH
1873: CALL_OW 88
// Say ( Kathryn , D4d-Kathryn-1 ) ;
1877: LD_EXP 9
1881: PPUSH
1882: LD_STRING D4d-Kathryn-1
1884: PPUSH
1885: CALL_OW 88
// Say ( Simone , D4d-Simone-1 ) ;
1889: LD_EXP 8
1893: PPUSH
1894: LD_STRING D4d-Simone-1
1896: PPUSH
1897: CALL_OW 88
// Say ( Kathryn , D4d-Kathryn-2 ) ;
1901: LD_EXP 9
1905: PPUSH
1906: LD_STRING D4d-Kathryn-2
1908: PPUSH
1909: CALL_OW 88
// Say ( Simone , D4d-Simone-2 ) ;
1913: LD_EXP 8
1917: PPUSH
1918: LD_STRING D4d-Simone-2
1920: PPUSH
1921: CALL_OW 88
// Say ( Kathryn , D4d-Kathryn-3 ) ;
1925: LD_EXP 9
1929: PPUSH
1930: LD_STRING D4d-Kathryn-3
1932: PPUSH
1933: CALL_OW 88
// Say ( Simone , D4d-Simone-3 ) ;
1937: LD_EXP 8
1941: PPUSH
1942: LD_STRING D4d-Simone-3
1944: PPUSH
1945: CALL_OW 88
// Say ( Kathryn , D4d-Kathryn-4 ) ;
1949: LD_EXP 9
1953: PPUSH
1954: LD_STRING D4d-Kathryn-4
1956: PPUSH
1957: CALL_OW 88
// end ;
1961: END
// every 0 0$1 trigger RusMainAttacks = 0 do
1962: LD_EXP 45
1966: PUSH
1967: LD_INT 0
1969: EQUAL
1970: IFFALSE 2121
1972: GO 1974
1974: DISABLE
// begin Wait ( 5 5$0 ) ;
1975: LD_INT 10500
1977: PPUSH
1978: CALL_OW 67
// SayRadio ( Barnes , D4b-Barnes-1 ) ;
1982: LD_EXP 15
1986: PPUSH
1987: LD_STRING D4b-Barnes-1
1989: PPUSH
1990: CALL_OW 94
// Say ( Simone , D4b-Simone-1 ) ;
1994: LD_EXP 8
1998: PPUSH
1999: LD_STRING D4b-Simone-1
2001: PPUSH
2002: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-2 ) ;
2006: LD_EXP 15
2010: PPUSH
2011: LD_STRING D4b-Barnes-2
2013: PPUSH
2014: CALL_OW 94
// Say ( Simone , D4b-Simone-2 ) ;
2018: LD_EXP 8
2022: PPUSH
2023: LD_STRING D4b-Simone-2
2025: PPUSH
2026: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-3 ) ;
2030: LD_EXP 15
2034: PPUSH
2035: LD_STRING D4b-Barnes-3
2037: PPUSH
2038: CALL_OW 94
// Say ( Simone , D4b-Simone-3 ) ;
2042: LD_EXP 8
2046: PPUSH
2047: LD_STRING D4b-Simone-3
2049: PPUSH
2050: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-4 ) ;
2054: LD_EXP 15
2058: PPUSH
2059: LD_STRING D4b-Barnes-4
2061: PPUSH
2062: CALL_OW 94
// Say ( Simone , D4b-Simone-4 ) ;
2066: LD_EXP 8
2070: PPUSH
2071: LD_STRING D4b-Simone-4
2073: PPUSH
2074: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-5 ) ;
2078: LD_EXP 15
2082: PPUSH
2083: LD_STRING D4b-Barnes-5
2085: PPUSH
2086: CALL_OW 94
// Say ( Simone , D4b-Simone-5 ) ;
2090: LD_EXP 8
2094: PPUSH
2095: LD_STRING D4b-Simone-5
2097: PPUSH
2098: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
2102: LD_STRING M3
2104: PPUSH
2105: CALL_OW 337
// RU3_Baterie_Prepare ;
2109: CALL 9061 0 0
// AfterOffensive = true ;
2113: LD_ADDR_EXP 53
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// end ;
2121: END
// every 0 0$1 trigger AfterOffensive do
2122: LD_EXP 53
2126: IFFALSE 2164
2128: GO 2130
2130: DISABLE
// begin wait ( RU3RocketBatteryActivation ) ;
2131: LD_EXP 48
2135: PPUSH
2136: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
2140: LD_EXP 30
2144: PUSH
2145: LD_INT 0
2147: GREATER
2148: PUSH
2149: LD_EXP 29
2153: PUSH
2154: LD_INT 0
2156: GREATER
2157: AND
2158: IFFALSE 2164
// RU3BaterieMovement ;
2160: CALL 9559 0 0
// end ;
2164: END
// every 0 0$1 trigger AfterOffensive and RU3BaterieTimeOut and ( See ( 7 , RU3_BaterieVehs [ 1 ] ) or See ( 7 , RU3_BaterieVehs [ 2 ] ) or See ( 7 , RU3_BaterieVehs [ 3 ] ) or See ( 7 , RU3_BaterieVehs [ 4 ] ) or See ( 7 , RU3_BaterieVehs [ 5 ] ) ) do
2165: LD_EXP 53
2169: PUSH
2170: LD_EXP 31
2174: AND
2175: PUSH
2176: LD_INT 7
2178: PPUSH
2179: LD_EXP 29
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 292
2192: PUSH
2193: LD_INT 7
2195: PPUSH
2196: LD_EXP 29
2200: PUSH
2201: LD_INT 2
2203: ARRAY
2204: PPUSH
2205: CALL_OW 292
2209: OR
2210: PUSH
2211: LD_INT 7
2213: PPUSH
2214: LD_EXP 29
2218: PUSH
2219: LD_INT 3
2221: ARRAY
2222: PPUSH
2223: CALL_OW 292
2227: OR
2228: PUSH
2229: LD_INT 7
2231: PPUSH
2232: LD_EXP 29
2236: PUSH
2237: LD_INT 4
2239: ARRAY
2240: PPUSH
2241: CALL_OW 292
2245: OR
2246: PUSH
2247: LD_INT 7
2249: PPUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_INT 5
2257: ARRAY
2258: PPUSH
2259: CALL_OW 292
2263: OR
2264: AND
2265: IFFALSE 2282
2267: GO 2269
2269: DISABLE
// begin Say ( Simone , D6-Simone-1a ) end ;
2270: LD_EXP 8
2274: PPUSH
2275: LD_STRING D6-Simone-1a
2277: PPUSH
2278: CALL_OW 88
2282: END
// every 0 0$1 trigger AfterOffensive and ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut do
2283: LD_EXP 53
2287: PUSH
2288: LD_EXP 30
2292: PUSH
2293: LD_INT 0
2295: EQUAL
2296: PUSH
2297: LD_EXP 29
2301: PUSH
2302: LD_INT 0
2304: EQUAL
2305: OR
2306: AND
2307: PUSH
2308: LD_EXP 31
2312: NOT
2313: AND
2314: IFFALSE 2331
2316: GO 2318
2318: DISABLE
// begin Say ( Simone , D6-Simone-1 ) ;
2319: LD_EXP 8
2323: PPUSH
2324: LD_STRING D6-Simone-1
2326: PPUSH
2327: CALL_OW 88
// end ; end_of_file
2331: END
// export Simone , Kathryn , Miller , Loghain , Smithy , Stone , Edmonds , Barnes , AMSurvivors , Selected_americans ; export Sim_Veh , Kat_Veh , Mil_Veh ; export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function PreparePlayerSquad ( ) ; var i , veh ; begin
2332: LD_INT 0
2334: PPUSH
2335: PPUSH
2336: PPUSH
// uc_side := 7 ;
2337: LD_ADDR_OWVAR 20
2341: PUSH
2342: LD_INT 7
2344: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
2345: LD_ADDR_EXP 8
2349: PUSH
2350: LD_STRING Simone
2352: PPUSH
2353: CALL_OW 34
2357: ST_TO_ADDR
// Kathryn = CreateCharacter ( Kathryn ) ;
2358: LD_ADDR_EXP 9
2362: PUSH
2363: LD_STRING Kathryn
2365: PPUSH
2366: CALL_OW 34
2370: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
2371: LD_ADDR_EXP 10
2375: PUSH
2376: LD_STRING Miller
2378: PPUSH
2379: CALL_OW 34
2383: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM01_Survivors ) ;
2384: LD_ADDR_EXP 16
2388: PUSH
2389: LD_STRING AM01_Survivors
2391: PPUSH
2392: CALL_OW 31
2396: ST_TO_ADDR
// Selected_americans = CharacterSelection (  , 11 , 11 , [ sel_hired , sel_not_changeable , sel_change_class , Simone , Kathryn , Miller , sel_not_hired , sel_changeable , sel_ignore_class_nation , sel_change_class ] ^ AMSurvivors , [ [ class_engineer , 1 ] , class_soldier , class_scientistic , class_mechanic ] ) ;
2397: LD_ADDR_EXP 17
2401: PUSH
2402: LD_STRING 
2404: PPUSH
2405: LD_INT 11
2407: PPUSH
2408: LD_INT 11
2410: PPUSH
2411: LD_INT -1
2413: PUSH
2414: LD_INT -4
2416: PUSH
2417: LD_INT -5
2419: PUSH
2420: LD_EXP 8
2424: PUSH
2425: LD_EXP 9
2429: PUSH
2430: LD_EXP 10
2434: PUSH
2435: LD_INT -2
2437: PUSH
2438: LD_INT -3
2440: PUSH
2441: LD_INT -7
2443: PUSH
2444: LD_INT -5
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_EXP 16
2463: ADD
2464: PPUSH
2465: LD_INT 2
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PPUSH
2490: CALL_OW 42
2494: ST_TO_ADDR
// for i = 1 to 2 do
2495: LD_ADDR_VAR 0 2
2499: PUSH
2500: DOUBLE
2501: LD_INT 1
2503: DEC
2504: ST_TO_ADDR
2505: LD_INT 2
2507: PUSH
2508: FOR_TO
2509: IFFALSE 2612
// begin vc_chassis := us_heavy_tracked ;
2511: LD_ADDR_OWVAR 37
2515: PUSH
2516: LD_INT 4
2518: ST_TO_ADDR
// vc_engine := engine_siberite ;
2519: LD_ADDR_OWVAR 39
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 5
2534: ST_TO_ADDR
// vc_control := control_manual ;
2535: LD_ADDR_OWVAR 38
2539: PUSH
2540: LD_INT 1
2542: ST_TO_ADDR
// veh := CreateVehicle ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 45
2552: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2553: LD_EXP 17
2557: PUSH
2558: LD_VAR 0 2
2562: ARRAY
2563: PPUSH
2564: LD_VAR 0 3
2568: PPUSH
2569: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2573: LD_VAR 0 3
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2588: LD_ADDR_EXP 17
2592: PUSH
2593: LD_EXP 17
2597: PUSH
2598: LD_EXP 17
2602: PUSH
2603: LD_VAR 0 2
2607: ARRAY
2608: DIFF
2609: ST_TO_ADDR
// end ;
2610: GO 2508
2612: POP
2613: POP
// for i = 1 to 3 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 3
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2731
// begin vc_chassis := us_medium_wheeled ;
2630: LD_ADDR_OWVAR 37
2634: PUSH
2635: LD_INT 2
2637: ST_TO_ADDR
// vc_engine := engine_siberite ;
2638: LD_ADDR_OWVAR 39
2642: PUSH
2643: LD_INT 3
2645: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
2646: LD_ADDR_OWVAR 40
2650: PUSH
2651: LD_INT 4
2653: ST_TO_ADDR
// vc_control := control_manual ;
2654: LD_ADDR_OWVAR 38
2658: PUSH
2659: LD_INT 1
2661: ST_TO_ADDR
// veh := CreateVehicle ;
2662: LD_ADDR_VAR 0 3
2666: PUSH
2667: CALL_OW 45
2671: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2672: LD_EXP 17
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: PPUSH
2683: LD_VAR 0 3
2687: PPUSH
2688: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2692: LD_VAR 0 3
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2707: LD_ADDR_EXP 17
2711: PUSH
2712: LD_EXP 17
2716: PUSH
2717: LD_EXP 17
2721: PUSH
2722: LD_VAR 0 2
2726: ARRAY
2727: DIFF
2728: ST_TO_ADDR
// end ;
2729: GO 2627
2731: POP
2732: POP
// for i = 1 to 2 do
2733: LD_ADDR_VAR 0 2
2737: PUSH
2738: DOUBLE
2739: LD_INT 1
2741: DEC
2742: ST_TO_ADDR
2743: LD_INT 2
2745: PUSH
2746: FOR_TO
2747: IFFALSE 2850
// begin vc_chassis := us_medium_tracked ;
2749: LD_ADDR_OWVAR 37
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// vc_engine := engine_siberite ;
2757: LD_ADDR_OWVAR 39
2761: PUSH
2762: LD_INT 3
2764: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2765: LD_ADDR_OWVAR 40
2769: PUSH
2770: LD_INT 5
2772: ST_TO_ADDR
// vc_control := control_manual ;
2773: LD_ADDR_OWVAR 38
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// veh := CreateVehicle ;
2781: LD_ADDR_VAR 0 3
2785: PUSH
2786: CALL_OW 45
2790: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2791: LD_EXP 17
2795: PUSH
2796: LD_VAR 0 2
2800: ARRAY
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_INT 1
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2826: LD_ADDR_EXP 17
2830: PUSH
2831: LD_EXP 17
2835: PUSH
2836: LD_EXP 17
2840: PUSH
2841: LD_VAR 0 2
2845: ARRAY
2846: DIFF
2847: ST_TO_ADDR
// end ;
2848: GO 2746
2850: POP
2851: POP
// for i in Selected_americans do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_EXP 17
2861: PUSH
2862: FOR_IN
2863: IFFALSE 2882
// PlaceUnitArea ( i , AM_Start , false ) ;
2865: LD_VAR 0 2
2869: PPUSH
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 0
2875: PPUSH
2876: CALL_OW 49
2880: GO 2862
2882: POP
2883: POP
// vc_chassis := us_heavy_tracked ;
2884: LD_ADDR_OWVAR 37
2888: PUSH
2889: LD_INT 4
2891: ST_TO_ADDR
// vc_engine := engine_siberite ;
2892: LD_ADDR_OWVAR 39
2896: PUSH
2897: LD_INT 3
2899: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2900: LD_ADDR_OWVAR 40
2904: PUSH
2905: LD_INT 12
2907: ST_TO_ADDR
// vc_control := control_manual ;
2908: LD_ADDR_OWVAR 38
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// Sim_veh := CreateVehicle ;
2916: LD_ADDR_EXP 18
2920: PUSH
2921: CALL_OW 45
2925: ST_TO_ADDR
// Kat_veh := CreateVehicle ;
2926: LD_ADDR_EXP 19
2930: PUSH
2931: CALL_OW 45
2935: ST_TO_ADDR
// Mil_veh := CreateVehicle ;
2936: LD_ADDR_EXP 20
2940: PUSH
2941: CALL_OW 45
2945: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , Sim_veh ) ;
2946: LD_EXP 8
2950: PPUSH
2951: LD_EXP 18
2955: PPUSH
2956: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , Kat_veh ) ;
2960: LD_EXP 9
2964: PPUSH
2965: LD_EXP 19
2969: PPUSH
2970: CALL_OW 52
// PlaceHumanInUnit ( Miller , Mil_veh ) ;
2974: LD_EXP 10
2978: PPUSH
2979: LD_EXP 20
2983: PPUSH
2984: CALL_OW 52
// PlaceUnitArea ( Sim_veh , AM_Start , false ) ;
2988: LD_EXP 18
2992: PPUSH
2993: LD_INT 1
2995: PPUSH
2996: LD_INT 0
2998: PPUSH
2999: CALL_OW 49
// PlaceUnitArea ( Kat_veh , AM_Start , false ) ;
3003: LD_EXP 19
3007: PPUSH
3008: LD_INT 1
3010: PPUSH
3011: LD_INT 0
3013: PPUSH
3014: CALL_OW 49
// PlaceUnitArea ( Mil_veh , AM_Start , false ) ;
3018: LD_EXP 20
3022: PPUSH
3023: LD_INT 1
3025: PPUSH
3026: LD_INT 0
3028: PPUSH
3029: CALL_OW 49
// AddCargo ( [ Sim_veh , Kat_veh , Mil_veh ] , mat_cans , 100 ) ;
3033: LD_EXP 18
3037: PUSH
3038: LD_EXP 19
3042: PUSH
3043: LD_EXP 20
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 100
3058: PPUSH
3059: CALL_OW 291
// end ;
3063: LD_VAR 0 1
3067: RET
// export function CreatePersonnel ; begin
3068: LD_INT 0
3070: PPUSH
// uc_side := 1 ;
3071: LD_ADDR_OWVAR 20
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// hc_class = class_soldier ;
3079: LD_ADDR_OWVAR 28
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// uc_nation := nation_american ;
3087: LD_ADDR_OWVAR 21
3091: PUSH
3092: LD_INT 1
3094: ST_TO_ADDR
// hc_sex = sex_male ;
3095: LD_ADDR_OWVAR 27
3099: PUSH
3100: LD_INT 1
3102: ST_TO_ADDR
// hc_importance = 80 ;
3103: LD_ADDR_OWVAR 32
3107: PUSH
3108: LD_INT 80
3110: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 3 , 3 ] ;
3111: LD_ADDR_OWVAR 31
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: LD_INT 4
3121: PUSH
3122: LD_INT 3
3124: PUSH
3125: LD_INT 3
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3134: LD_ADDR_OWVAR 29
3138: PUSH
3139: LD_INT 10
3141: PUSH
3142: LD_INT 10
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: ST_TO_ADDR
// hc_name := Smithy ;
3149: LD_ADDR_OWVAR 26
3153: PUSH
3154: LD_STRING Smithy
3156: ST_TO_ADDR
// hc_gallery := us_old ;
3157: LD_ADDR_OWVAR 33
3161: PUSH
3162: LD_STRING us_old
3164: ST_TO_ADDR
// hc_face_number := 20 ;
3165: LD_ADDR_OWVAR 34
3169: PUSH
3170: LD_INT 20
3172: ST_TO_ADDR
// Smithy := CreateHuman ;
3173: LD_ADDR_EXP 12
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// uc_side := 4 ;
3183: LD_ADDR_OWVAR 20
3187: PUSH
3188: LD_INT 4
3190: ST_TO_ADDR
// hc_class = class_sniper ;
3191: LD_ADDR_OWVAR 28
3195: PUSH
3196: LD_INT 5
3198: ST_TO_ADDR
// uc_nation := nation_american ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// hc_sex = sex_male ;
3207: LD_ADDR_OWVAR 27
3211: PUSH
3212: LD_INT 1
3214: ST_TO_ADDR
// hc_importance = 40 ;
3215: LD_ADDR_OWVAR 32
3219: PUSH
3220: LD_INT 40
3222: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 1 ] ;
3223: LD_ADDR_OWVAR 31
3227: PUSH
3228: LD_INT 5
3230: PUSH
3231: LD_INT 2
3233: PUSH
3234: LD_INT 4
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3246: LD_ADDR_OWVAR 29
3250: PUSH
3251: LD_INT 10
3253: PUSH
3254: LD_INT 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: ST_TO_ADDR
// hc_name := Harry Stone ;
3261: LD_ADDR_OWVAR 26
3265: PUSH
3266: LD_STRING Harry Stone
3268: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3269: LD_ADDR_OWVAR 33
3273: PUSH
3274: LD_STRING ZieloneLaserki_Commanders
3276: ST_TO_ADDR
// hc_face_number := 4 ;
3277: LD_ADDR_OWVAR 34
3281: PUSH
3282: LD_INT 4
3284: ST_TO_ADDR
// Stone := CreateHuman ;
3285: LD_ADDR_EXP 13
3289: PUSH
3290: CALL_OW 44
3294: ST_TO_ADDR
// uc_side := 1 ;
3295: LD_ADDR_OWVAR 20
3299: PUSH
3300: LD_INT 1
3302: ST_TO_ADDR
// hc_class = class_scientistic ;
3303: LD_ADDR_OWVAR 28
3307: PUSH
3308: LD_INT 4
3310: ST_TO_ADDR
// uc_nation := nation_american ;
3311: LD_ADDR_OWVAR 21
3315: PUSH
3316: LD_INT 1
3318: ST_TO_ADDR
// hc_sex = sex_male ;
3319: LD_ADDR_OWVAR 27
3323: PUSH
3324: LD_INT 1
3326: ST_TO_ADDR
// hc_importance = 40 ;
3327: LD_ADDR_OWVAR 32
3331: PUSH
3332: LD_INT 40
3334: ST_TO_ADDR
// hc_skills = [ 2 , 0 , 3 , 7 ] ;
3335: LD_ADDR_OWVAR 31
3339: PUSH
3340: LD_INT 2
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: LD_INT 7
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3358: LD_ADDR_OWVAR 29
3362: PUSH
3363: LD_INT 10
3365: PUSH
3366: LD_INT 10
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: ST_TO_ADDR
// hc_name := dr Samuel Edmonds ;
3373: LD_ADDR_OWVAR 26
3377: PUSH
3378: LD_STRING dr Samuel Edmonds
3380: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
3381: LD_ADDR_OWVAR 33
3385: PUSH
3386: LD_STRING ZieloneLaserki_Heroes
3388: ST_TO_ADDR
// hc_face_number := 4 ;
3389: LD_ADDR_OWVAR 34
3393: PUSH
3394: LD_INT 4
3396: ST_TO_ADDR
// Edmonds := CreateHuman ;
3397: LD_ADDR_EXP 14
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// hc_class = class_soldier ;
3407: LD_ADDR_OWVAR 28
3411: PUSH
3412: LD_INT 1
3414: ST_TO_ADDR
// uc_nation := nation_american ;
3415: LD_ADDR_OWVAR 21
3419: PUSH
3420: LD_INT 1
3422: ST_TO_ADDR
// hc_importance = 70 ;
3423: LD_ADDR_OWVAR 32
3427: PUSH
3428: LD_INT 70
3430: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
3431: LD_INT 1
3433: PPUSH
3434: LD_INT 8
3436: PPUSH
3437: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
3441: LD_ADDR_OWVAR 29
3445: PUSH
3446: LD_INT 10
3448: PUSH
3449: LD_INT 10
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: ST_TO_ADDR
// hc_name := Barnes ;
3456: LD_ADDR_OWVAR 26
3460: PUSH
3461: LD_STRING Barnes
3463: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3464: LD_ADDR_OWVAR 33
3468: PUSH
3469: LD_STRING ZieloneLaserki_Commanders
3471: ST_TO_ADDR
// hc_face_number := 2 ;
3472: LD_ADDR_OWVAR 34
3476: PUSH
3477: LD_INT 2
3479: ST_TO_ADDR
// Barnes := CreateHuman ;
3480: LD_ADDR_EXP 15
3484: PUSH
3485: CALL_OW 44
3489: ST_TO_ADDR
// end ;
3490: LD_VAR 0 1
3494: RET
// export function CreateAlliedPersonnel ; var i , un ; begin
3495: LD_INT 0
3497: PPUSH
3498: PPUSH
3499: PPUSH
// for i = 1 to 5 do
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_INT 5
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3619
// begin uc_side = 1 ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// uc_nation = 1 ;
3524: LD_ADDR_OWVAR 21
3528: PUSH
3529: LD_INT 1
3531: ST_TO_ADDR
// hc_name =  ;
3532: LD_ADDR_OWVAR 26
3536: PUSH
3537: LD_STRING 
3539: ST_TO_ADDR
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// PrepareHuman ( false , 1 , 5 ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: CALL_OW 380
// un = CreateHuman ;
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: CALL_OW 44
3570: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3571: LD_VAR 0 3
3575: PPUSH
3576: LD_INT 8
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3586: LD_VAR 0 3
3590: PPUSH
3591: LD_INT 121
3593: PPUSH
3594: LD_INT 163
3596: PPUSH
3597: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
3601: LD_ADDR_EXP 21
3605: PUSH
3606: LD_EXP 21
3610: PUSH
3611: LD_VAR 0 3
3615: ADD
3616: ST_TO_ADDR
// end ;
3617: GO 3513
3619: POP
3620: POP
// for i = 1 to 4 do
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: DOUBLE
3627: LD_INT 1
3629: DEC
3630: ST_TO_ADDR
3631: LD_INT 4
3633: PUSH
3634: FOR_TO
3635: IFFALSE 3740
// begin uc_side = 1 ;
3637: LD_ADDR_OWVAR 20
3641: PUSH
3642: LD_INT 1
3644: ST_TO_ADDR
// uc_nation = 1 ;
3645: LD_ADDR_OWVAR 21
3649: PUSH
3650: LD_INT 1
3652: ST_TO_ADDR
// hc_name =  ;
3653: LD_ADDR_OWVAR 26
3657: PUSH
3658: LD_STRING 
3660: ST_TO_ADDR
// hc_gallery =  ;
3661: LD_ADDR_OWVAR 33
3665: PUSH
3666: LD_STRING 
3668: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 5 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 2
3674: PPUSH
3675: LD_INT 5
3677: PPUSH
3678: CALL_OW 380
// un = CreateHuman ;
3682: LD_ADDR_VAR 0 3
3686: PUSH
3687: CALL_OW 44
3691: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3692: LD_VAR 0 3
3696: PPUSH
3697: LD_INT 8
3699: PPUSH
3700: LD_INT 0
3702: PPUSH
3703: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3707: LD_VAR 0 3
3711: PPUSH
3712: LD_INT 121
3714: PPUSH
3715: LD_INT 163
3717: PPUSH
3718: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
3722: LD_ADDR_EXP 22
3726: PUSH
3727: LD_EXP 22
3731: PUSH
3732: LD_VAR 0 3
3736: ADD
3737: ST_TO_ADDR
// end ;
3738: GO 3634
3740: POP
3741: POP
// for i = 1 to 4 do
3742: LD_ADDR_VAR 0 2
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_INT 4
3754: PUSH
3755: FOR_TO
3756: IFFALSE 3861
// begin uc_side = 1 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_INT 1
3765: ST_TO_ADDR
// uc_nation = 1 ;
3766: LD_ADDR_OWVAR 21
3770: PUSH
3771: LD_INT 1
3773: ST_TO_ADDR
// hc_name =  ;
3774: LD_ADDR_OWVAR 26
3778: PUSH
3779: LD_STRING 
3781: ST_TO_ADDR
// hc_gallery =  ;
3782: LD_ADDR_OWVAR 33
3786: PUSH
3787: LD_STRING 
3789: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: LD_INT 5
3798: PPUSH
3799: CALL_OW 380
// un = CreateHuman ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_INT 8
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3828: LD_VAR 0 3
3832: PPUSH
3833: LD_INT 121
3835: PPUSH
3836: LD_INT 163
3838: PPUSH
3839: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
3843: LD_ADDR_EXP 23
3847: PUSH
3848: LD_EXP 23
3852: PUSH
3853: LD_VAR 0 3
3857: ADD
3858: ST_TO_ADDR
// end ;
3859: GO 3755
3861: POP
3862: POP
// for i = 1 to 5 do
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 5
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3982
// begin uc_side = 1 ;
3879: LD_ADDR_OWVAR 20
3883: PUSH
3884: LD_INT 1
3886: ST_TO_ADDR
// uc_nation = 1 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// hc_name =  ;
3895: LD_ADDR_OWVAR 26
3899: PUSH
3900: LD_STRING 
3902: ST_TO_ADDR
// hc_gallery =  ;
3903: LD_ADDR_OWVAR 33
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 4
3916: PPUSH
3917: LD_INT 5
3919: PPUSH
3920: CALL_OW 380
// un = CreateHuman ;
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: CALL_OW 44
3933: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3934: LD_VAR 0 3
3938: PPUSH
3939: LD_INT 8
3941: PPUSH
3942: LD_INT 0
3944: PPUSH
3945: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3949: LD_VAR 0 3
3953: PPUSH
3954: LD_INT 121
3956: PPUSH
3957: LD_INT 163
3959: PPUSH
3960: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
3964: LD_ADDR_EXP 24
3968: PUSH
3969: LD_EXP 24
3973: PUSH
3974: LD_VAR 0 3
3978: ADD
3979: ST_TO_ADDR
// end ;
3980: GO 3876
3982: POP
3983: POP
// end ; end_of_file
3984: LD_VAR 0 1
3988: RET
// export attack_group ; export RusHarassSquad ; export RU2_DemoTeam , RU3_Baterie , RU3_BaterieVehs , RU3_BaterieMechs ; export RU3BaterieTimeOut ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 , RUWeaponChosen ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
4001: PPUSH
// amChassisTab = [ ] ;
4002: LD_ADDR_VAR 0 18
4006: PUSH
4007: EMPTY
4008: ST_TO_ADDR
// arChassisTab = [ ] ;
4009: LD_ADDR_VAR 0 17
4013: PUSH
4014: EMPTY
4015: ST_TO_ADDR
// ruChassisTab = [ ] ;
4016: LD_ADDR_VAR 0 16
4020: PUSH
4021: EMPTY
4022: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4023: LD_INT 35
4025: PPUSH
4026: CALL_OW 67
// if nation = 1 then
4030: LD_VAR 0 5
4034: PUSH
4035: LD_INT 1
4037: EQUAL
4038: IFFALSE 4559
// begin uc_side = side ;
4040: LD_ADDR_OWVAR 20
4044: PUSH
4045: LD_VAR 0 2
4049: ST_TO_ADDR
// uc_nation = nation ;
4050: LD_ADDR_OWVAR 21
4054: PUSH
4055: LD_VAR 0 5
4059: ST_TO_ADDR
// vc_engine = vehengine ;
4060: LD_ADDR_OWVAR 39
4064: PUSH
4065: LD_VAR 0 6
4069: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4070: LD_ADDR_OWVAR 38
4074: PUSH
4075: LD_VAR 0 7
4079: PUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_VAR 0 7
4087: PPUSH
4088: CALL_OW 12
4092: ARRAY
4093: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4094: LD_ADDR_OWVAR 40
4098: PUSH
4099: LD_VAR 0 10
4103: PUSH
4104: LD_INT 1
4106: PPUSH
4107: LD_VAR 0 10
4111: PPUSH
4112: CALL_OW 12
4116: ARRAY
4117: ST_TO_ADDR
// for j = 1 to AMWeapon do
4118: LD_ADDR_VAR 0 13
4122: PUSH
4123: DOUBLE
4124: LD_INT 1
4126: DEC
4127: ST_TO_ADDR
4128: LD_VAR 0 10
4132: PUSH
4133: FOR_TO
4134: IFFALSE 4435
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4136: LD_VAR 0 10
4140: PUSH
4141: LD_VAR 0 13
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: EQUAL
4150: PUSH
4151: LD_VAR 0 10
4155: PUSH
4156: LD_VAR 0 13
4160: ARRAY
4161: PUSH
4162: LD_INT 3
4164: EQUAL
4165: OR
4166: IFFALSE 4219
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4168: LD_ADDR_VAR 0 18
4172: PUSH
4173: LD_INT 1
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 4
4184: PUSH
4185: LD_INT 5
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4195: LD_ADDR_OWVAR 37
4199: PUSH
4200: LD_VAR 0 18
4204: PUSH
4205: LD_INT 1
4207: PPUSH
4208: LD_VAR 0 18
4212: PPUSH
4213: CALL_OW 12
4217: ARRAY
4218: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4219: LD_VAR 0 10
4223: PUSH
4224: LD_VAR 0 13
4228: ARRAY
4229: PUSH
4230: LD_INT 4
4232: EQUAL
4233: PUSH
4234: LD_VAR 0 10
4238: PUSH
4239: LD_VAR 0 13
4243: ARRAY
4244: PUSH
4245: LD_INT 5
4247: EQUAL
4248: OR
4249: PUSH
4250: LD_VAR 0 10
4254: PUSH
4255: LD_VAR 0 13
4259: ARRAY
4260: PUSH
4261: LD_INT 9
4263: EQUAL
4264: OR
4265: PUSH
4266: LD_VAR 0 10
4270: PUSH
4271: LD_VAR 0 13
4275: ARRAY
4276: PUSH
4277: LD_INT 11
4279: EQUAL
4280: OR
4281: PUSH
4282: LD_VAR 0 10
4286: PUSH
4287: LD_VAR 0 13
4291: ARRAY
4292: PUSH
4293: LD_INT 7
4295: EQUAL
4296: OR
4297: IFFALSE 4346
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4299: LD_ADDR_VAR 0 18
4303: PUSH
4304: LD_INT 2
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: LD_INT 4
4312: PUSH
4313: LD_INT 5
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4322: LD_ADDR_OWVAR 37
4326: PUSH
4327: LD_VAR 0 18
4331: PUSH
4332: LD_INT 1
4334: PPUSH
4335: LD_VAR 0 18
4339: PPUSH
4340: CALL_OW 12
4344: ARRAY
4345: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4346: LD_VAR 0 10
4350: PUSH
4351: LD_VAR 0 13
4355: ARRAY
4356: PUSH
4357: LD_INT 8
4359: EQUAL
4360: PUSH
4361: LD_VAR 0 10
4365: PUSH
4366: LD_VAR 0 13
4370: ARRAY
4371: PUSH
4372: LD_INT 6
4374: EQUAL
4375: OR
4376: PUSH
4377: LD_VAR 0 10
4381: PUSH
4382: LD_VAR 0 13
4386: ARRAY
4387: PUSH
4388: LD_INT 10
4390: EQUAL
4391: OR
4392: IFFALSE 4433
// begin amChassisTab = [ 4 , 5 ] ;
4394: LD_ADDR_VAR 0 18
4398: PUSH
4399: LD_INT 4
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4409: LD_ADDR_OWVAR 37
4413: PUSH
4414: LD_VAR 0 18
4418: PUSH
4419: LD_INT 1
4421: PPUSH
4422: LD_VAR 0 18
4426: PPUSH
4427: CALL_OW 12
4431: ARRAY
4432: ST_TO_ADDR
// end ; end ;
4433: GO 4133
4435: POP
4436: POP
// veh = CreateVehicle ;
4437: LD_ADDR_VAR 0 15
4441: PUSH
4442: CALL_OW 45
4446: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4447: LD_VAR 0 15
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL_OW 49
// if vc_control = 1 then
4464: LD_OWVAR 38
4468: PUSH
4469: LD_INT 1
4471: EQUAL
4472: IFFALSE 4529
// begin hc_gallery =  ;
4474: LD_ADDR_OWVAR 33
4478: PUSH
4479: LD_STRING 
4481: ST_TO_ADDR
// hc_name =  ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING 
4489: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4490: LD_INT 0
4492: PPUSH
4493: LD_INT 3
4495: PPUSH
4496: LD_VAR 0 4
4500: PPUSH
4501: CALL_OW 380
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 14
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4515: LD_VAR 0 14
4519: PPUSH
4520: LD_VAR 0 15
4524: PPUSH
4525: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
4529: LD_ADDR_EXP 25
4533: PUSH
4534: LD_EXP 25
4538: PUSH
4539: LD_VAR 0 15
4543: ADD
4544: ST_TO_ADDR
// i = i + 1 ;
4545: LD_ADDR_VAR 0 12
4549: PUSH
4550: LD_VAR 0 12
4554: PUSH
4555: LD_INT 1
4557: PLUS
4558: ST_TO_ADDR
// end ; if nation = 2 then
4559: LD_VAR 0 5
4563: PUSH
4564: LD_INT 2
4566: EQUAL
4567: IFFALSE 5060
// begin uc_side = side ;
4569: LD_ADDR_OWVAR 20
4573: PUSH
4574: LD_VAR 0 2
4578: ST_TO_ADDR
// uc_nation = nation ;
4579: LD_ADDR_OWVAR 21
4583: PUSH
4584: LD_VAR 0 5
4588: ST_TO_ADDR
// vc_engine = vehengine ;
4589: LD_ADDR_OWVAR 39
4593: PUSH
4594: LD_VAR 0 6
4598: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4599: LD_ADDR_OWVAR 38
4603: PUSH
4604: LD_VAR 0 7
4608: PUSH
4609: LD_INT 1
4611: PPUSH
4612: LD_VAR 0 7
4616: PPUSH
4617: CALL_OW 12
4621: ARRAY
4622: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4623: LD_ADDR_OWVAR 40
4627: PUSH
4628: LD_VAR 0 9
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_VAR 0 9
4640: PPUSH
4641: CALL_OW 12
4645: ARRAY
4646: ST_TO_ADDR
// for j = 1 to ARWeapons do
4647: LD_ADDR_VAR 0 13
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_VAR 0 9
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4936
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4665: LD_VAR 0 9
4669: PUSH
4670: LD_VAR 0 13
4674: ARRAY
4675: PUSH
4676: LD_INT 24
4678: EQUAL
4679: PUSH
4680: LD_VAR 0 9
4684: PUSH
4685: LD_VAR 0 13
4689: ARRAY
4690: PUSH
4691: LD_INT 22
4693: EQUAL
4694: OR
4695: PUSH
4696: LD_VAR 0 9
4700: PUSH
4701: LD_VAR 0 13
4705: ARRAY
4706: PUSH
4707: LD_INT 23
4709: EQUAL
4710: OR
4711: PUSH
4712: LD_VAR 0 9
4716: PUSH
4717: LD_VAR 0 13
4721: ARRAY
4722: PUSH
4723: LD_INT 30
4725: EQUAL
4726: OR
4727: IFFALSE 4764
// begin arChassisTab = [ 14 ] ;
4729: LD_ADDR_VAR 0 17
4733: PUSH
4734: LD_INT 14
4736: PUSH
4737: EMPTY
4738: LIST
4739: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4740: LD_ADDR_OWVAR 37
4744: PUSH
4745: LD_VAR 0 17
4749: PUSH
4750: LD_INT 1
4752: PPUSH
4753: LD_VAR 0 17
4757: PPUSH
4758: CALL_OW 12
4762: ARRAY
4763: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4764: LD_VAR 0 9
4768: PUSH
4769: LD_VAR 0 13
4773: ARRAY
4774: PUSH
4775: LD_INT 29
4777: EQUAL
4778: PUSH
4779: LD_VAR 0 9
4783: PUSH
4784: LD_VAR 0 13
4788: ARRAY
4789: PUSH
4790: LD_INT 28
4792: EQUAL
4793: OR
4794: PUSH
4795: LD_VAR 0 9
4799: PUSH
4800: LD_VAR 0 13
4804: ARRAY
4805: PUSH
4806: LD_INT 27
4808: EQUAL
4809: OR
4810: PUSH
4811: LD_VAR 0 9
4815: PUSH
4816: LD_VAR 0 13
4820: ARRAY
4821: PUSH
4822: LD_INT 26
4824: EQUAL
4825: OR
4826: PUSH
4827: LD_VAR 0 9
4831: PUSH
4832: LD_VAR 0 13
4836: ARRAY
4837: PUSH
4838: LD_INT 25
4840: EQUAL
4841: OR
4842: IFFALSE 4883
// begin arChassisTab = [ 14 , 16 ] ;
4844: LD_ADDR_VAR 0 17
4848: PUSH
4849: LD_INT 14
4851: PUSH
4852: LD_INT 16
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4859: LD_ADDR_OWVAR 37
4863: PUSH
4864: LD_VAR 0 17
4868: PUSH
4869: LD_INT 1
4871: PPUSH
4872: LD_VAR 0 17
4876: PPUSH
4877: CALL_OW 12
4881: ARRAY
4882: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 then
4883: LD_VAR 0 9
4887: PUSH
4888: LD_VAR 0 13
4892: ARRAY
4893: PUSH
4894: LD_INT 72
4896: EQUAL
4897: IFFALSE 4934
// begin arChassisTab = [ 16 ] ;
4899: LD_ADDR_VAR 0 17
4903: PUSH
4904: LD_INT 16
4906: PUSH
4907: EMPTY
4908: LIST
4909: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4910: LD_ADDR_OWVAR 37
4914: PUSH
4915: LD_VAR 0 17
4919: PUSH
4920: LD_INT 1
4922: PPUSH
4923: LD_VAR 0 17
4927: PPUSH
4928: CALL_OW 12
4932: ARRAY
4933: ST_TO_ADDR
// end ; end ;
4934: GO 4662
4936: POP
4937: POP
// veh = CreateVehicle ;
4938: LD_ADDR_VAR 0 15
4942: PUSH
4943: CALL_OW 45
4947: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4948: LD_VAR 0 15
4952: PPUSH
4953: LD_VAR 0 1
4957: PPUSH
4958: LD_INT 0
4960: PPUSH
4961: CALL_OW 49
// if vc_control = 1 then
4965: LD_OWVAR 38
4969: PUSH
4970: LD_INT 1
4972: EQUAL
4973: IFFALSE 5030
// begin hc_gallery =  ;
4975: LD_ADDR_OWVAR 33
4979: PUSH
4980: LD_STRING 
4982: ST_TO_ADDR
// hc_name =  ;
4983: LD_ADDR_OWVAR 26
4987: PUSH
4988: LD_STRING 
4990: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4991: LD_INT 0
4993: PPUSH
4994: LD_INT 3
4996: PPUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: CALL_OW 380
// un = CreateHuman ;
5006: LD_ADDR_VAR 0 14
5010: PUSH
5011: CALL_OW 44
5015: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5016: LD_VAR 0 14
5020: PPUSH
5021: LD_VAR 0 15
5025: PPUSH
5026: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
5030: LD_ADDR_EXP 25
5034: PUSH
5035: LD_EXP 25
5039: PUSH
5040: LD_VAR 0 15
5044: ADD
5045: ST_TO_ADDR
// i = i + 1 ;
5046: LD_ADDR_VAR 0 12
5050: PUSH
5051: LD_VAR 0 12
5055: PUSH
5056: LD_INT 1
5058: PLUS
5059: ST_TO_ADDR
// end ; if nation = 3 then
5060: LD_VAR 0 5
5064: PUSH
5065: LD_INT 3
5067: EQUAL
5068: IFFALSE 5456
// begin uc_side = side ;
5070: LD_ADDR_OWVAR 20
5074: PUSH
5075: LD_VAR 0 2
5079: ST_TO_ADDR
// uc_nation = nation ;
5080: LD_ADDR_OWVAR 21
5084: PUSH
5085: LD_VAR 0 5
5089: ST_TO_ADDR
// vc_engine = vehengine ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_VAR 0 6
5099: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
5100: LD_ADDR_OWVAR 38
5104: PUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 1
5112: PPUSH
5113: LD_VAR 0 7
5117: PPUSH
5118: CALL_OW 12
5122: ARRAY
5123: ST_TO_ADDR
// RUWeaponChosen := RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5124: LD_ADDR_VAR 0 21
5128: PUSH
5129: LD_VAR 0 8
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_VAR 0 8
5141: PPUSH
5142: CALL_OW 12
5146: ARRAY
5147: ST_TO_ADDR
// vc_weapon = RUWeaponChosen ;
5148: LD_ADDR_OWVAR 40
5152: PUSH
5153: LD_VAR 0 21
5157: ST_TO_ADDR
// if RUWeaponChosen = 42 or RUWeaponChosen = 43 or RUWeaponChosen = 44 or RUWeaponChosen = 45 or RUWeaponChosen = 49 or RUWeaponChosen = 75 or RUWeaponChosen = 76 then
5158: LD_VAR 0 21
5162: PUSH
5163: LD_INT 42
5165: EQUAL
5166: PUSH
5167: LD_VAR 0 21
5171: PUSH
5172: LD_INT 43
5174: EQUAL
5175: OR
5176: PUSH
5177: LD_VAR 0 21
5181: PUSH
5182: LD_INT 44
5184: EQUAL
5185: OR
5186: PUSH
5187: LD_VAR 0 21
5191: PUSH
5192: LD_INT 45
5194: EQUAL
5195: OR
5196: PUSH
5197: LD_VAR 0 21
5201: PUSH
5202: LD_INT 49
5204: EQUAL
5205: OR
5206: PUSH
5207: LD_VAR 0 21
5211: PUSH
5212: LD_INT 75
5214: EQUAL
5215: OR
5216: PUSH
5217: LD_VAR 0 21
5221: PUSH
5222: LD_INT 76
5224: EQUAL
5225: OR
5226: IFFALSE 5275
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5228: LD_ADDR_VAR 0 16
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 22
5238: PUSH
5239: LD_INT 23
5241: PUSH
5242: LD_INT 24
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5251: LD_ADDR_OWVAR 37
5255: PUSH
5256: LD_VAR 0 16
5260: PUSH
5261: LD_INT 1
5263: PPUSH
5264: LD_VAR 0 16
5268: PPUSH
5269: CALL_OW 12
5273: ARRAY
5274: ST_TO_ADDR
// end ; if RUWeaponChosen = 46 or RUWeaponChosen = 47 then
5275: LD_VAR 0 21
5279: PUSH
5280: LD_INT 46
5282: EQUAL
5283: PUSH
5284: LD_VAR 0 21
5288: PUSH
5289: LD_INT 47
5291: EQUAL
5292: OR
5293: IFFALSE 5334
// begin ruChassisTab = [ 23 , 24 ] ;
5295: LD_ADDR_VAR 0 16
5299: PUSH
5300: LD_INT 23
5302: PUSH
5303: LD_INT 24
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5310: LD_ADDR_OWVAR 37
5314: PUSH
5315: LD_VAR 0 16
5319: PUSH
5320: LD_INT 1
5322: PPUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: CALL_OW 12
5332: ARRAY
5333: ST_TO_ADDR
// end ; veh = CreateVehicle ;
5334: LD_ADDR_VAR 0 15
5338: PUSH
5339: CALL_OW 45
5343: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5344: LD_VAR 0 15
5348: PPUSH
5349: LD_VAR 0 1
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if vc_control = 1 then
5361: LD_OWVAR 38
5365: PUSH
5366: LD_INT 1
5368: EQUAL
5369: IFFALSE 5426
// begin hc_gallery =  ;
5371: LD_ADDR_OWVAR 33
5375: PUSH
5376: LD_STRING 
5378: ST_TO_ADDR
// hc_name =  ;
5379: LD_ADDR_OWVAR 26
5383: PUSH
5384: LD_STRING 
5386: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5387: LD_INT 0
5389: PPUSH
5390: LD_INT 3
5392: PPUSH
5393: LD_VAR 0 4
5397: PPUSH
5398: CALL_OW 380
// un = CreateHuman ;
5402: LD_ADDR_VAR 0 14
5406: PUSH
5407: CALL_OW 44
5411: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5412: LD_VAR 0 14
5416: PPUSH
5417: LD_VAR 0 15
5421: PPUSH
5422: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
5426: LD_ADDR_EXP 25
5430: PUSH
5431: LD_EXP 25
5435: PUSH
5436: LD_VAR 0 15
5440: ADD
5441: ST_TO_ADDR
// i = i + 1 ;
5442: LD_ADDR_VAR 0 12
5446: PUSH
5447: LD_VAR 0 12
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: ST_TO_ADDR
// end ; until i = vehCount ;
5456: LD_VAR 0 12
5460: PUSH
5461: LD_VAR 0 3
5465: EQUAL
5466: IFFALSE 4023
// end ;
5468: LD_VAR 0 11
5472: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
5473: LD_INT 0
5475: PPUSH
5476: PPUSH
5477: PPUSH
5478: PPUSH
5479: PPUSH
5480: PPUSH
5481: PPUSH
// for i = 1 to medicCount do
5482: LD_ADDR_VAR 0 11
5486: PUSH
5487: DOUBLE
5488: LD_INT 1
5490: DEC
5491: ST_TO_ADDR
5492: LD_VAR 0 7
5496: PUSH
5497: FOR_TO
5498: IFFALSE 5580
// begin uc_side = side ;
5500: LD_ADDR_OWVAR 20
5504: PUSH
5505: LD_VAR 0 1
5509: ST_TO_ADDR
// uc_nation = nation ;
5510: LD_ADDR_OWVAR 21
5514: PUSH
5515: LD_VAR 0 2
5519: ST_TO_ADDR
// hc_name =  ;
5520: LD_ADDR_OWVAR 26
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_gallery =  ;
5528: LD_ADDR_OWVAR 33
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5536: LD_INT 0
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: LD_VAR 0 8
5546: PPUSH
5547: CALL_OW 380
// un = CreateHuman ;
5551: LD_ADDR_VAR 0 13
5555: PUSH
5556: CALL_OW 44
5560: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5561: LD_VAR 0 13
5565: PPUSH
5566: LD_VAR 0 9
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 49
// end ;
5578: GO 5497
5580: POP
5581: POP
// for i = 1 to soldierCount do
5582: LD_ADDR_VAR 0 11
5586: PUSH
5587: DOUBLE
5588: LD_INT 1
5590: DEC
5591: ST_TO_ADDR
5592: LD_VAR 0 3
5596: PUSH
5597: FOR_TO
5598: IFFALSE 5696
// begin uc_side = side ;
5600: LD_ADDR_OWVAR 20
5604: PUSH
5605: LD_VAR 0 1
5609: ST_TO_ADDR
// uc_nation = nation ;
5610: LD_ADDR_OWVAR 21
5614: PUSH
5615: LD_VAR 0 2
5619: ST_TO_ADDR
// hc_name =  ;
5620: LD_ADDR_OWVAR 26
5624: PUSH
5625: LD_STRING 
5627: ST_TO_ADDR
// hc_gallery =  ;
5628: LD_ADDR_OWVAR 33
5632: PUSH
5633: LD_STRING 
5635: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5636: LD_INT 0
5638: PPUSH
5639: LD_INT 1
5641: PPUSH
5642: LD_VAR 0 8
5646: PPUSH
5647: CALL_OW 380
// un = CreateHuman ;
5651: LD_ADDR_VAR 0 13
5655: PUSH
5656: CALL_OW 44
5660: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5661: LD_VAR 0 13
5665: PPUSH
5666: LD_VAR 0 9
5670: PPUSH
5671: LD_INT 0
5673: PPUSH
5674: CALL_OW 49
// attack_group = attack_group ^ un ;
5678: LD_ADDR_EXP 25
5682: PUSH
5683: LD_EXP 25
5687: PUSH
5688: LD_VAR 0 13
5692: ADD
5693: ST_TO_ADDR
// end ;
5694: GO 5597
5696: POP
5697: POP
// for i = 1 to sniperCount do
5698: LD_ADDR_VAR 0 11
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_VAR 0 4
5712: PUSH
5713: FOR_TO
5714: IFFALSE 5812
// begin uc_side = side ;
5716: LD_ADDR_OWVAR 20
5720: PUSH
5721: LD_VAR 0 1
5725: ST_TO_ADDR
// uc_nation = nation ;
5726: LD_ADDR_OWVAR 21
5730: PUSH
5731: LD_VAR 0 2
5735: ST_TO_ADDR
// hc_name =  ;
5736: LD_ADDR_OWVAR 26
5740: PUSH
5741: LD_STRING 
5743: ST_TO_ADDR
// hc_gallery =  ;
5744: LD_ADDR_OWVAR 33
5748: PUSH
5749: LD_STRING 
5751: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5752: LD_INT 0
5754: PPUSH
5755: LD_INT 5
5757: PPUSH
5758: LD_VAR 0 8
5762: PPUSH
5763: CALL_OW 380
// un = CreateHuman ;
5767: LD_ADDR_VAR 0 13
5771: PUSH
5772: CALL_OW 44
5776: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5777: LD_VAR 0 13
5781: PPUSH
5782: LD_VAR 0 9
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 49
// attack_group = attack_group ^ un ;
5794: LD_ADDR_EXP 25
5798: PUSH
5799: LD_EXP 25
5803: PUSH
5804: LD_VAR 0 13
5808: ADD
5809: ST_TO_ADDR
// end ;
5810: GO 5713
5812: POP
5813: POP
// for i = 1 to bazookCount do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 5
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5928
// begin uc_side = side ;
5832: LD_ADDR_OWVAR 20
5836: PUSH
5837: LD_VAR 0 1
5841: ST_TO_ADDR
// uc_nation = nation ;
5842: LD_ADDR_OWVAR 21
5846: PUSH
5847: LD_VAR 0 2
5851: ST_TO_ADDR
// hc_name =  ;
5852: LD_ADDR_OWVAR 26
5856: PUSH
5857: LD_STRING 
5859: ST_TO_ADDR
// hc_gallery =  ;
5860: LD_ADDR_OWVAR 33
5864: PUSH
5865: LD_STRING 
5867: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5868: LD_INT 0
5870: PPUSH
5871: LD_INT 9
5873: PPUSH
5874: LD_VAR 0 8
5878: PPUSH
5879: CALL_OW 380
// un = CreateHuman ;
5883: LD_ADDR_VAR 0 13
5887: PUSH
5888: CALL_OW 44
5892: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5893: LD_VAR 0 13
5897: PPUSH
5898: LD_VAR 0 9
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: CALL_OW 49
// attack_group = attack_group ^ un ;
5910: LD_ADDR_EXP 25
5914: PUSH
5915: LD_EXP 25
5919: PUSH
5920: LD_VAR 0 13
5924: ADD
5925: ST_TO_ADDR
// end ;
5926: GO 5829
5928: POP
5929: POP
// for i = 1 to mortalCount do
5930: LD_ADDR_VAR 0 11
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_VAR 0 6
5944: PUSH
5945: FOR_TO
5946: IFFALSE 6044
// begin uc_side = side ;
5948: LD_ADDR_OWVAR 20
5952: PUSH
5953: LD_VAR 0 1
5957: ST_TO_ADDR
// uc_nation = nation ;
5958: LD_ADDR_OWVAR 21
5962: PUSH
5963: LD_VAR 0 2
5967: ST_TO_ADDR
// hc_name =  ;
5968: LD_ADDR_OWVAR 26
5972: PUSH
5973: LD_STRING 
5975: ST_TO_ADDR
// hc_gallery =  ;
5976: LD_ADDR_OWVAR 33
5980: PUSH
5981: LD_STRING 
5983: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5984: LD_INT 0
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_VAR 0 8
5994: PPUSH
5995: CALL_OW 380
// un = CreateHuman ;
5999: LD_ADDR_VAR 0 13
6003: PUSH
6004: CALL_OW 44
6008: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6009: LD_VAR 0 13
6013: PPUSH
6014: LD_VAR 0 9
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 49
// attack_group = attack_group ^ un ;
6026: LD_ADDR_EXP 25
6030: PUSH
6031: LD_EXP 25
6035: PUSH
6036: LD_VAR 0 13
6040: ADD
6041: ST_TO_ADDR
// end ;
6042: GO 5945
6044: POP
6045: POP
// end ;
6046: LD_VAR 0 10
6050: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
6065: LD_ADDR_VAR 0 6
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 30
6084: PUSH
6085: LD_INT 6
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 69
6100: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
6101: LD_ADDR_VAR 0 6
6105: PUSH
6106: LD_VAR 0 6
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_VAR 0 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 7
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: ADD
6142: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
6143: LD_ADDR_VAR 0 6
6147: PUSH
6148: LD_VAR 0 6
6152: PUSH
6153: LD_INT 22
6155: PUSH
6156: LD_VAR 0 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 30
6167: PUSH
6168: LD_INT 8
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: ADD
6184: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
6185: LD_ADDR_VAR 0 8
6189: PUSH
6190: LD_INT 22
6192: PUSH
6193: LD_VAR 0 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 30
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
6221: LD_ADDR_VAR 0 9
6225: PUSH
6226: LD_INT 22
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 30
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
6257: LD_ADDR_VAR 0 10
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 30
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 69
6292: ST_TO_ADDR
// sklad := sklad ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6293: LD_ADDR_VAR 0 10
6297: PUSH
6298: LD_VAR 0 10
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_VAR 0 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 30
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: ADD
6334: ST_TO_ADDR
// case side of 1 :
6335: LD_VAR 0 1
6339: PUSH
6340: LD_INT 1
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6359
6348: POP
// uc_nation = nation_american ; 3 :
6349: LD_ADDR_OWVAR 21
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
6357: GO 6379
6359: LD_INT 3
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6378
6367: POP
// uc_nation = nation_russian ; end ;
6368: LD_ADDR_OWVAR 21
6372: PUSH
6373: LD_INT 3
6375: ST_TO_ADDR
6376: GO 6379
6378: POP
// for i = 1 to laby do
6379: LD_ADDR_VAR 0 3
6383: PUSH
6384: DOUBLE
6385: LD_INT 1
6387: DEC
6388: ST_TO_ADDR
6389: LD_VAR 0 6
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6524
// begin if IsInUnit ( laby [ i ] ) = 0 then
6397: LD_VAR 0 6
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 310
6412: PUSH
6413: LD_INT 0
6415: EQUAL
6416: IFFALSE 6522
// begin uc_side = side ;
6418: LD_ADDR_OWVAR 20
6422: PUSH
6423: LD_VAR 0 1
6427: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6428: LD_ADDR_VAR 0 11
6432: PUSH
6433: LD_INT 2
6435: PPUSH
6436: LD_INT 4
6438: PPUSH
6439: CALL_OW 12
6443: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6444: LD_ADDR_VAR 0 4
6448: PUSH
6449: DOUBLE
6450: LD_INT 1
6452: DEC
6453: ST_TO_ADDR
6454: LD_VAR 0 11
6458: PUSH
6459: FOR_TO
6460: IFFALSE 6520
// begin PrepareScientist ( 0 , 4 ) ;
6462: LD_INT 0
6464: PPUSH
6465: LD_INT 4
6467: PPUSH
6468: CALL_OW 384
// ludz = CreateHuman ;
6472: LD_ADDR_VAR 0 12
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
6482: LD_VAR 0 12
6486: PPUSH
6487: LD_VAR 0 6
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: PPUSH
6498: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6502: LD_ADDR_VAR 0 11
6506: PUSH
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 4
6512: PPUSH
6513: CALL_OW 12
6517: ST_TO_ADDR
// end ;
6518: GO 6459
6520: POP
6521: POP
// end ; end ;
6522: GO 6394
6524: POP
6525: POP
// for i = 1 to fabryki do
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_VAR 0 9
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6671
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 3
6553: ARRAY
6554: PPUSH
6555: CALL_OW 310
6559: PUSH
6560: LD_INT 0
6562: EQUAL
6563: IFFALSE 6669
// begin uc_side = side ;
6565: LD_ADDR_OWVAR 20
6569: PUSH
6570: LD_VAR 0 1
6574: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6575: LD_ADDR_VAR 0 11
6579: PUSH
6580: LD_INT 2
6582: PPUSH
6583: LD_INT 4
6585: PPUSH
6586: CALL_OW 12
6590: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_VAR 0 11
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6667
// begin PrepareMechanic ( 0 , 4 ) ;
6609: LD_INT 0
6611: PPUSH
6612: LD_INT 4
6614: PPUSH
6615: CALL_OW 383
// ludz = CreateHuman ;
6619: LD_ADDR_VAR 0 12
6623: PUSH
6624: CALL_OW 44
6628: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
6629: LD_VAR 0 12
6633: PPUSH
6634: LD_VAR 0 9
6638: PUSH
6639: LD_VAR 0 3
6643: ARRAY
6644: PPUSH
6645: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6649: LD_ADDR_VAR 0 11
6653: PUSH
6654: LD_INT 2
6656: PPUSH
6657: LD_INT 4
6659: PPUSH
6660: CALL_OW 12
6664: ST_TO_ADDR
// end ;
6665: GO 6606
6667: POP
6668: POP
// end ; end ;
6669: GO 6541
6671: POP
6672: POP
// for i = 1 to warsztaty do
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: DOUBLE
6679: LD_INT 1
6681: DEC
6682: ST_TO_ADDR
6683: LD_VAR 0 8
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6818
// begin if IsInUnit ( warsztaty [ i ] ) = 0 then
6691: LD_VAR 0 8
6695: PUSH
6696: LD_VAR 0 3
6700: ARRAY
6701: PPUSH
6702: CALL_OW 310
6706: PUSH
6707: LD_INT 0
6709: EQUAL
6710: IFFALSE 6816
// begin uc_side = side ;
6712: LD_ADDR_OWVAR 20
6716: PUSH
6717: LD_VAR 0 1
6721: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6722: LD_ADDR_VAR 0 11
6726: PUSH
6727: LD_INT 2
6729: PPUSH
6730: LD_INT 4
6732: PPUSH
6733: CALL_OW 12
6737: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6738: LD_ADDR_VAR 0 4
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 11
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6814
// begin PrepareMechanic ( 0 , 4 ) ;
6756: LD_INT 0
6758: PPUSH
6759: LD_INT 4
6761: PPUSH
6762: CALL_OW 383
// ludz = CreateHuman ;
6766: LD_ADDR_VAR 0 12
6770: PUSH
6771: CALL_OW 44
6775: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , warsztaty [ i ] ) ;
6776: LD_VAR 0 12
6780: PPUSH
6781: LD_VAR 0 8
6785: PUSH
6786: LD_VAR 0 3
6790: ARRAY
6791: PPUSH
6792: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6796: LD_ADDR_VAR 0 11
6800: PUSH
6801: LD_INT 2
6803: PPUSH
6804: LD_INT 4
6806: PPUSH
6807: CALL_OW 12
6811: ST_TO_ADDR
// end ;
6812: GO 6753
6814: POP
6815: POP
// end ; end ;
6816: GO 6688
6818: POP
6819: POP
// for i = 1 to sklad do
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: DOUBLE
6826: LD_INT 1
6828: DEC
6829: ST_TO_ADDR
6830: LD_VAR 0 10
6834: PUSH
6835: FOR_TO
6836: IFFALSE 6949
// begin if IsInUnit ( sklad [ i ] ) = 0 then
6838: LD_VAR 0 10
6842: PUSH
6843: LD_VAR 0 3
6847: ARRAY
6848: PPUSH
6849: CALL_OW 310
6853: PUSH
6854: LD_INT 0
6856: EQUAL
6857: IFFALSE 6947
// begin uc_side = side ;
6859: LD_ADDR_OWVAR 20
6863: PUSH
6864: LD_VAR 0 1
6868: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
6869: LD_ADDR_VAR 0 11
6873: PUSH
6874: LD_INT 2
6876: PPUSH
6877: LD_INT 3
6879: PPUSH
6880: CALL_OW 12
6884: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6885: LD_ADDR_VAR 0 4
6889: PUSH
6890: DOUBLE
6891: LD_INT 1
6893: DEC
6894: ST_TO_ADDR
6895: LD_VAR 0 11
6899: PUSH
6900: FOR_TO
6901: IFFALSE 6945
// begin PrepareEngineer ( 0 , 4 ) ;
6903: LD_INT 0
6905: PPUSH
6906: LD_INT 4
6908: PPUSH
6909: CALL_OW 382
// ludz = CreateHuman ;
6913: LD_ADDR_VAR 0 12
6917: PUSH
6918: CALL_OW 44
6922: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
6923: LD_VAR 0 12
6927: PPUSH
6928: LD_VAR 0 10
6932: PUSH
6933: LD_VAR 0 3
6937: ARRAY
6938: PPUSH
6939: CALL_OW 52
// end ;
6943: GO 6900
6945: POP
6946: POP
// end ; end ;
6947: GO 6835
6949: POP
6950: POP
// end ;
6951: LD_VAR 0 2
6955: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
// case side of 1 :
6964: LD_VAR 0 1
6968: PUSH
6969: LD_INT 1
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 6988
6977: POP
// uc_nation = nation_american ; 3 :
6978: LD_ADDR_OWVAR 21
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
6986: GO 7008
6988: LD_INT 3
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7007
6996: POP
// uc_nation = nation_russian ; end ;
6997: LD_ADDR_OWVAR 21
7001: PUSH
7002: LD_INT 3
7004: ST_TO_ADDR
7005: GO 7008
7007: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
7008: LD_ADDR_VAR 0 5
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_VAR 0 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 30
7027: PUSH
7028: LD_INT 5
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: ST_TO_ADDR
// for i = 1 to barrack do
7044: LD_ADDR_VAR 0 3
7048: PUSH
7049: DOUBLE
7050: LD_INT 1
7052: DEC
7053: ST_TO_ADDR
7054: LD_VAR 0 5
7058: PUSH
7059: FOR_TO
7060: IFFALSE 7233
// begin if IsInUnit ( barrack [ i ] ) = 0 then
7062: LD_VAR 0 5
7066: PUSH
7067: LD_VAR 0 3
7071: ARRAY
7072: PPUSH
7073: CALL_OW 310
7077: PUSH
7078: LD_INT 0
7080: EQUAL
7081: IFFALSE 7231
// begin uc_side = side ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_VAR 0 1
7092: ST_TO_ADDR
// for j = 1 to 2 do
7093: LD_ADDR_VAR 0 4
7097: PUSH
7098: DOUBLE
7099: LD_INT 1
7101: DEC
7102: ST_TO_ADDR
7103: LD_INT 2
7105: PUSH
7106: FOR_TO
7107: IFFALSE 7151
// begin PrepareSoldier ( 0 , 5 ) ;
7109: LD_INT 0
7111: PPUSH
7112: LD_INT 5
7114: PPUSH
7115: CALL_OW 381
// soldat := CreateHuman ;
7119: LD_ADDR_VAR 0 6
7123: PUSH
7124: CALL_OW 44
7128: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7129: LD_VAR 0 6
7133: PPUSH
7134: LD_VAR 0 5
7138: PUSH
7139: LD_VAR 0 3
7143: ARRAY
7144: PPUSH
7145: CALL_OW 52
// end ;
7149: GO 7106
7151: POP
7152: POP
// if side = 3 then
7153: LD_VAR 0 1
7157: PUSH
7158: LD_INT 3
7160: EQUAL
7161: IFFALSE 7231
// for j = 1 to 2 do
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: DOUBLE
7169: LD_INT 1
7171: DEC
7172: ST_TO_ADDR
7173: LD_INT 2
7175: PUSH
7176: FOR_TO
7177: IFFALSE 7229
// begin PrepareSoldier ( 0 , 5 ) ;
7179: LD_INT 0
7181: PPUSH
7182: LD_INT 5
7184: PPUSH
7185: CALL_OW 381
// hc_class = class_bazooker ;
7189: LD_ADDR_OWVAR 28
7193: PUSH
7194: LD_INT 9
7196: ST_TO_ADDR
// soldat := CreateHuman ;
7197: LD_ADDR_VAR 0 6
7201: PUSH
7202: CALL_OW 44
7206: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7207: LD_VAR 0 6
7211: PPUSH
7212: LD_VAR 0 5
7216: PUSH
7217: LD_VAR 0 3
7221: ARRAY
7222: PPUSH
7223: CALL_OW 52
// end ;
7227: GO 7176
7229: POP
7230: POP
// end ; end ;
7231: GO 7059
7233: POP
7234: POP
// end ;
7235: LD_VAR 0 2
7239: RET
// export function Assemble_Armories ( side ) ; var i , j , barrack , soldat , filter ; begin
7240: LD_INT 0
7242: PPUSH
7243: PPUSH
7244: PPUSH
7245: PPUSH
7246: PPUSH
7247: PPUSH
// case side of 1 :
7248: LD_VAR 0 1
7252: PUSH
7253: LD_INT 1
7255: DOUBLE
7256: EQUAL
7257: IFTRUE 7261
7259: GO 7272
7261: POP
// uc_nation = nation_american ; 3 :
7262: LD_ADDR_OWVAR 21
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
7270: GO 7292
7272: LD_INT 3
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7291
7280: POP
// uc_nation = nation_russian ; end ;
7281: LD_ADDR_OWVAR 21
7285: PUSH
7286: LD_INT 3
7288: ST_TO_ADDR
7289: GO 7292
7291: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_armoury ] ] ) ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_INT 22
7299: PUSH
7300: LD_VAR 0 1
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 30
7311: PUSH
7312: LD_INT 4
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PPUSH
7323: CALL_OW 69
7327: ST_TO_ADDR
// for i = 1 to barrack do
7328: LD_ADDR_VAR 0 3
7332: PUSH
7333: DOUBLE
7334: LD_INT 1
7336: DEC
7337: ST_TO_ADDR
7338: LD_VAR 0 5
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7439
// begin if IsInUnit ( barrack [ i ] ) = 0 then
7346: LD_VAR 0 5
7350: PUSH
7351: LD_VAR 0 3
7355: ARRAY
7356: PPUSH
7357: CALL_OW 310
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7437
// begin uc_side = side ;
7367: LD_ADDR_OWVAR 20
7371: PUSH
7372: LD_VAR 0 1
7376: ST_TO_ADDR
// for j = 1 to 3 do
7377: LD_ADDR_VAR 0 4
7381: PUSH
7382: DOUBLE
7383: LD_INT 1
7385: DEC
7386: ST_TO_ADDR
7387: LD_INT 3
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7435
// begin PrepareSoldier ( 0 , 5 ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_INT 5
7398: PPUSH
7399: CALL_OW 381
// soldat := CreateHuman ;
7403: LD_ADDR_VAR 0 6
7407: PUSH
7408: CALL_OW 44
7412: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7413: LD_VAR 0 6
7417: PPUSH
7418: LD_VAR 0 5
7422: PUSH
7423: LD_VAR 0 3
7427: ARRAY
7428: PPUSH
7429: CALL_OW 52
// end ;
7433: GO 7390
7435: POP
7436: POP
// end ; end ;
7437: GO 7343
7439: POP
7440: POP
// end ;
7441: LD_VAR 0 2
7445: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
7446: LD_INT 0
7448: PPUSH
7449: PPUSH
// dir := GetDir ( b ) ;
7450: LD_ADDR_VAR 0 4
7454: PUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL_OW 254
7464: ST_TO_ADDR
// if dir < 3 then
7465: LD_VAR 0 4
7469: PUSH
7470: LD_INT 3
7472: LESS
7473: IFFALSE 7491
// dir := dir + 3 else
7475: LD_ADDR_VAR 0 4
7479: PUSH
7480: LD_VAR 0 4
7484: PUSH
7485: LD_INT 3
7487: PLUS
7488: ST_TO_ADDR
7489: GO 7505
// dir := dir - 3 ;
7491: LD_ADDR_VAR 0 4
7495: PUSH
7496: LD_VAR 0 4
7500: PUSH
7501: LD_INT 3
7503: MINUS
7504: ST_TO_ADDR
// SetDir ( un , dir ) ;
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7519: LD_VAR 0 1
7523: PPUSH
7524: LD_VAR 0 2
7528: PPUSH
7529: CALL_OW 52
// end ;
7533: LD_VAR 0 3
7537: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
7544: LD_ADDR_VAR 0 4
7548: PUSH
7549: LD_INT 22
7551: PUSH
7552: LD_VAR 0 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 23
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 31
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 69
7590: ST_TO_ADDR
// for i = 1 to filter do
7591: LD_ADDR_VAR 0 3
7595: PUSH
7596: DOUBLE
7597: LD_INT 1
7599: DEC
7600: ST_TO_ADDR
7601: LD_VAR 0 4
7605: PUSH
7606: FOR_TO
7607: IFFALSE 7692
// if IsInUnit ( filter [ i ] ) = 0 then
7609: LD_VAR 0 4
7613: PUSH
7614: LD_VAR 0 3
7618: ARRAY
7619: PPUSH
7620: CALL_OW 310
7624: PUSH
7625: LD_INT 0
7627: EQUAL
7628: IFFALSE 7690
// begin uc_nation = nation_russian ;
7630: LD_ADDR_OWVAR 21
7634: PUSH
7635: LD_INT 3
7637: ST_TO_ADDR
// uc_side = side ;
7638: LD_ADDR_OWVAR 20
7642: PUSH
7643: LD_VAR 0 1
7647: ST_TO_ADDR
// PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7648: LD_INT 1
7650: PPUSH
7651: LD_EXP 42
7655: PPUSH
7656: CALL_OW 381
// un := CreateHuman ;
7660: LD_ADDR_VAR 0 5
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
7670: LD_VAR 0 5
7674: PPUSH
7675: LD_VAR 0 4
7679: PUSH
7680: LD_VAR 0 3
7684: ARRAY
7685: PPUSH
7686: CALL 7446 0 2
// end ;
7690: GO 7606
7692: POP
7693: POP
// end ;
7694: LD_VAR 0 2
7698: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
7699: LD_INT 0
7701: PPUSH
7702: PPUSH
7703: PPUSH
7704: PPUSH
// uc_side := side ;
7705: LD_ADDR_OWVAR 20
7709: PUSH
7710: LD_VAR 0 1
7714: ST_TO_ADDR
// uc_nation := 3 ;
7715: LD_ADDR_OWVAR 21
7719: PUSH
7720: LD_INT 3
7722: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
7723: LD_ADDR_VAR 0 3
7727: PUSH
7728: LD_INT 22
7730: PUSH
7731: LD_VAR 0 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 30
7742: PUSH
7743: LD_INT 32
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 58
7752: PUSH
7753: EMPTY
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: PPUSH
7761: CALL_OW 69
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7797
// begin PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7769: LD_INT 1
7771: PPUSH
7772: LD_EXP 42
7776: PPUSH
7777: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
7781: CALL_OW 44
7785: PPUSH
7786: LD_VAR 0 3
7790: PPUSH
7791: CALL_OW 52
// end ;
7795: GO 7766
7797: POP
7798: POP
// end ;
7799: LD_VAR 0 2
7803: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
7804: LD_INT 0
7806: PPUSH
// if not unit then
7807: LD_VAR 0 1
7811: NOT
7812: IFFALSE 7816
// exit ;
7814: GO 7850
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
7816: LD_VAR 0 1
7820: PPUSH
7821: LD_VAR 0 2
7825: PUSH
7826: LD_VAR 0 3
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_VAR 0 1
7839: PPUSH
7840: CALL_OW 258
7844: ARRAY
7845: PPUSH
7846: CALL_OW 88
// end ;
7850: LD_VAR 0 4
7854: RET
// export function RussianFirstAssault ; var i , filter , un , veh ; begin
7855: LD_INT 0
7857: PPUSH
7858: PPUSH
7859: PPUSH
7860: PPUSH
7861: PPUSH
// uc_nation = nation_russian ;
7862: LD_ADDR_OWVAR 21
7866: PUSH
7867: LD_INT 3
7869: ST_TO_ADDR
// uc_side = 3 ;
7870: LD_ADDR_OWVAR 20
7874: PUSH
7875: LD_INT 3
7877: ST_TO_ADDR
// for i = 1 to 8 do
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: DOUBLE
7884: LD_INT 1
7886: DEC
7887: ST_TO_ADDR
7888: LD_INT 8
7890: PUSH
7891: FOR_TO
7892: IFFALSE 7969
// begin vc_chassis := ru_medium_wheeled ;
7894: LD_ADDR_OWVAR 37
7898: PUSH
7899: LD_INT 21
7901: ST_TO_ADDR
// vc_engine := engine_siberite ;
7902: LD_ADDR_OWVAR 39
7906: PUSH
7907: LD_INT 3
7909: ST_TO_ADDR
// vc_weapon := ru_gun ;
7910: LD_ADDR_OWVAR 40
7914: PUSH
7915: LD_INT 44
7917: ST_TO_ADDR
// vc_control := control_computer ;
7918: LD_ADDR_OWVAR 38
7922: PUSH
7923: LD_INT 3
7925: ST_TO_ADDR
// veh := CreateVehicle ;
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: CALL_OW 45
7935: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
7936: LD_VAR 0 5
7940: PPUSH
7941: LD_INT 2
7943: PPUSH
7944: LD_INT 0
7946: PPUSH
7947: CALL_OW 49
// RusHarassSquad = RusHarassSquad ^ veh ;
7951: LD_ADDR_EXP 26
7955: PUSH
7956: LD_EXP 26
7960: PUSH
7961: LD_VAR 0 5
7965: ADD
7966: ST_TO_ADDR
// end ;
7967: GO 7891
7969: POP
7970: POP
// ComMoveXY ( RusHarassSquad , 135 , 144 ) ;
7971: LD_EXP 26
7975: PPUSH
7976: LD_INT 135
7978: PPUSH
7979: LD_INT 144
7981: PPUSH
7982: CALL_OW 111
// AddComMoveXY ( RusHarassSquad , 158 , 176 ) ;
7986: LD_EXP 26
7990: PPUSH
7991: LD_INT 158
7993: PPUSH
7994: LD_INT 176
7996: PPUSH
7997: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 189 ) ;
8001: LD_EXP 26
8005: PPUSH
8006: LD_INT 169
8008: PPUSH
8009: LD_INT 189
8011: PPUSH
8012: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 176 , 225 ) ;
8016: LD_EXP 26
8020: PPUSH
8021: LD_INT 176
8023: PPUSH
8024: LD_INT 225
8026: PPUSH
8027: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 88 ) ;
8031: LD_EXP 26
8035: PPUSH
8036: LD_INT 169
8038: PPUSH
8039: LD_INT 88
8041: PPUSH
8042: CALL_OW 171
// end ;
8046: LD_VAR 0 1
8050: RET
// export RU2_Sols , RU2_Medics , RU2_Engs ; export function RU2_Assemble_MineBase ; var i , un ; begin
8051: LD_INT 0
8053: PPUSH
8054: PPUSH
8055: PPUSH
// uc_side = 6 ;
8056: LD_ADDR_OWVAR 20
8060: PUSH
8061: LD_INT 6
8063: ST_TO_ADDR
// uc_nation = 3 ;
8064: LD_ADDR_OWVAR 21
8068: PUSH
8069: LD_INT 3
8071: ST_TO_ADDR
// for i = 1 to 14 do
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: DOUBLE
8078: LD_INT 1
8080: DEC
8081: ST_TO_ADDR
8082: LD_INT 14
8084: PUSH
8085: FOR_TO
8086: IFFALSE 8188
// begin uc_side = 6 ;
8088: LD_ADDR_OWVAR 20
8092: PUSH
8093: LD_INT 6
8095: ST_TO_ADDR
// uc_nation = 3 ;
8096: LD_ADDR_OWVAR 21
8100: PUSH
8101: LD_INT 3
8103: ST_TO_ADDR
// hc_gallery =  ;
8104: LD_ADDR_OWVAR 33
8108: PUSH
8109: LD_STRING 
8111: ST_TO_ADDR
// hc_name =  ;
8112: LD_ADDR_OWVAR 26
8116: PUSH
8117: LD_STRING 
8119: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8120: LD_INT 0
8122: PPUSH
8123: LD_INT 1
8125: PPUSH
8126: LD_EXP 41
8130: PPUSH
8131: LD_EXP 42
8135: PPUSH
8136: CALL_OW 12
8140: PPUSH
8141: CALL_OW 380
// un = CreateHuman ;
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: CALL_OW 44
8154: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_INT 2
8162: PPUSH
8163: LD_INT 0
8165: PPUSH
8166: CALL_OW 49
// RU2_Sols = RU2_Sols ^ un ;
8170: LD_ADDR_EXP 32
8174: PUSH
8175: LD_EXP 32
8179: PUSH
8180: LD_VAR 0 3
8184: ADD
8185: ST_TO_ADDR
// end ;
8186: GO 8085
8188: POP
8189: POP
// for i = 1 to 4 do
8190: LD_ADDR_VAR 0 2
8194: PUSH
8195: DOUBLE
8196: LD_INT 1
8198: DEC
8199: ST_TO_ADDR
8200: LD_INT 4
8202: PUSH
8203: FOR_TO
8204: IFFALSE 8306
// begin uc_side = 6 ;
8206: LD_ADDR_OWVAR 20
8210: PUSH
8211: LD_INT 6
8213: ST_TO_ADDR
// uc_nation = 3 ;
8214: LD_ADDR_OWVAR 21
8218: PUSH
8219: LD_INT 3
8221: ST_TO_ADDR
// hc_gallery =  ;
8222: LD_ADDR_OWVAR 33
8226: PUSH
8227: LD_STRING 
8229: ST_TO_ADDR
// hc_name =  ;
8230: LD_ADDR_OWVAR 26
8234: PUSH
8235: LD_STRING 
8237: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8238: LD_INT 0
8240: PPUSH
8241: LD_INT 2
8243: PPUSH
8244: LD_EXP 41
8248: PPUSH
8249: LD_EXP 42
8253: PPUSH
8254: CALL_OW 12
8258: PPUSH
8259: CALL_OW 380
// un = CreateHuman ;
8263: LD_ADDR_VAR 0 3
8267: PUSH
8268: CALL_OW 44
8272: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 2
8280: PPUSH
8281: LD_INT 0
8283: PPUSH
8284: CALL_OW 49
// RU2_Engs = RU2_Engs ^ un ;
8288: LD_ADDR_EXP 34
8292: PUSH
8293: LD_EXP 34
8297: PUSH
8298: LD_VAR 0 3
8302: ADD
8303: ST_TO_ADDR
// end ;
8304: GO 8203
8306: POP
8307: POP
// for i = 1 to 2 do
8308: LD_ADDR_VAR 0 2
8312: PUSH
8313: DOUBLE
8314: LD_INT 1
8316: DEC
8317: ST_TO_ADDR
8318: LD_INT 2
8320: PUSH
8321: FOR_TO
8322: IFFALSE 8424
// begin uc_side = 6 ;
8324: LD_ADDR_OWVAR 20
8328: PUSH
8329: LD_INT 6
8331: ST_TO_ADDR
// uc_nation = 3 ;
8332: LD_ADDR_OWVAR 21
8336: PUSH
8337: LD_INT 3
8339: ST_TO_ADDR
// hc_gallery =  ;
8340: LD_ADDR_OWVAR 33
8344: PUSH
8345: LD_STRING 
8347: ST_TO_ADDR
// hc_name =  ;
8348: LD_ADDR_OWVAR 26
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8356: LD_INT 0
8358: PPUSH
8359: LD_INT 4
8361: PPUSH
8362: LD_EXP 41
8366: PPUSH
8367: LD_EXP 42
8371: PPUSH
8372: CALL_OW 12
8376: PPUSH
8377: CALL_OW 380
// un = CreateHuman ;
8381: LD_ADDR_VAR 0 3
8385: PUSH
8386: CALL_OW 44
8390: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8391: LD_VAR 0 3
8395: PPUSH
8396: LD_INT 2
8398: PPUSH
8399: LD_INT 0
8401: PPUSH
8402: CALL_OW 49
// RU2_Medics = RU2_Medics ^ un ;
8406: LD_ADDR_EXP 33
8410: PUSH
8411: LD_EXP 33
8415: PUSH
8416: LD_VAR 0 3
8420: ADD
8421: ST_TO_ADDR
// end ;
8422: GO 8321
8424: POP
8425: POP
// ComAgressiveMove ( RU2_Sols , 38 , 35 ) ;
8426: LD_EXP 32
8430: PPUSH
8431: LD_INT 38
8433: PPUSH
8434: LD_INT 35
8436: PPUSH
8437: CALL_OW 114
// ComAgressiveMove ( RU2_Medics , 38 , 35 ) ;
8441: LD_EXP 33
8445: PPUSH
8446: LD_INT 38
8448: PPUSH
8449: LD_INT 35
8451: PPUSH
8452: CALL_OW 114
// ComBuild ( RU2_Engs , b_depot , 32 , 30 , 2 ) ;
8456: LD_EXP 34
8460: PPUSH
8461: LD_INT 0
8463: PPUSH
8464: LD_INT 32
8466: PPUSH
8467: LD_INT 30
8469: PPUSH
8470: LD_INT 2
8472: PPUSH
8473: CALL_OW 145
// AddComBuild ( RU2_Engs , b_siberite_mine , 39 , 38 , 0 ) ;
8477: LD_EXP 34
8481: PPUSH
8482: LD_INT 30
8484: PPUSH
8485: LD_INT 39
8487: PPUSH
8488: LD_INT 38
8490: PPUSH
8491: LD_INT 0
8493: PPUSH
8494: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 37 , 45 , 0 ) ;
8498: LD_EXP 34
8502: PPUSH
8503: LD_INT 4
8505: PPUSH
8506: LD_INT 37
8508: PPUSH
8509: LD_INT 45
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 33 , 46 , 0 ) ;
8519: LD_EXP 34
8523: PPUSH
8524: LD_INT 31
8526: PPUSH
8527: LD_INT 33
8529: PPUSH
8530: LD_INT 46
8532: PPUSH
8533: LD_INT 0
8535: PPUSH
8536: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 44 , 46 , 5 ) ;
8540: LD_EXP 34
8544: PPUSH
8545: LD_INT 31
8547: PPUSH
8548: LD_INT 44
8550: PPUSH
8551: LD_INT 46
8553: PPUSH
8554: LD_INT 5
8556: PPUSH
8557: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 38 , 11 , 4 ) ;
8561: LD_EXP 34
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: LD_INT 38
8571: PPUSH
8572: LD_INT 11
8574: PPUSH
8575: LD_INT 4
8577: PPUSH
8578: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 34 , 6 , 4 ) ;
8582: LD_EXP 34
8586: PPUSH
8587: LD_INT 31
8589: PPUSH
8590: LD_INT 34
8592: PPUSH
8593: LD_INT 6
8595: PPUSH
8596: LD_INT 4
8598: PPUSH
8599: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 40 , 17 , 4 ) ;
8603: LD_EXP 34
8607: PPUSH
8608: LD_INT 31
8610: PPUSH
8611: LD_INT 40
8613: PPUSH
8614: LD_INT 17
8616: PPUSH
8617: LD_INT 4
8619: PPUSH
8620: CALL_OW 205
// AddComMoveXY ( RU2_Engs , 35 , 39 ) ;
8624: LD_EXP 34
8628: PPUSH
8629: LD_INT 35
8631: PPUSH
8632: LD_INT 39
8634: PPUSH
8635: CALL_OW 171
// end ;
8639: LD_VAR 0 1
8643: RET
// export function RU2_Attack_Minebase ; var i , un , veh , DemoTeam_Enemy , attacker ; begin
8644: LD_INT 0
8646: PPUSH
8647: PPUSH
8648: PPUSH
8649: PPUSH
8650: PPUSH
8651: PPUSH
// uc_side = 6 ;
8652: LD_ADDR_OWVAR 20
8656: PUSH
8657: LD_INT 6
8659: ST_TO_ADDR
// uc_nation = 3 ;
8660: LD_ADDR_OWVAR 21
8664: PUSH
8665: LD_INT 3
8667: ST_TO_ADDR
// for i = 1 to 8 do
8668: LD_ADDR_VAR 0 2
8672: PUSH
8673: DOUBLE
8674: LD_INT 1
8676: DEC
8677: ST_TO_ADDR
8678: LD_INT 8
8680: PUSH
8681: FOR_TO
8682: IFFALSE 8784
// begin uc_side = 6 ;
8684: LD_ADDR_OWVAR 20
8688: PUSH
8689: LD_INT 6
8691: ST_TO_ADDR
// uc_nation = 3 ;
8692: LD_ADDR_OWVAR 21
8696: PUSH
8697: LD_INT 3
8699: ST_TO_ADDR
// hc_gallery =  ;
8700: LD_ADDR_OWVAR 33
8704: PUSH
8705: LD_STRING 
8707: ST_TO_ADDR
// hc_name =  ;
8708: LD_ADDR_OWVAR 26
8712: PUSH
8713: LD_STRING 
8715: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8716: LD_INT 0
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: LD_EXP 41
8726: PPUSH
8727: LD_EXP 42
8731: PPUSH
8732: CALL_OW 12
8736: PPUSH
8737: CALL_OW 380
// un = CreateHuman ;
8741: LD_ADDR_VAR 0 3
8745: PUSH
8746: CALL_OW 44
8750: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8751: LD_VAR 0 3
8755: PPUSH
8756: LD_INT 2
8758: PPUSH
8759: LD_INT 0
8761: PPUSH
8762: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ un ;
8766: LD_ADDR_EXP 27
8770: PUSH
8771: LD_EXP 27
8775: PUSH
8776: LD_VAR 0 3
8780: ADD
8781: ST_TO_ADDR
// end ;
8782: GO 8681
8784: POP
8785: POP
// for i = 1 to 2 do
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_INT 2
8798: PUSH
8799: FOR_TO
8800: IFFALSE 8877
// begin vc_chassis := ru_medium_tracked ;
8802: LD_ADDR_OWVAR 37
8806: PUSH
8807: LD_INT 22
8809: ST_TO_ADDR
// vc_engine := engine_siberite ;
8810: LD_ADDR_OWVAR 39
8814: PUSH
8815: LD_INT 3
8817: ST_TO_ADDR
// vc_weapon := ru_gun ;
8818: LD_ADDR_OWVAR 40
8822: PUSH
8823: LD_INT 44
8825: ST_TO_ADDR
// vc_control := control_computer ;
8826: LD_ADDR_OWVAR 38
8830: PUSH
8831: LD_INT 3
8833: ST_TO_ADDR
// veh := CreateVehicle ;
8834: LD_ADDR_VAR 0 4
8838: PUSH
8839: CALL_OW 45
8843: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8844: LD_VAR 0 4
8848: PPUSH
8849: LD_INT 2
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8859: LD_ADDR_EXP 27
8863: PUSH
8864: LD_EXP 27
8868: PUSH
8869: LD_VAR 0 4
8873: ADD
8874: ST_TO_ADDR
// end ;
8875: GO 8799
8877: POP
8878: POP
// for i = 1 to 2 do
8879: LD_ADDR_VAR 0 2
8883: PUSH
8884: DOUBLE
8885: LD_INT 1
8887: DEC
8888: ST_TO_ADDR
8889: LD_INT 2
8891: PUSH
8892: FOR_TO
8893: IFFALSE 8970
// begin vc_chassis := ru_medium_tracked ;
8895: LD_ADDR_OWVAR 37
8899: PUSH
8900: LD_INT 22
8902: ST_TO_ADDR
// vc_engine := engine_siberite ;
8903: LD_ADDR_OWVAR 39
8907: PUSH
8908: LD_INT 3
8910: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
8911: LD_ADDR_OWVAR 40
8915: PUSH
8916: LD_INT 43
8918: ST_TO_ADDR
// vc_control := control_computer ;
8919: LD_ADDR_OWVAR 38
8923: PUSH
8924: LD_INT 3
8926: ST_TO_ADDR
// veh := CreateVehicle ;
8927: LD_ADDR_VAR 0 4
8931: PUSH
8932: CALL_OW 45
8936: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8937: LD_VAR 0 4
8941: PPUSH
8942: LD_INT 2
8944: PPUSH
8945: LD_INT 0
8947: PPUSH
8948: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8952: LD_ADDR_EXP 27
8956: PUSH
8957: LD_EXP 27
8961: PUSH
8962: LD_VAR 0 4
8966: ADD
8967: ST_TO_ADDR
// end ;
8968: GO 8892
8970: POP
8971: POP
// Attack ( [ 0 , RU2_DemoTeam , [ [ 78 , 10 ] , [ 20 , 16 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
8972: LD_INT 0
8974: PUSH
8975: LD_EXP 27
8979: PUSH
8980: LD_INT 78
8982: PUSH
8983: LD_INT 10
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 20
8992: PUSH
8993: LD_INT 16
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 0
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: LD_INT 0
9012: PUSH
9013: LD_INT 1
9015: PUSH
9016: LD_INT 0
9018: PUSH
9019: LD_INT 0
9021: PUSH
9022: LD_INT 0
9024: PUSH
9025: LD_INT 0
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL 72894 0 1
// end ;
9056: LD_VAR 0 1
9060: RET
// export function RU3_Baterie_Prepare ; var i , un , veh ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// uc_side = 5 ;
9067: LD_ADDR_OWVAR 20
9071: PUSH
9072: LD_INT 5
9074: ST_TO_ADDR
// uc_nation = 3 ;
9075: LD_ADDR_OWVAR 21
9079: PUSH
9080: LD_INT 3
9082: ST_TO_ADDR
// for i = 1 to 5 do
9083: LD_ADDR_VAR 0 2
9087: PUSH
9088: DOUBLE
9089: LD_INT 1
9091: DEC
9092: ST_TO_ADDR
9093: LD_INT 5
9095: PUSH
9096: FOR_TO
9097: IFFALSE 9175
// begin vc_chassis := ru_heavy_tracked ;
9099: LD_ADDR_OWVAR 37
9103: PUSH
9104: LD_INT 24
9106: ST_TO_ADDR
// vc_engine := engine_siberite ;
9107: LD_ADDR_OWVAR 39
9111: PUSH
9112: LD_INT 3
9114: ST_TO_ADDR
// vc_weapon := ru_rocket ;
9115: LD_ADDR_OWVAR 40
9119: PUSH
9120: LD_INT 47
9122: ST_TO_ADDR
// vc_control := control_manual ;
9123: LD_ADDR_OWVAR 38
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// veh := CreateVehicle ;
9131: LD_ADDR_VAR 0 4
9135: PUSH
9136: CALL_OW 45
9140: ST_TO_ADDR
// RU3_Baterie = RU3_Baterie ^ veh ;
9141: LD_ADDR_EXP 28
9145: PUSH
9146: LD_EXP 28
9150: PUSH
9151: LD_VAR 0 4
9155: ADD
9156: ST_TO_ADDR
// RU3_BaterieVehs = RU3_BaterieVehs ^ veh ;
9157: LD_ADDR_EXP 29
9161: PUSH
9162: LD_EXP 29
9166: PUSH
9167: LD_VAR 0 4
9171: ADD
9172: ST_TO_ADDR
// end ;
9173: GO 9096
9175: POP
9176: POP
// PlaceUnitXYR ( RU3_BaterieVehs [ 1 ] , 275 , 234 , 0 , false ) ;
9177: LD_EXP 29
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PPUSH
9186: LD_INT 275
9188: PPUSH
9189: LD_INT 234
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: LD_INT 0
9197: PPUSH
9198: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 2 ] , 280 , 237 , 0 , false ) ;
9202: LD_EXP 29
9206: PUSH
9207: LD_INT 2
9209: ARRAY
9210: PPUSH
9211: LD_INT 280
9213: PPUSH
9214: LD_INT 237
9216: PPUSH
9217: LD_INT 0
9219: PPUSH
9220: LD_INT 0
9222: PPUSH
9223: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 3 ] , 283 , 235 , 5 , false ) ;
9227: LD_EXP 29
9231: PUSH
9232: LD_INT 3
9234: ARRAY
9235: PPUSH
9236: LD_INT 283
9238: PPUSH
9239: LD_INT 235
9241: PPUSH
9242: LD_INT 5
9244: PPUSH
9245: LD_INT 0
9247: PPUSH
9248: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 4 ] , 282 , 231 , 4 , false ) ;
9252: LD_EXP 29
9256: PUSH
9257: LD_INT 4
9259: ARRAY
9260: PPUSH
9261: LD_INT 282
9263: PPUSH
9264: LD_INT 231
9266: PPUSH
9267: LD_INT 4
9269: PPUSH
9270: LD_INT 0
9272: PPUSH
9273: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 5 ] , 279 , 229 , 3 , false ) ;
9277: LD_EXP 29
9281: PUSH
9282: LD_INT 5
9284: ARRAY
9285: PPUSH
9286: LD_INT 279
9288: PPUSH
9289: LD_INT 229
9291: PPUSH
9292: LD_INT 3
9294: PPUSH
9295: LD_INT 0
9297: PPUSH
9298: CALL_OW 50
// for i = 1 to 9 do
9302: LD_ADDR_VAR 0 2
9306: PUSH
9307: DOUBLE
9308: LD_INT 1
9310: DEC
9311: ST_TO_ADDR
9312: LD_INT 9
9314: PUSH
9315: FOR_TO
9316: IFFALSE 9418
// begin uc_side = 5 ;
9318: LD_ADDR_OWVAR 20
9322: PUSH
9323: LD_INT 5
9325: ST_TO_ADDR
// uc_nation = 3 ;
9326: LD_ADDR_OWVAR 21
9330: PUSH
9331: LD_INT 3
9333: ST_TO_ADDR
// hc_gallery =  ;
9334: LD_ADDR_OWVAR 33
9338: PUSH
9339: LD_STRING 
9341: ST_TO_ADDR
// hc_name =  ;
9342: LD_ADDR_OWVAR 26
9346: PUSH
9347: LD_STRING 
9349: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9350: LD_INT 0
9352: PPUSH
9353: LD_INT 1
9355: PPUSH
9356: LD_EXP 41
9360: PPUSH
9361: LD_EXP 42
9365: PPUSH
9366: CALL_OW 12
9370: PPUSH
9371: CALL_OW 380
// un = CreateHuman ;
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: CALL_OW 44
9384: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9385: LD_VAR 0 3
9389: PPUSH
9390: LD_INT 13
9392: PPUSH
9393: LD_INT 0
9395: PPUSH
9396: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9400: LD_ADDR_EXP 28
9404: PUSH
9405: LD_EXP 28
9409: PUSH
9410: LD_VAR 0 3
9414: ADD
9415: ST_TO_ADDR
// end ;
9416: GO 9315
9418: POP
9419: POP
// for i = 1 to 5 do
9420: LD_ADDR_VAR 0 2
9424: PUSH
9425: DOUBLE
9426: LD_INT 1
9428: DEC
9429: ST_TO_ADDR
9430: LD_INT 5
9432: PUSH
9433: FOR_TO
9434: IFFALSE 9552
// begin uc_side = 5 ;
9436: LD_ADDR_OWVAR 20
9440: PUSH
9441: LD_INT 5
9443: ST_TO_ADDR
// uc_nation = 3 ;
9444: LD_ADDR_OWVAR 21
9448: PUSH
9449: LD_INT 3
9451: ST_TO_ADDR
// hc_gallery =  ;
9452: LD_ADDR_OWVAR 33
9456: PUSH
9457: LD_STRING 
9459: ST_TO_ADDR
// hc_name =  ;
9460: LD_ADDR_OWVAR 26
9464: PUSH
9465: LD_STRING 
9467: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9468: LD_INT 0
9470: PPUSH
9471: LD_INT 3
9473: PPUSH
9474: LD_EXP 41
9478: PPUSH
9479: LD_EXP 42
9483: PPUSH
9484: CALL_OW 12
9488: PPUSH
9489: CALL_OW 380
// un = CreateHuman ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: CALL_OW 44
9502: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9503: LD_VAR 0 3
9507: PPUSH
9508: LD_INT 13
9510: PPUSH
9511: LD_INT 0
9513: PPUSH
9514: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9518: LD_ADDR_EXP 28
9522: PUSH
9523: LD_EXP 28
9527: PUSH
9528: LD_VAR 0 3
9532: ADD
9533: ST_TO_ADDR
// RU3_BaterieMechs = RU3_BaterieMechs ^ un ;
9534: LD_ADDR_EXP 30
9538: PUSH
9539: LD_EXP 30
9543: PUSH
9544: LD_VAR 0 3
9548: ADD
9549: ST_TO_ADDR
// end ;
9550: GO 9433
9552: POP
9553: POP
// end ;
9554: LD_VAR 0 1
9558: RET
// export function RU3BaterieMovement ; var Baterie_Enemy , attacker ; begin
9559: LD_INT 0
9561: PPUSH
9562: PPUSH
9563: PPUSH
// ComEnterUnit ( RU3_BaterieMechs [ 1 ] , RU3_BaterieVehs [ 1 ] ) ;
9564: LD_EXP 30
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PPUSH
9573: LD_EXP 29
9577: PUSH
9578: LD_INT 1
9580: ARRAY
9581: PPUSH
9582: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 2 ] , RU3_BaterieVehs [ 2 ] ) ;
9586: LD_EXP 30
9590: PUSH
9591: LD_INT 2
9593: ARRAY
9594: PPUSH
9595: LD_EXP 29
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 3 ] , RU3_BaterieVehs [ 3 ] ) ;
9608: LD_EXP 30
9612: PUSH
9613: LD_INT 3
9615: ARRAY
9616: PPUSH
9617: LD_EXP 29
9621: PUSH
9622: LD_INT 3
9624: ARRAY
9625: PPUSH
9626: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 4 ] , RU3_BaterieVehs [ 4 ] ) ;
9630: LD_EXP 30
9634: PUSH
9635: LD_INT 4
9637: ARRAY
9638: PPUSH
9639: LD_EXP 29
9643: PUSH
9644: LD_INT 4
9646: ARRAY
9647: PPUSH
9648: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 5 ] , RU3_BaterieVehs [ 5 ] ) ;
9652: LD_EXP 30
9656: PUSH
9657: LD_INT 5
9659: ARRAY
9660: PPUSH
9661: LD_EXP 29
9665: PUSH
9666: LD_INT 5
9668: ARRAY
9669: PPUSH
9670: CALL_OW 120
// wait ( 0 0$15 ) ;
9674: LD_INT 525
9676: PPUSH
9677: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
9681: LD_EXP 30
9685: PUSH
9686: LD_INT 0
9688: GREATER
9689: PUSH
9690: LD_EXP 29
9694: PUSH
9695: LD_INT 0
9697: GREATER
9698: AND
9699: IFFALSE 9793
// begin RU3BaterieTimeOut = true ;
9701: LD_ADDR_EXP 31
9705: PUSH
9706: LD_INT 1
9708: ST_TO_ADDR
// Attack ( [ 0 , RU3_Baterie , [ [ 204 , 209 ] , [ 162 , 205 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
9709: LD_INT 0
9711: PUSH
9712: LD_EXP 28
9716: PUSH
9717: LD_INT 204
9719: PUSH
9720: LD_INT 209
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 162
9729: PUSH
9730: LD_INT 205
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 0
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 0
9755: PUSH
9756: LD_INT 0
9758: PUSH
9759: LD_INT 0
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: LD_INT 1
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL 72894 0 1
// end ; end ; end_of_file
9793: LD_VAR 0 1
9797: RET
// export SiberiteMineTaken , DvaliContactMade ; export RU2MineBaseBuilt , RU2_SibMine , RU2_Armouries , RU2_Breastworks ; on UnitDestroyed ( un ) do begin if un = Simone then
9798: LD_VAR 0 1
9802: PUSH
9803: LD_EXP 8
9807: EQUAL
9808: IFFALSE 9836
// begin ExclusiveOn ;
9810: CALL_OW 4
// Wait ( 0 0$2 ) ;
9814: LD_INT 70
9816: PPUSH
9817: CALL_OW 67
// YouLost ( Simone ) ;
9821: LD_STRING Simone
9823: PPUSH
9824: CALL_OW 104
// ExclusiveOff ;
9828: CALL_OW 5
// exit ;
9832: GO 10085
// end else
9834: GO 10076
// if un = Kathryn then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_EXP 9
9845: EQUAL
9846: IFFALSE 9874
// begin ExclusiveOn ;
9848: CALL_OW 4
// Wait ( 0 0$2 ) ;
9852: LD_INT 70
9854: PPUSH
9855: CALL_OW 67
// YouLost ( Kathryn ) ;
9859: LD_STRING Kathryn
9861: PPUSH
9862: CALL_OW 104
// ExclusiveOff ;
9866: CALL_OW 5
// exit ;
9870: GO 10085
// end else
9872: GO 10076
// if un = Miller then
9874: LD_VAR 0 1
9878: PUSH
9879: LD_EXP 10
9883: EQUAL
9884: IFFALSE 9912
// begin ExclusiveOn ;
9886: CALL_OW 4
// Wait ( 0 0$2 ) ;
9890: LD_INT 70
9892: PPUSH
9893: CALL_OW 67
// YouLost ( Miller ) ;
9897: LD_STRING Miller
9899: PPUSH
9900: CALL_OW 104
// ExclusiveOff ;
9904: CALL_OW 5
// exit ;
9908: GO 10085
// end else
9910: GO 10076
// if un = Smithy then
9912: LD_VAR 0 1
9916: PUSH
9917: LD_EXP 12
9921: EQUAL
9922: IFFALSE 9950
// begin ExclusiveOn ;
9924: CALL_OW 4
// Wait ( 0 0$2 ) ;
9928: LD_INT 70
9930: PPUSH
9931: CALL_OW 67
// YouLost ( Smithy ) ;
9935: LD_STRING Smithy
9937: PPUSH
9938: CALL_OW 104
// ExclusiveOff ;
9942: CALL_OW 5
// exit ;
9946: GO 10085
// end else
9948: GO 10076
// if un = AM_Depot then
9950: LD_VAR 0 1
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: IFFALSE 9986
// begin ExclusiveOn ;
9960: CALL_OW 4
// Wait ( 0 0$2 ) ;
9964: LD_INT 70
9966: PPUSH
9967: CALL_OW 67
// YouLost ( FriendlyBase ) ;
9971: LD_STRING FriendlyBase
9973: PPUSH
9974: CALL_OW 104
// ExclusiveOff ;
9978: CALL_OW 5
// exit ;
9982: GO 10085
// end else
9984: GO 10076
// if GetSide ( un ) = 5 and GetClass ( un ) = class_mechanic then
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL_OW 255
9995: PUSH
9996: LD_INT 5
9998: EQUAL
9999: PUSH
10000: LD_VAR 0 1
10004: PPUSH
10005: CALL_OW 257
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: AND
10014: IFFALSE 10032
// begin RU3_BaterieMechs = RU3_BaterieMechs - 1 ;
10016: LD_ADDR_EXP 30
10020: PUSH
10021: LD_EXP 30
10025: PUSH
10026: LD_INT 1
10028: MINUS
10029: ST_TO_ADDR
// end else
10030: GO 10076
// if GetSide ( un ) = 5 and GetWeapon ( un ) = ru_rocket then
10032: LD_VAR 0 1
10036: PPUSH
10037: CALL_OW 255
10041: PUSH
10042: LD_INT 5
10044: EQUAL
10045: PUSH
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 264
10055: PUSH
10056: LD_INT 47
10058: EQUAL
10059: AND
10060: IFFALSE 10076
// begin RU3_BaterieVehs = RU3_BaterieVehs - 1 ;
10062: LD_ADDR_EXP 29
10066: PUSH
10067: LD_EXP 29
10071: PUSH
10072: LD_INT 1
10074: MINUS
10075: ST_TO_ADDR
// end ; MCE_UnitDestroyed ( un ) ;
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL 35404 0 1
// end ;
10085: PPOPN 1
10087: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10088: LD_VAR 0 1
10092: PPUSH
10093: LD_VAR 0 2
10097: PPUSH
10098: CALL 37271 0 2
// end ;
10102: PPOPN 2
10104: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 7 and not SiberiteMineTaken then
10105: LD_VAR 0 1
10109: PPUSH
10110: CALL_OW 266
10114: PUSH
10115: LD_INT 30
10117: EQUAL
10118: PUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 255
10128: PUSH
10129: LD_INT 7
10131: EQUAL
10132: AND
10133: PUSH
10134: LD_EXP 35
10138: NOT
10139: AND
10140: IFFALSE 10216
// begin if not RU2MineBaseBuilt then
10142: LD_EXP 37
10146: NOT
10147: IFFALSE 10163
// Say ( Simone , D2-Simone-1 ) else
10149: LD_EXP 8
10153: PPUSH
10154: LD_STRING D2-Simone-1
10156: PPUSH
10157: CALL_OW 88
10161: GO 10175
// Say ( Simone , D2-Simone-1b ) ;
10163: LD_EXP 8
10167: PPUSH
10168: LD_STRING D2-Simone-1b
10170: PPUSH
10171: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
10175: LD_STRING M2
10177: PPUSH
10178: CALL_OW 337
// SiberiteMineTaken = true ;
10182: LD_ADDR_EXP 35
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// wait ( 0 0$25 ) ;
10190: LD_INT 875
10192: PPUSH
10193: CALL_OW 67
// if not RU2MineBaseBuilt then
10197: LD_EXP 37
10201: NOT
10202: IFFALSE 10216
// Say ( Simone , D2-Simone-2 ) ;
10204: LD_EXP 8
10208: PPUSH
10209: LD_STRING D2-Simone-2
10211: PPUSH
10212: CALL_OW 88
// end ; if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 6 then
10216: LD_VAR 0 1
10220: PPUSH
10221: CALL_OW 266
10225: PUSH
10226: LD_INT 30
10228: EQUAL
10229: PUSH
10230: LD_VAR 0 1
10234: PPUSH
10235: CALL_OW 255
10239: PUSH
10240: LD_INT 6
10242: EQUAL
10243: AND
10244: IFFALSE 10264
// begin RU2_SibMine = building ;
10246: LD_ADDR_EXP 38
10250: PUSH
10251: LD_VAR 0 1
10255: ST_TO_ADDR
// RU2MineBaseBuilt = true ;
10256: LD_ADDR_EXP 37
10260: PUSH
10261: LD_INT 1
10263: ST_TO_ADDR
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 6 then
10264: LD_VAR 0 1
10268: PPUSH
10269: CALL_OW 266
10273: PUSH
10274: LD_INT 4
10276: EQUAL
10277: PUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL_OW 255
10287: PUSH
10288: LD_INT 6
10290: EQUAL
10291: AND
10292: IFFALSE 10438
// begin RU2_Armouries = RU2_Armouries + 1 ;
10294: LD_ADDR_EXP 39
10298: PUSH
10299: LD_EXP 39
10303: PUSH
10304: LD_INT 1
10306: PLUS
10307: ST_TO_ADDR
// case RU2_Armouries of 1 :
10308: LD_EXP 39
10312: PUSH
10313: LD_INT 1
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10375
10321: POP
// ComEnterUnit ( [ RU2_Sols [ 1 ] , RU2_Sols [ 2 ] , RU2_Sols [ 3 ] , RU2_Sols [ 4 ] ] , building ) ; 2 :
10322: LD_EXP 32
10326: PUSH
10327: LD_INT 1
10329: ARRAY
10330: PUSH
10331: LD_EXP 32
10335: PUSH
10336: LD_INT 2
10338: ARRAY
10339: PUSH
10340: LD_EXP 32
10344: PUSH
10345: LD_INT 3
10347: ARRAY
10348: PUSH
10349: LD_EXP 32
10353: PUSH
10354: LD_INT 4
10356: ARRAY
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: PPUSH
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 120
10373: GO 10438
10375: LD_INT 2
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10437
10383: POP
// ComEnterUnit ( [ RU2_Sols [ 7 ] , RU2_Sols [ 8 ] , RU2_Sols [ 9 ] , RU2_Sols [ 10 ] ] , building ) ; end ;
10384: LD_EXP 32
10388: PUSH
10389: LD_INT 7
10391: ARRAY
10392: PUSH
10393: LD_EXP 32
10397: PUSH
10398: LD_INT 8
10400: ARRAY
10401: PUSH
10402: LD_EXP 32
10406: PUSH
10407: LD_INT 9
10409: ARRAY
10410: PUSH
10411: LD_EXP 32
10415: PUSH
10416: LD_INT 10
10418: ARRAY
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 120
10435: GO 10438
10437: POP
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 266
10447: PUSH
10448: LD_INT 31
10450: EQUAL
10451: PUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 255
10461: PUSH
10462: LD_INT 6
10464: EQUAL
10465: AND
10466: IFFALSE 10604
// begin RU2_Breastworks = RU2_Breastworks + 1 ;
10468: LD_ADDR_EXP 40
10472: PUSH
10473: LD_EXP 40
10477: PUSH
10478: LD_INT 1
10480: PLUS
10481: ST_TO_ADDR
// case RU2_Breastworks of 1 :
10482: LD_EXP 40
10486: PUSH
10487: LD_INT 1
10489: DOUBLE
10490: EQUAL
10491: IFTRUE 10495
10493: GO 10516
10495: POP
// ComEnterUnit ( RU2_Sols [ 5 ] , building ) ; 2 :
10496: LD_EXP 32
10500: PUSH
10501: LD_INT 5
10503: ARRAY
10504: PPUSH
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 120
10514: GO 10604
10516: LD_INT 2
10518: DOUBLE
10519: EQUAL
10520: IFTRUE 10524
10522: GO 10545
10524: POP
// ComEnterUnit ( RU2_Sols [ 6 ] , building ) ; 3 :
10525: LD_EXP 32
10529: PUSH
10530: LD_INT 6
10532: ARRAY
10533: PPUSH
10534: LD_VAR 0 1
10538: PPUSH
10539: CALL_OW 120
10543: GO 10604
10545: LD_INT 3
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10574
10553: POP
// ComEnterUnit ( RU2_Sols [ 11 ] , building ) ; 4 :
10554: LD_EXP 32
10558: PUSH
10559: LD_INT 11
10561: ARRAY
10562: PPUSH
10563: LD_VAR 0 1
10567: PPUSH
10568: CALL_OW 120
10572: GO 10604
10574: LD_INT 4
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10603
10582: POP
// ComEnterUnit ( RU2_Sols [ 12 ] , building ) ; end ;
10583: LD_EXP 32
10587: PUSH
10588: LD_INT 12
10590: ARRAY
10591: PPUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: CALL_OW 120
10601: GO 10604
10603: POP
// end ; if ( GetSide ( building ) = 6 ) and ( GetBType ( building ) = b_depot ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 255
10613: PUSH
10614: LD_INT 6
10616: EQUAL
10617: PUSH
10618: LD_VAR 0 1
10622: PPUSH
10623: CALL_OW 266
10627: PUSH
10628: LD_INT 0
10630: EQUAL
10631: AND
10632: IFFALSE 10654
// begin SetResourceType ( GetBase ( building ) , mat_cans , 250 ) ;
10634: LD_VAR 0 1
10638: PPUSH
10639: CALL_OW 274
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_INT 250
10649: PPUSH
10650: CALL_OW 277
// end ; MCE_BuildingComplete ( building ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: CALL 36587 0 1
// end ;
10663: PPOPN 1
10665: END
// on BuildingCaptured ( building , former_side , capturing_unit ) do begin if GetBType ( building ) = b_siberite_mine and former_side = 6 then
10666: LD_VAR 0 1
10670: PPUSH
10671: CALL_OW 266
10675: PUSH
10676: LD_INT 30
10678: EQUAL
10679: PUSH
10680: LD_VAR 0 2
10684: PUSH
10685: LD_INT 6
10687: EQUAL
10688: AND
10689: IFFALSE 10718
// begin Say ( Simone , D2-Simone-1b ) ;
10691: LD_EXP 8
10695: PPUSH
10696: LD_STRING D2-Simone-1b
10698: PPUSH
10699: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
10703: LD_STRING M2
10705: PPUSH
10706: CALL_OW 337
// SiberiteMineTaken = true ;
10710: LD_ADDR_EXP 35
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
// end ; MCE_BuildingCaptured ( building , former_side , capturing_unit ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_VAR 0 2
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: CALL 34058 0 3
// end ;
10737: PPOPN 3
10739: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL 36353 0 1
// end ;
10749: PPOPN 1
10751: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10752: LD_VAR 0 1
10756: PPUSH
10757: LD_VAR 0 2
10761: PPUSH
10762: CALL 35116 0 2
// end ;
10766: PPOPN 2
10768: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10769: LD_VAR 0 1
10773: PPUSH
10774: LD_VAR 0 2
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: LD_VAR 0 4
10788: PPUSH
10789: LD_VAR 0 5
10793: PPUSH
10794: CALL 34743 0 5
// end ;
10798: PPOPN 5
10800: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10801: LD_VAR 0 1
10805: PPUSH
10806: LD_VAR 0 2
10810: PPUSH
10811: CALL 34431 0 2
// end ;
10815: PPOPN 2
10817: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10818: LD_VAR 0 1
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_VAR 0 4
10837: PPUSH
10838: CALL 34276 0 4
// end ;
10842: PPOPN 4
10844: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_VAR 0 2
10854: PPUSH
10855: CALL 33950 0 2
// end ;
10859: PPOPN 2
10861: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10862: LD_VAR 0 1
10866: PPUSH
10867: LD_VAR 0 2
10871: PPUSH
10872: CALL 37525 0 2
// end ;
10876: PPOPN 2
10878: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_VAR 0 2
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_VAR 0 4
10898: PPUSH
10899: CALL 37734 0 4
// end ;
10903: PPOPN 4
10905: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_VAR 0 2
10915: PPUSH
10916: CALL 33766 0 2
// end ;
10920: PPOPN 2
10922: END
// on Contact ( side1 , side2 ) do begin if side1 = 7 and side2 = 8 and not DvaliContactMade then
10923: LD_VAR 0 1
10927: PUSH
10928: LD_INT 7
10930: EQUAL
10931: PUSH
10932: LD_VAR 0 2
10936: PUSH
10937: LD_INT 8
10939: EQUAL
10940: AND
10941: PUSH
10942: LD_EXP 36
10946: NOT
10947: AND
10948: IFFALSE 10982
// begin Say ( Simone , D5-Simone-1 ) ;
10950: LD_EXP 8
10954: PPUSH
10955: LD_STRING D5-Simone-1
10957: PPUSH
10958: CALL_OW 88
// Say ( Smithy , D5-Smithy-1 ) ;
10962: LD_EXP 12
10966: PPUSH
10967: LD_STRING D5-Smithy-1
10969: PPUSH
10970: CALL_OW 88
// DvaliContactMade = true ;
10974: LD_ADDR_EXP 36
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// end ; end ; end_of_file
10982: PPOPN 2
10984: END
// export function AIEngageEnemy ; var enemy , attacker ; begin
10985: LD_INT 0
10987: PPUSH
10988: PPUSH
10989: PPUSH
// enemy = Filterallunits ( [ f_side , 1 ] ) ^ Filterallunits ( [ f_side , 7 ] ) ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_INT 22
10997: PUSH
10998: LD_INT 1
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 69
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 7
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 69
11024: ADD
11025: ST_TO_ADDR
// for attacker in attack_group do
11026: LD_ADDR_VAR 0 3
11030: PUSH
11031: LD_EXP 25
11035: PUSH
11036: FOR_IN
11037: IFFALSE 11065
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: CALL_OW 74
11058: PPUSH
11059: CALL_OW 115
11063: GO 11036
11065: POP
11066: POP
// end ;
11067: LD_VAR 0 1
11071: RET
// every 0 0$1 do
11072: GO 11074
11074: DISABLE
// begin enable ;
11075: ENABLE
// AIEngageEnemy ;
11076: CALL 10985 0 0
// end ;
11080: END
// every 0 0$1 trigger MissionStart do var Side1 ;
11081: LD_EXP 1
11085: IFFALSE 11185
11087: GO 11089
11089: DISABLE
11090: LD_INT 0
11092: PPUSH
// begin Side1 := FilterAllUnits ( [ f_side , 1 ] ) diff Smithy ;
11093: LD_ADDR_VAR 0 1
11097: PUSH
11098: LD_INT 22
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PPUSH
11108: CALL_OW 69
11112: PUSH
11113: LD_EXP 12
11117: DIFF
11118: ST_TO_ADDR
// ComStop ( Side1 ) ;
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 141
// mc_bases := Replace ( mc_bases , 1 , Side1 ) ;
11128: LD_ADDR_EXP 57
11132: PUSH
11133: LD_EXP 57
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: LD_VAR 0 1
11145: PPUSH
11146: CALL_OW 1
11150: ST_TO_ADDR
// MC_Start ;
11151: CALL 17478 0 0
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
11155: LD_INT 1
11157: PPUSH
11158: LD_INT 0
11160: PPUSH
11161: CALL 33002 0 2
// MC_SetUpgradeBuilding ( 1 , b_workshop ) ;
11165: LD_INT 1
11167: PPUSH
11168: LD_INT 2
11170: PPUSH
11171: CALL 33002 0 2
// MC_SetUpgradeBuilding ( 1 , b_armoury ) ;
11175: LD_INT 1
11177: PPUSH
11178: LD_INT 4
11180: PPUSH
11181: CALL 33002 0 2
// end ;
11185: PPOPN 1
11187: END
// every 0 0$1 trigger MissionStart do
11188: LD_EXP 1
11192: IFFALSE 11298
11194: GO 11196
11196: DISABLE
// begin wait ( RU2MineSquadArrivalTime ) ;
11197: LD_EXP 46
11201: PPUSH
11202: CALL_OW 67
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) >= 1 or FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) >= 4 then
11206: LD_INT 11
11208: PPUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 7
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 21
11221: PUSH
11222: LD_INT 3
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 70
11237: PUSH
11238: LD_INT 1
11240: GREATEREQUAL
11241: PUSH
11242: LD_INT 11
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 7
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 70
11273: PUSH
11274: LD_INT 4
11276: GREATEREQUAL
11277: OR
11278: IFFALSE 11294
// begin RU2_MineBase_FirstAttemptFailed = true ;
11280: LD_ADDR_EXP 3
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// RU2_Attack_Minebase ;
11288: CALL 8644 0 0
// end else
11292: GO 11298
// RU2_Assemble_MineBase ;
11294: CALL 8051 0 0
// end ;
11298: END
// every 5 5$0 trigger RU2_MineBase_FirstAttemptFailed and not RU2_MineBase_SecondAttempt do
11299: LD_EXP 3
11303: PUSH
11304: LD_EXP 4
11308: NOT
11309: AND
11310: IFFALSE 11403
11312: GO 11314
11314: DISABLE
// begin enable ;
11315: ENABLE
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) = 0 and FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= 5 then
11316: LD_INT 11
11318: PPUSH
11319: LD_INT 22
11321: PUSH
11322: LD_INT 7
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 21
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PPUSH
11343: CALL_OW 70
11347: PUSH
11348: LD_INT 0
11350: EQUAL
11351: PUSH
11352: LD_INT 11
11354: PPUSH
11355: LD_INT 22
11357: PUSH
11358: LD_INT 7
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 70
11383: PUSH
11384: LD_INT 5
11386: LESSEQUAL
11387: AND
11388: IFFALSE 11403
// begin RU2_Assemble_MineBase ;
11390: CALL 8051 0 0
// RU2_MineBase_SecondAttempt = true ;
11394: LD_ADDR_EXP 4
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// disable ;
11402: DISABLE
// end ; end ;
11403: END
// export function CustomInitMacro ( ) ; begin
11404: LD_INT 0
11406: PPUSH
// MC_SetScanArea ( 1 , AM1_Base_Area ) ;
11407: LD_INT 1
11409: PPUSH
11410: LD_INT 14
11412: PPUSH
11413: CALL 33710 0 2
// MC_SetParkingArea ( 1 , AM1_Base_Parking ) ;
11417: LD_INT 1
11419: PPUSH
11420: LD_INT 15
11422: PPUSH
11423: CALL 33654 0 2
// MC_SetDepositsXY ( 1 , [ [ 120 , 151 , 0 ] , ] ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 120
11432: PUSH
11433: LD_INT 151
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: PPUSH
11447: CALL 32774 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_heavy_gun , us_rocket_launcher ] ) ;
11451: LD_INT 1
11453: PPUSH
11454: LD_INT 6
11456: PUSH
11457: LD_INT 7
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL 33542 0 2
// MC_SetCratesArea ( 1 , AM1_Base_Crates ) ;
11468: LD_INT 1
11470: PPUSH
11471: LD_INT 16
11473: PPUSH
11474: CALL 33222 0 2
// MC_SetTame ( 1 , AM1_Base_Crates ) ;
11478: LD_INT 1
11480: PPUSH
11481: LD_INT 16
11483: PPUSH
11484: CALL 32953 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
11488: LD_INT 1
11490: PPUSH
11491: LD_INT 5
11493: PPUSH
11494: CALL 32635 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] ] ) ;
11498: LD_INT 1
11500: PPUSH
11501: LD_INT 3
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: LD_INT 5
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: LD_INT 3
11527: PUSH
11528: LD_INT 5
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 1
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: LD_INT 7
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 4
11557: PUSH
11558: LD_INT 1
11560: PUSH
11561: LD_INT 3
11563: PUSH
11564: LD_INT 6
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 4
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: LD_INT 6
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL 32389 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 118 , 159 , 2 ] , [ b_lab , 136 , 164 , 5 ] , [ b_oil_power , 123 , 172 , 0 ] , [ b_oil_power , 120 , 169 , 0 ] , [ b_oil_power , 122 , 168 , 0 ] , [ b_turret , 141 , 155 , 3 ] , [ b_turret , 144 , 158 , 3 ] , [ b_turret , 148 , 166 , 4 ] , [ b_turret , 131 , 149 , 3 ] , [ b_turret , 127 , 147 , 3 ] , [ b_turret , 122 , 142 , 3 ] , [ b_turret , 150 , 172 , 4 ] , ] ) ;
11602: LD_INT 1
11604: PPUSH
11605: LD_INT 6
11607: PUSH
11608: LD_INT 118
11610: PUSH
11611: LD_INT 159
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 6
11625: PUSH
11626: LD_INT 136
11628: PUSH
11629: LD_INT 164
11631: PUSH
11632: LD_INT 5
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 26
11643: PUSH
11644: LD_INT 123
11646: PUSH
11647: LD_INT 172
11649: PUSH
11650: LD_INT 0
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: LD_INT 120
11664: PUSH
11665: LD_INT 169
11667: PUSH
11668: LD_INT 0
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 26
11679: PUSH
11680: LD_INT 122
11682: PUSH
11683: LD_INT 168
11685: PUSH
11686: LD_INT 0
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 33
11697: PUSH
11698: LD_INT 141
11700: PUSH
11701: LD_INT 155
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 33
11715: PUSH
11716: LD_INT 144
11718: PUSH
11719: LD_INT 158
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 33
11733: PUSH
11734: LD_INT 148
11736: PUSH
11737: LD_INT 166
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 131
11754: PUSH
11755: LD_INT 149
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: LD_INT 127
11772: PUSH
11773: LD_INT 147
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 33
11787: PUSH
11788: LD_INT 122
11790: PUSH
11791: LD_INT 142
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 33
11805: PUSH
11806: LD_INT 150
11808: PUSH
11809: LD_INT 172
11811: PUSH
11812: LD_INT 4
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL 32262 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_opto , b_lab_siberium ] ) ;
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 10
11844: PUSH
11845: LD_INT 12
11847: PUSH
11848: LD_INT 15
11850: PUSH
11851: LD_INT 11
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL 33129 0 2
// MC_SetFactoryExtension ( 1 , 131 , 170 , 5 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat ] ) ;
11864: LD_INT 1
11866: PPUSH
11867: LD_INT 131
11869: PPUSH
11870: LD_INT 170
11872: PPUSH
11873: LD_INT 5
11875: PPUSH
11876: LD_INT 24
11878: PUSH
11879: LD_INT 16
11881: PUSH
11882: LD_INT 17
11884: PUSH
11885: LD_INT 18
11887: PUSH
11888: LD_INT 19
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: PPUSH
11898: CALL 33336 0 5
// end ; end_of_file
11902: LD_VAR 0 1
11906: RET
// every 5 5$0 + 2 2$20 trigger russianAssault = true and RusMainAttacks > 0 do
11907: LD_EXP 2
11911: PUSH
11912: LD_INT 1
11914: EQUAL
11915: PUSH
11916: LD_EXP 45
11920: PUSH
11921: LD_INT 0
11923: GREATER
11924: AND
11925: IFFALSE 13268
11927: GO 11929
11929: DISABLE
// begin enable ;
11930: ENABLE
// if Difficulty <> 1 then
11931: LD_OWVAR 67
11935: PUSH
11936: LD_INT 1
11938: NONEQUAL
11939: IFFALSE 12600
// begin case Rand ( 1 , 3 ) of 1 :
11941: LD_INT 1
11943: PPUSH
11944: LD_INT 3
11946: PPUSH
11947: CALL_OW 12
11951: PUSH
11952: LD_INT 1
11954: DOUBLE
11955: EQUAL
11956: IFTRUE 11960
11958: GO 12116
11960: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
11961: LD_INT 6
11963: PPUSH
11964: LD_INT 3
11966: PPUSH
11967: LD_EXP 101
11971: PPUSH
11972: LD_EXP 102
11976: PPUSH
11977: CALL_OW 12
11981: PPUSH
11982: LD_INT 0
11984: PPUSH
11985: LD_EXP 103
11989: PPUSH
11990: LD_EXP 104
11994: PPUSH
11995: CALL_OW 12
11999: PPUSH
12000: LD_INT 0
12002: PPUSH
12003: LD_INT 0
12005: PPUSH
12006: LD_EXP 41
12010: PPUSH
12011: LD_EXP 42
12015: PPUSH
12016: CALL_OW 12
12020: PPUSH
12021: LD_INT 2
12023: PPUSH
12024: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12028: LD_INT 700
12030: PPUSH
12031: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12035: LD_INT 2
12037: PPUSH
12038: LD_INT 6
12040: PPUSH
12041: LD_EXP 99
12045: PPUSH
12046: LD_EXP 100
12050: PPUSH
12051: CALL_OW 12
12055: PPUSH
12056: LD_EXP 41
12060: PPUSH
12061: LD_EXP 42
12065: PPUSH
12066: CALL_OW 12
12070: PPUSH
12071: LD_INT 3
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: LD_INT 1
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PPUSH
12087: LD_EXP 98
12091: PPUSH
12092: EMPTY
12093: PPUSH
12094: EMPTY
12095: PPUSH
12096: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12100: LD_ADDR_EXP 45
12104: PUSH
12105: LD_EXP 45
12109: PUSH
12110: LD_INT 1
12112: MINUS
12113: ST_TO_ADDR
// end ; 2 :
12114: GO 12445
12116: LD_INT 2
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12280
12124: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
12125: LD_INT 6
12127: PPUSH
12128: LD_INT 3
12130: PPUSH
12131: LD_EXP 101
12135: PPUSH
12136: LD_EXP 102
12140: PPUSH
12141: CALL_OW 12
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: LD_EXP 103
12153: PPUSH
12154: LD_EXP 104
12158: PPUSH
12159: CALL_OW 12
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: LD_INT 0
12169: PPUSH
12170: LD_EXP 41
12174: PPUSH
12175: LD_EXP 42
12179: PPUSH
12180: CALL_OW 12
12184: PPUSH
12185: LD_INT 3
12187: PPUSH
12188: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12192: LD_INT 700
12194: PPUSH
12195: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12199: LD_INT 3
12201: PPUSH
12202: LD_INT 6
12204: PPUSH
12205: LD_EXP 99
12209: PPUSH
12210: LD_EXP 100
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: LD_EXP 41
12224: PPUSH
12225: LD_EXP 42
12229: PPUSH
12230: CALL_OW 12
12234: PPUSH
12235: LD_INT 3
12237: PPUSH
12238: LD_INT 3
12240: PPUSH
12241: LD_INT 1
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: LD_EXP 98
12255: PPUSH
12256: EMPTY
12257: PPUSH
12258: EMPTY
12259: PPUSH
12260: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12264: LD_ADDR_EXP 45
12268: PUSH
12269: LD_EXP 45
12273: PUSH
12274: LD_INT 1
12276: MINUS
12277: ST_TO_ADDR
// end ; 3 :
12278: GO 12445
12280: LD_INT 3
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12444
12288: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12289: LD_INT 6
12291: PPUSH
12292: LD_INT 3
12294: PPUSH
12295: LD_EXP 101
12299: PPUSH
12300: LD_EXP 102
12304: PPUSH
12305: CALL_OW 12
12309: PPUSH
12310: LD_INT 0
12312: PPUSH
12313: LD_EXP 103
12317: PPUSH
12318: LD_EXP 104
12322: PPUSH
12323: CALL_OW 12
12327: PPUSH
12328: LD_INT 0
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: LD_EXP 41
12338: PPUSH
12339: LD_EXP 42
12343: PPUSH
12344: CALL_OW 12
12348: PPUSH
12349: LD_INT 4
12351: PPUSH
12352: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12356: LD_INT 700
12358: PPUSH
12359: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12363: LD_INT 4
12365: PPUSH
12366: LD_INT 6
12368: PPUSH
12369: LD_EXP 99
12373: PPUSH
12374: LD_EXP 100
12378: PPUSH
12379: CALL_OW 12
12383: PPUSH
12384: LD_EXP 41
12388: PPUSH
12389: LD_EXP 42
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 3
12401: PPUSH
12402: LD_INT 3
12404: PPUSH
12405: LD_INT 1
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: LD_EXP 98
12419: PPUSH
12420: EMPTY
12421: PPUSH
12422: EMPTY
12423: PPUSH
12424: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12428: LD_ADDR_EXP 45
12432: PUSH
12433: LD_EXP 45
12437: PUSH
12438: LD_INT 1
12440: MINUS
12441: ST_TO_ADDR
// end ; end ;
12442: GO 12445
12444: POP
// RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
12445: LD_INT 6
12447: PPUSH
12448: LD_INT 3
12450: PPUSH
12451: LD_EXP 101
12455: PPUSH
12456: LD_EXP 102
12460: PPUSH
12461: CALL_OW 12
12465: PPUSH
12466: LD_INT 0
12468: PPUSH
12469: LD_EXP 103
12473: PPUSH
12474: LD_EXP 104
12478: PPUSH
12479: CALL_OW 12
12483: PPUSH
12484: LD_INT 0
12486: PPUSH
12487: LD_INT 0
12489: PPUSH
12490: LD_EXP 41
12494: PPUSH
12495: LD_EXP 42
12499: PPUSH
12500: CALL_OW 12
12504: PPUSH
12505: LD_INT 5
12507: PPUSH
12508: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12512: LD_INT 700
12514: PPUSH
12515: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12519: LD_INT 5
12521: PPUSH
12522: LD_INT 6
12524: PPUSH
12525: LD_EXP 99
12529: PPUSH
12530: LD_EXP 100
12534: PPUSH
12535: CALL_OW 12
12539: PPUSH
12540: LD_EXP 41
12544: PPUSH
12545: LD_EXP 42
12549: PPUSH
12550: CALL_OW 12
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 3
12560: PPUSH
12561: LD_INT 1
12563: PUSH
12564: LD_INT 3
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PPUSH
12571: LD_EXP 98
12575: PPUSH
12576: EMPTY
12577: PPUSH
12578: EMPTY
12579: PPUSH
12580: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12584: LD_ADDR_EXP 45
12588: PUSH
12589: LD_EXP 45
12593: PUSH
12594: LD_INT 1
12596: MINUS
12597: ST_TO_ADDR
// end else
12598: GO 13268
// begin ; case Rand ( 1 , 4 ) of 1 :
12600: LD_INT 1
12602: PPUSH
12603: LD_INT 4
12605: PPUSH
12606: CALL_OW 12
12610: PUSH
12611: LD_INT 1
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12775
12619: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
12620: LD_INT 6
12622: PPUSH
12623: LD_INT 3
12625: PPUSH
12626: LD_EXP 101
12630: PPUSH
12631: LD_EXP 102
12635: PPUSH
12636: CALL_OW 12
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: LD_EXP 103
12648: PPUSH
12649: LD_EXP 104
12653: PPUSH
12654: CALL_OW 12
12658: PPUSH
12659: LD_INT 0
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: LD_EXP 41
12669: PPUSH
12670: LD_EXP 42
12674: PPUSH
12675: CALL_OW 12
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12687: LD_INT 700
12689: PPUSH
12690: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12694: LD_INT 2
12696: PPUSH
12697: LD_INT 6
12699: PPUSH
12700: LD_EXP 99
12704: PPUSH
12705: LD_EXP 100
12709: PPUSH
12710: CALL_OW 12
12714: PPUSH
12715: LD_EXP 41
12719: PPUSH
12720: LD_EXP 42
12724: PPUSH
12725: CALL_OW 12
12729: PPUSH
12730: LD_INT 3
12732: PPUSH
12733: LD_INT 3
12735: PPUSH
12736: LD_INT 1
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: LD_EXP 98
12750: PPUSH
12751: EMPTY
12752: PPUSH
12753: EMPTY
12754: PPUSH
12755: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12759: LD_ADDR_EXP 45
12763: PUSH
12764: LD_EXP 45
12768: PUSH
12769: LD_INT 1
12771: MINUS
12772: ST_TO_ADDR
// end ; 2 :
12773: GO 13268
12775: LD_INT 2
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12939
12783: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
12784: LD_INT 6
12786: PPUSH
12787: LD_INT 3
12789: PPUSH
12790: LD_EXP 101
12794: PPUSH
12795: LD_EXP 102
12799: PPUSH
12800: CALL_OW 12
12804: PPUSH
12805: LD_INT 0
12807: PPUSH
12808: LD_EXP 103
12812: PPUSH
12813: LD_EXP 104
12817: PPUSH
12818: CALL_OW 12
12822: PPUSH
12823: LD_INT 0
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: LD_EXP 41
12833: PPUSH
12834: LD_EXP 42
12838: PPUSH
12839: CALL_OW 12
12843: PPUSH
12844: LD_INT 3
12846: PPUSH
12847: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
12851: LD_INT 700
12853: PPUSH
12854: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12858: LD_INT 3
12860: PPUSH
12861: LD_INT 6
12863: PPUSH
12864: LD_EXP 99
12868: PPUSH
12869: LD_EXP 100
12873: PPUSH
12874: CALL_OW 12
12878: PPUSH
12879: LD_EXP 41
12883: PPUSH
12884: LD_EXP 42
12888: PPUSH
12889: CALL_OW 12
12893: PPUSH
12894: LD_INT 3
12896: PPUSH
12897: LD_INT 3
12899: PPUSH
12900: LD_INT 1
12902: PUSH
12903: LD_INT 3
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: LD_EXP 98
12914: PPUSH
12915: EMPTY
12916: PPUSH
12917: EMPTY
12918: PPUSH
12919: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12923: LD_ADDR_EXP 45
12927: PUSH
12928: LD_EXP 45
12932: PUSH
12933: LD_INT 1
12935: MINUS
12936: ST_TO_ADDR
// end ; 3 :
12937: GO 13268
12939: LD_INT 3
12941: DOUBLE
12942: EQUAL
12943: IFTRUE 12947
12945: GO 13103
12947: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12948: LD_INT 6
12950: PPUSH
12951: LD_INT 3
12953: PPUSH
12954: LD_EXP 101
12958: PPUSH
12959: LD_EXP 102
12963: PPUSH
12964: CALL_OW 12
12968: PPUSH
12969: LD_INT 0
12971: PPUSH
12972: LD_EXP 103
12976: PPUSH
12977: LD_EXP 104
12981: PPUSH
12982: CALL_OW 12
12986: PPUSH
12987: LD_INT 0
12989: PPUSH
12990: LD_INT 0
12992: PPUSH
12993: LD_EXP 41
12997: PPUSH
12998: LD_EXP 42
13002: PPUSH
13003: CALL_OW 12
13007: PPUSH
13008: LD_INT 4
13010: PPUSH
13011: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
13015: LD_INT 700
13017: PPUSH
13018: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
13022: LD_INT 4
13024: PPUSH
13025: LD_INT 6
13027: PPUSH
13028: LD_EXP 99
13032: PPUSH
13033: LD_EXP 100
13037: PPUSH
13038: CALL_OW 12
13042: PPUSH
13043: LD_EXP 41
13047: PPUSH
13048: LD_EXP 42
13052: PPUSH
13053: CALL_OW 12
13057: PPUSH
13058: LD_INT 3
13060: PPUSH
13061: LD_INT 3
13063: PPUSH
13064: LD_INT 1
13066: PUSH
13067: LD_INT 3
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: LD_EXP 98
13078: PPUSH
13079: EMPTY
13080: PPUSH
13081: EMPTY
13082: PPUSH
13083: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
13087: LD_ADDR_EXP 45
13091: PUSH
13092: LD_EXP 45
13096: PUSH
13097: LD_INT 1
13099: MINUS
13100: ST_TO_ADDR
// end ; 4 :
13101: GO 13268
13103: LD_INT 4
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13267
13111: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
13112: LD_INT 6
13114: PPUSH
13115: LD_INT 3
13117: PPUSH
13118: LD_EXP 101
13122: PPUSH
13123: LD_EXP 102
13127: PPUSH
13128: CALL_OW 12
13132: PPUSH
13133: LD_INT 0
13135: PPUSH
13136: LD_EXP 103
13140: PPUSH
13141: LD_EXP 104
13145: PPUSH
13146: CALL_OW 12
13150: PPUSH
13151: LD_INT 0
13153: PPUSH
13154: LD_INT 0
13156: PPUSH
13157: LD_EXP 41
13161: PPUSH
13162: LD_EXP 42
13166: PPUSH
13167: CALL_OW 12
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: CALL 5473 0 9
// Wait ( 0 0$20 ) ;
13179: LD_INT 700
13181: PPUSH
13182: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
13186: LD_INT 5
13188: PPUSH
13189: LD_INT 6
13191: PPUSH
13192: LD_EXP 99
13196: PPUSH
13197: LD_EXP 100
13201: PPUSH
13202: CALL_OW 12
13206: PPUSH
13207: LD_EXP 41
13211: PPUSH
13212: LD_EXP 42
13216: PPUSH
13217: CALL_OW 12
13221: PPUSH
13222: LD_INT 3
13224: PPUSH
13225: LD_INT 3
13227: PPUSH
13228: LD_INT 1
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: LD_EXP 98
13242: PPUSH
13243: EMPTY
13244: PPUSH
13245: EMPTY
13246: PPUSH
13247: CALL 3989 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
13251: LD_ADDR_EXP 45
13255: PUSH
13256: LD_EXP 45
13260: PUSH
13261: LD_INT 1
13263: MINUS
13264: ST_TO_ADDR
// end ; end ;
13265: GO 13268
13267: POP
// end ; end ; end_of_file
13268: END
// export RuSolMinLevel , RuSolMaxLevel ; export RusEngReserve , RusRearAttacks , RusMainAttacks ; export RU2MineSquadArrivalTime , AMOffensiveTime , RU3RocketBatteryActivation ; export function PrepareDifficulty ; begin
13269: LD_INT 0
13271: PPUSH
// if difficulty = 1 then
13272: LD_OWVAR 67
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: IFFALSE 13492
// begin RuSolMinLevel = 4 ;
13282: LD_ADDR_EXP 41
13286: PUSH
13287: LD_INT 4
13289: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
13290: LD_ADDR_EXP 42
13294: PUSH
13295: LD_INT 5
13297: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13298: LD_INT 48
13300: PPUSH
13301: LD_INT 3
13303: PPUSH
13304: LD_INT 2
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13311: LD_INT 51
13313: PPUSH
13314: LD_INT 3
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13324: LD_INT 57
13326: PPUSH
13327: LD_INT 3
13329: PPUSH
13330: LD_INT 2
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13337: LD_INT 48
13339: PPUSH
13340: LD_INT 5
13342: PPUSH
13343: LD_INT 2
13345: PPUSH
13346: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13350: LD_INT 51
13352: PPUSH
13353: LD_INT 5
13355: PPUSH
13356: LD_INT 2
13358: PPUSH
13359: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13363: LD_INT 48
13365: PPUSH
13366: LD_INT 6
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13376: LD_INT 51
13378: PPUSH
13379: LD_INT 6
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13389: LD_INT 57
13391: PPUSH
13392: LD_INT 6
13394: PPUSH
13395: LD_INT 2
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13402: LD_INT 48
13404: PPUSH
13405: LD_INT 8
13407: PPUSH
13408: LD_INT 2
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13415: LD_INT 51
13417: PPUSH
13418: LD_INT 8
13420: PPUSH
13421: LD_INT 2
13423: PPUSH
13424: CALL_OW 322
// RusMainAttacks = 5 ;
13428: LD_ADDR_EXP 45
13432: PUSH
13433: LD_INT 5
13435: ST_TO_ADDR
// ThresholdLvl2 := 4 ;
13436: LD_ADDR_EXP 105
13440: PUSH
13441: LD_INT 4
13443: ST_TO_ADDR
// ThresholdLvl3 := 3 ;
13444: LD_ADDR_EXP 106
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// ThresholdLvl4 := 2 ;
13452: LD_ADDR_EXP 107
13456: PUSH
13457: LD_INT 2
13459: ST_TO_ADDR
// ThresholdLvl5 := 1 ;
13460: LD_ADDR_EXP 108
13464: PUSH
13465: LD_INT 1
13467: ST_TO_ADDR
// RU2MineSquadArrivalTime = 20 20$0 ;
13468: LD_ADDR_EXP 46
13472: PUSH
13473: LD_INT 42000
13475: ST_TO_ADDR
// AMOffensiveTime = 60 60$00 ;
13476: LD_ADDR_EXP 47
13480: PUSH
13481: LD_INT 126000
13483: ST_TO_ADDR
// RU3RocketBatteryActivation = 20 20$00 ;
13484: LD_ADDR_EXP 48
13488: PUSH
13489: LD_INT 42000
13491: ST_TO_ADDR
// end ; if difficulty = 2 then
13492: LD_OWVAR 67
13496: PUSH
13497: LD_INT 2
13499: EQUAL
13500: IFFALSE 13868
// begin RuSolMinLevel = 4 ;
13502: LD_ADDR_EXP 41
13506: PUSH
13507: LD_INT 4
13509: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
13510: LD_ADDR_EXP 42
13514: PUSH
13515: LD_INT 6
13517: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13518: LD_INT 48
13520: PPUSH
13521: LD_INT 3
13523: PPUSH
13524: LD_INT 2
13526: PPUSH
13527: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13531: LD_INT 49
13533: PPUSH
13534: LD_INT 3
13536: PPUSH
13537: LD_INT 2
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13544: LD_INT 51
13546: PPUSH
13547: LD_INT 3
13549: PPUSH
13550: LD_INT 2
13552: PPUSH
13553: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13557: LD_INT 52
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: LD_INT 2
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13570: LD_INT 57
13572: PPUSH
13573: LD_INT 3
13575: PPUSH
13576: LD_INT 2
13578: PPUSH
13579: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13583: LD_INT 58
13585: PPUSH
13586: LD_INT 3
13588: PPUSH
13589: LD_INT 2
13591: PPUSH
13592: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
13596: LD_INT 63
13598: PPUSH
13599: LD_INT 3
13601: PPUSH
13602: LD_INT 2
13604: PPUSH
13605: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13609: LD_INT 48
13611: PPUSH
13612: LD_INT 5
13614: PPUSH
13615: LD_INT 2
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
13622: LD_INT 49
13624: PPUSH
13625: LD_INT 5
13627: PPUSH
13628: LD_INT 2
13630: PPUSH
13631: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13635: LD_INT 51
13637: PPUSH
13638: LD_INT 5
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
13648: LD_INT 52
13650: PPUSH
13651: LD_INT 5
13653: PPUSH
13654: LD_INT 2
13656: PPUSH
13657: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13661: LD_INT 48
13663: PPUSH
13664: LD_INT 6
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
13674: LD_INT 49
13676: PPUSH
13677: LD_INT 6
13679: PPUSH
13680: LD_INT 2
13682: PPUSH
13683: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13687: LD_INT 51
13689: PPUSH
13690: LD_INT 6
13692: PPUSH
13693: LD_INT 2
13695: PPUSH
13696: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
13700: LD_INT 52
13702: PPUSH
13703: LD_INT 6
13705: PPUSH
13706: LD_INT 2
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13713: LD_INT 57
13715: PPUSH
13716: LD_INT 6
13718: PPUSH
13719: LD_INT 2
13721: PPUSH
13722: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
13726: LD_INT 58
13728: PPUSH
13729: LD_INT 6
13731: PPUSH
13732: LD_INT 2
13734: PPUSH
13735: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
13739: LD_INT 63
13741: PPUSH
13742: LD_INT 6
13744: PPUSH
13745: LD_INT 2
13747: PPUSH
13748: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13752: LD_INT 48
13754: PPUSH
13755: LD_INT 8
13757: PPUSH
13758: LD_INT 2
13760: PPUSH
13761: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
13765: LD_INT 49
13767: PPUSH
13768: LD_INT 8
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13778: LD_INT 51
13780: PPUSH
13781: LD_INT 8
13783: PPUSH
13784: LD_INT 2
13786: PPUSH
13787: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
13791: LD_INT 52
13793: PPUSH
13794: LD_INT 8
13796: PPUSH
13797: LD_INT 2
13799: PPUSH
13800: CALL_OW 322
// RusMainAttacks = 10 ;
13804: LD_ADDR_EXP 45
13808: PUSH
13809: LD_INT 10
13811: ST_TO_ADDR
// ThresholdLvl2 := 8 ;
13812: LD_ADDR_EXP 105
13816: PUSH
13817: LD_INT 8
13819: ST_TO_ADDR
// ThresholdLvl3 := 6 ;
13820: LD_ADDR_EXP 106
13824: PUSH
13825: LD_INT 6
13827: ST_TO_ADDR
// ThresholdLvl4 := 4 ;
13828: LD_ADDR_EXP 107
13832: PUSH
13833: LD_INT 4
13835: ST_TO_ADDR
// ThresholdLvl5 := 2 ;
13836: LD_ADDR_EXP 108
13840: PUSH
13841: LD_INT 2
13843: ST_TO_ADDR
// RU2MineSquadArrivalTime = 15 15$0 ;
13844: LD_ADDR_EXP 46
13848: PUSH
13849: LD_INT 31500
13851: ST_TO_ADDR
// AMOffensiveTime = 50 50$00 ;
13852: LD_ADDR_EXP 47
13856: PUSH
13857: LD_INT 105000
13859: ST_TO_ADDR
// RU3RocketBatteryActivation = 15 15$00 ;
13860: LD_ADDR_EXP 48
13864: PUSH
13865: LD_INT 31500
13867: ST_TO_ADDR
// end ; if difficulty = 3 then
13868: LD_OWVAR 67
13872: PUSH
13873: LD_INT 3
13875: EQUAL
13876: IFFALSE 14374
// begin RuSolMinLevel = 5 ;
13878: LD_ADDR_EXP 41
13882: PUSH
13883: LD_INT 5
13885: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
13886: LD_ADDR_EXP 42
13890: PUSH
13891: LD_INT 7
13893: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13894: LD_INT 48
13896: PPUSH
13897: LD_INT 3
13899: PPUSH
13900: LD_INT 2
13902: PPUSH
13903: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13907: LD_INT 51
13909: PPUSH
13910: LD_INT 3
13912: PPUSH
13913: LD_INT 2
13915: PPUSH
13916: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13920: LD_INT 57
13922: PPUSH
13923: LD_INT 3
13925: PPUSH
13926: LD_INT 2
13928: PPUSH
13929: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13933: LD_INT 49
13935: PPUSH
13936: LD_INT 3
13938: PPUSH
13939: LD_INT 2
13941: PPUSH
13942: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13946: LD_INT 52
13948: PPUSH
13949: LD_INT 3
13951: PPUSH
13952: LD_INT 2
13954: PPUSH
13955: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13959: LD_INT 58
13961: PPUSH
13962: LD_INT 3
13964: PPUSH
13965: LD_INT 2
13967: PPUSH
13968: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
13972: LD_INT 50
13974: PPUSH
13975: LD_INT 3
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
13985: LD_INT 59
13987: PPUSH
13988: LD_INT 3
13990: PPUSH
13991: LD_INT 2
13993: PPUSH
13994: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
13998: LD_INT 53
14000: PPUSH
14001: LD_INT 3
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
14011: LD_INT 63
14013: PPUSH
14014: LD_INT 3
14016: PPUSH
14017: LD_INT 2
14019: PPUSH
14020: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
14024: LD_INT 64
14026: PPUSH
14027: LD_INT 3
14029: PPUSH
14030: LD_INT 2
14032: PPUSH
14033: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
14037: LD_INT 48
14039: PPUSH
14040: LD_INT 5
14042: PPUSH
14043: LD_INT 2
14045: PPUSH
14046: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
14050: LD_INT 51
14052: PPUSH
14053: LD_INT 5
14055: PPUSH
14056: LD_INT 2
14058: PPUSH
14059: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
14063: LD_INT 49
14065: PPUSH
14066: LD_INT 5
14068: PPUSH
14069: LD_INT 2
14071: PPUSH
14072: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
14076: LD_INT 52
14078: PPUSH
14079: LD_INT 5
14081: PPUSH
14082: LD_INT 2
14084: PPUSH
14085: CALL_OW 322
// SetTech ( tech_Tech3 , 5 , state_researched ) ;
14089: LD_INT 50
14091: PPUSH
14092: LD_INT 5
14094: PPUSH
14095: LD_INT 2
14097: PPUSH
14098: CALL_OW 322
// SetTech ( tech_Weap3 , 5 , state_researched ) ;
14102: LD_INT 53
14104: PPUSH
14105: LD_INT 5
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
14115: LD_INT 48
14117: PPUSH
14118: LD_INT 6
14120: PPUSH
14121: LD_INT 2
14123: PPUSH
14124: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
14128: LD_INT 51
14130: PPUSH
14131: LD_INT 6
14133: PPUSH
14134: LD_INT 2
14136: PPUSH
14137: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
14141: LD_INT 57
14143: PPUSH
14144: LD_INT 6
14146: PPUSH
14147: LD_INT 2
14149: PPUSH
14150: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
14154: LD_INT 49
14156: PPUSH
14157: LD_INT 6
14159: PPUSH
14160: LD_INT 2
14162: PPUSH
14163: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
14167: LD_INT 52
14169: PPUSH
14170: LD_INT 6
14172: PPUSH
14173: LD_INT 2
14175: PPUSH
14176: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
14180: LD_INT 58
14182: PPUSH
14183: LD_INT 6
14185: PPUSH
14186: LD_INT 2
14188: PPUSH
14189: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
14193: LD_INT 63
14195: PPUSH
14196: LD_INT 6
14198: PPUSH
14199: LD_INT 2
14201: PPUSH
14202: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
14206: LD_INT 64
14208: PPUSH
14209: LD_INT 6
14211: PPUSH
14212: LD_INT 2
14214: PPUSH
14215: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14219: LD_INT 48
14221: PPUSH
14222: LD_INT 8
14224: PPUSH
14225: LD_INT 2
14227: PPUSH
14228: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
14232: LD_INT 49
14234: PPUSH
14235: LD_INT 8
14237: PPUSH
14238: LD_INT 2
14240: PPUSH
14241: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
14245: LD_INT 50
14247: PPUSH
14248: LD_INT 8
14250: PPUSH
14251: LD_INT 2
14253: PPUSH
14254: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14258: LD_INT 51
14260: PPUSH
14261: LD_INT 8
14263: PPUSH
14264: LD_INT 2
14266: PPUSH
14267: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14271: LD_INT 52
14273: PPUSH
14274: LD_INT 8
14276: PPUSH
14277: LD_INT 2
14279: PPUSH
14280: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
14284: LD_INT 53
14286: PPUSH
14287: LD_INT 8
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
14297: LD_INT 5
14299: PPUSH
14300: LD_INT 8
14302: PPUSH
14303: LD_INT 2
14305: PPUSH
14306: CALL_OW 322
// RusMainAttacks = 14 ;
14310: LD_ADDR_EXP 45
14314: PUSH
14315: LD_INT 14
14317: ST_TO_ADDR
// ThresholdLvl2 := 12 ;
14318: LD_ADDR_EXP 105
14322: PUSH
14323: LD_INT 12
14325: ST_TO_ADDR
// ThresholdLvl3 := 10 ;
14326: LD_ADDR_EXP 106
14330: PUSH
14331: LD_INT 10
14333: ST_TO_ADDR
// ThresholdLvl4 := 8 ;
14334: LD_ADDR_EXP 107
14338: PUSH
14339: LD_INT 8
14341: ST_TO_ADDR
// ThresholdLvl5 := 6 ;
14342: LD_ADDR_EXP 108
14346: PUSH
14347: LD_INT 6
14349: ST_TO_ADDR
// RU2MineSquadArrivalTime = 10 10$0 ;
14350: LD_ADDR_EXP 46
14354: PUSH
14355: LD_INT 21000
14357: ST_TO_ADDR
// AMOffensiveTime = 40 40$00 ;
14358: LD_ADDR_EXP 47
14362: PUSH
14363: LD_INT 84000
14365: ST_TO_ADDR
// RU3RocketBatteryActivation = 12 12$30 ;
14366: LD_ADDR_EXP 48
14370: PUSH
14371: LD_INT 26250
14373: ST_TO_ADDR
// end ; end ; end_of_file
14374: LD_VAR 0 1
14378: RET
// export personnel ; export RU_OfficersAlive ; export OffensiveTimeOut , OffensiveSuccessful ; export AfterOffensive ; export PrepareToEnd ; export TanksBuilt ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_double_laser ] ] ) >= 10 do
14379: LD_INT 22
14381: PUSH
14382: LD_INT 7
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 2
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 34
14401: PUSH
14402: LD_INT 10
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PUSH
14419: LD_INT 10
14421: GREATEREQUAL
14422: IFFALSE 14435
14424: GO 14426
14426: DISABLE
// begin TanksBuilt = true ;
14427: LD_ADDR_EXP 55
14431: PUSH
14432: LD_INT 1
14434: ST_TO_ADDR
// end ;
14435: END
// every 0 0$1 trigger AfterOffensive do
14436: LD_EXP 53
14440: IFFALSE 14469
14442: GO 14444
14444: DISABLE
// begin Wait ( AMOffensiveTime ) ;
14445: LD_EXP 47
14449: PPUSH
14450: CALL_OW 67
// if not OffensiveSuccessful then
14454: LD_EXP 52
14458: NOT
14459: IFFALSE 14469
// OffensiveTimeOut = true ;
14461: LD_ADDR_EXP 51
14465: PUSH
14466: LD_INT 1
14468: ST_TO_ADDR
// end ;
14469: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) <= 1 and RU_OfficersAlive <= 1 ) and not PrepareToEnd and not OffensiveTimeOut do
14470: LD_INT 22
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 30
14482: PUSH
14483: LD_INT 1
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: PUSH
14499: LD_INT 1
14501: LESSEQUAL
14502: PUSH
14503: LD_EXP 50
14507: PUSH
14508: LD_INT 1
14510: LESSEQUAL
14511: AND
14512: PUSH
14513: LD_EXP 54
14517: NOT
14518: AND
14519: PUSH
14520: LD_EXP 51
14524: NOT
14525: AND
14526: IFFALSE 14539
14528: GO 14530
14530: DISABLE
// begin OffensiveSuccessful = true ;
14531: LD_ADDR_EXP 52
14535: PUSH
14536: LD_INT 1
14538: ST_TO_ADDR
// end ;
14539: END
// every 0 0$1 trigger OffensiveTimeOut or OffensiveSuccessful do
14540: LD_EXP 51
14544: PUSH
14545: LD_EXP 52
14549: OR
14550: IFFALSE 14783
14552: GO 14554
14554: DISABLE
// begin SayRadio ( Barnes , D7-Barnes-1 ) ;
14555: LD_EXP 15
14559: PPUSH
14560: LD_STRING D7-Barnes-1
14562: PPUSH
14563: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
14567: LD_EXP 8
14571: PPUSH
14572: LD_STRING D7-Simone-1
14574: PPUSH
14575: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2 ) ;
14579: LD_EXP 15
14583: PPUSH
14584: LD_STRING D7-Barnes-2
14586: PPUSH
14587: CALL_OW 94
// if OffensiveTimeOut then
14591: LD_EXP 51
14595: IFFALSE 14623
// begin Say ( Simone , D7-Simone-2a ) ;
14597: LD_EXP 8
14601: PPUSH
14602: LD_STRING D7-Simone-2a
14604: PPUSH
14605: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2a ) ;
14609: LD_EXP 15
14613: PPUSH
14614: LD_STRING D7-Barnes-2a
14616: PPUSH
14617: CALL_OW 94
// end else
14621: GO 14635
// Say ( Simone , D7-Simone-2 ) ;
14623: LD_EXP 8
14627: PPUSH
14628: LD_STRING D7-Simone-2
14630: PPUSH
14631: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-3 ) ;
14635: LD_EXP 15
14639: PPUSH
14640: LD_STRING D7-Barnes-3
14642: PPUSH
14643: CALL_OW 94
// Say ( Simone , D7-Simone-3 ) ;
14647: LD_EXP 8
14651: PPUSH
14652: LD_STRING D7-Simone-3
14654: PPUSH
14655: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-4 ) ;
14659: LD_EXP 15
14663: PPUSH
14664: LD_STRING D7-Barnes-4
14666: PPUSH
14667: CALL_OW 94
// Say ( Simone , D7-Simone-4 ) ;
14671: LD_EXP 8
14675: PPUSH
14676: LD_STRING D7-Simone-4
14678: PPUSH
14679: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-5 ) ;
14683: LD_EXP 15
14687: PPUSH
14688: LD_STRING D7-Barnes-5
14690: PPUSH
14691: CALL_OW 94
// SayRadio ( Barnes , D7-Barnes-6 ) ;
14695: LD_EXP 15
14699: PPUSH
14700: LD_STRING D7-Barnes-6
14702: PPUSH
14703: CALL_OW 94
// if OffensiveTimeOut then
14707: LD_EXP 51
14711: IFFALSE 14725
// SayRadio ( Barnes , D7-Barnes-6a ) ;
14713: LD_EXP 15
14717: PPUSH
14718: LD_STRING D7-Barnes-6a
14720: PPUSH
14721: CALL_OW 94
// Say ( Simone , D7-Simone-5 ) ;
14725: LD_EXP 8
14729: PPUSH
14730: LD_STRING D7-Simone-5
14732: PPUSH
14733: CALL_OW 88
// if not IsDead ( Edmonds ) then
14737: LD_EXP 14
14741: PPUSH
14742: CALL_OW 301
14746: NOT
14747: IFFALSE 14758
// ChangeMissionObjectives ( M4 ) else
14749: LD_STRING M4
14751: PPUSH
14752: CALL_OW 337
14756: GO 14765
// ChangeMissionObjectives ( M4a ) ;
14758: LD_STRING M4a
14760: PPUSH
14761: CALL_OW 337
// SetAreaMapShow ( End_Area , 1 ) ;
14765: LD_INT 12
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: CALL_OW 424
// PrepareToEnd = true ;
14775: LD_ADDR_EXP 54
14779: PUSH
14780: LD_INT 1
14782: ST_TO_ADDR
// end ;
14783: END
// every 0 0$01 trigger PrepareToEnd and IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
14784: LD_EXP 54
14788: PUSH
14789: LD_EXP 14
14793: PPUSH
14794: CALL_OW 301
14798: AND
14799: IFFALSE 15382
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
14808: PPUSH
14809: PPUSH
// begin enable ;
14810: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) = 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) then
14811: LD_INT 12
14813: PPUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 7
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 33
14836: PUSH
14837: LD_INT 1
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 58
14849: PUSH
14850: EMPTY
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 70
14867: PUSH
14868: LD_INT 8
14870: EQUAL
14871: PUSH
14872: LD_EXP 8
14876: PPUSH
14877: LD_INT 12
14879: PPUSH
14880: CALL_OW 308
14884: AND
14885: PUSH
14886: LD_EXP 9
14890: PPUSH
14891: LD_INT 12
14893: PPUSH
14894: CALL_OW 308
14898: AND
14899: PUSH
14900: LD_EXP 10
14904: PPUSH
14905: LD_INT 12
14907: PPUSH
14908: CALL_OW 308
14912: AND
14913: IFFALSE 15382
// begin wait ( 0 0$1 ) ;
14915: LD_INT 35
14917: PPUSH
14918: CALL_OW 67
// Units = [ ] ;
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: EMPTY
14928: ST_TO_ADDR
// Vehicles := [ ] ;
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: EMPTY
14935: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14936: LD_ADDR_EXP 49
14940: PUSH
14941: LD_INT 22
14943: PUSH
14944: LD_INT 7
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 21
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 50
14963: PUSH
14964: EMPTY
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
14977: LD_ADDR_VAR 0 1
14981: PUSH
14982: LD_INT 12
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 7
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 21
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 70
15013: ST_TO_ADDR
// for i = 1 to 8 do
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: DOUBLE
15020: LD_INT 1
15022: DEC
15023: ST_TO_ADDR
15024: LD_INT 8
15026: PUSH
15027: FOR_TO
15028: IFFALSE 15140
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
15030: LD_ADDR_VAR 0 3
15034: PUSH
15035: LD_VAR 0 3
15039: PUSH
15040: LD_VAR 0 1
15044: PUSH
15045: LD_VAR 0 2
15049: ARRAY
15050: PPUSH
15051: CALL_OW 265
15055: PUSH
15056: LD_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: ARRAY
15066: PPUSH
15067: CALL_OW 262
15071: PUSH
15072: LD_VAR 0 1
15076: PUSH
15077: LD_VAR 0 2
15081: ARRAY
15082: PPUSH
15083: CALL_OW 263
15087: PUSH
15088: LD_VAR 0 1
15092: PUSH
15093: LD_VAR 0 2
15097: ARRAY
15098: PPUSH
15099: CALL_OW 264
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: ADD
15110: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
15111: LD_ADDR_VAR 0 4
15115: PUSH
15116: LD_VAR 0 4
15120: PUSH
15121: LD_VAR 0 1
15125: PUSH
15126: LD_VAR 0 2
15130: ARRAY
15131: PPUSH
15132: CALL_OW 311
15136: ADD
15137: ST_TO_ADDR
// end ;
15138: GO 15027
15140: POP
15141: POP
// Units = Units diff [ Simone , Kathryn , Miller ] ;
15142: LD_ADDR_VAR 0 4
15146: PUSH
15147: LD_VAR 0 4
15151: PUSH
15152: LD_EXP 8
15156: PUSH
15157: LD_EXP 9
15161: PUSH
15162: LD_EXP 10
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: DIFF
15172: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
15173: LD_VAR 0 4
15177: PPUSH
15178: LD_STRING AM02_Survivors
15180: PPUSH
15181: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
15185: LD_EXP 8
15189: PPUSH
15190: LD_STRING Simone
15192: PPUSH
15193: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
15197: LD_EXP 9
15201: PPUSH
15202: LD_STRING Kathryn
15204: PPUSH
15205: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
15209: LD_EXP 10
15213: PPUSH
15214: LD_STRING Miller
15216: PPUSH
15217: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
15221: LD_VAR 0 3
15225: PPUSH
15226: LD_STRING AM02_Vehicles
15228: PPUSH
15229: CALL_OW 39
// if OffensiveSuccessful then
15233: LD_EXP 52
15237: IFFALSE 15251
// AddMedal ( Bases , 1 ) else
15239: LD_STRING Bases
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 101
15249: GO 15262
// AddMedal ( Bases , - 1 ) ;
15251: LD_STRING Bases
15253: PPUSH
15254: LD_INT 1
15256: NEG
15257: PPUSH
15258: CALL_OW 101
// if TanksBuilt then
15262: LD_EXP 55
15266: IFFALSE 15280
// AddMedal ( Tanks , 1 ) else
15268: LD_STRING Tanks
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 101
15278: GO 15291
// AddMedal ( Tanks , - 1 ) ;
15280: LD_STRING Tanks
15282: PPUSH
15283: LD_INT 1
15285: NEG
15286: PPUSH
15287: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15291: LD_EXP 30
15295: PUSH
15296: LD_INT 0
15298: EQUAL
15299: PUSH
15300: LD_EXP 29
15304: PUSH
15305: LD_INT 0
15307: EQUAL
15308: OR
15309: PUSH
15310: LD_EXP 31
15314: NOT
15315: AND
15316: IFFALSE 15330
// AddMedal ( Rockets , 1 ) else
15318: LD_STRING Rockets
15320: PPUSH
15321: LD_INT 1
15323: PPUSH
15324: CALL_OW 101
15328: GO 15341
// AddMedal ( Rockets , - 1 ) ;
15330: LD_STRING Rockets
15332: PPUSH
15333: LD_INT 1
15335: NEG
15336: PPUSH
15337: CALL_OW 101
// GiveMedals ( Main ) ;
15341: LD_STRING Main
15343: PPUSH
15344: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Units ] ) ;
15348: LD_EXP 8
15352: PUSH
15353: LD_EXP 9
15357: PUSH
15358: LD_EXP 10
15362: PUSH
15363: LD_VAR 0 4
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 43
// YouWin ;
15378: CALL_OW 103
// end ; end ;
15382: PPOPN 4
15384: END
// every 0 0$01 trigger PrepareToEnd and not IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
15385: LD_EXP 54
15389: PUSH
15390: LD_EXP 14
15394: PPUSH
15395: CALL_OW 301
15399: NOT
15400: AND
15401: IFFALSE 16022
15403: GO 15405
15405: DISABLE
15406: LD_INT 0
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
// begin enable ;
15412: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) = 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) and IsInArea ( Edmonds , End_Area ) then
15413: LD_INT 12
15415: PPUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 7
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 33
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: LD_INT 58
15451: PUSH
15452: EMPTY
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PPUSH
15465: CALL_OW 70
15469: PUSH
15470: LD_INT 8
15472: EQUAL
15473: PUSH
15474: LD_EXP 8
15478: PPUSH
15479: LD_INT 12
15481: PPUSH
15482: CALL_OW 308
15486: AND
15487: PUSH
15488: LD_EXP 9
15492: PPUSH
15493: LD_INT 12
15495: PPUSH
15496: CALL_OW 308
15500: AND
15501: PUSH
15502: LD_EXP 10
15506: PPUSH
15507: LD_INT 12
15509: PPUSH
15510: CALL_OW 308
15514: AND
15515: PUSH
15516: LD_EXP 14
15520: PPUSH
15521: LD_INT 12
15523: PPUSH
15524: CALL_OW 308
15528: AND
15529: IFFALSE 16022
// begin wait ( 0 0$1 ) ;
15531: LD_INT 35
15533: PPUSH
15534: CALL_OW 67
// Units = [ ] ;
15538: LD_ADDR_VAR 0 4
15542: PUSH
15543: EMPTY
15544: ST_TO_ADDR
// Vehicles := [ ] ;
15545: LD_ADDR_VAR 0 3
15549: PUSH
15550: EMPTY
15551: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15552: LD_ADDR_EXP 49
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 7
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 21
15569: PUSH
15570: LD_INT 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 50
15579: PUSH
15580: EMPTY
15581: LIST
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: PPUSH
15588: CALL_OW 69
15592: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
15593: LD_ADDR_VAR 0 1
15597: PUSH
15598: LD_INT 12
15600: PPUSH
15601: LD_INT 22
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 21
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PPUSH
15625: CALL_OW 70
15629: ST_TO_ADDR
// for i = 1 to 8 do
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: DOUBLE
15636: LD_INT 1
15638: DEC
15639: ST_TO_ADDR
15640: LD_INT 8
15642: PUSH
15643: FOR_TO
15644: IFFALSE 15756
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: LD_VAR 0 3
15655: PUSH
15656: LD_VAR 0 1
15660: PUSH
15661: LD_VAR 0 2
15665: ARRAY
15666: PPUSH
15667: CALL_OW 265
15671: PUSH
15672: LD_VAR 0 1
15676: PUSH
15677: LD_VAR 0 2
15681: ARRAY
15682: PPUSH
15683: CALL_OW 262
15687: PUSH
15688: LD_VAR 0 1
15692: PUSH
15693: LD_VAR 0 2
15697: ARRAY
15698: PPUSH
15699: CALL_OW 263
15703: PUSH
15704: LD_VAR 0 1
15708: PUSH
15709: LD_VAR 0 2
15713: ARRAY
15714: PPUSH
15715: CALL_OW 264
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: ADD
15726: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
15727: LD_ADDR_VAR 0 4
15731: PUSH
15732: LD_VAR 0 4
15736: PUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_VAR 0 2
15746: ARRAY
15747: PPUSH
15748: CALL_OW 311
15752: ADD
15753: ST_TO_ADDR
// end ;
15754: GO 15643
15756: POP
15757: POP
// Units = Units diff [ Simone , Kathryn , Miller , Edmonds ] ;
15758: LD_ADDR_VAR 0 4
15762: PUSH
15763: LD_VAR 0 4
15767: PUSH
15768: LD_EXP 8
15772: PUSH
15773: LD_EXP 9
15777: PUSH
15778: LD_EXP 10
15782: PUSH
15783: LD_EXP 14
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: DIFF
15794: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
15795: LD_VAR 0 4
15799: PPUSH
15800: LD_STRING AM02_Survivors
15802: PPUSH
15803: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
15807: LD_EXP 8
15811: PPUSH
15812: LD_STRING Simone
15814: PPUSH
15815: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
15819: LD_EXP 9
15823: PPUSH
15824: LD_STRING Kathryn
15826: PPUSH
15827: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
15831: LD_EXP 10
15835: PPUSH
15836: LD_STRING Miller
15838: PPUSH
15839: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
15843: LD_EXP 14
15847: PPUSH
15848: LD_STRING Edmonds
15850: PPUSH
15851: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
15855: LD_VAR 0 3
15859: PPUSH
15860: LD_STRING AM02_Vehicles
15862: PPUSH
15863: CALL_OW 39
// if OffensiveSuccessful then
15867: LD_EXP 52
15871: IFFALSE 15885
// AddMedal ( Bases , 1 ) else
15873: LD_STRING Bases
15875: PPUSH
15876: LD_INT 1
15878: PPUSH
15879: CALL_OW 101
15883: GO 15896
// AddMedal ( Bases , - 1 ) ;
15885: LD_STRING Bases
15887: PPUSH
15888: LD_INT 1
15890: NEG
15891: PPUSH
15892: CALL_OW 101
// if TanksBuilt then
15896: LD_EXP 55
15900: IFFALSE 15914
// AddMedal ( Tanks , 1 ) else
15902: LD_STRING Tanks
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 101
15912: GO 15925
// AddMedal ( Tanks , - 1 ) ;
15914: LD_STRING Tanks
15916: PPUSH
15917: LD_INT 1
15919: NEG
15920: PPUSH
15921: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15925: LD_EXP 30
15929: PUSH
15930: LD_INT 0
15932: EQUAL
15933: PUSH
15934: LD_EXP 29
15938: PUSH
15939: LD_INT 0
15941: EQUAL
15942: OR
15943: PUSH
15944: LD_EXP 31
15948: NOT
15949: AND
15950: IFFALSE 15964
// AddMedal ( Rockets , 1 ) else
15952: LD_STRING Rockets
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: CALL_OW 101
15962: GO 15975
// AddMedal ( Rockets , - 1 ) ;
15964: LD_STRING Rockets
15966: PPUSH
15967: LD_INT 1
15969: NEG
15970: PPUSH
15971: CALL_OW 101
// GiveMedals ( Main ) ;
15975: LD_STRING Main
15977: PPUSH
15978: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Edmonds , Units ] ) ;
15982: LD_EXP 8
15986: PUSH
15987: LD_EXP 9
15991: PUSH
15992: LD_EXP 10
15996: PUSH
15997: LD_EXP 14
16001: PUSH
16002: LD_VAR 0 4
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: PPUSH
16014: CALL_OW 43
// YouWin ;
16018: CALL_OW 103
// end ; end ;
16022: PPOPN 4
16024: END
// every 0 0$1 trigger EndTime = 0 do
16025: LD_EXP 5
16029: PUSH
16030: LD_INT 0
16032: EQUAL
16033: IFFALSE 16074
16035: GO 16037
16037: DISABLE
// begin InGameOn ;
16038: CALL_OW 8
// DialogueOn ;
16042: CALL_OW 6
// SayRadio ( Barnes , D7a-Barnes-1 ) ;
16046: LD_EXP 15
16050: PPUSH
16051: LD_STRING D7a-Barnes-1
16053: PPUSH
16054: CALL_OW 94
// TimeOutFirstWarning := true ;
16058: LD_ADDR_EXP 7
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// InGameOff ;
16066: CALL_OW 9
// DialogueOff ;
16070: CALL_OW 7
// end ;
16074: END
// every 0 0$1 trigger EndTime2 = 0 do
16075: LD_EXP 6
16079: PUSH
16080: LD_INT 0
16082: EQUAL
16083: IFFALSE 16123
16085: GO 16087
16087: DISABLE
// begin InGameOn ;
16088: CALL_OW 8
// DialogueOn ;
16092: CALL_OW 6
// SayRadio ( Barnes , D7b-Barnes-1 ) ;
16096: LD_EXP 15
16100: PPUSH
16101: LD_STRING D7b-Barnes-1
16103: PPUSH
16104: CALL_OW 94
// InGameOff ;
16108: CALL_OW 9
// DialogueOff ;
16112: CALL_OW 7
// YouLost ( TimeOut ) ;
16116: LD_STRING TimeOut
16118: PPUSH
16119: CALL_OW 104
// end ;
16123: END
// every 0 0$1 do
16124: GO 16126
16126: DISABLE
// begin enable ;
16127: ENABLE
// if not PrepareToEnd then
16128: LD_EXP 54
16132: NOT
16133: IFFALSE 16143
// begin Display_Strings :=  ;
16135: LD_ADDR_OWVAR 47
16139: PUSH
16140: LD_STRING 
16142: ST_TO_ADDR
// end ; if PrepareToEnd and not TimeOutFirstWarning then
16143: LD_EXP 54
16147: PUSH
16148: LD_EXP 7
16152: NOT
16153: AND
16154: IFFALSE 16187
// begin EndTime := EndTime - 0 0$01 ;
16156: LD_ADDR_EXP 5
16160: PUSH
16161: LD_EXP 5
16165: PUSH
16166: LD_INT 35
16168: MINUS
16169: ST_TO_ADDR
// Display_Strings := [ #Am02-Timeout , EndTime ] ;
16170: LD_ADDR_OWVAR 47
16174: PUSH
16175: LD_STRING #Am02-Timeout
16177: PUSH
16178: LD_EXP 5
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: ST_TO_ADDR
// end ; if PrepareToEnd and TimeOutFirstWarning then
16187: LD_EXP 54
16191: PUSH
16192: LD_EXP 7
16196: AND
16197: IFFALSE 16230
// begin EndTime2 := EndTime2 - 0 0$01 ;
16199: LD_ADDR_EXP 6
16203: PUSH
16204: LD_EXP 6
16208: PUSH
16209: LD_INT 35
16211: MINUS
16212: ST_TO_ADDR
// Display_Strings := [ #Am02-TimeoutAdd , EndTime2 ] ;
16213: LD_ADDR_OWVAR 47
16217: PUSH
16218: LD_STRING #Am02-TimeoutAdd
16220: PUSH
16221: LD_EXP 6
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: ST_TO_ADDR
// end ; end ; end_of_file
16230: END
// every 0 0$1 trigger MissionStart do
16231: LD_EXP 1
16235: IFFALSE 16419
16237: GO 16239
16239: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
16240: LD_INT 2100
16242: PPUSH
16243: LD_INT 3150
16245: PPUSH
16246: CALL_OW 12
16250: PPUSH
16251: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16255: LD_INT 2
16257: PPUSH
16258: LD_INT 5
16260: PPUSH
16261: CALL_OW 12
16265: PPUSH
16266: LD_INT 9
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 55
// case Rand ( 1 , 3 ) of 1 :
16276: LD_INT 1
16278: PPUSH
16279: LD_INT 3
16281: PPUSH
16282: CALL_OW 12
16286: PUSH
16287: LD_INT 1
16289: DOUBLE
16290: EQUAL
16291: IFTRUE 16295
16293: GO 16334
16295: POP
// begin wait ( Rand ( 0 0$5 , 0 0$10 ) ) ;
16296: LD_INT 175
16298: PPUSH
16299: LD_INT 350
16301: PPUSH
16302: CALL_OW 12
16306: PPUSH
16307: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16311: LD_INT 2
16313: PPUSH
16314: LD_INT 5
16316: PPUSH
16317: CALL_OW 12
16321: PPUSH
16322: LD_INT 9
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: CALL_OW 55
// end ; 2 :
16332: GO 16418
16334: LD_INT 2
16336: DOUBLE
16337: EQUAL
16338: IFTRUE 16342
16340: GO 16417
16342: POP
// begin wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16343: LD_INT 70
16345: PPUSH
16346: LD_INT 350
16348: PPUSH
16349: CALL_OW 12
16353: PPUSH
16354: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16358: LD_INT 2
16360: PPUSH
16361: LD_INT 5
16363: PPUSH
16364: CALL_OW 12
16368: PPUSH
16369: LD_INT 9
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 55
// wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16379: LD_INT 70
16381: PPUSH
16382: LD_INT 350
16384: PPUSH
16385: CALL_OW 12
16389: PPUSH
16390: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16394: LD_INT 2
16396: PPUSH
16397: LD_INT 5
16399: PPUSH
16400: CALL_OW 12
16404: PPUSH
16405: LD_INT 9
16407: PPUSH
16408: LD_INT 1
16410: PPUSH
16411: CALL_OW 55
// end ; end ;
16415: GO 16418
16417: POP
// enable ;
16418: ENABLE
// end ; end_of_file
16419: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
// skirmish := false ;
16424: LD_ADDR_EXP 56
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// mc_bases := [ ] ;
16432: LD_ADDR_EXP 57
16436: PUSH
16437: EMPTY
16438: ST_TO_ADDR
// mc_sides := [ ] ;
16439: LD_ADDR_EXP 83
16443: PUSH
16444: EMPTY
16445: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16446: LD_ADDR_EXP 58
16450: PUSH
16451: EMPTY
16452: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16453: LD_ADDR_EXP 59
16457: PUSH
16458: EMPTY
16459: ST_TO_ADDR
// mc_need_heal := [ ] ;
16460: LD_ADDR_EXP 60
16464: PUSH
16465: EMPTY
16466: ST_TO_ADDR
// mc_healers := [ ] ;
16467: LD_ADDR_EXP 61
16471: PUSH
16472: EMPTY
16473: ST_TO_ADDR
// mc_build_list := [ ] ;
16474: LD_ADDR_EXP 62
16478: PUSH
16479: EMPTY
16480: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16481: LD_ADDR_EXP 89
16485: PUSH
16486: EMPTY
16487: ST_TO_ADDR
// mc_builders := [ ] ;
16488: LD_ADDR_EXP 63
16492: PUSH
16493: EMPTY
16494: ST_TO_ADDR
// mc_construct_list := [ ] ;
16495: LD_ADDR_EXP 64
16499: PUSH
16500: EMPTY
16501: ST_TO_ADDR
// mc_turret_list := [ ] ;
16502: LD_ADDR_EXP 65
16506: PUSH
16507: EMPTY
16508: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16509: LD_ADDR_EXP 66
16513: PUSH
16514: EMPTY
16515: ST_TO_ADDR
// mc_miners := [ ] ;
16516: LD_ADDR_EXP 71
16520: PUSH
16521: EMPTY
16522: ST_TO_ADDR
// mc_mines := [ ] ;
16523: LD_ADDR_EXP 70
16527: PUSH
16528: EMPTY
16529: ST_TO_ADDR
// mc_minefields := [ ] ;
16530: LD_ADDR_EXP 72
16534: PUSH
16535: EMPTY
16536: ST_TO_ADDR
// mc_crates := [ ] ;
16537: LD_ADDR_EXP 73
16541: PUSH
16542: EMPTY
16543: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16544: LD_ADDR_EXP 74
16548: PUSH
16549: EMPTY
16550: ST_TO_ADDR
// mc_crates_area := [ ] ;
16551: LD_ADDR_EXP 75
16555: PUSH
16556: EMPTY
16557: ST_TO_ADDR
// mc_vehicles := [ ] ;
16558: LD_ADDR_EXP 76
16562: PUSH
16563: EMPTY
16564: ST_TO_ADDR
// mc_attack := [ ] ;
16565: LD_ADDR_EXP 77
16569: PUSH
16570: EMPTY
16571: ST_TO_ADDR
// mc_produce := [ ] ;
16572: LD_ADDR_EXP 78
16576: PUSH
16577: EMPTY
16578: ST_TO_ADDR
// mc_defender := [ ] ;
16579: LD_ADDR_EXP 79
16583: PUSH
16584: EMPTY
16585: ST_TO_ADDR
// mc_parking := [ ] ;
16586: LD_ADDR_EXP 81
16590: PUSH
16591: EMPTY
16592: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16593: LD_ADDR_EXP 67
16597: PUSH
16598: EMPTY
16599: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16600: LD_ADDR_EXP 69
16604: PUSH
16605: EMPTY
16606: ST_TO_ADDR
// mc_scan := [ ] ;
16607: LD_ADDR_EXP 80
16611: PUSH
16612: EMPTY
16613: ST_TO_ADDR
// mc_scan_area := [ ] ;
16614: LD_ADDR_EXP 82
16618: PUSH
16619: EMPTY
16620: ST_TO_ADDR
// mc_tech := [ ] ;
16621: LD_ADDR_EXP 84
16625: PUSH
16626: EMPTY
16627: ST_TO_ADDR
// end ;
16628: LD_VAR 0 1
16632: RET
// export function MC_Kill ( base ) ; begin
16633: LD_INT 0
16635: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16636: LD_ADDR_EXP 57
16640: PUSH
16641: LD_EXP 57
16645: PPUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: EMPTY
16652: PPUSH
16653: CALL_OW 1
16657: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16658: LD_ADDR_EXP 58
16662: PUSH
16663: LD_EXP 58
16667: PPUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: EMPTY
16674: PPUSH
16675: CALL_OW 1
16679: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16680: LD_ADDR_EXP 59
16684: PUSH
16685: LD_EXP 59
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: EMPTY
16696: PPUSH
16697: CALL_OW 1
16701: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16702: LD_ADDR_EXP 60
16706: PUSH
16707: LD_EXP 60
16711: PPUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: EMPTY
16718: PPUSH
16719: CALL_OW 1
16723: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16724: LD_ADDR_EXP 61
16728: PUSH
16729: LD_EXP 61
16733: PPUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: EMPTY
16740: PPUSH
16741: CALL_OW 1
16745: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16746: LD_ADDR_EXP 62
16750: PUSH
16751: LD_EXP 62
16755: PPUSH
16756: LD_VAR 0 1
16760: PPUSH
16761: EMPTY
16762: PPUSH
16763: CALL_OW 1
16767: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16768: LD_ADDR_EXP 63
16772: PUSH
16773: LD_EXP 63
16777: PPUSH
16778: LD_VAR 0 1
16782: PPUSH
16783: EMPTY
16784: PPUSH
16785: CALL_OW 1
16789: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16790: LD_ADDR_EXP 64
16794: PUSH
16795: LD_EXP 64
16799: PPUSH
16800: LD_VAR 0 1
16804: PPUSH
16805: EMPTY
16806: PPUSH
16807: CALL_OW 1
16811: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16812: LD_ADDR_EXP 65
16816: PUSH
16817: LD_EXP 65
16821: PPUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: EMPTY
16828: PPUSH
16829: CALL_OW 1
16833: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16834: LD_ADDR_EXP 66
16838: PUSH
16839: LD_EXP 66
16843: PPUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: EMPTY
16850: PPUSH
16851: CALL_OW 1
16855: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16856: LD_ADDR_EXP 67
16860: PUSH
16861: LD_EXP 67
16865: PPUSH
16866: LD_VAR 0 1
16870: PPUSH
16871: EMPTY
16872: PPUSH
16873: CALL_OW 1
16877: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16878: LD_ADDR_EXP 68
16882: PUSH
16883: LD_EXP 68
16887: PPUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 0
16895: PPUSH
16896: CALL_OW 1
16900: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16901: LD_ADDR_EXP 69
16905: PUSH
16906: LD_EXP 69
16910: PPUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: EMPTY
16917: PPUSH
16918: CALL_OW 1
16922: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16923: LD_ADDR_EXP 70
16927: PUSH
16928: LD_EXP 70
16932: PPUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: EMPTY
16939: PPUSH
16940: CALL_OW 1
16944: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16945: LD_ADDR_EXP 71
16949: PUSH
16950: LD_EXP 71
16954: PPUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: EMPTY
16961: PPUSH
16962: CALL_OW 1
16966: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16967: LD_ADDR_EXP 72
16971: PUSH
16972: LD_EXP 72
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: EMPTY
16983: PPUSH
16984: CALL_OW 1
16988: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16989: LD_ADDR_EXP 73
16993: PUSH
16994: LD_EXP 73
16998: PPUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: EMPTY
17005: PPUSH
17006: CALL_OW 1
17010: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17011: LD_ADDR_EXP 74
17015: PUSH
17016: LD_EXP 74
17020: PPUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: EMPTY
17027: PPUSH
17028: CALL_OW 1
17032: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17033: LD_ADDR_EXP 75
17037: PUSH
17038: LD_EXP 75
17042: PPUSH
17043: LD_VAR 0 1
17047: PPUSH
17048: EMPTY
17049: PPUSH
17050: CALL_OW 1
17054: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17055: LD_ADDR_EXP 76
17059: PUSH
17060: LD_EXP 76
17064: PPUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: EMPTY
17071: PPUSH
17072: CALL_OW 1
17076: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17077: LD_ADDR_EXP 77
17081: PUSH
17082: LD_EXP 77
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: EMPTY
17093: PPUSH
17094: CALL_OW 1
17098: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17099: LD_ADDR_EXP 78
17103: PUSH
17104: LD_EXP 78
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: EMPTY
17115: PPUSH
17116: CALL_OW 1
17120: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17121: LD_ADDR_EXP 79
17125: PUSH
17126: LD_EXP 79
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: EMPTY
17137: PPUSH
17138: CALL_OW 1
17142: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17143: LD_ADDR_EXP 80
17147: PUSH
17148: LD_EXP 80
17152: PPUSH
17153: LD_VAR 0 1
17157: PPUSH
17158: EMPTY
17159: PPUSH
17160: CALL_OW 1
17164: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17165: LD_ADDR_EXP 81
17169: PUSH
17170: LD_EXP 81
17174: PPUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: EMPTY
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17187: LD_ADDR_EXP 82
17191: PUSH
17192: LD_EXP 82
17196: PPUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: EMPTY
17203: PPUSH
17204: CALL_OW 1
17208: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17209: LD_ADDR_EXP 84
17213: PUSH
17214: LD_EXP 84
17218: PPUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: EMPTY
17225: PPUSH
17226: CALL_OW 1
17230: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17231: LD_ADDR_EXP 86
17235: PUSH
17236: LD_EXP 86
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: EMPTY
17247: PPUSH
17248: CALL_OW 1
17252: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17253: LD_ADDR_EXP 87
17257: PUSH
17258: LD_EXP 87
17262: PPUSH
17263: LD_VAR 0 1
17267: PPUSH
17268: EMPTY
17269: PPUSH
17270: CALL_OW 1
17274: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17275: LD_ADDR_EXP 88
17279: PUSH
17280: LD_EXP 88
17284: PPUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: EMPTY
17291: PPUSH
17292: CALL_OW 1
17296: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17297: LD_ADDR_EXP 89
17301: PUSH
17302: LD_EXP 89
17306: PPUSH
17307: LD_VAR 0 1
17311: PPUSH
17312: EMPTY
17313: PPUSH
17314: CALL_OW 1
17318: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17319: LD_ADDR_EXP 90
17323: PUSH
17324: LD_EXP 90
17328: PPUSH
17329: LD_VAR 0 1
17333: PPUSH
17334: EMPTY
17335: PPUSH
17336: CALL_OW 1
17340: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17341: LD_ADDR_EXP 91
17345: PUSH
17346: LD_EXP 91
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: EMPTY
17357: PPUSH
17358: CALL_OW 1
17362: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17363: LD_ADDR_EXP 92
17367: PUSH
17368: LD_EXP 92
17372: PPUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: EMPTY
17379: PPUSH
17380: CALL_OW 1
17384: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17385: LD_ADDR_EXP 93
17389: PUSH
17390: LD_EXP 93
17394: PPUSH
17395: LD_VAR 0 1
17399: PPUSH
17400: EMPTY
17401: PPUSH
17402: CALL_OW 1
17406: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17407: LD_ADDR_EXP 94
17411: PUSH
17412: LD_EXP 94
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: EMPTY
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17429: LD_ADDR_EXP 95
17433: PUSH
17434: LD_EXP 95
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: EMPTY
17445: PPUSH
17446: CALL_OW 1
17450: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17451: LD_ADDR_EXP 96
17455: PUSH
17456: LD_EXP 96
17460: PPUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: EMPTY
17467: PPUSH
17468: CALL_OW 1
17472: ST_TO_ADDR
// end ;
17473: LD_VAR 0 2
17477: RET
// export function MC_Start ( ) ; var i ; begin
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
// for i = 1 to mc_bases do
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: DOUBLE
17488: LD_INT 1
17490: DEC
17491: ST_TO_ADDR
17492: LD_EXP 57
17496: PUSH
17497: FOR_TO
17498: IFFALSE 18431
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17500: LD_ADDR_EXP 58
17504: PUSH
17505: LD_EXP 58
17509: PPUSH
17510: LD_VAR 0 2
17514: PPUSH
17515: EMPTY
17516: PPUSH
17517: CALL_OW 1
17521: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17522: LD_ADDR_EXP 59
17526: PUSH
17527: LD_EXP 59
17531: PPUSH
17532: LD_VAR 0 2
17536: PPUSH
17537: EMPTY
17538: PPUSH
17539: CALL_OW 1
17543: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17544: LD_ADDR_EXP 60
17548: PUSH
17549: LD_EXP 60
17553: PPUSH
17554: LD_VAR 0 2
17558: PPUSH
17559: EMPTY
17560: PPUSH
17561: CALL_OW 1
17565: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17566: LD_ADDR_EXP 61
17570: PUSH
17571: LD_EXP 61
17575: PPUSH
17576: LD_VAR 0 2
17580: PPUSH
17581: EMPTY
17582: PUSH
17583: EMPTY
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PPUSH
17589: CALL_OW 1
17593: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17594: LD_ADDR_EXP 62
17598: PUSH
17599: LD_EXP 62
17603: PPUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: EMPTY
17610: PPUSH
17611: CALL_OW 1
17615: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17616: LD_ADDR_EXP 89
17620: PUSH
17621: LD_EXP 89
17625: PPUSH
17626: LD_VAR 0 2
17630: PPUSH
17631: EMPTY
17632: PPUSH
17633: CALL_OW 1
17637: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17638: LD_ADDR_EXP 63
17642: PUSH
17643: LD_EXP 63
17647: PPUSH
17648: LD_VAR 0 2
17652: PPUSH
17653: EMPTY
17654: PPUSH
17655: CALL_OW 1
17659: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17660: LD_ADDR_EXP 64
17664: PUSH
17665: LD_EXP 64
17669: PPUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: EMPTY
17676: PPUSH
17677: CALL_OW 1
17681: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17682: LD_ADDR_EXP 65
17686: PUSH
17687: LD_EXP 65
17691: PPUSH
17692: LD_VAR 0 2
17696: PPUSH
17697: EMPTY
17698: PPUSH
17699: CALL_OW 1
17703: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17704: LD_ADDR_EXP 66
17708: PUSH
17709: LD_EXP 66
17713: PPUSH
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_EXP 57
17723: PUSH
17724: LD_VAR 0 2
17728: ARRAY
17729: PPUSH
17730: LD_INT 2
17732: PUSH
17733: LD_INT 30
17735: PUSH
17736: LD_INT 32
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 30
17745: PUSH
17746: LD_INT 31
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 58
17760: PUSH
17761: EMPTY
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PPUSH
17768: CALL_OW 72
17772: PPUSH
17773: CALL_OW 1
17777: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17778: LD_ADDR_EXP 67
17782: PUSH
17783: LD_EXP 67
17787: PPUSH
17788: LD_VAR 0 2
17792: PPUSH
17793: EMPTY
17794: PPUSH
17795: CALL_OW 1
17799: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17800: LD_ADDR_EXP 71
17804: PUSH
17805: LD_EXP 71
17809: PPUSH
17810: LD_VAR 0 2
17814: PPUSH
17815: EMPTY
17816: PPUSH
17817: CALL_OW 1
17821: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17822: LD_ADDR_EXP 70
17826: PUSH
17827: LD_EXP 70
17831: PPUSH
17832: LD_VAR 0 2
17836: PPUSH
17837: EMPTY
17838: PPUSH
17839: CALL_OW 1
17843: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17844: LD_ADDR_EXP 72
17848: PUSH
17849: LD_EXP 72
17853: PPUSH
17854: LD_VAR 0 2
17858: PPUSH
17859: EMPTY
17860: PPUSH
17861: CALL_OW 1
17865: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17866: LD_ADDR_EXP 73
17870: PUSH
17871: LD_EXP 73
17875: PPUSH
17876: LD_VAR 0 2
17880: PPUSH
17881: EMPTY
17882: PPUSH
17883: CALL_OW 1
17887: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17888: LD_ADDR_EXP 74
17892: PUSH
17893: LD_EXP 74
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: EMPTY
17904: PPUSH
17905: CALL_OW 1
17909: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17910: LD_ADDR_EXP 75
17914: PUSH
17915: LD_EXP 75
17919: PPUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: EMPTY
17926: PPUSH
17927: CALL_OW 1
17931: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17932: LD_ADDR_EXP 76
17936: PUSH
17937: LD_EXP 76
17941: PPUSH
17942: LD_VAR 0 2
17946: PPUSH
17947: EMPTY
17948: PPUSH
17949: CALL_OW 1
17953: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17954: LD_ADDR_EXP 77
17958: PUSH
17959: LD_EXP 77
17963: PPUSH
17964: LD_VAR 0 2
17968: PPUSH
17969: EMPTY
17970: PPUSH
17971: CALL_OW 1
17975: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17976: LD_ADDR_EXP 78
17980: PUSH
17981: LD_EXP 78
17985: PPUSH
17986: LD_VAR 0 2
17990: PPUSH
17991: EMPTY
17992: PPUSH
17993: CALL_OW 1
17997: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17998: LD_ADDR_EXP 79
18002: PUSH
18003: LD_EXP 79
18007: PPUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: EMPTY
18014: PPUSH
18015: CALL_OW 1
18019: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18020: LD_ADDR_EXP 68
18024: PUSH
18025: LD_EXP 68
18029: PPUSH
18030: LD_VAR 0 2
18034: PPUSH
18035: LD_INT 0
18037: PPUSH
18038: CALL_OW 1
18042: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18043: LD_ADDR_EXP 81
18047: PUSH
18048: LD_EXP 81
18052: PPUSH
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_INT 0
18060: PPUSH
18061: CALL_OW 1
18065: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18066: LD_ADDR_EXP 69
18070: PUSH
18071: LD_EXP 69
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: EMPTY
18082: PPUSH
18083: CALL_OW 1
18087: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18088: LD_ADDR_EXP 80
18092: PUSH
18093: LD_EXP 80
18097: PPUSH
18098: LD_VAR 0 2
18102: PPUSH
18103: LD_INT 0
18105: PPUSH
18106: CALL_OW 1
18110: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18111: LD_ADDR_EXP 82
18115: PUSH
18116: LD_EXP 82
18120: PPUSH
18121: LD_VAR 0 2
18125: PPUSH
18126: EMPTY
18127: PPUSH
18128: CALL_OW 1
18132: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18133: LD_ADDR_EXP 85
18137: PUSH
18138: LD_EXP 85
18142: PPUSH
18143: LD_VAR 0 2
18147: PPUSH
18148: LD_INT 0
18150: PPUSH
18151: CALL_OW 1
18155: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18156: LD_ADDR_EXP 86
18160: PUSH
18161: LD_EXP 86
18165: PPUSH
18166: LD_VAR 0 2
18170: PPUSH
18171: EMPTY
18172: PPUSH
18173: CALL_OW 1
18177: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18178: LD_ADDR_EXP 87
18182: PUSH
18183: LD_EXP 87
18187: PPUSH
18188: LD_VAR 0 2
18192: PPUSH
18193: EMPTY
18194: PPUSH
18195: CALL_OW 1
18199: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18200: LD_ADDR_EXP 88
18204: PUSH
18205: LD_EXP 88
18209: PPUSH
18210: LD_VAR 0 2
18214: PPUSH
18215: EMPTY
18216: PPUSH
18217: CALL_OW 1
18221: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18222: LD_ADDR_EXP 90
18226: PUSH
18227: LD_EXP 90
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: LD_EXP 57
18241: PUSH
18242: LD_VAR 0 2
18246: ARRAY
18247: PPUSH
18248: LD_INT 2
18250: PUSH
18251: LD_INT 30
18253: PUSH
18254: LD_INT 6
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 30
18263: PUSH
18264: LD_INT 7
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 30
18273: PUSH
18274: LD_INT 8
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 72
18291: PPUSH
18292: CALL_OW 1
18296: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18297: LD_ADDR_EXP 91
18301: PUSH
18302: LD_EXP 91
18306: PPUSH
18307: LD_VAR 0 2
18311: PPUSH
18312: EMPTY
18313: PPUSH
18314: CALL_OW 1
18318: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18319: LD_ADDR_EXP 92
18323: PUSH
18324: LD_EXP 92
18328: PPUSH
18329: LD_VAR 0 2
18333: PPUSH
18334: EMPTY
18335: PPUSH
18336: CALL_OW 1
18340: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18341: LD_ADDR_EXP 93
18345: PUSH
18346: LD_EXP 93
18350: PPUSH
18351: LD_VAR 0 2
18355: PPUSH
18356: EMPTY
18357: PPUSH
18358: CALL_OW 1
18362: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18363: LD_ADDR_EXP 94
18367: PUSH
18368: LD_EXP 94
18372: PPUSH
18373: LD_VAR 0 2
18377: PPUSH
18378: EMPTY
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18385: LD_ADDR_EXP 95
18389: PUSH
18390: LD_EXP 95
18394: PPUSH
18395: LD_VAR 0 2
18399: PPUSH
18400: EMPTY
18401: PPUSH
18402: CALL_OW 1
18406: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18407: LD_ADDR_EXP 96
18411: PUSH
18412: LD_EXP 96
18416: PPUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: EMPTY
18423: PPUSH
18424: CALL_OW 1
18428: ST_TO_ADDR
// end ;
18429: GO 17497
18431: POP
18432: POP
// MC_InitSides ( ) ;
18433: CALL 18719 0 0
// MC_InitResearch ( ) ;
18437: CALL 18458 0 0
// CustomInitMacro ( ) ;
18441: CALL 11404 0 0
// skirmish := true ;
18445: LD_ADDR_EXP 56
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// end ;
18453: LD_VAR 0 1
18457: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
// if not mc_bases then
18466: LD_EXP 57
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18714
// for i = 1 to 8 do
18475: LD_ADDR_VAR 0 2
18479: PUSH
18480: DOUBLE
18481: LD_INT 1
18483: DEC
18484: ST_TO_ADDR
18485: LD_INT 8
18487: PUSH
18488: FOR_TO
18489: IFFALSE 18515
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18491: LD_ADDR_EXP 84
18495: PUSH
18496: LD_EXP 84
18500: PPUSH
18501: LD_VAR 0 2
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
18513: GO 18488
18515: POP
18516: POP
// tmp := [ ] ;
18517: LD_ADDR_VAR 0 5
18521: PUSH
18522: EMPTY
18523: ST_TO_ADDR
// for i = 1 to mc_sides do
18524: LD_ADDR_VAR 0 2
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_EXP 83
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18598
// if not mc_sides [ i ] in tmp then
18542: LD_EXP 83
18546: PUSH
18547: LD_VAR 0 2
18551: ARRAY
18552: PUSH
18553: LD_VAR 0 5
18557: IN
18558: NOT
18559: IFFALSE 18596
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18561: LD_ADDR_VAR 0 5
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 5
18575: PUSH
18576: LD_INT 1
18578: PLUS
18579: PPUSH
18580: LD_EXP 83
18584: PUSH
18585: LD_VAR 0 2
18589: ARRAY
18590: PPUSH
18591: CALL_OW 2
18595: ST_TO_ADDR
18596: GO 18539
18598: POP
18599: POP
// if not tmp then
18600: LD_VAR 0 5
18604: NOT
18605: IFFALSE 18609
// exit ;
18607: GO 18714
// for j in tmp do
18609: LD_ADDR_VAR 0 3
18613: PUSH
18614: LD_VAR 0 5
18618: PUSH
18619: FOR_IN
18620: IFFALSE 18712
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18622: LD_ADDR_VAR 0 6
18626: PUSH
18627: LD_INT 22
18629: PUSH
18630: LD_VAR 0 3
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PPUSH
18639: CALL_OW 69
18643: ST_TO_ADDR
// if not un then
18644: LD_VAR 0 6
18648: NOT
18649: IFFALSE 18653
// continue ;
18651: GO 18619
// nation := GetNation ( un [ 1 ] ) ;
18653: LD_ADDR_VAR 0 4
18657: PUSH
18658: LD_VAR 0 6
18662: PUSH
18663: LD_INT 1
18665: ARRAY
18666: PPUSH
18667: CALL_OW 248
18671: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18672: LD_ADDR_EXP 84
18676: PUSH
18677: LD_EXP 84
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_VAR 0 4
18696: PPUSH
18697: LD_INT 1
18699: PPUSH
18700: CALL 37931 0 3
18704: PPUSH
18705: CALL_OW 1
18709: ST_TO_ADDR
// end ;
18710: GO 18619
18712: POP
18713: POP
// end ;
18714: LD_VAR 0 1
18718: RET
// export function MC_InitSides ( ) ; var i ; begin
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
// if not mc_bases then
18723: LD_EXP 57
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18806
// for i = 1 to mc_bases do
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_EXP 57
18746: PUSH
18747: FOR_TO
18748: IFFALSE 18804
// if mc_bases [ i ] then
18750: LD_EXP 57
18754: PUSH
18755: LD_VAR 0 2
18759: ARRAY
18760: IFFALSE 18802
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18762: LD_ADDR_EXP 83
18766: PUSH
18767: LD_EXP 83
18771: PPUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_EXP 57
18781: PUSH
18782: LD_VAR 0 2
18786: ARRAY
18787: PUSH
18788: LD_INT 1
18790: ARRAY
18791: PPUSH
18792: CALL_OW 255
18796: PPUSH
18797: CALL_OW 1
18801: ST_TO_ADDR
18802: GO 18747
18804: POP
18805: POP
// end ;
18806: LD_VAR 0 1
18810: RET
// every 0 0$01 trigger skirmish do
18811: LD_EXP 56
18815: IFFALSE 18948
18817: GO 18819
18819: DISABLE
// begin enable ;
18820: ENABLE
// MC_CheckBuildings ( ) ;
18821: CALL 19433 0 0
// MC_CheckPeopleLife ( ) ;
18825: CALL 19558 0 0
// RaiseSailEvent ( 103 ) ;
18829: LD_INT 103
18831: PPUSH
18832: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18836: LD_INT 104
18838: PPUSH
18839: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18843: LD_INT 105
18845: PPUSH
18846: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18850: LD_INT 106
18852: PPUSH
18853: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18857: LD_INT 107
18859: PPUSH
18860: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18864: LD_INT 108
18866: PPUSH
18867: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18871: LD_INT 109
18873: PPUSH
18874: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18878: LD_INT 110
18880: PPUSH
18881: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18885: LD_INT 111
18887: PPUSH
18888: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18892: LD_INT 112
18894: PPUSH
18895: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18899: LD_INT 120
18901: PPUSH
18902: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18906: LD_INT 121
18908: PPUSH
18909: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18913: LD_INT 122
18915: PPUSH
18916: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18920: LD_INT 123
18922: PPUSH
18923: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18927: LD_INT 125
18929: PPUSH
18930: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18934: LD_INT 126
18936: PPUSH
18937: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18941: LD_INT 200
18943: PPUSH
18944: CALL_OW 427
// end ;
18948: END
// every 10 trigger skirmish do var i ;
18949: LD_EXP 56
18953: IFFALSE 19052
18955: GO 18957
18957: DISABLE
18958: LD_INT 0
18960: PPUSH
// begin enable ;
18961: ENABLE
// if not mc_bases then
18962: LD_EXP 57
18966: NOT
18967: IFFALSE 18971
// exit ;
18969: GO 19052
// for i = 1 to mc_bases do
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: DOUBLE
18977: LD_INT 1
18979: DEC
18980: ST_TO_ADDR
18981: LD_EXP 57
18985: PUSH
18986: FOR_TO
18987: IFFALSE 19050
// if mc_mines [ i ] and mc_miners [ i ] then
18989: LD_EXP 70
18993: PUSH
18994: LD_VAR 0 1
18998: ARRAY
18999: PUSH
19000: LD_EXP 71
19004: PUSH
19005: LD_VAR 0 1
19009: ARRAY
19010: AND
19011: IFFALSE 19048
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
19013: LD_EXP 71
19017: PUSH
19018: LD_VAR 0 1
19022: ARRAY
19023: PUSH
19024: LD_INT 1
19026: ARRAY
19027: PPUSH
19028: CALL_OW 255
19032: PPUSH
19033: LD_EXP 70
19037: PUSH
19038: LD_VAR 0 1
19042: ARRAY
19043: PPUSH
19044: CALL 41680 0 2
19048: GO 18986
19050: POP
19051: POP
// end ;
19052: PPOPN 1
19054: END
// on SailEvent ( event ) do begin if event = 101 then
19055: LD_VAR 0 1
19059: PUSH
19060: LD_INT 101
19062: EQUAL
19063: IFFALSE 19069
// MC_RepairBuildings ( ) ;
19065: CALL 20116 0 0
// if event = 102 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 102
19076: EQUAL
19077: IFFALSE 19083
// MC_Heal ( ) ;
19079: CALL 20522 0 0
// if event = 103 then
19083: LD_VAR 0 1
19087: PUSH
19088: LD_INT 103
19090: EQUAL
19091: IFFALSE 19097
// MC_Build ( ) ;
19093: CALL 20944 0 0
// if event = 104 then
19097: LD_VAR 0 1
19101: PUSH
19102: LD_INT 104
19104: EQUAL
19105: IFFALSE 19111
// MC_TurretWeapon ( ) ;
19107: CALL 22383 0 0
// if event = 105 then
19111: LD_VAR 0 1
19115: PUSH
19116: LD_INT 105
19118: EQUAL
19119: IFFALSE 19125
// MC_BuildUpgrade ( ) ;
19121: CALL 21934 0 0
// if event = 106 then
19125: LD_VAR 0 1
19129: PUSH
19130: LD_INT 106
19132: EQUAL
19133: IFFALSE 19139
// MC_PlantMines ( ) ;
19135: CALL 22735 0 0
// if event = 107 then
19139: LD_VAR 0 1
19143: PUSH
19144: LD_INT 107
19146: EQUAL
19147: IFFALSE 19153
// MC_CollectCrates ( ) ;
19149: CALL 23742 0 0
// if event = 108 then
19153: LD_VAR 0 1
19157: PUSH
19158: LD_INT 108
19160: EQUAL
19161: IFFALSE 19167
// MC_LinkRemoteControl ( ) ;
19163: CALL 25246 0 0
// if event = 109 then
19167: LD_VAR 0 1
19171: PUSH
19172: LD_INT 109
19174: EQUAL
19175: IFFALSE 19181
// MC_ProduceVehicle ( ) ;
19177: CALL 25427 0 0
// if event = 110 then
19181: LD_VAR 0 1
19185: PUSH
19186: LD_INT 110
19188: EQUAL
19189: IFFALSE 19195
// MC_SendAttack ( ) ;
19191: CALL 25908 0 0
// if event = 111 then
19195: LD_VAR 0 1
19199: PUSH
19200: LD_INT 111
19202: EQUAL
19203: IFFALSE 19209
// MC_Defend ( ) ;
19205: CALL 26016 0 0
// if event = 112 then
19209: LD_VAR 0 1
19213: PUSH
19214: LD_INT 112
19216: EQUAL
19217: IFFALSE 19223
// MC_Research ( ) ;
19219: CALL 26414 0 0
// if event = 120 then
19223: LD_VAR 0 1
19227: PUSH
19228: LD_INT 120
19230: EQUAL
19231: IFFALSE 19237
// MC_RepairVehicle ( ) ;
19233: CALL 27383 0 0
// if event = 121 then
19237: LD_VAR 0 1
19241: PUSH
19242: LD_INT 121
19244: EQUAL
19245: IFFALSE 19251
// MC_TameApe ( ) ;
19247: CALL 28072 0 0
// if event = 122 then
19251: LD_VAR 0 1
19255: PUSH
19256: LD_INT 122
19258: EQUAL
19259: IFFALSE 19265
// MC_ChangeApeClass ( ) ;
19261: CALL 28835 0 0
// if event = 123 then
19265: LD_VAR 0 1
19269: PUSH
19270: LD_INT 123
19272: EQUAL
19273: IFFALSE 19279
// MC_Bazooka ( ) ;
19275: CALL 29469 0 0
// if event = 124 then
19279: LD_VAR 0 1
19283: PUSH
19284: LD_INT 124
19286: EQUAL
19287: IFFALSE 19293
// MC_TeleportExit ( ) ;
19289: CALL 29667 0 0
// if event = 125 then
19293: LD_VAR 0 1
19297: PUSH
19298: LD_INT 125
19300: EQUAL
19301: IFFALSE 19307
// MC_Deposits ( ) ;
19303: CALL 29709 0 0
// if event = 126 then
19307: LD_VAR 0 1
19311: PUSH
19312: LD_INT 126
19314: EQUAL
19315: IFFALSE 19321
// MC_RemoteDriver ( ) ;
19317: CALL 30288 0 0
// if event = 200 then
19321: LD_VAR 0 1
19325: PUSH
19326: LD_INT 200
19328: EQUAL
19329: IFFALSE 19335
// MC_Idle ( ) ;
19331: CALL 31793 0 0
// end ;
19335: PPOPN 1
19337: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
// if not mc_bases [ base ] or not tag then
19342: LD_EXP 57
19346: PUSH
19347: LD_VAR 0 1
19351: ARRAY
19352: NOT
19353: PUSH
19354: LD_VAR 0 2
19358: NOT
19359: OR
19360: IFFALSE 19364
// exit ;
19362: GO 19428
// for i in mc_bases [ base ] union mc_ape [ base ] do
19364: LD_ADDR_VAR 0 4
19368: PUSH
19369: LD_EXP 57
19373: PUSH
19374: LD_VAR 0 1
19378: ARRAY
19379: PUSH
19380: LD_EXP 86
19384: PUSH
19385: LD_VAR 0 1
19389: ARRAY
19390: UNION
19391: PUSH
19392: FOR_IN
19393: IFFALSE 19426
// if GetTag ( i ) = tag then
19395: LD_VAR 0 4
19399: PPUSH
19400: CALL_OW 110
19404: PUSH
19405: LD_VAR 0 2
19409: EQUAL
19410: IFFALSE 19424
// SetTag ( i , 0 ) ;
19412: LD_VAR 0 4
19416: PPUSH
19417: LD_INT 0
19419: PPUSH
19420: CALL_OW 109
19424: GO 19392
19426: POP
19427: POP
// end ;
19428: LD_VAR 0 3
19432: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
19433: LD_INT 0
19435: PPUSH
19436: PPUSH
19437: PPUSH
// if not mc_bases then
19438: LD_EXP 57
19442: NOT
19443: IFFALSE 19447
// exit ;
19445: GO 19553
// for i = 1 to mc_bases do
19447: LD_ADDR_VAR 0 2
19451: PUSH
19452: DOUBLE
19453: LD_INT 1
19455: DEC
19456: ST_TO_ADDR
19457: LD_EXP 57
19461: PUSH
19462: FOR_TO
19463: IFFALSE 19544
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_EXP 57
19474: PUSH
19475: LD_VAR 0 2
19479: ARRAY
19480: PPUSH
19481: LD_INT 21
19483: PUSH
19484: LD_INT 3
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: LD_INT 24
19496: PUSH
19497: LD_INT 1000
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 72
19516: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
19517: LD_ADDR_EXP 58
19521: PUSH
19522: LD_EXP 58
19526: PPUSH
19527: LD_VAR 0 2
19531: PPUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: CALL_OW 1
19541: ST_TO_ADDR
// end ;
19542: GO 19462
19544: POP
19545: POP
// RaiseSailEvent ( 101 ) ;
19546: LD_INT 101
19548: PPUSH
19549: CALL_OW 427
// end ;
19553: LD_VAR 0 1
19557: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
19562: PPUSH
19563: PPUSH
19564: PPUSH
19565: PPUSH
19566: PPUSH
// if not mc_bases then
19567: LD_EXP 57
19571: NOT
19572: IFFALSE 19576
// exit ;
19574: GO 20111
// for i = 1 to mc_bases do
19576: LD_ADDR_VAR 0 2
19580: PUSH
19581: DOUBLE
19582: LD_INT 1
19584: DEC
19585: ST_TO_ADDR
19586: LD_EXP 57
19590: PUSH
19591: FOR_TO
19592: IFFALSE 20102
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
19594: LD_ADDR_VAR 0 5
19598: PUSH
19599: LD_EXP 57
19603: PUSH
19604: LD_VAR 0 2
19608: ARRAY
19609: PUSH
19610: LD_EXP 86
19614: PUSH
19615: LD_VAR 0 2
19619: ARRAY
19620: UNION
19621: PPUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: LD_INT 54
19640: PUSH
19641: EMPTY
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: LD_INT 24
19653: PUSH
19654: LD_INT 700
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 72
19678: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: LD_EXP 57
19688: PUSH
19689: LD_VAR 0 2
19693: ARRAY
19694: PPUSH
19695: LD_INT 21
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 54
19713: PUSH
19714: EMPTY
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 3
19723: PUSH
19724: LD_INT 24
19726: PUSH
19727: LD_INT 250
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 72
19751: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
19752: LD_ADDR_VAR 0 7
19756: PUSH
19757: LD_VAR 0 5
19761: PUSH
19762: LD_VAR 0 6
19766: DIFF
19767: ST_TO_ADDR
// if not need_heal_1 then
19768: LD_VAR 0 6
19772: NOT
19773: IFFALSE 19806
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
19775: LD_ADDR_EXP 60
19779: PUSH
19780: LD_EXP 60
19784: PPUSH
19785: LD_VAR 0 2
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PPUSH
19797: EMPTY
19798: PPUSH
19799: CALL 45058 0 3
19803: ST_TO_ADDR
19804: GO 19838
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
19806: LD_ADDR_EXP 60
19810: PUSH
19811: LD_EXP 60
19815: PPUSH
19816: LD_VAR 0 2
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PPUSH
19828: LD_VAR 0 6
19832: PPUSH
19833: CALL 45058 0 3
19837: ST_TO_ADDR
// if not need_heal_2 then
19838: LD_VAR 0 7
19842: NOT
19843: IFFALSE 19876
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
19845: LD_ADDR_EXP 60
19849: PUSH
19850: LD_EXP 60
19854: PPUSH
19855: LD_VAR 0 2
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PPUSH
19867: EMPTY
19868: PPUSH
19869: CALL 45058 0 3
19873: ST_TO_ADDR
19874: GO 19908
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
19876: LD_ADDR_EXP 60
19880: PUSH
19881: LD_EXP 60
19885: PPUSH
19886: LD_VAR 0 2
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PPUSH
19898: LD_VAR 0 7
19902: PPUSH
19903: CALL 45058 0 3
19907: ST_TO_ADDR
// if need_heal_2 then
19908: LD_VAR 0 7
19912: IFFALSE 20084
// for j in need_heal_2 do
19914: LD_ADDR_VAR 0 3
19918: PUSH
19919: LD_VAR 0 7
19923: PUSH
19924: FOR_IN
19925: IFFALSE 20082
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
19927: LD_ADDR_VAR 0 5
19931: PUSH
19932: LD_EXP 57
19936: PUSH
19937: LD_VAR 0 2
19941: ARRAY
19942: PPUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 30
19948: PUSH
19949: LD_INT 6
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 30
19958: PUSH
19959: LD_INT 7
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 8
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 30
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 30
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 25
19998: PUSH
19999: LD_INT 4
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 72
20019: ST_TO_ADDR
// if tmp then
20020: LD_VAR 0 5
20024: IFFALSE 20080
// begin k := NearestUnitToUnit ( tmp , j ) ;
20026: LD_ADDR_VAR 0 4
20030: PUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: LD_VAR 0 3
20040: PPUSH
20041: CALL_OW 74
20045: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
20046: LD_VAR 0 3
20050: PPUSH
20051: LD_VAR 0 4
20055: PPUSH
20056: CALL_OW 296
20060: PUSH
20061: LD_INT 7
20063: GREATER
20064: IFFALSE 20080
// ComMoveUnit ( j , k ) ;
20066: LD_VAR 0 3
20070: PPUSH
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 112
// end ; end ;
20080: GO 19924
20082: POP
20083: POP
// if not need_heal_1 and not need_heal_2 then
20084: LD_VAR 0 6
20088: NOT
20089: PUSH
20090: LD_VAR 0 7
20094: NOT
20095: AND
20096: IFFALSE 20100
// continue ;
20098: GO 19591
// end ;
20100: GO 19591
20102: POP
20103: POP
// RaiseSailEvent ( 102 ) ;
20104: LD_INT 102
20106: PPUSH
20107: CALL_OW 427
// end ;
20111: LD_VAR 0 1
20115: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
20122: PPUSH
// if not mc_bases then
20123: LD_EXP 57
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20517
// for i = 1 to mc_bases do
20132: LD_ADDR_VAR 0 2
20136: PUSH
20137: DOUBLE
20138: LD_INT 1
20140: DEC
20141: ST_TO_ADDR
20142: LD_EXP 57
20146: PUSH
20147: FOR_TO
20148: IFFALSE 20515
// begin if not mc_building_need_repair [ i ] then
20150: LD_EXP 58
20154: PUSH
20155: LD_VAR 0 2
20159: ARRAY
20160: NOT
20161: IFFALSE 20199
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
20163: LD_ADDR_EXP 59
20167: PUSH
20168: LD_EXP 59
20172: PPUSH
20173: LD_VAR 0 2
20177: PPUSH
20178: EMPTY
20179: PPUSH
20180: CALL_OW 1
20184: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_INT 101
20192: PPUSH
20193: CALL 19338 0 2
// continue ;
20197: GO 20147
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
20199: LD_ADDR_EXP 63
20203: PUSH
20204: LD_EXP 63
20208: PPUSH
20209: LD_VAR 0 2
20213: PPUSH
20214: EMPTY
20215: PPUSH
20216: CALL_OW 1
20220: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20221: LD_VAR 0 2
20225: PPUSH
20226: LD_INT 103
20228: PPUSH
20229: CALL 19338 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
20233: LD_ADDR_VAR 0 5
20237: PUSH
20238: LD_EXP 57
20242: PUSH
20243: LD_VAR 0 2
20247: ARRAY
20248: PUSH
20249: LD_EXP 86
20253: PUSH
20254: LD_VAR 0 2
20258: ARRAY
20259: UNION
20260: PPUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 25
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 25
20276: PUSH
20277: LD_INT 16
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// if not tmp then
20297: LD_VAR 0 5
20301: NOT
20302: IFFALSE 20306
// continue ;
20304: GO 20147
// for j in tmp do
20306: LD_ADDR_VAR 0 3
20310: PUSH
20311: LD_VAR 0 5
20315: PUSH
20316: FOR_IN
20317: IFFALSE 20511
// begin if mc_need_heal [ i ] then
20319: LD_EXP 60
20323: PUSH
20324: LD_VAR 0 2
20328: ARRAY
20329: IFFALSE 20377
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_EXP 60
20340: PUSH
20341: LD_VAR 0 2
20345: ARRAY
20346: PUSH
20347: LD_INT 1
20349: ARRAY
20350: IN
20351: PUSH
20352: LD_VAR 0 3
20356: PUSH
20357: LD_EXP 60
20361: PUSH
20362: LD_VAR 0 2
20366: ARRAY
20367: PUSH
20368: LD_INT 2
20370: ARRAY
20371: IN
20372: OR
20373: IFFALSE 20377
// continue ;
20375: GO 20316
// if IsInUnit ( j ) then
20377: LD_VAR 0 3
20381: PPUSH
20382: CALL_OW 310
20386: IFFALSE 20397
// ComExitBuilding ( j ) ;
20388: LD_VAR 0 3
20392: PPUSH
20393: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_EXP 59
20406: PUSH
20407: LD_VAR 0 2
20411: ARRAY
20412: IN
20413: NOT
20414: IFFALSE 20472
// begin SetTag ( j , 101 ) ;
20416: LD_VAR 0 3
20420: PPUSH
20421: LD_INT 101
20423: PPUSH
20424: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
20428: LD_ADDR_EXP 59
20432: PUSH
20433: LD_EXP 59
20437: PPUSH
20438: LD_VAR 0 2
20442: PUSH
20443: LD_EXP 59
20447: PUSH
20448: LD_VAR 0 2
20452: ARRAY
20453: PUSH
20454: LD_INT 1
20456: PLUS
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL 45058 0 3
20471: ST_TO_ADDR
// end ; Wait ( 3 ) ;
20472: LD_INT 3
20474: PPUSH
20475: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
20479: LD_VAR 0 3
20483: PPUSH
20484: LD_EXP 58
20488: PUSH
20489: LD_VAR 0 2
20493: ARRAY
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: CALL_OW 74
20504: PPUSH
20505: CALL_OW 130
// end ;
20509: GO 20316
20511: POP
20512: POP
// end ;
20513: GO 20147
20515: POP
20516: POP
// end ;
20517: LD_VAR 0 1
20521: RET
// export function MC_Heal ; var i , j , tmp ; begin
20522: LD_INT 0
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
// if not mc_bases then
20528: LD_EXP 57
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20939
// for i = 1 to mc_bases do
20537: LD_ADDR_VAR 0 2
20541: PUSH
20542: DOUBLE
20543: LD_INT 1
20545: DEC
20546: ST_TO_ADDR
20547: LD_EXP 57
20551: PUSH
20552: FOR_TO
20553: IFFALSE 20937
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
20555: LD_EXP 60
20559: PUSH
20560: LD_VAR 0 2
20564: ARRAY
20565: PUSH
20566: LD_INT 1
20568: ARRAY
20569: NOT
20570: PUSH
20571: LD_EXP 60
20575: PUSH
20576: LD_VAR 0 2
20580: ARRAY
20581: PUSH
20582: LD_INT 2
20584: ARRAY
20585: NOT
20586: AND
20587: IFFALSE 20625
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
20589: LD_ADDR_EXP 61
20593: PUSH
20594: LD_EXP 61
20598: PPUSH
20599: LD_VAR 0 2
20603: PPUSH
20604: EMPTY
20605: PPUSH
20606: CALL_OW 1
20610: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
20611: LD_VAR 0 2
20615: PPUSH
20616: LD_INT 102
20618: PPUSH
20619: CALL 19338 0 2
// continue ;
20623: GO 20552
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20625: LD_ADDR_VAR 0 4
20629: PUSH
20630: LD_EXP 57
20634: PUSH
20635: LD_VAR 0 2
20639: ARRAY
20640: PPUSH
20641: LD_INT 25
20643: PUSH
20644: LD_INT 4
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 72
20655: ST_TO_ADDR
// if not tmp then
20656: LD_VAR 0 4
20660: NOT
20661: IFFALSE 20665
// continue ;
20663: GO 20552
// if mc_taming [ i ] then
20665: LD_EXP 88
20669: PUSH
20670: LD_VAR 0 2
20674: ARRAY
20675: IFFALSE 20699
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20677: LD_ADDR_EXP 88
20681: PUSH
20682: LD_EXP 88
20686: PPUSH
20687: LD_VAR 0 2
20691: PPUSH
20692: EMPTY
20693: PPUSH
20694: CALL_OW 1
20698: ST_TO_ADDR
// for j in tmp do
20699: LD_ADDR_VAR 0 3
20703: PUSH
20704: LD_VAR 0 4
20708: PUSH
20709: FOR_IN
20710: IFFALSE 20933
// begin if IsInUnit ( j ) then
20712: LD_VAR 0 3
20716: PPUSH
20717: CALL_OW 310
20721: IFFALSE 20732
// ComExitBuilding ( j ) ;
20723: LD_VAR 0 3
20727: PPUSH
20728: CALL_OW 122
// if not j in mc_healers [ i ] then
20732: LD_VAR 0 3
20736: PUSH
20737: LD_EXP 61
20741: PUSH
20742: LD_VAR 0 2
20746: ARRAY
20747: IN
20748: NOT
20749: IFFALSE 20795
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
20751: LD_ADDR_EXP 61
20755: PUSH
20756: LD_EXP 61
20760: PPUSH
20761: LD_VAR 0 2
20765: PUSH
20766: LD_EXP 61
20770: PUSH
20771: LD_VAR 0 2
20775: ARRAY
20776: PUSH
20777: LD_INT 1
20779: PLUS
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: LD_VAR 0 3
20789: PPUSH
20790: CALL 45058 0 3
20794: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
20795: LD_VAR 0 3
20799: PPUSH
20800: CALL_OW 110
20804: PUSH
20805: LD_INT 102
20807: NONEQUAL
20808: IFFALSE 20822
// SetTag ( j , 102 ) ;
20810: LD_VAR 0 3
20814: PPUSH
20815: LD_INT 102
20817: PPUSH
20818: CALL_OW 109
// Wait ( 3 ) ;
20822: LD_INT 3
20824: PPUSH
20825: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
20829: LD_EXP 60
20833: PUSH
20834: LD_VAR 0 2
20838: ARRAY
20839: PUSH
20840: LD_INT 1
20842: ARRAY
20843: IFFALSE 20875
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_EXP 60
20854: PUSH
20855: LD_VAR 0 2
20859: ARRAY
20860: PUSH
20861: LD_INT 1
20863: ARRAY
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 128
20873: GO 20931
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
20875: LD_VAR 0 3
20879: PPUSH
20880: CALL_OW 314
20884: NOT
20885: PUSH
20886: LD_EXP 60
20890: PUSH
20891: LD_VAR 0 2
20895: ARRAY
20896: PUSH
20897: LD_INT 2
20899: ARRAY
20900: AND
20901: IFFALSE 20931
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
20903: LD_VAR 0 3
20907: PPUSH
20908: LD_EXP 60
20912: PUSH
20913: LD_VAR 0 2
20917: ARRAY
20918: PUSH
20919: LD_INT 2
20921: ARRAY
20922: PUSH
20923: LD_INT 1
20925: ARRAY
20926: PPUSH
20927: CALL_OW 128
// end ;
20931: GO 20709
20933: POP
20934: POP
// end ;
20935: GO 20552
20937: POP
20938: POP
// end ;
20939: LD_VAR 0 1
20943: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
20944: LD_INT 0
20946: PPUSH
20947: PPUSH
20948: PPUSH
20949: PPUSH
20950: PPUSH
// if not mc_bases then
20951: LD_EXP 57
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21929
// for i = 1 to mc_bases do
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: DOUBLE
20966: LD_INT 1
20968: DEC
20969: ST_TO_ADDR
20970: LD_EXP 57
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21927
// begin if mc_scan [ i ] then
20978: LD_EXP 80
20982: PUSH
20983: LD_VAR 0 2
20987: ARRAY
20988: IFFALSE 20992
// continue ;
20990: GO 20975
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
20992: LD_EXP 62
20996: PUSH
20997: LD_VAR 0 2
21001: ARRAY
21002: NOT
21003: PUSH
21004: LD_EXP 64
21008: PUSH
21009: LD_VAR 0 2
21013: ARRAY
21014: NOT
21015: AND
21016: PUSH
21017: LD_EXP 63
21021: PUSH
21022: LD_VAR 0 2
21026: ARRAY
21027: AND
21028: IFFALSE 21066
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
21030: LD_ADDR_EXP 63
21034: PUSH
21035: LD_EXP 63
21039: PPUSH
21040: LD_VAR 0 2
21044: PPUSH
21045: EMPTY
21046: PPUSH
21047: CALL_OW 1
21051: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
21052: LD_VAR 0 2
21056: PPUSH
21057: LD_INT 103
21059: PPUSH
21060: CALL 19338 0 2
// continue ;
21064: GO 20975
// end ; if mc_construct_list [ i ] then
21066: LD_EXP 64
21070: PUSH
21071: LD_VAR 0 2
21075: ARRAY
21076: IFFALSE 21296
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21078: LD_ADDR_VAR 0 4
21082: PUSH
21083: LD_EXP 57
21087: PUSH
21088: LD_VAR 0 2
21092: ARRAY
21093: PPUSH
21094: LD_INT 25
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 72
21108: PUSH
21109: LD_EXP 59
21113: PUSH
21114: LD_VAR 0 2
21118: ARRAY
21119: DIFF
21120: ST_TO_ADDR
// if not tmp then
21121: LD_VAR 0 4
21125: NOT
21126: IFFALSE 21130
// continue ;
21128: GO 20975
// for j in tmp do
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_VAR 0 4
21139: PUSH
21140: FOR_IN
21141: IFFALSE 21292
// begin if not mc_builders [ i ] then
21143: LD_EXP 63
21147: PUSH
21148: LD_VAR 0 2
21152: ARRAY
21153: NOT
21154: IFFALSE 21212
// begin SetTag ( j , 103 ) ;
21156: LD_VAR 0 3
21160: PPUSH
21161: LD_INT 103
21163: PPUSH
21164: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21168: LD_ADDR_EXP 63
21172: PUSH
21173: LD_EXP 63
21177: PPUSH
21178: LD_VAR 0 2
21182: PUSH
21183: LD_EXP 63
21187: PUSH
21188: LD_VAR 0 2
21192: ARRAY
21193: PUSH
21194: LD_INT 1
21196: PLUS
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: LD_VAR 0 3
21206: PPUSH
21207: CALL 45058 0 3
21211: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21212: LD_VAR 0 3
21216: PPUSH
21217: CALL_OW 310
21221: IFFALSE 21232
// ComExitBuilding ( j ) ;
21223: LD_VAR 0 3
21227: PPUSH
21228: CALL_OW 122
// wait ( 3 ) ;
21232: LD_INT 3
21234: PPUSH
21235: CALL_OW 67
// if not mc_construct_list [ i ] then
21239: LD_EXP 64
21243: PUSH
21244: LD_VAR 0 2
21248: ARRAY
21249: NOT
21250: IFFALSE 21254
// break ;
21252: GO 21292
// if not HasTask ( j ) then
21254: LD_VAR 0 3
21258: PPUSH
21259: CALL_OW 314
21263: NOT
21264: IFFALSE 21290
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
21266: LD_VAR 0 3
21270: PPUSH
21271: LD_EXP 64
21275: PUSH
21276: LD_VAR 0 2
21280: ARRAY
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: CALL 47494 0 2
// end ;
21290: GO 21140
21292: POP
21293: POP
// end else
21294: GO 21925
// if mc_build_list [ i ] then
21296: LD_EXP 62
21300: PUSH
21301: LD_VAR 0 2
21305: ARRAY
21306: IFFALSE 21925
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
21308: LD_ADDR_VAR 0 5
21312: PUSH
21313: LD_EXP 57
21317: PUSH
21318: LD_VAR 0 2
21322: ARRAY
21323: PPUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 30
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 30
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 72
21356: ST_TO_ADDR
// if depot then
21357: LD_VAR 0 5
21361: IFFALSE 21379
// depot := depot [ 1 ] else
21363: LD_ADDR_VAR 0 5
21367: PUSH
21368: LD_VAR 0 5
21372: PUSH
21373: LD_INT 1
21375: ARRAY
21376: ST_TO_ADDR
21377: GO 21387
// depot := 0 ;
21379: LD_ADDR_VAR 0 5
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
21387: LD_EXP 62
21391: PUSH
21392: LD_VAR 0 2
21396: ARRAY
21397: PUSH
21398: LD_INT 1
21400: ARRAY
21401: PUSH
21402: LD_INT 1
21404: ARRAY
21405: PUSH
21406: LD_INT 0
21408: EQUAL
21409: PUSH
21410: LD_VAR 0 5
21414: PUSH
21415: LD_VAR 0 5
21419: PPUSH
21420: LD_EXP 62
21424: PUSH
21425: LD_VAR 0 2
21429: ARRAY
21430: PUSH
21431: LD_INT 1
21433: ARRAY
21434: PUSH
21435: LD_INT 1
21437: ARRAY
21438: PPUSH
21439: LD_EXP 62
21443: PUSH
21444: LD_VAR 0 2
21448: ARRAY
21449: PUSH
21450: LD_INT 1
21452: ARRAY
21453: PUSH
21454: LD_INT 2
21456: ARRAY
21457: PPUSH
21458: LD_EXP 62
21462: PUSH
21463: LD_VAR 0 2
21467: ARRAY
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: PUSH
21473: LD_INT 3
21475: ARRAY
21476: PPUSH
21477: LD_EXP 62
21481: PUSH
21482: LD_VAR 0 2
21486: ARRAY
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PUSH
21492: LD_INT 4
21494: ARRAY
21495: PPUSH
21496: CALL 51846 0 5
21500: AND
21501: OR
21502: IFFALSE 21783
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21504: LD_ADDR_VAR 0 4
21508: PUSH
21509: LD_EXP 57
21513: PUSH
21514: LD_VAR 0 2
21518: ARRAY
21519: PPUSH
21520: LD_INT 25
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PPUSH
21530: CALL_OW 72
21534: PUSH
21535: LD_EXP 59
21539: PUSH
21540: LD_VAR 0 2
21544: ARRAY
21545: DIFF
21546: ST_TO_ADDR
// if not tmp then
21547: LD_VAR 0 4
21551: NOT
21552: IFFALSE 21556
// continue ;
21554: GO 20975
// for j in tmp do
21556: LD_ADDR_VAR 0 3
21560: PUSH
21561: LD_VAR 0 4
21565: PUSH
21566: FOR_IN
21567: IFFALSE 21779
// begin if not mc_builders [ i ] then
21569: LD_EXP 63
21573: PUSH
21574: LD_VAR 0 2
21578: ARRAY
21579: NOT
21580: IFFALSE 21638
// begin SetTag ( j , 103 ) ;
21582: LD_VAR 0 3
21586: PPUSH
21587: LD_INT 103
21589: PPUSH
21590: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21594: LD_ADDR_EXP 63
21598: PUSH
21599: LD_EXP 63
21603: PPUSH
21604: LD_VAR 0 2
21608: PUSH
21609: LD_EXP 63
21613: PUSH
21614: LD_VAR 0 2
21618: ARRAY
21619: PUSH
21620: LD_INT 1
21622: PLUS
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: CALL 45058 0 3
21637: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21638: LD_VAR 0 3
21642: PPUSH
21643: CALL_OW 310
21647: IFFALSE 21658
// ComExitBuilding ( j ) ;
21649: LD_VAR 0 3
21653: PPUSH
21654: CALL_OW 122
// wait ( 3 ) ;
21658: LD_INT 3
21660: PPUSH
21661: CALL_OW 67
// if not mc_build_list [ i ] then
21665: LD_EXP 62
21669: PUSH
21670: LD_VAR 0 2
21674: ARRAY
21675: NOT
21676: IFFALSE 21680
// break ;
21678: GO 21779
// if not HasTask ( j ) then
21680: LD_VAR 0 3
21684: PPUSH
21685: CALL_OW 314
21689: NOT
21690: IFFALSE 21777
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
21692: LD_VAR 0 3
21696: PPUSH
21697: LD_EXP 62
21701: PUSH
21702: LD_VAR 0 2
21706: ARRAY
21707: PUSH
21708: LD_INT 1
21710: ARRAY
21711: PUSH
21712: LD_INT 1
21714: ARRAY
21715: PPUSH
21716: LD_EXP 62
21720: PUSH
21721: LD_VAR 0 2
21725: ARRAY
21726: PUSH
21727: LD_INT 1
21729: ARRAY
21730: PUSH
21731: LD_INT 2
21733: ARRAY
21734: PPUSH
21735: LD_EXP 62
21739: PUSH
21740: LD_VAR 0 2
21744: ARRAY
21745: PUSH
21746: LD_INT 1
21748: ARRAY
21749: PUSH
21750: LD_INT 3
21752: ARRAY
21753: PPUSH
21754: LD_EXP 62
21758: PUSH
21759: LD_VAR 0 2
21763: ARRAY
21764: PUSH
21765: LD_INT 1
21767: ARRAY
21768: PUSH
21769: LD_INT 4
21771: ARRAY
21772: PPUSH
21773: CALL_OW 145
// end ;
21777: GO 21566
21779: POP
21780: POP
// end else
21781: GO 21925
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21783: LD_EXP 57
21787: PUSH
21788: LD_VAR 0 2
21792: ARRAY
21793: PPUSH
21794: LD_EXP 62
21798: PUSH
21799: LD_VAR 0 2
21803: ARRAY
21804: PUSH
21805: LD_INT 1
21807: ARRAY
21808: PUSH
21809: LD_INT 1
21811: ARRAY
21812: PPUSH
21813: LD_EXP 62
21817: PUSH
21818: LD_VAR 0 2
21822: ARRAY
21823: PUSH
21824: LD_INT 1
21826: ARRAY
21827: PUSH
21828: LD_INT 2
21830: ARRAY
21831: PPUSH
21832: LD_EXP 62
21836: PUSH
21837: LD_VAR 0 2
21841: ARRAY
21842: PUSH
21843: LD_INT 1
21845: ARRAY
21846: PUSH
21847: LD_INT 3
21849: ARRAY
21850: PPUSH
21851: LD_EXP 62
21855: PUSH
21856: LD_VAR 0 2
21860: ARRAY
21861: PUSH
21862: LD_INT 1
21864: ARRAY
21865: PUSH
21866: LD_INT 4
21868: ARRAY
21869: PPUSH
21870: CALL 51277 0 5
21874: NOT
21875: IFFALSE 21925
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
21877: LD_ADDR_EXP 62
21881: PUSH
21882: LD_EXP 62
21886: PPUSH
21887: LD_VAR 0 2
21891: PPUSH
21892: LD_EXP 62
21896: PUSH
21897: LD_VAR 0 2
21901: ARRAY
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: LD_INT 1
21908: NEG
21909: PPUSH
21910: LD_INT 0
21912: PPUSH
21913: CALL 44041 0 4
21917: PPUSH
21918: CALL_OW 1
21922: ST_TO_ADDR
// continue ;
21923: GO 20975
// end ; end ; end ;
21925: GO 20975
21927: POP
21928: POP
// end ;
21929: LD_VAR 0 1
21933: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
21934: LD_INT 0
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
// if not mc_bases then
21942: LD_EXP 57
21946: NOT
21947: IFFALSE 21951
// exit ;
21949: GO 22378
// for i = 1 to mc_bases do
21951: LD_ADDR_VAR 0 2
21955: PUSH
21956: DOUBLE
21957: LD_INT 1
21959: DEC
21960: ST_TO_ADDR
21961: LD_EXP 57
21965: PUSH
21966: FOR_TO
21967: IFFALSE 22376
// begin tmp := mc_build_upgrade [ i ] ;
21969: LD_ADDR_VAR 0 4
21973: PUSH
21974: LD_EXP 89
21978: PUSH
21979: LD_VAR 0 2
21983: ARRAY
21984: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
21985: LD_ADDR_VAR 0 6
21989: PUSH
21990: LD_EXP 90
21994: PUSH
21995: LD_VAR 0 2
21999: ARRAY
22000: PPUSH
22001: LD_INT 2
22003: PUSH
22004: LD_INT 30
22006: PUSH
22007: LD_INT 6
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 30
22016: PUSH
22017: LD_INT 7
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: PPUSH
22029: CALL_OW 72
22033: ST_TO_ADDR
// if not tmp and not lab then
22034: LD_VAR 0 4
22038: NOT
22039: PUSH
22040: LD_VAR 0 6
22044: NOT
22045: AND
22046: IFFALSE 22050
// continue ;
22048: GO 21966
// if tmp then
22050: LD_VAR 0 4
22054: IFFALSE 22174
// for j in tmp do
22056: LD_ADDR_VAR 0 3
22060: PUSH
22061: LD_VAR 0 4
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22172
// begin if UpgradeCost ( j ) then
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL 50937 0 1
22078: IFFALSE 22170
// begin ComUpgrade ( j ) ;
22080: LD_VAR 0 3
22084: PPUSH
22085: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
22089: LD_ADDR_EXP 89
22093: PUSH
22094: LD_EXP 89
22098: PPUSH
22099: LD_VAR 0 2
22103: PPUSH
22104: LD_EXP 89
22108: PUSH
22109: LD_VAR 0 2
22113: ARRAY
22114: PUSH
22115: LD_VAR 0 3
22119: DIFF
22120: PPUSH
22121: CALL_OW 1
22125: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22126: LD_ADDR_EXP 64
22130: PUSH
22131: LD_EXP 64
22135: PPUSH
22136: LD_VAR 0 2
22140: PUSH
22141: LD_EXP 64
22145: PUSH
22146: LD_VAR 0 2
22150: ARRAY
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: LD_VAR 0 3
22164: PPUSH
22165: CALL 45058 0 3
22169: ST_TO_ADDR
// end ; end ;
22170: GO 22066
22172: POP
22173: POP
// if not lab or not mc_lab_upgrade [ i ] then
22174: LD_VAR 0 6
22178: NOT
22179: PUSH
22180: LD_EXP 91
22184: PUSH
22185: LD_VAR 0 2
22189: ARRAY
22190: NOT
22191: OR
22192: IFFALSE 22196
// continue ;
22194: GO 21966
// for j in lab do
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: LD_VAR 0 6
22205: PUSH
22206: FOR_IN
22207: IFFALSE 22372
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL_OW 266
22218: PUSH
22219: LD_INT 6
22221: PUSH
22222: LD_INT 7
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: IN
22229: PUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: CALL_OW 461
22239: PUSH
22240: LD_INT 1
22242: NONEQUAL
22243: AND
22244: IFFALSE 22370
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
22246: LD_VAR 0 3
22250: PPUSH
22251: LD_EXP 91
22255: PUSH
22256: LD_VAR 0 2
22260: ARRAY
22261: PUSH
22262: LD_INT 1
22264: ARRAY
22265: PPUSH
22266: CALL 51142 0 2
22270: IFFALSE 22370
// begin ComCancel ( j ) ;
22272: LD_VAR 0 3
22276: PPUSH
22277: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
22281: LD_VAR 0 3
22285: PPUSH
22286: LD_EXP 91
22290: PUSH
22291: LD_VAR 0 2
22295: ARRAY
22296: PUSH
22297: LD_INT 1
22299: ARRAY
22300: PPUSH
22301: CALL_OW 207
// if not j in mc_construct_list [ i ] then
22305: LD_VAR 0 3
22309: PUSH
22310: LD_EXP 64
22314: PUSH
22315: LD_VAR 0 2
22319: ARRAY
22320: IN
22321: NOT
22322: IFFALSE 22368
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22324: LD_ADDR_EXP 64
22328: PUSH
22329: LD_EXP 64
22333: PPUSH
22334: LD_VAR 0 2
22338: PUSH
22339: LD_EXP 64
22343: PUSH
22344: LD_VAR 0 2
22348: ARRAY
22349: PUSH
22350: LD_INT 1
22352: PLUS
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL 45058 0 3
22367: ST_TO_ADDR
// break ;
22368: GO 22372
// end ; end ; end ;
22370: GO 22206
22372: POP
22373: POP
// end ;
22374: GO 21966
22376: POP
22377: POP
// end ;
22378: LD_VAR 0 1
22382: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
22383: LD_INT 0
22385: PPUSH
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
// if not mc_bases then
22392: LD_EXP 57
22396: NOT
22397: IFFALSE 22401
// exit ;
22399: GO 22730
// for i = 1 to mc_bases do
22401: LD_ADDR_VAR 0 2
22405: PUSH
22406: DOUBLE
22407: LD_INT 1
22409: DEC
22410: ST_TO_ADDR
22411: LD_EXP 57
22415: PUSH
22416: FOR_TO
22417: IFFALSE 22728
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
22419: LD_EXP 65
22423: PUSH
22424: LD_VAR 0 2
22428: ARRAY
22429: NOT
22430: PUSH
22431: LD_EXP 57
22435: PUSH
22436: LD_VAR 0 2
22440: ARRAY
22441: PPUSH
22442: LD_INT 30
22444: PUSH
22445: LD_INT 3
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PPUSH
22452: CALL_OW 72
22456: NOT
22457: OR
22458: IFFALSE 22462
// continue ;
22460: GO 22416
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
22462: LD_EXP 65
22466: PUSH
22467: LD_VAR 0 2
22471: ARRAY
22472: PUSH
22473: LD_INT 1
22475: ARRAY
22476: PPUSH
22477: CALL_OW 269
22481: IFFALSE 22547
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
22483: LD_ADDR_VAR 0 4
22487: PUSH
22488: LD_EXP 65
22492: PUSH
22493: LD_VAR 0 2
22497: ARRAY
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 3
22506: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
22507: LD_ADDR_EXP 65
22511: PUSH
22512: LD_EXP 65
22516: PPUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: LD_VAR 0 4
22526: PPUSH
22527: CALL_OW 1
22531: ST_TO_ADDR
// if not mc_turret_list [ i ] then
22532: LD_EXP 65
22536: PUSH
22537: LD_VAR 0 2
22541: ARRAY
22542: NOT
22543: IFFALSE 22547
// continue ;
22545: GO 22416
// end ; busy := false ;
22547: LD_ADDR_VAR 0 6
22551: PUSH
22552: LD_INT 0
22554: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_EXP 57
22564: PUSH
22565: LD_VAR 0 2
22569: ARRAY
22570: PPUSH
22571: LD_INT 30
22573: PUSH
22574: LD_INT 3
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL_OW 72
22585: ST_TO_ADDR
// for j in tmp do
22586: LD_ADDR_VAR 0 3
22590: PUSH
22591: LD_VAR 0 4
22595: PUSH
22596: FOR_IN
22597: IFFALSE 22625
// if not BuildingStatus ( j ) = bs_idle then
22599: LD_VAR 0 3
22603: PPUSH
22604: CALL_OW 461
22608: PUSH
22609: LD_INT 2
22611: EQUAL
22612: NOT
22613: IFFALSE 22623
// busy := true ;
22615: LD_ADDR_VAR 0 6
22619: PUSH
22620: LD_INT 1
22622: ST_TO_ADDR
22623: GO 22596
22625: POP
22626: POP
// if busy then
22627: LD_VAR 0 6
22631: IFFALSE 22635
// continue ;
22633: GO 22416
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
22635: LD_ADDR_VAR 0 7
22639: PUSH
22640: LD_EXP 65
22644: PUSH
22645: LD_VAR 0 2
22649: ARRAY
22650: PUSH
22651: LD_INT 1
22653: ARRAY
22654: PPUSH
22655: CALL 49501 0 1
22659: ST_TO_ADDR
// if not weapon then
22660: LD_VAR 0 7
22664: NOT
22665: IFFALSE 22669
// continue ;
22667: GO 22416
// if mc_allowed_tower_weapons [ i ] then
22669: LD_EXP 95
22673: PUSH
22674: LD_VAR 0 2
22678: ARRAY
22679: IFFALSE 22702
// if not weapon in mc_allowed_tower_weapons [ i ] then
22681: LD_VAR 0 7
22685: PUSH
22686: LD_EXP 95
22690: PUSH
22691: LD_VAR 0 2
22695: ARRAY
22696: IN
22697: NOT
22698: IFFALSE 22702
// continue ;
22700: GO 22416
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
22702: LD_EXP 65
22706: PUSH
22707: LD_VAR 0 2
22711: ARRAY
22712: PUSH
22713: LD_INT 1
22715: ARRAY
22716: PPUSH
22717: LD_VAR 0 7
22721: PPUSH
22722: CALL_OW 148
// end ;
22726: GO 22416
22728: POP
22729: POP
// end ;
22730: LD_VAR 0 1
22734: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
22735: LD_INT 0
22737: PPUSH
22738: PPUSH
22739: PPUSH
22740: PPUSH
22741: PPUSH
22742: PPUSH
// if not mc_bases then
22743: LD_EXP 57
22747: NOT
22748: IFFALSE 22752
// exit ;
22750: GO 23737
// for i = 1 to mc_bases do
22752: LD_ADDR_VAR 0 2
22756: PUSH
22757: DOUBLE
22758: LD_INT 1
22760: DEC
22761: ST_TO_ADDR
22762: LD_EXP 57
22766: PUSH
22767: FOR_TO
22768: IFFALSE 23735
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
22770: LD_EXP 70
22774: PUSH
22775: LD_VAR 0 2
22779: ARRAY
22780: NOT
22781: PUSH
22782: LD_EXP 70
22786: PUSH
22787: LD_VAR 0 2
22791: ARRAY
22792: PUSH
22793: LD_EXP 71
22797: PUSH
22798: LD_VAR 0 2
22802: ARRAY
22803: EQUAL
22804: OR
22805: IFFALSE 22809
// continue ;
22807: GO 22767
// if mc_miners [ i ] then
22809: LD_EXP 71
22813: PUSH
22814: LD_VAR 0 2
22818: ARRAY
22819: IFFALSE 23422
// begin k := 1 ;
22821: LD_ADDR_VAR 0 4
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
22829: LD_ADDR_VAR 0 3
22833: PUSH
22834: DOUBLE
22835: LD_EXP 71
22839: PUSH
22840: LD_VAR 0 2
22844: ARRAY
22845: INC
22846: ST_TO_ADDR
22847: LD_INT 1
22849: PUSH
22850: FOR_DOWNTO
22851: IFFALSE 23420
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
22853: LD_EXP 71
22857: PUSH
22858: LD_VAR 0 2
22862: ARRAY
22863: PUSH
22864: LD_VAR 0 3
22868: ARRAY
22869: PPUSH
22870: CALL_OW 301
22874: IFFALSE 22937
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
22876: LD_ADDR_VAR 0 5
22880: PUSH
22881: LD_EXP 71
22885: PUSH
22886: LD_VAR 0 2
22890: ARRAY
22891: PUSH
22892: LD_EXP 71
22896: PUSH
22897: LD_VAR 0 2
22901: ARRAY
22902: PUSH
22903: LD_VAR 0 3
22907: ARRAY
22908: DIFF
22909: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
22910: LD_ADDR_EXP 71
22914: PUSH
22915: LD_EXP 71
22919: PPUSH
22920: LD_VAR 0 2
22924: PPUSH
22925: LD_VAR 0 5
22929: PPUSH
22930: CALL_OW 1
22934: ST_TO_ADDR
// continue ;
22935: GO 22850
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
22937: LD_EXP 71
22941: PUSH
22942: LD_VAR 0 2
22946: ARRAY
22947: PUSH
22948: LD_VAR 0 3
22952: ARRAY
22953: PPUSH
22954: CALL 44559 0 1
22958: PUSH
22959: LD_EXP 71
22963: PUSH
22964: LD_VAR 0 2
22968: ARRAY
22969: PUSH
22970: LD_VAR 0 3
22974: ARRAY
22975: PPUSH
22976: CALL_OW 255
22980: PPUSH
22981: LD_EXP 70
22985: PUSH
22986: LD_VAR 0 2
22990: ARRAY
22991: PUSH
22992: LD_VAR 0 4
22996: ARRAY
22997: PUSH
22998: LD_INT 1
23000: ARRAY
23001: PPUSH
23002: LD_EXP 70
23006: PUSH
23007: LD_VAR 0 2
23011: ARRAY
23012: PUSH
23013: LD_VAR 0 4
23017: ARRAY
23018: PUSH
23019: LD_INT 2
23021: ARRAY
23022: PPUSH
23023: LD_INT 15
23025: PPUSH
23026: CALL 45552 0 4
23030: PUSH
23031: LD_INT 4
23033: ARRAY
23034: PUSH
23035: LD_EXP 71
23039: PUSH
23040: LD_VAR 0 2
23044: ARRAY
23045: PUSH
23046: LD_VAR 0 3
23050: ARRAY
23051: PPUSH
23052: LD_INT 10
23054: PPUSH
23055: CALL 47249 0 2
23059: PUSH
23060: LD_INT 4
23062: ARRAY
23063: OR
23064: AND
23065: IFFALSE 23088
// ComStop ( mc_miners [ i ] [ j ] ) ;
23067: LD_EXP 71
23071: PUSH
23072: LD_VAR 0 2
23076: ARRAY
23077: PUSH
23078: LD_VAR 0 3
23082: ARRAY
23083: PPUSH
23084: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
23088: LD_EXP 71
23092: PUSH
23093: LD_VAR 0 2
23097: ARRAY
23098: PUSH
23099: LD_VAR 0 3
23103: ARRAY
23104: PPUSH
23105: CALL_OW 257
23109: PUSH
23110: LD_INT 1
23112: EQUAL
23113: PUSH
23114: LD_EXP 71
23118: PUSH
23119: LD_VAR 0 2
23123: ARRAY
23124: PUSH
23125: LD_VAR 0 3
23129: ARRAY
23130: PPUSH
23131: CALL_OW 459
23135: NOT
23136: AND
23137: PUSH
23138: LD_EXP 71
23142: PUSH
23143: LD_VAR 0 2
23147: ARRAY
23148: PUSH
23149: LD_VAR 0 3
23153: ARRAY
23154: PPUSH
23155: CALL_OW 255
23159: PPUSH
23160: LD_EXP 70
23164: PUSH
23165: LD_VAR 0 2
23169: ARRAY
23170: PUSH
23171: LD_VAR 0 4
23175: ARRAY
23176: PUSH
23177: LD_INT 1
23179: ARRAY
23180: PPUSH
23181: LD_EXP 70
23185: PUSH
23186: LD_VAR 0 2
23190: ARRAY
23191: PUSH
23192: LD_VAR 0 4
23196: ARRAY
23197: PUSH
23198: LD_INT 2
23200: ARRAY
23201: PPUSH
23202: LD_INT 15
23204: PPUSH
23205: CALL 45552 0 4
23209: PUSH
23210: LD_INT 4
23212: ARRAY
23213: PUSH
23214: LD_INT 0
23216: EQUAL
23217: AND
23218: PUSH
23219: LD_EXP 71
23223: PUSH
23224: LD_VAR 0 2
23228: ARRAY
23229: PUSH
23230: LD_VAR 0 3
23234: ARRAY
23235: PPUSH
23236: CALL_OW 314
23240: NOT
23241: AND
23242: IFFALSE 23418
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
23244: LD_EXP 71
23248: PUSH
23249: LD_VAR 0 2
23253: ARRAY
23254: PUSH
23255: LD_VAR 0 3
23259: ARRAY
23260: PPUSH
23261: CALL_OW 310
23265: IFFALSE 23288
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
23267: LD_EXP 71
23271: PUSH
23272: LD_VAR 0 2
23276: ARRAY
23277: PUSH
23278: LD_VAR 0 3
23282: ARRAY
23283: PPUSH
23284: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
23288: LD_EXP 71
23292: PUSH
23293: LD_VAR 0 2
23297: ARRAY
23298: PUSH
23299: LD_VAR 0 3
23303: ARRAY
23304: PPUSH
23305: CALL_OW 314
23309: NOT
23310: IFFALSE 23378
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
23312: LD_EXP 71
23316: PUSH
23317: LD_VAR 0 2
23321: ARRAY
23322: PUSH
23323: LD_VAR 0 3
23327: ARRAY
23328: PPUSH
23329: LD_EXP 70
23333: PUSH
23334: LD_VAR 0 2
23338: ARRAY
23339: PUSH
23340: LD_VAR 0 4
23344: ARRAY
23345: PUSH
23346: LD_INT 1
23348: ARRAY
23349: PPUSH
23350: LD_EXP 70
23354: PUSH
23355: LD_VAR 0 2
23359: ARRAY
23360: PUSH
23361: LD_VAR 0 4
23365: ARRAY
23366: PUSH
23367: LD_INT 2
23369: ARRAY
23370: PPUSH
23371: LD_INT 0
23373: PPUSH
23374: CALL_OW 193
// k := k + 1 ;
23378: LD_ADDR_VAR 0 4
23382: PUSH
23383: LD_VAR 0 4
23387: PUSH
23388: LD_INT 1
23390: PLUS
23391: ST_TO_ADDR
// if k > mc_mines [ i ] then
23392: LD_VAR 0 4
23396: PUSH
23397: LD_EXP 70
23401: PUSH
23402: LD_VAR 0 2
23406: ARRAY
23407: GREATER
23408: IFFALSE 23418
// k := 1 ;
23410: LD_ADDR_VAR 0 4
23414: PUSH
23415: LD_INT 1
23417: ST_TO_ADDR
// end ; end ;
23418: GO 22850
23420: POP
23421: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
23422: LD_ADDR_VAR 0 5
23426: PUSH
23427: LD_EXP 57
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: PPUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 4
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 30
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 30
23463: PUSH
23464: LD_INT 32
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PPUSH
23477: CALL_OW 72
23481: ST_TO_ADDR
// if not tmp then
23482: LD_VAR 0 5
23486: NOT
23487: IFFALSE 23491
// continue ;
23489: GO 22767
// list := [ ] ;
23491: LD_ADDR_VAR 0 6
23495: PUSH
23496: EMPTY
23497: ST_TO_ADDR
// for j in tmp do
23498: LD_ADDR_VAR 0 3
23502: PUSH
23503: LD_VAR 0 5
23507: PUSH
23508: FOR_IN
23509: IFFALSE 23578
// begin for k in UnitsInside ( j ) do
23511: LD_ADDR_VAR 0 4
23515: PUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: CALL_OW 313
23525: PUSH
23526: FOR_IN
23527: IFFALSE 23574
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
23529: LD_VAR 0 4
23533: PPUSH
23534: CALL_OW 257
23538: PUSH
23539: LD_INT 1
23541: EQUAL
23542: PUSH
23543: LD_VAR 0 4
23547: PPUSH
23548: CALL_OW 459
23552: NOT
23553: AND
23554: IFFALSE 23572
// list := list ^ k ;
23556: LD_ADDR_VAR 0 6
23560: PUSH
23561: LD_VAR 0 6
23565: PUSH
23566: LD_VAR 0 4
23570: ADD
23571: ST_TO_ADDR
23572: GO 23526
23574: POP
23575: POP
// end ;
23576: GO 23508
23578: POP
23579: POP
// list := list diff mc_miners [ i ] ;
23580: LD_ADDR_VAR 0 6
23584: PUSH
23585: LD_VAR 0 6
23589: PUSH
23590: LD_EXP 71
23594: PUSH
23595: LD_VAR 0 2
23599: ARRAY
23600: DIFF
23601: ST_TO_ADDR
// if not list then
23602: LD_VAR 0 6
23606: NOT
23607: IFFALSE 23611
// continue ;
23609: GO 22767
// k := mc_mines [ i ] - mc_miners [ i ] ;
23611: LD_ADDR_VAR 0 4
23615: PUSH
23616: LD_EXP 70
23620: PUSH
23621: LD_VAR 0 2
23625: ARRAY
23626: PUSH
23627: LD_EXP 71
23631: PUSH
23632: LD_VAR 0 2
23636: ARRAY
23637: MINUS
23638: ST_TO_ADDR
// if k > list then
23639: LD_VAR 0 4
23643: PUSH
23644: LD_VAR 0 6
23648: GREATER
23649: IFFALSE 23661
// k := list ;
23651: LD_ADDR_VAR 0 4
23655: PUSH
23656: LD_VAR 0 6
23660: ST_TO_ADDR
// for j = 1 to k do
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: DOUBLE
23667: LD_INT 1
23669: DEC
23670: ST_TO_ADDR
23671: LD_VAR 0 4
23675: PUSH
23676: FOR_TO
23677: IFFALSE 23731
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
23679: LD_ADDR_EXP 71
23683: PUSH
23684: LD_EXP 71
23688: PPUSH
23689: LD_VAR 0 2
23693: PUSH
23694: LD_EXP 71
23698: PUSH
23699: LD_VAR 0 2
23703: ARRAY
23704: PUSH
23705: LD_INT 1
23707: PLUS
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PPUSH
23713: LD_VAR 0 6
23717: PUSH
23718: LD_VAR 0 3
23722: ARRAY
23723: PPUSH
23724: CALL 45058 0 3
23728: ST_TO_ADDR
23729: GO 23676
23731: POP
23732: POP
// end ;
23733: GO 22767
23735: POP
23736: POP
// end ;
23737: LD_VAR 0 1
23741: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
23742: LD_INT 0
23744: PPUSH
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
23752: PPUSH
// if not mc_bases then
23753: LD_EXP 57
23757: NOT
23758: IFFALSE 23762
// exit ;
23760: GO 25241
// for i = 1 to mc_bases do
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: DOUBLE
23768: LD_INT 1
23770: DEC
23771: ST_TO_ADDR
23772: LD_EXP 57
23776: PUSH
23777: FOR_TO
23778: IFFALSE 25239
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
23780: LD_EXP 57
23784: PUSH
23785: LD_VAR 0 2
23789: ARRAY
23790: NOT
23791: PUSH
23792: LD_EXP 64
23796: PUSH
23797: LD_VAR 0 2
23801: ARRAY
23802: OR
23803: IFFALSE 23807
// continue ;
23805: GO 23777
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
23807: LD_EXP 73
23811: PUSH
23812: LD_VAR 0 2
23816: ARRAY
23817: NOT
23818: PUSH
23819: LD_EXP 74
23823: PUSH
23824: LD_VAR 0 2
23828: ARRAY
23829: AND
23830: IFFALSE 23868
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23832: LD_ADDR_EXP 74
23836: PUSH
23837: LD_EXP 74
23841: PPUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: EMPTY
23848: PPUSH
23849: CALL_OW 1
23853: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
23854: LD_VAR 0 2
23858: PPUSH
23859: LD_INT 107
23861: PPUSH
23862: CALL 19338 0 2
// continue ;
23866: GO 23777
// end ; target := [ ] ;
23868: LD_ADDR_VAR 0 5
23872: PUSH
23873: EMPTY
23874: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: DOUBLE
23881: LD_EXP 73
23885: PUSH
23886: LD_VAR 0 2
23890: ARRAY
23891: INC
23892: ST_TO_ADDR
23893: LD_INT 1
23895: PUSH
23896: FOR_DOWNTO
23897: IFFALSE 24157
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
23899: LD_EXP 73
23903: PUSH
23904: LD_VAR 0 2
23908: ARRAY
23909: PUSH
23910: LD_VAR 0 3
23914: ARRAY
23915: PUSH
23916: LD_INT 2
23918: ARRAY
23919: PPUSH
23920: LD_EXP 73
23924: PUSH
23925: LD_VAR 0 2
23929: ARRAY
23930: PUSH
23931: LD_VAR 0 3
23935: ARRAY
23936: PUSH
23937: LD_INT 3
23939: ARRAY
23940: PPUSH
23941: CALL_OW 488
23945: PUSH
23946: LD_EXP 73
23950: PUSH
23951: LD_VAR 0 2
23955: ARRAY
23956: PUSH
23957: LD_VAR 0 3
23961: ARRAY
23962: PUSH
23963: LD_INT 2
23965: ARRAY
23966: PPUSH
23967: LD_EXP 73
23971: PUSH
23972: LD_VAR 0 2
23976: ARRAY
23977: PUSH
23978: LD_VAR 0 3
23982: ARRAY
23983: PUSH
23984: LD_INT 3
23986: ARRAY
23987: PPUSH
23988: CALL_OW 284
23992: PUSH
23993: LD_INT 0
23995: EQUAL
23996: AND
23997: IFFALSE 24052
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
23999: LD_ADDR_VAR 0 4
24003: PUSH
24004: LD_EXP 73
24008: PUSH
24009: LD_VAR 0 2
24013: ARRAY
24014: PPUSH
24015: LD_VAR 0 3
24019: PPUSH
24020: CALL_OW 3
24024: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
24025: LD_ADDR_EXP 73
24029: PUSH
24030: LD_EXP 73
24034: PPUSH
24035: LD_VAR 0 2
24039: PPUSH
24040: LD_VAR 0 4
24044: PPUSH
24045: CALL_OW 1
24049: ST_TO_ADDR
// continue ;
24050: GO 23896
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
24052: LD_EXP 57
24056: PUSH
24057: LD_VAR 0 2
24061: ARRAY
24062: PUSH
24063: LD_INT 1
24065: ARRAY
24066: PPUSH
24067: CALL_OW 255
24071: PPUSH
24072: LD_EXP 73
24076: PUSH
24077: LD_VAR 0 2
24081: ARRAY
24082: PUSH
24083: LD_VAR 0 3
24087: ARRAY
24088: PUSH
24089: LD_INT 2
24091: ARRAY
24092: PPUSH
24093: LD_EXP 73
24097: PUSH
24098: LD_VAR 0 2
24102: ARRAY
24103: PUSH
24104: LD_VAR 0 3
24108: ARRAY
24109: PUSH
24110: LD_INT 3
24112: ARRAY
24113: PPUSH
24114: LD_INT 20
24116: PPUSH
24117: CALL 45552 0 4
24121: PUSH
24122: LD_INT 4
24124: ARRAY
24125: PUSH
24126: LD_INT 0
24128: EQUAL
24129: IFFALSE 24155
// begin target := mc_crates [ i ] [ j ] ;
24131: LD_ADDR_VAR 0 5
24135: PUSH
24136: LD_EXP 73
24140: PUSH
24141: LD_VAR 0 2
24145: ARRAY
24146: PUSH
24147: LD_VAR 0 3
24151: ARRAY
24152: ST_TO_ADDR
// break ;
24153: GO 24157
// end ; end ;
24155: GO 23896
24157: POP
24158: POP
// if not target then
24159: LD_VAR 0 5
24163: NOT
24164: IFFALSE 24168
// continue ;
24166: GO 23777
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
24168: LD_ADDR_VAR 0 6
24172: PUSH
24173: LD_EXP 76
24177: PUSH
24178: LD_VAR 0 2
24182: ARRAY
24183: PPUSH
24184: LD_INT 2
24186: PUSH
24187: LD_INT 3
24189: PUSH
24190: LD_INT 58
24192: PUSH
24193: EMPTY
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 61
24202: PUSH
24203: EMPTY
24204: LIST
24205: PUSH
24206: LD_INT 33
24208: PUSH
24209: LD_INT 5
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 33
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 34
24238: PUSH
24239: LD_INT 32
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 34
24248: PUSH
24249: LD_INT 51
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 34
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 72
24280: ST_TO_ADDR
// if not cargo then
24281: LD_VAR 0 6
24285: NOT
24286: IFFALSE 24774
// begin if mc_crates_collector [ i ] < 5 then
24288: LD_EXP 74
24292: PUSH
24293: LD_VAR 0 2
24297: ARRAY
24298: PUSH
24299: LD_INT 5
24301: LESS
24302: IFFALSE 24588
// begin if mc_ape [ i ] then
24304: LD_EXP 86
24308: PUSH
24309: LD_VAR 0 2
24313: ARRAY
24314: IFFALSE 24361
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
24316: LD_ADDR_VAR 0 4
24320: PUSH
24321: LD_EXP 86
24325: PUSH
24326: LD_VAR 0 2
24330: ARRAY
24331: PPUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 16
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 24
24344: PUSH
24345: LD_INT 750
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PPUSH
24356: CALL_OW 72
24360: ST_TO_ADDR
// if not tmp then
24361: LD_VAR 0 4
24365: NOT
24366: IFFALSE 24415
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
24368: LD_ADDR_VAR 0 4
24372: PUSH
24373: LD_EXP 57
24377: PUSH
24378: LD_VAR 0 2
24382: ARRAY
24383: PPUSH
24384: LD_INT 25
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 24
24396: PUSH
24397: LD_INT 750
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 72
24412: ST_TO_ADDR
24413: GO 24476
// if tmp < 5 then
24415: LD_VAR 0 4
24419: PUSH
24420: LD_INT 5
24422: LESS
24423: IFFALSE 24476
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_VAR 0 4
24434: PUSH
24435: LD_EXP 57
24439: PUSH
24440: LD_VAR 0 2
24444: ARRAY
24445: PPUSH
24446: LD_INT 25
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 24
24458: PUSH
24459: LD_INT 750
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PPUSH
24470: CALL_OW 72
24474: UNION
24475: ST_TO_ADDR
// if not tmp then
24476: LD_VAR 0 4
24480: NOT
24481: IFFALSE 24485
// continue ;
24483: GO 23777
// for j in tmp do
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_VAR 0 4
24494: PUSH
24495: FOR_IN
24496: IFFALSE 24586
// if not GetTag ( j ) then
24498: LD_VAR 0 3
24502: PPUSH
24503: CALL_OW 110
24507: NOT
24508: IFFALSE 24584
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
24510: LD_ADDR_EXP 74
24514: PUSH
24515: LD_EXP 74
24519: PPUSH
24520: LD_VAR 0 2
24524: PUSH
24525: LD_EXP 74
24529: PUSH
24530: LD_VAR 0 2
24534: ARRAY
24535: PUSH
24536: LD_INT 1
24538: PLUS
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PPUSH
24544: LD_VAR 0 3
24548: PPUSH
24549: CALL 45058 0 3
24553: ST_TO_ADDR
// SetTag ( j , 107 ) ;
24554: LD_VAR 0 3
24558: PPUSH
24559: LD_INT 107
24561: PPUSH
24562: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
24566: LD_EXP 74
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: PUSH
24577: LD_INT 5
24579: GREATEREQUAL
24580: IFFALSE 24584
// break ;
24582: GO 24586
// end ;
24584: GO 24495
24586: POP
24587: POP
// end ; if mc_crates_collector [ i ] and target then
24588: LD_EXP 74
24592: PUSH
24593: LD_VAR 0 2
24597: ARRAY
24598: PUSH
24599: LD_VAR 0 5
24603: AND
24604: IFFALSE 24772
// begin if mc_crates_collector [ i ] < target [ 1 ] then
24606: LD_EXP 74
24610: PUSH
24611: LD_VAR 0 2
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 5
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: LESS
24626: IFFALSE 24646
// tmp := mc_crates_collector [ i ] else
24628: LD_ADDR_VAR 0 4
24632: PUSH
24633: LD_EXP 74
24637: PUSH
24638: LD_VAR 0 2
24642: ARRAY
24643: ST_TO_ADDR
24644: GO 24660
// tmp := target [ 1 ] ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: LD_VAR 0 5
24655: PUSH
24656: LD_INT 1
24658: ARRAY
24659: ST_TO_ADDR
// for j = 1 to tmp do
24660: LD_ADDR_VAR 0 3
24664: PUSH
24665: DOUBLE
24666: LD_INT 1
24668: DEC
24669: ST_TO_ADDR
24670: LD_VAR 0 4
24674: PUSH
24675: FOR_TO
24676: IFFALSE 24770
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
24678: LD_EXP 74
24682: PUSH
24683: LD_VAR 0 2
24687: ARRAY
24688: PUSH
24689: LD_VAR 0 3
24693: ARRAY
24694: PPUSH
24695: CALL_OW 310
24699: IFFALSE 24722
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
24701: LD_EXP 74
24705: PUSH
24706: LD_VAR 0 2
24710: ARRAY
24711: PUSH
24712: LD_VAR 0 3
24716: ARRAY
24717: PPUSH
24718: CALL_OW 122
// wait ( 3 ) ;
24722: LD_INT 3
24724: PPUSH
24725: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
24729: LD_EXP 74
24733: PUSH
24734: LD_VAR 0 2
24738: ARRAY
24739: PUSH
24740: LD_VAR 0 3
24744: ARRAY
24745: PPUSH
24746: LD_VAR 0 5
24750: PUSH
24751: LD_INT 2
24753: ARRAY
24754: PPUSH
24755: LD_VAR 0 5
24759: PUSH
24760: LD_INT 3
24762: ARRAY
24763: PPUSH
24764: CALL_OW 117
// end ;
24768: GO 24675
24770: POP
24771: POP
// end ; end else
24772: GO 25237
// begin for j in cargo do
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: LD_VAR 0 6
24783: PUSH
24784: FOR_IN
24785: IFFALSE 25235
// begin if GetTag ( j ) <> 0 then
24787: LD_VAR 0 3
24791: PPUSH
24792: CALL_OW 110
24796: PUSH
24797: LD_INT 0
24799: NONEQUAL
24800: IFFALSE 24804
// continue ;
24802: GO 24784
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
24804: LD_VAR 0 3
24808: PPUSH
24809: CALL_OW 262
24813: PUSH
24814: LD_INT 2
24816: EQUAL
24817: PUSH
24818: LD_VAR 0 3
24822: PPUSH
24823: CALL_OW 261
24827: PUSH
24828: LD_INT 15
24830: LESS
24831: AND
24832: IFFALSE 24836
// continue ;
24834: GO 24784
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
24836: LD_VAR 0 3
24840: PPUSH
24841: CALL_OW 262
24845: PUSH
24846: LD_INT 1
24848: EQUAL
24849: PUSH
24850: LD_VAR 0 3
24854: PPUSH
24855: CALL_OW 261
24859: PUSH
24860: LD_INT 10
24862: LESS
24863: AND
24864: IFFALSE 25174
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24866: LD_ADDR_VAR 0 7
24870: PUSH
24871: LD_EXP 57
24875: PUSH
24876: LD_VAR 0 2
24880: ARRAY
24881: PPUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 30
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 30
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: PPUSH
24910: CALL_OW 72
24914: ST_TO_ADDR
// if not depot then
24915: LD_VAR 0 7
24919: NOT
24920: IFFALSE 24924
// continue ;
24922: GO 24784
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_VAR 0 7
24933: PPUSH
24934: LD_VAR 0 3
24938: PPUSH
24939: CALL_OW 74
24943: PPUSH
24944: CALL_OW 296
24948: PUSH
24949: LD_INT 6
24951: LESS
24952: IFFALSE 24968
// SetFuel ( j , 100 ) else
24954: LD_VAR 0 3
24958: PPUSH
24959: LD_INT 100
24961: PPUSH
24962: CALL_OW 240
24966: GO 25174
// if GetFuel ( j ) = 0 then
24968: LD_VAR 0 3
24972: PPUSH
24973: CALL_OW 261
24977: PUSH
24978: LD_INT 0
24980: EQUAL
24981: IFFALSE 25174
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
24983: LD_ADDR_EXP 76
24987: PUSH
24988: LD_EXP 76
24992: PPUSH
24993: LD_VAR 0 2
24997: PPUSH
24998: LD_EXP 76
25002: PUSH
25003: LD_VAR 0 2
25007: ARRAY
25008: PUSH
25009: LD_VAR 0 3
25013: DIFF
25014: PPUSH
25015: CALL_OW 1
25019: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
25020: LD_VAR 0 3
25024: PPUSH
25025: CALL_OW 263
25029: PUSH
25030: LD_INT 1
25032: EQUAL
25033: IFFALSE 25049
// ComExitVehicle ( IsInUnit ( j ) ) ;
25035: LD_VAR 0 3
25039: PPUSH
25040: CALL_OW 310
25044: PPUSH
25045: CALL_OW 121
// if GetControl ( j ) = control_remote then
25049: LD_VAR 0 3
25053: PPUSH
25054: CALL_OW 263
25058: PUSH
25059: LD_INT 2
25061: EQUAL
25062: IFFALSE 25073
// ComUnlink ( j ) ;
25064: LD_VAR 0 3
25068: PPUSH
25069: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
25073: LD_ADDR_VAR 0 8
25077: PUSH
25078: LD_VAR 0 2
25082: PPUSH
25083: LD_INT 3
25085: PPUSH
25086: CALL 32870 0 2
25090: ST_TO_ADDR
// if fac then
25091: LD_VAR 0 8
25095: IFFALSE 25172
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
25097: LD_ADDR_VAR 0 9
25101: PUSH
25102: LD_VAR 0 8
25106: PPUSH
25107: LD_VAR 0 3
25111: PPUSH
25112: CALL_OW 265
25116: PPUSH
25117: LD_VAR 0 3
25121: PPUSH
25122: CALL_OW 262
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: CALL_OW 263
25136: PPUSH
25137: LD_VAR 0 3
25141: PPUSH
25142: CALL_OW 264
25146: PPUSH
25147: CALL 42223 0 5
25151: ST_TO_ADDR
// if components then
25152: LD_VAR 0 9
25156: IFFALSE 25172
// MC_InsertProduceList ( i , components ) ;
25158: LD_VAR 0 2
25162: PPUSH
25163: LD_VAR 0 9
25167: PPUSH
25168: CALL 32437 0 2
// end ; continue ;
25172: GO 24784
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
25174: LD_VAR 0 3
25178: PPUSH
25179: LD_INT 1
25181: PPUSH
25182: CALL_OW 289
25186: PUSH
25187: LD_INT 100
25189: LESS
25190: PUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: CALL_OW 314
25200: NOT
25201: AND
25202: IFFALSE 25231
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
25204: LD_VAR 0 3
25208: PPUSH
25209: LD_VAR 0 5
25213: PUSH
25214: LD_INT 2
25216: ARRAY
25217: PPUSH
25218: LD_VAR 0 5
25222: PUSH
25223: LD_INT 3
25225: ARRAY
25226: PPUSH
25227: CALL_OW 117
// break ;
25231: GO 25235
// end ;
25233: GO 24784
25235: POP
25236: POP
// end ; end ;
25237: GO 23777
25239: POP
25240: POP
// end ;
25241: LD_VAR 0 1
25245: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
// if not mc_bases then
25252: LD_EXP 57
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25422
// for i = 1 to mc_bases do
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_EXP 57
25275: PUSH
25276: FOR_TO
25277: IFFALSE 25420
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
25279: LD_ADDR_VAR 0 4
25283: PUSH
25284: LD_EXP 76
25288: PUSH
25289: LD_VAR 0 2
25293: ARRAY
25294: PUSH
25295: LD_EXP 79
25299: PUSH
25300: LD_VAR 0 2
25304: ARRAY
25305: ADD
25306: PPUSH
25307: LD_INT 33
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 72
25321: ST_TO_ADDR
// if tmp then
25322: LD_VAR 0 4
25326: IFFALSE 25418
// for j in tmp do
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_VAR 0 4
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25416
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
25341: LD_VAR 0 3
25345: PPUSH
25346: CALL_OW 312
25350: NOT
25351: PUSH
25352: LD_VAR 0 3
25356: PPUSH
25357: CALL_OW 256
25361: PUSH
25362: LD_INT 250
25364: GREATEREQUAL
25365: AND
25366: IFFALSE 25379
// Connect ( j ) else
25368: LD_VAR 0 3
25372: PPUSH
25373: CALL 47576 0 1
25377: GO 25414
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
25379: LD_VAR 0 3
25383: PPUSH
25384: CALL_OW 256
25388: PUSH
25389: LD_INT 250
25391: LESS
25392: PUSH
25393: LD_VAR 0 3
25397: PPUSH
25398: CALL_OW 312
25402: AND
25403: IFFALSE 25414
// ComUnlink ( j ) ;
25405: LD_VAR 0 3
25409: PPUSH
25410: CALL_OW 136
25414: GO 25338
25416: POP
25417: POP
// end ;
25418: GO 25276
25420: POP
25421: POP
// end ;
25422: LD_VAR 0 1
25426: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
25427: LD_INT 0
25429: PPUSH
25430: PPUSH
25431: PPUSH
25432: PPUSH
25433: PPUSH
// if not mc_bases then
25434: LD_EXP 57
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 25903
// for i = 1 to mc_bases do
25443: LD_ADDR_VAR 0 2
25447: PUSH
25448: DOUBLE
25449: LD_INT 1
25451: DEC
25452: ST_TO_ADDR
25453: LD_EXP 57
25457: PUSH
25458: FOR_TO
25459: IFFALSE 25901
// begin if not mc_produce [ i ] then
25461: LD_EXP 78
25465: PUSH
25466: LD_VAR 0 2
25470: ARRAY
25471: NOT
25472: IFFALSE 25476
// continue ;
25474: GO 25458
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
25476: LD_ADDR_VAR 0 5
25480: PUSH
25481: LD_EXP 57
25485: PUSH
25486: LD_VAR 0 2
25490: ARRAY
25491: PPUSH
25492: LD_INT 30
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PPUSH
25502: CALL_OW 72
25506: ST_TO_ADDR
// if not fac then
25507: LD_VAR 0 5
25511: NOT
25512: IFFALSE 25516
// continue ;
25514: GO 25458
// for j in fac do
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_VAR 0 5
25525: PUSH
25526: FOR_IN
25527: IFFALSE 25897
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
25529: LD_VAR 0 3
25533: PPUSH
25534: CALL_OW 461
25538: PUSH
25539: LD_INT 2
25541: NONEQUAL
25542: PUSH
25543: LD_VAR 0 3
25547: PPUSH
25548: LD_INT 15
25550: PPUSH
25551: CALL 47249 0 2
25555: PUSH
25556: LD_INT 4
25558: ARRAY
25559: OR
25560: PUSH
25561: LD_VAR 0 3
25565: PPUSH
25566: CALL_OW 313
25570: PUSH
25571: LD_INT 0
25573: EQUAL
25574: OR
25575: IFFALSE 25579
// continue ;
25577: GO 25526
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
25579: LD_VAR 0 3
25583: PPUSH
25584: LD_EXP 78
25588: PUSH
25589: LD_VAR 0 2
25593: ARRAY
25594: PUSH
25595: LD_INT 1
25597: ARRAY
25598: PUSH
25599: LD_INT 1
25601: ARRAY
25602: PPUSH
25603: LD_EXP 78
25607: PUSH
25608: LD_VAR 0 2
25612: ARRAY
25613: PUSH
25614: LD_INT 1
25616: ARRAY
25617: PUSH
25618: LD_INT 2
25620: ARRAY
25621: PPUSH
25622: LD_EXP 78
25626: PUSH
25627: LD_VAR 0 2
25631: ARRAY
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PUSH
25637: LD_INT 3
25639: ARRAY
25640: PPUSH
25641: LD_EXP 78
25645: PUSH
25646: LD_VAR 0 2
25650: ARRAY
25651: PUSH
25652: LD_INT 1
25654: ARRAY
25655: PUSH
25656: LD_INT 4
25658: ARRAY
25659: PPUSH
25660: CALL_OW 448
25664: PUSH
25665: LD_VAR 0 3
25669: PPUSH
25670: LD_EXP 78
25674: PUSH
25675: LD_VAR 0 2
25679: ARRAY
25680: PUSH
25681: LD_INT 1
25683: ARRAY
25684: PUSH
25685: LD_INT 1
25687: ARRAY
25688: PUSH
25689: LD_EXP 78
25693: PUSH
25694: LD_VAR 0 2
25698: ARRAY
25699: PUSH
25700: LD_INT 1
25702: ARRAY
25703: PUSH
25704: LD_INT 2
25706: ARRAY
25707: PUSH
25708: LD_EXP 78
25712: PUSH
25713: LD_VAR 0 2
25717: ARRAY
25718: PUSH
25719: LD_INT 1
25721: ARRAY
25722: PUSH
25723: LD_INT 3
25725: ARRAY
25726: PUSH
25727: LD_EXP 78
25731: PUSH
25732: LD_VAR 0 2
25736: ARRAY
25737: PUSH
25738: LD_INT 1
25740: ARRAY
25741: PUSH
25742: LD_INT 4
25744: ARRAY
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL 50790 0 2
25756: AND
25757: IFFALSE 25895
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
25759: LD_VAR 0 3
25763: PPUSH
25764: LD_EXP 78
25768: PUSH
25769: LD_VAR 0 2
25773: ARRAY
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: PUSH
25779: LD_INT 1
25781: ARRAY
25782: PPUSH
25783: LD_EXP 78
25787: PUSH
25788: LD_VAR 0 2
25792: ARRAY
25793: PUSH
25794: LD_INT 1
25796: ARRAY
25797: PUSH
25798: LD_INT 2
25800: ARRAY
25801: PPUSH
25802: LD_EXP 78
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 1
25815: ARRAY
25816: PUSH
25817: LD_INT 3
25819: ARRAY
25820: PPUSH
25821: LD_EXP 78
25825: PUSH
25826: LD_VAR 0 2
25830: ARRAY
25831: PUSH
25832: LD_INT 1
25834: ARRAY
25835: PUSH
25836: LD_INT 4
25838: ARRAY
25839: PPUSH
25840: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
25844: LD_ADDR_VAR 0 4
25848: PUSH
25849: LD_EXP 78
25853: PUSH
25854: LD_VAR 0 2
25858: ARRAY
25859: PPUSH
25860: LD_INT 1
25862: PPUSH
25863: CALL_OW 3
25867: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
25868: LD_ADDR_EXP 78
25872: PUSH
25873: LD_EXP 78
25877: PPUSH
25878: LD_VAR 0 2
25882: PPUSH
25883: LD_VAR 0 4
25887: PPUSH
25888: CALL_OW 1
25892: ST_TO_ADDR
// break ;
25893: GO 25897
// end ; end ;
25895: GO 25526
25897: POP
25898: POP
// end ;
25899: GO 25458
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 1
25907: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
25912: PPUSH
// if not mc_bases then
25913: LD_EXP 57
25917: NOT
25918: IFFALSE 25922
// exit ;
25920: GO 26011
// for i = 1 to mc_bases do
25922: LD_ADDR_VAR 0 2
25926: PUSH
25927: DOUBLE
25928: LD_INT 1
25930: DEC
25931: ST_TO_ADDR
25932: LD_EXP 57
25936: PUSH
25937: FOR_TO
25938: IFFALSE 26009
// begin if mc_attack [ i ] then
25940: LD_EXP 77
25944: PUSH
25945: LD_VAR 0 2
25949: ARRAY
25950: IFFALSE 26007
// begin tmp := mc_attack [ i ] [ 1 ] ;
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_EXP 77
25961: PUSH
25962: LD_VAR 0 2
25966: ARRAY
25967: PUSH
25968: LD_INT 1
25970: ARRAY
25971: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25972: LD_ADDR_EXP 77
25976: PUSH
25977: LD_EXP 77
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: EMPTY
25988: PPUSH
25989: CALL_OW 1
25993: ST_TO_ADDR
// Attack ( tmp ) ;
25994: LD_VAR 0 3
25998: PPUSH
25999: CALL 72894 0 1
// exit ;
26003: POP
26004: POP
26005: GO 26011
// end ; end ;
26007: GO 25937
26009: POP
26010: POP
// end ;
26011: LD_VAR 0 1
26015: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
// if not mc_bases then
26025: LD_EXP 57
26029: NOT
26030: IFFALSE 26034
// exit ;
26032: GO 26409
// for i = 1 to mc_bases do
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: DOUBLE
26040: LD_INT 1
26042: DEC
26043: ST_TO_ADDR
26044: LD_EXP 57
26048: PUSH
26049: FOR_TO
26050: IFFALSE 26407
// begin if not mc_bases [ i ] then
26052: LD_EXP 57
26056: PUSH
26057: LD_VAR 0 2
26061: ARRAY
26062: NOT
26063: IFFALSE 26067
// continue ;
26065: GO 26049
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
26067: LD_ADDR_VAR 0 7
26071: PUSH
26072: LD_EXP 57
26076: PUSH
26077: LD_VAR 0 2
26081: ARRAY
26082: PUSH
26083: LD_INT 1
26085: ARRAY
26086: PPUSH
26087: CALL 41527 0 1
26091: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
26092: LD_ADDR_EXP 80
26096: PUSH
26097: LD_EXP 80
26101: PPUSH
26102: LD_VAR 0 2
26106: PPUSH
26107: LD_EXP 57
26111: PUSH
26112: LD_VAR 0 2
26116: ARRAY
26117: PUSH
26118: LD_INT 1
26120: ARRAY
26121: PPUSH
26122: CALL_OW 255
26126: PPUSH
26127: LD_EXP 82
26131: PUSH
26132: LD_VAR 0 2
26136: ARRAY
26137: PPUSH
26138: CALL 39487 0 2
26142: PPUSH
26143: CALL_OW 1
26147: ST_TO_ADDR
// if not mc_scan [ i ] then
26148: LD_EXP 80
26152: PUSH
26153: LD_VAR 0 2
26157: ARRAY
26158: NOT
26159: IFFALSE 26314
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
26161: LD_ADDR_VAR 0 4
26165: PUSH
26166: LD_EXP 57
26170: PUSH
26171: LD_VAR 0 2
26175: ARRAY
26176: PPUSH
26177: LD_INT 2
26179: PUSH
26180: LD_INT 25
26182: PUSH
26183: LD_INT 5
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 25
26192: PUSH
26193: LD_INT 8
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 9
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: PPUSH
26216: CALL_OW 72
26220: ST_TO_ADDR
// if not tmp then
26221: LD_VAR 0 4
26225: NOT
26226: IFFALSE 26230
// continue ;
26228: GO 26049
// for j in tmp do
26230: LD_ADDR_VAR 0 3
26234: PUSH
26235: LD_VAR 0 4
26239: PUSH
26240: FOR_IN
26241: IFFALSE 26312
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
26243: LD_VAR 0 3
26247: PPUSH
26248: CALL_OW 310
26252: PPUSH
26253: CALL_OW 266
26257: PUSH
26258: LD_INT 5
26260: EQUAL
26261: PUSH
26262: LD_VAR 0 3
26266: PPUSH
26267: CALL_OW 257
26271: PUSH
26272: LD_INT 1
26274: EQUAL
26275: AND
26276: PUSH
26277: LD_VAR 0 3
26281: PPUSH
26282: CALL_OW 459
26286: NOT
26287: AND
26288: PUSH
26289: LD_VAR 0 7
26293: AND
26294: IFFALSE 26310
// ComChangeProfession ( j , class ) ;
26296: LD_VAR 0 3
26300: PPUSH
26301: LD_VAR 0 7
26305: PPUSH
26306: CALL_OW 123
26310: GO 26240
26312: POP
26313: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
26314: LD_EXP 80
26318: PUSH
26319: LD_VAR 0 2
26323: ARRAY
26324: PUSH
26325: LD_EXP 79
26329: PUSH
26330: LD_VAR 0 2
26334: ARRAY
26335: AND
26336: IFFALSE 26405
// begin tmp := mc_defender [ i ] ;
26338: LD_ADDR_VAR 0 4
26342: PUSH
26343: LD_EXP 79
26347: PUSH
26348: LD_VAR 0 2
26352: ARRAY
26353: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
26354: LD_ADDR_EXP 79
26358: PUSH
26359: LD_EXP 79
26363: PPUSH
26364: LD_VAR 0 2
26368: PPUSH
26369: EMPTY
26370: PPUSH
26371: CALL_OW 1
26375: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
26376: LD_VAR 0 2
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: LD_EXP 80
26390: PUSH
26391: LD_VAR 0 2
26395: ARRAY
26396: PPUSH
26397: CALL 40020 0 3
// exit ;
26401: POP
26402: POP
26403: GO 26409
// end ; end ;
26405: GO 26049
26407: POP
26408: POP
// end ;
26409: LD_VAR 0 1
26413: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
26414: LD_INT 0
26416: PPUSH
26417: PPUSH
26418: PPUSH
26419: PPUSH
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
// if not mc_bases then
26425: LD_EXP 57
26429: NOT
26430: IFFALSE 26434
// exit ;
26432: GO 27378
// for i = 1 to mc_bases do
26434: LD_ADDR_VAR 0 2
26438: PUSH
26439: DOUBLE
26440: LD_INT 1
26442: DEC
26443: ST_TO_ADDR
26444: LD_EXP 57
26448: PUSH
26449: FOR_TO
26450: IFFALSE 27376
// begin tmp := mc_lab [ i ] ;
26452: LD_ADDR_VAR 0 6
26456: PUSH
26457: LD_EXP 90
26461: PUSH
26462: LD_VAR 0 2
26466: ARRAY
26467: ST_TO_ADDR
// if not tmp then
26468: LD_VAR 0 6
26472: NOT
26473: IFFALSE 26477
// continue ;
26475: GO 26449
// for j in tmp do
26477: LD_ADDR_VAR 0 3
26481: PUSH
26482: LD_VAR 0 6
26486: PUSH
26487: FOR_IN
26488: IFFALSE 27372
// begin side := GetSide ( j ) ;
26490: LD_ADDR_VAR 0 4
26494: PUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: CALL_OW 255
26504: ST_TO_ADDR
// if not mc_tech [ side ] then
26505: LD_EXP 84
26509: PUSH
26510: LD_VAR 0 4
26514: ARRAY
26515: NOT
26516: IFFALSE 26520
// continue ;
26518: GO 26487
// if BuildingStatus ( j ) = bs_idle then
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 461
26529: PUSH
26530: LD_INT 2
26532: EQUAL
26533: IFFALSE 26606
// for t in mc_tech [ side ] do
26535: LD_ADDR_VAR 0 5
26539: PUSH
26540: LD_EXP 84
26544: PUSH
26545: LD_VAR 0 4
26549: ARRAY
26550: PUSH
26551: FOR_IN
26552: IFFALSE 26604
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
26554: LD_VAR 0 3
26558: PPUSH
26559: LD_VAR 0 5
26563: PPUSH
26564: CALL_OW 430
26568: PUSH
26569: LD_VAR 0 4
26573: PPUSH
26574: LD_VAR 0 5
26578: PPUSH
26579: CALL 38592 0 2
26583: AND
26584: IFFALSE 26602
// begin ComResearch ( j , t ) ;
26586: LD_VAR 0 3
26590: PPUSH
26591: LD_VAR 0 5
26595: PPUSH
26596: CALL_OW 124
// break ;
26600: GO 26604
// end ;
26602: GO 26551
26604: POP
26605: POP
// if BuildingStatus ( j ) = bs_need_ape then
26606: LD_VAR 0 3
26610: PPUSH
26611: CALL_OW 461
26615: PUSH
26616: LD_INT 10
26618: EQUAL
26619: IFFALSE 27207
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
26621: LD_EXP 86
26625: PUSH
26626: LD_VAR 0 2
26630: ARRAY
26631: NOT
26632: PUSH
26633: LD_EXP 87
26637: PUSH
26638: LD_VAR 0 2
26642: ARRAY
26643: NOT
26644: AND
26645: PUSH
26646: LD_EXP 84
26650: PUSH
26651: LD_VAR 0 4
26655: ARRAY
26656: PUSH
26657: LD_INT 1
26659: GREATER
26660: AND
26661: IFFALSE 26792
// begin ComCancel ( j ) ;
26663: LD_VAR 0 3
26667: PPUSH
26668: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
26672: LD_ADDR_EXP 84
26676: PUSH
26677: LD_EXP 84
26681: PPUSH
26682: LD_VAR 0 4
26686: PPUSH
26687: LD_EXP 84
26691: PUSH
26692: LD_VAR 0 4
26696: ARRAY
26697: PPUSH
26698: LD_EXP 84
26702: PUSH
26703: LD_VAR 0 4
26707: ARRAY
26708: PUSH
26709: LD_INT 1
26711: MINUS
26712: PPUSH
26713: LD_EXP 84
26717: PUSH
26718: LD_VAR 0 4
26722: ARRAY
26723: PPUSH
26724: LD_INT 0
26726: PPUSH
26727: CALL 44041 0 4
26731: PPUSH
26732: CALL_OW 1
26736: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
26737: LD_ADDR_EXP 84
26741: PUSH
26742: LD_EXP 84
26746: PPUSH
26747: LD_VAR 0 4
26751: PPUSH
26752: LD_EXP 84
26756: PUSH
26757: LD_VAR 0 4
26761: ARRAY
26762: PPUSH
26763: LD_EXP 84
26767: PUSH
26768: LD_VAR 0 4
26772: ARRAY
26773: PPUSH
26774: LD_INT 1
26776: PPUSH
26777: LD_INT 0
26779: PPUSH
26780: CALL 44041 0 4
26784: PPUSH
26785: CALL_OW 1
26789: ST_TO_ADDR
// continue ;
26790: GO 26487
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
26792: LD_EXP 86
26796: PUSH
26797: LD_VAR 0 2
26801: ARRAY
26802: PUSH
26803: LD_EXP 87
26807: PUSH
26808: LD_VAR 0 2
26812: ARRAY
26813: NOT
26814: AND
26815: IFFALSE 26942
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
26817: LD_ADDR_EXP 87
26821: PUSH
26822: LD_EXP 87
26826: PPUSH
26827: LD_VAR 0 2
26831: PUSH
26832: LD_EXP 87
26836: PUSH
26837: LD_VAR 0 2
26841: ARRAY
26842: PUSH
26843: LD_INT 1
26845: PLUS
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: LD_EXP 86
26855: PUSH
26856: LD_VAR 0 2
26860: ARRAY
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: CALL 45058 0 3
26870: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
26871: LD_EXP 86
26875: PUSH
26876: LD_VAR 0 2
26880: ARRAY
26881: PUSH
26882: LD_INT 1
26884: ARRAY
26885: PPUSH
26886: LD_INT 112
26888: PPUSH
26889: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
26893: LD_ADDR_VAR 0 9
26897: PUSH
26898: LD_EXP 86
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: CALL_OW 3
26916: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
26917: LD_ADDR_EXP 86
26921: PUSH
26922: LD_EXP 86
26926: PPUSH
26927: LD_VAR 0 2
26931: PPUSH
26932: LD_VAR 0 9
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
26942: LD_EXP 86
26946: PUSH
26947: LD_VAR 0 2
26951: ARRAY
26952: PUSH
26953: LD_EXP 87
26957: PUSH
26958: LD_VAR 0 2
26962: ARRAY
26963: AND
26964: PUSH
26965: LD_EXP 87
26969: PUSH
26970: LD_VAR 0 2
26974: ARRAY
26975: PUSH
26976: LD_INT 1
26978: ARRAY
26979: PPUSH
26980: CALL_OW 310
26984: NOT
26985: AND
26986: PUSH
26987: LD_VAR 0 3
26991: PPUSH
26992: CALL_OW 313
26996: PUSH
26997: LD_INT 6
26999: EQUAL
27000: AND
27001: IFFALSE 27057
// begin tmp2 := UnitsInside ( j ) ;
27003: LD_ADDR_VAR 0 9
27007: PUSH
27008: LD_VAR 0 3
27012: PPUSH
27013: CALL_OW 313
27017: ST_TO_ADDR
// if tmp2 = 6 then
27018: LD_VAR 0 9
27022: PUSH
27023: LD_INT 6
27025: EQUAL
27026: IFFALSE 27057
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
27028: LD_VAR 0 9
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: LD_INT 112
27039: PPUSH
27040: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
27044: LD_VAR 0 9
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
27057: LD_EXP 87
27061: PUSH
27062: LD_VAR 0 2
27066: ARRAY
27067: PUSH
27068: LD_EXP 87
27072: PUSH
27073: LD_VAR 0 2
27077: ARRAY
27078: PUSH
27079: LD_INT 1
27081: ARRAY
27082: PPUSH
27083: CALL_OW 314
27087: NOT
27088: AND
27089: PUSH
27090: LD_EXP 87
27094: PUSH
27095: LD_VAR 0 2
27099: ARRAY
27100: PUSH
27101: LD_INT 1
27103: ARRAY
27104: PPUSH
27105: CALL_OW 310
27109: NOT
27110: AND
27111: IFFALSE 27137
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
27113: LD_EXP 87
27117: PUSH
27118: LD_VAR 0 2
27122: ARRAY
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: PPUSH
27128: LD_VAR 0 3
27132: PPUSH
27133: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
27137: LD_EXP 87
27141: PUSH
27142: LD_VAR 0 2
27146: ARRAY
27147: PUSH
27148: LD_INT 1
27150: ARRAY
27151: PPUSH
27152: CALL_OW 310
27156: PUSH
27157: LD_EXP 87
27161: PUSH
27162: LD_VAR 0 2
27166: ARRAY
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: PPUSH
27172: CALL_OW 310
27176: PPUSH
27177: CALL_OW 461
27181: PUSH
27182: LD_INT 3
27184: NONEQUAL
27185: AND
27186: IFFALSE 27207
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
27188: LD_EXP 87
27192: PUSH
27193: LD_VAR 0 2
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
27207: LD_VAR 0 3
27211: PPUSH
27212: CALL_OW 461
27216: PUSH
27217: LD_INT 6
27219: EQUAL
27220: PUSH
27221: LD_VAR 0 6
27225: PUSH
27226: LD_INT 1
27228: GREATER
27229: AND
27230: IFFALSE 27370
// begin sci := [ ] ;
27232: LD_ADDR_VAR 0 8
27236: PUSH
27237: EMPTY
27238: ST_TO_ADDR
// for x in tmp diff j do
27239: LD_ADDR_VAR 0 7
27243: PUSH
27244: LD_VAR 0 6
27248: PUSH
27249: LD_VAR 0 3
27253: DIFF
27254: PUSH
27255: FOR_IN
27256: IFFALSE 27296
// begin if BuildingStatus ( x ) = bs_idle then
27258: LD_VAR 0 7
27262: PPUSH
27263: CALL_OW 461
27267: PUSH
27268: LD_INT 2
27270: EQUAL
27271: IFFALSE 27294
// sci := sci ^ UnitsInside ( x ) ;
27273: LD_ADDR_VAR 0 8
27277: PUSH
27278: LD_VAR 0 8
27282: PUSH
27283: LD_VAR 0 7
27287: PPUSH
27288: CALL_OW 313
27292: ADD
27293: ST_TO_ADDR
// end ;
27294: GO 27255
27296: POP
27297: POP
// if not sci then
27298: LD_VAR 0 8
27302: NOT
27303: IFFALSE 27307
// continue ;
27305: GO 26487
// for x in sci do
27307: LD_ADDR_VAR 0 7
27311: PUSH
27312: LD_VAR 0 8
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27368
// if IsInUnit ( x ) and not HasTask ( x ) then
27320: LD_VAR 0 7
27324: PPUSH
27325: CALL_OW 310
27329: PUSH
27330: LD_VAR 0 7
27334: PPUSH
27335: CALL_OW 314
27339: NOT
27340: AND
27341: IFFALSE 27366
// begin ComExitBuilding ( x ) ;
27343: LD_VAR 0 7
27347: PPUSH
27348: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
27352: LD_VAR 0 7
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL_OW 180
// end ;
27366: GO 27317
27368: POP
27369: POP
// end ; end ;
27370: GO 26487
27372: POP
27373: POP
// end ;
27374: GO 26449
27376: POP
27377: POP
// end ;
27378: LD_VAR 0 1
27382: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
27383: LD_INT 0
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
// if not mc_bases or not mc_parking then
27393: LD_EXP 57
27397: NOT
27398: PUSH
27399: LD_EXP 81
27403: NOT
27404: OR
27405: IFFALSE 27409
// exit ;
27407: GO 28067
// for i = 1 to mc_bases do
27409: LD_ADDR_VAR 0 2
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_EXP 57
27423: PUSH
27424: FOR_TO
27425: IFFALSE 28065
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
27427: LD_EXP 57
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: NOT
27438: PUSH
27439: LD_EXP 81
27443: PUSH
27444: LD_VAR 0 2
27448: ARRAY
27449: NOT
27450: OR
27451: IFFALSE 27455
// continue ;
27453: GO 27424
// if mc_scan [ i ] then
27455: LD_EXP 80
27459: PUSH
27460: LD_VAR 0 2
27464: ARRAY
27465: IFFALSE 27491
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27467: LD_ADDR_EXP 69
27471: PUSH
27472: LD_EXP 69
27476: PPUSH
27477: LD_VAR 0 2
27481: PPUSH
27482: EMPTY
27483: PPUSH
27484: CALL_OW 1
27488: ST_TO_ADDR
// continue ;
27489: GO 27424
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
27491: LD_ADDR_VAR 0 5
27495: PUSH
27496: LD_EXP 57
27500: PUSH
27501: LD_VAR 0 2
27505: ARRAY
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PPUSH
27511: CALL_OW 255
27515: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27516: LD_ADDR_VAR 0 6
27520: PUSH
27521: LD_EXP 57
27525: PUSH
27526: LD_VAR 0 2
27530: ARRAY
27531: PPUSH
27532: LD_INT 30
27534: PUSH
27535: LD_INT 3
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 72
27546: ST_TO_ADDR
// if not fac then
27547: LD_VAR 0 6
27551: NOT
27552: IFFALSE 27603
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27554: LD_ADDR_VAR 0 6
27558: PUSH
27559: LD_EXP 57
27563: PUSH
27564: LD_VAR 0 2
27568: ARRAY
27569: PPUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 30
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 30
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: PPUSH
27598: CALL_OW 72
27602: ST_TO_ADDR
// if not fac then
27603: LD_VAR 0 6
27607: NOT
27608: IFFALSE 27612
// continue ;
27610: GO 27424
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27612: LD_ADDR_VAR 0 7
27616: PUSH
27617: LD_EXP 81
27621: PUSH
27622: LD_VAR 0 2
27626: ARRAY
27627: PPUSH
27628: LD_INT 22
27630: PUSH
27631: LD_VAR 0 5
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 21
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 24
27655: PUSH
27656: LD_INT 1000
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 70
27676: PUSH
27677: LD_INT 22
27679: PUSH
27680: LD_VAR 0 5
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 91
27691: PUSH
27692: LD_VAR 0 6
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PUSH
27701: LD_INT 25
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 21
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 24
27724: PUSH
27725: LD_INT 1000
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: PPUSH
27742: CALL_OW 69
27746: UNION
27747: ST_TO_ADDR
// if not vehs then
27748: LD_VAR 0 7
27752: NOT
27753: IFFALSE 27779
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27755: LD_ADDR_EXP 69
27759: PUSH
27760: LD_EXP 69
27764: PPUSH
27765: LD_VAR 0 2
27769: PPUSH
27770: EMPTY
27771: PPUSH
27772: CALL_OW 1
27776: ST_TO_ADDR
// continue ;
27777: GO 27424
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27779: LD_ADDR_VAR 0 8
27783: PUSH
27784: LD_EXP 57
27788: PUSH
27789: LD_VAR 0 2
27793: ARRAY
27794: PPUSH
27795: LD_INT 30
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 72
27809: ST_TO_ADDR
// if tmp then
27810: LD_VAR 0 8
27814: IFFALSE 27917
// begin for j in tmp do
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_VAR 0 8
27825: PUSH
27826: FOR_IN
27827: IFFALSE 27915
// for k in UnitsInside ( j ) do
27829: LD_ADDR_VAR 0 4
27833: PUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 313
27843: PUSH
27844: FOR_IN
27845: IFFALSE 27911
// if k then
27847: LD_VAR 0 4
27851: IFFALSE 27909
// if not k in mc_repair_vehicle [ i ] then
27853: LD_VAR 0 4
27857: PUSH
27858: LD_EXP 69
27862: PUSH
27863: LD_VAR 0 2
27867: ARRAY
27868: IN
27869: NOT
27870: IFFALSE 27909
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
27872: LD_ADDR_EXP 69
27876: PUSH
27877: LD_EXP 69
27881: PPUSH
27882: LD_VAR 0 2
27886: PPUSH
27887: LD_EXP 69
27891: PUSH
27892: LD_VAR 0 2
27896: ARRAY
27897: PUSH
27898: LD_VAR 0 4
27902: UNION
27903: PPUSH
27904: CALL_OW 1
27908: ST_TO_ADDR
27909: GO 27844
27911: POP
27912: POP
27913: GO 27826
27915: POP
27916: POP
// end ; if not mc_repair_vehicle [ i ] then
27917: LD_EXP 69
27921: PUSH
27922: LD_VAR 0 2
27926: ARRAY
27927: NOT
27928: IFFALSE 27932
// continue ;
27930: GO 27424
// for j in mc_repair_vehicle [ i ] do
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_EXP 69
27941: PUSH
27942: LD_VAR 0 2
27946: ARRAY
27947: PUSH
27948: FOR_IN
27949: IFFALSE 28061
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
27951: LD_VAR 0 3
27955: PPUSH
27956: CALL_OW 311
27960: NOT
27961: PUSH
27962: LD_VAR 0 3
27966: PUSH
27967: LD_EXP 60
27971: PUSH
27972: LD_VAR 0 2
27976: ARRAY
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: IN
27982: NOT
27983: AND
27984: PUSH
27985: LD_VAR 0 3
27989: PUSH
27990: LD_EXP 60
27994: PUSH
27995: LD_VAR 0 2
27999: ARRAY
28000: PUSH
28001: LD_INT 2
28003: ARRAY
28004: IN
28005: NOT
28006: AND
28007: IFFALSE 28059
// begin if IsInUnit ( j ) then
28009: LD_VAR 0 3
28013: PPUSH
28014: CALL_OW 310
28018: IFFALSE 28029
// ComExitBuilding ( j ) ;
28020: LD_VAR 0 3
28024: PPUSH
28025: CALL_OW 122
// if not HasTask ( j ) then
28029: LD_VAR 0 3
28033: PPUSH
28034: CALL_OW 314
28038: NOT
28039: IFFALSE 28059
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
28041: LD_VAR 0 3
28045: PPUSH
28046: LD_VAR 0 7
28050: PUSH
28051: LD_INT 1
28053: ARRAY
28054: PPUSH
28055: CALL_OW 189
// end ; end ;
28059: GO 27948
28061: POP
28062: POP
// end ;
28063: GO 27424
28065: POP
28066: POP
// end ;
28067: LD_VAR 0 1
28071: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
// if not mc_bases then
28085: LD_EXP 57
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28830
// for i = 1 to mc_bases do
28094: LD_ADDR_VAR 0 2
28098: PUSH
28099: DOUBLE
28100: LD_INT 1
28102: DEC
28103: ST_TO_ADDR
28104: LD_EXP 57
28108: PUSH
28109: FOR_TO
28110: IFFALSE 28828
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
28112: LD_EXP 85
28116: PUSH
28117: LD_VAR 0 2
28121: ARRAY
28122: NOT
28123: PUSH
28124: LD_EXP 60
28128: PUSH
28129: LD_VAR 0 2
28133: ARRAY
28134: PUSH
28135: LD_INT 1
28137: ARRAY
28138: OR
28139: PUSH
28140: LD_EXP 60
28144: PUSH
28145: LD_VAR 0 2
28149: ARRAY
28150: PUSH
28151: LD_INT 2
28153: ARRAY
28154: OR
28155: PUSH
28156: LD_EXP 83
28160: PUSH
28161: LD_VAR 0 2
28165: ARRAY
28166: PPUSH
28167: LD_INT 1
28169: PPUSH
28170: CALL_OW 325
28174: NOT
28175: OR
28176: PUSH
28177: LD_EXP 80
28181: PUSH
28182: LD_VAR 0 2
28186: ARRAY
28187: OR
28188: IFFALSE 28192
// continue ;
28190: GO 28109
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
28192: LD_ADDR_VAR 0 8
28196: PUSH
28197: LD_EXP 57
28201: PUSH
28202: LD_VAR 0 2
28206: ARRAY
28207: PPUSH
28208: LD_INT 25
28210: PUSH
28211: LD_INT 4
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 50
28220: PUSH
28221: EMPTY
28222: LIST
28223: PUSH
28224: LD_INT 3
28226: PUSH
28227: LD_INT 60
28229: PUSH
28230: EMPTY
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: PPUSH
28242: CALL_OW 72
28246: PUSH
28247: LD_EXP 61
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: DIFF
28258: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28259: LD_ADDR_VAR 0 9
28263: PUSH
28264: LD_EXP 57
28268: PUSH
28269: LD_VAR 0 2
28273: ARRAY
28274: PPUSH
28275: LD_INT 2
28277: PUSH
28278: LD_INT 30
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 30
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 72
28307: ST_TO_ADDR
// if not tmp or not dep then
28308: LD_VAR 0 8
28312: NOT
28313: PUSH
28314: LD_VAR 0 9
28318: NOT
28319: OR
28320: IFFALSE 28324
// continue ;
28322: GO 28109
// side := GetSide ( tmp [ 1 ] ) ;
28324: LD_ADDR_VAR 0 11
28328: PUSH
28329: LD_VAR 0 8
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: CALL_OW 255
28342: ST_TO_ADDR
// dep := dep [ 1 ] ;
28343: LD_ADDR_VAR 0 9
28347: PUSH
28348: LD_VAR 0 9
28352: PUSH
28353: LD_INT 1
28355: ARRAY
28356: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
28357: LD_ADDR_VAR 0 7
28361: PUSH
28362: LD_EXP 85
28366: PUSH
28367: LD_VAR 0 2
28371: ARRAY
28372: PPUSH
28373: LD_INT 22
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 25
28385: PUSH
28386: LD_INT 12
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PPUSH
28397: CALL_OW 70
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 25
28414: PUSH
28415: LD_INT 12
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 91
28424: PUSH
28425: LD_VAR 0 9
28429: PUSH
28430: LD_INT 20
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PPUSH
28443: CALL_OW 69
28447: UNION
28448: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
28449: LD_ADDR_VAR 0 10
28453: PUSH
28454: LD_EXP 85
28458: PUSH
28459: LD_VAR 0 2
28463: ARRAY
28464: PPUSH
28465: LD_INT 81
28467: PUSH
28468: LD_VAR 0 11
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PPUSH
28477: CALL_OW 70
28481: ST_TO_ADDR
// if not apes or danger_at_area then
28482: LD_VAR 0 7
28486: NOT
28487: PUSH
28488: LD_VAR 0 10
28492: OR
28493: IFFALSE 28543
// begin if mc_taming [ i ] then
28495: LD_EXP 88
28499: PUSH
28500: LD_VAR 0 2
28504: ARRAY
28505: IFFALSE 28541
// begin MC_Reset ( i , 121 ) ;
28507: LD_VAR 0 2
28511: PPUSH
28512: LD_INT 121
28514: PPUSH
28515: CALL 19338 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
28519: LD_ADDR_EXP 88
28523: PUSH
28524: LD_EXP 88
28528: PPUSH
28529: LD_VAR 0 2
28533: PPUSH
28534: EMPTY
28535: PPUSH
28536: CALL_OW 1
28540: ST_TO_ADDR
// end ; continue ;
28541: GO 28109
// end ; for j in tmp do
28543: LD_ADDR_VAR 0 3
28547: PUSH
28548: LD_VAR 0 8
28552: PUSH
28553: FOR_IN
28554: IFFALSE 28824
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
28556: LD_VAR 0 3
28560: PUSH
28561: LD_EXP 88
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: IN
28572: NOT
28573: PUSH
28574: LD_EXP 88
28578: PUSH
28579: LD_VAR 0 2
28583: ARRAY
28584: PUSH
28585: LD_INT 3
28587: LESS
28588: AND
28589: IFFALSE 28647
// begin SetTag ( j , 121 ) ;
28591: LD_VAR 0 3
28595: PPUSH
28596: LD_INT 121
28598: PPUSH
28599: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
28603: LD_ADDR_EXP 88
28607: PUSH
28608: LD_EXP 88
28612: PPUSH
28613: LD_VAR 0 2
28617: PUSH
28618: LD_EXP 88
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: PLUS
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PPUSH
28637: LD_VAR 0 3
28641: PPUSH
28642: CALL 45058 0 3
28646: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
28647: LD_VAR 0 3
28651: PUSH
28652: LD_EXP 88
28656: PUSH
28657: LD_VAR 0 2
28661: ARRAY
28662: IN
28663: IFFALSE 28822
// begin if IsInUnit ( j ) then
28665: LD_VAR 0 3
28669: PPUSH
28670: CALL_OW 310
28674: IFFALSE 28685
// ComExitBuilding ( j ) ;
28676: LD_VAR 0 3
28680: PPUSH
28681: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
28685: LD_ADDR_VAR 0 6
28689: PUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: LD_VAR 0 3
28699: PPUSH
28700: CALL_OW 74
28704: ST_TO_ADDR
// if not ape then
28705: LD_VAR 0 6
28709: NOT
28710: IFFALSE 28714
// break ;
28712: GO 28824
// x := GetX ( ape ) ;
28714: LD_ADDR_VAR 0 4
28718: PUSH
28719: LD_VAR 0 6
28723: PPUSH
28724: CALL_OW 250
28728: ST_TO_ADDR
// y := GetY ( ape ) ;
28729: LD_ADDR_VAR 0 5
28733: PUSH
28734: LD_VAR 0 6
28738: PPUSH
28739: CALL_OW 251
28743: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28744: LD_VAR 0 4
28748: PPUSH
28749: LD_VAR 0 5
28753: PPUSH
28754: CALL_OW 488
28758: NOT
28759: PUSH
28760: LD_VAR 0 11
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: LD_VAR 0 5
28774: PPUSH
28775: LD_INT 20
28777: PPUSH
28778: CALL 45552 0 4
28782: PUSH
28783: LD_INT 4
28785: ARRAY
28786: OR
28787: IFFALSE 28791
// break ;
28789: GO 28824
// if not HasTask ( j ) then
28791: LD_VAR 0 3
28795: PPUSH
28796: CALL_OW 314
28800: NOT
28801: IFFALSE 28822
// ComTameXY ( j , x , y ) ;
28803: LD_VAR 0 3
28807: PPUSH
28808: LD_VAR 0 4
28812: PPUSH
28813: LD_VAR 0 5
28817: PPUSH
28818: CALL_OW 131
// end ; end ;
28822: GO 28553
28824: POP
28825: POP
// end ;
28826: GO 28109
28828: POP
28829: POP
// end ;
28830: LD_VAR 0 1
28834: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
28844: PPUSH
// if not mc_bases then
28845: LD_EXP 57
28849: NOT
28850: IFFALSE 28854
// exit ;
28852: GO 29464
// for i = 1 to mc_bases do
28854: LD_ADDR_VAR 0 2
28858: PUSH
28859: DOUBLE
28860: LD_INT 1
28862: DEC
28863: ST_TO_ADDR
28864: LD_EXP 57
28868: PUSH
28869: FOR_TO
28870: IFFALSE 29462
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
28872: LD_EXP 86
28876: PUSH
28877: LD_VAR 0 2
28881: ARRAY
28882: NOT
28883: PUSH
28884: LD_EXP 86
28888: PUSH
28889: LD_VAR 0 2
28893: ARRAY
28894: PPUSH
28895: LD_INT 25
28897: PUSH
28898: LD_INT 12
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PPUSH
28905: CALL_OW 72
28909: NOT
28910: OR
28911: IFFALSE 28915
// continue ;
28913: GO 28869
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
28915: LD_ADDR_VAR 0 5
28919: PUSH
28920: LD_EXP 86
28924: PUSH
28925: LD_VAR 0 2
28929: ARRAY
28930: PUSH
28931: LD_INT 1
28933: ARRAY
28934: PPUSH
28935: CALL_OW 255
28939: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
28940: LD_VAR 0 5
28944: PPUSH
28945: LD_INT 2
28947: PPUSH
28948: CALL_OW 325
28952: IFFALSE 29197
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28954: LD_ADDR_VAR 0 4
28958: PUSH
28959: LD_EXP 86
28963: PUSH
28964: LD_VAR 0 2
28968: ARRAY
28969: PPUSH
28970: LD_INT 25
28972: PUSH
28973: LD_INT 16
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PPUSH
28980: CALL_OW 72
28984: ST_TO_ADDR
// if tmp < 6 then
28985: LD_VAR 0 4
28989: PUSH
28990: LD_INT 6
28992: LESS
28993: IFFALSE 29197
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28995: LD_ADDR_VAR 0 6
28999: PUSH
29000: LD_EXP 57
29004: PUSH
29005: LD_VAR 0 2
29009: ARRAY
29010: PPUSH
29011: LD_INT 2
29013: PUSH
29014: LD_INT 30
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 30
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: PPUSH
29039: CALL_OW 72
29043: ST_TO_ADDR
// if depot then
29044: LD_VAR 0 6
29048: IFFALSE 29197
// begin for j in depot do
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_VAR 0 6
29059: PUSH
29060: FOR_IN
29061: IFFALSE 29092
// begin if UnitsInside ( j ) < 6 then
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 313
29072: PUSH
29073: LD_INT 6
29075: LESS
29076: IFFALSE 29090
// begin selected := j ;
29078: LD_ADDR_VAR 0 7
29082: PUSH
29083: LD_VAR 0 3
29087: ST_TO_ADDR
// break ;
29088: GO 29092
// end ; end ;
29090: GO 29060
29092: POP
29093: POP
// if selected then
29094: LD_VAR 0 7
29098: IFFALSE 29197
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29100: LD_ADDR_VAR 0 3
29104: PUSH
29105: LD_EXP 86
29109: PUSH
29110: LD_VAR 0 2
29114: ARRAY
29115: PPUSH
29116: LD_INT 25
29118: PUSH
29119: LD_INT 12
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PPUSH
29126: CALL_OW 72
29130: PUSH
29131: FOR_IN
29132: IFFALSE 29195
// if not HasTask ( j ) then
29134: LD_VAR 0 3
29138: PPUSH
29139: CALL_OW 314
29143: NOT
29144: IFFALSE 29193
// begin if not IsInUnit ( j ) then
29146: LD_VAR 0 3
29150: PPUSH
29151: CALL_OW 310
29155: NOT
29156: IFFALSE 29172
// ComEnterUnit ( j , selected ) ;
29158: LD_VAR 0 3
29162: PPUSH
29163: LD_VAR 0 7
29167: PPUSH
29168: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
29172: LD_VAR 0 3
29176: PPUSH
29177: LD_INT 16
29179: PPUSH
29180: CALL_OW 183
// AddComExitBuilding ( j ) ;
29184: LD_VAR 0 3
29188: PPUSH
29189: CALL_OW 182
// end ;
29193: GO 29131
29195: POP
29196: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
29197: LD_VAR 0 5
29201: PPUSH
29202: LD_INT 11
29204: PPUSH
29205: CALL_OW 325
29209: IFFALSE 29460
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
29211: LD_ADDR_VAR 0 4
29215: PUSH
29216: LD_EXP 86
29220: PUSH
29221: LD_VAR 0 2
29225: ARRAY
29226: PPUSH
29227: LD_INT 25
29229: PUSH
29230: LD_INT 16
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 72
29241: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
29242: LD_VAR 0 4
29246: PUSH
29247: LD_INT 6
29249: GREATEREQUAL
29250: PUSH
29251: LD_VAR 0 5
29255: PPUSH
29256: LD_INT 2
29258: PPUSH
29259: CALL_OW 325
29263: NOT
29264: OR
29265: IFFALSE 29460
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
29267: LD_ADDR_VAR 0 8
29271: PUSH
29272: LD_EXP 57
29276: PUSH
29277: LD_VAR 0 2
29281: ARRAY
29282: PPUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 30
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 30
29298: PUSH
29299: LD_INT 5
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 72
29315: ST_TO_ADDR
// if barracks then
29316: LD_VAR 0 8
29320: IFFALSE 29460
// begin for j in barracks do
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_VAR 0 8
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29364
// begin if UnitsInside ( j ) < 6 then
29335: LD_VAR 0 3
29339: PPUSH
29340: CALL_OW 313
29344: PUSH
29345: LD_INT 6
29347: LESS
29348: IFFALSE 29362
// begin selected := j ;
29350: LD_ADDR_VAR 0 7
29354: PUSH
29355: LD_VAR 0 3
29359: ST_TO_ADDR
// break ;
29360: GO 29364
// end ; end ;
29362: GO 29332
29364: POP
29365: POP
// if selected then
29366: LD_VAR 0 7
29370: IFFALSE 29460
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_EXP 86
29381: PUSH
29382: LD_VAR 0 2
29386: ARRAY
29387: PPUSH
29388: LD_INT 25
29390: PUSH
29391: LD_INT 12
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PPUSH
29398: CALL_OW 72
29402: PUSH
29403: FOR_IN
29404: IFFALSE 29458
// if not IsInUnit ( j ) and not HasTask ( j ) then
29406: LD_VAR 0 3
29410: PPUSH
29411: CALL_OW 310
29415: NOT
29416: PUSH
29417: LD_VAR 0 3
29421: PPUSH
29422: CALL_OW 314
29426: NOT
29427: AND
29428: IFFALSE 29456
// begin ComEnterUnit ( j , selected ) ;
29430: LD_VAR 0 3
29434: PPUSH
29435: LD_VAR 0 7
29439: PPUSH
29440: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
29444: LD_VAR 0 3
29448: PPUSH
29449: LD_INT 15
29451: PPUSH
29452: CALL_OW 183
// end ;
29456: GO 29403
29458: POP
29459: POP
// end ; end ; end ; end ; end ;
29460: GO 28869
29462: POP
29463: POP
// end ;
29464: LD_VAR 0 1
29468: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
29469: LD_INT 0
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
// if not mc_bases then
29475: LD_EXP 57
29479: NOT
29480: IFFALSE 29484
// exit ;
29482: GO 29662
// for i = 1 to mc_bases do
29484: LD_ADDR_VAR 0 2
29488: PUSH
29489: DOUBLE
29490: LD_INT 1
29492: DEC
29493: ST_TO_ADDR
29494: LD_EXP 57
29498: PUSH
29499: FOR_TO
29500: IFFALSE 29660
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
29502: LD_ADDR_VAR 0 4
29506: PUSH
29507: LD_EXP 57
29511: PUSH
29512: LD_VAR 0 2
29516: ARRAY
29517: PPUSH
29518: LD_INT 25
29520: PUSH
29521: LD_INT 9
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PPUSH
29528: CALL_OW 72
29532: ST_TO_ADDR
// if not tmp then
29533: LD_VAR 0 4
29537: NOT
29538: IFFALSE 29542
// continue ;
29540: GO 29499
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
29542: LD_EXP 83
29546: PUSH
29547: LD_VAR 0 2
29551: ARRAY
29552: PPUSH
29553: LD_INT 29
29555: PPUSH
29556: CALL_OW 325
29560: NOT
29561: PUSH
29562: LD_EXP 83
29566: PUSH
29567: LD_VAR 0 2
29571: ARRAY
29572: PPUSH
29573: LD_INT 28
29575: PPUSH
29576: CALL_OW 325
29580: NOT
29581: AND
29582: IFFALSE 29586
// continue ;
29584: GO 29499
// for j in tmp do
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_VAR 0 4
29595: PUSH
29596: FOR_IN
29597: IFFALSE 29656
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
29599: LD_VAR 0 3
29603: PUSH
29604: LD_EXP 60
29608: PUSH
29609: LD_VAR 0 2
29613: ARRAY
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: IN
29619: NOT
29620: PUSH
29621: LD_VAR 0 3
29625: PUSH
29626: LD_EXP 60
29630: PUSH
29631: LD_VAR 0 2
29635: ARRAY
29636: PUSH
29637: LD_INT 2
29639: ARRAY
29640: IN
29641: NOT
29642: AND
29643: IFFALSE 29654
// ComSpaceTimeShoot ( j ) ;
29645: LD_VAR 0 3
29649: PPUSH
29650: CALL 38683 0 1
29654: GO 29596
29656: POP
29657: POP
// end ;
29658: GO 29499
29660: POP
29661: POP
// end ;
29662: LD_VAR 0 1
29666: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
// if not mc_bases then
29673: LD_EXP 57
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 29704
// for i = 1 to mc_bases do
29682: LD_ADDR_VAR 0 2
29686: PUSH
29687: DOUBLE
29688: LD_INT 1
29690: DEC
29691: ST_TO_ADDR
29692: LD_EXP 57
29696: PUSH
29697: FOR_TO
29698: IFFALSE 29702
// begin end ;
29700: GO 29697
29702: POP
29703: POP
// end ;
29704: LD_VAR 0 1
29708: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
29709: LD_INT 0
29711: PPUSH
29712: PPUSH
29713: PPUSH
// if not mc_bases then
29714: LD_EXP 57
29718: NOT
29719: IFFALSE 29723
// exit ;
29721: GO 30283
// for i = 1 to mc_bases do
29723: LD_ADDR_VAR 0 2
29727: PUSH
29728: DOUBLE
29729: LD_INT 1
29731: DEC
29732: ST_TO_ADDR
29733: LD_EXP 57
29737: PUSH
29738: FOR_TO
29739: IFFALSE 30281
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_EXP 57
29750: PUSH
29751: LD_VAR 0 2
29755: ARRAY
29756: PPUSH
29757: LD_INT 25
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PPUSH
29767: CALL_OW 72
29771: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
29772: LD_VAR 0 3
29776: NOT
29777: PUSH
29778: LD_EXP 93
29782: PUSH
29783: LD_VAR 0 2
29787: ARRAY
29788: NOT
29789: OR
29790: IFFALSE 29840
// begin if mc_deposits_finder [ i ] then
29792: LD_EXP 94
29796: PUSH
29797: LD_VAR 0 2
29801: ARRAY
29802: IFFALSE 29838
// begin MC_Reset ( i , 125 ) ;
29804: LD_VAR 0 2
29808: PPUSH
29809: LD_INT 125
29811: PPUSH
29812: CALL 19338 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29816: LD_ADDR_EXP 94
29820: PUSH
29821: LD_EXP 94
29825: PPUSH
29826: LD_VAR 0 2
29830: PPUSH
29831: EMPTY
29832: PPUSH
29833: CALL_OW 1
29837: ST_TO_ADDR
// end ; continue ;
29838: GO 29738
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
29840: LD_EXP 93
29844: PUSH
29845: LD_VAR 0 2
29849: ARRAY
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PUSH
29855: LD_INT 3
29857: ARRAY
29858: PUSH
29859: LD_INT 1
29861: EQUAL
29862: PUSH
29863: LD_INT 20
29865: PPUSH
29866: LD_EXP 83
29870: PUSH
29871: LD_VAR 0 2
29875: ARRAY
29876: PPUSH
29877: CALL_OW 321
29881: PUSH
29882: LD_INT 2
29884: NONEQUAL
29885: AND
29886: IFFALSE 29936
// begin if mc_deposits_finder [ i ] then
29888: LD_EXP 94
29892: PUSH
29893: LD_VAR 0 2
29897: ARRAY
29898: IFFALSE 29934
// begin MC_Reset ( i , 125 ) ;
29900: LD_VAR 0 2
29904: PPUSH
29905: LD_INT 125
29907: PPUSH
29908: CALL 19338 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29912: LD_ADDR_EXP 94
29916: PUSH
29917: LD_EXP 94
29921: PPUSH
29922: LD_VAR 0 2
29926: PPUSH
29927: EMPTY
29928: PPUSH
29929: CALL_OW 1
29933: ST_TO_ADDR
// end ; continue ;
29934: GO 29738
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
29936: LD_EXP 93
29940: PUSH
29941: LD_VAR 0 2
29945: ARRAY
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: PUSH
29951: LD_INT 1
29953: ARRAY
29954: PPUSH
29955: LD_EXP 93
29959: PUSH
29960: LD_VAR 0 2
29964: ARRAY
29965: PUSH
29966: LD_INT 1
29968: ARRAY
29969: PUSH
29970: LD_INT 2
29972: ARRAY
29973: PPUSH
29974: LD_EXP 83
29978: PUSH
29979: LD_VAR 0 2
29983: ARRAY
29984: PPUSH
29985: CALL_OW 440
29989: IFFALSE 30032
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
29991: LD_ADDR_EXP 93
29995: PUSH
29996: LD_EXP 93
30000: PPUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: LD_EXP 93
30010: PUSH
30011: LD_VAR 0 2
30015: ARRAY
30016: PPUSH
30017: LD_INT 1
30019: PPUSH
30020: CALL_OW 3
30024: PPUSH
30025: CALL_OW 1
30029: ST_TO_ADDR
30030: GO 30279
// begin if not mc_deposits_finder [ i ] then
30032: LD_EXP 94
30036: PUSH
30037: LD_VAR 0 2
30041: ARRAY
30042: NOT
30043: IFFALSE 30095
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
30045: LD_ADDR_EXP 94
30049: PUSH
30050: LD_EXP 94
30054: PPUSH
30055: LD_VAR 0 2
30059: PPUSH
30060: LD_VAR 0 3
30064: PUSH
30065: LD_INT 1
30067: ARRAY
30068: PUSH
30069: EMPTY
30070: LIST
30071: PPUSH
30072: CALL_OW 1
30076: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PPUSH
30086: LD_INT 125
30088: PPUSH
30089: CALL_OW 109
// end else
30093: GO 30279
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
30095: LD_EXP 94
30099: PUSH
30100: LD_VAR 0 2
30104: ARRAY
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: CALL_OW 310
30114: IFFALSE 30137
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
30116: LD_EXP 94
30120: PUSH
30121: LD_VAR 0 2
30125: ARRAY
30126: PUSH
30127: LD_INT 1
30129: ARRAY
30130: PPUSH
30131: CALL_OW 122
30135: GO 30279
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
30137: LD_EXP 94
30141: PUSH
30142: LD_VAR 0 2
30146: ARRAY
30147: PUSH
30148: LD_INT 1
30150: ARRAY
30151: PPUSH
30152: CALL_OW 314
30156: NOT
30157: PUSH
30158: LD_EXP 94
30162: PUSH
30163: LD_VAR 0 2
30167: ARRAY
30168: PUSH
30169: LD_INT 1
30171: ARRAY
30172: PPUSH
30173: LD_EXP 93
30177: PUSH
30178: LD_VAR 0 2
30182: ARRAY
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PUSH
30188: LD_INT 1
30190: ARRAY
30191: PPUSH
30192: LD_EXP 93
30196: PUSH
30197: LD_VAR 0 2
30201: ARRAY
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: PUSH
30207: LD_INT 2
30209: ARRAY
30210: PPUSH
30211: CALL_OW 297
30215: PUSH
30216: LD_INT 6
30218: GREATER
30219: AND
30220: IFFALSE 30279
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
30222: LD_EXP 94
30226: PUSH
30227: LD_VAR 0 2
30231: ARRAY
30232: PUSH
30233: LD_INT 1
30235: ARRAY
30236: PPUSH
30237: LD_EXP 93
30241: PUSH
30242: LD_VAR 0 2
30246: ARRAY
30247: PUSH
30248: LD_INT 1
30250: ARRAY
30251: PUSH
30252: LD_INT 1
30254: ARRAY
30255: PPUSH
30256: LD_EXP 93
30260: PUSH
30261: LD_VAR 0 2
30265: ARRAY
30266: PUSH
30267: LD_INT 1
30269: ARRAY
30270: PUSH
30271: LD_INT 2
30273: ARRAY
30274: PPUSH
30275: CALL_OW 111
// end ; end ; end ;
30279: GO 29738
30281: POP
30282: POP
// end ;
30283: LD_VAR 0 1
30287: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
30288: LD_INT 0
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
// if not mc_bases then
30299: LD_EXP 57
30303: NOT
30304: IFFALSE 30308
// exit ;
30306: GO 30806
// for i = 1 to mc_bases do
30308: LD_ADDR_VAR 0 2
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_EXP 57
30322: PUSH
30323: FOR_TO
30324: IFFALSE 30804
// begin if not mc_bases [ i ] then
30326: LD_EXP 57
30330: PUSH
30331: LD_VAR 0 2
30335: ARRAY
30336: NOT
30337: IFFALSE 30341
// continue ;
30339: GO 30323
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
30341: LD_ADDR_VAR 0 7
30345: PUSH
30346: LD_EXP 57
30350: PUSH
30351: LD_VAR 0 2
30355: ARRAY
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: CALL_OW 248
30365: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
30366: LD_VAR 0 7
30370: PUSH
30371: LD_INT 1
30373: NONEQUAL
30374: PUSH
30375: LD_EXP 76
30379: PUSH
30380: LD_VAR 0 2
30384: ARRAY
30385: PUSH
30386: LD_EXP 79
30390: PUSH
30391: LD_VAR 0 2
30395: ARRAY
30396: UNION
30397: PPUSH
30398: LD_INT 33
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PPUSH
30408: CALL_OW 72
30412: NOT
30413: OR
30414: IFFALSE 30418
// continue ;
30416: GO 30323
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
30418: LD_ADDR_VAR 0 9
30422: PUSH
30423: LD_EXP 57
30427: PUSH
30428: LD_VAR 0 2
30432: ARRAY
30433: PPUSH
30434: LD_INT 30
30436: PUSH
30437: LD_INT 36
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PPUSH
30444: CALL_OW 72
30448: ST_TO_ADDR
// if not cts then
30449: LD_VAR 0 9
30453: NOT
30454: IFFALSE 30458
// continue ;
30456: GO 30323
// if mc_remote_driver [ i ] then
30458: LD_EXP 96
30462: PUSH
30463: LD_VAR 0 2
30467: ARRAY
30468: IFFALSE 30617
// for j in mc_remote_driver [ i ] do
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_EXP 96
30479: PUSH
30480: LD_VAR 0 2
30484: ARRAY
30485: PUSH
30486: FOR_IN
30487: IFFALSE 30615
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 310
30498: NOT
30499: PUSH
30500: LD_VAR 0 3
30504: PPUSH
30505: CALL_OW 310
30509: PPUSH
30510: CALL_OW 266
30514: PUSH
30515: LD_INT 36
30517: NONEQUAL
30518: OR
30519: IFFALSE 30613
// begin if IsInUnit ( j ) then
30521: LD_VAR 0 3
30525: PPUSH
30526: CALL_OW 310
30530: IFFALSE 30541
// ComExitBuilding ( j ) ;
30532: LD_VAR 0 3
30536: PPUSH
30537: CALL_OW 122
// ct := 0 ;
30541: LD_ADDR_VAR 0 8
30545: PUSH
30546: LD_INT 0
30548: ST_TO_ADDR
// for k in cts do
30549: LD_ADDR_VAR 0 4
30553: PUSH
30554: LD_VAR 0 9
30558: PUSH
30559: FOR_IN
30560: IFFALSE 30591
// if UnitsInside ( k ) < 3 then
30562: LD_VAR 0 4
30566: PPUSH
30567: CALL_OW 313
30571: PUSH
30572: LD_INT 3
30574: LESS
30575: IFFALSE 30589
// begin ct := k ;
30577: LD_ADDR_VAR 0 8
30581: PUSH
30582: LD_VAR 0 4
30586: ST_TO_ADDR
// break ;
30587: GO 30591
// end ;
30589: GO 30559
30591: POP
30592: POP
// if ct then
30593: LD_VAR 0 8
30597: IFFALSE 30613
// AddComEnterUnit ( j , ct ) ;
30599: LD_VAR 0 3
30603: PPUSH
30604: LD_VAR 0 8
30608: PPUSH
30609: CALL_OW 180
// end ;
30613: GO 30486
30615: POP
30616: POP
// places := 0 ;
30617: LD_ADDR_VAR 0 5
30621: PUSH
30622: LD_INT 0
30624: ST_TO_ADDR
// for j = 1 to cts do
30625: LD_ADDR_VAR 0 3
30629: PUSH
30630: DOUBLE
30631: LD_INT 1
30633: DEC
30634: ST_TO_ADDR
30635: LD_VAR 0 9
30639: PUSH
30640: FOR_TO
30641: IFFALSE 30659
// places := places + 3 ;
30643: LD_ADDR_VAR 0 5
30647: PUSH
30648: LD_VAR 0 5
30652: PUSH
30653: LD_INT 3
30655: PLUS
30656: ST_TO_ADDR
30657: GO 30640
30659: POP
30660: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
30661: LD_ADDR_VAR 0 6
30665: PUSH
30666: LD_EXP 57
30670: PUSH
30671: LD_VAR 0 2
30675: ARRAY
30676: PPUSH
30677: LD_INT 25
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 72
30691: PUSH
30692: LD_EXP 96
30696: PUSH
30697: LD_VAR 0 2
30701: ARRAY
30702: DIFF
30703: ST_TO_ADDR
// if not tmp then
30704: LD_VAR 0 6
30708: NOT
30709: IFFALSE 30713
// continue ;
30711: GO 30323
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
30713: LD_ADDR_VAR 0 5
30717: PUSH
30718: LD_VAR 0 5
30722: PUSH
30723: LD_EXP 96
30727: PUSH
30728: LD_VAR 0 2
30732: ARRAY
30733: PUSH
30734: LD_INT 1
30736: PLUS
30737: MINUS
30738: ST_TO_ADDR
// if places then
30739: LD_VAR 0 5
30743: IFFALSE 30802
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
30745: LD_ADDR_EXP 96
30749: PUSH
30750: LD_EXP 96
30754: PPUSH
30755: LD_VAR 0 2
30759: PPUSH
30760: LD_EXP 96
30764: PUSH
30765: LD_VAR 0 2
30769: ARRAY
30770: PUSH
30771: LD_VAR 0 6
30775: PUSH
30776: LD_INT 1
30778: ARRAY
30779: UNION
30780: PPUSH
30781: CALL_OW 1
30785: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
30786: LD_VAR 0 6
30790: PUSH
30791: LD_INT 1
30793: ARRAY
30794: PPUSH
30795: LD_INT 126
30797: PPUSH
30798: CALL_OW 109
// end ; end ;
30802: GO 30323
30804: POP
30805: POP
// end ;
30806: LD_VAR 0 1
30810: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
30811: LD_INT 0
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
30819: LD_VAR 0 1
30823: NOT
30824: PUSH
30825: LD_VAR 0 2
30829: NOT
30830: OR
30831: PUSH
30832: LD_VAR 0 3
30836: NOT
30837: OR
30838: PUSH
30839: LD_VAR 0 4
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: LD_INT 4
30855: PUSH
30856: LD_INT 5
30858: PUSH
30859: LD_INT 8
30861: PUSH
30862: LD_INT 9
30864: PUSH
30865: LD_INT 15
30867: PUSH
30868: LD_INT 16
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: IN
30882: NOT
30883: OR
30884: IFFALSE 30888
// exit ;
30886: GO 31788
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
30888: LD_ADDR_VAR 0 2
30892: PUSH
30893: LD_VAR 0 2
30897: PPUSH
30898: LD_INT 21
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 24
30910: PUSH
30911: LD_INT 250
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PPUSH
30922: CALL_OW 72
30926: ST_TO_ADDR
// case class of 1 , 15 :
30927: LD_VAR 0 4
30931: PUSH
30932: LD_INT 1
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30946
30938: LD_INT 15
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30946
30944: GO 31031
30946: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
30947: LD_ADDR_VAR 0 8
30951: PUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 32
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 31
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 72
30989: PUSH
30990: LD_VAR 0 2
30994: PPUSH
30995: LD_INT 2
30997: PUSH
30998: LD_INT 30
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 30
31010: PUSH
31011: LD_INT 5
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: PPUSH
31023: CALL_OW 72
31027: ADD
31028: ST_TO_ADDR
31029: GO 31277
31031: LD_INT 2
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31045
31037: LD_INT 16
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31091
31045: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
31046: LD_ADDR_VAR 0 8
31050: PUSH
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: PPUSH
31084: CALL_OW 72
31088: ST_TO_ADDR
31089: GO 31277
31091: LD_INT 3
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31145
31099: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
31100: LD_ADDR_VAR 0 8
31104: PUSH
31105: LD_VAR 0 2
31109: PPUSH
31110: LD_INT 2
31112: PUSH
31113: LD_INT 30
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 30
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: PPUSH
31138: CALL_OW 72
31142: ST_TO_ADDR
31143: GO 31277
31145: LD_INT 4
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31210
31153: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
31154: LD_ADDR_VAR 0 8
31158: PUSH
31159: LD_VAR 0 2
31163: PPUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 30
31169: PUSH
31170: LD_INT 6
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 30
31179: PUSH
31180: LD_INT 7
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 30
31189: PUSH
31190: LD_INT 8
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: PPUSH
31203: CALL_OW 72
31207: ST_TO_ADDR
31208: GO 31277
31210: LD_INT 5
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31230
31216: LD_INT 8
31218: DOUBLE
31219: EQUAL
31220: IFTRUE 31230
31222: LD_INT 9
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31276
31230: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
31231: LD_ADDR_VAR 0 8
31235: PUSH
31236: LD_VAR 0 2
31240: PPUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 30
31246: PUSH
31247: LD_INT 4
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 30
31256: PUSH
31257: LD_INT 5
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 72
31273: ST_TO_ADDR
31274: GO 31277
31276: POP
// if not tmp then
31277: LD_VAR 0 8
31281: NOT
31282: IFFALSE 31286
// exit ;
31284: GO 31788
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
31286: LD_VAR 0 4
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 15
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: IN
31301: PUSH
31302: LD_EXP 66
31306: PUSH
31307: LD_VAR 0 1
31311: ARRAY
31312: AND
31313: IFFALSE 31469
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
31315: LD_ADDR_VAR 0 9
31319: PUSH
31320: LD_EXP 66
31324: PUSH
31325: LD_VAR 0 1
31329: ARRAY
31330: PUSH
31331: LD_INT 1
31333: ARRAY
31334: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
31335: LD_VAR 0 9
31339: PUSH
31340: LD_EXP 67
31344: PUSH
31345: LD_VAR 0 1
31349: ARRAY
31350: IN
31351: NOT
31352: IFFALSE 31467
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
31354: LD_ADDR_EXP 67
31358: PUSH
31359: LD_EXP 67
31363: PPUSH
31364: LD_VAR 0 1
31368: PUSH
31369: LD_EXP 67
31373: PUSH
31374: LD_VAR 0 1
31378: ARRAY
31379: PUSH
31380: LD_INT 1
31382: PLUS
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PPUSH
31388: LD_VAR 0 9
31392: PPUSH
31393: CALL 45058 0 3
31397: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
31398: LD_ADDR_EXP 66
31402: PUSH
31403: LD_EXP 66
31407: PPUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: LD_EXP 66
31417: PUSH
31418: LD_VAR 0 1
31422: ARRAY
31423: PUSH
31424: LD_VAR 0 9
31428: DIFF
31429: PPUSH
31430: CALL_OW 1
31434: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
31435: LD_VAR 0 3
31439: PPUSH
31440: LD_EXP 67
31444: PUSH
31445: LD_VAR 0 1
31449: ARRAY
31450: PUSH
31451: LD_EXP 67
31455: PUSH
31456: LD_VAR 0 1
31460: ARRAY
31461: ARRAY
31462: PPUSH
31463: CALL_OW 120
// end ; exit ;
31467: GO 31788
// end ; if tmp > 1 then
31469: LD_VAR 0 8
31473: PUSH
31474: LD_INT 1
31476: GREATER
31477: IFFALSE 31581
// for i = 2 to tmp do
31479: LD_ADDR_VAR 0 6
31483: PUSH
31484: DOUBLE
31485: LD_INT 2
31487: DEC
31488: ST_TO_ADDR
31489: LD_VAR 0 8
31493: PUSH
31494: FOR_TO
31495: IFFALSE 31579
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
31497: LD_VAR 0 8
31501: PUSH
31502: LD_VAR 0 6
31506: ARRAY
31507: PPUSH
31508: CALL_OW 461
31512: PUSH
31513: LD_INT 6
31515: EQUAL
31516: IFFALSE 31577
// begin x := tmp [ i ] ;
31518: LD_ADDR_VAR 0 9
31522: PUSH
31523: LD_VAR 0 8
31527: PUSH
31528: LD_VAR 0 6
31532: ARRAY
31533: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
31534: LD_ADDR_VAR 0 8
31538: PUSH
31539: LD_VAR 0 8
31543: PPUSH
31544: LD_VAR 0 6
31548: PPUSH
31549: CALL_OW 3
31553: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
31554: LD_ADDR_VAR 0 8
31558: PUSH
31559: LD_VAR 0 8
31563: PPUSH
31564: LD_INT 1
31566: PPUSH
31567: LD_VAR 0 9
31571: PPUSH
31572: CALL_OW 2
31576: ST_TO_ADDR
// end ;
31577: GO 31494
31579: POP
31580: POP
// for i in tmp do
31581: LD_ADDR_VAR 0 6
31585: PUSH
31586: LD_VAR 0 8
31590: PUSH
31591: FOR_IN
31592: IFFALSE 31661
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
31594: LD_VAR 0 6
31598: PPUSH
31599: CALL_OW 313
31603: PUSH
31604: LD_INT 6
31606: LESS
31607: PUSH
31608: LD_VAR 0 6
31612: PPUSH
31613: CALL_OW 266
31617: PUSH
31618: LD_INT 31
31620: PUSH
31621: LD_INT 32
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: IN
31628: NOT
31629: AND
31630: PUSH
31631: LD_VAR 0 6
31635: PPUSH
31636: CALL_OW 313
31640: PUSH
31641: LD_INT 0
31643: EQUAL
31644: OR
31645: IFFALSE 31659
// begin j := i ;
31647: LD_ADDR_VAR 0 7
31651: PUSH
31652: LD_VAR 0 6
31656: ST_TO_ADDR
// break ;
31657: GO 31661
// end ; end ;
31659: GO 31591
31661: POP
31662: POP
// if j then
31663: LD_VAR 0 7
31667: IFFALSE 31685
// ComEnterUnit ( unit , j ) else
31669: LD_VAR 0 3
31673: PPUSH
31674: LD_VAR 0 7
31678: PPUSH
31679: CALL_OW 120
31683: GO 31788
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31685: LD_ADDR_VAR 0 10
31689: PUSH
31690: LD_VAR 0 2
31694: PPUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 30
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 30
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: PPUSH
31723: CALL_OW 72
31727: ST_TO_ADDR
// if depot then
31728: LD_VAR 0 10
31732: IFFALSE 31788
// begin depot := NearestUnitToUnit ( depot , unit ) ;
31734: LD_ADDR_VAR 0 10
31738: PUSH
31739: LD_VAR 0 10
31743: PPUSH
31744: LD_VAR 0 3
31748: PPUSH
31749: CALL_OW 74
31753: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
31754: LD_VAR 0 3
31758: PPUSH
31759: LD_VAR 0 10
31763: PPUSH
31764: CALL_OW 296
31768: PUSH
31769: LD_INT 10
31771: GREATER
31772: IFFALSE 31788
// ComStandNearbyBuilding ( unit , depot ) ;
31774: LD_VAR 0 3
31778: PPUSH
31779: LD_VAR 0 10
31783: PPUSH
31784: CALL 39300 0 2
// end ; end ; end ;
31788: LD_VAR 0 5
31792: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
31793: LD_INT 0
31795: PPUSH
31796: PPUSH
31797: PPUSH
31798: PPUSH
// if not mc_bases then
31799: LD_EXP 57
31803: NOT
31804: IFFALSE 31808
// exit ;
31806: GO 32047
// for i = 1 to mc_bases do
31808: LD_ADDR_VAR 0 2
31812: PUSH
31813: DOUBLE
31814: LD_INT 1
31816: DEC
31817: ST_TO_ADDR
31818: LD_EXP 57
31822: PUSH
31823: FOR_TO
31824: IFFALSE 32045
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
31826: LD_ADDR_VAR 0 4
31830: PUSH
31831: LD_EXP 57
31835: PUSH
31836: LD_VAR 0 2
31840: ARRAY
31841: PPUSH
31842: LD_INT 21
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PPUSH
31852: CALL_OW 72
31856: PUSH
31857: LD_EXP 86
31861: PUSH
31862: LD_VAR 0 2
31866: ARRAY
31867: UNION
31868: ST_TO_ADDR
// if not tmp then
31869: LD_VAR 0 4
31873: NOT
31874: IFFALSE 31878
// continue ;
31876: GO 31823
// for j in tmp do
31878: LD_ADDR_VAR 0 3
31882: PUSH
31883: LD_VAR 0 4
31887: PUSH
31888: FOR_IN
31889: IFFALSE 32041
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
31891: LD_VAR 0 3
31895: PPUSH
31896: CALL_OW 110
31900: NOT
31901: PUSH
31902: LD_VAR 0 3
31906: PPUSH
31907: CALL_OW 314
31911: NOT
31912: AND
31913: PUSH
31914: LD_VAR 0 3
31918: PPUSH
31919: CALL_OW 311
31923: NOT
31924: AND
31925: PUSH
31926: LD_VAR 0 3
31930: PPUSH
31931: CALL_OW 310
31935: NOT
31936: AND
31937: PUSH
31938: LD_VAR 0 3
31942: PUSH
31943: LD_EXP 60
31947: PUSH
31948: LD_VAR 0 2
31952: ARRAY
31953: PUSH
31954: LD_INT 1
31956: ARRAY
31957: IN
31958: NOT
31959: AND
31960: PUSH
31961: LD_VAR 0 3
31965: PUSH
31966: LD_EXP 60
31970: PUSH
31971: LD_VAR 0 2
31975: ARRAY
31976: PUSH
31977: LD_INT 2
31979: ARRAY
31980: IN
31981: NOT
31982: AND
31983: PUSH
31984: LD_VAR 0 3
31988: PUSH
31989: LD_EXP 69
31993: PUSH
31994: LD_VAR 0 2
31998: ARRAY
31999: IN
32000: NOT
32001: AND
32002: IFFALSE 32039
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_EXP 57
32013: PUSH
32014: LD_VAR 0 2
32018: ARRAY
32019: PPUSH
32020: LD_VAR 0 3
32024: PPUSH
32025: LD_VAR 0 3
32029: PPUSH
32030: CALL_OW 257
32034: PPUSH
32035: CALL 30811 0 4
// end ;
32039: GO 31888
32041: POP
32042: POP
// end ;
32043: GO 31823
32045: POP
32046: POP
// end ;
32047: LD_VAR 0 1
32051: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
32052: LD_INT 0
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
// if not mc_bases [ base ] then
32060: LD_EXP 57
32064: PUSH
32065: LD_VAR 0 1
32069: ARRAY
32070: NOT
32071: IFFALSE 32075
// exit ;
32073: GO 32257
// tmp := [ ] ;
32075: LD_ADDR_VAR 0 6
32079: PUSH
32080: EMPTY
32081: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
32082: LD_ADDR_VAR 0 7
32086: PUSH
32087: LD_VAR 0 3
32091: PPUSH
32092: LD_INT 0
32094: PPUSH
32095: CALL_OW 517
32099: ST_TO_ADDR
// if not list then
32100: LD_VAR 0 7
32104: NOT
32105: IFFALSE 32109
// exit ;
32107: GO 32257
// for i = 1 to amount do
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: DOUBLE
32115: LD_INT 1
32117: DEC
32118: ST_TO_ADDR
32119: LD_VAR 0 2
32123: PUSH
32124: FOR_TO
32125: IFFALSE 32205
// begin x := rand ( 1 , list [ 1 ] ) ;
32127: LD_ADDR_VAR 0 8
32131: PUSH
32132: LD_INT 1
32134: PPUSH
32135: LD_VAR 0 7
32139: PUSH
32140: LD_INT 1
32142: ARRAY
32143: PPUSH
32144: CALL_OW 12
32148: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
32149: LD_ADDR_VAR 0 6
32153: PUSH
32154: LD_VAR 0 6
32158: PPUSH
32159: LD_VAR 0 5
32163: PPUSH
32164: LD_VAR 0 7
32168: PUSH
32169: LD_INT 1
32171: ARRAY
32172: PUSH
32173: LD_VAR 0 8
32177: ARRAY
32178: PUSH
32179: LD_VAR 0 7
32183: PUSH
32184: LD_INT 2
32186: ARRAY
32187: PUSH
32188: LD_VAR 0 8
32192: ARRAY
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 1
32202: ST_TO_ADDR
// end ;
32203: GO 32124
32205: POP
32206: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
32207: LD_ADDR_EXP 70
32211: PUSH
32212: LD_EXP 70
32216: PPUSH
32217: LD_VAR 0 1
32221: PPUSH
32222: LD_VAR 0 6
32226: PPUSH
32227: CALL_OW 1
32231: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
32232: LD_ADDR_EXP 72
32236: PUSH
32237: LD_EXP 72
32241: PPUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: LD_VAR 0 3
32251: PPUSH
32252: CALL_OW 1
32256: ST_TO_ADDR
// end ;
32257: LD_VAR 0 4
32261: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
32262: LD_INT 0
32264: PPUSH
// if not mc_bases [ base ] then
32265: LD_EXP 57
32269: PUSH
32270: LD_VAR 0 1
32274: ARRAY
32275: NOT
32276: IFFALSE 32280
// exit ;
32278: GO 32305
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
32280: LD_ADDR_EXP 62
32284: PUSH
32285: LD_EXP 62
32289: PPUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: CALL_OW 1
32304: ST_TO_ADDR
// end ;
32305: LD_VAR 0 3
32309: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
32310: LD_INT 0
32312: PPUSH
// if not mc_bases [ base ] then
32313: LD_EXP 57
32317: PUSH
32318: LD_VAR 0 1
32322: ARRAY
32323: NOT
32324: IFFALSE 32328
// exit ;
32326: GO 32384
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
32328: LD_ADDR_EXP 62
32332: PUSH
32333: LD_EXP 62
32337: PPUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: LD_EXP 62
32347: PUSH
32348: LD_VAR 0 1
32352: ARRAY
32353: PPUSH
32354: LD_EXP 62
32358: PUSH
32359: LD_VAR 0 1
32363: ARRAY
32364: PUSH
32365: LD_INT 1
32367: PLUS
32368: PPUSH
32369: LD_VAR 0 2
32373: PPUSH
32374: CALL_OW 2
32378: PPUSH
32379: CALL_OW 1
32383: ST_TO_ADDR
// end ;
32384: LD_VAR 0 3
32388: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
32389: LD_INT 0
32391: PPUSH
// if not mc_bases [ base ] then
32392: LD_EXP 57
32396: PUSH
32397: LD_VAR 0 1
32401: ARRAY
32402: NOT
32403: IFFALSE 32407
// exit ;
32405: GO 32432
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
32407: LD_ADDR_EXP 78
32411: PUSH
32412: LD_EXP 78
32416: PPUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 2
32426: PPUSH
32427: CALL_OW 1
32431: ST_TO_ADDR
// end ;
32432: LD_VAR 0 3
32436: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
32437: LD_INT 0
32439: PPUSH
// if not mc_bases [ base ] then
32440: LD_EXP 57
32444: PUSH
32445: LD_VAR 0 1
32449: ARRAY
32450: NOT
32451: IFFALSE 32455
// exit ;
32453: GO 32495
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
32455: LD_ADDR_EXP 78
32459: PUSH
32460: LD_EXP 78
32464: PPUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_EXP 78
32474: PUSH
32475: LD_VAR 0 1
32479: ARRAY
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: EMPTY
32487: LIST
32488: ADD
32489: PPUSH
32490: CALL_OW 1
32494: ST_TO_ADDR
// end ;
32495: LD_VAR 0 3
32499: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
32500: LD_INT 0
32502: PPUSH
// if not mc_bases [ base ] then
32503: LD_EXP 57
32507: PUSH
32508: LD_VAR 0 1
32512: ARRAY
32513: NOT
32514: IFFALSE 32518
// exit ;
32516: GO 32630
// mc_defender := Replace ( mc_defender , base , deflist ) ;
32518: LD_ADDR_EXP 79
32522: PUSH
32523: LD_EXP 79
32527: PPUSH
32528: LD_VAR 0 1
32532: PPUSH
32533: LD_VAR 0 2
32537: PPUSH
32538: CALL_OW 1
32542: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
32543: LD_ADDR_EXP 68
32547: PUSH
32548: LD_EXP 68
32552: PPUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 0
32565: PLUS
32566: PPUSH
32567: CALL_OW 1
32571: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
32572: LD_ADDR_EXP 76
32576: PUSH
32577: LD_EXP 76
32581: PPUSH
32582: LD_VAR 0 1
32586: PPUSH
32587: LD_EXP 76
32591: PUSH
32592: LD_VAR 0 1
32596: ARRAY
32597: PUSH
32598: LD_EXP 79
32602: PUSH
32603: LD_VAR 0 1
32607: ARRAY
32608: PPUSH
32609: LD_INT 21
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PPUSH
32619: CALL_OW 72
32623: UNION
32624: PPUSH
32625: CALL_OW 1
32629: ST_TO_ADDR
// end ;
32630: LD_VAR 0 3
32634: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
32635: LD_INT 0
32637: PPUSH
// if not mc_bases [ base ] then
32638: LD_EXP 57
32642: PUSH
32643: LD_VAR 0 1
32647: ARRAY
32648: NOT
32649: IFFALSE 32653
// exit ;
32651: GO 32678
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
32653: LD_ADDR_EXP 68
32657: PUSH
32658: LD_EXP 68
32662: PPUSH
32663: LD_VAR 0 1
32667: PPUSH
32668: LD_VAR 0 2
32672: PPUSH
32673: CALL_OW 1
32677: ST_TO_ADDR
// end ;
32678: LD_VAR 0 3
32682: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
32683: LD_INT 0
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
// if not mc_bases [ base ] then
32689: LD_EXP 57
32693: PUSH
32694: LD_VAR 0 1
32698: ARRAY
32699: NOT
32700: IFFALSE 32704
// exit ;
32702: GO 32769
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
32704: LD_ADDR_EXP 77
32708: PUSH
32709: LD_EXP 77
32713: PPUSH
32714: LD_VAR 0 1
32718: PUSH
32719: LD_EXP 77
32723: PUSH
32724: LD_VAR 0 1
32728: ARRAY
32729: PUSH
32730: LD_INT 1
32732: PLUS
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PPUSH
32738: LD_VAR 0 1
32742: PUSH
32743: LD_VAR 0 2
32747: PUSH
32748: LD_VAR 0 3
32752: PUSH
32753: LD_VAR 0 4
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: PPUSH
32764: CALL 45058 0 3
32768: ST_TO_ADDR
// end ;
32769: LD_VAR 0 5
32773: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
32774: LD_INT 0
32776: PPUSH
// if not mc_bases [ base ] then
32777: LD_EXP 57
32781: PUSH
32782: LD_VAR 0 1
32786: ARRAY
32787: NOT
32788: IFFALSE 32792
// exit ;
32790: GO 32817
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
32792: LD_ADDR_EXP 93
32796: PUSH
32797: LD_EXP 93
32801: PPUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: LD_VAR 0 2
32811: PPUSH
32812: CALL_OW 1
32816: ST_TO_ADDR
// end ;
32817: LD_VAR 0 3
32821: RET
// export function MC_GetMinesField ( base ) ; begin
32822: LD_INT 0
32824: PPUSH
// result := mc_mines [ base ] ;
32825: LD_ADDR_VAR 0 2
32829: PUSH
32830: LD_EXP 70
32834: PUSH
32835: LD_VAR 0 1
32839: ARRAY
32840: ST_TO_ADDR
// end ;
32841: LD_VAR 0 2
32845: RET
// export function MC_GetProduceList ( base ) ; begin
32846: LD_INT 0
32848: PPUSH
// result := mc_produce [ base ] ;
32849: LD_ADDR_VAR 0 2
32853: PUSH
32854: LD_EXP 78
32858: PUSH
32859: LD_VAR 0 1
32863: ARRAY
32864: ST_TO_ADDR
// end ;
32865: LD_VAR 0 2
32869: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
// if not mc_bases then
32874: LD_EXP 57
32878: NOT
32879: IFFALSE 32883
// exit ;
32881: GO 32948
// if mc_bases [ base ] then
32883: LD_EXP 57
32887: PUSH
32888: LD_VAR 0 1
32892: ARRAY
32893: IFFALSE 32948
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_EXP 57
32904: PUSH
32905: LD_VAR 0 1
32909: ARRAY
32910: PPUSH
32911: LD_INT 30
32913: PUSH
32914: LD_VAR 0 2
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 72
32927: ST_TO_ADDR
// if result then
32928: LD_VAR 0 3
32932: IFFALSE 32948
// result := result [ 1 ] ;
32934: LD_ADDR_VAR 0 3
32938: PUSH
32939: LD_VAR 0 3
32943: PUSH
32944: LD_INT 1
32946: ARRAY
32947: ST_TO_ADDR
// end ; end ;
32948: LD_VAR 0 3
32952: RET
// export function MC_SetTame ( base , area ) ; begin
32953: LD_INT 0
32955: PPUSH
// if not mc_bases or not base then
32956: LD_EXP 57
32960: NOT
32961: PUSH
32962: LD_VAR 0 1
32966: NOT
32967: OR
32968: IFFALSE 32972
// exit ;
32970: GO 32997
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
32972: LD_ADDR_EXP 85
32976: PUSH
32977: LD_EXP 85
32981: PPUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: LD_VAR 0 2
32991: PPUSH
32992: CALL_OW 1
32996: ST_TO_ADDR
// end ;
32997: LD_VAR 0 3
33001: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
33002: LD_INT 0
33004: PPUSH
33005: PPUSH
// if not mc_bases or not base then
33006: LD_EXP 57
33010: NOT
33011: PUSH
33012: LD_VAR 0 1
33016: NOT
33017: OR
33018: IFFALSE 33022
// exit ;
33020: GO 33124
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
33022: LD_ADDR_VAR 0 4
33026: PUSH
33027: LD_EXP 57
33031: PUSH
33032: LD_VAR 0 1
33036: ARRAY
33037: PPUSH
33038: LD_INT 30
33040: PUSH
33041: LD_VAR 0 2
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PPUSH
33050: CALL_OW 72
33054: ST_TO_ADDR
// if not tmp then
33055: LD_VAR 0 4
33059: NOT
33060: IFFALSE 33064
// exit ;
33062: GO 33124
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
33064: LD_ADDR_EXP 89
33068: PUSH
33069: LD_EXP 89
33073: PPUSH
33074: LD_VAR 0 1
33078: PPUSH
33079: LD_EXP 89
33083: PUSH
33084: LD_VAR 0 1
33088: ARRAY
33089: PPUSH
33090: LD_EXP 89
33094: PUSH
33095: LD_VAR 0 1
33099: ARRAY
33100: PUSH
33101: LD_INT 1
33103: PLUS
33104: PPUSH
33105: LD_VAR 0 4
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PPUSH
33114: CALL_OW 2
33118: PPUSH
33119: CALL_OW 1
33123: ST_TO_ADDR
// end ;
33124: LD_VAR 0 3
33128: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
33129: LD_INT 0
33131: PPUSH
33132: PPUSH
// if not mc_bases or not base or not kinds then
33133: LD_EXP 57
33137: NOT
33138: PUSH
33139: LD_VAR 0 1
33143: NOT
33144: OR
33145: PUSH
33146: LD_VAR 0 2
33150: NOT
33151: OR
33152: IFFALSE 33156
// exit ;
33154: GO 33217
// for i in kinds do
33156: LD_ADDR_VAR 0 4
33160: PUSH
33161: LD_VAR 0 2
33165: PUSH
33166: FOR_IN
33167: IFFALSE 33215
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
33169: LD_ADDR_EXP 91
33173: PUSH
33174: LD_EXP 91
33178: PPUSH
33179: LD_VAR 0 1
33183: PUSH
33184: LD_EXP 91
33188: PUSH
33189: LD_VAR 0 1
33193: ARRAY
33194: PUSH
33195: LD_INT 1
33197: PLUS
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PPUSH
33203: LD_VAR 0 4
33207: PPUSH
33208: CALL 45058 0 3
33212: ST_TO_ADDR
33213: GO 33166
33215: POP
33216: POP
// end ;
33217: LD_VAR 0 3
33221: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
33222: LD_INT 0
33224: PPUSH
// if not mc_bases or not base or not areas then
33225: LD_EXP 57
33229: NOT
33230: PUSH
33231: LD_VAR 0 1
33235: NOT
33236: OR
33237: PUSH
33238: LD_VAR 0 2
33242: NOT
33243: OR
33244: IFFALSE 33248
// exit ;
33246: GO 33273
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
33248: LD_ADDR_EXP 75
33252: PUSH
33253: LD_EXP 75
33257: PPUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 1
33272: ST_TO_ADDR
// end ;
33273: LD_VAR 0 3
33277: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
33278: LD_INT 0
33280: PPUSH
// if not mc_bases or not base then
33281: LD_EXP 57
33285: NOT
33286: PUSH
33287: LD_VAR 0 1
33291: NOT
33292: OR
33293: IFFALSE 33297
// exit ;
33295: GO 33331
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
33297: LD_ADDR_EXP 92
33301: PUSH
33302: LD_EXP 92
33306: PPUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: LD_VAR 0 2
33316: PUSH
33317: LD_VAR 0 3
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PPUSH
33326: CALL_OW 1
33330: ST_TO_ADDR
// end ;
33331: LD_VAR 0 4
33335: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
33340: PPUSH
// if not mc_bases or not base or not ext_list then
33341: LD_EXP 57
33345: NOT
33346: PUSH
33347: LD_VAR 0 1
33351: NOT
33352: OR
33353: PUSH
33354: LD_VAR 0 5
33358: NOT
33359: OR
33360: IFFALSE 33364
// exit ;
33362: GO 33537
// tmp := GetFacExtXYD ( x , y , d ) ;
33364: LD_ADDR_VAR 0 8
33368: PUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: LD_VAR 0 3
33378: PPUSH
33379: LD_VAR 0 4
33383: PPUSH
33384: CALL 77756 0 3
33388: ST_TO_ADDR
// if not tmp then
33389: LD_VAR 0 8
33393: NOT
33394: IFFALSE 33398
// exit ;
33396: GO 33537
// for i in tmp do
33398: LD_ADDR_VAR 0 7
33402: PUSH
33403: LD_VAR 0 8
33407: PUSH
33408: FOR_IN
33409: IFFALSE 33535
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
33411: LD_ADDR_EXP 62
33415: PUSH
33416: LD_EXP 62
33420: PPUSH
33421: LD_VAR 0 1
33425: PPUSH
33426: LD_EXP 62
33430: PUSH
33431: LD_VAR 0 1
33435: ARRAY
33436: PPUSH
33437: LD_EXP 62
33441: PUSH
33442: LD_VAR 0 1
33446: ARRAY
33447: PUSH
33448: LD_INT 1
33450: PLUS
33451: PPUSH
33452: LD_VAR 0 5
33456: PUSH
33457: LD_INT 1
33459: ARRAY
33460: PUSH
33461: LD_VAR 0 7
33465: PUSH
33466: LD_INT 1
33468: ARRAY
33469: PUSH
33470: LD_VAR 0 7
33474: PUSH
33475: LD_INT 2
33477: ARRAY
33478: PUSH
33479: LD_VAR 0 7
33483: PUSH
33484: LD_INT 3
33486: ARRAY
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: PPUSH
33494: CALL_OW 2
33498: PPUSH
33499: CALL_OW 1
33503: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
33504: LD_ADDR_VAR 0 5
33508: PUSH
33509: LD_VAR 0 5
33513: PPUSH
33514: LD_INT 1
33516: PPUSH
33517: CALL_OW 3
33521: ST_TO_ADDR
// if not ext_list then
33522: LD_VAR 0 5
33526: NOT
33527: IFFALSE 33533
// exit ;
33529: POP
33530: POP
33531: GO 33537
// end ;
33533: GO 33408
33535: POP
33536: POP
// end ;
33537: LD_VAR 0 6
33541: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
33542: LD_INT 0
33544: PPUSH
// if not mc_bases or not base or not weapon_list then
33545: LD_EXP 57
33549: NOT
33550: PUSH
33551: LD_VAR 0 1
33555: NOT
33556: OR
33557: PUSH
33558: LD_VAR 0 2
33562: NOT
33563: OR
33564: IFFALSE 33568
// exit ;
33566: GO 33593
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
33568: LD_ADDR_EXP 95
33572: PUSH
33573: LD_EXP 95
33577: PPUSH
33578: LD_VAR 0 1
33582: PPUSH
33583: LD_VAR 0 2
33587: PPUSH
33588: CALL_OW 1
33592: ST_TO_ADDR
// end ;
33593: LD_VAR 0 3
33597: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
33598: LD_INT 0
33600: PPUSH
// if not mc_bases or not base or not tech_list then
33601: LD_EXP 57
33605: NOT
33606: PUSH
33607: LD_VAR 0 1
33611: NOT
33612: OR
33613: PUSH
33614: LD_VAR 0 2
33618: NOT
33619: OR
33620: IFFALSE 33624
// exit ;
33622: GO 33649
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
33624: LD_ADDR_EXP 84
33628: PUSH
33629: LD_EXP 84
33633: PPUSH
33634: LD_VAR 0 1
33638: PPUSH
33639: LD_VAR 0 2
33643: PPUSH
33644: CALL_OW 1
33648: ST_TO_ADDR
// end ;
33649: LD_VAR 0 3
33653: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
33654: LD_INT 0
33656: PPUSH
// if not mc_bases or not parking_area or not base then
33657: LD_EXP 57
33661: NOT
33662: PUSH
33663: LD_VAR 0 2
33667: NOT
33668: OR
33669: PUSH
33670: LD_VAR 0 1
33674: NOT
33675: OR
33676: IFFALSE 33680
// exit ;
33678: GO 33705
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
33680: LD_ADDR_EXP 81
33684: PUSH
33685: LD_EXP 81
33689: PPUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: LD_VAR 0 2
33699: PPUSH
33700: CALL_OW 1
33704: ST_TO_ADDR
// end ;
33705: LD_VAR 0 3
33709: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
33710: LD_INT 0
33712: PPUSH
// if not mc_bases or not base or not scan_area then
33713: LD_EXP 57
33717: NOT
33718: PUSH
33719: LD_VAR 0 1
33723: NOT
33724: OR
33725: PUSH
33726: LD_VAR 0 2
33730: NOT
33731: OR
33732: IFFALSE 33736
// exit ;
33734: GO 33761
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
33736: LD_ADDR_EXP 82
33740: PUSH
33741: LD_EXP 82
33745: PPUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 2
33755: PPUSH
33756: CALL_OW 1
33760: ST_TO_ADDR
// end ; end_of_file
33761: LD_VAR 0 3
33765: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
33766: LD_INT 0
33768: PPUSH
33769: PPUSH
33770: PPUSH
// if not mc_bases then
33771: LD_EXP 57
33775: NOT
33776: IFFALSE 33780
// exit ;
33778: GO 33945
// for i = 1 to mc_bases do
33780: LD_ADDR_VAR 0 4
33784: PUSH
33785: DOUBLE
33786: LD_INT 1
33788: DEC
33789: ST_TO_ADDR
33790: LD_EXP 57
33794: PUSH
33795: FOR_TO
33796: IFFALSE 33943
// begin if sci in mc_bases [ i ] then
33798: LD_VAR 0 2
33802: PUSH
33803: LD_EXP 57
33807: PUSH
33808: LD_VAR 0 4
33812: ARRAY
33813: IN
33814: IFFALSE 33941
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
33816: LD_ADDR_EXP 86
33820: PUSH
33821: LD_EXP 86
33825: PPUSH
33826: LD_VAR 0 4
33830: PUSH
33831: LD_EXP 86
33835: PUSH
33836: LD_VAR 0 4
33840: ARRAY
33841: PUSH
33842: LD_INT 1
33844: PLUS
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PPUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: CALL 45058 0 3
33859: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
33860: LD_ADDR_VAR 0 5
33864: PUSH
33865: LD_EXP 57
33869: PUSH
33870: LD_VAR 0 4
33874: ARRAY
33875: PPUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 30
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 30
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 72
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 74
33918: ST_TO_ADDR
// if tmp then
33919: LD_VAR 0 5
33923: IFFALSE 33939
// ComStandNearbyBuilding ( ape , tmp ) ;
33925: LD_VAR 0 1
33929: PPUSH
33930: LD_VAR 0 5
33934: PPUSH
33935: CALL 39300 0 2
// break ;
33939: GO 33943
// end ; end ;
33941: GO 33795
33943: POP
33944: POP
// end ;
33945: LD_VAR 0 3
33949: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
33950: LD_INT 0
33952: PPUSH
33953: PPUSH
33954: PPUSH
// if not mc_bases then
33955: LD_EXP 57
33959: NOT
33960: IFFALSE 33964
// exit ;
33962: GO 34053
// for i = 1 to mc_bases do
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: DOUBLE
33970: LD_INT 1
33972: DEC
33973: ST_TO_ADDR
33974: LD_EXP 57
33978: PUSH
33979: FOR_TO
33980: IFFALSE 34051
// begin if building in mc_busy_turret_list [ i ] then
33982: LD_VAR 0 1
33986: PUSH
33987: LD_EXP 67
33991: PUSH
33992: LD_VAR 0 4
33996: ARRAY
33997: IN
33998: IFFALSE 34049
// begin tmp := mc_busy_turret_list [ i ] diff building ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_EXP 67
34009: PUSH
34010: LD_VAR 0 4
34014: ARRAY
34015: PUSH
34016: LD_VAR 0 1
34020: DIFF
34021: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
34022: LD_ADDR_EXP 67
34026: PUSH
34027: LD_EXP 67
34031: PPUSH
34032: LD_VAR 0 4
34036: PPUSH
34037: LD_VAR 0 5
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
// break ;
34047: GO 34051
// end ; end ;
34049: GO 33979
34051: POP
34052: POP
// end ;
34053: LD_VAR 0 3
34057: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
34058: LD_INT 0
34060: PPUSH
34061: PPUSH
34062: PPUSH
// if not mc_bases then
34063: LD_EXP 57
34067: NOT
34068: IFFALSE 34072
// exit ;
34070: GO 34271
// for i = 1 to mc_bases do
34072: LD_ADDR_VAR 0 5
34076: PUSH
34077: DOUBLE
34078: LD_INT 1
34080: DEC
34081: ST_TO_ADDR
34082: LD_EXP 57
34086: PUSH
34087: FOR_TO
34088: IFFALSE 34269
// if building in mc_bases [ i ] then
34090: LD_VAR 0 1
34094: PUSH
34095: LD_EXP 57
34099: PUSH
34100: LD_VAR 0 5
34104: ARRAY
34105: IN
34106: IFFALSE 34267
// begin tmp := mc_bases [ i ] diff building ;
34108: LD_ADDR_VAR 0 6
34112: PUSH
34113: LD_EXP 57
34117: PUSH
34118: LD_VAR 0 5
34122: ARRAY
34123: PUSH
34124: LD_VAR 0 1
34128: DIFF
34129: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
34130: LD_ADDR_EXP 57
34134: PUSH
34135: LD_EXP 57
34139: PPUSH
34140: LD_VAR 0 5
34144: PPUSH
34145: LD_VAR 0 6
34149: PPUSH
34150: CALL_OW 1
34154: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
34155: LD_VAR 0 1
34159: PUSH
34160: LD_EXP 65
34164: PUSH
34165: LD_VAR 0 5
34169: ARRAY
34170: IN
34171: IFFALSE 34210
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
34173: LD_ADDR_EXP 65
34177: PUSH
34178: LD_EXP 65
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: LD_EXP 65
34192: PUSH
34193: LD_VAR 0 5
34197: ARRAY
34198: PUSH
34199: LD_VAR 0 1
34203: DIFF
34204: PPUSH
34205: CALL_OW 1
34209: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
34210: LD_VAR 0 1
34214: PUSH
34215: LD_EXP 66
34219: PUSH
34220: LD_VAR 0 5
34224: ARRAY
34225: IN
34226: IFFALSE 34265
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
34228: LD_ADDR_EXP 66
34232: PUSH
34233: LD_EXP 66
34237: PPUSH
34238: LD_VAR 0 5
34242: PPUSH
34243: LD_EXP 66
34247: PUSH
34248: LD_VAR 0 5
34252: ARRAY
34253: PUSH
34254: LD_VAR 0 1
34258: DIFF
34259: PPUSH
34260: CALL_OW 1
34264: ST_TO_ADDR
// break ;
34265: GO 34269
// end ;
34267: GO 34087
34269: POP
34270: POP
// end ;
34271: LD_VAR 0 4
34275: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
34276: LD_INT 0
34278: PPUSH
34279: PPUSH
34280: PPUSH
// if not mc_bases or not side in mc_sides then
34281: LD_EXP 57
34285: NOT
34286: PUSH
34287: LD_VAR 0 3
34291: PUSH
34292: LD_EXP 83
34296: IN
34297: NOT
34298: OR
34299: IFFALSE 34303
// exit ;
34301: GO 34426
// for i = 1 to mc_vehicles do
34303: LD_ADDR_VAR 0 6
34307: PUSH
34308: DOUBLE
34309: LD_INT 1
34311: DEC
34312: ST_TO_ADDR
34313: LD_EXP 76
34317: PUSH
34318: FOR_TO
34319: IFFALSE 34424
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
34321: LD_VAR 0 2
34325: PUSH
34326: LD_EXP 76
34330: PUSH
34331: LD_VAR 0 6
34335: ARRAY
34336: IN
34337: PUSH
34338: LD_VAR 0 1
34342: PUSH
34343: LD_EXP 76
34347: PUSH
34348: LD_VAR 0 6
34352: ARRAY
34353: IN
34354: OR
34355: IFFALSE 34422
// begin tmp := mc_vehicles [ i ] diff old ;
34357: LD_ADDR_VAR 0 7
34361: PUSH
34362: LD_EXP 76
34366: PUSH
34367: LD_VAR 0 6
34371: ARRAY
34372: PUSH
34373: LD_VAR 0 2
34377: DIFF
34378: ST_TO_ADDR
// tmp := tmp diff new ;
34379: LD_ADDR_VAR 0 7
34383: PUSH
34384: LD_VAR 0 7
34388: PUSH
34389: LD_VAR 0 1
34393: DIFF
34394: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
34395: LD_ADDR_EXP 76
34399: PUSH
34400: LD_EXP 76
34404: PPUSH
34405: LD_VAR 0 6
34409: PPUSH
34410: LD_VAR 0 7
34414: PPUSH
34415: CALL_OW 1
34419: ST_TO_ADDR
// break ;
34420: GO 34424
// end ;
34422: GO 34318
34424: POP
34425: POP
// end ;
34426: LD_VAR 0 5
34430: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
// if not mc_bases then
34437: LD_EXP 57
34441: NOT
34442: IFFALSE 34446
// exit ;
34444: GO 34738
// side := GetSide ( vehicle ) ;
34446: LD_ADDR_VAR 0 5
34450: PUSH
34451: LD_VAR 0 1
34455: PPUSH
34456: CALL_OW 255
34460: ST_TO_ADDR
// for i = 1 to mc_bases do
34461: LD_ADDR_VAR 0 4
34465: PUSH
34466: DOUBLE
34467: LD_INT 1
34469: DEC
34470: ST_TO_ADDR
34471: LD_EXP 57
34475: PUSH
34476: FOR_TO
34477: IFFALSE 34736
// begin if factory in mc_bases [ i ] then
34479: LD_VAR 0 2
34483: PUSH
34484: LD_EXP 57
34488: PUSH
34489: LD_VAR 0 4
34493: ARRAY
34494: IN
34495: IFFALSE 34734
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
34497: LD_EXP 79
34501: PUSH
34502: LD_VAR 0 4
34506: ARRAY
34507: PUSH
34508: LD_EXP 68
34512: PUSH
34513: LD_VAR 0 4
34517: ARRAY
34518: LESS
34519: IFFALSE 34690
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
34521: LD_ADDR_EXP 79
34525: PUSH
34526: LD_EXP 79
34530: PPUSH
34531: LD_VAR 0 4
34535: PPUSH
34536: LD_EXP 79
34540: PUSH
34541: LD_VAR 0 4
34545: ARRAY
34546: PUSH
34547: LD_VAR 0 1
34551: ADD
34552: PPUSH
34553: CALL_OW 1
34557: ST_TO_ADDR
// if not mc_scan [ i ] then
34558: LD_EXP 80
34562: PUSH
34563: LD_VAR 0 4
34567: ARRAY
34568: NOT
34569: IFFALSE 34688
// begin if GetControl ( vehicle ) = control_remote then
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 263
34580: PUSH
34581: LD_INT 2
34583: EQUAL
34584: IFFALSE 34604
// repeat wait ( 0 0$1 ) ;
34586: LD_INT 35
34588: PPUSH
34589: CALL_OW 67
// until IsControledBy ( vehicle ) ;
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 312
34602: IFFALSE 34586
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
34604: LD_VAR 0 1
34608: PPUSH
34609: LD_EXP 81
34613: PUSH
34614: LD_VAR 0 4
34618: ARRAY
34619: PPUSH
34620: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
34624: LD_VAR 0 1
34628: PPUSH
34629: CALL_OW 263
34633: PUSH
34634: LD_INT 1
34636: NONEQUAL
34637: IFFALSE 34641
// break ;
34639: GO 34736
// repeat wait ( 0 0$1 ) ;
34641: LD_INT 35
34643: PPUSH
34644: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
34648: LD_VAR 0 1
34652: PPUSH
34653: LD_EXP 81
34657: PUSH
34658: LD_VAR 0 4
34662: ARRAY
34663: PPUSH
34664: CALL_OW 308
34668: IFFALSE 34641
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL_OW 311
34679: PPUSH
34680: CALL_OW 121
// exit ;
34684: POP
34685: POP
34686: GO 34738
// end ; end else
34688: GO 34734
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
34690: LD_ADDR_EXP 76
34694: PUSH
34695: LD_EXP 76
34699: PPUSH
34700: LD_VAR 0 4
34704: PUSH
34705: LD_EXP 76
34709: PUSH
34710: LD_VAR 0 4
34714: ARRAY
34715: PUSH
34716: LD_INT 1
34718: PLUS
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PPUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL 45058 0 3
34733: ST_TO_ADDR
// end ; end ;
34734: GO 34476
34736: POP
34737: POP
// end ;
34738: LD_VAR 0 3
34742: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
34743: LD_INT 0
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
// if not mc_bases then
34749: LD_EXP 57
34753: NOT
34754: IFFALSE 34758
// exit ;
34756: GO 35111
// repeat wait ( 0 0$1 ) ;
34758: LD_INT 35
34760: PPUSH
34761: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
34765: LD_VAR 0 2
34769: PPUSH
34770: LD_VAR 0 3
34774: PPUSH
34775: CALL_OW 284
34779: IFFALSE 34758
// if GetResourceTypeXY ( x , y ) = mat_artefact then
34781: LD_VAR 0 2
34785: PPUSH
34786: LD_VAR 0 3
34790: PPUSH
34791: CALL_OW 283
34795: PUSH
34796: LD_INT 4
34798: EQUAL
34799: IFFALSE 34803
// exit ;
34801: GO 35111
// for i = 1 to mc_bases do
34803: LD_ADDR_VAR 0 7
34807: PUSH
34808: DOUBLE
34809: LD_INT 1
34811: DEC
34812: ST_TO_ADDR
34813: LD_EXP 57
34817: PUSH
34818: FOR_TO
34819: IFFALSE 35109
// begin if mc_crates_area [ i ] then
34821: LD_EXP 75
34825: PUSH
34826: LD_VAR 0 7
34830: ARRAY
34831: IFFALSE 34942
// for j in mc_crates_area [ i ] do
34833: LD_ADDR_VAR 0 8
34837: PUSH
34838: LD_EXP 75
34842: PUSH
34843: LD_VAR 0 7
34847: ARRAY
34848: PUSH
34849: FOR_IN
34850: IFFALSE 34940
// if InArea ( x , y , j ) then
34852: LD_VAR 0 2
34856: PPUSH
34857: LD_VAR 0 3
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: CALL_OW 309
34871: IFFALSE 34938
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34873: LD_ADDR_EXP 73
34877: PUSH
34878: LD_EXP 73
34882: PPUSH
34883: LD_VAR 0 7
34887: PUSH
34888: LD_EXP 73
34892: PUSH
34893: LD_VAR 0 7
34897: ARRAY
34898: PUSH
34899: LD_INT 1
34901: PLUS
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PPUSH
34907: LD_VAR 0 4
34911: PUSH
34912: LD_VAR 0 2
34916: PUSH
34917: LD_VAR 0 3
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: PPUSH
34927: CALL 45058 0 3
34931: ST_TO_ADDR
// exit ;
34932: POP
34933: POP
34934: POP
34935: POP
34936: GO 35111
// end ;
34938: GO 34849
34940: POP
34941: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34942: LD_ADDR_VAR 0 9
34946: PUSH
34947: LD_EXP 57
34951: PUSH
34952: LD_VAR 0 7
34956: ARRAY
34957: PPUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 30
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 30
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 72
34990: ST_TO_ADDR
// if not depot then
34991: LD_VAR 0 9
34995: NOT
34996: IFFALSE 35000
// continue ;
34998: GO 34818
// for j in depot do
35000: LD_ADDR_VAR 0 8
35004: PUSH
35005: LD_VAR 0 9
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35105
// if GetDistUnitXY ( j , x , y ) < 30 then
35013: LD_VAR 0 8
35017: PPUSH
35018: LD_VAR 0 2
35022: PPUSH
35023: LD_VAR 0 3
35027: PPUSH
35028: CALL_OW 297
35032: PUSH
35033: LD_INT 30
35035: LESS
35036: IFFALSE 35103
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
35038: LD_ADDR_EXP 73
35042: PUSH
35043: LD_EXP 73
35047: PPUSH
35048: LD_VAR 0 7
35052: PUSH
35053: LD_EXP 73
35057: PUSH
35058: LD_VAR 0 7
35062: ARRAY
35063: PUSH
35064: LD_INT 1
35066: PLUS
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PPUSH
35072: LD_VAR 0 4
35076: PUSH
35077: LD_VAR 0 2
35081: PUSH
35082: LD_VAR 0 3
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: PPUSH
35092: CALL 45058 0 3
35096: ST_TO_ADDR
// exit ;
35097: POP
35098: POP
35099: POP
35100: POP
35101: GO 35111
// end ;
35103: GO 35010
35105: POP
35106: POP
// end ;
35107: GO 34818
35109: POP
35110: POP
// end ;
35111: LD_VAR 0 6
35115: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
35116: LD_INT 0
35118: PPUSH
35119: PPUSH
35120: PPUSH
35121: PPUSH
// side := GetSide ( lab ) ;
35122: LD_ADDR_VAR 0 4
35126: PUSH
35127: LD_VAR 0 2
35131: PPUSH
35132: CALL_OW 255
35136: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
35137: LD_VAR 0 4
35141: PUSH
35142: LD_EXP 83
35146: IN
35147: NOT
35148: PUSH
35149: LD_EXP 84
35153: NOT
35154: OR
35155: PUSH
35156: LD_EXP 57
35160: NOT
35161: OR
35162: IFFALSE 35166
// exit ;
35164: GO 35399
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
35166: LD_ADDR_EXP 84
35170: PUSH
35171: LD_EXP 84
35175: PPUSH
35176: LD_VAR 0 4
35180: PPUSH
35181: LD_EXP 84
35185: PUSH
35186: LD_VAR 0 4
35190: ARRAY
35191: PUSH
35192: LD_VAR 0 1
35196: DIFF
35197: PPUSH
35198: CALL_OW 1
35202: ST_TO_ADDR
// for i = 1 to mc_bases do
35203: LD_ADDR_VAR 0 5
35207: PUSH
35208: DOUBLE
35209: LD_INT 1
35211: DEC
35212: ST_TO_ADDR
35213: LD_EXP 57
35217: PUSH
35218: FOR_TO
35219: IFFALSE 35397
// begin if lab in mc_bases [ i ] then
35221: LD_VAR 0 2
35225: PUSH
35226: LD_EXP 57
35230: PUSH
35231: LD_VAR 0 5
35235: ARRAY
35236: IN
35237: IFFALSE 35395
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
35239: LD_VAR 0 1
35243: PUSH
35244: LD_INT 11
35246: PUSH
35247: LD_INT 4
35249: PUSH
35250: LD_INT 3
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: IN
35262: PUSH
35263: LD_EXP 87
35267: PUSH
35268: LD_VAR 0 5
35272: ARRAY
35273: AND
35274: IFFALSE 35395
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
35276: LD_ADDR_VAR 0 6
35280: PUSH
35281: LD_EXP 87
35285: PUSH
35286: LD_VAR 0 5
35290: ARRAY
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35296: LD_ADDR_EXP 87
35300: PUSH
35301: LD_EXP 87
35305: PPUSH
35306: LD_VAR 0 5
35310: PPUSH
35311: EMPTY
35312: PPUSH
35313: CALL_OW 1
35317: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
35318: LD_VAR 0 6
35322: PPUSH
35323: LD_INT 0
35325: PPUSH
35326: CALL_OW 109
// ComExitBuilding ( tmp ) ;
35330: LD_VAR 0 6
35334: PPUSH
35335: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
35339: LD_ADDR_EXP 86
35343: PUSH
35344: LD_EXP 86
35348: PPUSH
35349: LD_VAR 0 5
35353: PPUSH
35354: LD_EXP 86
35358: PUSH
35359: LD_VAR 0 5
35363: ARRAY
35364: PPUSH
35365: LD_INT 1
35367: PPUSH
35368: LD_VAR 0 6
35372: PPUSH
35373: CALL_OW 2
35377: PPUSH
35378: CALL_OW 1
35382: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
35383: LD_VAR 0 5
35387: PPUSH
35388: LD_INT 112
35390: PPUSH
35391: CALL 19338 0 2
// end ; end ; end ;
35395: GO 35218
35397: POP
35398: POP
// end ;
35399: LD_VAR 0 3
35403: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
35404: LD_INT 0
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
// if not mc_bases then
35414: LD_EXP 57
35418: NOT
35419: IFFALSE 35423
// exit ;
35421: GO 36348
// for i = 1 to mc_bases do
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: DOUBLE
35429: LD_INT 1
35431: DEC
35432: ST_TO_ADDR
35433: LD_EXP 57
35437: PUSH
35438: FOR_TO
35439: IFFALSE 36346
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
35441: LD_VAR 0 1
35445: PUSH
35446: LD_EXP 57
35450: PUSH
35451: LD_VAR 0 3
35455: ARRAY
35456: IN
35457: PUSH
35458: LD_VAR 0 1
35462: PUSH
35463: LD_EXP 64
35467: PUSH
35468: LD_VAR 0 3
35472: ARRAY
35473: IN
35474: OR
35475: PUSH
35476: LD_VAR 0 1
35480: PUSH
35481: LD_EXP 76
35485: PUSH
35486: LD_VAR 0 3
35490: ARRAY
35491: IN
35492: OR
35493: PUSH
35494: LD_VAR 0 1
35498: PUSH
35499: LD_EXP 86
35503: PUSH
35504: LD_VAR 0 3
35508: ARRAY
35509: IN
35510: OR
35511: PUSH
35512: LD_VAR 0 1
35516: PUSH
35517: LD_EXP 87
35521: PUSH
35522: LD_VAR 0 3
35526: ARRAY
35527: IN
35528: OR
35529: IFFALSE 36344
// begin if un in mc_ape [ i ] then
35531: LD_VAR 0 1
35535: PUSH
35536: LD_EXP 86
35540: PUSH
35541: LD_VAR 0 3
35545: ARRAY
35546: IN
35547: IFFALSE 35586
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
35549: LD_ADDR_EXP 86
35553: PUSH
35554: LD_EXP 86
35558: PPUSH
35559: LD_VAR 0 3
35563: PPUSH
35564: LD_EXP 86
35568: PUSH
35569: LD_VAR 0 3
35573: ARRAY
35574: PUSH
35575: LD_VAR 0 1
35579: DIFF
35580: PPUSH
35581: CALL_OW 1
35585: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
35586: LD_VAR 0 1
35590: PUSH
35591: LD_EXP 87
35595: PUSH
35596: LD_VAR 0 3
35600: ARRAY
35601: IN
35602: IFFALSE 35626
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35604: LD_ADDR_EXP 87
35608: PUSH
35609: LD_EXP 87
35613: PPUSH
35614: LD_VAR 0 3
35618: PPUSH
35619: EMPTY
35620: PPUSH
35621: CALL_OW 1
35625: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
35626: LD_VAR 0 1
35630: PPUSH
35631: CALL_OW 247
35635: PUSH
35636: LD_INT 2
35638: EQUAL
35639: PUSH
35640: LD_VAR 0 1
35644: PPUSH
35645: CALL_OW 110
35649: PUSH
35650: LD_INT 20
35652: EQUAL
35653: AND
35654: IFFALSE 35757
// begin fac := MC_GetBuilding ( i , b_factory ) ;
35656: LD_ADDR_VAR 0 8
35660: PUSH
35661: LD_VAR 0 3
35665: PPUSH
35666: LD_INT 3
35668: PPUSH
35669: CALL 32870 0 2
35673: ST_TO_ADDR
// if fac then
35674: LD_VAR 0 8
35678: IFFALSE 35757
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: LD_VAR 0 8
35689: PPUSH
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL_OW 265
35699: PPUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 262
35709: PPUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 263
35719: PPUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 264
35729: PPUSH
35730: CALL 42223 0 5
35734: ST_TO_ADDR
// if components then
35735: LD_VAR 0 9
35739: IFFALSE 35755
// MC_InsertProduceList ( i , components ) ;
35741: LD_VAR 0 3
35745: PPUSH
35746: LD_VAR 0 9
35750: PPUSH
35751: CALL 32437 0 2
// break ;
35755: GO 36346
// end ; end ; if GetType ( un ) = unit_building then
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 247
35766: PUSH
35767: LD_INT 3
35769: EQUAL
35770: IFFALSE 36067
// begin btype := GetBType ( un ) ;
35772: LD_ADDR_VAR 0 5
35776: PUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 266
35786: ST_TO_ADDR
// if btype = b_warehouse then
35787: LD_VAR 0 5
35791: PUSH
35792: LD_INT 1
35794: EQUAL
35795: IFFALSE 35813
// begin btype := b_depot ;
35797: LD_ADDR_VAR 0 5
35801: PUSH
35802: LD_INT 0
35804: ST_TO_ADDR
// pos := 1 ;
35805: LD_ADDR_VAR 0 6
35809: PUSH
35810: LD_INT 1
35812: ST_TO_ADDR
// end ; if btype = b_factory then
35813: LD_VAR 0 5
35817: PUSH
35818: LD_INT 3
35820: EQUAL
35821: IFFALSE 35839
// begin btype := b_workshop ;
35823: LD_ADDR_VAR 0 5
35827: PUSH
35828: LD_INT 2
35830: ST_TO_ADDR
// pos := 1 ;
35831: LD_ADDR_VAR 0 6
35835: PUSH
35836: LD_INT 1
35838: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
35839: LD_VAR 0 5
35843: PUSH
35844: LD_INT 7
35846: PUSH
35847: LD_INT 8
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: IN
35854: IFFALSE 35864
// btype := b_lab ;
35856: LD_ADDR_VAR 0 5
35860: PUSH
35861: LD_INT 6
35863: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
35864: LD_ADDR_EXP 62
35868: PUSH
35869: LD_EXP 62
35873: PPUSH
35874: LD_VAR 0 3
35878: PUSH
35879: LD_EXP 62
35883: PUSH
35884: LD_VAR 0 3
35888: ARRAY
35889: PUSH
35890: LD_INT 1
35892: PLUS
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: LD_VAR 0 5
35902: PUSH
35903: LD_VAR 0 1
35907: PPUSH
35908: CALL_OW 250
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 251
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 254
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: PPUSH
35939: CALL 45058 0 3
35943: ST_TO_ADDR
// if pos = 1 then
35944: LD_VAR 0 6
35948: PUSH
35949: LD_INT 1
35951: EQUAL
35952: IFFALSE 36067
// begin tmp := mc_build_list [ i ] ;
35954: LD_ADDR_VAR 0 7
35958: PUSH
35959: LD_EXP 62
35963: PUSH
35964: LD_VAR 0 3
35968: ARRAY
35969: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35970: LD_VAR 0 7
35974: PPUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 30
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 30
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 72
36007: IFFALSE 36017
// pos := 2 ;
36009: LD_ADDR_VAR 0 6
36013: PUSH
36014: LD_INT 2
36016: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
36017: LD_ADDR_VAR 0 7
36021: PUSH
36022: LD_VAR 0 7
36026: PPUSH
36027: LD_VAR 0 6
36031: PPUSH
36032: LD_VAR 0 7
36036: PPUSH
36037: CALL 44949 0 3
36041: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
36042: LD_ADDR_EXP 62
36046: PUSH
36047: LD_EXP 62
36051: PPUSH
36052: LD_VAR 0 3
36056: PPUSH
36057: LD_VAR 0 7
36061: PPUSH
36062: CALL_OW 1
36066: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
36067: LD_VAR 0 1
36071: PUSH
36072: LD_EXP 57
36076: PUSH
36077: LD_VAR 0 3
36081: ARRAY
36082: IN
36083: IFFALSE 36122
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
36085: LD_ADDR_EXP 57
36089: PUSH
36090: LD_EXP 57
36094: PPUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: LD_EXP 57
36104: PUSH
36105: LD_VAR 0 3
36109: ARRAY
36110: PUSH
36111: LD_VAR 0 1
36115: DIFF
36116: PPUSH
36117: CALL_OW 1
36121: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
36122: LD_VAR 0 1
36126: PUSH
36127: LD_EXP 64
36131: PUSH
36132: LD_VAR 0 3
36136: ARRAY
36137: IN
36138: IFFALSE 36177
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
36140: LD_ADDR_EXP 64
36144: PUSH
36145: LD_EXP 64
36149: PPUSH
36150: LD_VAR 0 3
36154: PPUSH
36155: LD_EXP 64
36159: PUSH
36160: LD_VAR 0 3
36164: ARRAY
36165: PUSH
36166: LD_VAR 0 1
36170: DIFF
36171: PPUSH
36172: CALL_OW 1
36176: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
36177: LD_VAR 0 1
36181: PUSH
36182: LD_EXP 76
36186: PUSH
36187: LD_VAR 0 3
36191: ARRAY
36192: IN
36193: IFFALSE 36232
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
36195: LD_ADDR_EXP 76
36199: PUSH
36200: LD_EXP 76
36204: PPUSH
36205: LD_VAR 0 3
36209: PPUSH
36210: LD_EXP 76
36214: PUSH
36215: LD_VAR 0 3
36219: ARRAY
36220: PUSH
36221: LD_VAR 0 1
36225: DIFF
36226: PPUSH
36227: CALL_OW 1
36231: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
36232: LD_VAR 0 1
36236: PUSH
36237: LD_EXP 66
36241: PUSH
36242: LD_VAR 0 3
36246: ARRAY
36247: IN
36248: IFFALSE 36287
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
36250: LD_ADDR_EXP 66
36254: PUSH
36255: LD_EXP 66
36259: PPUSH
36260: LD_VAR 0 3
36264: PPUSH
36265: LD_EXP 66
36269: PUSH
36270: LD_VAR 0 3
36274: ARRAY
36275: PUSH
36276: LD_VAR 0 1
36280: DIFF
36281: PPUSH
36282: CALL_OW 1
36286: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
36287: LD_VAR 0 1
36291: PUSH
36292: LD_EXP 65
36296: PUSH
36297: LD_VAR 0 3
36301: ARRAY
36302: IN
36303: IFFALSE 36342
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
36305: LD_ADDR_EXP 65
36309: PUSH
36310: LD_EXP 65
36314: PPUSH
36315: LD_VAR 0 3
36319: PPUSH
36320: LD_EXP 65
36324: PUSH
36325: LD_VAR 0 3
36329: ARRAY
36330: PUSH
36331: LD_VAR 0 1
36335: DIFF
36336: PPUSH
36337: CALL_OW 1
36341: ST_TO_ADDR
// end ; break ;
36342: GO 36346
// end ;
36344: GO 35438
36346: POP
36347: POP
// end ;
36348: LD_VAR 0 2
36352: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
36353: LD_INT 0
36355: PPUSH
36356: PPUSH
36357: PPUSH
// if not mc_bases then
36358: LD_EXP 57
36362: NOT
36363: IFFALSE 36367
// exit ;
36365: GO 36582
// for i = 1 to mc_bases do
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: DOUBLE
36373: LD_INT 1
36375: DEC
36376: ST_TO_ADDR
36377: LD_EXP 57
36381: PUSH
36382: FOR_TO
36383: IFFALSE 36580
// begin if building in mc_construct_list [ i ] then
36385: LD_VAR 0 1
36389: PUSH
36390: LD_EXP 64
36394: PUSH
36395: LD_VAR 0 3
36399: ARRAY
36400: IN
36401: IFFALSE 36578
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36403: LD_ADDR_EXP 64
36407: PUSH
36408: LD_EXP 64
36412: PPUSH
36413: LD_VAR 0 3
36417: PPUSH
36418: LD_EXP 64
36422: PUSH
36423: LD_VAR 0 3
36427: ARRAY
36428: PUSH
36429: LD_VAR 0 1
36433: DIFF
36434: PPUSH
36435: CALL_OW 1
36439: ST_TO_ADDR
// if building in mc_lab [ i ] then
36440: LD_VAR 0 1
36444: PUSH
36445: LD_EXP 90
36449: PUSH
36450: LD_VAR 0 3
36454: ARRAY
36455: IN
36456: IFFALSE 36511
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
36458: LD_ADDR_EXP 91
36462: PUSH
36463: LD_EXP 91
36467: PPUSH
36468: LD_VAR 0 3
36472: PPUSH
36473: LD_EXP 91
36477: PUSH
36478: LD_VAR 0 3
36482: ARRAY
36483: PPUSH
36484: LD_INT 1
36486: PPUSH
36487: LD_EXP 91
36491: PUSH
36492: LD_VAR 0 3
36496: ARRAY
36497: PPUSH
36498: LD_INT 0
36500: PPUSH
36501: CALL 44041 0 4
36505: PPUSH
36506: CALL_OW 1
36510: ST_TO_ADDR
// if not building in mc_bases [ i ] then
36511: LD_VAR 0 1
36515: PUSH
36516: LD_EXP 57
36520: PUSH
36521: LD_VAR 0 3
36525: ARRAY
36526: IN
36527: NOT
36528: IFFALSE 36574
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36530: LD_ADDR_EXP 57
36534: PUSH
36535: LD_EXP 57
36539: PPUSH
36540: LD_VAR 0 3
36544: PUSH
36545: LD_EXP 57
36549: PUSH
36550: LD_VAR 0 3
36554: ARRAY
36555: PUSH
36556: LD_INT 1
36558: PLUS
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PPUSH
36564: LD_VAR 0 1
36568: PPUSH
36569: CALL 45058 0 3
36573: ST_TO_ADDR
// exit ;
36574: POP
36575: POP
36576: GO 36582
// end ; end ;
36578: GO 36382
36580: POP
36581: POP
// end ;
36582: LD_VAR 0 2
36586: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
36587: LD_INT 0
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
// if not mc_bases then
36596: LD_EXP 57
36600: NOT
36601: IFFALSE 36605
// exit ;
36603: GO 37266
// for i = 1 to mc_bases do
36605: LD_ADDR_VAR 0 3
36609: PUSH
36610: DOUBLE
36611: LD_INT 1
36613: DEC
36614: ST_TO_ADDR
36615: LD_EXP 57
36619: PUSH
36620: FOR_TO
36621: IFFALSE 37264
// begin if building in mc_construct_list [ i ] then
36623: LD_VAR 0 1
36627: PUSH
36628: LD_EXP 64
36632: PUSH
36633: LD_VAR 0 3
36637: ARRAY
36638: IN
36639: IFFALSE 37262
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36641: LD_ADDR_EXP 64
36645: PUSH
36646: LD_EXP 64
36650: PPUSH
36651: LD_VAR 0 3
36655: PPUSH
36656: LD_EXP 64
36660: PUSH
36661: LD_VAR 0 3
36665: ARRAY
36666: PUSH
36667: LD_VAR 0 1
36671: DIFF
36672: PPUSH
36673: CALL_OW 1
36677: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36678: LD_ADDR_EXP 57
36682: PUSH
36683: LD_EXP 57
36687: PPUSH
36688: LD_VAR 0 3
36692: PUSH
36693: LD_EXP 57
36697: PUSH
36698: LD_VAR 0 3
36702: ARRAY
36703: PUSH
36704: LD_INT 1
36706: PLUS
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PPUSH
36712: LD_VAR 0 1
36716: PPUSH
36717: CALL 45058 0 3
36721: ST_TO_ADDR
// btype := GetBType ( building ) ;
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 266
36736: ST_TO_ADDR
// side := GetSide ( building ) ;
36737: LD_ADDR_VAR 0 8
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 255
36751: ST_TO_ADDR
// if btype = b_lab then
36752: LD_VAR 0 5
36756: PUSH
36757: LD_INT 6
36759: EQUAL
36760: IFFALSE 36810
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
36762: LD_ADDR_EXP 90
36766: PUSH
36767: LD_EXP 90
36771: PPUSH
36772: LD_VAR 0 3
36776: PUSH
36777: LD_EXP 90
36781: PUSH
36782: LD_VAR 0 3
36786: ARRAY
36787: PUSH
36788: LD_INT 1
36790: PLUS
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PPUSH
36796: LD_VAR 0 1
36800: PPUSH
36801: CALL 45058 0 3
36805: ST_TO_ADDR
// exit ;
36806: POP
36807: POP
36808: GO 37266
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
36810: LD_VAR 0 5
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 4
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: IN
36829: IFFALSE 36953
// begin if btype = b_armoury then
36831: LD_VAR 0 5
36835: PUSH
36836: LD_INT 4
36838: EQUAL
36839: IFFALSE 36849
// btype := b_barracks ;
36841: LD_ADDR_VAR 0 5
36845: PUSH
36846: LD_INT 5
36848: ST_TO_ADDR
// if btype = b_depot then
36849: LD_VAR 0 5
36853: PUSH
36854: LD_INT 0
36856: EQUAL
36857: IFFALSE 36867
// btype := b_warehouse ;
36859: LD_ADDR_VAR 0 5
36863: PUSH
36864: LD_INT 1
36866: ST_TO_ADDR
// if btype = b_workshop then
36867: LD_VAR 0 5
36871: PUSH
36872: LD_INT 2
36874: EQUAL
36875: IFFALSE 36885
// btype := b_factory ;
36877: LD_ADDR_VAR 0 5
36881: PUSH
36882: LD_INT 3
36884: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
36885: LD_VAR 0 5
36889: PPUSH
36890: LD_VAR 0 8
36894: PPUSH
36895: CALL_OW 323
36899: PUSH
36900: LD_INT 1
36902: EQUAL
36903: IFFALSE 36949
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
36905: LD_ADDR_EXP 89
36909: PUSH
36910: LD_EXP 89
36914: PPUSH
36915: LD_VAR 0 3
36919: PUSH
36920: LD_EXP 89
36924: PUSH
36925: LD_VAR 0 3
36929: ARRAY
36930: PUSH
36931: LD_INT 1
36933: PLUS
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PPUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL 45058 0 3
36948: ST_TO_ADDR
// exit ;
36949: POP
36950: POP
36951: GO 37266
// end ; if btype in [ b_bunker , b_turret ] then
36953: LD_VAR 0 5
36957: PUSH
36958: LD_INT 32
36960: PUSH
36961: LD_INT 33
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: IN
36968: IFFALSE 37258
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
36970: LD_ADDR_EXP 65
36974: PUSH
36975: LD_EXP 65
36979: PPUSH
36980: LD_VAR 0 3
36984: PUSH
36985: LD_EXP 65
36989: PUSH
36990: LD_VAR 0 3
36994: ARRAY
36995: PUSH
36996: LD_INT 1
36998: PLUS
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PPUSH
37004: LD_VAR 0 1
37008: PPUSH
37009: CALL 45058 0 3
37013: ST_TO_ADDR
// if btype = b_bunker then
37014: LD_VAR 0 5
37018: PUSH
37019: LD_INT 32
37021: EQUAL
37022: IFFALSE 37258
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37024: LD_ADDR_EXP 66
37028: PUSH
37029: LD_EXP 66
37033: PPUSH
37034: LD_VAR 0 3
37038: PUSH
37039: LD_EXP 66
37043: PUSH
37044: LD_VAR 0 3
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: PLUS
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PPUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL 45058 0 3
37067: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
37068: LD_ADDR_VAR 0 6
37072: PUSH
37073: LD_EXP 57
37077: PUSH
37078: LD_VAR 0 3
37082: ARRAY
37083: PPUSH
37084: LD_INT 25
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: LD_INT 54
37099: PUSH
37100: EMPTY
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PPUSH
37111: CALL_OW 72
37115: ST_TO_ADDR
// if tmp then
37116: LD_VAR 0 6
37120: IFFALSE 37126
// exit ;
37122: POP
37123: POP
37124: GO 37266
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_EXP 57
37135: PUSH
37136: LD_VAR 0 3
37140: ARRAY
37141: PPUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 30
37147: PUSH
37148: LD_INT 4
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 30
37157: PUSH
37158: LD_INT 5
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: PPUSH
37170: CALL_OW 72
37174: ST_TO_ADDR
// if not tmp then
37175: LD_VAR 0 6
37179: NOT
37180: IFFALSE 37186
// exit ;
37182: POP
37183: POP
37184: GO 37266
// for j in tmp do
37186: LD_ADDR_VAR 0 4
37190: PUSH
37191: LD_VAR 0 6
37195: PUSH
37196: FOR_IN
37197: IFFALSE 37256
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
37199: LD_ADDR_VAR 0 7
37203: PUSH
37204: LD_VAR 0 4
37208: PPUSH
37209: CALL_OW 313
37213: PPUSH
37214: LD_INT 25
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PPUSH
37224: CALL_OW 72
37228: ST_TO_ADDR
// if units then
37229: LD_VAR 0 7
37233: IFFALSE 37254
// begin ComExitBuilding ( units [ 1 ] ) ;
37235: LD_VAR 0 7
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: CALL_OW 122
// exit ;
37248: POP
37249: POP
37250: POP
37251: POP
37252: GO 37266
// end ; end ;
37254: GO 37196
37256: POP
37257: POP
// end ; end ; exit ;
37258: POP
37259: POP
37260: GO 37266
// end ; end ;
37262: GO 36620
37264: POP
37265: POP
// end ;
37266: LD_VAR 0 2
37270: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
37271: LD_INT 0
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
// if not mc_bases then
37280: LD_EXP 57
37284: NOT
37285: IFFALSE 37289
// exit ;
37287: GO 37520
// btype := GetBType ( building ) ;
37289: LD_ADDR_VAR 0 6
37293: PUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 266
37303: ST_TO_ADDR
// x := GetX ( building ) ;
37304: LD_ADDR_VAR 0 7
37308: PUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 250
37318: ST_TO_ADDR
// y := GetY ( building ) ;
37319: LD_ADDR_VAR 0 8
37323: PUSH
37324: LD_VAR 0 1
37328: PPUSH
37329: CALL_OW 251
37333: ST_TO_ADDR
// d := GetDir ( building ) ;
37334: LD_ADDR_VAR 0 9
37338: PUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 254
37348: ST_TO_ADDR
// for i = 1 to mc_bases do
37349: LD_ADDR_VAR 0 4
37353: PUSH
37354: DOUBLE
37355: LD_INT 1
37357: DEC
37358: ST_TO_ADDR
37359: LD_EXP 57
37363: PUSH
37364: FOR_TO
37365: IFFALSE 37518
// begin if not mc_build_list [ i ] then
37367: LD_EXP 62
37371: PUSH
37372: LD_VAR 0 4
37376: ARRAY
37377: NOT
37378: IFFALSE 37382
// continue ;
37380: GO 37364
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
37382: LD_VAR 0 6
37386: PUSH
37387: LD_VAR 0 7
37391: PUSH
37392: LD_VAR 0 8
37396: PUSH
37397: LD_VAR 0 9
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: PPUSH
37408: LD_EXP 62
37412: PUSH
37413: LD_VAR 0 4
37417: ARRAY
37418: PUSH
37419: LD_INT 1
37421: ARRAY
37422: PPUSH
37423: CALL 50695 0 2
37427: IFFALSE 37516
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
37429: LD_ADDR_EXP 62
37433: PUSH
37434: LD_EXP 62
37438: PPUSH
37439: LD_VAR 0 4
37443: PPUSH
37444: LD_EXP 62
37448: PUSH
37449: LD_VAR 0 4
37453: ARRAY
37454: PPUSH
37455: LD_INT 1
37457: PPUSH
37458: CALL_OW 3
37462: PPUSH
37463: CALL_OW 1
37467: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
37468: LD_ADDR_EXP 64
37472: PUSH
37473: LD_EXP 64
37477: PPUSH
37478: LD_VAR 0 4
37482: PUSH
37483: LD_EXP 64
37487: PUSH
37488: LD_VAR 0 4
37492: ARRAY
37493: PUSH
37494: LD_INT 1
37496: PLUS
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PPUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL 45058 0 3
37511: ST_TO_ADDR
// exit ;
37512: POP
37513: POP
37514: GO 37520
// end ; end ;
37516: GO 37364
37518: POP
37519: POP
// end ;
37520: LD_VAR 0 3
37524: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
37525: LD_INT 0
37527: PPUSH
37528: PPUSH
37529: PPUSH
// if not mc_bases then
37530: LD_EXP 57
37534: NOT
37535: IFFALSE 37539
// exit ;
37537: GO 37729
// for i = 1 to mc_bases do
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: DOUBLE
37545: LD_INT 1
37547: DEC
37548: ST_TO_ADDR
37549: LD_EXP 57
37553: PUSH
37554: FOR_TO
37555: IFFALSE 37642
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
37557: LD_VAR 0 1
37561: PUSH
37562: LD_EXP 65
37566: PUSH
37567: LD_VAR 0 4
37571: ARRAY
37572: IN
37573: PUSH
37574: LD_VAR 0 1
37578: PUSH
37579: LD_EXP 66
37583: PUSH
37584: LD_VAR 0 4
37588: ARRAY
37589: IN
37590: NOT
37591: AND
37592: IFFALSE 37640
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37594: LD_ADDR_EXP 66
37598: PUSH
37599: LD_EXP 66
37603: PPUSH
37604: LD_VAR 0 4
37608: PUSH
37609: LD_EXP 66
37613: PUSH
37614: LD_VAR 0 4
37618: ARRAY
37619: PUSH
37620: LD_INT 1
37622: PLUS
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL 45058 0 3
37637: ST_TO_ADDR
// break ;
37638: GO 37642
// end ; end ;
37640: GO 37554
37642: POP
37643: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 257
37653: PUSH
37654: LD_EXP 83
37658: IN
37659: PUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 266
37669: PUSH
37670: LD_INT 5
37672: EQUAL
37673: AND
37674: PUSH
37675: LD_VAR 0 2
37679: PPUSH
37680: CALL_OW 110
37684: PUSH
37685: LD_INT 18
37687: NONEQUAL
37688: AND
37689: IFFALSE 37729
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
37691: LD_VAR 0 2
37695: PPUSH
37696: CALL_OW 257
37700: PUSH
37701: LD_INT 5
37703: PUSH
37704: LD_INT 8
37706: PUSH
37707: LD_INT 9
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: IN
37715: IFFALSE 37729
// SetClass ( unit , 1 ) ;
37717: LD_VAR 0 2
37721: PPUSH
37722: LD_INT 1
37724: PPUSH
37725: CALL_OW 336
// end ;
37729: LD_VAR 0 3
37733: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
37734: LD_INT 0
37736: PPUSH
37737: PPUSH
// if not mc_bases then
37738: LD_EXP 57
37742: NOT
37743: IFFALSE 37747
// exit ;
37745: GO 37863
// if GetLives ( abandoned_vehicle ) > 250 then
37747: LD_VAR 0 2
37751: PPUSH
37752: CALL_OW 256
37756: PUSH
37757: LD_INT 250
37759: GREATER
37760: IFFALSE 37764
// exit ;
37762: GO 37863
// for i = 1 to mc_bases do
37764: LD_ADDR_VAR 0 6
37768: PUSH
37769: DOUBLE
37770: LD_INT 1
37772: DEC
37773: ST_TO_ADDR
37774: LD_EXP 57
37778: PUSH
37779: FOR_TO
37780: IFFALSE 37861
// begin if driver in mc_bases [ i ] then
37782: LD_VAR 0 1
37786: PUSH
37787: LD_EXP 57
37791: PUSH
37792: LD_VAR 0 6
37796: ARRAY
37797: IN
37798: IFFALSE 37859
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
37800: LD_VAR 0 1
37804: PPUSH
37805: LD_EXP 57
37809: PUSH
37810: LD_VAR 0 6
37814: ARRAY
37815: PPUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 30
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 30
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: PPUSH
37844: CALL_OW 72
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PPUSH
37853: CALL_OW 112
// break ;
37857: GO 37861
// end ; end ;
37859: GO 37779
37861: POP
37862: POP
// end ; end_of_file
37863: LD_VAR 0 5
37867: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37868: LD_INT 0
37870: PPUSH
37871: PPUSH
// if exist_mode then
37872: LD_VAR 0 2
37876: IFFALSE 37901
// unit := CreateCharacter ( prefix & ident ) else
37878: LD_ADDR_VAR 0 5
37882: PUSH
37883: LD_VAR 0 3
37887: PUSH
37888: LD_VAR 0 1
37892: STR
37893: PPUSH
37894: CALL_OW 34
37898: ST_TO_ADDR
37899: GO 37916
// unit := NewCharacter ( ident ) ;
37901: LD_ADDR_VAR 0 5
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 25
37915: ST_TO_ADDR
// result := unit ;
37916: LD_ADDR_VAR 0 4
37920: PUSH
37921: LD_VAR 0 5
37925: ST_TO_ADDR
// end ;
37926: LD_VAR 0 4
37930: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37931: LD_INT 0
37933: PPUSH
37934: PPUSH
// if not side or not nation then
37935: LD_VAR 0 1
37939: NOT
37940: PUSH
37941: LD_VAR 0 2
37945: NOT
37946: OR
37947: IFFALSE 37951
// exit ;
37949: GO 38587
// case nation of nation_american :
37951: LD_VAR 0 2
37955: PUSH
37956: LD_INT 1
37958: DOUBLE
37959: EQUAL
37960: IFTRUE 37964
37962: GO 38134
37964: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
37965: LD_ADDR_VAR 0 4
37969: PUSH
37970: LD_INT 35
37972: PUSH
37973: LD_INT 45
37975: PUSH
37976: LD_INT 46
37978: PUSH
37979: LD_INT 47
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: LD_INT 6
37990: PUSH
37991: LD_INT 15
37993: PUSH
37994: LD_INT 16
37996: PUSH
37997: LD_INT 7
37999: PUSH
38000: LD_INT 12
38002: PUSH
38003: LD_INT 13
38005: PUSH
38006: LD_INT 10
38008: PUSH
38009: LD_INT 14
38011: PUSH
38012: LD_INT 20
38014: PUSH
38015: LD_INT 21
38017: PUSH
38018: LD_INT 22
38020: PUSH
38021: LD_INT 25
38023: PUSH
38024: LD_INT 32
38026: PUSH
38027: LD_INT 27
38029: PUSH
38030: LD_INT 36
38032: PUSH
38033: LD_INT 69
38035: PUSH
38036: LD_INT 39
38038: PUSH
38039: LD_INT 34
38041: PUSH
38042: LD_INT 40
38044: PUSH
38045: LD_INT 48
38047: PUSH
38048: LD_INT 49
38050: PUSH
38051: LD_INT 50
38053: PUSH
38054: LD_INT 51
38056: PUSH
38057: LD_INT 52
38059: PUSH
38060: LD_INT 53
38062: PUSH
38063: LD_INT 54
38065: PUSH
38066: LD_INT 55
38068: PUSH
38069: LD_INT 56
38071: PUSH
38072: LD_INT 57
38074: PUSH
38075: LD_INT 58
38077: PUSH
38078: LD_INT 59
38080: PUSH
38081: LD_INT 60
38083: PUSH
38084: LD_INT 61
38086: PUSH
38087: LD_INT 62
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
38132: GO 38511
38134: LD_INT 2
38136: DOUBLE
38137: EQUAL
38138: IFTRUE 38142
38140: GO 38320
38142: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
38143: LD_ADDR_VAR 0 4
38147: PUSH
38148: LD_INT 35
38150: PUSH
38151: LD_INT 45
38153: PUSH
38154: LD_INT 46
38156: PUSH
38157: LD_INT 47
38159: PUSH
38160: LD_INT 70
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 11
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: LD_INT 4
38174: PUSH
38175: LD_INT 5
38177: PUSH
38178: LD_INT 6
38180: PUSH
38181: LD_INT 15
38183: PUSH
38184: LD_INT 18
38186: PUSH
38187: LD_INT 7
38189: PUSH
38190: LD_INT 17
38192: PUSH
38193: LD_INT 8
38195: PUSH
38196: LD_INT 20
38198: PUSH
38199: LD_INT 21
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: LD_INT 72
38207: PUSH
38208: LD_INT 26
38210: PUSH
38211: LD_INT 69
38213: PUSH
38214: LD_INT 39
38216: PUSH
38217: LD_INT 40
38219: PUSH
38220: LD_INT 41
38222: PUSH
38223: LD_INT 42
38225: PUSH
38226: LD_INT 43
38228: PUSH
38229: LD_INT 48
38231: PUSH
38232: LD_INT 49
38234: PUSH
38235: LD_INT 50
38237: PUSH
38238: LD_INT 51
38240: PUSH
38241: LD_INT 52
38243: PUSH
38244: LD_INT 53
38246: PUSH
38247: LD_INT 54
38249: PUSH
38250: LD_INT 55
38252: PUSH
38253: LD_INT 56
38255: PUSH
38256: LD_INT 60
38258: PUSH
38259: LD_INT 61
38261: PUSH
38262: LD_INT 62
38264: PUSH
38265: LD_INT 66
38267: PUSH
38268: LD_INT 67
38270: PUSH
38271: LD_INT 68
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: ST_TO_ADDR
38318: GO 38511
38320: LD_INT 3
38322: DOUBLE
38323: EQUAL
38324: IFTRUE 38328
38326: GO 38510
38328: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: LD_INT 46
38336: PUSH
38337: LD_INT 47
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 11
38348: PUSH
38349: LD_INT 9
38351: PUSH
38352: LD_INT 20
38354: PUSH
38355: LD_INT 19
38357: PUSH
38358: LD_INT 21
38360: PUSH
38361: LD_INT 24
38363: PUSH
38364: LD_INT 22
38366: PUSH
38367: LD_INT 25
38369: PUSH
38370: LD_INT 28
38372: PUSH
38373: LD_INT 29
38375: PUSH
38376: LD_INT 30
38378: PUSH
38379: LD_INT 31
38381: PUSH
38382: LD_INT 37
38384: PUSH
38385: LD_INT 38
38387: PUSH
38388: LD_INT 32
38390: PUSH
38391: LD_INT 27
38393: PUSH
38394: LD_INT 33
38396: PUSH
38397: LD_INT 69
38399: PUSH
38400: LD_INT 39
38402: PUSH
38403: LD_INT 34
38405: PUSH
38406: LD_INT 40
38408: PUSH
38409: LD_INT 71
38411: PUSH
38412: LD_INT 23
38414: PUSH
38415: LD_INT 44
38417: PUSH
38418: LD_INT 48
38420: PUSH
38421: LD_INT 49
38423: PUSH
38424: LD_INT 50
38426: PUSH
38427: LD_INT 51
38429: PUSH
38430: LD_INT 52
38432: PUSH
38433: LD_INT 53
38435: PUSH
38436: LD_INT 54
38438: PUSH
38439: LD_INT 55
38441: PUSH
38442: LD_INT 56
38444: PUSH
38445: LD_INT 57
38447: PUSH
38448: LD_INT 58
38450: PUSH
38451: LD_INT 59
38453: PUSH
38454: LD_INT 63
38456: PUSH
38457: LD_INT 64
38459: PUSH
38460: LD_INT 65
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
38508: GO 38511
38510: POP
// if state > - 1 and state < 3 then
38511: LD_VAR 0 3
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: GREATER
38520: PUSH
38521: LD_VAR 0 3
38525: PUSH
38526: LD_INT 3
38528: LESS
38529: AND
38530: IFFALSE 38587
// for i in result do
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: LD_VAR 0 4
38541: PUSH
38542: FOR_IN
38543: IFFALSE 38585
// if GetTech ( i , side ) <> state then
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 321
38559: PUSH
38560: LD_VAR 0 3
38564: NONEQUAL
38565: IFFALSE 38583
// result := result diff i ;
38567: LD_ADDR_VAR 0 4
38571: PUSH
38572: LD_VAR 0 4
38576: PUSH
38577: LD_VAR 0 5
38581: DIFF
38582: ST_TO_ADDR
38583: GO 38542
38585: POP
38586: POP
// end ;
38587: LD_VAR 0 4
38591: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38592: LD_INT 0
38594: PPUSH
38595: PPUSH
38596: PPUSH
// result := true ;
38597: LD_ADDR_VAR 0 3
38601: PUSH
38602: LD_INT 1
38604: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38605: LD_ADDR_VAR 0 5
38609: PUSH
38610: LD_VAR 0 2
38614: PPUSH
38615: CALL_OW 480
38619: ST_TO_ADDR
// if not tmp then
38620: LD_VAR 0 5
38624: NOT
38625: IFFALSE 38629
// exit ;
38627: GO 38678
// for i in tmp do
38629: LD_ADDR_VAR 0 4
38633: PUSH
38634: LD_VAR 0 5
38638: PUSH
38639: FOR_IN
38640: IFFALSE 38676
// if GetTech ( i , side ) <> state_researched then
38642: LD_VAR 0 4
38646: PPUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 321
38656: PUSH
38657: LD_INT 2
38659: NONEQUAL
38660: IFFALSE 38674
// begin result := false ;
38662: LD_ADDR_VAR 0 3
38666: PUSH
38667: LD_INT 0
38669: ST_TO_ADDR
// exit ;
38670: POP
38671: POP
38672: GO 38678
// end ;
38674: GO 38639
38676: POP
38677: POP
// end ;
38678: LD_VAR 0 3
38682: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38698: LD_VAR 0 1
38702: NOT
38703: PUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 257
38713: PUSH
38714: LD_INT 9
38716: NONEQUAL
38717: OR
38718: IFFALSE 38722
// exit ;
38720: GO 39295
// side := GetSide ( unit ) ;
38722: LD_ADDR_VAR 0 9
38726: PUSH
38727: LD_VAR 0 1
38731: PPUSH
38732: CALL_OW 255
38736: ST_TO_ADDR
// tech_space := tech_spacanom ;
38737: LD_ADDR_VAR 0 12
38741: PUSH
38742: LD_INT 29
38744: ST_TO_ADDR
// tech_time := tech_taurad ;
38745: LD_ADDR_VAR 0 13
38749: PUSH
38750: LD_INT 28
38752: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38753: LD_ADDR_VAR 0 11
38757: PUSH
38758: LD_VAR 0 1
38762: PPUSH
38763: CALL_OW 310
38767: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38768: LD_VAR 0 11
38772: PPUSH
38773: CALL_OW 247
38777: PUSH
38778: LD_INT 2
38780: EQUAL
38781: IFFALSE 38785
// exit ;
38783: GO 39295
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38785: LD_ADDR_VAR 0 8
38789: PUSH
38790: LD_INT 81
38792: PUSH
38793: LD_VAR 0 9
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 3
38804: PUSH
38805: LD_INT 21
38807: PUSH
38808: LD_INT 3
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PPUSH
38823: CALL_OW 69
38827: ST_TO_ADDR
// if not tmp then
38828: LD_VAR 0 8
38832: NOT
38833: IFFALSE 38837
// exit ;
38835: GO 39295
// if in_unit then
38837: LD_VAR 0 11
38841: IFFALSE 38865
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38843: LD_ADDR_VAR 0 10
38847: PUSH
38848: LD_VAR 0 8
38852: PPUSH
38853: LD_VAR 0 11
38857: PPUSH
38858: CALL_OW 74
38862: ST_TO_ADDR
38863: GO 38885
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38865: LD_ADDR_VAR 0 10
38869: PUSH
38870: LD_VAR 0 8
38874: PPUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 74
38884: ST_TO_ADDR
// if not enemy then
38885: LD_VAR 0 10
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 39295
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38894: LD_VAR 0 11
38898: PUSH
38899: LD_VAR 0 11
38903: PPUSH
38904: LD_VAR 0 10
38908: PPUSH
38909: CALL_OW 296
38913: PUSH
38914: LD_INT 13
38916: GREATER
38917: AND
38918: PUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: LD_VAR 0 10
38928: PPUSH
38929: CALL_OW 296
38933: PUSH
38934: LD_INT 12
38936: GREATER
38937: OR
38938: IFFALSE 38942
// exit ;
38940: GO 39295
// missile := [ 1 ] ;
38942: LD_ADDR_VAR 0 14
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38953: LD_VAR 0 9
38957: PPUSH
38958: LD_VAR 0 12
38962: PPUSH
38963: CALL_OW 325
38967: IFFALSE 38996
// missile := Insert ( missile , missile + 1 , 2 ) ;
38969: LD_ADDR_VAR 0 14
38973: PUSH
38974: LD_VAR 0 14
38978: PPUSH
38979: LD_VAR 0 14
38983: PUSH
38984: LD_INT 1
38986: PLUS
38987: PPUSH
38988: LD_INT 2
38990: PPUSH
38991: CALL_OW 2
38995: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38996: LD_VAR 0 9
39000: PPUSH
39001: LD_VAR 0 13
39005: PPUSH
39006: CALL_OW 325
39010: PUSH
39011: LD_VAR 0 10
39015: PPUSH
39016: CALL_OW 255
39020: PPUSH
39021: LD_VAR 0 13
39025: PPUSH
39026: CALL_OW 325
39030: NOT
39031: AND
39032: IFFALSE 39061
// missile := Insert ( missile , missile + 1 , 3 ) ;
39034: LD_ADDR_VAR 0 14
39038: PUSH
39039: LD_VAR 0 14
39043: PPUSH
39044: LD_VAR 0 14
39048: PUSH
39049: LD_INT 1
39051: PLUS
39052: PPUSH
39053: LD_INT 3
39055: PPUSH
39056: CALL_OW 2
39060: ST_TO_ADDR
// if missile < 2 then
39061: LD_VAR 0 14
39065: PUSH
39066: LD_INT 2
39068: LESS
39069: IFFALSE 39073
// exit ;
39071: GO 39295
// x := GetX ( enemy ) ;
39073: LD_ADDR_VAR 0 4
39077: PUSH
39078: LD_VAR 0 10
39082: PPUSH
39083: CALL_OW 250
39087: ST_TO_ADDR
// y := GetY ( enemy ) ;
39088: LD_ADDR_VAR 0 5
39092: PUSH
39093: LD_VAR 0 10
39097: PPUSH
39098: CALL_OW 251
39102: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39103: LD_ADDR_VAR 0 6
39107: PUSH
39108: LD_VAR 0 4
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PPUSH
39117: LD_INT 1
39119: PPUSH
39120: CALL_OW 12
39124: PLUS
39125: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: LD_VAR 0 5
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PPUSH
39140: LD_INT 1
39142: PPUSH
39143: CALL_OW 12
39147: PLUS
39148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39149: LD_VAR 0 6
39153: PPUSH
39154: LD_VAR 0 7
39158: PPUSH
39159: CALL_OW 488
39163: NOT
39164: IFFALSE 39186
// begin _x := x ;
39166: LD_ADDR_VAR 0 6
39170: PUSH
39171: LD_VAR 0 4
39175: ST_TO_ADDR
// _y := y ;
39176: LD_ADDR_VAR 0 7
39180: PUSH
39181: LD_VAR 0 5
39185: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_INT 1
39193: PPUSH
39194: LD_VAR 0 14
39198: PPUSH
39199: CALL_OW 12
39203: ST_TO_ADDR
// case i of 1 :
39204: LD_VAR 0 3
39208: PUSH
39209: LD_INT 1
39211: DOUBLE
39212: EQUAL
39213: IFTRUE 39217
39215: GO 39234
39217: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39218: LD_VAR 0 1
39222: PPUSH
39223: LD_VAR 0 10
39227: PPUSH
39228: CALL_OW 115
39232: GO 39295
39234: LD_INT 2
39236: DOUBLE
39237: EQUAL
39238: IFTRUE 39242
39240: GO 39264
39242: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 6
39252: PPUSH
39253: LD_VAR 0 7
39257: PPUSH
39258: CALL_OW 153
39262: GO 39295
39264: LD_INT 3
39266: DOUBLE
39267: EQUAL
39268: IFTRUE 39272
39270: GO 39294
39272: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_VAR 0 6
39282: PPUSH
39283: LD_VAR 0 7
39287: PPUSH
39288: CALL_OW 154
39292: GO 39295
39294: POP
// end ;
39295: LD_VAR 0 2
39299: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39300: LD_INT 0
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
// if not unit or not building then
39308: LD_VAR 0 1
39312: NOT
39313: PUSH
39314: LD_VAR 0 2
39318: NOT
39319: OR
39320: IFFALSE 39324
// exit ;
39322: GO 39482
// x := GetX ( building ) ;
39324: LD_ADDR_VAR 0 5
39328: PUSH
39329: LD_VAR 0 2
39333: PPUSH
39334: CALL_OW 250
39338: ST_TO_ADDR
// y := GetY ( building ) ;
39339: LD_ADDR_VAR 0 6
39343: PUSH
39344: LD_VAR 0 2
39348: PPUSH
39349: CALL_OW 251
39353: ST_TO_ADDR
// for i = 0 to 5 do
39354: LD_ADDR_VAR 0 4
39358: PUSH
39359: DOUBLE
39360: LD_INT 0
39362: DEC
39363: ST_TO_ADDR
39364: LD_INT 5
39366: PUSH
39367: FOR_TO
39368: IFFALSE 39480
// begin _x := ShiftX ( x , i , 3 ) ;
39370: LD_ADDR_VAR 0 7
39374: PUSH
39375: LD_VAR 0 5
39379: PPUSH
39380: LD_VAR 0 4
39384: PPUSH
39385: LD_INT 3
39387: PPUSH
39388: CALL_OW 272
39392: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39393: LD_ADDR_VAR 0 8
39397: PUSH
39398: LD_VAR 0 6
39402: PPUSH
39403: LD_VAR 0 4
39407: PPUSH
39408: LD_INT 3
39410: PPUSH
39411: CALL_OW 273
39415: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39416: LD_VAR 0 7
39420: PPUSH
39421: LD_VAR 0 8
39425: PPUSH
39426: CALL_OW 488
39430: NOT
39431: IFFALSE 39435
// continue ;
39433: GO 39367
// if HexInfo ( _x , _y ) = 0 then
39435: LD_VAR 0 7
39439: PPUSH
39440: LD_VAR 0 8
39444: PPUSH
39445: CALL_OW 428
39449: PUSH
39450: LD_INT 0
39452: EQUAL
39453: IFFALSE 39478
// begin ComMoveXY ( unit , _x , _y ) ;
39455: LD_VAR 0 1
39459: PPUSH
39460: LD_VAR 0 7
39464: PPUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: CALL_OW 111
// exit ;
39474: POP
39475: POP
39476: GO 39482
// end ; end ;
39478: GO 39367
39480: POP
39481: POP
// end ;
39482: LD_VAR 0 3
39486: RET
// export function ScanBase ( side , base_area ) ; begin
39487: LD_INT 0
39489: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39490: LD_ADDR_VAR 0 3
39494: PUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: LD_INT 81
39502: PUSH
39503: LD_VAR 0 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PPUSH
39512: CALL_OW 70
39516: ST_TO_ADDR
// end ;
39517: LD_VAR 0 3
39521: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
39522: LD_INT 0
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
39529: LD_VAR 0 1
39533: NOT
39534: PUSH
39535: LD_EXP 57
39539: PUSH
39540: LD_VAR 0 1
39544: ARRAY
39545: NOT
39546: OR
39547: PUSH
39548: LD_VAR 0 2
39552: NOT
39553: OR
39554: PUSH
39555: LD_VAR 0 3
39559: NOT
39560: OR
39561: IFFALSE 39565
// exit ;
39563: GO 40015
// side := mc_sides [ base ] ;
39565: LD_ADDR_VAR 0 6
39569: PUSH
39570: LD_EXP 83
39574: PUSH
39575: LD_VAR 0 1
39579: ARRAY
39580: ST_TO_ADDR
// if not side then
39581: LD_VAR 0 6
39585: NOT
39586: IFFALSE 39590
// exit ;
39588: GO 40015
// for i in solds do
39590: LD_ADDR_VAR 0 7
39594: PUSH
39595: LD_VAR 0 2
39599: PUSH
39600: FOR_IN
39601: IFFALSE 39662
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
39603: LD_VAR 0 7
39607: PPUSH
39608: CALL_OW 310
39612: PPUSH
39613: CALL_OW 266
39617: PUSH
39618: LD_INT 32
39620: PUSH
39621: LD_INT 31
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: IN
39628: IFFALSE 39648
// solds := solds diff i else
39630: LD_ADDR_VAR 0 2
39634: PUSH
39635: LD_VAR 0 2
39639: PUSH
39640: LD_VAR 0 7
39644: DIFF
39645: ST_TO_ADDR
39646: GO 39660
// SetTag ( i , 18 ) ;
39648: LD_VAR 0 7
39652: PPUSH
39653: LD_INT 18
39655: PPUSH
39656: CALL_OW 109
39660: GO 39600
39662: POP
39663: POP
// if not solds then
39664: LD_VAR 0 2
39668: NOT
39669: IFFALSE 39673
// exit ;
39671: GO 40015
// repeat wait ( 0 0$1 ) ;
39673: LD_INT 35
39675: PPUSH
39676: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
39680: LD_ADDR_VAR 0 5
39684: PUSH
39685: LD_VAR 0 6
39689: PPUSH
39690: LD_VAR 0 3
39694: PPUSH
39695: CALL 39487 0 2
39699: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
39700: LD_VAR 0 5
39704: NOT
39705: PUSH
39706: LD_VAR 0 5
39710: PUSH
39711: LD_INT 3
39713: GREATER
39714: OR
39715: PUSH
39716: LD_EXP 79
39720: PUSH
39721: LD_VAR 0 1
39725: ARRAY
39726: OR
39727: IFFALSE 39768
// begin for i in solds do
39729: LD_ADDR_VAR 0 7
39733: PUSH
39734: LD_VAR 0 2
39738: PUSH
39739: FOR_IN
39740: IFFALSE 39764
// if HasTask ( i ) then
39742: LD_VAR 0 7
39746: PPUSH
39747: CALL_OW 314
39751: IFFALSE 39762
// ComStop ( i ) ;
39753: LD_VAR 0 7
39757: PPUSH
39758: CALL_OW 141
39762: GO 39739
39764: POP
39765: POP
// break ;
39766: GO 40003
// end ; for i in solds do
39768: LD_ADDR_VAR 0 7
39772: PUSH
39773: LD_VAR 0 2
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39995
// begin if IsInUnit ( i ) then
39781: LD_VAR 0 7
39785: PPUSH
39786: CALL_OW 310
39790: IFFALSE 39801
// ComExitBuilding ( i ) ;
39792: LD_VAR 0 7
39796: PPUSH
39797: CALL_OW 122
// if GetLives ( i ) > 333 then
39801: LD_VAR 0 7
39805: PPUSH
39806: CALL_OW 256
39810: PUSH
39811: LD_INT 333
39813: GREATER
39814: IFFALSE 39842
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
39816: LD_VAR 0 7
39820: PPUSH
39821: LD_VAR 0 5
39825: PPUSH
39826: LD_VAR 0 7
39830: PPUSH
39831: CALL_OW 74
39835: PPUSH
39836: CALL_OW 115
39840: GO 39993
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
39842: LD_ADDR_VAR 0 8
39846: PUSH
39847: LD_EXP 57
39851: PUSH
39852: LD_VAR 0 1
39856: ARRAY
39857: PPUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 30
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 30
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 30
39883: PUSH
39884: LD_INT 6
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: PPUSH
39897: CALL_OW 72
39901: PPUSH
39902: LD_VAR 0 7
39906: PPUSH
39907: CALL_OW 74
39911: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
39912: LD_VAR 0 7
39916: PPUSH
39917: LD_VAR 0 8
39921: PPUSH
39922: CALL_OW 250
39926: PPUSH
39927: LD_INT 3
39929: PPUSH
39930: LD_INT 5
39932: PPUSH
39933: CALL_OW 272
39937: PPUSH
39938: LD_VAR 0 8
39942: PPUSH
39943: CALL_OW 251
39947: PPUSH
39948: LD_INT 3
39950: PPUSH
39951: LD_INT 5
39953: PPUSH
39954: CALL_OW 273
39958: PPUSH
39959: CALL_OW 111
// SetTag ( i , 0 ) ;
39963: LD_VAR 0 7
39967: PPUSH
39968: LD_INT 0
39970: PPUSH
39971: CALL_OW 109
// solds := solds diff i ;
39975: LD_ADDR_VAR 0 2
39979: PUSH
39980: LD_VAR 0 2
39984: PUSH
39985: LD_VAR 0 7
39989: DIFF
39990: ST_TO_ADDR
// continue ;
39991: GO 39778
// end ; end ;
39993: GO 39778
39995: POP
39996: POP
// until solds ;
39997: LD_VAR 0 2
40001: IFFALSE 39673
// MC_Reset ( base , 18 ) ;
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_INT 18
40010: PPUSH
40011: CALL 19338 0 2
// end ;
40015: LD_VAR 0 4
40019: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
40020: LD_INT 0
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
40032: PPUSH
40033: PPUSH
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
40038: LD_ADDR_VAR 0 12
40042: PUSH
40043: LD_EXP 57
40047: PUSH
40048: LD_VAR 0 1
40052: ARRAY
40053: PPUSH
40054: LD_INT 25
40056: PUSH
40057: LD_INT 3
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PPUSH
40064: CALL_OW 72
40068: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
40069: LD_ADDR_VAR 0 8
40073: PUSH
40074: LD_EXP 57
40078: PUSH
40079: LD_VAR 0 1
40083: ARRAY
40084: PPUSH
40085: LD_INT 2
40087: PUSH
40088: LD_INT 25
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 25
40100: PUSH
40101: LD_INT 5
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 25
40110: PUSH
40111: LD_INT 8
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 25
40120: PUSH
40121: LD_INT 9
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: PPUSH
40135: CALL_OW 72
40139: ST_TO_ADDR
// if not defenders and not solds then
40140: LD_VAR 0 2
40144: NOT
40145: PUSH
40146: LD_VAR 0 8
40150: NOT
40151: AND
40152: IFFALSE 40156
// exit ;
40154: GO 41522
// depot_under_attack := false ;
40156: LD_ADDR_VAR 0 16
40160: PUSH
40161: LD_INT 0
40163: ST_TO_ADDR
// sold_defenders := [ ] ;
40164: LD_ADDR_VAR 0 17
40168: PUSH
40169: EMPTY
40170: ST_TO_ADDR
// if mechs then
40171: LD_VAR 0 12
40175: IFFALSE 40304
// for i in defenders do
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: LD_VAR 0 2
40186: PUSH
40187: FOR_IN
40188: IFFALSE 40302
// begin SetTag ( i , 20 ) ;
40190: LD_VAR 0 5
40194: PPUSH
40195: LD_INT 20
40197: PPUSH
40198: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
40202: LD_VAR 0 5
40206: PPUSH
40207: CALL_OW 263
40211: PUSH
40212: LD_INT 1
40214: EQUAL
40215: PUSH
40216: LD_VAR 0 5
40220: PPUSH
40221: CALL_OW 311
40225: NOT
40226: AND
40227: PUSH
40228: LD_VAR 0 12
40232: AND
40233: IFFALSE 40300
// begin un := mechs [ 1 ] ;
40235: LD_ADDR_VAR 0 10
40239: PUSH
40240: LD_VAR 0 12
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: ST_TO_ADDR
// ComExitBuilding ( un ) ;
40249: LD_VAR 0 10
40253: PPUSH
40254: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
40258: LD_VAR 0 10
40262: PPUSH
40263: LD_VAR 0 5
40267: PPUSH
40268: CALL_OW 180
// SetTag ( un , 19 ) ;
40272: LD_VAR 0 10
40276: PPUSH
40277: LD_INT 19
40279: PPUSH
40280: CALL_OW 109
// mechs := mechs diff un ;
40284: LD_ADDR_VAR 0 12
40288: PUSH
40289: LD_VAR 0 12
40293: PUSH
40294: LD_VAR 0 10
40298: DIFF
40299: ST_TO_ADDR
// end ; end ;
40300: GO 40187
40302: POP
40303: POP
// if solds then
40304: LD_VAR 0 8
40308: IFFALSE 40367
// for i in solds do
40310: LD_ADDR_VAR 0 5
40314: PUSH
40315: LD_VAR 0 8
40319: PUSH
40320: FOR_IN
40321: IFFALSE 40365
// if not GetTag ( i ) then
40323: LD_VAR 0 5
40327: PPUSH
40328: CALL_OW 110
40332: NOT
40333: IFFALSE 40363
// begin defenders := defenders union i ;
40335: LD_ADDR_VAR 0 2
40339: PUSH
40340: LD_VAR 0 2
40344: PUSH
40345: LD_VAR 0 5
40349: UNION
40350: ST_TO_ADDR
// SetTag ( i , 18 ) ;
40351: LD_VAR 0 5
40355: PPUSH
40356: LD_INT 18
40358: PPUSH
40359: CALL_OW 109
// end ;
40363: GO 40320
40365: POP
40366: POP
// repeat wait ( 0 0$1 ) ;
40367: LD_INT 35
40369: PPUSH
40370: CALL_OW 67
// enemy := mc_scan [ base ] ;
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_EXP 80
40383: PUSH
40384: LD_VAR 0 1
40388: ARRAY
40389: ST_TO_ADDR
// for i in defenders do
40390: LD_ADDR_VAR 0 5
40394: PUSH
40395: LD_VAR 0 2
40399: PUSH
40400: FOR_IN
40401: IFFALSE 41086
// begin e := NearestUnitToUnit ( enemy , i ) ;
40403: LD_ADDR_VAR 0 13
40407: PUSH
40408: LD_VAR 0 3
40412: PPUSH
40413: LD_VAR 0 5
40417: PPUSH
40418: CALL_OW 74
40422: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
40423: LD_ADDR_VAR 0 16
40427: PUSH
40428: LD_EXP 57
40432: PUSH
40433: LD_VAR 0 1
40437: ARRAY
40438: PPUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 30
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 30
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: PPUSH
40467: CALL_OW 72
40471: NOT
40472: PUSH
40473: LD_EXP 57
40477: PUSH
40478: LD_VAR 0 1
40482: ARRAY
40483: PPUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 30
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 30
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: PPUSH
40512: CALL_OW 72
40516: PPUSH
40517: CALL_OW 256
40521: PUSH
40522: LD_INT 600
40524: LESS
40525: OR
40526: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
40527: LD_VAR 0 5
40531: PPUSH
40532: CALL_OW 247
40536: PUSH
40537: LD_INT 2
40539: DOUBLE
40540: EQUAL
40541: IFTRUE 40545
40543: GO 40792
40545: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
40546: LD_VAR 0 5
40550: PPUSH
40551: CALL_OW 256
40555: PUSH
40556: LD_INT 650
40558: GREATER
40559: PUSH
40560: LD_VAR 0 5
40564: PPUSH
40565: LD_VAR 0 13
40569: PPUSH
40570: CALL_OW 296
40574: PUSH
40575: LD_INT 40
40577: LESS
40578: AND
40579: IFFALSE 40597
// ComAttackUnit ( i , e ) else
40581: LD_VAR 0 5
40585: PPUSH
40586: LD_VAR 0 13
40590: PPUSH
40591: CALL_OW 115
40595: GO 40675
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
40597: LD_VAR 0 5
40601: PPUSH
40602: LD_VAR 0 13
40606: PPUSH
40607: CALL_OW 296
40611: PUSH
40612: LD_INT 30
40614: GREATEREQUAL
40615: PUSH
40616: LD_VAR 0 5
40620: PPUSH
40621: CALL_OW 256
40625: PUSH
40626: LD_INT 650
40628: LESSEQUAL
40629: OR
40630: PUSH
40631: LD_VAR 0 5
40635: PPUSH
40636: LD_EXP 81
40640: PUSH
40641: LD_VAR 0 1
40645: ARRAY
40646: PPUSH
40647: CALL_OW 308
40651: NOT
40652: AND
40653: IFFALSE 40675
// ComMoveToArea ( i , mc_parking [ base ] ) ;
40655: LD_VAR 0 5
40659: PPUSH
40660: LD_EXP 81
40664: PUSH
40665: LD_VAR 0 1
40669: ARRAY
40670: PPUSH
40671: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
40675: LD_VAR 0 5
40679: PPUSH
40680: CALL_OW 256
40684: PUSH
40685: LD_INT 998
40687: LESS
40688: PUSH
40689: LD_VAR 0 5
40693: PPUSH
40694: CALL_OW 263
40698: PUSH
40699: LD_INT 1
40701: EQUAL
40702: AND
40703: PUSH
40704: LD_VAR 0 5
40708: PPUSH
40709: CALL_OW 311
40713: AND
40714: PUSH
40715: LD_VAR 0 5
40719: PPUSH
40720: LD_EXP 81
40724: PUSH
40725: LD_VAR 0 1
40729: ARRAY
40730: PPUSH
40731: CALL_OW 308
40735: AND
40736: IFFALSE 40790
// begin mech := IsDrivenBy ( i ) ;
40738: LD_ADDR_VAR 0 9
40742: PUSH
40743: LD_VAR 0 5
40747: PPUSH
40748: CALL_OW 311
40752: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
40753: LD_VAR 0 9
40757: PPUSH
40758: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
40762: LD_VAR 0 9
40766: PPUSH
40767: LD_VAR 0 5
40771: PPUSH
40772: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
40776: LD_VAR 0 9
40780: PPUSH
40781: LD_VAR 0 5
40785: PPUSH
40786: CALL_OW 180
// end ; end ; unit_human :
40790: GO 41057
40792: LD_INT 1
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40800
40798: GO 41056
40800: POP
// begin b := IsInUnit ( i ) ;
40801: LD_ADDR_VAR 0 18
40805: PUSH
40806: LD_VAR 0 5
40810: PPUSH
40811: CALL_OW 310
40815: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
40816: LD_ADDR_VAR 0 19
40820: PUSH
40821: LD_VAR 0 18
40825: NOT
40826: PUSH
40827: LD_VAR 0 18
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 32
40839: PUSH
40840: LD_INT 31
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: IN
40847: OR
40848: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
40849: LD_VAR 0 16
40853: PUSH
40854: LD_VAR 0 2
40858: PPUSH
40859: LD_INT 21
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PPUSH
40869: CALL_OW 72
40873: PUSH
40874: LD_INT 1
40876: LESSEQUAL
40877: OR
40878: PUSH
40879: LD_VAR 0 19
40883: AND
40884: PUSH
40885: LD_VAR 0 5
40889: PUSH
40890: LD_VAR 0 17
40894: IN
40895: NOT
40896: AND
40897: IFFALSE 40990
// begin if b then
40899: LD_VAR 0 18
40903: IFFALSE 40952
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
40905: LD_VAR 0 18
40909: PPUSH
40910: LD_VAR 0 3
40914: PPUSH
40915: LD_VAR 0 18
40919: PPUSH
40920: CALL_OW 74
40924: PPUSH
40925: CALL_OW 296
40929: PUSH
40930: LD_INT 10
40932: LESS
40933: PUSH
40934: LD_VAR 0 18
40938: PPUSH
40939: CALL_OW 461
40943: PUSH
40944: LD_INT 7
40946: NONEQUAL
40947: AND
40948: IFFALSE 40952
// continue ;
40950: GO 40400
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
40952: LD_ADDR_VAR 0 17
40956: PUSH
40957: LD_VAR 0 17
40961: PPUSH
40962: LD_VAR 0 17
40966: PUSH
40967: LD_INT 1
40969: PLUS
40970: PPUSH
40971: LD_VAR 0 5
40975: PPUSH
40976: CALL_OW 1
40980: ST_TO_ADDR
// ComExitBuilding ( i ) ;
40981: LD_VAR 0 5
40985: PPUSH
40986: CALL_OW 122
// end ; if sold_defenders then
40990: LD_VAR 0 17
40994: IFFALSE 41054
// if i in sold_defenders then
40996: LD_VAR 0 5
41000: PUSH
41001: LD_VAR 0 17
41005: IN
41006: IFFALSE 41054
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
41008: LD_VAR 0 5
41012: PPUSH
41013: CALL_OW 314
41017: NOT
41018: PUSH
41019: LD_VAR 0 5
41023: PPUSH
41024: LD_VAR 0 13
41028: PPUSH
41029: CALL_OW 296
41033: PUSH
41034: LD_INT 30
41036: LESS
41037: AND
41038: IFFALSE 41054
// ComAttackUnit ( i , e ) ;
41040: LD_VAR 0 5
41044: PPUSH
41045: LD_VAR 0 13
41049: PPUSH
41050: CALL_OW 115
// end ; end ; end ;
41054: GO 41057
41056: POP
// if IsDead ( i ) then
41057: LD_VAR 0 5
41061: PPUSH
41062: CALL_OW 301
41066: IFFALSE 41084
// defenders := defenders diff i ;
41068: LD_ADDR_VAR 0 2
41072: PUSH
41073: LD_VAR 0 2
41077: PUSH
41078: LD_VAR 0 5
41082: DIFF
41083: ST_TO_ADDR
// end ;
41084: GO 40400
41086: POP
41087: POP
// until not enemy or not defenders ;
41088: LD_VAR 0 3
41092: NOT
41093: PUSH
41094: LD_VAR 0 2
41098: NOT
41099: OR
41100: IFFALSE 40367
// MC_Reset ( base , 18 ) ;
41102: LD_VAR 0 1
41106: PPUSH
41107: LD_INT 18
41109: PPUSH
41110: CALL 19338 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
41114: LD_ADDR_VAR 0 2
41118: PUSH
41119: LD_VAR 0 2
41123: PUSH
41124: LD_VAR 0 2
41128: PPUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 25
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 25
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 25
41154: PUSH
41155: LD_INT 8
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 25
41164: PUSH
41165: LD_INT 9
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: PPUSH
41179: CALL_OW 72
41183: DIFF
41184: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
41185: LD_VAR 0 3
41189: NOT
41190: PUSH
41191: LD_VAR 0 2
41195: PPUSH
41196: LD_INT 21
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PPUSH
41206: CALL_OW 72
41210: AND
41211: IFFALSE 41473
// begin tmp := FilterByTag ( defenders , 19 ) ;
41213: LD_ADDR_VAR 0 11
41217: PUSH
41218: LD_VAR 0 2
41222: PPUSH
41223: LD_INT 19
41225: PPUSH
41226: CALL 77638 0 2
41230: ST_TO_ADDR
// if tmp then
41231: LD_VAR 0 11
41235: IFFALSE 41305
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
41237: LD_ADDR_VAR 0 11
41241: PUSH
41242: LD_VAR 0 11
41246: PPUSH
41247: LD_INT 25
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PPUSH
41257: CALL_OW 72
41261: ST_TO_ADDR
// if tmp then
41262: LD_VAR 0 11
41266: IFFALSE 41305
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
41268: LD_ADDR_EXP 69
41272: PUSH
41273: LD_EXP 69
41277: PPUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_EXP 69
41287: PUSH
41288: LD_VAR 0 1
41292: ARRAY
41293: PUSH
41294: LD_VAR 0 11
41298: UNION
41299: PPUSH
41300: CALL_OW 1
41304: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
41305: LD_VAR 0 1
41309: PPUSH
41310: LD_INT 19
41312: PPUSH
41313: CALL 19338 0 2
// repeat wait ( 0 0$1 ) ;
41317: LD_INT 35
41319: PPUSH
41320: CALL_OW 67
// for i in defenders do
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_VAR 0 2
41333: PUSH
41334: FOR_IN
41335: IFFALSE 41424
// begin if not IsInArea ( i , mc_parking [ base ] ) then
41337: LD_VAR 0 5
41341: PPUSH
41342: LD_EXP 81
41346: PUSH
41347: LD_VAR 0 1
41351: ARRAY
41352: PPUSH
41353: CALL_OW 308
41357: NOT
41358: IFFALSE 41382
// ComMoveToArea ( i , mc_parking [ base ] ) else
41360: LD_VAR 0 5
41364: PPUSH
41365: LD_EXP 81
41369: PUSH
41370: LD_VAR 0 1
41374: ARRAY
41375: PPUSH
41376: CALL_OW 113
41380: GO 41422
// if GetControl ( i ) = control_manual then
41382: LD_VAR 0 5
41386: PPUSH
41387: CALL_OW 263
41391: PUSH
41392: LD_INT 1
41394: EQUAL
41395: IFFALSE 41422
// if IsDrivenBy ( i ) then
41397: LD_VAR 0 5
41401: PPUSH
41402: CALL_OW 311
41406: IFFALSE 41422
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
41408: LD_VAR 0 5
41412: PPUSH
41413: CALL_OW 311
41417: PPUSH
41418: CALL_OW 121
// end ;
41422: GO 41334
41424: POP
41425: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
41426: LD_VAR 0 2
41430: PPUSH
41431: LD_INT 95
41433: PUSH
41434: LD_EXP 81
41438: PUSH
41439: LD_VAR 0 1
41443: ARRAY
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PPUSH
41449: CALL_OW 72
41453: PUSH
41454: LD_VAR 0 2
41458: EQUAL
41459: PUSH
41460: LD_EXP 80
41464: PUSH
41465: LD_VAR 0 1
41469: ARRAY
41470: OR
41471: IFFALSE 41317
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
41473: LD_ADDR_EXP 79
41477: PUSH
41478: LD_EXP 79
41482: PPUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_EXP 79
41492: PUSH
41493: LD_VAR 0 1
41497: ARRAY
41498: PUSH
41499: LD_VAR 0 2
41503: UNION
41504: PPUSH
41505: CALL_OW 1
41509: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_INT 20
41517: PPUSH
41518: CALL 19338 0 2
// end ;
41522: LD_VAR 0 4
41526: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41527: LD_INT 0
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
// result := false ;
41533: LD_ADDR_VAR 0 2
41537: PUSH
41538: LD_INT 0
41540: ST_TO_ADDR
// side := GetSide ( unit ) ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 255
41555: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 248
41570: ST_TO_ADDR
// case nat of 1 :
41571: LD_VAR 0 4
41575: PUSH
41576: LD_INT 1
41578: DOUBLE
41579: EQUAL
41580: IFTRUE 41584
41582: GO 41595
41584: POP
// tech := tech_lassight ; 2 :
41585: LD_ADDR_VAR 0 5
41589: PUSH
41590: LD_INT 12
41592: ST_TO_ADDR
41593: GO 41634
41595: LD_INT 2
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41614
41603: POP
// tech := tech_mortar ; 3 :
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_INT 41
41611: ST_TO_ADDR
41612: GO 41634
41614: LD_INT 3
41616: DOUBLE
41617: EQUAL
41618: IFTRUE 41622
41620: GO 41633
41622: POP
// tech := tech_bazooka ; end ;
41623: LD_ADDR_VAR 0 5
41627: PUSH
41628: LD_INT 44
41630: ST_TO_ADDR
41631: GO 41634
41633: POP
// if Researched ( side , tech ) then
41634: LD_VAR 0 3
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: CALL_OW 325
41648: IFFALSE 41675
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41650: LD_ADDR_VAR 0 2
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 8
41660: PUSH
41661: LD_INT 9
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: PUSH
41669: LD_VAR 0 4
41673: ARRAY
41674: ST_TO_ADDR
// end ;
41675: LD_VAR 0 2
41679: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
41684: PPUSH
// if not mines then
41685: LD_VAR 0 2
41689: NOT
41690: IFFALSE 41694
// exit ;
41692: GO 41838
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_INT 81
41701: PUSH
41702: LD_VAR 0 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 21
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PPUSH
41732: CALL_OW 69
41736: ST_TO_ADDR
// for i in mines do
41737: LD_ADDR_VAR 0 4
41741: PUSH
41742: LD_VAR 0 2
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41836
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41750: LD_VAR 0 4
41754: PUSH
41755: LD_INT 1
41757: ARRAY
41758: PPUSH
41759: LD_VAR 0 4
41763: PUSH
41764: LD_INT 2
41766: ARRAY
41767: PPUSH
41768: CALL_OW 458
41772: NOT
41773: IFFALSE 41777
// continue ;
41775: GO 41747
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41777: LD_VAR 0 4
41781: PUSH
41782: LD_INT 1
41784: ARRAY
41785: PPUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_INT 2
41793: ARRAY
41794: PPUSH
41795: CALL_OW 428
41799: PUSH
41800: LD_VAR 0 5
41804: IN
41805: IFFALSE 41834
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41807: LD_VAR 0 4
41811: PUSH
41812: LD_INT 1
41814: ARRAY
41815: PPUSH
41816: LD_VAR 0 4
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: PPUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 456
// end ;
41834: GO 41747
41836: POP
41837: POP
// end ;
41838: LD_VAR 0 3
41842: RET
// export function Count ( array ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// result := 0 ;
41847: LD_ADDR_VAR 0 2
41851: PUSH
41852: LD_INT 0
41854: ST_TO_ADDR
// for i in array do
41855: LD_ADDR_VAR 0 3
41859: PUSH
41860: LD_VAR 0 1
41864: PUSH
41865: FOR_IN
41866: IFFALSE 41890
// if i then
41868: LD_VAR 0 3
41872: IFFALSE 41888
// result := result + 1 ;
41874: LD_ADDR_VAR 0 2
41878: PUSH
41879: LD_VAR 0 2
41883: PUSH
41884: LD_INT 1
41886: PLUS
41887: ST_TO_ADDR
41888: GO 41865
41890: POP
41891: POP
// end ;
41892: LD_VAR 0 2
41896: RET
// export function IsEmpty ( building ) ; begin
41897: LD_INT 0
41899: PPUSH
// if not building then
41900: LD_VAR 0 1
41904: NOT
41905: IFFALSE 41909
// exit ;
41907: GO 41952
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41909: LD_ADDR_VAR 0 2
41913: PUSH
41914: LD_VAR 0 1
41918: PUSH
41919: LD_INT 22
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 255
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 58
41938: PUSH
41939: EMPTY
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PPUSH
41946: CALL_OW 69
41950: IN
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 2
41956: RET
// export function IsNotFull ( building ) ; begin
41957: LD_INT 0
41959: PPUSH
// if not building then
41960: LD_VAR 0 1
41964: NOT
41965: IFFALSE 41969
// exit ;
41967: GO 41988
// result := UnitsInside ( building ) < 6 ;
41969: LD_ADDR_VAR 0 2
41973: PUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 313
41983: PUSH
41984: LD_INT 6
41986: LESS
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 2
41992: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41993: LD_INT 0
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
// tmp := [ ] ;
41999: LD_ADDR_VAR 0 3
42003: PUSH
42004: EMPTY
42005: ST_TO_ADDR
// list := [ ] ;
42006: LD_ADDR_VAR 0 5
42010: PUSH
42011: EMPTY
42012: ST_TO_ADDR
// for i = 16 to 25 do
42013: LD_ADDR_VAR 0 4
42017: PUSH
42018: DOUBLE
42019: LD_INT 16
42021: DEC
42022: ST_TO_ADDR
42023: LD_INT 25
42025: PUSH
42026: FOR_TO
42027: IFFALSE 42100
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_VAR 0 3
42038: PUSH
42039: LD_INT 22
42041: PUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 255
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 91
42058: PUSH
42059: LD_VAR 0 1
42063: PUSH
42064: LD_INT 6
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_VAR 0 4
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: PPUSH
42092: CALL_OW 69
42096: ADD
42097: ST_TO_ADDR
42098: GO 42026
42100: POP
42101: POP
// for i = 1 to tmp do
42102: LD_ADDR_VAR 0 4
42106: PUSH
42107: DOUBLE
42108: LD_INT 1
42110: DEC
42111: ST_TO_ADDR
42112: LD_VAR 0 3
42116: PUSH
42117: FOR_TO
42118: IFFALSE 42206
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42120: LD_ADDR_VAR 0 5
42124: PUSH
42125: LD_VAR 0 5
42129: PUSH
42130: LD_VAR 0 3
42134: PUSH
42135: LD_VAR 0 4
42139: ARRAY
42140: PPUSH
42141: CALL_OW 266
42145: PUSH
42146: LD_VAR 0 3
42150: PUSH
42151: LD_VAR 0 4
42155: ARRAY
42156: PPUSH
42157: CALL_OW 250
42161: PUSH
42162: LD_VAR 0 3
42166: PUSH
42167: LD_VAR 0 4
42171: ARRAY
42172: PPUSH
42173: CALL_OW 251
42177: PUSH
42178: LD_VAR 0 3
42182: PUSH
42183: LD_VAR 0 4
42187: ARRAY
42188: PPUSH
42189: CALL_OW 254
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: ADD
42203: ST_TO_ADDR
42204: GO 42117
42206: POP
42207: POP
// result := list ;
42208: LD_ADDR_VAR 0 2
42212: PUSH
42213: LD_VAR 0 5
42217: ST_TO_ADDR
// end ;
42218: LD_VAR 0 2
42222: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42223: LD_INT 0
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
// if not factory then
42232: LD_VAR 0 1
42236: NOT
42237: IFFALSE 42241
// exit ;
42239: GO 42766
// if control = control_apeman then
42241: LD_VAR 0 4
42245: PUSH
42246: LD_INT 5
42248: EQUAL
42249: IFFALSE 42358
// begin tmp := UnitsInside ( factory ) ;
42251: LD_ADDR_VAR 0 8
42255: PUSH
42256: LD_VAR 0 1
42260: PPUSH
42261: CALL_OW 313
42265: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42266: LD_VAR 0 8
42270: PPUSH
42271: LD_INT 25
42273: PUSH
42274: LD_INT 12
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PPUSH
42281: CALL_OW 72
42285: NOT
42286: IFFALSE 42296
// control := control_manual ;
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_INT 1
42295: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42296: LD_ADDR_VAR 0 8
42300: PUSH
42301: LD_VAR 0 1
42305: PPUSH
42306: CALL 41993 0 1
42310: ST_TO_ADDR
// if tmp then
42311: LD_VAR 0 8
42315: IFFALSE 42358
// begin for i in tmp do
42317: LD_ADDR_VAR 0 7
42321: PUSH
42322: LD_VAR 0 8
42326: PUSH
42327: FOR_IN
42328: IFFALSE 42356
// if i [ 1 ] = b_ext_radar then
42330: LD_VAR 0 7
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: PUSH
42339: LD_INT 20
42341: EQUAL
42342: IFFALSE 42354
// begin control := control_remote ;
42344: LD_ADDR_VAR 0 4
42348: PUSH
42349: LD_INT 2
42351: ST_TO_ADDR
// break ;
42352: GO 42356
// end ;
42354: GO 42327
42356: POP
42357: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 2
42367: PPUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: LD_VAR 0 4
42377: PPUSH
42378: LD_VAR 0 5
42382: PPUSH
42383: CALL_OW 448
42387: IFFALSE 42422
// begin result := [ chassis , engine , control , weapon ] ;
42389: LD_ADDR_VAR 0 6
42393: PUSH
42394: LD_VAR 0 2
42398: PUSH
42399: LD_VAR 0 3
42403: PUSH
42404: LD_VAR 0 4
42408: PUSH
42409: LD_VAR 0 5
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
// exit ;
42420: GO 42766
// end ; _chassis := AvailableChassisList ( factory ) ;
42422: LD_ADDR_VAR 0 9
42426: PUSH
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 475
42436: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42437: LD_ADDR_VAR 0 11
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 476
42451: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42452: LD_ADDR_VAR 0 12
42456: PUSH
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 477
42466: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42467: LD_ADDR_VAR 0 10
42471: PUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: CALL_OW 478
42481: ST_TO_ADDR
// if not chassis in _chassis then
42482: LD_VAR 0 2
42486: PUSH
42487: LD_VAR 0 9
42491: IN
42492: NOT
42493: IFFALSE 42519
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42495: LD_ADDR_VAR 0 2
42499: PUSH
42500: LD_VAR 0 9
42504: PUSH
42505: LD_INT 1
42507: PPUSH
42508: LD_VAR 0 9
42512: PPUSH
42513: CALL_OW 12
42517: ARRAY
42518: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42519: LD_VAR 0 2
42523: PPUSH
42524: LD_VAR 0 3
42528: PPUSH
42529: CALL 42771 0 2
42533: NOT
42534: IFFALSE 42593
// repeat engine := _engine [ 1 ] ;
42536: LD_ADDR_VAR 0 3
42540: PUSH
42541: LD_VAR 0 11
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42550: LD_ADDR_VAR 0 11
42554: PUSH
42555: LD_VAR 0 11
42559: PPUSH
42560: LD_INT 1
42562: PPUSH
42563: CALL_OW 3
42567: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42568: LD_VAR 0 2
42572: PPUSH
42573: LD_VAR 0 3
42577: PPUSH
42578: CALL 42771 0 2
42582: PUSH
42583: LD_VAR 0 11
42587: PUSH
42588: EMPTY
42589: EQUAL
42590: OR
42591: IFFALSE 42536
// if not control in _control then
42593: LD_VAR 0 4
42597: PUSH
42598: LD_VAR 0 12
42602: IN
42603: NOT
42604: IFFALSE 42630
// control := _control [ rand ( 1 , _control ) ] ;
42606: LD_ADDR_VAR 0 4
42610: PUSH
42611: LD_VAR 0 12
42615: PUSH
42616: LD_INT 1
42618: PPUSH
42619: LD_VAR 0 12
42623: PPUSH
42624: CALL_OW 12
42628: ARRAY
42629: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42630: LD_VAR 0 2
42634: PPUSH
42635: LD_VAR 0 5
42639: PPUSH
42640: CALL 42991 0 2
42644: NOT
42645: IFFALSE 42704
// repeat weapon := _weapon [ 1 ] ;
42647: LD_ADDR_VAR 0 5
42651: PUSH
42652: LD_VAR 0 10
42656: PUSH
42657: LD_INT 1
42659: ARRAY
42660: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42661: LD_ADDR_VAR 0 10
42665: PUSH
42666: LD_VAR 0 10
42670: PPUSH
42671: LD_INT 1
42673: PPUSH
42674: CALL_OW 3
42678: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42679: LD_VAR 0 2
42683: PPUSH
42684: LD_VAR 0 5
42688: PPUSH
42689: CALL 42991 0 2
42693: PUSH
42694: LD_VAR 0 10
42698: PUSH
42699: EMPTY
42700: EQUAL
42701: OR
42702: IFFALSE 42647
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42704: LD_VAR 0 1
42708: PPUSH
42709: LD_VAR 0 2
42713: PPUSH
42714: LD_VAR 0 3
42718: PPUSH
42719: LD_VAR 0 4
42723: PPUSH
42724: LD_VAR 0 5
42728: PPUSH
42729: CALL_OW 448
42733: IFFALSE 42766
// result := [ chassis , engine , control , weapon ] ;
42735: LD_ADDR_VAR 0 6
42739: PUSH
42740: LD_VAR 0 2
42744: PUSH
42745: LD_VAR 0 3
42749: PUSH
42750: LD_VAR 0 4
42754: PUSH
42755: LD_VAR 0 5
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: ST_TO_ADDR
// end ;
42766: LD_VAR 0 6
42770: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42771: LD_INT 0
42773: PPUSH
// if not chassis or not engine then
42774: LD_VAR 0 1
42778: NOT
42779: PUSH
42780: LD_VAR 0 2
42784: NOT
42785: OR
42786: IFFALSE 42790
// exit ;
42788: GO 42986
// case engine of engine_solar :
42790: LD_VAR 0 2
42794: PUSH
42795: LD_INT 2
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42841
42803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_INT 11
42811: PUSH
42812: LD_INT 12
42814: PUSH
42815: LD_INT 13
42817: PUSH
42818: LD_INT 14
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
42839: GO 42970
42841: LD_INT 1
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42849
42847: GO 42911
42849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 11
42857: PUSH
42858: LD_INT 12
42860: PUSH
42861: LD_INT 13
42863: PUSH
42864: LD_INT 14
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: LD_INT 4
42878: PUSH
42879: LD_INT 5
42881: PUSH
42882: LD_INT 21
42884: PUSH
42885: LD_INT 23
42887: PUSH
42888: LD_INT 22
42890: PUSH
42891: LD_INT 24
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
42909: GO 42970
42911: LD_INT 3
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42969
42919: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_INT 13
42927: PUSH
42928: LD_INT 14
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 4
42939: PUSH
42940: LD_INT 5
42942: PUSH
42943: LD_INT 21
42945: PUSH
42946: LD_INT 22
42948: PUSH
42949: LD_INT 23
42951: PUSH
42952: LD_INT 24
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
42967: GO 42970
42969: POP
// result := ( chassis in result ) ;
42970: LD_ADDR_VAR 0 3
42974: PUSH
42975: LD_VAR 0 1
42979: PUSH
42980: LD_VAR 0 3
42984: IN
42985: ST_TO_ADDR
// end ;
42986: LD_VAR 0 3
42990: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42991: LD_INT 0
42993: PPUSH
// if not chassis or not weapon then
42994: LD_VAR 0 1
42998: NOT
42999: PUSH
43000: LD_VAR 0 2
43004: NOT
43005: OR
43006: IFFALSE 43010
// exit ;
43008: GO 44036
// case weapon of us_machine_gun :
43010: LD_VAR 0 2
43014: PUSH
43015: LD_INT 2
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43053
43023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 4
43040: PUSH
43041: LD_INT 5
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: ST_TO_ADDR
43051: GO 44020
43053: LD_INT 3
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43091
43061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: LD_INT 4
43078: PUSH
43079: LD_INT 5
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
43089: GO 44020
43091: LD_INT 11
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43129
43099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 4
43116: PUSH
43117: LD_INT 5
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: ST_TO_ADDR
43127: GO 44020
43129: LD_INT 4
43131: DOUBLE
43132: EQUAL
43133: IFTRUE 43137
43135: GO 43163
43137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43138: LD_ADDR_VAR 0 3
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 4
43151: PUSH
43152: LD_INT 5
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
43161: GO 44020
43163: LD_INT 5
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43197
43171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43172: LD_ADDR_VAR 0 3
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 4
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
43195: GO 44020
43197: LD_INT 9
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43231
43205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: LD_INT 5
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
43229: GO 44020
43231: LD_INT 7
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43265
43239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: LD_INT 4
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
43263: GO 44020
43265: LD_INT 12
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43273
43271: GO 43299
43273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 4
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
43297: GO 44020
43299: LD_INT 13
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43307
43305: GO 43333
43307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43308: LD_ADDR_VAR 0 3
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: LD_INT 4
43321: PUSH
43322: LD_INT 5
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
43331: GO 44020
43333: LD_INT 14
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43359
43341: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 4
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: ST_TO_ADDR
43357: GO 44020
43359: LD_INT 6
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43385
43367: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 4
43375: PUSH
43376: LD_INT 5
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 44020
43385: LD_INT 10
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43411
43393: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: LD_INT 5
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: ST_TO_ADDR
43409: GO 44020
43411: LD_INT 22
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43419
43417: GO 43445
43419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43420: LD_ADDR_VAR 0 3
43424: PUSH
43425: LD_INT 11
43427: PUSH
43428: LD_INT 12
43430: PUSH
43431: LD_INT 13
43433: PUSH
43434: LD_INT 14
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
43443: GO 44020
43445: LD_INT 23
43447: DOUBLE
43448: EQUAL
43449: IFTRUE 43453
43451: GO 43479
43453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_INT 11
43461: PUSH
43462: LD_INT 12
43464: PUSH
43465: LD_INT 13
43467: PUSH
43468: LD_INT 14
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
43477: GO 44020
43479: LD_INT 24
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43513
43487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 11
43495: PUSH
43496: LD_INT 12
43498: PUSH
43499: LD_INT 13
43501: PUSH
43502: LD_INT 14
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
43511: GO 44020
43513: LD_INT 30
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43521
43519: GO 43547
43521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_INT 11
43529: PUSH
43530: LD_INT 12
43532: PUSH
43533: LD_INT 13
43535: PUSH
43536: LD_INT 14
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
43545: GO 44020
43547: LD_INT 25
43549: DOUBLE
43550: EQUAL
43551: IFTRUE 43555
43553: GO 43573
43555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43556: LD_ADDR_VAR 0 3
43560: PUSH
43561: LD_INT 13
43563: PUSH
43564: LD_INT 14
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: ST_TO_ADDR
43571: GO 44020
43573: LD_INT 27
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43599
43581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 13
43589: PUSH
43590: LD_INT 14
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: ST_TO_ADDR
43597: GO 44020
43599: LD_INT 28
43601: DOUBLE
43602: EQUAL
43603: IFTRUE 43607
43605: GO 43625
43607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_INT 13
43615: PUSH
43616: LD_INT 14
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: ST_TO_ADDR
43623: GO 44020
43625: LD_INT 29
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43633
43631: GO 43651
43633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_INT 13
43641: PUSH
43642: LD_INT 14
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: ST_TO_ADDR
43649: GO 44020
43651: LD_INT 31
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43659
43657: GO 43677
43659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43660: LD_ADDR_VAR 0 3
43664: PUSH
43665: LD_INT 13
43667: PUSH
43668: LD_INT 14
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: ST_TO_ADDR
43675: GO 44020
43677: LD_INT 26
43679: DOUBLE
43680: EQUAL
43681: IFTRUE 43685
43683: GO 43703
43685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43686: LD_ADDR_VAR 0 3
43690: PUSH
43691: LD_INT 13
43693: PUSH
43694: LD_INT 14
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: ST_TO_ADDR
43701: GO 44020
43703: LD_INT 42
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43737
43711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43712: LD_ADDR_VAR 0 3
43716: PUSH
43717: LD_INT 21
43719: PUSH
43720: LD_INT 22
43722: PUSH
43723: LD_INT 23
43725: PUSH
43726: LD_INT 24
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: ST_TO_ADDR
43735: GO 44020
43737: LD_INT 43
43739: DOUBLE
43740: EQUAL
43741: IFTRUE 43745
43743: GO 43771
43745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_INT 21
43753: PUSH
43754: LD_INT 22
43756: PUSH
43757: LD_INT 23
43759: PUSH
43760: LD_INT 24
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
43769: GO 44020
43771: LD_INT 44
43773: DOUBLE
43774: EQUAL
43775: IFTRUE 43779
43777: GO 43805
43779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: LD_INT 21
43787: PUSH
43788: LD_INT 22
43790: PUSH
43791: LD_INT 23
43793: PUSH
43794: LD_INT 24
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
43803: GO 44020
43805: LD_INT 45
43807: DOUBLE
43808: EQUAL
43809: IFTRUE 43813
43811: GO 43839
43813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43814: LD_ADDR_VAR 0 3
43818: PUSH
43819: LD_INT 21
43821: PUSH
43822: LD_INT 22
43824: PUSH
43825: LD_INT 23
43827: PUSH
43828: LD_INT 24
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
43837: GO 44020
43839: LD_INT 49
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43873
43847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_INT 21
43855: PUSH
43856: LD_INT 22
43858: PUSH
43859: LD_INT 23
43861: PUSH
43862: LD_INT 24
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
43871: GO 44020
43873: LD_INT 51
43875: DOUBLE
43876: EQUAL
43877: IFTRUE 43881
43879: GO 43907
43881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43882: LD_ADDR_VAR 0 3
43886: PUSH
43887: LD_INT 21
43889: PUSH
43890: LD_INT 22
43892: PUSH
43893: LD_INT 23
43895: PUSH
43896: LD_INT 24
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
43905: GO 44020
43907: LD_INT 52
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 43941
43915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 21
43923: PUSH
43924: LD_INT 22
43926: PUSH
43927: LD_INT 23
43929: PUSH
43930: LD_INT 24
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
43939: GO 44020
43941: LD_INT 53
43943: DOUBLE
43944: EQUAL
43945: IFTRUE 43949
43947: GO 43967
43949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43950: LD_ADDR_VAR 0 3
43954: PUSH
43955: LD_INT 23
43957: PUSH
43958: LD_INT 24
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: ST_TO_ADDR
43965: GO 44020
43967: LD_INT 46
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 43993
43975: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_INT 23
43983: PUSH
43984: LD_INT 24
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 44020
43993: LD_INT 47
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44019
44001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 23
44009: PUSH
44010: LD_INT 24
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: ST_TO_ADDR
44017: GO 44020
44019: POP
// result := ( chassis in result ) ;
44020: LD_ADDR_VAR 0 3
44024: PUSH
44025: LD_VAR 0 1
44029: PUSH
44030: LD_VAR 0 3
44034: IN
44035: ST_TO_ADDR
// end ;
44036: LD_VAR 0 3
44040: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44041: LD_INT 0
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
// result := array ;
44050: LD_ADDR_VAR 0 5
44054: PUSH
44055: LD_VAR 0 1
44059: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44060: LD_VAR 0 1
44064: NOT
44065: PUSH
44066: LD_VAR 0 2
44070: NOT
44071: OR
44072: PUSH
44073: LD_VAR 0 3
44077: NOT
44078: OR
44079: PUSH
44080: LD_VAR 0 2
44084: PUSH
44085: LD_VAR 0 1
44089: GREATER
44090: OR
44091: PUSH
44092: LD_VAR 0 3
44096: PUSH
44097: LD_VAR 0 1
44101: GREATER
44102: OR
44103: IFFALSE 44107
// exit ;
44105: GO 44403
// if direction then
44107: LD_VAR 0 4
44111: IFFALSE 44175
// begin d := 1 ;
44113: LD_ADDR_VAR 0 9
44117: PUSH
44118: LD_INT 1
44120: ST_TO_ADDR
// if i_from > i_to then
44121: LD_VAR 0 2
44125: PUSH
44126: LD_VAR 0 3
44130: GREATER
44131: IFFALSE 44157
// length := ( array - i_from ) + i_to else
44133: LD_ADDR_VAR 0 11
44137: PUSH
44138: LD_VAR 0 1
44142: PUSH
44143: LD_VAR 0 2
44147: MINUS
44148: PUSH
44149: LD_VAR 0 3
44153: PLUS
44154: ST_TO_ADDR
44155: GO 44173
// length := i_to - i_from ;
44157: LD_ADDR_VAR 0 11
44161: PUSH
44162: LD_VAR 0 3
44166: PUSH
44167: LD_VAR 0 2
44171: MINUS
44172: ST_TO_ADDR
// end else
44173: GO 44236
// begin d := - 1 ;
44175: LD_ADDR_VAR 0 9
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: ST_TO_ADDR
// if i_from > i_to then
44184: LD_VAR 0 2
44188: PUSH
44189: LD_VAR 0 3
44193: GREATER
44194: IFFALSE 44214
// length := i_from - i_to else
44196: LD_ADDR_VAR 0 11
44200: PUSH
44201: LD_VAR 0 2
44205: PUSH
44206: LD_VAR 0 3
44210: MINUS
44211: ST_TO_ADDR
44212: GO 44236
// length := ( array - i_to ) + i_from ;
44214: LD_ADDR_VAR 0 11
44218: PUSH
44219: LD_VAR 0 1
44223: PUSH
44224: LD_VAR 0 3
44228: MINUS
44229: PUSH
44230: LD_VAR 0 2
44234: PLUS
44235: ST_TO_ADDR
// end ; if not length then
44236: LD_VAR 0 11
44240: NOT
44241: IFFALSE 44245
// exit ;
44243: GO 44403
// tmp := array ;
44245: LD_ADDR_VAR 0 10
44249: PUSH
44250: LD_VAR 0 1
44254: ST_TO_ADDR
// for i = 1 to length do
44255: LD_ADDR_VAR 0 6
44259: PUSH
44260: DOUBLE
44261: LD_INT 1
44263: DEC
44264: ST_TO_ADDR
44265: LD_VAR 0 11
44269: PUSH
44270: FOR_TO
44271: IFFALSE 44391
// begin for j = 1 to array do
44273: LD_ADDR_VAR 0 7
44277: PUSH
44278: DOUBLE
44279: LD_INT 1
44281: DEC
44282: ST_TO_ADDR
44283: LD_VAR 0 1
44287: PUSH
44288: FOR_TO
44289: IFFALSE 44377
// begin k := j + d ;
44291: LD_ADDR_VAR 0 8
44295: PUSH
44296: LD_VAR 0 7
44300: PUSH
44301: LD_VAR 0 9
44305: PLUS
44306: ST_TO_ADDR
// if k > array then
44307: LD_VAR 0 8
44311: PUSH
44312: LD_VAR 0 1
44316: GREATER
44317: IFFALSE 44327
// k := 1 ;
44319: LD_ADDR_VAR 0 8
44323: PUSH
44324: LD_INT 1
44326: ST_TO_ADDR
// if not k then
44327: LD_VAR 0 8
44331: NOT
44332: IFFALSE 44344
// k := array ;
44334: LD_ADDR_VAR 0 8
44338: PUSH
44339: LD_VAR 0 1
44343: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44344: LD_ADDR_VAR 0 10
44348: PUSH
44349: LD_VAR 0 10
44353: PPUSH
44354: LD_VAR 0 8
44358: PPUSH
44359: LD_VAR 0 1
44363: PUSH
44364: LD_VAR 0 7
44368: ARRAY
44369: PPUSH
44370: CALL_OW 1
44374: ST_TO_ADDR
// end ;
44375: GO 44288
44377: POP
44378: POP
// array := tmp ;
44379: LD_ADDR_VAR 0 1
44383: PUSH
44384: LD_VAR 0 10
44388: ST_TO_ADDR
// end ;
44389: GO 44270
44391: POP
44392: POP
// result := array ;
44393: LD_ADDR_VAR 0 5
44397: PUSH
44398: LD_VAR 0 1
44402: ST_TO_ADDR
// end ;
44403: LD_VAR 0 5
44407: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
// result := 0 ;
44412: LD_ADDR_VAR 0 3
44416: PUSH
44417: LD_INT 0
44419: ST_TO_ADDR
// if not array or not value in array then
44420: LD_VAR 0 1
44424: NOT
44425: PUSH
44426: LD_VAR 0 2
44430: PUSH
44431: LD_VAR 0 1
44435: IN
44436: NOT
44437: OR
44438: IFFALSE 44442
// exit ;
44440: GO 44496
// for i = 1 to array do
44442: LD_ADDR_VAR 0 4
44446: PUSH
44447: DOUBLE
44448: LD_INT 1
44450: DEC
44451: ST_TO_ADDR
44452: LD_VAR 0 1
44456: PUSH
44457: FOR_TO
44458: IFFALSE 44494
// if value = array [ i ] then
44460: LD_VAR 0 2
44464: PUSH
44465: LD_VAR 0 1
44469: PUSH
44470: LD_VAR 0 4
44474: ARRAY
44475: EQUAL
44476: IFFALSE 44492
// begin result := i ;
44478: LD_ADDR_VAR 0 3
44482: PUSH
44483: LD_VAR 0 4
44487: ST_TO_ADDR
// exit ;
44488: POP
44489: POP
44490: GO 44496
// end ;
44492: GO 44457
44494: POP
44495: POP
// end ;
44496: LD_VAR 0 3
44500: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44501: LD_INT 0
44503: PPUSH
// vc_chassis := chassis ;
44504: LD_ADDR_OWVAR 37
44508: PUSH
44509: LD_VAR 0 1
44513: ST_TO_ADDR
// vc_engine := engine ;
44514: LD_ADDR_OWVAR 39
44518: PUSH
44519: LD_VAR 0 2
44523: ST_TO_ADDR
// vc_control := control ;
44524: LD_ADDR_OWVAR 38
44528: PUSH
44529: LD_VAR 0 3
44533: ST_TO_ADDR
// vc_weapon := weapon ;
44534: LD_ADDR_OWVAR 40
44538: PUSH
44539: LD_VAR 0 4
44543: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44544: LD_ADDR_OWVAR 41
44548: PUSH
44549: LD_VAR 0 5
44553: ST_TO_ADDR
// end ;
44554: LD_VAR 0 6
44558: RET
// export function WantPlant ( unit ) ; var task ; begin
44559: LD_INT 0
44561: PPUSH
44562: PPUSH
// result := false ;
44563: LD_ADDR_VAR 0 2
44567: PUSH
44568: LD_INT 0
44570: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44571: LD_ADDR_VAR 0 3
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 437
44585: ST_TO_ADDR
// if task then
44586: LD_VAR 0 3
44590: IFFALSE 44618
// if task [ 1 ] [ 1 ] = p then
44592: LD_VAR 0 3
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PUSH
44605: LD_STRING p
44607: EQUAL
44608: IFFALSE 44618
// result := true ;
44610: LD_ADDR_VAR 0 2
44614: PUSH
44615: LD_INT 1
44617: ST_TO_ADDR
// end ;
44618: LD_VAR 0 2
44622: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44623: LD_INT 0
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
// if pos < 1 then
44629: LD_VAR 0 2
44633: PUSH
44634: LD_INT 1
44636: LESS
44637: IFFALSE 44641
// exit ;
44639: GO 44944
// if pos = 1 then
44641: LD_VAR 0 2
44645: PUSH
44646: LD_INT 1
44648: EQUAL
44649: IFFALSE 44682
// result := Replace ( arr , pos [ 1 ] , value ) else
44651: LD_ADDR_VAR 0 4
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: LD_VAR 0 2
44665: PUSH
44666: LD_INT 1
44668: ARRAY
44669: PPUSH
44670: LD_VAR 0 3
44674: PPUSH
44675: CALL_OW 1
44679: ST_TO_ADDR
44680: GO 44944
// begin tmp := arr ;
44682: LD_ADDR_VAR 0 6
44686: PUSH
44687: LD_VAR 0 1
44691: ST_TO_ADDR
// s_arr := [ tmp ] ;
44692: LD_ADDR_VAR 0 7
44696: PUSH
44697: LD_VAR 0 6
44701: PUSH
44702: EMPTY
44703: LIST
44704: ST_TO_ADDR
// for i = 1 to pos - 1 do
44705: LD_ADDR_VAR 0 5
44709: PUSH
44710: DOUBLE
44711: LD_INT 1
44713: DEC
44714: ST_TO_ADDR
44715: LD_VAR 0 2
44719: PUSH
44720: LD_INT 1
44722: MINUS
44723: PUSH
44724: FOR_TO
44725: IFFALSE 44770
// begin tmp := tmp [ pos [ i ] ] ;
44727: LD_ADDR_VAR 0 6
44731: PUSH
44732: LD_VAR 0 6
44736: PUSH
44737: LD_VAR 0 2
44741: PUSH
44742: LD_VAR 0 5
44746: ARRAY
44747: ARRAY
44748: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44749: LD_ADDR_VAR 0 7
44753: PUSH
44754: LD_VAR 0 7
44758: PUSH
44759: LD_VAR 0 6
44763: PUSH
44764: EMPTY
44765: LIST
44766: ADD
44767: ST_TO_ADDR
// end ;
44768: GO 44724
44770: POP
44771: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44772: LD_ADDR_VAR 0 6
44776: PUSH
44777: LD_VAR 0 6
44781: PPUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_VAR 0 2
44791: ARRAY
44792: PPUSH
44793: LD_VAR 0 3
44797: PPUSH
44798: CALL_OW 1
44802: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44803: LD_ADDR_VAR 0 7
44807: PUSH
44808: LD_VAR 0 7
44812: PPUSH
44813: LD_VAR 0 7
44817: PPUSH
44818: LD_VAR 0 6
44822: PPUSH
44823: CALL_OW 1
44827: ST_TO_ADDR
// for i = s_arr downto 2 do
44828: LD_ADDR_VAR 0 5
44832: PUSH
44833: DOUBLE
44834: LD_VAR 0 7
44838: INC
44839: ST_TO_ADDR
44840: LD_INT 2
44842: PUSH
44843: FOR_DOWNTO
44844: IFFALSE 44928
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44846: LD_ADDR_VAR 0 6
44850: PUSH
44851: LD_VAR 0 7
44855: PUSH
44856: LD_VAR 0 5
44860: PUSH
44861: LD_INT 1
44863: MINUS
44864: ARRAY
44865: PPUSH
44866: LD_VAR 0 2
44870: PUSH
44871: LD_VAR 0 5
44875: PUSH
44876: LD_INT 1
44878: MINUS
44879: ARRAY
44880: PPUSH
44881: LD_VAR 0 7
44885: PUSH
44886: LD_VAR 0 5
44890: ARRAY
44891: PPUSH
44892: CALL_OW 1
44896: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44897: LD_ADDR_VAR 0 7
44901: PUSH
44902: LD_VAR 0 7
44906: PPUSH
44907: LD_VAR 0 5
44911: PUSH
44912: LD_INT 1
44914: MINUS
44915: PPUSH
44916: LD_VAR 0 6
44920: PPUSH
44921: CALL_OW 1
44925: ST_TO_ADDR
// end ;
44926: GO 44843
44928: POP
44929: POP
// result := s_arr [ 1 ] ;
44930: LD_ADDR_VAR 0 4
44934: PUSH
44935: LD_VAR 0 7
44939: PUSH
44940: LD_INT 1
44942: ARRAY
44943: ST_TO_ADDR
// end ; end ;
44944: LD_VAR 0 4
44948: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44949: LD_INT 0
44951: PPUSH
44952: PPUSH
// if not list then
44953: LD_VAR 0 1
44957: NOT
44958: IFFALSE 44962
// exit ;
44960: GO 45053
// i := list [ pos1 ] ;
44962: LD_ADDR_VAR 0 5
44966: PUSH
44967: LD_VAR 0 1
44971: PUSH
44972: LD_VAR 0 2
44976: ARRAY
44977: ST_TO_ADDR
// if not i then
44978: LD_VAR 0 5
44982: NOT
44983: IFFALSE 44987
// exit ;
44985: GO 45053
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44987: LD_ADDR_VAR 0 1
44991: PUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: LD_VAR 0 2
45001: PPUSH
45002: LD_VAR 0 1
45006: PUSH
45007: LD_VAR 0 3
45011: ARRAY
45012: PPUSH
45013: CALL_OW 1
45017: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45018: LD_ADDR_VAR 0 1
45022: PUSH
45023: LD_VAR 0 1
45027: PPUSH
45028: LD_VAR 0 3
45032: PPUSH
45033: LD_VAR 0 5
45037: PPUSH
45038: CALL_OW 1
45042: ST_TO_ADDR
// result := list ;
45043: LD_ADDR_VAR 0 4
45047: PUSH
45048: LD_VAR 0 1
45052: ST_TO_ADDR
// end ;
45053: LD_VAR 0 4
45057: RET
// export function Add ( list , pos , val ) ; begin
45058: LD_INT 0
45060: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
45061: LD_ADDR_VAR 0 4
45065: PUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: LD_VAR 0 2
45075: PPUSH
45076: LD_VAR 0 3
45080: PPUSH
45081: CALL 44623 0 3
45085: ST_TO_ADDR
45086: LD_VAR 0 4
45090: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45091: LD_INT 0
45093: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45094: LD_ADDR_VAR 0 5
45098: PUSH
45099: LD_VAR 0 1
45103: PPUSH
45104: CALL_OW 250
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 251
45118: PPUSH
45119: LD_VAR 0 2
45123: PPUSH
45124: LD_VAR 0 3
45128: PPUSH
45129: LD_VAR 0 4
45133: PPUSH
45134: CALL 45144 0 5
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 5
45143: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45144: LD_INT 0
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
// if not list then
45150: LD_VAR 0 3
45154: NOT
45155: IFFALSE 45159
// exit ;
45157: GO 45547
// result := [ ] ;
45159: LD_ADDR_VAR 0 6
45163: PUSH
45164: EMPTY
45165: ST_TO_ADDR
// for i in list do
45166: LD_ADDR_VAR 0 7
45170: PUSH
45171: LD_VAR 0 3
45175: PUSH
45176: FOR_IN
45177: IFFALSE 45379
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45179: LD_ADDR_VAR 0 9
45183: PUSH
45184: LD_VAR 0 7
45188: PPUSH
45189: LD_VAR 0 1
45193: PPUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: CALL_OW 297
45203: ST_TO_ADDR
// if not result then
45204: LD_VAR 0 6
45208: NOT
45209: IFFALSE 45235
// result := [ [ i , tmp ] ] else
45211: LD_ADDR_VAR 0 6
45215: PUSH
45216: LD_VAR 0 7
45220: PUSH
45221: LD_VAR 0 9
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: ST_TO_ADDR
45233: GO 45377
// begin if result [ result ] [ 2 ] < tmp then
45235: LD_VAR 0 6
45239: PUSH
45240: LD_VAR 0 6
45244: ARRAY
45245: PUSH
45246: LD_INT 2
45248: ARRAY
45249: PUSH
45250: LD_VAR 0 9
45254: LESS
45255: IFFALSE 45297
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45257: LD_ADDR_VAR 0 6
45261: PUSH
45262: LD_VAR 0 6
45266: PPUSH
45267: LD_VAR 0 6
45271: PUSH
45272: LD_INT 1
45274: PLUS
45275: PPUSH
45276: LD_VAR 0 7
45280: PUSH
45281: LD_VAR 0 9
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PPUSH
45290: CALL_OW 2
45294: ST_TO_ADDR
45295: GO 45377
// for j = 1 to result do
45297: LD_ADDR_VAR 0 8
45301: PUSH
45302: DOUBLE
45303: LD_INT 1
45305: DEC
45306: ST_TO_ADDR
45307: LD_VAR 0 6
45311: PUSH
45312: FOR_TO
45313: IFFALSE 45375
// begin if tmp < result [ j ] [ 2 ] then
45315: LD_VAR 0 9
45319: PUSH
45320: LD_VAR 0 6
45324: PUSH
45325: LD_VAR 0 8
45329: ARRAY
45330: PUSH
45331: LD_INT 2
45333: ARRAY
45334: LESS
45335: IFFALSE 45373
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45337: LD_ADDR_VAR 0 6
45341: PUSH
45342: LD_VAR 0 6
45346: PPUSH
45347: LD_VAR 0 8
45351: PPUSH
45352: LD_VAR 0 7
45356: PUSH
45357: LD_VAR 0 9
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PPUSH
45366: CALL_OW 2
45370: ST_TO_ADDR
// break ;
45371: GO 45375
// end ; end ;
45373: GO 45312
45375: POP
45376: POP
// end ; end ;
45377: GO 45176
45379: POP
45380: POP
// if result and not asc then
45381: LD_VAR 0 6
45385: PUSH
45386: LD_VAR 0 4
45390: NOT
45391: AND
45392: IFFALSE 45467
// begin tmp := result ;
45394: LD_ADDR_VAR 0 9
45398: PUSH
45399: LD_VAR 0 6
45403: ST_TO_ADDR
// for i = tmp downto 1 do
45404: LD_ADDR_VAR 0 7
45408: PUSH
45409: DOUBLE
45410: LD_VAR 0 9
45414: INC
45415: ST_TO_ADDR
45416: LD_INT 1
45418: PUSH
45419: FOR_DOWNTO
45420: IFFALSE 45465
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45422: LD_ADDR_VAR 0 6
45426: PUSH
45427: LD_VAR 0 6
45431: PPUSH
45432: LD_VAR 0 9
45436: PUSH
45437: LD_VAR 0 7
45441: MINUS
45442: PUSH
45443: LD_INT 1
45445: PLUS
45446: PPUSH
45447: LD_VAR 0 9
45451: PUSH
45452: LD_VAR 0 7
45456: ARRAY
45457: PPUSH
45458: CALL_OW 1
45462: ST_TO_ADDR
45463: GO 45419
45465: POP
45466: POP
// end ; tmp := [ ] ;
45467: LD_ADDR_VAR 0 9
45471: PUSH
45472: EMPTY
45473: ST_TO_ADDR
// if mode then
45474: LD_VAR 0 5
45478: IFFALSE 45547
// begin for i = 1 to result do
45480: LD_ADDR_VAR 0 7
45484: PUSH
45485: DOUBLE
45486: LD_INT 1
45488: DEC
45489: ST_TO_ADDR
45490: LD_VAR 0 6
45494: PUSH
45495: FOR_TO
45496: IFFALSE 45535
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45498: LD_ADDR_VAR 0 9
45502: PUSH
45503: LD_VAR 0 9
45507: PPUSH
45508: LD_VAR 0 7
45512: PPUSH
45513: LD_VAR 0 6
45517: PUSH
45518: LD_VAR 0 7
45522: ARRAY
45523: PUSH
45524: LD_INT 1
45526: ARRAY
45527: PPUSH
45528: CALL_OW 1
45532: ST_TO_ADDR
45533: GO 45495
45535: POP
45536: POP
// result := tmp ;
45537: LD_ADDR_VAR 0 6
45541: PUSH
45542: LD_VAR 0 9
45546: ST_TO_ADDR
// end ; end ;
45547: LD_VAR 0 6
45551: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45552: LD_INT 0
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45560: LD_ADDR_VAR 0 5
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: ST_TO_ADDR
// if not x or not y then
45582: LD_VAR 0 2
45586: NOT
45587: PUSH
45588: LD_VAR 0 3
45592: NOT
45593: OR
45594: IFFALSE 45598
// exit ;
45596: GO 47244
// if not range then
45598: LD_VAR 0 4
45602: NOT
45603: IFFALSE 45613
// range := 10 ;
45605: LD_ADDR_VAR 0 4
45609: PUSH
45610: LD_INT 10
45612: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45613: LD_ADDR_VAR 0 8
45617: PUSH
45618: LD_INT 81
45620: PUSH
45621: LD_VAR 0 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 92
45632: PUSH
45633: LD_VAR 0 2
45637: PUSH
45638: LD_VAR 0 3
45642: PUSH
45643: LD_VAR 0 4
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 21
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: PPUSH
45676: CALL_OW 69
45680: ST_TO_ADDR
// if not tmp then
45681: LD_VAR 0 8
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 47244
// for i in tmp do
45690: LD_ADDR_VAR 0 6
45694: PUSH
45695: LD_VAR 0 8
45699: PUSH
45700: FOR_IN
45701: IFFALSE 47219
// begin points := [ 0 , 0 , 0 ] ;
45703: LD_ADDR_VAR 0 9
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// bpoints := 1 ;
45722: LD_ADDR_VAR 0 10
45726: PUSH
45727: LD_INT 1
45729: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45730: LD_VAR 0 6
45734: PPUSH
45735: CALL_OW 247
45739: PUSH
45740: LD_INT 1
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45748
45746: GO 46326
45748: POP
// begin if GetClass ( i ) = 1 then
45749: LD_VAR 0 6
45753: PPUSH
45754: CALL_OW 257
45758: PUSH
45759: LD_INT 1
45761: EQUAL
45762: IFFALSE 45783
// points := [ 10 , 5 , 3 ] ;
45764: LD_ADDR_VAR 0 9
45768: PUSH
45769: LD_INT 10
45771: PUSH
45772: LD_INT 5
45774: PUSH
45775: LD_INT 3
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45783: LD_VAR 0 6
45787: PPUSH
45788: CALL_OW 257
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: LD_INT 4
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: IN
45807: IFFALSE 45828
// points := [ 3 , 2 , 1 ] ;
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45828: LD_VAR 0 6
45832: PPUSH
45833: CALL_OW 257
45837: PUSH
45838: LD_INT 5
45840: EQUAL
45841: IFFALSE 45862
// points := [ 130 , 5 , 2 ] ;
45843: LD_ADDR_VAR 0 9
45847: PUSH
45848: LD_INT 130
45850: PUSH
45851: LD_INT 5
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45862: LD_VAR 0 6
45866: PPUSH
45867: CALL_OW 257
45871: PUSH
45872: LD_INT 8
45874: EQUAL
45875: IFFALSE 45896
// points := [ 35 , 35 , 30 ] ;
45877: LD_ADDR_VAR 0 9
45881: PUSH
45882: LD_INT 35
45884: PUSH
45885: LD_INT 35
45887: PUSH
45888: LD_INT 30
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45896: LD_VAR 0 6
45900: PPUSH
45901: CALL_OW 257
45905: PUSH
45906: LD_INT 9
45908: EQUAL
45909: IFFALSE 45930
// points := [ 20 , 55 , 40 ] ;
45911: LD_ADDR_VAR 0 9
45915: PUSH
45916: LD_INT 20
45918: PUSH
45919: LD_INT 55
45921: PUSH
45922: LD_INT 40
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45930: LD_VAR 0 6
45934: PPUSH
45935: CALL_OW 257
45939: PUSH
45940: LD_INT 12
45942: PUSH
45943: LD_INT 16
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: IN
45950: IFFALSE 45971
// points := [ 5 , 3 , 2 ] ;
45952: LD_ADDR_VAR 0 9
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45971: LD_VAR 0 6
45975: PPUSH
45976: CALL_OW 257
45980: PUSH
45981: LD_INT 17
45983: EQUAL
45984: IFFALSE 46005
// points := [ 100 , 50 , 75 ] ;
45986: LD_ADDR_VAR 0 9
45990: PUSH
45991: LD_INT 100
45993: PUSH
45994: LD_INT 50
45996: PUSH
45997: LD_INT 75
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46005: LD_VAR 0 6
46009: PPUSH
46010: CALL_OW 257
46014: PUSH
46015: LD_INT 15
46017: EQUAL
46018: IFFALSE 46039
// points := [ 10 , 5 , 3 ] ;
46020: LD_ADDR_VAR 0 9
46024: PUSH
46025: LD_INT 10
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46039: LD_VAR 0 6
46043: PPUSH
46044: CALL_OW 257
46048: PUSH
46049: LD_INT 14
46051: EQUAL
46052: IFFALSE 46073
// points := [ 10 , 0 , 0 ] ;
46054: LD_ADDR_VAR 0 9
46058: PUSH
46059: LD_INT 10
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46073: LD_VAR 0 6
46077: PPUSH
46078: CALL_OW 257
46082: PUSH
46083: LD_INT 11
46085: EQUAL
46086: IFFALSE 46107
// points := [ 30 , 10 , 5 ] ;
46088: LD_ADDR_VAR 0 9
46092: PUSH
46093: LD_INT 30
46095: PUSH
46096: LD_INT 10
46098: PUSH
46099: LD_INT 5
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46107: LD_VAR 0 1
46111: PPUSH
46112: LD_INT 5
46114: PPUSH
46115: CALL_OW 321
46119: PUSH
46120: LD_INT 2
46122: EQUAL
46123: IFFALSE 46140
// bpoints := bpoints * 1.8 ;
46125: LD_ADDR_VAR 0 10
46129: PUSH
46130: LD_VAR 0 10
46134: PUSH
46135: LD_REAL  1.80000000000000E+0000
46138: MUL
46139: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46140: LD_VAR 0 6
46144: PPUSH
46145: CALL_OW 257
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: LD_INT 4
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: IN
46168: PUSH
46169: LD_VAR 0 1
46173: PPUSH
46174: LD_INT 51
46176: PPUSH
46177: CALL_OW 321
46181: PUSH
46182: LD_INT 2
46184: EQUAL
46185: AND
46186: IFFALSE 46203
// bpoints := bpoints * 1.2 ;
46188: LD_ADDR_VAR 0 10
46192: PUSH
46193: LD_VAR 0 10
46197: PUSH
46198: LD_REAL  1.20000000000000E+0000
46201: MUL
46202: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46203: LD_VAR 0 6
46207: PPUSH
46208: CALL_OW 257
46212: PUSH
46213: LD_INT 5
46215: PUSH
46216: LD_INT 7
46218: PUSH
46219: LD_INT 9
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: IN
46227: PUSH
46228: LD_VAR 0 1
46232: PPUSH
46233: LD_INT 52
46235: PPUSH
46236: CALL_OW 321
46240: PUSH
46241: LD_INT 2
46243: EQUAL
46244: AND
46245: IFFALSE 46262
// bpoints := bpoints * 1.5 ;
46247: LD_ADDR_VAR 0 10
46251: PUSH
46252: LD_VAR 0 10
46256: PUSH
46257: LD_REAL  1.50000000000000E+0000
46260: MUL
46261: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46262: LD_VAR 0 1
46266: PPUSH
46267: LD_INT 66
46269: PPUSH
46270: CALL_OW 321
46274: PUSH
46275: LD_INT 2
46277: EQUAL
46278: IFFALSE 46295
// bpoints := bpoints * 1.1 ;
46280: LD_ADDR_VAR 0 10
46284: PUSH
46285: LD_VAR 0 10
46289: PUSH
46290: LD_REAL  1.10000000000000E+0000
46293: MUL
46294: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46295: LD_ADDR_VAR 0 10
46299: PUSH
46300: LD_VAR 0 10
46304: PUSH
46305: LD_VAR 0 6
46309: PPUSH
46310: LD_INT 1
46312: PPUSH
46313: CALL_OW 259
46317: PUSH
46318: LD_REAL  1.15000000000000E+0000
46321: MUL
46322: MUL
46323: ST_TO_ADDR
// end ; unit_vehicle :
46324: GO 47148
46326: LD_INT 2
46328: DOUBLE
46329: EQUAL
46330: IFTRUE 46334
46332: GO 47136
46334: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46335: LD_VAR 0 6
46339: PPUSH
46340: CALL_OW 264
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 42
46350: PUSH
46351: LD_INT 24
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: IN
46359: IFFALSE 46380
// points := [ 25 , 5 , 3 ] ;
46361: LD_ADDR_VAR 0 9
46365: PUSH
46366: LD_INT 25
46368: PUSH
46369: LD_INT 5
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46380: LD_VAR 0 6
46384: PPUSH
46385: CALL_OW 264
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: LD_INT 43
46395: PUSH
46396: LD_INT 25
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: IN
46404: IFFALSE 46425
// points := [ 40 , 15 , 5 ] ;
46406: LD_ADDR_VAR 0 9
46410: PUSH
46411: LD_INT 40
46413: PUSH
46414: LD_INT 15
46416: PUSH
46417: LD_INT 5
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46425: LD_VAR 0 6
46429: PPUSH
46430: CALL_OW 264
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 23
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: IN
46445: IFFALSE 46466
// points := [ 7 , 25 , 8 ] ;
46447: LD_ADDR_VAR 0 9
46451: PUSH
46452: LD_INT 7
46454: PUSH
46455: LD_INT 25
46457: PUSH
46458: LD_INT 8
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46466: LD_VAR 0 6
46470: PPUSH
46471: CALL_OW 264
46475: PUSH
46476: LD_INT 5
46478: PUSH
46479: LD_INT 27
46481: PUSH
46482: LD_INT 44
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: IN
46490: IFFALSE 46511
// points := [ 14 , 50 , 16 ] ;
46492: LD_ADDR_VAR 0 9
46496: PUSH
46497: LD_INT 14
46499: PUSH
46500: LD_INT 50
46502: PUSH
46503: LD_INT 16
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46511: LD_VAR 0 6
46515: PPUSH
46516: CALL_OW 264
46520: PUSH
46521: LD_INT 6
46523: PUSH
46524: LD_INT 46
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: IN
46531: IFFALSE 46552
// points := [ 32 , 120 , 70 ] ;
46533: LD_ADDR_VAR 0 9
46537: PUSH
46538: LD_INT 32
46540: PUSH
46541: LD_INT 120
46543: PUSH
46544: LD_INT 70
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46552: LD_VAR 0 6
46556: PPUSH
46557: CALL_OW 264
46561: PUSH
46562: LD_INT 7
46564: PUSH
46565: LD_INT 28
46567: PUSH
46568: LD_INT 45
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: IN
46576: IFFALSE 46597
// points := [ 35 , 20 , 45 ] ;
46578: LD_ADDR_VAR 0 9
46582: PUSH
46583: LD_INT 35
46585: PUSH
46586: LD_INT 20
46588: PUSH
46589: LD_INT 45
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 264
46606: PUSH
46607: LD_INT 47
46609: PUSH
46610: EMPTY
46611: LIST
46612: IN
46613: IFFALSE 46634
// points := [ 67 , 45 , 75 ] ;
46615: LD_ADDR_VAR 0 9
46619: PUSH
46620: LD_INT 67
46622: PUSH
46623: LD_INT 45
46625: PUSH
46626: LD_INT 75
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46634: LD_VAR 0 6
46638: PPUSH
46639: CALL_OW 264
46643: PUSH
46644: LD_INT 26
46646: PUSH
46647: EMPTY
46648: LIST
46649: IN
46650: IFFALSE 46671
// points := [ 120 , 30 , 80 ] ;
46652: LD_ADDR_VAR 0 9
46656: PUSH
46657: LD_INT 120
46659: PUSH
46660: LD_INT 30
46662: PUSH
46663: LD_INT 80
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46671: LD_VAR 0 6
46675: PPUSH
46676: CALL_OW 264
46680: PUSH
46681: LD_INT 22
46683: PUSH
46684: EMPTY
46685: LIST
46686: IN
46687: IFFALSE 46708
// points := [ 40 , 1 , 1 ] ;
46689: LD_ADDR_VAR 0 9
46693: PUSH
46694: LD_INT 40
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46708: LD_VAR 0 6
46712: PPUSH
46713: CALL_OW 264
46717: PUSH
46718: LD_INT 29
46720: PUSH
46721: EMPTY
46722: LIST
46723: IN
46724: IFFALSE 46745
// points := [ 70 , 200 , 400 ] ;
46726: LD_ADDR_VAR 0 9
46730: PUSH
46731: LD_INT 70
46733: PUSH
46734: LD_INT 200
46736: PUSH
46737: LD_INT 400
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46745: LD_VAR 0 6
46749: PPUSH
46750: CALL_OW 264
46754: PUSH
46755: LD_INT 14
46757: PUSH
46758: LD_INT 53
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: IN
46765: IFFALSE 46786
// points := [ 40 , 10 , 20 ] ;
46767: LD_ADDR_VAR 0 9
46771: PUSH
46772: LD_INT 40
46774: PUSH
46775: LD_INT 10
46777: PUSH
46778: LD_INT 20
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46786: LD_VAR 0 6
46790: PPUSH
46791: CALL_OW 264
46795: PUSH
46796: LD_INT 9
46798: PUSH
46799: EMPTY
46800: LIST
46801: IN
46802: IFFALSE 46823
// points := [ 5 , 70 , 20 ] ;
46804: LD_ADDR_VAR 0 9
46808: PUSH
46809: LD_INT 5
46811: PUSH
46812: LD_INT 70
46814: PUSH
46815: LD_INT 20
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46823: LD_VAR 0 6
46827: PPUSH
46828: CALL_OW 264
46832: PUSH
46833: LD_INT 10
46835: PUSH
46836: EMPTY
46837: LIST
46838: IN
46839: IFFALSE 46860
// points := [ 35 , 110 , 70 ] ;
46841: LD_ADDR_VAR 0 9
46845: PUSH
46846: LD_INT 35
46848: PUSH
46849: LD_INT 110
46851: PUSH
46852: LD_INT 70
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46860: LD_VAR 0 6
46864: PPUSH
46865: CALL_OW 265
46869: PUSH
46870: LD_INT 25
46872: EQUAL
46873: IFFALSE 46894
// points := [ 80 , 65 , 100 ] ;
46875: LD_ADDR_VAR 0 9
46879: PUSH
46880: LD_INT 80
46882: PUSH
46883: LD_INT 65
46885: PUSH
46886: LD_INT 100
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46894: LD_VAR 0 6
46898: PPUSH
46899: CALL_OW 263
46903: PUSH
46904: LD_INT 1
46906: EQUAL
46907: IFFALSE 46942
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46909: LD_ADDR_VAR 0 10
46913: PUSH
46914: LD_VAR 0 10
46918: PUSH
46919: LD_VAR 0 6
46923: PPUSH
46924: CALL_OW 311
46928: PPUSH
46929: LD_INT 3
46931: PPUSH
46932: CALL_OW 259
46936: PUSH
46937: LD_INT 4
46939: MUL
46940: MUL
46941: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46942: LD_VAR 0 6
46946: PPUSH
46947: CALL_OW 263
46951: PUSH
46952: LD_INT 2
46954: EQUAL
46955: IFFALSE 47006
// begin j := IsControledBy ( i ) ;
46957: LD_ADDR_VAR 0 7
46961: PUSH
46962: LD_VAR 0 6
46966: PPUSH
46967: CALL_OW 312
46971: ST_TO_ADDR
// if j then
46972: LD_VAR 0 7
46976: IFFALSE 47006
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46978: LD_ADDR_VAR 0 10
46982: PUSH
46983: LD_VAR 0 10
46987: PUSH
46988: LD_VAR 0 7
46992: PPUSH
46993: LD_INT 3
46995: PPUSH
46996: CALL_OW 259
47000: PUSH
47001: LD_INT 3
47003: MUL
47004: MUL
47005: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47006: LD_VAR 0 6
47010: PPUSH
47011: CALL_OW 264
47015: PUSH
47016: LD_INT 5
47018: PUSH
47019: LD_INT 6
47021: PUSH
47022: LD_INT 46
47024: PUSH
47025: LD_INT 44
47027: PUSH
47028: LD_INT 47
47030: PUSH
47031: LD_INT 45
47033: PUSH
47034: LD_INT 28
47036: PUSH
47037: LD_INT 7
47039: PUSH
47040: LD_INT 27
47042: PUSH
47043: LD_INT 29
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: IN
47058: PUSH
47059: LD_VAR 0 1
47063: PPUSH
47064: LD_INT 52
47066: PPUSH
47067: CALL_OW 321
47071: PUSH
47072: LD_INT 2
47074: EQUAL
47075: AND
47076: IFFALSE 47093
// bpoints := bpoints * 1.2 ;
47078: LD_ADDR_VAR 0 10
47082: PUSH
47083: LD_VAR 0 10
47087: PUSH
47088: LD_REAL  1.20000000000000E+0000
47091: MUL
47092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47093: LD_VAR 0 6
47097: PPUSH
47098: CALL_OW 264
47102: PUSH
47103: LD_INT 6
47105: PUSH
47106: LD_INT 46
47108: PUSH
47109: LD_INT 47
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: LIST
47116: IN
47117: IFFALSE 47134
// bpoints := bpoints * 1.2 ;
47119: LD_ADDR_VAR 0 10
47123: PUSH
47124: LD_VAR 0 10
47128: PUSH
47129: LD_REAL  1.20000000000000E+0000
47132: MUL
47133: ST_TO_ADDR
// end ; unit_building :
47134: GO 47148
47136: LD_INT 3
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47144
47142: GO 47147
47144: POP
// ; end ;
47145: GO 47148
47147: POP
// for j = 1 to 3 do
47148: LD_ADDR_VAR 0 7
47152: PUSH
47153: DOUBLE
47154: LD_INT 1
47156: DEC
47157: ST_TO_ADDR
47158: LD_INT 3
47160: PUSH
47161: FOR_TO
47162: IFFALSE 47215
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47164: LD_ADDR_VAR 0 5
47168: PUSH
47169: LD_VAR 0 5
47173: PPUSH
47174: LD_VAR 0 7
47178: PPUSH
47179: LD_VAR 0 5
47183: PUSH
47184: LD_VAR 0 7
47188: ARRAY
47189: PUSH
47190: LD_VAR 0 9
47194: PUSH
47195: LD_VAR 0 7
47199: ARRAY
47200: PUSH
47201: LD_VAR 0 10
47205: MUL
47206: PLUS
47207: PPUSH
47208: CALL_OW 1
47212: ST_TO_ADDR
47213: GO 47161
47215: POP
47216: POP
// end ;
47217: GO 45700
47219: POP
47220: POP
// result := Replace ( result , 4 , tmp ) ;
47221: LD_ADDR_VAR 0 5
47225: PUSH
47226: LD_VAR 0 5
47230: PPUSH
47231: LD_INT 4
47233: PPUSH
47234: LD_VAR 0 8
47238: PPUSH
47239: CALL_OW 1
47243: ST_TO_ADDR
// end ;
47244: LD_VAR 0 5
47248: RET
// export function DangerAtRange ( unit , range ) ; begin
47249: LD_INT 0
47251: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47252: LD_ADDR_VAR 0 3
47256: PUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: CALL_OW 255
47266: PPUSH
47267: LD_VAR 0 1
47271: PPUSH
47272: CALL_OW 250
47276: PPUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 251
47286: PPUSH
47287: LD_VAR 0 2
47291: PPUSH
47292: CALL 45552 0 4
47296: ST_TO_ADDR
// end ;
47297: LD_VAR 0 3
47301: RET
// export function DangerInArea ( side , area ) ; begin
47302: LD_INT 0
47304: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47305: LD_ADDR_VAR 0 3
47309: PUSH
47310: LD_VAR 0 2
47314: PPUSH
47315: LD_INT 81
47317: PUSH
47318: LD_VAR 0 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PPUSH
47327: CALL_OW 70
47331: ST_TO_ADDR
// end ;
47332: LD_VAR 0 3
47336: RET
// export function IsExtension ( b ) ; begin
47337: LD_INT 0
47339: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47340: LD_ADDR_VAR 0 2
47344: PUSH
47345: LD_VAR 0 1
47349: PUSH
47350: LD_INT 23
47352: PUSH
47353: LD_INT 20
47355: PUSH
47356: LD_INT 22
47358: PUSH
47359: LD_INT 17
47361: PUSH
47362: LD_INT 24
47364: PUSH
47365: LD_INT 21
47367: PUSH
47368: LD_INT 19
47370: PUSH
47371: LD_INT 16
47373: PUSH
47374: LD_INT 25
47376: PUSH
47377: LD_INT 18
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: IN
47392: ST_TO_ADDR
// end ;
47393: LD_VAR 0 2
47397: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
47398: LD_INT 0
47400: PPUSH
47401: PPUSH
47402: PPUSH
// result := [ ] ;
47403: LD_ADDR_VAR 0 2
47407: PUSH
47408: EMPTY
47409: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
47410: LD_ADDR_VAR 0 3
47414: PUSH
47415: LD_INT 21
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PPUSH
47425: CALL_OW 69
47429: ST_TO_ADDR
// if not tmp then
47430: LD_VAR 0 3
47434: NOT
47435: IFFALSE 47439
// exit ;
47437: GO 47489
// for i in tmp do
47439: LD_ADDR_VAR 0 4
47443: PUSH
47444: LD_VAR 0 3
47448: PUSH
47449: FOR_IN
47450: IFFALSE 47487
// if GetBase ( i ) = base then
47452: LD_VAR 0 4
47456: PPUSH
47457: CALL_OW 274
47461: PUSH
47462: LD_VAR 0 1
47466: EQUAL
47467: IFFALSE 47485
// result := result ^ i ;
47469: LD_ADDR_VAR 0 2
47473: PUSH
47474: LD_VAR 0 2
47478: PUSH
47479: LD_VAR 0 4
47483: ADD
47484: ST_TO_ADDR
47485: GO 47449
47487: POP
47488: POP
// end ;
47489: LD_VAR 0 2
47493: RET
// export function ComComplete ( unit , b ) ; var i ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
// if BuildingStatus ( b ) = bs_build then
47498: LD_VAR 0 2
47502: PPUSH
47503: CALL_OW 461
47507: PUSH
47508: LD_INT 1
47510: EQUAL
47511: IFFALSE 47571
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47513: LD_VAR 0 1
47517: PPUSH
47518: LD_STRING h
47520: PUSH
47521: LD_VAR 0 2
47525: PPUSH
47526: CALL_OW 250
47530: PUSH
47531: LD_VAR 0 2
47535: PPUSH
47536: CALL_OW 251
47540: PUSH
47541: LD_VAR 0 2
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: PPUSH
47567: CALL_OW 446
// end ;
47571: LD_VAR 0 3
47575: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47576: LD_INT 0
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47584: LD_VAR 0 1
47588: NOT
47589: PUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL_OW 263
47599: PUSH
47600: LD_INT 2
47602: EQUAL
47603: NOT
47604: OR
47605: IFFALSE 47609
// exit ;
47607: GO 47925
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47609: LD_ADDR_VAR 0 6
47613: PUSH
47614: LD_INT 22
47616: PUSH
47617: LD_VAR 0 1
47621: PPUSH
47622: CALL_OW 255
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 30
47636: PUSH
47637: LD_INT 36
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 34
47646: PUSH
47647: LD_INT 31
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PPUSH
47663: CALL_OW 69
47667: ST_TO_ADDR
// if not tmp then
47668: LD_VAR 0 6
47672: NOT
47673: IFFALSE 47677
// exit ;
47675: GO 47925
// result := [ ] ;
47677: LD_ADDR_VAR 0 2
47681: PUSH
47682: EMPTY
47683: ST_TO_ADDR
// for i in tmp do
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_VAR 0 6
47693: PUSH
47694: FOR_IN
47695: IFFALSE 47766
// begin t := UnitsInside ( i ) ;
47697: LD_ADDR_VAR 0 4
47701: PUSH
47702: LD_VAR 0 3
47706: PPUSH
47707: CALL_OW 313
47711: ST_TO_ADDR
// if t then
47712: LD_VAR 0 4
47716: IFFALSE 47764
// for j in t do
47718: LD_ADDR_VAR 0 7
47722: PUSH
47723: LD_VAR 0 4
47727: PUSH
47728: FOR_IN
47729: IFFALSE 47762
// result := Insert ( result , result + 1 , j ) ;
47731: LD_ADDR_VAR 0 2
47735: PUSH
47736: LD_VAR 0 2
47740: PPUSH
47741: LD_VAR 0 2
47745: PUSH
47746: LD_INT 1
47748: PLUS
47749: PPUSH
47750: LD_VAR 0 7
47754: PPUSH
47755: CALL_OW 2
47759: ST_TO_ADDR
47760: GO 47728
47762: POP
47763: POP
// end ;
47764: GO 47694
47766: POP
47767: POP
// if not result then
47768: LD_VAR 0 2
47772: NOT
47773: IFFALSE 47777
// exit ;
47775: GO 47925
// mech := result [ 1 ] ;
47777: LD_ADDR_VAR 0 5
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_INT 1
47789: ARRAY
47790: ST_TO_ADDR
// if result > 1 then
47791: LD_VAR 0 2
47795: PUSH
47796: LD_INT 1
47798: GREATER
47799: IFFALSE 47911
// for i = 2 to result do
47801: LD_ADDR_VAR 0 3
47805: PUSH
47806: DOUBLE
47807: LD_INT 2
47809: DEC
47810: ST_TO_ADDR
47811: LD_VAR 0 2
47815: PUSH
47816: FOR_TO
47817: IFFALSE 47909
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47819: LD_ADDR_VAR 0 4
47823: PUSH
47824: LD_VAR 0 2
47828: PUSH
47829: LD_VAR 0 3
47833: ARRAY
47834: PPUSH
47835: LD_INT 3
47837: PPUSH
47838: CALL_OW 259
47842: PUSH
47843: LD_VAR 0 2
47847: PUSH
47848: LD_VAR 0 3
47852: ARRAY
47853: PPUSH
47854: CALL_OW 432
47858: MINUS
47859: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47860: LD_VAR 0 4
47864: PUSH
47865: LD_VAR 0 5
47869: PPUSH
47870: LD_INT 3
47872: PPUSH
47873: CALL_OW 259
47877: PUSH
47878: LD_VAR 0 5
47882: PPUSH
47883: CALL_OW 432
47887: MINUS
47888: GREATEREQUAL
47889: IFFALSE 47907
// mech := result [ i ] ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_VAR 0 3
47905: ARRAY
47906: ST_TO_ADDR
// end ;
47907: GO 47816
47909: POP
47910: POP
// ComLinkTo ( vehicle , mech ) ;
47911: LD_VAR 0 1
47915: PPUSH
47916: LD_VAR 0 5
47920: PPUSH
47921: CALL_OW 135
// end ;
47925: LD_VAR 0 2
47929: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47930: LD_INT 0
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
// result := [ ] ;
47945: LD_ADDR_VAR 0 6
47949: PUSH
47950: EMPTY
47951: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 266
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: IN
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 49496
// if name then
47977: LD_VAR 0 2
47981: IFFALSE 47997
// SetBName ( base_dep , name ) ;
47983: LD_VAR 0 1
47987: PPUSH
47988: LD_VAR 0 2
47992: PPUSH
47993: CALL_OW 500
// base := GetBase ( base_dep ) ;
47997: LD_ADDR_VAR 0 14
48001: PUSH
48002: LD_VAR 0 1
48006: PPUSH
48007: CALL_OW 274
48011: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48012: LD_ADDR_VAR 0 15
48016: PUSH
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 255
48026: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48027: LD_ADDR_VAR 0 16
48031: PUSH
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 248
48041: ST_TO_ADDR
// if sources then
48042: LD_VAR 0 4
48046: IFFALSE 48093
// for i = 1 to 3 do
48048: LD_ADDR_VAR 0 7
48052: PUSH
48053: DOUBLE
48054: LD_INT 1
48056: DEC
48057: ST_TO_ADDR
48058: LD_INT 3
48060: PUSH
48061: FOR_TO
48062: IFFALSE 48091
// AddResourceType ( base , i , sources [ i ] ) ;
48064: LD_VAR 0 14
48068: PPUSH
48069: LD_VAR 0 7
48073: PPUSH
48074: LD_VAR 0 4
48078: PUSH
48079: LD_VAR 0 7
48083: ARRAY
48084: PPUSH
48085: CALL_OW 276
48089: GO 48061
48091: POP
48092: POP
// buildings := GetBaseBuildings ( base ) ;
48093: LD_ADDR_VAR 0 17
48097: PUSH
48098: LD_VAR 0 14
48102: PPUSH
48103: CALL 47398 0 1
48107: ST_TO_ADDR
// InitHc ;
48108: CALL_OW 19
// InitUc ;
48112: CALL_OW 18
// uc_side := side ;
48116: LD_ADDR_OWVAR 20
48120: PUSH
48121: LD_VAR 0 15
48125: ST_TO_ADDR
// uc_nation := nation ;
48126: LD_ADDR_OWVAR 21
48130: PUSH
48131: LD_VAR 0 16
48135: ST_TO_ADDR
// if buildings then
48136: LD_VAR 0 17
48140: IFFALSE 49355
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48142: LD_VAR 0 17
48146: PPUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 30
48152: PUSH
48153: LD_INT 32
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 30
48162: PUSH
48163: LD_INT 33
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: LIST
48174: PPUSH
48175: CALL_OW 72
48179: IFFALSE 48262
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48181: LD_ADDR_VAR 0 7
48185: PUSH
48186: LD_VAR 0 17
48190: PPUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 30
48196: PUSH
48197: LD_INT 32
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 30
48206: PUSH
48207: LD_INT 33
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: PPUSH
48219: CALL_OW 72
48223: PUSH
48224: FOR_IN
48225: IFFALSE 48260
// begin if not GetBWeapon ( i ) then
48227: LD_VAR 0 7
48231: PPUSH
48232: CALL_OW 269
48236: NOT
48237: IFFALSE 48258
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
48239: LD_VAR 0 7
48243: PPUSH
48244: LD_VAR 0 7
48248: PPUSH
48249: CALL 49501 0 1
48253: PPUSH
48254: CALL_OW 431
// end ;
48258: GO 48224
48260: POP
48261: POP
// end ; for i = 1 to personel do
48262: LD_ADDR_VAR 0 7
48266: PUSH
48267: DOUBLE
48268: LD_INT 1
48270: DEC
48271: ST_TO_ADDR
48272: LD_VAR 0 5
48276: PUSH
48277: FOR_TO
48278: IFFALSE 49335
// begin if i > 4 then
48280: LD_VAR 0 7
48284: PUSH
48285: LD_INT 4
48287: GREATER
48288: IFFALSE 48292
// break ;
48290: GO 49335
// case i of 1 :
48292: LD_VAR 0 7
48296: PUSH
48297: LD_INT 1
48299: DOUBLE
48300: EQUAL
48301: IFTRUE 48305
48303: GO 48378
48305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48306: LD_ADDR_VAR 0 11
48310: PUSH
48311: LD_VAR 0 17
48315: PPUSH
48316: LD_INT 22
48318: PUSH
48319: LD_VAR 0 15
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 30
48333: PUSH
48334: LD_INT 32
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 30
48353: PUSH
48354: LD_INT 5
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PPUSH
48371: CALL_OW 72
48375: ST_TO_ADDR
48376: GO 48600
48378: LD_INT 2
48380: DOUBLE
48381: EQUAL
48382: IFTRUE 48386
48384: GO 48448
48386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48387: LD_ADDR_VAR 0 11
48391: PUSH
48392: LD_VAR 0 17
48396: PPUSH
48397: LD_INT 22
48399: PUSH
48400: LD_VAR 0 15
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 30
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 30
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PPUSH
48441: CALL_OW 72
48445: ST_TO_ADDR
48446: GO 48600
48448: LD_INT 3
48450: DOUBLE
48451: EQUAL
48452: IFTRUE 48456
48454: GO 48518
48456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48457: LD_ADDR_VAR 0 11
48461: PUSH
48462: LD_VAR 0 17
48466: PPUSH
48467: LD_INT 22
48469: PUSH
48470: LD_VAR 0 15
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: LD_INT 30
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 30
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PPUSH
48511: CALL_OW 72
48515: ST_TO_ADDR
48516: GO 48600
48518: LD_INT 4
48520: DOUBLE
48521: EQUAL
48522: IFTRUE 48526
48524: GO 48599
48526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48527: LD_ADDR_VAR 0 11
48531: PUSH
48532: LD_VAR 0 17
48536: PPUSH
48537: LD_INT 22
48539: PUSH
48540: LD_VAR 0 15
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 30
48554: PUSH
48555: LD_INT 6
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 30
48564: PUSH
48565: LD_INT 7
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 30
48574: PUSH
48575: LD_INT 8
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PPUSH
48592: CALL_OW 72
48596: ST_TO_ADDR
48597: GO 48600
48599: POP
// if i = 1 then
48600: LD_VAR 0 7
48604: PUSH
48605: LD_INT 1
48607: EQUAL
48608: IFFALSE 48719
// begin tmp := [ ] ;
48610: LD_ADDR_VAR 0 18
48614: PUSH
48615: EMPTY
48616: ST_TO_ADDR
// for j in f do
48617: LD_ADDR_VAR 0 8
48621: PUSH
48622: LD_VAR 0 11
48626: PUSH
48627: FOR_IN
48628: IFFALSE 48701
// if GetBType ( j ) = b_bunker then
48630: LD_VAR 0 8
48634: PPUSH
48635: CALL_OW 266
48639: PUSH
48640: LD_INT 32
48642: EQUAL
48643: IFFALSE 48670
// tmp := Insert ( tmp , 1 , j ) else
48645: LD_ADDR_VAR 0 18
48649: PUSH
48650: LD_VAR 0 18
48654: PPUSH
48655: LD_INT 1
48657: PPUSH
48658: LD_VAR 0 8
48662: PPUSH
48663: CALL_OW 2
48667: ST_TO_ADDR
48668: GO 48699
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48670: LD_ADDR_VAR 0 18
48674: PUSH
48675: LD_VAR 0 18
48679: PPUSH
48680: LD_VAR 0 18
48684: PUSH
48685: LD_INT 1
48687: PLUS
48688: PPUSH
48689: LD_VAR 0 8
48693: PPUSH
48694: CALL_OW 2
48698: ST_TO_ADDR
48699: GO 48627
48701: POP
48702: POP
// if tmp then
48703: LD_VAR 0 18
48707: IFFALSE 48719
// f := tmp ;
48709: LD_ADDR_VAR 0 11
48713: PUSH
48714: LD_VAR 0 18
48718: ST_TO_ADDR
// end ; x := personel [ i ] ;
48719: LD_ADDR_VAR 0 12
48723: PUSH
48724: LD_VAR 0 5
48728: PUSH
48729: LD_VAR 0 7
48733: ARRAY
48734: ST_TO_ADDR
// if x = - 1 then
48735: LD_VAR 0 12
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: EQUAL
48744: IFFALSE 48953
// begin for j in f do
48746: LD_ADDR_VAR 0 8
48750: PUSH
48751: LD_VAR 0 11
48755: PUSH
48756: FOR_IN
48757: IFFALSE 48949
// repeat InitHc ;
48759: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48763: LD_VAR 0 8
48767: PPUSH
48768: CALL_OW 266
48772: PUSH
48773: LD_INT 5
48775: EQUAL
48776: IFFALSE 48846
// begin if UnitsInside ( j ) < 3 then
48778: LD_VAR 0 8
48782: PPUSH
48783: CALL_OW 313
48787: PUSH
48788: LD_INT 3
48790: LESS
48791: IFFALSE 48827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48793: LD_INT 0
48795: PPUSH
48796: LD_INT 5
48798: PUSH
48799: LD_INT 8
48801: PUSH
48802: LD_INT 9
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: PUSH
48810: LD_VAR 0 16
48814: ARRAY
48815: PPUSH
48816: LD_VAR 0 3
48820: PPUSH
48821: CALL_OW 380
48825: GO 48844
// PrepareHuman ( false , i , skill ) ;
48827: LD_INT 0
48829: PPUSH
48830: LD_VAR 0 7
48834: PPUSH
48835: LD_VAR 0 3
48839: PPUSH
48840: CALL_OW 380
// end else
48844: GO 48863
// PrepareHuman ( false , i , skill ) ;
48846: LD_INT 0
48848: PPUSH
48849: LD_VAR 0 7
48853: PPUSH
48854: LD_VAR 0 3
48858: PPUSH
48859: CALL_OW 380
// un := CreateHuman ;
48863: LD_ADDR_VAR 0 13
48867: PUSH
48868: CALL_OW 44
48872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48873: LD_ADDR_VAR 0 6
48877: PUSH
48878: LD_VAR 0 6
48882: PPUSH
48883: LD_INT 1
48885: PPUSH
48886: LD_VAR 0 13
48890: PPUSH
48891: CALL_OW 2
48895: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48896: LD_VAR 0 13
48900: PPUSH
48901: LD_VAR 0 8
48905: PPUSH
48906: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48910: LD_VAR 0 8
48914: PPUSH
48915: CALL_OW 313
48919: PUSH
48920: LD_INT 6
48922: EQUAL
48923: PUSH
48924: LD_VAR 0 8
48928: PPUSH
48929: CALL_OW 266
48933: PUSH
48934: LD_INT 32
48936: PUSH
48937: LD_INT 31
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: IN
48944: OR
48945: IFFALSE 48759
48947: GO 48756
48949: POP
48950: POP
// end else
48951: GO 49333
// for j = 1 to x do
48953: LD_ADDR_VAR 0 8
48957: PUSH
48958: DOUBLE
48959: LD_INT 1
48961: DEC
48962: ST_TO_ADDR
48963: LD_VAR 0 12
48967: PUSH
48968: FOR_TO
48969: IFFALSE 49331
// begin InitHc ;
48971: CALL_OW 19
// if not f then
48975: LD_VAR 0 11
48979: NOT
48980: IFFALSE 49069
// begin PrepareHuman ( false , i , skill ) ;
48982: LD_INT 0
48984: PPUSH
48985: LD_VAR 0 7
48989: PPUSH
48990: LD_VAR 0 3
48994: PPUSH
48995: CALL_OW 380
// un := CreateHuman ;
48999: LD_ADDR_VAR 0 13
49003: PUSH
49004: CALL_OW 44
49008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49009: LD_ADDR_VAR 0 6
49013: PUSH
49014: LD_VAR 0 6
49018: PPUSH
49019: LD_INT 1
49021: PPUSH
49022: LD_VAR 0 13
49026: PPUSH
49027: CALL_OW 2
49031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49032: LD_VAR 0 13
49036: PPUSH
49037: LD_VAR 0 1
49041: PPUSH
49042: CALL_OW 250
49046: PPUSH
49047: LD_VAR 0 1
49051: PPUSH
49052: CALL_OW 251
49056: PPUSH
49057: LD_INT 10
49059: PPUSH
49060: LD_INT 0
49062: PPUSH
49063: CALL_OW 50
// continue ;
49067: GO 48968
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49069: LD_VAR 0 11
49073: PUSH
49074: LD_INT 1
49076: ARRAY
49077: PPUSH
49078: CALL_OW 313
49082: PUSH
49083: LD_VAR 0 11
49087: PUSH
49088: LD_INT 1
49090: ARRAY
49091: PPUSH
49092: CALL_OW 266
49096: PUSH
49097: LD_INT 32
49099: PUSH
49100: LD_INT 31
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: IN
49107: AND
49108: PUSH
49109: LD_VAR 0 11
49113: PUSH
49114: LD_INT 1
49116: ARRAY
49117: PPUSH
49118: CALL_OW 313
49122: PUSH
49123: LD_INT 6
49125: EQUAL
49126: OR
49127: IFFALSE 49147
// f := Delete ( f , 1 ) ;
49129: LD_ADDR_VAR 0 11
49133: PUSH
49134: LD_VAR 0 11
49138: PPUSH
49139: LD_INT 1
49141: PPUSH
49142: CALL_OW 3
49146: ST_TO_ADDR
// if not f then
49147: LD_VAR 0 11
49151: NOT
49152: IFFALSE 49170
// begin x := x + 2 ;
49154: LD_ADDR_VAR 0 12
49158: PUSH
49159: LD_VAR 0 12
49163: PUSH
49164: LD_INT 2
49166: PLUS
49167: ST_TO_ADDR
// continue ;
49168: GO 48968
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49170: LD_VAR 0 11
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: PPUSH
49179: CALL_OW 266
49183: PUSH
49184: LD_INT 5
49186: EQUAL
49187: IFFALSE 49261
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49189: LD_VAR 0 11
49193: PUSH
49194: LD_INT 1
49196: ARRAY
49197: PPUSH
49198: CALL_OW 313
49202: PUSH
49203: LD_INT 3
49205: LESS
49206: IFFALSE 49242
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49208: LD_INT 0
49210: PPUSH
49211: LD_INT 5
49213: PUSH
49214: LD_INT 8
49216: PUSH
49217: LD_INT 9
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: LD_VAR 0 16
49229: ARRAY
49230: PPUSH
49231: LD_VAR 0 3
49235: PPUSH
49236: CALL_OW 380
49240: GO 49259
// PrepareHuman ( false , i , skill ) ;
49242: LD_INT 0
49244: PPUSH
49245: LD_VAR 0 7
49249: PPUSH
49250: LD_VAR 0 3
49254: PPUSH
49255: CALL_OW 380
// end else
49259: GO 49278
// PrepareHuman ( false , i , skill ) ;
49261: LD_INT 0
49263: PPUSH
49264: LD_VAR 0 7
49268: PPUSH
49269: LD_VAR 0 3
49273: PPUSH
49274: CALL_OW 380
// un := CreateHuman ;
49278: LD_ADDR_VAR 0 13
49282: PUSH
49283: CALL_OW 44
49287: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49288: LD_ADDR_VAR 0 6
49292: PUSH
49293: LD_VAR 0 6
49297: PPUSH
49298: LD_INT 1
49300: PPUSH
49301: LD_VAR 0 13
49305: PPUSH
49306: CALL_OW 2
49310: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49311: LD_VAR 0 13
49315: PPUSH
49316: LD_VAR 0 11
49320: PUSH
49321: LD_INT 1
49323: ARRAY
49324: PPUSH
49325: CALL_OW 52
// end ;
49329: GO 48968
49331: POP
49332: POP
// end ;
49333: GO 48277
49335: POP
49336: POP
// result := result ^ buildings ;
49337: LD_ADDR_VAR 0 6
49341: PUSH
49342: LD_VAR 0 6
49346: PUSH
49347: LD_VAR 0 17
49351: ADD
49352: ST_TO_ADDR
// end else
49353: GO 49496
// begin for i = 1 to personel do
49355: LD_ADDR_VAR 0 7
49359: PUSH
49360: DOUBLE
49361: LD_INT 1
49363: DEC
49364: ST_TO_ADDR
49365: LD_VAR 0 5
49369: PUSH
49370: FOR_TO
49371: IFFALSE 49494
// begin if i > 4 then
49373: LD_VAR 0 7
49377: PUSH
49378: LD_INT 4
49380: GREATER
49381: IFFALSE 49385
// break ;
49383: GO 49494
// x := personel [ i ] ;
49385: LD_ADDR_VAR 0 12
49389: PUSH
49390: LD_VAR 0 5
49394: PUSH
49395: LD_VAR 0 7
49399: ARRAY
49400: ST_TO_ADDR
// if x = - 1 then
49401: LD_VAR 0 12
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: EQUAL
49410: IFFALSE 49414
// continue ;
49412: GO 49370
// PrepareHuman ( false , i , skill ) ;
49414: LD_INT 0
49416: PPUSH
49417: LD_VAR 0 7
49421: PPUSH
49422: LD_VAR 0 3
49426: PPUSH
49427: CALL_OW 380
// un := CreateHuman ;
49431: LD_ADDR_VAR 0 13
49435: PUSH
49436: CALL_OW 44
49440: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49441: LD_VAR 0 13
49445: PPUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: CALL_OW 250
49455: PPUSH
49456: LD_VAR 0 1
49460: PPUSH
49461: CALL_OW 251
49465: PPUSH
49466: LD_INT 10
49468: PPUSH
49469: LD_INT 0
49471: PPUSH
49472: CALL_OW 50
// result := result ^ un ;
49476: LD_ADDR_VAR 0 6
49480: PUSH
49481: LD_VAR 0 6
49485: PUSH
49486: LD_VAR 0 13
49490: ADD
49491: ST_TO_ADDR
// end ;
49492: GO 49370
49494: POP
49495: POP
// end ; end ;
49496: LD_VAR 0 6
49500: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49501: LD_INT 0
49503: PPUSH
49504: PPUSH
49505: PPUSH
49506: PPUSH
49507: PPUSH
49508: PPUSH
49509: PPUSH
49510: PPUSH
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
// result := false ;
49519: LD_ADDR_VAR 0 2
49523: PUSH
49524: LD_INT 0
49526: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49527: LD_VAR 0 1
49531: NOT
49532: PUSH
49533: LD_VAR 0 1
49537: PPUSH
49538: CALL_OW 266
49542: PUSH
49543: LD_INT 32
49545: PUSH
49546: LD_INT 33
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: IN
49553: NOT
49554: OR
49555: IFFALSE 49559
// exit ;
49557: GO 50690
// nat := GetNation ( tower ) ;
49559: LD_ADDR_VAR 0 11
49563: PUSH
49564: LD_VAR 0 1
49568: PPUSH
49569: CALL_OW 248
49573: ST_TO_ADDR
// side := GetSide ( tower ) ;
49574: LD_ADDR_VAR 0 15
49578: PUSH
49579: LD_VAR 0 1
49583: PPUSH
49584: CALL_OW 255
49588: ST_TO_ADDR
// x := GetX ( tower ) ;
49589: LD_ADDR_VAR 0 9
49593: PUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 250
49603: ST_TO_ADDR
// y := GetY ( tower ) ;
49604: LD_ADDR_VAR 0 10
49608: PUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: CALL_OW 251
49618: ST_TO_ADDR
// if not x or not y then
49619: LD_VAR 0 9
49623: NOT
49624: PUSH
49625: LD_VAR 0 10
49629: NOT
49630: OR
49631: IFFALSE 49635
// exit ;
49633: GO 50690
// weapon := 0 ;
49635: LD_ADDR_VAR 0 17
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// fac_list := [ ] ;
49643: LD_ADDR_VAR 0 16
49647: PUSH
49648: EMPTY
49649: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
49650: LD_ADDR_VAR 0 5
49654: PUSH
49655: LD_VAR 0 1
49659: PPUSH
49660: CALL_OW 274
49664: PPUSH
49665: CALL 47398 0 1
49669: PPUSH
49670: LD_INT 30
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PPUSH
49680: CALL_OW 72
49684: ST_TO_ADDR
// if not factories then
49685: LD_VAR 0 5
49689: NOT
49690: IFFALSE 49694
// exit ;
49692: GO 50690
// for i in factories do
49694: LD_ADDR_VAR 0 7
49698: PUSH
49699: LD_VAR 0 5
49703: PUSH
49704: FOR_IN
49705: IFFALSE 49730
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49707: LD_ADDR_VAR 0 16
49711: PUSH
49712: LD_VAR 0 16
49716: PUSH
49717: LD_VAR 0 7
49721: PPUSH
49722: CALL_OW 478
49726: UNION
49727: ST_TO_ADDR
49728: GO 49704
49730: POP
49731: POP
// if not fac_list then
49732: LD_VAR 0 16
49736: NOT
49737: IFFALSE 49741
// exit ;
49739: GO 50690
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49741: LD_ADDR_VAR 0 4
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: LD_INT 5
49751: PUSH
49752: LD_INT 9
49754: PUSH
49755: LD_INT 10
49757: PUSH
49758: LD_INT 6
49760: PUSH
49761: LD_INT 7
49763: PUSH
49764: LD_INT 11
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 27
49778: PUSH
49779: LD_INT 28
49781: PUSH
49782: LD_INT 26
49784: PUSH
49785: LD_INT 30
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 43
49796: PUSH
49797: LD_INT 44
49799: PUSH
49800: LD_INT 46
49802: PUSH
49803: LD_INT 45
49805: PUSH
49806: LD_INT 47
49808: PUSH
49809: LD_INT 49
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: PUSH
49825: LD_VAR 0 11
49829: ARRAY
49830: ST_TO_ADDR
// for i in list do
49831: LD_ADDR_VAR 0 7
49835: PUSH
49836: LD_VAR 0 4
49840: PUSH
49841: FOR_IN
49842: IFFALSE 49875
// if not i in fac_list then
49844: LD_VAR 0 7
49848: PUSH
49849: LD_VAR 0 16
49853: IN
49854: NOT
49855: IFFALSE 49873
// list := list diff i ;
49857: LD_ADDR_VAR 0 4
49861: PUSH
49862: LD_VAR 0 4
49866: PUSH
49867: LD_VAR 0 7
49871: DIFF
49872: ST_TO_ADDR
49873: GO 49841
49875: POP
49876: POP
// if not list then
49877: LD_VAR 0 4
49881: NOT
49882: IFFALSE 49886
// exit ;
49884: GO 50690
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49886: LD_VAR 0 11
49890: PUSH
49891: LD_INT 3
49893: EQUAL
49894: PUSH
49895: LD_INT 49
49897: PUSH
49898: LD_VAR 0 4
49902: IN
49903: AND
49904: PUSH
49905: LD_INT 31
49907: PPUSH
49908: LD_VAR 0 15
49912: PPUSH
49913: CALL_OW 321
49917: PUSH
49918: LD_INT 2
49920: EQUAL
49921: AND
49922: IFFALSE 49982
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49924: LD_INT 22
49926: PUSH
49927: LD_VAR 0 15
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 35
49938: PUSH
49939: LD_INT 49
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 91
49948: PUSH
49949: LD_VAR 0 1
49953: PUSH
49954: LD_INT 10
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: PPUSH
49967: CALL_OW 69
49971: NOT
49972: IFFALSE 49982
// weapon := ru_time_lapser ;
49974: LD_ADDR_VAR 0 17
49978: PUSH
49979: LD_INT 49
49981: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49982: LD_VAR 0 11
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: IN
49997: PUSH
49998: LD_INT 11
50000: PUSH
50001: LD_VAR 0 4
50005: IN
50006: PUSH
50007: LD_INT 30
50009: PUSH
50010: LD_VAR 0 4
50014: IN
50015: OR
50016: AND
50017: PUSH
50018: LD_INT 6
50020: PPUSH
50021: LD_VAR 0 15
50025: PPUSH
50026: CALL_OW 321
50030: PUSH
50031: LD_INT 2
50033: EQUAL
50034: AND
50035: IFFALSE 50200
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50037: LD_INT 22
50039: PUSH
50040: LD_VAR 0 15
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 35
50054: PUSH
50055: LD_INT 11
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 35
50064: PUSH
50065: LD_INT 30
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 91
50079: PUSH
50080: LD_VAR 0 1
50084: PUSH
50085: LD_INT 18
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: PPUSH
50098: CALL_OW 69
50102: NOT
50103: PUSH
50104: LD_INT 22
50106: PUSH
50107: LD_VAR 0 15
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 30
50121: PUSH
50122: LD_INT 32
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 30
50131: PUSH
50132: LD_INT 33
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 91
50146: PUSH
50147: LD_VAR 0 1
50151: PUSH
50152: LD_INT 12
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: PPUSH
50168: CALL_OW 69
50172: PUSH
50173: LD_INT 2
50175: GREATER
50176: AND
50177: IFFALSE 50200
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50179: LD_ADDR_VAR 0 17
50183: PUSH
50184: LD_INT 11
50186: PUSH
50187: LD_INT 30
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_VAR 0 11
50198: ARRAY
50199: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50200: LD_VAR 0 17
50204: NOT
50205: PUSH
50206: LD_INT 40
50208: PPUSH
50209: LD_VAR 0 15
50213: PPUSH
50214: CALL_OW 321
50218: PUSH
50219: LD_INT 2
50221: EQUAL
50222: AND
50223: PUSH
50224: LD_INT 7
50226: PUSH
50227: LD_VAR 0 4
50231: IN
50232: PUSH
50233: LD_INT 28
50235: PUSH
50236: LD_VAR 0 4
50240: IN
50241: OR
50242: PUSH
50243: LD_INT 45
50245: PUSH
50246: LD_VAR 0 4
50250: IN
50251: OR
50252: AND
50253: IFFALSE 50507
// begin hex := GetHexInfo ( x , y ) ;
50255: LD_ADDR_VAR 0 3
50259: PUSH
50260: LD_VAR 0 9
50264: PPUSH
50265: LD_VAR 0 10
50269: PPUSH
50270: CALL_OW 546
50274: ST_TO_ADDR
// if hex [ 1 ] then
50275: LD_VAR 0 3
50279: PUSH
50280: LD_INT 1
50282: ARRAY
50283: IFFALSE 50287
// exit ;
50285: GO 50690
// height := hex [ 2 ] ;
50287: LD_ADDR_VAR 0 14
50291: PUSH
50292: LD_VAR 0 3
50296: PUSH
50297: LD_INT 2
50299: ARRAY
50300: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50301: LD_ADDR_VAR 0 13
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// for i in tmp do
50324: LD_ADDR_VAR 0 7
50328: PUSH
50329: LD_VAR 0 13
50333: PUSH
50334: FOR_IN
50335: IFFALSE 50505
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50337: LD_ADDR_VAR 0 8
50341: PUSH
50342: LD_VAR 0 9
50346: PPUSH
50347: LD_VAR 0 7
50351: PPUSH
50352: LD_INT 5
50354: PPUSH
50355: CALL_OW 272
50359: PUSH
50360: LD_VAR 0 10
50364: PPUSH
50365: LD_VAR 0 7
50369: PPUSH
50370: LD_INT 5
50372: PPUSH
50373: CALL_OW 273
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50382: LD_VAR 0 8
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PPUSH
50391: LD_VAR 0 8
50395: PUSH
50396: LD_INT 2
50398: ARRAY
50399: PPUSH
50400: CALL_OW 488
50404: IFFALSE 50503
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50406: LD_ADDR_VAR 0 3
50410: PUSH
50411: LD_VAR 0 8
50415: PUSH
50416: LD_INT 1
50418: ARRAY
50419: PPUSH
50420: LD_VAR 0 8
50424: PUSH
50425: LD_INT 2
50427: ARRAY
50428: PPUSH
50429: CALL_OW 546
50433: ST_TO_ADDR
// if hex [ 1 ] then
50434: LD_VAR 0 3
50438: PUSH
50439: LD_INT 1
50441: ARRAY
50442: IFFALSE 50446
// continue ;
50444: GO 50334
// h := hex [ 2 ] ;
50446: LD_ADDR_VAR 0 12
50450: PUSH
50451: LD_VAR 0 3
50455: PUSH
50456: LD_INT 2
50458: ARRAY
50459: ST_TO_ADDR
// if h + 7 < height then
50460: LD_VAR 0 12
50464: PUSH
50465: LD_INT 7
50467: PLUS
50468: PUSH
50469: LD_VAR 0 14
50473: LESS
50474: IFFALSE 50503
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50476: LD_ADDR_VAR 0 17
50480: PUSH
50481: LD_INT 7
50483: PUSH
50484: LD_INT 28
50486: PUSH
50487: LD_INT 45
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: PUSH
50495: LD_VAR 0 11
50499: ARRAY
50500: ST_TO_ADDR
// break ;
50501: GO 50505
// end ; end ; end ;
50503: GO 50334
50505: POP
50506: POP
// end ; if not weapon then
50507: LD_VAR 0 17
50511: NOT
50512: IFFALSE 50572
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50514: LD_ADDR_VAR 0 4
50518: PUSH
50519: LD_VAR 0 4
50523: PUSH
50524: LD_INT 11
50526: PUSH
50527: LD_INT 30
50529: PUSH
50530: LD_INT 49
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: DIFF
50538: ST_TO_ADDR
// if not list then
50539: LD_VAR 0 4
50543: NOT
50544: IFFALSE 50548
// exit ;
50546: GO 50690
// weapon := list [ rand ( 1 , list ) ] ;
50548: LD_ADDR_VAR 0 17
50552: PUSH
50553: LD_VAR 0 4
50557: PUSH
50558: LD_INT 1
50560: PPUSH
50561: LD_VAR 0 4
50565: PPUSH
50566: CALL_OW 12
50570: ARRAY
50571: ST_TO_ADDR
// end ; if weapon then
50572: LD_VAR 0 17
50576: IFFALSE 50690
// begin tmp := CostOfWeapon ( weapon ) ;
50578: LD_ADDR_VAR 0 13
50582: PUSH
50583: LD_VAR 0 17
50587: PPUSH
50588: CALL_OW 451
50592: ST_TO_ADDR
// j := GetBase ( tower ) ;
50593: LD_ADDR_VAR 0 8
50597: PUSH
50598: LD_VAR 0 1
50602: PPUSH
50603: CALL_OW 274
50607: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50608: LD_VAR 0 8
50612: PPUSH
50613: LD_INT 1
50615: PPUSH
50616: CALL_OW 275
50620: PUSH
50621: LD_VAR 0 13
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: GREATEREQUAL
50630: PUSH
50631: LD_VAR 0 8
50635: PPUSH
50636: LD_INT 2
50638: PPUSH
50639: CALL_OW 275
50643: PUSH
50644: LD_VAR 0 13
50648: PUSH
50649: LD_INT 2
50651: ARRAY
50652: GREATEREQUAL
50653: AND
50654: PUSH
50655: LD_VAR 0 8
50659: PPUSH
50660: LD_INT 3
50662: PPUSH
50663: CALL_OW 275
50667: PUSH
50668: LD_VAR 0 13
50672: PUSH
50673: LD_INT 3
50675: ARRAY
50676: GREATEREQUAL
50677: AND
50678: IFFALSE 50690
// result := weapon ;
50680: LD_ADDR_VAR 0 2
50684: PUSH
50685: LD_VAR 0 17
50689: ST_TO_ADDR
// end ; end ;
50690: LD_VAR 0 2
50694: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50695: LD_INT 0
50697: PPUSH
50698: PPUSH
// result := true ;
50699: LD_ADDR_VAR 0 3
50703: PUSH
50704: LD_INT 1
50706: ST_TO_ADDR
// if array1 = array2 then
50707: LD_VAR 0 1
50711: PUSH
50712: LD_VAR 0 2
50716: EQUAL
50717: IFFALSE 50777
// begin for i = 1 to array1 do
50719: LD_ADDR_VAR 0 4
50723: PUSH
50724: DOUBLE
50725: LD_INT 1
50727: DEC
50728: ST_TO_ADDR
50729: LD_VAR 0 1
50733: PUSH
50734: FOR_TO
50735: IFFALSE 50773
// if array1 [ i ] <> array2 [ i ] then
50737: LD_VAR 0 1
50741: PUSH
50742: LD_VAR 0 4
50746: ARRAY
50747: PUSH
50748: LD_VAR 0 2
50752: PUSH
50753: LD_VAR 0 4
50757: ARRAY
50758: NONEQUAL
50759: IFFALSE 50771
// begin result := false ;
50761: LD_ADDR_VAR 0 3
50765: PUSH
50766: LD_INT 0
50768: ST_TO_ADDR
// break ;
50769: GO 50773
// end ;
50771: GO 50734
50773: POP
50774: POP
// end else
50775: GO 50785
// result := false ;
50777: LD_ADDR_VAR 0 3
50781: PUSH
50782: LD_INT 0
50784: ST_TO_ADDR
// end ;
50785: LD_VAR 0 3
50789: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50790: LD_INT 0
50792: PPUSH
50793: PPUSH
50794: PPUSH
// pom := GetBase ( fac ) ;
50795: LD_ADDR_VAR 0 5
50799: PUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: CALL_OW 274
50809: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50810: LD_ADDR_VAR 0 4
50814: PUSH
50815: LD_VAR 0 2
50819: PUSH
50820: LD_INT 1
50822: ARRAY
50823: PPUSH
50824: LD_VAR 0 2
50828: PUSH
50829: LD_INT 2
50831: ARRAY
50832: PPUSH
50833: LD_VAR 0 2
50837: PUSH
50838: LD_INT 3
50840: ARRAY
50841: PPUSH
50842: LD_VAR 0 2
50846: PUSH
50847: LD_INT 4
50849: ARRAY
50850: PPUSH
50851: CALL_OW 449
50855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50856: LD_ADDR_VAR 0 3
50860: PUSH
50861: LD_VAR 0 5
50865: PPUSH
50866: LD_INT 1
50868: PPUSH
50869: CALL_OW 275
50873: PUSH
50874: LD_VAR 0 4
50878: PUSH
50879: LD_INT 1
50881: ARRAY
50882: GREATEREQUAL
50883: PUSH
50884: LD_VAR 0 5
50888: PPUSH
50889: LD_INT 2
50891: PPUSH
50892: CALL_OW 275
50896: PUSH
50897: LD_VAR 0 4
50901: PUSH
50902: LD_INT 2
50904: ARRAY
50905: GREATEREQUAL
50906: AND
50907: PUSH
50908: LD_VAR 0 5
50912: PPUSH
50913: LD_INT 3
50915: PPUSH
50916: CALL_OW 275
50920: PUSH
50921: LD_VAR 0 4
50925: PUSH
50926: LD_INT 3
50928: ARRAY
50929: GREATEREQUAL
50930: AND
50931: ST_TO_ADDR
// end ;
50932: LD_VAR 0 3
50936: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50937: LD_INT 0
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
// pom := GetBase ( building ) ;
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_VAR 0 1
50952: PPUSH
50953: CALL_OW 274
50957: ST_TO_ADDR
// if not pom then
50958: LD_VAR 0 3
50962: NOT
50963: IFFALSE 50967
// exit ;
50965: GO 51137
// btype := GetBType ( building ) ;
50967: LD_ADDR_VAR 0 5
50971: PUSH
50972: LD_VAR 0 1
50976: PPUSH
50977: CALL_OW 266
50981: ST_TO_ADDR
// if btype = b_armoury then
50982: LD_VAR 0 5
50986: PUSH
50987: LD_INT 4
50989: EQUAL
50990: IFFALSE 51000
// btype := b_barracks ;
50992: LD_ADDR_VAR 0 5
50996: PUSH
50997: LD_INT 5
50999: ST_TO_ADDR
// if btype = b_depot then
51000: LD_VAR 0 5
51004: PUSH
51005: LD_INT 0
51007: EQUAL
51008: IFFALSE 51018
// btype := b_warehouse ;
51010: LD_ADDR_VAR 0 5
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// if btype = b_workshop then
51018: LD_VAR 0 5
51022: PUSH
51023: LD_INT 2
51025: EQUAL
51026: IFFALSE 51036
// btype := b_factory ;
51028: LD_ADDR_VAR 0 5
51032: PUSH
51033: LD_INT 3
51035: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51036: LD_ADDR_VAR 0 4
51040: PUSH
51041: LD_VAR 0 5
51045: PPUSH
51046: LD_VAR 0 1
51050: PPUSH
51051: CALL_OW 248
51055: PPUSH
51056: CALL_OW 450
51060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51061: LD_ADDR_VAR 0 2
51065: PUSH
51066: LD_VAR 0 3
51070: PPUSH
51071: LD_INT 1
51073: PPUSH
51074: CALL_OW 275
51078: PUSH
51079: LD_VAR 0 4
51083: PUSH
51084: LD_INT 1
51086: ARRAY
51087: GREATEREQUAL
51088: PUSH
51089: LD_VAR 0 3
51093: PPUSH
51094: LD_INT 2
51096: PPUSH
51097: CALL_OW 275
51101: PUSH
51102: LD_VAR 0 4
51106: PUSH
51107: LD_INT 2
51109: ARRAY
51110: GREATEREQUAL
51111: AND
51112: PUSH
51113: LD_VAR 0 3
51117: PPUSH
51118: LD_INT 3
51120: PPUSH
51121: CALL_OW 275
51125: PUSH
51126: LD_VAR 0 4
51130: PUSH
51131: LD_INT 3
51133: ARRAY
51134: GREATEREQUAL
51135: AND
51136: ST_TO_ADDR
// end ;
51137: LD_VAR 0 2
51141: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
51146: PPUSH
// pom := GetBase ( building ) ;
51147: LD_ADDR_VAR 0 4
51151: PUSH
51152: LD_VAR 0 1
51156: PPUSH
51157: CALL_OW 274
51161: ST_TO_ADDR
// if not pom then
51162: LD_VAR 0 4
51166: NOT
51167: IFFALSE 51171
// exit ;
51169: GO 51272
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51171: LD_ADDR_VAR 0 5
51175: PUSH
51176: LD_VAR 0 2
51180: PPUSH
51181: LD_VAR 0 1
51185: PPUSH
51186: CALL_OW 248
51190: PPUSH
51191: CALL_OW 450
51195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51196: LD_ADDR_VAR 0 3
51200: PUSH
51201: LD_VAR 0 4
51205: PPUSH
51206: LD_INT 1
51208: PPUSH
51209: CALL_OW 275
51213: PUSH
51214: LD_VAR 0 5
51218: PUSH
51219: LD_INT 1
51221: ARRAY
51222: GREATEREQUAL
51223: PUSH
51224: LD_VAR 0 4
51228: PPUSH
51229: LD_INT 2
51231: PPUSH
51232: CALL_OW 275
51236: PUSH
51237: LD_VAR 0 5
51241: PUSH
51242: LD_INT 2
51244: ARRAY
51245: GREATEREQUAL
51246: AND
51247: PUSH
51248: LD_VAR 0 4
51252: PPUSH
51253: LD_INT 3
51255: PPUSH
51256: CALL_OW 275
51260: PUSH
51261: LD_VAR 0 5
51265: PUSH
51266: LD_INT 3
51268: ARRAY
51269: GREATEREQUAL
51270: AND
51271: ST_TO_ADDR
// end ;
51272: LD_VAR 0 3
51276: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
51277: LD_INT 0
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
// result := false ;
51289: LD_ADDR_VAR 0 6
51293: PUSH
51294: LD_INT 0
51296: ST_TO_ADDR
// if not base or not btype or not x or not y then
51297: LD_VAR 0 1
51301: NOT
51302: PUSH
51303: LD_VAR 0 2
51307: NOT
51308: OR
51309: PUSH
51310: LD_VAR 0 3
51314: NOT
51315: OR
51316: PUSH
51317: LD_VAR 0 4
51321: NOT
51322: OR
51323: IFFALSE 51327
// exit ;
51325: GO 51841
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
51327: LD_ADDR_VAR 0 12
51331: PUSH
51332: LD_VAR 0 2
51336: PPUSH
51337: LD_VAR 0 3
51341: PPUSH
51342: LD_VAR 0 4
51346: PPUSH
51347: LD_VAR 0 5
51351: PPUSH
51352: LD_VAR 0 1
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PPUSH
51361: CALL_OW 248
51365: PPUSH
51366: LD_INT 0
51368: PPUSH
51369: CALL 52670 0 6
51373: ST_TO_ADDR
// if not hexes then
51374: LD_VAR 0 12
51378: NOT
51379: IFFALSE 51383
// exit ;
51381: GO 51841
// for i = 1 to hexes do
51383: LD_ADDR_VAR 0 7
51387: PUSH
51388: DOUBLE
51389: LD_INT 1
51391: DEC
51392: ST_TO_ADDR
51393: LD_VAR 0 12
51397: PUSH
51398: FOR_TO
51399: IFFALSE 51839
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51401: LD_ADDR_VAR 0 11
51405: PUSH
51406: LD_VAR 0 12
51410: PUSH
51411: LD_VAR 0 7
51415: ARRAY
51416: PUSH
51417: LD_INT 1
51419: ARRAY
51420: PPUSH
51421: LD_VAR 0 12
51425: PUSH
51426: LD_VAR 0 7
51430: ARRAY
51431: PUSH
51432: LD_INT 2
51434: ARRAY
51435: PPUSH
51436: CALL_OW 428
51440: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
51441: LD_VAR 0 11
51445: NOT
51446: PUSH
51447: LD_VAR 0 11
51451: PPUSH
51452: CALL_OW 247
51456: PUSH
51457: LD_INT 3
51459: EQUAL
51460: OR
51461: IFFALSE 51465
// continue ;
51463: GO 51398
// result := true ;
51465: LD_ADDR_VAR 0 6
51469: PUSH
51470: LD_INT 1
51472: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51473: LD_ADDR_VAR 0 15
51477: PUSH
51478: LD_INT 22
51480: PUSH
51481: LD_VAR 0 11
51485: PPUSH
51486: CALL_OW 255
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 30
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 30
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PPUSH
51527: CALL_OW 69
51531: ST_TO_ADDR
// if dep then
51532: LD_VAR 0 15
51536: IFFALSE 51672
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51538: LD_ADDR_VAR 0 14
51542: PUSH
51543: LD_VAR 0 15
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PPUSH
51552: CALL_OW 250
51556: PPUSH
51557: LD_VAR 0 15
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: PPUSH
51566: CALL_OW 254
51570: PPUSH
51571: LD_INT 5
51573: PPUSH
51574: CALL_OW 272
51578: PUSH
51579: LD_VAR 0 15
51583: PUSH
51584: LD_INT 1
51586: ARRAY
51587: PPUSH
51588: CALL_OW 251
51592: PPUSH
51593: LD_VAR 0 15
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: PPUSH
51602: CALL_OW 254
51606: PPUSH
51607: LD_INT 5
51609: PPUSH
51610: CALL_OW 273
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51619: LD_VAR 0 14
51623: PUSH
51624: LD_INT 1
51626: ARRAY
51627: PPUSH
51628: LD_VAR 0 14
51632: PUSH
51633: LD_INT 2
51635: ARRAY
51636: PPUSH
51637: CALL_OW 488
51641: IFFALSE 51672
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51643: LD_VAR 0 11
51647: PPUSH
51648: LD_VAR 0 14
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: PPUSH
51657: LD_VAR 0 14
51661: PUSH
51662: LD_INT 2
51664: ARRAY
51665: PPUSH
51666: CALL_OW 111
// continue ;
51670: GO 51398
// end ; end ; r := GetDir ( tmp ) ;
51672: LD_ADDR_VAR 0 13
51676: PUSH
51677: LD_VAR 0 11
51681: PPUSH
51682: CALL_OW 254
51686: ST_TO_ADDR
// if r = 5 then
51687: LD_VAR 0 13
51691: PUSH
51692: LD_INT 5
51694: EQUAL
51695: IFFALSE 51705
// r := 0 ;
51697: LD_ADDR_VAR 0 13
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// for j = r to 5 do
51705: LD_ADDR_VAR 0 8
51709: PUSH
51710: DOUBLE
51711: LD_VAR 0 13
51715: DEC
51716: ST_TO_ADDR
51717: LD_INT 5
51719: PUSH
51720: FOR_TO
51721: IFFALSE 51835
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51723: LD_ADDR_VAR 0 9
51727: PUSH
51728: LD_VAR 0 11
51732: PPUSH
51733: CALL_OW 250
51737: PPUSH
51738: LD_VAR 0 8
51742: PPUSH
51743: LD_INT 2
51745: PPUSH
51746: CALL_OW 272
51750: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51751: LD_ADDR_VAR 0 10
51755: PUSH
51756: LD_VAR 0 11
51760: PPUSH
51761: CALL_OW 251
51765: PPUSH
51766: LD_VAR 0 8
51770: PPUSH
51771: LD_INT 2
51773: PPUSH
51774: CALL_OW 273
51778: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51779: LD_VAR 0 9
51783: PPUSH
51784: LD_VAR 0 10
51788: PPUSH
51789: CALL_OW 488
51793: PUSH
51794: LD_VAR 0 9
51798: PPUSH
51799: LD_VAR 0 10
51803: PPUSH
51804: CALL_OW 428
51808: NOT
51809: AND
51810: IFFALSE 51833
// begin ComMoveXY ( tmp , _x , _y ) ;
51812: LD_VAR 0 11
51816: PPUSH
51817: LD_VAR 0 9
51821: PPUSH
51822: LD_VAR 0 10
51826: PPUSH
51827: CALL_OW 111
// break ;
51831: GO 51835
// end ; end ;
51833: GO 51720
51835: POP
51836: POP
// end ;
51837: GO 51398
51839: POP
51840: POP
// end ;
51841: LD_VAR 0 6
51845: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
51846: LD_INT 0
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
// result := false ;
51857: LD_ADDR_VAR 0 6
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51865: LD_VAR 0 1
51869: NOT
51870: PUSH
51871: LD_VAR 0 1
51875: PPUSH
51876: CALL_OW 266
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: IN
51891: NOT
51892: OR
51893: PUSH
51894: LD_VAR 0 2
51898: NOT
51899: OR
51900: PUSH
51901: LD_VAR 0 5
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 4
51920: PUSH
51921: LD_INT 5
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: IN
51932: NOT
51933: OR
51934: PUSH
51935: LD_VAR 0 3
51939: PPUSH
51940: LD_VAR 0 4
51944: PPUSH
51945: CALL_OW 488
51949: NOT
51950: OR
51951: IFFALSE 51955
// exit ;
51953: GO 52665
// pom := GetBase ( bdepot ) ;
51955: LD_ADDR_VAR 0 9
51959: PUSH
51960: LD_VAR 0 1
51964: PPUSH
51965: CALL_OW 274
51969: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
51970: LD_ADDR_VAR 0 10
51974: PUSH
51975: LD_VAR 0 2
51979: PPUSH
51980: LD_VAR 0 1
51984: PPUSH
51985: CALL_OW 248
51989: PPUSH
51990: CALL_OW 450
51994: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51995: LD_VAR 0 9
51999: PPUSH
52000: LD_INT 1
52002: PPUSH
52003: CALL_OW 275
52007: PUSH
52008: LD_VAR 0 10
52012: PUSH
52013: LD_INT 1
52015: ARRAY
52016: GREATEREQUAL
52017: PUSH
52018: LD_VAR 0 9
52022: PPUSH
52023: LD_INT 2
52025: PPUSH
52026: CALL_OW 275
52030: PUSH
52031: LD_VAR 0 10
52035: PUSH
52036: LD_INT 2
52038: ARRAY
52039: GREATEREQUAL
52040: AND
52041: PUSH
52042: LD_VAR 0 9
52046: PPUSH
52047: LD_INT 3
52049: PPUSH
52050: CALL_OW 275
52054: PUSH
52055: LD_VAR 0 10
52059: PUSH
52060: LD_INT 3
52062: ARRAY
52063: GREATEREQUAL
52064: AND
52065: NOT
52066: IFFALSE 52070
// exit ;
52068: GO 52665
// if GetBType ( bdepot ) = b_depot then
52070: LD_VAR 0 1
52074: PPUSH
52075: CALL_OW 266
52079: PUSH
52080: LD_INT 0
52082: EQUAL
52083: IFFALSE 52095
// dist := 28 else
52085: LD_ADDR_VAR 0 13
52089: PUSH
52090: LD_INT 28
52092: ST_TO_ADDR
52093: GO 52103
// dist := 36 ;
52095: LD_ADDR_VAR 0 13
52099: PUSH
52100: LD_INT 36
52102: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
52103: LD_VAR 0 1
52107: PPUSH
52108: LD_VAR 0 3
52112: PPUSH
52113: LD_VAR 0 4
52117: PPUSH
52118: CALL_OW 297
52122: PUSH
52123: LD_VAR 0 13
52127: GREATER
52128: IFFALSE 52132
// exit ;
52130: GO 52665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
52132: LD_ADDR_VAR 0 11
52136: PUSH
52137: LD_VAR 0 2
52141: PPUSH
52142: LD_VAR 0 3
52146: PPUSH
52147: LD_VAR 0 4
52151: PPUSH
52152: LD_VAR 0 5
52156: PPUSH
52157: LD_VAR 0 1
52161: PPUSH
52162: CALL_OW 248
52166: PPUSH
52167: LD_INT 0
52169: PPUSH
52170: CALL 52670 0 6
52174: ST_TO_ADDR
// if not hexes then
52175: LD_VAR 0 11
52179: NOT
52180: IFFALSE 52184
// exit ;
52182: GO 52665
// hex := GetHexInfo ( x , y ) ;
52184: LD_ADDR_VAR 0 14
52188: PUSH
52189: LD_VAR 0 3
52193: PPUSH
52194: LD_VAR 0 4
52198: PPUSH
52199: CALL_OW 546
52203: ST_TO_ADDR
// if hex [ 1 ] then
52204: LD_VAR 0 14
52208: PUSH
52209: LD_INT 1
52211: ARRAY
52212: IFFALSE 52216
// exit ;
52214: GO 52665
// height := hex [ 2 ] ;
52216: LD_ADDR_VAR 0 12
52220: PUSH
52221: LD_VAR 0 14
52225: PUSH
52226: LD_INT 2
52228: ARRAY
52229: ST_TO_ADDR
// for i = 1 to hexes do
52230: LD_ADDR_VAR 0 7
52234: PUSH
52235: DOUBLE
52236: LD_INT 1
52238: DEC
52239: ST_TO_ADDR
52240: LD_VAR 0 11
52244: PUSH
52245: FOR_TO
52246: IFFALSE 52574
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52248: LD_VAR 0 11
52252: PUSH
52253: LD_VAR 0 7
52257: ARRAY
52258: PUSH
52259: LD_INT 1
52261: ARRAY
52262: PPUSH
52263: LD_VAR 0 11
52267: PUSH
52268: LD_VAR 0 7
52272: ARRAY
52273: PUSH
52274: LD_INT 2
52276: ARRAY
52277: PPUSH
52278: CALL_OW 488
52282: NOT
52283: IFFALSE 52287
// continue ;
52285: GO 52245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52287: LD_ADDR_VAR 0 8
52291: PUSH
52292: LD_VAR 0 11
52296: PUSH
52297: LD_VAR 0 7
52301: ARRAY
52302: PUSH
52303: LD_INT 1
52305: ARRAY
52306: PPUSH
52307: LD_VAR 0 11
52311: PUSH
52312: LD_VAR 0 7
52316: ARRAY
52317: PUSH
52318: LD_INT 2
52320: ARRAY
52321: PPUSH
52322: CALL_OW 546
52326: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52327: LD_VAR 0 8
52331: PUSH
52332: LD_INT 1
52334: ARRAY
52335: PUSH
52336: LD_VAR 0 8
52340: PUSH
52341: LD_INT 2
52343: ARRAY
52344: PUSH
52345: LD_VAR 0 12
52349: PUSH
52350: LD_INT 2
52352: PLUS
52353: GREATER
52354: OR
52355: PUSH
52356: LD_VAR 0 8
52360: PUSH
52361: LD_INT 2
52363: ARRAY
52364: PUSH
52365: LD_VAR 0 12
52369: PUSH
52370: LD_INT 2
52372: MINUS
52373: LESS
52374: OR
52375: PUSH
52376: LD_VAR 0 8
52380: PUSH
52381: LD_INT 3
52383: ARRAY
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 8
52390: PUSH
52391: LD_INT 9
52393: PUSH
52394: LD_INT 10
52396: PUSH
52397: LD_INT 11
52399: PUSH
52400: LD_INT 12
52402: PUSH
52403: LD_INT 13
52405: PUSH
52406: LD_INT 16
52408: PUSH
52409: LD_INT 17
52411: PUSH
52412: LD_INT 18
52414: PUSH
52415: LD_INT 19
52417: PUSH
52418: LD_INT 20
52420: PUSH
52421: LD_INT 21
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: IN
52439: NOT
52440: OR
52441: PUSH
52442: LD_VAR 0 8
52446: PUSH
52447: LD_INT 5
52449: ARRAY
52450: NOT
52451: OR
52452: PUSH
52453: LD_VAR 0 8
52457: PUSH
52458: LD_INT 6
52460: ARRAY
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 7
52470: PUSH
52471: LD_INT 9
52473: PUSH
52474: LD_INT 10
52476: PUSH
52477: LD_INT 11
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: IN
52488: NOT
52489: OR
52490: PUSH
52491: LD_VAR 0 11
52495: PUSH
52496: LD_VAR 0 7
52500: ARRAY
52501: PUSH
52502: LD_INT 1
52504: ARRAY
52505: PPUSH
52506: LD_VAR 0 11
52510: PUSH
52511: LD_VAR 0 7
52515: ARRAY
52516: PUSH
52517: LD_INT 2
52519: ARRAY
52520: PPUSH
52521: CALL_OW 428
52525: PUSH
52526: LD_INT 0
52528: GREATER
52529: OR
52530: PUSH
52531: LD_VAR 0 11
52535: PUSH
52536: LD_VAR 0 7
52540: ARRAY
52541: PUSH
52542: LD_INT 1
52544: ARRAY
52545: PPUSH
52546: LD_VAR 0 11
52550: PUSH
52551: LD_VAR 0 7
52555: ARRAY
52556: PUSH
52557: LD_INT 2
52559: ARRAY
52560: PPUSH
52561: CALL_OW 351
52565: OR
52566: IFFALSE 52572
// exit ;
52568: POP
52569: POP
52570: GO 52665
// end ;
52572: GO 52245
52574: POP
52575: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
52576: LD_VAR 0 1
52580: PPUSH
52581: CALL_OW 255
52585: PPUSH
52586: LD_VAR 0 3
52590: PPUSH
52591: LD_VAR 0 4
52595: PPUSH
52596: LD_INT 20
52598: PPUSH
52599: CALL 45552 0 4
52603: PUSH
52604: LD_INT 4
52606: ARRAY
52607: IFFALSE 52611
// exit ;
52609: GO 52665
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
52611: LD_VAR 0 2
52615: PUSH
52616: LD_INT 29
52618: PUSH
52619: LD_INT 30
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: IN
52626: PUSH
52627: LD_VAR 0 3
52631: PPUSH
52632: LD_VAR 0 4
52636: PPUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 255
52646: PPUSH
52647: CALL_OW 440
52651: NOT
52652: AND
52653: IFFALSE 52657
// exit ;
52655: GO 52665
// result := true ;
52657: LD_ADDR_VAR 0 6
52661: PUSH
52662: LD_INT 1
52664: ST_TO_ADDR
// end ;
52665: LD_VAR 0 6
52669: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
52670: LD_INT 0
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
// result = [ ] ;
52730: LD_ADDR_VAR 0 7
52734: PUSH
52735: EMPTY
52736: ST_TO_ADDR
// temp_list = [ ] ;
52737: LD_ADDR_VAR 0 9
52741: PUSH
52742: EMPTY
52743: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52744: LD_VAR 0 4
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: IN
52775: NOT
52776: PUSH
52777: LD_VAR 0 1
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: IN
52792: PUSH
52793: LD_VAR 0 5
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: IN
52812: NOT
52813: AND
52814: OR
52815: IFFALSE 52819
// exit ;
52817: GO 71204
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52819: LD_VAR 0 1
52823: PUSH
52824: LD_INT 6
52826: PUSH
52827: LD_INT 7
52829: PUSH
52830: LD_INT 8
52832: PUSH
52833: LD_INT 13
52835: PUSH
52836: LD_INT 12
52838: PUSH
52839: LD_INT 15
52841: PUSH
52842: LD_INT 11
52844: PUSH
52845: LD_INT 14
52847: PUSH
52848: LD_INT 10
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: IN
52862: IFFALSE 52872
// btype = b_lab ;
52864: LD_ADDR_VAR 0 1
52868: PUSH
52869: LD_INT 6
52871: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52872: LD_VAR 0 6
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: IN
52891: NOT
52892: PUSH
52893: LD_VAR 0 1
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 6
52912: PUSH
52913: LD_INT 36
52915: PUSH
52916: LD_INT 4
52918: PUSH
52919: LD_INT 5
52921: PUSH
52922: LD_INT 31
52924: PUSH
52925: LD_INT 32
52927: PUSH
52928: LD_INT 33
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: IN
52944: NOT
52945: PUSH
52946: LD_VAR 0 6
52950: PUSH
52951: LD_INT 1
52953: EQUAL
52954: AND
52955: OR
52956: PUSH
52957: LD_VAR 0 1
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: IN
52972: NOT
52973: PUSH
52974: LD_VAR 0 6
52978: PUSH
52979: LD_INT 2
52981: EQUAL
52982: AND
52983: OR
52984: IFFALSE 52994
// mode = 0 ;
52986: LD_ADDR_VAR 0 6
52990: PUSH
52991: LD_INT 0
52993: ST_TO_ADDR
// case mode of 0 :
52994: LD_VAR 0 6
52998: PUSH
52999: LD_INT 0
53001: DOUBLE
53002: EQUAL
53003: IFTRUE 53007
53005: GO 64460
53007: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53008: LD_ADDR_VAR 0 11
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53201: LD_ADDR_VAR 0 12
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53397: LD_ADDR_VAR 0 13
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: NEG
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53596: LD_ADDR_VAR 0 14
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53792: LD_ADDR_VAR 0 15
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 3
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53985: LD_ADDR_VAR 0 16
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54178: LD_ADDR_VAR 0 17
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54408: LD_ADDR_VAR 0 18
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54638: LD_ADDR_VAR 0 19
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54868: LD_ADDR_VAR 0 20
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 21
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55328: LD_ADDR_VAR 0 22
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 23
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 3
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55838: LD_ADDR_VAR 0 24
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56114: LD_ADDR_VAR 0 25
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56388: LD_ADDR_VAR 0 26
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 27
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56944: LD_ADDR_VAR 0 28
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57226: LD_ADDR_VAR 0 29
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57505: LD_ADDR_VAR 0 30
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57783: LD_ADDR_VAR 0 31
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 32
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 3
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58339: LD_ADDR_VAR 0 33
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58618: LD_ADDR_VAR 0 34
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58898: LD_ADDR_VAR 0 35
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59010: LD_ADDR_VAR 0 36
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59122: LD_ADDR_VAR 0 37
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59234: LD_ADDR_VAR 0 38
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59346: LD_ADDR_VAR 0 39
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59458: LD_ADDR_VAR 0 40
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59570: LD_ADDR_VAR 0 41
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 3
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 3
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59920: LD_ADDR_VAR 0 42
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60270: LD_ADDR_VAR 0 43
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60618: LD_ADDR_VAR 0 44
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60968: LD_ADDR_VAR 0 45
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 3
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 3
61277: NEG
61278: PUSH
61279: LD_INT 3
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61318: LD_ADDR_VAR 0 46
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 3
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61666: LD_ADDR_VAR 0 47
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61817: LD_ADDR_VAR 0 48
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61964: LD_ADDR_VAR 0 49
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 2
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62108: LD_ADDR_VAR 0 50
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62252: LD_ADDR_VAR 0 51
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62399: LD_ADDR_VAR 0 52
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: LD_INT 2
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62550: LD_ADDR_VAR 0 53
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62780: LD_ADDR_VAR 0 54
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63010: LD_ADDR_VAR 0 55
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 2
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: LD_INT 2
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63240: LD_ADDR_VAR 0 56
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63470: LD_ADDR_VAR 0 57
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63700: LD_ADDR_VAR 0 58
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 2
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63930: LD_ADDR_VAR 0 59
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64018: LD_ADDR_VAR 0 60
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64106: LD_ADDR_VAR 0 61
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64194: LD_ADDR_VAR 0 62
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64282: LD_ADDR_VAR 0 63
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64370: LD_ADDR_VAR 0 64
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// end ; 1 :
64458: GO 70355
64460: LD_INT 1
64462: DOUBLE
64463: EQUAL
64464: IFTRUE 64468
64466: GO 67091
64468: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64469: LD_ADDR_VAR 0 11
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 3
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64513: LD_ADDR_VAR 0 12
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 3
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64554: LD_ADDR_VAR 0 13
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64594: LD_ADDR_VAR 0 14
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64635: LD_ADDR_VAR 0 15
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64679: LD_ADDR_VAR 0 16
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64725: LD_ADDR_VAR 0 17
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 3
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 3
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64769: LD_ADDR_VAR 0 18
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64810: LD_ADDR_VAR 0 19
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 3
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64850: LD_ADDR_VAR 0 20
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 3
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64891: LD_ADDR_VAR 0 21
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64935: LD_ADDR_VAR 0 22
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: LD_INT 3
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64981: LD_ADDR_VAR 0 23
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: LD_INT 4
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65025: LD_ADDR_VAR 0 24
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65066: LD_ADDR_VAR 0 25
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 4
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65106: LD_ADDR_VAR 0 26
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: LD_INT 4
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65147: LD_ADDR_VAR 0 27
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 4
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65191: LD_ADDR_VAR 0 28
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 3
65210: NEG
65211: PUSH
65212: LD_INT 4
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 4
65222: NEG
65223: PUSH
65224: LD_INT 3
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65237: LD_ADDR_VAR 0 29
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 3
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: LD_INT 4
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: LD_INT 5
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 5
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: LD_INT 4
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 6
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 6
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 5
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65392: LD_ADDR_VAR 0 30
65396: PUSH
65397: LD_INT 2
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 3
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 4
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 4
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 4
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 5
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 5
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 5
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 6
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 6
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65535: LD_ADDR_VAR 0 31
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 3
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 4
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 4
65582: PUSH
65583: LD_INT 4
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 3
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 4
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 6
65632: PUSH
65633: LD_INT 5
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 6
65642: PUSH
65643: LD_INT 6
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 5
65652: PUSH
65653: LD_INT 6
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65674: LD_ADDR_VAR 0 32
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 3
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: LD_INT 5
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 4
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: LD_INT 6
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 6
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 5
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65817: LD_ADDR_VAR 0 33
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 4
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 4
65892: NEG
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 5
65903: NEG
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 5
65914: NEG
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 5
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 6
65937: NEG
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 6
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65972: LD_ADDR_VAR 0 34
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 3
66003: NEG
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 4
66039: NEG
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 4
66051: NEG
66052: PUSH
66053: LD_INT 5
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 5
66063: NEG
66064: PUSH
66065: LD_INT 4
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 5
66075: NEG
66076: PUSH
66077: LD_INT 5
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 5
66087: NEG
66088: PUSH
66089: LD_INT 6
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 6
66099: NEG
66100: PUSH
66101: LD_INT 5
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 6
66111: NEG
66112: PUSH
66113: LD_INT 6
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66135: LD_ADDR_VAR 0 41
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66179: LD_ADDR_VAR 0 42
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66220: LD_ADDR_VAR 0 43
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66260: LD_ADDR_VAR 0 44
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 3
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66301: LD_ADDR_VAR 0 45
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66345: LD_ADDR_VAR 0 46
66349: PUSH
66350: LD_INT 2
66352: NEG
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66391: LD_ADDR_VAR 0 47
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 3
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66424: LD_ADDR_VAR 0 48
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66455: LD_ADDR_VAR 0 49
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66484: LD_ADDR_VAR 0 50
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66513: LD_ADDR_VAR 0 51
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 2
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66544: LD_ADDR_VAR 0 52
66548: PUSH
66549: LD_INT 3
66551: NEG
66552: PUSH
66553: LD_INT 1
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66577: LD_ADDR_VAR 0 53
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66621: LD_ADDR_VAR 0 54
66625: PUSH
66626: LD_INT 2
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66662: LD_ADDR_VAR 0 55
66666: PUSH
66667: LD_INT 3
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: LD_INT 3
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 3
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66702: LD_ADDR_VAR 0 56
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: LD_INT 3
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66743: LD_ADDR_VAR 0 57
66747: PUSH
66748: LD_INT 2
66750: NEG
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66787: LD_ADDR_VAR 0 58
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 3
66818: NEG
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66833: LD_ADDR_VAR 0 59
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: LIST
66876: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66877: LD_ADDR_VAR 0 60
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 2
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: LIST
66917: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66918: LD_ADDR_VAR 0 61
66922: PUSH
66923: LD_INT 2
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: LD_INT 2
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: LD_INT 2
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66958: LD_ADDR_VAR 0 62
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: LD_INT 2
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66999: LD_ADDR_VAR 0 63
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67043: LD_ADDR_VAR 0 64
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// end ; 2 :
67089: GO 70355
67091: LD_INT 2
67093: DOUBLE
67094: EQUAL
67095: IFTRUE 67099
67097: GO 70354
67099: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67100: LD_ADDR_VAR 0 29
67104: PUSH
67105: LD_INT 4
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 4
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 5
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 5
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 4
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 5
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 3
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: LD_INT 3
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 4
67230: PUSH
67231: LD_INT 4
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 4
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 4
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: LD_INT 3
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 4
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: LD_INT 5
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 5
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 4
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: LD_INT 3
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: PUSH
67363: LD_INT 5
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 2
67417: NEG
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 4
67439: NEG
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 4
67462: NEG
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 4
67485: NEG
67486: PUSH
67487: LD_INT 4
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 4
67497: NEG
67498: PUSH
67499: LD_INT 5
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: LD_INT 4
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 3
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 5
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 5
67557: NEG
67558: PUSH
67559: LD_INT 5
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: LD_INT 5
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 5
67581: NEG
67582: PUSH
67583: LD_INT 3
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67638: LD_ADDR_VAR 0 30
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: LD_INT 4
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 5
67665: PUSH
67666: LD_INT 4
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 5
67675: PUSH
67676: LD_INT 5
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 4
67685: PUSH
67686: LD_INT 5
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: LD_INT 4
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 5
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 5
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 3
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 4
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: LD_INT 2
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: LD_INT 4
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 2
67817: NEG
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 4
67839: NEG
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 4
67873: NEG
67874: PUSH
67875: LD_INT 1
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 5
67884: NEG
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 5
67895: NEG
67896: PUSH
67897: LD_INT 1
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 5
67907: NEG
67908: PUSH
67909: LD_INT 2
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 3
67919: NEG
67920: PUSH
67921: LD_INT 2
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: LD_INT 4
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 2
67954: NEG
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 4
67990: NEG
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: NEG
68003: PUSH
68004: LD_INT 4
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: LD_INT 4
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 5
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: LD_INT 4
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 1
68105: NEG
68106: PUSH
68107: LD_INT 5
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: LD_INT 3
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: LD_INT 5
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68185: LD_ADDR_VAR 0 31
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 4
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 5
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 5
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 4
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: LD_INT 5
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: LD_INT 3
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: LD_INT 0
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: LD_INT 0
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: NEG
68365: PUSH
68366: LD_INT 2
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: NEG
68388: PUSH
68389: LD_INT 4
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 4
68399: NEG
68400: PUSH
68401: LD_INT 5
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: LD_INT 4
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: NEG
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 3
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 5
68447: NEG
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 5
68459: NEG
68460: PUSH
68461: LD_INT 5
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: NEG
68472: PUSH
68473: LD_INT 5
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 5
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: LD_INT 3
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 2
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: LD_INT 2
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 3
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: LD_INT 4
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 2
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: LD_INT 4
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 4
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 4
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: LD_INT 1
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 4
68638: PUSH
68639: LD_INT 1
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 3
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 3
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 3
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 5
68680: PUSH
68681: LD_INT 2
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68735: LD_ADDR_VAR 0 32
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 3
68765: NEG
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: NEG
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 4
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 5
68798: NEG
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 5
68809: NEG
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: NEG
68822: PUSH
68823: LD_INT 2
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 2
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 3
68856: NEG
68857: PUSH
68858: LD_INT 4
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: LD_INT 3
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 2
68880: NEG
68881: PUSH
68882: LD_INT 2
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: LD_INT 2
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 4
68916: NEG
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 2
68928: NEG
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 4
68940: NEG
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 4
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: LD_INT 5
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: LD_INT 4
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: NEG
69008: PUSH
69009: LD_INT 4
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: LD_INT 5
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: PUSH
69032: LD_INT 3
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 2
69042: NEG
69043: PUSH
69044: LD_INT 5
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 4
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 4
69085: PUSH
69086: LD_INT 1
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 2
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 2
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 4
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 5
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 5
69177: PUSH
69178: LD_INT 5
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 4
69187: PUSH
69188: LD_INT 5
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 3
69197: PUSH
69198: LD_INT 4
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: PUSH
69208: LD_INT 3
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 5
69217: PUSH
69218: LD_INT 3
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 3
69227: PUSH
69228: LD_INT 5
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69282: LD_ADDR_VAR 0 33
69286: PUSH
69287: LD_INT 4
69289: NEG
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: NEG
69302: PUSH
69303: LD_INT 5
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 3
69313: NEG
69314: PUSH
69315: LD_INT 4
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 3
69325: NEG
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 4
69337: NEG
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 5
69349: NEG
69350: PUSH
69351: LD_INT 4
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 5
69361: NEG
69362: PUSH
69363: LD_INT 5
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 5
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 5
69385: NEG
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 3
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 4
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: LD_INT 3
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: LD_INT 2
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 4
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 2
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: NEG
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 4
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 5
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 5
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 4
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 5
69582: PUSH
69583: LD_INT 2
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 3
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: LD_INT 2
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 4
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: LD_INT 4
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: LD_INT 4
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: LD_INT 5
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: LD_INT 5
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: LD_INT 4
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: LD_INT 3
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 2
69754: PUSH
69755: LD_INT 5
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 2
69764: NEG
69765: PUSH
69766: LD_INT 3
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69820: LD_ADDR_VAR 0 34
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 4
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 5
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: LD_INT 4
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 1
69860: PUSH
69861: LD_INT 3
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 4
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 1
69894: NEG
69895: PUSH
69896: LD_INT 5
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 2
69906: PUSH
69907: LD_INT 3
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: NEG
69918: PUSH
69919: LD_INT 5
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 3
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: LD_INT 1
69942: NEG
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: LD_INT 1
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: LD_INT 1
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 2
69990: PUSH
69991: LD_INT 1
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 2
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 5
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 5
70052: PUSH
70053: LD_INT 5
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 4
70062: PUSH
70063: LD_INT 5
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: LD_INT 4
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: LD_INT 3
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 5
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: LD_INT 5
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: LD_INT 3
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: LD_INT 2
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: PUSH
70143: LD_INT 4
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: NEG
70163: PUSH
70164: LD_INT 3
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: NEG
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: LD_INT 4
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: LD_INT 2
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 4
70205: NEG
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 4
70216: NEG
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 3
70239: NEG
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 4
70250: NEG
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 5
70261: NEG
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 5
70272: NEG
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 5
70284: NEG
70285: PUSH
70286: LD_INT 2
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 3
70296: NEG
70297: PUSH
70298: LD_INT 2
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: ST_TO_ADDR
// end ; end ;
70352: GO 70355
70354: POP
// case btype of b_depot , b_warehouse :
70355: LD_VAR 0 1
70359: PUSH
70360: LD_INT 0
70362: DOUBLE
70363: EQUAL
70364: IFTRUE 70374
70366: LD_INT 1
70368: DOUBLE
70369: EQUAL
70370: IFTRUE 70374
70372: GO 70575
70374: POP
// case nation of nation_american :
70375: LD_VAR 0 5
70379: PUSH
70380: LD_INT 1
70382: DOUBLE
70383: EQUAL
70384: IFTRUE 70388
70386: GO 70444
70388: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
70389: LD_ADDR_VAR 0 9
70393: PUSH
70394: LD_VAR 0 11
70398: PUSH
70399: LD_VAR 0 12
70403: PUSH
70404: LD_VAR 0 13
70408: PUSH
70409: LD_VAR 0 14
70413: PUSH
70414: LD_VAR 0 15
70418: PUSH
70419: LD_VAR 0 16
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: PUSH
70432: LD_VAR 0 4
70436: PUSH
70437: LD_INT 1
70439: PLUS
70440: ARRAY
70441: ST_TO_ADDR
70442: GO 70573
70444: LD_INT 2
70446: DOUBLE
70447: EQUAL
70448: IFTRUE 70452
70450: GO 70508
70452: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
70453: LD_ADDR_VAR 0 9
70457: PUSH
70458: LD_VAR 0 17
70462: PUSH
70463: LD_VAR 0 18
70467: PUSH
70468: LD_VAR 0 19
70472: PUSH
70473: LD_VAR 0 20
70477: PUSH
70478: LD_VAR 0 21
70482: PUSH
70483: LD_VAR 0 22
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: PUSH
70496: LD_VAR 0 4
70500: PUSH
70501: LD_INT 1
70503: PLUS
70504: ARRAY
70505: ST_TO_ADDR
70506: GO 70573
70508: LD_INT 3
70510: DOUBLE
70511: EQUAL
70512: IFTRUE 70516
70514: GO 70572
70516: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70517: LD_ADDR_VAR 0 9
70521: PUSH
70522: LD_VAR 0 23
70526: PUSH
70527: LD_VAR 0 24
70531: PUSH
70532: LD_VAR 0 25
70536: PUSH
70537: LD_VAR 0 26
70541: PUSH
70542: LD_VAR 0 27
70546: PUSH
70547: LD_VAR 0 28
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: PUSH
70560: LD_VAR 0 4
70564: PUSH
70565: LD_INT 1
70567: PLUS
70568: ARRAY
70569: ST_TO_ADDR
70570: GO 70573
70572: POP
70573: GO 71122
70575: LD_INT 2
70577: DOUBLE
70578: EQUAL
70579: IFTRUE 70589
70581: LD_INT 3
70583: DOUBLE
70584: EQUAL
70585: IFTRUE 70589
70587: GO 70645
70589: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70590: LD_ADDR_VAR 0 9
70594: PUSH
70595: LD_VAR 0 29
70599: PUSH
70600: LD_VAR 0 30
70604: PUSH
70605: LD_VAR 0 31
70609: PUSH
70610: LD_VAR 0 32
70614: PUSH
70615: LD_VAR 0 33
70619: PUSH
70620: LD_VAR 0 34
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: PUSH
70633: LD_VAR 0 4
70637: PUSH
70638: LD_INT 1
70640: PLUS
70641: ARRAY
70642: ST_TO_ADDR
70643: GO 71122
70645: LD_INT 16
70647: DOUBLE
70648: EQUAL
70649: IFTRUE 70701
70651: LD_INT 17
70653: DOUBLE
70654: EQUAL
70655: IFTRUE 70701
70657: LD_INT 18
70659: DOUBLE
70660: EQUAL
70661: IFTRUE 70701
70663: LD_INT 19
70665: DOUBLE
70666: EQUAL
70667: IFTRUE 70701
70669: LD_INT 20
70671: DOUBLE
70672: EQUAL
70673: IFTRUE 70701
70675: LD_INT 21
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70701
70681: LD_INT 23
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70701
70687: LD_INT 24
70689: DOUBLE
70690: EQUAL
70691: IFTRUE 70701
70693: LD_INT 25
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70701
70699: GO 70757
70701: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70702: LD_ADDR_VAR 0 9
70706: PUSH
70707: LD_VAR 0 35
70711: PUSH
70712: LD_VAR 0 36
70716: PUSH
70717: LD_VAR 0 37
70721: PUSH
70722: LD_VAR 0 38
70726: PUSH
70727: LD_VAR 0 39
70731: PUSH
70732: LD_VAR 0 40
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: PUSH
70745: LD_VAR 0 4
70749: PUSH
70750: LD_INT 1
70752: PLUS
70753: ARRAY
70754: ST_TO_ADDR
70755: GO 71122
70757: LD_INT 6
70759: DOUBLE
70760: EQUAL
70761: IFTRUE 70813
70763: LD_INT 7
70765: DOUBLE
70766: EQUAL
70767: IFTRUE 70813
70769: LD_INT 8
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70813
70775: LD_INT 13
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70813
70781: LD_INT 12
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70813
70787: LD_INT 15
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70813
70793: LD_INT 11
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70813
70799: LD_INT 14
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70813
70805: LD_INT 10
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70813
70811: GO 70869
70813: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
70814: LD_ADDR_VAR 0 9
70818: PUSH
70819: LD_VAR 0 41
70823: PUSH
70824: LD_VAR 0 42
70828: PUSH
70829: LD_VAR 0 43
70833: PUSH
70834: LD_VAR 0 44
70838: PUSH
70839: LD_VAR 0 45
70843: PUSH
70844: LD_VAR 0 46
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_VAR 0 4
70861: PUSH
70862: LD_INT 1
70864: PLUS
70865: ARRAY
70866: ST_TO_ADDR
70867: GO 71122
70869: LD_INT 36
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 70933
70877: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70878: LD_ADDR_VAR 0 9
70882: PUSH
70883: LD_VAR 0 47
70887: PUSH
70888: LD_VAR 0 48
70892: PUSH
70893: LD_VAR 0 49
70897: PUSH
70898: LD_VAR 0 50
70902: PUSH
70903: LD_VAR 0 51
70907: PUSH
70908: LD_VAR 0 52
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 4
70925: PUSH
70926: LD_INT 1
70928: PLUS
70929: ARRAY
70930: ST_TO_ADDR
70931: GO 71122
70933: LD_INT 4
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70959
70939: LD_INT 5
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70959
70945: LD_INT 34
70947: DOUBLE
70948: EQUAL
70949: IFTRUE 70959
70951: LD_INT 37
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70959
70957: GO 71015
70959: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70960: LD_ADDR_VAR 0 9
70964: PUSH
70965: LD_VAR 0 53
70969: PUSH
70970: LD_VAR 0 54
70974: PUSH
70975: LD_VAR 0 55
70979: PUSH
70980: LD_VAR 0 56
70984: PUSH
70985: LD_VAR 0 57
70989: PUSH
70990: LD_VAR 0 58
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: PUSH
71003: LD_VAR 0 4
71007: PUSH
71008: LD_INT 1
71010: PLUS
71011: ARRAY
71012: ST_TO_ADDR
71013: GO 71122
71015: LD_INT 31
71017: DOUBLE
71018: EQUAL
71019: IFTRUE 71065
71021: LD_INT 32
71023: DOUBLE
71024: EQUAL
71025: IFTRUE 71065
71027: LD_INT 33
71029: DOUBLE
71030: EQUAL
71031: IFTRUE 71065
71033: LD_INT 27
71035: DOUBLE
71036: EQUAL
71037: IFTRUE 71065
71039: LD_INT 26
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71065
71045: LD_INT 28
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71065
71051: LD_INT 29
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71065
71057: LD_INT 30
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71065
71063: GO 71121
71065: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
71066: LD_ADDR_VAR 0 9
71070: PUSH
71071: LD_VAR 0 59
71075: PUSH
71076: LD_VAR 0 60
71080: PUSH
71081: LD_VAR 0 61
71085: PUSH
71086: LD_VAR 0 62
71090: PUSH
71091: LD_VAR 0 63
71095: PUSH
71096: LD_VAR 0 64
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: PUSH
71109: LD_VAR 0 4
71113: PUSH
71114: LD_INT 1
71116: PLUS
71117: ARRAY
71118: ST_TO_ADDR
71119: GO 71122
71121: POP
// temp_list2 = [ ] ;
71122: LD_ADDR_VAR 0 10
71126: PUSH
71127: EMPTY
71128: ST_TO_ADDR
// for i in temp_list do
71129: LD_ADDR_VAR 0 8
71133: PUSH
71134: LD_VAR 0 9
71138: PUSH
71139: FOR_IN
71140: IFFALSE 71192
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71142: LD_ADDR_VAR 0 10
71146: PUSH
71147: LD_VAR 0 10
71151: PUSH
71152: LD_VAR 0 8
71156: PUSH
71157: LD_INT 1
71159: ARRAY
71160: PUSH
71161: LD_VAR 0 2
71165: PLUS
71166: PUSH
71167: LD_VAR 0 8
71171: PUSH
71172: LD_INT 2
71174: ARRAY
71175: PUSH
71176: LD_VAR 0 3
71180: PLUS
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: EMPTY
71187: LIST
71188: ADD
71189: ST_TO_ADDR
71190: GO 71139
71192: POP
71193: POP
// result = temp_list2 ;
71194: LD_ADDR_VAR 0 7
71198: PUSH
71199: LD_VAR 0 10
71203: ST_TO_ADDR
// end ;
71204: LD_VAR 0 7
71208: RET
// export function EnemyInRange ( unit , dist ) ; begin
71209: LD_INT 0
71211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71212: LD_ADDR_VAR 0 3
71216: PUSH
71217: LD_VAR 0 1
71221: PPUSH
71222: CALL_OW 255
71226: PPUSH
71227: LD_VAR 0 1
71231: PPUSH
71232: CALL_OW 250
71236: PPUSH
71237: LD_VAR 0 1
71241: PPUSH
71242: CALL_OW 251
71246: PPUSH
71247: LD_VAR 0 2
71251: PPUSH
71252: CALL 45552 0 4
71256: PUSH
71257: LD_INT 4
71259: ARRAY
71260: ST_TO_ADDR
// end ;
71261: LD_VAR 0 3
71265: RET
// export function PlayerSeeMe ( unit ) ; begin
71266: LD_INT 0
71268: PPUSH
// result := See ( your_side , unit ) ;
71269: LD_ADDR_VAR 0 2
71273: PUSH
71274: LD_OWVAR 2
71278: PPUSH
71279: LD_VAR 0 1
71283: PPUSH
71284: CALL_OW 292
71288: ST_TO_ADDR
// end ;
71289: LD_VAR 0 2
71293: RET
// export function ReverseDir ( unit ) ; begin
71294: LD_INT 0
71296: PPUSH
// if not unit then
71297: LD_VAR 0 1
71301: NOT
71302: IFFALSE 71306
// exit ;
71304: GO 71352
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
71306: LD_ADDR_VAR 0 2
71310: PUSH
71311: LD_INT 3
71313: PUSH
71314: LD_INT 4
71316: PUSH
71317: LD_INT 5
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: PUSH
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 254
71346: PUSH
71347: LD_INT 1
71349: PLUS
71350: ARRAY
71351: ST_TO_ADDR
// end ;
71352: LD_VAR 0 2
71356: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71357: LD_INT 0
71359: PPUSH
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
// if not hexes then
71364: LD_VAR 0 2
71368: NOT
71369: IFFALSE 71373
// exit ;
71371: GO 71521
// dist := 9999 ;
71373: LD_ADDR_VAR 0 5
71377: PUSH
71378: LD_INT 9999
71380: ST_TO_ADDR
// for i = 1 to hexes do
71381: LD_ADDR_VAR 0 4
71385: PUSH
71386: DOUBLE
71387: LD_INT 1
71389: DEC
71390: ST_TO_ADDR
71391: LD_VAR 0 2
71395: PUSH
71396: FOR_TO
71397: IFFALSE 71509
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71399: LD_VAR 0 1
71403: PPUSH
71404: LD_VAR 0 2
71408: PUSH
71409: LD_VAR 0 4
71413: ARRAY
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PPUSH
71419: LD_VAR 0 2
71423: PUSH
71424: LD_VAR 0 4
71428: ARRAY
71429: PUSH
71430: LD_INT 2
71432: ARRAY
71433: PPUSH
71434: CALL_OW 297
71438: PUSH
71439: LD_VAR 0 5
71443: LESS
71444: IFFALSE 71507
// begin hex := hexes [ i ] ;
71446: LD_ADDR_VAR 0 7
71450: PUSH
71451: LD_VAR 0 2
71455: PUSH
71456: LD_VAR 0 4
71460: ARRAY
71461: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71462: LD_ADDR_VAR 0 5
71466: PUSH
71467: LD_VAR 0 1
71471: PPUSH
71472: LD_VAR 0 2
71476: PUSH
71477: LD_VAR 0 4
71481: ARRAY
71482: PUSH
71483: LD_INT 1
71485: ARRAY
71486: PPUSH
71487: LD_VAR 0 2
71491: PUSH
71492: LD_VAR 0 4
71496: ARRAY
71497: PUSH
71498: LD_INT 2
71500: ARRAY
71501: PPUSH
71502: CALL_OW 297
71506: ST_TO_ADDR
// end ; end ;
71507: GO 71396
71509: POP
71510: POP
// result := hex ;
71511: LD_ADDR_VAR 0 3
71515: PUSH
71516: LD_VAR 0 7
71520: ST_TO_ADDR
// end ;
71521: LD_VAR 0 3
71525: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71526: LD_INT 0
71528: PPUSH
71529: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71530: LD_VAR 0 1
71534: NOT
71535: PUSH
71536: LD_VAR 0 1
71540: PUSH
71541: LD_INT 21
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 23
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PPUSH
71565: CALL_OW 69
71569: IN
71570: NOT
71571: OR
71572: IFFALSE 71576
// exit ;
71574: GO 71623
// for i = 1 to 3 do
71576: LD_ADDR_VAR 0 3
71580: PUSH
71581: DOUBLE
71582: LD_INT 1
71584: DEC
71585: ST_TO_ADDR
71586: LD_INT 3
71588: PUSH
71589: FOR_TO
71590: IFFALSE 71621
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71592: LD_VAR 0 1
71596: PPUSH
71597: CALL_OW 250
71601: PPUSH
71602: LD_VAR 0 1
71606: PPUSH
71607: CALL_OW 251
71611: PPUSH
71612: LD_INT 1
71614: PPUSH
71615: CALL_OW 453
71619: GO 71589
71621: POP
71622: POP
// end ;
71623: LD_VAR 0 2
71627: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71628: LD_INT 0
71630: PPUSH
71631: PPUSH
71632: PPUSH
71633: PPUSH
71634: PPUSH
71635: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71636: LD_VAR 0 1
71640: NOT
71641: PUSH
71642: LD_VAR 0 2
71646: NOT
71647: OR
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 314
71658: OR
71659: IFFALSE 71663
// exit ;
71661: GO 72104
// x := GetX ( enemy_unit ) ;
71663: LD_ADDR_VAR 0 7
71667: PUSH
71668: LD_VAR 0 2
71672: PPUSH
71673: CALL_OW 250
71677: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71678: LD_ADDR_VAR 0 8
71682: PUSH
71683: LD_VAR 0 2
71687: PPUSH
71688: CALL_OW 251
71692: ST_TO_ADDR
// if not x or not y then
71693: LD_VAR 0 7
71697: NOT
71698: PUSH
71699: LD_VAR 0 8
71703: NOT
71704: OR
71705: IFFALSE 71709
// exit ;
71707: GO 72104
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71709: LD_ADDR_VAR 0 6
71713: PUSH
71714: LD_VAR 0 7
71718: PPUSH
71719: LD_INT 0
71721: PPUSH
71722: LD_INT 4
71724: PPUSH
71725: CALL_OW 272
71729: PUSH
71730: LD_VAR 0 8
71734: PPUSH
71735: LD_INT 0
71737: PPUSH
71738: LD_INT 4
71740: PPUSH
71741: CALL_OW 273
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_VAR 0 7
71754: PPUSH
71755: LD_INT 1
71757: PPUSH
71758: LD_INT 4
71760: PPUSH
71761: CALL_OW 272
71765: PUSH
71766: LD_VAR 0 8
71770: PPUSH
71771: LD_INT 1
71773: PPUSH
71774: LD_INT 4
71776: PPUSH
71777: CALL_OW 273
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_VAR 0 7
71790: PPUSH
71791: LD_INT 2
71793: PPUSH
71794: LD_INT 4
71796: PPUSH
71797: CALL_OW 272
71801: PUSH
71802: LD_VAR 0 8
71806: PPUSH
71807: LD_INT 2
71809: PPUSH
71810: LD_INT 4
71812: PPUSH
71813: CALL_OW 273
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_VAR 0 7
71826: PPUSH
71827: LD_INT 3
71829: PPUSH
71830: LD_INT 4
71832: PPUSH
71833: CALL_OW 272
71837: PUSH
71838: LD_VAR 0 8
71842: PPUSH
71843: LD_INT 3
71845: PPUSH
71846: LD_INT 4
71848: PPUSH
71849: CALL_OW 273
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_VAR 0 7
71862: PPUSH
71863: LD_INT 4
71865: PPUSH
71866: LD_INT 4
71868: PPUSH
71869: CALL_OW 272
71873: PUSH
71874: LD_VAR 0 8
71878: PPUSH
71879: LD_INT 4
71881: PPUSH
71882: LD_INT 4
71884: PPUSH
71885: CALL_OW 273
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_VAR 0 7
71898: PPUSH
71899: LD_INT 5
71901: PPUSH
71902: LD_INT 4
71904: PPUSH
71905: CALL_OW 272
71909: PUSH
71910: LD_VAR 0 8
71914: PPUSH
71915: LD_INT 5
71917: PPUSH
71918: LD_INT 4
71920: PPUSH
71921: CALL_OW 273
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: ST_TO_ADDR
// for i = tmp downto 1 do
71938: LD_ADDR_VAR 0 4
71942: PUSH
71943: DOUBLE
71944: LD_VAR 0 6
71948: INC
71949: ST_TO_ADDR
71950: LD_INT 1
71952: PUSH
71953: FOR_DOWNTO
71954: IFFALSE 72055
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71956: LD_VAR 0 6
71960: PUSH
71961: LD_VAR 0 4
71965: ARRAY
71966: PUSH
71967: LD_INT 1
71969: ARRAY
71970: PPUSH
71971: LD_VAR 0 6
71975: PUSH
71976: LD_VAR 0 4
71980: ARRAY
71981: PUSH
71982: LD_INT 2
71984: ARRAY
71985: PPUSH
71986: CALL_OW 488
71990: NOT
71991: PUSH
71992: LD_VAR 0 6
71996: PUSH
71997: LD_VAR 0 4
72001: ARRAY
72002: PUSH
72003: LD_INT 1
72005: ARRAY
72006: PPUSH
72007: LD_VAR 0 6
72011: PUSH
72012: LD_VAR 0 4
72016: ARRAY
72017: PUSH
72018: LD_INT 2
72020: ARRAY
72021: PPUSH
72022: CALL_OW 428
72026: PUSH
72027: LD_INT 0
72029: NONEQUAL
72030: OR
72031: IFFALSE 72053
// tmp := Delete ( tmp , i ) ;
72033: LD_ADDR_VAR 0 6
72037: PUSH
72038: LD_VAR 0 6
72042: PPUSH
72043: LD_VAR 0 4
72047: PPUSH
72048: CALL_OW 3
72052: ST_TO_ADDR
72053: GO 71953
72055: POP
72056: POP
// j := GetClosestHex ( unit , tmp ) ;
72057: LD_ADDR_VAR 0 5
72061: PUSH
72062: LD_VAR 0 1
72066: PPUSH
72067: LD_VAR 0 6
72071: PPUSH
72072: CALL 71357 0 2
72076: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72077: LD_VAR 0 1
72081: PPUSH
72082: LD_VAR 0 5
72086: PUSH
72087: LD_INT 1
72089: ARRAY
72090: PPUSH
72091: LD_VAR 0 5
72095: PUSH
72096: LD_INT 2
72098: ARRAY
72099: PPUSH
72100: CALL_OW 111
// end ;
72104: LD_VAR 0 3
72108: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72109: LD_INT 0
72111: PPUSH
72112: PPUSH
72113: PPUSH
// uc_side = 0 ;
72114: LD_ADDR_OWVAR 20
72118: PUSH
72119: LD_INT 0
72121: ST_TO_ADDR
// uc_nation = 0 ;
72122: LD_ADDR_OWVAR 21
72126: PUSH
72127: LD_INT 0
72129: ST_TO_ADDR
// InitHc ;
72130: CALL_OW 19
// InitVc ;
72134: CALL_OW 20
// if mastodonts then
72138: LD_VAR 0 6
72142: IFFALSE 72209
// for i = 1 to mastodonts do
72144: LD_ADDR_VAR 0 11
72148: PUSH
72149: DOUBLE
72150: LD_INT 1
72152: DEC
72153: ST_TO_ADDR
72154: LD_VAR 0 6
72158: PUSH
72159: FOR_TO
72160: IFFALSE 72207
// begin vc_chassis := 31 ;
72162: LD_ADDR_OWVAR 37
72166: PUSH
72167: LD_INT 31
72169: ST_TO_ADDR
// vc_control := control_rider ;
72170: LD_ADDR_OWVAR 38
72174: PUSH
72175: LD_INT 4
72177: ST_TO_ADDR
// animal := CreateVehicle ;
72178: LD_ADDR_VAR 0 12
72182: PUSH
72183: CALL_OW 45
72187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72188: LD_VAR 0 12
72192: PPUSH
72193: LD_VAR 0 8
72197: PPUSH
72198: LD_INT 0
72200: PPUSH
72201: CALL 78915 0 3
// end ;
72205: GO 72159
72207: POP
72208: POP
// if horses then
72209: LD_VAR 0 5
72213: IFFALSE 72280
// for i = 1 to horses do
72215: LD_ADDR_VAR 0 11
72219: PUSH
72220: DOUBLE
72221: LD_INT 1
72223: DEC
72224: ST_TO_ADDR
72225: LD_VAR 0 5
72229: PUSH
72230: FOR_TO
72231: IFFALSE 72278
// begin hc_class := 21 ;
72233: LD_ADDR_OWVAR 28
72237: PUSH
72238: LD_INT 21
72240: ST_TO_ADDR
// hc_gallery :=  ;
72241: LD_ADDR_OWVAR 33
72245: PUSH
72246: LD_STRING 
72248: ST_TO_ADDR
// animal := CreateHuman ;
72249: LD_ADDR_VAR 0 12
72253: PUSH
72254: CALL_OW 44
72258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72259: LD_VAR 0 12
72263: PPUSH
72264: LD_VAR 0 8
72268: PPUSH
72269: LD_INT 0
72271: PPUSH
72272: CALL 78915 0 3
// end ;
72276: GO 72230
72278: POP
72279: POP
// if birds then
72280: LD_VAR 0 1
72284: IFFALSE 72351
// for i = 1 to birds do
72286: LD_ADDR_VAR 0 11
72290: PUSH
72291: DOUBLE
72292: LD_INT 1
72294: DEC
72295: ST_TO_ADDR
72296: LD_VAR 0 1
72300: PUSH
72301: FOR_TO
72302: IFFALSE 72349
// begin hc_class = 18 ;
72304: LD_ADDR_OWVAR 28
72308: PUSH
72309: LD_INT 18
72311: ST_TO_ADDR
// hc_gallery =  ;
72312: LD_ADDR_OWVAR 33
72316: PUSH
72317: LD_STRING 
72319: ST_TO_ADDR
// animal := CreateHuman ;
72320: LD_ADDR_VAR 0 12
72324: PUSH
72325: CALL_OW 44
72329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72330: LD_VAR 0 12
72334: PPUSH
72335: LD_VAR 0 8
72339: PPUSH
72340: LD_INT 0
72342: PPUSH
72343: CALL 78915 0 3
// end ;
72347: GO 72301
72349: POP
72350: POP
// if tigers then
72351: LD_VAR 0 2
72355: IFFALSE 72439
// for i = 1 to tigers do
72357: LD_ADDR_VAR 0 11
72361: PUSH
72362: DOUBLE
72363: LD_INT 1
72365: DEC
72366: ST_TO_ADDR
72367: LD_VAR 0 2
72371: PUSH
72372: FOR_TO
72373: IFFALSE 72437
// begin hc_class = class_tiger ;
72375: LD_ADDR_OWVAR 28
72379: PUSH
72380: LD_INT 14
72382: ST_TO_ADDR
// hc_gallery =  ;
72383: LD_ADDR_OWVAR 33
72387: PUSH
72388: LD_STRING 
72390: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72391: LD_ADDR_OWVAR 35
72395: PUSH
72396: LD_INT 7
72398: NEG
72399: PPUSH
72400: LD_INT 7
72402: PPUSH
72403: CALL_OW 12
72407: ST_TO_ADDR
// animal := CreateHuman ;
72408: LD_ADDR_VAR 0 12
72412: PUSH
72413: CALL_OW 44
72417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72418: LD_VAR 0 12
72422: PPUSH
72423: LD_VAR 0 8
72427: PPUSH
72428: LD_INT 0
72430: PPUSH
72431: CALL 78915 0 3
// end ;
72435: GO 72372
72437: POP
72438: POP
// if apemans then
72439: LD_VAR 0 3
72443: IFFALSE 72566
// for i = 1 to apemans do
72445: LD_ADDR_VAR 0 11
72449: PUSH
72450: DOUBLE
72451: LD_INT 1
72453: DEC
72454: ST_TO_ADDR
72455: LD_VAR 0 3
72459: PUSH
72460: FOR_TO
72461: IFFALSE 72564
// begin hc_class = class_apeman ;
72463: LD_ADDR_OWVAR 28
72467: PUSH
72468: LD_INT 12
72470: ST_TO_ADDR
// hc_gallery =  ;
72471: LD_ADDR_OWVAR 33
72475: PUSH
72476: LD_STRING 
72478: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72479: LD_ADDR_OWVAR 35
72483: PUSH
72484: LD_INT 5
72486: NEG
72487: PPUSH
72488: LD_INT 5
72490: PPUSH
72491: CALL_OW 12
72495: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72496: LD_ADDR_OWVAR 31
72500: PUSH
72501: LD_INT 1
72503: PPUSH
72504: LD_INT 3
72506: PPUSH
72507: CALL_OW 12
72511: PUSH
72512: LD_INT 1
72514: PPUSH
72515: LD_INT 3
72517: PPUSH
72518: CALL_OW 12
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: LD_INT 0
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: ST_TO_ADDR
// animal := CreateHuman ;
72535: LD_ADDR_VAR 0 12
72539: PUSH
72540: CALL_OW 44
72544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72545: LD_VAR 0 12
72549: PPUSH
72550: LD_VAR 0 8
72554: PPUSH
72555: LD_INT 0
72557: PPUSH
72558: CALL 78915 0 3
// end ;
72562: GO 72460
72564: POP
72565: POP
// if enchidnas then
72566: LD_VAR 0 4
72570: IFFALSE 72637
// for i = 1 to enchidnas do
72572: LD_ADDR_VAR 0 11
72576: PUSH
72577: DOUBLE
72578: LD_INT 1
72580: DEC
72581: ST_TO_ADDR
72582: LD_VAR 0 4
72586: PUSH
72587: FOR_TO
72588: IFFALSE 72635
// begin hc_class = 13 ;
72590: LD_ADDR_OWVAR 28
72594: PUSH
72595: LD_INT 13
72597: ST_TO_ADDR
// hc_gallery =  ;
72598: LD_ADDR_OWVAR 33
72602: PUSH
72603: LD_STRING 
72605: ST_TO_ADDR
// animal := CreateHuman ;
72606: LD_ADDR_VAR 0 12
72610: PUSH
72611: CALL_OW 44
72615: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72616: LD_VAR 0 12
72620: PPUSH
72621: LD_VAR 0 8
72625: PPUSH
72626: LD_INT 0
72628: PPUSH
72629: CALL 78915 0 3
// end ;
72633: GO 72587
72635: POP
72636: POP
// if fishes then
72637: LD_VAR 0 7
72641: IFFALSE 72708
// for i = 1 to fishes do
72643: LD_ADDR_VAR 0 11
72647: PUSH
72648: DOUBLE
72649: LD_INT 1
72651: DEC
72652: ST_TO_ADDR
72653: LD_VAR 0 7
72657: PUSH
72658: FOR_TO
72659: IFFALSE 72706
// begin hc_class = 20 ;
72661: LD_ADDR_OWVAR 28
72665: PUSH
72666: LD_INT 20
72668: ST_TO_ADDR
// hc_gallery =  ;
72669: LD_ADDR_OWVAR 33
72673: PUSH
72674: LD_STRING 
72676: ST_TO_ADDR
// animal := CreateHuman ;
72677: LD_ADDR_VAR 0 12
72681: PUSH
72682: CALL_OW 44
72686: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72687: LD_VAR 0 12
72691: PPUSH
72692: LD_VAR 0 9
72696: PPUSH
72697: LD_INT 0
72699: PPUSH
72700: CALL 78915 0 3
// end ;
72704: GO 72658
72706: POP
72707: POP
// end ;
72708: LD_VAR 0 10
72712: RET
// export function WantHeal ( sci , unit ) ; begin
72713: LD_INT 0
72715: PPUSH
// if GetTaskList ( sci ) > 0 then
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 437
72725: PUSH
72726: LD_INT 0
72728: GREATER
72729: IFFALSE 72799
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72731: LD_VAR 0 1
72735: PPUSH
72736: CALL_OW 437
72740: PUSH
72741: LD_INT 1
72743: ARRAY
72744: PUSH
72745: LD_INT 1
72747: ARRAY
72748: PUSH
72749: LD_STRING l
72751: EQUAL
72752: PUSH
72753: LD_VAR 0 1
72757: PPUSH
72758: CALL_OW 437
72762: PUSH
72763: LD_INT 1
72765: ARRAY
72766: PUSH
72767: LD_INT 4
72769: ARRAY
72770: PUSH
72771: LD_VAR 0 2
72775: EQUAL
72776: AND
72777: IFFALSE 72789
// result := true else
72779: LD_ADDR_VAR 0 3
72783: PUSH
72784: LD_INT 1
72786: ST_TO_ADDR
72787: GO 72797
// result := false ;
72789: LD_ADDR_VAR 0 3
72793: PUSH
72794: LD_INT 0
72796: ST_TO_ADDR
// end else
72797: GO 72807
// result := false ;
72799: LD_ADDR_VAR 0 3
72803: PUSH
72804: LD_INT 0
72806: ST_TO_ADDR
// end ;
72807: LD_VAR 0 3
72811: RET
// export function HealTarget ( sci ) ; begin
72812: LD_INT 0
72814: PPUSH
// if not sci then
72815: LD_VAR 0 1
72819: NOT
72820: IFFALSE 72824
// exit ;
72822: GO 72889
// result := 0 ;
72824: LD_ADDR_VAR 0 2
72828: PUSH
72829: LD_INT 0
72831: ST_TO_ADDR
// if GetTaskList ( sci ) then
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 437
72841: IFFALSE 72889
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72843: LD_VAR 0 1
72847: PPUSH
72848: CALL_OW 437
72852: PUSH
72853: LD_INT 1
72855: ARRAY
72856: PUSH
72857: LD_INT 1
72859: ARRAY
72860: PUSH
72861: LD_STRING l
72863: EQUAL
72864: IFFALSE 72889
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72866: LD_ADDR_VAR 0 2
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 437
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PUSH
72885: LD_INT 4
72887: ARRAY
72888: ST_TO_ADDR
// end ;
72889: LD_VAR 0 2
72893: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
72894: LD_INT 0
72896: PPUSH
72897: PPUSH
72898: PPUSH
72899: PPUSH
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
72912: PPUSH
72913: PPUSH
72914: PPUSH
72915: PPUSH
72916: PPUSH
72917: PPUSH
72918: PPUSH
72919: PPUSH
72920: PPUSH
72921: PPUSH
72922: PPUSH
72923: PPUSH
72924: PPUSH
72925: PPUSH
72926: PPUSH
72927: PPUSH
72928: PPUSH
// if not list then
72929: LD_VAR 0 1
72933: NOT
72934: IFFALSE 72938
// exit ;
72936: GO 77526
// base := list [ 1 ] ;
72938: LD_ADDR_VAR 0 3
72942: PUSH
72943: LD_VAR 0 1
72947: PUSH
72948: LD_INT 1
72950: ARRAY
72951: ST_TO_ADDR
// group := list [ 2 ] ;
72952: LD_ADDR_VAR 0 4
72956: PUSH
72957: LD_VAR 0 1
72961: PUSH
72962: LD_INT 2
72964: ARRAY
72965: ST_TO_ADDR
// path := list [ 3 ] ;
72966: LD_ADDR_VAR 0 5
72970: PUSH
72971: LD_VAR 0 1
72975: PUSH
72976: LD_INT 3
72978: ARRAY
72979: ST_TO_ADDR
// flags := list [ 4 ] ;
72980: LD_ADDR_VAR 0 6
72984: PUSH
72985: LD_VAR 0 1
72989: PUSH
72990: LD_INT 4
72992: ARRAY
72993: ST_TO_ADDR
// mined := [ ] ;
72994: LD_ADDR_VAR 0 27
72998: PUSH
72999: EMPTY
73000: ST_TO_ADDR
// bombed := [ ] ;
73001: LD_ADDR_VAR 0 28
73005: PUSH
73006: EMPTY
73007: ST_TO_ADDR
// healers := [ ] ;
73008: LD_ADDR_VAR 0 31
73012: PUSH
73013: EMPTY
73014: ST_TO_ADDR
// to_heal := [ ] ;
73015: LD_ADDR_VAR 0 30
73019: PUSH
73020: EMPTY
73021: ST_TO_ADDR
// repairs := [ ] ;
73022: LD_ADDR_VAR 0 33
73026: PUSH
73027: EMPTY
73028: ST_TO_ADDR
// to_repair := [ ] ;
73029: LD_ADDR_VAR 0 32
73033: PUSH
73034: EMPTY
73035: ST_TO_ADDR
// if not group or not path then
73036: LD_VAR 0 4
73040: NOT
73041: PUSH
73042: LD_VAR 0 5
73046: NOT
73047: OR
73048: IFFALSE 73052
// exit ;
73050: GO 77526
// if flags then
73052: LD_VAR 0 6
73056: IFFALSE 73200
// begin f_ignore_area := flags [ 1 ] ;
73058: LD_ADDR_VAR 0 17
73062: PUSH
73063: LD_VAR 0 6
73067: PUSH
73068: LD_INT 1
73070: ARRAY
73071: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
73072: LD_ADDR_VAR 0 18
73076: PUSH
73077: LD_VAR 0 6
73081: PUSH
73082: LD_INT 2
73084: ARRAY
73085: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
73086: LD_ADDR_VAR 0 19
73090: PUSH
73091: LD_VAR 0 6
73095: PUSH
73096: LD_INT 3
73098: ARRAY
73099: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
73100: LD_ADDR_VAR 0 20
73104: PUSH
73105: LD_VAR 0 6
73109: PUSH
73110: LD_INT 4
73112: ARRAY
73113: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
73114: LD_ADDR_VAR 0 21
73118: PUSH
73119: LD_VAR 0 6
73123: PUSH
73124: LD_INT 5
73126: ARRAY
73127: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
73128: LD_ADDR_VAR 0 22
73132: PUSH
73133: LD_VAR 0 6
73137: PUSH
73138: LD_INT 6
73140: ARRAY
73141: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
73142: LD_ADDR_VAR 0 23
73146: PUSH
73147: LD_VAR 0 6
73151: PUSH
73152: LD_INT 7
73154: ARRAY
73155: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
73156: LD_ADDR_VAR 0 24
73160: PUSH
73161: LD_VAR 0 6
73165: PUSH
73166: LD_INT 8
73168: ARRAY
73169: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
73170: LD_ADDR_VAR 0 25
73174: PUSH
73175: LD_VAR 0 6
73179: PUSH
73180: LD_INT 9
73182: ARRAY
73183: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
73184: LD_ADDR_VAR 0 26
73188: PUSH
73189: LD_VAR 0 6
73193: PUSH
73194: LD_INT 10
73196: ARRAY
73197: ST_TO_ADDR
// end else
73198: GO 73280
// begin f_ignore_area := false ;
73200: LD_ADDR_VAR 0 17
73204: PUSH
73205: LD_INT 0
73207: ST_TO_ADDR
// f_capture := false ;
73208: LD_ADDR_VAR 0 18
73212: PUSH
73213: LD_INT 0
73215: ST_TO_ADDR
// f_ignore_civ := false ;
73216: LD_ADDR_VAR 0 19
73220: PUSH
73221: LD_INT 0
73223: ST_TO_ADDR
// f_murder := false ;
73224: LD_ADDR_VAR 0 20
73228: PUSH
73229: LD_INT 0
73231: ST_TO_ADDR
// f_mines := false ;
73232: LD_ADDR_VAR 0 21
73236: PUSH
73237: LD_INT 0
73239: ST_TO_ADDR
// f_repair := false ;
73240: LD_ADDR_VAR 0 22
73244: PUSH
73245: LD_INT 0
73247: ST_TO_ADDR
// f_heal := false ;
73248: LD_ADDR_VAR 0 23
73252: PUSH
73253: LD_INT 0
73255: ST_TO_ADDR
// f_spacetime := false ;
73256: LD_ADDR_VAR 0 24
73260: PUSH
73261: LD_INT 0
73263: ST_TO_ADDR
// f_attack_depot := false ;
73264: LD_ADDR_VAR 0 25
73268: PUSH
73269: LD_INT 0
73271: ST_TO_ADDR
// f_crawl := false ;
73272: LD_ADDR_VAR 0 26
73276: PUSH
73277: LD_INT 0
73279: ST_TO_ADDR
// end ; if f_heal then
73280: LD_VAR 0 23
73284: IFFALSE 73311
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
73286: LD_ADDR_VAR 0 31
73290: PUSH
73291: LD_VAR 0 4
73295: PPUSH
73296: LD_INT 25
73298: PUSH
73299: LD_INT 4
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PPUSH
73306: CALL_OW 72
73310: ST_TO_ADDR
// if f_repair then
73311: LD_VAR 0 22
73315: IFFALSE 73342
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
73317: LD_ADDR_VAR 0 33
73321: PUSH
73322: LD_VAR 0 4
73326: PPUSH
73327: LD_INT 25
73329: PUSH
73330: LD_INT 3
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PPUSH
73337: CALL_OW 72
73341: ST_TO_ADDR
// units_path := [ ] ;
73342: LD_ADDR_VAR 0 16
73346: PUSH
73347: EMPTY
73348: ST_TO_ADDR
// for i = 1 to group do
73349: LD_ADDR_VAR 0 7
73353: PUSH
73354: DOUBLE
73355: LD_INT 1
73357: DEC
73358: ST_TO_ADDR
73359: LD_VAR 0 4
73363: PUSH
73364: FOR_TO
73365: IFFALSE 73394
// units_path := Replace ( units_path , i , path ) ;
73367: LD_ADDR_VAR 0 16
73371: PUSH
73372: LD_VAR 0 16
73376: PPUSH
73377: LD_VAR 0 7
73381: PPUSH
73382: LD_VAR 0 5
73386: PPUSH
73387: CALL_OW 1
73391: ST_TO_ADDR
73392: GO 73364
73394: POP
73395: POP
// repeat for i = group downto 1 do
73396: LD_ADDR_VAR 0 7
73400: PUSH
73401: DOUBLE
73402: LD_VAR 0 4
73406: INC
73407: ST_TO_ADDR
73408: LD_INT 1
73410: PUSH
73411: FOR_DOWNTO
73412: IFFALSE 77508
// begin wait ( 5 ) ;
73414: LD_INT 5
73416: PPUSH
73417: CALL_OW 67
// tmp := [ ] ;
73421: LD_ADDR_VAR 0 14
73425: PUSH
73426: EMPTY
73427: ST_TO_ADDR
// attacking := false ;
73428: LD_ADDR_VAR 0 29
73432: PUSH
73433: LD_INT 0
73435: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
73436: LD_VAR 0 4
73440: PUSH
73441: LD_VAR 0 7
73445: ARRAY
73446: PPUSH
73447: CALL_OW 301
73451: PUSH
73452: LD_VAR 0 4
73456: PUSH
73457: LD_VAR 0 7
73461: ARRAY
73462: NOT
73463: OR
73464: IFFALSE 73573
// begin if GetType ( group [ i ] ) = unit_human then
73466: LD_VAR 0 4
73470: PUSH
73471: LD_VAR 0 7
73475: ARRAY
73476: PPUSH
73477: CALL_OW 247
73481: PUSH
73482: LD_INT 1
73484: EQUAL
73485: IFFALSE 73531
// begin to_heal := to_heal diff group [ i ] ;
73487: LD_ADDR_VAR 0 30
73491: PUSH
73492: LD_VAR 0 30
73496: PUSH
73497: LD_VAR 0 4
73501: PUSH
73502: LD_VAR 0 7
73506: ARRAY
73507: DIFF
73508: ST_TO_ADDR
// healers := healers diff group [ i ] ;
73509: LD_ADDR_VAR 0 31
73513: PUSH
73514: LD_VAR 0 31
73518: PUSH
73519: LD_VAR 0 4
73523: PUSH
73524: LD_VAR 0 7
73528: ARRAY
73529: DIFF
73530: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
73531: LD_ADDR_VAR 0 4
73535: PUSH
73536: LD_VAR 0 4
73540: PPUSH
73541: LD_VAR 0 7
73545: PPUSH
73546: CALL_OW 3
73550: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
73551: LD_ADDR_VAR 0 16
73555: PUSH
73556: LD_VAR 0 16
73560: PPUSH
73561: LD_VAR 0 7
73565: PPUSH
73566: CALL_OW 3
73570: ST_TO_ADDR
// continue ;
73571: GO 73411
// end ; if f_repair then
73573: LD_VAR 0 22
73577: IFFALSE 74066
// begin if GetType ( group [ i ] ) = unit_vehicle then
73579: LD_VAR 0 4
73583: PUSH
73584: LD_VAR 0 7
73588: ARRAY
73589: PPUSH
73590: CALL_OW 247
73594: PUSH
73595: LD_INT 2
73597: EQUAL
73598: IFFALSE 73788
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
73600: LD_VAR 0 4
73604: PUSH
73605: LD_VAR 0 7
73609: ARRAY
73610: PPUSH
73611: CALL_OW 256
73615: PUSH
73616: LD_INT 700
73618: LESS
73619: PUSH
73620: LD_VAR 0 4
73624: PUSH
73625: LD_VAR 0 7
73629: ARRAY
73630: PUSH
73631: LD_VAR 0 32
73635: IN
73636: NOT
73637: AND
73638: IFFALSE 73662
// to_repair := to_repair union group [ i ] ;
73640: LD_ADDR_VAR 0 32
73644: PUSH
73645: LD_VAR 0 32
73649: PUSH
73650: LD_VAR 0 4
73654: PUSH
73655: LD_VAR 0 7
73659: ARRAY
73660: UNION
73661: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
73662: LD_VAR 0 4
73666: PUSH
73667: LD_VAR 0 7
73671: ARRAY
73672: PPUSH
73673: CALL_OW 256
73677: PUSH
73678: LD_INT 1000
73680: EQUAL
73681: PUSH
73682: LD_VAR 0 4
73686: PUSH
73687: LD_VAR 0 7
73691: ARRAY
73692: PUSH
73693: LD_VAR 0 32
73697: IN
73698: AND
73699: IFFALSE 73723
// to_repair := to_repair diff group [ i ] ;
73701: LD_ADDR_VAR 0 32
73705: PUSH
73706: LD_VAR 0 32
73710: PUSH
73711: LD_VAR 0 4
73715: PUSH
73716: LD_VAR 0 7
73720: ARRAY
73721: DIFF
73722: ST_TO_ADDR
// if group [ i ] in to_repair then
73723: LD_VAR 0 4
73727: PUSH
73728: LD_VAR 0 7
73732: ARRAY
73733: PUSH
73734: LD_VAR 0 32
73738: IN
73739: IFFALSE 73786
// begin if not IsInArea ( group [ i ] , f_repair ) then
73741: LD_VAR 0 4
73745: PUSH
73746: LD_VAR 0 7
73750: ARRAY
73751: PPUSH
73752: LD_VAR 0 22
73756: PPUSH
73757: CALL_OW 308
73761: NOT
73762: IFFALSE 73784
// ComMoveToArea ( group [ i ] , f_repair ) ;
73764: LD_VAR 0 4
73768: PUSH
73769: LD_VAR 0 7
73773: ARRAY
73774: PPUSH
73775: LD_VAR 0 22
73779: PPUSH
73780: CALL_OW 113
// continue ;
73784: GO 73411
// end ; end else
73786: GO 74066
// if group [ i ] in repairs then
73788: LD_VAR 0 4
73792: PUSH
73793: LD_VAR 0 7
73797: ARRAY
73798: PUSH
73799: LD_VAR 0 33
73803: IN
73804: IFFALSE 74066
// begin if IsInUnit ( group [ i ] ) then
73806: LD_VAR 0 4
73810: PUSH
73811: LD_VAR 0 7
73815: ARRAY
73816: PPUSH
73817: CALL_OW 310
73821: IFFALSE 73889
// begin z := IsInUnit ( group [ i ] ) ;
73823: LD_ADDR_VAR 0 13
73827: PUSH
73828: LD_VAR 0 4
73832: PUSH
73833: LD_VAR 0 7
73837: ARRAY
73838: PPUSH
73839: CALL_OW 310
73843: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
73844: LD_VAR 0 13
73848: PUSH
73849: LD_VAR 0 32
73853: IN
73854: PUSH
73855: LD_VAR 0 13
73859: PPUSH
73860: LD_VAR 0 22
73864: PPUSH
73865: CALL_OW 308
73869: AND
73870: IFFALSE 73887
// ComExitVehicle ( group [ i ] ) ;
73872: LD_VAR 0 4
73876: PUSH
73877: LD_VAR 0 7
73881: ARRAY
73882: PPUSH
73883: CALL_OW 121
// end else
73887: GO 74066
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
73889: LD_ADDR_VAR 0 13
73893: PUSH
73894: LD_VAR 0 4
73898: PPUSH
73899: LD_INT 95
73901: PUSH
73902: LD_VAR 0 22
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 58
73913: PUSH
73914: EMPTY
73915: LIST
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PPUSH
73921: CALL_OW 72
73925: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
73926: LD_VAR 0 4
73930: PUSH
73931: LD_VAR 0 7
73935: ARRAY
73936: PPUSH
73937: CALL_OW 314
73941: NOT
73942: IFFALSE 74064
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
73944: LD_ADDR_VAR 0 10
73948: PUSH
73949: LD_VAR 0 13
73953: PPUSH
73954: LD_VAR 0 4
73958: PUSH
73959: LD_VAR 0 7
73963: ARRAY
73964: PPUSH
73965: CALL_OW 74
73969: ST_TO_ADDR
// if not x then
73970: LD_VAR 0 10
73974: NOT
73975: IFFALSE 73979
// continue ;
73977: GO 73411
// if GetLives ( x ) < 1000 then
73979: LD_VAR 0 10
73983: PPUSH
73984: CALL_OW 256
73988: PUSH
73989: LD_INT 1000
73991: LESS
73992: IFFALSE 74016
// ComRepairVehicle ( group [ i ] , x ) else
73994: LD_VAR 0 4
73998: PUSH
73999: LD_VAR 0 7
74003: ARRAY
74004: PPUSH
74005: LD_VAR 0 10
74009: PPUSH
74010: CALL_OW 129
74014: GO 74064
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
74016: LD_VAR 0 23
74020: PUSH
74021: LD_VAR 0 4
74025: PUSH
74026: LD_VAR 0 7
74030: ARRAY
74031: PPUSH
74032: CALL_OW 256
74036: PUSH
74037: LD_INT 1000
74039: LESS
74040: AND
74041: NOT
74042: IFFALSE 74064
// ComEnterUnit ( group [ i ] , x ) ;
74044: LD_VAR 0 4
74048: PUSH
74049: LD_VAR 0 7
74053: ARRAY
74054: PPUSH
74055: LD_VAR 0 10
74059: PPUSH
74060: CALL_OW 120
// end ; continue ;
74064: GO 73411
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
74066: LD_VAR 0 23
74070: PUSH
74071: LD_VAR 0 4
74075: PUSH
74076: LD_VAR 0 7
74080: ARRAY
74081: PPUSH
74082: CALL_OW 247
74086: PUSH
74087: LD_INT 1
74089: EQUAL
74090: AND
74091: IFFALSE 74569
// begin if group [ i ] in healers then
74093: LD_VAR 0 4
74097: PUSH
74098: LD_VAR 0 7
74102: ARRAY
74103: PUSH
74104: LD_VAR 0 31
74108: IN
74109: IFFALSE 74382
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
74111: LD_VAR 0 4
74115: PUSH
74116: LD_VAR 0 7
74120: ARRAY
74121: PPUSH
74122: LD_VAR 0 23
74126: PPUSH
74127: CALL_OW 308
74131: NOT
74132: PUSH
74133: LD_VAR 0 4
74137: PUSH
74138: LD_VAR 0 7
74142: ARRAY
74143: PPUSH
74144: CALL_OW 314
74148: NOT
74149: AND
74150: IFFALSE 74174
// ComMoveToArea ( group [ i ] , f_heal ) else
74152: LD_VAR 0 4
74156: PUSH
74157: LD_VAR 0 7
74161: ARRAY
74162: PPUSH
74163: LD_VAR 0 23
74167: PPUSH
74168: CALL_OW 113
74172: GO 74380
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
74174: LD_VAR 0 4
74178: PUSH
74179: LD_VAR 0 7
74183: ARRAY
74184: PPUSH
74185: CALL 72812 0 1
74189: PPUSH
74190: CALL_OW 256
74194: PUSH
74195: LD_INT 1000
74197: EQUAL
74198: IFFALSE 74217
// ComStop ( group [ i ] ) else
74200: LD_VAR 0 4
74204: PUSH
74205: LD_VAR 0 7
74209: ARRAY
74210: PPUSH
74211: CALL_OW 141
74215: GO 74380
// if not HasTask ( group [ i ] ) and to_heal then
74217: LD_VAR 0 4
74221: PUSH
74222: LD_VAR 0 7
74226: ARRAY
74227: PPUSH
74228: CALL_OW 314
74232: NOT
74233: PUSH
74234: LD_VAR 0 30
74238: AND
74239: IFFALSE 74380
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
74241: LD_ADDR_VAR 0 13
74245: PUSH
74246: LD_VAR 0 30
74250: PPUSH
74251: LD_INT 3
74253: PUSH
74254: LD_INT 54
74256: PUSH
74257: EMPTY
74258: LIST
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PPUSH
74264: CALL_OW 72
74268: PPUSH
74269: LD_VAR 0 4
74273: PUSH
74274: LD_VAR 0 7
74278: ARRAY
74279: PPUSH
74280: CALL_OW 74
74284: ST_TO_ADDR
// if z then
74285: LD_VAR 0 13
74289: IFFALSE 74380
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
74291: LD_INT 91
74293: PUSH
74294: LD_VAR 0 13
74298: PUSH
74299: LD_INT 10
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 81
74309: PUSH
74310: LD_VAR 0 13
74314: PPUSH
74315: CALL_OW 255
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PPUSH
74328: CALL_OW 69
74332: PUSH
74333: LD_INT 0
74335: EQUAL
74336: IFFALSE 74360
// ComHeal ( group [ i ] , z ) else
74338: LD_VAR 0 4
74342: PUSH
74343: LD_VAR 0 7
74347: ARRAY
74348: PPUSH
74349: LD_VAR 0 13
74353: PPUSH
74354: CALL_OW 128
74358: GO 74380
// ComMoveToArea ( group [ i ] , f_heal ) ;
74360: LD_VAR 0 4
74364: PUSH
74365: LD_VAR 0 7
74369: ARRAY
74370: PPUSH
74371: LD_VAR 0 23
74375: PPUSH
74376: CALL_OW 113
// end ; continue ;
74380: GO 73411
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
74382: LD_VAR 0 4
74386: PUSH
74387: LD_VAR 0 7
74391: ARRAY
74392: PPUSH
74393: CALL_OW 256
74397: PUSH
74398: LD_INT 700
74400: LESS
74401: PUSH
74402: LD_VAR 0 4
74406: PUSH
74407: LD_VAR 0 7
74411: ARRAY
74412: PUSH
74413: LD_VAR 0 30
74417: IN
74418: NOT
74419: AND
74420: IFFALSE 74444
// to_heal := to_heal union group [ i ] ;
74422: LD_ADDR_VAR 0 30
74426: PUSH
74427: LD_VAR 0 30
74431: PUSH
74432: LD_VAR 0 4
74436: PUSH
74437: LD_VAR 0 7
74441: ARRAY
74442: UNION
74443: ST_TO_ADDR
// if group [ i ] in to_heal then
74444: LD_VAR 0 4
74448: PUSH
74449: LD_VAR 0 7
74453: ARRAY
74454: PUSH
74455: LD_VAR 0 30
74459: IN
74460: IFFALSE 74569
// begin if GetLives ( group [ i ] ) = 1000 then
74462: LD_VAR 0 4
74466: PUSH
74467: LD_VAR 0 7
74471: ARRAY
74472: PPUSH
74473: CALL_OW 256
74477: PUSH
74478: LD_INT 1000
74480: EQUAL
74481: IFFALSE 74507
// to_heal := to_heal diff group [ i ] else
74483: LD_ADDR_VAR 0 30
74487: PUSH
74488: LD_VAR 0 30
74492: PUSH
74493: LD_VAR 0 4
74497: PUSH
74498: LD_VAR 0 7
74502: ARRAY
74503: DIFF
74504: ST_TO_ADDR
74505: GO 74569
// begin if not IsInArea ( group [ i ] , to_heal ) then
74507: LD_VAR 0 4
74511: PUSH
74512: LD_VAR 0 7
74516: ARRAY
74517: PPUSH
74518: LD_VAR 0 30
74522: PPUSH
74523: CALL_OW 308
74527: NOT
74528: IFFALSE 74552
// ComMoveToArea ( group [ i ] , f_heal ) else
74530: LD_VAR 0 4
74534: PUSH
74535: LD_VAR 0 7
74539: ARRAY
74540: PPUSH
74541: LD_VAR 0 23
74545: PPUSH
74546: CALL_OW 113
74550: GO 74567
// ComHold ( group [ i ] ) ;
74552: LD_VAR 0 4
74556: PUSH
74557: LD_VAR 0 7
74561: ARRAY
74562: PPUSH
74563: CALL_OW 140
// continue ;
74567: GO 73411
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
74569: LD_VAR 0 4
74573: PUSH
74574: LD_VAR 0 7
74578: ARRAY
74579: PPUSH
74580: LD_INT 10
74582: PPUSH
74583: CALL 71209 0 2
74587: NOT
74588: PUSH
74589: LD_VAR 0 16
74593: PUSH
74594: LD_VAR 0 7
74598: ARRAY
74599: PUSH
74600: EMPTY
74601: EQUAL
74602: NOT
74603: AND
74604: IFFALSE 74870
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
74606: LD_VAR 0 4
74610: PUSH
74611: LD_VAR 0 7
74615: ARRAY
74616: PPUSH
74617: CALL_OW 262
74621: PUSH
74622: LD_INT 1
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: IN
74632: IFFALSE 74673
// if GetFuel ( group [ i ] ) < 10 then
74634: LD_VAR 0 4
74638: PUSH
74639: LD_VAR 0 7
74643: ARRAY
74644: PPUSH
74645: CALL_OW 261
74649: PUSH
74650: LD_INT 10
74652: LESS
74653: IFFALSE 74673
// SetFuel ( group [ i ] , 12 ) ;
74655: LD_VAR 0 4
74659: PUSH
74660: LD_VAR 0 7
74664: ARRAY
74665: PPUSH
74666: LD_INT 12
74668: PPUSH
74669: CALL_OW 240
// if units_path [ i ] then
74673: LD_VAR 0 16
74677: PUSH
74678: LD_VAR 0 7
74682: ARRAY
74683: IFFALSE 74868
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
74685: LD_VAR 0 4
74689: PUSH
74690: LD_VAR 0 7
74694: ARRAY
74695: PPUSH
74696: LD_VAR 0 16
74700: PUSH
74701: LD_VAR 0 7
74705: ARRAY
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PUSH
74711: LD_INT 1
74713: ARRAY
74714: PPUSH
74715: LD_VAR 0 16
74719: PUSH
74720: LD_VAR 0 7
74724: ARRAY
74725: PUSH
74726: LD_INT 1
74728: ARRAY
74729: PUSH
74730: LD_INT 2
74732: ARRAY
74733: PPUSH
74734: CALL_OW 297
74738: PUSH
74739: LD_INT 6
74741: GREATER
74742: IFFALSE 74817
// begin if not HasTask ( group [ i ] ) then
74744: LD_VAR 0 4
74748: PUSH
74749: LD_VAR 0 7
74753: ARRAY
74754: PPUSH
74755: CALL_OW 314
74759: NOT
74760: IFFALSE 74815
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
74762: LD_VAR 0 4
74766: PUSH
74767: LD_VAR 0 7
74771: ARRAY
74772: PPUSH
74773: LD_VAR 0 16
74777: PUSH
74778: LD_VAR 0 7
74782: ARRAY
74783: PUSH
74784: LD_INT 1
74786: ARRAY
74787: PUSH
74788: LD_INT 1
74790: ARRAY
74791: PPUSH
74792: LD_VAR 0 16
74796: PUSH
74797: LD_VAR 0 7
74801: ARRAY
74802: PUSH
74803: LD_INT 1
74805: ARRAY
74806: PUSH
74807: LD_INT 2
74809: ARRAY
74810: PPUSH
74811: CALL_OW 114
// end else
74815: GO 74868
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
74817: LD_ADDR_VAR 0 15
74821: PUSH
74822: LD_VAR 0 16
74826: PUSH
74827: LD_VAR 0 7
74831: ARRAY
74832: PPUSH
74833: LD_INT 1
74835: PPUSH
74836: CALL_OW 3
74840: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
74841: LD_ADDR_VAR 0 16
74845: PUSH
74846: LD_VAR 0 16
74850: PPUSH
74851: LD_VAR 0 7
74855: PPUSH
74856: LD_VAR 0 15
74860: PPUSH
74861: CALL_OW 1
74865: ST_TO_ADDR
// continue ;
74866: GO 73411
// end ; end ; end else
74868: GO 77506
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
74870: LD_ADDR_VAR 0 14
74874: PUSH
74875: LD_INT 81
74877: PUSH
74878: LD_VAR 0 4
74882: PUSH
74883: LD_VAR 0 7
74887: ARRAY
74888: PPUSH
74889: CALL_OW 255
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PPUSH
74898: CALL_OW 69
74902: ST_TO_ADDR
// if not tmp then
74903: LD_VAR 0 14
74907: NOT
74908: IFFALSE 74912
// continue ;
74910: GO 73411
// if f_ignore_area then
74912: LD_VAR 0 17
74916: IFFALSE 75004
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
74918: LD_ADDR_VAR 0 15
74922: PUSH
74923: LD_VAR 0 14
74927: PPUSH
74928: LD_INT 3
74930: PUSH
74931: LD_INT 92
74933: PUSH
74934: LD_VAR 0 17
74938: PUSH
74939: LD_INT 1
74941: ARRAY
74942: PUSH
74943: LD_VAR 0 17
74947: PUSH
74948: LD_INT 2
74950: ARRAY
74951: PUSH
74952: LD_VAR 0 17
74956: PUSH
74957: LD_INT 3
74959: ARRAY
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PPUSH
74971: CALL_OW 72
74975: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
74976: LD_VAR 0 14
74980: PUSH
74981: LD_VAR 0 15
74985: DIFF
74986: IFFALSE 75004
// tmp := tmp diff tmp2 ;
74988: LD_ADDR_VAR 0 14
74992: PUSH
74993: LD_VAR 0 14
74997: PUSH
74998: LD_VAR 0 15
75002: DIFF
75003: ST_TO_ADDR
// end ; if not f_murder then
75004: LD_VAR 0 20
75008: NOT
75009: IFFALSE 75067
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
75011: LD_ADDR_VAR 0 15
75015: PUSH
75016: LD_VAR 0 14
75020: PPUSH
75021: LD_INT 3
75023: PUSH
75024: LD_INT 50
75026: PUSH
75027: EMPTY
75028: LIST
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PPUSH
75034: CALL_OW 72
75038: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
75039: LD_VAR 0 14
75043: PUSH
75044: LD_VAR 0 15
75048: DIFF
75049: IFFALSE 75067
// tmp := tmp diff tmp2 ;
75051: LD_ADDR_VAR 0 14
75055: PUSH
75056: LD_VAR 0 14
75060: PUSH
75061: LD_VAR 0 15
75065: DIFF
75066: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
75067: LD_ADDR_VAR 0 14
75071: PUSH
75072: LD_VAR 0 4
75076: PUSH
75077: LD_VAR 0 7
75081: ARRAY
75082: PPUSH
75083: LD_VAR 0 14
75087: PPUSH
75088: LD_INT 1
75090: PPUSH
75091: LD_INT 1
75093: PPUSH
75094: CALL 45091 0 4
75098: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
75099: LD_VAR 0 4
75103: PUSH
75104: LD_VAR 0 7
75108: ARRAY
75109: PPUSH
75110: CALL_OW 257
75114: PUSH
75115: LD_INT 1
75117: EQUAL
75118: IFFALSE 75566
// begin if WantPlant ( group [ i ] ) then
75120: LD_VAR 0 4
75124: PUSH
75125: LD_VAR 0 7
75129: ARRAY
75130: PPUSH
75131: CALL 44559 0 1
75135: IFFALSE 75139
// continue ;
75137: GO 73411
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
75139: LD_VAR 0 18
75143: PUSH
75144: LD_VAR 0 4
75148: PUSH
75149: LD_VAR 0 7
75153: ARRAY
75154: PPUSH
75155: CALL_OW 310
75159: NOT
75160: AND
75161: PUSH
75162: LD_VAR 0 14
75166: PUSH
75167: LD_INT 1
75169: ARRAY
75170: PUSH
75171: LD_VAR 0 14
75175: PPUSH
75176: LD_INT 21
75178: PUSH
75179: LD_INT 2
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 58
75188: PUSH
75189: EMPTY
75190: LIST
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PPUSH
75196: CALL_OW 72
75200: IN
75201: AND
75202: IFFALSE 75238
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
75204: LD_VAR 0 4
75208: PUSH
75209: LD_VAR 0 7
75213: ARRAY
75214: PPUSH
75215: LD_VAR 0 14
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PPUSH
75224: CALL_OW 120
// attacking := true ;
75228: LD_ADDR_VAR 0 29
75232: PUSH
75233: LD_INT 1
75235: ST_TO_ADDR
// continue ;
75236: GO 73411
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
75238: LD_VAR 0 26
75242: PUSH
75243: LD_VAR 0 4
75247: PUSH
75248: LD_VAR 0 7
75252: ARRAY
75253: PPUSH
75254: CALL_OW 257
75258: PUSH
75259: LD_INT 1
75261: EQUAL
75262: AND
75263: PUSH
75264: LD_VAR 0 4
75268: PUSH
75269: LD_VAR 0 7
75273: ARRAY
75274: PPUSH
75275: CALL_OW 256
75279: PUSH
75280: LD_INT 800
75282: LESS
75283: AND
75284: PUSH
75285: LD_VAR 0 4
75289: PUSH
75290: LD_VAR 0 7
75294: ARRAY
75295: PPUSH
75296: CALL_OW 318
75300: NOT
75301: AND
75302: IFFALSE 75319
// ComCrawl ( group [ i ] ) ;
75304: LD_VAR 0 4
75308: PUSH
75309: LD_VAR 0 7
75313: ARRAY
75314: PPUSH
75315: CALL_OW 137
// if f_mines then
75319: LD_VAR 0 21
75323: IFFALSE 75566
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
75325: LD_VAR 0 14
75329: PUSH
75330: LD_INT 1
75332: ARRAY
75333: PPUSH
75334: CALL_OW 247
75338: PUSH
75339: LD_INT 3
75341: EQUAL
75342: PUSH
75343: LD_VAR 0 14
75347: PUSH
75348: LD_INT 1
75350: ARRAY
75351: PUSH
75352: LD_VAR 0 27
75356: IN
75357: NOT
75358: AND
75359: IFFALSE 75566
// begin x := GetX ( tmp [ 1 ] ) ;
75361: LD_ADDR_VAR 0 10
75365: PUSH
75366: LD_VAR 0 14
75370: PUSH
75371: LD_INT 1
75373: ARRAY
75374: PPUSH
75375: CALL_OW 250
75379: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
75380: LD_ADDR_VAR 0 11
75384: PUSH
75385: LD_VAR 0 14
75389: PUSH
75390: LD_INT 1
75392: ARRAY
75393: PPUSH
75394: CALL_OW 251
75398: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
75399: LD_ADDR_VAR 0 12
75403: PUSH
75404: LD_VAR 0 4
75408: PUSH
75409: LD_VAR 0 7
75413: ARRAY
75414: PPUSH
75415: CALL 71294 0 1
75419: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
75420: LD_VAR 0 4
75424: PUSH
75425: LD_VAR 0 7
75429: ARRAY
75430: PPUSH
75431: LD_VAR 0 10
75435: PPUSH
75436: LD_VAR 0 11
75440: PPUSH
75441: LD_VAR 0 14
75445: PUSH
75446: LD_INT 1
75448: ARRAY
75449: PPUSH
75450: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
75454: LD_VAR 0 4
75458: PUSH
75459: LD_VAR 0 7
75463: ARRAY
75464: PPUSH
75465: LD_VAR 0 10
75469: PPUSH
75470: LD_VAR 0 12
75474: PPUSH
75475: LD_INT 7
75477: PPUSH
75478: CALL_OW 272
75482: PPUSH
75483: LD_VAR 0 11
75487: PPUSH
75488: LD_VAR 0 12
75492: PPUSH
75493: LD_INT 7
75495: PPUSH
75496: CALL_OW 273
75500: PPUSH
75501: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
75505: LD_VAR 0 4
75509: PUSH
75510: LD_VAR 0 7
75514: ARRAY
75515: PPUSH
75516: LD_INT 71
75518: PPUSH
75519: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
75523: LD_ADDR_VAR 0 27
75527: PUSH
75528: LD_VAR 0 27
75532: PPUSH
75533: LD_VAR 0 27
75537: PUSH
75538: LD_INT 1
75540: PLUS
75541: PPUSH
75542: LD_VAR 0 14
75546: PUSH
75547: LD_INT 1
75549: ARRAY
75550: PPUSH
75551: CALL_OW 1
75555: ST_TO_ADDR
// attacking := true ;
75556: LD_ADDR_VAR 0 29
75560: PUSH
75561: LD_INT 1
75563: ST_TO_ADDR
// continue ;
75564: GO 73411
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
75566: LD_VAR 0 4
75570: PUSH
75571: LD_VAR 0 7
75575: ARRAY
75576: PPUSH
75577: CALL_OW 257
75581: PUSH
75582: LD_INT 17
75584: EQUAL
75585: PUSH
75586: LD_VAR 0 4
75590: PUSH
75591: LD_VAR 0 7
75595: ARRAY
75596: PPUSH
75597: CALL_OW 110
75601: PUSH
75602: LD_INT 71
75604: EQUAL
75605: NOT
75606: AND
75607: IFFALSE 75753
// begin attacking := false ;
75609: LD_ADDR_VAR 0 29
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
// k := 5 ;
75617: LD_ADDR_VAR 0 9
75621: PUSH
75622: LD_INT 5
75624: ST_TO_ADDR
// if tmp < k then
75625: LD_VAR 0 14
75629: PUSH
75630: LD_VAR 0 9
75634: LESS
75635: IFFALSE 75647
// k := tmp ;
75637: LD_ADDR_VAR 0 9
75641: PUSH
75642: LD_VAR 0 14
75646: ST_TO_ADDR
// for j = 1 to k do
75647: LD_ADDR_VAR 0 8
75651: PUSH
75652: DOUBLE
75653: LD_INT 1
75655: DEC
75656: ST_TO_ADDR
75657: LD_VAR 0 9
75661: PUSH
75662: FOR_TO
75663: IFFALSE 75751
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
75665: LD_VAR 0 14
75669: PUSH
75670: LD_VAR 0 8
75674: ARRAY
75675: PUSH
75676: LD_VAR 0 14
75680: PPUSH
75681: LD_INT 58
75683: PUSH
75684: EMPTY
75685: LIST
75686: PPUSH
75687: CALL_OW 72
75691: IN
75692: NOT
75693: IFFALSE 75749
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75695: LD_VAR 0 4
75699: PUSH
75700: LD_VAR 0 7
75704: ARRAY
75705: PPUSH
75706: LD_VAR 0 14
75710: PUSH
75711: LD_VAR 0 8
75715: ARRAY
75716: PPUSH
75717: CALL_OW 115
// attacking := true ;
75721: LD_ADDR_VAR 0 29
75725: PUSH
75726: LD_INT 1
75728: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
75729: LD_VAR 0 4
75733: PUSH
75734: LD_VAR 0 7
75738: ARRAY
75739: PPUSH
75740: LD_INT 71
75742: PPUSH
75743: CALL_OW 109
// continue ;
75747: GO 75662
// end ; end ;
75749: GO 75662
75751: POP
75752: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
75753: LD_VAR 0 4
75757: PUSH
75758: LD_VAR 0 7
75762: ARRAY
75763: PPUSH
75764: CALL_OW 257
75768: PUSH
75769: LD_INT 8
75771: EQUAL
75772: PUSH
75773: LD_VAR 0 4
75777: PUSH
75778: LD_VAR 0 7
75782: ARRAY
75783: PPUSH
75784: CALL_OW 264
75788: PUSH
75789: LD_INT 28
75791: PUSH
75792: LD_INT 45
75794: PUSH
75795: LD_INT 7
75797: PUSH
75798: LD_INT 47
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: IN
75807: OR
75808: IFFALSE 76038
// begin attacking := false ;
75810: LD_ADDR_VAR 0 29
75814: PUSH
75815: LD_INT 0
75817: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
75818: LD_VAR 0 14
75822: PUSH
75823: LD_INT 1
75825: ARRAY
75826: PPUSH
75827: CALL_OW 266
75831: PUSH
75832: LD_INT 32
75834: PUSH
75835: LD_INT 31
75837: PUSH
75838: LD_INT 33
75840: PUSH
75841: LD_INT 4
75843: PUSH
75844: LD_INT 5
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: IN
75854: IFFALSE 76038
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
75856: LD_ADDR_VAR 0 9
75860: PUSH
75861: LD_VAR 0 14
75865: PUSH
75866: LD_INT 1
75868: ARRAY
75869: PPUSH
75870: CALL_OW 266
75874: PPUSH
75875: LD_VAR 0 14
75879: PUSH
75880: LD_INT 1
75882: ARRAY
75883: PPUSH
75884: CALL_OW 250
75888: PPUSH
75889: LD_VAR 0 14
75893: PUSH
75894: LD_INT 1
75896: ARRAY
75897: PPUSH
75898: CALL_OW 251
75902: PPUSH
75903: LD_VAR 0 14
75907: PUSH
75908: LD_INT 1
75910: ARRAY
75911: PPUSH
75912: CALL_OW 254
75916: PPUSH
75917: LD_VAR 0 14
75921: PUSH
75922: LD_INT 1
75924: ARRAY
75925: PPUSH
75926: CALL_OW 248
75930: PPUSH
75931: LD_INT 0
75933: PPUSH
75934: CALL 52670 0 6
75938: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
75939: LD_ADDR_VAR 0 8
75943: PUSH
75944: LD_VAR 0 4
75948: PUSH
75949: LD_VAR 0 7
75953: ARRAY
75954: PPUSH
75955: LD_VAR 0 9
75959: PPUSH
75960: CALL 71357 0 2
75964: ST_TO_ADDR
// if j then
75965: LD_VAR 0 8
75969: IFFALSE 76038
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
75971: LD_VAR 0 8
75975: PUSH
75976: LD_INT 1
75978: ARRAY
75979: PPUSH
75980: LD_VAR 0 8
75984: PUSH
75985: LD_INT 2
75987: ARRAY
75988: PPUSH
75989: CALL_OW 488
75993: IFFALSE 76038
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
75995: LD_VAR 0 4
75999: PUSH
76000: LD_VAR 0 7
76004: ARRAY
76005: PPUSH
76006: LD_VAR 0 8
76010: PUSH
76011: LD_INT 1
76013: ARRAY
76014: PPUSH
76015: LD_VAR 0 8
76019: PUSH
76020: LD_INT 2
76022: ARRAY
76023: PPUSH
76024: CALL_OW 116
// attacking := true ;
76028: LD_ADDR_VAR 0 29
76032: PUSH
76033: LD_INT 1
76035: ST_TO_ADDR
// continue ;
76036: GO 73411
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
76038: LD_VAR 0 4
76042: PUSH
76043: LD_VAR 0 7
76047: ARRAY
76048: PPUSH
76049: CALL_OW 265
76053: PUSH
76054: LD_INT 11
76056: EQUAL
76057: IFFALSE 76335
// begin k := 10 ;
76059: LD_ADDR_VAR 0 9
76063: PUSH
76064: LD_INT 10
76066: ST_TO_ADDR
// x := 0 ;
76067: LD_ADDR_VAR 0 10
76071: PUSH
76072: LD_INT 0
76074: ST_TO_ADDR
// if tmp < k then
76075: LD_VAR 0 14
76079: PUSH
76080: LD_VAR 0 9
76084: LESS
76085: IFFALSE 76097
// k := tmp ;
76087: LD_ADDR_VAR 0 9
76091: PUSH
76092: LD_VAR 0 14
76096: ST_TO_ADDR
// for j = k downto 1 do
76097: LD_ADDR_VAR 0 8
76101: PUSH
76102: DOUBLE
76103: LD_VAR 0 9
76107: INC
76108: ST_TO_ADDR
76109: LD_INT 1
76111: PUSH
76112: FOR_DOWNTO
76113: IFFALSE 76188
// begin if GetType ( tmp [ j ] ) = unit_human then
76115: LD_VAR 0 14
76119: PUSH
76120: LD_VAR 0 8
76124: ARRAY
76125: PPUSH
76126: CALL_OW 247
76130: PUSH
76131: LD_INT 1
76133: EQUAL
76134: IFFALSE 76186
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
76136: LD_VAR 0 4
76140: PUSH
76141: LD_VAR 0 7
76145: ARRAY
76146: PPUSH
76147: LD_VAR 0 14
76151: PUSH
76152: LD_VAR 0 8
76156: ARRAY
76157: PPUSH
76158: CALL 71628 0 2
// x := tmp [ j ] ;
76162: LD_ADDR_VAR 0 10
76166: PUSH
76167: LD_VAR 0 14
76171: PUSH
76172: LD_VAR 0 8
76176: ARRAY
76177: ST_TO_ADDR
// attacking := true ;
76178: LD_ADDR_VAR 0 29
76182: PUSH
76183: LD_INT 1
76185: ST_TO_ADDR
// end ; end ;
76186: GO 76112
76188: POP
76189: POP
// if not x then
76190: LD_VAR 0 10
76194: NOT
76195: IFFALSE 76335
// begin attacking := true ;
76197: LD_ADDR_VAR 0 29
76201: PUSH
76202: LD_INT 1
76204: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
76205: LD_VAR 0 4
76209: PUSH
76210: LD_VAR 0 7
76214: ARRAY
76215: PPUSH
76216: CALL_OW 250
76220: PPUSH
76221: LD_VAR 0 4
76225: PUSH
76226: LD_VAR 0 7
76230: ARRAY
76231: PPUSH
76232: CALL_OW 251
76236: PPUSH
76237: CALL_OW 546
76241: PUSH
76242: LD_INT 2
76244: ARRAY
76245: PUSH
76246: LD_VAR 0 14
76250: PUSH
76251: LD_INT 1
76253: ARRAY
76254: PPUSH
76255: CALL_OW 250
76259: PPUSH
76260: LD_VAR 0 14
76264: PUSH
76265: LD_INT 1
76267: ARRAY
76268: PPUSH
76269: CALL_OW 251
76273: PPUSH
76274: CALL_OW 546
76278: PUSH
76279: LD_INT 2
76281: ARRAY
76282: EQUAL
76283: IFFALSE 76311
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
76285: LD_VAR 0 4
76289: PUSH
76290: LD_VAR 0 7
76294: ARRAY
76295: PPUSH
76296: LD_VAR 0 14
76300: PUSH
76301: LD_INT 1
76303: ARRAY
76304: PPUSH
76305: CALL 71628 0 2
76309: GO 76335
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76311: LD_VAR 0 4
76315: PUSH
76316: LD_VAR 0 7
76320: ARRAY
76321: PPUSH
76322: LD_VAR 0 14
76326: PUSH
76327: LD_INT 1
76329: ARRAY
76330: PPUSH
76331: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
76335: LD_VAR 0 4
76339: PUSH
76340: LD_VAR 0 7
76344: ARRAY
76345: PPUSH
76346: CALL_OW 264
76350: PUSH
76351: LD_INT 29
76353: EQUAL
76354: IFFALSE 76720
// begin if WantsToAttack ( group [ i ] ) in bombed then
76356: LD_VAR 0 4
76360: PUSH
76361: LD_VAR 0 7
76365: ARRAY
76366: PPUSH
76367: CALL_OW 319
76371: PUSH
76372: LD_VAR 0 28
76376: IN
76377: IFFALSE 76381
// continue ;
76379: GO 73411
// k := 8 ;
76381: LD_ADDR_VAR 0 9
76385: PUSH
76386: LD_INT 8
76388: ST_TO_ADDR
// x := 0 ;
76389: LD_ADDR_VAR 0 10
76393: PUSH
76394: LD_INT 0
76396: ST_TO_ADDR
// if tmp < k then
76397: LD_VAR 0 14
76401: PUSH
76402: LD_VAR 0 9
76406: LESS
76407: IFFALSE 76419
// k := tmp ;
76409: LD_ADDR_VAR 0 9
76413: PUSH
76414: LD_VAR 0 14
76418: ST_TO_ADDR
// for j = 1 to k do
76419: LD_ADDR_VAR 0 8
76423: PUSH
76424: DOUBLE
76425: LD_INT 1
76427: DEC
76428: ST_TO_ADDR
76429: LD_VAR 0 9
76433: PUSH
76434: FOR_TO
76435: IFFALSE 76567
// begin if GetType ( tmp [ j ] ) = unit_building then
76437: LD_VAR 0 14
76441: PUSH
76442: LD_VAR 0 8
76446: ARRAY
76447: PPUSH
76448: CALL_OW 247
76452: PUSH
76453: LD_INT 3
76455: EQUAL
76456: IFFALSE 76565
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
76458: LD_VAR 0 14
76462: PUSH
76463: LD_VAR 0 8
76467: ARRAY
76468: PUSH
76469: LD_VAR 0 28
76473: IN
76474: NOT
76475: PUSH
76476: LD_VAR 0 14
76480: PUSH
76481: LD_VAR 0 8
76485: ARRAY
76486: PPUSH
76487: CALL_OW 313
76491: AND
76492: IFFALSE 76565
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
76494: LD_VAR 0 4
76498: PUSH
76499: LD_VAR 0 7
76503: ARRAY
76504: PPUSH
76505: LD_VAR 0 14
76509: PUSH
76510: LD_VAR 0 8
76514: ARRAY
76515: PPUSH
76516: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
76520: LD_ADDR_VAR 0 28
76524: PUSH
76525: LD_VAR 0 28
76529: PPUSH
76530: LD_VAR 0 28
76534: PUSH
76535: LD_INT 1
76537: PLUS
76538: PPUSH
76539: LD_VAR 0 14
76543: PUSH
76544: LD_VAR 0 8
76548: ARRAY
76549: PPUSH
76550: CALL_OW 1
76554: ST_TO_ADDR
// attacking := true ;
76555: LD_ADDR_VAR 0 29
76559: PUSH
76560: LD_INT 1
76562: ST_TO_ADDR
// break ;
76563: GO 76567
// end ; end ;
76565: GO 76434
76567: POP
76568: POP
// if not attacking and f_attack_depot then
76569: LD_VAR 0 29
76573: NOT
76574: PUSH
76575: LD_VAR 0 25
76579: AND
76580: IFFALSE 76675
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76582: LD_ADDR_VAR 0 13
76586: PUSH
76587: LD_VAR 0 14
76591: PPUSH
76592: LD_INT 2
76594: PUSH
76595: LD_INT 30
76597: PUSH
76598: LD_INT 0
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 30
76607: PUSH
76608: LD_INT 1
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: LIST
76619: PPUSH
76620: CALL_OW 72
76624: ST_TO_ADDR
// if z then
76625: LD_VAR 0 13
76629: IFFALSE 76675
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
76631: LD_VAR 0 4
76635: PUSH
76636: LD_VAR 0 7
76640: ARRAY
76641: PPUSH
76642: LD_VAR 0 13
76646: PPUSH
76647: LD_VAR 0 4
76651: PUSH
76652: LD_VAR 0 7
76656: ARRAY
76657: PPUSH
76658: CALL_OW 74
76662: PPUSH
76663: CALL_OW 115
// attacking := true ;
76667: LD_ADDR_VAR 0 29
76671: PUSH
76672: LD_INT 1
76674: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
76675: LD_VAR 0 4
76679: PUSH
76680: LD_VAR 0 7
76684: ARRAY
76685: PPUSH
76686: CALL_OW 256
76690: PUSH
76691: LD_INT 500
76693: LESS
76694: IFFALSE 76720
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76696: LD_VAR 0 4
76700: PUSH
76701: LD_VAR 0 7
76705: ARRAY
76706: PPUSH
76707: LD_VAR 0 14
76711: PUSH
76712: LD_INT 1
76714: ARRAY
76715: PPUSH
76716: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
76720: LD_VAR 0 4
76724: PUSH
76725: LD_VAR 0 7
76729: ARRAY
76730: PPUSH
76731: CALL_OW 264
76735: PUSH
76736: LD_INT 49
76738: EQUAL
76739: IFFALSE 76860
// begin if not HasTask ( group [ i ] ) then
76741: LD_VAR 0 4
76745: PUSH
76746: LD_VAR 0 7
76750: ARRAY
76751: PPUSH
76752: CALL_OW 314
76756: NOT
76757: IFFALSE 76860
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
76759: LD_ADDR_VAR 0 9
76763: PUSH
76764: LD_INT 81
76766: PUSH
76767: LD_VAR 0 4
76771: PUSH
76772: LD_VAR 0 7
76776: ARRAY
76777: PPUSH
76778: CALL_OW 255
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PPUSH
76787: CALL_OW 69
76791: PPUSH
76792: LD_VAR 0 4
76796: PUSH
76797: LD_VAR 0 7
76801: ARRAY
76802: PPUSH
76803: CALL_OW 74
76807: ST_TO_ADDR
// if k then
76808: LD_VAR 0 9
76812: IFFALSE 76860
// if GetDistUnits ( group [ i ] , k ) > 10 then
76814: LD_VAR 0 4
76818: PUSH
76819: LD_VAR 0 7
76823: ARRAY
76824: PPUSH
76825: LD_VAR 0 9
76829: PPUSH
76830: CALL_OW 296
76834: PUSH
76835: LD_INT 10
76837: GREATER
76838: IFFALSE 76860
// ComMoveUnit ( group [ i ] , k ) ;
76840: LD_VAR 0 4
76844: PUSH
76845: LD_VAR 0 7
76849: ARRAY
76850: PPUSH
76851: LD_VAR 0 9
76855: PPUSH
76856: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76860: LD_VAR 0 4
76864: PUSH
76865: LD_VAR 0 7
76869: ARRAY
76870: PPUSH
76871: CALL_OW 256
76875: PUSH
76876: LD_INT 250
76878: LESS
76879: PUSH
76880: LD_VAR 0 4
76884: PUSH
76885: LD_VAR 0 7
76889: ARRAY
76890: PUSH
76891: LD_INT 21
76893: PUSH
76894: LD_INT 2
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 23
76903: PUSH
76904: LD_INT 2
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PPUSH
76915: CALL_OW 69
76919: IN
76920: AND
76921: IFFALSE 77046
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
76923: LD_ADDR_VAR 0 9
76927: PUSH
76928: LD_OWVAR 3
76932: PUSH
76933: LD_VAR 0 4
76937: PUSH
76938: LD_VAR 0 7
76942: ARRAY
76943: DIFF
76944: PPUSH
76945: LD_VAR 0 4
76949: PUSH
76950: LD_VAR 0 7
76954: ARRAY
76955: PPUSH
76956: CALL_OW 74
76960: ST_TO_ADDR
// if not k then
76961: LD_VAR 0 9
76965: NOT
76966: IFFALSE 76970
// continue ;
76968: GO 73411
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
76970: LD_VAR 0 9
76974: PUSH
76975: LD_INT 81
76977: PUSH
76978: LD_VAR 0 4
76982: PUSH
76983: LD_VAR 0 7
76987: ARRAY
76988: PPUSH
76989: CALL_OW 255
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PPUSH
76998: CALL_OW 69
77002: IN
77003: PUSH
77004: LD_VAR 0 9
77008: PPUSH
77009: LD_VAR 0 4
77013: PUSH
77014: LD_VAR 0 7
77018: ARRAY
77019: PPUSH
77020: CALL_OW 296
77024: PUSH
77025: LD_INT 5
77027: LESS
77028: AND
77029: IFFALSE 77046
// ComAutodestruct ( group [ i ] ) ;
77031: LD_VAR 0 4
77035: PUSH
77036: LD_VAR 0 7
77040: ARRAY
77041: PPUSH
77042: CALL 71526 0 1
// end ; if f_attack_depot then
77046: LD_VAR 0 25
77050: IFFALSE 77162
// begin k := 6 ;
77052: LD_ADDR_VAR 0 9
77056: PUSH
77057: LD_INT 6
77059: ST_TO_ADDR
// if tmp < k then
77060: LD_VAR 0 14
77064: PUSH
77065: LD_VAR 0 9
77069: LESS
77070: IFFALSE 77082
// k := tmp ;
77072: LD_ADDR_VAR 0 9
77076: PUSH
77077: LD_VAR 0 14
77081: ST_TO_ADDR
// for j = 1 to k do
77082: LD_ADDR_VAR 0 8
77086: PUSH
77087: DOUBLE
77088: LD_INT 1
77090: DEC
77091: ST_TO_ADDR
77092: LD_VAR 0 9
77096: PUSH
77097: FOR_TO
77098: IFFALSE 77160
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
77100: LD_VAR 0 8
77104: PPUSH
77105: CALL_OW 266
77109: PUSH
77110: LD_INT 0
77112: PUSH
77113: LD_INT 1
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: IN
77120: IFFALSE 77158
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
77122: LD_VAR 0 4
77126: PUSH
77127: LD_VAR 0 7
77131: ARRAY
77132: PPUSH
77133: LD_VAR 0 14
77137: PUSH
77138: LD_VAR 0 8
77142: ARRAY
77143: PPUSH
77144: CALL_OW 115
// attacking := true ;
77148: LD_ADDR_VAR 0 29
77152: PUSH
77153: LD_INT 1
77155: ST_TO_ADDR
// break ;
77156: GO 77160
// end ;
77158: GO 77097
77160: POP
77161: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
77162: LD_VAR 0 4
77166: PUSH
77167: LD_VAR 0 7
77171: ARRAY
77172: PPUSH
77173: CALL_OW 302
77177: PUSH
77178: LD_VAR 0 29
77182: NOT
77183: AND
77184: IFFALSE 77506
// begin if GetTag ( group [ i ] ) = 71 then
77186: LD_VAR 0 4
77190: PUSH
77191: LD_VAR 0 7
77195: ARRAY
77196: PPUSH
77197: CALL_OW 110
77201: PUSH
77202: LD_INT 71
77204: EQUAL
77205: IFFALSE 77246
// begin if HasTask ( group [ i ] ) then
77207: LD_VAR 0 4
77211: PUSH
77212: LD_VAR 0 7
77216: ARRAY
77217: PPUSH
77218: CALL_OW 314
77222: IFFALSE 77228
// continue else
77224: GO 73411
77226: GO 77246
// SetTag ( group [ i ] , 0 ) ;
77228: LD_VAR 0 4
77232: PUSH
77233: LD_VAR 0 7
77237: ARRAY
77238: PPUSH
77239: LD_INT 0
77241: PPUSH
77242: CALL_OW 109
// end ; k := 8 ;
77246: LD_ADDR_VAR 0 9
77250: PUSH
77251: LD_INT 8
77253: ST_TO_ADDR
// x := 0 ;
77254: LD_ADDR_VAR 0 10
77258: PUSH
77259: LD_INT 0
77261: ST_TO_ADDR
// if tmp < k then
77262: LD_VAR 0 14
77266: PUSH
77267: LD_VAR 0 9
77271: LESS
77272: IFFALSE 77284
// k := tmp ;
77274: LD_ADDR_VAR 0 9
77278: PUSH
77279: LD_VAR 0 14
77283: ST_TO_ADDR
// for j = 1 to k do
77284: LD_ADDR_VAR 0 8
77288: PUSH
77289: DOUBLE
77290: LD_INT 1
77292: DEC
77293: ST_TO_ADDR
77294: LD_VAR 0 9
77298: PUSH
77299: FOR_TO
77300: IFFALSE 77398
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
77302: LD_VAR 0 14
77306: PUSH
77307: LD_VAR 0 8
77311: ARRAY
77312: PPUSH
77313: CALL_OW 247
77317: PUSH
77318: LD_INT 1
77320: EQUAL
77321: PUSH
77322: LD_VAR 0 14
77326: PUSH
77327: LD_VAR 0 8
77331: ARRAY
77332: PPUSH
77333: CALL_OW 256
77337: PUSH
77338: LD_INT 250
77340: LESS
77341: PUSH
77342: LD_VAR 0 20
77346: AND
77347: PUSH
77348: LD_VAR 0 20
77352: NOT
77353: PUSH
77354: LD_VAR 0 14
77358: PUSH
77359: LD_VAR 0 8
77363: ARRAY
77364: PPUSH
77365: CALL_OW 256
77369: PUSH
77370: LD_INT 250
77372: GREATEREQUAL
77373: AND
77374: OR
77375: AND
77376: IFFALSE 77396
// begin x := tmp [ j ] ;
77378: LD_ADDR_VAR 0 10
77382: PUSH
77383: LD_VAR 0 14
77387: PUSH
77388: LD_VAR 0 8
77392: ARRAY
77393: ST_TO_ADDR
// break ;
77394: GO 77398
// end ;
77396: GO 77299
77398: POP
77399: POP
// if x then
77400: LD_VAR 0 10
77404: IFFALSE 77428
// ComAttackUnit ( group [ i ] , x ) else
77406: LD_VAR 0 4
77410: PUSH
77411: LD_VAR 0 7
77415: ARRAY
77416: PPUSH
77417: LD_VAR 0 10
77421: PPUSH
77422: CALL_OW 115
77426: GO 77452
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
77428: LD_VAR 0 4
77432: PUSH
77433: LD_VAR 0 7
77437: ARRAY
77438: PPUSH
77439: LD_VAR 0 14
77443: PUSH
77444: LD_INT 1
77446: ARRAY
77447: PPUSH
77448: CALL_OW 115
// if not HasTask ( group [ i ] ) then
77452: LD_VAR 0 4
77456: PUSH
77457: LD_VAR 0 7
77461: ARRAY
77462: PPUSH
77463: CALL_OW 314
77467: NOT
77468: IFFALSE 77506
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
77470: LD_VAR 0 4
77474: PUSH
77475: LD_VAR 0 7
77479: ARRAY
77480: PPUSH
77481: LD_VAR 0 14
77485: PPUSH
77486: LD_VAR 0 4
77490: PUSH
77491: LD_VAR 0 7
77495: ARRAY
77496: PPUSH
77497: CALL_OW 74
77501: PPUSH
77502: CALL_OW 115
// end ; end ; end ;
77506: GO 73411
77508: POP
77509: POP
// wait ( 0 0$1 ) ;
77510: LD_INT 35
77512: PPUSH
77513: CALL_OW 67
// until group = [ ] ;
77517: LD_VAR 0 4
77521: PUSH
77522: EMPTY
77523: EQUAL
77524: IFFALSE 73396
// end ;
77526: LD_VAR 0 2
77530: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77531: LD_INT 0
77533: PPUSH
77534: PPUSH
77535: PPUSH
77536: PPUSH
// if not base_units then
77537: LD_VAR 0 1
77541: NOT
77542: IFFALSE 77546
// exit ;
77544: GO 77633
// result := false ;
77546: LD_ADDR_VAR 0 2
77550: PUSH
77551: LD_INT 0
77553: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77554: LD_ADDR_VAR 0 5
77558: PUSH
77559: LD_VAR 0 1
77563: PPUSH
77564: LD_INT 21
77566: PUSH
77567: LD_INT 3
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PPUSH
77574: CALL_OW 72
77578: ST_TO_ADDR
// if not tmp then
77579: LD_VAR 0 5
77583: NOT
77584: IFFALSE 77588
// exit ;
77586: GO 77633
// for i in tmp do
77588: LD_ADDR_VAR 0 3
77592: PUSH
77593: LD_VAR 0 5
77597: PUSH
77598: FOR_IN
77599: IFFALSE 77631
// begin result := EnemyInRange ( i , 22 ) ;
77601: LD_ADDR_VAR 0 2
77605: PUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: LD_INT 22
77613: PPUSH
77614: CALL 71209 0 2
77618: ST_TO_ADDR
// if result then
77619: LD_VAR 0 2
77623: IFFALSE 77629
// exit ;
77625: POP
77626: POP
77627: GO 77633
// end ;
77629: GO 77598
77631: POP
77632: POP
// end ;
77633: LD_VAR 0 2
77637: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77638: LD_INT 0
77640: PPUSH
77641: PPUSH
// if not units then
77642: LD_VAR 0 1
77646: NOT
77647: IFFALSE 77651
// exit ;
77649: GO 77721
// result := [ ] ;
77651: LD_ADDR_VAR 0 3
77655: PUSH
77656: EMPTY
77657: ST_TO_ADDR
// for i in units do
77658: LD_ADDR_VAR 0 4
77662: PUSH
77663: LD_VAR 0 1
77667: PUSH
77668: FOR_IN
77669: IFFALSE 77719
// if GetTag ( i ) = tag then
77671: LD_VAR 0 4
77675: PPUSH
77676: CALL_OW 110
77680: PUSH
77681: LD_VAR 0 2
77685: EQUAL
77686: IFFALSE 77717
// result := Insert ( result , result + 1 , i ) ;
77688: LD_ADDR_VAR 0 3
77692: PUSH
77693: LD_VAR 0 3
77697: PPUSH
77698: LD_VAR 0 3
77702: PUSH
77703: LD_INT 1
77705: PLUS
77706: PPUSH
77707: LD_VAR 0 4
77711: PPUSH
77712: CALL_OW 2
77716: ST_TO_ADDR
77717: GO 77668
77719: POP
77720: POP
// end ;
77721: LD_VAR 0 3
77725: RET
// export function IsDriver ( un ) ; begin
77726: LD_INT 0
77728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77729: LD_ADDR_VAR 0 2
77733: PUSH
77734: LD_VAR 0 1
77738: PUSH
77739: LD_INT 55
77741: PUSH
77742: EMPTY
77743: LIST
77744: PPUSH
77745: CALL_OW 69
77749: IN
77750: ST_TO_ADDR
// end ;
77751: LD_VAR 0 2
77755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77756: LD_INT 0
77758: PPUSH
77759: PPUSH
// list := [ ] ;
77760: LD_ADDR_VAR 0 5
77764: PUSH
77765: EMPTY
77766: ST_TO_ADDR
// case d of 0 :
77767: LD_VAR 0 3
77771: PUSH
77772: LD_INT 0
77774: DOUBLE
77775: EQUAL
77776: IFTRUE 77780
77778: GO 77913
77780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77781: LD_ADDR_VAR 0 5
77785: PUSH
77786: LD_VAR 0 1
77790: PUSH
77791: LD_INT 4
77793: MINUS
77794: PUSH
77795: LD_VAR 0 2
77799: PUSH
77800: LD_INT 4
77802: MINUS
77803: PUSH
77804: LD_INT 2
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: LIST
77811: PUSH
77812: LD_VAR 0 1
77816: PUSH
77817: LD_INT 3
77819: MINUS
77820: PUSH
77821: LD_VAR 0 2
77825: PUSH
77826: LD_INT 1
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: LIST
77833: PUSH
77834: LD_VAR 0 1
77838: PUSH
77839: LD_INT 4
77841: PLUS
77842: PUSH
77843: LD_VAR 0 2
77847: PUSH
77848: LD_INT 4
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: LIST
77855: PUSH
77856: LD_VAR 0 1
77860: PUSH
77861: LD_INT 3
77863: PLUS
77864: PUSH
77865: LD_VAR 0 2
77869: PUSH
77870: LD_INT 3
77872: PLUS
77873: PUSH
77874: LD_INT 5
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: PUSH
77882: LD_VAR 0 1
77886: PUSH
77887: LD_VAR 0 2
77891: PUSH
77892: LD_INT 4
77894: PLUS
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: LIST
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: ST_TO_ADDR
// end ; 1 :
77911: GO 78611
77913: LD_INT 1
77915: DOUBLE
77916: EQUAL
77917: IFTRUE 77921
77919: GO 78054
77921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77922: LD_ADDR_VAR 0 5
77926: PUSH
77927: LD_VAR 0 1
77931: PUSH
77932: LD_VAR 0 2
77936: PUSH
77937: LD_INT 4
77939: MINUS
77940: PUSH
77941: LD_INT 3
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: LIST
77948: PUSH
77949: LD_VAR 0 1
77953: PUSH
77954: LD_INT 3
77956: MINUS
77957: PUSH
77958: LD_VAR 0 2
77962: PUSH
77963: LD_INT 3
77965: MINUS
77966: PUSH
77967: LD_INT 2
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: PUSH
77975: LD_VAR 0 1
77979: PUSH
77980: LD_INT 4
77982: MINUS
77983: PUSH
77984: LD_VAR 0 2
77988: PUSH
77989: LD_INT 1
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: LIST
77996: PUSH
77997: LD_VAR 0 1
78001: PUSH
78002: LD_VAR 0 2
78006: PUSH
78007: LD_INT 3
78009: PLUS
78010: PUSH
78011: LD_INT 0
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: LIST
78018: PUSH
78019: LD_VAR 0 1
78023: PUSH
78024: LD_INT 4
78026: PLUS
78027: PUSH
78028: LD_VAR 0 2
78032: PUSH
78033: LD_INT 4
78035: PLUS
78036: PUSH
78037: LD_INT 5
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: LIST
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: LIST
78049: LIST
78050: LIST
78051: ST_TO_ADDR
// end ; 2 :
78052: GO 78611
78054: LD_INT 2
78056: DOUBLE
78057: EQUAL
78058: IFTRUE 78062
78060: GO 78191
78062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78063: LD_ADDR_VAR 0 5
78067: PUSH
78068: LD_VAR 0 1
78072: PUSH
78073: LD_VAR 0 2
78077: PUSH
78078: LD_INT 3
78080: MINUS
78081: PUSH
78082: LD_INT 3
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: LIST
78089: PUSH
78090: LD_VAR 0 1
78094: PUSH
78095: LD_INT 4
78097: PLUS
78098: PUSH
78099: LD_VAR 0 2
78103: PUSH
78104: LD_INT 4
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: LIST
78111: PUSH
78112: LD_VAR 0 1
78116: PUSH
78117: LD_VAR 0 2
78121: PUSH
78122: LD_INT 4
78124: PLUS
78125: PUSH
78126: LD_INT 0
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: LIST
78133: PUSH
78134: LD_VAR 0 1
78138: PUSH
78139: LD_INT 3
78141: MINUS
78142: PUSH
78143: LD_VAR 0 2
78147: PUSH
78148: LD_INT 1
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: LIST
78155: PUSH
78156: LD_VAR 0 1
78160: PUSH
78161: LD_INT 4
78163: MINUS
78164: PUSH
78165: LD_VAR 0 2
78169: PUSH
78170: LD_INT 4
78172: MINUS
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: LIST
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: ST_TO_ADDR
// end ; 3 :
78189: GO 78611
78191: LD_INT 3
78193: DOUBLE
78194: EQUAL
78195: IFTRUE 78199
78197: GO 78332
78199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78200: LD_ADDR_VAR 0 5
78204: PUSH
78205: LD_VAR 0 1
78209: PUSH
78210: LD_INT 3
78212: PLUS
78213: PUSH
78214: LD_VAR 0 2
78218: PUSH
78219: LD_INT 4
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: LIST
78226: PUSH
78227: LD_VAR 0 1
78231: PUSH
78232: LD_INT 4
78234: PLUS
78235: PUSH
78236: LD_VAR 0 2
78240: PUSH
78241: LD_INT 4
78243: PLUS
78244: PUSH
78245: LD_INT 5
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: PUSH
78253: LD_VAR 0 1
78257: PUSH
78258: LD_INT 4
78260: MINUS
78261: PUSH
78262: LD_VAR 0 2
78266: PUSH
78267: LD_INT 1
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: LIST
78274: PUSH
78275: LD_VAR 0 1
78279: PUSH
78280: LD_VAR 0 2
78284: PUSH
78285: LD_INT 4
78287: MINUS
78288: PUSH
78289: LD_INT 3
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: LIST
78296: PUSH
78297: LD_VAR 0 1
78301: PUSH
78302: LD_INT 3
78304: MINUS
78305: PUSH
78306: LD_VAR 0 2
78310: PUSH
78311: LD_INT 3
78313: MINUS
78314: PUSH
78315: LD_INT 2
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: LIST
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: LIST
78327: LIST
78328: LIST
78329: ST_TO_ADDR
// end ; 4 :
78330: GO 78611
78332: LD_INT 4
78334: DOUBLE
78335: EQUAL
78336: IFTRUE 78340
78338: GO 78473
78340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78341: LD_ADDR_VAR 0 5
78345: PUSH
78346: LD_VAR 0 1
78350: PUSH
78351: LD_VAR 0 2
78355: PUSH
78356: LD_INT 4
78358: PLUS
78359: PUSH
78360: LD_INT 0
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: LIST
78367: PUSH
78368: LD_VAR 0 1
78372: PUSH
78373: LD_INT 3
78375: PLUS
78376: PUSH
78377: LD_VAR 0 2
78381: PUSH
78382: LD_INT 3
78384: PLUS
78385: PUSH
78386: LD_INT 5
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: LIST
78393: PUSH
78394: LD_VAR 0 1
78398: PUSH
78399: LD_INT 4
78401: PLUS
78402: PUSH
78403: LD_VAR 0 2
78407: PUSH
78408: LD_INT 4
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: LIST
78415: PUSH
78416: LD_VAR 0 1
78420: PUSH
78421: LD_VAR 0 2
78425: PUSH
78426: LD_INT 3
78428: MINUS
78429: PUSH
78430: LD_INT 3
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: LIST
78437: PUSH
78438: LD_VAR 0 1
78442: PUSH
78443: LD_INT 4
78445: MINUS
78446: PUSH
78447: LD_VAR 0 2
78451: PUSH
78452: LD_INT 4
78454: MINUS
78455: PUSH
78456: LD_INT 2
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: LIST
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: LIST
78470: ST_TO_ADDR
// end ; 5 :
78471: GO 78611
78473: LD_INT 5
78475: DOUBLE
78476: EQUAL
78477: IFTRUE 78481
78479: GO 78610
78481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78482: LD_ADDR_VAR 0 5
78486: PUSH
78487: LD_VAR 0 1
78491: PUSH
78492: LD_INT 4
78494: MINUS
78495: PUSH
78496: LD_VAR 0 2
78500: PUSH
78501: LD_INT 1
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: LIST
78508: PUSH
78509: LD_VAR 0 1
78513: PUSH
78514: LD_VAR 0 2
78518: PUSH
78519: LD_INT 4
78521: MINUS
78522: PUSH
78523: LD_INT 3
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: LIST
78530: PUSH
78531: LD_VAR 0 1
78535: PUSH
78536: LD_INT 4
78538: PLUS
78539: PUSH
78540: LD_VAR 0 2
78544: PUSH
78545: LD_INT 4
78547: PLUS
78548: PUSH
78549: LD_INT 5
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: LIST
78556: PUSH
78557: LD_VAR 0 1
78561: PUSH
78562: LD_INT 3
78564: PLUS
78565: PUSH
78566: LD_VAR 0 2
78570: PUSH
78571: LD_INT 4
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: LIST
78578: PUSH
78579: LD_VAR 0 1
78583: PUSH
78584: LD_VAR 0 2
78588: PUSH
78589: LD_INT 3
78591: PLUS
78592: PUSH
78593: LD_INT 0
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: LIST
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: LIST
78605: LIST
78606: LIST
78607: ST_TO_ADDR
// end ; end ;
78608: GO 78611
78610: POP
// result := list ;
78611: LD_ADDR_VAR 0 4
78615: PUSH
78616: LD_VAR 0 5
78620: ST_TO_ADDR
// end ;
78621: LD_VAR 0 4
78625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78626: LD_INT 0
78628: PPUSH
78629: PPUSH
78630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78631: LD_VAR 0 1
78635: NOT
78636: PUSH
78637: LD_VAR 0 2
78641: PUSH
78642: LD_INT 1
78644: PUSH
78645: LD_INT 2
78647: PUSH
78648: LD_INT 3
78650: PUSH
78651: LD_INT 4
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: IN
78660: NOT
78661: OR
78662: IFFALSE 78666
// exit ;
78664: GO 78758
// tmp := [ ] ;
78666: LD_ADDR_VAR 0 5
78670: PUSH
78671: EMPTY
78672: ST_TO_ADDR
// for i in units do
78673: LD_ADDR_VAR 0 4
78677: PUSH
78678: LD_VAR 0 1
78682: PUSH
78683: FOR_IN
78684: IFFALSE 78727
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78686: LD_ADDR_VAR 0 5
78690: PUSH
78691: LD_VAR 0 5
78695: PPUSH
78696: LD_VAR 0 5
78700: PUSH
78701: LD_INT 1
78703: PLUS
78704: PPUSH
78705: LD_VAR 0 4
78709: PPUSH
78710: LD_VAR 0 2
78714: PPUSH
78715: CALL_OW 259
78719: PPUSH
78720: CALL_OW 2
78724: ST_TO_ADDR
78725: GO 78683
78727: POP
78728: POP
// if not tmp then
78729: LD_VAR 0 5
78733: NOT
78734: IFFALSE 78738
// exit ;
78736: GO 78758
// result := SortListByListDesc ( units , tmp ) ;
78738: LD_ADDR_VAR 0 3
78742: PUSH
78743: LD_VAR 0 1
78747: PPUSH
78748: LD_VAR 0 5
78752: PPUSH
78753: CALL_OW 77
78757: ST_TO_ADDR
// end ;
78758: LD_VAR 0 3
78762: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78763: LD_INT 0
78765: PPUSH
78766: PPUSH
78767: PPUSH
// x := GetX ( building ) ;
78768: LD_ADDR_VAR 0 4
78772: PUSH
78773: LD_VAR 0 2
78777: PPUSH
78778: CALL_OW 250
78782: ST_TO_ADDR
// y := GetY ( building ) ;
78783: LD_ADDR_VAR 0 5
78787: PUSH
78788: LD_VAR 0 2
78792: PPUSH
78793: CALL_OW 251
78797: ST_TO_ADDR
// if GetTaskList ( unit ) then
78798: LD_VAR 0 1
78802: PPUSH
78803: CALL_OW 437
78807: IFFALSE 78902
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78809: LD_STRING e
78811: PUSH
78812: LD_VAR 0 1
78816: PPUSH
78817: CALL_OW 437
78821: PUSH
78822: LD_INT 1
78824: ARRAY
78825: PUSH
78826: LD_INT 1
78828: ARRAY
78829: EQUAL
78830: PUSH
78831: LD_VAR 0 4
78835: PUSH
78836: LD_VAR 0 1
78840: PPUSH
78841: CALL_OW 437
78845: PUSH
78846: LD_INT 1
78848: ARRAY
78849: PUSH
78850: LD_INT 2
78852: ARRAY
78853: EQUAL
78854: AND
78855: PUSH
78856: LD_VAR 0 5
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 437
78870: PUSH
78871: LD_INT 1
78873: ARRAY
78874: PUSH
78875: LD_INT 3
78877: ARRAY
78878: EQUAL
78879: AND
78880: IFFALSE 78892
// result := true else
78882: LD_ADDR_VAR 0 3
78886: PUSH
78887: LD_INT 1
78889: ST_TO_ADDR
78890: GO 78900
// result := false ;
78892: LD_ADDR_VAR 0 3
78896: PUSH
78897: LD_INT 0
78899: ST_TO_ADDR
// end else
78900: GO 78910
// result := false ;
78902: LD_ADDR_VAR 0 3
78906: PUSH
78907: LD_INT 0
78909: ST_TO_ADDR
// end ;
78910: LD_VAR 0 3
78914: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78915: LD_INT 0
78917: PPUSH
78918: PPUSH
78919: PPUSH
78920: PPUSH
// if not unit or not area then
78921: LD_VAR 0 1
78925: NOT
78926: PUSH
78927: LD_VAR 0 2
78931: NOT
78932: OR
78933: IFFALSE 78937
// exit ;
78935: GO 79102
// tmp := AreaToList ( area , i ) ;
78937: LD_ADDR_VAR 0 6
78941: PUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_VAR 0 5
78951: PPUSH
78952: CALL_OW 517
78956: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78957: LD_ADDR_VAR 0 5
78961: PUSH
78962: DOUBLE
78963: LD_INT 1
78965: DEC
78966: ST_TO_ADDR
78967: LD_VAR 0 6
78971: PUSH
78972: LD_INT 1
78974: ARRAY
78975: PUSH
78976: FOR_TO
78977: IFFALSE 79092
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78979: LD_ADDR_VAR 0 7
78983: PUSH
78984: LD_VAR 0 6
78988: PUSH
78989: LD_INT 1
78991: ARRAY
78992: PUSH
78993: LD_VAR 0 5
78997: ARRAY
78998: PUSH
78999: LD_VAR 0 6
79003: PUSH
79004: LD_INT 2
79006: ARRAY
79007: PUSH
79008: LD_VAR 0 5
79012: ARRAY
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
79018: LD_VAR 0 7
79022: PUSH
79023: LD_INT 1
79025: ARRAY
79026: PPUSH
79027: LD_VAR 0 7
79031: PUSH
79032: LD_INT 2
79034: ARRAY
79035: PPUSH
79036: CALL_OW 428
79040: PUSH
79041: LD_INT 0
79043: EQUAL
79044: IFFALSE 79090
// begin result := true ;
79046: LD_ADDR_VAR 0 4
79050: PUSH
79051: LD_INT 1
79053: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79054: LD_VAR 0 1
79058: PPUSH
79059: LD_VAR 0 7
79063: PUSH
79064: LD_INT 1
79066: ARRAY
79067: PPUSH
79068: LD_VAR 0 7
79072: PUSH
79073: LD_INT 2
79075: ARRAY
79076: PPUSH
79077: LD_VAR 0 3
79081: PPUSH
79082: CALL_OW 48
// exit ;
79086: POP
79087: POP
79088: GO 79102
// end ; end ;
79090: GO 78976
79092: POP
79093: POP
// result := false ;
79094: LD_ADDR_VAR 0 4
79098: PUSH
79099: LD_INT 0
79101: ST_TO_ADDR
// end ;
79102: LD_VAR 0 4
79106: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79107: LD_INT 0
79109: PPUSH
79110: PPUSH
79111: PPUSH
// if not side or side > 8 then
79112: LD_VAR 0 1
79116: NOT
79117: PUSH
79118: LD_VAR 0 1
79122: PUSH
79123: LD_INT 8
79125: GREATER
79126: OR
79127: IFFALSE 79131
// exit ;
79129: GO 79318
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79131: LD_ADDR_VAR 0 4
79135: PUSH
79136: LD_INT 22
79138: PUSH
79139: LD_VAR 0 1
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: LD_INT 21
79150: PUSH
79151: LD_INT 3
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PPUSH
79162: CALL_OW 69
79166: ST_TO_ADDR
// if not tmp then
79167: LD_VAR 0 4
79171: NOT
79172: IFFALSE 79176
// exit ;
79174: GO 79318
// enable_addtolog := true ;
79176: LD_ADDR_OWVAR 81
79180: PUSH
79181: LD_INT 1
79183: ST_TO_ADDR
// AddToLog ( [ ) ;
79184: LD_STRING [
79186: PPUSH
79187: CALL_OW 561
// for i in tmp do
79191: LD_ADDR_VAR 0 3
79195: PUSH
79196: LD_VAR 0 4
79200: PUSH
79201: FOR_IN
79202: IFFALSE 79309
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79204: LD_STRING [
79206: PUSH
79207: LD_VAR 0 3
79211: PPUSH
79212: CALL_OW 266
79216: STR
79217: PUSH
79218: LD_STRING , 
79220: STR
79221: PUSH
79222: LD_VAR 0 3
79226: PPUSH
79227: CALL_OW 250
79231: STR
79232: PUSH
79233: LD_STRING , 
79235: STR
79236: PUSH
79237: LD_VAR 0 3
79241: PPUSH
79242: CALL_OW 251
79246: STR
79247: PUSH
79248: LD_STRING , 
79250: STR
79251: PUSH
79252: LD_VAR 0 3
79256: PPUSH
79257: CALL_OW 254
79261: STR
79262: PUSH
79263: LD_STRING , 
79265: STR
79266: PUSH
79267: LD_VAR 0 3
79271: PPUSH
79272: LD_INT 1
79274: PPUSH
79275: CALL_OW 268
79279: STR
79280: PUSH
79281: LD_STRING , 
79283: STR
79284: PUSH
79285: LD_VAR 0 3
79289: PPUSH
79290: LD_INT 2
79292: PPUSH
79293: CALL_OW 268
79297: STR
79298: PUSH
79299: LD_STRING ],
79301: STR
79302: PPUSH
79303: CALL_OW 561
// end ;
79307: GO 79201
79309: POP
79310: POP
// AddToLog ( ]; ) ;
79311: LD_STRING ];
79313: PPUSH
79314: CALL_OW 561
// end ;
79318: LD_VAR 0 2
79322: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79323: LD_INT 0
79325: PPUSH
79326: PPUSH
79327: PPUSH
79328: PPUSH
79329: PPUSH
// if not area or not rate or not max then
79330: LD_VAR 0 1
79334: NOT
79335: PUSH
79336: LD_VAR 0 2
79340: NOT
79341: OR
79342: PUSH
79343: LD_VAR 0 4
79347: NOT
79348: OR
79349: IFFALSE 79353
// exit ;
79351: GO 79545
// while 1 do
79353: LD_INT 1
79355: IFFALSE 79545
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79357: LD_ADDR_VAR 0 9
79361: PUSH
79362: LD_VAR 0 1
79366: PPUSH
79367: LD_INT 1
79369: PPUSH
79370: CALL_OW 287
79374: PUSH
79375: LD_INT 10
79377: MUL
79378: ST_TO_ADDR
// r := rate / 10 ;
79379: LD_ADDR_VAR 0 7
79383: PUSH
79384: LD_VAR 0 2
79388: PUSH
79389: LD_INT 10
79391: DIVREAL
79392: ST_TO_ADDR
// time := 1 1$00 ;
79393: LD_ADDR_VAR 0 8
79397: PUSH
79398: LD_INT 2100
79400: ST_TO_ADDR
// if amount < min then
79401: LD_VAR 0 9
79405: PUSH
79406: LD_VAR 0 3
79410: LESS
79411: IFFALSE 79429
// r := r * 2 else
79413: LD_ADDR_VAR 0 7
79417: PUSH
79418: LD_VAR 0 7
79422: PUSH
79423: LD_INT 2
79425: MUL
79426: ST_TO_ADDR
79427: GO 79455
// if amount > max then
79429: LD_VAR 0 9
79433: PUSH
79434: LD_VAR 0 4
79438: GREATER
79439: IFFALSE 79455
// r := r / 2 ;
79441: LD_ADDR_VAR 0 7
79445: PUSH
79446: LD_VAR 0 7
79450: PUSH
79451: LD_INT 2
79453: DIVREAL
79454: ST_TO_ADDR
// time := time / r ;
79455: LD_ADDR_VAR 0 8
79459: PUSH
79460: LD_VAR 0 8
79464: PUSH
79465: LD_VAR 0 7
79469: DIVREAL
79470: ST_TO_ADDR
// if time < 0 then
79471: LD_VAR 0 8
79475: PUSH
79476: LD_INT 0
79478: LESS
79479: IFFALSE 79496
// time := time * - 1 ;
79481: LD_ADDR_VAR 0 8
79485: PUSH
79486: LD_VAR 0 8
79490: PUSH
79491: LD_INT 1
79493: NEG
79494: MUL
79495: ST_TO_ADDR
// wait ( time ) ;
79496: LD_VAR 0 8
79500: PPUSH
79501: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79505: LD_INT 35
79507: PPUSH
79508: LD_INT 875
79510: PPUSH
79511: CALL_OW 12
79515: PPUSH
79516: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79520: LD_INT 1
79522: PPUSH
79523: LD_INT 5
79525: PPUSH
79526: CALL_OW 12
79530: PPUSH
79531: LD_VAR 0 1
79535: PPUSH
79536: LD_INT 1
79538: PPUSH
79539: CALL_OW 55
// end ;
79543: GO 79353
// end ;
79545: LD_VAR 0 5
79549: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79550: LD_INT 0
79552: PPUSH
79553: PPUSH
79554: PPUSH
79555: PPUSH
79556: PPUSH
79557: PPUSH
79558: PPUSH
79559: PPUSH
// if not turrets or not factories then
79560: LD_VAR 0 1
79564: NOT
79565: PUSH
79566: LD_VAR 0 2
79570: NOT
79571: OR
79572: IFFALSE 79576
// exit ;
79574: GO 79883
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79576: LD_ADDR_VAR 0 10
79580: PUSH
79581: LD_INT 5
79583: PUSH
79584: LD_INT 6
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 2
79593: PUSH
79594: LD_INT 4
79596: PUSH
79597: EMPTY
79598: LIST
79599: LIST
79600: PUSH
79601: LD_INT 3
79603: PUSH
79604: LD_INT 5
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: LIST
79615: PUSH
79616: LD_INT 24
79618: PUSH
79619: LD_INT 25
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 23
79628: PUSH
79629: LD_INT 27
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: LD_INT 42
79642: PUSH
79643: LD_INT 43
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: PUSH
79650: LD_INT 44
79652: PUSH
79653: LD_INT 46
79655: PUSH
79656: EMPTY
79657: LIST
79658: LIST
79659: PUSH
79660: LD_INT 45
79662: PUSH
79663: LD_INT 47
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: LIST
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: LIST
79679: ST_TO_ADDR
// result := [ ] ;
79680: LD_ADDR_VAR 0 3
79684: PUSH
79685: EMPTY
79686: ST_TO_ADDR
// for i in turrets do
79687: LD_ADDR_VAR 0 4
79691: PUSH
79692: LD_VAR 0 1
79696: PUSH
79697: FOR_IN
79698: IFFALSE 79881
// begin nat := GetNation ( i ) ;
79700: LD_ADDR_VAR 0 7
79704: PUSH
79705: LD_VAR 0 4
79709: PPUSH
79710: CALL_OW 248
79714: ST_TO_ADDR
// weapon := 0 ;
79715: LD_ADDR_VAR 0 8
79719: PUSH
79720: LD_INT 0
79722: ST_TO_ADDR
// if not nat then
79723: LD_VAR 0 7
79727: NOT
79728: IFFALSE 79732
// continue ;
79730: GO 79697
// for j in list [ nat ] do
79732: LD_ADDR_VAR 0 5
79736: PUSH
79737: LD_VAR 0 10
79741: PUSH
79742: LD_VAR 0 7
79746: ARRAY
79747: PUSH
79748: FOR_IN
79749: IFFALSE 79790
// if GetBWeapon ( i ) = j [ 1 ] then
79751: LD_VAR 0 4
79755: PPUSH
79756: CALL_OW 269
79760: PUSH
79761: LD_VAR 0 5
79765: PUSH
79766: LD_INT 1
79768: ARRAY
79769: EQUAL
79770: IFFALSE 79788
// begin weapon := j [ 2 ] ;
79772: LD_ADDR_VAR 0 8
79776: PUSH
79777: LD_VAR 0 5
79781: PUSH
79782: LD_INT 2
79784: ARRAY
79785: ST_TO_ADDR
// break ;
79786: GO 79790
// end ;
79788: GO 79748
79790: POP
79791: POP
// if not weapon then
79792: LD_VAR 0 8
79796: NOT
79797: IFFALSE 79801
// continue ;
79799: GO 79697
// for k in factories do
79801: LD_ADDR_VAR 0 6
79805: PUSH
79806: LD_VAR 0 2
79810: PUSH
79811: FOR_IN
79812: IFFALSE 79877
// begin weapons := AvailableWeaponList ( k ) ;
79814: LD_ADDR_VAR 0 9
79818: PUSH
79819: LD_VAR 0 6
79823: PPUSH
79824: CALL_OW 478
79828: ST_TO_ADDR
// if not weapons then
79829: LD_VAR 0 9
79833: NOT
79834: IFFALSE 79838
// continue ;
79836: GO 79811
// if weapon in weapons then
79838: LD_VAR 0 8
79842: PUSH
79843: LD_VAR 0 9
79847: IN
79848: IFFALSE 79875
// begin result := [ i , weapon ] ;
79850: LD_ADDR_VAR 0 3
79854: PUSH
79855: LD_VAR 0 4
79859: PUSH
79860: LD_VAR 0 8
79864: PUSH
79865: EMPTY
79866: LIST
79867: LIST
79868: ST_TO_ADDR
// exit ;
79869: POP
79870: POP
79871: POP
79872: POP
79873: GO 79883
// end ; end ;
79875: GO 79811
79877: POP
79878: POP
// end ;
79879: GO 79697
79881: POP
79882: POP
// end ; end_of_file
79883: LD_VAR 0 3
79887: RET
// export RUAggressivenessLevel , RUWeaponsPool ; export RUMinVehCount , RUMaxVehCount , RUMinSolCount , RUMaxSolCount ; export RUMinBazookaCount , RUMaxBazookaCount ; export ThresholdLvl2 , ThresholdLvl3 , ThresholdLvl4 , ThresholdLvl5 ; export function SetAggressivenessLevel ( level ) ; begin
79888: LD_INT 0
79890: PPUSH
// case level of 1 :
79891: LD_VAR 0 1
79895: PUSH
79896: LD_INT 1
79898: DOUBLE
79899: EQUAL
79900: IFTRUE 79904
79902: GO 79982
79904: POP
// begin RUAggressivenessLevel := 1 ;
79905: LD_ADDR_EXP 97
79909: PUSH
79910: LD_INT 1
79912: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79913: LD_ADDR_EXP 98
79917: PUSH
79918: LD_INT 42
79920: PUSH
79921: LD_INT 43
79923: PUSH
79924: LD_INT 44
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: LIST
79931: ST_TO_ADDR
// RUMinVehCount := 3 ;
79932: LD_ADDR_EXP 99
79936: PUSH
79937: LD_INT 3
79939: ST_TO_ADDR
// RUMaxVehCount := 5 ;
79940: LD_ADDR_EXP 100
79944: PUSH
79945: LD_INT 5
79947: ST_TO_ADDR
// RUMinSolCount := 4 ;
79948: LD_ADDR_EXP 101
79952: PUSH
79953: LD_INT 4
79955: ST_TO_ADDR
// RUMaxSolCount := 5 ;
79956: LD_ADDR_EXP 102
79960: PUSH
79961: LD_INT 5
79963: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
79964: LD_ADDR_EXP 103
79968: PUSH
79969: LD_INT 0
79971: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
79972: LD_ADDR_EXP 104
79976: PUSH
79977: LD_INT 0
79979: ST_TO_ADDR
// end ; 2 :
79980: GO 80343
79982: LD_INT 2
79984: DOUBLE
79985: EQUAL
79986: IFTRUE 79990
79988: GO 80068
79990: POP
// begin RUAggressivenessLevel := 2 ;
79991: LD_ADDR_EXP 97
79995: PUSH
79996: LD_INT 2
79998: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79999: LD_ADDR_EXP 98
80003: PUSH
80004: LD_INT 42
80006: PUSH
80007: LD_INT 43
80009: PUSH
80010: LD_INT 44
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: LIST
80017: ST_TO_ADDR
// RUMinVehCount := 4 ;
80018: LD_ADDR_EXP 99
80022: PUSH
80023: LD_INT 4
80025: ST_TO_ADDR
// RUMaxVehCount := 5 ;
80026: LD_ADDR_EXP 100
80030: PUSH
80031: LD_INT 5
80033: ST_TO_ADDR
// RUMinSolCount := 5 ;
80034: LD_ADDR_EXP 101
80038: PUSH
80039: LD_INT 5
80041: ST_TO_ADDR
// RUMaxSolCount := 6 ;
80042: LD_ADDR_EXP 102
80046: PUSH
80047: LD_INT 6
80049: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
80050: LD_ADDR_EXP 103
80054: PUSH
80055: LD_INT 0
80057: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
80058: LD_ADDR_EXP 104
80062: PUSH
80063: LD_INT 0
80065: ST_TO_ADDR
// end ; 3 :
80066: GO 80343
80068: LD_INT 3
80070: DOUBLE
80071: EQUAL
80072: IFTRUE 80076
80074: GO 80154
80076: POP
// begin RUAggressivenessLevel := 3 ;
80077: LD_ADDR_EXP 97
80081: PUSH
80082: LD_INT 3
80084: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 76 ] ;
80085: LD_ADDR_EXP 98
80089: PUSH
80090: LD_INT 43
80092: PUSH
80093: LD_INT 44
80095: PUSH
80096: LD_INT 76
80098: PUSH
80099: EMPTY
80100: LIST
80101: LIST
80102: LIST
80103: ST_TO_ADDR
// RUMinVehCount := 4 ;
80104: LD_ADDR_EXP 99
80108: PUSH
80109: LD_INT 4
80111: ST_TO_ADDR
// RUMaxVehCount := 6 ;
80112: LD_ADDR_EXP 100
80116: PUSH
80117: LD_INT 6
80119: ST_TO_ADDR
// RUMinSolCount := 4 ;
80120: LD_ADDR_EXP 101
80124: PUSH
80125: LD_INT 4
80127: ST_TO_ADDR
// RUMaxSolCount := 5 ;
80128: LD_ADDR_EXP 102
80132: PUSH
80133: LD_INT 5
80135: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
80136: LD_ADDR_EXP 103
80140: PUSH
80141: LD_INT 0
80143: ST_TO_ADDR
// RUMaxBazookaCount := 1 ;
80144: LD_ADDR_EXP 104
80148: PUSH
80149: LD_INT 1
80151: ST_TO_ADDR
// end ; 4 :
80152: GO 80343
80154: LD_INT 4
80156: DOUBLE
80157: EQUAL
80158: IFTRUE 80162
80160: GO 80244
80162: POP
// begin RUAggressivenessLevel := 4 ;
80163: LD_ADDR_EXP 97
80167: PUSH
80168: LD_INT 4
80170: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 76 ] ;
80171: LD_ADDR_EXP 98
80175: PUSH
80176: LD_INT 43
80178: PUSH
80179: LD_INT 44
80181: PUSH
80182: LD_INT 45
80184: PUSH
80185: LD_INT 76
80187: PUSH
80188: EMPTY
80189: LIST
80190: LIST
80191: LIST
80192: LIST
80193: ST_TO_ADDR
// RUMinVehCount := 3 ;
80194: LD_ADDR_EXP 99
80198: PUSH
80199: LD_INT 3
80201: ST_TO_ADDR
// RUMaxVehCount := 5 ;
80202: LD_ADDR_EXP 100
80206: PUSH
80207: LD_INT 5
80209: ST_TO_ADDR
// RUMinSolCount := 4 ;
80210: LD_ADDR_EXP 101
80214: PUSH
80215: LD_INT 4
80217: ST_TO_ADDR
// RUMaxSolCount := 5 ;
80218: LD_ADDR_EXP 102
80222: PUSH
80223: LD_INT 5
80225: ST_TO_ADDR
// RUMinBazookaCount := 1 ;
80226: LD_ADDR_EXP 103
80230: PUSH
80231: LD_INT 1
80233: ST_TO_ADDR
// RUMaxBazookaCount := 2 ;
80234: LD_ADDR_EXP 104
80238: PUSH
80239: LD_INT 2
80241: ST_TO_ADDR
// end ; 5 :
80242: GO 80343
80244: LD_INT 5
80246: DOUBLE
80247: EQUAL
80248: IFTRUE 80252
80250: GO 80342
80252: POP
// begin RUAggressivenessLevel := 5 ;
80253: LD_ADDR_EXP 97
80257: PUSH
80258: LD_INT 5
80260: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 46 , 75 , 76 ] ;
80261: LD_ADDR_EXP 98
80265: PUSH
80266: LD_INT 43
80268: PUSH
80269: LD_INT 44
80271: PUSH
80272: LD_INT 45
80274: PUSH
80275: LD_INT 46
80277: PUSH
80278: LD_INT 75
80280: PUSH
80281: LD_INT 76
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: LIST
80288: LIST
80289: LIST
80290: LIST
80291: ST_TO_ADDR
// RUMinVehCount := 5 ;
80292: LD_ADDR_EXP 99
80296: PUSH
80297: LD_INT 5
80299: ST_TO_ADDR
// RUMaxVehCount := 7 ;
80300: LD_ADDR_EXP 100
80304: PUSH
80305: LD_INT 7
80307: ST_TO_ADDR
// RUMinSolCount := 6 ;
80308: LD_ADDR_EXP 101
80312: PUSH
80313: LD_INT 6
80315: ST_TO_ADDR
// RUMaxSolCount := 7 ;
80316: LD_ADDR_EXP 102
80320: PUSH
80321: LD_INT 7
80323: ST_TO_ADDR
// RUMinBazookaCount := 2 ;
80324: LD_ADDR_EXP 103
80328: PUSH
80329: LD_INT 2
80331: ST_TO_ADDR
// RUMaxBazookaCount := 3 ;
80332: LD_ADDR_EXP 104
80336: PUSH
80337: LD_INT 3
80339: ST_TO_ADDR
// end ; end ;
80340: GO 80343
80342: POP
// end ;
80343: LD_VAR 0 2
80347: RET
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl2 do
80348: LD_EXP 45
80352: PUSH
80353: LD_EXP 105
80357: LESS
80358: IFFALSE 80370
80360: GO 80362
80362: DISABLE
// SetAggressivenessLevel ( 2 ) ;
80363: LD_INT 2
80365: PPUSH
80366: CALL 79888 0 1
80370: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl3 do
80371: LD_EXP 45
80375: PUSH
80376: LD_EXP 106
80380: LESS
80381: IFFALSE 80393
80383: GO 80385
80385: DISABLE
// SetAggressivenessLevel ( 3 ) ;
80386: LD_INT 3
80388: PPUSH
80389: CALL 79888 0 1
80393: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl4 do
80394: LD_EXP 45
80398: PUSH
80399: LD_EXP 107
80403: LESS
80404: IFFALSE 80416
80406: GO 80408
80408: DISABLE
// SetAggressivenessLevel ( 4 ) ;
80409: LD_INT 4
80411: PPUSH
80412: CALL 79888 0 1
80416: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl5 do
80417: LD_EXP 45
80421: PUSH
80422: LD_EXP 108
80426: LESS
80427: IFFALSE 80439
80429: GO 80431
80431: DISABLE
// SetAggressivenessLevel ( 5 ) ;
80432: LD_INT 5
80434: PPUSH
80435: CALL 79888 0 1
80439: END
