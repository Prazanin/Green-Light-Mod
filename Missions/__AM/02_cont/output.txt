// export MissionStart ; export RussianAssault ; export RU2_MineBase_FirstAttemptFailed , RU2_MineBase_SecondAttempt ; export EndTime , EndTime2 , TimeOutFirstWarning ; starting begin RandomizeAll ;
   0: CALL_OW 11
// InitMacro ;
   4: CALL 16161 0 0
// PrepareDifficulty ;
   8: CALL 13010 0 0
// PreparePlayerSquad ;
  12: CALL 2165 0 0
// CreatePersonnel ;
  16: CALL 2901 0 0
// CreateAlliedPersonnel ;
  20: CALL 3328 0 0
// SetAggressivenessLevel ( 1 ) ;
  24: LD_INT 1
  26: PPUSH
  27: CALL 79629 0 1
// EndTime = 10 10$00 ;
  31: LD_ADDR_EXP 5
  35: PUSH
  36: LD_INT 21000
  38: ST_TO_ADDR
// EndTime2 = 2 2$00 ;
  39: LD_ADDR_EXP 6
  43: PUSH
  44: LD_INT 4200
  46: ST_TO_ADDR
// Garrison_Buildings ( 3 ) ;
  47: LD_INT 3
  49: PPUSH
  50: CALL 5884 0 1
// Assemble_Barracks ( 3 ) ;
  54: LD_INT 3
  56: PPUSH
  57: CALL 6789 0 1
// Assemble_Armories ( 3 ) ;
  61: LD_INT 3
  63: PPUSH
  64: CALL 7073 0 1
// Fill_Turrets ( 3 ) ;
  68: LD_INT 3
  70: PPUSH
  71: CALL 7532 0 1
// Fill_Bunkers ( 3 ) ;
  75: LD_INT 3
  77: PPUSH
  78: CALL 7371 0 1
// PrepareNature ( 11 , 6 , 22 , 14 , 7 , 0 , 0 , Animals_Area , 0 ) ;
  82: LD_INT 11
  84: PPUSH
  85: LD_INT 6
  87: PPUSH
  88: LD_INT 22
  90: PPUSH
  91: LD_INT 14
  93: PPUSH
  94: LD_INT 7
  96: PPUSH
  97: LD_INT 0
  99: PPUSH
 100: LD_INT 0
 102: PPUSH
 103: LD_INT 17
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL 71850 0 9
// PlaceUnitXY ( Smithy , 125 , 160 , false ) ;
 113: LD_EXP 12
 117: PPUSH
 118: LD_INT 125
 120: PPUSH
 121: LD_INT 160
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: CALL_OW 48
// ComTurnUnit ( Smithy , Simone ) ;
 131: LD_EXP 12
 135: PPUSH
 136: LD_EXP 8
 140: PPUSH
 141: CALL_OW 119
// InGameOn ;
 145: CALL_OW 8
// CenterNowOnUnits ( Sim_Veh ) ;
 149: LD_EXP 18
 153: PPUSH
 154: CALL_OW 87
// ComMoveXY ( [ FilterAllUnits ( [ f_side , 7 ] ) diff Simone ] , 110 , 157 ) ;
 158: LD_INT 22
 160: PUSH
 161: LD_INT 7
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: PPUSH
 168: CALL_OW 69
 172: PUSH
 173: LD_EXP 8
 177: DIFF
 178: PUSH
 179: EMPTY
 180: LIST
 181: PPUSH
 182: LD_INT 110
 184: PPUSH
 185: LD_INT 157
 187: PPUSH
 188: CALL_OW 111
// wait ( 0 0$1 ) ;
 192: LD_INT 35
 194: PPUSH
 195: CALL_OW 67
// ComMoveXY ( Simone , 120 , 160 ) ;
 199: LD_EXP 8
 203: PPUSH
 204: LD_INT 120
 206: PPUSH
 207: LD_INT 160
 209: PPUSH
 210: CALL_OW 111
// wait ( 0 0$1 ) ;
 214: LD_INT 35
 216: PPUSH
 217: CALL_OW 67
// repeat begin CenterNowOnUnits ( Sim_Veh ) ;
 221: LD_EXP 18
 225: PPUSH
 226: CALL_OW 87
// wait ( 0 0$1 ) ;
 230: LD_INT 35
 232: PPUSH
 233: CALL_OW 67
// end until IsInArea ( Simone , AM_Base_Area ) ;
 237: LD_EXP 8
 241: PPUSH
 242: LD_INT 10
 244: PPUSH
 245: CALL_OW 308
 249: IFFALSE 221
// ComExitVehicle ( Simone ) ;
 251: LD_EXP 8
 255: PPUSH
 256: CALL_OW 121
// wait ( 0 0$1 ) ;
 260: LD_INT 35
 262: PPUSH
 263: CALL_OW 67
// ComMoveXY ( Simone , 124 , 160 ) ;
 267: LD_EXP 8
 271: PPUSH
 272: LD_INT 124
 274: PPUSH
 275: LD_INT 160
 277: PPUSH
 278: CALL_OW 111
// AddComTurnUnit ( Simone , Smithy ) ;
 282: LD_EXP 8
 286: PPUSH
 287: LD_EXP 12
 291: PPUSH
 292: CALL_OW 179
// wait ( 0 0$7 ) ;
 296: LD_INT 245
 298: PPUSH
 299: CALL_OW 67
// CenterNowOnUnits ( Simone ) ;
 303: LD_EXP 8
 307: PPUSH
 308: CALL_OW 87
// Say ( Simone , D1-Simone-1 ) ;
 312: LD_EXP 8
 316: PPUSH
 317: LD_STRING D1-Simone-1
 319: PPUSH
 320: CALL_OW 88
// Say ( Smithy , D1-Smithy-1 ) ;
 324: LD_EXP 12
 328: PPUSH
 329: LD_STRING D1-Smithy-1
 331: PPUSH
 332: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 336: LD_EXP 8
 340: PPUSH
 341: LD_STRING D1-Simone-2
 343: PPUSH
 344: CALL_OW 88
// Say ( Smithy , D1-Smithy-2 ) ;
 348: LD_EXP 12
 352: PPUSH
 353: LD_STRING D1-Smithy-2
 355: PPUSH
 356: CALL_OW 88
// Say ( Simone , D1-Simone-3 ) ;
 360: LD_EXP 8
 364: PPUSH
 365: LD_STRING D1-Simone-3
 367: PPUSH
 368: CALL_OW 88
// Say ( Smithy , D1-Smithy-3 ) ;
 372: LD_EXP 12
 376: PPUSH
 377: LD_STRING D1-Smithy-3
 379: PPUSH
 380: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 384: LD_EXP 8
 388: PPUSH
 389: LD_STRING D1-Simone-4
 391: PPUSH
 392: CALL_OW 88
// Say ( Smithy , D1-Smithy-4 ) ;
 396: LD_EXP 12
 400: PPUSH
 401: LD_STRING D1-Smithy-4
 403: PPUSH
 404: CALL_OW 88
// ComEnterUnit ( Simone , Sim_Veh ) ;
 408: LD_EXP 8
 412: PPUSH
 413: LD_EXP 18
 417: PPUSH
 418: CALL_OW 120
// AddComMoveXY ( FilterAllUnits ( [ f_side , 7 ] ) , 149 , 195 ) ;
 422: LD_INT 22
 424: PUSH
 425: LD_INT 7
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PPUSH
 437: LD_INT 149
 439: PPUSH
 440: LD_INT 195
 442: PPUSH
 443: CALL_OW 171
// wait ( 0 0$5 ) ;
 447: LD_INT 175
 449: PPUSH
 450: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
 454: LD_STRING M1
 456: PPUSH
 457: CALL_OW 337
// ComEnterUnit ( Smithy , AM_Depot ) ;
 461: LD_EXP 12
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL_OW 120
// InGameOff ;
 473: CALL_OW 9
// SetSide ( MnBase , 7 ) ;
 477: LD_INT 157
 479: PPUSH
 480: LD_INT 7
 482: PPUSH
 483: CALL_OW 235
// MissionStart = true ;
 487: LD_ADDR_EXP 1
 491: PUSH
 492: LD_INT 1
 494: ST_TO_ADDR
// SaveForQuickRestart ;
 495: CALL_OW 22
// end ;
 499: END
// every 0 0$1 trigger MissionStart do
 500: LD_EXP 1
 504: IFFALSE 624
 506: GO 508
 508: DISABLE
// begin Wait ( 11 11$0 ) ;
 509: LD_INT 23100
 511: PPUSH
 512: CALL_OW 67
// Say ( Simone , D2a-Simone-1 ) ;
 516: LD_EXP 8
 520: PPUSH
 521: LD_STRING D2a-Simone-1
 523: PPUSH
 524: CALL_OW 88
// Say ( Smithy , D2a-Smithy-1 ) ;
 528: LD_EXP 12
 532: PPUSH
 533: LD_STRING D2a-Smithy-1
 535: PPUSH
 536: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 540: LD_EXP 8
 544: PPUSH
 545: LD_STRING D2a-Simone-2
 547: PPUSH
 548: CALL_OW 88
// Say ( Smithy , D2a-Smithy-2 ) ;
 552: LD_EXP 12
 556: PPUSH
 557: LD_STRING D2a-Smithy-2
 559: PPUSH
 560: CALL_OW 88
// Say ( Smithy , D2a-Smithy-3 ) ;
 564: LD_EXP 12
 568: PPUSH
 569: LD_STRING D2a-Smithy-3
 571: PPUSH
 572: CALL_OW 88
// Say ( Simone , D2a-Simone-3 ) ;
 576: LD_EXP 8
 580: PPUSH
 581: LD_STRING D2a-Simone-3
 583: PPUSH
 584: CALL_OW 88
// Say ( Smithy , D2a-Smithy-4 ) ;
 588: LD_EXP 12
 592: PPUSH
 593: LD_STRING D2a-Smithy-4
 595: PPUSH
 596: CALL_OW 88
// Say ( Smithy , D2a-Smithy-5 ) ;
 600: LD_EXP 12
 604: PPUSH
 605: LD_STRING D2a-Smithy-5
 607: PPUSH
 608: CALL_OW 88
// Say ( Smithy , D2a-Smithy-6 ) ;
 612: LD_EXP 12
 616: PPUSH
 617: LD_STRING D2a-Smithy-6
 619: PPUSH
 620: CALL_OW 88
// end ;
 624: END
// every 0 0$1 trigger See ( 1 , RU2_SibMine ) do
 625: LD_INT 1
 627: PPUSH
 628: LD_EXP 38
 632: PPUSH
 633: CALL_OW 292
 637: IFFALSE 654
 639: GO 641
 641: DISABLE
// begin Say ( Simone , D2-Simone-1a ) ;
 642: LD_EXP 8
 646: PPUSH
 647: LD_STRING D2-Simone-1a
 649: PPUSH
 650: CALL_OW 88
// end ;
 654: END
// every 0 0$1 trigger MissionStart do var Edmonds_Car ;
 655: LD_EXP 1
 659: IFFALSE 939
 661: GO 663
 663: DISABLE
 664: LD_INT 0
 666: PPUSH
// begin Wait ( 17 17$0 ) ;
 667: LD_INT 35700
 669: PPUSH
 670: CALL_OW 67
// uc_side = 1 ;
 674: LD_ADDR_OWVAR 20
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// uc_nation := nation_american ;
 682: LD_ADDR_OWVAR 21
 686: PUSH
 687: LD_INT 1
 689: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
 690: LD_ADDR_OWVAR 37
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// vc_engine := engine_combustion ;
 698: LD_ADDR_OWVAR 39
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
 706: LD_ADDR_OWVAR 40
 710: PUSH
 711: LD_INT 2
 713: ST_TO_ADDR
// vc_control := control_manual ;
 714: LD_ADDR_OWVAR 38
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// Edmonds_Car := CreateVehicle ;
 722: LD_ADDR_VAR 0 1
 726: PUSH
 727: CALL_OW 45
 731: ST_TO_ADDR
// PlaceHumanInUnit ( Edmonds , Edmonds_Car ) ;
 732: LD_EXP 14
 736: PPUSH
 737: LD_VAR 0 1
 741: PPUSH
 742: CALL_OW 52
// PlaceUnitArea ( Edmonds_Car , AM_Start , false ) ;
 746: LD_VAR 0 1
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// ComMoveXY ( Edmonds , 162 , 208 ) ;
 761: LD_EXP 14
 765: PPUSH
 766: LD_INT 162
 768: PPUSH
 769: LD_INT 208
 771: PPUSH
 772: CALL_OW 111
// AddComExitVehicle ( Edmonds ) ;
 776: LD_EXP 14
 780: PPUSH
 781: CALL_OW 181
// Wait ( 0 0$20 ) ;
 785: LD_INT 700
 787: PPUSH
 788: CALL_OW 67
// Say ( Simone , D3-Simone-1 ) ;
 792: LD_EXP 8
 796: PPUSH
 797: LD_STRING D3-Simone-1
 799: PPUSH
 800: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
 804: LD_EXP 14
 808: PPUSH
 809: LD_STRING D3-Edmonds-1
 811: PPUSH
 812: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
 816: LD_EXP 14
 820: PPUSH
 821: LD_STRING D3-Edmonds-2
 823: PPUSH
 824: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
 828: LD_EXP 8
 832: PPUSH
 833: LD_STRING D3-Simone-2
 835: PPUSH
 836: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-3 ) ;
 840: LD_EXP 14
 844: PPUSH
 845: LD_STRING D3-Edmonds-3
 847: PPUSH
 848: CALL_OW 88
// SetSide ( Edmonds , 7 ) ;
 852: LD_EXP 14
 856: PPUSH
 857: LD_INT 7
 859: PPUSH
 860: CALL_OW 235
// SetTech ( tech_LasDouble , 7 , state_enabled ) ;
 864: LD_INT 14
 866: PPUSH
 867: LD_INT 7
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 322
// ChangeMissionObjectives ( M1a ) ;
 877: LD_STRING M1a
 879: PPUSH
 880: CALL_OW 337
// Wait ( 0 0$40 ) ;
 884: LD_INT 1400
 886: PPUSH
 887: CALL_OW 67
// Say ( Simone , D3a-Simone-1 ) ;
 891: LD_EXP 8
 895: PPUSH
 896: LD_STRING D3a-Simone-1
 898: PPUSH
 899: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-1 ) ;
 903: LD_EXP 14
 907: PPUSH
 908: LD_STRING D3a-Edmonds-1
 910: PPUSH
 911: CALL_OW 88
// Say ( Simone , D3a-Simone-2 ) ;
 915: LD_EXP 8
 919: PPUSH
 920: LD_STRING D3a-Simone-2
 922: PPUSH
 923: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-2 ) ;
 927: LD_EXP 14
 931: PPUSH
 932: LD_STRING D3a-Edmonds-2
 934: PPUSH
 935: CALL_OW 88
// end ;
 939: PPOPN 1
 941: END
// every 0 0$1 trigger MissionStart do
 942: LD_EXP 1
 946: IFFALSE 1245
 948: GO 950
 950: DISABLE
// begin Wait ( 19 19$30 ) ;
 951: LD_INT 40950
 953: PPUSH
 954: CALL_OW 67
// PlaceUnitXYR ( Stone , 137 , 107 , 5 , false ) ;
 958: LD_EXP 13
 962: PPUSH
 963: LD_INT 137
 965: PPUSH
 966: LD_INT 107
 968: PPUSH
 969: LD_INT 5
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 50
// ComMoveXY ( Stone , 128 , 162 ) ;
 979: LD_EXP 13
 983: PPUSH
 984: LD_INT 128
 986: PPUSH
 987: LD_INT 162
 989: PPUSH
 990: CALL_OW 111
// repeat Wait ( 0 0$1 ) ;
 994: LD_INT 35
 996: PPUSH
 997: CALL_OW 67
// until IsInArea ( Stone , AM_Base_Area ) ;
1001: LD_EXP 13
1005: PPUSH
1006: LD_INT 10
1008: PPUSH
1009: CALL_OW 308
1013: IFFALSE 994
// DialogueOn ;
1015: CALL_OW 6
// CenterOnUnits ( Stone ) ;
1019: LD_EXP 13
1023: PPUSH
1024: CALL_OW 85
// Say ( Smithy , D4-Smithy-1 ) ;
1028: LD_EXP 12
1032: PPUSH
1033: LD_STRING D4-Smithy-1
1035: PPUSH
1036: CALL_OW 88
// DWait ( 0 0$1 ) ;
1040: LD_INT 35
1042: PPUSH
1043: CALL_OW 68
// Say ( Stone , D4-Stone-1 ) ;
1047: LD_EXP 13
1051: PPUSH
1052: LD_STRING D4-Stone-1
1054: PPUSH
1055: CALL_OW 88
// Say ( Smithy , D4-Smithy-2 ) ;
1059: LD_EXP 12
1063: PPUSH
1064: LD_STRING D4-Smithy-2
1066: PPUSH
1067: CALL_OW 88
// DWait ( 0 0$1 ) ;
1071: LD_INT 35
1073: PPUSH
1074: CALL_OW 68
// Say ( Simone , D4-Simone-1 ) ;
1078: LD_EXP 8
1082: PPUSH
1083: LD_STRING D4-Simone-1
1085: PPUSH
1086: CALL_OW 88
// Say ( Stone , D4-Stone-2 ) ;
1090: LD_EXP 13
1094: PPUSH
1095: LD_STRING D4-Stone-2
1097: PPUSH
1098: CALL_OW 88
// Say ( Simone , D4-Simone-2 ) ;
1102: LD_EXP 8
1106: PPUSH
1107: LD_STRING D4-Simone-2
1109: PPUSH
1110: CALL_OW 88
// Say ( Stone , D4-Stone-3 ) ;
1114: LD_EXP 13
1118: PPUSH
1119: LD_STRING D4-Stone-3
1121: PPUSH
1122: CALL_OW 88
// Say ( Simone , D4-Simone-3 ) ;
1126: LD_EXP 8
1130: PPUSH
1131: LD_STRING D4-Simone-3
1133: PPUSH
1134: CALL_OW 88
// Say ( Stone , D4-Stone-4 ) ;
1138: LD_EXP 13
1142: PPUSH
1143: LD_STRING D4-Stone-4
1145: PPUSH
1146: CALL_OW 88
// Say ( Simone , D4-Simone-4 ) ;
1150: LD_EXP 8
1154: PPUSH
1155: LD_STRING D4-Simone-4
1157: PPUSH
1158: CALL_OW 88
// ChangeMissionObjectives ( M1b ) ;
1162: LD_STRING M1b
1164: PPUSH
1165: CALL_OW 337
// SetSide ( Stone , 7 ) ;
1169: LD_EXP 13
1173: PPUSH
1174: LD_INT 7
1176: PPUSH
1177: CALL_OW 235
// Say ( Simone , D4c-Simone-1 ) ;
1181: LD_EXP 8
1185: PPUSH
1186: LD_STRING D4c-Simone-1
1188: PPUSH
1189: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-1 ) ;
1193: LD_EXP 15
1197: PPUSH
1198: LD_STRING D4c-Barnes-1
1200: PPUSH
1201: CALL_OW 94
// Say ( Simone , D4c-Simone-2 ) ;
1205: LD_EXP 8
1209: PPUSH
1210: LD_STRING D4c-Simone-2
1212: PPUSH
1213: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-2 ) ;
1217: LD_EXP 15
1221: PPUSH
1222: LD_STRING D4c-Barnes-2
1224: PPUSH
1225: CALL_OW 94
// Say ( Simone , D4c-Simone-3 ) ;
1229: LD_EXP 8
1233: PPUSH
1234: LD_STRING D4c-Simone-3
1236: PPUSH
1237: CALL_OW 88
// DialogueOff ;
1241: CALL_OW 7
// end ;
1245: END
// every 0 0$1 trigger MissionStart do var Squad ;
1246: LD_EXP 1
1250: IFFALSE 1434
1252: GO 1254
1254: DISABLE
1255: LD_INT 0
1257: PPUSH
// begin Wait ( 21 21$0 ) ;
1258: LD_INT 44100
1260: PPUSH
1261: CALL_OW 67
// RussianAssault = true ;
1265: LD_ADDR_EXP 2
1269: PUSH
1270: LD_INT 1
1272: ST_TO_ADDR
// RussianFirstAssault ;
1273: CALL 7688 0 0
// Wait ( 0 0$25 ) ;
1277: LD_INT 875
1279: PPUSH
1280: CALL_OW 67
// Squad := FilterAllUnits ( [ f_side , 7 ] ) diff [ Simone , Kathryn , Miller ] ;
1284: LD_ADDR_VAR 0 1
1288: PUSH
1289: LD_INT 22
1291: PUSH
1292: LD_INT 7
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: LD_EXP 8
1308: PUSH
1309: LD_EXP 9
1313: PUSH
1314: LD_EXP 10
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: DIFF
1324: ST_TO_ADDR
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2b-Sol-1 , D2b-FemSol-1 ) ;
1325: LD_VAR 0 1
1329: PUSH
1330: LD_INT 1
1332: PPUSH
1333: LD_VAR 0 1
1337: PPUSH
1338: CALL_OW 12
1342: ARRAY
1343: PPUSH
1344: LD_STRING D2b-Sol-1
1346: PPUSH
1347: LD_STRING D2b-FemSol-1
1349: PPUSH
1350: CALL 7637 0 3
// Say ( Simone , D2b-Simone-1 ) ;
1354: LD_EXP 8
1358: PPUSH
1359: LD_STRING D2b-Simone-1
1361: PPUSH
1362: CALL_OW 88
// Wait ( 1 1$20 ) ;
1366: LD_INT 2800
1368: PPUSH
1369: CALL_OW 67
// DialogueOn ;
1373: CALL_OW 6
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2c-Sol-1 , D2c-FemSol-1 ) ;
1377: LD_VAR 0 1
1381: PUSH
1382: LD_INT 1
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: CALL_OW 12
1394: ARRAY
1395: PPUSH
1396: LD_STRING D2c-Sol-1
1398: PPUSH
1399: LD_STRING D2c-FemSol-1
1401: PPUSH
1402: CALL 7637 0 3
// Say ( Smithy , D2c-Smithy-1 ) ;
1406: LD_EXP 12
1410: PPUSH
1411: LD_STRING D2c-Smithy-1
1413: PPUSH
1414: CALL_OW 88
// Say ( Simone , D2c-Simone-1 ) ;
1418: LD_EXP 8
1422: PPUSH
1423: LD_STRING D2c-Simone-1
1425: PPUSH
1426: CALL_OW 88
// DialogueOff ;
1430: CALL_OW 7
// end ;
1434: PPOPN 1
1436: END
// every 0 0$1 trigger MissionStart do
1437: LD_EXP 1
1441: IFFALSE 1794
1443: GO 1445
1445: DISABLE
// begin Wait ( 54 54$0 ) ;
1446: LD_INT 113400
1448: PPUSH
1449: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_E ) ;
1453: LD_INT 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 4
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 0
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: LD_INT 7
1479: PPUSH
1480: CALL 5306 0 9
// Wait ( 0 0$15 ) ;
1484: LD_INT 525
1486: PPUSH
1487: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 3 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1491: LD_INT 7
1493: PPUSH
1494: LD_INT 8
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: LD_INT 5
1502: PPUSH
1503: LD_INT 2
1505: PPUSH
1506: LD_INT 1
1508: PUSH
1509: LD_INT 2
1511: PUSH
1512: LD_INT 3
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: EMPTY
1524: PPUSH
1525: LD_INT 25
1527: PUSH
1528: LD_INT 26
1530: PUSH
1531: LD_INT 27
1533: PUSH
1534: LD_INT 28
1536: PUSH
1537: LD_INT 72
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PPUSH
1547: EMPTY
1548: PPUSH
1549: CALL 3822 0 10
// Wait ( 0 0$45 ) ;
1553: LD_INT 1575
1555: PPUSH
1556: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 3 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_S ) ;
1560: LD_INT 8
1562: PPUSH
1563: LD_INT 2
1565: PPUSH
1566: LD_INT 3
1568: PPUSH
1569: LD_INT 0
1571: PPUSH
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 6
1583: PPUSH
1584: LD_INT 6
1586: PPUSH
1587: CALL 5306 0 9
// Wait ( 5 5$25 ) ;
1591: LD_INT 11375
1593: PPUSH
1594: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 5 , 0 , 0 , 2 , 0 , 6 , GU_Spawn_E ) ;
1598: LD_INT 8
1600: PPUSH
1601: LD_INT 2
1603: PPUSH
1604: LD_INT 5
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: LD_INT 6
1621: PPUSH
1622: LD_INT 7
1624: PPUSH
1625: CALL 5306 0 9
// Wait ( 0 0$25 ) ;
1629: LD_INT 875
1631: PPUSH
1632: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1636: LD_INT 7
1638: PPUSH
1639: LD_INT 8
1641: PPUSH
1642: LD_INT 2
1644: PPUSH
1645: LD_INT 5
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: LD_INT 3
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: LD_INT 1
1667: PPUSH
1668: EMPTY
1669: PPUSH
1670: LD_INT 25
1672: PUSH
1673: LD_INT 26
1675: PUSH
1676: LD_INT 27
1678: PUSH
1679: LD_INT 28
1681: PUSH
1682: LD_INT 72
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PPUSH
1692: EMPTY
1693: PPUSH
1694: CALL 3822 0 10
// Wait ( 0 0$10 ) ;
1698: LD_INT 350
1700: PPUSH
1701: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 1 , 0 , 6 , GU_Spawn_S ) ;
1705: LD_INT 8
1707: PPUSH
1708: LD_INT 2
1710: PPUSH
1711: LD_INT 4
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 6
1728: PPUSH
1729: LD_INT 6
1731: PPUSH
1732: CALL 5306 0 9
// RespawnAttackVehicle ( GU_Spawn_S , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] ) ;
1736: LD_INT 6
1738: PPUSH
1739: LD_INT 8
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 5
1747: PPUSH
1748: LD_INT 2
1750: PPUSH
1751: LD_INT 1
1753: PUSH
1754: LD_INT 2
1756: PUSH
1757: LD_INT 3
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: EMPTY
1769: PPUSH
1770: LD_INT 25
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 27
1778: PUSH
1779: LD_INT 28
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PPUSH
1788: EMPTY
1789: PPUSH
1790: CALL 3822 0 10
// end ;
1794: END
// every 0 0$1 trigger RusMainAttacks = 0 do
1795: LD_EXP 45
1799: PUSH
1800: LD_INT 0
1802: EQUAL
1803: IFFALSE 1954
1805: GO 1807
1807: DISABLE
// begin Wait ( 5 5$0 ) ;
1808: LD_INT 10500
1810: PPUSH
1811: CALL_OW 67
// SayRadio ( Barnes , D4b-Barnes-1 ) ;
1815: LD_EXP 15
1819: PPUSH
1820: LD_STRING D4b-Barnes-1
1822: PPUSH
1823: CALL_OW 94
// Say ( Simone , D4b-Simone-1 ) ;
1827: LD_EXP 8
1831: PPUSH
1832: LD_STRING D4b-Simone-1
1834: PPUSH
1835: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-2 ) ;
1839: LD_EXP 15
1843: PPUSH
1844: LD_STRING D4b-Barnes-2
1846: PPUSH
1847: CALL_OW 94
// Say ( Simone , D4b-Simone-2 ) ;
1851: LD_EXP 8
1855: PPUSH
1856: LD_STRING D4b-Simone-2
1858: PPUSH
1859: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-3 ) ;
1863: LD_EXP 15
1867: PPUSH
1868: LD_STRING D4b-Barnes-3
1870: PPUSH
1871: CALL_OW 94
// Say ( Simone , D4b-Simone-3 ) ;
1875: LD_EXP 8
1879: PPUSH
1880: LD_STRING D4b-Simone-3
1882: PPUSH
1883: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-4 ) ;
1887: LD_EXP 15
1891: PPUSH
1892: LD_STRING D4b-Barnes-4
1894: PPUSH
1895: CALL_OW 94
// Say ( Simone , D4b-Simone-4 ) ;
1899: LD_EXP 8
1903: PPUSH
1904: LD_STRING D4b-Simone-4
1906: PPUSH
1907: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-5 ) ;
1911: LD_EXP 15
1915: PPUSH
1916: LD_STRING D4b-Barnes-5
1918: PPUSH
1919: CALL_OW 94
// Say ( Simone , D4b-Simone-5 ) ;
1923: LD_EXP 8
1927: PPUSH
1928: LD_STRING D4b-Simone-5
1930: PPUSH
1931: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
1935: LD_STRING M3
1937: PPUSH
1938: CALL_OW 337
// RU3_Baterie_Prepare ;
1942: CALL 8894 0 0
// AfterOffensive = true ;
1946: LD_ADDR_EXP 53
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// end ;
1954: END
// every 0 0$1 trigger AfterOffensive do
1955: LD_EXP 53
1959: IFFALSE 1997
1961: GO 1963
1963: DISABLE
// begin wait ( RU3RocketBatteryActivation ) ;
1964: LD_EXP 48
1968: PPUSH
1969: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
1973: LD_EXP 30
1977: PUSH
1978: LD_INT 0
1980: GREATER
1981: PUSH
1982: LD_EXP 29
1986: PUSH
1987: LD_INT 0
1989: GREATER
1990: AND
1991: IFFALSE 1997
// RU3BaterieMovement ;
1993: CALL 9392 0 0
// end ;
1997: END
// every 0 0$1 trigger AfterOffensive and RU3BaterieTimeOut and ( See ( 7 , RU3_BaterieVehs [ 1 ] ) or See ( 7 , RU3_BaterieVehs [ 2 ] ) or See ( 7 , RU3_BaterieVehs [ 3 ] ) or See ( 7 , RU3_BaterieVehs [ 4 ] ) or See ( 7 , RU3_BaterieVehs [ 5 ] ) ) do
1998: LD_EXP 53
2002: PUSH
2003: LD_EXP 31
2007: AND
2008: PUSH
2009: LD_INT 7
2011: PPUSH
2012: LD_EXP 29
2016: PUSH
2017: LD_INT 1
2019: ARRAY
2020: PPUSH
2021: CALL_OW 292
2025: PUSH
2026: LD_INT 7
2028: PPUSH
2029: LD_EXP 29
2033: PUSH
2034: LD_INT 2
2036: ARRAY
2037: PPUSH
2038: CALL_OW 292
2042: OR
2043: PUSH
2044: LD_INT 7
2046: PPUSH
2047: LD_EXP 29
2051: PUSH
2052: LD_INT 3
2054: ARRAY
2055: PPUSH
2056: CALL_OW 292
2060: OR
2061: PUSH
2062: LD_INT 7
2064: PPUSH
2065: LD_EXP 29
2069: PUSH
2070: LD_INT 4
2072: ARRAY
2073: PPUSH
2074: CALL_OW 292
2078: OR
2079: PUSH
2080: LD_INT 7
2082: PPUSH
2083: LD_EXP 29
2087: PUSH
2088: LD_INT 5
2090: ARRAY
2091: PPUSH
2092: CALL_OW 292
2096: OR
2097: AND
2098: IFFALSE 2115
2100: GO 2102
2102: DISABLE
// begin Say ( Simone , D6-Simone-1a ) end ;
2103: LD_EXP 8
2107: PPUSH
2108: LD_STRING D6-Simone-1a
2110: PPUSH
2111: CALL_OW 88
2115: END
// every 0 0$1 trigger AfterOffensive and ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut do
2116: LD_EXP 53
2120: PUSH
2121: LD_EXP 30
2125: PUSH
2126: LD_INT 0
2128: EQUAL
2129: PUSH
2130: LD_EXP 29
2134: PUSH
2135: LD_INT 0
2137: EQUAL
2138: OR
2139: AND
2140: PUSH
2141: LD_EXP 31
2145: NOT
2146: AND
2147: IFFALSE 2164
2149: GO 2151
2151: DISABLE
// begin Say ( Simone , D6-Simone-1 ) ;
2152: LD_EXP 8
2156: PPUSH
2157: LD_STRING D6-Simone-1
2159: PPUSH
2160: CALL_OW 88
// end ; end_of_file
2164: END
// export Simone , Kathryn , Miller , Loghain , Smithy , Stone , Edmonds , Barnes , AMSurvivors , Selected_americans ; export Sim_Veh , Kat_Veh , Mil_Veh ; export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function PreparePlayerSquad ( ) ; var i , veh ; begin
2165: LD_INT 0
2167: PPUSH
2168: PPUSH
2169: PPUSH
// uc_side := 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
2178: LD_ADDR_EXP 8
2182: PUSH
2183: LD_STRING Simone
2185: PPUSH
2186: CALL_OW 34
2190: ST_TO_ADDR
// Kathryn = CreateCharacter ( Kathryn ) ;
2191: LD_ADDR_EXP 9
2195: PUSH
2196: LD_STRING Kathryn
2198: PPUSH
2199: CALL_OW 34
2203: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
2204: LD_ADDR_EXP 10
2208: PUSH
2209: LD_STRING Miller
2211: PPUSH
2212: CALL_OW 34
2216: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM01_Survivors ) ;
2217: LD_ADDR_EXP 16
2221: PUSH
2222: LD_STRING AM01_Survivors
2224: PPUSH
2225: CALL_OW 31
2229: ST_TO_ADDR
// Selected_americans = CharacterSelection (  , 11 , 11 , [ sel_hired , sel_not_changeable , sel_change_class , Simone , Kathryn , Miller , sel_not_hired , sel_changeable , sel_ignore_class_nation , sel_change_class ] ^ AMSurvivors , [ [ class_engineer , 1 ] , class_soldier , class_scientistic , class_mechanic ] ) ;
2230: LD_ADDR_EXP 17
2234: PUSH
2235: LD_STRING 
2237: PPUSH
2238: LD_INT 11
2240: PPUSH
2241: LD_INT 11
2243: PPUSH
2244: LD_INT -1
2246: PUSH
2247: LD_INT -4
2249: PUSH
2250: LD_INT -5
2252: PUSH
2253: LD_EXP 8
2257: PUSH
2258: LD_EXP 9
2262: PUSH
2263: LD_EXP 10
2267: PUSH
2268: LD_INT -2
2270: PUSH
2271: LD_INT -3
2273: PUSH
2274: LD_INT -7
2276: PUSH
2277: LD_INT -5
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_EXP 16
2296: ADD
2297: PPUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 1
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: LD_INT 1
2310: PUSH
2311: LD_INT 4
2313: PUSH
2314: LD_INT 3
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 42
2327: ST_TO_ADDR
// for i = 1 to 2 do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2445
// begin vc_chassis := us_heavy_tracked ;
2344: LD_ADDR_OWVAR 37
2348: PUSH
2349: LD_INT 4
2351: ST_TO_ADDR
// vc_engine := engine_siberite ;
2352: LD_ADDR_OWVAR 39
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2360: LD_ADDR_OWVAR 40
2364: PUSH
2365: LD_INT 5
2367: ST_TO_ADDR
// vc_control := control_manual ;
2368: LD_ADDR_OWVAR 38
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// veh := CreateVehicle ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: CALL_OW 45
2385: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2386: LD_EXP 17
2390: PUSH
2391: LD_VAR 0 2
2395: ARRAY
2396: PPUSH
2397: LD_VAR 0 3
2401: PPUSH
2402: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2406: LD_VAR 0 3
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 0
2416: PPUSH
2417: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2421: LD_ADDR_EXP 17
2425: PUSH
2426: LD_EXP 17
2430: PUSH
2431: LD_EXP 17
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: DIFF
2442: ST_TO_ADDR
// end ;
2443: GO 2341
2445: POP
2446: POP
// for i = 1 to 3 do
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: DOUBLE
2453: LD_INT 1
2455: DEC
2456: ST_TO_ADDR
2457: LD_INT 3
2459: PUSH
2460: FOR_TO
2461: IFFALSE 2564
// begin vc_chassis := us_medium_wheeled ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 2
2470: ST_TO_ADDR
// vc_engine := engine_siberite ;
2471: LD_ADDR_OWVAR 39
2475: PUSH
2476: LD_INT 3
2478: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
2479: LD_ADDR_OWVAR 40
2483: PUSH
2484: LD_INT 4
2486: ST_TO_ADDR
// vc_control := control_manual ;
2487: LD_ADDR_OWVAR 38
2491: PUSH
2492: LD_INT 1
2494: ST_TO_ADDR
// veh := CreateVehicle ;
2495: LD_ADDR_VAR 0 3
2499: PUSH
2500: CALL_OW 45
2504: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2505: LD_EXP 17
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2525: LD_VAR 0 3
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2540: LD_ADDR_EXP 17
2544: PUSH
2545: LD_EXP 17
2549: PUSH
2550: LD_EXP 17
2554: PUSH
2555: LD_VAR 0 2
2559: ARRAY
2560: DIFF
2561: ST_TO_ADDR
// end ;
2562: GO 2460
2564: POP
2565: POP
// for i = 1 to 2 do
2566: LD_ADDR_VAR 0 2
2570: PUSH
2571: DOUBLE
2572: LD_INT 1
2574: DEC
2575: ST_TO_ADDR
2576: LD_INT 2
2578: PUSH
2579: FOR_TO
2580: IFFALSE 2683
// begin vc_chassis := us_medium_tracked ;
2582: LD_ADDR_OWVAR 37
2586: PUSH
2587: LD_INT 3
2589: ST_TO_ADDR
// vc_engine := engine_siberite ;
2590: LD_ADDR_OWVAR 39
2594: PUSH
2595: LD_INT 3
2597: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2598: LD_ADDR_OWVAR 40
2602: PUSH
2603: LD_INT 5
2605: ST_TO_ADDR
// vc_control := control_manual ;
2606: LD_ADDR_OWVAR 38
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// veh := CreateVehicle ;
2614: LD_ADDR_VAR 0 3
2618: PUSH
2619: CALL_OW 45
2623: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2624: LD_EXP 17
2628: PUSH
2629: LD_VAR 0 2
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 3
2639: PPUSH
2640: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: LD_INT 0
2654: PPUSH
2655: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2659: LD_ADDR_EXP 17
2663: PUSH
2664: LD_EXP 17
2668: PUSH
2669: LD_EXP 17
2673: PUSH
2674: LD_VAR 0 2
2678: ARRAY
2679: DIFF
2680: ST_TO_ADDR
// end ;
2681: GO 2579
2683: POP
2684: POP
// for i in Selected_americans do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: LD_EXP 17
2694: PUSH
2695: FOR_IN
2696: IFFALSE 2715
// PlaceUnitArea ( i , AM_Start , false ) ;
2698: LD_VAR 0 2
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
2713: GO 2695
2715: POP
2716: POP
// vc_chassis := us_heavy_tracked ;
2717: LD_ADDR_OWVAR 37
2721: PUSH
2722: LD_INT 4
2724: ST_TO_ADDR
// vc_engine := engine_siberite ;
2725: LD_ADDR_OWVAR 39
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2733: LD_ADDR_OWVAR 40
2737: PUSH
2738: LD_INT 12
2740: ST_TO_ADDR
// vc_control := control_manual ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// Sim_veh := CreateVehicle ;
2749: LD_ADDR_EXP 18
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// Kat_veh := CreateVehicle ;
2759: LD_ADDR_EXP 19
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// Mil_veh := CreateVehicle ;
2769: LD_ADDR_EXP 20
2773: PUSH
2774: CALL_OW 45
2778: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , Sim_veh ) ;
2779: LD_EXP 8
2783: PPUSH
2784: LD_EXP 18
2788: PPUSH
2789: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , Kat_veh ) ;
2793: LD_EXP 9
2797: PPUSH
2798: LD_EXP 19
2802: PPUSH
2803: CALL_OW 52
// PlaceHumanInUnit ( Miller , Mil_veh ) ;
2807: LD_EXP 10
2811: PPUSH
2812: LD_EXP 20
2816: PPUSH
2817: CALL_OW 52
// PlaceUnitArea ( Sim_veh , AM_Start , false ) ;
2821: LD_EXP 18
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: LD_INT 0
2831: PPUSH
2832: CALL_OW 49
// PlaceUnitArea ( Kat_veh , AM_Start , false ) ;
2836: LD_EXP 19
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_INT 0
2846: PPUSH
2847: CALL_OW 49
// PlaceUnitArea ( Mil_veh , AM_Start , false ) ;
2851: LD_EXP 20
2855: PPUSH
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 0
2861: PPUSH
2862: CALL_OW 49
// AddCargo ( [ Sim_veh , Kat_veh , Mil_veh ] , mat_cans , 100 ) ;
2866: LD_EXP 18
2870: PUSH
2871: LD_EXP 19
2875: PUSH
2876: LD_EXP 20
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: LD_INT 100
2891: PPUSH
2892: CALL_OW 291
// end ;
2896: LD_VAR 0 1
2900: RET
// export function CreatePersonnel ; begin
2901: LD_INT 0
2903: PPUSH
// uc_side := 1 ;
2904: LD_ADDR_OWVAR 20
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_class = class_soldier ;
2912: LD_ADDR_OWVAR 28
2916: PUSH
2917: LD_INT 1
2919: ST_TO_ADDR
// uc_nation := nation_american ;
2920: LD_ADDR_OWVAR 21
2924: PUSH
2925: LD_INT 1
2927: ST_TO_ADDR
// hc_sex = sex_male ;
2928: LD_ADDR_OWVAR 27
2932: PUSH
2933: LD_INT 1
2935: ST_TO_ADDR
// hc_importance = 80 ;
2936: LD_ADDR_OWVAR 32
2940: PUSH
2941: LD_INT 80
2943: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 3 , 3 ] ;
2944: LD_ADDR_OWVAR 31
2948: PUSH
2949: LD_INT 6
2951: PUSH
2952: LD_INT 4
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: LD_INT 3
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2967: LD_ADDR_OWVAR 29
2971: PUSH
2972: LD_INT 10
2974: PUSH
2975: LD_INT 10
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_name := Smithy ;
2982: LD_ADDR_OWVAR 26
2986: PUSH
2987: LD_STRING Smithy
2989: ST_TO_ADDR
// hc_gallery := us_old ;
2990: LD_ADDR_OWVAR 33
2994: PUSH
2995: LD_STRING us_old
2997: ST_TO_ADDR
// hc_face_number := 20 ;
2998: LD_ADDR_OWVAR 34
3002: PUSH
3003: LD_INT 20
3005: ST_TO_ADDR
// Smithy := CreateHuman ;
3006: LD_ADDR_EXP 12
3010: PUSH
3011: CALL_OW 44
3015: ST_TO_ADDR
// uc_side := 4 ;
3016: LD_ADDR_OWVAR 20
3020: PUSH
3021: LD_INT 4
3023: ST_TO_ADDR
// hc_class = class_sniper ;
3024: LD_ADDR_OWVAR 28
3028: PUSH
3029: LD_INT 5
3031: ST_TO_ADDR
// uc_nation := nation_american ;
3032: LD_ADDR_OWVAR 21
3036: PUSH
3037: LD_INT 1
3039: ST_TO_ADDR
// hc_sex = sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// hc_importance = 40 ;
3048: LD_ADDR_OWVAR 32
3052: PUSH
3053: LD_INT 40
3055: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 1 ] ;
3056: LD_ADDR_OWVAR 31
3060: PUSH
3061: LD_INT 5
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: LD_INT 4
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3079: LD_ADDR_OWVAR 29
3083: PUSH
3084: LD_INT 10
3086: PUSH
3087: LD_INT 10
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: ST_TO_ADDR
// hc_name := Harry Stone ;
3094: LD_ADDR_OWVAR 26
3098: PUSH
3099: LD_STRING Harry Stone
3101: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3102: LD_ADDR_OWVAR 33
3106: PUSH
3107: LD_STRING ZieloneLaserki_Commanders
3109: ST_TO_ADDR
// hc_face_number := 4 ;
3110: LD_ADDR_OWVAR 34
3114: PUSH
3115: LD_INT 4
3117: ST_TO_ADDR
// Stone := CreateHuman ;
3118: LD_ADDR_EXP 13
3122: PUSH
3123: CALL_OW 44
3127: ST_TO_ADDR
// uc_side := 1 ;
3128: LD_ADDR_OWVAR 20
3132: PUSH
3133: LD_INT 1
3135: ST_TO_ADDR
// hc_class = class_scientistic ;
3136: LD_ADDR_OWVAR 28
3140: PUSH
3141: LD_INT 4
3143: ST_TO_ADDR
// uc_nation := nation_american ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// hc_sex = sex_male ;
3152: LD_ADDR_OWVAR 27
3156: PUSH
3157: LD_INT 1
3159: ST_TO_ADDR
// hc_importance = 40 ;
3160: LD_ADDR_OWVAR 32
3164: PUSH
3165: LD_INT 40
3167: ST_TO_ADDR
// hc_skills = [ 2 , 0 , 3 , 7 ] ;
3168: LD_ADDR_OWVAR 31
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: LD_INT 0
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: LD_INT 7
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3191: LD_ADDR_OWVAR 29
3195: PUSH
3196: LD_INT 10
3198: PUSH
3199: LD_INT 10
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: ST_TO_ADDR
// hc_name := dr Samuel Edmonds ;
3206: LD_ADDR_OWVAR 26
3210: PUSH
3211: LD_STRING dr Samuel Edmonds
3213: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
3214: LD_ADDR_OWVAR 33
3218: PUSH
3219: LD_STRING ZieloneLaserki_Heroes
3221: ST_TO_ADDR
// hc_face_number := 4 ;
3222: LD_ADDR_OWVAR 34
3226: PUSH
3227: LD_INT 4
3229: ST_TO_ADDR
// Edmonds := CreateHuman ;
3230: LD_ADDR_EXP 14
3234: PUSH
3235: CALL_OW 44
3239: ST_TO_ADDR
// hc_class = class_soldier ;
3240: LD_ADDR_OWVAR 28
3244: PUSH
3245: LD_INT 1
3247: ST_TO_ADDR
// uc_nation := nation_american ;
3248: LD_ADDR_OWVAR 21
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// hc_importance = 70 ;
3256: LD_ADDR_OWVAR 32
3260: PUSH
3261: LD_INT 70
3263: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 8
3269: PPUSH
3270: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
3274: LD_ADDR_OWVAR 29
3278: PUSH
3279: LD_INT 10
3281: PUSH
3282: LD_INT 10
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// hc_name := Barnes ;
3289: LD_ADDR_OWVAR 26
3293: PUSH
3294: LD_STRING Barnes
3296: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3297: LD_ADDR_OWVAR 33
3301: PUSH
3302: LD_STRING ZieloneLaserki_Commanders
3304: ST_TO_ADDR
// hc_face_number := 2 ;
3305: LD_ADDR_OWVAR 34
3309: PUSH
3310: LD_INT 2
3312: ST_TO_ADDR
// Barnes := CreateHuman ;
3313: LD_ADDR_EXP 15
3317: PUSH
3318: CALL_OW 44
3322: ST_TO_ADDR
// end ;
3323: LD_VAR 0 1
3327: RET
// export function CreateAlliedPersonnel ; var i , un ; begin
3328: LD_INT 0
3330: PPUSH
3331: PPUSH
3332: PPUSH
// for i = 1 to 5 do
3333: LD_ADDR_VAR 0 2
3337: PUSH
3338: DOUBLE
3339: LD_INT 1
3341: DEC
3342: ST_TO_ADDR
3343: LD_INT 5
3345: PUSH
3346: FOR_TO
3347: IFFALSE 3452
// begin uc_side = 1 ;
3349: LD_ADDR_OWVAR 20
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// uc_nation = 1 ;
3357: LD_ADDR_OWVAR 21
3361: PUSH
3362: LD_INT 1
3364: ST_TO_ADDR
// hc_name =  ;
3365: LD_ADDR_OWVAR 26
3369: PUSH
3370: LD_STRING 
3372: ST_TO_ADDR
// hc_gallery =  ;
3373: LD_ADDR_OWVAR 33
3377: PUSH
3378: LD_STRING 
3380: ST_TO_ADDR
// PrepareHuman ( false , 1 , 5 ) ;
3381: LD_INT 0
3383: PPUSH
3384: LD_INT 1
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: CALL_OW 380
// un = CreateHuman ;
3394: LD_ADDR_VAR 0 3
3398: PUSH
3399: CALL_OW 44
3403: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3404: LD_VAR 0 3
3408: PPUSH
3409: LD_INT 8
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: LD_INT 121
3426: PPUSH
3427: LD_INT 163
3429: PPUSH
3430: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
3434: LD_ADDR_EXP 21
3438: PUSH
3439: LD_EXP 21
3443: PUSH
3444: LD_VAR 0 3
3448: ADD
3449: ST_TO_ADDR
// end ;
3450: GO 3346
3452: POP
3453: POP
// for i = 1 to 4 do
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: DOUBLE
3460: LD_INT 1
3462: DEC
3463: ST_TO_ADDR
3464: LD_INT 4
3466: PUSH
3467: FOR_TO
3468: IFFALSE 3573
// begin uc_side = 1 ;
3470: LD_ADDR_OWVAR 20
3474: PUSH
3475: LD_INT 1
3477: ST_TO_ADDR
// uc_nation = 1 ;
3478: LD_ADDR_OWVAR 21
3482: PUSH
3483: LD_INT 1
3485: ST_TO_ADDR
// hc_name =  ;
3486: LD_ADDR_OWVAR 26
3490: PUSH
3491: LD_STRING 
3493: ST_TO_ADDR
// hc_gallery =  ;
3494: LD_ADDR_OWVAR 33
3498: PUSH
3499: LD_STRING 
3501: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 5 ) ;
3502: LD_INT 1
3504: PPUSH
3505: LD_INT 2
3507: PPUSH
3508: LD_INT 5
3510: PPUSH
3511: CALL_OW 380
// un = CreateHuman ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 44
3524: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 8
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3540: LD_VAR 0 3
3544: PPUSH
3545: LD_INT 121
3547: PPUSH
3548: LD_INT 163
3550: PPUSH
3551: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
3555: LD_ADDR_EXP 22
3559: PUSH
3560: LD_EXP 22
3564: PUSH
3565: LD_VAR 0 3
3569: ADD
3570: ST_TO_ADDR
// end ;
3571: GO 3467
3573: POP
3574: POP
// for i = 1 to 4 do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: DOUBLE
3581: LD_INT 1
3583: DEC
3584: ST_TO_ADDR
3585: LD_INT 4
3587: PUSH
3588: FOR_TO
3589: IFFALSE 3694
// begin uc_side = 1 ;
3591: LD_ADDR_OWVAR 20
3595: PUSH
3596: LD_INT 1
3598: ST_TO_ADDR
// uc_nation = 1 ;
3599: LD_ADDR_OWVAR 21
3603: PUSH
3604: LD_INT 1
3606: ST_TO_ADDR
// hc_name =  ;
3607: LD_ADDR_OWVAR 26
3611: PUSH
3612: LD_STRING 
3614: ST_TO_ADDR
// hc_gallery =  ;
3615: LD_ADDR_OWVAR 33
3619: PUSH
3620: LD_STRING 
3622: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
3623: LD_INT 0
3625: PPUSH
3626: LD_INT 3
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3646: LD_VAR 0 3
3650: PPUSH
3651: LD_INT 8
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3661: LD_VAR 0 3
3665: PPUSH
3666: LD_INT 121
3668: PPUSH
3669: LD_INT 163
3671: PPUSH
3672: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
3676: LD_ADDR_EXP 23
3680: PUSH
3681: LD_EXP 23
3685: PUSH
3686: LD_VAR 0 3
3690: ADD
3691: ST_TO_ADDR
// end ;
3692: GO 3588
3694: POP
3695: POP
// for i = 1 to 5 do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_INT 5
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3815
// begin uc_side = 1 ;
3712: LD_ADDR_OWVAR 20
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// uc_nation = 1 ;
3720: LD_ADDR_OWVAR 21
3724: PUSH
3725: LD_INT 1
3727: ST_TO_ADDR
// hc_name =  ;
3728: LD_ADDR_OWVAR 26
3732: PUSH
3733: LD_STRING 
3735: ST_TO_ADDR
// hc_gallery =  ;
3736: LD_ADDR_OWVAR 33
3740: PUSH
3741: LD_STRING 
3743: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
3744: LD_INT 0
3746: PPUSH
3747: LD_INT 4
3749: PPUSH
3750: LD_INT 5
3752: PPUSH
3753: CALL_OW 380
// un = CreateHuman ;
3757: LD_ADDR_VAR 0 3
3761: PUSH
3762: CALL_OW 44
3766: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3767: LD_VAR 0 3
3771: PPUSH
3772: LD_INT 8
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_INT 121
3789: PPUSH
3790: LD_INT 163
3792: PPUSH
3793: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
3797: LD_ADDR_EXP 24
3801: PUSH
3802: LD_EXP 24
3806: PUSH
3807: LD_VAR 0 3
3811: ADD
3812: ST_TO_ADDR
// end ;
3813: GO 3709
3815: POP
3816: POP
// end ; end_of_file
3817: LD_VAR 0 1
3821: RET
// export attack_group ; export RusHarassSquad ; export RU2_DemoTeam , RU3_Baterie , RU3_BaterieVehs , RU3_BaterieMechs ; export RU3BaterieTimeOut ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 , RUWeaponChosen ; begin
3822: LD_INT 0
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
// amChassisTab = [ ] ;
3835: LD_ADDR_VAR 0 18
3839: PUSH
3840: EMPTY
3841: ST_TO_ADDR
// arChassisTab = [ ] ;
3842: LD_ADDR_VAR 0 17
3846: PUSH
3847: EMPTY
3848: ST_TO_ADDR
// ruChassisTab = [ ] ;
3849: LD_ADDR_VAR 0 16
3853: PUSH
3854: EMPTY
3855: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
3856: LD_INT 35
3858: PPUSH
3859: CALL_OW 67
// if nation = 1 then
3863: LD_VAR 0 5
3867: PUSH
3868: LD_INT 1
3870: EQUAL
3871: IFFALSE 4392
// begin uc_side = side ;
3873: LD_ADDR_OWVAR 20
3877: PUSH
3878: LD_VAR 0 2
3882: ST_TO_ADDR
// uc_nation = nation ;
3883: LD_ADDR_OWVAR 21
3887: PUSH
3888: LD_VAR 0 5
3892: ST_TO_ADDR
// vc_engine = vehengine ;
3893: LD_ADDR_OWVAR 39
3897: PUSH
3898: LD_VAR 0 6
3902: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
3903: LD_ADDR_OWVAR 38
3907: PUSH
3908: LD_VAR 0 7
3912: PUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_VAR 0 7
3920: PPUSH
3921: CALL_OW 12
3925: ARRAY
3926: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
3927: LD_ADDR_OWVAR 40
3931: PUSH
3932: LD_VAR 0 10
3936: PUSH
3937: LD_INT 1
3939: PPUSH
3940: LD_VAR 0 10
3944: PPUSH
3945: CALL_OW 12
3949: ARRAY
3950: ST_TO_ADDR
// for j = 1 to AMWeapon do
3951: LD_ADDR_VAR 0 13
3955: PUSH
3956: DOUBLE
3957: LD_INT 1
3959: DEC
3960: ST_TO_ADDR
3961: LD_VAR 0 10
3965: PUSH
3966: FOR_TO
3967: IFFALSE 4268
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
3969: LD_VAR 0 10
3973: PUSH
3974: LD_VAR 0 13
3978: ARRAY
3979: PUSH
3980: LD_INT 2
3982: EQUAL
3983: PUSH
3984: LD_VAR 0 10
3988: PUSH
3989: LD_VAR 0 13
3993: ARRAY
3994: PUSH
3995: LD_INT 3
3997: EQUAL
3998: OR
3999: IFFALSE 4052
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4001: LD_ADDR_VAR 0 18
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: LD_INT 5
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4028: LD_ADDR_OWVAR 37
4032: PUSH
4033: LD_VAR 0 18
4037: PUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 18
4045: PPUSH
4046: CALL_OW 12
4050: ARRAY
4051: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4052: LD_VAR 0 10
4056: PUSH
4057: LD_VAR 0 13
4061: ARRAY
4062: PUSH
4063: LD_INT 4
4065: EQUAL
4066: PUSH
4067: LD_VAR 0 10
4071: PUSH
4072: LD_VAR 0 13
4076: ARRAY
4077: PUSH
4078: LD_INT 5
4080: EQUAL
4081: OR
4082: PUSH
4083: LD_VAR 0 10
4087: PUSH
4088: LD_VAR 0 13
4092: ARRAY
4093: PUSH
4094: LD_INT 9
4096: EQUAL
4097: OR
4098: PUSH
4099: LD_VAR 0 10
4103: PUSH
4104: LD_VAR 0 13
4108: ARRAY
4109: PUSH
4110: LD_INT 11
4112: EQUAL
4113: OR
4114: PUSH
4115: LD_VAR 0 10
4119: PUSH
4120: LD_VAR 0 13
4124: ARRAY
4125: PUSH
4126: LD_INT 7
4128: EQUAL
4129: OR
4130: IFFALSE 4179
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4132: LD_ADDR_VAR 0 18
4136: PUSH
4137: LD_INT 2
4139: PUSH
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4155: LD_ADDR_OWVAR 37
4159: PUSH
4160: LD_VAR 0 18
4164: PUSH
4165: LD_INT 1
4167: PPUSH
4168: LD_VAR 0 18
4172: PPUSH
4173: CALL_OW 12
4177: ARRAY
4178: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4179: LD_VAR 0 10
4183: PUSH
4184: LD_VAR 0 13
4188: ARRAY
4189: PUSH
4190: LD_INT 8
4192: EQUAL
4193: PUSH
4194: LD_VAR 0 10
4198: PUSH
4199: LD_VAR 0 13
4203: ARRAY
4204: PUSH
4205: LD_INT 6
4207: EQUAL
4208: OR
4209: PUSH
4210: LD_VAR 0 10
4214: PUSH
4215: LD_VAR 0 13
4219: ARRAY
4220: PUSH
4221: LD_INT 10
4223: EQUAL
4224: OR
4225: IFFALSE 4266
// begin amChassisTab = [ 4 , 5 ] ;
4227: LD_ADDR_VAR 0 18
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: LD_INT 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4242: LD_ADDR_OWVAR 37
4246: PUSH
4247: LD_VAR 0 18
4251: PUSH
4252: LD_INT 1
4254: PPUSH
4255: LD_VAR 0 18
4259: PPUSH
4260: CALL_OW 12
4264: ARRAY
4265: ST_TO_ADDR
// end ; end ;
4266: GO 3966
4268: POP
4269: POP
// veh = CreateVehicle ;
4270: LD_ADDR_VAR 0 15
4274: PUSH
4275: CALL_OW 45
4279: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4280: LD_VAR 0 15
4284: PPUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// if vc_control = 1 then
4297: LD_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: EQUAL
4305: IFFALSE 4362
// begin hc_gallery =  ;
4307: LD_ADDR_OWVAR 33
4311: PUSH
4312: LD_STRING 
4314: ST_TO_ADDR
// hc_name =  ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING 
4322: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_VAR 0 4
4333: PPUSH
4334: CALL_OW 380
// un = CreateHuman ;
4338: LD_ADDR_VAR 0 14
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4348: LD_VAR 0 14
4352: PPUSH
4353: LD_VAR 0 15
4357: PPUSH
4358: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_EXP 25
4371: PUSH
4372: LD_VAR 0 15
4376: ADD
4377: ST_TO_ADDR
// i = i + 1 ;
4378: LD_ADDR_VAR 0 12
4382: PUSH
4383: LD_VAR 0 12
4387: PUSH
4388: LD_INT 1
4390: PLUS
4391: ST_TO_ADDR
// end ; if nation = 2 then
4392: LD_VAR 0 5
4396: PUSH
4397: LD_INT 2
4399: EQUAL
4400: IFFALSE 4893
// begin uc_side = side ;
4402: LD_ADDR_OWVAR 20
4406: PUSH
4407: LD_VAR 0 2
4411: ST_TO_ADDR
// uc_nation = nation ;
4412: LD_ADDR_OWVAR 21
4416: PUSH
4417: LD_VAR 0 5
4421: ST_TO_ADDR
// vc_engine = vehengine ;
4422: LD_ADDR_OWVAR 39
4426: PUSH
4427: LD_VAR 0 6
4431: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4432: LD_ADDR_OWVAR 38
4436: PUSH
4437: LD_VAR 0 7
4441: PUSH
4442: LD_INT 1
4444: PPUSH
4445: LD_VAR 0 7
4449: PPUSH
4450: CALL_OW 12
4454: ARRAY
4455: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4456: LD_ADDR_OWVAR 40
4460: PUSH
4461: LD_VAR 0 9
4465: PUSH
4466: LD_INT 1
4468: PPUSH
4469: LD_VAR 0 9
4473: PPUSH
4474: CALL_OW 12
4478: ARRAY
4479: ST_TO_ADDR
// for j = 1 to ARWeapons do
4480: LD_ADDR_VAR 0 13
4484: PUSH
4485: DOUBLE
4486: LD_INT 1
4488: DEC
4489: ST_TO_ADDR
4490: LD_VAR 0 9
4494: PUSH
4495: FOR_TO
4496: IFFALSE 4769
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4498: LD_VAR 0 9
4502: PUSH
4503: LD_VAR 0 13
4507: ARRAY
4508: PUSH
4509: LD_INT 24
4511: EQUAL
4512: PUSH
4513: LD_VAR 0 9
4517: PUSH
4518: LD_VAR 0 13
4522: ARRAY
4523: PUSH
4524: LD_INT 22
4526: EQUAL
4527: OR
4528: PUSH
4529: LD_VAR 0 9
4533: PUSH
4534: LD_VAR 0 13
4538: ARRAY
4539: PUSH
4540: LD_INT 23
4542: EQUAL
4543: OR
4544: PUSH
4545: LD_VAR 0 9
4549: PUSH
4550: LD_VAR 0 13
4554: ARRAY
4555: PUSH
4556: LD_INT 30
4558: EQUAL
4559: OR
4560: IFFALSE 4597
// begin arChassisTab = [ 14 ] ;
4562: LD_ADDR_VAR 0 17
4566: PUSH
4567: LD_INT 14
4569: PUSH
4570: EMPTY
4571: LIST
4572: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4573: LD_ADDR_OWVAR 37
4577: PUSH
4578: LD_VAR 0 17
4582: PUSH
4583: LD_INT 1
4585: PPUSH
4586: LD_VAR 0 17
4590: PPUSH
4591: CALL_OW 12
4595: ARRAY
4596: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4597: LD_VAR 0 9
4601: PUSH
4602: LD_VAR 0 13
4606: ARRAY
4607: PUSH
4608: LD_INT 29
4610: EQUAL
4611: PUSH
4612: LD_VAR 0 9
4616: PUSH
4617: LD_VAR 0 13
4621: ARRAY
4622: PUSH
4623: LD_INT 28
4625: EQUAL
4626: OR
4627: PUSH
4628: LD_VAR 0 9
4632: PUSH
4633: LD_VAR 0 13
4637: ARRAY
4638: PUSH
4639: LD_INT 27
4641: EQUAL
4642: OR
4643: PUSH
4644: LD_VAR 0 9
4648: PUSH
4649: LD_VAR 0 13
4653: ARRAY
4654: PUSH
4655: LD_INT 26
4657: EQUAL
4658: OR
4659: PUSH
4660: LD_VAR 0 9
4664: PUSH
4665: LD_VAR 0 13
4669: ARRAY
4670: PUSH
4671: LD_INT 25
4673: EQUAL
4674: OR
4675: IFFALSE 4716
// begin arChassisTab = [ 14 , 16 ] ;
4677: LD_ADDR_VAR 0 17
4681: PUSH
4682: LD_INT 14
4684: PUSH
4685: LD_INT 16
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4692: LD_ADDR_OWVAR 37
4696: PUSH
4697: LD_VAR 0 17
4701: PUSH
4702: LD_INT 1
4704: PPUSH
4705: LD_VAR 0 17
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 then
4716: LD_VAR 0 9
4720: PUSH
4721: LD_VAR 0 13
4725: ARRAY
4726: PUSH
4727: LD_INT 72
4729: EQUAL
4730: IFFALSE 4767
// begin arChassisTab = [ 16 ] ;
4732: LD_ADDR_VAR 0 17
4736: PUSH
4737: LD_INT 16
4739: PUSH
4740: EMPTY
4741: LIST
4742: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4743: LD_ADDR_OWVAR 37
4747: PUSH
4748: LD_VAR 0 17
4752: PUSH
4753: LD_INT 1
4755: PPUSH
4756: LD_VAR 0 17
4760: PPUSH
4761: CALL_OW 12
4765: ARRAY
4766: ST_TO_ADDR
// end ; end ;
4767: GO 4495
4769: POP
4770: POP
// veh = CreateVehicle ;
4771: LD_ADDR_VAR 0 15
4775: PUSH
4776: CALL_OW 45
4780: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4781: LD_VAR 0 15
4785: PPUSH
4786: LD_VAR 0 1
4790: PPUSH
4791: LD_INT 0
4793: PPUSH
4794: CALL_OW 49
// if vc_control = 1 then
4798: LD_OWVAR 38
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4863
// begin hc_gallery =  ;
4808: LD_ADDR_OWVAR 33
4812: PUSH
4813: LD_STRING 
4815: ST_TO_ADDR
// hc_name =  ;
4816: LD_ADDR_OWVAR 26
4820: PUSH
4821: LD_STRING 
4823: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4824: LD_INT 0
4826: PPUSH
4827: LD_INT 3
4829: PPUSH
4830: LD_VAR 0 4
4834: PPUSH
4835: CALL_OW 380
// un = CreateHuman ;
4839: LD_ADDR_VAR 0 14
4843: PUSH
4844: CALL_OW 44
4848: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4849: LD_VAR 0 14
4853: PPUSH
4854: LD_VAR 0 15
4858: PPUSH
4859: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
4863: LD_ADDR_EXP 25
4867: PUSH
4868: LD_EXP 25
4872: PUSH
4873: LD_VAR 0 15
4877: ADD
4878: ST_TO_ADDR
// i = i + 1 ;
4879: LD_ADDR_VAR 0 12
4883: PUSH
4884: LD_VAR 0 12
4888: PUSH
4889: LD_INT 1
4891: PLUS
4892: ST_TO_ADDR
// end ; if nation = 3 then
4893: LD_VAR 0 5
4897: PUSH
4898: LD_INT 3
4900: EQUAL
4901: IFFALSE 5289
// begin uc_side = side ;
4903: LD_ADDR_OWVAR 20
4907: PUSH
4908: LD_VAR 0 2
4912: ST_TO_ADDR
// uc_nation = nation ;
4913: LD_ADDR_OWVAR 21
4917: PUSH
4918: LD_VAR 0 5
4922: ST_TO_ADDR
// vc_engine = vehengine ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_VAR 0 6
4932: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4933: LD_ADDR_OWVAR 38
4937: PUSH
4938: LD_VAR 0 7
4942: PUSH
4943: LD_INT 1
4945: PPUSH
4946: LD_VAR 0 7
4950: PPUSH
4951: CALL_OW 12
4955: ARRAY
4956: ST_TO_ADDR
// RUWeaponChosen := RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
4957: LD_ADDR_VAR 0 21
4961: PUSH
4962: LD_VAR 0 8
4966: PUSH
4967: LD_INT 1
4969: PPUSH
4970: LD_VAR 0 8
4974: PPUSH
4975: CALL_OW 12
4979: ARRAY
4980: ST_TO_ADDR
// vc_weapon = RUWeaponChosen ;
4981: LD_ADDR_OWVAR 40
4985: PUSH
4986: LD_VAR 0 21
4990: ST_TO_ADDR
// if RUWeaponChosen = 42 or RUWeaponChosen = 43 or RUWeaponChosen = 44 or RUWeaponChosen = 45 or RUWeaponChosen = 49 or RUWeaponChosen = 75 or RUWeaponChosen = 76 then
4991: LD_VAR 0 21
4995: PUSH
4996: LD_INT 42
4998: EQUAL
4999: PUSH
5000: LD_VAR 0 21
5004: PUSH
5005: LD_INT 43
5007: EQUAL
5008: OR
5009: PUSH
5010: LD_VAR 0 21
5014: PUSH
5015: LD_INT 44
5017: EQUAL
5018: OR
5019: PUSH
5020: LD_VAR 0 21
5024: PUSH
5025: LD_INT 45
5027: EQUAL
5028: OR
5029: PUSH
5030: LD_VAR 0 21
5034: PUSH
5035: LD_INT 49
5037: EQUAL
5038: OR
5039: PUSH
5040: LD_VAR 0 21
5044: PUSH
5045: LD_INT 75
5047: EQUAL
5048: OR
5049: PUSH
5050: LD_VAR 0 21
5054: PUSH
5055: LD_INT 76
5057: EQUAL
5058: OR
5059: IFFALSE 5108
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5061: LD_ADDR_VAR 0 16
5065: PUSH
5066: LD_INT 21
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 23
5074: PUSH
5075: LD_INT 24
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5084: LD_ADDR_OWVAR 37
5088: PUSH
5089: LD_VAR 0 16
5093: PUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_VAR 0 16
5101: PPUSH
5102: CALL_OW 12
5106: ARRAY
5107: ST_TO_ADDR
// end ; if RUWeaponChosen = 46 or RUWeaponChosen = 47 then
5108: LD_VAR 0 21
5112: PUSH
5113: LD_INT 46
5115: EQUAL
5116: PUSH
5117: LD_VAR 0 21
5121: PUSH
5122: LD_INT 47
5124: EQUAL
5125: OR
5126: IFFALSE 5167
// begin ruChassisTab = [ 23 , 24 ] ;
5128: LD_ADDR_VAR 0 16
5132: PUSH
5133: LD_INT 23
5135: PUSH
5136: LD_INT 24
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5143: LD_ADDR_OWVAR 37
5147: PUSH
5148: LD_VAR 0 16
5152: PUSH
5153: LD_INT 1
5155: PPUSH
5156: LD_VAR 0 16
5160: PPUSH
5161: CALL_OW 12
5165: ARRAY
5166: ST_TO_ADDR
// end ; veh = CreateVehicle ;
5167: LD_ADDR_VAR 0 15
5171: PUSH
5172: CALL_OW 45
5176: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5177: LD_VAR 0 15
5181: PPUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_INT 0
5189: PPUSH
5190: CALL_OW 49
// if vc_control = 1 then
5194: LD_OWVAR 38
5198: PUSH
5199: LD_INT 1
5201: EQUAL
5202: IFFALSE 5259
// begin hc_gallery =  ;
5204: LD_ADDR_OWVAR 33
5208: PUSH
5209: LD_STRING 
5211: ST_TO_ADDR
// hc_name =  ;
5212: LD_ADDR_OWVAR 26
5216: PUSH
5217: LD_STRING 
5219: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 3
5225: PPUSH
5226: LD_VAR 0 4
5230: PPUSH
5231: CALL_OW 380
// un = CreateHuman ;
5235: LD_ADDR_VAR 0 14
5239: PUSH
5240: CALL_OW 44
5244: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5245: LD_VAR 0 14
5249: PPUSH
5250: LD_VAR 0 15
5254: PPUSH
5255: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
5259: LD_ADDR_EXP 25
5263: PUSH
5264: LD_EXP 25
5268: PUSH
5269: LD_VAR 0 15
5273: ADD
5274: ST_TO_ADDR
// i = i + 1 ;
5275: LD_ADDR_VAR 0 12
5279: PUSH
5280: LD_VAR 0 12
5284: PUSH
5285: LD_INT 1
5287: PLUS
5288: ST_TO_ADDR
// end ; until i = vehCount ;
5289: LD_VAR 0 12
5293: PUSH
5294: LD_VAR 0 3
5298: EQUAL
5299: IFFALSE 3856
// end ;
5301: LD_VAR 0 11
5305: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
5306: LD_INT 0
5308: PPUSH
5309: PPUSH
5310: PPUSH
5311: PPUSH
5312: PPUSH
5313: PPUSH
5314: PPUSH
// for i = 1 to medicCount do
5315: LD_ADDR_VAR 0 11
5319: PUSH
5320: DOUBLE
5321: LD_INT 1
5323: DEC
5324: ST_TO_ADDR
5325: LD_VAR 0 7
5329: PUSH
5330: FOR_TO
5331: IFFALSE 5413
// begin uc_side = side ;
5333: LD_ADDR_OWVAR 20
5337: PUSH
5338: LD_VAR 0 1
5342: ST_TO_ADDR
// uc_nation = nation ;
5343: LD_ADDR_OWVAR 21
5347: PUSH
5348: LD_VAR 0 2
5352: ST_TO_ADDR
// hc_name =  ;
5353: LD_ADDR_OWVAR 26
5357: PUSH
5358: LD_STRING 
5360: ST_TO_ADDR
// hc_gallery =  ;
5361: LD_ADDR_OWVAR 33
5365: PUSH
5366: LD_STRING 
5368: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 380
// un = CreateHuman ;
5384: LD_ADDR_VAR 0 13
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5394: LD_VAR 0 13
5398: PPUSH
5399: LD_VAR 0 9
5403: PPUSH
5404: LD_INT 0
5406: PPUSH
5407: CALL_OW 49
// end ;
5411: GO 5330
5413: POP
5414: POP
// for i = 1 to soldierCount do
5415: LD_ADDR_VAR 0 11
5419: PUSH
5420: DOUBLE
5421: LD_INT 1
5423: DEC
5424: ST_TO_ADDR
5425: LD_VAR 0 3
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5529
// begin uc_side = side ;
5433: LD_ADDR_OWVAR 20
5437: PUSH
5438: LD_VAR 0 1
5442: ST_TO_ADDR
// uc_nation = nation ;
5443: LD_ADDR_OWVAR 21
5447: PUSH
5448: LD_VAR 0 2
5452: ST_TO_ADDR
// hc_name =  ;
5453: LD_ADDR_OWVAR 26
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_gallery =  ;
5461: LD_ADDR_OWVAR 33
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: LD_VAR 0 8
5479: PPUSH
5480: CALL_OW 380
// un = CreateHuman ;
5484: LD_ADDR_VAR 0 13
5488: PUSH
5489: CALL_OW 44
5493: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5494: LD_VAR 0 13
5498: PPUSH
5499: LD_VAR 0 9
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// attack_group = attack_group ^ un ;
5511: LD_ADDR_EXP 25
5515: PUSH
5516: LD_EXP 25
5520: PUSH
5521: LD_VAR 0 13
5525: ADD
5526: ST_TO_ADDR
// end ;
5527: GO 5430
5529: POP
5530: POP
// for i = 1 to sniperCount do
5531: LD_ADDR_VAR 0 11
5535: PUSH
5536: DOUBLE
5537: LD_INT 1
5539: DEC
5540: ST_TO_ADDR
5541: LD_VAR 0 4
5545: PUSH
5546: FOR_TO
5547: IFFALSE 5645
// begin uc_side = side ;
5549: LD_ADDR_OWVAR 20
5553: PUSH
5554: LD_VAR 0 1
5558: ST_TO_ADDR
// uc_nation = nation ;
5559: LD_ADDR_OWVAR 21
5563: PUSH
5564: LD_VAR 0 2
5568: ST_TO_ADDR
// hc_name =  ;
5569: LD_ADDR_OWVAR 26
5573: PUSH
5574: LD_STRING 
5576: ST_TO_ADDR
// hc_gallery =  ;
5577: LD_ADDR_OWVAR 33
5581: PUSH
5582: LD_STRING 
5584: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5585: LD_INT 0
5587: PPUSH
5588: LD_INT 5
5590: PPUSH
5591: LD_VAR 0 8
5595: PPUSH
5596: CALL_OW 380
// un = CreateHuman ;
5600: LD_ADDR_VAR 0 13
5604: PUSH
5605: CALL_OW 44
5609: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5610: LD_VAR 0 13
5614: PPUSH
5615: LD_VAR 0 9
5619: PPUSH
5620: LD_INT 0
5622: PPUSH
5623: CALL_OW 49
// attack_group = attack_group ^ un ;
5627: LD_ADDR_EXP 25
5631: PUSH
5632: LD_EXP 25
5636: PUSH
5637: LD_VAR 0 13
5641: ADD
5642: ST_TO_ADDR
// end ;
5643: GO 5546
5645: POP
5646: POP
// for i = 1 to bazookCount do
5647: LD_ADDR_VAR 0 11
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 5
5661: PUSH
5662: FOR_TO
5663: IFFALSE 5761
// begin uc_side = side ;
5665: LD_ADDR_OWVAR 20
5669: PUSH
5670: LD_VAR 0 1
5674: ST_TO_ADDR
// uc_nation = nation ;
5675: LD_ADDR_OWVAR 21
5679: PUSH
5680: LD_VAR 0 2
5684: ST_TO_ADDR
// hc_name =  ;
5685: LD_ADDR_OWVAR 26
5689: PUSH
5690: LD_STRING 
5692: ST_TO_ADDR
// hc_gallery =  ;
5693: LD_ADDR_OWVAR 33
5697: PUSH
5698: LD_STRING 
5700: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5701: LD_INT 0
5703: PPUSH
5704: LD_INT 9
5706: PPUSH
5707: LD_VAR 0 8
5711: PPUSH
5712: CALL_OW 380
// un = CreateHuman ;
5716: LD_ADDR_VAR 0 13
5720: PUSH
5721: CALL_OW 44
5725: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5726: LD_VAR 0 13
5730: PPUSH
5731: LD_VAR 0 9
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 49
// attack_group = attack_group ^ un ;
5743: LD_ADDR_EXP 25
5747: PUSH
5748: LD_EXP 25
5752: PUSH
5753: LD_VAR 0 13
5757: ADD
5758: ST_TO_ADDR
// end ;
5759: GO 5662
5761: POP
5762: POP
// for i = 1 to mortalCount do
5763: LD_ADDR_VAR 0 11
5767: PUSH
5768: DOUBLE
5769: LD_INT 1
5771: DEC
5772: ST_TO_ADDR
5773: LD_VAR 0 6
5777: PUSH
5778: FOR_TO
5779: IFFALSE 5877
// begin uc_side = side ;
5781: LD_ADDR_OWVAR 20
5785: PUSH
5786: LD_VAR 0 1
5790: ST_TO_ADDR
// uc_nation = nation ;
5791: LD_ADDR_OWVAR 21
5795: PUSH
5796: LD_VAR 0 2
5800: ST_TO_ADDR
// hc_name =  ;
5801: LD_ADDR_OWVAR 26
5805: PUSH
5806: LD_STRING 
5808: ST_TO_ADDR
// hc_gallery =  ;
5809: LD_ADDR_OWVAR 33
5813: PUSH
5814: LD_STRING 
5816: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5817: LD_INT 0
5819: PPUSH
5820: LD_INT 8
5822: PPUSH
5823: LD_VAR 0 8
5827: PPUSH
5828: CALL_OW 380
// un = CreateHuman ;
5832: LD_ADDR_VAR 0 13
5836: PUSH
5837: CALL_OW 44
5841: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5842: LD_VAR 0 13
5846: PPUSH
5847: LD_VAR 0 9
5851: PPUSH
5852: LD_INT 0
5854: PPUSH
5855: CALL_OW 49
// attack_group = attack_group ^ un ;
5859: LD_ADDR_EXP 25
5863: PUSH
5864: LD_EXP 25
5868: PUSH
5869: LD_VAR 0 13
5873: ADD
5874: ST_TO_ADDR
// end ;
5875: GO 5778
5877: POP
5878: POP
// end ;
5879: LD_VAR 0 10
5883: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
5884: LD_INT 0
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
5897: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
5898: LD_ADDR_VAR 0 6
5902: PUSH
5903: LD_INT 22
5905: PUSH
5906: LD_VAR 0 1
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 30
5917: PUSH
5918: LD_INT 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
5934: LD_ADDR_VAR 0 6
5938: PUSH
5939: LD_VAR 0 6
5943: PUSH
5944: LD_INT 22
5946: PUSH
5947: LD_VAR 0 1
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 30
5958: PUSH
5959: LD_INT 7
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 69
5974: ADD
5975: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
5976: LD_ADDR_VAR 0 6
5980: PUSH
5981: LD_VAR 0 6
5985: PUSH
5986: LD_INT 22
5988: PUSH
5989: LD_VAR 0 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 30
6000: PUSH
6001: LD_INT 8
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ADD
6017: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
6018: LD_ADDR_VAR 0 8
6022: PUSH
6023: LD_INT 22
6025: PUSH
6026: LD_VAR 0 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 30
6037: PUSH
6038: LD_INT 2
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
6054: LD_ADDR_VAR 0 9
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_VAR 0 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 30
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 69
6089: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
6090: LD_ADDR_VAR 0 10
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_VAR 0 1
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 30
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: ST_TO_ADDR
// sklad := sklad ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6126: LD_ADDR_VAR 0 10
6130: PUSH
6131: LD_VAR 0 10
6135: PUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 30
6150: PUSH
6151: LD_INT 1
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: CALL_OW 69
6166: ADD
6167: ST_TO_ADDR
// case side of 1 :
6168: LD_VAR 0 1
6172: PUSH
6173: LD_INT 1
6175: DOUBLE
6176: EQUAL
6177: IFTRUE 6181
6179: GO 6192
6181: POP
// uc_nation = nation_american ; 3 :
6182: LD_ADDR_OWVAR 21
6186: PUSH
6187: LD_INT 1
6189: ST_TO_ADDR
6190: GO 6212
6192: LD_INT 3
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6211
6200: POP
// uc_nation = nation_russian ; end ;
6201: LD_ADDR_OWVAR 21
6205: PUSH
6206: LD_INT 3
6208: ST_TO_ADDR
6209: GO 6212
6211: POP
// for i = 1 to laby do
6212: LD_ADDR_VAR 0 3
6216: PUSH
6217: DOUBLE
6218: LD_INT 1
6220: DEC
6221: ST_TO_ADDR
6222: LD_VAR 0 6
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6357
// begin if IsInUnit ( laby [ i ] ) = 0 then
6230: LD_VAR 0 6
6234: PUSH
6235: LD_VAR 0 3
6239: ARRAY
6240: PPUSH
6241: CALL_OW 310
6245: PUSH
6246: LD_INT 0
6248: EQUAL
6249: IFFALSE 6355
// begin uc_side = side ;
6251: LD_ADDR_OWVAR 20
6255: PUSH
6256: LD_VAR 0 1
6260: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6261: LD_ADDR_VAR 0 11
6265: PUSH
6266: LD_INT 2
6268: PPUSH
6269: LD_INT 4
6271: PPUSH
6272: CALL_OW 12
6276: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6277: LD_ADDR_VAR 0 4
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_VAR 0 11
6291: PUSH
6292: FOR_TO
6293: IFFALSE 6353
// begin PrepareScientist ( 0 , 4 ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 4
6300: PPUSH
6301: CALL_OW 384
// ludz = CreateHuman ;
6305: LD_ADDR_VAR 0 12
6309: PUSH
6310: CALL_OW 44
6314: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
6315: LD_VAR 0 12
6319: PPUSH
6320: LD_VAR 0 6
6324: PUSH
6325: LD_VAR 0 3
6329: ARRAY
6330: PPUSH
6331: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6335: LD_ADDR_VAR 0 11
6339: PUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 4
6345: PPUSH
6346: CALL_OW 12
6350: ST_TO_ADDR
// end ;
6351: GO 6292
6353: POP
6354: POP
// end ; end ;
6355: GO 6227
6357: POP
6358: POP
// for i = 1 to fabryki do
6359: LD_ADDR_VAR 0 3
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_VAR 0 9
6373: PUSH
6374: FOR_TO
6375: IFFALSE 6504
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
6377: LD_VAR 0 9
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 310
6392: PUSH
6393: LD_INT 0
6395: EQUAL
6396: IFFALSE 6502
// begin uc_side = side ;
6398: LD_ADDR_OWVAR 20
6402: PUSH
6403: LD_VAR 0 1
6407: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6408: LD_ADDR_VAR 0 11
6412: PUSH
6413: LD_INT 2
6415: PPUSH
6416: LD_INT 4
6418: PPUSH
6419: CALL_OW 12
6423: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6424: LD_ADDR_VAR 0 4
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_VAR 0 11
6438: PUSH
6439: FOR_TO
6440: IFFALSE 6500
// begin PrepareMechanic ( 0 , 4 ) ;
6442: LD_INT 0
6444: PPUSH
6445: LD_INT 4
6447: PPUSH
6448: CALL_OW 383
// ludz = CreateHuman ;
6452: LD_ADDR_VAR 0 12
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
6462: LD_VAR 0 12
6466: PPUSH
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6482: LD_ADDR_VAR 0 11
6486: PUSH
6487: LD_INT 2
6489: PPUSH
6490: LD_INT 4
6492: PPUSH
6493: CALL_OW 12
6497: ST_TO_ADDR
// end ;
6498: GO 6439
6500: POP
6501: POP
// end ; end ;
6502: GO 6374
6504: POP
6505: POP
// for i = 1 to warsztaty do
6506: LD_ADDR_VAR 0 3
6510: PUSH
6511: DOUBLE
6512: LD_INT 1
6514: DEC
6515: ST_TO_ADDR
6516: LD_VAR 0 8
6520: PUSH
6521: FOR_TO
6522: IFFALSE 6651
// begin if IsInUnit ( warsztaty [ i ] ) = 0 then
6524: LD_VAR 0 8
6528: PUSH
6529: LD_VAR 0 3
6533: ARRAY
6534: PPUSH
6535: CALL_OW 310
6539: PUSH
6540: LD_INT 0
6542: EQUAL
6543: IFFALSE 6649
// begin uc_side = side ;
6545: LD_ADDR_OWVAR 20
6549: PUSH
6550: LD_VAR 0 1
6554: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6555: LD_ADDR_VAR 0 11
6559: PUSH
6560: LD_INT 2
6562: PPUSH
6563: LD_INT 4
6565: PPUSH
6566: CALL_OW 12
6570: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6571: LD_ADDR_VAR 0 4
6575: PUSH
6576: DOUBLE
6577: LD_INT 1
6579: DEC
6580: ST_TO_ADDR
6581: LD_VAR 0 11
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6647
// begin PrepareMechanic ( 0 , 4 ) ;
6589: LD_INT 0
6591: PPUSH
6592: LD_INT 4
6594: PPUSH
6595: CALL_OW 383
// ludz = CreateHuman ;
6599: LD_ADDR_VAR 0 12
6603: PUSH
6604: CALL_OW 44
6608: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , warsztaty [ i ] ) ;
6609: LD_VAR 0 12
6613: PPUSH
6614: LD_VAR 0 8
6618: PUSH
6619: LD_VAR 0 3
6623: ARRAY
6624: PPUSH
6625: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6629: LD_ADDR_VAR 0 11
6633: PUSH
6634: LD_INT 2
6636: PPUSH
6637: LD_INT 4
6639: PPUSH
6640: CALL_OW 12
6644: ST_TO_ADDR
// end ;
6645: GO 6586
6647: POP
6648: POP
// end ; end ;
6649: GO 6521
6651: POP
6652: POP
// for i = 1 to sklad do
6653: LD_ADDR_VAR 0 3
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_VAR 0 10
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6782
// begin if IsInUnit ( sklad [ i ] ) = 0 then
6671: LD_VAR 0 10
6675: PUSH
6676: LD_VAR 0 3
6680: ARRAY
6681: PPUSH
6682: CALL_OW 310
6686: PUSH
6687: LD_INT 0
6689: EQUAL
6690: IFFALSE 6780
// begin uc_side = side ;
6692: LD_ADDR_OWVAR 20
6696: PUSH
6697: LD_VAR 0 1
6701: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
6702: LD_ADDR_VAR 0 11
6706: PUSH
6707: LD_INT 2
6709: PPUSH
6710: LD_INT 3
6712: PPUSH
6713: CALL_OW 12
6717: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: DOUBLE
6724: LD_INT 1
6726: DEC
6727: ST_TO_ADDR
6728: LD_VAR 0 11
6732: PUSH
6733: FOR_TO
6734: IFFALSE 6778
// begin PrepareEngineer ( 0 , 4 ) ;
6736: LD_INT 0
6738: PPUSH
6739: LD_INT 4
6741: PPUSH
6742: CALL_OW 382
// ludz = CreateHuman ;
6746: LD_ADDR_VAR 0 12
6750: PUSH
6751: CALL_OW 44
6755: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
6756: LD_VAR 0 12
6760: PPUSH
6761: LD_VAR 0 10
6765: PUSH
6766: LD_VAR 0 3
6770: ARRAY
6771: PPUSH
6772: CALL_OW 52
// end ;
6776: GO 6733
6778: POP
6779: POP
// end ; end ;
6780: GO 6668
6782: POP
6783: POP
// end ;
6784: LD_VAR 0 2
6788: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
6789: LD_INT 0
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
// case side of 1 :
6797: LD_VAR 0 1
6801: PUSH
6802: LD_INT 1
6804: DOUBLE
6805: EQUAL
6806: IFTRUE 6810
6808: GO 6821
6810: POP
// uc_nation = nation_american ; 3 :
6811: LD_ADDR_OWVAR 21
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
6819: GO 6841
6821: LD_INT 3
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6840
6829: POP
// uc_nation = nation_russian ; end ;
6830: LD_ADDR_OWVAR 21
6834: PUSH
6835: LD_INT 3
6837: ST_TO_ADDR
6838: GO 6841
6840: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
6841: LD_ADDR_VAR 0 5
6845: PUSH
6846: LD_INT 22
6848: PUSH
6849: LD_VAR 0 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 30
6860: PUSH
6861: LD_INT 5
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PPUSH
6872: CALL_OW 69
6876: ST_TO_ADDR
// for i = 1 to barrack do
6877: LD_ADDR_VAR 0 3
6881: PUSH
6882: DOUBLE
6883: LD_INT 1
6885: DEC
6886: ST_TO_ADDR
6887: LD_VAR 0 5
6891: PUSH
6892: FOR_TO
6893: IFFALSE 7066
// begin if IsInUnit ( barrack [ i ] ) = 0 then
6895: LD_VAR 0 5
6899: PUSH
6900: LD_VAR 0 3
6904: ARRAY
6905: PPUSH
6906: CALL_OW 310
6910: PUSH
6911: LD_INT 0
6913: EQUAL
6914: IFFALSE 7064
// begin uc_side = side ;
6916: LD_ADDR_OWVAR 20
6920: PUSH
6921: LD_VAR 0 1
6925: ST_TO_ADDR
// for j = 1 to 2 do
6926: LD_ADDR_VAR 0 4
6930: PUSH
6931: DOUBLE
6932: LD_INT 1
6934: DEC
6935: ST_TO_ADDR
6936: LD_INT 2
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6984
// begin PrepareSoldier ( 0 , 5 ) ;
6942: LD_INT 0
6944: PPUSH
6945: LD_INT 5
6947: PPUSH
6948: CALL_OW 381
// soldat := CreateHuman ;
6952: LD_ADDR_VAR 0 6
6956: PUSH
6957: CALL_OW 44
6961: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
6962: LD_VAR 0 6
6966: PPUSH
6967: LD_VAR 0 5
6971: PUSH
6972: LD_VAR 0 3
6976: ARRAY
6977: PPUSH
6978: CALL_OW 52
// end ;
6982: GO 6939
6984: POP
6985: POP
// if side = 3 then
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 3
6993: EQUAL
6994: IFFALSE 7064
// for j = 1 to 2 do
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_INT 2
7008: PUSH
7009: FOR_TO
7010: IFFALSE 7062
// begin PrepareSoldier ( 0 , 5 ) ;
7012: LD_INT 0
7014: PPUSH
7015: LD_INT 5
7017: PPUSH
7018: CALL_OW 381
// hc_class = class_bazooker ;
7022: LD_ADDR_OWVAR 28
7026: PUSH
7027: LD_INT 9
7029: ST_TO_ADDR
// soldat := CreateHuman ;
7030: LD_ADDR_VAR 0 6
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7040: LD_VAR 0 6
7044: PPUSH
7045: LD_VAR 0 5
7049: PUSH
7050: LD_VAR 0 3
7054: ARRAY
7055: PPUSH
7056: CALL_OW 52
// end ;
7060: GO 7009
7062: POP
7063: POP
// end ; end ;
7064: GO 6892
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 2
7072: RET
// export function Assemble_Armories ( side ) ; var i , j , barrack , soldat , filter ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
7080: PPUSH
// case side of 1 :
7081: LD_VAR 0 1
7085: PUSH
7086: LD_INT 1
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7105
7094: POP
// uc_nation = nation_american ; 3 :
7095: LD_ADDR_OWVAR 21
7099: PUSH
7100: LD_INT 1
7102: ST_TO_ADDR
7103: GO 7125
7105: LD_INT 3
7107: DOUBLE
7108: EQUAL
7109: IFTRUE 7113
7111: GO 7124
7113: POP
// uc_nation = nation_russian ; end ;
7114: LD_ADDR_OWVAR 21
7118: PUSH
7119: LD_INT 3
7121: ST_TO_ADDR
7122: GO 7125
7124: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_armoury ] ] ) ;
7125: LD_ADDR_VAR 0 5
7129: PUSH
7130: LD_INT 22
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 30
7144: PUSH
7145: LD_INT 4
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PPUSH
7156: CALL_OW 69
7160: ST_TO_ADDR
// for i = 1 to barrack do
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: DOUBLE
7167: LD_INT 1
7169: DEC
7170: ST_TO_ADDR
7171: LD_VAR 0 5
7175: PUSH
7176: FOR_TO
7177: IFFALSE 7272
// begin if IsInUnit ( barrack [ i ] ) = 0 then
7179: LD_VAR 0 5
7183: PUSH
7184: LD_VAR 0 3
7188: ARRAY
7189: PPUSH
7190: CALL_OW 310
7194: PUSH
7195: LD_INT 0
7197: EQUAL
7198: IFFALSE 7270
// begin uc_side = side ;
7200: LD_ADDR_OWVAR 20
7204: PUSH
7205: LD_VAR 0 1
7209: ST_TO_ADDR
// for j = 1 to 3 do
7210: LD_ADDR_VAR 0 4
7214: PUSH
7215: DOUBLE
7216: LD_INT 1
7218: DEC
7219: ST_TO_ADDR
7220: LD_INT 3
7222: PUSH
7223: FOR_TO
7224: IFFALSE 7268
// begin PrepareSoldier ( 0 , 5 ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 5
7231: PPUSH
7232: CALL_OW 381
// soldat := CreateHuman ;
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: CALL_OW 44
7245: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7246: LD_VAR 0 6
7250: PPUSH
7251: LD_VAR 0 5
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 52
// end ;
7266: GO 7223
7268: POP
7269: POP
// end ; end ;
7270: GO 7176
7272: POP
7273: POP
// end ;
7274: LD_VAR 0 2
7278: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
7279: LD_INT 0
7281: PPUSH
7282: PPUSH
// dir := GetDir ( b ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 2
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// if dir < 3 then
7298: LD_VAR 0 4
7302: PUSH
7303: LD_INT 3
7305: LESS
7306: IFFALSE 7324
// dir := dir + 3 else
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_INT 3
7320: PLUS
7321: ST_TO_ADDR
7322: GO 7338
// dir := dir - 3 ;
7324: LD_ADDR_VAR 0 4
7328: PUSH
7329: LD_VAR 0 4
7333: PUSH
7334: LD_INT 3
7336: MINUS
7337: ST_TO_ADDR
// SetDir ( un , dir ) ;
7338: LD_VAR 0 1
7342: PPUSH
7343: LD_VAR 0 4
7347: PPUSH
7348: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7352: LD_VAR 0 1
7356: PPUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: CALL_OW 52
// end ;
7366: LD_VAR 0 3
7370: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
7371: LD_INT 0
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
7377: LD_ADDR_VAR 0 4
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_VAR 0 1
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 23
7396: PUSH
7397: LD_INT 3
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 31
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: ST_TO_ADDR
// for i = 1 to filter do
7424: LD_ADDR_VAR 0 3
7428: PUSH
7429: DOUBLE
7430: LD_INT 1
7432: DEC
7433: ST_TO_ADDR
7434: LD_VAR 0 4
7438: PUSH
7439: FOR_TO
7440: IFFALSE 7525
// if IsInUnit ( filter [ i ] ) = 0 then
7442: LD_VAR 0 4
7446: PUSH
7447: LD_VAR 0 3
7451: ARRAY
7452: PPUSH
7453: CALL_OW 310
7457: PUSH
7458: LD_INT 0
7460: EQUAL
7461: IFFALSE 7523
// begin uc_nation = nation_russian ;
7463: LD_ADDR_OWVAR 21
7467: PUSH
7468: LD_INT 3
7470: ST_TO_ADDR
// uc_side = side ;
7471: LD_ADDR_OWVAR 20
7475: PUSH
7476: LD_VAR 0 1
7480: ST_TO_ADDR
// PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7481: LD_INT 1
7483: PPUSH
7484: LD_EXP 42
7488: PPUSH
7489: CALL_OW 381
// un := CreateHuman ;
7493: LD_ADDR_VAR 0 5
7497: PUSH
7498: CALL_OW 44
7502: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
7503: LD_VAR 0 5
7507: PPUSH
7508: LD_VAR 0 4
7512: PUSH
7513: LD_VAR 0 3
7517: ARRAY
7518: PPUSH
7519: CALL 7279 0 2
// end ;
7523: GO 7439
7525: POP
7526: POP
// end ;
7527: LD_VAR 0 2
7531: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
7532: LD_INT 0
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
// uc_side := side ;
7538: LD_ADDR_OWVAR 20
7542: PUSH
7543: LD_VAR 0 1
7547: ST_TO_ADDR
// uc_nation := 3 ;
7548: LD_ADDR_OWVAR 21
7552: PUSH
7553: LD_INT 3
7555: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_VAR 0 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 30
7575: PUSH
7576: LD_INT 32
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 58
7585: PUSH
7586: EMPTY
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 69
7598: PUSH
7599: FOR_IN
7600: IFFALSE 7630
// begin PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7602: LD_INT 1
7604: PPUSH
7605: LD_EXP 42
7609: PPUSH
7610: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
7614: CALL_OW 44
7618: PPUSH
7619: LD_VAR 0 3
7623: PPUSH
7624: CALL_OW 52
// end ;
7628: GO 7599
7630: POP
7631: POP
// end ;
7632: LD_VAR 0 2
7636: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
7637: LD_INT 0
7639: PPUSH
// if not unit then
7640: LD_VAR 0 1
7644: NOT
7645: IFFALSE 7649
// exit ;
7647: GO 7683
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_VAR 0 2
7658: PUSH
7659: LD_VAR 0 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_VAR 0 1
7672: PPUSH
7673: CALL_OW 258
7677: ARRAY
7678: PPUSH
7679: CALL_OW 88
// end ;
7683: LD_VAR 0 4
7687: RET
// export function RussianFirstAssault ; var i , filter , un , veh ; begin
7688: LD_INT 0
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
// uc_nation = nation_russian ;
7695: LD_ADDR_OWVAR 21
7699: PUSH
7700: LD_INT 3
7702: ST_TO_ADDR
// uc_side = 3 ;
7703: LD_ADDR_OWVAR 20
7707: PUSH
7708: LD_INT 3
7710: ST_TO_ADDR
// for i = 1 to 8 do
7711: LD_ADDR_VAR 0 2
7715: PUSH
7716: DOUBLE
7717: LD_INT 1
7719: DEC
7720: ST_TO_ADDR
7721: LD_INT 8
7723: PUSH
7724: FOR_TO
7725: IFFALSE 7802
// begin vc_chassis := ru_medium_wheeled ;
7727: LD_ADDR_OWVAR 37
7731: PUSH
7732: LD_INT 21
7734: ST_TO_ADDR
// vc_engine := engine_siberite ;
7735: LD_ADDR_OWVAR 39
7739: PUSH
7740: LD_INT 3
7742: ST_TO_ADDR
// vc_weapon := ru_gun ;
7743: LD_ADDR_OWVAR 40
7747: PUSH
7748: LD_INT 44
7750: ST_TO_ADDR
// vc_control := control_computer ;
7751: LD_ADDR_OWVAR 38
7755: PUSH
7756: LD_INT 3
7758: ST_TO_ADDR
// veh := CreateVehicle ;
7759: LD_ADDR_VAR 0 5
7763: PUSH
7764: CALL_OW 45
7768: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
7769: LD_VAR 0 5
7773: PPUSH
7774: LD_INT 2
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// RusHarassSquad = RusHarassSquad ^ veh ;
7784: LD_ADDR_EXP 26
7788: PUSH
7789: LD_EXP 26
7793: PUSH
7794: LD_VAR 0 5
7798: ADD
7799: ST_TO_ADDR
// end ;
7800: GO 7724
7802: POP
7803: POP
// ComMoveXY ( RusHarassSquad , 135 , 144 ) ;
7804: LD_EXP 26
7808: PPUSH
7809: LD_INT 135
7811: PPUSH
7812: LD_INT 144
7814: PPUSH
7815: CALL_OW 111
// AddComMoveXY ( RusHarassSquad , 158 , 176 ) ;
7819: LD_EXP 26
7823: PPUSH
7824: LD_INT 158
7826: PPUSH
7827: LD_INT 176
7829: PPUSH
7830: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 189 ) ;
7834: LD_EXP 26
7838: PPUSH
7839: LD_INT 169
7841: PPUSH
7842: LD_INT 189
7844: PPUSH
7845: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 176 , 225 ) ;
7849: LD_EXP 26
7853: PPUSH
7854: LD_INT 176
7856: PPUSH
7857: LD_INT 225
7859: PPUSH
7860: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 88 ) ;
7864: LD_EXP 26
7868: PPUSH
7869: LD_INT 169
7871: PPUSH
7872: LD_INT 88
7874: PPUSH
7875: CALL_OW 171
// end ;
7879: LD_VAR 0 1
7883: RET
// export RU2_Sols , RU2_Medics , RU2_Engs ; export function RU2_Assemble_MineBase ; var i , un ; begin
7884: LD_INT 0
7886: PPUSH
7887: PPUSH
7888: PPUSH
// uc_side = 6 ;
7889: LD_ADDR_OWVAR 20
7893: PUSH
7894: LD_INT 6
7896: ST_TO_ADDR
// uc_nation = 3 ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 3
7904: ST_TO_ADDR
// for i = 1 to 14 do
7905: LD_ADDR_VAR 0 2
7909: PUSH
7910: DOUBLE
7911: LD_INT 1
7913: DEC
7914: ST_TO_ADDR
7915: LD_INT 14
7917: PUSH
7918: FOR_TO
7919: IFFALSE 8021
// begin uc_side = 6 ;
7921: LD_ADDR_OWVAR 20
7925: PUSH
7926: LD_INT 6
7928: ST_TO_ADDR
// uc_nation = 3 ;
7929: LD_ADDR_OWVAR 21
7933: PUSH
7934: LD_INT 3
7936: ST_TO_ADDR
// hc_gallery =  ;
7937: LD_ADDR_OWVAR 33
7941: PUSH
7942: LD_STRING 
7944: ST_TO_ADDR
// hc_name =  ;
7945: LD_ADDR_OWVAR 26
7949: PUSH
7950: LD_STRING 
7952: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_EXP 41
7963: PPUSH
7964: LD_EXP 42
7968: PPUSH
7969: CALL_OW 12
7973: PPUSH
7974: CALL_OW 380
// un = CreateHuman ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: CALL_OW 44
7987: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
7988: LD_VAR 0 3
7992: PPUSH
7993: LD_INT 2
7995: PPUSH
7996: LD_INT 0
7998: PPUSH
7999: CALL_OW 49
// RU2_Sols = RU2_Sols ^ un ;
8003: LD_ADDR_EXP 32
8007: PUSH
8008: LD_EXP 32
8012: PUSH
8013: LD_VAR 0 3
8017: ADD
8018: ST_TO_ADDR
// end ;
8019: GO 7918
8021: POP
8022: POP
// for i = 1 to 4 do
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: DOUBLE
8029: LD_INT 1
8031: DEC
8032: ST_TO_ADDR
8033: LD_INT 4
8035: PUSH
8036: FOR_TO
8037: IFFALSE 8139
// begin uc_side = 6 ;
8039: LD_ADDR_OWVAR 20
8043: PUSH
8044: LD_INT 6
8046: ST_TO_ADDR
// uc_nation = 3 ;
8047: LD_ADDR_OWVAR 21
8051: PUSH
8052: LD_INT 3
8054: ST_TO_ADDR
// hc_gallery =  ;
8055: LD_ADDR_OWVAR 33
8059: PUSH
8060: LD_STRING 
8062: ST_TO_ADDR
// hc_name =  ;
8063: LD_ADDR_OWVAR 26
8067: PUSH
8068: LD_STRING 
8070: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8071: LD_INT 0
8073: PPUSH
8074: LD_INT 2
8076: PPUSH
8077: LD_EXP 41
8081: PPUSH
8082: LD_EXP 42
8086: PPUSH
8087: CALL_OW 12
8091: PPUSH
8092: CALL_OW 380
// un = CreateHuman ;
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: CALL_OW 44
8105: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8106: LD_VAR 0 3
8110: PPUSH
8111: LD_INT 2
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// RU2_Engs = RU2_Engs ^ un ;
8121: LD_ADDR_EXP 34
8125: PUSH
8126: LD_EXP 34
8130: PUSH
8131: LD_VAR 0 3
8135: ADD
8136: ST_TO_ADDR
// end ;
8137: GO 8036
8139: POP
8140: POP
// for i = 1 to 2 do
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: DOUBLE
8147: LD_INT 1
8149: DEC
8150: ST_TO_ADDR
8151: LD_INT 2
8153: PUSH
8154: FOR_TO
8155: IFFALSE 8257
// begin uc_side = 6 ;
8157: LD_ADDR_OWVAR 20
8161: PUSH
8162: LD_INT 6
8164: ST_TO_ADDR
// uc_nation = 3 ;
8165: LD_ADDR_OWVAR 21
8169: PUSH
8170: LD_INT 3
8172: ST_TO_ADDR
// hc_gallery =  ;
8173: LD_ADDR_OWVAR 33
8177: PUSH
8178: LD_STRING 
8180: ST_TO_ADDR
// hc_name =  ;
8181: LD_ADDR_OWVAR 26
8185: PUSH
8186: LD_STRING 
8188: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8189: LD_INT 0
8191: PPUSH
8192: LD_INT 4
8194: PPUSH
8195: LD_EXP 41
8199: PPUSH
8200: LD_EXP 42
8204: PPUSH
8205: CALL_OW 12
8209: PPUSH
8210: CALL_OW 380
// un = CreateHuman ;
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8224: LD_VAR 0 3
8228: PPUSH
8229: LD_INT 2
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 49
// RU2_Medics = RU2_Medics ^ un ;
8239: LD_ADDR_EXP 33
8243: PUSH
8244: LD_EXP 33
8248: PUSH
8249: LD_VAR 0 3
8253: ADD
8254: ST_TO_ADDR
// end ;
8255: GO 8154
8257: POP
8258: POP
// ComAgressiveMove ( RU2_Sols , 38 , 35 ) ;
8259: LD_EXP 32
8263: PPUSH
8264: LD_INT 38
8266: PPUSH
8267: LD_INT 35
8269: PPUSH
8270: CALL_OW 114
// ComAgressiveMove ( RU2_Medics , 38 , 35 ) ;
8274: LD_EXP 33
8278: PPUSH
8279: LD_INT 38
8281: PPUSH
8282: LD_INT 35
8284: PPUSH
8285: CALL_OW 114
// ComBuild ( RU2_Engs , b_depot , 32 , 30 , 2 ) ;
8289: LD_EXP 34
8293: PPUSH
8294: LD_INT 0
8296: PPUSH
8297: LD_INT 32
8299: PPUSH
8300: LD_INT 30
8302: PPUSH
8303: LD_INT 2
8305: PPUSH
8306: CALL_OW 145
// AddComBuild ( RU2_Engs , b_siberite_mine , 39 , 38 , 0 ) ;
8310: LD_EXP 34
8314: PPUSH
8315: LD_INT 30
8317: PPUSH
8318: LD_INT 39
8320: PPUSH
8321: LD_INT 38
8323: PPUSH
8324: LD_INT 0
8326: PPUSH
8327: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 37 , 45 , 0 ) ;
8331: LD_EXP 34
8335: PPUSH
8336: LD_INT 4
8338: PPUSH
8339: LD_INT 37
8341: PPUSH
8342: LD_INT 45
8344: PPUSH
8345: LD_INT 0
8347: PPUSH
8348: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 33 , 46 , 0 ) ;
8352: LD_EXP 34
8356: PPUSH
8357: LD_INT 31
8359: PPUSH
8360: LD_INT 33
8362: PPUSH
8363: LD_INT 46
8365: PPUSH
8366: LD_INT 0
8368: PPUSH
8369: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 44 , 46 , 5 ) ;
8373: LD_EXP 34
8377: PPUSH
8378: LD_INT 31
8380: PPUSH
8381: LD_INT 44
8383: PPUSH
8384: LD_INT 46
8386: PPUSH
8387: LD_INT 5
8389: PPUSH
8390: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 39 , 14 , 4 ) ;
8394: LD_EXP 34
8398: PPUSH
8399: LD_INT 4
8401: PPUSH
8402: LD_INT 39
8404: PPUSH
8405: LD_INT 14
8407: PPUSH
8408: LD_INT 4
8410: PPUSH
8411: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 34 , 7 , 4 ) ;
8415: LD_EXP 34
8419: PPUSH
8420: LD_INT 31
8422: PPUSH
8423: LD_INT 34
8425: PPUSH
8426: LD_INT 7
8428: PPUSH
8429: LD_INT 4
8431: PPUSH
8432: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 39 , 18 , 4 ) ;
8436: LD_EXP 34
8440: PPUSH
8441: LD_INT 31
8443: PPUSH
8444: LD_INT 39
8446: PPUSH
8447: LD_INT 18
8449: PPUSH
8450: LD_INT 4
8452: PPUSH
8453: CALL_OW 205
// AddComMoveXY ( RU2_Engs , 35 , 39 ) ;
8457: LD_EXP 34
8461: PPUSH
8462: LD_INT 35
8464: PPUSH
8465: LD_INT 39
8467: PPUSH
8468: CALL_OW 171
// end ;
8472: LD_VAR 0 1
8476: RET
// export function RU2_Attack_Minebase ; var i , un , veh , DemoTeam_Enemy , attacker ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
// uc_side = 6 ;
8485: LD_ADDR_OWVAR 20
8489: PUSH
8490: LD_INT 6
8492: ST_TO_ADDR
// uc_nation = 3 ;
8493: LD_ADDR_OWVAR 21
8497: PUSH
8498: LD_INT 3
8500: ST_TO_ADDR
// for i = 1 to 8 do
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: DOUBLE
8507: LD_INT 1
8509: DEC
8510: ST_TO_ADDR
8511: LD_INT 8
8513: PUSH
8514: FOR_TO
8515: IFFALSE 8617
// begin uc_side = 6 ;
8517: LD_ADDR_OWVAR 20
8521: PUSH
8522: LD_INT 6
8524: ST_TO_ADDR
// uc_nation = 3 ;
8525: LD_ADDR_OWVAR 21
8529: PUSH
8530: LD_INT 3
8532: ST_TO_ADDR
// hc_gallery =  ;
8533: LD_ADDR_OWVAR 33
8537: PUSH
8538: LD_STRING 
8540: ST_TO_ADDR
// hc_name =  ;
8541: LD_ADDR_OWVAR 26
8545: PUSH
8546: LD_STRING 
8548: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8549: LD_INT 0
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: LD_EXP 41
8559: PPUSH
8560: LD_EXP 42
8564: PPUSH
8565: CALL_OW 12
8569: PPUSH
8570: CALL_OW 380
// un = CreateHuman ;
8574: LD_ADDR_VAR 0 3
8578: PUSH
8579: CALL_OW 44
8583: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8584: LD_VAR 0 3
8588: PPUSH
8589: LD_INT 2
8591: PPUSH
8592: LD_INT 0
8594: PPUSH
8595: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ un ;
8599: LD_ADDR_EXP 27
8603: PUSH
8604: LD_EXP 27
8608: PUSH
8609: LD_VAR 0 3
8613: ADD
8614: ST_TO_ADDR
// end ;
8615: GO 8514
8617: POP
8618: POP
// for i = 1 to 2 do
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: DOUBLE
8625: LD_INT 1
8627: DEC
8628: ST_TO_ADDR
8629: LD_INT 2
8631: PUSH
8632: FOR_TO
8633: IFFALSE 8710
// begin vc_chassis := ru_medium_tracked ;
8635: LD_ADDR_OWVAR 37
8639: PUSH
8640: LD_INT 22
8642: ST_TO_ADDR
// vc_engine := engine_siberite ;
8643: LD_ADDR_OWVAR 39
8647: PUSH
8648: LD_INT 3
8650: ST_TO_ADDR
// vc_weapon := ru_gun ;
8651: LD_ADDR_OWVAR 40
8655: PUSH
8656: LD_INT 44
8658: ST_TO_ADDR
// vc_control := control_computer ;
8659: LD_ADDR_OWVAR 38
8663: PUSH
8664: LD_INT 3
8666: ST_TO_ADDR
// veh := CreateVehicle ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: CALL_OW 45
8676: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8677: LD_VAR 0 4
8681: PPUSH
8682: LD_INT 2
8684: PPUSH
8685: LD_INT 0
8687: PPUSH
8688: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8692: LD_ADDR_EXP 27
8696: PUSH
8697: LD_EXP 27
8701: PUSH
8702: LD_VAR 0 4
8706: ADD
8707: ST_TO_ADDR
// end ;
8708: GO 8632
8710: POP
8711: POP
// for i = 1 to 2 do
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: DOUBLE
8718: LD_INT 1
8720: DEC
8721: ST_TO_ADDR
8722: LD_INT 2
8724: PUSH
8725: FOR_TO
8726: IFFALSE 8803
// begin vc_chassis := ru_medium_tracked ;
8728: LD_ADDR_OWVAR 37
8732: PUSH
8733: LD_INT 22
8735: ST_TO_ADDR
// vc_engine := engine_siberite ;
8736: LD_ADDR_OWVAR 39
8740: PUSH
8741: LD_INT 3
8743: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
8744: LD_ADDR_OWVAR 40
8748: PUSH
8749: LD_INT 43
8751: ST_TO_ADDR
// vc_control := control_computer ;
8752: LD_ADDR_OWVAR 38
8756: PUSH
8757: LD_INT 3
8759: ST_TO_ADDR
// veh := CreateVehicle ;
8760: LD_ADDR_VAR 0 4
8764: PUSH
8765: CALL_OW 45
8769: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8770: LD_VAR 0 4
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: LD_INT 0
8780: PPUSH
8781: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8785: LD_ADDR_EXP 27
8789: PUSH
8790: LD_EXP 27
8794: PUSH
8795: LD_VAR 0 4
8799: ADD
8800: ST_TO_ADDR
// end ;
8801: GO 8725
8803: POP
8804: POP
// Attack ( [ 0 , RU2_DemoTeam , [ [ 78 , 10 ] , [ 20 , 16 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
8805: LD_INT 0
8807: PUSH
8808: LD_EXP 27
8812: PUSH
8813: LD_INT 78
8815: PUSH
8816: LD_INT 10
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 20
8825: PUSH
8826: LD_INT 16
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: LD_INT 0
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: LD_INT 0
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: LD_INT 0
8851: PUSH
8852: LD_INT 0
8854: PUSH
8855: LD_INT 0
8857: PUSH
8858: LD_INT 0
8860: PUSH
8861: LD_INT 1
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: PPUSH
8885: CALL 72635 0 1
// end ;
8889: LD_VAR 0 1
8893: RET
// export function RU3_Baterie_Prepare ; var i , un , veh ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
// uc_side = 5 ;
8900: LD_ADDR_OWVAR 20
8904: PUSH
8905: LD_INT 5
8907: ST_TO_ADDR
// uc_nation = 3 ;
8908: LD_ADDR_OWVAR 21
8912: PUSH
8913: LD_INT 3
8915: ST_TO_ADDR
// for i = 1 to 5 do
8916: LD_ADDR_VAR 0 2
8920: PUSH
8921: DOUBLE
8922: LD_INT 1
8924: DEC
8925: ST_TO_ADDR
8926: LD_INT 5
8928: PUSH
8929: FOR_TO
8930: IFFALSE 9008
// begin vc_chassis := ru_heavy_tracked ;
8932: LD_ADDR_OWVAR 37
8936: PUSH
8937: LD_INT 24
8939: ST_TO_ADDR
// vc_engine := engine_siberite ;
8940: LD_ADDR_OWVAR 39
8944: PUSH
8945: LD_INT 3
8947: ST_TO_ADDR
// vc_weapon := ru_rocket ;
8948: LD_ADDR_OWVAR 40
8952: PUSH
8953: LD_INT 47
8955: ST_TO_ADDR
// vc_control := control_manual ;
8956: LD_ADDR_OWVAR 38
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// veh := CreateVehicle ;
8964: LD_ADDR_VAR 0 4
8968: PUSH
8969: CALL_OW 45
8973: ST_TO_ADDR
// RU3_Baterie = RU3_Baterie ^ veh ;
8974: LD_ADDR_EXP 28
8978: PUSH
8979: LD_EXP 28
8983: PUSH
8984: LD_VAR 0 4
8988: ADD
8989: ST_TO_ADDR
// RU3_BaterieVehs = RU3_BaterieVehs ^ veh ;
8990: LD_ADDR_EXP 29
8994: PUSH
8995: LD_EXP 29
8999: PUSH
9000: LD_VAR 0 4
9004: ADD
9005: ST_TO_ADDR
// end ;
9006: GO 8929
9008: POP
9009: POP
// PlaceUnitXYR ( RU3_BaterieVehs [ 1 ] , 275 , 234 , 0 , false ) ;
9010: LD_EXP 29
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PPUSH
9019: LD_INT 275
9021: PPUSH
9022: LD_INT 234
9024: PPUSH
9025: LD_INT 0
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 2 ] , 280 , 237 , 0 , false ) ;
9035: LD_EXP 29
9039: PUSH
9040: LD_INT 2
9042: ARRAY
9043: PPUSH
9044: LD_INT 280
9046: PPUSH
9047: LD_INT 237
9049: PPUSH
9050: LD_INT 0
9052: PPUSH
9053: LD_INT 0
9055: PPUSH
9056: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 3 ] , 283 , 235 , 5 , false ) ;
9060: LD_EXP 29
9064: PUSH
9065: LD_INT 3
9067: ARRAY
9068: PPUSH
9069: LD_INT 283
9071: PPUSH
9072: LD_INT 235
9074: PPUSH
9075: LD_INT 5
9077: PPUSH
9078: LD_INT 0
9080: PPUSH
9081: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 4 ] , 282 , 231 , 4 , false ) ;
9085: LD_EXP 29
9089: PUSH
9090: LD_INT 4
9092: ARRAY
9093: PPUSH
9094: LD_INT 282
9096: PPUSH
9097: LD_INT 231
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: LD_INT 0
9105: PPUSH
9106: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 5 ] , 279 , 229 , 3 , false ) ;
9110: LD_EXP 29
9114: PUSH
9115: LD_INT 5
9117: ARRAY
9118: PPUSH
9119: LD_INT 279
9121: PPUSH
9122: LD_INT 229
9124: PPUSH
9125: LD_INT 3
9127: PPUSH
9128: LD_INT 0
9130: PPUSH
9131: CALL_OW 50
// for i = 1 to 9 do
9135: LD_ADDR_VAR 0 2
9139: PUSH
9140: DOUBLE
9141: LD_INT 1
9143: DEC
9144: ST_TO_ADDR
9145: LD_INT 9
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9251
// begin uc_side = 5 ;
9151: LD_ADDR_OWVAR 20
9155: PUSH
9156: LD_INT 5
9158: ST_TO_ADDR
// uc_nation = 3 ;
9159: LD_ADDR_OWVAR 21
9163: PUSH
9164: LD_INT 3
9166: ST_TO_ADDR
// hc_gallery =  ;
9167: LD_ADDR_OWVAR 33
9171: PUSH
9172: LD_STRING 
9174: ST_TO_ADDR
// hc_name =  ;
9175: LD_ADDR_OWVAR 26
9179: PUSH
9180: LD_STRING 
9182: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9183: LD_INT 0
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: LD_EXP 41
9193: PPUSH
9194: LD_EXP 42
9198: PPUSH
9199: CALL_OW 12
9203: PPUSH
9204: CALL_OW 380
// un = CreateHuman ;
9208: LD_ADDR_VAR 0 3
9212: PUSH
9213: CALL_OW 44
9217: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 13
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9233: LD_ADDR_EXP 28
9237: PUSH
9238: LD_EXP 28
9242: PUSH
9243: LD_VAR 0 3
9247: ADD
9248: ST_TO_ADDR
// end ;
9249: GO 9148
9251: POP
9252: POP
// for i = 1 to 5 do
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_INT 5
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9385
// begin uc_side = 5 ;
9269: LD_ADDR_OWVAR 20
9273: PUSH
9274: LD_INT 5
9276: ST_TO_ADDR
// uc_nation = 3 ;
9277: LD_ADDR_OWVAR 21
9281: PUSH
9282: LD_INT 3
9284: ST_TO_ADDR
// hc_gallery =  ;
9285: LD_ADDR_OWVAR 33
9289: PUSH
9290: LD_STRING 
9292: ST_TO_ADDR
// hc_name =  ;
9293: LD_ADDR_OWVAR 26
9297: PUSH
9298: LD_STRING 
9300: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9301: LD_INT 0
9303: PPUSH
9304: LD_INT 3
9306: PPUSH
9307: LD_EXP 41
9311: PPUSH
9312: LD_EXP 42
9316: PPUSH
9317: CALL_OW 12
9321: PPUSH
9322: CALL_OW 380
// un = CreateHuman ;
9326: LD_ADDR_VAR 0 3
9330: PUSH
9331: CALL_OW 44
9335: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 13
9343: PPUSH
9344: LD_INT 0
9346: PPUSH
9347: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9351: LD_ADDR_EXP 28
9355: PUSH
9356: LD_EXP 28
9360: PUSH
9361: LD_VAR 0 3
9365: ADD
9366: ST_TO_ADDR
// RU3_BaterieMechs = RU3_BaterieMechs ^ un ;
9367: LD_ADDR_EXP 30
9371: PUSH
9372: LD_EXP 30
9376: PUSH
9377: LD_VAR 0 3
9381: ADD
9382: ST_TO_ADDR
// end ;
9383: GO 9266
9385: POP
9386: POP
// end ;
9387: LD_VAR 0 1
9391: RET
// export function RU3BaterieMovement ; var Baterie_Enemy , attacker ; begin
9392: LD_INT 0
9394: PPUSH
9395: PPUSH
9396: PPUSH
// ComEnterUnit ( RU3_BaterieMechs [ 1 ] , RU3_BaterieVehs [ 1 ] ) ;
9397: LD_EXP 30
9401: PUSH
9402: LD_INT 1
9404: ARRAY
9405: PPUSH
9406: LD_EXP 29
9410: PUSH
9411: LD_INT 1
9413: ARRAY
9414: PPUSH
9415: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 2 ] , RU3_BaterieVehs [ 2 ] ) ;
9419: LD_EXP 30
9423: PUSH
9424: LD_INT 2
9426: ARRAY
9427: PPUSH
9428: LD_EXP 29
9432: PUSH
9433: LD_INT 2
9435: ARRAY
9436: PPUSH
9437: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 3 ] , RU3_BaterieVehs [ 3 ] ) ;
9441: LD_EXP 30
9445: PUSH
9446: LD_INT 3
9448: ARRAY
9449: PPUSH
9450: LD_EXP 29
9454: PUSH
9455: LD_INT 3
9457: ARRAY
9458: PPUSH
9459: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 4 ] , RU3_BaterieVehs [ 4 ] ) ;
9463: LD_EXP 30
9467: PUSH
9468: LD_INT 4
9470: ARRAY
9471: PPUSH
9472: LD_EXP 29
9476: PUSH
9477: LD_INT 4
9479: ARRAY
9480: PPUSH
9481: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 5 ] , RU3_BaterieVehs [ 5 ] ) ;
9485: LD_EXP 30
9489: PUSH
9490: LD_INT 5
9492: ARRAY
9493: PPUSH
9494: LD_EXP 29
9498: PUSH
9499: LD_INT 5
9501: ARRAY
9502: PPUSH
9503: CALL_OW 120
// wait ( 0 0$15 ) ;
9507: LD_INT 525
9509: PPUSH
9510: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
9514: LD_EXP 30
9518: PUSH
9519: LD_INT 0
9521: GREATER
9522: PUSH
9523: LD_EXP 29
9527: PUSH
9528: LD_INT 0
9530: GREATER
9531: AND
9532: IFFALSE 9626
// begin RU3BaterieTimeOut = true ;
9534: LD_ADDR_EXP 31
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// Attack ( [ 0 , RU3_Baterie , [ [ 204 , 209 ] , [ 162 , 205 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
9542: LD_INT 0
9544: PUSH
9545: LD_EXP 28
9549: PUSH
9550: LD_INT 204
9552: PUSH
9553: LD_INT 209
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 162
9562: PUSH
9563: LD_INT 205
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: LD_INT 0
9582: PUSH
9583: LD_INT 1
9585: PUSH
9586: LD_INT 0
9588: PUSH
9589: LD_INT 0
9591: PUSH
9592: LD_INT 0
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL 72635 0 1
// end ; end ; end_of_file
9626: LD_VAR 0 1
9630: RET
// export SiberiteMineTaken , DvaliContactMade ; export RU2MineBaseBuilt , RU2_SibMine , RU2_Armouries , RU2_Breastworks ; on UnitDestroyed ( un ) do begin if un = Simone then
9631: LD_VAR 0 1
9635: PUSH
9636: LD_EXP 8
9640: EQUAL
9641: IFFALSE 9669
// begin ExclusiveOn ;
9643: CALL_OW 4
// Wait ( 0 0$2 ) ;
9647: LD_INT 70
9649: PPUSH
9650: CALL_OW 67
// YouLost ( Simone ) ;
9654: LD_STRING Simone
9656: PPUSH
9657: CALL_OW 104
// ExclusiveOff ;
9661: CALL_OW 5
// exit ;
9665: GO 9826
// end else
9667: GO 9817
// if un = Kathryn then
9669: LD_VAR 0 1
9673: PUSH
9674: LD_EXP 9
9678: EQUAL
9679: IFFALSE 9707
// begin ExclusiveOn ;
9681: CALL_OW 4
// Wait ( 0 0$2 ) ;
9685: LD_INT 70
9687: PPUSH
9688: CALL_OW 67
// YouLost ( Kathryn ) ;
9692: LD_STRING Kathryn
9694: PPUSH
9695: CALL_OW 104
// ExclusiveOff ;
9699: CALL_OW 5
// exit ;
9703: GO 9826
// end else
9705: GO 9817
// if un = Miller then
9707: LD_VAR 0 1
9711: PUSH
9712: LD_EXP 10
9716: EQUAL
9717: IFFALSE 9745
// begin ExclusiveOn ;
9719: CALL_OW 4
// Wait ( 0 0$2 ) ;
9723: LD_INT 70
9725: PPUSH
9726: CALL_OW 67
// YouLost ( Miller ) ;
9730: LD_STRING Miller
9732: PPUSH
9733: CALL_OW 104
// ExclusiveOff ;
9737: CALL_OW 5
// exit ;
9741: GO 9826
// end else
9743: GO 9817
// if un = Smithy then
9745: LD_VAR 0 1
9749: PUSH
9750: LD_EXP 12
9754: EQUAL
9755: IFFALSE 9783
// begin ExclusiveOn ;
9757: CALL_OW 4
// Wait ( 0 0$2 ) ;
9761: LD_INT 70
9763: PPUSH
9764: CALL_OW 67
// YouLost ( Smithy ) ;
9768: LD_STRING Smithy
9770: PPUSH
9771: CALL_OW 104
// ExclusiveOff ;
9775: CALL_OW 5
// exit ;
9779: GO 9826
// end else
9781: GO 9817
// if un = AM_Depot then
9783: LD_VAR 0 1
9787: PUSH
9788: LD_INT 1
9790: EQUAL
9791: IFFALSE 9817
// begin ExclusiveOn ;
9793: CALL_OW 4
// Wait ( 0 0$2 ) ;
9797: LD_INT 70
9799: PPUSH
9800: CALL_OW 67
// YouLost ( FriendlyBase ) ;
9804: LD_STRING FriendlyBase
9806: PPUSH
9807: CALL_OW 104
// ExclusiveOff ;
9811: CALL_OW 5
// exit ;
9815: GO 9826
// end ; MCE_UnitDestroyed ( un ) ;
9817: LD_VAR 0 1
9821: PPUSH
9822: CALL 35145 0 1
// end ;
9826: PPOPN 1
9828: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9829: LD_VAR 0 1
9833: PPUSH
9834: LD_VAR 0 2
9838: PPUSH
9839: CALL 37012 0 2
// end ;
9843: PPOPN 2
9845: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 7 and not SiberiteMineTaken then
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 266
9855: PUSH
9856: LD_INT 30
9858: EQUAL
9859: PUSH
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 255
9869: PUSH
9870: LD_INT 7
9872: EQUAL
9873: AND
9874: PUSH
9875: LD_EXP 35
9879: NOT
9880: AND
9881: IFFALSE 9957
// begin if not RU2MineBaseBuilt then
9883: LD_EXP 37
9887: NOT
9888: IFFALSE 9904
// Say ( Simone , D2-Simone-1 ) else
9890: LD_EXP 8
9894: PPUSH
9895: LD_STRING D2-Simone-1
9897: PPUSH
9898: CALL_OW 88
9902: GO 9916
// Say ( Simone , D2-Simone-1b ) ;
9904: LD_EXP 8
9908: PPUSH
9909: LD_STRING D2-Simone-1b
9911: PPUSH
9912: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
9916: LD_STRING M2
9918: PPUSH
9919: CALL_OW 337
// SiberiteMineTaken = true ;
9923: LD_ADDR_EXP 35
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// wait ( 0 0$25 ) ;
9931: LD_INT 875
9933: PPUSH
9934: CALL_OW 67
// if not RU2MineBaseBuilt then
9938: LD_EXP 37
9942: NOT
9943: IFFALSE 9957
// Say ( Simone , D2-Simone-2 ) ;
9945: LD_EXP 8
9949: PPUSH
9950: LD_STRING D2-Simone-2
9952: PPUSH
9953: CALL_OW 88
// end ; if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 6 then
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 266
9966: PUSH
9967: LD_INT 30
9969: EQUAL
9970: PUSH
9971: LD_VAR 0 1
9975: PPUSH
9976: CALL_OW 255
9980: PUSH
9981: LD_INT 6
9983: EQUAL
9984: AND
9985: IFFALSE 10005
// begin RU2_SibMine = building ;
9987: LD_ADDR_EXP 38
9991: PUSH
9992: LD_VAR 0 1
9996: ST_TO_ADDR
// RU2MineBaseBuilt = true ;
9997: LD_ADDR_EXP 37
10001: PUSH
10002: LD_INT 1
10004: ST_TO_ADDR
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 6 then
10005: LD_VAR 0 1
10009: PPUSH
10010: CALL_OW 266
10014: PUSH
10015: LD_INT 4
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 255
10028: PUSH
10029: LD_INT 6
10031: EQUAL
10032: AND
10033: IFFALSE 10179
// begin RU2_Armouries = RU2_Armouries + 1 ;
10035: LD_ADDR_EXP 39
10039: PUSH
10040: LD_EXP 39
10044: PUSH
10045: LD_INT 1
10047: PLUS
10048: ST_TO_ADDR
// case RU2_Armouries of 1 :
10049: LD_EXP 39
10053: PUSH
10054: LD_INT 1
10056: DOUBLE
10057: EQUAL
10058: IFTRUE 10062
10060: GO 10116
10062: POP
// ComEnterUnit ( [ RU2_Sols [ 1 ] , RU2_Sols [ 2 ] , RU2_Sols [ 3 ] , RU2_Sols [ 4 ] ] , building ) ; 2 :
10063: LD_EXP 32
10067: PUSH
10068: LD_INT 1
10070: ARRAY
10071: PUSH
10072: LD_EXP 32
10076: PUSH
10077: LD_INT 2
10079: ARRAY
10080: PUSH
10081: LD_EXP 32
10085: PUSH
10086: LD_INT 3
10088: ARRAY
10089: PUSH
10090: LD_EXP 32
10094: PUSH
10095: LD_INT 4
10097: ARRAY
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PPUSH
10105: LD_VAR 0 1
10109: PPUSH
10110: CALL_OW 120
10114: GO 10179
10116: LD_INT 2
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10178
10124: POP
// ComEnterUnit ( [ RU2_Sols [ 7 ] , RU2_Sols [ 8 ] , RU2_Sols [ 9 ] , RU2_Sols [ 10 ] ] , building ) ; end ;
10125: LD_EXP 32
10129: PUSH
10130: LD_INT 7
10132: ARRAY
10133: PUSH
10134: LD_EXP 32
10138: PUSH
10139: LD_INT 8
10141: ARRAY
10142: PUSH
10143: LD_EXP 32
10147: PUSH
10148: LD_INT 9
10150: ARRAY
10151: PUSH
10152: LD_EXP 32
10156: PUSH
10157: LD_INT 10
10159: ARRAY
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: PPUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 120
10176: GO 10179
10178: POP
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
10179: LD_VAR 0 1
10183: PPUSH
10184: CALL_OW 266
10188: PUSH
10189: LD_INT 31
10191: EQUAL
10192: PUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 255
10202: PUSH
10203: LD_INT 6
10205: EQUAL
10206: AND
10207: IFFALSE 10345
// begin RU2_Breastworks = RU2_Breastworks + 1 ;
10209: LD_ADDR_EXP 40
10213: PUSH
10214: LD_EXP 40
10218: PUSH
10219: LD_INT 1
10221: PLUS
10222: ST_TO_ADDR
// case RU2_Breastworks of 1 :
10223: LD_EXP 40
10227: PUSH
10228: LD_INT 1
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10257
10236: POP
// ComEnterUnit ( RU2_Sols [ 5 ] , building ) ; 2 :
10237: LD_EXP 32
10241: PUSH
10242: LD_INT 5
10244: ARRAY
10245: PPUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL_OW 120
10255: GO 10345
10257: LD_INT 2
10259: DOUBLE
10260: EQUAL
10261: IFTRUE 10265
10263: GO 10286
10265: POP
// ComEnterUnit ( RU2_Sols [ 6 ] , building ) ; 3 :
10266: LD_EXP 32
10270: PUSH
10271: LD_INT 6
10273: ARRAY
10274: PPUSH
10275: LD_VAR 0 1
10279: PPUSH
10280: CALL_OW 120
10284: GO 10345
10286: LD_INT 3
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10315
10294: POP
// ComEnterUnit ( RU2_Sols [ 11 ] , building ) ; 4 :
10295: LD_EXP 32
10299: PUSH
10300: LD_INT 11
10302: ARRAY
10303: PPUSH
10304: LD_VAR 0 1
10308: PPUSH
10309: CALL_OW 120
10313: GO 10345
10315: LD_INT 4
10317: DOUBLE
10318: EQUAL
10319: IFTRUE 10323
10321: GO 10344
10323: POP
// ComEnterUnit ( RU2_Sols [ 12 ] , building ) ; end ;
10324: LD_EXP 32
10328: PUSH
10329: LD_INT 12
10331: ARRAY
10332: PPUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 120
10342: GO 10345
10344: POP
// end ; if ( GetSide ( building ) = 6 ) and ( GetBType ( building ) = b_depot ) then
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 255
10354: PUSH
10355: LD_INT 6
10357: EQUAL
10358: PUSH
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 266
10368: PUSH
10369: LD_INT 0
10371: EQUAL
10372: AND
10373: IFFALSE 10395
// begin SetResourceType ( GetBase ( building ) , mat_cans , 250 ) ;
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 274
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: LD_INT 250
10390: PPUSH
10391: CALL_OW 277
// end ; MCE_BuildingComplete ( building ) ;
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL 36328 0 1
// end ;
10404: PPOPN 1
10406: END
// on BuildingCaptured ( building , former_side , capturing_unit ) do begin if GetBType ( building ) = b_siberite_mine and former_side = 6 then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 266
10416: PUSH
10417: LD_INT 30
10419: EQUAL
10420: PUSH
10421: LD_VAR 0 2
10425: PUSH
10426: LD_INT 6
10428: EQUAL
10429: AND
10430: IFFALSE 10459
// begin Say ( Simone , D2-Simone-1b ) ;
10432: LD_EXP 8
10436: PPUSH
10437: LD_STRING D2-Simone-1b
10439: PPUSH
10440: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
10444: LD_STRING M2
10446: PPUSH
10447: CALL_OW 337
// SiberiteMineTaken = true ;
10451: LD_ADDR_EXP 35
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// end ; MCE_BuildingCaptured ( building , former_side , capturing_unit ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: CALL 33799 0 3
// end ;
10478: PPOPN 3
10480: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL 36094 0 1
// end ;
10490: PPOPN 1
10492: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_VAR 0 2
10502: PPUSH
10503: CALL 34857 0 2
// end ;
10507: PPOPN 2
10509: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_VAR 0 2
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_VAR 0 4
10529: PPUSH
10530: LD_VAR 0 5
10534: PPUSH
10535: CALL 34484 0 5
// end ;
10539: PPOPN 5
10541: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_VAR 0 2
10551: PPUSH
10552: CALL 34172 0 2
// end ;
10556: PPOPN 2
10558: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10559: LD_VAR 0 1
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_VAR 0 4
10578: PPUSH
10579: CALL 34017 0 4
// end ;
10583: PPOPN 4
10585: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_VAR 0 2
10595: PPUSH
10596: CALL 33691 0 2
// end ;
10600: PPOPN 2
10602: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_VAR 0 2
10612: PPUSH
10613: CALL 37266 0 2
// end ;
10617: PPOPN 2
10619: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_VAR 0 2
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL 37475 0 4
// end ;
10644: PPOPN 4
10646: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10647: LD_VAR 0 1
10651: PPUSH
10652: LD_VAR 0 2
10656: PPUSH
10657: CALL 33507 0 2
// end ;
10661: PPOPN 2
10663: END
// on Contact ( side1 , side2 ) do begin if side1 = 7 and side2 = 8 and not DvaliContactMade then
10664: LD_VAR 0 1
10668: PUSH
10669: LD_INT 7
10671: EQUAL
10672: PUSH
10673: LD_VAR 0 2
10677: PUSH
10678: LD_INT 8
10680: EQUAL
10681: AND
10682: PUSH
10683: LD_EXP 36
10687: NOT
10688: AND
10689: IFFALSE 10723
// begin Say ( Simone , D5-Simone-1 ) ;
10691: LD_EXP 8
10695: PPUSH
10696: LD_STRING D5-Simone-1
10698: PPUSH
10699: CALL_OW 88
// Say ( Smithy , D5-Smithy-1 ) ;
10703: LD_EXP 12
10707: PPUSH
10708: LD_STRING D5-Smithy-1
10710: PPUSH
10711: CALL_OW 88
// DvaliContactMade = true ;
10715: LD_ADDR_EXP 36
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// end ; end ; end_of_file
10723: PPOPN 2
10725: END
// export function AIEngageEnemy ; var enemy , attacker ; begin
10726: LD_INT 0
10728: PPUSH
10729: PPUSH
10730: PPUSH
// enemy = Filterallunits ( [ f_side , 1 ] ) ^ Filterallunits ( [ f_side , 7 ] ) ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 7
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: ADD
10766: ST_TO_ADDR
// for attacker in attack_group do
10767: LD_ADDR_VAR 0 3
10771: PUSH
10772: LD_EXP 25
10776: PUSH
10777: FOR_IN
10778: IFFALSE 10806
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_VAR 0 2
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: CALL_OW 74
10799: PPUSH
10800: CALL_OW 115
10804: GO 10777
10806: POP
10807: POP
// end ;
10808: LD_VAR 0 1
10812: RET
// every 0 0$1 do
10813: GO 10815
10815: DISABLE
// begin enable ;
10816: ENABLE
// AIEngageEnemy ;
10817: CALL 10726 0 0
// end ;
10821: END
// every 0 0$1 trigger MissionStart do var Side1 ;
10822: LD_EXP 1
10826: IFFALSE 10926
10828: GO 10830
10830: DISABLE
10831: LD_INT 0
10833: PPUSH
// begin Side1 := FilterAllUnits ( [ f_side , 1 ] ) diff Smithy ;
10834: LD_ADDR_VAR 0 1
10838: PUSH
10839: LD_INT 22
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: PUSH
10854: LD_EXP 12
10858: DIFF
10859: ST_TO_ADDR
// ComStop ( Side1 ) ;
10860: LD_VAR 0 1
10864: PPUSH
10865: CALL_OW 141
// mc_bases := Replace ( mc_bases , 1 , Side1 ) ;
10869: LD_ADDR_EXP 57
10873: PUSH
10874: LD_EXP 57
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 1
10891: ST_TO_ADDR
// MC_Start ;
10892: CALL 17219 0 0
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
10896: LD_INT 1
10898: PPUSH
10899: LD_INT 0
10901: PPUSH
10902: CALL 32743 0 2
// MC_SetUpgradeBuilding ( 1 , b_workshop ) ;
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 2
10911: PPUSH
10912: CALL 32743 0 2
// MC_SetUpgradeBuilding ( 1 , b_armoury ) ;
10916: LD_INT 1
10918: PPUSH
10919: LD_INT 4
10921: PPUSH
10922: CALL 32743 0 2
// end ;
10926: PPOPN 1
10928: END
// every 0 0$1 trigger MissionStart do
10929: LD_EXP 1
10933: IFFALSE 11039
10935: GO 10937
10937: DISABLE
// begin wait ( RU2MineSquadArrivalTime ) ;
10938: LD_EXP 46
10942: PPUSH
10943: CALL_OW 67
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) >= 1 or FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) >= 4 then
10947: LD_INT 11
10949: PPUSH
10950: LD_INT 22
10952: PUSH
10953: LD_INT 7
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 21
10962: PUSH
10963: LD_INT 3
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 70
10978: PUSH
10979: LD_INT 1
10981: GREATEREQUAL
10982: PUSH
10983: LD_INT 11
10985: PPUSH
10986: LD_INT 22
10988: PUSH
10989: LD_INT 7
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 21
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PPUSH
11010: CALL_OW 70
11014: PUSH
11015: LD_INT 4
11017: GREATEREQUAL
11018: OR
11019: IFFALSE 11035
// begin RU2_MineBase_FirstAttemptFailed = true ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_INT 1
11028: ST_TO_ADDR
// RU2_Attack_Minebase ;
11029: CALL 8477 0 0
// end else
11033: GO 11039
// RU2_Assemble_MineBase ;
11035: CALL 7884 0 0
// end ;
11039: END
// every 5 5$0 trigger RU2_MineBase_FirstAttemptFailed and not RU2_MineBase_SecondAttempt do
11040: LD_EXP 3
11044: PUSH
11045: LD_EXP 4
11049: NOT
11050: AND
11051: IFFALSE 11144
11053: GO 11055
11055: DISABLE
// begin enable ;
11056: ENABLE
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) = 0 and FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= 5 then
11057: LD_INT 11
11059: PPUSH
11060: LD_INT 22
11062: PUSH
11063: LD_INT 7
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 70
11088: PUSH
11089: LD_INT 0
11091: EQUAL
11092: PUSH
11093: LD_INT 11
11095: PPUSH
11096: LD_INT 22
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PPUSH
11120: CALL_OW 70
11124: PUSH
11125: LD_INT 5
11127: LESSEQUAL
11128: AND
11129: IFFALSE 11144
// begin RU2_Assemble_MineBase ;
11131: CALL 7884 0 0
// RU2_MineBase_SecondAttempt = true ;
11135: LD_ADDR_EXP 4
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// disable ;
11143: DISABLE
// end ; end ;
11144: END
// export function CustomInitMacro ( ) ; begin
11145: LD_INT 0
11147: PPUSH
// MC_SetScanArea ( 1 , AM1_Base_Area ) ;
11148: LD_INT 1
11150: PPUSH
11151: LD_INT 14
11153: PPUSH
11154: CALL 33451 0 2
// MC_SetParkingArea ( 1 , AM1_Base_Parking ) ;
11158: LD_INT 1
11160: PPUSH
11161: LD_INT 15
11163: PPUSH
11164: CALL 33395 0 2
// MC_SetDepositsXY ( 1 , [ [ 120 , 151 , 0 ] , ] ) ;
11168: LD_INT 1
11170: PPUSH
11171: LD_INT 120
11173: PUSH
11174: LD_INT 151
11176: PUSH
11177: LD_INT 0
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: PPUSH
11188: CALL 32515 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_heavy_gun , us_rocket_launcher ] ) ;
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 6
11197: PUSH
11198: LD_INT 7
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL 33283 0 2
// MC_SetCratesArea ( 1 , AM1_Base_Crates ) ;
11209: LD_INT 1
11211: PPUSH
11212: LD_INT 16
11214: PPUSH
11215: CALL 32963 0 2
// MC_SetTame ( 1 , AM1_Base_Crates ) ;
11219: LD_INT 1
11221: PPUSH
11222: LD_INT 16
11224: PPUSH
11225: CALL 32694 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
11229: LD_INT 1
11231: PPUSH
11232: LD_INT 5
11234: PPUSH
11235: CALL 32376 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] ] ) ;
11239: LD_INT 1
11241: PPUSH
11242: LD_INT 3
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: LD_INT 3
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: LD_INT 3
11268: PUSH
11269: LD_INT 5
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 3
11280: PUSH
11281: LD_INT 1
11283: PUSH
11284: LD_INT 3
11286: PUSH
11287: LD_INT 7
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 4
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 6
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: LD_INT 1
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: LD_INT 6
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL 32130 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 118 , 159 , 2 ] , [ b_lab , 136 , 164 , 5 ] , [ b_oil_power , 123 , 172 , 0 ] , [ b_oil_power , 120 , 169 , 0 ] , [ b_oil_power , 122 , 168 , 0 ] , [ b_turret , 141 , 155 , 3 ] , [ b_turret , 144 , 158 , 3 ] , [ b_turret , 148 , 166 , 4 ] , [ b_turret , 131 , 149 , 3 ] , [ b_turret , 127 , 147 , 3 ] , [ b_turret , 122 , 142 , 3 ] , [ b_turret , 150 , 172 , 4 ] , ] ) ;
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 6
11348: PUSH
11349: LD_INT 118
11351: PUSH
11352: LD_INT 159
11354: PUSH
11355: LD_INT 2
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 6
11366: PUSH
11367: LD_INT 136
11369: PUSH
11370: LD_INT 164
11372: PUSH
11373: LD_INT 5
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 26
11384: PUSH
11385: LD_INT 123
11387: PUSH
11388: LD_INT 172
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 26
11402: PUSH
11403: LD_INT 120
11405: PUSH
11406: LD_INT 169
11408: PUSH
11409: LD_INT 0
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 26
11420: PUSH
11421: LD_INT 122
11423: PUSH
11424: LD_INT 168
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 33
11438: PUSH
11439: LD_INT 141
11441: PUSH
11442: LD_INT 155
11444: PUSH
11445: LD_INT 3
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 33
11456: PUSH
11457: LD_INT 144
11459: PUSH
11460: LD_INT 158
11462: PUSH
11463: LD_INT 3
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 33
11474: PUSH
11475: LD_INT 148
11477: PUSH
11478: LD_INT 166
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 33
11492: PUSH
11493: LD_INT 131
11495: PUSH
11496: LD_INT 149
11498: PUSH
11499: LD_INT 3
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 33
11510: PUSH
11511: LD_INT 127
11513: PUSH
11514: LD_INT 147
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 33
11528: PUSH
11529: LD_INT 122
11531: PUSH
11532: LD_INT 142
11534: PUSH
11535: LD_INT 3
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 33
11546: PUSH
11547: LD_INT 150
11549: PUSH
11550: LD_INT 172
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PPUSH
11576: CALL 32003 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_opto , b_lab_siberium ] ) ;
11580: LD_INT 1
11582: PPUSH
11583: LD_INT 10
11585: PUSH
11586: LD_INT 12
11588: PUSH
11589: LD_INT 15
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL 32870 0 2
// MC_SetFactoryExtension ( 1 , 131 , 170 , 5 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat ] ) ;
11605: LD_INT 1
11607: PPUSH
11608: LD_INT 131
11610: PPUSH
11611: LD_INT 170
11613: PPUSH
11614: LD_INT 5
11616: PPUSH
11617: LD_INT 24
11619: PUSH
11620: LD_INT 16
11622: PUSH
11623: LD_INT 17
11625: PUSH
11626: LD_INT 18
11628: PUSH
11629: LD_INT 19
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL 33077 0 5
// end ; end_of_file
11643: LD_VAR 0 1
11647: RET
// every 5 5$0 + 2 2$20 trigger russianAssault = true and RusMainAttacks > 0 do
11648: LD_EXP 2
11652: PUSH
11653: LD_INT 1
11655: EQUAL
11656: PUSH
11657: LD_EXP 45
11661: PUSH
11662: LD_INT 0
11664: GREATER
11665: AND
11666: IFFALSE 13009
11668: GO 11670
11670: DISABLE
// begin enable ;
11671: ENABLE
// if Difficulty <> 1 then
11672: LD_OWVAR 67
11676: PUSH
11677: LD_INT 1
11679: NONEQUAL
11680: IFFALSE 12341
// begin case Rand ( 1 , 3 ) of 1 :
11682: LD_INT 1
11684: PPUSH
11685: LD_INT 3
11687: PPUSH
11688: CALL_OW 12
11692: PUSH
11693: LD_INT 1
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11701
11699: GO 11857
11701: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
11702: LD_INT 6
11704: PPUSH
11705: LD_INT 3
11707: PPUSH
11708: LD_EXP 101
11712: PPUSH
11713: LD_EXP 102
11717: PPUSH
11718: CALL_OW 12
11722: PPUSH
11723: LD_INT 0
11725: PPUSH
11726: LD_EXP 103
11730: PPUSH
11731: LD_EXP 104
11735: PPUSH
11736: CALL_OW 12
11740: PPUSH
11741: LD_INT 0
11743: PPUSH
11744: LD_INT 0
11746: PPUSH
11747: LD_EXP 41
11751: PPUSH
11752: LD_EXP 42
11756: PPUSH
11757: CALL_OW 12
11761: PPUSH
11762: LD_INT 2
11764: PPUSH
11765: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
11769: LD_INT 700
11771: PPUSH
11772: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
11776: LD_INT 2
11778: PPUSH
11779: LD_INT 6
11781: PPUSH
11782: LD_EXP 99
11786: PPUSH
11787: LD_EXP 100
11791: PPUSH
11792: CALL_OW 12
11796: PPUSH
11797: LD_EXP 41
11801: PPUSH
11802: LD_EXP 42
11806: PPUSH
11807: CALL_OW 12
11811: PPUSH
11812: LD_INT 3
11814: PPUSH
11815: LD_INT 3
11817: PPUSH
11818: LD_INT 1
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: LD_EXP 98
11832: PPUSH
11833: EMPTY
11834: PPUSH
11835: EMPTY
11836: PPUSH
11837: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
11841: LD_ADDR_EXP 45
11845: PUSH
11846: LD_EXP 45
11850: PUSH
11851: LD_INT 1
11853: MINUS
11854: ST_TO_ADDR
// end ; 2 :
11855: GO 12186
11857: LD_INT 2
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 12021
11865: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
11866: LD_INT 6
11868: PPUSH
11869: LD_INT 3
11871: PPUSH
11872: LD_EXP 101
11876: PPUSH
11877: LD_EXP 102
11881: PPUSH
11882: CALL_OW 12
11886: PPUSH
11887: LD_INT 0
11889: PPUSH
11890: LD_EXP 103
11894: PPUSH
11895: LD_EXP 104
11899: PPUSH
11900: CALL_OW 12
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 0
11910: PPUSH
11911: LD_EXP 41
11915: PPUSH
11916: LD_EXP 42
11920: PPUSH
11921: CALL_OW 12
11925: PPUSH
11926: LD_INT 3
11928: PPUSH
11929: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
11933: LD_INT 700
11935: PPUSH
11936: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
11940: LD_INT 3
11942: PPUSH
11943: LD_INT 6
11945: PPUSH
11946: LD_EXP 99
11950: PPUSH
11951: LD_EXP 100
11955: PPUSH
11956: CALL_OW 12
11960: PPUSH
11961: LD_EXP 41
11965: PPUSH
11966: LD_EXP 42
11970: PPUSH
11971: CALL_OW 12
11975: PPUSH
11976: LD_INT 3
11978: PPUSH
11979: LD_INT 3
11981: PPUSH
11982: LD_INT 1
11984: PUSH
11985: LD_INT 3
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PPUSH
11992: LD_EXP 98
11996: PPUSH
11997: EMPTY
11998: PPUSH
11999: EMPTY
12000: PPUSH
12001: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12005: LD_ADDR_EXP 45
12009: PUSH
12010: LD_EXP 45
12014: PUSH
12015: LD_INT 1
12017: MINUS
12018: ST_TO_ADDR
// end ; 3 :
12019: GO 12186
12021: LD_INT 3
12023: DOUBLE
12024: EQUAL
12025: IFTRUE 12029
12027: GO 12185
12029: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12030: LD_INT 6
12032: PPUSH
12033: LD_INT 3
12035: PPUSH
12036: LD_EXP 101
12040: PPUSH
12041: LD_EXP 102
12045: PPUSH
12046: CALL_OW 12
12050: PPUSH
12051: LD_INT 0
12053: PPUSH
12054: LD_EXP 103
12058: PPUSH
12059: LD_EXP 104
12063: PPUSH
12064: CALL_OW 12
12068: PPUSH
12069: LD_INT 0
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: LD_EXP 41
12079: PPUSH
12080: LD_EXP 42
12084: PPUSH
12085: CALL_OW 12
12089: PPUSH
12090: LD_INT 4
12092: PPUSH
12093: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12097: LD_INT 700
12099: PPUSH
12100: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12104: LD_INT 4
12106: PPUSH
12107: LD_INT 6
12109: PPUSH
12110: LD_EXP 99
12114: PPUSH
12115: LD_EXP 100
12119: PPUSH
12120: CALL_OW 12
12124: PPUSH
12125: LD_EXP 41
12129: PPUSH
12130: LD_EXP 42
12134: PPUSH
12135: CALL_OW 12
12139: PPUSH
12140: LD_INT 3
12142: PPUSH
12143: LD_INT 3
12145: PPUSH
12146: LD_INT 1
12148: PUSH
12149: LD_INT 3
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PPUSH
12156: LD_EXP 98
12160: PPUSH
12161: EMPTY
12162: PPUSH
12163: EMPTY
12164: PPUSH
12165: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12169: LD_ADDR_EXP 45
12173: PUSH
12174: LD_EXP 45
12178: PUSH
12179: LD_INT 1
12181: MINUS
12182: ST_TO_ADDR
// end ; end ;
12183: GO 12186
12185: POP
// RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
12186: LD_INT 6
12188: PPUSH
12189: LD_INT 3
12191: PPUSH
12192: LD_EXP 101
12196: PPUSH
12197: LD_EXP 102
12201: PPUSH
12202: CALL_OW 12
12206: PPUSH
12207: LD_INT 0
12209: PPUSH
12210: LD_EXP 103
12214: PPUSH
12215: LD_EXP 104
12219: PPUSH
12220: CALL_OW 12
12224: PPUSH
12225: LD_INT 0
12227: PPUSH
12228: LD_INT 0
12230: PPUSH
12231: LD_EXP 41
12235: PPUSH
12236: LD_EXP 42
12240: PPUSH
12241: CALL_OW 12
12245: PPUSH
12246: LD_INT 5
12248: PPUSH
12249: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12253: LD_INT 700
12255: PPUSH
12256: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12260: LD_INT 5
12262: PPUSH
12263: LD_INT 6
12265: PPUSH
12266: LD_EXP 99
12270: PPUSH
12271: LD_EXP 100
12275: PPUSH
12276: CALL_OW 12
12280: PPUSH
12281: LD_EXP 41
12285: PPUSH
12286: LD_EXP 42
12290: PPUSH
12291: CALL_OW 12
12295: PPUSH
12296: LD_INT 3
12298: PPUSH
12299: LD_INT 3
12301: PPUSH
12302: LD_INT 1
12304: PUSH
12305: LD_INT 3
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: LD_EXP 98
12316: PPUSH
12317: EMPTY
12318: PPUSH
12319: EMPTY
12320: PPUSH
12321: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12325: LD_ADDR_EXP 45
12329: PUSH
12330: LD_EXP 45
12334: PUSH
12335: LD_INT 1
12337: MINUS
12338: ST_TO_ADDR
// end else
12339: GO 13009
// begin ; case Rand ( 1 , 4 ) of 1 :
12341: LD_INT 1
12343: PPUSH
12344: LD_INT 4
12346: PPUSH
12347: CALL_OW 12
12351: PUSH
12352: LD_INT 1
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12516
12360: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
12361: LD_INT 6
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: LD_EXP 101
12371: PPUSH
12372: LD_EXP 102
12376: PPUSH
12377: CALL_OW 12
12381: PPUSH
12382: LD_INT 0
12384: PPUSH
12385: LD_EXP 103
12389: PPUSH
12390: LD_EXP 104
12394: PPUSH
12395: CALL_OW 12
12399: PPUSH
12400: LD_INT 0
12402: PPUSH
12403: LD_INT 0
12405: PPUSH
12406: LD_EXP 41
12410: PPUSH
12411: LD_EXP 42
12415: PPUSH
12416: CALL_OW 12
12420: PPUSH
12421: LD_INT 2
12423: PPUSH
12424: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12428: LD_INT 700
12430: PPUSH
12431: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12435: LD_INT 2
12437: PPUSH
12438: LD_INT 6
12440: PPUSH
12441: LD_EXP 99
12445: PPUSH
12446: LD_EXP 100
12450: PPUSH
12451: CALL_OW 12
12455: PPUSH
12456: LD_EXP 41
12460: PPUSH
12461: LD_EXP 42
12465: PPUSH
12466: CALL_OW 12
12470: PPUSH
12471: LD_INT 3
12473: PPUSH
12474: LD_INT 3
12476: PPUSH
12477: LD_INT 1
12479: PUSH
12480: LD_INT 3
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: LD_EXP 98
12491: PPUSH
12492: EMPTY
12493: PPUSH
12494: EMPTY
12495: PPUSH
12496: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12500: LD_ADDR_EXP 45
12504: PUSH
12505: LD_EXP 45
12509: PUSH
12510: LD_INT 1
12512: MINUS
12513: ST_TO_ADDR
// end ; 2 :
12514: GO 13009
12516: LD_INT 2
12518: DOUBLE
12519: EQUAL
12520: IFTRUE 12524
12522: GO 12680
12524: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
12525: LD_INT 6
12527: PPUSH
12528: LD_INT 3
12530: PPUSH
12531: LD_EXP 101
12535: PPUSH
12536: LD_EXP 102
12540: PPUSH
12541: CALL_OW 12
12545: PPUSH
12546: LD_INT 0
12548: PPUSH
12549: LD_EXP 103
12553: PPUSH
12554: LD_EXP 104
12558: PPUSH
12559: CALL_OW 12
12563: PPUSH
12564: LD_INT 0
12566: PPUSH
12567: LD_INT 0
12569: PPUSH
12570: LD_EXP 41
12574: PPUSH
12575: LD_EXP 42
12579: PPUSH
12580: CALL_OW 12
12584: PPUSH
12585: LD_INT 3
12587: PPUSH
12588: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12592: LD_INT 700
12594: PPUSH
12595: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12599: LD_INT 3
12601: PPUSH
12602: LD_INT 6
12604: PPUSH
12605: LD_EXP 99
12609: PPUSH
12610: LD_EXP 100
12614: PPUSH
12615: CALL_OW 12
12619: PPUSH
12620: LD_EXP 41
12624: PPUSH
12625: LD_EXP 42
12629: PPUSH
12630: CALL_OW 12
12634: PPUSH
12635: LD_INT 3
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: LD_INT 1
12643: PUSH
12644: LD_INT 3
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: LD_EXP 98
12655: PPUSH
12656: EMPTY
12657: PPUSH
12658: EMPTY
12659: PPUSH
12660: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12664: LD_ADDR_EXP 45
12668: PUSH
12669: LD_EXP 45
12673: PUSH
12674: LD_INT 1
12676: MINUS
12677: ST_TO_ADDR
// end ; 3 :
12678: GO 13009
12680: LD_INT 3
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12844
12688: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12689: LD_INT 6
12691: PPUSH
12692: LD_INT 3
12694: PPUSH
12695: LD_EXP 101
12699: PPUSH
12700: LD_EXP 102
12704: PPUSH
12705: CALL_OW 12
12709: PPUSH
12710: LD_INT 0
12712: PPUSH
12713: LD_EXP 103
12717: PPUSH
12718: LD_EXP 104
12722: PPUSH
12723: CALL_OW 12
12727: PPUSH
12728: LD_INT 0
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: LD_EXP 41
12738: PPUSH
12739: LD_EXP 42
12743: PPUSH
12744: CALL_OW 12
12748: PPUSH
12749: LD_INT 4
12751: PPUSH
12752: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12756: LD_INT 700
12758: PPUSH
12759: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12763: LD_INT 4
12765: PPUSH
12766: LD_INT 6
12768: PPUSH
12769: LD_EXP 99
12773: PPUSH
12774: LD_EXP 100
12778: PPUSH
12779: CALL_OW 12
12783: PPUSH
12784: LD_EXP 41
12788: PPUSH
12789: LD_EXP 42
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: LD_INT 3
12801: PPUSH
12802: LD_INT 3
12804: PPUSH
12805: LD_INT 1
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: LD_EXP 98
12819: PPUSH
12820: EMPTY
12821: PPUSH
12822: EMPTY
12823: PPUSH
12824: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12828: LD_ADDR_EXP 45
12832: PUSH
12833: LD_EXP 45
12837: PUSH
12838: LD_INT 1
12840: MINUS
12841: ST_TO_ADDR
// end ; 4 :
12842: GO 13009
12844: LD_INT 4
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 13008
12852: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
12853: LD_INT 6
12855: PPUSH
12856: LD_INT 3
12858: PPUSH
12859: LD_EXP 101
12863: PPUSH
12864: LD_EXP 102
12868: PPUSH
12869: CALL_OW 12
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: LD_EXP 103
12881: PPUSH
12882: LD_EXP 104
12886: PPUSH
12887: CALL_OW 12
12891: PPUSH
12892: LD_INT 0
12894: PPUSH
12895: LD_INT 0
12897: PPUSH
12898: LD_EXP 41
12902: PPUSH
12903: LD_EXP 42
12907: PPUSH
12908: CALL_OW 12
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL 5306 0 9
// Wait ( 0 0$20 ) ;
12920: LD_INT 700
12922: PPUSH
12923: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12927: LD_INT 5
12929: PPUSH
12930: LD_INT 6
12932: PPUSH
12933: LD_EXP 99
12937: PPUSH
12938: LD_EXP 100
12942: PPUSH
12943: CALL_OW 12
12947: PPUSH
12948: LD_EXP 41
12952: PPUSH
12953: LD_EXP 42
12957: PPUSH
12958: CALL_OW 12
12962: PPUSH
12963: LD_INT 3
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: LD_INT 1
12971: PUSH
12972: LD_INT 3
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PPUSH
12979: LD_EXP 98
12983: PPUSH
12984: EMPTY
12985: PPUSH
12986: EMPTY
12987: PPUSH
12988: CALL 3822 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12992: LD_ADDR_EXP 45
12996: PUSH
12997: LD_EXP 45
13001: PUSH
13002: LD_INT 1
13004: MINUS
13005: ST_TO_ADDR
// end ; end ;
13006: GO 13009
13008: POP
// end ; end ; end_of_file
13009: END
// export RuSolMinLevel , RuSolMaxLevel ; export RusEngReserve , RusRearAttacks , RusMainAttacks ; export RU2MineSquadArrivalTime , AMOffensiveTime , RU3RocketBatteryActivation ; export function PrepareDifficulty ; begin
13010: LD_INT 0
13012: PPUSH
// if difficulty = 1 then
13013: LD_OWVAR 67
13017: PUSH
13018: LD_INT 1
13020: EQUAL
13021: IFFALSE 13233
// begin RuSolMinLevel = 4 ;
13023: LD_ADDR_EXP 41
13027: PUSH
13028: LD_INT 4
13030: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
13031: LD_ADDR_EXP 42
13035: PUSH
13036: LD_INT 5
13038: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13039: LD_INT 48
13041: PPUSH
13042: LD_INT 3
13044: PPUSH
13045: LD_INT 2
13047: PPUSH
13048: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13052: LD_INT 51
13054: PPUSH
13055: LD_INT 3
13057: PPUSH
13058: LD_INT 2
13060: PPUSH
13061: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13065: LD_INT 57
13067: PPUSH
13068: LD_INT 3
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13078: LD_INT 48
13080: PPUSH
13081: LD_INT 5
13083: PPUSH
13084: LD_INT 2
13086: PPUSH
13087: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13091: LD_INT 51
13093: PPUSH
13094: LD_INT 5
13096: PPUSH
13097: LD_INT 2
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13104: LD_INT 48
13106: PPUSH
13107: LD_INT 6
13109: PPUSH
13110: LD_INT 2
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13117: LD_INT 51
13119: PPUSH
13120: LD_INT 6
13122: PPUSH
13123: LD_INT 2
13125: PPUSH
13126: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13130: LD_INT 57
13132: PPUSH
13133: LD_INT 6
13135: PPUSH
13136: LD_INT 2
13138: PPUSH
13139: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13143: LD_INT 48
13145: PPUSH
13146: LD_INT 8
13148: PPUSH
13149: LD_INT 2
13151: PPUSH
13152: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13156: LD_INT 51
13158: PPUSH
13159: LD_INT 8
13161: PPUSH
13162: LD_INT 2
13164: PPUSH
13165: CALL_OW 322
// RusMainAttacks = 5 ;
13169: LD_ADDR_EXP 45
13173: PUSH
13174: LD_INT 5
13176: ST_TO_ADDR
// ThresholdLvl2 := 4 ;
13177: LD_ADDR_EXP 105
13181: PUSH
13182: LD_INT 4
13184: ST_TO_ADDR
// ThresholdLvl3 := 3 ;
13185: LD_ADDR_EXP 106
13189: PUSH
13190: LD_INT 3
13192: ST_TO_ADDR
// ThresholdLvl4 := 2 ;
13193: LD_ADDR_EXP 107
13197: PUSH
13198: LD_INT 2
13200: ST_TO_ADDR
// ThresholdLvl5 := 1 ;
13201: LD_ADDR_EXP 108
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// RU2MineSquadArrivalTime = 20 20$0 ;
13209: LD_ADDR_EXP 46
13213: PUSH
13214: LD_INT 42000
13216: ST_TO_ADDR
// AMOffensiveTime = 60 60$00 ;
13217: LD_ADDR_EXP 47
13221: PUSH
13222: LD_INT 126000
13224: ST_TO_ADDR
// RU3RocketBatteryActivation = 20 20$00 ;
13225: LD_ADDR_EXP 48
13229: PUSH
13230: LD_INT 42000
13232: ST_TO_ADDR
// end ; if difficulty = 2 then
13233: LD_OWVAR 67
13237: PUSH
13238: LD_INT 2
13240: EQUAL
13241: IFFALSE 13609
// begin RuSolMinLevel = 4 ;
13243: LD_ADDR_EXP 41
13247: PUSH
13248: LD_INT 4
13250: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
13251: LD_ADDR_EXP 42
13255: PUSH
13256: LD_INT 6
13258: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13259: LD_INT 48
13261: PPUSH
13262: LD_INT 3
13264: PPUSH
13265: LD_INT 2
13267: PPUSH
13268: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13272: LD_INT 49
13274: PPUSH
13275: LD_INT 3
13277: PPUSH
13278: LD_INT 2
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13285: LD_INT 51
13287: PPUSH
13288: LD_INT 3
13290: PPUSH
13291: LD_INT 2
13293: PPUSH
13294: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13298: LD_INT 52
13300: PPUSH
13301: LD_INT 3
13303: PPUSH
13304: LD_INT 2
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13311: LD_INT 57
13313: PPUSH
13314: LD_INT 3
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13324: LD_INT 58
13326: PPUSH
13327: LD_INT 3
13329: PPUSH
13330: LD_INT 2
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
13337: LD_INT 63
13339: PPUSH
13340: LD_INT 3
13342: PPUSH
13343: LD_INT 2
13345: PPUSH
13346: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13350: LD_INT 48
13352: PPUSH
13353: LD_INT 5
13355: PPUSH
13356: LD_INT 2
13358: PPUSH
13359: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
13363: LD_INT 49
13365: PPUSH
13366: LD_INT 5
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13376: LD_INT 51
13378: PPUSH
13379: LD_INT 5
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
13389: LD_INT 52
13391: PPUSH
13392: LD_INT 5
13394: PPUSH
13395: LD_INT 2
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13402: LD_INT 48
13404: PPUSH
13405: LD_INT 6
13407: PPUSH
13408: LD_INT 2
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
13415: LD_INT 49
13417: PPUSH
13418: LD_INT 6
13420: PPUSH
13421: LD_INT 2
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13428: LD_INT 51
13430: PPUSH
13431: LD_INT 6
13433: PPUSH
13434: LD_INT 2
13436: PPUSH
13437: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
13441: LD_INT 52
13443: PPUSH
13444: LD_INT 6
13446: PPUSH
13447: LD_INT 2
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13454: LD_INT 57
13456: PPUSH
13457: LD_INT 6
13459: PPUSH
13460: LD_INT 2
13462: PPUSH
13463: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
13467: LD_INT 58
13469: PPUSH
13470: LD_INT 6
13472: PPUSH
13473: LD_INT 2
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
13480: LD_INT 63
13482: PPUSH
13483: LD_INT 6
13485: PPUSH
13486: LD_INT 2
13488: PPUSH
13489: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13493: LD_INT 48
13495: PPUSH
13496: LD_INT 8
13498: PPUSH
13499: LD_INT 2
13501: PPUSH
13502: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
13506: LD_INT 49
13508: PPUSH
13509: LD_INT 8
13511: PPUSH
13512: LD_INT 2
13514: PPUSH
13515: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13519: LD_INT 51
13521: PPUSH
13522: LD_INT 8
13524: PPUSH
13525: LD_INT 2
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
13532: LD_INT 52
13534: PPUSH
13535: LD_INT 8
13537: PPUSH
13538: LD_INT 2
13540: PPUSH
13541: CALL_OW 322
// RusMainAttacks = 10 ;
13545: LD_ADDR_EXP 45
13549: PUSH
13550: LD_INT 10
13552: ST_TO_ADDR
// ThresholdLvl2 := 8 ;
13553: LD_ADDR_EXP 105
13557: PUSH
13558: LD_INT 8
13560: ST_TO_ADDR
// ThresholdLvl3 := 6 ;
13561: LD_ADDR_EXP 106
13565: PUSH
13566: LD_INT 6
13568: ST_TO_ADDR
// ThresholdLvl4 := 4 ;
13569: LD_ADDR_EXP 107
13573: PUSH
13574: LD_INT 4
13576: ST_TO_ADDR
// ThresholdLvl5 := 2 ;
13577: LD_ADDR_EXP 108
13581: PUSH
13582: LD_INT 2
13584: ST_TO_ADDR
// RU2MineSquadArrivalTime = 15 15$0 ;
13585: LD_ADDR_EXP 46
13589: PUSH
13590: LD_INT 31500
13592: ST_TO_ADDR
// AMOffensiveTime = 50 50$00 ;
13593: LD_ADDR_EXP 47
13597: PUSH
13598: LD_INT 105000
13600: ST_TO_ADDR
// RU3RocketBatteryActivation = 15 15$00 ;
13601: LD_ADDR_EXP 48
13605: PUSH
13606: LD_INT 31500
13608: ST_TO_ADDR
// end ; if difficulty = 3 then
13609: LD_OWVAR 67
13613: PUSH
13614: LD_INT 3
13616: EQUAL
13617: IFFALSE 14115
// begin RuSolMinLevel = 5 ;
13619: LD_ADDR_EXP 41
13623: PUSH
13624: LD_INT 5
13626: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
13627: LD_ADDR_EXP 42
13631: PUSH
13632: LD_INT 7
13634: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13635: LD_INT 48
13637: PPUSH
13638: LD_INT 3
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13648: LD_INT 51
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: LD_INT 2
13656: PPUSH
13657: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13661: LD_INT 57
13663: PPUSH
13664: LD_INT 3
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13674: LD_INT 49
13676: PPUSH
13677: LD_INT 3
13679: PPUSH
13680: LD_INT 2
13682: PPUSH
13683: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13687: LD_INT 52
13689: PPUSH
13690: LD_INT 3
13692: PPUSH
13693: LD_INT 2
13695: PPUSH
13696: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13700: LD_INT 58
13702: PPUSH
13703: LD_INT 3
13705: PPUSH
13706: LD_INT 2
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
13713: LD_INT 50
13715: PPUSH
13716: LD_INT 3
13718: PPUSH
13719: LD_INT 2
13721: PPUSH
13722: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
13726: LD_INT 59
13728: PPUSH
13729: LD_INT 3
13731: PPUSH
13732: LD_INT 2
13734: PPUSH
13735: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
13739: LD_INT 53
13741: PPUSH
13742: LD_INT 3
13744: PPUSH
13745: LD_INT 2
13747: PPUSH
13748: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
13752: LD_INT 63
13754: PPUSH
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 2
13760: PPUSH
13761: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
13765: LD_INT 64
13767: PPUSH
13768: LD_INT 3
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13778: LD_INT 48
13780: PPUSH
13781: LD_INT 5
13783: PPUSH
13784: LD_INT 2
13786: PPUSH
13787: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13791: LD_INT 51
13793: PPUSH
13794: LD_INT 5
13796: PPUSH
13797: LD_INT 2
13799: PPUSH
13800: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
13804: LD_INT 49
13806: PPUSH
13807: LD_INT 5
13809: PPUSH
13810: LD_INT 2
13812: PPUSH
13813: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
13817: LD_INT 52
13819: PPUSH
13820: LD_INT 5
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 322
// SetTech ( tech_Tech3 , 5 , state_researched ) ;
13830: LD_INT 50
13832: PPUSH
13833: LD_INT 5
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 322
// SetTech ( tech_Weap3 , 5 , state_researched ) ;
13843: LD_INT 53
13845: PPUSH
13846: LD_INT 5
13848: PPUSH
13849: LD_INT 2
13851: PPUSH
13852: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13856: LD_INT 48
13858: PPUSH
13859: LD_INT 6
13861: PPUSH
13862: LD_INT 2
13864: PPUSH
13865: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13869: LD_INT 51
13871: PPUSH
13872: LD_INT 6
13874: PPUSH
13875: LD_INT 2
13877: PPUSH
13878: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13882: LD_INT 57
13884: PPUSH
13885: LD_INT 6
13887: PPUSH
13888: LD_INT 2
13890: PPUSH
13891: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
13895: LD_INT 49
13897: PPUSH
13898: LD_INT 6
13900: PPUSH
13901: LD_INT 2
13903: PPUSH
13904: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
13908: LD_INT 52
13910: PPUSH
13911: LD_INT 6
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
13921: LD_INT 58
13923: PPUSH
13924: LD_INT 6
13926: PPUSH
13927: LD_INT 2
13929: PPUSH
13930: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
13934: LD_INT 63
13936: PPUSH
13937: LD_INT 6
13939: PPUSH
13940: LD_INT 2
13942: PPUSH
13943: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
13947: LD_INT 64
13949: PPUSH
13950: LD_INT 6
13952: PPUSH
13953: LD_INT 2
13955: PPUSH
13956: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13960: LD_INT 48
13962: PPUSH
13963: LD_INT 8
13965: PPUSH
13966: LD_INT 2
13968: PPUSH
13969: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
13973: LD_INT 49
13975: PPUSH
13976: LD_INT 8
13978: PPUSH
13979: LD_INT 2
13981: PPUSH
13982: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
13986: LD_INT 50
13988: PPUSH
13989: LD_INT 8
13991: PPUSH
13992: LD_INT 2
13994: PPUSH
13995: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13999: LD_INT 51
14001: PPUSH
14002: LD_INT 8
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14012: LD_INT 52
14014: PPUSH
14015: LD_INT 8
14017: PPUSH
14018: LD_INT 2
14020: PPUSH
14021: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
14025: LD_INT 53
14027: PPUSH
14028: LD_INT 8
14030: PPUSH
14031: LD_INT 2
14033: PPUSH
14034: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
14038: LD_INT 5
14040: PPUSH
14041: LD_INT 8
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 322
// RusMainAttacks = 14 ;
14051: LD_ADDR_EXP 45
14055: PUSH
14056: LD_INT 14
14058: ST_TO_ADDR
// ThresholdLvl2 := 12 ;
14059: LD_ADDR_EXP 105
14063: PUSH
14064: LD_INT 12
14066: ST_TO_ADDR
// ThresholdLvl3 := 10 ;
14067: LD_ADDR_EXP 106
14071: PUSH
14072: LD_INT 10
14074: ST_TO_ADDR
// ThresholdLvl4 := 8 ;
14075: LD_ADDR_EXP 107
14079: PUSH
14080: LD_INT 8
14082: ST_TO_ADDR
// ThresholdLvl5 := 6 ;
14083: LD_ADDR_EXP 108
14087: PUSH
14088: LD_INT 6
14090: ST_TO_ADDR
// RU2MineSquadArrivalTime = 10 10$0 ;
14091: LD_ADDR_EXP 46
14095: PUSH
14096: LD_INT 21000
14098: ST_TO_ADDR
// AMOffensiveTime = 40 40$00 ;
14099: LD_ADDR_EXP 47
14103: PUSH
14104: LD_INT 84000
14106: ST_TO_ADDR
// RU3RocketBatteryActivation = 12 12$30 ;
14107: LD_ADDR_EXP 48
14111: PUSH
14112: LD_INT 26250
14114: ST_TO_ADDR
// end ; end ; end_of_file
14115: LD_VAR 0 1
14119: RET
// export personnel ; export RU_OfficersAlive ; export OffensiveTimeOut , OffensiveSuccessful ; export AfterOffensive ; export PrepareToEnd ; export TanksBuilt ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_double_laser ] ] ) >= 10 do
14120: LD_INT 22
14122: PUSH
14123: LD_INT 7
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 34
14142: PUSH
14143: LD_INT 10
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PUSH
14160: LD_INT 10
14162: GREATEREQUAL
14163: IFFALSE 14176
14165: GO 14167
14167: DISABLE
// begin TanksBuilt = true ;
14168: LD_ADDR_EXP 55
14172: PUSH
14173: LD_INT 1
14175: ST_TO_ADDR
// end ;
14176: END
// every 0 0$1 trigger AfterOffensive do
14177: LD_EXP 53
14181: IFFALSE 14210
14183: GO 14185
14185: DISABLE
// begin Wait ( AMOffensiveTime ) ;
14186: LD_EXP 47
14190: PPUSH
14191: CALL_OW 67
// if not OffensiveSuccessful then
14195: LD_EXP 52
14199: NOT
14200: IFFALSE 14210
// OffensiveTimeOut = true ;
14202: LD_ADDR_EXP 51
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// end ;
14210: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) <= 1 and RU_OfficersAlive <= 1 ) and not PrepareToEnd and not OffensiveTimeOut do
14211: LD_INT 22
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 69
14239: PUSH
14240: LD_INT 1
14242: LESSEQUAL
14243: PUSH
14244: LD_EXP 50
14248: PUSH
14249: LD_INT 1
14251: LESSEQUAL
14252: AND
14253: PUSH
14254: LD_EXP 54
14258: NOT
14259: AND
14260: PUSH
14261: LD_EXP 51
14265: NOT
14266: AND
14267: IFFALSE 14280
14269: GO 14271
14271: DISABLE
// begin OffensiveSuccessful = true ;
14272: LD_ADDR_EXP 52
14276: PUSH
14277: LD_INT 1
14279: ST_TO_ADDR
// end ;
14280: END
// every 0 0$1 trigger OffensiveTimeOut or OffensiveSuccessful do
14281: LD_EXP 51
14285: PUSH
14286: LD_EXP 52
14290: OR
14291: IFFALSE 14524
14293: GO 14295
14295: DISABLE
// begin SayRadio ( Barnes , D7-Barnes-1 ) ;
14296: LD_EXP 15
14300: PPUSH
14301: LD_STRING D7-Barnes-1
14303: PPUSH
14304: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
14308: LD_EXP 8
14312: PPUSH
14313: LD_STRING D7-Simone-1
14315: PPUSH
14316: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2 ) ;
14320: LD_EXP 15
14324: PPUSH
14325: LD_STRING D7-Barnes-2
14327: PPUSH
14328: CALL_OW 94
// if OffensiveTimeOut then
14332: LD_EXP 51
14336: IFFALSE 14364
// begin Say ( Simone , D7-Simone-2a ) ;
14338: LD_EXP 8
14342: PPUSH
14343: LD_STRING D7-Simone-2a
14345: PPUSH
14346: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2a ) ;
14350: LD_EXP 15
14354: PPUSH
14355: LD_STRING D7-Barnes-2a
14357: PPUSH
14358: CALL_OW 94
// end else
14362: GO 14376
// Say ( Simone , D7-Simone-2 ) ;
14364: LD_EXP 8
14368: PPUSH
14369: LD_STRING D7-Simone-2
14371: PPUSH
14372: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-3 ) ;
14376: LD_EXP 15
14380: PPUSH
14381: LD_STRING D7-Barnes-3
14383: PPUSH
14384: CALL_OW 94
// Say ( Simone , D7-Simone-3 ) ;
14388: LD_EXP 8
14392: PPUSH
14393: LD_STRING D7-Simone-3
14395: PPUSH
14396: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-4 ) ;
14400: LD_EXP 15
14404: PPUSH
14405: LD_STRING D7-Barnes-4
14407: PPUSH
14408: CALL_OW 94
// Say ( Simone , D7-Simone-4 ) ;
14412: LD_EXP 8
14416: PPUSH
14417: LD_STRING D7-Simone-4
14419: PPUSH
14420: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-5 ) ;
14424: LD_EXP 15
14428: PPUSH
14429: LD_STRING D7-Barnes-5
14431: PPUSH
14432: CALL_OW 94
// SayRadio ( Barnes , D7-Barnes-6 ) ;
14436: LD_EXP 15
14440: PPUSH
14441: LD_STRING D7-Barnes-6
14443: PPUSH
14444: CALL_OW 94
// if OffensiveTimeOut then
14448: LD_EXP 51
14452: IFFALSE 14466
// SayRadio ( Barnes , D7-Barnes-6a ) ;
14454: LD_EXP 15
14458: PPUSH
14459: LD_STRING D7-Barnes-6a
14461: PPUSH
14462: CALL_OW 94
// Say ( Simone , D7-Simone-5 ) ;
14466: LD_EXP 8
14470: PPUSH
14471: LD_STRING D7-Simone-5
14473: PPUSH
14474: CALL_OW 88
// if not IsDead ( Edmonds ) then
14478: LD_EXP 14
14482: PPUSH
14483: CALL_OW 301
14487: NOT
14488: IFFALSE 14499
// ChangeMissionObjectives ( M4 ) else
14490: LD_STRING M4
14492: PPUSH
14493: CALL_OW 337
14497: GO 14506
// ChangeMissionObjectives ( M4a ) ;
14499: LD_STRING M4a
14501: PPUSH
14502: CALL_OW 337
// SetAreaMapShow ( End_Area , 1 ) ;
14506: LD_INT 12
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: CALL_OW 424
// PrepareToEnd = true ;
14516: LD_ADDR_EXP 54
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// end ;
14524: END
// every 0 0$01 trigger PrepareToEnd and IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
14525: LD_EXP 54
14529: PUSH
14530: LD_EXP 14
14534: PPUSH
14535: CALL_OW 301
14539: AND
14540: IFFALSE 15123
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
// begin enable ;
14551: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) = 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) then
14552: LD_INT 12
14554: PPUSH
14555: LD_INT 22
14557: PUSH
14558: LD_INT 7
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 33
14577: PUSH
14578: LD_INT 1
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 58
14590: PUSH
14591: EMPTY
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 70
14608: PUSH
14609: LD_INT 8
14611: EQUAL
14612: PUSH
14613: LD_EXP 8
14617: PPUSH
14618: LD_INT 12
14620: PPUSH
14621: CALL_OW 308
14625: AND
14626: PUSH
14627: LD_EXP 9
14631: PPUSH
14632: LD_INT 12
14634: PPUSH
14635: CALL_OW 308
14639: AND
14640: PUSH
14641: LD_EXP 10
14645: PPUSH
14646: LD_INT 12
14648: PPUSH
14649: CALL_OW 308
14653: AND
14654: IFFALSE 15123
// begin wait ( 0 0$1 ) ;
14656: LD_INT 35
14658: PPUSH
14659: CALL_OW 67
// Units = [ ] ;
14663: LD_ADDR_VAR 0 4
14667: PUSH
14668: EMPTY
14669: ST_TO_ADDR
// Vehicles := [ ] ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: EMPTY
14676: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14677: LD_ADDR_EXP 49
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_INT 7
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 21
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 50
14704: PUSH
14705: EMPTY
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_INT 12
14725: PPUSH
14726: LD_INT 22
14728: PUSH
14729: LD_INT 7
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 70
14754: ST_TO_ADDR
// for i = 1 to 8 do
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: DOUBLE
14761: LD_INT 1
14763: DEC
14764: ST_TO_ADDR
14765: LD_INT 8
14767: PUSH
14768: FOR_TO
14769: IFFALSE 14881
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_VAR 0 3
14780: PUSH
14781: LD_VAR 0 1
14785: PUSH
14786: LD_VAR 0 2
14790: ARRAY
14791: PPUSH
14792: CALL_OW 265
14796: PUSH
14797: LD_VAR 0 1
14801: PUSH
14802: LD_VAR 0 2
14806: ARRAY
14807: PPUSH
14808: CALL_OW 262
14812: PUSH
14813: LD_VAR 0 1
14817: PUSH
14818: LD_VAR 0 2
14822: ARRAY
14823: PPUSH
14824: CALL_OW 263
14828: PUSH
14829: LD_VAR 0 1
14833: PUSH
14834: LD_VAR 0 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 264
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: ADD
14851: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
14852: LD_ADDR_VAR 0 4
14856: PUSH
14857: LD_VAR 0 4
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: LD_VAR 0 2
14871: ARRAY
14872: PPUSH
14873: CALL_OW 311
14877: ADD
14878: ST_TO_ADDR
// end ;
14879: GO 14768
14881: POP
14882: POP
// Units = Units diff [ Simone , Kathryn , Miller ] ;
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: LD_VAR 0 4
14892: PUSH
14893: LD_EXP 8
14897: PUSH
14898: LD_EXP 9
14902: PUSH
14903: LD_EXP 10
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: DIFF
14913: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
14914: LD_VAR 0 4
14918: PPUSH
14919: LD_STRING AM02_Survivors
14921: PPUSH
14922: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
14926: LD_EXP 8
14930: PPUSH
14931: LD_STRING Simone
14933: PPUSH
14934: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
14938: LD_EXP 9
14942: PPUSH
14943: LD_STRING Kathryn
14945: PPUSH
14946: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
14950: LD_EXP 10
14954: PPUSH
14955: LD_STRING Miller
14957: PPUSH
14958: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_STRING AM02_Vehicles
14969: PPUSH
14970: CALL_OW 39
// if OffensiveSuccessful then
14974: LD_EXP 52
14978: IFFALSE 14992
// AddMedal ( Bases , 1 ) else
14980: LD_STRING Bases
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 101
14990: GO 15003
// AddMedal ( Bases , - 1 ) ;
14992: LD_STRING Bases
14994: PPUSH
14995: LD_INT 1
14997: NEG
14998: PPUSH
14999: CALL_OW 101
// if TanksBuilt then
15003: LD_EXP 55
15007: IFFALSE 15021
// AddMedal ( Tanks , 1 ) else
15009: LD_STRING Tanks
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 101
15019: GO 15032
// AddMedal ( Tanks , - 1 ) ;
15021: LD_STRING Tanks
15023: PPUSH
15024: LD_INT 1
15026: NEG
15027: PPUSH
15028: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15032: LD_EXP 30
15036: PUSH
15037: LD_INT 0
15039: EQUAL
15040: PUSH
15041: LD_EXP 29
15045: PUSH
15046: LD_INT 0
15048: EQUAL
15049: OR
15050: PUSH
15051: LD_EXP 31
15055: NOT
15056: AND
15057: IFFALSE 15071
// AddMedal ( Rockets , 1 ) else
15059: LD_STRING Rockets
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 101
15069: GO 15082
// AddMedal ( Rockets , - 1 ) ;
15071: LD_STRING Rockets
15073: PPUSH
15074: LD_INT 1
15076: NEG
15077: PPUSH
15078: CALL_OW 101
// GiveMedals ( Main ) ;
15082: LD_STRING Main
15084: PPUSH
15085: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Units ] ) ;
15089: LD_EXP 8
15093: PUSH
15094: LD_EXP 9
15098: PUSH
15099: LD_EXP 10
15103: PUSH
15104: LD_VAR 0 4
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 43
// YouWin ;
15119: CALL_OW 103
// end ; end ;
15123: PPOPN 4
15125: END
// every 0 0$01 trigger PrepareToEnd and not IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
15126: LD_EXP 54
15130: PUSH
15131: LD_EXP 14
15135: PPUSH
15136: CALL_OW 301
15140: NOT
15141: AND
15142: IFFALSE 15763
15144: GO 15146
15146: DISABLE
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
// begin enable ;
15153: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) = 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) and IsInArea ( Edmonds , End_Area ) then
15154: LD_INT 12
15156: PPUSH
15157: LD_INT 22
15159: PUSH
15160: LD_INT 7
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 21
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 33
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: LD_INT 58
15192: PUSH
15193: EMPTY
15194: LIST
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 70
15210: PUSH
15211: LD_INT 8
15213: EQUAL
15214: PUSH
15215: LD_EXP 8
15219: PPUSH
15220: LD_INT 12
15222: PPUSH
15223: CALL_OW 308
15227: AND
15228: PUSH
15229: LD_EXP 9
15233: PPUSH
15234: LD_INT 12
15236: PPUSH
15237: CALL_OW 308
15241: AND
15242: PUSH
15243: LD_EXP 10
15247: PPUSH
15248: LD_INT 12
15250: PPUSH
15251: CALL_OW 308
15255: AND
15256: PUSH
15257: LD_EXP 14
15261: PPUSH
15262: LD_INT 12
15264: PPUSH
15265: CALL_OW 308
15269: AND
15270: IFFALSE 15763
// begin wait ( 0 0$1 ) ;
15272: LD_INT 35
15274: PPUSH
15275: CALL_OW 67
// Units = [ ] ;
15279: LD_ADDR_VAR 0 4
15283: PUSH
15284: EMPTY
15285: ST_TO_ADDR
// Vehicles := [ ] ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: EMPTY
15292: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15293: LD_ADDR_EXP 49
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 7
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 21
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 50
15320: PUSH
15321: EMPTY
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
15334: LD_ADDR_VAR 0 1
15338: PUSH
15339: LD_INT 12
15341: PPUSH
15342: LD_INT 22
15344: PUSH
15345: LD_INT 7
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 21
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 70
15370: ST_TO_ADDR
// for i = 1 to 8 do
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: DOUBLE
15377: LD_INT 1
15379: DEC
15380: ST_TO_ADDR
15381: LD_INT 8
15383: PUSH
15384: FOR_TO
15385: IFFALSE 15497
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_VAR 0 1
15401: PUSH
15402: LD_VAR 0 2
15406: ARRAY
15407: PPUSH
15408: CALL_OW 265
15412: PUSH
15413: LD_VAR 0 1
15417: PUSH
15418: LD_VAR 0 2
15422: ARRAY
15423: PPUSH
15424: CALL_OW 262
15428: PUSH
15429: LD_VAR 0 1
15433: PUSH
15434: LD_VAR 0 2
15438: ARRAY
15439: PPUSH
15440: CALL_OW 263
15444: PUSH
15445: LD_VAR 0 1
15449: PUSH
15450: LD_VAR 0 2
15454: ARRAY
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: ADD
15467: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
15468: LD_ADDR_VAR 0 4
15472: PUSH
15473: LD_VAR 0 4
15477: PUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_VAR 0 2
15487: ARRAY
15488: PPUSH
15489: CALL_OW 311
15493: ADD
15494: ST_TO_ADDR
// end ;
15495: GO 15384
15497: POP
15498: POP
// Units = Units diff [ Simone , Kathryn , Miller , Edmonds ] ;
15499: LD_ADDR_VAR 0 4
15503: PUSH
15504: LD_VAR 0 4
15508: PUSH
15509: LD_EXP 8
15513: PUSH
15514: LD_EXP 9
15518: PUSH
15519: LD_EXP 10
15523: PUSH
15524: LD_EXP 14
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: DIFF
15535: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
15536: LD_VAR 0 4
15540: PPUSH
15541: LD_STRING AM02_Survivors
15543: PPUSH
15544: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
15548: LD_EXP 8
15552: PPUSH
15553: LD_STRING Simone
15555: PPUSH
15556: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
15560: LD_EXP 9
15564: PPUSH
15565: LD_STRING Kathryn
15567: PPUSH
15568: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
15572: LD_EXP 10
15576: PPUSH
15577: LD_STRING Miller
15579: PPUSH
15580: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
15584: LD_EXP 14
15588: PPUSH
15589: LD_STRING Edmonds
15591: PPUSH
15592: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
15596: LD_VAR 0 3
15600: PPUSH
15601: LD_STRING AM02_Vehicles
15603: PPUSH
15604: CALL_OW 39
// if OffensiveSuccessful then
15608: LD_EXP 52
15612: IFFALSE 15626
// AddMedal ( Bases , 1 ) else
15614: LD_STRING Bases
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 101
15624: GO 15637
// AddMedal ( Bases , - 1 ) ;
15626: LD_STRING Bases
15628: PPUSH
15629: LD_INT 1
15631: NEG
15632: PPUSH
15633: CALL_OW 101
// if TanksBuilt then
15637: LD_EXP 55
15641: IFFALSE 15655
// AddMedal ( Tanks , 1 ) else
15643: LD_STRING Tanks
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 101
15653: GO 15666
// AddMedal ( Tanks , - 1 ) ;
15655: LD_STRING Tanks
15657: PPUSH
15658: LD_INT 1
15660: NEG
15661: PPUSH
15662: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15666: LD_EXP 30
15670: PUSH
15671: LD_INT 0
15673: EQUAL
15674: PUSH
15675: LD_EXP 29
15679: PUSH
15680: LD_INT 0
15682: EQUAL
15683: OR
15684: PUSH
15685: LD_EXP 31
15689: NOT
15690: AND
15691: IFFALSE 15705
// AddMedal ( Rockets , 1 ) else
15693: LD_STRING Rockets
15695: PPUSH
15696: LD_INT 1
15698: PPUSH
15699: CALL_OW 101
15703: GO 15716
// AddMedal ( Rockets , - 1 ) ;
15705: LD_STRING Rockets
15707: PPUSH
15708: LD_INT 1
15710: NEG
15711: PPUSH
15712: CALL_OW 101
// GiveMedals ( Main ) ;
15716: LD_STRING Main
15718: PPUSH
15719: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Edmonds , Units ] ) ;
15723: LD_EXP 8
15727: PUSH
15728: LD_EXP 9
15732: PUSH
15733: LD_EXP 10
15737: PUSH
15738: LD_EXP 14
15742: PUSH
15743: LD_VAR 0 4
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PPUSH
15755: CALL_OW 43
// YouWin ;
15759: CALL_OW 103
// end ; end ;
15763: PPOPN 4
15765: END
// every 0 0$1 trigger EndTime = 0 do
15766: LD_EXP 5
15770: PUSH
15771: LD_INT 0
15773: EQUAL
15774: IFFALSE 15815
15776: GO 15778
15778: DISABLE
// begin InGameOn ;
15779: CALL_OW 8
// DialogueOn ;
15783: CALL_OW 6
// SayRadio ( Barnes , D7a-Barnes-1 ) ;
15787: LD_EXP 15
15791: PPUSH
15792: LD_STRING D7a-Barnes-1
15794: PPUSH
15795: CALL_OW 94
// TimeOutFirstWarning := true ;
15799: LD_ADDR_EXP 7
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// InGameOff ;
15807: CALL_OW 9
// DialogueOff ;
15811: CALL_OW 7
// end ;
15815: END
// every 0 0$1 trigger EndTime2 = 0 do
15816: LD_EXP 6
15820: PUSH
15821: LD_INT 0
15823: EQUAL
15824: IFFALSE 15864
15826: GO 15828
15828: DISABLE
// begin InGameOn ;
15829: CALL_OW 8
// DialogueOn ;
15833: CALL_OW 6
// SayRadio ( Barnes , D7b-Barnes-1 ) ;
15837: LD_EXP 15
15841: PPUSH
15842: LD_STRING D7b-Barnes-1
15844: PPUSH
15845: CALL_OW 94
// InGameOff ;
15849: CALL_OW 9
// DialogueOff ;
15853: CALL_OW 7
// YouLost ( TimeOut ) ;
15857: LD_STRING TimeOut
15859: PPUSH
15860: CALL_OW 104
// end ;
15864: END
// every 0 0$1 do
15865: GO 15867
15867: DISABLE
// begin enable ;
15868: ENABLE
// if not PrepareToEnd then
15869: LD_EXP 54
15873: NOT
15874: IFFALSE 15884
// begin Display_Strings :=  ;
15876: LD_ADDR_OWVAR 47
15880: PUSH
15881: LD_STRING 
15883: ST_TO_ADDR
// end ; if PrepareToEnd and not TimeOutFirstWarning then
15884: LD_EXP 54
15888: PUSH
15889: LD_EXP 7
15893: NOT
15894: AND
15895: IFFALSE 15928
// begin EndTime := EndTime - 0 0$01 ;
15897: LD_ADDR_EXP 5
15901: PUSH
15902: LD_EXP 5
15906: PUSH
15907: LD_INT 35
15909: MINUS
15910: ST_TO_ADDR
// Display_Strings := [ #Am02-Timeout , EndTime ] ;
15911: LD_ADDR_OWVAR 47
15915: PUSH
15916: LD_STRING #Am02-Timeout
15918: PUSH
15919: LD_EXP 5
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: ST_TO_ADDR
// end ; if PrepareToEnd and TimeOutFirstWarning then
15928: LD_EXP 54
15932: PUSH
15933: LD_EXP 7
15937: AND
15938: IFFALSE 15971
// begin EndTime2 := EndTime2 - 0 0$01 ;
15940: LD_ADDR_EXP 6
15944: PUSH
15945: LD_EXP 6
15949: PUSH
15950: LD_INT 35
15952: MINUS
15953: ST_TO_ADDR
// Display_Strings := [ #Am02-TimeoutAdd , EndTime2 ] ;
15954: LD_ADDR_OWVAR 47
15958: PUSH
15959: LD_STRING #Am02-TimeoutAdd
15961: PUSH
15962: LD_EXP 6
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: ST_TO_ADDR
// end ; end ; end_of_file
15971: END
// every 0 0$1 trigger MissionStart do
15972: LD_EXP 1
15976: IFFALSE 16160
15978: GO 15980
15980: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
15981: LD_INT 2100
15983: PPUSH
15984: LD_INT 3150
15986: PPUSH
15987: CALL_OW 12
15991: PPUSH
15992: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
15996: LD_INT 2
15998: PPUSH
15999: LD_INT 5
16001: PPUSH
16002: CALL_OW 12
16006: PPUSH
16007: LD_INT 9
16009: PPUSH
16010: LD_INT 1
16012: PPUSH
16013: CALL_OW 55
// case Rand ( 1 , 3 ) of 1 :
16017: LD_INT 1
16019: PPUSH
16020: LD_INT 3
16022: PPUSH
16023: CALL_OW 12
16027: PUSH
16028: LD_INT 1
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16075
16036: POP
// begin wait ( Rand ( 0 0$5 , 0 0$10 ) ) ;
16037: LD_INT 175
16039: PPUSH
16040: LD_INT 350
16042: PPUSH
16043: CALL_OW 12
16047: PPUSH
16048: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16052: LD_INT 2
16054: PPUSH
16055: LD_INT 5
16057: PPUSH
16058: CALL_OW 12
16062: PPUSH
16063: LD_INT 9
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 55
// end ; 2 :
16073: GO 16159
16075: LD_INT 2
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16158
16083: POP
// begin wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16084: LD_INT 70
16086: PPUSH
16087: LD_INT 350
16089: PPUSH
16090: CALL_OW 12
16094: PPUSH
16095: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16099: LD_INT 2
16101: PPUSH
16102: LD_INT 5
16104: PPUSH
16105: CALL_OW 12
16109: PPUSH
16110: LD_INT 9
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 55
// wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16120: LD_INT 70
16122: PPUSH
16123: LD_INT 350
16125: PPUSH
16126: CALL_OW 12
16130: PPUSH
16131: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16135: LD_INT 2
16137: PPUSH
16138: LD_INT 5
16140: PPUSH
16141: CALL_OW 12
16145: PPUSH
16146: LD_INT 9
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 55
// end ; end ;
16156: GO 16159
16158: POP
// enable ;
16159: ENABLE
// end ; end_of_file
16160: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
16161: LD_INT 0
16163: PPUSH
16164: PPUSH
// skirmish := false ;
16165: LD_ADDR_EXP 56
16169: PUSH
16170: LD_INT 0
16172: ST_TO_ADDR
// mc_bases := [ ] ;
16173: LD_ADDR_EXP 57
16177: PUSH
16178: EMPTY
16179: ST_TO_ADDR
// mc_sides := [ ] ;
16180: LD_ADDR_EXP 83
16184: PUSH
16185: EMPTY
16186: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16187: LD_ADDR_EXP 58
16191: PUSH
16192: EMPTY
16193: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16194: LD_ADDR_EXP 59
16198: PUSH
16199: EMPTY
16200: ST_TO_ADDR
// mc_need_heal := [ ] ;
16201: LD_ADDR_EXP 60
16205: PUSH
16206: EMPTY
16207: ST_TO_ADDR
// mc_healers := [ ] ;
16208: LD_ADDR_EXP 61
16212: PUSH
16213: EMPTY
16214: ST_TO_ADDR
// mc_build_list := [ ] ;
16215: LD_ADDR_EXP 62
16219: PUSH
16220: EMPTY
16221: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16222: LD_ADDR_EXP 89
16226: PUSH
16227: EMPTY
16228: ST_TO_ADDR
// mc_builders := [ ] ;
16229: LD_ADDR_EXP 63
16233: PUSH
16234: EMPTY
16235: ST_TO_ADDR
// mc_construct_list := [ ] ;
16236: LD_ADDR_EXP 64
16240: PUSH
16241: EMPTY
16242: ST_TO_ADDR
// mc_turret_list := [ ] ;
16243: LD_ADDR_EXP 65
16247: PUSH
16248: EMPTY
16249: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16250: LD_ADDR_EXP 66
16254: PUSH
16255: EMPTY
16256: ST_TO_ADDR
// mc_miners := [ ] ;
16257: LD_ADDR_EXP 71
16261: PUSH
16262: EMPTY
16263: ST_TO_ADDR
// mc_mines := [ ] ;
16264: LD_ADDR_EXP 70
16268: PUSH
16269: EMPTY
16270: ST_TO_ADDR
// mc_minefields := [ ] ;
16271: LD_ADDR_EXP 72
16275: PUSH
16276: EMPTY
16277: ST_TO_ADDR
// mc_crates := [ ] ;
16278: LD_ADDR_EXP 73
16282: PUSH
16283: EMPTY
16284: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16285: LD_ADDR_EXP 74
16289: PUSH
16290: EMPTY
16291: ST_TO_ADDR
// mc_crates_area := [ ] ;
16292: LD_ADDR_EXP 75
16296: PUSH
16297: EMPTY
16298: ST_TO_ADDR
// mc_vehicles := [ ] ;
16299: LD_ADDR_EXP 76
16303: PUSH
16304: EMPTY
16305: ST_TO_ADDR
// mc_attack := [ ] ;
16306: LD_ADDR_EXP 77
16310: PUSH
16311: EMPTY
16312: ST_TO_ADDR
// mc_produce := [ ] ;
16313: LD_ADDR_EXP 78
16317: PUSH
16318: EMPTY
16319: ST_TO_ADDR
// mc_defender := [ ] ;
16320: LD_ADDR_EXP 79
16324: PUSH
16325: EMPTY
16326: ST_TO_ADDR
// mc_parking := [ ] ;
16327: LD_ADDR_EXP 81
16331: PUSH
16332: EMPTY
16333: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16334: LD_ADDR_EXP 67
16338: PUSH
16339: EMPTY
16340: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16341: LD_ADDR_EXP 69
16345: PUSH
16346: EMPTY
16347: ST_TO_ADDR
// mc_scan := [ ] ;
16348: LD_ADDR_EXP 80
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// mc_scan_area := [ ] ;
16355: LD_ADDR_EXP 82
16359: PUSH
16360: EMPTY
16361: ST_TO_ADDR
// mc_tech := [ ] ;
16362: LD_ADDR_EXP 84
16366: PUSH
16367: EMPTY
16368: ST_TO_ADDR
// end ;
16369: LD_VAR 0 1
16373: RET
// export function MC_Kill ( base ) ; begin
16374: LD_INT 0
16376: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16377: LD_ADDR_EXP 57
16381: PUSH
16382: LD_EXP 57
16386: PPUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: EMPTY
16393: PPUSH
16394: CALL_OW 1
16398: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16399: LD_ADDR_EXP 58
16403: PUSH
16404: LD_EXP 58
16408: PPUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: EMPTY
16415: PPUSH
16416: CALL_OW 1
16420: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16421: LD_ADDR_EXP 59
16425: PUSH
16426: LD_EXP 59
16430: PPUSH
16431: LD_VAR 0 1
16435: PPUSH
16436: EMPTY
16437: PPUSH
16438: CALL_OW 1
16442: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16443: LD_ADDR_EXP 60
16447: PUSH
16448: LD_EXP 60
16452: PPUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: EMPTY
16459: PPUSH
16460: CALL_OW 1
16464: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16465: LD_ADDR_EXP 61
16469: PUSH
16470: LD_EXP 61
16474: PPUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: EMPTY
16481: PPUSH
16482: CALL_OW 1
16486: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16487: LD_ADDR_EXP 62
16491: PUSH
16492: LD_EXP 62
16496: PPUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: EMPTY
16503: PPUSH
16504: CALL_OW 1
16508: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16509: LD_ADDR_EXP 63
16513: PUSH
16514: LD_EXP 63
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: EMPTY
16525: PPUSH
16526: CALL_OW 1
16530: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16531: LD_ADDR_EXP 64
16535: PUSH
16536: LD_EXP 64
16540: PPUSH
16541: LD_VAR 0 1
16545: PPUSH
16546: EMPTY
16547: PPUSH
16548: CALL_OW 1
16552: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16553: LD_ADDR_EXP 65
16557: PUSH
16558: LD_EXP 65
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: EMPTY
16569: PPUSH
16570: CALL_OW 1
16574: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16575: LD_ADDR_EXP 66
16579: PUSH
16580: LD_EXP 66
16584: PPUSH
16585: LD_VAR 0 1
16589: PPUSH
16590: EMPTY
16591: PPUSH
16592: CALL_OW 1
16596: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16597: LD_ADDR_EXP 67
16601: PUSH
16602: LD_EXP 67
16606: PPUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: EMPTY
16613: PPUSH
16614: CALL_OW 1
16618: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16619: LD_ADDR_EXP 68
16623: PUSH
16624: LD_EXP 68
16628: PPUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: LD_INT 0
16636: PPUSH
16637: CALL_OW 1
16641: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16642: LD_ADDR_EXP 69
16646: PUSH
16647: LD_EXP 69
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: EMPTY
16658: PPUSH
16659: CALL_OW 1
16663: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16664: LD_ADDR_EXP 70
16668: PUSH
16669: LD_EXP 70
16673: PPUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: EMPTY
16680: PPUSH
16681: CALL_OW 1
16685: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16686: LD_ADDR_EXP 71
16690: PUSH
16691: LD_EXP 71
16695: PPUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: EMPTY
16702: PPUSH
16703: CALL_OW 1
16707: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16708: LD_ADDR_EXP 72
16712: PUSH
16713: LD_EXP 72
16717: PPUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: EMPTY
16724: PPUSH
16725: CALL_OW 1
16729: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16730: LD_ADDR_EXP 73
16734: PUSH
16735: LD_EXP 73
16739: PPUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: EMPTY
16746: PPUSH
16747: CALL_OW 1
16751: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
16752: LD_ADDR_EXP 74
16756: PUSH
16757: LD_EXP 74
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: EMPTY
16768: PPUSH
16769: CALL_OW 1
16773: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
16774: LD_ADDR_EXP 75
16778: PUSH
16779: LD_EXP 75
16783: PPUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: EMPTY
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
16796: LD_ADDR_EXP 76
16800: PUSH
16801: LD_EXP 76
16805: PPUSH
16806: LD_VAR 0 1
16810: PPUSH
16811: EMPTY
16812: PPUSH
16813: CALL_OW 1
16817: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
16818: LD_ADDR_EXP 77
16822: PUSH
16823: LD_EXP 77
16827: PPUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: EMPTY
16834: PPUSH
16835: CALL_OW 1
16839: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
16840: LD_ADDR_EXP 78
16844: PUSH
16845: LD_EXP 78
16849: PPUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: EMPTY
16856: PPUSH
16857: CALL_OW 1
16861: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
16862: LD_ADDR_EXP 79
16866: PUSH
16867: LD_EXP 79
16871: PPUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: EMPTY
16878: PPUSH
16879: CALL_OW 1
16883: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
16884: LD_ADDR_EXP 80
16888: PUSH
16889: LD_EXP 80
16893: PPUSH
16894: LD_VAR 0 1
16898: PPUSH
16899: EMPTY
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
16906: LD_ADDR_EXP 81
16910: PUSH
16911: LD_EXP 81
16915: PPUSH
16916: LD_VAR 0 1
16920: PPUSH
16921: EMPTY
16922: PPUSH
16923: CALL_OW 1
16927: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
16928: LD_ADDR_EXP 82
16932: PUSH
16933: LD_EXP 82
16937: PPUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: EMPTY
16944: PPUSH
16945: CALL_OW 1
16949: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
16950: LD_ADDR_EXP 84
16954: PUSH
16955: LD_EXP 84
16959: PPUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: EMPTY
16966: PPUSH
16967: CALL_OW 1
16971: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
16972: LD_ADDR_EXP 86
16976: PUSH
16977: LD_EXP 86
16981: PPUSH
16982: LD_VAR 0 1
16986: PPUSH
16987: EMPTY
16988: PPUSH
16989: CALL_OW 1
16993: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
16994: LD_ADDR_EXP 87
16998: PUSH
16999: LD_EXP 87
17003: PPUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: EMPTY
17010: PPUSH
17011: CALL_OW 1
17015: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17016: LD_ADDR_EXP 88
17020: PUSH
17021: LD_EXP 88
17025: PPUSH
17026: LD_VAR 0 1
17030: PPUSH
17031: EMPTY
17032: PPUSH
17033: CALL_OW 1
17037: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17038: LD_ADDR_EXP 89
17042: PUSH
17043: LD_EXP 89
17047: PPUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: EMPTY
17054: PPUSH
17055: CALL_OW 1
17059: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17060: LD_ADDR_EXP 90
17064: PUSH
17065: LD_EXP 90
17069: PPUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: EMPTY
17076: PPUSH
17077: CALL_OW 1
17081: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17082: LD_ADDR_EXP 91
17086: PUSH
17087: LD_EXP 91
17091: PPUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: EMPTY
17098: PPUSH
17099: CALL_OW 1
17103: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17104: LD_ADDR_EXP 92
17108: PUSH
17109: LD_EXP 92
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: EMPTY
17120: PPUSH
17121: CALL_OW 1
17125: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17126: LD_ADDR_EXP 93
17130: PUSH
17131: LD_EXP 93
17135: PPUSH
17136: LD_VAR 0 1
17140: PPUSH
17141: EMPTY
17142: PPUSH
17143: CALL_OW 1
17147: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17148: LD_ADDR_EXP 94
17152: PUSH
17153: LD_EXP 94
17157: PPUSH
17158: LD_VAR 0 1
17162: PPUSH
17163: EMPTY
17164: PPUSH
17165: CALL_OW 1
17169: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17170: LD_ADDR_EXP 95
17174: PUSH
17175: LD_EXP 95
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: EMPTY
17186: PPUSH
17187: CALL_OW 1
17191: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17192: LD_ADDR_EXP 96
17196: PUSH
17197: LD_EXP 96
17201: PPUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: EMPTY
17208: PPUSH
17209: CALL_OW 1
17213: ST_TO_ADDR
// end ;
17214: LD_VAR 0 2
17218: RET
// export function MC_Start ( ) ; var i ; begin
17219: LD_INT 0
17221: PPUSH
17222: PPUSH
// for i = 1 to mc_bases do
17223: LD_ADDR_VAR 0 2
17227: PUSH
17228: DOUBLE
17229: LD_INT 1
17231: DEC
17232: ST_TO_ADDR
17233: LD_EXP 57
17237: PUSH
17238: FOR_TO
17239: IFFALSE 18172
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17241: LD_ADDR_EXP 58
17245: PUSH
17246: LD_EXP 58
17250: PPUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: EMPTY
17257: PPUSH
17258: CALL_OW 1
17262: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17263: LD_ADDR_EXP 59
17267: PUSH
17268: LD_EXP 59
17272: PPUSH
17273: LD_VAR 0 2
17277: PPUSH
17278: EMPTY
17279: PPUSH
17280: CALL_OW 1
17284: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17285: LD_ADDR_EXP 60
17289: PUSH
17290: LD_EXP 60
17294: PPUSH
17295: LD_VAR 0 2
17299: PPUSH
17300: EMPTY
17301: PPUSH
17302: CALL_OW 1
17306: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_VAR 0 2
17321: PPUSH
17322: EMPTY
17323: PUSH
17324: EMPTY
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 1
17334: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17335: LD_ADDR_EXP 62
17339: PUSH
17340: LD_EXP 62
17344: PPUSH
17345: LD_VAR 0 2
17349: PPUSH
17350: EMPTY
17351: PPUSH
17352: CALL_OW 1
17356: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17357: LD_ADDR_EXP 89
17361: PUSH
17362: LD_EXP 89
17366: PPUSH
17367: LD_VAR 0 2
17371: PPUSH
17372: EMPTY
17373: PPUSH
17374: CALL_OW 1
17378: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17379: LD_ADDR_EXP 63
17383: PUSH
17384: LD_EXP 63
17388: PPUSH
17389: LD_VAR 0 2
17393: PPUSH
17394: EMPTY
17395: PPUSH
17396: CALL_OW 1
17400: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17401: LD_ADDR_EXP 64
17405: PUSH
17406: LD_EXP 64
17410: PPUSH
17411: LD_VAR 0 2
17415: PPUSH
17416: EMPTY
17417: PPUSH
17418: CALL_OW 1
17422: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17423: LD_ADDR_EXP 65
17427: PUSH
17428: LD_EXP 65
17432: PPUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: EMPTY
17439: PPUSH
17440: CALL_OW 1
17444: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17445: LD_ADDR_EXP 66
17449: PUSH
17450: LD_EXP 66
17454: PPUSH
17455: LD_VAR 0 2
17459: PPUSH
17460: LD_EXP 57
17464: PUSH
17465: LD_VAR 0 2
17469: ARRAY
17470: PPUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 30
17476: PUSH
17477: LD_INT 32
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 30
17486: PUSH
17487: LD_INT 31
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 58
17501: PUSH
17502: EMPTY
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PPUSH
17509: CALL_OW 72
17513: PPUSH
17514: CALL_OW 1
17518: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17519: LD_ADDR_EXP 67
17523: PUSH
17524: LD_EXP 67
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: EMPTY
17535: PPUSH
17536: CALL_OW 1
17540: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17541: LD_ADDR_EXP 71
17545: PUSH
17546: LD_EXP 71
17550: PPUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: EMPTY
17557: PPUSH
17558: CALL_OW 1
17562: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17563: LD_ADDR_EXP 70
17567: PUSH
17568: LD_EXP 70
17572: PPUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: EMPTY
17579: PPUSH
17580: CALL_OW 1
17584: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17585: LD_ADDR_EXP 72
17589: PUSH
17590: LD_EXP 72
17594: PPUSH
17595: LD_VAR 0 2
17599: PPUSH
17600: EMPTY
17601: PPUSH
17602: CALL_OW 1
17606: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17607: LD_ADDR_EXP 73
17611: PUSH
17612: LD_EXP 73
17616: PPUSH
17617: LD_VAR 0 2
17621: PPUSH
17622: EMPTY
17623: PPUSH
17624: CALL_OW 1
17628: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17629: LD_ADDR_EXP 74
17633: PUSH
17634: LD_EXP 74
17638: PPUSH
17639: LD_VAR 0 2
17643: PPUSH
17644: EMPTY
17645: PPUSH
17646: CALL_OW 1
17650: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17651: LD_ADDR_EXP 75
17655: PUSH
17656: LD_EXP 75
17660: PPUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: EMPTY
17667: PPUSH
17668: CALL_OW 1
17672: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17673: LD_ADDR_EXP 76
17677: PUSH
17678: LD_EXP 76
17682: PPUSH
17683: LD_VAR 0 2
17687: PPUSH
17688: EMPTY
17689: PPUSH
17690: CALL_OW 1
17694: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17695: LD_ADDR_EXP 77
17699: PUSH
17700: LD_EXP 77
17704: PPUSH
17705: LD_VAR 0 2
17709: PPUSH
17710: EMPTY
17711: PPUSH
17712: CALL_OW 1
17716: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17717: LD_ADDR_EXP 78
17721: PUSH
17722: LD_EXP 78
17726: PPUSH
17727: LD_VAR 0 2
17731: PPUSH
17732: EMPTY
17733: PPUSH
17734: CALL_OW 1
17738: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17739: LD_ADDR_EXP 79
17743: PUSH
17744: LD_EXP 79
17748: PPUSH
17749: LD_VAR 0 2
17753: PPUSH
17754: EMPTY
17755: PPUSH
17756: CALL_OW 1
17760: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
17761: LD_ADDR_EXP 68
17765: PUSH
17766: LD_EXP 68
17770: PPUSH
17771: LD_VAR 0 2
17775: PPUSH
17776: LD_INT 0
17778: PPUSH
17779: CALL_OW 1
17783: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
17784: LD_ADDR_EXP 81
17788: PUSH
17789: LD_EXP 81
17793: PPUSH
17794: LD_VAR 0 2
17798: PPUSH
17799: LD_INT 0
17801: PPUSH
17802: CALL_OW 1
17806: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17807: LD_ADDR_EXP 69
17811: PUSH
17812: LD_EXP 69
17816: PPUSH
17817: LD_VAR 0 2
17821: PPUSH
17822: EMPTY
17823: PPUSH
17824: CALL_OW 1
17828: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
17829: LD_ADDR_EXP 80
17833: PUSH
17834: LD_EXP 80
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_INT 0
17846: PPUSH
17847: CALL_OW 1
17851: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
17852: LD_ADDR_EXP 82
17856: PUSH
17857: LD_EXP 82
17861: PPUSH
17862: LD_VAR 0 2
17866: PPUSH
17867: EMPTY
17868: PPUSH
17869: CALL_OW 1
17873: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
17874: LD_ADDR_EXP 85
17878: PUSH
17879: LD_EXP 85
17883: PPUSH
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_INT 0
17891: PPUSH
17892: CALL_OW 1
17896: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
17897: LD_ADDR_EXP 86
17901: PUSH
17902: LD_EXP 86
17906: PPUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: EMPTY
17913: PPUSH
17914: CALL_OW 1
17918: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
17919: LD_ADDR_EXP 87
17923: PUSH
17924: LD_EXP 87
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: EMPTY
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
17941: LD_ADDR_EXP 88
17945: PUSH
17946: LD_EXP 88
17950: PPUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: EMPTY
17957: PPUSH
17958: CALL_OW 1
17962: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
17963: LD_ADDR_EXP 90
17967: PUSH
17968: LD_EXP 90
17972: PPUSH
17973: LD_VAR 0 2
17977: PPUSH
17978: LD_EXP 57
17982: PUSH
17983: LD_VAR 0 2
17987: ARRAY
17988: PPUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 30
17994: PUSH
17995: LD_INT 6
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 30
18004: PUSH
18005: LD_INT 7
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 30
18014: PUSH
18015: LD_INT 8
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PPUSH
18033: CALL_OW 1
18037: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18038: LD_ADDR_EXP 91
18042: PUSH
18043: LD_EXP 91
18047: PPUSH
18048: LD_VAR 0 2
18052: PPUSH
18053: EMPTY
18054: PPUSH
18055: CALL_OW 1
18059: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18060: LD_ADDR_EXP 92
18064: PUSH
18065: LD_EXP 92
18069: PPUSH
18070: LD_VAR 0 2
18074: PPUSH
18075: EMPTY
18076: PPUSH
18077: CALL_OW 1
18081: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18082: LD_ADDR_EXP 93
18086: PUSH
18087: LD_EXP 93
18091: PPUSH
18092: LD_VAR 0 2
18096: PPUSH
18097: EMPTY
18098: PPUSH
18099: CALL_OW 1
18103: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18104: LD_ADDR_EXP 94
18108: PUSH
18109: LD_EXP 94
18113: PPUSH
18114: LD_VAR 0 2
18118: PPUSH
18119: EMPTY
18120: PPUSH
18121: CALL_OW 1
18125: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18126: LD_ADDR_EXP 95
18130: PUSH
18131: LD_EXP 95
18135: PPUSH
18136: LD_VAR 0 2
18140: PPUSH
18141: EMPTY
18142: PPUSH
18143: CALL_OW 1
18147: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18148: LD_ADDR_EXP 96
18152: PUSH
18153: LD_EXP 96
18157: PPUSH
18158: LD_VAR 0 2
18162: PPUSH
18163: EMPTY
18164: PPUSH
18165: CALL_OW 1
18169: ST_TO_ADDR
// end ;
18170: GO 17238
18172: POP
18173: POP
// MC_InitSides ( ) ;
18174: CALL 18460 0 0
// MC_InitResearch ( ) ;
18178: CALL 18199 0 0
// CustomInitMacro ( ) ;
18182: CALL 11145 0 0
// skirmish := true ;
18186: LD_ADDR_EXP 56
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// end ;
18194: LD_VAR 0 1
18198: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
// if not mc_bases then
18207: LD_EXP 57
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18455
// for i = 1 to 8 do
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: DOUBLE
18222: LD_INT 1
18224: DEC
18225: ST_TO_ADDR
18226: LD_INT 8
18228: PUSH
18229: FOR_TO
18230: IFFALSE 18256
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18232: LD_ADDR_EXP 84
18236: PUSH
18237: LD_EXP 84
18241: PPUSH
18242: LD_VAR 0 2
18246: PPUSH
18247: EMPTY
18248: PPUSH
18249: CALL_OW 1
18253: ST_TO_ADDR
18254: GO 18229
18256: POP
18257: POP
// tmp := [ ] ;
18258: LD_ADDR_VAR 0 5
18262: PUSH
18263: EMPTY
18264: ST_TO_ADDR
// for i = 1 to mc_sides do
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: DOUBLE
18271: LD_INT 1
18273: DEC
18274: ST_TO_ADDR
18275: LD_EXP 83
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18339
// if not mc_sides [ i ] in tmp then
18283: LD_EXP 83
18287: PUSH
18288: LD_VAR 0 2
18292: ARRAY
18293: PUSH
18294: LD_VAR 0 5
18298: IN
18299: NOT
18300: IFFALSE 18337
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: LD_VAR 0 5
18311: PPUSH
18312: LD_VAR 0 5
18316: PUSH
18317: LD_INT 1
18319: PLUS
18320: PPUSH
18321: LD_EXP 83
18325: PUSH
18326: LD_VAR 0 2
18330: ARRAY
18331: PPUSH
18332: CALL_OW 2
18336: ST_TO_ADDR
18337: GO 18280
18339: POP
18340: POP
// if not tmp then
18341: LD_VAR 0 5
18345: NOT
18346: IFFALSE 18350
// exit ;
18348: GO 18455
// for j in tmp do
18350: LD_ADDR_VAR 0 3
18354: PUSH
18355: LD_VAR 0 5
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18453
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18363: LD_ADDR_VAR 0 6
18367: PUSH
18368: LD_INT 22
18370: PUSH
18371: LD_VAR 0 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: ST_TO_ADDR
// if not un then
18385: LD_VAR 0 6
18389: NOT
18390: IFFALSE 18394
// continue ;
18392: GO 18360
// nation := GetNation ( un [ 1 ] ) ;
18394: LD_ADDR_VAR 0 4
18398: PUSH
18399: LD_VAR 0 6
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 248
18412: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18413: LD_ADDR_EXP 84
18417: PUSH
18418: LD_EXP 84
18422: PPUSH
18423: LD_VAR 0 3
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_VAR 0 4
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL 37672 0 3
18445: PPUSH
18446: CALL_OW 1
18450: ST_TO_ADDR
// end ;
18451: GO 18360
18453: POP
18454: POP
// end ;
18455: LD_VAR 0 1
18459: RET
// export function MC_InitSides ( ) ; var i ; begin
18460: LD_INT 0
18462: PPUSH
18463: PPUSH
// if not mc_bases then
18464: LD_EXP 57
18468: NOT
18469: IFFALSE 18473
// exit ;
18471: GO 18547
// for i = 1 to mc_bases do
18473: LD_ADDR_VAR 0 2
18477: PUSH
18478: DOUBLE
18479: LD_INT 1
18481: DEC
18482: ST_TO_ADDR
18483: LD_EXP 57
18487: PUSH
18488: FOR_TO
18489: IFFALSE 18545
// if mc_bases [ i ] then
18491: LD_EXP 57
18495: PUSH
18496: LD_VAR 0 2
18500: ARRAY
18501: IFFALSE 18543
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18503: LD_ADDR_EXP 83
18507: PUSH
18508: LD_EXP 83
18512: PPUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: LD_EXP 57
18522: PUSH
18523: LD_VAR 0 2
18527: ARRAY
18528: PUSH
18529: LD_INT 1
18531: ARRAY
18532: PPUSH
18533: CALL_OW 255
18537: PPUSH
18538: CALL_OW 1
18542: ST_TO_ADDR
18543: GO 18488
18545: POP
18546: POP
// end ;
18547: LD_VAR 0 1
18551: RET
// every 0 0$01 trigger skirmish do
18552: LD_EXP 56
18556: IFFALSE 18689
18558: GO 18560
18560: DISABLE
// begin enable ;
18561: ENABLE
// MC_CheckBuildings ( ) ;
18562: CALL 19174 0 0
// MC_CheckPeopleLife ( ) ;
18566: CALL 19299 0 0
// RaiseSailEvent ( 103 ) ;
18570: LD_INT 103
18572: PPUSH
18573: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18577: LD_INT 104
18579: PPUSH
18580: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18584: LD_INT 105
18586: PPUSH
18587: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18591: LD_INT 106
18593: PPUSH
18594: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18598: LD_INT 107
18600: PPUSH
18601: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18605: LD_INT 108
18607: PPUSH
18608: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18612: LD_INT 109
18614: PPUSH
18615: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18619: LD_INT 110
18621: PPUSH
18622: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18626: LD_INT 111
18628: PPUSH
18629: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18633: LD_INT 112
18635: PPUSH
18636: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18640: LD_INT 120
18642: PPUSH
18643: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18647: LD_INT 121
18649: PPUSH
18650: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18654: LD_INT 122
18656: PPUSH
18657: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18661: LD_INT 123
18663: PPUSH
18664: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18668: LD_INT 125
18670: PPUSH
18671: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18675: LD_INT 126
18677: PPUSH
18678: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18682: LD_INT 200
18684: PPUSH
18685: CALL_OW 427
// end ;
18689: END
// every 10 trigger skirmish do var i ;
18690: LD_EXP 56
18694: IFFALSE 18793
18696: GO 18698
18698: DISABLE
18699: LD_INT 0
18701: PPUSH
// begin enable ;
18702: ENABLE
// if not mc_bases then
18703: LD_EXP 57
18707: NOT
18708: IFFALSE 18712
// exit ;
18710: GO 18793
// for i = 1 to mc_bases do
18712: LD_ADDR_VAR 0 1
18716: PUSH
18717: DOUBLE
18718: LD_INT 1
18720: DEC
18721: ST_TO_ADDR
18722: LD_EXP 57
18726: PUSH
18727: FOR_TO
18728: IFFALSE 18791
// if mc_mines [ i ] and mc_miners [ i ] then
18730: LD_EXP 70
18734: PUSH
18735: LD_VAR 0 1
18739: ARRAY
18740: PUSH
18741: LD_EXP 71
18745: PUSH
18746: LD_VAR 0 1
18750: ARRAY
18751: AND
18752: IFFALSE 18789
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
18754: LD_EXP 71
18758: PUSH
18759: LD_VAR 0 1
18763: ARRAY
18764: PUSH
18765: LD_INT 1
18767: ARRAY
18768: PPUSH
18769: CALL_OW 255
18773: PPUSH
18774: LD_EXP 70
18778: PUSH
18779: LD_VAR 0 1
18783: ARRAY
18784: PPUSH
18785: CALL 41421 0 2
18789: GO 18727
18791: POP
18792: POP
// end ;
18793: PPOPN 1
18795: END
// on SailEvent ( event ) do begin if event = 101 then
18796: LD_VAR 0 1
18800: PUSH
18801: LD_INT 101
18803: EQUAL
18804: IFFALSE 18810
// MC_RepairBuildings ( ) ;
18806: CALL 19857 0 0
// if event = 102 then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_INT 102
18817: EQUAL
18818: IFFALSE 18824
// MC_Heal ( ) ;
18820: CALL 20263 0 0
// if event = 103 then
18824: LD_VAR 0 1
18828: PUSH
18829: LD_INT 103
18831: EQUAL
18832: IFFALSE 18838
// MC_Build ( ) ;
18834: CALL 20685 0 0
// if event = 104 then
18838: LD_VAR 0 1
18842: PUSH
18843: LD_INT 104
18845: EQUAL
18846: IFFALSE 18852
// MC_TurretWeapon ( ) ;
18848: CALL 22124 0 0
// if event = 105 then
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 105
18859: EQUAL
18860: IFFALSE 18866
// MC_BuildUpgrade ( ) ;
18862: CALL 21675 0 0
// if event = 106 then
18866: LD_VAR 0 1
18870: PUSH
18871: LD_INT 106
18873: EQUAL
18874: IFFALSE 18880
// MC_PlantMines ( ) ;
18876: CALL 22476 0 0
// if event = 107 then
18880: LD_VAR 0 1
18884: PUSH
18885: LD_INT 107
18887: EQUAL
18888: IFFALSE 18894
// MC_CollectCrates ( ) ;
18890: CALL 23483 0 0
// if event = 108 then
18894: LD_VAR 0 1
18898: PUSH
18899: LD_INT 108
18901: EQUAL
18902: IFFALSE 18908
// MC_LinkRemoteControl ( ) ;
18904: CALL 24987 0 0
// if event = 109 then
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 109
18915: EQUAL
18916: IFFALSE 18922
// MC_ProduceVehicle ( ) ;
18918: CALL 25168 0 0
// if event = 110 then
18922: LD_VAR 0 1
18926: PUSH
18927: LD_INT 110
18929: EQUAL
18930: IFFALSE 18936
// MC_SendAttack ( ) ;
18932: CALL 25649 0 0
// if event = 111 then
18936: LD_VAR 0 1
18940: PUSH
18941: LD_INT 111
18943: EQUAL
18944: IFFALSE 18950
// MC_Defend ( ) ;
18946: CALL 25757 0 0
// if event = 112 then
18950: LD_VAR 0 1
18954: PUSH
18955: LD_INT 112
18957: EQUAL
18958: IFFALSE 18964
// MC_Research ( ) ;
18960: CALL 26155 0 0
// if event = 120 then
18964: LD_VAR 0 1
18968: PUSH
18969: LD_INT 120
18971: EQUAL
18972: IFFALSE 18978
// MC_RepairVehicle ( ) ;
18974: CALL 27124 0 0
// if event = 121 then
18978: LD_VAR 0 1
18982: PUSH
18983: LD_INT 121
18985: EQUAL
18986: IFFALSE 18992
// MC_TameApe ( ) ;
18988: CALL 27813 0 0
// if event = 122 then
18992: LD_VAR 0 1
18996: PUSH
18997: LD_INT 122
18999: EQUAL
19000: IFFALSE 19006
// MC_ChangeApeClass ( ) ;
19002: CALL 28576 0 0
// if event = 123 then
19006: LD_VAR 0 1
19010: PUSH
19011: LD_INT 123
19013: EQUAL
19014: IFFALSE 19020
// MC_Bazooka ( ) ;
19016: CALL 29210 0 0
// if event = 124 then
19020: LD_VAR 0 1
19024: PUSH
19025: LD_INT 124
19027: EQUAL
19028: IFFALSE 19034
// MC_TeleportExit ( ) ;
19030: CALL 29408 0 0
// if event = 125 then
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 125
19041: EQUAL
19042: IFFALSE 19048
// MC_Deposits ( ) ;
19044: CALL 29450 0 0
// if event = 126 then
19048: LD_VAR 0 1
19052: PUSH
19053: LD_INT 126
19055: EQUAL
19056: IFFALSE 19062
// MC_RemoteDriver ( ) ;
19058: CALL 30029 0 0
// if event = 200 then
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 200
19069: EQUAL
19070: IFFALSE 19076
// MC_Idle ( ) ;
19072: CALL 31534 0 0
// end ;
19076: PPOPN 1
19078: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
// if not mc_bases [ base ] or not tag then
19083: LD_EXP 57
19087: PUSH
19088: LD_VAR 0 1
19092: ARRAY
19093: NOT
19094: PUSH
19095: LD_VAR 0 2
19099: NOT
19100: OR
19101: IFFALSE 19105
// exit ;
19103: GO 19169
// for i in mc_bases [ base ] union mc_ape [ base ] do
19105: LD_ADDR_VAR 0 4
19109: PUSH
19110: LD_EXP 57
19114: PUSH
19115: LD_VAR 0 1
19119: ARRAY
19120: PUSH
19121: LD_EXP 86
19125: PUSH
19126: LD_VAR 0 1
19130: ARRAY
19131: UNION
19132: PUSH
19133: FOR_IN
19134: IFFALSE 19167
// if GetTag ( i ) = tag then
19136: LD_VAR 0 4
19140: PPUSH
19141: CALL_OW 110
19145: PUSH
19146: LD_VAR 0 2
19150: EQUAL
19151: IFFALSE 19165
// SetTag ( i , 0 ) ;
19153: LD_VAR 0 4
19157: PPUSH
19158: LD_INT 0
19160: PPUSH
19161: CALL_OW 109
19165: GO 19133
19167: POP
19168: POP
// end ;
19169: LD_VAR 0 3
19173: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
19174: LD_INT 0
19176: PPUSH
19177: PPUSH
19178: PPUSH
// if not mc_bases then
19179: LD_EXP 57
19183: NOT
19184: IFFALSE 19188
// exit ;
19186: GO 19294
// for i = 1 to mc_bases do
19188: LD_ADDR_VAR 0 2
19192: PUSH
19193: DOUBLE
19194: LD_INT 1
19196: DEC
19197: ST_TO_ADDR
19198: LD_EXP 57
19202: PUSH
19203: FOR_TO
19204: IFFALSE 19285
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_EXP 57
19215: PUSH
19216: LD_VAR 0 2
19220: ARRAY
19221: PPUSH
19222: LD_INT 21
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 3
19234: PUSH
19235: LD_INT 24
19237: PUSH
19238: LD_INT 1000
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 72
19257: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
19258: LD_ADDR_EXP 58
19262: PUSH
19263: LD_EXP 58
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 1
19282: ST_TO_ADDR
// end ;
19283: GO 19203
19285: POP
19286: POP
// RaiseSailEvent ( 101 ) ;
19287: LD_INT 101
19289: PPUSH
19290: CALL_OW 427
// end ;
19294: LD_VAR 0 1
19298: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
19299: LD_INT 0
19301: PPUSH
19302: PPUSH
19303: PPUSH
19304: PPUSH
19305: PPUSH
19306: PPUSH
19307: PPUSH
// if not mc_bases then
19308: LD_EXP 57
19312: NOT
19313: IFFALSE 19317
// exit ;
19315: GO 19852
// for i = 1 to mc_bases do
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: DOUBLE
19323: LD_INT 1
19325: DEC
19326: ST_TO_ADDR
19327: LD_EXP 57
19331: PUSH
19332: FOR_TO
19333: IFFALSE 19843
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
19335: LD_ADDR_VAR 0 5
19339: PUSH
19340: LD_EXP 57
19344: PUSH
19345: LD_VAR 0 2
19349: ARRAY
19350: PUSH
19351: LD_EXP 86
19355: PUSH
19356: LD_VAR 0 2
19360: ARRAY
19361: UNION
19362: PPUSH
19363: LD_INT 21
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 1
19375: PUSH
19376: LD_INT 3
19378: PUSH
19379: LD_INT 54
19381: PUSH
19382: EMPTY
19383: LIST
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: LD_INT 24
19394: PUSH
19395: LD_INT 700
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 72
19419: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
19420: LD_ADDR_VAR 0 6
19424: PUSH
19425: LD_EXP 57
19429: PUSH
19430: LD_VAR 0 2
19434: ARRAY
19435: PPUSH
19436: LD_INT 21
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: LD_INT 3
19451: PUSH
19452: LD_INT 54
19454: PUSH
19455: EMPTY
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: LD_INT 24
19467: PUSH
19468: LD_INT 250
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 72
19492: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
19493: LD_ADDR_VAR 0 7
19497: PUSH
19498: LD_VAR 0 5
19502: PUSH
19503: LD_VAR 0 6
19507: DIFF
19508: ST_TO_ADDR
// if not need_heal_1 then
19509: LD_VAR 0 6
19513: NOT
19514: IFFALSE 19547
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
19516: LD_ADDR_EXP 60
19520: PUSH
19521: LD_EXP 60
19525: PPUSH
19526: LD_VAR 0 2
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: EMPTY
19539: PPUSH
19540: CALL 44799 0 3
19544: ST_TO_ADDR
19545: GO 19579
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
19547: LD_ADDR_EXP 60
19551: PUSH
19552: LD_EXP 60
19556: PPUSH
19557: LD_VAR 0 2
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: LD_VAR 0 6
19573: PPUSH
19574: CALL 44799 0 3
19578: ST_TO_ADDR
// if not need_heal_2 then
19579: LD_VAR 0 7
19583: NOT
19584: IFFALSE 19617
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
19586: LD_ADDR_EXP 60
19590: PUSH
19591: LD_EXP 60
19595: PPUSH
19596: LD_VAR 0 2
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PPUSH
19608: EMPTY
19609: PPUSH
19610: CALL 44799 0 3
19614: ST_TO_ADDR
19615: GO 19649
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
19617: LD_ADDR_EXP 60
19621: PUSH
19622: LD_EXP 60
19626: PPUSH
19627: LD_VAR 0 2
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PPUSH
19639: LD_VAR 0 7
19643: PPUSH
19644: CALL 44799 0 3
19648: ST_TO_ADDR
// if need_heal_2 then
19649: LD_VAR 0 7
19653: IFFALSE 19825
// for j in need_heal_2 do
19655: LD_ADDR_VAR 0 3
19659: PUSH
19660: LD_VAR 0 7
19664: PUSH
19665: FOR_IN
19666: IFFALSE 19823
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_EXP 57
19677: PUSH
19678: LD_VAR 0 2
19682: ARRAY
19683: PPUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 30
19689: PUSH
19690: LD_INT 6
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 7
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 8
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 30
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 30
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 25
19739: PUSH
19740: LD_INT 4
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PPUSH
19756: CALL_OW 72
19760: ST_TO_ADDR
// if tmp then
19761: LD_VAR 0 5
19765: IFFALSE 19821
// begin k := NearestUnitToUnit ( tmp , j ) ;
19767: LD_ADDR_VAR 0 4
19771: PUSH
19772: LD_VAR 0 5
19776: PPUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: CALL_OW 74
19786: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
19787: LD_VAR 0 3
19791: PPUSH
19792: LD_VAR 0 4
19796: PPUSH
19797: CALL_OW 296
19801: PUSH
19802: LD_INT 7
19804: GREATER
19805: IFFALSE 19821
// ComMoveUnit ( j , k ) ;
19807: LD_VAR 0 3
19811: PPUSH
19812: LD_VAR 0 4
19816: PPUSH
19817: CALL_OW 112
// end ; end ;
19821: GO 19665
19823: POP
19824: POP
// if not need_heal_1 and not need_heal_2 then
19825: LD_VAR 0 6
19829: NOT
19830: PUSH
19831: LD_VAR 0 7
19835: NOT
19836: AND
19837: IFFALSE 19841
// continue ;
19839: GO 19332
// end ;
19841: GO 19332
19843: POP
19844: POP
// RaiseSailEvent ( 102 ) ;
19845: LD_INT 102
19847: PPUSH
19848: CALL_OW 427
// end ;
19852: LD_VAR 0 1
19856: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
19857: LD_INT 0
19859: PPUSH
19860: PPUSH
19861: PPUSH
19862: PPUSH
19863: PPUSH
// if not mc_bases then
19864: LD_EXP 57
19868: NOT
19869: IFFALSE 19873
// exit ;
19871: GO 20258
// for i = 1 to mc_bases do
19873: LD_ADDR_VAR 0 2
19877: PUSH
19878: DOUBLE
19879: LD_INT 1
19881: DEC
19882: ST_TO_ADDR
19883: LD_EXP 57
19887: PUSH
19888: FOR_TO
19889: IFFALSE 20256
// begin if not mc_building_need_repair [ i ] then
19891: LD_EXP 58
19895: PUSH
19896: LD_VAR 0 2
19900: ARRAY
19901: NOT
19902: IFFALSE 19940
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19904: LD_ADDR_EXP 59
19908: PUSH
19909: LD_EXP 59
19913: PPUSH
19914: LD_VAR 0 2
19918: PPUSH
19919: EMPTY
19920: PPUSH
19921: CALL_OW 1
19925: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_INT 101
19933: PPUSH
19934: CALL 19079 0 2
// continue ;
19938: GO 19888
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
19940: LD_ADDR_EXP 63
19944: PUSH
19945: LD_EXP 63
19949: PPUSH
19950: LD_VAR 0 2
19954: PPUSH
19955: EMPTY
19956: PPUSH
19957: CALL_OW 1
19961: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
19962: LD_VAR 0 2
19966: PPUSH
19967: LD_INT 103
19969: PPUSH
19970: CALL 19079 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
19974: LD_ADDR_VAR 0 5
19978: PUSH
19979: LD_EXP 57
19983: PUSH
19984: LD_VAR 0 2
19988: ARRAY
19989: PUSH
19990: LD_EXP 86
19994: PUSH
19995: LD_VAR 0 2
19999: ARRAY
20000: UNION
20001: PPUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 25
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 25
20017: PUSH
20018: LD_INT 16
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: PPUSH
20033: CALL_OW 72
20037: ST_TO_ADDR
// if not tmp then
20038: LD_VAR 0 5
20042: NOT
20043: IFFALSE 20047
// continue ;
20045: GO 19888
// for j in tmp do
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: LD_VAR 0 5
20056: PUSH
20057: FOR_IN
20058: IFFALSE 20252
// begin if mc_need_heal [ i ] then
20060: LD_EXP 60
20064: PUSH
20065: LD_VAR 0 2
20069: ARRAY
20070: IFFALSE 20118
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_EXP 60
20081: PUSH
20082: LD_VAR 0 2
20086: ARRAY
20087: PUSH
20088: LD_INT 1
20090: ARRAY
20091: IN
20092: PUSH
20093: LD_VAR 0 3
20097: PUSH
20098: LD_EXP 60
20102: PUSH
20103: LD_VAR 0 2
20107: ARRAY
20108: PUSH
20109: LD_INT 2
20111: ARRAY
20112: IN
20113: OR
20114: IFFALSE 20118
// continue ;
20116: GO 20057
// if IsInUnit ( j ) then
20118: LD_VAR 0 3
20122: PPUSH
20123: CALL_OW 310
20127: IFFALSE 20138
// ComExitBuilding ( j ) ;
20129: LD_VAR 0 3
20133: PPUSH
20134: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_EXP 59
20147: PUSH
20148: LD_VAR 0 2
20152: ARRAY
20153: IN
20154: NOT
20155: IFFALSE 20213
// begin SetTag ( j , 101 ) ;
20157: LD_VAR 0 3
20161: PPUSH
20162: LD_INT 101
20164: PPUSH
20165: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
20169: LD_ADDR_EXP 59
20173: PUSH
20174: LD_EXP 59
20178: PPUSH
20179: LD_VAR 0 2
20183: PUSH
20184: LD_EXP 59
20188: PUSH
20189: LD_VAR 0 2
20193: ARRAY
20194: PUSH
20195: LD_INT 1
20197: PLUS
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PPUSH
20203: LD_VAR 0 3
20207: PPUSH
20208: CALL 44799 0 3
20212: ST_TO_ADDR
// end ; Wait ( 3 ) ;
20213: LD_INT 3
20215: PPUSH
20216: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
20220: LD_VAR 0 3
20224: PPUSH
20225: LD_EXP 58
20229: PUSH
20230: LD_VAR 0 2
20234: ARRAY
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: CALL_OW 74
20245: PPUSH
20246: CALL_OW 130
// end ;
20250: GO 20057
20252: POP
20253: POP
// end ;
20254: GO 19888
20256: POP
20257: POP
// end ;
20258: LD_VAR 0 1
20262: RET
// export function MC_Heal ; var i , j , tmp ; begin
20263: LD_INT 0
20265: PPUSH
20266: PPUSH
20267: PPUSH
20268: PPUSH
// if not mc_bases then
20269: LD_EXP 57
20273: NOT
20274: IFFALSE 20278
// exit ;
20276: GO 20680
// for i = 1 to mc_bases do
20278: LD_ADDR_VAR 0 2
20282: PUSH
20283: DOUBLE
20284: LD_INT 1
20286: DEC
20287: ST_TO_ADDR
20288: LD_EXP 57
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20678
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
20296: LD_EXP 60
20300: PUSH
20301: LD_VAR 0 2
20305: ARRAY
20306: PUSH
20307: LD_INT 1
20309: ARRAY
20310: NOT
20311: PUSH
20312: LD_EXP 60
20316: PUSH
20317: LD_VAR 0 2
20321: ARRAY
20322: PUSH
20323: LD_INT 2
20325: ARRAY
20326: NOT
20327: AND
20328: IFFALSE 20366
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
20330: LD_ADDR_EXP 61
20334: PUSH
20335: LD_EXP 61
20339: PPUSH
20340: LD_VAR 0 2
20344: PPUSH
20345: EMPTY
20346: PPUSH
20347: CALL_OW 1
20351: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
20352: LD_VAR 0 2
20356: PPUSH
20357: LD_INT 102
20359: PPUSH
20360: CALL 19079 0 2
// continue ;
20364: GO 20293
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20366: LD_ADDR_VAR 0 4
20370: PUSH
20371: LD_EXP 57
20375: PUSH
20376: LD_VAR 0 2
20380: ARRAY
20381: PPUSH
20382: LD_INT 25
20384: PUSH
20385: LD_INT 4
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 72
20396: ST_TO_ADDR
// if not tmp then
20397: LD_VAR 0 4
20401: NOT
20402: IFFALSE 20406
// continue ;
20404: GO 20293
// if mc_taming [ i ] then
20406: LD_EXP 88
20410: PUSH
20411: LD_VAR 0 2
20415: ARRAY
20416: IFFALSE 20440
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20418: LD_ADDR_EXP 88
20422: PUSH
20423: LD_EXP 88
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: EMPTY
20434: PPUSH
20435: CALL_OW 1
20439: ST_TO_ADDR
// for j in tmp do
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_VAR 0 4
20449: PUSH
20450: FOR_IN
20451: IFFALSE 20674
// begin if IsInUnit ( j ) then
20453: LD_VAR 0 3
20457: PPUSH
20458: CALL_OW 310
20462: IFFALSE 20473
// ComExitBuilding ( j ) ;
20464: LD_VAR 0 3
20468: PPUSH
20469: CALL_OW 122
// if not j in mc_healers [ i ] then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_EXP 61
20482: PUSH
20483: LD_VAR 0 2
20487: ARRAY
20488: IN
20489: NOT
20490: IFFALSE 20536
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
20492: LD_ADDR_EXP 61
20496: PUSH
20497: LD_EXP 61
20501: PPUSH
20502: LD_VAR 0 2
20506: PUSH
20507: LD_EXP 61
20511: PUSH
20512: LD_VAR 0 2
20516: ARRAY
20517: PUSH
20518: LD_INT 1
20520: PLUS
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PPUSH
20526: LD_VAR 0 3
20530: PPUSH
20531: CALL 44799 0 3
20535: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
20536: LD_VAR 0 3
20540: PPUSH
20541: CALL_OW 110
20545: PUSH
20546: LD_INT 102
20548: NONEQUAL
20549: IFFALSE 20563
// SetTag ( j , 102 ) ;
20551: LD_VAR 0 3
20555: PPUSH
20556: LD_INT 102
20558: PPUSH
20559: CALL_OW 109
// Wait ( 3 ) ;
20563: LD_INT 3
20565: PPUSH
20566: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
20570: LD_EXP 60
20574: PUSH
20575: LD_VAR 0 2
20579: ARRAY
20580: PUSH
20581: LD_INT 1
20583: ARRAY
20584: IFFALSE 20616
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_EXP 60
20595: PUSH
20596: LD_VAR 0 2
20600: ARRAY
20601: PUSH
20602: LD_INT 1
20604: ARRAY
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PPUSH
20610: CALL_OW 128
20614: GO 20672
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
20616: LD_VAR 0 3
20620: PPUSH
20621: CALL_OW 314
20625: NOT
20626: PUSH
20627: LD_EXP 60
20631: PUSH
20632: LD_VAR 0 2
20636: ARRAY
20637: PUSH
20638: LD_INT 2
20640: ARRAY
20641: AND
20642: IFFALSE 20672
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
20644: LD_VAR 0 3
20648: PPUSH
20649: LD_EXP 60
20653: PUSH
20654: LD_VAR 0 2
20658: ARRAY
20659: PUSH
20660: LD_INT 2
20662: ARRAY
20663: PUSH
20664: LD_INT 1
20666: ARRAY
20667: PPUSH
20668: CALL_OW 128
// end ;
20672: GO 20450
20674: POP
20675: POP
// end ;
20676: GO 20293
20678: POP
20679: POP
// end ;
20680: LD_VAR 0 1
20684: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
20685: LD_INT 0
20687: PPUSH
20688: PPUSH
20689: PPUSH
20690: PPUSH
20691: PPUSH
// if not mc_bases then
20692: LD_EXP 57
20696: NOT
20697: IFFALSE 20701
// exit ;
20699: GO 21670
// for i = 1 to mc_bases do
20701: LD_ADDR_VAR 0 2
20705: PUSH
20706: DOUBLE
20707: LD_INT 1
20709: DEC
20710: ST_TO_ADDR
20711: LD_EXP 57
20715: PUSH
20716: FOR_TO
20717: IFFALSE 21668
// begin if mc_scan [ i ] then
20719: LD_EXP 80
20723: PUSH
20724: LD_VAR 0 2
20728: ARRAY
20729: IFFALSE 20733
// continue ;
20731: GO 20716
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
20733: LD_EXP 62
20737: PUSH
20738: LD_VAR 0 2
20742: ARRAY
20743: NOT
20744: PUSH
20745: LD_EXP 64
20749: PUSH
20750: LD_VAR 0 2
20754: ARRAY
20755: NOT
20756: AND
20757: PUSH
20758: LD_EXP 63
20762: PUSH
20763: LD_VAR 0 2
20767: ARRAY
20768: AND
20769: IFFALSE 20807
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
20771: LD_ADDR_EXP 63
20775: PUSH
20776: LD_EXP 63
20780: PPUSH
20781: LD_VAR 0 2
20785: PPUSH
20786: EMPTY
20787: PPUSH
20788: CALL_OW 1
20792: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20793: LD_VAR 0 2
20797: PPUSH
20798: LD_INT 103
20800: PPUSH
20801: CALL 19079 0 2
// continue ;
20805: GO 20716
// end ; if mc_construct_list [ i ] then
20807: LD_EXP 64
20811: PUSH
20812: LD_VAR 0 2
20816: ARRAY
20817: IFFALSE 21037
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_EXP 57
20828: PUSH
20829: LD_VAR 0 2
20833: ARRAY
20834: PPUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PPUSH
20845: CALL_OW 72
20849: PUSH
20850: LD_EXP 59
20854: PUSH
20855: LD_VAR 0 2
20859: ARRAY
20860: DIFF
20861: ST_TO_ADDR
// if not tmp then
20862: LD_VAR 0 4
20866: NOT
20867: IFFALSE 20871
// continue ;
20869: GO 20716
// for j in tmp do
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_VAR 0 4
20880: PUSH
20881: FOR_IN
20882: IFFALSE 21033
// begin if not mc_builders [ i ] then
20884: LD_EXP 63
20888: PUSH
20889: LD_VAR 0 2
20893: ARRAY
20894: NOT
20895: IFFALSE 20953
// begin SetTag ( j , 103 ) ;
20897: LD_VAR 0 3
20901: PPUSH
20902: LD_INT 103
20904: PPUSH
20905: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
20909: LD_ADDR_EXP 63
20913: PUSH
20914: LD_EXP 63
20918: PPUSH
20919: LD_VAR 0 2
20923: PUSH
20924: LD_EXP 63
20928: PUSH
20929: LD_VAR 0 2
20933: ARRAY
20934: PUSH
20935: LD_INT 1
20937: PLUS
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: LD_VAR 0 3
20947: PPUSH
20948: CALL 44799 0 3
20952: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
20953: LD_VAR 0 3
20957: PPUSH
20958: CALL_OW 310
20962: IFFALSE 20973
// ComExitBuilding ( j ) ;
20964: LD_VAR 0 3
20968: PPUSH
20969: CALL_OW 122
// wait ( 3 ) ;
20973: LD_INT 3
20975: PPUSH
20976: CALL_OW 67
// if not mc_construct_list [ i ] then
20980: LD_EXP 64
20984: PUSH
20985: LD_VAR 0 2
20989: ARRAY
20990: NOT
20991: IFFALSE 20995
// break ;
20993: GO 21033
// if not HasTask ( j ) then
20995: LD_VAR 0 3
20999: PPUSH
21000: CALL_OW 314
21004: NOT
21005: IFFALSE 21031
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
21007: LD_VAR 0 3
21011: PPUSH
21012: LD_EXP 64
21016: PUSH
21017: LD_VAR 0 2
21021: ARRAY
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: CALL 47235 0 2
// end ;
21031: GO 20881
21033: POP
21034: POP
// end else
21035: GO 21666
// if mc_build_list [ i ] then
21037: LD_EXP 62
21041: PUSH
21042: LD_VAR 0 2
21046: ARRAY
21047: IFFALSE 21666
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
21049: LD_ADDR_VAR 0 5
21053: PUSH
21054: LD_EXP 57
21058: PUSH
21059: LD_VAR 0 2
21063: ARRAY
21064: PPUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 30
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: PPUSH
21093: CALL_OW 72
21097: ST_TO_ADDR
// if depot then
21098: LD_VAR 0 5
21102: IFFALSE 21120
// depot := depot [ 1 ] else
21104: LD_ADDR_VAR 0 5
21108: PUSH
21109: LD_VAR 0 5
21113: PUSH
21114: LD_INT 1
21116: ARRAY
21117: ST_TO_ADDR
21118: GO 21128
// depot := 0 ;
21120: LD_ADDR_VAR 0 5
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
21128: LD_EXP 62
21132: PUSH
21133: LD_VAR 0 2
21137: ARRAY
21138: PUSH
21139: LD_INT 1
21141: ARRAY
21142: PUSH
21143: LD_INT 1
21145: ARRAY
21146: PUSH
21147: LD_INT 0
21149: EQUAL
21150: PUSH
21151: LD_VAR 0 5
21155: PUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: LD_EXP 62
21165: PUSH
21166: LD_VAR 0 2
21170: ARRAY
21171: PUSH
21172: LD_INT 1
21174: ARRAY
21175: PUSH
21176: LD_INT 1
21178: ARRAY
21179: PPUSH
21180: LD_EXP 62
21184: PUSH
21185: LD_VAR 0 2
21189: ARRAY
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: PUSH
21195: LD_INT 2
21197: ARRAY
21198: PPUSH
21199: LD_EXP 62
21203: PUSH
21204: LD_VAR 0 2
21208: ARRAY
21209: PUSH
21210: LD_INT 1
21212: ARRAY
21213: PUSH
21214: LD_INT 3
21216: ARRAY
21217: PPUSH
21218: LD_EXP 62
21222: PUSH
21223: LD_VAR 0 2
21227: ARRAY
21228: PUSH
21229: LD_INT 1
21231: ARRAY
21232: PUSH
21233: LD_INT 4
21235: ARRAY
21236: PPUSH
21237: CALL 51587 0 5
21241: AND
21242: OR
21243: IFFALSE 21524
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21245: LD_ADDR_VAR 0 4
21249: PUSH
21250: LD_EXP 57
21254: PUSH
21255: LD_VAR 0 2
21259: ARRAY
21260: PPUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PPUSH
21271: CALL_OW 72
21275: PUSH
21276: LD_EXP 59
21280: PUSH
21281: LD_VAR 0 2
21285: ARRAY
21286: DIFF
21287: ST_TO_ADDR
// if not tmp then
21288: LD_VAR 0 4
21292: NOT
21293: IFFALSE 21297
// continue ;
21295: GO 20716
// for j in tmp do
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_VAR 0 4
21306: PUSH
21307: FOR_IN
21308: IFFALSE 21520
// begin if not mc_builders [ i ] then
21310: LD_EXP 63
21314: PUSH
21315: LD_VAR 0 2
21319: ARRAY
21320: NOT
21321: IFFALSE 21379
// begin SetTag ( j , 103 ) ;
21323: LD_VAR 0 3
21327: PPUSH
21328: LD_INT 103
21330: PPUSH
21331: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21335: LD_ADDR_EXP 63
21339: PUSH
21340: LD_EXP 63
21344: PPUSH
21345: LD_VAR 0 2
21349: PUSH
21350: LD_EXP 63
21354: PUSH
21355: LD_VAR 0 2
21359: ARRAY
21360: PUSH
21361: LD_INT 1
21363: PLUS
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: LD_VAR 0 3
21373: PPUSH
21374: CALL 44799 0 3
21378: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21379: LD_VAR 0 3
21383: PPUSH
21384: CALL_OW 310
21388: IFFALSE 21399
// ComExitBuilding ( j ) ;
21390: LD_VAR 0 3
21394: PPUSH
21395: CALL_OW 122
// wait ( 3 ) ;
21399: LD_INT 3
21401: PPUSH
21402: CALL_OW 67
// if not mc_build_list [ i ] then
21406: LD_EXP 62
21410: PUSH
21411: LD_VAR 0 2
21415: ARRAY
21416: NOT
21417: IFFALSE 21421
// break ;
21419: GO 21520
// if not HasTask ( j ) then
21421: LD_VAR 0 3
21425: PPUSH
21426: CALL_OW 314
21430: NOT
21431: IFFALSE 21518
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
21433: LD_VAR 0 3
21437: PPUSH
21438: LD_EXP 62
21442: PUSH
21443: LD_VAR 0 2
21447: ARRAY
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: LD_EXP 62
21461: PUSH
21462: LD_VAR 0 2
21466: ARRAY
21467: PUSH
21468: LD_INT 1
21470: ARRAY
21471: PUSH
21472: LD_INT 2
21474: ARRAY
21475: PPUSH
21476: LD_EXP 62
21480: PUSH
21481: LD_VAR 0 2
21485: ARRAY
21486: PUSH
21487: LD_INT 1
21489: ARRAY
21490: PUSH
21491: LD_INT 3
21493: ARRAY
21494: PPUSH
21495: LD_EXP 62
21499: PUSH
21500: LD_VAR 0 2
21504: ARRAY
21505: PUSH
21506: LD_INT 1
21508: ARRAY
21509: PUSH
21510: LD_INT 4
21512: ARRAY
21513: PPUSH
21514: CALL_OW 145
// end ;
21518: GO 21307
21520: POP
21521: POP
// end else
21522: GO 21666
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21524: LD_EXP 57
21528: PUSH
21529: LD_VAR 0 2
21533: ARRAY
21534: PPUSH
21535: LD_EXP 62
21539: PUSH
21540: LD_VAR 0 2
21544: ARRAY
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PUSH
21550: LD_INT 1
21552: ARRAY
21553: PPUSH
21554: LD_EXP 62
21558: PUSH
21559: LD_VAR 0 2
21563: ARRAY
21564: PUSH
21565: LD_INT 1
21567: ARRAY
21568: PUSH
21569: LD_INT 2
21571: ARRAY
21572: PPUSH
21573: LD_EXP 62
21577: PUSH
21578: LD_VAR 0 2
21582: ARRAY
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PUSH
21588: LD_INT 3
21590: ARRAY
21591: PPUSH
21592: LD_EXP 62
21596: PUSH
21597: LD_VAR 0 2
21601: ARRAY
21602: PUSH
21603: LD_INT 1
21605: ARRAY
21606: PUSH
21607: LD_INT 4
21609: ARRAY
21610: PPUSH
21611: CALL 51018 0 5
21615: NOT
21616: IFFALSE 21666
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
21618: LD_ADDR_EXP 62
21622: PUSH
21623: LD_EXP 62
21627: PPUSH
21628: LD_VAR 0 2
21632: PPUSH
21633: LD_EXP 62
21637: PUSH
21638: LD_VAR 0 2
21642: ARRAY
21643: PPUSH
21644: LD_INT 1
21646: PPUSH
21647: LD_INT 1
21649: NEG
21650: PPUSH
21651: LD_INT 0
21653: PPUSH
21654: CALL 43782 0 4
21658: PPUSH
21659: CALL_OW 1
21663: ST_TO_ADDR
// continue ;
21664: GO 20716
// end ; end ; end ;
21666: GO 20716
21668: POP
21669: POP
// end ;
21670: LD_VAR 0 1
21674: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
// if not mc_bases then
21683: LD_EXP 57
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 22119
// for i = 1 to mc_bases do
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: DOUBLE
21698: LD_INT 1
21700: DEC
21701: ST_TO_ADDR
21702: LD_EXP 57
21706: PUSH
21707: FOR_TO
21708: IFFALSE 22117
// begin tmp := mc_build_upgrade [ i ] ;
21710: LD_ADDR_VAR 0 4
21714: PUSH
21715: LD_EXP 89
21719: PUSH
21720: LD_VAR 0 2
21724: ARRAY
21725: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
21726: LD_ADDR_VAR 0 6
21730: PUSH
21731: LD_EXP 90
21735: PUSH
21736: LD_VAR 0 2
21740: ARRAY
21741: PPUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 6
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 30
21757: PUSH
21758: LD_INT 7
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 72
21774: ST_TO_ADDR
// if not tmp and not lab then
21775: LD_VAR 0 4
21779: NOT
21780: PUSH
21781: LD_VAR 0 6
21785: NOT
21786: AND
21787: IFFALSE 21791
// continue ;
21789: GO 21707
// if tmp then
21791: LD_VAR 0 4
21795: IFFALSE 21915
// for j in tmp do
21797: LD_ADDR_VAR 0 3
21801: PUSH
21802: LD_VAR 0 4
21806: PUSH
21807: FOR_IN
21808: IFFALSE 21913
// begin if UpgradeCost ( j ) then
21810: LD_VAR 0 3
21814: PPUSH
21815: CALL 50678 0 1
21819: IFFALSE 21911
// begin ComUpgrade ( j ) ;
21821: LD_VAR 0 3
21825: PPUSH
21826: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
21830: LD_ADDR_EXP 89
21834: PUSH
21835: LD_EXP 89
21839: PPUSH
21840: LD_VAR 0 2
21844: PPUSH
21845: LD_EXP 89
21849: PUSH
21850: LD_VAR 0 2
21854: ARRAY
21855: PUSH
21856: LD_VAR 0 3
21860: DIFF
21861: PPUSH
21862: CALL_OW 1
21866: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
21867: LD_ADDR_EXP 64
21871: PUSH
21872: LD_EXP 64
21876: PPUSH
21877: LD_VAR 0 2
21881: PUSH
21882: LD_EXP 64
21886: PUSH
21887: LD_VAR 0 2
21891: ARRAY
21892: PUSH
21893: LD_INT 1
21895: PLUS
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PPUSH
21901: LD_VAR 0 3
21905: PPUSH
21906: CALL 44799 0 3
21910: ST_TO_ADDR
// end ; end ;
21911: GO 21807
21913: POP
21914: POP
// if not lab or not mc_lab_upgrade [ i ] then
21915: LD_VAR 0 6
21919: NOT
21920: PUSH
21921: LD_EXP 91
21925: PUSH
21926: LD_VAR 0 2
21930: ARRAY
21931: NOT
21932: OR
21933: IFFALSE 21937
// continue ;
21935: GO 21707
// for j in lab do
21937: LD_ADDR_VAR 0 3
21941: PUSH
21942: LD_VAR 0 6
21946: PUSH
21947: FOR_IN
21948: IFFALSE 22113
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
21950: LD_VAR 0 3
21954: PPUSH
21955: CALL_OW 266
21959: PUSH
21960: LD_INT 6
21962: PUSH
21963: LD_INT 7
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: IN
21970: PUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: CALL_OW 461
21980: PUSH
21981: LD_INT 1
21983: NONEQUAL
21984: AND
21985: IFFALSE 22111
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
21987: LD_VAR 0 3
21991: PPUSH
21992: LD_EXP 91
21996: PUSH
21997: LD_VAR 0 2
22001: ARRAY
22002: PUSH
22003: LD_INT 1
22005: ARRAY
22006: PPUSH
22007: CALL 50883 0 2
22011: IFFALSE 22111
// begin ComCancel ( j ) ;
22013: LD_VAR 0 3
22017: PPUSH
22018: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_EXP 91
22031: PUSH
22032: LD_VAR 0 2
22036: ARRAY
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PPUSH
22042: CALL_OW 207
// if not j in mc_construct_list [ i ] then
22046: LD_VAR 0 3
22050: PUSH
22051: LD_EXP 64
22055: PUSH
22056: LD_VAR 0 2
22060: ARRAY
22061: IN
22062: NOT
22063: IFFALSE 22109
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22065: LD_ADDR_EXP 64
22069: PUSH
22070: LD_EXP 64
22074: PPUSH
22075: LD_VAR 0 2
22079: PUSH
22080: LD_EXP 64
22084: PUSH
22085: LD_VAR 0 2
22089: ARRAY
22090: PUSH
22091: LD_INT 1
22093: PLUS
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: CALL 44799 0 3
22108: ST_TO_ADDR
// break ;
22109: GO 22113
// end ; end ; end ;
22111: GO 21947
22113: POP
22114: POP
// end ;
22115: GO 21707
22117: POP
22118: POP
// end ;
22119: LD_VAR 0 1
22123: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
22130: PPUSH
22131: PPUSH
22132: PPUSH
// if not mc_bases then
22133: LD_EXP 57
22137: NOT
22138: IFFALSE 22142
// exit ;
22140: GO 22471
// for i = 1 to mc_bases do
22142: LD_ADDR_VAR 0 2
22146: PUSH
22147: DOUBLE
22148: LD_INT 1
22150: DEC
22151: ST_TO_ADDR
22152: LD_EXP 57
22156: PUSH
22157: FOR_TO
22158: IFFALSE 22469
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
22160: LD_EXP 65
22164: PUSH
22165: LD_VAR 0 2
22169: ARRAY
22170: NOT
22171: PUSH
22172: LD_EXP 57
22176: PUSH
22177: LD_VAR 0 2
22181: ARRAY
22182: PPUSH
22183: LD_INT 30
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 72
22197: NOT
22198: OR
22199: IFFALSE 22203
// continue ;
22201: GO 22157
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
22203: LD_EXP 65
22207: PUSH
22208: LD_VAR 0 2
22212: ARRAY
22213: PUSH
22214: LD_INT 1
22216: ARRAY
22217: PPUSH
22218: CALL_OW 269
22222: IFFALSE 22288
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
22224: LD_ADDR_VAR 0 4
22228: PUSH
22229: LD_EXP 65
22233: PUSH
22234: LD_VAR 0 2
22238: ARRAY
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL_OW 3
22247: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
22248: LD_ADDR_EXP 65
22252: PUSH
22253: LD_EXP 65
22257: PPUSH
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 4
22267: PPUSH
22268: CALL_OW 1
22272: ST_TO_ADDR
// if not mc_turret_list [ i ] then
22273: LD_EXP 65
22277: PUSH
22278: LD_VAR 0 2
22282: ARRAY
22283: NOT
22284: IFFALSE 22288
// continue ;
22286: GO 22157
// end ; busy := false ;
22288: LD_ADDR_VAR 0 6
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
22296: LD_ADDR_VAR 0 4
22300: PUSH
22301: LD_EXP 57
22305: PUSH
22306: LD_VAR 0 2
22310: ARRAY
22311: PPUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 3
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 72
22326: ST_TO_ADDR
// for j in tmp do
22327: LD_ADDR_VAR 0 3
22331: PUSH
22332: LD_VAR 0 4
22336: PUSH
22337: FOR_IN
22338: IFFALSE 22366
// if not BuildingStatus ( j ) = bs_idle then
22340: LD_VAR 0 3
22344: PPUSH
22345: CALL_OW 461
22349: PUSH
22350: LD_INT 2
22352: EQUAL
22353: NOT
22354: IFFALSE 22364
// busy := true ;
22356: LD_ADDR_VAR 0 6
22360: PUSH
22361: LD_INT 1
22363: ST_TO_ADDR
22364: GO 22337
22366: POP
22367: POP
// if busy then
22368: LD_VAR 0 6
22372: IFFALSE 22376
// continue ;
22374: GO 22157
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
22376: LD_ADDR_VAR 0 7
22380: PUSH
22381: LD_EXP 65
22385: PUSH
22386: LD_VAR 0 2
22390: ARRAY
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: CALL 49242 0 1
22400: ST_TO_ADDR
// if not weapon then
22401: LD_VAR 0 7
22405: NOT
22406: IFFALSE 22410
// continue ;
22408: GO 22157
// if mc_allowed_tower_weapons [ i ] then
22410: LD_EXP 95
22414: PUSH
22415: LD_VAR 0 2
22419: ARRAY
22420: IFFALSE 22443
// if not weapon in mc_allowed_tower_weapons [ i ] then
22422: LD_VAR 0 7
22426: PUSH
22427: LD_EXP 95
22431: PUSH
22432: LD_VAR 0 2
22436: ARRAY
22437: IN
22438: NOT
22439: IFFALSE 22443
// continue ;
22441: GO 22157
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
22443: LD_EXP 65
22447: PUSH
22448: LD_VAR 0 2
22452: ARRAY
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: PPUSH
22458: LD_VAR 0 7
22462: PPUSH
22463: CALL_OW 148
// end ;
22467: GO 22157
22469: POP
22470: POP
// end ;
22471: LD_VAR 0 1
22475: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
22476: LD_INT 0
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
// if not mc_bases then
22484: LD_EXP 57
22488: NOT
22489: IFFALSE 22493
// exit ;
22491: GO 23478
// for i = 1 to mc_bases do
22493: LD_ADDR_VAR 0 2
22497: PUSH
22498: DOUBLE
22499: LD_INT 1
22501: DEC
22502: ST_TO_ADDR
22503: LD_EXP 57
22507: PUSH
22508: FOR_TO
22509: IFFALSE 23476
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
22511: LD_EXP 70
22515: PUSH
22516: LD_VAR 0 2
22520: ARRAY
22521: NOT
22522: PUSH
22523: LD_EXP 70
22527: PUSH
22528: LD_VAR 0 2
22532: ARRAY
22533: PUSH
22534: LD_EXP 71
22538: PUSH
22539: LD_VAR 0 2
22543: ARRAY
22544: EQUAL
22545: OR
22546: IFFALSE 22550
// continue ;
22548: GO 22508
// if mc_miners [ i ] then
22550: LD_EXP 71
22554: PUSH
22555: LD_VAR 0 2
22559: ARRAY
22560: IFFALSE 23163
// begin k := 1 ;
22562: LD_ADDR_VAR 0 4
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
22570: LD_ADDR_VAR 0 3
22574: PUSH
22575: DOUBLE
22576: LD_EXP 71
22580: PUSH
22581: LD_VAR 0 2
22585: ARRAY
22586: INC
22587: ST_TO_ADDR
22588: LD_INT 1
22590: PUSH
22591: FOR_DOWNTO
22592: IFFALSE 23161
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
22594: LD_EXP 71
22598: PUSH
22599: LD_VAR 0 2
22603: ARRAY
22604: PUSH
22605: LD_VAR 0 3
22609: ARRAY
22610: PPUSH
22611: CALL_OW 301
22615: IFFALSE 22678
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
22617: LD_ADDR_VAR 0 5
22621: PUSH
22622: LD_EXP 71
22626: PUSH
22627: LD_VAR 0 2
22631: ARRAY
22632: PUSH
22633: LD_EXP 71
22637: PUSH
22638: LD_VAR 0 2
22642: ARRAY
22643: PUSH
22644: LD_VAR 0 3
22648: ARRAY
22649: DIFF
22650: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
22651: LD_ADDR_EXP 71
22655: PUSH
22656: LD_EXP 71
22660: PPUSH
22661: LD_VAR 0 2
22665: PPUSH
22666: LD_VAR 0 5
22670: PPUSH
22671: CALL_OW 1
22675: ST_TO_ADDR
// continue ;
22676: GO 22591
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
22678: LD_EXP 71
22682: PUSH
22683: LD_VAR 0 2
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 3
22693: ARRAY
22694: PPUSH
22695: CALL 44300 0 1
22699: PUSH
22700: LD_EXP 71
22704: PUSH
22705: LD_VAR 0 2
22709: ARRAY
22710: PUSH
22711: LD_VAR 0 3
22715: ARRAY
22716: PPUSH
22717: CALL_OW 255
22721: PPUSH
22722: LD_EXP 70
22726: PUSH
22727: LD_VAR 0 2
22731: ARRAY
22732: PUSH
22733: LD_VAR 0 4
22737: ARRAY
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: PPUSH
22743: LD_EXP 70
22747: PUSH
22748: LD_VAR 0 2
22752: ARRAY
22753: PUSH
22754: LD_VAR 0 4
22758: ARRAY
22759: PUSH
22760: LD_INT 2
22762: ARRAY
22763: PPUSH
22764: LD_INT 15
22766: PPUSH
22767: CALL 45293 0 4
22771: PUSH
22772: LD_INT 4
22774: ARRAY
22775: PUSH
22776: LD_EXP 71
22780: PUSH
22781: LD_VAR 0 2
22785: ARRAY
22786: PUSH
22787: LD_VAR 0 3
22791: ARRAY
22792: PPUSH
22793: LD_INT 10
22795: PPUSH
22796: CALL 46990 0 2
22800: PUSH
22801: LD_INT 4
22803: ARRAY
22804: OR
22805: AND
22806: IFFALSE 22829
// ComStop ( mc_miners [ i ] [ j ] ) ;
22808: LD_EXP 71
22812: PUSH
22813: LD_VAR 0 2
22817: ARRAY
22818: PUSH
22819: LD_VAR 0 3
22823: ARRAY
22824: PPUSH
22825: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
22829: LD_EXP 71
22833: PUSH
22834: LD_VAR 0 2
22838: ARRAY
22839: PUSH
22840: LD_VAR 0 3
22844: ARRAY
22845: PPUSH
22846: CALL_OW 257
22850: PUSH
22851: LD_INT 1
22853: EQUAL
22854: PUSH
22855: LD_EXP 71
22859: PUSH
22860: LD_VAR 0 2
22864: ARRAY
22865: PUSH
22866: LD_VAR 0 3
22870: ARRAY
22871: PPUSH
22872: CALL_OW 459
22876: NOT
22877: AND
22878: PUSH
22879: LD_EXP 71
22883: PUSH
22884: LD_VAR 0 2
22888: ARRAY
22889: PUSH
22890: LD_VAR 0 3
22894: ARRAY
22895: PPUSH
22896: CALL_OW 255
22900: PPUSH
22901: LD_EXP 70
22905: PUSH
22906: LD_VAR 0 2
22910: ARRAY
22911: PUSH
22912: LD_VAR 0 4
22916: ARRAY
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PPUSH
22922: LD_EXP 70
22926: PUSH
22927: LD_VAR 0 2
22931: ARRAY
22932: PUSH
22933: LD_VAR 0 4
22937: ARRAY
22938: PUSH
22939: LD_INT 2
22941: ARRAY
22942: PPUSH
22943: LD_INT 15
22945: PPUSH
22946: CALL 45293 0 4
22950: PUSH
22951: LD_INT 4
22953: ARRAY
22954: PUSH
22955: LD_INT 0
22957: EQUAL
22958: AND
22959: PUSH
22960: LD_EXP 71
22964: PUSH
22965: LD_VAR 0 2
22969: ARRAY
22970: PUSH
22971: LD_VAR 0 3
22975: ARRAY
22976: PPUSH
22977: CALL_OW 314
22981: NOT
22982: AND
22983: IFFALSE 23159
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
22985: LD_EXP 71
22989: PUSH
22990: LD_VAR 0 2
22994: ARRAY
22995: PUSH
22996: LD_VAR 0 3
23000: ARRAY
23001: PPUSH
23002: CALL_OW 310
23006: IFFALSE 23029
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
23008: LD_EXP 71
23012: PUSH
23013: LD_VAR 0 2
23017: ARRAY
23018: PUSH
23019: LD_VAR 0 3
23023: ARRAY
23024: PPUSH
23025: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
23029: LD_EXP 71
23033: PUSH
23034: LD_VAR 0 2
23038: ARRAY
23039: PUSH
23040: LD_VAR 0 3
23044: ARRAY
23045: PPUSH
23046: CALL_OW 314
23050: NOT
23051: IFFALSE 23119
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
23053: LD_EXP 71
23057: PUSH
23058: LD_VAR 0 2
23062: ARRAY
23063: PUSH
23064: LD_VAR 0 3
23068: ARRAY
23069: PPUSH
23070: LD_EXP 70
23074: PUSH
23075: LD_VAR 0 2
23079: ARRAY
23080: PUSH
23081: LD_VAR 0 4
23085: ARRAY
23086: PUSH
23087: LD_INT 1
23089: ARRAY
23090: PPUSH
23091: LD_EXP 70
23095: PUSH
23096: LD_VAR 0 2
23100: ARRAY
23101: PUSH
23102: LD_VAR 0 4
23106: ARRAY
23107: PUSH
23108: LD_INT 2
23110: ARRAY
23111: PPUSH
23112: LD_INT 0
23114: PPUSH
23115: CALL_OW 193
// k := k + 1 ;
23119: LD_ADDR_VAR 0 4
23123: PUSH
23124: LD_VAR 0 4
23128: PUSH
23129: LD_INT 1
23131: PLUS
23132: ST_TO_ADDR
// if k > mc_mines [ i ] then
23133: LD_VAR 0 4
23137: PUSH
23138: LD_EXP 70
23142: PUSH
23143: LD_VAR 0 2
23147: ARRAY
23148: GREATER
23149: IFFALSE 23159
// k := 1 ;
23151: LD_ADDR_VAR 0 4
23155: PUSH
23156: LD_INT 1
23158: ST_TO_ADDR
// end ; end ;
23159: GO 22591
23161: POP
23162: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
23163: LD_ADDR_VAR 0 5
23167: PUSH
23168: LD_EXP 57
23172: PUSH
23173: LD_VAR 0 2
23177: ARRAY
23178: PPUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 30
23184: PUSH
23185: LD_INT 4
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 5
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 30
23204: PUSH
23205: LD_INT 32
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 72
23222: ST_TO_ADDR
// if not tmp then
23223: LD_VAR 0 5
23227: NOT
23228: IFFALSE 23232
// continue ;
23230: GO 22508
// list := [ ] ;
23232: LD_ADDR_VAR 0 6
23236: PUSH
23237: EMPTY
23238: ST_TO_ADDR
// for j in tmp do
23239: LD_ADDR_VAR 0 3
23243: PUSH
23244: LD_VAR 0 5
23248: PUSH
23249: FOR_IN
23250: IFFALSE 23319
// begin for k in UnitsInside ( j ) do
23252: LD_ADDR_VAR 0 4
23256: PUSH
23257: LD_VAR 0 3
23261: PPUSH
23262: CALL_OW 313
23266: PUSH
23267: FOR_IN
23268: IFFALSE 23315
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
23270: LD_VAR 0 4
23274: PPUSH
23275: CALL_OW 257
23279: PUSH
23280: LD_INT 1
23282: EQUAL
23283: PUSH
23284: LD_VAR 0 4
23288: PPUSH
23289: CALL_OW 459
23293: NOT
23294: AND
23295: IFFALSE 23313
// list := list ^ k ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 6
23306: PUSH
23307: LD_VAR 0 4
23311: ADD
23312: ST_TO_ADDR
23313: GO 23267
23315: POP
23316: POP
// end ;
23317: GO 23249
23319: POP
23320: POP
// list := list diff mc_miners [ i ] ;
23321: LD_ADDR_VAR 0 6
23325: PUSH
23326: LD_VAR 0 6
23330: PUSH
23331: LD_EXP 71
23335: PUSH
23336: LD_VAR 0 2
23340: ARRAY
23341: DIFF
23342: ST_TO_ADDR
// if not list then
23343: LD_VAR 0 6
23347: NOT
23348: IFFALSE 23352
// continue ;
23350: GO 22508
// k := mc_mines [ i ] - mc_miners [ i ] ;
23352: LD_ADDR_VAR 0 4
23356: PUSH
23357: LD_EXP 70
23361: PUSH
23362: LD_VAR 0 2
23366: ARRAY
23367: PUSH
23368: LD_EXP 71
23372: PUSH
23373: LD_VAR 0 2
23377: ARRAY
23378: MINUS
23379: ST_TO_ADDR
// if k > list then
23380: LD_VAR 0 4
23384: PUSH
23385: LD_VAR 0 6
23389: GREATER
23390: IFFALSE 23402
// k := list ;
23392: LD_ADDR_VAR 0 4
23396: PUSH
23397: LD_VAR 0 6
23401: ST_TO_ADDR
// for j = 1 to k do
23402: LD_ADDR_VAR 0 3
23406: PUSH
23407: DOUBLE
23408: LD_INT 1
23410: DEC
23411: ST_TO_ADDR
23412: LD_VAR 0 4
23416: PUSH
23417: FOR_TO
23418: IFFALSE 23472
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
23420: LD_ADDR_EXP 71
23424: PUSH
23425: LD_EXP 71
23429: PPUSH
23430: LD_VAR 0 2
23434: PUSH
23435: LD_EXP 71
23439: PUSH
23440: LD_VAR 0 2
23444: ARRAY
23445: PUSH
23446: LD_INT 1
23448: PLUS
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: LD_VAR 0 6
23458: PUSH
23459: LD_VAR 0 3
23463: ARRAY
23464: PPUSH
23465: CALL 44799 0 3
23469: ST_TO_ADDR
23470: GO 23417
23472: POP
23473: POP
// end ;
23474: GO 22508
23476: POP
23477: POP
// end ;
23478: LD_VAR 0 1
23482: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
23483: LD_INT 0
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
// if not mc_bases then
23494: LD_EXP 57
23498: NOT
23499: IFFALSE 23503
// exit ;
23501: GO 24982
// for i = 1 to mc_bases do
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: DOUBLE
23509: LD_INT 1
23511: DEC
23512: ST_TO_ADDR
23513: LD_EXP 57
23517: PUSH
23518: FOR_TO
23519: IFFALSE 24980
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
23521: LD_EXP 57
23525: PUSH
23526: LD_VAR 0 2
23530: ARRAY
23531: NOT
23532: PUSH
23533: LD_EXP 64
23537: PUSH
23538: LD_VAR 0 2
23542: ARRAY
23543: OR
23544: IFFALSE 23548
// continue ;
23546: GO 23518
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
23548: LD_EXP 73
23552: PUSH
23553: LD_VAR 0 2
23557: ARRAY
23558: NOT
23559: PUSH
23560: LD_EXP 74
23564: PUSH
23565: LD_VAR 0 2
23569: ARRAY
23570: AND
23571: IFFALSE 23609
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23573: LD_ADDR_EXP 74
23577: PUSH
23578: LD_EXP 74
23582: PPUSH
23583: LD_VAR 0 2
23587: PPUSH
23588: EMPTY
23589: PPUSH
23590: CALL_OW 1
23594: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
23595: LD_VAR 0 2
23599: PPUSH
23600: LD_INT 107
23602: PPUSH
23603: CALL 19079 0 2
// continue ;
23607: GO 23518
// end ; target := [ ] ;
23609: LD_ADDR_VAR 0 5
23613: PUSH
23614: EMPTY
23615: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: DOUBLE
23622: LD_EXP 73
23626: PUSH
23627: LD_VAR 0 2
23631: ARRAY
23632: INC
23633: ST_TO_ADDR
23634: LD_INT 1
23636: PUSH
23637: FOR_DOWNTO
23638: IFFALSE 23898
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
23640: LD_EXP 73
23644: PUSH
23645: LD_VAR 0 2
23649: ARRAY
23650: PUSH
23651: LD_VAR 0 3
23655: ARRAY
23656: PUSH
23657: LD_INT 2
23659: ARRAY
23660: PPUSH
23661: LD_EXP 73
23665: PUSH
23666: LD_VAR 0 2
23670: ARRAY
23671: PUSH
23672: LD_VAR 0 3
23676: ARRAY
23677: PUSH
23678: LD_INT 3
23680: ARRAY
23681: PPUSH
23682: CALL_OW 488
23686: PUSH
23687: LD_EXP 73
23691: PUSH
23692: LD_VAR 0 2
23696: ARRAY
23697: PUSH
23698: LD_VAR 0 3
23702: ARRAY
23703: PUSH
23704: LD_INT 2
23706: ARRAY
23707: PPUSH
23708: LD_EXP 73
23712: PUSH
23713: LD_VAR 0 2
23717: ARRAY
23718: PUSH
23719: LD_VAR 0 3
23723: ARRAY
23724: PUSH
23725: LD_INT 3
23727: ARRAY
23728: PPUSH
23729: CALL_OW 284
23733: PUSH
23734: LD_INT 0
23736: EQUAL
23737: AND
23738: IFFALSE 23793
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
23740: LD_ADDR_VAR 0 4
23744: PUSH
23745: LD_EXP 73
23749: PUSH
23750: LD_VAR 0 2
23754: ARRAY
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: CALL_OW 3
23765: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
23766: LD_ADDR_EXP 73
23770: PUSH
23771: LD_EXP 73
23775: PPUSH
23776: LD_VAR 0 2
23780: PPUSH
23781: LD_VAR 0 4
23785: PPUSH
23786: CALL_OW 1
23790: ST_TO_ADDR
// continue ;
23791: GO 23637
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
23793: LD_EXP 57
23797: PUSH
23798: LD_VAR 0 2
23802: ARRAY
23803: PUSH
23804: LD_INT 1
23806: ARRAY
23807: PPUSH
23808: CALL_OW 255
23812: PPUSH
23813: LD_EXP 73
23817: PUSH
23818: LD_VAR 0 2
23822: ARRAY
23823: PUSH
23824: LD_VAR 0 3
23828: ARRAY
23829: PUSH
23830: LD_INT 2
23832: ARRAY
23833: PPUSH
23834: LD_EXP 73
23838: PUSH
23839: LD_VAR 0 2
23843: ARRAY
23844: PUSH
23845: LD_VAR 0 3
23849: ARRAY
23850: PUSH
23851: LD_INT 3
23853: ARRAY
23854: PPUSH
23855: LD_INT 20
23857: PPUSH
23858: CALL 45293 0 4
23862: PUSH
23863: LD_INT 4
23865: ARRAY
23866: PUSH
23867: LD_INT 0
23869: EQUAL
23870: IFFALSE 23896
// begin target := mc_crates [ i ] [ j ] ;
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_EXP 73
23881: PUSH
23882: LD_VAR 0 2
23886: ARRAY
23887: PUSH
23888: LD_VAR 0 3
23892: ARRAY
23893: ST_TO_ADDR
// break ;
23894: GO 23898
// end ; end ;
23896: GO 23637
23898: POP
23899: POP
// if not target then
23900: LD_VAR 0 5
23904: NOT
23905: IFFALSE 23909
// continue ;
23907: GO 23518
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_EXP 76
23918: PUSH
23919: LD_VAR 0 2
23923: ARRAY
23924: PPUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 3
23930: PUSH
23931: LD_INT 58
23933: PUSH
23934: EMPTY
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 61
23943: PUSH
23944: EMPTY
23945: LIST
23946: PUSH
23947: LD_INT 33
23949: PUSH
23950: LD_INT 5
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 33
23959: PUSH
23960: LD_INT 3
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 34
23979: PUSH
23980: LD_INT 32
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 34
23989: PUSH
23990: LD_INT 51
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 34
23999: PUSH
24000: LD_INT 12
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PPUSH
24017: CALL_OW 72
24021: ST_TO_ADDR
// if not cargo then
24022: LD_VAR 0 6
24026: NOT
24027: IFFALSE 24515
// begin if mc_crates_collector [ i ] < 5 then
24029: LD_EXP 74
24033: PUSH
24034: LD_VAR 0 2
24038: ARRAY
24039: PUSH
24040: LD_INT 5
24042: LESS
24043: IFFALSE 24329
// begin if mc_ape [ i ] then
24045: LD_EXP 86
24049: PUSH
24050: LD_VAR 0 2
24054: ARRAY
24055: IFFALSE 24102
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
24057: LD_ADDR_VAR 0 4
24061: PUSH
24062: LD_EXP 86
24066: PUSH
24067: LD_VAR 0 2
24071: ARRAY
24072: PPUSH
24073: LD_INT 25
24075: PUSH
24076: LD_INT 16
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 24
24085: PUSH
24086: LD_INT 750
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 72
24101: ST_TO_ADDR
// if not tmp then
24102: LD_VAR 0 4
24106: NOT
24107: IFFALSE 24156
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
24109: LD_ADDR_VAR 0 4
24113: PUSH
24114: LD_EXP 57
24118: PUSH
24119: LD_VAR 0 2
24123: ARRAY
24124: PPUSH
24125: LD_INT 25
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 24
24137: PUSH
24138: LD_INT 750
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PPUSH
24149: CALL_OW 72
24153: ST_TO_ADDR
24154: GO 24217
// if tmp < 5 then
24156: LD_VAR 0 4
24160: PUSH
24161: LD_INT 5
24163: LESS
24164: IFFALSE 24217
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
24166: LD_ADDR_VAR 0 4
24170: PUSH
24171: LD_VAR 0 4
24175: PUSH
24176: LD_EXP 57
24180: PUSH
24181: LD_VAR 0 2
24185: ARRAY
24186: PPUSH
24187: LD_INT 25
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 24
24199: PUSH
24200: LD_INT 750
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 72
24215: UNION
24216: ST_TO_ADDR
// if not tmp then
24217: LD_VAR 0 4
24221: NOT
24222: IFFALSE 24226
// continue ;
24224: GO 23518
// for j in tmp do
24226: LD_ADDR_VAR 0 3
24230: PUSH
24231: LD_VAR 0 4
24235: PUSH
24236: FOR_IN
24237: IFFALSE 24327
// if not GetTag ( j ) then
24239: LD_VAR 0 3
24243: PPUSH
24244: CALL_OW 110
24248: NOT
24249: IFFALSE 24325
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
24251: LD_ADDR_EXP 74
24255: PUSH
24256: LD_EXP 74
24260: PPUSH
24261: LD_VAR 0 2
24265: PUSH
24266: LD_EXP 74
24270: PUSH
24271: LD_VAR 0 2
24275: ARRAY
24276: PUSH
24277: LD_INT 1
24279: PLUS
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: CALL 44799 0 3
24294: ST_TO_ADDR
// SetTag ( j , 107 ) ;
24295: LD_VAR 0 3
24299: PPUSH
24300: LD_INT 107
24302: PPUSH
24303: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
24307: LD_EXP 74
24311: PUSH
24312: LD_VAR 0 2
24316: ARRAY
24317: PUSH
24318: LD_INT 5
24320: GREATEREQUAL
24321: IFFALSE 24325
// break ;
24323: GO 24327
// end ;
24325: GO 24236
24327: POP
24328: POP
// end ; if mc_crates_collector [ i ] and target then
24329: LD_EXP 74
24333: PUSH
24334: LD_VAR 0 2
24338: ARRAY
24339: PUSH
24340: LD_VAR 0 5
24344: AND
24345: IFFALSE 24513
// begin if mc_crates_collector [ i ] < target [ 1 ] then
24347: LD_EXP 74
24351: PUSH
24352: LD_VAR 0 2
24356: ARRAY
24357: PUSH
24358: LD_VAR 0 5
24362: PUSH
24363: LD_INT 1
24365: ARRAY
24366: LESS
24367: IFFALSE 24387
// tmp := mc_crates_collector [ i ] else
24369: LD_ADDR_VAR 0 4
24373: PUSH
24374: LD_EXP 74
24378: PUSH
24379: LD_VAR 0 2
24383: ARRAY
24384: ST_TO_ADDR
24385: GO 24401
// tmp := target [ 1 ] ;
24387: LD_ADDR_VAR 0 4
24391: PUSH
24392: LD_VAR 0 5
24396: PUSH
24397: LD_INT 1
24399: ARRAY
24400: ST_TO_ADDR
// for j = 1 to tmp do
24401: LD_ADDR_VAR 0 3
24405: PUSH
24406: DOUBLE
24407: LD_INT 1
24409: DEC
24410: ST_TO_ADDR
24411: LD_VAR 0 4
24415: PUSH
24416: FOR_TO
24417: IFFALSE 24511
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
24419: LD_EXP 74
24423: PUSH
24424: LD_VAR 0 2
24428: ARRAY
24429: PUSH
24430: LD_VAR 0 3
24434: ARRAY
24435: PPUSH
24436: CALL_OW 310
24440: IFFALSE 24463
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
24442: LD_EXP 74
24446: PUSH
24447: LD_VAR 0 2
24451: ARRAY
24452: PUSH
24453: LD_VAR 0 3
24457: ARRAY
24458: PPUSH
24459: CALL_OW 122
// wait ( 3 ) ;
24463: LD_INT 3
24465: PPUSH
24466: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
24470: LD_EXP 74
24474: PUSH
24475: LD_VAR 0 2
24479: ARRAY
24480: PUSH
24481: LD_VAR 0 3
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 5
24491: PUSH
24492: LD_INT 2
24494: ARRAY
24495: PPUSH
24496: LD_VAR 0 5
24500: PUSH
24501: LD_INT 3
24503: ARRAY
24504: PPUSH
24505: CALL_OW 117
// end ;
24509: GO 24416
24511: POP
24512: POP
// end ; end else
24513: GO 24978
// begin for j in cargo do
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_VAR 0 6
24524: PUSH
24525: FOR_IN
24526: IFFALSE 24976
// begin if GetTag ( j ) <> 0 then
24528: LD_VAR 0 3
24532: PPUSH
24533: CALL_OW 110
24537: PUSH
24538: LD_INT 0
24540: NONEQUAL
24541: IFFALSE 24545
// continue ;
24543: GO 24525
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
24545: LD_VAR 0 3
24549: PPUSH
24550: CALL_OW 262
24554: PUSH
24555: LD_INT 2
24557: EQUAL
24558: PUSH
24559: LD_VAR 0 3
24563: PPUSH
24564: CALL_OW 261
24568: PUSH
24569: LD_INT 15
24571: LESS
24572: AND
24573: IFFALSE 24577
// continue ;
24575: GO 24525
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
24577: LD_VAR 0 3
24581: PPUSH
24582: CALL_OW 262
24586: PUSH
24587: LD_INT 1
24589: EQUAL
24590: PUSH
24591: LD_VAR 0 3
24595: PPUSH
24596: CALL_OW 261
24600: PUSH
24601: LD_INT 10
24603: LESS
24604: AND
24605: IFFALSE 24915
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24607: LD_ADDR_VAR 0 7
24611: PUSH
24612: LD_EXP 57
24616: PUSH
24617: LD_VAR 0 2
24621: ARRAY
24622: PPUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 30
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: PPUSH
24651: CALL_OW 72
24655: ST_TO_ADDR
// if not depot then
24656: LD_VAR 0 7
24660: NOT
24661: IFFALSE 24665
// continue ;
24663: GO 24525
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
24665: LD_VAR 0 3
24669: PPUSH
24670: LD_VAR 0 7
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: CALL_OW 74
24684: PPUSH
24685: CALL_OW 296
24689: PUSH
24690: LD_INT 6
24692: LESS
24693: IFFALSE 24709
// SetFuel ( j , 100 ) else
24695: LD_VAR 0 3
24699: PPUSH
24700: LD_INT 100
24702: PPUSH
24703: CALL_OW 240
24707: GO 24915
// if GetFuel ( j ) = 0 then
24709: LD_VAR 0 3
24713: PPUSH
24714: CALL_OW 261
24718: PUSH
24719: LD_INT 0
24721: EQUAL
24722: IFFALSE 24915
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
24724: LD_ADDR_EXP 76
24728: PUSH
24729: LD_EXP 76
24733: PPUSH
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_EXP 76
24743: PUSH
24744: LD_VAR 0 2
24748: ARRAY
24749: PUSH
24750: LD_VAR 0 3
24754: DIFF
24755: PPUSH
24756: CALL_OW 1
24760: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
24761: LD_VAR 0 3
24765: PPUSH
24766: CALL_OW 263
24770: PUSH
24771: LD_INT 1
24773: EQUAL
24774: IFFALSE 24790
// ComExitVehicle ( IsInUnit ( j ) ) ;
24776: LD_VAR 0 3
24780: PPUSH
24781: CALL_OW 310
24785: PPUSH
24786: CALL_OW 121
// if GetControl ( j ) = control_remote then
24790: LD_VAR 0 3
24794: PPUSH
24795: CALL_OW 263
24799: PUSH
24800: LD_INT 2
24802: EQUAL
24803: IFFALSE 24814
// ComUnlink ( j ) ;
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
24814: LD_ADDR_VAR 0 8
24818: PUSH
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_INT 3
24826: PPUSH
24827: CALL 32611 0 2
24831: ST_TO_ADDR
// if fac then
24832: LD_VAR 0 8
24836: IFFALSE 24913
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
24838: LD_ADDR_VAR 0 9
24842: PUSH
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: CALL_OW 265
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL_OW 262
24867: PPUSH
24868: LD_VAR 0 3
24872: PPUSH
24873: CALL_OW 263
24877: PPUSH
24878: LD_VAR 0 3
24882: PPUSH
24883: CALL_OW 264
24887: PPUSH
24888: CALL 41964 0 5
24892: ST_TO_ADDR
// if components then
24893: LD_VAR 0 9
24897: IFFALSE 24913
// MC_InsertProduceList ( i , components ) ;
24899: LD_VAR 0 2
24903: PPUSH
24904: LD_VAR 0 9
24908: PPUSH
24909: CALL 32178 0 2
// end ; continue ;
24913: GO 24525
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 289
24927: PUSH
24928: LD_INT 100
24930: LESS
24931: PUSH
24932: LD_VAR 0 3
24936: PPUSH
24937: CALL_OW 314
24941: NOT
24942: AND
24943: IFFALSE 24972
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_VAR 0 5
24954: PUSH
24955: LD_INT 2
24957: ARRAY
24958: PPUSH
24959: LD_VAR 0 5
24963: PUSH
24964: LD_INT 3
24966: ARRAY
24967: PPUSH
24968: CALL_OW 117
// break ;
24972: GO 24976
// end ;
24974: GO 24525
24976: POP
24977: POP
// end ; end ;
24978: GO 23518
24980: POP
24981: POP
// end ;
24982: LD_VAR 0 1
24986: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
24987: LD_INT 0
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
// if not mc_bases then
24993: LD_EXP 57
24997: NOT
24998: IFFALSE 25002
// exit ;
25000: GO 25163
// for i = 1 to mc_bases do
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: DOUBLE
25008: LD_INT 1
25010: DEC
25011: ST_TO_ADDR
25012: LD_EXP 57
25016: PUSH
25017: FOR_TO
25018: IFFALSE 25161
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
25020: LD_ADDR_VAR 0 4
25024: PUSH
25025: LD_EXP 76
25029: PUSH
25030: LD_VAR 0 2
25034: ARRAY
25035: PUSH
25036: LD_EXP 79
25040: PUSH
25041: LD_VAR 0 2
25045: ARRAY
25046: ADD
25047: PPUSH
25048: LD_INT 33
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PPUSH
25058: CALL_OW 72
25062: ST_TO_ADDR
// if tmp then
25063: LD_VAR 0 4
25067: IFFALSE 25159
// for j in tmp do
25069: LD_ADDR_VAR 0 3
25073: PUSH
25074: LD_VAR 0 4
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25157
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
25082: LD_VAR 0 3
25086: PPUSH
25087: CALL_OW 312
25091: NOT
25092: PUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: CALL_OW 256
25102: PUSH
25103: LD_INT 250
25105: GREATEREQUAL
25106: AND
25107: IFFALSE 25120
// Connect ( j ) else
25109: LD_VAR 0 3
25113: PPUSH
25114: CALL 47317 0 1
25118: GO 25155
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
25120: LD_VAR 0 3
25124: PPUSH
25125: CALL_OW 256
25129: PUSH
25130: LD_INT 250
25132: LESS
25133: PUSH
25134: LD_VAR 0 3
25138: PPUSH
25139: CALL_OW 312
25143: AND
25144: IFFALSE 25155
// ComUnlink ( j ) ;
25146: LD_VAR 0 3
25150: PPUSH
25151: CALL_OW 136
25155: GO 25079
25157: POP
25158: POP
// end ;
25159: GO 25017
25161: POP
25162: POP
// end ;
25163: LD_VAR 0 1
25167: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
// if not mc_bases then
25175: LD_EXP 57
25179: NOT
25180: IFFALSE 25184
// exit ;
25182: GO 25644
// for i = 1 to mc_bases do
25184: LD_ADDR_VAR 0 2
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_EXP 57
25198: PUSH
25199: FOR_TO
25200: IFFALSE 25642
// begin if not mc_produce [ i ] then
25202: LD_EXP 78
25206: PUSH
25207: LD_VAR 0 2
25211: ARRAY
25212: NOT
25213: IFFALSE 25217
// continue ;
25215: GO 25199
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
25217: LD_ADDR_VAR 0 5
25221: PUSH
25222: LD_EXP 57
25226: PUSH
25227: LD_VAR 0 2
25231: ARRAY
25232: PPUSH
25233: LD_INT 30
25235: PUSH
25236: LD_INT 3
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PPUSH
25243: CALL_OW 72
25247: ST_TO_ADDR
// if not fac then
25248: LD_VAR 0 5
25252: NOT
25253: IFFALSE 25257
// continue ;
25255: GO 25199
// for j in fac do
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_VAR 0 5
25266: PUSH
25267: FOR_IN
25268: IFFALSE 25638
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
25270: LD_VAR 0 3
25274: PPUSH
25275: CALL_OW 461
25279: PUSH
25280: LD_INT 2
25282: NONEQUAL
25283: PUSH
25284: LD_VAR 0 3
25288: PPUSH
25289: LD_INT 15
25291: PPUSH
25292: CALL 46990 0 2
25296: PUSH
25297: LD_INT 4
25299: ARRAY
25300: OR
25301: PUSH
25302: LD_VAR 0 3
25306: PPUSH
25307: CALL_OW 313
25311: PUSH
25312: LD_INT 0
25314: EQUAL
25315: OR
25316: IFFALSE 25320
// continue ;
25318: GO 25267
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
25320: LD_VAR 0 3
25324: PPUSH
25325: LD_EXP 78
25329: PUSH
25330: LD_VAR 0 2
25334: ARRAY
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: PPUSH
25344: LD_EXP 78
25348: PUSH
25349: LD_VAR 0 2
25353: ARRAY
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: PUSH
25359: LD_INT 2
25361: ARRAY
25362: PPUSH
25363: LD_EXP 78
25367: PUSH
25368: LD_VAR 0 2
25372: ARRAY
25373: PUSH
25374: LD_INT 1
25376: ARRAY
25377: PUSH
25378: LD_INT 3
25380: ARRAY
25381: PPUSH
25382: LD_EXP 78
25386: PUSH
25387: LD_VAR 0 2
25391: ARRAY
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: PUSH
25397: LD_INT 4
25399: ARRAY
25400: PPUSH
25401: CALL_OW 448
25405: PUSH
25406: LD_VAR 0 3
25410: PPUSH
25411: LD_EXP 78
25415: PUSH
25416: LD_VAR 0 2
25420: ARRAY
25421: PUSH
25422: LD_INT 1
25424: ARRAY
25425: PUSH
25426: LD_INT 1
25428: ARRAY
25429: PUSH
25430: LD_EXP 78
25434: PUSH
25435: LD_VAR 0 2
25439: ARRAY
25440: PUSH
25441: LD_INT 1
25443: ARRAY
25444: PUSH
25445: LD_INT 2
25447: ARRAY
25448: PUSH
25449: LD_EXP 78
25453: PUSH
25454: LD_VAR 0 2
25458: ARRAY
25459: PUSH
25460: LD_INT 1
25462: ARRAY
25463: PUSH
25464: LD_INT 3
25466: ARRAY
25467: PUSH
25468: LD_EXP 78
25472: PUSH
25473: LD_VAR 0 2
25477: ARRAY
25478: PUSH
25479: LD_INT 1
25481: ARRAY
25482: PUSH
25483: LD_INT 4
25485: ARRAY
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL 50531 0 2
25497: AND
25498: IFFALSE 25636
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
25500: LD_VAR 0 3
25504: PPUSH
25505: LD_EXP 78
25509: PUSH
25510: LD_VAR 0 2
25514: ARRAY
25515: PUSH
25516: LD_INT 1
25518: ARRAY
25519: PUSH
25520: LD_INT 1
25522: ARRAY
25523: PPUSH
25524: LD_EXP 78
25528: PUSH
25529: LD_VAR 0 2
25533: ARRAY
25534: PUSH
25535: LD_INT 1
25537: ARRAY
25538: PUSH
25539: LD_INT 2
25541: ARRAY
25542: PPUSH
25543: LD_EXP 78
25547: PUSH
25548: LD_VAR 0 2
25552: ARRAY
25553: PUSH
25554: LD_INT 1
25556: ARRAY
25557: PUSH
25558: LD_INT 3
25560: ARRAY
25561: PPUSH
25562: LD_EXP 78
25566: PUSH
25567: LD_VAR 0 2
25571: ARRAY
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PUSH
25577: LD_INT 4
25579: ARRAY
25580: PPUSH
25581: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
25585: LD_ADDR_VAR 0 4
25589: PUSH
25590: LD_EXP 78
25594: PUSH
25595: LD_VAR 0 2
25599: ARRAY
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: CALL_OW 3
25608: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
25609: LD_ADDR_EXP 78
25613: PUSH
25614: LD_EXP 78
25618: PPUSH
25619: LD_VAR 0 2
25623: PPUSH
25624: LD_VAR 0 4
25628: PPUSH
25629: CALL_OW 1
25633: ST_TO_ADDR
// break ;
25634: GO 25638
// end ; end ;
25636: GO 25267
25638: POP
25639: POP
// end ;
25640: GO 25199
25642: POP
25643: POP
// end ;
25644: LD_VAR 0 1
25648: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
25653: PPUSH
// if not mc_bases then
25654: LD_EXP 57
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25752
// for i = 1 to mc_bases do
25663: LD_ADDR_VAR 0 2
25667: PUSH
25668: DOUBLE
25669: LD_INT 1
25671: DEC
25672: ST_TO_ADDR
25673: LD_EXP 57
25677: PUSH
25678: FOR_TO
25679: IFFALSE 25750
// begin if mc_attack [ i ] then
25681: LD_EXP 77
25685: PUSH
25686: LD_VAR 0 2
25690: ARRAY
25691: IFFALSE 25748
// begin tmp := mc_attack [ i ] [ 1 ] ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_EXP 77
25702: PUSH
25703: LD_VAR 0 2
25707: ARRAY
25708: PUSH
25709: LD_INT 1
25711: ARRAY
25712: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25713: LD_ADDR_EXP 77
25717: PUSH
25718: LD_EXP 77
25722: PPUSH
25723: LD_VAR 0 2
25727: PPUSH
25728: EMPTY
25729: PPUSH
25730: CALL_OW 1
25734: ST_TO_ADDR
// Attack ( tmp ) ;
25735: LD_VAR 0 3
25739: PPUSH
25740: CALL 72635 0 1
// exit ;
25744: POP
25745: POP
25746: GO 25752
// end ; end ;
25748: GO 25678
25750: POP
25751: POP
// end ;
25752: LD_VAR 0 1
25756: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
// if not mc_bases then
25766: LD_EXP 57
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 26150
// for i = 1 to mc_bases do
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_EXP 57
25789: PUSH
25790: FOR_TO
25791: IFFALSE 26148
// begin if not mc_bases [ i ] then
25793: LD_EXP 57
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: NOT
25804: IFFALSE 25808
// continue ;
25806: GO 25790
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
25808: LD_ADDR_VAR 0 7
25812: PUSH
25813: LD_EXP 57
25817: PUSH
25818: LD_VAR 0 2
25822: ARRAY
25823: PUSH
25824: LD_INT 1
25826: ARRAY
25827: PPUSH
25828: CALL 41268 0 1
25832: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
25833: LD_ADDR_EXP 80
25837: PUSH
25838: LD_EXP 80
25842: PPUSH
25843: LD_VAR 0 2
25847: PPUSH
25848: LD_EXP 57
25852: PUSH
25853: LD_VAR 0 2
25857: ARRAY
25858: PUSH
25859: LD_INT 1
25861: ARRAY
25862: PPUSH
25863: CALL_OW 255
25867: PPUSH
25868: LD_EXP 82
25872: PUSH
25873: LD_VAR 0 2
25877: ARRAY
25878: PPUSH
25879: CALL 39228 0 2
25883: PPUSH
25884: CALL_OW 1
25888: ST_TO_ADDR
// if not mc_scan [ i ] then
25889: LD_EXP 80
25893: PUSH
25894: LD_VAR 0 2
25898: ARRAY
25899: NOT
25900: IFFALSE 26055
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25902: LD_ADDR_VAR 0 4
25906: PUSH
25907: LD_EXP 57
25911: PUSH
25912: LD_VAR 0 2
25916: ARRAY
25917: PPUSH
25918: LD_INT 2
25920: PUSH
25921: LD_INT 25
25923: PUSH
25924: LD_INT 5
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 25
25933: PUSH
25934: LD_INT 8
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 25
25943: PUSH
25944: LD_INT 9
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: PPUSH
25957: CALL_OW 72
25961: ST_TO_ADDR
// if not tmp then
25962: LD_VAR 0 4
25966: NOT
25967: IFFALSE 25971
// continue ;
25969: GO 25790
// for j in tmp do
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_VAR 0 4
25980: PUSH
25981: FOR_IN
25982: IFFALSE 26053
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
25984: LD_VAR 0 3
25988: PPUSH
25989: CALL_OW 310
25993: PPUSH
25994: CALL_OW 266
25998: PUSH
25999: LD_INT 5
26001: EQUAL
26002: PUSH
26003: LD_VAR 0 3
26007: PPUSH
26008: CALL_OW 257
26012: PUSH
26013: LD_INT 1
26015: EQUAL
26016: AND
26017: PUSH
26018: LD_VAR 0 3
26022: PPUSH
26023: CALL_OW 459
26027: NOT
26028: AND
26029: PUSH
26030: LD_VAR 0 7
26034: AND
26035: IFFALSE 26051
// ComChangeProfession ( j , class ) ;
26037: LD_VAR 0 3
26041: PPUSH
26042: LD_VAR 0 7
26046: PPUSH
26047: CALL_OW 123
26051: GO 25981
26053: POP
26054: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
26055: LD_EXP 80
26059: PUSH
26060: LD_VAR 0 2
26064: ARRAY
26065: PUSH
26066: LD_EXP 79
26070: PUSH
26071: LD_VAR 0 2
26075: ARRAY
26076: AND
26077: IFFALSE 26146
// begin tmp := mc_defender [ i ] ;
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_EXP 79
26088: PUSH
26089: LD_VAR 0 2
26093: ARRAY
26094: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
26095: LD_ADDR_EXP 79
26099: PUSH
26100: LD_EXP 79
26104: PPUSH
26105: LD_VAR 0 2
26109: PPUSH
26110: EMPTY
26111: PPUSH
26112: CALL_OW 1
26116: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_VAR 0 4
26126: PPUSH
26127: LD_EXP 80
26131: PUSH
26132: LD_VAR 0 2
26136: ARRAY
26137: PPUSH
26138: CALL 39761 0 3
// exit ;
26142: POP
26143: POP
26144: GO 26150
// end ; end ;
26146: GO 25790
26148: POP
26149: POP
// end ;
26150: LD_VAR 0 1
26154: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
26161: PPUSH
26162: PPUSH
26163: PPUSH
26164: PPUSH
26165: PPUSH
// if not mc_bases then
26166: LD_EXP 57
26170: NOT
26171: IFFALSE 26175
// exit ;
26173: GO 27119
// for i = 1 to mc_bases do
26175: LD_ADDR_VAR 0 2
26179: PUSH
26180: DOUBLE
26181: LD_INT 1
26183: DEC
26184: ST_TO_ADDR
26185: LD_EXP 57
26189: PUSH
26190: FOR_TO
26191: IFFALSE 27117
// begin tmp := mc_lab [ i ] ;
26193: LD_ADDR_VAR 0 6
26197: PUSH
26198: LD_EXP 90
26202: PUSH
26203: LD_VAR 0 2
26207: ARRAY
26208: ST_TO_ADDR
// if not tmp then
26209: LD_VAR 0 6
26213: NOT
26214: IFFALSE 26218
// continue ;
26216: GO 26190
// for j in tmp do
26218: LD_ADDR_VAR 0 3
26222: PUSH
26223: LD_VAR 0 6
26227: PUSH
26228: FOR_IN
26229: IFFALSE 27113
// begin side := GetSide ( j ) ;
26231: LD_ADDR_VAR 0 4
26235: PUSH
26236: LD_VAR 0 3
26240: PPUSH
26241: CALL_OW 255
26245: ST_TO_ADDR
// if not mc_tech [ side ] then
26246: LD_EXP 84
26250: PUSH
26251: LD_VAR 0 4
26255: ARRAY
26256: NOT
26257: IFFALSE 26261
// continue ;
26259: GO 26228
// if BuildingStatus ( j ) = bs_idle then
26261: LD_VAR 0 3
26265: PPUSH
26266: CALL_OW 461
26270: PUSH
26271: LD_INT 2
26273: EQUAL
26274: IFFALSE 26347
// for t in mc_tech [ side ] do
26276: LD_ADDR_VAR 0 5
26280: PUSH
26281: LD_EXP 84
26285: PUSH
26286: LD_VAR 0 4
26290: ARRAY
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26345
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_VAR 0 5
26304: PPUSH
26305: CALL_OW 430
26309: PUSH
26310: LD_VAR 0 4
26314: PPUSH
26315: LD_VAR 0 5
26319: PPUSH
26320: CALL 38333 0 2
26324: AND
26325: IFFALSE 26343
// begin ComResearch ( j , t ) ;
26327: LD_VAR 0 3
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL_OW 124
// break ;
26341: GO 26345
// end ;
26343: GO 26292
26345: POP
26346: POP
// if BuildingStatus ( j ) = bs_need_ape then
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL_OW 461
26356: PUSH
26357: LD_INT 10
26359: EQUAL
26360: IFFALSE 26948
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
26362: LD_EXP 86
26366: PUSH
26367: LD_VAR 0 2
26371: ARRAY
26372: NOT
26373: PUSH
26374: LD_EXP 87
26378: PUSH
26379: LD_VAR 0 2
26383: ARRAY
26384: NOT
26385: AND
26386: PUSH
26387: LD_EXP 84
26391: PUSH
26392: LD_VAR 0 4
26396: ARRAY
26397: PUSH
26398: LD_INT 1
26400: GREATER
26401: AND
26402: IFFALSE 26533
// begin ComCancel ( j ) ;
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
26413: LD_ADDR_EXP 84
26417: PUSH
26418: LD_EXP 84
26422: PPUSH
26423: LD_VAR 0 4
26427: PPUSH
26428: LD_EXP 84
26432: PUSH
26433: LD_VAR 0 4
26437: ARRAY
26438: PPUSH
26439: LD_EXP 84
26443: PUSH
26444: LD_VAR 0 4
26448: ARRAY
26449: PUSH
26450: LD_INT 1
26452: MINUS
26453: PPUSH
26454: LD_EXP 84
26458: PUSH
26459: LD_VAR 0 4
26463: ARRAY
26464: PPUSH
26465: LD_INT 0
26467: PPUSH
26468: CALL 43782 0 4
26472: PPUSH
26473: CALL_OW 1
26477: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
26478: LD_ADDR_EXP 84
26482: PUSH
26483: LD_EXP 84
26487: PPUSH
26488: LD_VAR 0 4
26492: PPUSH
26493: LD_EXP 84
26497: PUSH
26498: LD_VAR 0 4
26502: ARRAY
26503: PPUSH
26504: LD_EXP 84
26508: PUSH
26509: LD_VAR 0 4
26513: ARRAY
26514: PPUSH
26515: LD_INT 1
26517: PPUSH
26518: LD_INT 0
26520: PPUSH
26521: CALL 43782 0 4
26525: PPUSH
26526: CALL_OW 1
26530: ST_TO_ADDR
// continue ;
26531: GO 26228
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
26533: LD_EXP 86
26537: PUSH
26538: LD_VAR 0 2
26542: ARRAY
26543: PUSH
26544: LD_EXP 87
26548: PUSH
26549: LD_VAR 0 2
26553: ARRAY
26554: NOT
26555: AND
26556: IFFALSE 26683
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
26558: LD_ADDR_EXP 87
26562: PUSH
26563: LD_EXP 87
26567: PPUSH
26568: LD_VAR 0 2
26572: PUSH
26573: LD_EXP 87
26577: PUSH
26578: LD_VAR 0 2
26582: ARRAY
26583: PUSH
26584: LD_INT 1
26586: PLUS
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PPUSH
26592: LD_EXP 86
26596: PUSH
26597: LD_VAR 0 2
26601: ARRAY
26602: PUSH
26603: LD_INT 1
26605: ARRAY
26606: PPUSH
26607: CALL 44799 0 3
26611: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
26612: LD_EXP 86
26616: PUSH
26617: LD_VAR 0 2
26621: ARRAY
26622: PUSH
26623: LD_INT 1
26625: ARRAY
26626: PPUSH
26627: LD_INT 112
26629: PPUSH
26630: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
26634: LD_ADDR_VAR 0 9
26638: PUSH
26639: LD_EXP 86
26643: PUSH
26644: LD_VAR 0 2
26648: ARRAY
26649: PPUSH
26650: LD_INT 1
26652: PPUSH
26653: CALL_OW 3
26657: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
26658: LD_ADDR_EXP 86
26662: PUSH
26663: LD_EXP 86
26667: PPUSH
26668: LD_VAR 0 2
26672: PPUSH
26673: LD_VAR 0 9
26677: PPUSH
26678: CALL_OW 1
26682: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
26683: LD_EXP 86
26687: PUSH
26688: LD_VAR 0 2
26692: ARRAY
26693: PUSH
26694: LD_EXP 87
26698: PUSH
26699: LD_VAR 0 2
26703: ARRAY
26704: AND
26705: PUSH
26706: LD_EXP 87
26710: PUSH
26711: LD_VAR 0 2
26715: ARRAY
26716: PUSH
26717: LD_INT 1
26719: ARRAY
26720: PPUSH
26721: CALL_OW 310
26725: NOT
26726: AND
26727: PUSH
26728: LD_VAR 0 3
26732: PPUSH
26733: CALL_OW 313
26737: PUSH
26738: LD_INT 6
26740: EQUAL
26741: AND
26742: IFFALSE 26798
// begin tmp2 := UnitsInside ( j ) ;
26744: LD_ADDR_VAR 0 9
26748: PUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: CALL_OW 313
26758: ST_TO_ADDR
// if tmp2 = 6 then
26759: LD_VAR 0 9
26763: PUSH
26764: LD_INT 6
26766: EQUAL
26767: IFFALSE 26798
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
26769: LD_VAR 0 9
26773: PUSH
26774: LD_INT 1
26776: ARRAY
26777: PPUSH
26778: LD_INT 112
26780: PPUSH
26781: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
26785: LD_VAR 0 9
26789: PUSH
26790: LD_INT 1
26792: ARRAY
26793: PPUSH
26794: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
26798: LD_EXP 87
26802: PUSH
26803: LD_VAR 0 2
26807: ARRAY
26808: PUSH
26809: LD_EXP 87
26813: PUSH
26814: LD_VAR 0 2
26818: ARRAY
26819: PUSH
26820: LD_INT 1
26822: ARRAY
26823: PPUSH
26824: CALL_OW 314
26828: NOT
26829: AND
26830: PUSH
26831: LD_EXP 87
26835: PUSH
26836: LD_VAR 0 2
26840: ARRAY
26841: PUSH
26842: LD_INT 1
26844: ARRAY
26845: PPUSH
26846: CALL_OW 310
26850: NOT
26851: AND
26852: IFFALSE 26878
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
26854: LD_EXP 87
26858: PUSH
26859: LD_VAR 0 2
26863: ARRAY
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PPUSH
26869: LD_VAR 0 3
26873: PPUSH
26874: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
26878: LD_EXP 87
26882: PUSH
26883: LD_VAR 0 2
26887: ARRAY
26888: PUSH
26889: LD_INT 1
26891: ARRAY
26892: PPUSH
26893: CALL_OW 310
26897: PUSH
26898: LD_EXP 87
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: PUSH
26909: LD_INT 1
26911: ARRAY
26912: PPUSH
26913: CALL_OW 310
26917: PPUSH
26918: CALL_OW 461
26922: PUSH
26923: LD_INT 3
26925: NONEQUAL
26926: AND
26927: IFFALSE 26948
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
26929: LD_EXP 87
26933: PUSH
26934: LD_VAR 0 2
26938: ARRAY
26939: PUSH
26940: LD_INT 1
26942: ARRAY
26943: PPUSH
26944: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 461
26957: PUSH
26958: LD_INT 6
26960: EQUAL
26961: PUSH
26962: LD_VAR 0 6
26966: PUSH
26967: LD_INT 1
26969: GREATER
26970: AND
26971: IFFALSE 27111
// begin sci := [ ] ;
26973: LD_ADDR_VAR 0 8
26977: PUSH
26978: EMPTY
26979: ST_TO_ADDR
// for x in tmp diff j do
26980: LD_ADDR_VAR 0 7
26984: PUSH
26985: LD_VAR 0 6
26989: PUSH
26990: LD_VAR 0 3
26994: DIFF
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27037
// begin if BuildingStatus ( x ) = bs_idle then
26999: LD_VAR 0 7
27003: PPUSH
27004: CALL_OW 461
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27035
// sci := sci ^ UnitsInside ( x ) ;
27014: LD_ADDR_VAR 0 8
27018: PUSH
27019: LD_VAR 0 8
27023: PUSH
27024: LD_VAR 0 7
27028: PPUSH
27029: CALL_OW 313
27033: ADD
27034: ST_TO_ADDR
// end ;
27035: GO 26996
27037: POP
27038: POP
// if not sci then
27039: LD_VAR 0 8
27043: NOT
27044: IFFALSE 27048
// continue ;
27046: GO 26228
// for x in sci do
27048: LD_ADDR_VAR 0 7
27052: PUSH
27053: LD_VAR 0 8
27057: PUSH
27058: FOR_IN
27059: IFFALSE 27109
// if IsInUnit ( x ) and not HasTask ( x ) then
27061: LD_VAR 0 7
27065: PPUSH
27066: CALL_OW 310
27070: PUSH
27071: LD_VAR 0 7
27075: PPUSH
27076: CALL_OW 314
27080: NOT
27081: AND
27082: IFFALSE 27107
// begin ComExitBuilding ( x ) ;
27084: LD_VAR 0 7
27088: PPUSH
27089: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
27093: LD_VAR 0 7
27097: PPUSH
27098: LD_VAR 0 3
27102: PPUSH
27103: CALL_OW 180
// end ;
27107: GO 27058
27109: POP
27110: POP
// end ; end ;
27111: GO 26228
27113: POP
27114: POP
// end ;
27115: GO 26190
27117: POP
27118: POP
// end ;
27119: LD_VAR 0 1
27123: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
27124: LD_INT 0
27126: PPUSH
27127: PPUSH
27128: PPUSH
27129: PPUSH
27130: PPUSH
27131: PPUSH
27132: PPUSH
27133: PPUSH
// if not mc_bases or not mc_parking then
27134: LD_EXP 57
27138: NOT
27139: PUSH
27140: LD_EXP 81
27144: NOT
27145: OR
27146: IFFALSE 27150
// exit ;
27148: GO 27808
// for i = 1 to mc_bases do
27150: LD_ADDR_VAR 0 2
27154: PUSH
27155: DOUBLE
27156: LD_INT 1
27158: DEC
27159: ST_TO_ADDR
27160: LD_EXP 57
27164: PUSH
27165: FOR_TO
27166: IFFALSE 27806
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
27168: LD_EXP 57
27172: PUSH
27173: LD_VAR 0 2
27177: ARRAY
27178: NOT
27179: PUSH
27180: LD_EXP 81
27184: PUSH
27185: LD_VAR 0 2
27189: ARRAY
27190: NOT
27191: OR
27192: IFFALSE 27196
// continue ;
27194: GO 27165
// if mc_scan [ i ] then
27196: LD_EXP 80
27200: PUSH
27201: LD_VAR 0 2
27205: ARRAY
27206: IFFALSE 27232
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27208: LD_ADDR_EXP 69
27212: PUSH
27213: LD_EXP 69
27217: PPUSH
27218: LD_VAR 0 2
27222: PPUSH
27223: EMPTY
27224: PPUSH
27225: CALL_OW 1
27229: ST_TO_ADDR
// continue ;
27230: GO 27165
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
27232: LD_ADDR_VAR 0 5
27236: PUSH
27237: LD_EXP 57
27241: PUSH
27242: LD_VAR 0 2
27246: ARRAY
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: CALL_OW 255
27256: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27257: LD_ADDR_VAR 0 6
27261: PUSH
27262: LD_EXP 57
27266: PUSH
27267: LD_VAR 0 2
27271: ARRAY
27272: PPUSH
27273: LD_INT 30
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 72
27287: ST_TO_ADDR
// if not fac then
27288: LD_VAR 0 6
27292: NOT
27293: IFFALSE 27344
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27295: LD_ADDR_VAR 0 6
27299: PUSH
27300: LD_EXP 57
27304: PUSH
27305: LD_VAR 0 2
27309: ARRAY
27310: PPUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 30
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 30
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: PPUSH
27339: CALL_OW 72
27343: ST_TO_ADDR
// if not fac then
27344: LD_VAR 0 6
27348: NOT
27349: IFFALSE 27353
// continue ;
27351: GO 27165
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27353: LD_ADDR_VAR 0 7
27357: PUSH
27358: LD_EXP 81
27362: PUSH
27363: LD_VAR 0 2
27367: ARRAY
27368: PPUSH
27369: LD_INT 22
27371: PUSH
27372: LD_VAR 0 5
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 21
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 3
27393: PUSH
27394: LD_INT 24
27396: PUSH
27397: LD_INT 1000
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: PPUSH
27413: CALL_OW 70
27417: PUSH
27418: LD_INT 22
27420: PUSH
27421: LD_VAR 0 5
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 91
27432: PUSH
27433: LD_VAR 0 6
27437: PUSH
27438: LD_INT 1
27440: ARRAY
27441: PUSH
27442: LD_INT 25
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 21
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 3
27462: PUSH
27463: LD_INT 24
27465: PUSH
27466: LD_INT 1000
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: PPUSH
27483: CALL_OW 69
27487: UNION
27488: ST_TO_ADDR
// if not vehs then
27489: LD_VAR 0 7
27493: NOT
27494: IFFALSE 27520
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27496: LD_ADDR_EXP 69
27500: PUSH
27501: LD_EXP 69
27505: PPUSH
27506: LD_VAR 0 2
27510: PPUSH
27511: EMPTY
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// continue ;
27518: GO 27165
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27520: LD_ADDR_VAR 0 8
27524: PUSH
27525: LD_EXP 57
27529: PUSH
27530: LD_VAR 0 2
27534: ARRAY
27535: PPUSH
27536: LD_INT 30
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PPUSH
27546: CALL_OW 72
27550: ST_TO_ADDR
// if tmp then
27551: LD_VAR 0 8
27555: IFFALSE 27658
// begin for j in tmp do
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 8
27566: PUSH
27567: FOR_IN
27568: IFFALSE 27656
// for k in UnitsInside ( j ) do
27570: LD_ADDR_VAR 0 4
27574: PUSH
27575: LD_VAR 0 3
27579: PPUSH
27580: CALL_OW 313
27584: PUSH
27585: FOR_IN
27586: IFFALSE 27652
// if k then
27588: LD_VAR 0 4
27592: IFFALSE 27650
// if not k in mc_repair_vehicle [ i ] then
27594: LD_VAR 0 4
27598: PUSH
27599: LD_EXP 69
27603: PUSH
27604: LD_VAR 0 2
27608: ARRAY
27609: IN
27610: NOT
27611: IFFALSE 27650
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
27613: LD_ADDR_EXP 69
27617: PUSH
27618: LD_EXP 69
27622: PPUSH
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_EXP 69
27632: PUSH
27633: LD_VAR 0 2
27637: ARRAY
27638: PUSH
27639: LD_VAR 0 4
27643: UNION
27644: PPUSH
27645: CALL_OW 1
27649: ST_TO_ADDR
27650: GO 27585
27652: POP
27653: POP
27654: GO 27567
27656: POP
27657: POP
// end ; if not mc_repair_vehicle [ i ] then
27658: LD_EXP 69
27662: PUSH
27663: LD_VAR 0 2
27667: ARRAY
27668: NOT
27669: IFFALSE 27673
// continue ;
27671: GO 27165
// for j in mc_repair_vehicle [ i ] do
27673: LD_ADDR_VAR 0 3
27677: PUSH
27678: LD_EXP 69
27682: PUSH
27683: LD_VAR 0 2
27687: ARRAY
27688: PUSH
27689: FOR_IN
27690: IFFALSE 27802
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
27692: LD_VAR 0 3
27696: PPUSH
27697: CALL_OW 311
27701: NOT
27702: PUSH
27703: LD_VAR 0 3
27707: PUSH
27708: LD_EXP 60
27712: PUSH
27713: LD_VAR 0 2
27717: ARRAY
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: IN
27723: NOT
27724: AND
27725: PUSH
27726: LD_VAR 0 3
27730: PUSH
27731: LD_EXP 60
27735: PUSH
27736: LD_VAR 0 2
27740: ARRAY
27741: PUSH
27742: LD_INT 2
27744: ARRAY
27745: IN
27746: NOT
27747: AND
27748: IFFALSE 27800
// begin if IsInUnit ( j ) then
27750: LD_VAR 0 3
27754: PPUSH
27755: CALL_OW 310
27759: IFFALSE 27770
// ComExitBuilding ( j ) ;
27761: LD_VAR 0 3
27765: PPUSH
27766: CALL_OW 122
// if not HasTask ( j ) then
27770: LD_VAR 0 3
27774: PPUSH
27775: CALL_OW 314
27779: NOT
27780: IFFALSE 27800
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
27782: LD_VAR 0 3
27786: PPUSH
27787: LD_VAR 0 7
27791: PUSH
27792: LD_INT 1
27794: ARRAY
27795: PPUSH
27796: CALL_OW 189
// end ; end ;
27800: GO 27689
27802: POP
27803: POP
// end ;
27804: GO 27165
27806: POP
27807: POP
// end ;
27808: LD_VAR 0 1
27812: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
27813: LD_INT 0
27815: PPUSH
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
// if not mc_bases then
27826: LD_EXP 57
27830: NOT
27831: IFFALSE 27835
// exit ;
27833: GO 28571
// for i = 1 to mc_bases do
27835: LD_ADDR_VAR 0 2
27839: PUSH
27840: DOUBLE
27841: LD_INT 1
27843: DEC
27844: ST_TO_ADDR
27845: LD_EXP 57
27849: PUSH
27850: FOR_TO
27851: IFFALSE 28569
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
27853: LD_EXP 85
27857: PUSH
27858: LD_VAR 0 2
27862: ARRAY
27863: NOT
27864: PUSH
27865: LD_EXP 60
27869: PUSH
27870: LD_VAR 0 2
27874: ARRAY
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: OR
27880: PUSH
27881: LD_EXP 60
27885: PUSH
27886: LD_VAR 0 2
27890: ARRAY
27891: PUSH
27892: LD_INT 2
27894: ARRAY
27895: OR
27896: PUSH
27897: LD_EXP 83
27901: PUSH
27902: LD_VAR 0 2
27906: ARRAY
27907: PPUSH
27908: LD_INT 1
27910: PPUSH
27911: CALL_OW 325
27915: NOT
27916: OR
27917: PUSH
27918: LD_EXP 80
27922: PUSH
27923: LD_VAR 0 2
27927: ARRAY
27928: OR
27929: IFFALSE 27933
// continue ;
27931: GO 27850
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
27933: LD_ADDR_VAR 0 8
27937: PUSH
27938: LD_EXP 57
27942: PUSH
27943: LD_VAR 0 2
27947: ARRAY
27948: PPUSH
27949: LD_INT 25
27951: PUSH
27952: LD_INT 4
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 50
27961: PUSH
27962: EMPTY
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 60
27970: PUSH
27971: EMPTY
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: PPUSH
27983: CALL_OW 72
27987: PUSH
27988: LD_EXP 61
27992: PUSH
27993: LD_VAR 0 2
27997: ARRAY
27998: DIFF
27999: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28000: LD_ADDR_VAR 0 9
28004: PUSH
28005: LD_EXP 57
28009: PUSH
28010: LD_VAR 0 2
28014: ARRAY
28015: PPUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 30
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 30
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 72
28048: ST_TO_ADDR
// if not tmp or not dep then
28049: LD_VAR 0 8
28053: NOT
28054: PUSH
28055: LD_VAR 0 9
28059: NOT
28060: OR
28061: IFFALSE 28065
// continue ;
28063: GO 27850
// side := GetSide ( tmp [ 1 ] ) ;
28065: LD_ADDR_VAR 0 11
28069: PUSH
28070: LD_VAR 0 8
28074: PUSH
28075: LD_INT 1
28077: ARRAY
28078: PPUSH
28079: CALL_OW 255
28083: ST_TO_ADDR
// dep := dep [ 1 ] ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_VAR 0 9
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
28098: LD_ADDR_VAR 0 7
28102: PUSH
28103: LD_EXP 85
28107: PUSH
28108: LD_VAR 0 2
28112: ARRAY
28113: PPUSH
28114: LD_INT 22
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 25
28126: PUSH
28127: LD_INT 12
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PPUSH
28138: CALL_OW 70
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 25
28155: PUSH
28156: LD_INT 12
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 91
28165: PUSH
28166: LD_VAR 0 9
28170: PUSH
28171: LD_INT 20
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: UNION
28189: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
28190: LD_ADDR_VAR 0 10
28194: PUSH
28195: LD_EXP 85
28199: PUSH
28200: LD_VAR 0 2
28204: ARRAY
28205: PPUSH
28206: LD_INT 81
28208: PUSH
28209: LD_VAR 0 11
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PPUSH
28218: CALL_OW 70
28222: ST_TO_ADDR
// if not apes or danger_at_area then
28223: LD_VAR 0 7
28227: NOT
28228: PUSH
28229: LD_VAR 0 10
28233: OR
28234: IFFALSE 28284
// begin if mc_taming [ i ] then
28236: LD_EXP 88
28240: PUSH
28241: LD_VAR 0 2
28245: ARRAY
28246: IFFALSE 28282
// begin MC_Reset ( i , 121 ) ;
28248: LD_VAR 0 2
28252: PPUSH
28253: LD_INT 121
28255: PPUSH
28256: CALL 19079 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
28260: LD_ADDR_EXP 88
28264: PUSH
28265: LD_EXP 88
28269: PPUSH
28270: LD_VAR 0 2
28274: PPUSH
28275: EMPTY
28276: PPUSH
28277: CALL_OW 1
28281: ST_TO_ADDR
// end ; continue ;
28282: GO 27850
// end ; for j in tmp do
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_VAR 0 8
28293: PUSH
28294: FOR_IN
28295: IFFALSE 28565
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
28297: LD_VAR 0 3
28301: PUSH
28302: LD_EXP 88
28306: PUSH
28307: LD_VAR 0 2
28311: ARRAY
28312: IN
28313: NOT
28314: PUSH
28315: LD_EXP 88
28319: PUSH
28320: LD_VAR 0 2
28324: ARRAY
28325: PUSH
28326: LD_INT 3
28328: LESS
28329: AND
28330: IFFALSE 28388
// begin SetTag ( j , 121 ) ;
28332: LD_VAR 0 3
28336: PPUSH
28337: LD_INT 121
28339: PPUSH
28340: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
28344: LD_ADDR_EXP 88
28348: PUSH
28349: LD_EXP 88
28353: PPUSH
28354: LD_VAR 0 2
28358: PUSH
28359: LD_EXP 88
28363: PUSH
28364: LD_VAR 0 2
28368: ARRAY
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PPUSH
28378: LD_VAR 0 3
28382: PPUSH
28383: CALL 44799 0 3
28387: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
28388: LD_VAR 0 3
28392: PUSH
28393: LD_EXP 88
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: IN
28404: IFFALSE 28563
// begin if IsInUnit ( j ) then
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 310
28415: IFFALSE 28426
// ComExitBuilding ( j ) ;
28417: LD_VAR 0 3
28421: PPUSH
28422: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
28426: LD_ADDR_VAR 0 6
28430: PUSH
28431: LD_VAR 0 7
28435: PPUSH
28436: LD_VAR 0 3
28440: PPUSH
28441: CALL_OW 74
28445: ST_TO_ADDR
// if not ape then
28446: LD_VAR 0 6
28450: NOT
28451: IFFALSE 28455
// break ;
28453: GO 28565
// x := GetX ( ape ) ;
28455: LD_ADDR_VAR 0 4
28459: PUSH
28460: LD_VAR 0 6
28464: PPUSH
28465: CALL_OW 250
28469: ST_TO_ADDR
// y := GetY ( ape ) ;
28470: LD_ADDR_VAR 0 5
28474: PUSH
28475: LD_VAR 0 6
28479: PPUSH
28480: CALL_OW 251
28484: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28485: LD_VAR 0 4
28489: PPUSH
28490: LD_VAR 0 5
28494: PPUSH
28495: CALL_OW 488
28499: NOT
28500: PUSH
28501: LD_VAR 0 11
28505: PPUSH
28506: LD_VAR 0 4
28510: PPUSH
28511: LD_VAR 0 5
28515: PPUSH
28516: LD_INT 20
28518: PPUSH
28519: CALL 45293 0 4
28523: PUSH
28524: LD_INT 4
28526: ARRAY
28527: OR
28528: IFFALSE 28532
// break ;
28530: GO 28565
// if not HasTask ( j ) then
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 314
28541: NOT
28542: IFFALSE 28563
// ComTameXY ( j , x , y ) ;
28544: LD_VAR 0 3
28548: PPUSH
28549: LD_VAR 0 4
28553: PPUSH
28554: LD_VAR 0 5
28558: PPUSH
28559: CALL_OW 131
// end ; end ;
28563: GO 28294
28565: POP
28566: POP
// end ;
28567: GO 27850
28569: POP
28570: POP
// end ;
28571: LD_VAR 0 1
28575: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
// if not mc_bases then
28586: LD_EXP 57
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 29205
// for i = 1 to mc_bases do
28595: LD_ADDR_VAR 0 2
28599: PUSH
28600: DOUBLE
28601: LD_INT 1
28603: DEC
28604: ST_TO_ADDR
28605: LD_EXP 57
28609: PUSH
28610: FOR_TO
28611: IFFALSE 29203
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
28613: LD_EXP 86
28617: PUSH
28618: LD_VAR 0 2
28622: ARRAY
28623: NOT
28624: PUSH
28625: LD_EXP 86
28629: PUSH
28630: LD_VAR 0 2
28634: ARRAY
28635: PPUSH
28636: LD_INT 25
28638: PUSH
28639: LD_INT 12
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PPUSH
28646: CALL_OW 72
28650: NOT
28651: OR
28652: IFFALSE 28656
// continue ;
28654: GO 28610
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_EXP 86
28665: PUSH
28666: LD_VAR 0 2
28670: ARRAY
28671: PUSH
28672: LD_INT 1
28674: ARRAY
28675: PPUSH
28676: CALL_OW 255
28680: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_INT 2
28688: PPUSH
28689: CALL_OW 325
28693: IFFALSE 28938
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28695: LD_ADDR_VAR 0 4
28699: PUSH
28700: LD_EXP 86
28704: PUSH
28705: LD_VAR 0 2
28709: ARRAY
28710: PPUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 16
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PPUSH
28721: CALL_OW 72
28725: ST_TO_ADDR
// if tmp < 6 then
28726: LD_VAR 0 4
28730: PUSH
28731: LD_INT 6
28733: LESS
28734: IFFALSE 28938
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28736: LD_ADDR_VAR 0 6
28740: PUSH
28741: LD_EXP 57
28745: PUSH
28746: LD_VAR 0 2
28750: ARRAY
28751: PPUSH
28752: LD_INT 2
28754: PUSH
28755: LD_INT 30
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 30
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 72
28784: ST_TO_ADDR
// if depot then
28785: LD_VAR 0 6
28789: IFFALSE 28938
// begin for j in depot do
28791: LD_ADDR_VAR 0 3
28795: PUSH
28796: LD_VAR 0 6
28800: PUSH
28801: FOR_IN
28802: IFFALSE 28833
// begin if UnitsInside ( j ) < 6 then
28804: LD_VAR 0 3
28808: PPUSH
28809: CALL_OW 313
28813: PUSH
28814: LD_INT 6
28816: LESS
28817: IFFALSE 28831
// begin selected := j ;
28819: LD_ADDR_VAR 0 7
28823: PUSH
28824: LD_VAR 0 3
28828: ST_TO_ADDR
// break ;
28829: GO 28833
// end ; end ;
28831: GO 28801
28833: POP
28834: POP
// if selected then
28835: LD_VAR 0 7
28839: IFFALSE 28938
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_EXP 86
28850: PUSH
28851: LD_VAR 0 2
28855: ARRAY
28856: PPUSH
28857: LD_INT 25
28859: PUSH
28860: LD_INT 12
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PPUSH
28867: CALL_OW 72
28871: PUSH
28872: FOR_IN
28873: IFFALSE 28936
// if not HasTask ( j ) then
28875: LD_VAR 0 3
28879: PPUSH
28880: CALL_OW 314
28884: NOT
28885: IFFALSE 28934
// begin if not IsInUnit ( j ) then
28887: LD_VAR 0 3
28891: PPUSH
28892: CALL_OW 310
28896: NOT
28897: IFFALSE 28913
// ComEnterUnit ( j , selected ) ;
28899: LD_VAR 0 3
28903: PPUSH
28904: LD_VAR 0 7
28908: PPUSH
28909: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
28913: LD_VAR 0 3
28917: PPUSH
28918: LD_INT 16
28920: PPUSH
28921: CALL_OW 183
// AddComExitBuilding ( j ) ;
28925: LD_VAR 0 3
28929: PPUSH
28930: CALL_OW 182
// end ;
28934: GO 28872
28936: POP
28937: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
28938: LD_VAR 0 5
28942: PPUSH
28943: LD_INT 11
28945: PPUSH
28946: CALL_OW 325
28950: IFFALSE 29201
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: LD_EXP 86
28961: PUSH
28962: LD_VAR 0 2
28966: ARRAY
28967: PPUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 16
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PPUSH
28978: CALL_OW 72
28982: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
28983: LD_VAR 0 4
28987: PUSH
28988: LD_INT 6
28990: GREATEREQUAL
28991: PUSH
28992: LD_VAR 0 5
28996: PPUSH
28997: LD_INT 2
28999: PPUSH
29000: CALL_OW 325
29004: NOT
29005: OR
29006: IFFALSE 29201
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
29008: LD_ADDR_VAR 0 8
29012: PUSH
29013: LD_EXP 57
29017: PUSH
29018: LD_VAR 0 2
29022: ARRAY
29023: PPUSH
29024: LD_INT 2
29026: PUSH
29027: LD_INT 30
29029: PUSH
29030: LD_INT 4
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 30
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: PPUSH
29052: CALL_OW 72
29056: ST_TO_ADDR
// if barracks then
29057: LD_VAR 0 8
29061: IFFALSE 29201
// begin for j in barracks do
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_VAR 0 8
29072: PUSH
29073: FOR_IN
29074: IFFALSE 29105
// begin if UnitsInside ( j ) < 6 then
29076: LD_VAR 0 3
29080: PPUSH
29081: CALL_OW 313
29085: PUSH
29086: LD_INT 6
29088: LESS
29089: IFFALSE 29103
// begin selected := j ;
29091: LD_ADDR_VAR 0 7
29095: PUSH
29096: LD_VAR 0 3
29100: ST_TO_ADDR
// break ;
29101: GO 29105
// end ; end ;
29103: GO 29073
29105: POP
29106: POP
// if selected then
29107: LD_VAR 0 7
29111: IFFALSE 29201
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_EXP 86
29122: PUSH
29123: LD_VAR 0 2
29127: ARRAY
29128: PPUSH
29129: LD_INT 25
29131: PUSH
29132: LD_INT 12
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL_OW 72
29143: PUSH
29144: FOR_IN
29145: IFFALSE 29199
// if not IsInUnit ( j ) and not HasTask ( j ) then
29147: LD_VAR 0 3
29151: PPUSH
29152: CALL_OW 310
29156: NOT
29157: PUSH
29158: LD_VAR 0 3
29162: PPUSH
29163: CALL_OW 314
29167: NOT
29168: AND
29169: IFFALSE 29197
// begin ComEnterUnit ( j , selected ) ;
29171: LD_VAR 0 3
29175: PPUSH
29176: LD_VAR 0 7
29180: PPUSH
29181: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
29185: LD_VAR 0 3
29189: PPUSH
29190: LD_INT 15
29192: PPUSH
29193: CALL_OW 183
// end ;
29197: GO 29144
29199: POP
29200: POP
// end ; end ; end ; end ; end ;
29201: GO 28610
29203: POP
29204: POP
// end ;
29205: LD_VAR 0 1
29209: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
// if not mc_bases then
29216: LD_EXP 57
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29403
// for i = 1 to mc_bases do
29225: LD_ADDR_VAR 0 2
29229: PUSH
29230: DOUBLE
29231: LD_INT 1
29233: DEC
29234: ST_TO_ADDR
29235: LD_EXP 57
29239: PUSH
29240: FOR_TO
29241: IFFALSE 29401
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
29243: LD_ADDR_VAR 0 4
29247: PUSH
29248: LD_EXP 57
29252: PUSH
29253: LD_VAR 0 2
29257: ARRAY
29258: PPUSH
29259: LD_INT 25
29261: PUSH
29262: LD_INT 9
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 72
29273: ST_TO_ADDR
// if not tmp then
29274: LD_VAR 0 4
29278: NOT
29279: IFFALSE 29283
// continue ;
29281: GO 29240
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
29283: LD_EXP 83
29287: PUSH
29288: LD_VAR 0 2
29292: ARRAY
29293: PPUSH
29294: LD_INT 29
29296: PPUSH
29297: CALL_OW 325
29301: NOT
29302: PUSH
29303: LD_EXP 83
29307: PUSH
29308: LD_VAR 0 2
29312: ARRAY
29313: PPUSH
29314: LD_INT 28
29316: PPUSH
29317: CALL_OW 325
29321: NOT
29322: AND
29323: IFFALSE 29327
// continue ;
29325: GO 29240
// for j in tmp do
29327: LD_ADDR_VAR 0 3
29331: PUSH
29332: LD_VAR 0 4
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29397
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
29340: LD_VAR 0 3
29344: PUSH
29345: LD_EXP 60
29349: PUSH
29350: LD_VAR 0 2
29354: ARRAY
29355: PUSH
29356: LD_INT 1
29358: ARRAY
29359: IN
29360: NOT
29361: PUSH
29362: LD_VAR 0 3
29366: PUSH
29367: LD_EXP 60
29371: PUSH
29372: LD_VAR 0 2
29376: ARRAY
29377: PUSH
29378: LD_INT 2
29380: ARRAY
29381: IN
29382: NOT
29383: AND
29384: IFFALSE 29395
// ComSpaceTimeShoot ( j ) ;
29386: LD_VAR 0 3
29390: PPUSH
29391: CALL 38424 0 1
29395: GO 29337
29397: POP
29398: POP
// end ;
29399: GO 29240
29401: POP
29402: POP
// end ;
29403: LD_VAR 0 1
29407: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
29408: LD_INT 0
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
// if not mc_bases then
29414: LD_EXP 57
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29445
// for i = 1 to mc_bases do
29423: LD_ADDR_VAR 0 2
29427: PUSH
29428: DOUBLE
29429: LD_INT 1
29431: DEC
29432: ST_TO_ADDR
29433: LD_EXP 57
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29443
// begin end ;
29441: GO 29438
29443: POP
29444: POP
// end ;
29445: LD_VAR 0 1
29449: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
// if not mc_bases then
29455: LD_EXP 57
29459: NOT
29460: IFFALSE 29464
// exit ;
29462: GO 30024
// for i = 1 to mc_bases do
29464: LD_ADDR_VAR 0 2
29468: PUSH
29469: DOUBLE
29470: LD_INT 1
29472: DEC
29473: ST_TO_ADDR
29474: LD_EXP 57
29478: PUSH
29479: FOR_TO
29480: IFFALSE 30022
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_EXP 57
29491: PUSH
29492: LD_VAR 0 2
29496: ARRAY
29497: PPUSH
29498: LD_INT 25
29500: PUSH
29501: LD_INT 4
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PPUSH
29508: CALL_OW 72
29512: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
29513: LD_VAR 0 3
29517: NOT
29518: PUSH
29519: LD_EXP 93
29523: PUSH
29524: LD_VAR 0 2
29528: ARRAY
29529: NOT
29530: OR
29531: IFFALSE 29581
// begin if mc_deposits_finder [ i ] then
29533: LD_EXP 94
29537: PUSH
29538: LD_VAR 0 2
29542: ARRAY
29543: IFFALSE 29579
// begin MC_Reset ( i , 125 ) ;
29545: LD_VAR 0 2
29549: PPUSH
29550: LD_INT 125
29552: PPUSH
29553: CALL 19079 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29557: LD_ADDR_EXP 94
29561: PUSH
29562: LD_EXP 94
29566: PPUSH
29567: LD_VAR 0 2
29571: PPUSH
29572: EMPTY
29573: PPUSH
29574: CALL_OW 1
29578: ST_TO_ADDR
// end ; continue ;
29579: GO 29479
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
29581: LD_EXP 93
29585: PUSH
29586: LD_VAR 0 2
29590: ARRAY
29591: PUSH
29592: LD_INT 1
29594: ARRAY
29595: PUSH
29596: LD_INT 3
29598: ARRAY
29599: PUSH
29600: LD_INT 1
29602: EQUAL
29603: PUSH
29604: LD_INT 20
29606: PPUSH
29607: LD_EXP 83
29611: PUSH
29612: LD_VAR 0 2
29616: ARRAY
29617: PPUSH
29618: CALL_OW 321
29622: PUSH
29623: LD_INT 2
29625: NONEQUAL
29626: AND
29627: IFFALSE 29677
// begin if mc_deposits_finder [ i ] then
29629: LD_EXP 94
29633: PUSH
29634: LD_VAR 0 2
29638: ARRAY
29639: IFFALSE 29675
// begin MC_Reset ( i , 125 ) ;
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_INT 125
29648: PPUSH
29649: CALL 19079 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29653: LD_ADDR_EXP 94
29657: PUSH
29658: LD_EXP 94
29662: PPUSH
29663: LD_VAR 0 2
29667: PPUSH
29668: EMPTY
29669: PPUSH
29670: CALL_OW 1
29674: ST_TO_ADDR
// end ; continue ;
29675: GO 29479
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
29677: LD_EXP 93
29681: PUSH
29682: LD_VAR 0 2
29686: ARRAY
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PUSH
29692: LD_INT 1
29694: ARRAY
29695: PPUSH
29696: LD_EXP 93
29700: PUSH
29701: LD_VAR 0 2
29705: ARRAY
29706: PUSH
29707: LD_INT 1
29709: ARRAY
29710: PUSH
29711: LD_INT 2
29713: ARRAY
29714: PPUSH
29715: LD_EXP 83
29719: PUSH
29720: LD_VAR 0 2
29724: ARRAY
29725: PPUSH
29726: CALL_OW 440
29730: IFFALSE 29773
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
29732: LD_ADDR_EXP 93
29736: PUSH
29737: LD_EXP 93
29741: PPUSH
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_EXP 93
29751: PUSH
29752: LD_VAR 0 2
29756: ARRAY
29757: PPUSH
29758: LD_INT 1
29760: PPUSH
29761: CALL_OW 3
29765: PPUSH
29766: CALL_OW 1
29770: ST_TO_ADDR
29771: GO 30020
// begin if not mc_deposits_finder [ i ] then
29773: LD_EXP 94
29777: PUSH
29778: LD_VAR 0 2
29782: ARRAY
29783: NOT
29784: IFFALSE 29836
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
29786: LD_ADDR_EXP 94
29790: PUSH
29791: LD_EXP 94
29795: PPUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PUSH
29806: LD_INT 1
29808: ARRAY
29809: PUSH
29810: EMPTY
29811: LIST
29812: PPUSH
29813: CALL_OW 1
29817: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
29818: LD_VAR 0 3
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: LD_INT 125
29829: PPUSH
29830: CALL_OW 109
// end else
29834: GO 30020
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
29836: LD_EXP 94
29840: PUSH
29841: LD_VAR 0 2
29845: ARRAY
29846: PUSH
29847: LD_INT 1
29849: ARRAY
29850: PPUSH
29851: CALL_OW 310
29855: IFFALSE 29878
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
29857: LD_EXP 94
29861: PUSH
29862: LD_VAR 0 2
29866: ARRAY
29867: PUSH
29868: LD_INT 1
29870: ARRAY
29871: PPUSH
29872: CALL_OW 122
29876: GO 30020
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
29878: LD_EXP 94
29882: PUSH
29883: LD_VAR 0 2
29887: ARRAY
29888: PUSH
29889: LD_INT 1
29891: ARRAY
29892: PPUSH
29893: CALL_OW 314
29897: NOT
29898: PUSH
29899: LD_EXP 94
29903: PUSH
29904: LD_VAR 0 2
29908: ARRAY
29909: PUSH
29910: LD_INT 1
29912: ARRAY
29913: PPUSH
29914: LD_EXP 93
29918: PUSH
29919: LD_VAR 0 2
29923: ARRAY
29924: PUSH
29925: LD_INT 1
29927: ARRAY
29928: PUSH
29929: LD_INT 1
29931: ARRAY
29932: PPUSH
29933: LD_EXP 93
29937: PUSH
29938: LD_VAR 0 2
29942: ARRAY
29943: PUSH
29944: LD_INT 1
29946: ARRAY
29947: PUSH
29948: LD_INT 2
29950: ARRAY
29951: PPUSH
29952: CALL_OW 297
29956: PUSH
29957: LD_INT 6
29959: GREATER
29960: AND
29961: IFFALSE 30020
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
29963: LD_EXP 94
29967: PUSH
29968: LD_VAR 0 2
29972: ARRAY
29973: PUSH
29974: LD_INT 1
29976: ARRAY
29977: PPUSH
29978: LD_EXP 93
29982: PUSH
29983: LD_VAR 0 2
29987: ARRAY
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: PPUSH
29997: LD_EXP 93
30001: PUSH
30002: LD_VAR 0 2
30006: ARRAY
30007: PUSH
30008: LD_INT 1
30010: ARRAY
30011: PUSH
30012: LD_INT 2
30014: ARRAY
30015: PPUSH
30016: CALL_OW 111
// end ; end ; end ;
30020: GO 29479
30022: POP
30023: POP
// end ;
30024: LD_VAR 0 1
30028: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
// if not mc_bases then
30040: LD_EXP 57
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30547
// for i = 1 to mc_bases do
30049: LD_ADDR_VAR 0 2
30053: PUSH
30054: DOUBLE
30055: LD_INT 1
30057: DEC
30058: ST_TO_ADDR
30059: LD_EXP 57
30063: PUSH
30064: FOR_TO
30065: IFFALSE 30545
// begin if not mc_bases [ i ] then
30067: LD_EXP 57
30071: PUSH
30072: LD_VAR 0 2
30076: ARRAY
30077: NOT
30078: IFFALSE 30082
// continue ;
30080: GO 30064
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
30082: LD_ADDR_VAR 0 7
30086: PUSH
30087: LD_EXP 57
30091: PUSH
30092: LD_VAR 0 2
30096: ARRAY
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: CALL_OW 248
30106: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
30107: LD_VAR 0 7
30111: PUSH
30112: LD_INT 1
30114: NONEQUAL
30115: PUSH
30116: LD_EXP 76
30120: PUSH
30121: LD_VAR 0 2
30125: ARRAY
30126: PUSH
30127: LD_EXP 79
30131: PUSH
30132: LD_VAR 0 2
30136: ARRAY
30137: UNION
30138: PPUSH
30139: LD_INT 33
30141: PUSH
30142: LD_INT 2
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 72
30153: NOT
30154: OR
30155: IFFALSE 30159
// continue ;
30157: GO 30064
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
30159: LD_ADDR_VAR 0 9
30163: PUSH
30164: LD_EXP 57
30168: PUSH
30169: LD_VAR 0 2
30173: ARRAY
30174: PPUSH
30175: LD_INT 30
30177: PUSH
30178: LD_INT 36
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PPUSH
30185: CALL_OW 72
30189: ST_TO_ADDR
// if not cts then
30190: LD_VAR 0 9
30194: NOT
30195: IFFALSE 30199
// continue ;
30197: GO 30064
// if mc_remote_driver [ i ] then
30199: LD_EXP 96
30203: PUSH
30204: LD_VAR 0 2
30208: ARRAY
30209: IFFALSE 30358
// for j in mc_remote_driver [ i ] do
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_EXP 96
30220: PUSH
30221: LD_VAR 0 2
30225: ARRAY
30226: PUSH
30227: FOR_IN
30228: IFFALSE 30356
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
30230: LD_VAR 0 3
30234: PPUSH
30235: CALL_OW 310
30239: NOT
30240: PUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL_OW 310
30250: PPUSH
30251: CALL_OW 266
30255: PUSH
30256: LD_INT 36
30258: NONEQUAL
30259: OR
30260: IFFALSE 30354
// begin if IsInUnit ( j ) then
30262: LD_VAR 0 3
30266: PPUSH
30267: CALL_OW 310
30271: IFFALSE 30282
// ComExitBuilding ( j ) ;
30273: LD_VAR 0 3
30277: PPUSH
30278: CALL_OW 122
// ct := 0 ;
30282: LD_ADDR_VAR 0 8
30286: PUSH
30287: LD_INT 0
30289: ST_TO_ADDR
// for k in cts do
30290: LD_ADDR_VAR 0 4
30294: PUSH
30295: LD_VAR 0 9
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30332
// if UnitsInside ( k ) < 3 then
30303: LD_VAR 0 4
30307: PPUSH
30308: CALL_OW 313
30312: PUSH
30313: LD_INT 3
30315: LESS
30316: IFFALSE 30330
// begin ct := k ;
30318: LD_ADDR_VAR 0 8
30322: PUSH
30323: LD_VAR 0 4
30327: ST_TO_ADDR
// break ;
30328: GO 30332
// end ;
30330: GO 30300
30332: POP
30333: POP
// if ct then
30334: LD_VAR 0 8
30338: IFFALSE 30354
// AddComEnterUnit ( j , ct ) ;
30340: LD_VAR 0 3
30344: PPUSH
30345: LD_VAR 0 8
30349: PPUSH
30350: CALL_OW 180
// end ;
30354: GO 30227
30356: POP
30357: POP
// places := 0 ;
30358: LD_ADDR_VAR 0 5
30362: PUSH
30363: LD_INT 0
30365: ST_TO_ADDR
// for j = 1 to cts do
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: DOUBLE
30372: LD_INT 1
30374: DEC
30375: ST_TO_ADDR
30376: LD_VAR 0 9
30380: PUSH
30381: FOR_TO
30382: IFFALSE 30400
// places := places + 3 ;
30384: LD_ADDR_VAR 0 5
30388: PUSH
30389: LD_VAR 0 5
30393: PUSH
30394: LD_INT 3
30396: PLUS
30397: ST_TO_ADDR
30398: GO 30381
30400: POP
30401: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
30402: LD_ADDR_VAR 0 6
30406: PUSH
30407: LD_EXP 57
30411: PUSH
30412: LD_VAR 0 2
30416: ARRAY
30417: PPUSH
30418: LD_INT 25
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: CALL_OW 72
30432: PUSH
30433: LD_EXP 96
30437: PUSH
30438: LD_VAR 0 2
30442: ARRAY
30443: DIFF
30444: ST_TO_ADDR
// if not tmp then
30445: LD_VAR 0 6
30449: NOT
30450: IFFALSE 30454
// continue ;
30452: GO 30064
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_VAR 0 5
30463: PUSH
30464: LD_EXP 96
30468: PUSH
30469: LD_VAR 0 2
30473: ARRAY
30474: PUSH
30475: LD_INT 1
30477: PLUS
30478: MINUS
30479: ST_TO_ADDR
// if places then
30480: LD_VAR 0 5
30484: IFFALSE 30543
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
30486: LD_ADDR_EXP 96
30490: PUSH
30491: LD_EXP 96
30495: PPUSH
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_EXP 96
30505: PUSH
30506: LD_VAR 0 2
30510: ARRAY
30511: PUSH
30512: LD_VAR 0 6
30516: PUSH
30517: LD_INT 1
30519: ARRAY
30520: UNION
30521: PPUSH
30522: CALL_OW 1
30526: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
30527: LD_VAR 0 6
30531: PUSH
30532: LD_INT 1
30534: ARRAY
30535: PPUSH
30536: LD_INT 126
30538: PPUSH
30539: CALL_OW 109
// end ; end ;
30543: GO 30064
30545: POP
30546: POP
// end ;
30547: LD_VAR 0 1
30551: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
30552: LD_INT 0
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
30560: LD_VAR 0 1
30564: NOT
30565: PUSH
30566: LD_VAR 0 2
30570: NOT
30571: OR
30572: PUSH
30573: LD_VAR 0 3
30577: NOT
30578: OR
30579: PUSH
30580: LD_VAR 0 4
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: LD_INT 8
30602: PUSH
30603: LD_INT 9
30605: PUSH
30606: LD_INT 15
30608: PUSH
30609: LD_INT 16
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: IN
30623: NOT
30624: OR
30625: IFFALSE 30629
// exit ;
30627: GO 31529
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
30629: LD_ADDR_VAR 0 2
30633: PUSH
30634: LD_VAR 0 2
30638: PPUSH
30639: LD_INT 21
30641: PUSH
30642: LD_INT 3
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 24
30651: PUSH
30652: LD_INT 250
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 72
30667: ST_TO_ADDR
// case class of 1 , 15 :
30668: LD_VAR 0 4
30672: PUSH
30673: LD_INT 1
30675: DOUBLE
30676: EQUAL
30677: IFTRUE 30687
30679: LD_INT 15
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30772
30687: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
30688: LD_ADDR_VAR 0 8
30692: PUSH
30693: LD_VAR 0 2
30697: PPUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 30
30703: PUSH
30704: LD_INT 32
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 30
30713: PUSH
30714: LD_INT 31
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: PPUSH
30726: CALL_OW 72
30730: PUSH
30731: LD_VAR 0 2
30735: PPUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 30
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 30
30751: PUSH
30752: LD_INT 5
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: PPUSH
30764: CALL_OW 72
30768: ADD
30769: ST_TO_ADDR
30770: GO 31018
30772: LD_INT 2
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30786
30778: LD_INT 16
30780: DOUBLE
30781: EQUAL
30782: IFTRUE 30786
30784: GO 30832
30786: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
30787: LD_ADDR_VAR 0 8
30791: PUSH
30792: LD_VAR 0 2
30796: PPUSH
30797: LD_INT 2
30799: PUSH
30800: LD_INT 30
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 30
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 72
30829: ST_TO_ADDR
30830: GO 31018
30832: LD_INT 3
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30840
30838: GO 30886
30840: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
30841: LD_ADDR_VAR 0 8
30845: PUSH
30846: LD_VAR 0 2
30850: PPUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 30
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PPUSH
30879: CALL_OW 72
30883: ST_TO_ADDR
30884: GO 31018
30886: LD_INT 4
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 30951
30894: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
30895: LD_ADDR_VAR 0 8
30899: PUSH
30900: LD_VAR 0 2
30904: PPUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 30
30910: PUSH
30911: LD_INT 6
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: LD_INT 7
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 30
30930: PUSH
30931: LD_INT 8
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: PPUSH
30944: CALL_OW 72
30948: ST_TO_ADDR
30949: GO 31018
30951: LD_INT 5
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30971
30957: LD_INT 8
30959: DOUBLE
30960: EQUAL
30961: IFTRUE 30971
30963: LD_INT 9
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 31017
30971: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
30972: LD_ADDR_VAR 0 8
30976: PUSH
30977: LD_VAR 0 2
30981: PPUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 30
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: ST_TO_ADDR
31015: GO 31018
31017: POP
// if not tmp then
31018: LD_VAR 0 8
31022: NOT
31023: IFFALSE 31027
// exit ;
31025: GO 31529
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
31027: LD_VAR 0 4
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: LD_INT 15
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: IN
31042: PUSH
31043: LD_EXP 66
31047: PUSH
31048: LD_VAR 0 1
31052: ARRAY
31053: AND
31054: IFFALSE 31210
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
31056: LD_ADDR_VAR 0 9
31060: PUSH
31061: LD_EXP 66
31065: PUSH
31066: LD_VAR 0 1
31070: ARRAY
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
31076: LD_VAR 0 9
31080: PUSH
31081: LD_EXP 67
31085: PUSH
31086: LD_VAR 0 1
31090: ARRAY
31091: IN
31092: NOT
31093: IFFALSE 31208
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
31095: LD_ADDR_EXP 67
31099: PUSH
31100: LD_EXP 67
31104: PPUSH
31105: LD_VAR 0 1
31109: PUSH
31110: LD_EXP 67
31114: PUSH
31115: LD_VAR 0 1
31119: ARRAY
31120: PUSH
31121: LD_INT 1
31123: PLUS
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: LD_VAR 0 9
31133: PPUSH
31134: CALL 44799 0 3
31138: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
31139: LD_ADDR_EXP 66
31143: PUSH
31144: LD_EXP 66
31148: PPUSH
31149: LD_VAR 0 1
31153: PPUSH
31154: LD_EXP 66
31158: PUSH
31159: LD_VAR 0 1
31163: ARRAY
31164: PUSH
31165: LD_VAR 0 9
31169: DIFF
31170: PPUSH
31171: CALL_OW 1
31175: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
31176: LD_VAR 0 3
31180: PPUSH
31181: LD_EXP 67
31185: PUSH
31186: LD_VAR 0 1
31190: ARRAY
31191: PUSH
31192: LD_EXP 67
31196: PUSH
31197: LD_VAR 0 1
31201: ARRAY
31202: ARRAY
31203: PPUSH
31204: CALL_OW 120
// end ; exit ;
31208: GO 31529
// end ; if tmp > 1 then
31210: LD_VAR 0 8
31214: PUSH
31215: LD_INT 1
31217: GREATER
31218: IFFALSE 31322
// for i = 2 to tmp do
31220: LD_ADDR_VAR 0 6
31224: PUSH
31225: DOUBLE
31226: LD_INT 2
31228: DEC
31229: ST_TO_ADDR
31230: LD_VAR 0 8
31234: PUSH
31235: FOR_TO
31236: IFFALSE 31320
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
31238: LD_VAR 0 8
31242: PUSH
31243: LD_VAR 0 6
31247: ARRAY
31248: PPUSH
31249: CALL_OW 461
31253: PUSH
31254: LD_INT 6
31256: EQUAL
31257: IFFALSE 31318
// begin x := tmp [ i ] ;
31259: LD_ADDR_VAR 0 9
31263: PUSH
31264: LD_VAR 0 8
31268: PUSH
31269: LD_VAR 0 6
31273: ARRAY
31274: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
31275: LD_ADDR_VAR 0 8
31279: PUSH
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: CALL_OW 3
31294: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
31295: LD_ADDR_VAR 0 8
31299: PUSH
31300: LD_VAR 0 8
31304: PPUSH
31305: LD_INT 1
31307: PPUSH
31308: LD_VAR 0 9
31312: PPUSH
31313: CALL_OW 2
31317: ST_TO_ADDR
// end ;
31318: GO 31235
31320: POP
31321: POP
// for i in tmp do
31322: LD_ADDR_VAR 0 6
31326: PUSH
31327: LD_VAR 0 8
31331: PUSH
31332: FOR_IN
31333: IFFALSE 31402
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
31335: LD_VAR 0 6
31339: PPUSH
31340: CALL_OW 313
31344: PUSH
31345: LD_INT 6
31347: LESS
31348: PUSH
31349: LD_VAR 0 6
31353: PPUSH
31354: CALL_OW 266
31358: PUSH
31359: LD_INT 31
31361: PUSH
31362: LD_INT 32
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: IN
31369: NOT
31370: AND
31371: PUSH
31372: LD_VAR 0 6
31376: PPUSH
31377: CALL_OW 313
31381: PUSH
31382: LD_INT 0
31384: EQUAL
31385: OR
31386: IFFALSE 31400
// begin j := i ;
31388: LD_ADDR_VAR 0 7
31392: PUSH
31393: LD_VAR 0 6
31397: ST_TO_ADDR
// break ;
31398: GO 31402
// end ; end ;
31400: GO 31332
31402: POP
31403: POP
// if j then
31404: LD_VAR 0 7
31408: IFFALSE 31426
// ComEnterUnit ( unit , j ) else
31410: LD_VAR 0 3
31414: PPUSH
31415: LD_VAR 0 7
31419: PPUSH
31420: CALL_OW 120
31424: GO 31529
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31426: LD_ADDR_VAR 0 10
31430: PUSH
31431: LD_VAR 0 2
31435: PPUSH
31436: LD_INT 2
31438: PUSH
31439: LD_INT 30
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 30
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: PPUSH
31464: CALL_OW 72
31468: ST_TO_ADDR
// if depot then
31469: LD_VAR 0 10
31473: IFFALSE 31529
// begin depot := NearestUnitToUnit ( depot , unit ) ;
31475: LD_ADDR_VAR 0 10
31479: PUSH
31480: LD_VAR 0 10
31484: PPUSH
31485: LD_VAR 0 3
31489: PPUSH
31490: CALL_OW 74
31494: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
31495: LD_VAR 0 3
31499: PPUSH
31500: LD_VAR 0 10
31504: PPUSH
31505: CALL_OW 296
31509: PUSH
31510: LD_INT 10
31512: GREATER
31513: IFFALSE 31529
// ComStandNearbyBuilding ( unit , depot ) ;
31515: LD_VAR 0 3
31519: PPUSH
31520: LD_VAR 0 10
31524: PPUSH
31525: CALL 39041 0 2
// end ; end ; end ;
31529: LD_VAR 0 5
31533: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
31534: LD_INT 0
31536: PPUSH
31537: PPUSH
31538: PPUSH
31539: PPUSH
// if not mc_bases then
31540: LD_EXP 57
31544: NOT
31545: IFFALSE 31549
// exit ;
31547: GO 31788
// for i = 1 to mc_bases do
31549: LD_ADDR_VAR 0 2
31553: PUSH
31554: DOUBLE
31555: LD_INT 1
31557: DEC
31558: ST_TO_ADDR
31559: LD_EXP 57
31563: PUSH
31564: FOR_TO
31565: IFFALSE 31786
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
31567: LD_ADDR_VAR 0 4
31571: PUSH
31572: LD_EXP 57
31576: PUSH
31577: LD_VAR 0 2
31581: ARRAY
31582: PPUSH
31583: LD_INT 21
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PPUSH
31593: CALL_OW 72
31597: PUSH
31598: LD_EXP 86
31602: PUSH
31603: LD_VAR 0 2
31607: ARRAY
31608: UNION
31609: ST_TO_ADDR
// if not tmp then
31610: LD_VAR 0 4
31614: NOT
31615: IFFALSE 31619
// continue ;
31617: GO 31564
// for j in tmp do
31619: LD_ADDR_VAR 0 3
31623: PUSH
31624: LD_VAR 0 4
31628: PUSH
31629: FOR_IN
31630: IFFALSE 31782
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
31632: LD_VAR 0 3
31636: PPUSH
31637: CALL_OW 110
31641: NOT
31642: PUSH
31643: LD_VAR 0 3
31647: PPUSH
31648: CALL_OW 314
31652: NOT
31653: AND
31654: PUSH
31655: LD_VAR 0 3
31659: PPUSH
31660: CALL_OW 311
31664: NOT
31665: AND
31666: PUSH
31667: LD_VAR 0 3
31671: PPUSH
31672: CALL_OW 310
31676: NOT
31677: AND
31678: PUSH
31679: LD_VAR 0 3
31683: PUSH
31684: LD_EXP 60
31688: PUSH
31689: LD_VAR 0 2
31693: ARRAY
31694: PUSH
31695: LD_INT 1
31697: ARRAY
31698: IN
31699: NOT
31700: AND
31701: PUSH
31702: LD_VAR 0 3
31706: PUSH
31707: LD_EXP 60
31711: PUSH
31712: LD_VAR 0 2
31716: ARRAY
31717: PUSH
31718: LD_INT 2
31720: ARRAY
31721: IN
31722: NOT
31723: AND
31724: PUSH
31725: LD_VAR 0 3
31729: PUSH
31730: LD_EXP 69
31734: PUSH
31735: LD_VAR 0 2
31739: ARRAY
31740: IN
31741: NOT
31742: AND
31743: IFFALSE 31780
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
31745: LD_VAR 0 2
31749: PPUSH
31750: LD_EXP 57
31754: PUSH
31755: LD_VAR 0 2
31759: ARRAY
31760: PPUSH
31761: LD_VAR 0 3
31765: PPUSH
31766: LD_VAR 0 3
31770: PPUSH
31771: CALL_OW 257
31775: PPUSH
31776: CALL 30552 0 4
// end ;
31780: GO 31629
31782: POP
31783: POP
// end ;
31784: GO 31564
31786: POP
31787: POP
// end ;
31788: LD_VAR 0 1
31792: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
31793: LD_INT 0
31795: PPUSH
31796: PPUSH
31797: PPUSH
31798: PPUSH
31799: PPUSH
31800: PPUSH
// if not mc_bases [ base ] then
31801: LD_EXP 57
31805: PUSH
31806: LD_VAR 0 1
31810: ARRAY
31811: NOT
31812: IFFALSE 31816
// exit ;
31814: GO 31998
// tmp := [ ] ;
31816: LD_ADDR_VAR 0 6
31820: PUSH
31821: EMPTY
31822: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
31823: LD_ADDR_VAR 0 7
31827: PUSH
31828: LD_VAR 0 3
31832: PPUSH
31833: LD_INT 0
31835: PPUSH
31836: CALL_OW 517
31840: ST_TO_ADDR
// if not list then
31841: LD_VAR 0 7
31845: NOT
31846: IFFALSE 31850
// exit ;
31848: GO 31998
// for i = 1 to amount do
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: DOUBLE
31856: LD_INT 1
31858: DEC
31859: ST_TO_ADDR
31860: LD_VAR 0 2
31864: PUSH
31865: FOR_TO
31866: IFFALSE 31946
// begin x := rand ( 1 , list [ 1 ] ) ;
31868: LD_ADDR_VAR 0 8
31872: PUSH
31873: LD_INT 1
31875: PPUSH
31876: LD_VAR 0 7
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: CALL_OW 12
31889: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
31890: LD_ADDR_VAR 0 6
31894: PUSH
31895: LD_VAR 0 6
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: LD_VAR 0 7
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PUSH
31914: LD_VAR 0 8
31918: ARRAY
31919: PUSH
31920: LD_VAR 0 7
31924: PUSH
31925: LD_INT 2
31927: ARRAY
31928: PUSH
31929: LD_VAR 0 8
31933: ARRAY
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
// end ;
31944: GO 31865
31946: POP
31947: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
31948: LD_ADDR_EXP 70
31952: PUSH
31953: LD_EXP 70
31957: PPUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: LD_VAR 0 6
31967: PPUSH
31968: CALL_OW 1
31972: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
31973: LD_ADDR_EXP 72
31977: PUSH
31978: LD_EXP 72
31982: PPUSH
31983: LD_VAR 0 1
31987: PPUSH
31988: LD_VAR 0 3
31992: PPUSH
31993: CALL_OW 1
31997: ST_TO_ADDR
// end ;
31998: LD_VAR 0 4
32002: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
32003: LD_INT 0
32005: PPUSH
// if not mc_bases [ base ] then
32006: LD_EXP 57
32010: PUSH
32011: LD_VAR 0 1
32015: ARRAY
32016: NOT
32017: IFFALSE 32021
// exit ;
32019: GO 32046
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
32021: LD_ADDR_EXP 62
32025: PUSH
32026: LD_EXP 62
32030: PPUSH
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_VAR 0 2
32040: PPUSH
32041: CALL_OW 1
32045: ST_TO_ADDR
// end ;
32046: LD_VAR 0 3
32050: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
32051: LD_INT 0
32053: PPUSH
// if not mc_bases [ base ] then
32054: LD_EXP 57
32058: PUSH
32059: LD_VAR 0 1
32063: ARRAY
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32125
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
32069: LD_ADDR_EXP 62
32073: PUSH
32074: LD_EXP 62
32078: PPUSH
32079: LD_VAR 0 1
32083: PPUSH
32084: LD_EXP 62
32088: PUSH
32089: LD_VAR 0 1
32093: ARRAY
32094: PPUSH
32095: LD_EXP 62
32099: PUSH
32100: LD_VAR 0 1
32104: ARRAY
32105: PUSH
32106: LD_INT 1
32108: PLUS
32109: PPUSH
32110: LD_VAR 0 2
32114: PPUSH
32115: CALL_OW 2
32119: PPUSH
32120: CALL_OW 1
32124: ST_TO_ADDR
// end ;
32125: LD_VAR 0 3
32129: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
32130: LD_INT 0
32132: PPUSH
// if not mc_bases [ base ] then
32133: LD_EXP 57
32137: PUSH
32138: LD_VAR 0 1
32142: ARRAY
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 32173
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
32148: LD_ADDR_EXP 78
32152: PUSH
32153: LD_EXP 78
32157: PPUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: LD_VAR 0 2
32167: PPUSH
32168: CALL_OW 1
32172: ST_TO_ADDR
// end ;
32173: LD_VAR 0 3
32177: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
32178: LD_INT 0
32180: PPUSH
// if not mc_bases [ base ] then
32181: LD_EXP 57
32185: PUSH
32186: LD_VAR 0 1
32190: ARRAY
32191: NOT
32192: IFFALSE 32196
// exit ;
32194: GO 32236
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
32196: LD_ADDR_EXP 78
32200: PUSH
32201: LD_EXP 78
32205: PPUSH
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_EXP 78
32215: PUSH
32216: LD_VAR 0 1
32220: ARRAY
32221: PUSH
32222: LD_VAR 0 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: ADD
32230: PPUSH
32231: CALL_OW 1
32235: ST_TO_ADDR
// end ;
32236: LD_VAR 0 3
32240: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
32241: LD_INT 0
32243: PPUSH
// if not mc_bases [ base ] then
32244: LD_EXP 57
32248: PUSH
32249: LD_VAR 0 1
32253: ARRAY
32254: NOT
32255: IFFALSE 32259
// exit ;
32257: GO 32371
// mc_defender := Replace ( mc_defender , base , deflist ) ;
32259: LD_ADDR_EXP 79
32263: PUSH
32264: LD_EXP 79
32268: PPUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: LD_VAR 0 2
32278: PPUSH
32279: CALL_OW 1
32283: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
32284: LD_ADDR_EXP 68
32288: PUSH
32289: LD_EXP 68
32293: PPUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: LD_VAR 0 2
32303: PUSH
32304: LD_INT 0
32306: PLUS
32307: PPUSH
32308: CALL_OW 1
32312: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
32313: LD_ADDR_EXP 76
32317: PUSH
32318: LD_EXP 76
32322: PPUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: LD_EXP 76
32332: PUSH
32333: LD_VAR 0 1
32337: ARRAY
32338: PUSH
32339: LD_EXP 79
32343: PUSH
32344: LD_VAR 0 1
32348: ARRAY
32349: PPUSH
32350: LD_INT 21
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 72
32364: UNION
32365: PPUSH
32366: CALL_OW 1
32370: ST_TO_ADDR
// end ;
32371: LD_VAR 0 3
32375: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
32376: LD_INT 0
32378: PPUSH
// if not mc_bases [ base ] then
32379: LD_EXP 57
32383: PUSH
32384: LD_VAR 0 1
32388: ARRAY
32389: NOT
32390: IFFALSE 32394
// exit ;
32392: GO 32419
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
32394: LD_ADDR_EXP 68
32398: PUSH
32399: LD_EXP 68
32403: PPUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 1
32418: ST_TO_ADDR
// end ;
32419: LD_VAR 0 3
32423: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
32424: LD_INT 0
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
// if not mc_bases [ base ] then
32430: LD_EXP 57
32434: PUSH
32435: LD_VAR 0 1
32439: ARRAY
32440: NOT
32441: IFFALSE 32445
// exit ;
32443: GO 32510
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
32445: LD_ADDR_EXP 77
32449: PUSH
32450: LD_EXP 77
32454: PPUSH
32455: LD_VAR 0 1
32459: PUSH
32460: LD_EXP 77
32464: PUSH
32465: LD_VAR 0 1
32469: ARRAY
32470: PUSH
32471: LD_INT 1
32473: PLUS
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PPUSH
32479: LD_VAR 0 1
32483: PUSH
32484: LD_VAR 0 2
32488: PUSH
32489: LD_VAR 0 3
32493: PUSH
32494: LD_VAR 0 4
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL 44799 0 3
32509: ST_TO_ADDR
// end ;
32510: LD_VAR 0 5
32514: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
32515: LD_INT 0
32517: PPUSH
// if not mc_bases [ base ] then
32518: LD_EXP 57
32522: PUSH
32523: LD_VAR 0 1
32527: ARRAY
32528: NOT
32529: IFFALSE 32533
// exit ;
32531: GO 32558
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
32533: LD_ADDR_EXP 93
32537: PUSH
32538: LD_EXP 93
32542: PPUSH
32543: LD_VAR 0 1
32547: PPUSH
32548: LD_VAR 0 2
32552: PPUSH
32553: CALL_OW 1
32557: ST_TO_ADDR
// end ;
32558: LD_VAR 0 3
32562: RET
// export function MC_GetMinesField ( base ) ; begin
32563: LD_INT 0
32565: PPUSH
// result := mc_mines [ base ] ;
32566: LD_ADDR_VAR 0 2
32570: PUSH
32571: LD_EXP 70
32575: PUSH
32576: LD_VAR 0 1
32580: ARRAY
32581: ST_TO_ADDR
// end ;
32582: LD_VAR 0 2
32586: RET
// export function MC_GetProduceList ( base ) ; begin
32587: LD_INT 0
32589: PPUSH
// result := mc_produce [ base ] ;
32590: LD_ADDR_VAR 0 2
32594: PUSH
32595: LD_EXP 78
32599: PUSH
32600: LD_VAR 0 1
32604: ARRAY
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 2
32610: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
// if not mc_bases then
32615: LD_EXP 57
32619: NOT
32620: IFFALSE 32624
// exit ;
32622: GO 32689
// if mc_bases [ base ] then
32624: LD_EXP 57
32628: PUSH
32629: LD_VAR 0 1
32633: ARRAY
32634: IFFALSE 32689
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32636: LD_ADDR_VAR 0 3
32640: PUSH
32641: LD_EXP 57
32645: PUSH
32646: LD_VAR 0 1
32650: ARRAY
32651: PPUSH
32652: LD_INT 30
32654: PUSH
32655: LD_VAR 0 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PPUSH
32664: CALL_OW 72
32668: ST_TO_ADDR
// if result then
32669: LD_VAR 0 3
32673: IFFALSE 32689
// result := result [ 1 ] ;
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: LD_VAR 0 3
32684: PUSH
32685: LD_INT 1
32687: ARRAY
32688: ST_TO_ADDR
// end ; end ;
32689: LD_VAR 0 3
32693: RET
// export function MC_SetTame ( base , area ) ; begin
32694: LD_INT 0
32696: PPUSH
// if not mc_bases or not base then
32697: LD_EXP 57
32701: NOT
32702: PUSH
32703: LD_VAR 0 1
32707: NOT
32708: OR
32709: IFFALSE 32713
// exit ;
32711: GO 32738
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
32713: LD_ADDR_EXP 85
32717: PUSH
32718: LD_EXP 85
32722: PPUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: LD_VAR 0 2
32732: PPUSH
32733: CALL_OW 1
32737: ST_TO_ADDR
// end ;
32738: LD_VAR 0 3
32742: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
32743: LD_INT 0
32745: PPUSH
32746: PPUSH
// if not mc_bases or not base then
32747: LD_EXP 57
32751: NOT
32752: PUSH
32753: LD_VAR 0 1
32757: NOT
32758: OR
32759: IFFALSE 32763
// exit ;
32761: GO 32865
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32763: LD_ADDR_VAR 0 4
32767: PUSH
32768: LD_EXP 57
32772: PUSH
32773: LD_VAR 0 1
32777: ARRAY
32778: PPUSH
32779: LD_INT 30
32781: PUSH
32782: LD_VAR 0 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 72
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 4
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 32865
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
32805: LD_ADDR_EXP 89
32809: PUSH
32810: LD_EXP 89
32814: PPUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: LD_EXP 89
32824: PUSH
32825: LD_VAR 0 1
32829: ARRAY
32830: PPUSH
32831: LD_EXP 89
32835: PUSH
32836: LD_VAR 0 1
32840: ARRAY
32841: PUSH
32842: LD_INT 1
32844: PLUS
32845: PPUSH
32846: LD_VAR 0 4
32850: PUSH
32851: LD_INT 1
32853: ARRAY
32854: PPUSH
32855: CALL_OW 2
32859: PPUSH
32860: CALL_OW 1
32864: ST_TO_ADDR
// end ;
32865: LD_VAR 0 3
32869: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
// if not mc_bases or not base or not kinds then
32874: LD_EXP 57
32878: NOT
32879: PUSH
32880: LD_VAR 0 1
32884: NOT
32885: OR
32886: PUSH
32887: LD_VAR 0 2
32891: NOT
32892: OR
32893: IFFALSE 32897
// exit ;
32895: GO 32958
// for i in kinds do
32897: LD_ADDR_VAR 0 4
32901: PUSH
32902: LD_VAR 0 2
32906: PUSH
32907: FOR_IN
32908: IFFALSE 32956
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
32910: LD_ADDR_EXP 91
32914: PUSH
32915: LD_EXP 91
32919: PPUSH
32920: LD_VAR 0 1
32924: PUSH
32925: LD_EXP 91
32929: PUSH
32930: LD_VAR 0 1
32934: ARRAY
32935: PUSH
32936: LD_INT 1
32938: PLUS
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PPUSH
32944: LD_VAR 0 4
32948: PPUSH
32949: CALL 44799 0 3
32953: ST_TO_ADDR
32954: GO 32907
32956: POP
32957: POP
// end ;
32958: LD_VAR 0 3
32962: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
32963: LD_INT 0
32965: PPUSH
// if not mc_bases or not base or not areas then
32966: LD_EXP 57
32970: NOT
32971: PUSH
32972: LD_VAR 0 1
32976: NOT
32977: OR
32978: PUSH
32979: LD_VAR 0 2
32983: NOT
32984: OR
32985: IFFALSE 32989
// exit ;
32987: GO 33014
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
32989: LD_ADDR_EXP 75
32993: PUSH
32994: LD_EXP 75
32998: PPUSH
32999: LD_VAR 0 1
33003: PPUSH
33004: LD_VAR 0 2
33008: PPUSH
33009: CALL_OW 1
33013: ST_TO_ADDR
// end ;
33014: LD_VAR 0 3
33018: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
33019: LD_INT 0
33021: PPUSH
// if not mc_bases or not base then
33022: LD_EXP 57
33026: NOT
33027: PUSH
33028: LD_VAR 0 1
33032: NOT
33033: OR
33034: IFFALSE 33038
// exit ;
33036: GO 33072
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
33038: LD_ADDR_EXP 92
33042: PUSH
33043: LD_EXP 92
33047: PPUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: LD_VAR 0 2
33057: PUSH
33058: LD_VAR 0 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PPUSH
33067: CALL_OW 1
33071: ST_TO_ADDR
// end ;
33072: LD_VAR 0 4
33076: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
33081: PPUSH
// if not mc_bases or not base or not ext_list then
33082: LD_EXP 57
33086: NOT
33087: PUSH
33088: LD_VAR 0 1
33092: NOT
33093: OR
33094: PUSH
33095: LD_VAR 0 5
33099: NOT
33100: OR
33101: IFFALSE 33105
// exit ;
33103: GO 33278
// tmp := GetFacExtXYD ( x , y , d ) ;
33105: LD_ADDR_VAR 0 8
33109: PUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: LD_VAR 0 3
33119: PPUSH
33120: LD_VAR 0 4
33124: PPUSH
33125: CALL 77497 0 3
33129: ST_TO_ADDR
// if not tmp then
33130: LD_VAR 0 8
33134: NOT
33135: IFFALSE 33139
// exit ;
33137: GO 33278
// for i in tmp do
33139: LD_ADDR_VAR 0 7
33143: PUSH
33144: LD_VAR 0 8
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33276
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
33152: LD_ADDR_EXP 62
33156: PUSH
33157: LD_EXP 62
33161: PPUSH
33162: LD_VAR 0 1
33166: PPUSH
33167: LD_EXP 62
33171: PUSH
33172: LD_VAR 0 1
33176: ARRAY
33177: PPUSH
33178: LD_EXP 62
33182: PUSH
33183: LD_VAR 0 1
33187: ARRAY
33188: PUSH
33189: LD_INT 1
33191: PLUS
33192: PPUSH
33193: LD_VAR 0 5
33197: PUSH
33198: LD_INT 1
33200: ARRAY
33201: PUSH
33202: LD_VAR 0 7
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PUSH
33211: LD_VAR 0 7
33215: PUSH
33216: LD_INT 2
33218: ARRAY
33219: PUSH
33220: LD_VAR 0 7
33224: PUSH
33225: LD_INT 3
33227: ARRAY
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: PPUSH
33235: CALL_OW 2
33239: PPUSH
33240: CALL_OW 1
33244: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_VAR 0 5
33254: PPUSH
33255: LD_INT 1
33257: PPUSH
33258: CALL_OW 3
33262: ST_TO_ADDR
// if not ext_list then
33263: LD_VAR 0 5
33267: NOT
33268: IFFALSE 33274
// exit ;
33270: POP
33271: POP
33272: GO 33278
// end ;
33274: GO 33149
33276: POP
33277: POP
// end ;
33278: LD_VAR 0 6
33282: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
33283: LD_INT 0
33285: PPUSH
// if not mc_bases or not base or not weapon_list then
33286: LD_EXP 57
33290: NOT
33291: PUSH
33292: LD_VAR 0 1
33296: NOT
33297: OR
33298: PUSH
33299: LD_VAR 0 2
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 33334
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
33309: LD_ADDR_EXP 95
33313: PUSH
33314: LD_EXP 95
33318: PPUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: LD_VAR 0 2
33328: PPUSH
33329: CALL_OW 1
33333: ST_TO_ADDR
// end ;
33334: LD_VAR 0 3
33338: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
33339: LD_INT 0
33341: PPUSH
// if not mc_bases or not base or not tech_list then
33342: LD_EXP 57
33346: NOT
33347: PUSH
33348: LD_VAR 0 1
33352: NOT
33353: OR
33354: PUSH
33355: LD_VAR 0 2
33359: NOT
33360: OR
33361: IFFALSE 33365
// exit ;
33363: GO 33390
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
33365: LD_ADDR_EXP 84
33369: PUSH
33370: LD_EXP 84
33374: PPUSH
33375: LD_VAR 0 1
33379: PPUSH
33380: LD_VAR 0 2
33384: PPUSH
33385: CALL_OW 1
33389: ST_TO_ADDR
// end ;
33390: LD_VAR 0 3
33394: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
33395: LD_INT 0
33397: PPUSH
// if not mc_bases or not parking_area or not base then
33398: LD_EXP 57
33402: NOT
33403: PUSH
33404: LD_VAR 0 2
33408: NOT
33409: OR
33410: PUSH
33411: LD_VAR 0 1
33415: NOT
33416: OR
33417: IFFALSE 33421
// exit ;
33419: GO 33446
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
33421: LD_ADDR_EXP 81
33425: PUSH
33426: LD_EXP 81
33430: PPUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: LD_VAR 0 2
33440: PPUSH
33441: CALL_OW 1
33445: ST_TO_ADDR
// end ;
33446: LD_VAR 0 3
33450: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
33451: LD_INT 0
33453: PPUSH
// if not mc_bases or not base or not scan_area then
33454: LD_EXP 57
33458: NOT
33459: PUSH
33460: LD_VAR 0 1
33464: NOT
33465: OR
33466: PUSH
33467: LD_VAR 0 2
33471: NOT
33472: OR
33473: IFFALSE 33477
// exit ;
33475: GO 33502
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
33477: LD_ADDR_EXP 82
33481: PUSH
33482: LD_EXP 82
33486: PPUSH
33487: LD_VAR 0 1
33491: PPUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 1
33501: ST_TO_ADDR
// end ; end_of_file
33502: LD_VAR 0 3
33506: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
33507: LD_INT 0
33509: PPUSH
33510: PPUSH
33511: PPUSH
// if not mc_bases then
33512: LD_EXP 57
33516: NOT
33517: IFFALSE 33521
// exit ;
33519: GO 33686
// for i = 1 to mc_bases do
33521: LD_ADDR_VAR 0 4
33525: PUSH
33526: DOUBLE
33527: LD_INT 1
33529: DEC
33530: ST_TO_ADDR
33531: LD_EXP 57
33535: PUSH
33536: FOR_TO
33537: IFFALSE 33684
// begin if sci in mc_bases [ i ] then
33539: LD_VAR 0 2
33543: PUSH
33544: LD_EXP 57
33548: PUSH
33549: LD_VAR 0 4
33553: ARRAY
33554: IN
33555: IFFALSE 33682
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
33557: LD_ADDR_EXP 86
33561: PUSH
33562: LD_EXP 86
33566: PPUSH
33567: LD_VAR 0 4
33571: PUSH
33572: LD_EXP 86
33576: PUSH
33577: LD_VAR 0 4
33581: ARRAY
33582: PUSH
33583: LD_INT 1
33585: PLUS
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PPUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL 44799 0 3
33600: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_EXP 57
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: PPUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 30
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 30
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: LIST
33644: PPUSH
33645: CALL_OW 72
33649: PPUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: CALL_OW 74
33659: ST_TO_ADDR
// if tmp then
33660: LD_VAR 0 5
33664: IFFALSE 33680
// ComStandNearbyBuilding ( ape , tmp ) ;
33666: LD_VAR 0 1
33670: PPUSH
33671: LD_VAR 0 5
33675: PPUSH
33676: CALL 39041 0 2
// break ;
33680: GO 33684
// end ; end ;
33682: GO 33536
33684: POP
33685: POP
// end ;
33686: LD_VAR 0 3
33690: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
// if not mc_bases then
33696: LD_EXP 57
33700: NOT
33701: IFFALSE 33705
// exit ;
33703: GO 33794
// for i = 1 to mc_bases do
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: DOUBLE
33711: LD_INT 1
33713: DEC
33714: ST_TO_ADDR
33715: LD_EXP 57
33719: PUSH
33720: FOR_TO
33721: IFFALSE 33792
// begin if building in mc_busy_turret_list [ i ] then
33723: LD_VAR 0 1
33727: PUSH
33728: LD_EXP 67
33732: PUSH
33733: LD_VAR 0 4
33737: ARRAY
33738: IN
33739: IFFALSE 33790
// begin tmp := mc_busy_turret_list [ i ] diff building ;
33741: LD_ADDR_VAR 0 5
33745: PUSH
33746: LD_EXP 67
33750: PUSH
33751: LD_VAR 0 4
33755: ARRAY
33756: PUSH
33757: LD_VAR 0 1
33761: DIFF
33762: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
33763: LD_ADDR_EXP 67
33767: PUSH
33768: LD_EXP 67
33772: PPUSH
33773: LD_VAR 0 4
33777: PPUSH
33778: LD_VAR 0 5
33782: PPUSH
33783: CALL_OW 1
33787: ST_TO_ADDR
// break ;
33788: GO 33792
// end ; end ;
33790: GO 33720
33792: POP
33793: POP
// end ;
33794: LD_VAR 0 3
33798: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
33803: PPUSH
// if not mc_bases then
33804: LD_EXP 57
33808: NOT
33809: IFFALSE 33813
// exit ;
33811: GO 34012
// for i = 1 to mc_bases do
33813: LD_ADDR_VAR 0 5
33817: PUSH
33818: DOUBLE
33819: LD_INT 1
33821: DEC
33822: ST_TO_ADDR
33823: LD_EXP 57
33827: PUSH
33828: FOR_TO
33829: IFFALSE 34010
// if building in mc_bases [ i ] then
33831: LD_VAR 0 1
33835: PUSH
33836: LD_EXP 57
33840: PUSH
33841: LD_VAR 0 5
33845: ARRAY
33846: IN
33847: IFFALSE 34008
// begin tmp := mc_bases [ i ] diff building ;
33849: LD_ADDR_VAR 0 6
33853: PUSH
33854: LD_EXP 57
33858: PUSH
33859: LD_VAR 0 5
33863: ARRAY
33864: PUSH
33865: LD_VAR 0 1
33869: DIFF
33870: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
33871: LD_ADDR_EXP 57
33875: PUSH
33876: LD_EXP 57
33880: PPUSH
33881: LD_VAR 0 5
33885: PPUSH
33886: LD_VAR 0 6
33890: PPUSH
33891: CALL_OW 1
33895: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
33896: LD_VAR 0 1
33900: PUSH
33901: LD_EXP 65
33905: PUSH
33906: LD_VAR 0 5
33910: ARRAY
33911: IN
33912: IFFALSE 33951
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
33914: LD_ADDR_EXP 65
33918: PUSH
33919: LD_EXP 65
33923: PPUSH
33924: LD_VAR 0 5
33928: PPUSH
33929: LD_EXP 65
33933: PUSH
33934: LD_VAR 0 5
33938: ARRAY
33939: PUSH
33940: LD_VAR 0 1
33944: DIFF
33945: PPUSH
33946: CALL_OW 1
33950: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
33951: LD_VAR 0 1
33955: PUSH
33956: LD_EXP 66
33960: PUSH
33961: LD_VAR 0 5
33965: ARRAY
33966: IN
33967: IFFALSE 34006
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
33969: LD_ADDR_EXP 66
33973: PUSH
33974: LD_EXP 66
33978: PPUSH
33979: LD_VAR 0 5
33983: PPUSH
33984: LD_EXP 66
33988: PUSH
33989: LD_VAR 0 5
33993: ARRAY
33994: PUSH
33995: LD_VAR 0 1
33999: DIFF
34000: PPUSH
34001: CALL_OW 1
34005: ST_TO_ADDR
// break ;
34006: GO 34010
// end ;
34008: GO 33828
34010: POP
34011: POP
// end ;
34012: LD_VAR 0 4
34016: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
34017: LD_INT 0
34019: PPUSH
34020: PPUSH
34021: PPUSH
// if not mc_bases or not side in mc_sides then
34022: LD_EXP 57
34026: NOT
34027: PUSH
34028: LD_VAR 0 3
34032: PUSH
34033: LD_EXP 83
34037: IN
34038: NOT
34039: OR
34040: IFFALSE 34044
// exit ;
34042: GO 34167
// for i = 1 to mc_vehicles do
34044: LD_ADDR_VAR 0 6
34048: PUSH
34049: DOUBLE
34050: LD_INT 1
34052: DEC
34053: ST_TO_ADDR
34054: LD_EXP 76
34058: PUSH
34059: FOR_TO
34060: IFFALSE 34165
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
34062: LD_VAR 0 2
34066: PUSH
34067: LD_EXP 76
34071: PUSH
34072: LD_VAR 0 6
34076: ARRAY
34077: IN
34078: PUSH
34079: LD_VAR 0 1
34083: PUSH
34084: LD_EXP 76
34088: PUSH
34089: LD_VAR 0 6
34093: ARRAY
34094: IN
34095: OR
34096: IFFALSE 34163
// begin tmp := mc_vehicles [ i ] diff old ;
34098: LD_ADDR_VAR 0 7
34102: PUSH
34103: LD_EXP 76
34107: PUSH
34108: LD_VAR 0 6
34112: ARRAY
34113: PUSH
34114: LD_VAR 0 2
34118: DIFF
34119: ST_TO_ADDR
// tmp := tmp diff new ;
34120: LD_ADDR_VAR 0 7
34124: PUSH
34125: LD_VAR 0 7
34129: PUSH
34130: LD_VAR 0 1
34134: DIFF
34135: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
34136: LD_ADDR_EXP 76
34140: PUSH
34141: LD_EXP 76
34145: PPUSH
34146: LD_VAR 0 6
34150: PPUSH
34151: LD_VAR 0 7
34155: PPUSH
34156: CALL_OW 1
34160: ST_TO_ADDR
// break ;
34161: GO 34165
// end ;
34163: GO 34059
34165: POP
34166: POP
// end ;
34167: LD_VAR 0 5
34171: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
34172: LD_INT 0
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
// if not mc_bases then
34178: LD_EXP 57
34182: NOT
34183: IFFALSE 34187
// exit ;
34185: GO 34479
// side := GetSide ( vehicle ) ;
34187: LD_ADDR_VAR 0 5
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL_OW 255
34201: ST_TO_ADDR
// for i = 1 to mc_bases do
34202: LD_ADDR_VAR 0 4
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_EXP 57
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34477
// begin if factory in mc_bases [ i ] then
34220: LD_VAR 0 2
34224: PUSH
34225: LD_EXP 57
34229: PUSH
34230: LD_VAR 0 4
34234: ARRAY
34235: IN
34236: IFFALSE 34475
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
34238: LD_EXP 79
34242: PUSH
34243: LD_VAR 0 4
34247: ARRAY
34248: PUSH
34249: LD_EXP 68
34253: PUSH
34254: LD_VAR 0 4
34258: ARRAY
34259: LESS
34260: IFFALSE 34431
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
34262: LD_ADDR_EXP 79
34266: PUSH
34267: LD_EXP 79
34271: PPUSH
34272: LD_VAR 0 4
34276: PPUSH
34277: LD_EXP 79
34281: PUSH
34282: LD_VAR 0 4
34286: ARRAY
34287: PUSH
34288: LD_VAR 0 1
34292: ADD
34293: PPUSH
34294: CALL_OW 1
34298: ST_TO_ADDR
// if not mc_scan [ i ] then
34299: LD_EXP 80
34303: PUSH
34304: LD_VAR 0 4
34308: ARRAY
34309: NOT
34310: IFFALSE 34429
// begin if GetControl ( vehicle ) = control_remote then
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 263
34321: PUSH
34322: LD_INT 2
34324: EQUAL
34325: IFFALSE 34345
// repeat wait ( 0 0$1 ) ;
34327: LD_INT 35
34329: PPUSH
34330: CALL_OW 67
// until IsControledBy ( vehicle ) ;
34334: LD_VAR 0 1
34338: PPUSH
34339: CALL_OW 312
34343: IFFALSE 34327
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
34345: LD_VAR 0 1
34349: PPUSH
34350: LD_EXP 81
34354: PUSH
34355: LD_VAR 0 4
34359: ARRAY
34360: PPUSH
34361: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 263
34374: PUSH
34375: LD_INT 1
34377: NONEQUAL
34378: IFFALSE 34382
// break ;
34380: GO 34477
// repeat wait ( 0 0$1 ) ;
34382: LD_INT 35
34384: PPUSH
34385: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
34389: LD_VAR 0 1
34393: PPUSH
34394: LD_EXP 81
34398: PUSH
34399: LD_VAR 0 4
34403: ARRAY
34404: PPUSH
34405: CALL_OW 308
34409: IFFALSE 34382
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 311
34420: PPUSH
34421: CALL_OW 121
// exit ;
34425: POP
34426: POP
34427: GO 34479
// end ; end else
34429: GO 34475
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
34431: LD_ADDR_EXP 76
34435: PUSH
34436: LD_EXP 76
34440: PPUSH
34441: LD_VAR 0 4
34445: PUSH
34446: LD_EXP 76
34450: PUSH
34451: LD_VAR 0 4
34455: ARRAY
34456: PUSH
34457: LD_INT 1
34459: PLUS
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL 44799 0 3
34474: ST_TO_ADDR
// end ; end ;
34475: GO 34217
34477: POP
34478: POP
// end ;
34479: LD_VAR 0 3
34483: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
34484: LD_INT 0
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
// if not mc_bases then
34490: LD_EXP 57
34494: NOT
34495: IFFALSE 34499
// exit ;
34497: GO 34852
// repeat wait ( 0 0$1 ) ;
34499: LD_INT 35
34501: PPUSH
34502: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
34506: LD_VAR 0 2
34510: PPUSH
34511: LD_VAR 0 3
34515: PPUSH
34516: CALL_OW 284
34520: IFFALSE 34499
// if GetResourceTypeXY ( x , y ) = mat_artefact then
34522: LD_VAR 0 2
34526: PPUSH
34527: LD_VAR 0 3
34531: PPUSH
34532: CALL_OW 283
34536: PUSH
34537: LD_INT 4
34539: EQUAL
34540: IFFALSE 34544
// exit ;
34542: GO 34852
// for i = 1 to mc_bases do
34544: LD_ADDR_VAR 0 7
34548: PUSH
34549: DOUBLE
34550: LD_INT 1
34552: DEC
34553: ST_TO_ADDR
34554: LD_EXP 57
34558: PUSH
34559: FOR_TO
34560: IFFALSE 34850
// begin if mc_crates_area [ i ] then
34562: LD_EXP 75
34566: PUSH
34567: LD_VAR 0 7
34571: ARRAY
34572: IFFALSE 34683
// for j in mc_crates_area [ i ] do
34574: LD_ADDR_VAR 0 8
34578: PUSH
34579: LD_EXP 75
34583: PUSH
34584: LD_VAR 0 7
34588: ARRAY
34589: PUSH
34590: FOR_IN
34591: IFFALSE 34681
// if InArea ( x , y , j ) then
34593: LD_VAR 0 2
34597: PPUSH
34598: LD_VAR 0 3
34602: PPUSH
34603: LD_VAR 0 8
34607: PPUSH
34608: CALL_OW 309
34612: IFFALSE 34679
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34614: LD_ADDR_EXP 73
34618: PUSH
34619: LD_EXP 73
34623: PPUSH
34624: LD_VAR 0 7
34628: PUSH
34629: LD_EXP 73
34633: PUSH
34634: LD_VAR 0 7
34638: ARRAY
34639: PUSH
34640: LD_INT 1
34642: PLUS
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PPUSH
34648: LD_VAR 0 4
34652: PUSH
34653: LD_VAR 0 2
34657: PUSH
34658: LD_VAR 0 3
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: PPUSH
34668: CALL 44799 0 3
34672: ST_TO_ADDR
// exit ;
34673: POP
34674: POP
34675: POP
34676: POP
34677: GO 34852
// end ;
34679: GO 34590
34681: POP
34682: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34683: LD_ADDR_VAR 0 9
34687: PUSH
34688: LD_EXP 57
34692: PUSH
34693: LD_VAR 0 7
34697: ARRAY
34698: PPUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 30
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 30
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: PPUSH
34727: CALL_OW 72
34731: ST_TO_ADDR
// if not depot then
34732: LD_VAR 0 9
34736: NOT
34737: IFFALSE 34741
// continue ;
34739: GO 34559
// for j in depot do
34741: LD_ADDR_VAR 0 8
34745: PUSH
34746: LD_VAR 0 9
34750: PUSH
34751: FOR_IN
34752: IFFALSE 34846
// if GetDistUnitXY ( j , x , y ) < 30 then
34754: LD_VAR 0 8
34758: PPUSH
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 3
34768: PPUSH
34769: CALL_OW 297
34773: PUSH
34774: LD_INT 30
34776: LESS
34777: IFFALSE 34844
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34779: LD_ADDR_EXP 73
34783: PUSH
34784: LD_EXP 73
34788: PPUSH
34789: LD_VAR 0 7
34793: PUSH
34794: LD_EXP 73
34798: PUSH
34799: LD_VAR 0 7
34803: ARRAY
34804: PUSH
34805: LD_INT 1
34807: PLUS
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PPUSH
34813: LD_VAR 0 4
34817: PUSH
34818: LD_VAR 0 2
34822: PUSH
34823: LD_VAR 0 3
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL 44799 0 3
34837: ST_TO_ADDR
// exit ;
34838: POP
34839: POP
34840: POP
34841: POP
34842: GO 34852
// end ;
34844: GO 34751
34846: POP
34847: POP
// end ;
34848: GO 34559
34850: POP
34851: POP
// end ;
34852: LD_VAR 0 6
34856: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
// side := GetSide ( lab ) ;
34863: LD_ADDR_VAR 0 4
34867: PUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: CALL_OW 255
34877: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
34878: LD_VAR 0 4
34882: PUSH
34883: LD_EXP 83
34887: IN
34888: NOT
34889: PUSH
34890: LD_EXP 84
34894: NOT
34895: OR
34896: PUSH
34897: LD_EXP 57
34901: NOT
34902: OR
34903: IFFALSE 34907
// exit ;
34905: GO 35140
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
34907: LD_ADDR_EXP 84
34911: PUSH
34912: LD_EXP 84
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: LD_EXP 84
34926: PUSH
34927: LD_VAR 0 4
34931: ARRAY
34932: PUSH
34933: LD_VAR 0 1
34937: DIFF
34938: PPUSH
34939: CALL_OW 1
34943: ST_TO_ADDR
// for i = 1 to mc_bases do
34944: LD_ADDR_VAR 0 5
34948: PUSH
34949: DOUBLE
34950: LD_INT 1
34952: DEC
34953: ST_TO_ADDR
34954: LD_EXP 57
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35138
// begin if lab in mc_bases [ i ] then
34962: LD_VAR 0 2
34966: PUSH
34967: LD_EXP 57
34971: PUSH
34972: LD_VAR 0 5
34976: ARRAY
34977: IN
34978: IFFALSE 35136
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
34980: LD_VAR 0 1
34984: PUSH
34985: LD_INT 11
34987: PUSH
34988: LD_INT 4
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: IN
35003: PUSH
35004: LD_EXP 87
35008: PUSH
35009: LD_VAR 0 5
35013: ARRAY
35014: AND
35015: IFFALSE 35136
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
35017: LD_ADDR_VAR 0 6
35021: PUSH
35022: LD_EXP 87
35026: PUSH
35027: LD_VAR 0 5
35031: ARRAY
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35037: LD_ADDR_EXP 87
35041: PUSH
35042: LD_EXP 87
35046: PPUSH
35047: LD_VAR 0 5
35051: PPUSH
35052: EMPTY
35053: PPUSH
35054: CALL_OW 1
35058: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
35059: LD_VAR 0 6
35063: PPUSH
35064: LD_INT 0
35066: PPUSH
35067: CALL_OW 109
// ComExitBuilding ( tmp ) ;
35071: LD_VAR 0 6
35075: PPUSH
35076: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
35080: LD_ADDR_EXP 86
35084: PUSH
35085: LD_EXP 86
35089: PPUSH
35090: LD_VAR 0 5
35094: PPUSH
35095: LD_EXP 86
35099: PUSH
35100: LD_VAR 0 5
35104: ARRAY
35105: PPUSH
35106: LD_INT 1
35108: PPUSH
35109: LD_VAR 0 6
35113: PPUSH
35114: CALL_OW 2
35118: PPUSH
35119: CALL_OW 1
35123: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
35124: LD_VAR 0 5
35128: PPUSH
35129: LD_INT 112
35131: PPUSH
35132: CALL 19079 0 2
// end ; end ; end ;
35136: GO 34959
35138: POP
35139: POP
// end ;
35140: LD_VAR 0 3
35144: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
35145: LD_INT 0
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
35152: PPUSH
35153: PPUSH
35154: PPUSH
// if not mc_bases then
35155: LD_EXP 57
35159: NOT
35160: IFFALSE 35164
// exit ;
35162: GO 36089
// for i = 1 to mc_bases do
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: DOUBLE
35170: LD_INT 1
35172: DEC
35173: ST_TO_ADDR
35174: LD_EXP 57
35178: PUSH
35179: FOR_TO
35180: IFFALSE 36087
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
35182: LD_VAR 0 1
35186: PUSH
35187: LD_EXP 57
35191: PUSH
35192: LD_VAR 0 3
35196: ARRAY
35197: IN
35198: PUSH
35199: LD_VAR 0 1
35203: PUSH
35204: LD_EXP 64
35208: PUSH
35209: LD_VAR 0 3
35213: ARRAY
35214: IN
35215: OR
35216: PUSH
35217: LD_VAR 0 1
35221: PUSH
35222: LD_EXP 76
35226: PUSH
35227: LD_VAR 0 3
35231: ARRAY
35232: IN
35233: OR
35234: PUSH
35235: LD_VAR 0 1
35239: PUSH
35240: LD_EXP 86
35244: PUSH
35245: LD_VAR 0 3
35249: ARRAY
35250: IN
35251: OR
35252: PUSH
35253: LD_VAR 0 1
35257: PUSH
35258: LD_EXP 87
35262: PUSH
35263: LD_VAR 0 3
35267: ARRAY
35268: IN
35269: OR
35270: IFFALSE 36085
// begin if un in mc_ape [ i ] then
35272: LD_VAR 0 1
35276: PUSH
35277: LD_EXP 86
35281: PUSH
35282: LD_VAR 0 3
35286: ARRAY
35287: IN
35288: IFFALSE 35327
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
35290: LD_ADDR_EXP 86
35294: PUSH
35295: LD_EXP 86
35299: PPUSH
35300: LD_VAR 0 3
35304: PPUSH
35305: LD_EXP 86
35309: PUSH
35310: LD_VAR 0 3
35314: ARRAY
35315: PUSH
35316: LD_VAR 0 1
35320: DIFF
35321: PPUSH
35322: CALL_OW 1
35326: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
35327: LD_VAR 0 1
35331: PUSH
35332: LD_EXP 87
35336: PUSH
35337: LD_VAR 0 3
35341: ARRAY
35342: IN
35343: IFFALSE 35367
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35345: LD_ADDR_EXP 87
35349: PUSH
35350: LD_EXP 87
35354: PPUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: EMPTY
35361: PPUSH
35362: CALL_OW 1
35366: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 247
35376: PUSH
35377: LD_INT 2
35379: EQUAL
35380: PUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL_OW 110
35390: PUSH
35391: LD_INT 20
35393: EQUAL
35394: AND
35395: IFFALSE 35498
// begin fac := MC_GetBuilding ( i , b_factory ) ;
35397: LD_ADDR_VAR 0 8
35401: PUSH
35402: LD_VAR 0 3
35406: PPUSH
35407: LD_INT 3
35409: PPUSH
35410: CALL 32611 0 2
35414: ST_TO_ADDR
// if fac then
35415: LD_VAR 0 8
35419: IFFALSE 35498
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_VAR 0 8
35430: PPUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 265
35440: PPUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 262
35450: PPUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: CALL_OW 263
35460: PPUSH
35461: LD_VAR 0 1
35465: PPUSH
35466: CALL_OW 264
35470: PPUSH
35471: CALL 41964 0 5
35475: ST_TO_ADDR
// if components then
35476: LD_VAR 0 9
35480: IFFALSE 35496
// MC_InsertProduceList ( i , components ) ;
35482: LD_VAR 0 3
35486: PPUSH
35487: LD_VAR 0 9
35491: PPUSH
35492: CALL 32178 0 2
// break ;
35496: GO 36087
// end ; end ; if GetType ( un ) = unit_building then
35498: LD_VAR 0 1
35502: PPUSH
35503: CALL_OW 247
35507: PUSH
35508: LD_INT 3
35510: EQUAL
35511: IFFALSE 35808
// begin btype := GetBType ( un ) ;
35513: LD_ADDR_VAR 0 5
35517: PUSH
35518: LD_VAR 0 1
35522: PPUSH
35523: CALL_OW 266
35527: ST_TO_ADDR
// if btype = b_warehouse then
35528: LD_VAR 0 5
35532: PUSH
35533: LD_INT 1
35535: EQUAL
35536: IFFALSE 35554
// begin btype := b_depot ;
35538: LD_ADDR_VAR 0 5
35542: PUSH
35543: LD_INT 0
35545: ST_TO_ADDR
// pos := 1 ;
35546: LD_ADDR_VAR 0 6
35550: PUSH
35551: LD_INT 1
35553: ST_TO_ADDR
// end ; if btype = b_factory then
35554: LD_VAR 0 5
35558: PUSH
35559: LD_INT 3
35561: EQUAL
35562: IFFALSE 35580
// begin btype := b_workshop ;
35564: LD_ADDR_VAR 0 5
35568: PUSH
35569: LD_INT 2
35571: ST_TO_ADDR
// pos := 1 ;
35572: LD_ADDR_VAR 0 6
35576: PUSH
35577: LD_INT 1
35579: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
35580: LD_VAR 0 5
35584: PUSH
35585: LD_INT 7
35587: PUSH
35588: LD_INT 8
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: IN
35595: IFFALSE 35605
// btype := b_lab ;
35597: LD_ADDR_VAR 0 5
35601: PUSH
35602: LD_INT 6
35604: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
35605: LD_ADDR_EXP 62
35609: PUSH
35610: LD_EXP 62
35614: PPUSH
35615: LD_VAR 0 3
35619: PUSH
35620: LD_EXP 62
35624: PUSH
35625: LD_VAR 0 3
35629: ARRAY
35630: PUSH
35631: LD_INT 1
35633: PLUS
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PPUSH
35639: LD_VAR 0 5
35643: PUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 250
35653: PUSH
35654: LD_VAR 0 1
35658: PPUSH
35659: CALL_OW 251
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 254
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: PPUSH
35680: CALL 44799 0 3
35684: ST_TO_ADDR
// if pos = 1 then
35685: LD_VAR 0 6
35689: PUSH
35690: LD_INT 1
35692: EQUAL
35693: IFFALSE 35808
// begin tmp := mc_build_list [ i ] ;
35695: LD_ADDR_VAR 0 7
35699: PUSH
35700: LD_EXP 62
35704: PUSH
35705: LD_VAR 0 3
35709: ARRAY
35710: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35711: LD_VAR 0 7
35715: PPUSH
35716: LD_INT 2
35718: PUSH
35719: LD_INT 30
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 30
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 72
35748: IFFALSE 35758
// pos := 2 ;
35750: LD_ADDR_VAR 0 6
35754: PUSH
35755: LD_INT 2
35757: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
35758: LD_ADDR_VAR 0 7
35762: PUSH
35763: LD_VAR 0 7
35767: PPUSH
35768: LD_VAR 0 6
35772: PPUSH
35773: LD_VAR 0 7
35777: PPUSH
35778: CALL 44690 0 3
35782: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
35783: LD_ADDR_EXP 62
35787: PUSH
35788: LD_EXP 62
35792: PPUSH
35793: LD_VAR 0 3
35797: PPUSH
35798: LD_VAR 0 7
35802: PPUSH
35803: CALL_OW 1
35807: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
35808: LD_VAR 0 1
35812: PUSH
35813: LD_EXP 57
35817: PUSH
35818: LD_VAR 0 3
35822: ARRAY
35823: IN
35824: IFFALSE 35863
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
35826: LD_ADDR_EXP 57
35830: PUSH
35831: LD_EXP 57
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: LD_EXP 57
35845: PUSH
35846: LD_VAR 0 3
35850: ARRAY
35851: PUSH
35852: LD_VAR 0 1
35856: DIFF
35857: PPUSH
35858: CALL_OW 1
35862: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
35863: LD_VAR 0 1
35867: PUSH
35868: LD_EXP 64
35872: PUSH
35873: LD_VAR 0 3
35877: ARRAY
35878: IN
35879: IFFALSE 35918
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
35881: LD_ADDR_EXP 64
35885: PUSH
35886: LD_EXP 64
35890: PPUSH
35891: LD_VAR 0 3
35895: PPUSH
35896: LD_EXP 64
35900: PUSH
35901: LD_VAR 0 3
35905: ARRAY
35906: PUSH
35907: LD_VAR 0 1
35911: DIFF
35912: PPUSH
35913: CALL_OW 1
35917: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
35918: LD_VAR 0 1
35922: PUSH
35923: LD_EXP 76
35927: PUSH
35928: LD_VAR 0 3
35932: ARRAY
35933: IN
35934: IFFALSE 35973
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
35936: LD_ADDR_EXP 76
35940: PUSH
35941: LD_EXP 76
35945: PPUSH
35946: LD_VAR 0 3
35950: PPUSH
35951: LD_EXP 76
35955: PUSH
35956: LD_VAR 0 3
35960: ARRAY
35961: PUSH
35962: LD_VAR 0 1
35966: DIFF
35967: PPUSH
35968: CALL_OW 1
35972: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
35973: LD_VAR 0 1
35977: PUSH
35978: LD_EXP 66
35982: PUSH
35983: LD_VAR 0 3
35987: ARRAY
35988: IN
35989: IFFALSE 36028
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
35991: LD_ADDR_EXP 66
35995: PUSH
35996: LD_EXP 66
36000: PPUSH
36001: LD_VAR 0 3
36005: PPUSH
36006: LD_EXP 66
36010: PUSH
36011: LD_VAR 0 3
36015: ARRAY
36016: PUSH
36017: LD_VAR 0 1
36021: DIFF
36022: PPUSH
36023: CALL_OW 1
36027: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
36028: LD_VAR 0 1
36032: PUSH
36033: LD_EXP 65
36037: PUSH
36038: LD_VAR 0 3
36042: ARRAY
36043: IN
36044: IFFALSE 36083
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
36046: LD_ADDR_EXP 65
36050: PUSH
36051: LD_EXP 65
36055: PPUSH
36056: LD_VAR 0 3
36060: PPUSH
36061: LD_EXP 65
36065: PUSH
36066: LD_VAR 0 3
36070: ARRAY
36071: PUSH
36072: LD_VAR 0 1
36076: DIFF
36077: PPUSH
36078: CALL_OW 1
36082: ST_TO_ADDR
// end ; break ;
36083: GO 36087
// end ;
36085: GO 35179
36087: POP
36088: POP
// end ;
36089: LD_VAR 0 2
36093: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
36094: LD_INT 0
36096: PPUSH
36097: PPUSH
36098: PPUSH
// if not mc_bases then
36099: LD_EXP 57
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36323
// for i = 1 to mc_bases do
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: DOUBLE
36114: LD_INT 1
36116: DEC
36117: ST_TO_ADDR
36118: LD_EXP 57
36122: PUSH
36123: FOR_TO
36124: IFFALSE 36321
// begin if building in mc_construct_list [ i ] then
36126: LD_VAR 0 1
36130: PUSH
36131: LD_EXP 64
36135: PUSH
36136: LD_VAR 0 3
36140: ARRAY
36141: IN
36142: IFFALSE 36319
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36144: LD_ADDR_EXP 64
36148: PUSH
36149: LD_EXP 64
36153: PPUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: LD_EXP 64
36163: PUSH
36164: LD_VAR 0 3
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 1
36174: DIFF
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// if building in mc_lab [ i ] then
36181: LD_VAR 0 1
36185: PUSH
36186: LD_EXP 90
36190: PUSH
36191: LD_VAR 0 3
36195: ARRAY
36196: IN
36197: IFFALSE 36252
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
36199: LD_ADDR_EXP 91
36203: PUSH
36204: LD_EXP 91
36208: PPUSH
36209: LD_VAR 0 3
36213: PPUSH
36214: LD_EXP 91
36218: PUSH
36219: LD_VAR 0 3
36223: ARRAY
36224: PPUSH
36225: LD_INT 1
36227: PPUSH
36228: LD_EXP 91
36232: PUSH
36233: LD_VAR 0 3
36237: ARRAY
36238: PPUSH
36239: LD_INT 0
36241: PPUSH
36242: CALL 43782 0 4
36246: PPUSH
36247: CALL_OW 1
36251: ST_TO_ADDR
// if not building in mc_bases [ i ] then
36252: LD_VAR 0 1
36256: PUSH
36257: LD_EXP 57
36261: PUSH
36262: LD_VAR 0 3
36266: ARRAY
36267: IN
36268: NOT
36269: IFFALSE 36315
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36271: LD_ADDR_EXP 57
36275: PUSH
36276: LD_EXP 57
36280: PPUSH
36281: LD_VAR 0 3
36285: PUSH
36286: LD_EXP 57
36290: PUSH
36291: LD_VAR 0 3
36295: ARRAY
36296: PUSH
36297: LD_INT 1
36299: PLUS
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PPUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL 44799 0 3
36314: ST_TO_ADDR
// exit ;
36315: POP
36316: POP
36317: GO 36323
// end ; end ;
36319: GO 36123
36321: POP
36322: POP
// end ;
36323: LD_VAR 0 2
36327: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
36328: LD_INT 0
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
// if not mc_bases then
36337: LD_EXP 57
36341: NOT
36342: IFFALSE 36346
// exit ;
36344: GO 37007
// for i = 1 to mc_bases do
36346: LD_ADDR_VAR 0 3
36350: PUSH
36351: DOUBLE
36352: LD_INT 1
36354: DEC
36355: ST_TO_ADDR
36356: LD_EXP 57
36360: PUSH
36361: FOR_TO
36362: IFFALSE 37005
// begin if building in mc_construct_list [ i ] then
36364: LD_VAR 0 1
36368: PUSH
36369: LD_EXP 64
36373: PUSH
36374: LD_VAR 0 3
36378: ARRAY
36379: IN
36380: IFFALSE 37003
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36382: LD_ADDR_EXP 64
36386: PUSH
36387: LD_EXP 64
36391: PPUSH
36392: LD_VAR 0 3
36396: PPUSH
36397: LD_EXP 64
36401: PUSH
36402: LD_VAR 0 3
36406: ARRAY
36407: PUSH
36408: LD_VAR 0 1
36412: DIFF
36413: PPUSH
36414: CALL_OW 1
36418: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36419: LD_ADDR_EXP 57
36423: PUSH
36424: LD_EXP 57
36428: PPUSH
36429: LD_VAR 0 3
36433: PUSH
36434: LD_EXP 57
36438: PUSH
36439: LD_VAR 0 3
36443: ARRAY
36444: PUSH
36445: LD_INT 1
36447: PLUS
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PPUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL 44799 0 3
36462: ST_TO_ADDR
// btype := GetBType ( building ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL_OW 266
36477: ST_TO_ADDR
// side := GetSide ( building ) ;
36478: LD_ADDR_VAR 0 8
36482: PUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 255
36492: ST_TO_ADDR
// if btype = b_lab then
36493: LD_VAR 0 5
36497: PUSH
36498: LD_INT 6
36500: EQUAL
36501: IFFALSE 36551
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
36503: LD_ADDR_EXP 90
36507: PUSH
36508: LD_EXP 90
36512: PPUSH
36513: LD_VAR 0 3
36517: PUSH
36518: LD_EXP 90
36522: PUSH
36523: LD_VAR 0 3
36527: ARRAY
36528: PUSH
36529: LD_INT 1
36531: PLUS
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PPUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL 44799 0 3
36546: ST_TO_ADDR
// exit ;
36547: POP
36548: POP
36549: GO 37007
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
36551: LD_VAR 0 5
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 4
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: IN
36570: IFFALSE 36694
// begin if btype = b_armoury then
36572: LD_VAR 0 5
36576: PUSH
36577: LD_INT 4
36579: EQUAL
36580: IFFALSE 36590
// btype := b_barracks ;
36582: LD_ADDR_VAR 0 5
36586: PUSH
36587: LD_INT 5
36589: ST_TO_ADDR
// if btype = b_depot then
36590: LD_VAR 0 5
36594: PUSH
36595: LD_INT 0
36597: EQUAL
36598: IFFALSE 36608
// btype := b_warehouse ;
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: LD_INT 1
36607: ST_TO_ADDR
// if btype = b_workshop then
36608: LD_VAR 0 5
36612: PUSH
36613: LD_INT 2
36615: EQUAL
36616: IFFALSE 36626
// btype := b_factory ;
36618: LD_ADDR_VAR 0 5
36622: PUSH
36623: LD_INT 3
36625: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
36626: LD_VAR 0 5
36630: PPUSH
36631: LD_VAR 0 8
36635: PPUSH
36636: CALL_OW 323
36640: PUSH
36641: LD_INT 1
36643: EQUAL
36644: IFFALSE 36690
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
36646: LD_ADDR_EXP 89
36650: PUSH
36651: LD_EXP 89
36655: PPUSH
36656: LD_VAR 0 3
36660: PUSH
36661: LD_EXP 89
36665: PUSH
36666: LD_VAR 0 3
36670: ARRAY
36671: PUSH
36672: LD_INT 1
36674: PLUS
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL 44799 0 3
36689: ST_TO_ADDR
// exit ;
36690: POP
36691: POP
36692: GO 37007
// end ; if btype in [ b_bunker , b_turret ] then
36694: LD_VAR 0 5
36698: PUSH
36699: LD_INT 32
36701: PUSH
36702: LD_INT 33
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: IN
36709: IFFALSE 36999
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
36711: LD_ADDR_EXP 65
36715: PUSH
36716: LD_EXP 65
36720: PPUSH
36721: LD_VAR 0 3
36725: PUSH
36726: LD_EXP 65
36730: PUSH
36731: LD_VAR 0 3
36735: ARRAY
36736: PUSH
36737: LD_INT 1
36739: PLUS
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PPUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL 44799 0 3
36754: ST_TO_ADDR
// if btype = b_bunker then
36755: LD_VAR 0 5
36759: PUSH
36760: LD_INT 32
36762: EQUAL
36763: IFFALSE 36999
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
36765: LD_ADDR_EXP 66
36769: PUSH
36770: LD_EXP 66
36774: PPUSH
36775: LD_VAR 0 3
36779: PUSH
36780: LD_EXP 66
36784: PUSH
36785: LD_VAR 0 3
36789: ARRAY
36790: PUSH
36791: LD_INT 1
36793: PLUS
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL 44799 0 3
36808: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
36809: LD_ADDR_VAR 0 6
36813: PUSH
36814: LD_EXP 57
36818: PUSH
36819: LD_VAR 0 3
36823: ARRAY
36824: PPUSH
36825: LD_INT 25
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: LD_INT 54
36840: PUSH
36841: EMPTY
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PPUSH
36852: CALL_OW 72
36856: ST_TO_ADDR
// if tmp then
36857: LD_VAR 0 6
36861: IFFALSE 36867
// exit ;
36863: POP
36864: POP
36865: GO 37007
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36867: LD_ADDR_VAR 0 6
36871: PUSH
36872: LD_EXP 57
36876: PUSH
36877: LD_VAR 0 3
36881: ARRAY
36882: PPUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 30
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 30
36898: PUSH
36899: LD_INT 5
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: PPUSH
36911: CALL_OW 72
36915: ST_TO_ADDR
// if not tmp then
36916: LD_VAR 0 6
36920: NOT
36921: IFFALSE 36927
// exit ;
36923: POP
36924: POP
36925: GO 37007
// for j in tmp do
36927: LD_ADDR_VAR 0 4
36931: PUSH
36932: LD_VAR 0 6
36936: PUSH
36937: FOR_IN
36938: IFFALSE 36997
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
36940: LD_ADDR_VAR 0 7
36944: PUSH
36945: LD_VAR 0 4
36949: PPUSH
36950: CALL_OW 313
36954: PPUSH
36955: LD_INT 25
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL_OW 72
36969: ST_TO_ADDR
// if units then
36970: LD_VAR 0 7
36974: IFFALSE 36995
// begin ComExitBuilding ( units [ 1 ] ) ;
36976: LD_VAR 0 7
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: CALL_OW 122
// exit ;
36989: POP
36990: POP
36991: POP
36992: POP
36993: GO 37007
// end ; end ;
36995: GO 36937
36997: POP
36998: POP
// end ; end ; exit ;
36999: POP
37000: POP
37001: GO 37007
// end ; end ;
37003: GO 36361
37005: POP
37006: POP
// end ;
37007: LD_VAR 0 2
37011: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
// if not mc_bases then
37021: LD_EXP 57
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37261
// btype := GetBType ( building ) ;
37030: LD_ADDR_VAR 0 6
37034: PUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 266
37044: ST_TO_ADDR
// x := GetX ( building ) ;
37045: LD_ADDR_VAR 0 7
37049: PUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 250
37059: ST_TO_ADDR
// y := GetY ( building ) ;
37060: LD_ADDR_VAR 0 8
37064: PUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 251
37074: ST_TO_ADDR
// d := GetDir ( building ) ;
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 254
37089: ST_TO_ADDR
// for i = 1 to mc_bases do
37090: LD_ADDR_VAR 0 4
37094: PUSH
37095: DOUBLE
37096: LD_INT 1
37098: DEC
37099: ST_TO_ADDR
37100: LD_EXP 57
37104: PUSH
37105: FOR_TO
37106: IFFALSE 37259
// begin if not mc_build_list [ i ] then
37108: LD_EXP 62
37112: PUSH
37113: LD_VAR 0 4
37117: ARRAY
37118: NOT
37119: IFFALSE 37123
// continue ;
37121: GO 37105
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
37123: LD_VAR 0 6
37127: PUSH
37128: LD_VAR 0 7
37132: PUSH
37133: LD_VAR 0 8
37137: PUSH
37138: LD_VAR 0 9
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: PPUSH
37149: LD_EXP 62
37153: PUSH
37154: LD_VAR 0 4
37158: ARRAY
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: CALL 50436 0 2
37168: IFFALSE 37257
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
37170: LD_ADDR_EXP 62
37174: PUSH
37175: LD_EXP 62
37179: PPUSH
37180: LD_VAR 0 4
37184: PPUSH
37185: LD_EXP 62
37189: PUSH
37190: LD_VAR 0 4
37194: ARRAY
37195: PPUSH
37196: LD_INT 1
37198: PPUSH
37199: CALL_OW 3
37203: PPUSH
37204: CALL_OW 1
37208: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
37209: LD_ADDR_EXP 64
37213: PUSH
37214: LD_EXP 64
37218: PPUSH
37219: LD_VAR 0 4
37223: PUSH
37224: LD_EXP 64
37228: PUSH
37229: LD_VAR 0 4
37233: ARRAY
37234: PUSH
37235: LD_INT 1
37237: PLUS
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL 44799 0 3
37252: ST_TO_ADDR
// exit ;
37253: POP
37254: POP
37255: GO 37261
// end ; end ;
37257: GO 37105
37259: POP
37260: POP
// end ;
37261: LD_VAR 0 3
37265: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
37266: LD_INT 0
37268: PPUSH
37269: PPUSH
37270: PPUSH
// if not mc_bases then
37271: LD_EXP 57
37275: NOT
37276: IFFALSE 37280
// exit ;
37278: GO 37470
// for i = 1 to mc_bases do
37280: LD_ADDR_VAR 0 4
37284: PUSH
37285: DOUBLE
37286: LD_INT 1
37288: DEC
37289: ST_TO_ADDR
37290: LD_EXP 57
37294: PUSH
37295: FOR_TO
37296: IFFALSE 37383
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
37298: LD_VAR 0 1
37302: PUSH
37303: LD_EXP 65
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: IN
37314: PUSH
37315: LD_VAR 0 1
37319: PUSH
37320: LD_EXP 66
37324: PUSH
37325: LD_VAR 0 4
37329: ARRAY
37330: IN
37331: NOT
37332: AND
37333: IFFALSE 37381
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37335: LD_ADDR_EXP 66
37339: PUSH
37340: LD_EXP 66
37344: PPUSH
37345: LD_VAR 0 4
37349: PUSH
37350: LD_EXP 66
37354: PUSH
37355: LD_VAR 0 4
37359: ARRAY
37360: PUSH
37361: LD_INT 1
37363: PLUS
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PPUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL 44799 0 3
37378: ST_TO_ADDR
// break ;
37379: GO 37383
// end ; end ;
37381: GO 37295
37383: POP
37384: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL_OW 257
37394: PUSH
37395: LD_EXP 83
37399: IN
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 266
37410: PUSH
37411: LD_INT 5
37413: EQUAL
37414: AND
37415: PUSH
37416: LD_VAR 0 2
37420: PPUSH
37421: CALL_OW 110
37425: PUSH
37426: LD_INT 18
37428: NONEQUAL
37429: AND
37430: IFFALSE 37470
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL_OW 257
37441: PUSH
37442: LD_INT 5
37444: PUSH
37445: LD_INT 8
37447: PUSH
37448: LD_INT 9
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: IN
37456: IFFALSE 37470
// SetClass ( unit , 1 ) ;
37458: LD_VAR 0 2
37462: PPUSH
37463: LD_INT 1
37465: PPUSH
37466: CALL_OW 336
// end ;
37470: LD_VAR 0 3
37474: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
37475: LD_INT 0
37477: PPUSH
37478: PPUSH
// if not mc_bases then
37479: LD_EXP 57
37483: NOT
37484: IFFALSE 37488
// exit ;
37486: GO 37604
// if GetLives ( abandoned_vehicle ) > 250 then
37488: LD_VAR 0 2
37492: PPUSH
37493: CALL_OW 256
37497: PUSH
37498: LD_INT 250
37500: GREATER
37501: IFFALSE 37505
// exit ;
37503: GO 37604
// for i = 1 to mc_bases do
37505: LD_ADDR_VAR 0 6
37509: PUSH
37510: DOUBLE
37511: LD_INT 1
37513: DEC
37514: ST_TO_ADDR
37515: LD_EXP 57
37519: PUSH
37520: FOR_TO
37521: IFFALSE 37602
// begin if driver in mc_bases [ i ] then
37523: LD_VAR 0 1
37527: PUSH
37528: LD_EXP 57
37532: PUSH
37533: LD_VAR 0 6
37537: ARRAY
37538: IN
37539: IFFALSE 37600
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
37541: LD_VAR 0 1
37545: PPUSH
37546: LD_EXP 57
37550: PUSH
37551: LD_VAR 0 6
37555: ARRAY
37556: PPUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 30
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: PPUSH
37585: CALL_OW 72
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PPUSH
37594: CALL_OW 112
// break ;
37598: GO 37602
// end ; end ;
37600: GO 37520
37602: POP
37603: POP
// end ; end_of_file
37604: LD_VAR 0 5
37608: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37609: LD_INT 0
37611: PPUSH
37612: PPUSH
// if exist_mode then
37613: LD_VAR 0 2
37617: IFFALSE 37642
// unit := CreateCharacter ( prefix & ident ) else
37619: LD_ADDR_VAR 0 5
37623: PUSH
37624: LD_VAR 0 3
37628: PUSH
37629: LD_VAR 0 1
37633: STR
37634: PPUSH
37635: CALL_OW 34
37639: ST_TO_ADDR
37640: GO 37657
// unit := NewCharacter ( ident ) ;
37642: LD_ADDR_VAR 0 5
37646: PUSH
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL_OW 25
37656: ST_TO_ADDR
// result := unit ;
37657: LD_ADDR_VAR 0 4
37661: PUSH
37662: LD_VAR 0 5
37666: ST_TO_ADDR
// end ;
37667: LD_VAR 0 4
37671: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37672: LD_INT 0
37674: PPUSH
37675: PPUSH
// if not side or not nation then
37676: LD_VAR 0 1
37680: NOT
37681: PUSH
37682: LD_VAR 0 2
37686: NOT
37687: OR
37688: IFFALSE 37692
// exit ;
37690: GO 38328
// case nation of nation_american :
37692: LD_VAR 0 2
37696: PUSH
37697: LD_INT 1
37699: DOUBLE
37700: EQUAL
37701: IFTRUE 37705
37703: GO 37875
37705: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
37706: LD_ADDR_VAR 0 4
37710: PUSH
37711: LD_INT 35
37713: PUSH
37714: LD_INT 45
37716: PUSH
37717: LD_INT 46
37719: PUSH
37720: LD_INT 47
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 6
37731: PUSH
37732: LD_INT 15
37734: PUSH
37735: LD_INT 16
37737: PUSH
37738: LD_INT 7
37740: PUSH
37741: LD_INT 12
37743: PUSH
37744: LD_INT 13
37746: PUSH
37747: LD_INT 10
37749: PUSH
37750: LD_INT 14
37752: PUSH
37753: LD_INT 20
37755: PUSH
37756: LD_INT 21
37758: PUSH
37759: LD_INT 22
37761: PUSH
37762: LD_INT 25
37764: PUSH
37765: LD_INT 32
37767: PUSH
37768: LD_INT 27
37770: PUSH
37771: LD_INT 36
37773: PUSH
37774: LD_INT 69
37776: PUSH
37777: LD_INT 39
37779: PUSH
37780: LD_INT 34
37782: PUSH
37783: LD_INT 40
37785: PUSH
37786: LD_INT 48
37788: PUSH
37789: LD_INT 49
37791: PUSH
37792: LD_INT 50
37794: PUSH
37795: LD_INT 51
37797: PUSH
37798: LD_INT 52
37800: PUSH
37801: LD_INT 53
37803: PUSH
37804: LD_INT 54
37806: PUSH
37807: LD_INT 55
37809: PUSH
37810: LD_INT 56
37812: PUSH
37813: LD_INT 57
37815: PUSH
37816: LD_INT 58
37818: PUSH
37819: LD_INT 59
37821: PUSH
37822: LD_INT 60
37824: PUSH
37825: LD_INT 61
37827: PUSH
37828: LD_INT 62
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
37873: GO 38252
37875: LD_INT 2
37877: DOUBLE
37878: EQUAL
37879: IFTRUE 37883
37881: GO 38061
37883: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
37884: LD_ADDR_VAR 0 4
37888: PUSH
37889: LD_INT 35
37891: PUSH
37892: LD_INT 45
37894: PUSH
37895: LD_INT 46
37897: PUSH
37898: LD_INT 47
37900: PUSH
37901: LD_INT 70
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 11
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 4
37915: PUSH
37916: LD_INT 5
37918: PUSH
37919: LD_INT 6
37921: PUSH
37922: LD_INT 15
37924: PUSH
37925: LD_INT 18
37927: PUSH
37928: LD_INT 7
37930: PUSH
37931: LD_INT 17
37933: PUSH
37934: LD_INT 8
37936: PUSH
37937: LD_INT 20
37939: PUSH
37940: LD_INT 21
37942: PUSH
37943: LD_INT 22
37945: PUSH
37946: LD_INT 72
37948: PUSH
37949: LD_INT 26
37951: PUSH
37952: LD_INT 69
37954: PUSH
37955: LD_INT 39
37957: PUSH
37958: LD_INT 40
37960: PUSH
37961: LD_INT 41
37963: PUSH
37964: LD_INT 42
37966: PUSH
37967: LD_INT 43
37969: PUSH
37970: LD_INT 48
37972: PUSH
37973: LD_INT 49
37975: PUSH
37976: LD_INT 50
37978: PUSH
37979: LD_INT 51
37981: PUSH
37982: LD_INT 52
37984: PUSH
37985: LD_INT 53
37987: PUSH
37988: LD_INT 54
37990: PUSH
37991: LD_INT 55
37993: PUSH
37994: LD_INT 56
37996: PUSH
37997: LD_INT 60
37999: PUSH
38000: LD_INT 61
38002: PUSH
38003: LD_INT 62
38005: PUSH
38006: LD_INT 66
38008: PUSH
38009: LD_INT 67
38011: PUSH
38012: LD_INT 68
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
38059: GO 38252
38061: LD_INT 3
38063: DOUBLE
38064: EQUAL
38065: IFTRUE 38069
38067: GO 38251
38069: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
38070: LD_ADDR_VAR 0 4
38074: PUSH
38075: LD_INT 46
38077: PUSH
38078: LD_INT 47
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 11
38089: PUSH
38090: LD_INT 9
38092: PUSH
38093: LD_INT 20
38095: PUSH
38096: LD_INT 19
38098: PUSH
38099: LD_INT 21
38101: PUSH
38102: LD_INT 24
38104: PUSH
38105: LD_INT 22
38107: PUSH
38108: LD_INT 25
38110: PUSH
38111: LD_INT 28
38113: PUSH
38114: LD_INT 29
38116: PUSH
38117: LD_INT 30
38119: PUSH
38120: LD_INT 31
38122: PUSH
38123: LD_INT 37
38125: PUSH
38126: LD_INT 38
38128: PUSH
38129: LD_INT 32
38131: PUSH
38132: LD_INT 27
38134: PUSH
38135: LD_INT 33
38137: PUSH
38138: LD_INT 69
38140: PUSH
38141: LD_INT 39
38143: PUSH
38144: LD_INT 34
38146: PUSH
38147: LD_INT 40
38149: PUSH
38150: LD_INT 71
38152: PUSH
38153: LD_INT 23
38155: PUSH
38156: LD_INT 44
38158: PUSH
38159: LD_INT 48
38161: PUSH
38162: LD_INT 49
38164: PUSH
38165: LD_INT 50
38167: PUSH
38168: LD_INT 51
38170: PUSH
38171: LD_INT 52
38173: PUSH
38174: LD_INT 53
38176: PUSH
38177: LD_INT 54
38179: PUSH
38180: LD_INT 55
38182: PUSH
38183: LD_INT 56
38185: PUSH
38186: LD_INT 57
38188: PUSH
38189: LD_INT 58
38191: PUSH
38192: LD_INT 59
38194: PUSH
38195: LD_INT 63
38197: PUSH
38198: LD_INT 64
38200: PUSH
38201: LD_INT 65
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: ST_TO_ADDR
38249: GO 38252
38251: POP
// if state > - 1 and state < 3 then
38252: LD_VAR 0 3
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: GREATER
38261: PUSH
38262: LD_VAR 0 3
38266: PUSH
38267: LD_INT 3
38269: LESS
38270: AND
38271: IFFALSE 38328
// for i in result do
38273: LD_ADDR_VAR 0 5
38277: PUSH
38278: LD_VAR 0 4
38282: PUSH
38283: FOR_IN
38284: IFFALSE 38326
// if GetTech ( i , side ) <> state then
38286: LD_VAR 0 5
38290: PPUSH
38291: LD_VAR 0 1
38295: PPUSH
38296: CALL_OW 321
38300: PUSH
38301: LD_VAR 0 3
38305: NONEQUAL
38306: IFFALSE 38324
// result := result diff i ;
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: LD_VAR 0 4
38317: PUSH
38318: LD_VAR 0 5
38322: DIFF
38323: ST_TO_ADDR
38324: GO 38283
38326: POP
38327: POP
// end ;
38328: LD_VAR 0 4
38332: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38333: LD_INT 0
38335: PPUSH
38336: PPUSH
38337: PPUSH
// result := true ;
38338: LD_ADDR_VAR 0 3
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38346: LD_ADDR_VAR 0 5
38350: PUSH
38351: LD_VAR 0 2
38355: PPUSH
38356: CALL_OW 480
38360: ST_TO_ADDR
// if not tmp then
38361: LD_VAR 0 5
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38419
// for i in tmp do
38370: LD_ADDR_VAR 0 4
38374: PUSH
38375: LD_VAR 0 5
38379: PUSH
38380: FOR_IN
38381: IFFALSE 38417
// if GetTech ( i , side ) <> state_researched then
38383: LD_VAR 0 4
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 321
38397: PUSH
38398: LD_INT 2
38400: NONEQUAL
38401: IFFALSE 38415
// begin result := false ;
38403: LD_ADDR_VAR 0 3
38407: PUSH
38408: LD_INT 0
38410: ST_TO_ADDR
// exit ;
38411: POP
38412: POP
38413: GO 38419
// end ;
38415: GO 38380
38417: POP
38418: POP
// end ;
38419: LD_VAR 0 3
38423: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38424: LD_INT 0
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38439: LD_VAR 0 1
38443: NOT
38444: PUSH
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL_OW 257
38454: PUSH
38455: LD_INT 9
38457: NONEQUAL
38458: OR
38459: IFFALSE 38463
// exit ;
38461: GO 39036
// side := GetSide ( unit ) ;
38463: LD_ADDR_VAR 0 9
38467: PUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 255
38477: ST_TO_ADDR
// tech_space := tech_spacanom ;
38478: LD_ADDR_VAR 0 12
38482: PUSH
38483: LD_INT 29
38485: ST_TO_ADDR
// tech_time := tech_taurad ;
38486: LD_ADDR_VAR 0 13
38490: PUSH
38491: LD_INT 28
38493: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38494: LD_ADDR_VAR 0 11
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 310
38508: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38509: LD_VAR 0 11
38513: PPUSH
38514: CALL_OW 247
38518: PUSH
38519: LD_INT 2
38521: EQUAL
38522: IFFALSE 38526
// exit ;
38524: GO 39036
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38526: LD_ADDR_VAR 0 8
38530: PUSH
38531: LD_INT 81
38533: PUSH
38534: LD_VAR 0 9
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: LD_INT 21
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PPUSH
38564: CALL_OW 69
38568: ST_TO_ADDR
// if not tmp then
38569: LD_VAR 0 8
38573: NOT
38574: IFFALSE 38578
// exit ;
38576: GO 39036
// if in_unit then
38578: LD_VAR 0 11
38582: IFFALSE 38606
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38584: LD_ADDR_VAR 0 10
38588: PUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_VAR 0 11
38598: PPUSH
38599: CALL_OW 74
38603: ST_TO_ADDR
38604: GO 38626
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38606: LD_ADDR_VAR 0 10
38610: PUSH
38611: LD_VAR 0 8
38615: PPUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 74
38625: ST_TO_ADDR
// if not enemy then
38626: LD_VAR 0 10
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 39036
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38635: LD_VAR 0 11
38639: PUSH
38640: LD_VAR 0 11
38644: PPUSH
38645: LD_VAR 0 10
38649: PPUSH
38650: CALL_OW 296
38654: PUSH
38655: LD_INT 13
38657: GREATER
38658: AND
38659: PUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: LD_VAR 0 10
38669: PPUSH
38670: CALL_OW 296
38674: PUSH
38675: LD_INT 12
38677: GREATER
38678: OR
38679: IFFALSE 38683
// exit ;
38681: GO 39036
// missile := [ 1 ] ;
38683: LD_ADDR_VAR 0 14
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38694: LD_VAR 0 9
38698: PPUSH
38699: LD_VAR 0 12
38703: PPUSH
38704: CALL_OW 325
38708: IFFALSE 38737
// missile := Insert ( missile , missile + 1 , 2 ) ;
38710: LD_ADDR_VAR 0 14
38714: PUSH
38715: LD_VAR 0 14
38719: PPUSH
38720: LD_VAR 0 14
38724: PUSH
38725: LD_INT 1
38727: PLUS
38728: PPUSH
38729: LD_INT 2
38731: PPUSH
38732: CALL_OW 2
38736: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38737: LD_VAR 0 9
38741: PPUSH
38742: LD_VAR 0 13
38746: PPUSH
38747: CALL_OW 325
38751: PUSH
38752: LD_VAR 0 10
38756: PPUSH
38757: CALL_OW 255
38761: PPUSH
38762: LD_VAR 0 13
38766: PPUSH
38767: CALL_OW 325
38771: NOT
38772: AND
38773: IFFALSE 38802
// missile := Insert ( missile , missile + 1 , 3 ) ;
38775: LD_ADDR_VAR 0 14
38779: PUSH
38780: LD_VAR 0 14
38784: PPUSH
38785: LD_VAR 0 14
38789: PUSH
38790: LD_INT 1
38792: PLUS
38793: PPUSH
38794: LD_INT 3
38796: PPUSH
38797: CALL_OW 2
38801: ST_TO_ADDR
// if missile < 2 then
38802: LD_VAR 0 14
38806: PUSH
38807: LD_INT 2
38809: LESS
38810: IFFALSE 38814
// exit ;
38812: GO 39036
// x := GetX ( enemy ) ;
38814: LD_ADDR_VAR 0 4
38818: PUSH
38819: LD_VAR 0 10
38823: PPUSH
38824: CALL_OW 250
38828: ST_TO_ADDR
// y := GetY ( enemy ) ;
38829: LD_ADDR_VAR 0 5
38833: PUSH
38834: LD_VAR 0 10
38838: PPUSH
38839: CALL_OW 251
38843: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38844: LD_ADDR_VAR 0 6
38848: PUSH
38849: LD_VAR 0 4
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PPUSH
38858: LD_INT 1
38860: PPUSH
38861: CALL_OW 12
38865: PLUS
38866: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38867: LD_ADDR_VAR 0 7
38871: PUSH
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PPUSH
38881: LD_INT 1
38883: PPUSH
38884: CALL_OW 12
38888: PLUS
38889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38890: LD_VAR 0 6
38894: PPUSH
38895: LD_VAR 0 7
38899: PPUSH
38900: CALL_OW 488
38904: NOT
38905: IFFALSE 38927
// begin _x := x ;
38907: LD_ADDR_VAR 0 6
38911: PUSH
38912: LD_VAR 0 4
38916: ST_TO_ADDR
// _y := y ;
38917: LD_ADDR_VAR 0 7
38921: PUSH
38922: LD_VAR 0 5
38926: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_INT 1
38934: PPUSH
38935: LD_VAR 0 14
38939: PPUSH
38940: CALL_OW 12
38944: ST_TO_ADDR
// case i of 1 :
38945: LD_VAR 0 3
38949: PUSH
38950: LD_INT 1
38952: DOUBLE
38953: EQUAL
38954: IFTRUE 38958
38956: GO 38975
38958: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_VAR 0 10
38968: PPUSH
38969: CALL_OW 115
38973: GO 39036
38975: LD_INT 2
38977: DOUBLE
38978: EQUAL
38979: IFTRUE 38983
38981: GO 39005
38983: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38984: LD_VAR 0 1
38988: PPUSH
38989: LD_VAR 0 6
38993: PPUSH
38994: LD_VAR 0 7
38998: PPUSH
38999: CALL_OW 153
39003: GO 39036
39005: LD_INT 3
39007: DOUBLE
39008: EQUAL
39009: IFTRUE 39013
39011: GO 39035
39013: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39014: LD_VAR 0 1
39018: PPUSH
39019: LD_VAR 0 6
39023: PPUSH
39024: LD_VAR 0 7
39028: PPUSH
39029: CALL_OW 154
39033: GO 39036
39035: POP
// end ;
39036: LD_VAR 0 2
39040: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39041: LD_INT 0
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
// if not unit or not building then
39049: LD_VAR 0 1
39053: NOT
39054: PUSH
39055: LD_VAR 0 2
39059: NOT
39060: OR
39061: IFFALSE 39065
// exit ;
39063: GO 39223
// x := GetX ( building ) ;
39065: LD_ADDR_VAR 0 5
39069: PUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: CALL_OW 250
39079: ST_TO_ADDR
// y := GetY ( building ) ;
39080: LD_ADDR_VAR 0 6
39084: PUSH
39085: LD_VAR 0 2
39089: PPUSH
39090: CALL_OW 251
39094: ST_TO_ADDR
// for i = 0 to 5 do
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: DOUBLE
39101: LD_INT 0
39103: DEC
39104: ST_TO_ADDR
39105: LD_INT 5
39107: PUSH
39108: FOR_TO
39109: IFFALSE 39221
// begin _x := ShiftX ( x , i , 3 ) ;
39111: LD_ADDR_VAR 0 7
39115: PUSH
39116: LD_VAR 0 5
39120: PPUSH
39121: LD_VAR 0 4
39125: PPUSH
39126: LD_INT 3
39128: PPUSH
39129: CALL_OW 272
39133: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39134: LD_ADDR_VAR 0 8
39138: PUSH
39139: LD_VAR 0 6
39143: PPUSH
39144: LD_VAR 0 4
39148: PPUSH
39149: LD_INT 3
39151: PPUSH
39152: CALL_OW 273
39156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39157: LD_VAR 0 7
39161: PPUSH
39162: LD_VAR 0 8
39166: PPUSH
39167: CALL_OW 488
39171: NOT
39172: IFFALSE 39176
// continue ;
39174: GO 39108
// if HexInfo ( _x , _y ) = 0 then
39176: LD_VAR 0 7
39180: PPUSH
39181: LD_VAR 0 8
39185: PPUSH
39186: CALL_OW 428
39190: PUSH
39191: LD_INT 0
39193: EQUAL
39194: IFFALSE 39219
// begin ComMoveXY ( unit , _x , _y ) ;
39196: LD_VAR 0 1
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: LD_VAR 0 8
39210: PPUSH
39211: CALL_OW 111
// exit ;
39215: POP
39216: POP
39217: GO 39223
// end ; end ;
39219: GO 39108
39221: POP
39222: POP
// end ;
39223: LD_VAR 0 3
39227: RET
// export function ScanBase ( side , base_area ) ; begin
39228: LD_INT 0
39230: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39231: LD_ADDR_VAR 0 3
39235: PUSH
39236: LD_VAR 0 2
39240: PPUSH
39241: LD_INT 81
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PPUSH
39253: CALL_OW 70
39257: ST_TO_ADDR
// end ;
39258: LD_VAR 0 3
39262: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
39270: LD_VAR 0 1
39274: NOT
39275: PUSH
39276: LD_EXP 57
39280: PUSH
39281: LD_VAR 0 1
39285: ARRAY
39286: NOT
39287: OR
39288: PUSH
39289: LD_VAR 0 2
39293: NOT
39294: OR
39295: PUSH
39296: LD_VAR 0 3
39300: NOT
39301: OR
39302: IFFALSE 39306
// exit ;
39304: GO 39756
// side := mc_sides [ base ] ;
39306: LD_ADDR_VAR 0 6
39310: PUSH
39311: LD_EXP 83
39315: PUSH
39316: LD_VAR 0 1
39320: ARRAY
39321: ST_TO_ADDR
// if not side then
39322: LD_VAR 0 6
39326: NOT
39327: IFFALSE 39331
// exit ;
39329: GO 39756
// for i in solds do
39331: LD_ADDR_VAR 0 7
39335: PUSH
39336: LD_VAR 0 2
39340: PUSH
39341: FOR_IN
39342: IFFALSE 39403
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
39344: LD_VAR 0 7
39348: PPUSH
39349: CALL_OW 310
39353: PPUSH
39354: CALL_OW 266
39358: PUSH
39359: LD_INT 32
39361: PUSH
39362: LD_INT 31
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: IN
39369: IFFALSE 39389
// solds := solds diff i else
39371: LD_ADDR_VAR 0 2
39375: PUSH
39376: LD_VAR 0 2
39380: PUSH
39381: LD_VAR 0 7
39385: DIFF
39386: ST_TO_ADDR
39387: GO 39401
// SetTag ( i , 18 ) ;
39389: LD_VAR 0 7
39393: PPUSH
39394: LD_INT 18
39396: PPUSH
39397: CALL_OW 109
39401: GO 39341
39403: POP
39404: POP
// if not solds then
39405: LD_VAR 0 2
39409: NOT
39410: IFFALSE 39414
// exit ;
39412: GO 39756
// repeat wait ( 0 0$1 ) ;
39414: LD_INT 35
39416: PPUSH
39417: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
39421: LD_ADDR_VAR 0 5
39425: PUSH
39426: LD_VAR 0 6
39430: PPUSH
39431: LD_VAR 0 3
39435: PPUSH
39436: CALL 39228 0 2
39440: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
39441: LD_VAR 0 5
39445: NOT
39446: PUSH
39447: LD_VAR 0 5
39451: PUSH
39452: LD_INT 3
39454: GREATER
39455: OR
39456: PUSH
39457: LD_EXP 79
39461: PUSH
39462: LD_VAR 0 1
39466: ARRAY
39467: OR
39468: IFFALSE 39509
// begin for i in solds do
39470: LD_ADDR_VAR 0 7
39474: PUSH
39475: LD_VAR 0 2
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39505
// if HasTask ( i ) then
39483: LD_VAR 0 7
39487: PPUSH
39488: CALL_OW 314
39492: IFFALSE 39503
// ComStop ( i ) ;
39494: LD_VAR 0 7
39498: PPUSH
39499: CALL_OW 141
39503: GO 39480
39505: POP
39506: POP
// break ;
39507: GO 39744
// end ; for i in solds do
39509: LD_ADDR_VAR 0 7
39513: PUSH
39514: LD_VAR 0 2
39518: PUSH
39519: FOR_IN
39520: IFFALSE 39736
// begin if IsInUnit ( i ) then
39522: LD_VAR 0 7
39526: PPUSH
39527: CALL_OW 310
39531: IFFALSE 39542
// ComExitBuilding ( i ) ;
39533: LD_VAR 0 7
39537: PPUSH
39538: CALL_OW 122
// if GetLives ( i ) > 333 then
39542: LD_VAR 0 7
39546: PPUSH
39547: CALL_OW 256
39551: PUSH
39552: LD_INT 333
39554: GREATER
39555: IFFALSE 39583
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
39557: LD_VAR 0 7
39561: PPUSH
39562: LD_VAR 0 5
39566: PPUSH
39567: LD_VAR 0 7
39571: PPUSH
39572: CALL_OW 74
39576: PPUSH
39577: CALL_OW 115
39581: GO 39734
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
39583: LD_ADDR_VAR 0 8
39587: PUSH
39588: LD_EXP 57
39592: PUSH
39593: LD_VAR 0 1
39597: ARRAY
39598: PPUSH
39599: LD_INT 2
39601: PUSH
39602: LD_INT 30
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 30
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 30
39624: PUSH
39625: LD_INT 6
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: PPUSH
39638: CALL_OW 72
39642: PPUSH
39643: LD_VAR 0 7
39647: PPUSH
39648: CALL_OW 74
39652: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
39653: LD_VAR 0 7
39657: PPUSH
39658: LD_VAR 0 8
39662: PPUSH
39663: CALL_OW 250
39667: PPUSH
39668: LD_INT 3
39670: PPUSH
39671: LD_INT 5
39673: PPUSH
39674: CALL_OW 272
39678: PPUSH
39679: LD_VAR 0 8
39683: PPUSH
39684: CALL_OW 251
39688: PPUSH
39689: LD_INT 3
39691: PPUSH
39692: LD_INT 5
39694: PPUSH
39695: CALL_OW 273
39699: PPUSH
39700: CALL_OW 111
// SetTag ( i , 0 ) ;
39704: LD_VAR 0 7
39708: PPUSH
39709: LD_INT 0
39711: PPUSH
39712: CALL_OW 109
// solds := solds diff i ;
39716: LD_ADDR_VAR 0 2
39720: PUSH
39721: LD_VAR 0 2
39725: PUSH
39726: LD_VAR 0 7
39730: DIFF
39731: ST_TO_ADDR
// continue ;
39732: GO 39519
// end ; end ;
39734: GO 39519
39736: POP
39737: POP
// until solds ;
39738: LD_VAR 0 2
39742: IFFALSE 39414
// MC_Reset ( base , 18 ) ;
39744: LD_VAR 0 1
39748: PPUSH
39749: LD_INT 18
39751: PPUSH
39752: CALL 19079 0 2
// end ;
39756: LD_VAR 0 4
39760: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
39761: LD_INT 0
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
39777: PPUSH
39778: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
39779: LD_ADDR_VAR 0 12
39783: PUSH
39784: LD_EXP 57
39788: PUSH
39789: LD_VAR 0 1
39793: ARRAY
39794: PPUSH
39795: LD_INT 25
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PPUSH
39805: CALL_OW 72
39809: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
39810: LD_ADDR_VAR 0 8
39814: PUSH
39815: LD_EXP 57
39819: PUSH
39820: LD_VAR 0 1
39824: ARRAY
39825: PPUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 25
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 25
39841: PUSH
39842: LD_INT 5
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 25
39851: PUSH
39852: LD_INT 8
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 25
39861: PUSH
39862: LD_INT 9
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: PPUSH
39876: CALL_OW 72
39880: ST_TO_ADDR
// if not defenders and not solds then
39881: LD_VAR 0 2
39885: NOT
39886: PUSH
39887: LD_VAR 0 8
39891: NOT
39892: AND
39893: IFFALSE 39897
// exit ;
39895: GO 41263
// depot_under_attack := false ;
39897: LD_ADDR_VAR 0 16
39901: PUSH
39902: LD_INT 0
39904: ST_TO_ADDR
// sold_defenders := [ ] ;
39905: LD_ADDR_VAR 0 17
39909: PUSH
39910: EMPTY
39911: ST_TO_ADDR
// if mechs then
39912: LD_VAR 0 12
39916: IFFALSE 40045
// for i in defenders do
39918: LD_ADDR_VAR 0 5
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: FOR_IN
39929: IFFALSE 40043
// begin SetTag ( i , 20 ) ;
39931: LD_VAR 0 5
39935: PPUSH
39936: LD_INT 20
39938: PPUSH
39939: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
39943: LD_VAR 0 5
39947: PPUSH
39948: CALL_OW 263
39952: PUSH
39953: LD_INT 1
39955: EQUAL
39956: PUSH
39957: LD_VAR 0 5
39961: PPUSH
39962: CALL_OW 311
39966: NOT
39967: AND
39968: PUSH
39969: LD_VAR 0 12
39973: AND
39974: IFFALSE 40041
// begin un := mechs [ 1 ] ;
39976: LD_ADDR_VAR 0 10
39980: PUSH
39981: LD_VAR 0 12
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: ST_TO_ADDR
// ComExitBuilding ( un ) ;
39990: LD_VAR 0 10
39994: PPUSH
39995: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
39999: LD_VAR 0 10
40003: PPUSH
40004: LD_VAR 0 5
40008: PPUSH
40009: CALL_OW 180
// SetTag ( un , 19 ) ;
40013: LD_VAR 0 10
40017: PPUSH
40018: LD_INT 19
40020: PPUSH
40021: CALL_OW 109
// mechs := mechs diff un ;
40025: LD_ADDR_VAR 0 12
40029: PUSH
40030: LD_VAR 0 12
40034: PUSH
40035: LD_VAR 0 10
40039: DIFF
40040: ST_TO_ADDR
// end ; end ;
40041: GO 39928
40043: POP
40044: POP
// if solds then
40045: LD_VAR 0 8
40049: IFFALSE 40108
// for i in solds do
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_VAR 0 8
40060: PUSH
40061: FOR_IN
40062: IFFALSE 40106
// if not GetTag ( i ) then
40064: LD_VAR 0 5
40068: PPUSH
40069: CALL_OW 110
40073: NOT
40074: IFFALSE 40104
// begin defenders := defenders union i ;
40076: LD_ADDR_VAR 0 2
40080: PUSH
40081: LD_VAR 0 2
40085: PUSH
40086: LD_VAR 0 5
40090: UNION
40091: ST_TO_ADDR
// SetTag ( i , 18 ) ;
40092: LD_VAR 0 5
40096: PPUSH
40097: LD_INT 18
40099: PPUSH
40100: CALL_OW 109
// end ;
40104: GO 40061
40106: POP
40107: POP
// repeat wait ( 0 0$1 ) ;
40108: LD_INT 35
40110: PPUSH
40111: CALL_OW 67
// enemy := mc_scan [ base ] ;
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_EXP 80
40124: PUSH
40125: LD_VAR 0 1
40129: ARRAY
40130: ST_TO_ADDR
// for i in defenders do
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: LD_VAR 0 2
40140: PUSH
40141: FOR_IN
40142: IFFALSE 40827
// begin e := NearestUnitToUnit ( enemy , i ) ;
40144: LD_ADDR_VAR 0 13
40148: PUSH
40149: LD_VAR 0 3
40153: PPUSH
40154: LD_VAR 0 5
40158: PPUSH
40159: CALL_OW 74
40163: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
40164: LD_ADDR_VAR 0 16
40168: PUSH
40169: LD_EXP 57
40173: PUSH
40174: LD_VAR 0 1
40178: ARRAY
40179: PPUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 30
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 30
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 72
40212: NOT
40213: PUSH
40214: LD_EXP 57
40218: PUSH
40219: LD_VAR 0 1
40223: ARRAY
40224: PPUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 30
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 72
40257: PPUSH
40258: CALL_OW 256
40262: PUSH
40263: LD_INT 600
40265: LESS
40266: OR
40267: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
40268: LD_VAR 0 5
40272: PPUSH
40273: CALL_OW 247
40277: PUSH
40278: LD_INT 2
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40533
40286: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
40287: LD_VAR 0 5
40291: PPUSH
40292: CALL_OW 256
40296: PUSH
40297: LD_INT 650
40299: GREATER
40300: PUSH
40301: LD_VAR 0 5
40305: PPUSH
40306: LD_VAR 0 13
40310: PPUSH
40311: CALL_OW 296
40315: PUSH
40316: LD_INT 40
40318: LESS
40319: AND
40320: IFFALSE 40338
// ComAttackUnit ( i , e ) else
40322: LD_VAR 0 5
40326: PPUSH
40327: LD_VAR 0 13
40331: PPUSH
40332: CALL_OW 115
40336: GO 40416
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
40338: LD_VAR 0 5
40342: PPUSH
40343: LD_VAR 0 13
40347: PPUSH
40348: CALL_OW 296
40352: PUSH
40353: LD_INT 30
40355: GREATEREQUAL
40356: PUSH
40357: LD_VAR 0 5
40361: PPUSH
40362: CALL_OW 256
40366: PUSH
40367: LD_INT 650
40369: LESSEQUAL
40370: OR
40371: PUSH
40372: LD_VAR 0 5
40376: PPUSH
40377: LD_EXP 81
40381: PUSH
40382: LD_VAR 0 1
40386: ARRAY
40387: PPUSH
40388: CALL_OW 308
40392: NOT
40393: AND
40394: IFFALSE 40416
// ComMoveToArea ( i , mc_parking [ base ] ) ;
40396: LD_VAR 0 5
40400: PPUSH
40401: LD_EXP 81
40405: PUSH
40406: LD_VAR 0 1
40410: ARRAY
40411: PPUSH
40412: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
40416: LD_VAR 0 5
40420: PPUSH
40421: CALL_OW 256
40425: PUSH
40426: LD_INT 998
40428: LESS
40429: PUSH
40430: LD_VAR 0 5
40434: PPUSH
40435: CALL_OW 263
40439: PUSH
40440: LD_INT 1
40442: EQUAL
40443: AND
40444: PUSH
40445: LD_VAR 0 5
40449: PPUSH
40450: CALL_OW 311
40454: AND
40455: PUSH
40456: LD_VAR 0 5
40460: PPUSH
40461: LD_EXP 81
40465: PUSH
40466: LD_VAR 0 1
40470: ARRAY
40471: PPUSH
40472: CALL_OW 308
40476: AND
40477: IFFALSE 40531
// begin mech := IsDrivenBy ( i ) ;
40479: LD_ADDR_VAR 0 9
40483: PUSH
40484: LD_VAR 0 5
40488: PPUSH
40489: CALL_OW 311
40493: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
40494: LD_VAR 0 9
40498: PPUSH
40499: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
40503: LD_VAR 0 9
40507: PPUSH
40508: LD_VAR 0 5
40512: PPUSH
40513: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
40517: LD_VAR 0 9
40521: PPUSH
40522: LD_VAR 0 5
40526: PPUSH
40527: CALL_OW 180
// end ; end ; unit_human :
40531: GO 40798
40533: LD_INT 1
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40797
40541: POP
// begin b := IsInUnit ( i ) ;
40542: LD_ADDR_VAR 0 18
40546: PUSH
40547: LD_VAR 0 5
40551: PPUSH
40552: CALL_OW 310
40556: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
40557: LD_ADDR_VAR 0 19
40561: PUSH
40562: LD_VAR 0 18
40566: NOT
40567: PUSH
40568: LD_VAR 0 18
40572: PPUSH
40573: CALL_OW 266
40577: PUSH
40578: LD_INT 32
40580: PUSH
40581: LD_INT 31
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: IN
40588: OR
40589: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
40590: LD_VAR 0 16
40594: PUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_INT 21
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PPUSH
40610: CALL_OW 72
40614: PUSH
40615: LD_INT 1
40617: LESSEQUAL
40618: OR
40619: PUSH
40620: LD_VAR 0 19
40624: AND
40625: PUSH
40626: LD_VAR 0 5
40630: PUSH
40631: LD_VAR 0 17
40635: IN
40636: NOT
40637: AND
40638: IFFALSE 40731
// begin if b then
40640: LD_VAR 0 18
40644: IFFALSE 40693
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
40646: LD_VAR 0 18
40650: PPUSH
40651: LD_VAR 0 3
40655: PPUSH
40656: LD_VAR 0 18
40660: PPUSH
40661: CALL_OW 74
40665: PPUSH
40666: CALL_OW 296
40670: PUSH
40671: LD_INT 10
40673: LESS
40674: PUSH
40675: LD_VAR 0 18
40679: PPUSH
40680: CALL_OW 461
40684: PUSH
40685: LD_INT 7
40687: NONEQUAL
40688: AND
40689: IFFALSE 40693
// continue ;
40691: GO 40141
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
40693: LD_ADDR_VAR 0 17
40697: PUSH
40698: LD_VAR 0 17
40702: PPUSH
40703: LD_VAR 0 17
40707: PUSH
40708: LD_INT 1
40710: PLUS
40711: PPUSH
40712: LD_VAR 0 5
40716: PPUSH
40717: CALL_OW 1
40721: ST_TO_ADDR
// ComExitBuilding ( i ) ;
40722: LD_VAR 0 5
40726: PPUSH
40727: CALL_OW 122
// end ; if sold_defenders then
40731: LD_VAR 0 17
40735: IFFALSE 40795
// if i in sold_defenders then
40737: LD_VAR 0 5
40741: PUSH
40742: LD_VAR 0 17
40746: IN
40747: IFFALSE 40795
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
40749: LD_VAR 0 5
40753: PPUSH
40754: CALL_OW 314
40758: NOT
40759: PUSH
40760: LD_VAR 0 5
40764: PPUSH
40765: LD_VAR 0 13
40769: PPUSH
40770: CALL_OW 296
40774: PUSH
40775: LD_INT 30
40777: LESS
40778: AND
40779: IFFALSE 40795
// ComAttackUnit ( i , e ) ;
40781: LD_VAR 0 5
40785: PPUSH
40786: LD_VAR 0 13
40790: PPUSH
40791: CALL_OW 115
// end ; end ; end ;
40795: GO 40798
40797: POP
// if IsDead ( i ) then
40798: LD_VAR 0 5
40802: PPUSH
40803: CALL_OW 301
40807: IFFALSE 40825
// defenders := defenders diff i ;
40809: LD_ADDR_VAR 0 2
40813: PUSH
40814: LD_VAR 0 2
40818: PUSH
40819: LD_VAR 0 5
40823: DIFF
40824: ST_TO_ADDR
// end ;
40825: GO 40141
40827: POP
40828: POP
// until not enemy or not defenders ;
40829: LD_VAR 0 3
40833: NOT
40834: PUSH
40835: LD_VAR 0 2
40839: NOT
40840: OR
40841: IFFALSE 40108
// MC_Reset ( base , 18 ) ;
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_INT 18
40850: PPUSH
40851: CALL 19079 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
40855: LD_ADDR_VAR 0 2
40859: PUSH
40860: LD_VAR 0 2
40864: PUSH
40865: LD_VAR 0 2
40869: PPUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 25
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 25
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 25
40895: PUSH
40896: LD_INT 8
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 25
40905: PUSH
40906: LD_INT 9
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: PPUSH
40920: CALL_OW 72
40924: DIFF
40925: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
40926: LD_VAR 0 3
40930: NOT
40931: PUSH
40932: LD_VAR 0 2
40936: PPUSH
40937: LD_INT 21
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PPUSH
40947: CALL_OW 72
40951: AND
40952: IFFALSE 41214
// begin tmp := FilterByTag ( defenders , 19 ) ;
40954: LD_ADDR_VAR 0 11
40958: PUSH
40959: LD_VAR 0 2
40963: PPUSH
40964: LD_INT 19
40966: PPUSH
40967: CALL 77379 0 2
40971: ST_TO_ADDR
// if tmp then
40972: LD_VAR 0 11
40976: IFFALSE 41046
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
40978: LD_ADDR_VAR 0 11
40982: PUSH
40983: LD_VAR 0 11
40987: PPUSH
40988: LD_INT 25
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PPUSH
40998: CALL_OW 72
41002: ST_TO_ADDR
// if tmp then
41003: LD_VAR 0 11
41007: IFFALSE 41046
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
41009: LD_ADDR_EXP 69
41013: PUSH
41014: LD_EXP 69
41018: PPUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: LD_EXP 69
41028: PUSH
41029: LD_VAR 0 1
41033: ARRAY
41034: PUSH
41035: LD_VAR 0 11
41039: UNION
41040: PPUSH
41041: CALL_OW 1
41045: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
41046: LD_VAR 0 1
41050: PPUSH
41051: LD_INT 19
41053: PPUSH
41054: CALL 19079 0 2
// repeat wait ( 0 0$1 ) ;
41058: LD_INT 35
41060: PPUSH
41061: CALL_OW 67
// for i in defenders do
41065: LD_ADDR_VAR 0 5
41069: PUSH
41070: LD_VAR 0 2
41074: PUSH
41075: FOR_IN
41076: IFFALSE 41165
// begin if not IsInArea ( i , mc_parking [ base ] ) then
41078: LD_VAR 0 5
41082: PPUSH
41083: LD_EXP 81
41087: PUSH
41088: LD_VAR 0 1
41092: ARRAY
41093: PPUSH
41094: CALL_OW 308
41098: NOT
41099: IFFALSE 41123
// ComMoveToArea ( i , mc_parking [ base ] ) else
41101: LD_VAR 0 5
41105: PPUSH
41106: LD_EXP 81
41110: PUSH
41111: LD_VAR 0 1
41115: ARRAY
41116: PPUSH
41117: CALL_OW 113
41121: GO 41163
// if GetControl ( i ) = control_manual then
41123: LD_VAR 0 5
41127: PPUSH
41128: CALL_OW 263
41132: PUSH
41133: LD_INT 1
41135: EQUAL
41136: IFFALSE 41163
// if IsDrivenBy ( i ) then
41138: LD_VAR 0 5
41142: PPUSH
41143: CALL_OW 311
41147: IFFALSE 41163
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
41149: LD_VAR 0 5
41153: PPUSH
41154: CALL_OW 311
41158: PPUSH
41159: CALL_OW 121
// end ;
41163: GO 41075
41165: POP
41166: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
41167: LD_VAR 0 2
41171: PPUSH
41172: LD_INT 95
41174: PUSH
41175: LD_EXP 81
41179: PUSH
41180: LD_VAR 0 1
41184: ARRAY
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PPUSH
41190: CALL_OW 72
41194: PUSH
41195: LD_VAR 0 2
41199: EQUAL
41200: PUSH
41201: LD_EXP 80
41205: PUSH
41206: LD_VAR 0 1
41210: ARRAY
41211: OR
41212: IFFALSE 41058
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
41214: LD_ADDR_EXP 79
41218: PUSH
41219: LD_EXP 79
41223: PPUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: LD_EXP 79
41233: PUSH
41234: LD_VAR 0 1
41238: ARRAY
41239: PUSH
41240: LD_VAR 0 2
41244: UNION
41245: PPUSH
41246: CALL_OW 1
41250: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
41251: LD_VAR 0 1
41255: PPUSH
41256: LD_INT 20
41258: PPUSH
41259: CALL 19079 0 2
// end ;
41263: LD_VAR 0 4
41267: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41268: LD_INT 0
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
// result := false ;
41274: LD_ADDR_VAR 0 2
41278: PUSH
41279: LD_INT 0
41281: ST_TO_ADDR
// side := GetSide ( unit ) ;
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 255
41296: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41297: LD_ADDR_VAR 0 4
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 248
41311: ST_TO_ADDR
// case nat of 1 :
41312: LD_VAR 0 4
41316: PUSH
41317: LD_INT 1
41319: DOUBLE
41320: EQUAL
41321: IFTRUE 41325
41323: GO 41336
41325: POP
// tech := tech_lassight ; 2 :
41326: LD_ADDR_VAR 0 5
41330: PUSH
41331: LD_INT 12
41333: ST_TO_ADDR
41334: GO 41375
41336: LD_INT 2
41338: DOUBLE
41339: EQUAL
41340: IFTRUE 41344
41342: GO 41355
41344: POP
// tech := tech_mortar ; 3 :
41345: LD_ADDR_VAR 0 5
41349: PUSH
41350: LD_INT 41
41352: ST_TO_ADDR
41353: GO 41375
41355: LD_INT 3
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41363
41361: GO 41374
41363: POP
// tech := tech_bazooka ; end ;
41364: LD_ADDR_VAR 0 5
41368: PUSH
41369: LD_INT 44
41371: ST_TO_ADDR
41372: GO 41375
41374: POP
// if Researched ( side , tech ) then
41375: LD_VAR 0 3
41379: PPUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: CALL_OW 325
41389: IFFALSE 41416
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41391: LD_ADDR_VAR 0 2
41395: PUSH
41396: LD_INT 5
41398: PUSH
41399: LD_INT 8
41401: PUSH
41402: LD_INT 9
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: PUSH
41410: LD_VAR 0 4
41414: ARRAY
41415: ST_TO_ADDR
// end ;
41416: LD_VAR 0 2
41420: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
41425: PPUSH
// if not mines then
41426: LD_VAR 0 2
41430: NOT
41431: IFFALSE 41435
// exit ;
41433: GO 41579
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41435: LD_ADDR_VAR 0 5
41439: PUSH
41440: LD_INT 81
41442: PUSH
41443: LD_VAR 0 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: LD_INT 21
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PPUSH
41473: CALL_OW 69
41477: ST_TO_ADDR
// for i in mines do
41478: LD_ADDR_VAR 0 4
41482: PUSH
41483: LD_VAR 0 2
41487: PUSH
41488: FOR_IN
41489: IFFALSE 41577
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41491: LD_VAR 0 4
41495: PUSH
41496: LD_INT 1
41498: ARRAY
41499: PPUSH
41500: LD_VAR 0 4
41504: PUSH
41505: LD_INT 2
41507: ARRAY
41508: PPUSH
41509: CALL_OW 458
41513: NOT
41514: IFFALSE 41518
// continue ;
41516: GO 41488
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41518: LD_VAR 0 4
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: PPUSH
41527: LD_VAR 0 4
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: PPUSH
41536: CALL_OW 428
41540: PUSH
41541: LD_VAR 0 5
41545: IN
41546: IFFALSE 41575
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41548: LD_VAR 0 4
41552: PUSH
41553: LD_INT 1
41555: ARRAY
41556: PPUSH
41557: LD_VAR 0 4
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 456
// end ;
41575: GO 41488
41577: POP
41578: POP
// end ;
41579: LD_VAR 0 3
41583: RET
// export function Count ( array ) ; var i ; begin
41584: LD_INT 0
41586: PPUSH
41587: PPUSH
// result := 0 ;
41588: LD_ADDR_VAR 0 2
41592: PUSH
41593: LD_INT 0
41595: ST_TO_ADDR
// for i in array do
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_VAR 0 1
41605: PUSH
41606: FOR_IN
41607: IFFALSE 41631
// if i then
41609: LD_VAR 0 3
41613: IFFALSE 41629
// result := result + 1 ;
41615: LD_ADDR_VAR 0 2
41619: PUSH
41620: LD_VAR 0 2
41624: PUSH
41625: LD_INT 1
41627: PLUS
41628: ST_TO_ADDR
41629: GO 41606
41631: POP
41632: POP
// end ;
41633: LD_VAR 0 2
41637: RET
// export function IsEmpty ( building ) ; begin
41638: LD_INT 0
41640: PPUSH
// if not building then
41641: LD_VAR 0 1
41645: NOT
41646: IFFALSE 41650
// exit ;
41648: GO 41693
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41650: LD_ADDR_VAR 0 2
41654: PUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_INT 22
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 255
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 58
41679: PUSH
41680: EMPTY
41681: LIST
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PPUSH
41687: CALL_OW 69
41691: IN
41692: ST_TO_ADDR
// end ;
41693: LD_VAR 0 2
41697: RET
// export function IsNotFull ( building ) ; begin
41698: LD_INT 0
41700: PPUSH
// if not building then
41701: LD_VAR 0 1
41705: NOT
41706: IFFALSE 41710
// exit ;
41708: GO 41729
// result := UnitsInside ( building ) < 6 ;
41710: LD_ADDR_VAR 0 2
41714: PUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 313
41724: PUSH
41725: LD_INT 6
41727: LESS
41728: ST_TO_ADDR
// end ;
41729: LD_VAR 0 2
41733: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
// tmp := [ ] ;
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: EMPTY
41746: ST_TO_ADDR
// list := [ ] ;
41747: LD_ADDR_VAR 0 5
41751: PUSH
41752: EMPTY
41753: ST_TO_ADDR
// for i = 16 to 25 do
41754: LD_ADDR_VAR 0 4
41758: PUSH
41759: DOUBLE
41760: LD_INT 16
41762: DEC
41763: ST_TO_ADDR
41764: LD_INT 25
41766: PUSH
41767: FOR_TO
41768: IFFALSE 41841
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_VAR 0 3
41779: PUSH
41780: LD_INT 22
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 255
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 91
41799: PUSH
41800: LD_VAR 0 1
41804: PUSH
41805: LD_INT 6
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: LD_VAR 0 4
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: PPUSH
41833: CALL_OW 69
41837: ADD
41838: ST_TO_ADDR
41839: GO 41767
41841: POP
41842: POP
// for i = 1 to tmp do
41843: LD_ADDR_VAR 0 4
41847: PUSH
41848: DOUBLE
41849: LD_INT 1
41851: DEC
41852: ST_TO_ADDR
41853: LD_VAR 0 3
41857: PUSH
41858: FOR_TO
41859: IFFALSE 41947
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41861: LD_ADDR_VAR 0 5
41865: PUSH
41866: LD_VAR 0 5
41870: PUSH
41871: LD_VAR 0 3
41875: PUSH
41876: LD_VAR 0 4
41880: ARRAY
41881: PPUSH
41882: CALL_OW 266
41886: PUSH
41887: LD_VAR 0 3
41891: PUSH
41892: LD_VAR 0 4
41896: ARRAY
41897: PPUSH
41898: CALL_OW 250
41902: PUSH
41903: LD_VAR 0 3
41907: PUSH
41908: LD_VAR 0 4
41912: ARRAY
41913: PPUSH
41914: CALL_OW 251
41918: PUSH
41919: LD_VAR 0 3
41923: PUSH
41924: LD_VAR 0 4
41928: ARRAY
41929: PPUSH
41930: CALL_OW 254
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: ADD
41944: ST_TO_ADDR
41945: GO 41858
41947: POP
41948: POP
// result := list ;
41949: LD_ADDR_VAR 0 2
41953: PUSH
41954: LD_VAR 0 5
41958: ST_TO_ADDR
// end ;
41959: LD_VAR 0 2
41963: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41964: LD_INT 0
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// if not factory then
41973: LD_VAR 0 1
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 42507
// if control = control_apeman then
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 5
41989: EQUAL
41990: IFFALSE 42099
// begin tmp := UnitsInside ( factory ) ;
41992: LD_ADDR_VAR 0 8
41996: PUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL_OW 313
42006: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42007: LD_VAR 0 8
42011: PPUSH
42012: LD_INT 25
42014: PUSH
42015: LD_INT 12
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PPUSH
42022: CALL_OW 72
42026: NOT
42027: IFFALSE 42037
// control := control_manual ;
42029: LD_ADDR_VAR 0 4
42033: PUSH
42034: LD_INT 1
42036: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42037: LD_ADDR_VAR 0 8
42041: PUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL 41734 0 1
42051: ST_TO_ADDR
// if tmp then
42052: LD_VAR 0 8
42056: IFFALSE 42099
// begin for i in tmp do
42058: LD_ADDR_VAR 0 7
42062: PUSH
42063: LD_VAR 0 8
42067: PUSH
42068: FOR_IN
42069: IFFALSE 42097
// if i [ 1 ] = b_ext_radar then
42071: LD_VAR 0 7
42075: PUSH
42076: LD_INT 1
42078: ARRAY
42079: PUSH
42080: LD_INT 20
42082: EQUAL
42083: IFFALSE 42095
// begin control := control_remote ;
42085: LD_ADDR_VAR 0 4
42089: PUSH
42090: LD_INT 2
42092: ST_TO_ADDR
// break ;
42093: GO 42097
// end ;
42095: GO 42068
42097: POP
42098: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42099: LD_VAR 0 1
42103: PPUSH
42104: LD_VAR 0 2
42108: PPUSH
42109: LD_VAR 0 3
42113: PPUSH
42114: LD_VAR 0 4
42118: PPUSH
42119: LD_VAR 0 5
42123: PPUSH
42124: CALL_OW 448
42128: IFFALSE 42163
// begin result := [ chassis , engine , control , weapon ] ;
42130: LD_ADDR_VAR 0 6
42134: PUSH
42135: LD_VAR 0 2
42139: PUSH
42140: LD_VAR 0 3
42144: PUSH
42145: LD_VAR 0 4
42149: PUSH
42150: LD_VAR 0 5
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// exit ;
42161: GO 42507
// end ; _chassis := AvailableChassisList ( factory ) ;
42163: LD_ADDR_VAR 0 9
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 475
42177: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42178: LD_ADDR_VAR 0 11
42182: PUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: CALL_OW 476
42192: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42193: LD_ADDR_VAR 0 12
42197: PUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 477
42207: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42208: LD_ADDR_VAR 0 10
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 478
42222: ST_TO_ADDR
// if not chassis in _chassis then
42223: LD_VAR 0 2
42227: PUSH
42228: LD_VAR 0 9
42232: IN
42233: NOT
42234: IFFALSE 42260
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42236: LD_ADDR_VAR 0 2
42240: PUSH
42241: LD_VAR 0 9
42245: PUSH
42246: LD_INT 1
42248: PPUSH
42249: LD_VAR 0 9
42253: PPUSH
42254: CALL_OW 12
42258: ARRAY
42259: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42260: LD_VAR 0 2
42264: PPUSH
42265: LD_VAR 0 3
42269: PPUSH
42270: CALL 42512 0 2
42274: NOT
42275: IFFALSE 42334
// repeat engine := _engine [ 1 ] ;
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_VAR 0 11
42286: PUSH
42287: LD_INT 1
42289: ARRAY
42290: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42291: LD_ADDR_VAR 0 11
42295: PUSH
42296: LD_VAR 0 11
42300: PPUSH
42301: LD_INT 1
42303: PPUSH
42304: CALL_OW 3
42308: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42309: LD_VAR 0 2
42313: PPUSH
42314: LD_VAR 0 3
42318: PPUSH
42319: CALL 42512 0 2
42323: PUSH
42324: LD_VAR 0 11
42328: PUSH
42329: EMPTY
42330: EQUAL
42331: OR
42332: IFFALSE 42277
// if not control in _control then
42334: LD_VAR 0 4
42338: PUSH
42339: LD_VAR 0 12
42343: IN
42344: NOT
42345: IFFALSE 42371
// control := _control [ rand ( 1 , _control ) ] ;
42347: LD_ADDR_VAR 0 4
42351: PUSH
42352: LD_VAR 0 12
42356: PUSH
42357: LD_INT 1
42359: PPUSH
42360: LD_VAR 0 12
42364: PPUSH
42365: CALL_OW 12
42369: ARRAY
42370: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42371: LD_VAR 0 2
42375: PPUSH
42376: LD_VAR 0 5
42380: PPUSH
42381: CALL 42732 0 2
42385: NOT
42386: IFFALSE 42445
// repeat weapon := _weapon [ 1 ] ;
42388: LD_ADDR_VAR 0 5
42392: PUSH
42393: LD_VAR 0 10
42397: PUSH
42398: LD_INT 1
42400: ARRAY
42401: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42402: LD_ADDR_VAR 0 10
42406: PUSH
42407: LD_VAR 0 10
42411: PPUSH
42412: LD_INT 1
42414: PPUSH
42415: CALL_OW 3
42419: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42420: LD_VAR 0 2
42424: PPUSH
42425: LD_VAR 0 5
42429: PPUSH
42430: CALL 42732 0 2
42434: PUSH
42435: LD_VAR 0 10
42439: PUSH
42440: EMPTY
42441: EQUAL
42442: OR
42443: IFFALSE 42388
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42445: LD_VAR 0 1
42449: PPUSH
42450: LD_VAR 0 2
42454: PPUSH
42455: LD_VAR 0 3
42459: PPUSH
42460: LD_VAR 0 4
42464: PPUSH
42465: LD_VAR 0 5
42469: PPUSH
42470: CALL_OW 448
42474: IFFALSE 42507
// result := [ chassis , engine , control , weapon ] ;
42476: LD_ADDR_VAR 0 6
42480: PUSH
42481: LD_VAR 0 2
42485: PUSH
42486: LD_VAR 0 3
42490: PUSH
42491: LD_VAR 0 4
42495: PUSH
42496: LD_VAR 0 5
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// end ;
42507: LD_VAR 0 6
42511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42512: LD_INT 0
42514: PPUSH
// if not chassis or not engine then
42515: LD_VAR 0 1
42519: NOT
42520: PUSH
42521: LD_VAR 0 2
42525: NOT
42526: OR
42527: IFFALSE 42531
// exit ;
42529: GO 42727
// case engine of engine_solar :
42531: LD_VAR 0 2
42535: PUSH
42536: LD_INT 2
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42582
42544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 11
42552: PUSH
42553: LD_INT 12
42555: PUSH
42556: LD_INT 13
42558: PUSH
42559: LD_INT 14
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
42580: GO 42711
42582: LD_INT 1
42584: DOUBLE
42585: EQUAL
42586: IFTRUE 42590
42588: GO 42652
42590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: LD_INT 11
42598: PUSH
42599: LD_INT 12
42601: PUSH
42602: LD_INT 13
42604: PUSH
42605: LD_INT 14
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: LD_INT 21
42625: PUSH
42626: LD_INT 23
42628: PUSH
42629: LD_INT 22
42631: PUSH
42632: LD_INT 24
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
42650: GO 42711
42652: LD_INT 3
42654: DOUBLE
42655: EQUAL
42656: IFTRUE 42660
42658: GO 42710
42660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42661: LD_ADDR_VAR 0 3
42665: PUSH
42666: LD_INT 13
42668: PUSH
42669: LD_INT 14
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: LD_INT 21
42686: PUSH
42687: LD_INT 22
42689: PUSH
42690: LD_INT 23
42692: PUSH
42693: LD_INT 24
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: ST_TO_ADDR
42708: GO 42711
42710: POP
// result := ( chassis in result ) ;
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_VAR 0 1
42720: PUSH
42721: LD_VAR 0 3
42725: IN
42726: ST_TO_ADDR
// end ;
42727: LD_VAR 0 3
42731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42732: LD_INT 0
42734: PPUSH
// if not chassis or not weapon then
42735: LD_VAR 0 1
42739: NOT
42740: PUSH
42741: LD_VAR 0 2
42745: NOT
42746: OR
42747: IFFALSE 42751
// exit ;
42749: GO 43777
// case weapon of us_machine_gun :
42751: LD_VAR 0 2
42755: PUSH
42756: LD_INT 2
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42794
42764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 4
42781: PUSH
42782: LD_INT 5
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
42792: GO 43761
42794: LD_INT 3
42796: DOUBLE
42797: EQUAL
42798: IFTRUE 42802
42800: GO 42832
42802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42803: LD_ADDR_VAR 0 3
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 4
42819: PUSH
42820: LD_INT 5
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
42830: GO 43761
42832: LD_INT 11
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42870
42840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 4
42857: PUSH
42858: LD_INT 5
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: ST_TO_ADDR
42868: GO 43761
42870: LD_INT 4
42872: DOUBLE
42873: EQUAL
42874: IFTRUE 42878
42876: GO 42904
42878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42879: LD_ADDR_VAR 0 3
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 4
42892: PUSH
42893: LD_INT 5
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
42902: GO 43761
42904: LD_INT 5
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42938
42912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 4
42926: PUSH
42927: LD_INT 5
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
42936: GO 43761
42938: LD_INT 9
42940: DOUBLE
42941: EQUAL
42942: IFTRUE 42946
42944: GO 42972
42946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: LD_INT 4
42960: PUSH
42961: LD_INT 5
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: ST_TO_ADDR
42970: GO 43761
42972: LD_INT 7
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42980
42978: GO 43006
42980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42981: LD_ADDR_VAR 0 3
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: LD_INT 5
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
43004: GO 43761
43006: LD_INT 12
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43014
43012: GO 43040
43014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43015: LD_ADDR_VAR 0 3
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: LD_INT 4
43028: PUSH
43029: LD_INT 5
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
43038: GO 43761
43040: LD_INT 13
43042: DOUBLE
43043: EQUAL
43044: IFTRUE 43048
43046: GO 43074
43048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43049: LD_ADDR_VAR 0 3
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 4
43062: PUSH
43063: LD_INT 5
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
43072: GO 43761
43074: LD_INT 14
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43100
43082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: LD_INT 4
43090: PUSH
43091: LD_INT 5
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: ST_TO_ADDR
43098: GO 43761
43100: LD_INT 6
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43126
43108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 4
43116: PUSH
43117: LD_INT 5
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: ST_TO_ADDR
43124: GO 43761
43126: LD_INT 10
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43152
43134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43135: LD_ADDR_VAR 0 3
43139: PUSH
43140: LD_INT 4
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: ST_TO_ADDR
43150: GO 43761
43152: LD_INT 22
43154: DOUBLE
43155: EQUAL
43156: IFTRUE 43160
43158: GO 43186
43160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43161: LD_ADDR_VAR 0 3
43165: PUSH
43166: LD_INT 11
43168: PUSH
43169: LD_INT 12
43171: PUSH
43172: LD_INT 13
43174: PUSH
43175: LD_INT 14
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
43184: GO 43761
43186: LD_INT 23
43188: DOUBLE
43189: EQUAL
43190: IFTRUE 43194
43192: GO 43220
43194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 11
43202: PUSH
43203: LD_INT 12
43205: PUSH
43206: LD_INT 13
43208: PUSH
43209: LD_INT 14
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: ST_TO_ADDR
43218: GO 43761
43220: LD_INT 24
43222: DOUBLE
43223: EQUAL
43224: IFTRUE 43228
43226: GO 43254
43228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43229: LD_ADDR_VAR 0 3
43233: PUSH
43234: LD_INT 11
43236: PUSH
43237: LD_INT 12
43239: PUSH
43240: LD_INT 13
43242: PUSH
43243: LD_INT 14
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
43252: GO 43761
43254: LD_INT 30
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43262
43260: GO 43288
43262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43263: LD_ADDR_VAR 0 3
43267: PUSH
43268: LD_INT 11
43270: PUSH
43271: LD_INT 12
43273: PUSH
43274: LD_INT 13
43276: PUSH
43277: LD_INT 14
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
43286: GO 43761
43288: LD_INT 25
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43296
43294: GO 43314
43296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43297: LD_ADDR_VAR 0 3
43301: PUSH
43302: LD_INT 13
43304: PUSH
43305: LD_INT 14
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: ST_TO_ADDR
43312: GO 43761
43314: LD_INT 27
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43340
43322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_INT 13
43330: PUSH
43331: LD_INT 14
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: ST_TO_ADDR
43338: GO 43761
43340: LD_INT 28
43342: DOUBLE
43343: EQUAL
43344: IFTRUE 43348
43346: GO 43366
43348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_INT 13
43356: PUSH
43357: LD_INT 14
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 43761
43366: LD_INT 29
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43392
43374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 13
43382: PUSH
43383: LD_INT 14
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: ST_TO_ADDR
43390: GO 43761
43392: LD_INT 31
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43400
43398: GO 43418
43400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_INT 13
43408: PUSH
43409: LD_INT 14
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: ST_TO_ADDR
43416: GO 43761
43418: LD_INT 26
43420: DOUBLE
43421: EQUAL
43422: IFTRUE 43426
43424: GO 43444
43426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_INT 13
43434: PUSH
43435: LD_INT 14
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: ST_TO_ADDR
43442: GO 43761
43444: LD_INT 42
43446: DOUBLE
43447: EQUAL
43448: IFTRUE 43452
43450: GO 43478
43452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43453: LD_ADDR_VAR 0 3
43457: PUSH
43458: LD_INT 21
43460: PUSH
43461: LD_INT 22
43463: PUSH
43464: LD_INT 23
43466: PUSH
43467: LD_INT 24
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
43476: GO 43761
43478: LD_INT 43
43480: DOUBLE
43481: EQUAL
43482: IFTRUE 43486
43484: GO 43512
43486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_INT 21
43494: PUSH
43495: LD_INT 22
43497: PUSH
43498: LD_INT 23
43500: PUSH
43501: LD_INT 24
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
43510: GO 43761
43512: LD_INT 44
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43546
43520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 21
43528: PUSH
43529: LD_INT 22
43531: PUSH
43532: LD_INT 23
43534: PUSH
43535: LD_INT 24
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
43544: GO 43761
43546: LD_INT 45
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43554
43552: GO 43580
43554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_INT 21
43562: PUSH
43563: LD_INT 22
43565: PUSH
43566: LD_INT 23
43568: PUSH
43569: LD_INT 24
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
43578: GO 43761
43580: LD_INT 49
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43588
43586: GO 43614
43588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43589: LD_ADDR_VAR 0 3
43593: PUSH
43594: LD_INT 21
43596: PUSH
43597: LD_INT 22
43599: PUSH
43600: LD_INT 23
43602: PUSH
43603: LD_INT 24
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
43612: GO 43761
43614: LD_INT 51
43616: DOUBLE
43617: EQUAL
43618: IFTRUE 43622
43620: GO 43648
43622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 21
43630: PUSH
43631: LD_INT 22
43633: PUSH
43634: LD_INT 23
43636: PUSH
43637: LD_INT 24
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 43761
43648: LD_INT 52
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43682
43656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 21
43664: PUSH
43665: LD_INT 22
43667: PUSH
43668: LD_INT 23
43670: PUSH
43671: LD_INT 24
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
43680: GO 43761
43682: LD_INT 53
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43690
43688: GO 43708
43690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_INT 23
43698: PUSH
43699: LD_INT 24
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: ST_TO_ADDR
43706: GO 43761
43708: LD_INT 46
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43734
43716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 23
43724: PUSH
43725: LD_INT 24
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: ST_TO_ADDR
43732: GO 43761
43734: LD_INT 47
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43760
43742: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 23
43750: PUSH
43751: LD_INT 24
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: ST_TO_ADDR
43758: GO 43761
43760: POP
// result := ( chassis in result ) ;
43761: LD_ADDR_VAR 0 3
43765: PUSH
43766: LD_VAR 0 1
43770: PUSH
43771: LD_VAR 0 3
43775: IN
43776: ST_TO_ADDR
// end ;
43777: LD_VAR 0 3
43781: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
// result := array ;
43791: LD_ADDR_VAR 0 5
43795: PUSH
43796: LD_VAR 0 1
43800: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43801: LD_VAR 0 1
43805: NOT
43806: PUSH
43807: LD_VAR 0 2
43811: NOT
43812: OR
43813: PUSH
43814: LD_VAR 0 3
43818: NOT
43819: OR
43820: PUSH
43821: LD_VAR 0 2
43825: PUSH
43826: LD_VAR 0 1
43830: GREATER
43831: OR
43832: PUSH
43833: LD_VAR 0 3
43837: PUSH
43838: LD_VAR 0 1
43842: GREATER
43843: OR
43844: IFFALSE 43848
// exit ;
43846: GO 44144
// if direction then
43848: LD_VAR 0 4
43852: IFFALSE 43916
// begin d := 1 ;
43854: LD_ADDR_VAR 0 9
43858: PUSH
43859: LD_INT 1
43861: ST_TO_ADDR
// if i_from > i_to then
43862: LD_VAR 0 2
43866: PUSH
43867: LD_VAR 0 3
43871: GREATER
43872: IFFALSE 43898
// length := ( array - i_from ) + i_to else
43874: LD_ADDR_VAR 0 11
43878: PUSH
43879: LD_VAR 0 1
43883: PUSH
43884: LD_VAR 0 2
43888: MINUS
43889: PUSH
43890: LD_VAR 0 3
43894: PLUS
43895: ST_TO_ADDR
43896: GO 43914
// length := i_to - i_from ;
43898: LD_ADDR_VAR 0 11
43902: PUSH
43903: LD_VAR 0 3
43907: PUSH
43908: LD_VAR 0 2
43912: MINUS
43913: ST_TO_ADDR
// end else
43914: GO 43977
// begin d := - 1 ;
43916: LD_ADDR_VAR 0 9
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: ST_TO_ADDR
// if i_from > i_to then
43925: LD_VAR 0 2
43929: PUSH
43930: LD_VAR 0 3
43934: GREATER
43935: IFFALSE 43955
// length := i_from - i_to else
43937: LD_ADDR_VAR 0 11
43941: PUSH
43942: LD_VAR 0 2
43946: PUSH
43947: LD_VAR 0 3
43951: MINUS
43952: ST_TO_ADDR
43953: GO 43977
// length := ( array - i_to ) + i_from ;
43955: LD_ADDR_VAR 0 11
43959: PUSH
43960: LD_VAR 0 1
43964: PUSH
43965: LD_VAR 0 3
43969: MINUS
43970: PUSH
43971: LD_VAR 0 2
43975: PLUS
43976: ST_TO_ADDR
// end ; if not length then
43977: LD_VAR 0 11
43981: NOT
43982: IFFALSE 43986
// exit ;
43984: GO 44144
// tmp := array ;
43986: LD_ADDR_VAR 0 10
43990: PUSH
43991: LD_VAR 0 1
43995: ST_TO_ADDR
// for i = 1 to length do
43996: LD_ADDR_VAR 0 6
44000: PUSH
44001: DOUBLE
44002: LD_INT 1
44004: DEC
44005: ST_TO_ADDR
44006: LD_VAR 0 11
44010: PUSH
44011: FOR_TO
44012: IFFALSE 44132
// begin for j = 1 to array do
44014: LD_ADDR_VAR 0 7
44018: PUSH
44019: DOUBLE
44020: LD_INT 1
44022: DEC
44023: ST_TO_ADDR
44024: LD_VAR 0 1
44028: PUSH
44029: FOR_TO
44030: IFFALSE 44118
// begin k := j + d ;
44032: LD_ADDR_VAR 0 8
44036: PUSH
44037: LD_VAR 0 7
44041: PUSH
44042: LD_VAR 0 9
44046: PLUS
44047: ST_TO_ADDR
// if k > array then
44048: LD_VAR 0 8
44052: PUSH
44053: LD_VAR 0 1
44057: GREATER
44058: IFFALSE 44068
// k := 1 ;
44060: LD_ADDR_VAR 0 8
44064: PUSH
44065: LD_INT 1
44067: ST_TO_ADDR
// if not k then
44068: LD_VAR 0 8
44072: NOT
44073: IFFALSE 44085
// k := array ;
44075: LD_ADDR_VAR 0 8
44079: PUSH
44080: LD_VAR 0 1
44084: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44085: LD_ADDR_VAR 0 10
44089: PUSH
44090: LD_VAR 0 10
44094: PPUSH
44095: LD_VAR 0 8
44099: PPUSH
44100: LD_VAR 0 1
44104: PUSH
44105: LD_VAR 0 7
44109: ARRAY
44110: PPUSH
44111: CALL_OW 1
44115: ST_TO_ADDR
// end ;
44116: GO 44029
44118: POP
44119: POP
// array := tmp ;
44120: LD_ADDR_VAR 0 1
44124: PUSH
44125: LD_VAR 0 10
44129: ST_TO_ADDR
// end ;
44130: GO 44011
44132: POP
44133: POP
// result := array ;
44134: LD_ADDR_VAR 0 5
44138: PUSH
44139: LD_VAR 0 1
44143: ST_TO_ADDR
// end ;
44144: LD_VAR 0 5
44148: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44149: LD_INT 0
44151: PPUSH
44152: PPUSH
// result := 0 ;
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 0
44160: ST_TO_ADDR
// if not array or not value in array then
44161: LD_VAR 0 1
44165: NOT
44166: PUSH
44167: LD_VAR 0 2
44171: PUSH
44172: LD_VAR 0 1
44176: IN
44177: NOT
44178: OR
44179: IFFALSE 44183
// exit ;
44181: GO 44237
// for i = 1 to array do
44183: LD_ADDR_VAR 0 4
44187: PUSH
44188: DOUBLE
44189: LD_INT 1
44191: DEC
44192: ST_TO_ADDR
44193: LD_VAR 0 1
44197: PUSH
44198: FOR_TO
44199: IFFALSE 44235
// if value = array [ i ] then
44201: LD_VAR 0 2
44205: PUSH
44206: LD_VAR 0 1
44210: PUSH
44211: LD_VAR 0 4
44215: ARRAY
44216: EQUAL
44217: IFFALSE 44233
// begin result := i ;
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_VAR 0 4
44228: ST_TO_ADDR
// exit ;
44229: POP
44230: POP
44231: GO 44237
// end ;
44233: GO 44198
44235: POP
44236: POP
// end ;
44237: LD_VAR 0 3
44241: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44242: LD_INT 0
44244: PPUSH
// vc_chassis := chassis ;
44245: LD_ADDR_OWVAR 37
44249: PUSH
44250: LD_VAR 0 1
44254: ST_TO_ADDR
// vc_engine := engine ;
44255: LD_ADDR_OWVAR 39
44259: PUSH
44260: LD_VAR 0 2
44264: ST_TO_ADDR
// vc_control := control ;
44265: LD_ADDR_OWVAR 38
44269: PUSH
44270: LD_VAR 0 3
44274: ST_TO_ADDR
// vc_weapon := weapon ;
44275: LD_ADDR_OWVAR 40
44279: PUSH
44280: LD_VAR 0 4
44284: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44285: LD_ADDR_OWVAR 41
44289: PUSH
44290: LD_VAR 0 5
44294: ST_TO_ADDR
// end ;
44295: LD_VAR 0 6
44299: RET
// export function WantPlant ( unit ) ; var task ; begin
44300: LD_INT 0
44302: PPUSH
44303: PPUSH
// result := false ;
44304: LD_ADDR_VAR 0 2
44308: PUSH
44309: LD_INT 0
44311: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44312: LD_ADDR_VAR 0 3
44316: PUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 437
44326: ST_TO_ADDR
// if task then
44327: LD_VAR 0 3
44331: IFFALSE 44359
// if task [ 1 ] [ 1 ] = p then
44333: LD_VAR 0 3
44337: PUSH
44338: LD_INT 1
44340: ARRAY
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: PUSH
44346: LD_STRING p
44348: EQUAL
44349: IFFALSE 44359
// result := true ;
44351: LD_ADDR_VAR 0 2
44355: PUSH
44356: LD_INT 1
44358: ST_TO_ADDR
// end ;
44359: LD_VAR 0 2
44363: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44364: LD_INT 0
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
// if pos < 1 then
44370: LD_VAR 0 2
44374: PUSH
44375: LD_INT 1
44377: LESS
44378: IFFALSE 44382
// exit ;
44380: GO 44685
// if pos = 1 then
44382: LD_VAR 0 2
44386: PUSH
44387: LD_INT 1
44389: EQUAL
44390: IFFALSE 44423
// result := Replace ( arr , pos [ 1 ] , value ) else
44392: LD_ADDR_VAR 0 4
44396: PUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: LD_VAR 0 2
44406: PUSH
44407: LD_INT 1
44409: ARRAY
44410: PPUSH
44411: LD_VAR 0 3
44415: PPUSH
44416: CALL_OW 1
44420: ST_TO_ADDR
44421: GO 44685
// begin tmp := arr ;
44423: LD_ADDR_VAR 0 6
44427: PUSH
44428: LD_VAR 0 1
44432: ST_TO_ADDR
// s_arr := [ tmp ] ;
44433: LD_ADDR_VAR 0 7
44437: PUSH
44438: LD_VAR 0 6
44442: PUSH
44443: EMPTY
44444: LIST
44445: ST_TO_ADDR
// for i = 1 to pos - 1 do
44446: LD_ADDR_VAR 0 5
44450: PUSH
44451: DOUBLE
44452: LD_INT 1
44454: DEC
44455: ST_TO_ADDR
44456: LD_VAR 0 2
44460: PUSH
44461: LD_INT 1
44463: MINUS
44464: PUSH
44465: FOR_TO
44466: IFFALSE 44511
// begin tmp := tmp [ pos [ i ] ] ;
44468: LD_ADDR_VAR 0 6
44472: PUSH
44473: LD_VAR 0 6
44477: PUSH
44478: LD_VAR 0 2
44482: PUSH
44483: LD_VAR 0 5
44487: ARRAY
44488: ARRAY
44489: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44490: LD_ADDR_VAR 0 7
44494: PUSH
44495: LD_VAR 0 7
44499: PUSH
44500: LD_VAR 0 6
44504: PUSH
44505: EMPTY
44506: LIST
44507: ADD
44508: ST_TO_ADDR
// end ;
44509: GO 44465
44511: POP
44512: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44513: LD_ADDR_VAR 0 6
44517: PUSH
44518: LD_VAR 0 6
44522: PPUSH
44523: LD_VAR 0 2
44527: PUSH
44528: LD_VAR 0 2
44532: ARRAY
44533: PPUSH
44534: LD_VAR 0 3
44538: PPUSH
44539: CALL_OW 1
44543: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44544: LD_ADDR_VAR 0 7
44548: PUSH
44549: LD_VAR 0 7
44553: PPUSH
44554: LD_VAR 0 7
44558: PPUSH
44559: LD_VAR 0 6
44563: PPUSH
44564: CALL_OW 1
44568: ST_TO_ADDR
// for i = s_arr downto 2 do
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: DOUBLE
44575: LD_VAR 0 7
44579: INC
44580: ST_TO_ADDR
44581: LD_INT 2
44583: PUSH
44584: FOR_DOWNTO
44585: IFFALSE 44669
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44587: LD_ADDR_VAR 0 6
44591: PUSH
44592: LD_VAR 0 7
44596: PUSH
44597: LD_VAR 0 5
44601: PUSH
44602: LD_INT 1
44604: MINUS
44605: ARRAY
44606: PPUSH
44607: LD_VAR 0 2
44611: PUSH
44612: LD_VAR 0 5
44616: PUSH
44617: LD_INT 1
44619: MINUS
44620: ARRAY
44621: PPUSH
44622: LD_VAR 0 7
44626: PUSH
44627: LD_VAR 0 5
44631: ARRAY
44632: PPUSH
44633: CALL_OW 1
44637: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44638: LD_ADDR_VAR 0 7
44642: PUSH
44643: LD_VAR 0 7
44647: PPUSH
44648: LD_VAR 0 5
44652: PUSH
44653: LD_INT 1
44655: MINUS
44656: PPUSH
44657: LD_VAR 0 6
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
// end ;
44667: GO 44584
44669: POP
44670: POP
// result := s_arr [ 1 ] ;
44671: LD_ADDR_VAR 0 4
44675: PUSH
44676: LD_VAR 0 7
44680: PUSH
44681: LD_INT 1
44683: ARRAY
44684: ST_TO_ADDR
// end ; end ;
44685: LD_VAR 0 4
44689: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44690: LD_INT 0
44692: PPUSH
44693: PPUSH
// if not list then
44694: LD_VAR 0 1
44698: NOT
44699: IFFALSE 44703
// exit ;
44701: GO 44794
// i := list [ pos1 ] ;
44703: LD_ADDR_VAR 0 5
44707: PUSH
44708: LD_VAR 0 1
44712: PUSH
44713: LD_VAR 0 2
44717: ARRAY
44718: ST_TO_ADDR
// if not i then
44719: LD_VAR 0 5
44723: NOT
44724: IFFALSE 44728
// exit ;
44726: GO 44794
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44728: LD_ADDR_VAR 0 1
44732: PUSH
44733: LD_VAR 0 1
44737: PPUSH
44738: LD_VAR 0 2
44742: PPUSH
44743: LD_VAR 0 1
44747: PUSH
44748: LD_VAR 0 3
44752: ARRAY
44753: PPUSH
44754: CALL_OW 1
44758: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44759: LD_ADDR_VAR 0 1
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: LD_VAR 0 3
44773: PPUSH
44774: LD_VAR 0 5
44778: PPUSH
44779: CALL_OW 1
44783: ST_TO_ADDR
// result := list ;
44784: LD_ADDR_VAR 0 4
44788: PUSH
44789: LD_VAR 0 1
44793: ST_TO_ADDR
// end ;
44794: LD_VAR 0 4
44798: RET
// export function Add ( list , pos , val ) ; begin
44799: LD_INT 0
44801: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
44802: LD_ADDR_VAR 0 4
44806: PUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: LD_VAR 0 3
44821: PPUSH
44822: CALL 44364 0 3
44826: ST_TO_ADDR
44827: LD_VAR 0 4
44831: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44832: LD_INT 0
44834: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44835: LD_ADDR_VAR 0 5
44839: PUSH
44840: LD_VAR 0 1
44844: PPUSH
44845: CALL_OW 250
44849: PPUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 251
44859: PPUSH
44860: LD_VAR 0 2
44864: PPUSH
44865: LD_VAR 0 3
44869: PPUSH
44870: LD_VAR 0 4
44874: PPUSH
44875: CALL 44885 0 5
44879: ST_TO_ADDR
// end ;
44880: LD_VAR 0 5
44884: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44885: LD_INT 0
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
// if not list then
44891: LD_VAR 0 3
44895: NOT
44896: IFFALSE 44900
// exit ;
44898: GO 45288
// result := [ ] ;
44900: LD_ADDR_VAR 0 6
44904: PUSH
44905: EMPTY
44906: ST_TO_ADDR
// for i in list do
44907: LD_ADDR_VAR 0 7
44911: PUSH
44912: LD_VAR 0 3
44916: PUSH
44917: FOR_IN
44918: IFFALSE 45120
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: LD_VAR 0 7
44929: PPUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_VAR 0 2
44939: PPUSH
44940: CALL_OW 297
44944: ST_TO_ADDR
// if not result then
44945: LD_VAR 0 6
44949: NOT
44950: IFFALSE 44976
// result := [ [ i , tmp ] ] else
44952: LD_ADDR_VAR 0 6
44956: PUSH
44957: LD_VAR 0 7
44961: PUSH
44962: LD_VAR 0 9
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: ST_TO_ADDR
44974: GO 45118
// begin if result [ result ] [ 2 ] < tmp then
44976: LD_VAR 0 6
44980: PUSH
44981: LD_VAR 0 6
44985: ARRAY
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: PUSH
44991: LD_VAR 0 9
44995: LESS
44996: IFFALSE 45038
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44998: LD_ADDR_VAR 0 6
45002: PUSH
45003: LD_VAR 0 6
45007: PPUSH
45008: LD_VAR 0 6
45012: PUSH
45013: LD_INT 1
45015: PLUS
45016: PPUSH
45017: LD_VAR 0 7
45021: PUSH
45022: LD_VAR 0 9
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PPUSH
45031: CALL_OW 2
45035: ST_TO_ADDR
45036: GO 45118
// for j = 1 to result do
45038: LD_ADDR_VAR 0 8
45042: PUSH
45043: DOUBLE
45044: LD_INT 1
45046: DEC
45047: ST_TO_ADDR
45048: LD_VAR 0 6
45052: PUSH
45053: FOR_TO
45054: IFFALSE 45116
// begin if tmp < result [ j ] [ 2 ] then
45056: LD_VAR 0 9
45060: PUSH
45061: LD_VAR 0 6
45065: PUSH
45066: LD_VAR 0 8
45070: ARRAY
45071: PUSH
45072: LD_INT 2
45074: ARRAY
45075: LESS
45076: IFFALSE 45114
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45078: LD_ADDR_VAR 0 6
45082: PUSH
45083: LD_VAR 0 6
45087: PPUSH
45088: LD_VAR 0 8
45092: PPUSH
45093: LD_VAR 0 7
45097: PUSH
45098: LD_VAR 0 9
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PPUSH
45107: CALL_OW 2
45111: ST_TO_ADDR
// break ;
45112: GO 45116
// end ; end ;
45114: GO 45053
45116: POP
45117: POP
// end ; end ;
45118: GO 44917
45120: POP
45121: POP
// if result and not asc then
45122: LD_VAR 0 6
45126: PUSH
45127: LD_VAR 0 4
45131: NOT
45132: AND
45133: IFFALSE 45208
// begin tmp := result ;
45135: LD_ADDR_VAR 0 9
45139: PUSH
45140: LD_VAR 0 6
45144: ST_TO_ADDR
// for i = tmp downto 1 do
45145: LD_ADDR_VAR 0 7
45149: PUSH
45150: DOUBLE
45151: LD_VAR 0 9
45155: INC
45156: ST_TO_ADDR
45157: LD_INT 1
45159: PUSH
45160: FOR_DOWNTO
45161: IFFALSE 45206
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45163: LD_ADDR_VAR 0 6
45167: PUSH
45168: LD_VAR 0 6
45172: PPUSH
45173: LD_VAR 0 9
45177: PUSH
45178: LD_VAR 0 7
45182: MINUS
45183: PUSH
45184: LD_INT 1
45186: PLUS
45187: PPUSH
45188: LD_VAR 0 9
45192: PUSH
45193: LD_VAR 0 7
45197: ARRAY
45198: PPUSH
45199: CALL_OW 1
45203: ST_TO_ADDR
45204: GO 45160
45206: POP
45207: POP
// end ; tmp := [ ] ;
45208: LD_ADDR_VAR 0 9
45212: PUSH
45213: EMPTY
45214: ST_TO_ADDR
// if mode then
45215: LD_VAR 0 5
45219: IFFALSE 45288
// begin for i = 1 to result do
45221: LD_ADDR_VAR 0 7
45225: PUSH
45226: DOUBLE
45227: LD_INT 1
45229: DEC
45230: ST_TO_ADDR
45231: LD_VAR 0 6
45235: PUSH
45236: FOR_TO
45237: IFFALSE 45276
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45239: LD_ADDR_VAR 0 9
45243: PUSH
45244: LD_VAR 0 9
45248: PPUSH
45249: LD_VAR 0 7
45253: PPUSH
45254: LD_VAR 0 6
45258: PUSH
45259: LD_VAR 0 7
45263: ARRAY
45264: PUSH
45265: LD_INT 1
45267: ARRAY
45268: PPUSH
45269: CALL_OW 1
45273: ST_TO_ADDR
45274: GO 45236
45276: POP
45277: POP
// result := tmp ;
45278: LD_ADDR_VAR 0 6
45282: PUSH
45283: LD_VAR 0 9
45287: ST_TO_ADDR
// end ; end ;
45288: LD_VAR 0 6
45292: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
45297: PPUSH
45298: PPUSH
45299: PPUSH
45300: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// if not x or not y then
45323: LD_VAR 0 2
45327: NOT
45328: PUSH
45329: LD_VAR 0 3
45333: NOT
45334: OR
45335: IFFALSE 45339
// exit ;
45337: GO 46985
// if not range then
45339: LD_VAR 0 4
45343: NOT
45344: IFFALSE 45354
// range := 10 ;
45346: LD_ADDR_VAR 0 4
45350: PUSH
45351: LD_INT 10
45353: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45354: LD_ADDR_VAR 0 8
45358: PUSH
45359: LD_INT 81
45361: PUSH
45362: LD_VAR 0 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 92
45373: PUSH
45374: LD_VAR 0 2
45378: PUSH
45379: LD_VAR 0 3
45383: PUSH
45384: LD_VAR 0 4
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 21
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: PPUSH
45417: CALL_OW 69
45421: ST_TO_ADDR
// if not tmp then
45422: LD_VAR 0 8
45426: NOT
45427: IFFALSE 45431
// exit ;
45429: GO 46985
// for i in tmp do
45431: LD_ADDR_VAR 0 6
45435: PUSH
45436: LD_VAR 0 8
45440: PUSH
45441: FOR_IN
45442: IFFALSE 46960
// begin points := [ 0 , 0 , 0 ] ;
45444: LD_ADDR_VAR 0 9
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: ST_TO_ADDR
// bpoints := 1 ;
45463: LD_ADDR_VAR 0 10
45467: PUSH
45468: LD_INT 1
45470: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45471: LD_VAR 0 6
45475: PPUSH
45476: CALL_OW 247
45480: PUSH
45481: LD_INT 1
45483: DOUBLE
45484: EQUAL
45485: IFTRUE 45489
45487: GO 46067
45489: POP
// begin if GetClass ( i ) = 1 then
45490: LD_VAR 0 6
45494: PPUSH
45495: CALL_OW 257
45499: PUSH
45500: LD_INT 1
45502: EQUAL
45503: IFFALSE 45524
// points := [ 10 , 5 , 3 ] ;
45505: LD_ADDR_VAR 0 9
45509: PUSH
45510: LD_INT 10
45512: PUSH
45513: LD_INT 5
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45524: LD_VAR 0 6
45528: PPUSH
45529: CALL_OW 257
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: IN
45548: IFFALSE 45569
// points := [ 3 , 2 , 1 ] ;
45550: LD_ADDR_VAR 0 9
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45569: LD_VAR 0 6
45573: PPUSH
45574: CALL_OW 257
45578: PUSH
45579: LD_INT 5
45581: EQUAL
45582: IFFALSE 45603
// points := [ 130 , 5 , 2 ] ;
45584: LD_ADDR_VAR 0 9
45588: PUSH
45589: LD_INT 130
45591: PUSH
45592: LD_INT 5
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45603: LD_VAR 0 6
45607: PPUSH
45608: CALL_OW 257
45612: PUSH
45613: LD_INT 8
45615: EQUAL
45616: IFFALSE 45637
// points := [ 35 , 35 , 30 ] ;
45618: LD_ADDR_VAR 0 9
45622: PUSH
45623: LD_INT 35
45625: PUSH
45626: LD_INT 35
45628: PUSH
45629: LD_INT 30
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45637: LD_VAR 0 6
45641: PPUSH
45642: CALL_OW 257
45646: PUSH
45647: LD_INT 9
45649: EQUAL
45650: IFFALSE 45671
// points := [ 20 , 55 , 40 ] ;
45652: LD_ADDR_VAR 0 9
45656: PUSH
45657: LD_INT 20
45659: PUSH
45660: LD_INT 55
45662: PUSH
45663: LD_INT 40
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45671: LD_VAR 0 6
45675: PPUSH
45676: CALL_OW 257
45680: PUSH
45681: LD_INT 12
45683: PUSH
45684: LD_INT 16
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: IN
45691: IFFALSE 45712
// points := [ 5 , 3 , 2 ] ;
45693: LD_ADDR_VAR 0 9
45697: PUSH
45698: LD_INT 5
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45712: LD_VAR 0 6
45716: PPUSH
45717: CALL_OW 257
45721: PUSH
45722: LD_INT 17
45724: EQUAL
45725: IFFALSE 45746
// points := [ 100 , 50 , 75 ] ;
45727: LD_ADDR_VAR 0 9
45731: PUSH
45732: LD_INT 100
45734: PUSH
45735: LD_INT 50
45737: PUSH
45738: LD_INT 75
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45746: LD_VAR 0 6
45750: PPUSH
45751: CALL_OW 257
45755: PUSH
45756: LD_INT 15
45758: EQUAL
45759: IFFALSE 45780
// points := [ 10 , 5 , 3 ] ;
45761: LD_ADDR_VAR 0 9
45765: PUSH
45766: LD_INT 10
45768: PUSH
45769: LD_INT 5
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45780: LD_VAR 0 6
45784: PPUSH
45785: CALL_OW 257
45789: PUSH
45790: LD_INT 14
45792: EQUAL
45793: IFFALSE 45814
// points := [ 10 , 0 , 0 ] ;
45795: LD_ADDR_VAR 0 9
45799: PUSH
45800: LD_INT 10
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45814: LD_VAR 0 6
45818: PPUSH
45819: CALL_OW 257
45823: PUSH
45824: LD_INT 11
45826: EQUAL
45827: IFFALSE 45848
// points := [ 30 , 10 , 5 ] ;
45829: LD_ADDR_VAR 0 9
45833: PUSH
45834: LD_INT 30
45836: PUSH
45837: LD_INT 10
45839: PUSH
45840: LD_INT 5
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45848: LD_VAR 0 1
45852: PPUSH
45853: LD_INT 5
45855: PPUSH
45856: CALL_OW 321
45860: PUSH
45861: LD_INT 2
45863: EQUAL
45864: IFFALSE 45881
// bpoints := bpoints * 1.8 ;
45866: LD_ADDR_VAR 0 10
45870: PUSH
45871: LD_VAR 0 10
45875: PUSH
45876: LD_REAL  1.80000000000000E+0000
45879: MUL
45880: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45881: LD_VAR 0 6
45885: PPUSH
45886: CALL_OW 257
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 3
45899: PUSH
45900: LD_INT 4
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: IN
45909: PUSH
45910: LD_VAR 0 1
45914: PPUSH
45915: LD_INT 51
45917: PPUSH
45918: CALL_OW 321
45922: PUSH
45923: LD_INT 2
45925: EQUAL
45926: AND
45927: IFFALSE 45944
// bpoints := bpoints * 1.2 ;
45929: LD_ADDR_VAR 0 10
45933: PUSH
45934: LD_VAR 0 10
45938: PUSH
45939: LD_REAL  1.20000000000000E+0000
45942: MUL
45943: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45944: LD_VAR 0 6
45948: PPUSH
45949: CALL_OW 257
45953: PUSH
45954: LD_INT 5
45956: PUSH
45957: LD_INT 7
45959: PUSH
45960: LD_INT 9
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: IN
45968: PUSH
45969: LD_VAR 0 1
45973: PPUSH
45974: LD_INT 52
45976: PPUSH
45977: CALL_OW 321
45981: PUSH
45982: LD_INT 2
45984: EQUAL
45985: AND
45986: IFFALSE 46003
// bpoints := bpoints * 1.5 ;
45988: LD_ADDR_VAR 0 10
45992: PUSH
45993: LD_VAR 0 10
45997: PUSH
45998: LD_REAL  1.50000000000000E+0000
46001: MUL
46002: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46003: LD_VAR 0 1
46007: PPUSH
46008: LD_INT 66
46010: PPUSH
46011: CALL_OW 321
46015: PUSH
46016: LD_INT 2
46018: EQUAL
46019: IFFALSE 46036
// bpoints := bpoints * 1.1 ;
46021: LD_ADDR_VAR 0 10
46025: PUSH
46026: LD_VAR 0 10
46030: PUSH
46031: LD_REAL  1.10000000000000E+0000
46034: MUL
46035: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46036: LD_ADDR_VAR 0 10
46040: PUSH
46041: LD_VAR 0 10
46045: PUSH
46046: LD_VAR 0 6
46050: PPUSH
46051: LD_INT 1
46053: PPUSH
46054: CALL_OW 259
46058: PUSH
46059: LD_REAL  1.15000000000000E+0000
46062: MUL
46063: MUL
46064: ST_TO_ADDR
// end ; unit_vehicle :
46065: GO 46889
46067: LD_INT 2
46069: DOUBLE
46070: EQUAL
46071: IFTRUE 46075
46073: GO 46877
46075: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL_OW 264
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 42
46091: PUSH
46092: LD_INT 24
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: IN
46100: IFFALSE 46121
// points := [ 25 , 5 , 3 ] ;
46102: LD_ADDR_VAR 0 9
46106: PUSH
46107: LD_INT 25
46109: PUSH
46110: LD_INT 5
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46121: LD_VAR 0 6
46125: PPUSH
46126: CALL_OW 264
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: LD_INT 43
46136: PUSH
46137: LD_INT 25
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: IN
46145: IFFALSE 46166
// points := [ 40 , 15 , 5 ] ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_INT 40
46154: PUSH
46155: LD_INT 15
46157: PUSH
46158: LD_INT 5
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 264
46175: PUSH
46176: LD_INT 3
46178: PUSH
46179: LD_INT 23
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: IN
46186: IFFALSE 46207
// points := [ 7 , 25 , 8 ] ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_INT 7
46195: PUSH
46196: LD_INT 25
46198: PUSH
46199: LD_INT 8
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46207: LD_VAR 0 6
46211: PPUSH
46212: CALL_OW 264
46216: PUSH
46217: LD_INT 5
46219: PUSH
46220: LD_INT 27
46222: PUSH
46223: LD_INT 44
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: IN
46231: IFFALSE 46252
// points := [ 14 , 50 , 16 ] ;
46233: LD_ADDR_VAR 0 9
46237: PUSH
46238: LD_INT 14
46240: PUSH
46241: LD_INT 50
46243: PUSH
46244: LD_INT 16
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46252: LD_VAR 0 6
46256: PPUSH
46257: CALL_OW 264
46261: PUSH
46262: LD_INT 6
46264: PUSH
46265: LD_INT 46
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: IN
46272: IFFALSE 46293
// points := [ 32 , 120 , 70 ] ;
46274: LD_ADDR_VAR 0 9
46278: PUSH
46279: LD_INT 32
46281: PUSH
46282: LD_INT 120
46284: PUSH
46285: LD_INT 70
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46293: LD_VAR 0 6
46297: PPUSH
46298: CALL_OW 264
46302: PUSH
46303: LD_INT 7
46305: PUSH
46306: LD_INT 28
46308: PUSH
46309: LD_INT 45
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: IN
46317: IFFALSE 46338
// points := [ 35 , 20 , 45 ] ;
46319: LD_ADDR_VAR 0 9
46323: PUSH
46324: LD_INT 35
46326: PUSH
46327: LD_INT 20
46329: PUSH
46330: LD_INT 45
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46338: LD_VAR 0 6
46342: PPUSH
46343: CALL_OW 264
46347: PUSH
46348: LD_INT 47
46350: PUSH
46351: EMPTY
46352: LIST
46353: IN
46354: IFFALSE 46375
// points := [ 67 , 45 , 75 ] ;
46356: LD_ADDR_VAR 0 9
46360: PUSH
46361: LD_INT 67
46363: PUSH
46364: LD_INT 45
46366: PUSH
46367: LD_INT 75
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46375: LD_VAR 0 6
46379: PPUSH
46380: CALL_OW 264
46384: PUSH
46385: LD_INT 26
46387: PUSH
46388: EMPTY
46389: LIST
46390: IN
46391: IFFALSE 46412
// points := [ 120 , 30 , 80 ] ;
46393: LD_ADDR_VAR 0 9
46397: PUSH
46398: LD_INT 120
46400: PUSH
46401: LD_INT 30
46403: PUSH
46404: LD_INT 80
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46412: LD_VAR 0 6
46416: PPUSH
46417: CALL_OW 264
46421: PUSH
46422: LD_INT 22
46424: PUSH
46425: EMPTY
46426: LIST
46427: IN
46428: IFFALSE 46449
// points := [ 40 , 1 , 1 ] ;
46430: LD_ADDR_VAR 0 9
46434: PUSH
46435: LD_INT 40
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46449: LD_VAR 0 6
46453: PPUSH
46454: CALL_OW 264
46458: PUSH
46459: LD_INT 29
46461: PUSH
46462: EMPTY
46463: LIST
46464: IN
46465: IFFALSE 46486
// points := [ 70 , 200 , 400 ] ;
46467: LD_ADDR_VAR 0 9
46471: PUSH
46472: LD_INT 70
46474: PUSH
46475: LD_INT 200
46477: PUSH
46478: LD_INT 400
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46486: LD_VAR 0 6
46490: PPUSH
46491: CALL_OW 264
46495: PUSH
46496: LD_INT 14
46498: PUSH
46499: LD_INT 53
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: IN
46506: IFFALSE 46527
// points := [ 40 , 10 , 20 ] ;
46508: LD_ADDR_VAR 0 9
46512: PUSH
46513: LD_INT 40
46515: PUSH
46516: LD_INT 10
46518: PUSH
46519: LD_INT 20
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46527: LD_VAR 0 6
46531: PPUSH
46532: CALL_OW 264
46536: PUSH
46537: LD_INT 9
46539: PUSH
46540: EMPTY
46541: LIST
46542: IN
46543: IFFALSE 46564
// points := [ 5 , 70 , 20 ] ;
46545: LD_ADDR_VAR 0 9
46549: PUSH
46550: LD_INT 5
46552: PUSH
46553: LD_INT 70
46555: PUSH
46556: LD_INT 20
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46564: LD_VAR 0 6
46568: PPUSH
46569: CALL_OW 264
46573: PUSH
46574: LD_INT 10
46576: PUSH
46577: EMPTY
46578: LIST
46579: IN
46580: IFFALSE 46601
// points := [ 35 , 110 , 70 ] ;
46582: LD_ADDR_VAR 0 9
46586: PUSH
46587: LD_INT 35
46589: PUSH
46590: LD_INT 110
46592: PUSH
46593: LD_INT 70
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46601: LD_VAR 0 6
46605: PPUSH
46606: CALL_OW 265
46610: PUSH
46611: LD_INT 25
46613: EQUAL
46614: IFFALSE 46635
// points := [ 80 , 65 , 100 ] ;
46616: LD_ADDR_VAR 0 9
46620: PUSH
46621: LD_INT 80
46623: PUSH
46624: LD_INT 65
46626: PUSH
46627: LD_INT 100
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46635: LD_VAR 0 6
46639: PPUSH
46640: CALL_OW 263
46644: PUSH
46645: LD_INT 1
46647: EQUAL
46648: IFFALSE 46683
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46650: LD_ADDR_VAR 0 10
46654: PUSH
46655: LD_VAR 0 10
46659: PUSH
46660: LD_VAR 0 6
46664: PPUSH
46665: CALL_OW 311
46669: PPUSH
46670: LD_INT 3
46672: PPUSH
46673: CALL_OW 259
46677: PUSH
46678: LD_INT 4
46680: MUL
46681: MUL
46682: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46683: LD_VAR 0 6
46687: PPUSH
46688: CALL_OW 263
46692: PUSH
46693: LD_INT 2
46695: EQUAL
46696: IFFALSE 46747
// begin j := IsControledBy ( i ) ;
46698: LD_ADDR_VAR 0 7
46702: PUSH
46703: LD_VAR 0 6
46707: PPUSH
46708: CALL_OW 312
46712: ST_TO_ADDR
// if j then
46713: LD_VAR 0 7
46717: IFFALSE 46747
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46719: LD_ADDR_VAR 0 10
46723: PUSH
46724: LD_VAR 0 10
46728: PUSH
46729: LD_VAR 0 7
46733: PPUSH
46734: LD_INT 3
46736: PPUSH
46737: CALL_OW 259
46741: PUSH
46742: LD_INT 3
46744: MUL
46745: MUL
46746: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46747: LD_VAR 0 6
46751: PPUSH
46752: CALL_OW 264
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: LD_INT 6
46762: PUSH
46763: LD_INT 46
46765: PUSH
46766: LD_INT 44
46768: PUSH
46769: LD_INT 47
46771: PUSH
46772: LD_INT 45
46774: PUSH
46775: LD_INT 28
46777: PUSH
46778: LD_INT 7
46780: PUSH
46781: LD_INT 27
46783: PUSH
46784: LD_INT 29
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: IN
46799: PUSH
46800: LD_VAR 0 1
46804: PPUSH
46805: LD_INT 52
46807: PPUSH
46808: CALL_OW 321
46812: PUSH
46813: LD_INT 2
46815: EQUAL
46816: AND
46817: IFFALSE 46834
// bpoints := bpoints * 1.2 ;
46819: LD_ADDR_VAR 0 10
46823: PUSH
46824: LD_VAR 0 10
46828: PUSH
46829: LD_REAL  1.20000000000000E+0000
46832: MUL
46833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46834: LD_VAR 0 6
46838: PPUSH
46839: CALL_OW 264
46843: PUSH
46844: LD_INT 6
46846: PUSH
46847: LD_INT 46
46849: PUSH
46850: LD_INT 47
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: IN
46858: IFFALSE 46875
// bpoints := bpoints * 1.2 ;
46860: LD_ADDR_VAR 0 10
46864: PUSH
46865: LD_VAR 0 10
46869: PUSH
46870: LD_REAL  1.20000000000000E+0000
46873: MUL
46874: ST_TO_ADDR
// end ; unit_building :
46875: GO 46889
46877: LD_INT 3
46879: DOUBLE
46880: EQUAL
46881: IFTRUE 46885
46883: GO 46888
46885: POP
// ; end ;
46886: GO 46889
46888: POP
// for j = 1 to 3 do
46889: LD_ADDR_VAR 0 7
46893: PUSH
46894: DOUBLE
46895: LD_INT 1
46897: DEC
46898: ST_TO_ADDR
46899: LD_INT 3
46901: PUSH
46902: FOR_TO
46903: IFFALSE 46956
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46905: LD_ADDR_VAR 0 5
46909: PUSH
46910: LD_VAR 0 5
46914: PPUSH
46915: LD_VAR 0 7
46919: PPUSH
46920: LD_VAR 0 5
46924: PUSH
46925: LD_VAR 0 7
46929: ARRAY
46930: PUSH
46931: LD_VAR 0 9
46935: PUSH
46936: LD_VAR 0 7
46940: ARRAY
46941: PUSH
46942: LD_VAR 0 10
46946: MUL
46947: PLUS
46948: PPUSH
46949: CALL_OW 1
46953: ST_TO_ADDR
46954: GO 46902
46956: POP
46957: POP
// end ;
46958: GO 45441
46960: POP
46961: POP
// result := Replace ( result , 4 , tmp ) ;
46962: LD_ADDR_VAR 0 5
46966: PUSH
46967: LD_VAR 0 5
46971: PPUSH
46972: LD_INT 4
46974: PPUSH
46975: LD_VAR 0 8
46979: PPUSH
46980: CALL_OW 1
46984: ST_TO_ADDR
// end ;
46985: LD_VAR 0 5
46989: RET
// export function DangerAtRange ( unit , range ) ; begin
46990: LD_INT 0
46992: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46993: LD_ADDR_VAR 0 3
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 255
47007: PPUSH
47008: LD_VAR 0 1
47012: PPUSH
47013: CALL_OW 250
47017: PPUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: CALL_OW 251
47027: PPUSH
47028: LD_VAR 0 2
47032: PPUSH
47033: CALL 45293 0 4
47037: ST_TO_ADDR
// end ;
47038: LD_VAR 0 3
47042: RET
// export function DangerInArea ( side , area ) ; begin
47043: LD_INT 0
47045: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47046: LD_ADDR_VAR 0 3
47050: PUSH
47051: LD_VAR 0 2
47055: PPUSH
47056: LD_INT 81
47058: PUSH
47059: LD_VAR 0 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PPUSH
47068: CALL_OW 70
47072: ST_TO_ADDR
// end ;
47073: LD_VAR 0 3
47077: RET
// export function IsExtension ( b ) ; begin
47078: LD_INT 0
47080: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47081: LD_ADDR_VAR 0 2
47085: PUSH
47086: LD_VAR 0 1
47090: PUSH
47091: LD_INT 23
47093: PUSH
47094: LD_INT 20
47096: PUSH
47097: LD_INT 22
47099: PUSH
47100: LD_INT 17
47102: PUSH
47103: LD_INT 24
47105: PUSH
47106: LD_INT 21
47108: PUSH
47109: LD_INT 19
47111: PUSH
47112: LD_INT 16
47114: PUSH
47115: LD_INT 25
47117: PUSH
47118: LD_INT 18
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: IN
47133: ST_TO_ADDR
// end ;
47134: LD_VAR 0 2
47138: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
47139: LD_INT 0
47141: PPUSH
47142: PPUSH
47143: PPUSH
// result := [ ] ;
47144: LD_ADDR_VAR 0 2
47148: PUSH
47149: EMPTY
47150: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
47151: LD_ADDR_VAR 0 3
47155: PUSH
47156: LD_INT 21
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PPUSH
47166: CALL_OW 69
47170: ST_TO_ADDR
// if not tmp then
47171: LD_VAR 0 3
47175: NOT
47176: IFFALSE 47180
// exit ;
47178: GO 47230
// for i in tmp do
47180: LD_ADDR_VAR 0 4
47184: PUSH
47185: LD_VAR 0 3
47189: PUSH
47190: FOR_IN
47191: IFFALSE 47228
// if GetBase ( i ) = base then
47193: LD_VAR 0 4
47197: PPUSH
47198: CALL_OW 274
47202: PUSH
47203: LD_VAR 0 1
47207: EQUAL
47208: IFFALSE 47226
// result := result ^ i ;
47210: LD_ADDR_VAR 0 2
47214: PUSH
47215: LD_VAR 0 2
47219: PUSH
47220: LD_VAR 0 4
47224: ADD
47225: ST_TO_ADDR
47226: GO 47190
47228: POP
47229: POP
// end ;
47230: LD_VAR 0 2
47234: RET
// export function ComComplete ( unit , b ) ; var i ; begin
47235: LD_INT 0
47237: PPUSH
47238: PPUSH
// if BuildingStatus ( b ) = bs_build then
47239: LD_VAR 0 2
47243: PPUSH
47244: CALL_OW 461
47248: PUSH
47249: LD_INT 1
47251: EQUAL
47252: IFFALSE 47312
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47254: LD_VAR 0 1
47258: PPUSH
47259: LD_STRING h
47261: PUSH
47262: LD_VAR 0 2
47266: PPUSH
47267: CALL_OW 250
47271: PUSH
47272: LD_VAR 0 2
47276: PPUSH
47277: CALL_OW 251
47281: PUSH
47282: LD_VAR 0 2
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: PPUSH
47308: CALL_OW 446
// end ;
47312: LD_VAR 0 3
47316: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47317: LD_INT 0
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47325: LD_VAR 0 1
47329: NOT
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 263
47340: PUSH
47341: LD_INT 2
47343: EQUAL
47344: NOT
47345: OR
47346: IFFALSE 47350
// exit ;
47348: GO 47666
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47350: LD_ADDR_VAR 0 6
47354: PUSH
47355: LD_INT 22
47357: PUSH
47358: LD_VAR 0 1
47362: PPUSH
47363: CALL_OW 255
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 30
47377: PUSH
47378: LD_INT 36
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 34
47387: PUSH
47388: LD_INT 31
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PPUSH
47404: CALL_OW 69
47408: ST_TO_ADDR
// if not tmp then
47409: LD_VAR 0 6
47413: NOT
47414: IFFALSE 47418
// exit ;
47416: GO 47666
// result := [ ] ;
47418: LD_ADDR_VAR 0 2
47422: PUSH
47423: EMPTY
47424: ST_TO_ADDR
// for i in tmp do
47425: LD_ADDR_VAR 0 3
47429: PUSH
47430: LD_VAR 0 6
47434: PUSH
47435: FOR_IN
47436: IFFALSE 47507
// begin t := UnitsInside ( i ) ;
47438: LD_ADDR_VAR 0 4
47442: PUSH
47443: LD_VAR 0 3
47447: PPUSH
47448: CALL_OW 313
47452: ST_TO_ADDR
// if t then
47453: LD_VAR 0 4
47457: IFFALSE 47505
// for j in t do
47459: LD_ADDR_VAR 0 7
47463: PUSH
47464: LD_VAR 0 4
47468: PUSH
47469: FOR_IN
47470: IFFALSE 47503
// result := Insert ( result , result + 1 , j ) ;
47472: LD_ADDR_VAR 0 2
47476: PUSH
47477: LD_VAR 0 2
47481: PPUSH
47482: LD_VAR 0 2
47486: PUSH
47487: LD_INT 1
47489: PLUS
47490: PPUSH
47491: LD_VAR 0 7
47495: PPUSH
47496: CALL_OW 2
47500: ST_TO_ADDR
47501: GO 47469
47503: POP
47504: POP
// end ;
47505: GO 47435
47507: POP
47508: POP
// if not result then
47509: LD_VAR 0 2
47513: NOT
47514: IFFALSE 47518
// exit ;
47516: GO 47666
// mech := result [ 1 ] ;
47518: LD_ADDR_VAR 0 5
47522: PUSH
47523: LD_VAR 0 2
47527: PUSH
47528: LD_INT 1
47530: ARRAY
47531: ST_TO_ADDR
// if result > 1 then
47532: LD_VAR 0 2
47536: PUSH
47537: LD_INT 1
47539: GREATER
47540: IFFALSE 47652
// for i = 2 to result do
47542: LD_ADDR_VAR 0 3
47546: PUSH
47547: DOUBLE
47548: LD_INT 2
47550: DEC
47551: ST_TO_ADDR
47552: LD_VAR 0 2
47556: PUSH
47557: FOR_TO
47558: IFFALSE 47650
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47560: LD_ADDR_VAR 0 4
47564: PUSH
47565: LD_VAR 0 2
47569: PUSH
47570: LD_VAR 0 3
47574: ARRAY
47575: PPUSH
47576: LD_INT 3
47578: PPUSH
47579: CALL_OW 259
47583: PUSH
47584: LD_VAR 0 2
47588: PUSH
47589: LD_VAR 0 3
47593: ARRAY
47594: PPUSH
47595: CALL_OW 432
47599: MINUS
47600: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47601: LD_VAR 0 4
47605: PUSH
47606: LD_VAR 0 5
47610: PPUSH
47611: LD_INT 3
47613: PPUSH
47614: CALL_OW 259
47618: PUSH
47619: LD_VAR 0 5
47623: PPUSH
47624: CALL_OW 432
47628: MINUS
47629: GREATEREQUAL
47630: IFFALSE 47648
// mech := result [ i ] ;
47632: LD_ADDR_VAR 0 5
47636: PUSH
47637: LD_VAR 0 2
47641: PUSH
47642: LD_VAR 0 3
47646: ARRAY
47647: ST_TO_ADDR
// end ;
47648: GO 47557
47650: POP
47651: POP
// ComLinkTo ( vehicle , mech ) ;
47652: LD_VAR 0 1
47656: PPUSH
47657: LD_VAR 0 5
47661: PPUSH
47662: CALL_OW 135
// end ;
47666: LD_VAR 0 2
47670: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47671: LD_INT 0
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
// result := [ ] ;
47686: LD_ADDR_VAR 0 6
47690: PUSH
47691: EMPTY
47692: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47693: LD_VAR 0 1
47697: PPUSH
47698: CALL_OW 266
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: IN
47713: NOT
47714: IFFALSE 47718
// exit ;
47716: GO 49237
// if name then
47718: LD_VAR 0 2
47722: IFFALSE 47738
// SetBName ( base_dep , name ) ;
47724: LD_VAR 0 1
47728: PPUSH
47729: LD_VAR 0 2
47733: PPUSH
47734: CALL_OW 500
// base := GetBase ( base_dep ) ;
47738: LD_ADDR_VAR 0 14
47742: PUSH
47743: LD_VAR 0 1
47747: PPUSH
47748: CALL_OW 274
47752: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47753: LD_ADDR_VAR 0 15
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 255
47767: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47768: LD_ADDR_VAR 0 16
47772: PUSH
47773: LD_VAR 0 1
47777: PPUSH
47778: CALL_OW 248
47782: ST_TO_ADDR
// if sources then
47783: LD_VAR 0 4
47787: IFFALSE 47834
// for i = 1 to 3 do
47789: LD_ADDR_VAR 0 7
47793: PUSH
47794: DOUBLE
47795: LD_INT 1
47797: DEC
47798: ST_TO_ADDR
47799: LD_INT 3
47801: PUSH
47802: FOR_TO
47803: IFFALSE 47832
// AddResourceType ( base , i , sources [ i ] ) ;
47805: LD_VAR 0 14
47809: PPUSH
47810: LD_VAR 0 7
47814: PPUSH
47815: LD_VAR 0 4
47819: PUSH
47820: LD_VAR 0 7
47824: ARRAY
47825: PPUSH
47826: CALL_OW 276
47830: GO 47802
47832: POP
47833: POP
// buildings := GetBaseBuildings ( base ) ;
47834: LD_ADDR_VAR 0 17
47838: PUSH
47839: LD_VAR 0 14
47843: PPUSH
47844: CALL 47139 0 1
47848: ST_TO_ADDR
// InitHc ;
47849: CALL_OW 19
// InitUc ;
47853: CALL_OW 18
// uc_side := side ;
47857: LD_ADDR_OWVAR 20
47861: PUSH
47862: LD_VAR 0 15
47866: ST_TO_ADDR
// uc_nation := nation ;
47867: LD_ADDR_OWVAR 21
47871: PUSH
47872: LD_VAR 0 16
47876: ST_TO_ADDR
// if buildings then
47877: LD_VAR 0 17
47881: IFFALSE 49096
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47883: LD_VAR 0 17
47887: PPUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 30
47893: PUSH
47894: LD_INT 32
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 30
47903: PUSH
47904: LD_INT 33
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: PPUSH
47916: CALL_OW 72
47920: IFFALSE 48003
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47922: LD_ADDR_VAR 0 7
47926: PUSH
47927: LD_VAR 0 17
47931: PPUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 30
47937: PUSH
47938: LD_INT 32
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 30
47947: PUSH
47948: LD_INT 33
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: PPUSH
47960: CALL_OW 72
47964: PUSH
47965: FOR_IN
47966: IFFALSE 48001
// begin if not GetBWeapon ( i ) then
47968: LD_VAR 0 7
47972: PPUSH
47973: CALL_OW 269
47977: NOT
47978: IFFALSE 47999
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
47980: LD_VAR 0 7
47984: PPUSH
47985: LD_VAR 0 7
47989: PPUSH
47990: CALL 49242 0 1
47994: PPUSH
47995: CALL_OW 431
// end ;
47999: GO 47965
48001: POP
48002: POP
// end ; for i = 1 to personel do
48003: LD_ADDR_VAR 0 7
48007: PUSH
48008: DOUBLE
48009: LD_INT 1
48011: DEC
48012: ST_TO_ADDR
48013: LD_VAR 0 5
48017: PUSH
48018: FOR_TO
48019: IFFALSE 49076
// begin if i > 4 then
48021: LD_VAR 0 7
48025: PUSH
48026: LD_INT 4
48028: GREATER
48029: IFFALSE 48033
// break ;
48031: GO 49076
// case i of 1 :
48033: LD_VAR 0 7
48037: PUSH
48038: LD_INT 1
48040: DOUBLE
48041: EQUAL
48042: IFTRUE 48046
48044: GO 48119
48046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48047: LD_ADDR_VAR 0 11
48051: PUSH
48052: LD_VAR 0 17
48056: PPUSH
48057: LD_INT 22
48059: PUSH
48060: LD_VAR 0 15
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 30
48074: PUSH
48075: LD_INT 32
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 30
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 30
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PPUSH
48112: CALL_OW 72
48116: ST_TO_ADDR
48117: GO 48341
48119: LD_INT 2
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48127
48125: GO 48189
48127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48128: LD_ADDR_VAR 0 11
48132: PUSH
48133: LD_VAR 0 17
48137: PPUSH
48138: LD_INT 22
48140: PUSH
48141: LD_VAR 0 15
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 30
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 30
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: ST_TO_ADDR
48187: GO 48341
48189: LD_INT 3
48191: DOUBLE
48192: EQUAL
48193: IFTRUE 48197
48195: GO 48259
48197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48198: LD_ADDR_VAR 0 11
48202: PUSH
48203: LD_VAR 0 17
48207: PPUSH
48208: LD_INT 22
48210: PUSH
48211: LD_VAR 0 15
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 30
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 30
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PPUSH
48252: CALL_OW 72
48256: ST_TO_ADDR
48257: GO 48341
48259: LD_INT 4
48261: DOUBLE
48262: EQUAL
48263: IFTRUE 48267
48265: GO 48340
48267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48268: LD_ADDR_VAR 0 11
48272: PUSH
48273: LD_VAR 0 17
48277: PPUSH
48278: LD_INT 22
48280: PUSH
48281: LD_VAR 0 15
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 30
48305: PUSH
48306: LD_INT 7
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 30
48315: PUSH
48316: LD_INT 8
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PPUSH
48333: CALL_OW 72
48337: ST_TO_ADDR
48338: GO 48341
48340: POP
// if i = 1 then
48341: LD_VAR 0 7
48345: PUSH
48346: LD_INT 1
48348: EQUAL
48349: IFFALSE 48460
// begin tmp := [ ] ;
48351: LD_ADDR_VAR 0 18
48355: PUSH
48356: EMPTY
48357: ST_TO_ADDR
// for j in f do
48358: LD_ADDR_VAR 0 8
48362: PUSH
48363: LD_VAR 0 11
48367: PUSH
48368: FOR_IN
48369: IFFALSE 48442
// if GetBType ( j ) = b_bunker then
48371: LD_VAR 0 8
48375: PPUSH
48376: CALL_OW 266
48380: PUSH
48381: LD_INT 32
48383: EQUAL
48384: IFFALSE 48411
// tmp := Insert ( tmp , 1 , j ) else
48386: LD_ADDR_VAR 0 18
48390: PUSH
48391: LD_VAR 0 18
48395: PPUSH
48396: LD_INT 1
48398: PPUSH
48399: LD_VAR 0 8
48403: PPUSH
48404: CALL_OW 2
48408: ST_TO_ADDR
48409: GO 48440
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48411: LD_ADDR_VAR 0 18
48415: PUSH
48416: LD_VAR 0 18
48420: PPUSH
48421: LD_VAR 0 18
48425: PUSH
48426: LD_INT 1
48428: PLUS
48429: PPUSH
48430: LD_VAR 0 8
48434: PPUSH
48435: CALL_OW 2
48439: ST_TO_ADDR
48440: GO 48368
48442: POP
48443: POP
// if tmp then
48444: LD_VAR 0 18
48448: IFFALSE 48460
// f := tmp ;
48450: LD_ADDR_VAR 0 11
48454: PUSH
48455: LD_VAR 0 18
48459: ST_TO_ADDR
// end ; x := personel [ i ] ;
48460: LD_ADDR_VAR 0 12
48464: PUSH
48465: LD_VAR 0 5
48469: PUSH
48470: LD_VAR 0 7
48474: ARRAY
48475: ST_TO_ADDR
// if x = - 1 then
48476: LD_VAR 0 12
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: EQUAL
48485: IFFALSE 48694
// begin for j in f do
48487: LD_ADDR_VAR 0 8
48491: PUSH
48492: LD_VAR 0 11
48496: PUSH
48497: FOR_IN
48498: IFFALSE 48690
// repeat InitHc ;
48500: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48504: LD_VAR 0 8
48508: PPUSH
48509: CALL_OW 266
48513: PUSH
48514: LD_INT 5
48516: EQUAL
48517: IFFALSE 48587
// begin if UnitsInside ( j ) < 3 then
48519: LD_VAR 0 8
48523: PPUSH
48524: CALL_OW 313
48528: PUSH
48529: LD_INT 3
48531: LESS
48532: IFFALSE 48568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48534: LD_INT 0
48536: PPUSH
48537: LD_INT 5
48539: PUSH
48540: LD_INT 8
48542: PUSH
48543: LD_INT 9
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: LD_VAR 0 16
48555: ARRAY
48556: PPUSH
48557: LD_VAR 0 3
48561: PPUSH
48562: CALL_OW 380
48566: GO 48585
// PrepareHuman ( false , i , skill ) ;
48568: LD_INT 0
48570: PPUSH
48571: LD_VAR 0 7
48575: PPUSH
48576: LD_VAR 0 3
48580: PPUSH
48581: CALL_OW 380
// end else
48585: GO 48604
// PrepareHuman ( false , i , skill ) ;
48587: LD_INT 0
48589: PPUSH
48590: LD_VAR 0 7
48594: PPUSH
48595: LD_VAR 0 3
48599: PPUSH
48600: CALL_OW 380
// un := CreateHuman ;
48604: LD_ADDR_VAR 0 13
48608: PUSH
48609: CALL_OW 44
48613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48614: LD_ADDR_VAR 0 6
48618: PUSH
48619: LD_VAR 0 6
48623: PPUSH
48624: LD_INT 1
48626: PPUSH
48627: LD_VAR 0 13
48631: PPUSH
48632: CALL_OW 2
48636: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48637: LD_VAR 0 13
48641: PPUSH
48642: LD_VAR 0 8
48646: PPUSH
48647: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48651: LD_VAR 0 8
48655: PPUSH
48656: CALL_OW 313
48660: PUSH
48661: LD_INT 6
48663: EQUAL
48664: PUSH
48665: LD_VAR 0 8
48669: PPUSH
48670: CALL_OW 266
48674: PUSH
48675: LD_INT 32
48677: PUSH
48678: LD_INT 31
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: IN
48685: OR
48686: IFFALSE 48500
48688: GO 48497
48690: POP
48691: POP
// end else
48692: GO 49074
// for j = 1 to x do
48694: LD_ADDR_VAR 0 8
48698: PUSH
48699: DOUBLE
48700: LD_INT 1
48702: DEC
48703: ST_TO_ADDR
48704: LD_VAR 0 12
48708: PUSH
48709: FOR_TO
48710: IFFALSE 49072
// begin InitHc ;
48712: CALL_OW 19
// if not f then
48716: LD_VAR 0 11
48720: NOT
48721: IFFALSE 48810
// begin PrepareHuman ( false , i , skill ) ;
48723: LD_INT 0
48725: PPUSH
48726: LD_VAR 0 7
48730: PPUSH
48731: LD_VAR 0 3
48735: PPUSH
48736: CALL_OW 380
// un := CreateHuman ;
48740: LD_ADDR_VAR 0 13
48744: PUSH
48745: CALL_OW 44
48749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48750: LD_ADDR_VAR 0 6
48754: PUSH
48755: LD_VAR 0 6
48759: PPUSH
48760: LD_INT 1
48762: PPUSH
48763: LD_VAR 0 13
48767: PPUSH
48768: CALL_OW 2
48772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48773: LD_VAR 0 13
48777: PPUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 250
48787: PPUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 251
48797: PPUSH
48798: LD_INT 10
48800: PPUSH
48801: LD_INT 0
48803: PPUSH
48804: CALL_OW 50
// continue ;
48808: GO 48709
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48810: LD_VAR 0 11
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 313
48823: PUSH
48824: LD_VAR 0 11
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: PPUSH
48833: CALL_OW 266
48837: PUSH
48838: LD_INT 32
48840: PUSH
48841: LD_INT 31
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: IN
48848: AND
48849: PUSH
48850: LD_VAR 0 11
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: PPUSH
48859: CALL_OW 313
48863: PUSH
48864: LD_INT 6
48866: EQUAL
48867: OR
48868: IFFALSE 48888
// f := Delete ( f , 1 ) ;
48870: LD_ADDR_VAR 0 11
48874: PUSH
48875: LD_VAR 0 11
48879: PPUSH
48880: LD_INT 1
48882: PPUSH
48883: CALL_OW 3
48887: ST_TO_ADDR
// if not f then
48888: LD_VAR 0 11
48892: NOT
48893: IFFALSE 48911
// begin x := x + 2 ;
48895: LD_ADDR_VAR 0 12
48899: PUSH
48900: LD_VAR 0 12
48904: PUSH
48905: LD_INT 2
48907: PLUS
48908: ST_TO_ADDR
// continue ;
48909: GO 48709
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48911: LD_VAR 0 11
48915: PUSH
48916: LD_INT 1
48918: ARRAY
48919: PPUSH
48920: CALL_OW 266
48924: PUSH
48925: LD_INT 5
48927: EQUAL
48928: IFFALSE 49002
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48930: LD_VAR 0 11
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PPUSH
48939: CALL_OW 313
48943: PUSH
48944: LD_INT 3
48946: LESS
48947: IFFALSE 48983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48949: LD_INT 0
48951: PPUSH
48952: LD_INT 5
48954: PUSH
48955: LD_INT 8
48957: PUSH
48958: LD_INT 9
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: PUSH
48966: LD_VAR 0 16
48970: ARRAY
48971: PPUSH
48972: LD_VAR 0 3
48976: PPUSH
48977: CALL_OW 380
48981: GO 49000
// PrepareHuman ( false , i , skill ) ;
48983: LD_INT 0
48985: PPUSH
48986: LD_VAR 0 7
48990: PPUSH
48991: LD_VAR 0 3
48995: PPUSH
48996: CALL_OW 380
// end else
49000: GO 49019
// PrepareHuman ( false , i , skill ) ;
49002: LD_INT 0
49004: PPUSH
49005: LD_VAR 0 7
49009: PPUSH
49010: LD_VAR 0 3
49014: PPUSH
49015: CALL_OW 380
// un := CreateHuman ;
49019: LD_ADDR_VAR 0 13
49023: PUSH
49024: CALL_OW 44
49028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49029: LD_ADDR_VAR 0 6
49033: PUSH
49034: LD_VAR 0 6
49038: PPUSH
49039: LD_INT 1
49041: PPUSH
49042: LD_VAR 0 13
49046: PPUSH
49047: CALL_OW 2
49051: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49052: LD_VAR 0 13
49056: PPUSH
49057: LD_VAR 0 11
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: CALL_OW 52
// end ;
49070: GO 48709
49072: POP
49073: POP
// end ;
49074: GO 48018
49076: POP
49077: POP
// result := result ^ buildings ;
49078: LD_ADDR_VAR 0 6
49082: PUSH
49083: LD_VAR 0 6
49087: PUSH
49088: LD_VAR 0 17
49092: ADD
49093: ST_TO_ADDR
// end else
49094: GO 49237
// begin for i = 1 to personel do
49096: LD_ADDR_VAR 0 7
49100: PUSH
49101: DOUBLE
49102: LD_INT 1
49104: DEC
49105: ST_TO_ADDR
49106: LD_VAR 0 5
49110: PUSH
49111: FOR_TO
49112: IFFALSE 49235
// begin if i > 4 then
49114: LD_VAR 0 7
49118: PUSH
49119: LD_INT 4
49121: GREATER
49122: IFFALSE 49126
// break ;
49124: GO 49235
// x := personel [ i ] ;
49126: LD_ADDR_VAR 0 12
49130: PUSH
49131: LD_VAR 0 5
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: ST_TO_ADDR
// if x = - 1 then
49142: LD_VAR 0 12
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: EQUAL
49151: IFFALSE 49155
// continue ;
49153: GO 49111
// PrepareHuman ( false , i , skill ) ;
49155: LD_INT 0
49157: PPUSH
49158: LD_VAR 0 7
49162: PPUSH
49163: LD_VAR 0 3
49167: PPUSH
49168: CALL_OW 380
// un := CreateHuman ;
49172: LD_ADDR_VAR 0 13
49176: PUSH
49177: CALL_OW 44
49181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49182: LD_VAR 0 13
49186: PPUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 250
49196: PPUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 251
49206: PPUSH
49207: LD_INT 10
49209: PPUSH
49210: LD_INT 0
49212: PPUSH
49213: CALL_OW 50
// result := result ^ un ;
49217: LD_ADDR_VAR 0 6
49221: PUSH
49222: LD_VAR 0 6
49226: PUSH
49227: LD_VAR 0 13
49231: ADD
49232: ST_TO_ADDR
// end ;
49233: GO 49111
49235: POP
49236: POP
// end ; end ;
49237: LD_VAR 0 6
49241: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49242: LD_INT 0
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
// result := false ;
49260: LD_ADDR_VAR 0 2
49264: PUSH
49265: LD_INT 0
49267: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49268: LD_VAR 0 1
49272: NOT
49273: PUSH
49274: LD_VAR 0 1
49278: PPUSH
49279: CALL_OW 266
49283: PUSH
49284: LD_INT 32
49286: PUSH
49287: LD_INT 33
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: IN
49294: NOT
49295: OR
49296: IFFALSE 49300
// exit ;
49298: GO 50431
// nat := GetNation ( tower ) ;
49300: LD_ADDR_VAR 0 11
49304: PUSH
49305: LD_VAR 0 1
49309: PPUSH
49310: CALL_OW 248
49314: ST_TO_ADDR
// side := GetSide ( tower ) ;
49315: LD_ADDR_VAR 0 15
49319: PUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 255
49329: ST_TO_ADDR
// x := GetX ( tower ) ;
49330: LD_ADDR_VAR 0 9
49334: PUSH
49335: LD_VAR 0 1
49339: PPUSH
49340: CALL_OW 250
49344: ST_TO_ADDR
// y := GetY ( tower ) ;
49345: LD_ADDR_VAR 0 10
49349: PUSH
49350: LD_VAR 0 1
49354: PPUSH
49355: CALL_OW 251
49359: ST_TO_ADDR
// if not x or not y then
49360: LD_VAR 0 9
49364: NOT
49365: PUSH
49366: LD_VAR 0 10
49370: NOT
49371: OR
49372: IFFALSE 49376
// exit ;
49374: GO 50431
// weapon := 0 ;
49376: LD_ADDR_VAR 0 17
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// fac_list := [ ] ;
49384: LD_ADDR_VAR 0 16
49388: PUSH
49389: EMPTY
49390: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
49391: LD_ADDR_VAR 0 5
49395: PUSH
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 274
49405: PPUSH
49406: CALL 47139 0 1
49410: PPUSH
49411: LD_INT 30
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PPUSH
49421: CALL_OW 72
49425: ST_TO_ADDR
// if not factories then
49426: LD_VAR 0 5
49430: NOT
49431: IFFALSE 49435
// exit ;
49433: GO 50431
// for i in factories do
49435: LD_ADDR_VAR 0 7
49439: PUSH
49440: LD_VAR 0 5
49444: PUSH
49445: FOR_IN
49446: IFFALSE 49471
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49448: LD_ADDR_VAR 0 16
49452: PUSH
49453: LD_VAR 0 16
49457: PUSH
49458: LD_VAR 0 7
49462: PPUSH
49463: CALL_OW 478
49467: UNION
49468: ST_TO_ADDR
49469: GO 49445
49471: POP
49472: POP
// if not fac_list then
49473: LD_VAR 0 16
49477: NOT
49478: IFFALSE 49482
// exit ;
49480: GO 50431
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49482: LD_ADDR_VAR 0 4
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: LD_INT 5
49492: PUSH
49493: LD_INT 9
49495: PUSH
49496: LD_INT 10
49498: PUSH
49499: LD_INT 6
49501: PUSH
49502: LD_INT 7
49504: PUSH
49505: LD_INT 11
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 27
49519: PUSH
49520: LD_INT 28
49522: PUSH
49523: LD_INT 26
49525: PUSH
49526: LD_INT 30
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 43
49537: PUSH
49538: LD_INT 44
49540: PUSH
49541: LD_INT 46
49543: PUSH
49544: LD_INT 45
49546: PUSH
49547: LD_INT 47
49549: PUSH
49550: LD_INT 49
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: PUSH
49566: LD_VAR 0 11
49570: ARRAY
49571: ST_TO_ADDR
// for i in list do
49572: LD_ADDR_VAR 0 7
49576: PUSH
49577: LD_VAR 0 4
49581: PUSH
49582: FOR_IN
49583: IFFALSE 49616
// if not i in fac_list then
49585: LD_VAR 0 7
49589: PUSH
49590: LD_VAR 0 16
49594: IN
49595: NOT
49596: IFFALSE 49614
// list := list diff i ;
49598: LD_ADDR_VAR 0 4
49602: PUSH
49603: LD_VAR 0 4
49607: PUSH
49608: LD_VAR 0 7
49612: DIFF
49613: ST_TO_ADDR
49614: GO 49582
49616: POP
49617: POP
// if not list then
49618: LD_VAR 0 4
49622: NOT
49623: IFFALSE 49627
// exit ;
49625: GO 50431
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49627: LD_VAR 0 11
49631: PUSH
49632: LD_INT 3
49634: EQUAL
49635: PUSH
49636: LD_INT 49
49638: PUSH
49639: LD_VAR 0 4
49643: IN
49644: AND
49645: PUSH
49646: LD_INT 31
49648: PPUSH
49649: LD_VAR 0 15
49653: PPUSH
49654: CALL_OW 321
49658: PUSH
49659: LD_INT 2
49661: EQUAL
49662: AND
49663: IFFALSE 49723
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49665: LD_INT 22
49667: PUSH
49668: LD_VAR 0 15
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 35
49679: PUSH
49680: LD_INT 49
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 91
49689: PUSH
49690: LD_VAR 0 1
49694: PUSH
49695: LD_INT 10
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: PPUSH
49708: CALL_OW 69
49712: NOT
49713: IFFALSE 49723
// weapon := ru_time_lapser ;
49715: LD_ADDR_VAR 0 17
49719: PUSH
49720: LD_INT 49
49722: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49723: LD_VAR 0 11
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: IN
49738: PUSH
49739: LD_INT 11
49741: PUSH
49742: LD_VAR 0 4
49746: IN
49747: PUSH
49748: LD_INT 30
49750: PUSH
49751: LD_VAR 0 4
49755: IN
49756: OR
49757: AND
49758: PUSH
49759: LD_INT 6
49761: PPUSH
49762: LD_VAR 0 15
49766: PPUSH
49767: CALL_OW 321
49771: PUSH
49772: LD_INT 2
49774: EQUAL
49775: AND
49776: IFFALSE 49941
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49778: LD_INT 22
49780: PUSH
49781: LD_VAR 0 15
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 35
49795: PUSH
49796: LD_INT 11
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 35
49805: PUSH
49806: LD_INT 30
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 91
49820: PUSH
49821: LD_VAR 0 1
49825: PUSH
49826: LD_INT 18
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: PPUSH
49839: CALL_OW 69
49843: NOT
49844: PUSH
49845: LD_INT 22
49847: PUSH
49848: LD_VAR 0 15
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 30
49862: PUSH
49863: LD_INT 32
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 30
49872: PUSH
49873: LD_INT 33
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 91
49887: PUSH
49888: LD_VAR 0 1
49892: PUSH
49893: LD_INT 12
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: PPUSH
49909: CALL_OW 69
49913: PUSH
49914: LD_INT 2
49916: GREATER
49917: AND
49918: IFFALSE 49941
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49920: LD_ADDR_VAR 0 17
49924: PUSH
49925: LD_INT 11
49927: PUSH
49928: LD_INT 30
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_VAR 0 11
49939: ARRAY
49940: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49941: LD_VAR 0 17
49945: NOT
49946: PUSH
49947: LD_INT 40
49949: PPUSH
49950: LD_VAR 0 15
49954: PPUSH
49955: CALL_OW 321
49959: PUSH
49960: LD_INT 2
49962: EQUAL
49963: AND
49964: PUSH
49965: LD_INT 7
49967: PUSH
49968: LD_VAR 0 4
49972: IN
49973: PUSH
49974: LD_INT 28
49976: PUSH
49977: LD_VAR 0 4
49981: IN
49982: OR
49983: PUSH
49984: LD_INT 45
49986: PUSH
49987: LD_VAR 0 4
49991: IN
49992: OR
49993: AND
49994: IFFALSE 50248
// begin hex := GetHexInfo ( x , y ) ;
49996: LD_ADDR_VAR 0 3
50000: PUSH
50001: LD_VAR 0 9
50005: PPUSH
50006: LD_VAR 0 10
50010: PPUSH
50011: CALL_OW 546
50015: ST_TO_ADDR
// if hex [ 1 ] then
50016: LD_VAR 0 3
50020: PUSH
50021: LD_INT 1
50023: ARRAY
50024: IFFALSE 50028
// exit ;
50026: GO 50431
// height := hex [ 2 ] ;
50028: LD_ADDR_VAR 0 14
50032: PUSH
50033: LD_VAR 0 3
50037: PUSH
50038: LD_INT 2
50040: ARRAY
50041: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50042: LD_ADDR_VAR 0 13
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: LD_INT 5
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ST_TO_ADDR
// for i in tmp do
50065: LD_ADDR_VAR 0 7
50069: PUSH
50070: LD_VAR 0 13
50074: PUSH
50075: FOR_IN
50076: IFFALSE 50246
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50078: LD_ADDR_VAR 0 8
50082: PUSH
50083: LD_VAR 0 9
50087: PPUSH
50088: LD_VAR 0 7
50092: PPUSH
50093: LD_INT 5
50095: PPUSH
50096: CALL_OW 272
50100: PUSH
50101: LD_VAR 0 10
50105: PPUSH
50106: LD_VAR 0 7
50110: PPUSH
50111: LD_INT 5
50113: PPUSH
50114: CALL_OW 273
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50123: LD_VAR 0 8
50127: PUSH
50128: LD_INT 1
50130: ARRAY
50131: PPUSH
50132: LD_VAR 0 8
50136: PUSH
50137: LD_INT 2
50139: ARRAY
50140: PPUSH
50141: CALL_OW 488
50145: IFFALSE 50244
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50147: LD_ADDR_VAR 0 3
50151: PUSH
50152: LD_VAR 0 8
50156: PUSH
50157: LD_INT 1
50159: ARRAY
50160: PPUSH
50161: LD_VAR 0 8
50165: PUSH
50166: LD_INT 2
50168: ARRAY
50169: PPUSH
50170: CALL_OW 546
50174: ST_TO_ADDR
// if hex [ 1 ] then
50175: LD_VAR 0 3
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: IFFALSE 50187
// continue ;
50185: GO 50075
// h := hex [ 2 ] ;
50187: LD_ADDR_VAR 0 12
50191: PUSH
50192: LD_VAR 0 3
50196: PUSH
50197: LD_INT 2
50199: ARRAY
50200: ST_TO_ADDR
// if h + 7 < height then
50201: LD_VAR 0 12
50205: PUSH
50206: LD_INT 7
50208: PLUS
50209: PUSH
50210: LD_VAR 0 14
50214: LESS
50215: IFFALSE 50244
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50217: LD_ADDR_VAR 0 17
50221: PUSH
50222: LD_INT 7
50224: PUSH
50225: LD_INT 28
50227: PUSH
50228: LD_INT 45
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: PUSH
50236: LD_VAR 0 11
50240: ARRAY
50241: ST_TO_ADDR
// break ;
50242: GO 50246
// end ; end ; end ;
50244: GO 50075
50246: POP
50247: POP
// end ; if not weapon then
50248: LD_VAR 0 17
50252: NOT
50253: IFFALSE 50313
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50255: LD_ADDR_VAR 0 4
50259: PUSH
50260: LD_VAR 0 4
50264: PUSH
50265: LD_INT 11
50267: PUSH
50268: LD_INT 30
50270: PUSH
50271: LD_INT 49
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: DIFF
50279: ST_TO_ADDR
// if not list then
50280: LD_VAR 0 4
50284: NOT
50285: IFFALSE 50289
// exit ;
50287: GO 50431
// weapon := list [ rand ( 1 , list ) ] ;
50289: LD_ADDR_VAR 0 17
50293: PUSH
50294: LD_VAR 0 4
50298: PUSH
50299: LD_INT 1
50301: PPUSH
50302: LD_VAR 0 4
50306: PPUSH
50307: CALL_OW 12
50311: ARRAY
50312: ST_TO_ADDR
// end ; if weapon then
50313: LD_VAR 0 17
50317: IFFALSE 50431
// begin tmp := CostOfWeapon ( weapon ) ;
50319: LD_ADDR_VAR 0 13
50323: PUSH
50324: LD_VAR 0 17
50328: PPUSH
50329: CALL_OW 451
50333: ST_TO_ADDR
// j := GetBase ( tower ) ;
50334: LD_ADDR_VAR 0 8
50338: PUSH
50339: LD_VAR 0 1
50343: PPUSH
50344: CALL_OW 274
50348: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50349: LD_VAR 0 8
50353: PPUSH
50354: LD_INT 1
50356: PPUSH
50357: CALL_OW 275
50361: PUSH
50362: LD_VAR 0 13
50366: PUSH
50367: LD_INT 1
50369: ARRAY
50370: GREATEREQUAL
50371: PUSH
50372: LD_VAR 0 8
50376: PPUSH
50377: LD_INT 2
50379: PPUSH
50380: CALL_OW 275
50384: PUSH
50385: LD_VAR 0 13
50389: PUSH
50390: LD_INT 2
50392: ARRAY
50393: GREATEREQUAL
50394: AND
50395: PUSH
50396: LD_VAR 0 8
50400: PPUSH
50401: LD_INT 3
50403: PPUSH
50404: CALL_OW 275
50408: PUSH
50409: LD_VAR 0 13
50413: PUSH
50414: LD_INT 3
50416: ARRAY
50417: GREATEREQUAL
50418: AND
50419: IFFALSE 50431
// result := weapon ;
50421: LD_ADDR_VAR 0 2
50425: PUSH
50426: LD_VAR 0 17
50430: ST_TO_ADDR
// end ; end ;
50431: LD_VAR 0 2
50435: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50436: LD_INT 0
50438: PPUSH
50439: PPUSH
// result := true ;
50440: LD_ADDR_VAR 0 3
50444: PUSH
50445: LD_INT 1
50447: ST_TO_ADDR
// if array1 = array2 then
50448: LD_VAR 0 1
50452: PUSH
50453: LD_VAR 0 2
50457: EQUAL
50458: IFFALSE 50518
// begin for i = 1 to array1 do
50460: LD_ADDR_VAR 0 4
50464: PUSH
50465: DOUBLE
50466: LD_INT 1
50468: DEC
50469: ST_TO_ADDR
50470: LD_VAR 0 1
50474: PUSH
50475: FOR_TO
50476: IFFALSE 50514
// if array1 [ i ] <> array2 [ i ] then
50478: LD_VAR 0 1
50482: PUSH
50483: LD_VAR 0 4
50487: ARRAY
50488: PUSH
50489: LD_VAR 0 2
50493: PUSH
50494: LD_VAR 0 4
50498: ARRAY
50499: NONEQUAL
50500: IFFALSE 50512
// begin result := false ;
50502: LD_ADDR_VAR 0 3
50506: PUSH
50507: LD_INT 0
50509: ST_TO_ADDR
// break ;
50510: GO 50514
// end ;
50512: GO 50475
50514: POP
50515: POP
// end else
50516: GO 50526
// result := false ;
50518: LD_ADDR_VAR 0 3
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// end ;
50526: LD_VAR 0 3
50530: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50531: LD_INT 0
50533: PPUSH
50534: PPUSH
50535: PPUSH
// pom := GetBase ( fac ) ;
50536: LD_ADDR_VAR 0 5
50540: PUSH
50541: LD_VAR 0 1
50545: PPUSH
50546: CALL_OW 274
50550: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50551: LD_ADDR_VAR 0 4
50555: PUSH
50556: LD_VAR 0 2
50560: PUSH
50561: LD_INT 1
50563: ARRAY
50564: PPUSH
50565: LD_VAR 0 2
50569: PUSH
50570: LD_INT 2
50572: ARRAY
50573: PPUSH
50574: LD_VAR 0 2
50578: PUSH
50579: LD_INT 3
50581: ARRAY
50582: PPUSH
50583: LD_VAR 0 2
50587: PUSH
50588: LD_INT 4
50590: ARRAY
50591: PPUSH
50592: CALL_OW 449
50596: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50597: LD_ADDR_VAR 0 3
50601: PUSH
50602: LD_VAR 0 5
50606: PPUSH
50607: LD_INT 1
50609: PPUSH
50610: CALL_OW 275
50614: PUSH
50615: LD_VAR 0 4
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: GREATEREQUAL
50624: PUSH
50625: LD_VAR 0 5
50629: PPUSH
50630: LD_INT 2
50632: PPUSH
50633: CALL_OW 275
50637: PUSH
50638: LD_VAR 0 4
50642: PUSH
50643: LD_INT 2
50645: ARRAY
50646: GREATEREQUAL
50647: AND
50648: PUSH
50649: LD_VAR 0 5
50653: PPUSH
50654: LD_INT 3
50656: PPUSH
50657: CALL_OW 275
50661: PUSH
50662: LD_VAR 0 4
50666: PUSH
50667: LD_INT 3
50669: ARRAY
50670: GREATEREQUAL
50671: AND
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 3
50677: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50678: LD_INT 0
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
// pom := GetBase ( building ) ;
50684: LD_ADDR_VAR 0 3
50688: PUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 274
50698: ST_TO_ADDR
// if not pom then
50699: LD_VAR 0 3
50703: NOT
50704: IFFALSE 50708
// exit ;
50706: GO 50878
// btype := GetBType ( building ) ;
50708: LD_ADDR_VAR 0 5
50712: PUSH
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 266
50722: ST_TO_ADDR
// if btype = b_armoury then
50723: LD_VAR 0 5
50727: PUSH
50728: LD_INT 4
50730: EQUAL
50731: IFFALSE 50741
// btype := b_barracks ;
50733: LD_ADDR_VAR 0 5
50737: PUSH
50738: LD_INT 5
50740: ST_TO_ADDR
// if btype = b_depot then
50741: LD_VAR 0 5
50745: PUSH
50746: LD_INT 0
50748: EQUAL
50749: IFFALSE 50759
// btype := b_warehouse ;
50751: LD_ADDR_VAR 0 5
50755: PUSH
50756: LD_INT 1
50758: ST_TO_ADDR
// if btype = b_workshop then
50759: LD_VAR 0 5
50763: PUSH
50764: LD_INT 2
50766: EQUAL
50767: IFFALSE 50777
// btype := b_factory ;
50769: LD_ADDR_VAR 0 5
50773: PUSH
50774: LD_INT 3
50776: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50777: LD_ADDR_VAR 0 4
50781: PUSH
50782: LD_VAR 0 5
50786: PPUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: CALL_OW 248
50796: PPUSH
50797: CALL_OW 450
50801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50802: LD_ADDR_VAR 0 2
50806: PUSH
50807: LD_VAR 0 3
50811: PPUSH
50812: LD_INT 1
50814: PPUSH
50815: CALL_OW 275
50819: PUSH
50820: LD_VAR 0 4
50824: PUSH
50825: LD_INT 1
50827: ARRAY
50828: GREATEREQUAL
50829: PUSH
50830: LD_VAR 0 3
50834: PPUSH
50835: LD_INT 2
50837: PPUSH
50838: CALL_OW 275
50842: PUSH
50843: LD_VAR 0 4
50847: PUSH
50848: LD_INT 2
50850: ARRAY
50851: GREATEREQUAL
50852: AND
50853: PUSH
50854: LD_VAR 0 3
50858: PPUSH
50859: LD_INT 3
50861: PPUSH
50862: CALL_OW 275
50866: PUSH
50867: LD_VAR 0 4
50871: PUSH
50872: LD_INT 3
50874: ARRAY
50875: GREATEREQUAL
50876: AND
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 2
50882: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50883: LD_INT 0
50885: PPUSH
50886: PPUSH
50887: PPUSH
// pom := GetBase ( building ) ;
50888: LD_ADDR_VAR 0 4
50892: PUSH
50893: LD_VAR 0 1
50897: PPUSH
50898: CALL_OW 274
50902: ST_TO_ADDR
// if not pom then
50903: LD_VAR 0 4
50907: NOT
50908: IFFALSE 50912
// exit ;
50910: GO 51013
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50912: LD_ADDR_VAR 0 5
50916: PUSH
50917: LD_VAR 0 2
50921: PPUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 248
50931: PPUSH
50932: CALL_OW 450
50936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50937: LD_ADDR_VAR 0 3
50941: PUSH
50942: LD_VAR 0 4
50946: PPUSH
50947: LD_INT 1
50949: PPUSH
50950: CALL_OW 275
50954: PUSH
50955: LD_VAR 0 5
50959: PUSH
50960: LD_INT 1
50962: ARRAY
50963: GREATEREQUAL
50964: PUSH
50965: LD_VAR 0 4
50969: PPUSH
50970: LD_INT 2
50972: PPUSH
50973: CALL_OW 275
50977: PUSH
50978: LD_VAR 0 5
50982: PUSH
50983: LD_INT 2
50985: ARRAY
50986: GREATEREQUAL
50987: AND
50988: PUSH
50989: LD_VAR 0 4
50993: PPUSH
50994: LD_INT 3
50996: PPUSH
50997: CALL_OW 275
51001: PUSH
51002: LD_VAR 0 5
51006: PUSH
51007: LD_INT 3
51009: ARRAY
51010: GREATEREQUAL
51011: AND
51012: ST_TO_ADDR
// end ;
51013: LD_VAR 0 3
51017: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
51018: LD_INT 0
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
51026: PPUSH
51027: PPUSH
51028: PPUSH
51029: PPUSH
// result := false ;
51030: LD_ADDR_VAR 0 6
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// if not base or not btype or not x or not y then
51038: LD_VAR 0 1
51042: NOT
51043: PUSH
51044: LD_VAR 0 2
51048: NOT
51049: OR
51050: PUSH
51051: LD_VAR 0 3
51055: NOT
51056: OR
51057: PUSH
51058: LD_VAR 0 4
51062: NOT
51063: OR
51064: IFFALSE 51068
// exit ;
51066: GO 51582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
51068: LD_ADDR_VAR 0 12
51072: PUSH
51073: LD_VAR 0 2
51077: PPUSH
51078: LD_VAR 0 3
51082: PPUSH
51083: LD_VAR 0 4
51087: PPUSH
51088: LD_VAR 0 5
51092: PPUSH
51093: LD_VAR 0 1
51097: PUSH
51098: LD_INT 1
51100: ARRAY
51101: PPUSH
51102: CALL_OW 248
51106: PPUSH
51107: LD_INT 0
51109: PPUSH
51110: CALL 52411 0 6
51114: ST_TO_ADDR
// if not hexes then
51115: LD_VAR 0 12
51119: NOT
51120: IFFALSE 51124
// exit ;
51122: GO 51582
// for i = 1 to hexes do
51124: LD_ADDR_VAR 0 7
51128: PUSH
51129: DOUBLE
51130: LD_INT 1
51132: DEC
51133: ST_TO_ADDR
51134: LD_VAR 0 12
51138: PUSH
51139: FOR_TO
51140: IFFALSE 51580
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51142: LD_ADDR_VAR 0 11
51146: PUSH
51147: LD_VAR 0 12
51151: PUSH
51152: LD_VAR 0 7
51156: ARRAY
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: PPUSH
51162: LD_VAR 0 12
51166: PUSH
51167: LD_VAR 0 7
51171: ARRAY
51172: PUSH
51173: LD_INT 2
51175: ARRAY
51176: PPUSH
51177: CALL_OW 428
51181: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
51182: LD_VAR 0 11
51186: NOT
51187: PUSH
51188: LD_VAR 0 11
51192: PPUSH
51193: CALL_OW 247
51197: PUSH
51198: LD_INT 3
51200: EQUAL
51201: OR
51202: IFFALSE 51206
// continue ;
51204: GO 51139
// result := true ;
51206: LD_ADDR_VAR 0 6
51210: PUSH
51211: LD_INT 1
51213: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51214: LD_ADDR_VAR 0 15
51218: PUSH
51219: LD_INT 22
51221: PUSH
51222: LD_VAR 0 11
51226: PPUSH
51227: CALL_OW 255
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 30
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 30
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PPUSH
51268: CALL_OW 69
51272: ST_TO_ADDR
// if dep then
51273: LD_VAR 0 15
51277: IFFALSE 51413
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51279: LD_ADDR_VAR 0 14
51283: PUSH
51284: LD_VAR 0 15
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: CALL_OW 250
51297: PPUSH
51298: LD_VAR 0 15
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PPUSH
51307: CALL_OW 254
51311: PPUSH
51312: LD_INT 5
51314: PPUSH
51315: CALL_OW 272
51319: PUSH
51320: LD_VAR 0 15
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PPUSH
51329: CALL_OW 251
51333: PPUSH
51334: LD_VAR 0 15
51338: PUSH
51339: LD_INT 1
51341: ARRAY
51342: PPUSH
51343: CALL_OW 254
51347: PPUSH
51348: LD_INT 5
51350: PPUSH
51351: CALL_OW 273
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51360: LD_VAR 0 14
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 14
51373: PUSH
51374: LD_INT 2
51376: ARRAY
51377: PPUSH
51378: CALL_OW 488
51382: IFFALSE 51413
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51384: LD_VAR 0 11
51388: PPUSH
51389: LD_VAR 0 14
51393: PUSH
51394: LD_INT 1
51396: ARRAY
51397: PPUSH
51398: LD_VAR 0 14
51402: PUSH
51403: LD_INT 2
51405: ARRAY
51406: PPUSH
51407: CALL_OW 111
// continue ;
51411: GO 51139
// end ; end ; r := GetDir ( tmp ) ;
51413: LD_ADDR_VAR 0 13
51417: PUSH
51418: LD_VAR 0 11
51422: PPUSH
51423: CALL_OW 254
51427: ST_TO_ADDR
// if r = 5 then
51428: LD_VAR 0 13
51432: PUSH
51433: LD_INT 5
51435: EQUAL
51436: IFFALSE 51446
// r := 0 ;
51438: LD_ADDR_VAR 0 13
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// for j = r to 5 do
51446: LD_ADDR_VAR 0 8
51450: PUSH
51451: DOUBLE
51452: LD_VAR 0 13
51456: DEC
51457: ST_TO_ADDR
51458: LD_INT 5
51460: PUSH
51461: FOR_TO
51462: IFFALSE 51576
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51464: LD_ADDR_VAR 0 9
51468: PUSH
51469: LD_VAR 0 11
51473: PPUSH
51474: CALL_OW 250
51478: PPUSH
51479: LD_VAR 0 8
51483: PPUSH
51484: LD_INT 2
51486: PPUSH
51487: CALL_OW 272
51491: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51492: LD_ADDR_VAR 0 10
51496: PUSH
51497: LD_VAR 0 11
51501: PPUSH
51502: CALL_OW 251
51506: PPUSH
51507: LD_VAR 0 8
51511: PPUSH
51512: LD_INT 2
51514: PPUSH
51515: CALL_OW 273
51519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51520: LD_VAR 0 9
51524: PPUSH
51525: LD_VAR 0 10
51529: PPUSH
51530: CALL_OW 488
51534: PUSH
51535: LD_VAR 0 9
51539: PPUSH
51540: LD_VAR 0 10
51544: PPUSH
51545: CALL_OW 428
51549: NOT
51550: AND
51551: IFFALSE 51574
// begin ComMoveXY ( tmp , _x , _y ) ;
51553: LD_VAR 0 11
51557: PPUSH
51558: LD_VAR 0 9
51562: PPUSH
51563: LD_VAR 0 10
51567: PPUSH
51568: CALL_OW 111
// break ;
51572: GO 51576
// end ; end ;
51574: GO 51461
51576: POP
51577: POP
// end ;
51578: GO 51139
51580: POP
51581: POP
// end ;
51582: LD_VAR 0 6
51586: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
51587: LD_INT 0
51589: PPUSH
51590: PPUSH
51591: PPUSH
51592: PPUSH
51593: PPUSH
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
// result := false ;
51598: LD_ADDR_VAR 0 6
51602: PUSH
51603: LD_INT 0
51605: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51606: LD_VAR 0 1
51610: NOT
51611: PUSH
51612: LD_VAR 0 1
51616: PPUSH
51617: CALL_OW 266
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: IN
51632: NOT
51633: OR
51634: PUSH
51635: LD_VAR 0 2
51639: NOT
51640: OR
51641: PUSH
51642: LD_VAR 0 5
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: IN
51673: NOT
51674: OR
51675: PUSH
51676: LD_VAR 0 3
51680: PPUSH
51681: LD_VAR 0 4
51685: PPUSH
51686: CALL_OW 488
51690: NOT
51691: OR
51692: IFFALSE 51696
// exit ;
51694: GO 52406
// pom := GetBase ( bdepot ) ;
51696: LD_ADDR_VAR 0 9
51700: PUSH
51701: LD_VAR 0 1
51705: PPUSH
51706: CALL_OW 274
51710: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
51711: LD_ADDR_VAR 0 10
51715: PUSH
51716: LD_VAR 0 2
51720: PPUSH
51721: LD_VAR 0 1
51725: PPUSH
51726: CALL_OW 248
51730: PPUSH
51731: CALL_OW 450
51735: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51736: LD_VAR 0 9
51740: PPUSH
51741: LD_INT 1
51743: PPUSH
51744: CALL_OW 275
51748: PUSH
51749: LD_VAR 0 10
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: GREATEREQUAL
51758: PUSH
51759: LD_VAR 0 9
51763: PPUSH
51764: LD_INT 2
51766: PPUSH
51767: CALL_OW 275
51771: PUSH
51772: LD_VAR 0 10
51776: PUSH
51777: LD_INT 2
51779: ARRAY
51780: GREATEREQUAL
51781: AND
51782: PUSH
51783: LD_VAR 0 9
51787: PPUSH
51788: LD_INT 3
51790: PPUSH
51791: CALL_OW 275
51795: PUSH
51796: LD_VAR 0 10
51800: PUSH
51801: LD_INT 3
51803: ARRAY
51804: GREATEREQUAL
51805: AND
51806: NOT
51807: IFFALSE 51811
// exit ;
51809: GO 52406
// if GetBType ( bdepot ) = b_depot then
51811: LD_VAR 0 1
51815: PPUSH
51816: CALL_OW 266
51820: PUSH
51821: LD_INT 0
51823: EQUAL
51824: IFFALSE 51836
// dist := 28 else
51826: LD_ADDR_VAR 0 13
51830: PUSH
51831: LD_INT 28
51833: ST_TO_ADDR
51834: GO 51844
// dist := 36 ;
51836: LD_ADDR_VAR 0 13
51840: PUSH
51841: LD_INT 36
51843: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_VAR 0 3
51853: PPUSH
51854: LD_VAR 0 4
51858: PPUSH
51859: CALL_OW 297
51863: PUSH
51864: LD_VAR 0 13
51868: GREATER
51869: IFFALSE 51873
// exit ;
51871: GO 52406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
51873: LD_ADDR_VAR 0 11
51877: PUSH
51878: LD_VAR 0 2
51882: PPUSH
51883: LD_VAR 0 3
51887: PPUSH
51888: LD_VAR 0 4
51892: PPUSH
51893: LD_VAR 0 5
51897: PPUSH
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 248
51907: PPUSH
51908: LD_INT 0
51910: PPUSH
51911: CALL 52411 0 6
51915: ST_TO_ADDR
// if not hexes then
51916: LD_VAR 0 11
51920: NOT
51921: IFFALSE 51925
// exit ;
51923: GO 52406
// hex := GetHexInfo ( x , y ) ;
51925: LD_ADDR_VAR 0 14
51929: PUSH
51930: LD_VAR 0 3
51934: PPUSH
51935: LD_VAR 0 4
51939: PPUSH
51940: CALL_OW 546
51944: ST_TO_ADDR
// if hex [ 1 ] then
51945: LD_VAR 0 14
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: IFFALSE 51957
// exit ;
51955: GO 52406
// height := hex [ 2 ] ;
51957: LD_ADDR_VAR 0 12
51961: PUSH
51962: LD_VAR 0 14
51966: PUSH
51967: LD_INT 2
51969: ARRAY
51970: ST_TO_ADDR
// for i = 1 to hexes do
51971: LD_ADDR_VAR 0 7
51975: PUSH
51976: DOUBLE
51977: LD_INT 1
51979: DEC
51980: ST_TO_ADDR
51981: LD_VAR 0 11
51985: PUSH
51986: FOR_TO
51987: IFFALSE 52315
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51989: LD_VAR 0 11
51993: PUSH
51994: LD_VAR 0 7
51998: ARRAY
51999: PUSH
52000: LD_INT 1
52002: ARRAY
52003: PPUSH
52004: LD_VAR 0 11
52008: PUSH
52009: LD_VAR 0 7
52013: ARRAY
52014: PUSH
52015: LD_INT 2
52017: ARRAY
52018: PPUSH
52019: CALL_OW 488
52023: NOT
52024: IFFALSE 52028
// continue ;
52026: GO 51986
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52028: LD_ADDR_VAR 0 8
52032: PUSH
52033: LD_VAR 0 11
52037: PUSH
52038: LD_VAR 0 7
52042: ARRAY
52043: PUSH
52044: LD_INT 1
52046: ARRAY
52047: PPUSH
52048: LD_VAR 0 11
52052: PUSH
52053: LD_VAR 0 7
52057: ARRAY
52058: PUSH
52059: LD_INT 2
52061: ARRAY
52062: PPUSH
52063: CALL_OW 546
52067: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52068: LD_VAR 0 8
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PUSH
52077: LD_VAR 0 8
52081: PUSH
52082: LD_INT 2
52084: ARRAY
52085: PUSH
52086: LD_VAR 0 12
52090: PUSH
52091: LD_INT 2
52093: PLUS
52094: GREATER
52095: OR
52096: PUSH
52097: LD_VAR 0 8
52101: PUSH
52102: LD_INT 2
52104: ARRAY
52105: PUSH
52106: LD_VAR 0 12
52110: PUSH
52111: LD_INT 2
52113: MINUS
52114: LESS
52115: OR
52116: PUSH
52117: LD_VAR 0 8
52121: PUSH
52122: LD_INT 3
52124: ARRAY
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 8
52131: PUSH
52132: LD_INT 9
52134: PUSH
52135: LD_INT 10
52137: PUSH
52138: LD_INT 11
52140: PUSH
52141: LD_INT 12
52143: PUSH
52144: LD_INT 13
52146: PUSH
52147: LD_INT 16
52149: PUSH
52150: LD_INT 17
52152: PUSH
52153: LD_INT 18
52155: PUSH
52156: LD_INT 19
52158: PUSH
52159: LD_INT 20
52161: PUSH
52162: LD_INT 21
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: IN
52180: NOT
52181: OR
52182: PUSH
52183: LD_VAR 0 8
52187: PUSH
52188: LD_INT 5
52190: ARRAY
52191: NOT
52192: OR
52193: PUSH
52194: LD_VAR 0 8
52198: PUSH
52199: LD_INT 6
52201: ARRAY
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 7
52211: PUSH
52212: LD_INT 9
52214: PUSH
52215: LD_INT 10
52217: PUSH
52218: LD_INT 11
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: IN
52229: NOT
52230: OR
52231: PUSH
52232: LD_VAR 0 11
52236: PUSH
52237: LD_VAR 0 7
52241: ARRAY
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: PPUSH
52247: LD_VAR 0 11
52251: PUSH
52252: LD_VAR 0 7
52256: ARRAY
52257: PUSH
52258: LD_INT 2
52260: ARRAY
52261: PPUSH
52262: CALL_OW 428
52266: PUSH
52267: LD_INT 0
52269: GREATER
52270: OR
52271: PUSH
52272: LD_VAR 0 11
52276: PUSH
52277: LD_VAR 0 7
52281: ARRAY
52282: PUSH
52283: LD_INT 1
52285: ARRAY
52286: PPUSH
52287: LD_VAR 0 11
52291: PUSH
52292: LD_VAR 0 7
52296: ARRAY
52297: PUSH
52298: LD_INT 2
52300: ARRAY
52301: PPUSH
52302: CALL_OW 351
52306: OR
52307: IFFALSE 52313
// exit ;
52309: POP
52310: POP
52311: GO 52406
// end ;
52313: GO 51986
52315: POP
52316: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 255
52326: PPUSH
52327: LD_VAR 0 3
52331: PPUSH
52332: LD_VAR 0 4
52336: PPUSH
52337: LD_INT 20
52339: PPUSH
52340: CALL 45293 0 4
52344: PUSH
52345: LD_INT 4
52347: ARRAY
52348: IFFALSE 52352
// exit ;
52350: GO 52406
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
52352: LD_VAR 0 2
52356: PUSH
52357: LD_INT 29
52359: PUSH
52360: LD_INT 30
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: IN
52367: PUSH
52368: LD_VAR 0 3
52372: PPUSH
52373: LD_VAR 0 4
52377: PPUSH
52378: LD_VAR 0 1
52382: PPUSH
52383: CALL_OW 255
52387: PPUSH
52388: CALL_OW 440
52392: NOT
52393: AND
52394: IFFALSE 52398
// exit ;
52396: GO 52406
// result := true ;
52398: LD_ADDR_VAR 0 6
52402: PUSH
52403: LD_INT 1
52405: ST_TO_ADDR
// end ;
52406: LD_VAR 0 6
52410: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
52411: LD_INT 0
52413: PPUSH
52414: PPUSH
52415: PPUSH
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
52420: PPUSH
52421: PPUSH
52422: PPUSH
52423: PPUSH
52424: PPUSH
52425: PPUSH
52426: PPUSH
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
52444: PPUSH
52445: PPUSH
52446: PPUSH
52447: PPUSH
52448: PPUSH
52449: PPUSH
52450: PPUSH
52451: PPUSH
52452: PPUSH
52453: PPUSH
52454: PPUSH
52455: PPUSH
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
52462: PPUSH
52463: PPUSH
52464: PPUSH
52465: PPUSH
52466: PPUSH
52467: PPUSH
52468: PPUSH
52469: PPUSH
52470: PPUSH
// result = [ ] ;
52471: LD_ADDR_VAR 0 7
52475: PUSH
52476: EMPTY
52477: ST_TO_ADDR
// temp_list = [ ] ;
52478: LD_ADDR_VAR 0 9
52482: PUSH
52483: EMPTY
52484: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52485: LD_VAR 0 4
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: LD_INT 4
52504: PUSH
52505: LD_INT 5
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: IN
52516: NOT
52517: PUSH
52518: LD_VAR 0 1
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: IN
52533: PUSH
52534: LD_VAR 0 5
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: IN
52553: NOT
52554: AND
52555: OR
52556: IFFALSE 52560
// exit ;
52558: GO 70945
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52560: LD_VAR 0 1
52564: PUSH
52565: LD_INT 6
52567: PUSH
52568: LD_INT 7
52570: PUSH
52571: LD_INT 8
52573: PUSH
52574: LD_INT 13
52576: PUSH
52577: LD_INT 12
52579: PUSH
52580: LD_INT 15
52582: PUSH
52583: LD_INT 11
52585: PUSH
52586: LD_INT 14
52588: PUSH
52589: LD_INT 10
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: IN
52603: IFFALSE 52613
// btype = b_lab ;
52605: LD_ADDR_VAR 0 1
52609: PUSH
52610: LD_INT 6
52612: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52613: LD_VAR 0 6
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: IN
52632: NOT
52633: PUSH
52634: LD_VAR 0 1
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 6
52653: PUSH
52654: LD_INT 36
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: LD_INT 5
52662: PUSH
52663: LD_INT 31
52665: PUSH
52666: LD_INT 32
52668: PUSH
52669: LD_INT 33
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: IN
52685: NOT
52686: PUSH
52687: LD_VAR 0 6
52691: PUSH
52692: LD_INT 1
52694: EQUAL
52695: AND
52696: OR
52697: PUSH
52698: LD_VAR 0 1
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: IN
52713: NOT
52714: PUSH
52715: LD_VAR 0 6
52719: PUSH
52720: LD_INT 2
52722: EQUAL
52723: AND
52724: OR
52725: IFFALSE 52735
// mode = 0 ;
52727: LD_ADDR_VAR 0 6
52731: PUSH
52732: LD_INT 0
52734: ST_TO_ADDR
// case mode of 0 :
52735: LD_VAR 0 6
52739: PUSH
52740: LD_INT 0
52742: DOUBLE
52743: EQUAL
52744: IFTRUE 52748
52746: GO 64201
52748: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52749: LD_ADDR_VAR 0 11
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52942: LD_ADDR_VAR 0 12
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53138: LD_ADDR_VAR 0 13
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53337: LD_ADDR_VAR 0 14
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53533: LD_ADDR_VAR 0 15
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53726: LD_ADDR_VAR 0 16
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53919: LD_ADDR_VAR 0 17
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54149: LD_ADDR_VAR 0 18
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 19
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54609: LD_ADDR_VAR 0 20
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54839: LD_ADDR_VAR 0 21
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55069: LD_ADDR_VAR 0 22
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55299: LD_ADDR_VAR 0 23
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55579: LD_ADDR_VAR 0 24
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55855: LD_ADDR_VAR 0 25
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56129: LD_ADDR_VAR 0 26
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56405: LD_ADDR_VAR 0 27
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56685: LD_ADDR_VAR 0 28
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56967: LD_ADDR_VAR 0 29
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57246: LD_ADDR_VAR 0 30
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57524: LD_ADDR_VAR 0 31
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57802: LD_ADDR_VAR 0 32
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 2
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58080: LD_ADDR_VAR 0 33
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58359: LD_ADDR_VAR 0 34
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58639: LD_ADDR_VAR 0 35
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58751: LD_ADDR_VAR 0 36
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58863: LD_ADDR_VAR 0 37
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58975: LD_ADDR_VAR 0 38
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59087: LD_ADDR_VAR 0 39
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59199: LD_ADDR_VAR 0 40
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59311: LD_ADDR_VAR 0 41
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59661: LD_ADDR_VAR 0 42
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60011: LD_ADDR_VAR 0 43
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 3
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60359: LD_ADDR_VAR 0 44
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60709: LD_ADDR_VAR 0 45
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 3
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61059: LD_ADDR_VAR 0 46
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61407: LD_ADDR_VAR 0 47
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61558: LD_ADDR_VAR 0 48
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61705: LD_ADDR_VAR 0 49
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61849: LD_ADDR_VAR 0 50
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61993: LD_ADDR_VAR 0 51
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62140: LD_ADDR_VAR 0 52
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 2
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62291: LD_ADDR_VAR 0 53
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62521: LD_ADDR_VAR 0 54
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62751: LD_ADDR_VAR 0 55
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62981: LD_ADDR_VAR 0 56
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63211: LD_ADDR_VAR 0 57
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63441: LD_ADDR_VAR 0 58
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63671: LD_ADDR_VAR 0 59
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63759: LD_ADDR_VAR 0 60
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63847: LD_ADDR_VAR 0 61
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63935: LD_ADDR_VAR 0 62
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64023: LD_ADDR_VAR 0 63
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64111: LD_ADDR_VAR 0 64
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: ST_TO_ADDR
// end ; 1 :
64199: GO 70096
64201: LD_INT 1
64203: DOUBLE
64204: EQUAL
64205: IFTRUE 64209
64207: GO 66832
64209: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64210: LD_ADDR_VAR 0 11
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 3
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: LIST
64253: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64254: LD_ADDR_VAR 0 12
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64295: LD_ADDR_VAR 0 13
64299: PUSH
64300: LD_INT 3
64302: PUSH
64303: LD_INT 2
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: PUSH
64313: LD_INT 3
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64335: LD_ADDR_VAR 0 14
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64376: LD_ADDR_VAR 0 15
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 3
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64420: LD_ADDR_VAR 0 16
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: NEG
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64466: LD_ADDR_VAR 0 17
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 3
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 3
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64510: LD_ADDR_VAR 0 18
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64551: LD_ADDR_VAR 0 19
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64591: LD_ADDR_VAR 0 20
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 3
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: LIST
64631: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64632: LD_ADDR_VAR 0 21
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: NEG
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64676: LD_ADDR_VAR 0 22
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: NEG
64696: PUSH
64697: LD_INT 2
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64722: LD_ADDR_VAR 0 23
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 4
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 3
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64766: LD_ADDR_VAR 0 24
64770: PUSH
64771: LD_INT 3
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 4
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64807: LD_ADDR_VAR 0 25
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 4
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: LD_INT 4
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64847: LD_ADDR_VAR 0 26
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 4
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64888: LD_ADDR_VAR 0 27
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 4
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64932: LD_ADDR_VAR 0 28
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: NEG
64952: PUSH
64953: LD_INT 4
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: NEG
64964: PUSH
64965: LD_INT 3
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64978: LD_ADDR_VAR 0 29
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 3
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 3
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 4
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 4
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 3
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 5
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 5
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: LD_INT 4
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 6
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 6
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: LD_INT 5
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65133: LD_ADDR_VAR 0 30
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 3
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 3
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 4
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 5
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 5
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 5
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 6
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 6
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65276: LD_ADDR_VAR 0 31
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 3
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 4
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: LD_INT 4
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 5
65343: PUSH
65344: LD_INT 4
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 5
65353: PUSH
65354: LD_INT 5
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 4
65363: PUSH
65364: LD_INT 5
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 6
65373: PUSH
65374: LD_INT 5
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 6
65383: PUSH
65384: LD_INT 6
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: LD_INT 6
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65415: LD_ADDR_VAR 0 32
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: LD_INT 4
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 4
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: LD_INT 5
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 5
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 6
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 6
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 5
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65558: LD_ADDR_VAR 0 33
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 4
65610: NEG
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 4
65621: NEG
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 4
65633: NEG
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 5
65644: NEG
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 5
65655: NEG
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 5
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 6
65678: NEG
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 6
65689: NEG
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65713: LD_ADDR_VAR 0 34
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: LD_INT 3
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 3
65744: NEG
65745: PUSH
65746: LD_INT 3
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: LD_INT 4
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 4
65768: NEG
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 4
65780: NEG
65781: PUSH
65782: LD_INT 4
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 4
65792: NEG
65793: PUSH
65794: LD_INT 5
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 5
65804: NEG
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 5
65816: NEG
65817: PUSH
65818: LD_INT 5
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 5
65828: NEG
65829: PUSH
65830: LD_INT 6
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 6
65840: NEG
65841: PUSH
65842: LD_INT 5
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 6
65852: NEG
65853: PUSH
65854: LD_INT 6
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65876: LD_ADDR_VAR 0 41
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65920: LD_ADDR_VAR 0 42
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 2
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65961: LD_ADDR_VAR 0 43
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: LIST
66000: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66001: LD_ADDR_VAR 0 44
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: LIST
66041: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66042: LD_ADDR_VAR 0 45
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: NEG
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66086: LD_ADDR_VAR 0 46
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: LD_INT 3
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66132: LD_ADDR_VAR 0 47
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66165: LD_ADDR_VAR 0 48
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66196: LD_ADDR_VAR 0 49
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66225: LD_ADDR_VAR 0 50
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 3
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66254: LD_ADDR_VAR 0 51
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66285: LD_ADDR_VAR 0 52
66289: PUSH
66290: LD_INT 3
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66318: LD_ADDR_VAR 0 53
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: LD_INT 3
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 3
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66362: LD_ADDR_VAR 0 54
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66403: LD_ADDR_VAR 0 55
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66443: LD_ADDR_VAR 0 56
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 0
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66484: LD_ADDR_VAR 0 57
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 3
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66528: LD_ADDR_VAR 0 58
66532: PUSH
66533: LD_INT 2
66535: NEG
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 3
66547: NEG
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66574: LD_ADDR_VAR 0 59
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66618: LD_ADDR_VAR 0 60
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66659: LD_ADDR_VAR 0 61
66663: PUSH
66664: LD_INT 2
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66699: LD_ADDR_VAR 0 62
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: LIST
66739: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66740: LD_ADDR_VAR 0 63
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: LIST
66783: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66784: LD_ADDR_VAR 0 64
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// end ; 2 :
66830: GO 70096
66832: LD_INT 2
66834: DOUBLE
66835: EQUAL
66836: IFTRUE 66840
66838: GO 70095
66840: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66841: LD_ADDR_VAR 0 29
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 4
66858: PUSH
66859: LD_INT 1
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 5
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 4
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 3
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 3
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: LD_INT 2
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 4
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 4
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 2
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 4
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 4
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 5
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 5
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: LD_INT 5
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 3
67124: NEG
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 4
67180: NEG
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 4
67191: NEG
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: NEG
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: LD_INT 4
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: LD_INT 5
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: NEG
67251: PUSH
67252: LD_INT 4
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 4
67274: NEG
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 5
67286: NEG
67287: PUSH
67288: LD_INT 4
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 5
67298: NEG
67299: PUSH
67300: LD_INT 5
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 3
67310: NEG
67311: PUSH
67312: LD_INT 5
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 5
67322: NEG
67323: PUSH
67324: LD_INT 3
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67379: LD_ADDR_VAR 0 30
67383: PUSH
67384: LD_INT 4
67386: PUSH
67387: LD_INT 4
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 4
67396: PUSH
67397: LD_INT 3
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 5
67406: PUSH
67407: LD_INT 4
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 5
67416: PUSH
67417: LD_INT 5
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: PUSH
67427: LD_INT 5
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 5
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: LD_INT 5
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: LD_INT 3
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: LD_INT 4
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: LD_INT 4
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: NEG
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 2
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 3
67592: NEG
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 4
67614: NEG
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 5
67625: NEG
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 5
67636: NEG
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 5
67648: NEG
67649: PUSH
67650: LD_INT 2
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: LD_INT 3
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: NEG
67684: PUSH
67685: LD_INT 4
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: NEG
67696: PUSH
67697: LD_INT 3
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: NEG
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 4
67743: NEG
67744: PUSH
67745: LD_INT 4
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: LD_INT 4
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 4
67767: NEG
67768: PUSH
67769: LD_INT 2
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: LD_INT 4
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 5
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 4
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 3
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: LD_INT 4
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: LD_INT 5
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: LD_INT 3
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 2
67869: NEG
67870: PUSH
67871: LD_INT 5
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67926: LD_ADDR_VAR 0 31
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 3
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: LD_INT 4
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: LD_INT 5
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: LD_INT 4
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: LD_INT 5
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: LD_INT 1
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 4
68082: NEG
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 4
68093: NEG
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 4
68105: NEG
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: NEG
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: NEG
68141: PUSH
68142: LD_INT 5
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: NEG
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 4
68176: NEG
68177: PUSH
68178: LD_INT 3
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 5
68188: NEG
68189: PUSH
68190: LD_INT 4
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 5
68200: NEG
68201: PUSH
68202: LD_INT 5
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: LD_INT 5
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: LD_INT 3
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: LD_INT 3
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: LD_INT 2
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 2
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 4
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 4
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 5
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 4
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: LD_INT 2
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 5
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68476: LD_ADDR_VAR 0 32
68480: PUSH
68481: LD_INT 4
68483: NEG
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 4
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 5
68539: NEG
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 5
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 5
68562: NEG
68563: PUSH
68564: LD_INT 2
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 3
68585: NEG
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: LD_INT 4
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 4
68645: NEG
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 4
68657: NEG
68658: PUSH
68659: LD_INT 4
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: LD_INT 4
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 4
68681: NEG
68682: PUSH
68683: LD_INT 2
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 4
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 4
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 3
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: LD_INT 5
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 2
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 2
68783: NEG
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 3
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 4
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 4
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 4
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 5
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 5
68918: PUSH
68919: LD_INT 5
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 4
68928: PUSH
68929: LD_INT 5
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: PUSH
68939: LD_INT 4
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 3
68948: PUSH
68949: LD_INT 3
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 5
68958: PUSH
68959: LD_INT 3
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: PUSH
68969: LD_INT 5
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69023: LD_ADDR_VAR 0 33
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: LD_INT 5
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: NEG
69067: PUSH
69068: LD_INT 3
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 5
69090: NEG
69091: PUSH
69092: LD_INT 4
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 5
69102: NEG
69103: PUSH
69104: LD_INT 5
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 3
69114: NEG
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 5
69126: NEG
69127: PUSH
69128: LD_INT 3
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 4
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 2
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 0
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 1
69193: NEG
69194: PUSH
69195: LD_INT 3
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: LD_INT 4
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 2
69217: PUSH
69218: LD_INT 2
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PUSH
69230: LD_INT 4
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 4
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 4
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 5
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 5
69271: PUSH
69272: LD_INT 1
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: LD_INT 1
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: LD_INT 1
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 5
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: LD_INT 2
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 4
69353: PUSH
69354: LD_INT 3
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 4
69363: PUSH
69364: LD_INT 4
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: LD_INT 4
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 4
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: PUSH
69414: LD_INT 4
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: LD_INT 4
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 3
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: LD_INT 4
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 1
69453: PUSH
69454: LD_INT 5
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: LD_INT 5
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 1
69484: NEG
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: LD_INT 5
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69561: LD_ADDR_VAR 0 34
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 4
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 5
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 3
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 3
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: LD_INT 4
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: LD_INT 5
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 2
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: LD_INT 5
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 4
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 1
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 2
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 4
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 4
69763: PUSH
69764: LD_INT 4
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 4
69773: PUSH
69774: LD_INT 3
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 5
69783: PUSH
69784: LD_INT 4
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: PUSH
69794: LD_INT 5
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: LD_INT 5
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: LD_INT 4
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: LD_INT 3
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 5
69833: PUSH
69834: LD_INT 3
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: LD_INT 5
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: LD_INT 3
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: LD_INT 2
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: LD_INT 3
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 1
69883: PUSH
69884: LD_INT 4
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 4
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: LD_INT 4
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 2
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 4
69946: NEG
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 4
69957: NEG
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 4
69991: NEG
69992: PUSH
69993: LD_INT 1
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 5
70002: NEG
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 5
70013: NEG
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 5
70025: NEG
70026: PUSH
70027: LD_INT 2
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 3
70037: NEG
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// end ; end ;
70093: GO 70096
70095: POP
// case btype of b_depot , b_warehouse :
70096: LD_VAR 0 1
70100: PUSH
70101: LD_INT 0
70103: DOUBLE
70104: EQUAL
70105: IFTRUE 70115
70107: LD_INT 1
70109: DOUBLE
70110: EQUAL
70111: IFTRUE 70115
70113: GO 70316
70115: POP
// case nation of nation_american :
70116: LD_VAR 0 5
70120: PUSH
70121: LD_INT 1
70123: DOUBLE
70124: EQUAL
70125: IFTRUE 70129
70127: GO 70185
70129: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
70130: LD_ADDR_VAR 0 9
70134: PUSH
70135: LD_VAR 0 11
70139: PUSH
70140: LD_VAR 0 12
70144: PUSH
70145: LD_VAR 0 13
70149: PUSH
70150: LD_VAR 0 14
70154: PUSH
70155: LD_VAR 0 15
70159: PUSH
70160: LD_VAR 0 16
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: PUSH
70173: LD_VAR 0 4
70177: PUSH
70178: LD_INT 1
70180: PLUS
70181: ARRAY
70182: ST_TO_ADDR
70183: GO 70314
70185: LD_INT 2
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70193
70191: GO 70249
70193: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
70194: LD_ADDR_VAR 0 9
70198: PUSH
70199: LD_VAR 0 17
70203: PUSH
70204: LD_VAR 0 18
70208: PUSH
70209: LD_VAR 0 19
70213: PUSH
70214: LD_VAR 0 20
70218: PUSH
70219: LD_VAR 0 21
70223: PUSH
70224: LD_VAR 0 22
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: PUSH
70237: LD_VAR 0 4
70241: PUSH
70242: LD_INT 1
70244: PLUS
70245: ARRAY
70246: ST_TO_ADDR
70247: GO 70314
70249: LD_INT 3
70251: DOUBLE
70252: EQUAL
70253: IFTRUE 70257
70255: GO 70313
70257: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70258: LD_ADDR_VAR 0 9
70262: PUSH
70263: LD_VAR 0 23
70267: PUSH
70268: LD_VAR 0 24
70272: PUSH
70273: LD_VAR 0 25
70277: PUSH
70278: LD_VAR 0 26
70282: PUSH
70283: LD_VAR 0 27
70287: PUSH
70288: LD_VAR 0 28
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: PUSH
70301: LD_VAR 0 4
70305: PUSH
70306: LD_INT 1
70308: PLUS
70309: ARRAY
70310: ST_TO_ADDR
70311: GO 70314
70313: POP
70314: GO 70863
70316: LD_INT 2
70318: DOUBLE
70319: EQUAL
70320: IFTRUE 70330
70322: LD_INT 3
70324: DOUBLE
70325: EQUAL
70326: IFTRUE 70330
70328: GO 70386
70330: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70331: LD_ADDR_VAR 0 9
70335: PUSH
70336: LD_VAR 0 29
70340: PUSH
70341: LD_VAR 0 30
70345: PUSH
70346: LD_VAR 0 31
70350: PUSH
70351: LD_VAR 0 32
70355: PUSH
70356: LD_VAR 0 33
70360: PUSH
70361: LD_VAR 0 34
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: PUSH
70374: LD_VAR 0 4
70378: PUSH
70379: LD_INT 1
70381: PLUS
70382: ARRAY
70383: ST_TO_ADDR
70384: GO 70863
70386: LD_INT 16
70388: DOUBLE
70389: EQUAL
70390: IFTRUE 70442
70392: LD_INT 17
70394: DOUBLE
70395: EQUAL
70396: IFTRUE 70442
70398: LD_INT 18
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70442
70404: LD_INT 19
70406: DOUBLE
70407: EQUAL
70408: IFTRUE 70442
70410: LD_INT 20
70412: DOUBLE
70413: EQUAL
70414: IFTRUE 70442
70416: LD_INT 21
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70442
70422: LD_INT 23
70424: DOUBLE
70425: EQUAL
70426: IFTRUE 70442
70428: LD_INT 24
70430: DOUBLE
70431: EQUAL
70432: IFTRUE 70442
70434: LD_INT 25
70436: DOUBLE
70437: EQUAL
70438: IFTRUE 70442
70440: GO 70498
70442: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70443: LD_ADDR_VAR 0 9
70447: PUSH
70448: LD_VAR 0 35
70452: PUSH
70453: LD_VAR 0 36
70457: PUSH
70458: LD_VAR 0 37
70462: PUSH
70463: LD_VAR 0 38
70467: PUSH
70468: LD_VAR 0 39
70472: PUSH
70473: LD_VAR 0 40
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: PUSH
70486: LD_VAR 0 4
70490: PUSH
70491: LD_INT 1
70493: PLUS
70494: ARRAY
70495: ST_TO_ADDR
70496: GO 70863
70498: LD_INT 6
70500: DOUBLE
70501: EQUAL
70502: IFTRUE 70554
70504: LD_INT 7
70506: DOUBLE
70507: EQUAL
70508: IFTRUE 70554
70510: LD_INT 8
70512: DOUBLE
70513: EQUAL
70514: IFTRUE 70554
70516: LD_INT 13
70518: DOUBLE
70519: EQUAL
70520: IFTRUE 70554
70522: LD_INT 12
70524: DOUBLE
70525: EQUAL
70526: IFTRUE 70554
70528: LD_INT 15
70530: DOUBLE
70531: EQUAL
70532: IFTRUE 70554
70534: LD_INT 11
70536: DOUBLE
70537: EQUAL
70538: IFTRUE 70554
70540: LD_INT 14
70542: DOUBLE
70543: EQUAL
70544: IFTRUE 70554
70546: LD_INT 10
70548: DOUBLE
70549: EQUAL
70550: IFTRUE 70554
70552: GO 70610
70554: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
70555: LD_ADDR_VAR 0 9
70559: PUSH
70560: LD_VAR 0 41
70564: PUSH
70565: LD_VAR 0 42
70569: PUSH
70570: LD_VAR 0 43
70574: PUSH
70575: LD_VAR 0 44
70579: PUSH
70580: LD_VAR 0 45
70584: PUSH
70585: LD_VAR 0 46
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: LD_VAR 0 4
70602: PUSH
70603: LD_INT 1
70605: PLUS
70606: ARRAY
70607: ST_TO_ADDR
70608: GO 70863
70610: LD_INT 36
70612: DOUBLE
70613: EQUAL
70614: IFTRUE 70618
70616: GO 70674
70618: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70619: LD_ADDR_VAR 0 9
70623: PUSH
70624: LD_VAR 0 47
70628: PUSH
70629: LD_VAR 0 48
70633: PUSH
70634: LD_VAR 0 49
70638: PUSH
70639: LD_VAR 0 50
70643: PUSH
70644: LD_VAR 0 51
70648: PUSH
70649: LD_VAR 0 52
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: PUSH
70662: LD_VAR 0 4
70666: PUSH
70667: LD_INT 1
70669: PLUS
70670: ARRAY
70671: ST_TO_ADDR
70672: GO 70863
70674: LD_INT 4
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70700
70680: LD_INT 5
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70700
70686: LD_INT 34
70688: DOUBLE
70689: EQUAL
70690: IFTRUE 70700
70692: LD_INT 37
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70700
70698: GO 70756
70700: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70701: LD_ADDR_VAR 0 9
70705: PUSH
70706: LD_VAR 0 53
70710: PUSH
70711: LD_VAR 0 54
70715: PUSH
70716: LD_VAR 0 55
70720: PUSH
70721: LD_VAR 0 56
70725: PUSH
70726: LD_VAR 0 57
70730: PUSH
70731: LD_VAR 0 58
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: LD_VAR 0 4
70748: PUSH
70749: LD_INT 1
70751: PLUS
70752: ARRAY
70753: ST_TO_ADDR
70754: GO 70863
70756: LD_INT 31
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70806
70762: LD_INT 32
70764: DOUBLE
70765: EQUAL
70766: IFTRUE 70806
70768: LD_INT 33
70770: DOUBLE
70771: EQUAL
70772: IFTRUE 70806
70774: LD_INT 27
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70806
70780: LD_INT 26
70782: DOUBLE
70783: EQUAL
70784: IFTRUE 70806
70786: LD_INT 28
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70806
70792: LD_INT 29
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70806
70798: LD_INT 30
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70806
70804: GO 70862
70806: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
70807: LD_ADDR_VAR 0 9
70811: PUSH
70812: LD_VAR 0 59
70816: PUSH
70817: LD_VAR 0 60
70821: PUSH
70822: LD_VAR 0 61
70826: PUSH
70827: LD_VAR 0 62
70831: PUSH
70832: LD_VAR 0 63
70836: PUSH
70837: LD_VAR 0 64
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: PUSH
70850: LD_VAR 0 4
70854: PUSH
70855: LD_INT 1
70857: PLUS
70858: ARRAY
70859: ST_TO_ADDR
70860: GO 70863
70862: POP
// temp_list2 = [ ] ;
70863: LD_ADDR_VAR 0 10
70867: PUSH
70868: EMPTY
70869: ST_TO_ADDR
// for i in temp_list do
70870: LD_ADDR_VAR 0 8
70874: PUSH
70875: LD_VAR 0 9
70879: PUSH
70880: FOR_IN
70881: IFFALSE 70933
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70883: LD_ADDR_VAR 0 10
70887: PUSH
70888: LD_VAR 0 10
70892: PUSH
70893: LD_VAR 0 8
70897: PUSH
70898: LD_INT 1
70900: ARRAY
70901: PUSH
70902: LD_VAR 0 2
70906: PLUS
70907: PUSH
70908: LD_VAR 0 8
70912: PUSH
70913: LD_INT 2
70915: ARRAY
70916: PUSH
70917: LD_VAR 0 3
70921: PLUS
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: EMPTY
70928: LIST
70929: ADD
70930: ST_TO_ADDR
70931: GO 70880
70933: POP
70934: POP
// result = temp_list2 ;
70935: LD_ADDR_VAR 0 7
70939: PUSH
70940: LD_VAR 0 10
70944: ST_TO_ADDR
// end ;
70945: LD_VAR 0 7
70949: RET
// export function EnemyInRange ( unit , dist ) ; begin
70950: LD_INT 0
70952: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70953: LD_ADDR_VAR 0 3
70957: PUSH
70958: LD_VAR 0 1
70962: PPUSH
70963: CALL_OW 255
70967: PPUSH
70968: LD_VAR 0 1
70972: PPUSH
70973: CALL_OW 250
70977: PPUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: CALL_OW 251
70987: PPUSH
70988: LD_VAR 0 2
70992: PPUSH
70993: CALL 45293 0 4
70997: PUSH
70998: LD_INT 4
71000: ARRAY
71001: ST_TO_ADDR
// end ;
71002: LD_VAR 0 3
71006: RET
// export function PlayerSeeMe ( unit ) ; begin
71007: LD_INT 0
71009: PPUSH
// result := See ( your_side , unit ) ;
71010: LD_ADDR_VAR 0 2
71014: PUSH
71015: LD_OWVAR 2
71019: PPUSH
71020: LD_VAR 0 1
71024: PPUSH
71025: CALL_OW 292
71029: ST_TO_ADDR
// end ;
71030: LD_VAR 0 2
71034: RET
// export function ReverseDir ( unit ) ; begin
71035: LD_INT 0
71037: PPUSH
// if not unit then
71038: LD_VAR 0 1
71042: NOT
71043: IFFALSE 71047
// exit ;
71045: GO 71093
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
71047: LD_ADDR_VAR 0 2
71051: PUSH
71052: LD_INT 3
71054: PUSH
71055: LD_INT 4
71057: PUSH
71058: LD_INT 5
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 1
71066: PUSH
71067: LD_INT 2
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: PUSH
71078: LD_VAR 0 1
71082: PPUSH
71083: CALL_OW 254
71087: PUSH
71088: LD_INT 1
71090: PLUS
71091: ARRAY
71092: ST_TO_ADDR
// end ;
71093: LD_VAR 0 2
71097: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71098: LD_INT 0
71100: PPUSH
71101: PPUSH
71102: PPUSH
71103: PPUSH
71104: PPUSH
// if not hexes then
71105: LD_VAR 0 2
71109: NOT
71110: IFFALSE 71114
// exit ;
71112: GO 71262
// dist := 9999 ;
71114: LD_ADDR_VAR 0 5
71118: PUSH
71119: LD_INT 9999
71121: ST_TO_ADDR
// for i = 1 to hexes do
71122: LD_ADDR_VAR 0 4
71126: PUSH
71127: DOUBLE
71128: LD_INT 1
71130: DEC
71131: ST_TO_ADDR
71132: LD_VAR 0 2
71136: PUSH
71137: FOR_TO
71138: IFFALSE 71250
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71140: LD_VAR 0 1
71144: PPUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_VAR 0 4
71154: ARRAY
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: PPUSH
71160: LD_VAR 0 2
71164: PUSH
71165: LD_VAR 0 4
71169: ARRAY
71170: PUSH
71171: LD_INT 2
71173: ARRAY
71174: PPUSH
71175: CALL_OW 297
71179: PUSH
71180: LD_VAR 0 5
71184: LESS
71185: IFFALSE 71248
// begin hex := hexes [ i ] ;
71187: LD_ADDR_VAR 0 7
71191: PUSH
71192: LD_VAR 0 2
71196: PUSH
71197: LD_VAR 0 4
71201: ARRAY
71202: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71203: LD_ADDR_VAR 0 5
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 4
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PPUSH
71228: LD_VAR 0 2
71232: PUSH
71233: LD_VAR 0 4
71237: ARRAY
71238: PUSH
71239: LD_INT 2
71241: ARRAY
71242: PPUSH
71243: CALL_OW 297
71247: ST_TO_ADDR
// end ; end ;
71248: GO 71137
71250: POP
71251: POP
// result := hex ;
71252: LD_ADDR_VAR 0 3
71256: PUSH
71257: LD_VAR 0 7
71261: ST_TO_ADDR
// end ;
71262: LD_VAR 0 3
71266: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71267: LD_INT 0
71269: PPUSH
71270: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71271: LD_VAR 0 1
71275: NOT
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: LD_INT 21
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 23
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PPUSH
71306: CALL_OW 69
71310: IN
71311: NOT
71312: OR
71313: IFFALSE 71317
// exit ;
71315: GO 71364
// for i = 1 to 3 do
71317: LD_ADDR_VAR 0 3
71321: PUSH
71322: DOUBLE
71323: LD_INT 1
71325: DEC
71326: ST_TO_ADDR
71327: LD_INT 3
71329: PUSH
71330: FOR_TO
71331: IFFALSE 71362
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71333: LD_VAR 0 1
71337: PPUSH
71338: CALL_OW 250
71342: PPUSH
71343: LD_VAR 0 1
71347: PPUSH
71348: CALL_OW 251
71352: PPUSH
71353: LD_INT 1
71355: PPUSH
71356: CALL_OW 453
71360: GO 71330
71362: POP
71363: POP
// end ;
71364: LD_VAR 0 2
71368: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71369: LD_INT 0
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
71375: PPUSH
71376: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71377: LD_VAR 0 1
71381: NOT
71382: PUSH
71383: LD_VAR 0 2
71387: NOT
71388: OR
71389: PUSH
71390: LD_VAR 0 1
71394: PPUSH
71395: CALL_OW 314
71399: OR
71400: IFFALSE 71404
// exit ;
71402: GO 71845
// x := GetX ( enemy_unit ) ;
71404: LD_ADDR_VAR 0 7
71408: PUSH
71409: LD_VAR 0 2
71413: PPUSH
71414: CALL_OW 250
71418: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71419: LD_ADDR_VAR 0 8
71423: PUSH
71424: LD_VAR 0 2
71428: PPUSH
71429: CALL_OW 251
71433: ST_TO_ADDR
// if not x or not y then
71434: LD_VAR 0 7
71438: NOT
71439: PUSH
71440: LD_VAR 0 8
71444: NOT
71445: OR
71446: IFFALSE 71450
// exit ;
71448: GO 71845
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71450: LD_ADDR_VAR 0 6
71454: PUSH
71455: LD_VAR 0 7
71459: PPUSH
71460: LD_INT 0
71462: PPUSH
71463: LD_INT 4
71465: PPUSH
71466: CALL_OW 272
71470: PUSH
71471: LD_VAR 0 8
71475: PPUSH
71476: LD_INT 0
71478: PPUSH
71479: LD_INT 4
71481: PPUSH
71482: CALL_OW 273
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_VAR 0 7
71495: PPUSH
71496: LD_INT 1
71498: PPUSH
71499: LD_INT 4
71501: PPUSH
71502: CALL_OW 272
71506: PUSH
71507: LD_VAR 0 8
71511: PPUSH
71512: LD_INT 1
71514: PPUSH
71515: LD_INT 4
71517: PPUSH
71518: CALL_OW 273
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_VAR 0 7
71531: PPUSH
71532: LD_INT 2
71534: PPUSH
71535: LD_INT 4
71537: PPUSH
71538: CALL_OW 272
71542: PUSH
71543: LD_VAR 0 8
71547: PPUSH
71548: LD_INT 2
71550: PPUSH
71551: LD_INT 4
71553: PPUSH
71554: CALL_OW 273
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_VAR 0 7
71567: PPUSH
71568: LD_INT 3
71570: PPUSH
71571: LD_INT 4
71573: PPUSH
71574: CALL_OW 272
71578: PUSH
71579: LD_VAR 0 8
71583: PPUSH
71584: LD_INT 3
71586: PPUSH
71587: LD_INT 4
71589: PPUSH
71590: CALL_OW 273
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_VAR 0 7
71603: PPUSH
71604: LD_INT 4
71606: PPUSH
71607: LD_INT 4
71609: PPUSH
71610: CALL_OW 272
71614: PUSH
71615: LD_VAR 0 8
71619: PPUSH
71620: LD_INT 4
71622: PPUSH
71623: LD_INT 4
71625: PPUSH
71626: CALL_OW 273
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_VAR 0 7
71639: PPUSH
71640: LD_INT 5
71642: PPUSH
71643: LD_INT 4
71645: PPUSH
71646: CALL_OW 272
71650: PUSH
71651: LD_VAR 0 8
71655: PPUSH
71656: LD_INT 5
71658: PPUSH
71659: LD_INT 4
71661: PPUSH
71662: CALL_OW 273
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: ST_TO_ADDR
// for i = tmp downto 1 do
71679: LD_ADDR_VAR 0 4
71683: PUSH
71684: DOUBLE
71685: LD_VAR 0 6
71689: INC
71690: ST_TO_ADDR
71691: LD_INT 1
71693: PUSH
71694: FOR_DOWNTO
71695: IFFALSE 71796
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71697: LD_VAR 0 6
71701: PUSH
71702: LD_VAR 0 4
71706: ARRAY
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PPUSH
71712: LD_VAR 0 6
71716: PUSH
71717: LD_VAR 0 4
71721: ARRAY
71722: PUSH
71723: LD_INT 2
71725: ARRAY
71726: PPUSH
71727: CALL_OW 488
71731: NOT
71732: PUSH
71733: LD_VAR 0 6
71737: PUSH
71738: LD_VAR 0 4
71742: ARRAY
71743: PUSH
71744: LD_INT 1
71746: ARRAY
71747: PPUSH
71748: LD_VAR 0 6
71752: PUSH
71753: LD_VAR 0 4
71757: ARRAY
71758: PUSH
71759: LD_INT 2
71761: ARRAY
71762: PPUSH
71763: CALL_OW 428
71767: PUSH
71768: LD_INT 0
71770: NONEQUAL
71771: OR
71772: IFFALSE 71794
// tmp := Delete ( tmp , i ) ;
71774: LD_ADDR_VAR 0 6
71778: PUSH
71779: LD_VAR 0 6
71783: PPUSH
71784: LD_VAR 0 4
71788: PPUSH
71789: CALL_OW 3
71793: ST_TO_ADDR
71794: GO 71694
71796: POP
71797: POP
// j := GetClosestHex ( unit , tmp ) ;
71798: LD_ADDR_VAR 0 5
71802: PUSH
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_VAR 0 6
71812: PPUSH
71813: CALL 71098 0 2
71817: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71818: LD_VAR 0 1
71822: PPUSH
71823: LD_VAR 0 5
71827: PUSH
71828: LD_INT 1
71830: ARRAY
71831: PPUSH
71832: LD_VAR 0 5
71836: PUSH
71837: LD_INT 2
71839: ARRAY
71840: PPUSH
71841: CALL_OW 111
// end ;
71845: LD_VAR 0 3
71849: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71850: LD_INT 0
71852: PPUSH
71853: PPUSH
71854: PPUSH
// uc_side = 0 ;
71855: LD_ADDR_OWVAR 20
71859: PUSH
71860: LD_INT 0
71862: ST_TO_ADDR
// uc_nation = 0 ;
71863: LD_ADDR_OWVAR 21
71867: PUSH
71868: LD_INT 0
71870: ST_TO_ADDR
// InitHc ;
71871: CALL_OW 19
// InitVc ;
71875: CALL_OW 20
// if mastodonts then
71879: LD_VAR 0 6
71883: IFFALSE 71950
// for i = 1 to mastodonts do
71885: LD_ADDR_VAR 0 11
71889: PUSH
71890: DOUBLE
71891: LD_INT 1
71893: DEC
71894: ST_TO_ADDR
71895: LD_VAR 0 6
71899: PUSH
71900: FOR_TO
71901: IFFALSE 71948
// begin vc_chassis := 31 ;
71903: LD_ADDR_OWVAR 37
71907: PUSH
71908: LD_INT 31
71910: ST_TO_ADDR
// vc_control := control_rider ;
71911: LD_ADDR_OWVAR 38
71915: PUSH
71916: LD_INT 4
71918: ST_TO_ADDR
// animal := CreateVehicle ;
71919: LD_ADDR_VAR 0 12
71923: PUSH
71924: CALL_OW 45
71928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71929: LD_VAR 0 12
71933: PPUSH
71934: LD_VAR 0 8
71938: PPUSH
71939: LD_INT 0
71941: PPUSH
71942: CALL 78656 0 3
// end ;
71946: GO 71900
71948: POP
71949: POP
// if horses then
71950: LD_VAR 0 5
71954: IFFALSE 72021
// for i = 1 to horses do
71956: LD_ADDR_VAR 0 11
71960: PUSH
71961: DOUBLE
71962: LD_INT 1
71964: DEC
71965: ST_TO_ADDR
71966: LD_VAR 0 5
71970: PUSH
71971: FOR_TO
71972: IFFALSE 72019
// begin hc_class := 21 ;
71974: LD_ADDR_OWVAR 28
71978: PUSH
71979: LD_INT 21
71981: ST_TO_ADDR
// hc_gallery :=  ;
71982: LD_ADDR_OWVAR 33
71986: PUSH
71987: LD_STRING 
71989: ST_TO_ADDR
// animal := CreateHuman ;
71990: LD_ADDR_VAR 0 12
71994: PUSH
71995: CALL_OW 44
71999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72000: LD_VAR 0 12
72004: PPUSH
72005: LD_VAR 0 8
72009: PPUSH
72010: LD_INT 0
72012: PPUSH
72013: CALL 78656 0 3
// end ;
72017: GO 71971
72019: POP
72020: POP
// if birds then
72021: LD_VAR 0 1
72025: IFFALSE 72092
// for i = 1 to birds do
72027: LD_ADDR_VAR 0 11
72031: PUSH
72032: DOUBLE
72033: LD_INT 1
72035: DEC
72036: ST_TO_ADDR
72037: LD_VAR 0 1
72041: PUSH
72042: FOR_TO
72043: IFFALSE 72090
// begin hc_class = 18 ;
72045: LD_ADDR_OWVAR 28
72049: PUSH
72050: LD_INT 18
72052: ST_TO_ADDR
// hc_gallery =  ;
72053: LD_ADDR_OWVAR 33
72057: PUSH
72058: LD_STRING 
72060: ST_TO_ADDR
// animal := CreateHuman ;
72061: LD_ADDR_VAR 0 12
72065: PUSH
72066: CALL_OW 44
72070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72071: LD_VAR 0 12
72075: PPUSH
72076: LD_VAR 0 8
72080: PPUSH
72081: LD_INT 0
72083: PPUSH
72084: CALL 78656 0 3
// end ;
72088: GO 72042
72090: POP
72091: POP
// if tigers then
72092: LD_VAR 0 2
72096: IFFALSE 72180
// for i = 1 to tigers do
72098: LD_ADDR_VAR 0 11
72102: PUSH
72103: DOUBLE
72104: LD_INT 1
72106: DEC
72107: ST_TO_ADDR
72108: LD_VAR 0 2
72112: PUSH
72113: FOR_TO
72114: IFFALSE 72178
// begin hc_class = class_tiger ;
72116: LD_ADDR_OWVAR 28
72120: PUSH
72121: LD_INT 14
72123: ST_TO_ADDR
// hc_gallery =  ;
72124: LD_ADDR_OWVAR 33
72128: PUSH
72129: LD_STRING 
72131: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72132: LD_ADDR_OWVAR 35
72136: PUSH
72137: LD_INT 7
72139: NEG
72140: PPUSH
72141: LD_INT 7
72143: PPUSH
72144: CALL_OW 12
72148: ST_TO_ADDR
// animal := CreateHuman ;
72149: LD_ADDR_VAR 0 12
72153: PUSH
72154: CALL_OW 44
72158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72159: LD_VAR 0 12
72163: PPUSH
72164: LD_VAR 0 8
72168: PPUSH
72169: LD_INT 0
72171: PPUSH
72172: CALL 78656 0 3
// end ;
72176: GO 72113
72178: POP
72179: POP
// if apemans then
72180: LD_VAR 0 3
72184: IFFALSE 72307
// for i = 1 to apemans do
72186: LD_ADDR_VAR 0 11
72190: PUSH
72191: DOUBLE
72192: LD_INT 1
72194: DEC
72195: ST_TO_ADDR
72196: LD_VAR 0 3
72200: PUSH
72201: FOR_TO
72202: IFFALSE 72305
// begin hc_class = class_apeman ;
72204: LD_ADDR_OWVAR 28
72208: PUSH
72209: LD_INT 12
72211: ST_TO_ADDR
// hc_gallery =  ;
72212: LD_ADDR_OWVAR 33
72216: PUSH
72217: LD_STRING 
72219: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72220: LD_ADDR_OWVAR 35
72224: PUSH
72225: LD_INT 5
72227: NEG
72228: PPUSH
72229: LD_INT 5
72231: PPUSH
72232: CALL_OW 12
72236: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72237: LD_ADDR_OWVAR 31
72241: PUSH
72242: LD_INT 1
72244: PPUSH
72245: LD_INT 3
72247: PPUSH
72248: CALL_OW 12
72252: PUSH
72253: LD_INT 1
72255: PPUSH
72256: LD_INT 3
72258: PPUSH
72259: CALL_OW 12
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: ST_TO_ADDR
// animal := CreateHuman ;
72276: LD_ADDR_VAR 0 12
72280: PUSH
72281: CALL_OW 44
72285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72286: LD_VAR 0 12
72290: PPUSH
72291: LD_VAR 0 8
72295: PPUSH
72296: LD_INT 0
72298: PPUSH
72299: CALL 78656 0 3
// end ;
72303: GO 72201
72305: POP
72306: POP
// if enchidnas then
72307: LD_VAR 0 4
72311: IFFALSE 72378
// for i = 1 to enchidnas do
72313: LD_ADDR_VAR 0 11
72317: PUSH
72318: DOUBLE
72319: LD_INT 1
72321: DEC
72322: ST_TO_ADDR
72323: LD_VAR 0 4
72327: PUSH
72328: FOR_TO
72329: IFFALSE 72376
// begin hc_class = 13 ;
72331: LD_ADDR_OWVAR 28
72335: PUSH
72336: LD_INT 13
72338: ST_TO_ADDR
// hc_gallery =  ;
72339: LD_ADDR_OWVAR 33
72343: PUSH
72344: LD_STRING 
72346: ST_TO_ADDR
// animal := CreateHuman ;
72347: LD_ADDR_VAR 0 12
72351: PUSH
72352: CALL_OW 44
72356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72357: LD_VAR 0 12
72361: PPUSH
72362: LD_VAR 0 8
72366: PPUSH
72367: LD_INT 0
72369: PPUSH
72370: CALL 78656 0 3
// end ;
72374: GO 72328
72376: POP
72377: POP
// if fishes then
72378: LD_VAR 0 7
72382: IFFALSE 72449
// for i = 1 to fishes do
72384: LD_ADDR_VAR 0 11
72388: PUSH
72389: DOUBLE
72390: LD_INT 1
72392: DEC
72393: ST_TO_ADDR
72394: LD_VAR 0 7
72398: PUSH
72399: FOR_TO
72400: IFFALSE 72447
// begin hc_class = 20 ;
72402: LD_ADDR_OWVAR 28
72406: PUSH
72407: LD_INT 20
72409: ST_TO_ADDR
// hc_gallery =  ;
72410: LD_ADDR_OWVAR 33
72414: PUSH
72415: LD_STRING 
72417: ST_TO_ADDR
// animal := CreateHuman ;
72418: LD_ADDR_VAR 0 12
72422: PUSH
72423: CALL_OW 44
72427: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72428: LD_VAR 0 12
72432: PPUSH
72433: LD_VAR 0 9
72437: PPUSH
72438: LD_INT 0
72440: PPUSH
72441: CALL 78656 0 3
// end ;
72445: GO 72399
72447: POP
72448: POP
// end ;
72449: LD_VAR 0 10
72453: RET
// export function WantHeal ( sci , unit ) ; begin
72454: LD_INT 0
72456: PPUSH
// if GetTaskList ( sci ) > 0 then
72457: LD_VAR 0 1
72461: PPUSH
72462: CALL_OW 437
72466: PUSH
72467: LD_INT 0
72469: GREATER
72470: IFFALSE 72540
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72472: LD_VAR 0 1
72476: PPUSH
72477: CALL_OW 437
72481: PUSH
72482: LD_INT 1
72484: ARRAY
72485: PUSH
72486: LD_INT 1
72488: ARRAY
72489: PUSH
72490: LD_STRING l
72492: EQUAL
72493: PUSH
72494: LD_VAR 0 1
72498: PPUSH
72499: CALL_OW 437
72503: PUSH
72504: LD_INT 1
72506: ARRAY
72507: PUSH
72508: LD_INT 4
72510: ARRAY
72511: PUSH
72512: LD_VAR 0 2
72516: EQUAL
72517: AND
72518: IFFALSE 72530
// result := true else
72520: LD_ADDR_VAR 0 3
72524: PUSH
72525: LD_INT 1
72527: ST_TO_ADDR
72528: GO 72538
// result := false ;
72530: LD_ADDR_VAR 0 3
72534: PUSH
72535: LD_INT 0
72537: ST_TO_ADDR
// end else
72538: GO 72548
// result := false ;
72540: LD_ADDR_VAR 0 3
72544: PUSH
72545: LD_INT 0
72547: ST_TO_ADDR
// end ;
72548: LD_VAR 0 3
72552: RET
// export function HealTarget ( sci ) ; begin
72553: LD_INT 0
72555: PPUSH
// if not sci then
72556: LD_VAR 0 1
72560: NOT
72561: IFFALSE 72565
// exit ;
72563: GO 72630
// result := 0 ;
72565: LD_ADDR_VAR 0 2
72569: PUSH
72570: LD_INT 0
72572: ST_TO_ADDR
// if GetTaskList ( sci ) then
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL_OW 437
72582: IFFALSE 72630
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72584: LD_VAR 0 1
72588: PPUSH
72589: CALL_OW 437
72593: PUSH
72594: LD_INT 1
72596: ARRAY
72597: PUSH
72598: LD_INT 1
72600: ARRAY
72601: PUSH
72602: LD_STRING l
72604: EQUAL
72605: IFFALSE 72630
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72607: LD_ADDR_VAR 0 2
72611: PUSH
72612: LD_VAR 0 1
72616: PPUSH
72617: CALL_OW 437
72621: PUSH
72622: LD_INT 1
72624: ARRAY
72625: PUSH
72626: LD_INT 4
72628: ARRAY
72629: ST_TO_ADDR
// end ;
72630: LD_VAR 0 2
72634: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
72635: LD_INT 0
72637: PPUSH
72638: PPUSH
72639: PPUSH
72640: PPUSH
72641: PPUSH
72642: PPUSH
72643: PPUSH
72644: PPUSH
72645: PPUSH
72646: PPUSH
72647: PPUSH
72648: PPUSH
72649: PPUSH
72650: PPUSH
72651: PPUSH
72652: PPUSH
72653: PPUSH
72654: PPUSH
72655: PPUSH
72656: PPUSH
72657: PPUSH
72658: PPUSH
72659: PPUSH
72660: PPUSH
72661: PPUSH
72662: PPUSH
72663: PPUSH
72664: PPUSH
72665: PPUSH
72666: PPUSH
72667: PPUSH
72668: PPUSH
72669: PPUSH
// if not list then
72670: LD_VAR 0 1
72674: NOT
72675: IFFALSE 72679
// exit ;
72677: GO 77267
// base := list [ 1 ] ;
72679: LD_ADDR_VAR 0 3
72683: PUSH
72684: LD_VAR 0 1
72688: PUSH
72689: LD_INT 1
72691: ARRAY
72692: ST_TO_ADDR
// group := list [ 2 ] ;
72693: LD_ADDR_VAR 0 4
72697: PUSH
72698: LD_VAR 0 1
72702: PUSH
72703: LD_INT 2
72705: ARRAY
72706: ST_TO_ADDR
// path := list [ 3 ] ;
72707: LD_ADDR_VAR 0 5
72711: PUSH
72712: LD_VAR 0 1
72716: PUSH
72717: LD_INT 3
72719: ARRAY
72720: ST_TO_ADDR
// flags := list [ 4 ] ;
72721: LD_ADDR_VAR 0 6
72725: PUSH
72726: LD_VAR 0 1
72730: PUSH
72731: LD_INT 4
72733: ARRAY
72734: ST_TO_ADDR
// mined := [ ] ;
72735: LD_ADDR_VAR 0 27
72739: PUSH
72740: EMPTY
72741: ST_TO_ADDR
// bombed := [ ] ;
72742: LD_ADDR_VAR 0 28
72746: PUSH
72747: EMPTY
72748: ST_TO_ADDR
// healers := [ ] ;
72749: LD_ADDR_VAR 0 31
72753: PUSH
72754: EMPTY
72755: ST_TO_ADDR
// to_heal := [ ] ;
72756: LD_ADDR_VAR 0 30
72760: PUSH
72761: EMPTY
72762: ST_TO_ADDR
// repairs := [ ] ;
72763: LD_ADDR_VAR 0 33
72767: PUSH
72768: EMPTY
72769: ST_TO_ADDR
// to_repair := [ ] ;
72770: LD_ADDR_VAR 0 32
72774: PUSH
72775: EMPTY
72776: ST_TO_ADDR
// if not group or not path then
72777: LD_VAR 0 4
72781: NOT
72782: PUSH
72783: LD_VAR 0 5
72787: NOT
72788: OR
72789: IFFALSE 72793
// exit ;
72791: GO 77267
// if flags then
72793: LD_VAR 0 6
72797: IFFALSE 72941
// begin f_ignore_area := flags [ 1 ] ;
72799: LD_ADDR_VAR 0 17
72803: PUSH
72804: LD_VAR 0 6
72808: PUSH
72809: LD_INT 1
72811: ARRAY
72812: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
72813: LD_ADDR_VAR 0 18
72817: PUSH
72818: LD_VAR 0 6
72822: PUSH
72823: LD_INT 2
72825: ARRAY
72826: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
72827: LD_ADDR_VAR 0 19
72831: PUSH
72832: LD_VAR 0 6
72836: PUSH
72837: LD_INT 3
72839: ARRAY
72840: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
72841: LD_ADDR_VAR 0 20
72845: PUSH
72846: LD_VAR 0 6
72850: PUSH
72851: LD_INT 4
72853: ARRAY
72854: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
72855: LD_ADDR_VAR 0 21
72859: PUSH
72860: LD_VAR 0 6
72864: PUSH
72865: LD_INT 5
72867: ARRAY
72868: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
72869: LD_ADDR_VAR 0 22
72873: PUSH
72874: LD_VAR 0 6
72878: PUSH
72879: LD_INT 6
72881: ARRAY
72882: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
72883: LD_ADDR_VAR 0 23
72887: PUSH
72888: LD_VAR 0 6
72892: PUSH
72893: LD_INT 7
72895: ARRAY
72896: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
72897: LD_ADDR_VAR 0 24
72901: PUSH
72902: LD_VAR 0 6
72906: PUSH
72907: LD_INT 8
72909: ARRAY
72910: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
72911: LD_ADDR_VAR 0 25
72915: PUSH
72916: LD_VAR 0 6
72920: PUSH
72921: LD_INT 9
72923: ARRAY
72924: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
72925: LD_ADDR_VAR 0 26
72929: PUSH
72930: LD_VAR 0 6
72934: PUSH
72935: LD_INT 10
72937: ARRAY
72938: ST_TO_ADDR
// end else
72939: GO 73021
// begin f_ignore_area := false ;
72941: LD_ADDR_VAR 0 17
72945: PUSH
72946: LD_INT 0
72948: ST_TO_ADDR
// f_capture := false ;
72949: LD_ADDR_VAR 0 18
72953: PUSH
72954: LD_INT 0
72956: ST_TO_ADDR
// f_ignore_civ := false ;
72957: LD_ADDR_VAR 0 19
72961: PUSH
72962: LD_INT 0
72964: ST_TO_ADDR
// f_murder := false ;
72965: LD_ADDR_VAR 0 20
72969: PUSH
72970: LD_INT 0
72972: ST_TO_ADDR
// f_mines := false ;
72973: LD_ADDR_VAR 0 21
72977: PUSH
72978: LD_INT 0
72980: ST_TO_ADDR
// f_repair := false ;
72981: LD_ADDR_VAR 0 22
72985: PUSH
72986: LD_INT 0
72988: ST_TO_ADDR
// f_heal := false ;
72989: LD_ADDR_VAR 0 23
72993: PUSH
72994: LD_INT 0
72996: ST_TO_ADDR
// f_spacetime := false ;
72997: LD_ADDR_VAR 0 24
73001: PUSH
73002: LD_INT 0
73004: ST_TO_ADDR
// f_attack_depot := false ;
73005: LD_ADDR_VAR 0 25
73009: PUSH
73010: LD_INT 0
73012: ST_TO_ADDR
// f_crawl := false ;
73013: LD_ADDR_VAR 0 26
73017: PUSH
73018: LD_INT 0
73020: ST_TO_ADDR
// end ; if f_heal then
73021: LD_VAR 0 23
73025: IFFALSE 73052
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
73027: LD_ADDR_VAR 0 31
73031: PUSH
73032: LD_VAR 0 4
73036: PPUSH
73037: LD_INT 25
73039: PUSH
73040: LD_INT 4
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PPUSH
73047: CALL_OW 72
73051: ST_TO_ADDR
// if f_repair then
73052: LD_VAR 0 22
73056: IFFALSE 73083
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
73058: LD_ADDR_VAR 0 33
73062: PUSH
73063: LD_VAR 0 4
73067: PPUSH
73068: LD_INT 25
73070: PUSH
73071: LD_INT 3
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PPUSH
73078: CALL_OW 72
73082: ST_TO_ADDR
// units_path := [ ] ;
73083: LD_ADDR_VAR 0 16
73087: PUSH
73088: EMPTY
73089: ST_TO_ADDR
// for i = 1 to group do
73090: LD_ADDR_VAR 0 7
73094: PUSH
73095: DOUBLE
73096: LD_INT 1
73098: DEC
73099: ST_TO_ADDR
73100: LD_VAR 0 4
73104: PUSH
73105: FOR_TO
73106: IFFALSE 73135
// units_path := Replace ( units_path , i , path ) ;
73108: LD_ADDR_VAR 0 16
73112: PUSH
73113: LD_VAR 0 16
73117: PPUSH
73118: LD_VAR 0 7
73122: PPUSH
73123: LD_VAR 0 5
73127: PPUSH
73128: CALL_OW 1
73132: ST_TO_ADDR
73133: GO 73105
73135: POP
73136: POP
// repeat for i = group downto 1 do
73137: LD_ADDR_VAR 0 7
73141: PUSH
73142: DOUBLE
73143: LD_VAR 0 4
73147: INC
73148: ST_TO_ADDR
73149: LD_INT 1
73151: PUSH
73152: FOR_DOWNTO
73153: IFFALSE 77249
// begin wait ( 5 ) ;
73155: LD_INT 5
73157: PPUSH
73158: CALL_OW 67
// tmp := [ ] ;
73162: LD_ADDR_VAR 0 14
73166: PUSH
73167: EMPTY
73168: ST_TO_ADDR
// attacking := false ;
73169: LD_ADDR_VAR 0 29
73173: PUSH
73174: LD_INT 0
73176: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
73177: LD_VAR 0 4
73181: PUSH
73182: LD_VAR 0 7
73186: ARRAY
73187: PPUSH
73188: CALL_OW 301
73192: PUSH
73193: LD_VAR 0 4
73197: PUSH
73198: LD_VAR 0 7
73202: ARRAY
73203: NOT
73204: OR
73205: IFFALSE 73314
// begin if GetType ( group [ i ] ) = unit_human then
73207: LD_VAR 0 4
73211: PUSH
73212: LD_VAR 0 7
73216: ARRAY
73217: PPUSH
73218: CALL_OW 247
73222: PUSH
73223: LD_INT 1
73225: EQUAL
73226: IFFALSE 73272
// begin to_heal := to_heal diff group [ i ] ;
73228: LD_ADDR_VAR 0 30
73232: PUSH
73233: LD_VAR 0 30
73237: PUSH
73238: LD_VAR 0 4
73242: PUSH
73243: LD_VAR 0 7
73247: ARRAY
73248: DIFF
73249: ST_TO_ADDR
// healers := healers diff group [ i ] ;
73250: LD_ADDR_VAR 0 31
73254: PUSH
73255: LD_VAR 0 31
73259: PUSH
73260: LD_VAR 0 4
73264: PUSH
73265: LD_VAR 0 7
73269: ARRAY
73270: DIFF
73271: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
73272: LD_ADDR_VAR 0 4
73276: PUSH
73277: LD_VAR 0 4
73281: PPUSH
73282: LD_VAR 0 7
73286: PPUSH
73287: CALL_OW 3
73291: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
73292: LD_ADDR_VAR 0 16
73296: PUSH
73297: LD_VAR 0 16
73301: PPUSH
73302: LD_VAR 0 7
73306: PPUSH
73307: CALL_OW 3
73311: ST_TO_ADDR
// continue ;
73312: GO 73152
// end ; if f_repair then
73314: LD_VAR 0 22
73318: IFFALSE 73807
// begin if GetType ( group [ i ] ) = unit_vehicle then
73320: LD_VAR 0 4
73324: PUSH
73325: LD_VAR 0 7
73329: ARRAY
73330: PPUSH
73331: CALL_OW 247
73335: PUSH
73336: LD_INT 2
73338: EQUAL
73339: IFFALSE 73529
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
73341: LD_VAR 0 4
73345: PUSH
73346: LD_VAR 0 7
73350: ARRAY
73351: PPUSH
73352: CALL_OW 256
73356: PUSH
73357: LD_INT 700
73359: LESS
73360: PUSH
73361: LD_VAR 0 4
73365: PUSH
73366: LD_VAR 0 7
73370: ARRAY
73371: PUSH
73372: LD_VAR 0 32
73376: IN
73377: NOT
73378: AND
73379: IFFALSE 73403
// to_repair := to_repair union group [ i ] ;
73381: LD_ADDR_VAR 0 32
73385: PUSH
73386: LD_VAR 0 32
73390: PUSH
73391: LD_VAR 0 4
73395: PUSH
73396: LD_VAR 0 7
73400: ARRAY
73401: UNION
73402: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
73403: LD_VAR 0 4
73407: PUSH
73408: LD_VAR 0 7
73412: ARRAY
73413: PPUSH
73414: CALL_OW 256
73418: PUSH
73419: LD_INT 1000
73421: EQUAL
73422: PUSH
73423: LD_VAR 0 4
73427: PUSH
73428: LD_VAR 0 7
73432: ARRAY
73433: PUSH
73434: LD_VAR 0 32
73438: IN
73439: AND
73440: IFFALSE 73464
// to_repair := to_repair diff group [ i ] ;
73442: LD_ADDR_VAR 0 32
73446: PUSH
73447: LD_VAR 0 32
73451: PUSH
73452: LD_VAR 0 4
73456: PUSH
73457: LD_VAR 0 7
73461: ARRAY
73462: DIFF
73463: ST_TO_ADDR
// if group [ i ] in to_repair then
73464: LD_VAR 0 4
73468: PUSH
73469: LD_VAR 0 7
73473: ARRAY
73474: PUSH
73475: LD_VAR 0 32
73479: IN
73480: IFFALSE 73527
// begin if not IsInArea ( group [ i ] , f_repair ) then
73482: LD_VAR 0 4
73486: PUSH
73487: LD_VAR 0 7
73491: ARRAY
73492: PPUSH
73493: LD_VAR 0 22
73497: PPUSH
73498: CALL_OW 308
73502: NOT
73503: IFFALSE 73525
// ComMoveToArea ( group [ i ] , f_repair ) ;
73505: LD_VAR 0 4
73509: PUSH
73510: LD_VAR 0 7
73514: ARRAY
73515: PPUSH
73516: LD_VAR 0 22
73520: PPUSH
73521: CALL_OW 113
// continue ;
73525: GO 73152
// end ; end else
73527: GO 73807
// if group [ i ] in repairs then
73529: LD_VAR 0 4
73533: PUSH
73534: LD_VAR 0 7
73538: ARRAY
73539: PUSH
73540: LD_VAR 0 33
73544: IN
73545: IFFALSE 73807
// begin if IsInUnit ( group [ i ] ) then
73547: LD_VAR 0 4
73551: PUSH
73552: LD_VAR 0 7
73556: ARRAY
73557: PPUSH
73558: CALL_OW 310
73562: IFFALSE 73630
// begin z := IsInUnit ( group [ i ] ) ;
73564: LD_ADDR_VAR 0 13
73568: PUSH
73569: LD_VAR 0 4
73573: PUSH
73574: LD_VAR 0 7
73578: ARRAY
73579: PPUSH
73580: CALL_OW 310
73584: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
73585: LD_VAR 0 13
73589: PUSH
73590: LD_VAR 0 32
73594: IN
73595: PUSH
73596: LD_VAR 0 13
73600: PPUSH
73601: LD_VAR 0 22
73605: PPUSH
73606: CALL_OW 308
73610: AND
73611: IFFALSE 73628
// ComExitVehicle ( group [ i ] ) ;
73613: LD_VAR 0 4
73617: PUSH
73618: LD_VAR 0 7
73622: ARRAY
73623: PPUSH
73624: CALL_OW 121
// end else
73628: GO 73807
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
73630: LD_ADDR_VAR 0 13
73634: PUSH
73635: LD_VAR 0 4
73639: PPUSH
73640: LD_INT 95
73642: PUSH
73643: LD_VAR 0 22
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 58
73654: PUSH
73655: EMPTY
73656: LIST
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PPUSH
73662: CALL_OW 72
73666: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
73667: LD_VAR 0 4
73671: PUSH
73672: LD_VAR 0 7
73676: ARRAY
73677: PPUSH
73678: CALL_OW 314
73682: NOT
73683: IFFALSE 73805
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
73685: LD_ADDR_VAR 0 10
73689: PUSH
73690: LD_VAR 0 13
73694: PPUSH
73695: LD_VAR 0 4
73699: PUSH
73700: LD_VAR 0 7
73704: ARRAY
73705: PPUSH
73706: CALL_OW 74
73710: ST_TO_ADDR
// if not x then
73711: LD_VAR 0 10
73715: NOT
73716: IFFALSE 73720
// continue ;
73718: GO 73152
// if GetLives ( x ) < 1000 then
73720: LD_VAR 0 10
73724: PPUSH
73725: CALL_OW 256
73729: PUSH
73730: LD_INT 1000
73732: LESS
73733: IFFALSE 73757
// ComRepairVehicle ( group [ i ] , x ) else
73735: LD_VAR 0 4
73739: PUSH
73740: LD_VAR 0 7
73744: ARRAY
73745: PPUSH
73746: LD_VAR 0 10
73750: PPUSH
73751: CALL_OW 129
73755: GO 73805
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
73757: LD_VAR 0 23
73761: PUSH
73762: LD_VAR 0 4
73766: PUSH
73767: LD_VAR 0 7
73771: ARRAY
73772: PPUSH
73773: CALL_OW 256
73777: PUSH
73778: LD_INT 1000
73780: LESS
73781: AND
73782: NOT
73783: IFFALSE 73805
// ComEnterUnit ( group [ i ] , x ) ;
73785: LD_VAR 0 4
73789: PUSH
73790: LD_VAR 0 7
73794: ARRAY
73795: PPUSH
73796: LD_VAR 0 10
73800: PPUSH
73801: CALL_OW 120
// end ; continue ;
73805: GO 73152
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
73807: LD_VAR 0 23
73811: PUSH
73812: LD_VAR 0 4
73816: PUSH
73817: LD_VAR 0 7
73821: ARRAY
73822: PPUSH
73823: CALL_OW 247
73827: PUSH
73828: LD_INT 1
73830: EQUAL
73831: AND
73832: IFFALSE 74310
// begin if group [ i ] in healers then
73834: LD_VAR 0 4
73838: PUSH
73839: LD_VAR 0 7
73843: ARRAY
73844: PUSH
73845: LD_VAR 0 31
73849: IN
73850: IFFALSE 74123
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
73852: LD_VAR 0 4
73856: PUSH
73857: LD_VAR 0 7
73861: ARRAY
73862: PPUSH
73863: LD_VAR 0 23
73867: PPUSH
73868: CALL_OW 308
73872: NOT
73873: PUSH
73874: LD_VAR 0 4
73878: PUSH
73879: LD_VAR 0 7
73883: ARRAY
73884: PPUSH
73885: CALL_OW 314
73889: NOT
73890: AND
73891: IFFALSE 73915
// ComMoveToArea ( group [ i ] , f_heal ) else
73893: LD_VAR 0 4
73897: PUSH
73898: LD_VAR 0 7
73902: ARRAY
73903: PPUSH
73904: LD_VAR 0 23
73908: PPUSH
73909: CALL_OW 113
73913: GO 74121
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
73915: LD_VAR 0 4
73919: PUSH
73920: LD_VAR 0 7
73924: ARRAY
73925: PPUSH
73926: CALL 72553 0 1
73930: PPUSH
73931: CALL_OW 256
73935: PUSH
73936: LD_INT 1000
73938: EQUAL
73939: IFFALSE 73958
// ComStop ( group [ i ] ) else
73941: LD_VAR 0 4
73945: PUSH
73946: LD_VAR 0 7
73950: ARRAY
73951: PPUSH
73952: CALL_OW 141
73956: GO 74121
// if not HasTask ( group [ i ] ) and to_heal then
73958: LD_VAR 0 4
73962: PUSH
73963: LD_VAR 0 7
73967: ARRAY
73968: PPUSH
73969: CALL_OW 314
73973: NOT
73974: PUSH
73975: LD_VAR 0 30
73979: AND
73980: IFFALSE 74121
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
73982: LD_ADDR_VAR 0 13
73986: PUSH
73987: LD_VAR 0 30
73991: PPUSH
73992: LD_INT 3
73994: PUSH
73995: LD_INT 54
73997: PUSH
73998: EMPTY
73999: LIST
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PPUSH
74005: CALL_OW 72
74009: PPUSH
74010: LD_VAR 0 4
74014: PUSH
74015: LD_VAR 0 7
74019: ARRAY
74020: PPUSH
74021: CALL_OW 74
74025: ST_TO_ADDR
// if z then
74026: LD_VAR 0 13
74030: IFFALSE 74121
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
74032: LD_INT 91
74034: PUSH
74035: LD_VAR 0 13
74039: PUSH
74040: LD_INT 10
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 81
74050: PUSH
74051: LD_VAR 0 13
74055: PPUSH
74056: CALL_OW 255
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PPUSH
74069: CALL_OW 69
74073: PUSH
74074: LD_INT 0
74076: EQUAL
74077: IFFALSE 74101
// ComHeal ( group [ i ] , z ) else
74079: LD_VAR 0 4
74083: PUSH
74084: LD_VAR 0 7
74088: ARRAY
74089: PPUSH
74090: LD_VAR 0 13
74094: PPUSH
74095: CALL_OW 128
74099: GO 74121
// ComMoveToArea ( group [ i ] , f_heal ) ;
74101: LD_VAR 0 4
74105: PUSH
74106: LD_VAR 0 7
74110: ARRAY
74111: PPUSH
74112: LD_VAR 0 23
74116: PPUSH
74117: CALL_OW 113
// end ; continue ;
74121: GO 73152
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
74123: LD_VAR 0 4
74127: PUSH
74128: LD_VAR 0 7
74132: ARRAY
74133: PPUSH
74134: CALL_OW 256
74138: PUSH
74139: LD_INT 700
74141: LESS
74142: PUSH
74143: LD_VAR 0 4
74147: PUSH
74148: LD_VAR 0 7
74152: ARRAY
74153: PUSH
74154: LD_VAR 0 30
74158: IN
74159: NOT
74160: AND
74161: IFFALSE 74185
// to_heal := to_heal union group [ i ] ;
74163: LD_ADDR_VAR 0 30
74167: PUSH
74168: LD_VAR 0 30
74172: PUSH
74173: LD_VAR 0 4
74177: PUSH
74178: LD_VAR 0 7
74182: ARRAY
74183: UNION
74184: ST_TO_ADDR
// if group [ i ] in to_heal then
74185: LD_VAR 0 4
74189: PUSH
74190: LD_VAR 0 7
74194: ARRAY
74195: PUSH
74196: LD_VAR 0 30
74200: IN
74201: IFFALSE 74310
// begin if GetLives ( group [ i ] ) = 1000 then
74203: LD_VAR 0 4
74207: PUSH
74208: LD_VAR 0 7
74212: ARRAY
74213: PPUSH
74214: CALL_OW 256
74218: PUSH
74219: LD_INT 1000
74221: EQUAL
74222: IFFALSE 74248
// to_heal := to_heal diff group [ i ] else
74224: LD_ADDR_VAR 0 30
74228: PUSH
74229: LD_VAR 0 30
74233: PUSH
74234: LD_VAR 0 4
74238: PUSH
74239: LD_VAR 0 7
74243: ARRAY
74244: DIFF
74245: ST_TO_ADDR
74246: GO 74310
// begin if not IsInArea ( group [ i ] , to_heal ) then
74248: LD_VAR 0 4
74252: PUSH
74253: LD_VAR 0 7
74257: ARRAY
74258: PPUSH
74259: LD_VAR 0 30
74263: PPUSH
74264: CALL_OW 308
74268: NOT
74269: IFFALSE 74293
// ComMoveToArea ( group [ i ] , f_heal ) else
74271: LD_VAR 0 4
74275: PUSH
74276: LD_VAR 0 7
74280: ARRAY
74281: PPUSH
74282: LD_VAR 0 23
74286: PPUSH
74287: CALL_OW 113
74291: GO 74308
// ComHold ( group [ i ] ) ;
74293: LD_VAR 0 4
74297: PUSH
74298: LD_VAR 0 7
74302: ARRAY
74303: PPUSH
74304: CALL_OW 140
// continue ;
74308: GO 73152
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
74310: LD_VAR 0 4
74314: PUSH
74315: LD_VAR 0 7
74319: ARRAY
74320: PPUSH
74321: LD_INT 10
74323: PPUSH
74324: CALL 70950 0 2
74328: NOT
74329: PUSH
74330: LD_VAR 0 16
74334: PUSH
74335: LD_VAR 0 7
74339: ARRAY
74340: PUSH
74341: EMPTY
74342: EQUAL
74343: NOT
74344: AND
74345: IFFALSE 74611
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
74347: LD_VAR 0 4
74351: PUSH
74352: LD_VAR 0 7
74356: ARRAY
74357: PPUSH
74358: CALL_OW 262
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: LD_INT 2
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: IN
74373: IFFALSE 74414
// if GetFuel ( group [ i ] ) < 10 then
74375: LD_VAR 0 4
74379: PUSH
74380: LD_VAR 0 7
74384: ARRAY
74385: PPUSH
74386: CALL_OW 261
74390: PUSH
74391: LD_INT 10
74393: LESS
74394: IFFALSE 74414
// SetFuel ( group [ i ] , 12 ) ;
74396: LD_VAR 0 4
74400: PUSH
74401: LD_VAR 0 7
74405: ARRAY
74406: PPUSH
74407: LD_INT 12
74409: PPUSH
74410: CALL_OW 240
// if units_path [ i ] then
74414: LD_VAR 0 16
74418: PUSH
74419: LD_VAR 0 7
74423: ARRAY
74424: IFFALSE 74609
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
74426: LD_VAR 0 4
74430: PUSH
74431: LD_VAR 0 7
74435: ARRAY
74436: PPUSH
74437: LD_VAR 0 16
74441: PUSH
74442: LD_VAR 0 7
74446: ARRAY
74447: PUSH
74448: LD_INT 1
74450: ARRAY
74451: PUSH
74452: LD_INT 1
74454: ARRAY
74455: PPUSH
74456: LD_VAR 0 16
74460: PUSH
74461: LD_VAR 0 7
74465: ARRAY
74466: PUSH
74467: LD_INT 1
74469: ARRAY
74470: PUSH
74471: LD_INT 2
74473: ARRAY
74474: PPUSH
74475: CALL_OW 297
74479: PUSH
74480: LD_INT 6
74482: GREATER
74483: IFFALSE 74558
// begin if not HasTask ( group [ i ] ) then
74485: LD_VAR 0 4
74489: PUSH
74490: LD_VAR 0 7
74494: ARRAY
74495: PPUSH
74496: CALL_OW 314
74500: NOT
74501: IFFALSE 74556
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
74503: LD_VAR 0 4
74507: PUSH
74508: LD_VAR 0 7
74512: ARRAY
74513: PPUSH
74514: LD_VAR 0 16
74518: PUSH
74519: LD_VAR 0 7
74523: ARRAY
74524: PUSH
74525: LD_INT 1
74527: ARRAY
74528: PUSH
74529: LD_INT 1
74531: ARRAY
74532: PPUSH
74533: LD_VAR 0 16
74537: PUSH
74538: LD_VAR 0 7
74542: ARRAY
74543: PUSH
74544: LD_INT 1
74546: ARRAY
74547: PUSH
74548: LD_INT 2
74550: ARRAY
74551: PPUSH
74552: CALL_OW 114
// end else
74556: GO 74609
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
74558: LD_ADDR_VAR 0 15
74562: PUSH
74563: LD_VAR 0 16
74567: PUSH
74568: LD_VAR 0 7
74572: ARRAY
74573: PPUSH
74574: LD_INT 1
74576: PPUSH
74577: CALL_OW 3
74581: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
74582: LD_ADDR_VAR 0 16
74586: PUSH
74587: LD_VAR 0 16
74591: PPUSH
74592: LD_VAR 0 7
74596: PPUSH
74597: LD_VAR 0 15
74601: PPUSH
74602: CALL_OW 1
74606: ST_TO_ADDR
// continue ;
74607: GO 73152
// end ; end ; end else
74609: GO 77247
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
74611: LD_ADDR_VAR 0 14
74615: PUSH
74616: LD_INT 81
74618: PUSH
74619: LD_VAR 0 4
74623: PUSH
74624: LD_VAR 0 7
74628: ARRAY
74629: PPUSH
74630: CALL_OW 255
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PPUSH
74639: CALL_OW 69
74643: ST_TO_ADDR
// if not tmp then
74644: LD_VAR 0 14
74648: NOT
74649: IFFALSE 74653
// continue ;
74651: GO 73152
// if f_ignore_area then
74653: LD_VAR 0 17
74657: IFFALSE 74745
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
74659: LD_ADDR_VAR 0 15
74663: PUSH
74664: LD_VAR 0 14
74668: PPUSH
74669: LD_INT 3
74671: PUSH
74672: LD_INT 92
74674: PUSH
74675: LD_VAR 0 17
74679: PUSH
74680: LD_INT 1
74682: ARRAY
74683: PUSH
74684: LD_VAR 0 17
74688: PUSH
74689: LD_INT 2
74691: ARRAY
74692: PUSH
74693: LD_VAR 0 17
74697: PUSH
74698: LD_INT 3
74700: ARRAY
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PPUSH
74712: CALL_OW 72
74716: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
74717: LD_VAR 0 14
74721: PUSH
74722: LD_VAR 0 15
74726: DIFF
74727: IFFALSE 74745
// tmp := tmp diff tmp2 ;
74729: LD_ADDR_VAR 0 14
74733: PUSH
74734: LD_VAR 0 14
74738: PUSH
74739: LD_VAR 0 15
74743: DIFF
74744: ST_TO_ADDR
// end ; if not f_murder then
74745: LD_VAR 0 20
74749: NOT
74750: IFFALSE 74808
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
74752: LD_ADDR_VAR 0 15
74756: PUSH
74757: LD_VAR 0 14
74761: PPUSH
74762: LD_INT 3
74764: PUSH
74765: LD_INT 50
74767: PUSH
74768: EMPTY
74769: LIST
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PPUSH
74775: CALL_OW 72
74779: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
74780: LD_VAR 0 14
74784: PUSH
74785: LD_VAR 0 15
74789: DIFF
74790: IFFALSE 74808
// tmp := tmp diff tmp2 ;
74792: LD_ADDR_VAR 0 14
74796: PUSH
74797: LD_VAR 0 14
74801: PUSH
74802: LD_VAR 0 15
74806: DIFF
74807: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
74808: LD_ADDR_VAR 0 14
74812: PUSH
74813: LD_VAR 0 4
74817: PUSH
74818: LD_VAR 0 7
74822: ARRAY
74823: PPUSH
74824: LD_VAR 0 14
74828: PPUSH
74829: LD_INT 1
74831: PPUSH
74832: LD_INT 1
74834: PPUSH
74835: CALL 44832 0 4
74839: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
74840: LD_VAR 0 4
74844: PUSH
74845: LD_VAR 0 7
74849: ARRAY
74850: PPUSH
74851: CALL_OW 257
74855: PUSH
74856: LD_INT 1
74858: EQUAL
74859: IFFALSE 75307
// begin if WantPlant ( group [ i ] ) then
74861: LD_VAR 0 4
74865: PUSH
74866: LD_VAR 0 7
74870: ARRAY
74871: PPUSH
74872: CALL 44300 0 1
74876: IFFALSE 74880
// continue ;
74878: GO 73152
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
74880: LD_VAR 0 18
74884: PUSH
74885: LD_VAR 0 4
74889: PUSH
74890: LD_VAR 0 7
74894: ARRAY
74895: PPUSH
74896: CALL_OW 310
74900: NOT
74901: AND
74902: PUSH
74903: LD_VAR 0 14
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PUSH
74912: LD_VAR 0 14
74916: PPUSH
74917: LD_INT 21
74919: PUSH
74920: LD_INT 2
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 58
74929: PUSH
74930: EMPTY
74931: LIST
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PPUSH
74937: CALL_OW 72
74941: IN
74942: AND
74943: IFFALSE 74979
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
74945: LD_VAR 0 4
74949: PUSH
74950: LD_VAR 0 7
74954: ARRAY
74955: PPUSH
74956: LD_VAR 0 14
74960: PUSH
74961: LD_INT 1
74963: ARRAY
74964: PPUSH
74965: CALL_OW 120
// attacking := true ;
74969: LD_ADDR_VAR 0 29
74973: PUSH
74974: LD_INT 1
74976: ST_TO_ADDR
// continue ;
74977: GO 73152
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
74979: LD_VAR 0 26
74983: PUSH
74984: LD_VAR 0 4
74988: PUSH
74989: LD_VAR 0 7
74993: ARRAY
74994: PPUSH
74995: CALL_OW 257
74999: PUSH
75000: LD_INT 1
75002: EQUAL
75003: AND
75004: PUSH
75005: LD_VAR 0 4
75009: PUSH
75010: LD_VAR 0 7
75014: ARRAY
75015: PPUSH
75016: CALL_OW 256
75020: PUSH
75021: LD_INT 800
75023: LESS
75024: AND
75025: PUSH
75026: LD_VAR 0 4
75030: PUSH
75031: LD_VAR 0 7
75035: ARRAY
75036: PPUSH
75037: CALL_OW 318
75041: NOT
75042: AND
75043: IFFALSE 75060
// ComCrawl ( group [ i ] ) ;
75045: LD_VAR 0 4
75049: PUSH
75050: LD_VAR 0 7
75054: ARRAY
75055: PPUSH
75056: CALL_OW 137
// if f_mines then
75060: LD_VAR 0 21
75064: IFFALSE 75307
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
75066: LD_VAR 0 14
75070: PUSH
75071: LD_INT 1
75073: ARRAY
75074: PPUSH
75075: CALL_OW 247
75079: PUSH
75080: LD_INT 3
75082: EQUAL
75083: PUSH
75084: LD_VAR 0 14
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PUSH
75093: LD_VAR 0 27
75097: IN
75098: NOT
75099: AND
75100: IFFALSE 75307
// begin x := GetX ( tmp [ 1 ] ) ;
75102: LD_ADDR_VAR 0 10
75106: PUSH
75107: LD_VAR 0 14
75111: PUSH
75112: LD_INT 1
75114: ARRAY
75115: PPUSH
75116: CALL_OW 250
75120: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
75121: LD_ADDR_VAR 0 11
75125: PUSH
75126: LD_VAR 0 14
75130: PUSH
75131: LD_INT 1
75133: ARRAY
75134: PPUSH
75135: CALL_OW 251
75139: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
75140: LD_ADDR_VAR 0 12
75144: PUSH
75145: LD_VAR 0 4
75149: PUSH
75150: LD_VAR 0 7
75154: ARRAY
75155: PPUSH
75156: CALL 71035 0 1
75160: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
75161: LD_VAR 0 4
75165: PUSH
75166: LD_VAR 0 7
75170: ARRAY
75171: PPUSH
75172: LD_VAR 0 10
75176: PPUSH
75177: LD_VAR 0 11
75181: PPUSH
75182: LD_VAR 0 14
75186: PUSH
75187: LD_INT 1
75189: ARRAY
75190: PPUSH
75191: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
75195: LD_VAR 0 4
75199: PUSH
75200: LD_VAR 0 7
75204: ARRAY
75205: PPUSH
75206: LD_VAR 0 10
75210: PPUSH
75211: LD_VAR 0 12
75215: PPUSH
75216: LD_INT 7
75218: PPUSH
75219: CALL_OW 272
75223: PPUSH
75224: LD_VAR 0 11
75228: PPUSH
75229: LD_VAR 0 12
75233: PPUSH
75234: LD_INT 7
75236: PPUSH
75237: CALL_OW 273
75241: PPUSH
75242: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
75246: LD_VAR 0 4
75250: PUSH
75251: LD_VAR 0 7
75255: ARRAY
75256: PPUSH
75257: LD_INT 71
75259: PPUSH
75260: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
75264: LD_ADDR_VAR 0 27
75268: PUSH
75269: LD_VAR 0 27
75273: PPUSH
75274: LD_VAR 0 27
75278: PUSH
75279: LD_INT 1
75281: PLUS
75282: PPUSH
75283: LD_VAR 0 14
75287: PUSH
75288: LD_INT 1
75290: ARRAY
75291: PPUSH
75292: CALL_OW 1
75296: ST_TO_ADDR
// attacking := true ;
75297: LD_ADDR_VAR 0 29
75301: PUSH
75302: LD_INT 1
75304: ST_TO_ADDR
// continue ;
75305: GO 73152
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
75307: LD_VAR 0 4
75311: PUSH
75312: LD_VAR 0 7
75316: ARRAY
75317: PPUSH
75318: CALL_OW 257
75322: PUSH
75323: LD_INT 17
75325: EQUAL
75326: PUSH
75327: LD_VAR 0 4
75331: PUSH
75332: LD_VAR 0 7
75336: ARRAY
75337: PPUSH
75338: CALL_OW 110
75342: PUSH
75343: LD_INT 71
75345: EQUAL
75346: NOT
75347: AND
75348: IFFALSE 75494
// begin attacking := false ;
75350: LD_ADDR_VAR 0 29
75354: PUSH
75355: LD_INT 0
75357: ST_TO_ADDR
// k := 5 ;
75358: LD_ADDR_VAR 0 9
75362: PUSH
75363: LD_INT 5
75365: ST_TO_ADDR
// if tmp < k then
75366: LD_VAR 0 14
75370: PUSH
75371: LD_VAR 0 9
75375: LESS
75376: IFFALSE 75388
// k := tmp ;
75378: LD_ADDR_VAR 0 9
75382: PUSH
75383: LD_VAR 0 14
75387: ST_TO_ADDR
// for j = 1 to k do
75388: LD_ADDR_VAR 0 8
75392: PUSH
75393: DOUBLE
75394: LD_INT 1
75396: DEC
75397: ST_TO_ADDR
75398: LD_VAR 0 9
75402: PUSH
75403: FOR_TO
75404: IFFALSE 75492
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
75406: LD_VAR 0 14
75410: PUSH
75411: LD_VAR 0 8
75415: ARRAY
75416: PUSH
75417: LD_VAR 0 14
75421: PPUSH
75422: LD_INT 58
75424: PUSH
75425: EMPTY
75426: LIST
75427: PPUSH
75428: CALL_OW 72
75432: IN
75433: NOT
75434: IFFALSE 75490
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75436: LD_VAR 0 4
75440: PUSH
75441: LD_VAR 0 7
75445: ARRAY
75446: PPUSH
75447: LD_VAR 0 14
75451: PUSH
75452: LD_VAR 0 8
75456: ARRAY
75457: PPUSH
75458: CALL_OW 115
// attacking := true ;
75462: LD_ADDR_VAR 0 29
75466: PUSH
75467: LD_INT 1
75469: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
75470: LD_VAR 0 4
75474: PUSH
75475: LD_VAR 0 7
75479: ARRAY
75480: PPUSH
75481: LD_INT 71
75483: PPUSH
75484: CALL_OW 109
// continue ;
75488: GO 75403
// end ; end ;
75490: GO 75403
75492: POP
75493: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
75494: LD_VAR 0 4
75498: PUSH
75499: LD_VAR 0 7
75503: ARRAY
75504: PPUSH
75505: CALL_OW 257
75509: PUSH
75510: LD_INT 8
75512: EQUAL
75513: PUSH
75514: LD_VAR 0 4
75518: PUSH
75519: LD_VAR 0 7
75523: ARRAY
75524: PPUSH
75525: CALL_OW 264
75529: PUSH
75530: LD_INT 28
75532: PUSH
75533: LD_INT 45
75535: PUSH
75536: LD_INT 7
75538: PUSH
75539: LD_INT 47
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: IN
75548: OR
75549: IFFALSE 75779
// begin attacking := false ;
75551: LD_ADDR_VAR 0 29
75555: PUSH
75556: LD_INT 0
75558: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
75559: LD_VAR 0 14
75563: PUSH
75564: LD_INT 1
75566: ARRAY
75567: PPUSH
75568: CALL_OW 266
75572: PUSH
75573: LD_INT 32
75575: PUSH
75576: LD_INT 31
75578: PUSH
75579: LD_INT 33
75581: PUSH
75582: LD_INT 4
75584: PUSH
75585: LD_INT 5
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: IN
75595: IFFALSE 75779
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
75597: LD_ADDR_VAR 0 9
75601: PUSH
75602: LD_VAR 0 14
75606: PUSH
75607: LD_INT 1
75609: ARRAY
75610: PPUSH
75611: CALL_OW 266
75615: PPUSH
75616: LD_VAR 0 14
75620: PUSH
75621: LD_INT 1
75623: ARRAY
75624: PPUSH
75625: CALL_OW 250
75629: PPUSH
75630: LD_VAR 0 14
75634: PUSH
75635: LD_INT 1
75637: ARRAY
75638: PPUSH
75639: CALL_OW 251
75643: PPUSH
75644: LD_VAR 0 14
75648: PUSH
75649: LD_INT 1
75651: ARRAY
75652: PPUSH
75653: CALL_OW 254
75657: PPUSH
75658: LD_VAR 0 14
75662: PUSH
75663: LD_INT 1
75665: ARRAY
75666: PPUSH
75667: CALL_OW 248
75671: PPUSH
75672: LD_INT 0
75674: PPUSH
75675: CALL 52411 0 6
75679: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
75680: LD_ADDR_VAR 0 8
75684: PUSH
75685: LD_VAR 0 4
75689: PUSH
75690: LD_VAR 0 7
75694: ARRAY
75695: PPUSH
75696: LD_VAR 0 9
75700: PPUSH
75701: CALL 71098 0 2
75705: ST_TO_ADDR
// if j then
75706: LD_VAR 0 8
75710: IFFALSE 75779
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
75712: LD_VAR 0 8
75716: PUSH
75717: LD_INT 1
75719: ARRAY
75720: PPUSH
75721: LD_VAR 0 8
75725: PUSH
75726: LD_INT 2
75728: ARRAY
75729: PPUSH
75730: CALL_OW 488
75734: IFFALSE 75779
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
75736: LD_VAR 0 4
75740: PUSH
75741: LD_VAR 0 7
75745: ARRAY
75746: PPUSH
75747: LD_VAR 0 8
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: PPUSH
75756: LD_VAR 0 8
75760: PUSH
75761: LD_INT 2
75763: ARRAY
75764: PPUSH
75765: CALL_OW 116
// attacking := true ;
75769: LD_ADDR_VAR 0 29
75773: PUSH
75774: LD_INT 1
75776: ST_TO_ADDR
// continue ;
75777: GO 73152
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
75779: LD_VAR 0 4
75783: PUSH
75784: LD_VAR 0 7
75788: ARRAY
75789: PPUSH
75790: CALL_OW 265
75794: PUSH
75795: LD_INT 11
75797: EQUAL
75798: IFFALSE 76076
// begin k := 10 ;
75800: LD_ADDR_VAR 0 9
75804: PUSH
75805: LD_INT 10
75807: ST_TO_ADDR
// x := 0 ;
75808: LD_ADDR_VAR 0 10
75812: PUSH
75813: LD_INT 0
75815: ST_TO_ADDR
// if tmp < k then
75816: LD_VAR 0 14
75820: PUSH
75821: LD_VAR 0 9
75825: LESS
75826: IFFALSE 75838
// k := tmp ;
75828: LD_ADDR_VAR 0 9
75832: PUSH
75833: LD_VAR 0 14
75837: ST_TO_ADDR
// for j = k downto 1 do
75838: LD_ADDR_VAR 0 8
75842: PUSH
75843: DOUBLE
75844: LD_VAR 0 9
75848: INC
75849: ST_TO_ADDR
75850: LD_INT 1
75852: PUSH
75853: FOR_DOWNTO
75854: IFFALSE 75929
// begin if GetType ( tmp [ j ] ) = unit_human then
75856: LD_VAR 0 14
75860: PUSH
75861: LD_VAR 0 8
75865: ARRAY
75866: PPUSH
75867: CALL_OW 247
75871: PUSH
75872: LD_INT 1
75874: EQUAL
75875: IFFALSE 75927
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
75877: LD_VAR 0 4
75881: PUSH
75882: LD_VAR 0 7
75886: ARRAY
75887: PPUSH
75888: LD_VAR 0 14
75892: PUSH
75893: LD_VAR 0 8
75897: ARRAY
75898: PPUSH
75899: CALL 71369 0 2
// x := tmp [ j ] ;
75903: LD_ADDR_VAR 0 10
75907: PUSH
75908: LD_VAR 0 14
75912: PUSH
75913: LD_VAR 0 8
75917: ARRAY
75918: ST_TO_ADDR
// attacking := true ;
75919: LD_ADDR_VAR 0 29
75923: PUSH
75924: LD_INT 1
75926: ST_TO_ADDR
// end ; end ;
75927: GO 75853
75929: POP
75930: POP
// if not x then
75931: LD_VAR 0 10
75935: NOT
75936: IFFALSE 76076
// begin attacking := true ;
75938: LD_ADDR_VAR 0 29
75942: PUSH
75943: LD_INT 1
75945: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
75946: LD_VAR 0 4
75950: PUSH
75951: LD_VAR 0 7
75955: ARRAY
75956: PPUSH
75957: CALL_OW 250
75961: PPUSH
75962: LD_VAR 0 4
75966: PUSH
75967: LD_VAR 0 7
75971: ARRAY
75972: PPUSH
75973: CALL_OW 251
75977: PPUSH
75978: CALL_OW 546
75982: PUSH
75983: LD_INT 2
75985: ARRAY
75986: PUSH
75987: LD_VAR 0 14
75991: PUSH
75992: LD_INT 1
75994: ARRAY
75995: PPUSH
75996: CALL_OW 250
76000: PPUSH
76001: LD_VAR 0 14
76005: PUSH
76006: LD_INT 1
76008: ARRAY
76009: PPUSH
76010: CALL_OW 251
76014: PPUSH
76015: CALL_OW 546
76019: PUSH
76020: LD_INT 2
76022: ARRAY
76023: EQUAL
76024: IFFALSE 76052
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
76026: LD_VAR 0 4
76030: PUSH
76031: LD_VAR 0 7
76035: ARRAY
76036: PPUSH
76037: LD_VAR 0 14
76041: PUSH
76042: LD_INT 1
76044: ARRAY
76045: PPUSH
76046: CALL 71369 0 2
76050: GO 76076
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76052: LD_VAR 0 4
76056: PUSH
76057: LD_VAR 0 7
76061: ARRAY
76062: PPUSH
76063: LD_VAR 0 14
76067: PUSH
76068: LD_INT 1
76070: ARRAY
76071: PPUSH
76072: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
76076: LD_VAR 0 4
76080: PUSH
76081: LD_VAR 0 7
76085: ARRAY
76086: PPUSH
76087: CALL_OW 264
76091: PUSH
76092: LD_INT 29
76094: EQUAL
76095: IFFALSE 76461
// begin if WantsToAttack ( group [ i ] ) in bombed then
76097: LD_VAR 0 4
76101: PUSH
76102: LD_VAR 0 7
76106: ARRAY
76107: PPUSH
76108: CALL_OW 319
76112: PUSH
76113: LD_VAR 0 28
76117: IN
76118: IFFALSE 76122
// continue ;
76120: GO 73152
// k := 8 ;
76122: LD_ADDR_VAR 0 9
76126: PUSH
76127: LD_INT 8
76129: ST_TO_ADDR
// x := 0 ;
76130: LD_ADDR_VAR 0 10
76134: PUSH
76135: LD_INT 0
76137: ST_TO_ADDR
// if tmp < k then
76138: LD_VAR 0 14
76142: PUSH
76143: LD_VAR 0 9
76147: LESS
76148: IFFALSE 76160
// k := tmp ;
76150: LD_ADDR_VAR 0 9
76154: PUSH
76155: LD_VAR 0 14
76159: ST_TO_ADDR
// for j = 1 to k do
76160: LD_ADDR_VAR 0 8
76164: PUSH
76165: DOUBLE
76166: LD_INT 1
76168: DEC
76169: ST_TO_ADDR
76170: LD_VAR 0 9
76174: PUSH
76175: FOR_TO
76176: IFFALSE 76308
// begin if GetType ( tmp [ j ] ) = unit_building then
76178: LD_VAR 0 14
76182: PUSH
76183: LD_VAR 0 8
76187: ARRAY
76188: PPUSH
76189: CALL_OW 247
76193: PUSH
76194: LD_INT 3
76196: EQUAL
76197: IFFALSE 76306
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
76199: LD_VAR 0 14
76203: PUSH
76204: LD_VAR 0 8
76208: ARRAY
76209: PUSH
76210: LD_VAR 0 28
76214: IN
76215: NOT
76216: PUSH
76217: LD_VAR 0 14
76221: PUSH
76222: LD_VAR 0 8
76226: ARRAY
76227: PPUSH
76228: CALL_OW 313
76232: AND
76233: IFFALSE 76306
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
76235: LD_VAR 0 4
76239: PUSH
76240: LD_VAR 0 7
76244: ARRAY
76245: PPUSH
76246: LD_VAR 0 14
76250: PUSH
76251: LD_VAR 0 8
76255: ARRAY
76256: PPUSH
76257: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
76261: LD_ADDR_VAR 0 28
76265: PUSH
76266: LD_VAR 0 28
76270: PPUSH
76271: LD_VAR 0 28
76275: PUSH
76276: LD_INT 1
76278: PLUS
76279: PPUSH
76280: LD_VAR 0 14
76284: PUSH
76285: LD_VAR 0 8
76289: ARRAY
76290: PPUSH
76291: CALL_OW 1
76295: ST_TO_ADDR
// attacking := true ;
76296: LD_ADDR_VAR 0 29
76300: PUSH
76301: LD_INT 1
76303: ST_TO_ADDR
// break ;
76304: GO 76308
// end ; end ;
76306: GO 76175
76308: POP
76309: POP
// if not attacking and f_attack_depot then
76310: LD_VAR 0 29
76314: NOT
76315: PUSH
76316: LD_VAR 0 25
76320: AND
76321: IFFALSE 76416
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76323: LD_ADDR_VAR 0 13
76327: PUSH
76328: LD_VAR 0 14
76332: PPUSH
76333: LD_INT 2
76335: PUSH
76336: LD_INT 30
76338: PUSH
76339: LD_INT 0
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 30
76348: PUSH
76349: LD_INT 1
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: LIST
76360: PPUSH
76361: CALL_OW 72
76365: ST_TO_ADDR
// if z then
76366: LD_VAR 0 13
76370: IFFALSE 76416
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
76372: LD_VAR 0 4
76376: PUSH
76377: LD_VAR 0 7
76381: ARRAY
76382: PPUSH
76383: LD_VAR 0 13
76387: PPUSH
76388: LD_VAR 0 4
76392: PUSH
76393: LD_VAR 0 7
76397: ARRAY
76398: PPUSH
76399: CALL_OW 74
76403: PPUSH
76404: CALL_OW 115
// attacking := true ;
76408: LD_ADDR_VAR 0 29
76412: PUSH
76413: LD_INT 1
76415: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
76416: LD_VAR 0 4
76420: PUSH
76421: LD_VAR 0 7
76425: ARRAY
76426: PPUSH
76427: CALL_OW 256
76431: PUSH
76432: LD_INT 500
76434: LESS
76435: IFFALSE 76461
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76437: LD_VAR 0 4
76441: PUSH
76442: LD_VAR 0 7
76446: ARRAY
76447: PPUSH
76448: LD_VAR 0 14
76452: PUSH
76453: LD_INT 1
76455: ARRAY
76456: PPUSH
76457: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
76461: LD_VAR 0 4
76465: PUSH
76466: LD_VAR 0 7
76470: ARRAY
76471: PPUSH
76472: CALL_OW 264
76476: PUSH
76477: LD_INT 49
76479: EQUAL
76480: IFFALSE 76601
// begin if not HasTask ( group [ i ] ) then
76482: LD_VAR 0 4
76486: PUSH
76487: LD_VAR 0 7
76491: ARRAY
76492: PPUSH
76493: CALL_OW 314
76497: NOT
76498: IFFALSE 76601
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
76500: LD_ADDR_VAR 0 9
76504: PUSH
76505: LD_INT 81
76507: PUSH
76508: LD_VAR 0 4
76512: PUSH
76513: LD_VAR 0 7
76517: ARRAY
76518: PPUSH
76519: CALL_OW 255
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PPUSH
76528: CALL_OW 69
76532: PPUSH
76533: LD_VAR 0 4
76537: PUSH
76538: LD_VAR 0 7
76542: ARRAY
76543: PPUSH
76544: CALL_OW 74
76548: ST_TO_ADDR
// if k then
76549: LD_VAR 0 9
76553: IFFALSE 76601
// if GetDistUnits ( group [ i ] , k ) > 10 then
76555: LD_VAR 0 4
76559: PUSH
76560: LD_VAR 0 7
76564: ARRAY
76565: PPUSH
76566: LD_VAR 0 9
76570: PPUSH
76571: CALL_OW 296
76575: PUSH
76576: LD_INT 10
76578: GREATER
76579: IFFALSE 76601
// ComMoveUnit ( group [ i ] , k ) ;
76581: LD_VAR 0 4
76585: PUSH
76586: LD_VAR 0 7
76590: ARRAY
76591: PPUSH
76592: LD_VAR 0 9
76596: PPUSH
76597: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76601: LD_VAR 0 4
76605: PUSH
76606: LD_VAR 0 7
76610: ARRAY
76611: PPUSH
76612: CALL_OW 256
76616: PUSH
76617: LD_INT 250
76619: LESS
76620: PUSH
76621: LD_VAR 0 4
76625: PUSH
76626: LD_VAR 0 7
76630: ARRAY
76631: PUSH
76632: LD_INT 21
76634: PUSH
76635: LD_INT 2
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: LD_INT 23
76644: PUSH
76645: LD_INT 2
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PPUSH
76656: CALL_OW 69
76660: IN
76661: AND
76662: IFFALSE 76787
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
76664: LD_ADDR_VAR 0 9
76668: PUSH
76669: LD_OWVAR 3
76673: PUSH
76674: LD_VAR 0 4
76678: PUSH
76679: LD_VAR 0 7
76683: ARRAY
76684: DIFF
76685: PPUSH
76686: LD_VAR 0 4
76690: PUSH
76691: LD_VAR 0 7
76695: ARRAY
76696: PPUSH
76697: CALL_OW 74
76701: ST_TO_ADDR
// if not k then
76702: LD_VAR 0 9
76706: NOT
76707: IFFALSE 76711
// continue ;
76709: GO 73152
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
76711: LD_VAR 0 9
76715: PUSH
76716: LD_INT 81
76718: PUSH
76719: LD_VAR 0 4
76723: PUSH
76724: LD_VAR 0 7
76728: ARRAY
76729: PPUSH
76730: CALL_OW 255
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PPUSH
76739: CALL_OW 69
76743: IN
76744: PUSH
76745: LD_VAR 0 9
76749: PPUSH
76750: LD_VAR 0 4
76754: PUSH
76755: LD_VAR 0 7
76759: ARRAY
76760: PPUSH
76761: CALL_OW 296
76765: PUSH
76766: LD_INT 5
76768: LESS
76769: AND
76770: IFFALSE 76787
// ComAutodestruct ( group [ i ] ) ;
76772: LD_VAR 0 4
76776: PUSH
76777: LD_VAR 0 7
76781: ARRAY
76782: PPUSH
76783: CALL 71267 0 1
// end ; if f_attack_depot then
76787: LD_VAR 0 25
76791: IFFALSE 76903
// begin k := 6 ;
76793: LD_ADDR_VAR 0 9
76797: PUSH
76798: LD_INT 6
76800: ST_TO_ADDR
// if tmp < k then
76801: LD_VAR 0 14
76805: PUSH
76806: LD_VAR 0 9
76810: LESS
76811: IFFALSE 76823
// k := tmp ;
76813: LD_ADDR_VAR 0 9
76817: PUSH
76818: LD_VAR 0 14
76822: ST_TO_ADDR
// for j = 1 to k do
76823: LD_ADDR_VAR 0 8
76827: PUSH
76828: DOUBLE
76829: LD_INT 1
76831: DEC
76832: ST_TO_ADDR
76833: LD_VAR 0 9
76837: PUSH
76838: FOR_TO
76839: IFFALSE 76901
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
76841: LD_VAR 0 8
76845: PPUSH
76846: CALL_OW 266
76850: PUSH
76851: LD_INT 0
76853: PUSH
76854: LD_INT 1
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: IN
76861: IFFALSE 76899
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
76863: LD_VAR 0 4
76867: PUSH
76868: LD_VAR 0 7
76872: ARRAY
76873: PPUSH
76874: LD_VAR 0 14
76878: PUSH
76879: LD_VAR 0 8
76883: ARRAY
76884: PPUSH
76885: CALL_OW 115
// attacking := true ;
76889: LD_ADDR_VAR 0 29
76893: PUSH
76894: LD_INT 1
76896: ST_TO_ADDR
// break ;
76897: GO 76901
// end ;
76899: GO 76838
76901: POP
76902: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
76903: LD_VAR 0 4
76907: PUSH
76908: LD_VAR 0 7
76912: ARRAY
76913: PPUSH
76914: CALL_OW 302
76918: PUSH
76919: LD_VAR 0 29
76923: NOT
76924: AND
76925: IFFALSE 77247
// begin if GetTag ( group [ i ] ) = 71 then
76927: LD_VAR 0 4
76931: PUSH
76932: LD_VAR 0 7
76936: ARRAY
76937: PPUSH
76938: CALL_OW 110
76942: PUSH
76943: LD_INT 71
76945: EQUAL
76946: IFFALSE 76987
// begin if HasTask ( group [ i ] ) then
76948: LD_VAR 0 4
76952: PUSH
76953: LD_VAR 0 7
76957: ARRAY
76958: PPUSH
76959: CALL_OW 314
76963: IFFALSE 76969
// continue else
76965: GO 73152
76967: GO 76987
// SetTag ( group [ i ] , 0 ) ;
76969: LD_VAR 0 4
76973: PUSH
76974: LD_VAR 0 7
76978: ARRAY
76979: PPUSH
76980: LD_INT 0
76982: PPUSH
76983: CALL_OW 109
// end ; k := 8 ;
76987: LD_ADDR_VAR 0 9
76991: PUSH
76992: LD_INT 8
76994: ST_TO_ADDR
// x := 0 ;
76995: LD_ADDR_VAR 0 10
76999: PUSH
77000: LD_INT 0
77002: ST_TO_ADDR
// if tmp < k then
77003: LD_VAR 0 14
77007: PUSH
77008: LD_VAR 0 9
77012: LESS
77013: IFFALSE 77025
// k := tmp ;
77015: LD_ADDR_VAR 0 9
77019: PUSH
77020: LD_VAR 0 14
77024: ST_TO_ADDR
// for j = 1 to k do
77025: LD_ADDR_VAR 0 8
77029: PUSH
77030: DOUBLE
77031: LD_INT 1
77033: DEC
77034: ST_TO_ADDR
77035: LD_VAR 0 9
77039: PUSH
77040: FOR_TO
77041: IFFALSE 77139
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
77043: LD_VAR 0 14
77047: PUSH
77048: LD_VAR 0 8
77052: ARRAY
77053: PPUSH
77054: CALL_OW 247
77058: PUSH
77059: LD_INT 1
77061: EQUAL
77062: PUSH
77063: LD_VAR 0 14
77067: PUSH
77068: LD_VAR 0 8
77072: ARRAY
77073: PPUSH
77074: CALL_OW 256
77078: PUSH
77079: LD_INT 250
77081: LESS
77082: PUSH
77083: LD_VAR 0 20
77087: AND
77088: PUSH
77089: LD_VAR 0 20
77093: NOT
77094: PUSH
77095: LD_VAR 0 14
77099: PUSH
77100: LD_VAR 0 8
77104: ARRAY
77105: PPUSH
77106: CALL_OW 256
77110: PUSH
77111: LD_INT 250
77113: GREATEREQUAL
77114: AND
77115: OR
77116: AND
77117: IFFALSE 77137
// begin x := tmp [ j ] ;
77119: LD_ADDR_VAR 0 10
77123: PUSH
77124: LD_VAR 0 14
77128: PUSH
77129: LD_VAR 0 8
77133: ARRAY
77134: ST_TO_ADDR
// break ;
77135: GO 77139
// end ;
77137: GO 77040
77139: POP
77140: POP
// if x then
77141: LD_VAR 0 10
77145: IFFALSE 77169
// ComAttackUnit ( group [ i ] , x ) else
77147: LD_VAR 0 4
77151: PUSH
77152: LD_VAR 0 7
77156: ARRAY
77157: PPUSH
77158: LD_VAR 0 10
77162: PPUSH
77163: CALL_OW 115
77167: GO 77193
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
77169: LD_VAR 0 4
77173: PUSH
77174: LD_VAR 0 7
77178: ARRAY
77179: PPUSH
77180: LD_VAR 0 14
77184: PUSH
77185: LD_INT 1
77187: ARRAY
77188: PPUSH
77189: CALL_OW 115
// if not HasTask ( group [ i ] ) then
77193: LD_VAR 0 4
77197: PUSH
77198: LD_VAR 0 7
77202: ARRAY
77203: PPUSH
77204: CALL_OW 314
77208: NOT
77209: IFFALSE 77247
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
77211: LD_VAR 0 4
77215: PUSH
77216: LD_VAR 0 7
77220: ARRAY
77221: PPUSH
77222: LD_VAR 0 14
77226: PPUSH
77227: LD_VAR 0 4
77231: PUSH
77232: LD_VAR 0 7
77236: ARRAY
77237: PPUSH
77238: CALL_OW 74
77242: PPUSH
77243: CALL_OW 115
// end ; end ; end ;
77247: GO 73152
77249: POP
77250: POP
// wait ( 0 0$1 ) ;
77251: LD_INT 35
77253: PPUSH
77254: CALL_OW 67
// until group = [ ] ;
77258: LD_VAR 0 4
77262: PUSH
77263: EMPTY
77264: EQUAL
77265: IFFALSE 73137
// end ;
77267: LD_VAR 0 2
77271: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77272: LD_INT 0
77274: PPUSH
77275: PPUSH
77276: PPUSH
77277: PPUSH
// if not base_units then
77278: LD_VAR 0 1
77282: NOT
77283: IFFALSE 77287
// exit ;
77285: GO 77374
// result := false ;
77287: LD_ADDR_VAR 0 2
77291: PUSH
77292: LD_INT 0
77294: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77295: LD_ADDR_VAR 0 5
77299: PUSH
77300: LD_VAR 0 1
77304: PPUSH
77305: LD_INT 21
77307: PUSH
77308: LD_INT 3
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PPUSH
77315: CALL_OW 72
77319: ST_TO_ADDR
// if not tmp then
77320: LD_VAR 0 5
77324: NOT
77325: IFFALSE 77329
// exit ;
77327: GO 77374
// for i in tmp do
77329: LD_ADDR_VAR 0 3
77333: PUSH
77334: LD_VAR 0 5
77338: PUSH
77339: FOR_IN
77340: IFFALSE 77372
// begin result := EnemyInRange ( i , 22 ) ;
77342: LD_ADDR_VAR 0 2
77346: PUSH
77347: LD_VAR 0 3
77351: PPUSH
77352: LD_INT 22
77354: PPUSH
77355: CALL 70950 0 2
77359: ST_TO_ADDR
// if result then
77360: LD_VAR 0 2
77364: IFFALSE 77370
// exit ;
77366: POP
77367: POP
77368: GO 77374
// end ;
77370: GO 77339
77372: POP
77373: POP
// end ;
77374: LD_VAR 0 2
77378: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77379: LD_INT 0
77381: PPUSH
77382: PPUSH
// if not units then
77383: LD_VAR 0 1
77387: NOT
77388: IFFALSE 77392
// exit ;
77390: GO 77462
// result := [ ] ;
77392: LD_ADDR_VAR 0 3
77396: PUSH
77397: EMPTY
77398: ST_TO_ADDR
// for i in units do
77399: LD_ADDR_VAR 0 4
77403: PUSH
77404: LD_VAR 0 1
77408: PUSH
77409: FOR_IN
77410: IFFALSE 77460
// if GetTag ( i ) = tag then
77412: LD_VAR 0 4
77416: PPUSH
77417: CALL_OW 110
77421: PUSH
77422: LD_VAR 0 2
77426: EQUAL
77427: IFFALSE 77458
// result := Insert ( result , result + 1 , i ) ;
77429: LD_ADDR_VAR 0 3
77433: PUSH
77434: LD_VAR 0 3
77438: PPUSH
77439: LD_VAR 0 3
77443: PUSH
77444: LD_INT 1
77446: PLUS
77447: PPUSH
77448: LD_VAR 0 4
77452: PPUSH
77453: CALL_OW 2
77457: ST_TO_ADDR
77458: GO 77409
77460: POP
77461: POP
// end ;
77462: LD_VAR 0 3
77466: RET
// export function IsDriver ( un ) ; begin
77467: LD_INT 0
77469: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77470: LD_ADDR_VAR 0 2
77474: PUSH
77475: LD_VAR 0 1
77479: PUSH
77480: LD_INT 55
77482: PUSH
77483: EMPTY
77484: LIST
77485: PPUSH
77486: CALL_OW 69
77490: IN
77491: ST_TO_ADDR
// end ;
77492: LD_VAR 0 2
77496: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77497: LD_INT 0
77499: PPUSH
77500: PPUSH
// list := [ ] ;
77501: LD_ADDR_VAR 0 5
77505: PUSH
77506: EMPTY
77507: ST_TO_ADDR
// case d of 0 :
77508: LD_VAR 0 3
77512: PUSH
77513: LD_INT 0
77515: DOUBLE
77516: EQUAL
77517: IFTRUE 77521
77519: GO 77654
77521: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77522: LD_ADDR_VAR 0 5
77526: PUSH
77527: LD_VAR 0 1
77531: PUSH
77532: LD_INT 4
77534: MINUS
77535: PUSH
77536: LD_VAR 0 2
77540: PUSH
77541: LD_INT 4
77543: MINUS
77544: PUSH
77545: LD_INT 2
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: LIST
77552: PUSH
77553: LD_VAR 0 1
77557: PUSH
77558: LD_INT 3
77560: MINUS
77561: PUSH
77562: LD_VAR 0 2
77566: PUSH
77567: LD_INT 1
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: LIST
77574: PUSH
77575: LD_VAR 0 1
77579: PUSH
77580: LD_INT 4
77582: PLUS
77583: PUSH
77584: LD_VAR 0 2
77588: PUSH
77589: LD_INT 4
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: LIST
77596: PUSH
77597: LD_VAR 0 1
77601: PUSH
77602: LD_INT 3
77604: PLUS
77605: PUSH
77606: LD_VAR 0 2
77610: PUSH
77611: LD_INT 3
77613: PLUS
77614: PUSH
77615: LD_INT 5
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: LIST
77622: PUSH
77623: LD_VAR 0 1
77627: PUSH
77628: LD_VAR 0 2
77632: PUSH
77633: LD_INT 4
77635: PLUS
77636: PUSH
77637: LD_INT 0
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: LIST
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: LIST
77650: LIST
77651: ST_TO_ADDR
// end ; 1 :
77652: GO 78352
77654: LD_INT 1
77656: DOUBLE
77657: EQUAL
77658: IFTRUE 77662
77660: GO 77795
77662: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77663: LD_ADDR_VAR 0 5
77667: PUSH
77668: LD_VAR 0 1
77672: PUSH
77673: LD_VAR 0 2
77677: PUSH
77678: LD_INT 4
77680: MINUS
77681: PUSH
77682: LD_INT 3
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: LIST
77689: PUSH
77690: LD_VAR 0 1
77694: PUSH
77695: LD_INT 3
77697: MINUS
77698: PUSH
77699: LD_VAR 0 2
77703: PUSH
77704: LD_INT 3
77706: MINUS
77707: PUSH
77708: LD_INT 2
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: LIST
77715: PUSH
77716: LD_VAR 0 1
77720: PUSH
77721: LD_INT 4
77723: MINUS
77724: PUSH
77725: LD_VAR 0 2
77729: PUSH
77730: LD_INT 1
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: PUSH
77738: LD_VAR 0 1
77742: PUSH
77743: LD_VAR 0 2
77747: PUSH
77748: LD_INT 3
77750: PLUS
77751: PUSH
77752: LD_INT 0
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: LIST
77759: PUSH
77760: LD_VAR 0 1
77764: PUSH
77765: LD_INT 4
77767: PLUS
77768: PUSH
77769: LD_VAR 0 2
77773: PUSH
77774: LD_INT 4
77776: PLUS
77777: PUSH
77778: LD_INT 5
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: LIST
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: ST_TO_ADDR
// end ; 2 :
77793: GO 78352
77795: LD_INT 2
77797: DOUBLE
77798: EQUAL
77799: IFTRUE 77803
77801: GO 77932
77803: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77804: LD_ADDR_VAR 0 5
77808: PUSH
77809: LD_VAR 0 1
77813: PUSH
77814: LD_VAR 0 2
77818: PUSH
77819: LD_INT 3
77821: MINUS
77822: PUSH
77823: LD_INT 3
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: LIST
77830: PUSH
77831: LD_VAR 0 1
77835: PUSH
77836: LD_INT 4
77838: PLUS
77839: PUSH
77840: LD_VAR 0 2
77844: PUSH
77845: LD_INT 4
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: LIST
77852: PUSH
77853: LD_VAR 0 1
77857: PUSH
77858: LD_VAR 0 2
77862: PUSH
77863: LD_INT 4
77865: PLUS
77866: PUSH
77867: LD_INT 0
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: LIST
77874: PUSH
77875: LD_VAR 0 1
77879: PUSH
77880: LD_INT 3
77882: MINUS
77883: PUSH
77884: LD_VAR 0 2
77888: PUSH
77889: LD_INT 1
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: LIST
77896: PUSH
77897: LD_VAR 0 1
77901: PUSH
77902: LD_INT 4
77904: MINUS
77905: PUSH
77906: LD_VAR 0 2
77910: PUSH
77911: LD_INT 4
77913: MINUS
77914: PUSH
77915: LD_INT 2
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: LIST
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: ST_TO_ADDR
// end ; 3 :
77930: GO 78352
77932: LD_INT 3
77934: DOUBLE
77935: EQUAL
77936: IFTRUE 77940
77938: GO 78073
77940: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77941: LD_ADDR_VAR 0 5
77945: PUSH
77946: LD_VAR 0 1
77950: PUSH
77951: LD_INT 3
77953: PLUS
77954: PUSH
77955: LD_VAR 0 2
77959: PUSH
77960: LD_INT 4
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: LIST
77967: PUSH
77968: LD_VAR 0 1
77972: PUSH
77973: LD_INT 4
77975: PLUS
77976: PUSH
77977: LD_VAR 0 2
77981: PUSH
77982: LD_INT 4
77984: PLUS
77985: PUSH
77986: LD_INT 5
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: LIST
77993: PUSH
77994: LD_VAR 0 1
77998: PUSH
77999: LD_INT 4
78001: MINUS
78002: PUSH
78003: LD_VAR 0 2
78007: PUSH
78008: LD_INT 1
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: LIST
78015: PUSH
78016: LD_VAR 0 1
78020: PUSH
78021: LD_VAR 0 2
78025: PUSH
78026: LD_INT 4
78028: MINUS
78029: PUSH
78030: LD_INT 3
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: PUSH
78038: LD_VAR 0 1
78042: PUSH
78043: LD_INT 3
78045: MINUS
78046: PUSH
78047: LD_VAR 0 2
78051: PUSH
78052: LD_INT 3
78054: MINUS
78055: PUSH
78056: LD_INT 2
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: LIST
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: ST_TO_ADDR
// end ; 4 :
78071: GO 78352
78073: LD_INT 4
78075: DOUBLE
78076: EQUAL
78077: IFTRUE 78081
78079: GO 78214
78081: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78082: LD_ADDR_VAR 0 5
78086: PUSH
78087: LD_VAR 0 1
78091: PUSH
78092: LD_VAR 0 2
78096: PUSH
78097: LD_INT 4
78099: PLUS
78100: PUSH
78101: LD_INT 0
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: LIST
78108: PUSH
78109: LD_VAR 0 1
78113: PUSH
78114: LD_INT 3
78116: PLUS
78117: PUSH
78118: LD_VAR 0 2
78122: PUSH
78123: LD_INT 3
78125: PLUS
78126: PUSH
78127: LD_INT 5
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: LIST
78134: PUSH
78135: LD_VAR 0 1
78139: PUSH
78140: LD_INT 4
78142: PLUS
78143: PUSH
78144: LD_VAR 0 2
78148: PUSH
78149: LD_INT 4
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: LIST
78156: PUSH
78157: LD_VAR 0 1
78161: PUSH
78162: LD_VAR 0 2
78166: PUSH
78167: LD_INT 3
78169: MINUS
78170: PUSH
78171: LD_INT 3
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: LIST
78178: PUSH
78179: LD_VAR 0 1
78183: PUSH
78184: LD_INT 4
78186: MINUS
78187: PUSH
78188: LD_VAR 0 2
78192: PUSH
78193: LD_INT 4
78195: MINUS
78196: PUSH
78197: LD_INT 2
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: ST_TO_ADDR
// end ; 5 :
78212: GO 78352
78214: LD_INT 5
78216: DOUBLE
78217: EQUAL
78218: IFTRUE 78222
78220: GO 78351
78222: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78223: LD_ADDR_VAR 0 5
78227: PUSH
78228: LD_VAR 0 1
78232: PUSH
78233: LD_INT 4
78235: MINUS
78236: PUSH
78237: LD_VAR 0 2
78241: PUSH
78242: LD_INT 1
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: LIST
78249: PUSH
78250: LD_VAR 0 1
78254: PUSH
78255: LD_VAR 0 2
78259: PUSH
78260: LD_INT 4
78262: MINUS
78263: PUSH
78264: LD_INT 3
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: LIST
78271: PUSH
78272: LD_VAR 0 1
78276: PUSH
78277: LD_INT 4
78279: PLUS
78280: PUSH
78281: LD_VAR 0 2
78285: PUSH
78286: LD_INT 4
78288: PLUS
78289: PUSH
78290: LD_INT 5
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: LIST
78297: PUSH
78298: LD_VAR 0 1
78302: PUSH
78303: LD_INT 3
78305: PLUS
78306: PUSH
78307: LD_VAR 0 2
78311: PUSH
78312: LD_INT 4
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: LIST
78319: PUSH
78320: LD_VAR 0 1
78324: PUSH
78325: LD_VAR 0 2
78329: PUSH
78330: LD_INT 3
78332: PLUS
78333: PUSH
78334: LD_INT 0
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: LIST
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: ST_TO_ADDR
// end ; end ;
78349: GO 78352
78351: POP
// result := list ;
78352: LD_ADDR_VAR 0 4
78356: PUSH
78357: LD_VAR 0 5
78361: ST_TO_ADDR
// end ;
78362: LD_VAR 0 4
78366: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78367: LD_INT 0
78369: PPUSH
78370: PPUSH
78371: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78372: LD_VAR 0 1
78376: NOT
78377: PUSH
78378: LD_VAR 0 2
78382: PUSH
78383: LD_INT 1
78385: PUSH
78386: LD_INT 2
78388: PUSH
78389: LD_INT 3
78391: PUSH
78392: LD_INT 4
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: LIST
78399: LIST
78400: IN
78401: NOT
78402: OR
78403: IFFALSE 78407
// exit ;
78405: GO 78499
// tmp := [ ] ;
78407: LD_ADDR_VAR 0 5
78411: PUSH
78412: EMPTY
78413: ST_TO_ADDR
// for i in units do
78414: LD_ADDR_VAR 0 4
78418: PUSH
78419: LD_VAR 0 1
78423: PUSH
78424: FOR_IN
78425: IFFALSE 78468
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78427: LD_ADDR_VAR 0 5
78431: PUSH
78432: LD_VAR 0 5
78436: PPUSH
78437: LD_VAR 0 5
78441: PUSH
78442: LD_INT 1
78444: PLUS
78445: PPUSH
78446: LD_VAR 0 4
78450: PPUSH
78451: LD_VAR 0 2
78455: PPUSH
78456: CALL_OW 259
78460: PPUSH
78461: CALL_OW 2
78465: ST_TO_ADDR
78466: GO 78424
78468: POP
78469: POP
// if not tmp then
78470: LD_VAR 0 5
78474: NOT
78475: IFFALSE 78479
// exit ;
78477: GO 78499
// result := SortListByListDesc ( units , tmp ) ;
78479: LD_ADDR_VAR 0 3
78483: PUSH
78484: LD_VAR 0 1
78488: PPUSH
78489: LD_VAR 0 5
78493: PPUSH
78494: CALL_OW 77
78498: ST_TO_ADDR
// end ;
78499: LD_VAR 0 3
78503: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78504: LD_INT 0
78506: PPUSH
78507: PPUSH
78508: PPUSH
// x := GetX ( building ) ;
78509: LD_ADDR_VAR 0 4
78513: PUSH
78514: LD_VAR 0 2
78518: PPUSH
78519: CALL_OW 250
78523: ST_TO_ADDR
// y := GetY ( building ) ;
78524: LD_ADDR_VAR 0 5
78528: PUSH
78529: LD_VAR 0 2
78533: PPUSH
78534: CALL_OW 251
78538: ST_TO_ADDR
// if GetTaskList ( unit ) then
78539: LD_VAR 0 1
78543: PPUSH
78544: CALL_OW 437
78548: IFFALSE 78643
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78550: LD_STRING e
78552: PUSH
78553: LD_VAR 0 1
78557: PPUSH
78558: CALL_OW 437
78562: PUSH
78563: LD_INT 1
78565: ARRAY
78566: PUSH
78567: LD_INT 1
78569: ARRAY
78570: EQUAL
78571: PUSH
78572: LD_VAR 0 4
78576: PUSH
78577: LD_VAR 0 1
78581: PPUSH
78582: CALL_OW 437
78586: PUSH
78587: LD_INT 1
78589: ARRAY
78590: PUSH
78591: LD_INT 2
78593: ARRAY
78594: EQUAL
78595: AND
78596: PUSH
78597: LD_VAR 0 5
78601: PUSH
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 437
78611: PUSH
78612: LD_INT 1
78614: ARRAY
78615: PUSH
78616: LD_INT 3
78618: ARRAY
78619: EQUAL
78620: AND
78621: IFFALSE 78633
// result := true else
78623: LD_ADDR_VAR 0 3
78627: PUSH
78628: LD_INT 1
78630: ST_TO_ADDR
78631: GO 78641
// result := false ;
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_INT 0
78640: ST_TO_ADDR
// end else
78641: GO 78651
// result := false ;
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: LD_INT 0
78650: ST_TO_ADDR
// end ;
78651: LD_VAR 0 3
78655: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78656: LD_INT 0
78658: PPUSH
78659: PPUSH
78660: PPUSH
78661: PPUSH
// if not unit or not area then
78662: LD_VAR 0 1
78666: NOT
78667: PUSH
78668: LD_VAR 0 2
78672: NOT
78673: OR
78674: IFFALSE 78678
// exit ;
78676: GO 78843
// tmp := AreaToList ( area , i ) ;
78678: LD_ADDR_VAR 0 6
78682: PUSH
78683: LD_VAR 0 2
78687: PPUSH
78688: LD_VAR 0 5
78692: PPUSH
78693: CALL_OW 517
78697: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78698: LD_ADDR_VAR 0 5
78702: PUSH
78703: DOUBLE
78704: LD_INT 1
78706: DEC
78707: ST_TO_ADDR
78708: LD_VAR 0 6
78712: PUSH
78713: LD_INT 1
78715: ARRAY
78716: PUSH
78717: FOR_TO
78718: IFFALSE 78833
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78720: LD_ADDR_VAR 0 7
78724: PUSH
78725: LD_VAR 0 6
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: PUSH
78734: LD_VAR 0 5
78738: ARRAY
78739: PUSH
78740: LD_VAR 0 6
78744: PUSH
78745: LD_INT 2
78747: ARRAY
78748: PUSH
78749: LD_VAR 0 5
78753: ARRAY
78754: PUSH
78755: EMPTY
78756: LIST
78757: LIST
78758: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
78759: LD_VAR 0 7
78763: PUSH
78764: LD_INT 1
78766: ARRAY
78767: PPUSH
78768: LD_VAR 0 7
78772: PUSH
78773: LD_INT 2
78775: ARRAY
78776: PPUSH
78777: CALL_OW 428
78781: PUSH
78782: LD_INT 0
78784: EQUAL
78785: IFFALSE 78831
// begin result := true ;
78787: LD_ADDR_VAR 0 4
78791: PUSH
78792: LD_INT 1
78794: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78795: LD_VAR 0 1
78799: PPUSH
78800: LD_VAR 0 7
78804: PUSH
78805: LD_INT 1
78807: ARRAY
78808: PPUSH
78809: LD_VAR 0 7
78813: PUSH
78814: LD_INT 2
78816: ARRAY
78817: PPUSH
78818: LD_VAR 0 3
78822: PPUSH
78823: CALL_OW 48
// exit ;
78827: POP
78828: POP
78829: GO 78843
// end ; end ;
78831: GO 78717
78833: POP
78834: POP
// result := false ;
78835: LD_ADDR_VAR 0 4
78839: PUSH
78840: LD_INT 0
78842: ST_TO_ADDR
// end ;
78843: LD_VAR 0 4
78847: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78848: LD_INT 0
78850: PPUSH
78851: PPUSH
78852: PPUSH
// if not side or side > 8 then
78853: LD_VAR 0 1
78857: NOT
78858: PUSH
78859: LD_VAR 0 1
78863: PUSH
78864: LD_INT 8
78866: GREATER
78867: OR
78868: IFFALSE 78872
// exit ;
78870: GO 79059
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78872: LD_ADDR_VAR 0 4
78876: PUSH
78877: LD_INT 22
78879: PUSH
78880: LD_VAR 0 1
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: PUSH
78889: LD_INT 21
78891: PUSH
78892: LD_INT 3
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: PPUSH
78903: CALL_OW 69
78907: ST_TO_ADDR
// if not tmp then
78908: LD_VAR 0 4
78912: NOT
78913: IFFALSE 78917
// exit ;
78915: GO 79059
// enable_addtolog := true ;
78917: LD_ADDR_OWVAR 81
78921: PUSH
78922: LD_INT 1
78924: ST_TO_ADDR
// AddToLog ( [ ) ;
78925: LD_STRING [
78927: PPUSH
78928: CALL_OW 561
// for i in tmp do
78932: LD_ADDR_VAR 0 3
78936: PUSH
78937: LD_VAR 0 4
78941: PUSH
78942: FOR_IN
78943: IFFALSE 79050
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78945: LD_STRING [
78947: PUSH
78948: LD_VAR 0 3
78952: PPUSH
78953: CALL_OW 266
78957: STR
78958: PUSH
78959: LD_STRING , 
78961: STR
78962: PUSH
78963: LD_VAR 0 3
78967: PPUSH
78968: CALL_OW 250
78972: STR
78973: PUSH
78974: LD_STRING , 
78976: STR
78977: PUSH
78978: LD_VAR 0 3
78982: PPUSH
78983: CALL_OW 251
78987: STR
78988: PUSH
78989: LD_STRING , 
78991: STR
78992: PUSH
78993: LD_VAR 0 3
78997: PPUSH
78998: CALL_OW 254
79002: STR
79003: PUSH
79004: LD_STRING , 
79006: STR
79007: PUSH
79008: LD_VAR 0 3
79012: PPUSH
79013: LD_INT 1
79015: PPUSH
79016: CALL_OW 268
79020: STR
79021: PUSH
79022: LD_STRING , 
79024: STR
79025: PUSH
79026: LD_VAR 0 3
79030: PPUSH
79031: LD_INT 2
79033: PPUSH
79034: CALL_OW 268
79038: STR
79039: PUSH
79040: LD_STRING ],
79042: STR
79043: PPUSH
79044: CALL_OW 561
// end ;
79048: GO 78942
79050: POP
79051: POP
// AddToLog ( ]; ) ;
79052: LD_STRING ];
79054: PPUSH
79055: CALL_OW 561
// end ;
79059: LD_VAR 0 2
79063: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79064: LD_INT 0
79066: PPUSH
79067: PPUSH
79068: PPUSH
79069: PPUSH
79070: PPUSH
// if not area or not rate or not max then
79071: LD_VAR 0 1
79075: NOT
79076: PUSH
79077: LD_VAR 0 2
79081: NOT
79082: OR
79083: PUSH
79084: LD_VAR 0 4
79088: NOT
79089: OR
79090: IFFALSE 79094
// exit ;
79092: GO 79286
// while 1 do
79094: LD_INT 1
79096: IFFALSE 79286
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79098: LD_ADDR_VAR 0 9
79102: PUSH
79103: LD_VAR 0 1
79107: PPUSH
79108: LD_INT 1
79110: PPUSH
79111: CALL_OW 287
79115: PUSH
79116: LD_INT 10
79118: MUL
79119: ST_TO_ADDR
// r := rate / 10 ;
79120: LD_ADDR_VAR 0 7
79124: PUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_INT 10
79132: DIVREAL
79133: ST_TO_ADDR
// time := 1 1$00 ;
79134: LD_ADDR_VAR 0 8
79138: PUSH
79139: LD_INT 2100
79141: ST_TO_ADDR
// if amount < min then
79142: LD_VAR 0 9
79146: PUSH
79147: LD_VAR 0 3
79151: LESS
79152: IFFALSE 79170
// r := r * 2 else
79154: LD_ADDR_VAR 0 7
79158: PUSH
79159: LD_VAR 0 7
79163: PUSH
79164: LD_INT 2
79166: MUL
79167: ST_TO_ADDR
79168: GO 79196
// if amount > max then
79170: LD_VAR 0 9
79174: PUSH
79175: LD_VAR 0 4
79179: GREATER
79180: IFFALSE 79196
// r := r / 2 ;
79182: LD_ADDR_VAR 0 7
79186: PUSH
79187: LD_VAR 0 7
79191: PUSH
79192: LD_INT 2
79194: DIVREAL
79195: ST_TO_ADDR
// time := time / r ;
79196: LD_ADDR_VAR 0 8
79200: PUSH
79201: LD_VAR 0 8
79205: PUSH
79206: LD_VAR 0 7
79210: DIVREAL
79211: ST_TO_ADDR
// if time < 0 then
79212: LD_VAR 0 8
79216: PUSH
79217: LD_INT 0
79219: LESS
79220: IFFALSE 79237
// time := time * - 1 ;
79222: LD_ADDR_VAR 0 8
79226: PUSH
79227: LD_VAR 0 8
79231: PUSH
79232: LD_INT 1
79234: NEG
79235: MUL
79236: ST_TO_ADDR
// wait ( time ) ;
79237: LD_VAR 0 8
79241: PPUSH
79242: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79246: LD_INT 35
79248: PPUSH
79249: LD_INT 875
79251: PPUSH
79252: CALL_OW 12
79256: PPUSH
79257: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79261: LD_INT 1
79263: PPUSH
79264: LD_INT 5
79266: PPUSH
79267: CALL_OW 12
79271: PPUSH
79272: LD_VAR 0 1
79276: PPUSH
79277: LD_INT 1
79279: PPUSH
79280: CALL_OW 55
// end ;
79284: GO 79094
// end ;
79286: LD_VAR 0 5
79290: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79291: LD_INT 0
79293: PPUSH
79294: PPUSH
79295: PPUSH
79296: PPUSH
79297: PPUSH
79298: PPUSH
79299: PPUSH
79300: PPUSH
// if not turrets or not factories then
79301: LD_VAR 0 1
79305: NOT
79306: PUSH
79307: LD_VAR 0 2
79311: NOT
79312: OR
79313: IFFALSE 79317
// exit ;
79315: GO 79624
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79317: LD_ADDR_VAR 0 10
79321: PUSH
79322: LD_INT 5
79324: PUSH
79325: LD_INT 6
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 2
79334: PUSH
79335: LD_INT 4
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: PUSH
79342: LD_INT 3
79344: PUSH
79345: LD_INT 5
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 24
79359: PUSH
79360: LD_INT 25
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 23
79369: PUSH
79370: LD_INT 27
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PUSH
79381: LD_INT 42
79383: PUSH
79384: LD_INT 43
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: PUSH
79391: LD_INT 44
79393: PUSH
79394: LD_INT 46
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: PUSH
79401: LD_INT 45
79403: PUSH
79404: LD_INT 47
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: LIST
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: LIST
79420: ST_TO_ADDR
// result := [ ] ;
79421: LD_ADDR_VAR 0 3
79425: PUSH
79426: EMPTY
79427: ST_TO_ADDR
// for i in turrets do
79428: LD_ADDR_VAR 0 4
79432: PUSH
79433: LD_VAR 0 1
79437: PUSH
79438: FOR_IN
79439: IFFALSE 79622
// begin nat := GetNation ( i ) ;
79441: LD_ADDR_VAR 0 7
79445: PUSH
79446: LD_VAR 0 4
79450: PPUSH
79451: CALL_OW 248
79455: ST_TO_ADDR
// weapon := 0 ;
79456: LD_ADDR_VAR 0 8
79460: PUSH
79461: LD_INT 0
79463: ST_TO_ADDR
// if not nat then
79464: LD_VAR 0 7
79468: NOT
79469: IFFALSE 79473
// continue ;
79471: GO 79438
// for j in list [ nat ] do
79473: LD_ADDR_VAR 0 5
79477: PUSH
79478: LD_VAR 0 10
79482: PUSH
79483: LD_VAR 0 7
79487: ARRAY
79488: PUSH
79489: FOR_IN
79490: IFFALSE 79531
// if GetBWeapon ( i ) = j [ 1 ] then
79492: LD_VAR 0 4
79496: PPUSH
79497: CALL_OW 269
79501: PUSH
79502: LD_VAR 0 5
79506: PUSH
79507: LD_INT 1
79509: ARRAY
79510: EQUAL
79511: IFFALSE 79529
// begin weapon := j [ 2 ] ;
79513: LD_ADDR_VAR 0 8
79517: PUSH
79518: LD_VAR 0 5
79522: PUSH
79523: LD_INT 2
79525: ARRAY
79526: ST_TO_ADDR
// break ;
79527: GO 79531
// end ;
79529: GO 79489
79531: POP
79532: POP
// if not weapon then
79533: LD_VAR 0 8
79537: NOT
79538: IFFALSE 79542
// continue ;
79540: GO 79438
// for k in factories do
79542: LD_ADDR_VAR 0 6
79546: PUSH
79547: LD_VAR 0 2
79551: PUSH
79552: FOR_IN
79553: IFFALSE 79618
// begin weapons := AvailableWeaponList ( k ) ;
79555: LD_ADDR_VAR 0 9
79559: PUSH
79560: LD_VAR 0 6
79564: PPUSH
79565: CALL_OW 478
79569: ST_TO_ADDR
// if not weapons then
79570: LD_VAR 0 9
79574: NOT
79575: IFFALSE 79579
// continue ;
79577: GO 79552
// if weapon in weapons then
79579: LD_VAR 0 8
79583: PUSH
79584: LD_VAR 0 9
79588: IN
79589: IFFALSE 79616
// begin result := [ i , weapon ] ;
79591: LD_ADDR_VAR 0 3
79595: PUSH
79596: LD_VAR 0 4
79600: PUSH
79601: LD_VAR 0 8
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: ST_TO_ADDR
// exit ;
79610: POP
79611: POP
79612: POP
79613: POP
79614: GO 79624
// end ; end ;
79616: GO 79552
79618: POP
79619: POP
// end ;
79620: GO 79438
79622: POP
79623: POP
// end ; end_of_file
79624: LD_VAR 0 3
79628: RET
// export RUAggressivenessLevel , RUWeaponsPool ; export RUMinVehCount , RUMaxVehCount , RUMinSolCount , RUMaxSolCount ; export RUMinBazookaCount , RUMaxBazookaCount ; export ThresholdLvl2 , ThresholdLvl3 , ThresholdLvl4 , ThresholdLvl5 ; export function SetAggressivenessLevel ( level ) ; begin
79629: LD_INT 0
79631: PPUSH
// case level of 1 :
79632: LD_VAR 0 1
79636: PUSH
79637: LD_INT 1
79639: DOUBLE
79640: EQUAL
79641: IFTRUE 79645
79643: GO 79723
79645: POP
// begin RUAggressivenessLevel := 1 ;
79646: LD_ADDR_EXP 97
79650: PUSH
79651: LD_INT 1
79653: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79654: LD_ADDR_EXP 98
79658: PUSH
79659: LD_INT 42
79661: PUSH
79662: LD_INT 43
79664: PUSH
79665: LD_INT 44
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: LIST
79672: ST_TO_ADDR
// RUMinVehCount := 3 ;
79673: LD_ADDR_EXP 99
79677: PUSH
79678: LD_INT 3
79680: ST_TO_ADDR
// RUMaxVehCount := 5 ;
79681: LD_ADDR_EXP 100
79685: PUSH
79686: LD_INT 5
79688: ST_TO_ADDR
// RUMinSolCount := 4 ;
79689: LD_ADDR_EXP 101
79693: PUSH
79694: LD_INT 4
79696: ST_TO_ADDR
// RUMaxSolCount := 5 ;
79697: LD_ADDR_EXP 102
79701: PUSH
79702: LD_INT 5
79704: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
79705: LD_ADDR_EXP 103
79709: PUSH
79710: LD_INT 0
79712: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
79713: LD_ADDR_EXP 104
79717: PUSH
79718: LD_INT 0
79720: ST_TO_ADDR
// end ; 2 :
79721: GO 80084
79723: LD_INT 2
79725: DOUBLE
79726: EQUAL
79727: IFTRUE 79731
79729: GO 79809
79731: POP
// begin RUAggressivenessLevel := 2 ;
79732: LD_ADDR_EXP 97
79736: PUSH
79737: LD_INT 2
79739: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79740: LD_ADDR_EXP 98
79744: PUSH
79745: LD_INT 42
79747: PUSH
79748: LD_INT 43
79750: PUSH
79751: LD_INT 44
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: LIST
79758: ST_TO_ADDR
// RUMinVehCount := 4 ;
79759: LD_ADDR_EXP 99
79763: PUSH
79764: LD_INT 4
79766: ST_TO_ADDR
// RUMaxVehCount := 5 ;
79767: LD_ADDR_EXP 100
79771: PUSH
79772: LD_INT 5
79774: ST_TO_ADDR
// RUMinSolCount := 5 ;
79775: LD_ADDR_EXP 101
79779: PUSH
79780: LD_INT 5
79782: ST_TO_ADDR
// RUMaxSolCount := 6 ;
79783: LD_ADDR_EXP 102
79787: PUSH
79788: LD_INT 6
79790: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
79791: LD_ADDR_EXP 103
79795: PUSH
79796: LD_INT 0
79798: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
79799: LD_ADDR_EXP 104
79803: PUSH
79804: LD_INT 0
79806: ST_TO_ADDR
// end ; 3 :
79807: GO 80084
79809: LD_INT 3
79811: DOUBLE
79812: EQUAL
79813: IFTRUE 79817
79815: GO 79895
79817: POP
// begin RUAggressivenessLevel := 3 ;
79818: LD_ADDR_EXP 97
79822: PUSH
79823: LD_INT 3
79825: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 76 ] ;
79826: LD_ADDR_EXP 98
79830: PUSH
79831: LD_INT 43
79833: PUSH
79834: LD_INT 44
79836: PUSH
79837: LD_INT 76
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: LIST
79844: ST_TO_ADDR
// RUMinVehCount := 4 ;
79845: LD_ADDR_EXP 99
79849: PUSH
79850: LD_INT 4
79852: ST_TO_ADDR
// RUMaxVehCount := 6 ;
79853: LD_ADDR_EXP 100
79857: PUSH
79858: LD_INT 6
79860: ST_TO_ADDR
// RUMinSolCount := 4 ;
79861: LD_ADDR_EXP 101
79865: PUSH
79866: LD_INT 4
79868: ST_TO_ADDR
// RUMaxSolCount := 5 ;
79869: LD_ADDR_EXP 102
79873: PUSH
79874: LD_INT 5
79876: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
79877: LD_ADDR_EXP 103
79881: PUSH
79882: LD_INT 0
79884: ST_TO_ADDR
// RUMaxBazookaCount := 1 ;
79885: LD_ADDR_EXP 104
79889: PUSH
79890: LD_INT 1
79892: ST_TO_ADDR
// end ; 4 :
79893: GO 80084
79895: LD_INT 4
79897: DOUBLE
79898: EQUAL
79899: IFTRUE 79903
79901: GO 79985
79903: POP
// begin RUAggressivenessLevel := 4 ;
79904: LD_ADDR_EXP 97
79908: PUSH
79909: LD_INT 4
79911: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 76 ] ;
79912: LD_ADDR_EXP 98
79916: PUSH
79917: LD_INT 43
79919: PUSH
79920: LD_INT 44
79922: PUSH
79923: LD_INT 45
79925: PUSH
79926: LD_INT 76
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: LIST
79933: LIST
79934: ST_TO_ADDR
// RUMinVehCount := 3 ;
79935: LD_ADDR_EXP 99
79939: PUSH
79940: LD_INT 3
79942: ST_TO_ADDR
// RUMaxVehCount := 5 ;
79943: LD_ADDR_EXP 100
79947: PUSH
79948: LD_INT 5
79950: ST_TO_ADDR
// RUMinSolCount := 4 ;
79951: LD_ADDR_EXP 101
79955: PUSH
79956: LD_INT 4
79958: ST_TO_ADDR
// RUMaxSolCount := 5 ;
79959: LD_ADDR_EXP 102
79963: PUSH
79964: LD_INT 5
79966: ST_TO_ADDR
// RUMinBazookaCount := 1 ;
79967: LD_ADDR_EXP 103
79971: PUSH
79972: LD_INT 1
79974: ST_TO_ADDR
// RUMaxBazookaCount := 2 ;
79975: LD_ADDR_EXP 104
79979: PUSH
79980: LD_INT 2
79982: ST_TO_ADDR
// end ; 5 :
79983: GO 80084
79985: LD_INT 5
79987: DOUBLE
79988: EQUAL
79989: IFTRUE 79993
79991: GO 80083
79993: POP
// begin RUAggressivenessLevel := 5 ;
79994: LD_ADDR_EXP 97
79998: PUSH
79999: LD_INT 5
80001: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 46 , 75 , 76 ] ;
80002: LD_ADDR_EXP 98
80006: PUSH
80007: LD_INT 43
80009: PUSH
80010: LD_INT 44
80012: PUSH
80013: LD_INT 45
80015: PUSH
80016: LD_INT 46
80018: PUSH
80019: LD_INT 75
80021: PUSH
80022: LD_INT 76
80024: PUSH
80025: EMPTY
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: ST_TO_ADDR
// RUMinVehCount := 5 ;
80033: LD_ADDR_EXP 99
80037: PUSH
80038: LD_INT 5
80040: ST_TO_ADDR
// RUMaxVehCount := 7 ;
80041: LD_ADDR_EXP 100
80045: PUSH
80046: LD_INT 7
80048: ST_TO_ADDR
// RUMinSolCount := 6 ;
80049: LD_ADDR_EXP 101
80053: PUSH
80054: LD_INT 6
80056: ST_TO_ADDR
// RUMaxSolCount := 7 ;
80057: LD_ADDR_EXP 102
80061: PUSH
80062: LD_INT 7
80064: ST_TO_ADDR
// RUMinBazookaCount := 2 ;
80065: LD_ADDR_EXP 103
80069: PUSH
80070: LD_INT 2
80072: ST_TO_ADDR
// RUMaxBazookaCount := 3 ;
80073: LD_ADDR_EXP 104
80077: PUSH
80078: LD_INT 3
80080: ST_TO_ADDR
// end ; end ;
80081: GO 80084
80083: POP
// end ;
80084: LD_VAR 0 2
80088: RET
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl2 do
80089: LD_EXP 45
80093: PUSH
80094: LD_EXP 105
80098: LESS
80099: IFFALSE 80111
80101: GO 80103
80103: DISABLE
// SetAggressivenessLevel ( 2 ) ;
80104: LD_INT 2
80106: PPUSH
80107: CALL 79629 0 1
80111: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl3 do
80112: LD_EXP 45
80116: PUSH
80117: LD_EXP 106
80121: LESS
80122: IFFALSE 80134
80124: GO 80126
80126: DISABLE
// SetAggressivenessLevel ( 3 ) ;
80127: LD_INT 3
80129: PPUSH
80130: CALL 79629 0 1
80134: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl4 do
80135: LD_EXP 45
80139: PUSH
80140: LD_EXP 107
80144: LESS
80145: IFFALSE 80157
80147: GO 80149
80149: DISABLE
// SetAggressivenessLevel ( 4 ) ;
80150: LD_INT 4
80152: PPUSH
80153: CALL 79629 0 1
80157: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl5 do
80158: LD_EXP 45
80162: PUSH
80163: LD_EXP 108
80167: LESS
80168: IFFALSE 80180
80170: GO 80172
80172: DISABLE
// SetAggressivenessLevel ( 5 ) ;
80173: LD_INT 5
80175: PPUSH
80176: CALL 79629 0 1
80180: END
