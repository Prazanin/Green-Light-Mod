// export MissionStart ; export RussianAssault ; export RU2_MineBase_FirstAttemptFailed , RU2_MineBase_SecondAttempt ; export EndTime , EndTime2 , TimeOutFirstWarning ; starting begin RandomizeAll ;
   0: CALL_OW 11
// InitMacro ;
   4: CALL 16407 0 0
// PrepareDifficulty ;
   8: CALL 13232 0 0
// PreparePlayerSquad ;
  12: CALL 2218 0 0
// CreatePersonnel ;
  16: CALL 2954 0 0
// CreateAlliedPersonnel ;
  20: CALL 3381 0 0
// SetAggressivenessLevel ( 1 ) ;
  24: LD_INT 1
  26: PPUSH
  27: CALL 79875 0 1
// EndTime = 10 10$00 ;
  31: LD_ADDR_EXP 5
  35: PUSH
  36: LD_INT 21000
  38: ST_TO_ADDR
// EndTime2 = 2 2$00 ;
  39: LD_ADDR_EXP 6
  43: PUSH
  44: LD_INT 4200
  46: ST_TO_ADDR
// Garrison_Buildings ( 3 ) ;
  47: LD_INT 3
  49: PPUSH
  50: CALL 5937 0 1
// Assemble_Barracks ( 3 ) ;
  54: LD_INT 3
  56: PPUSH
  57: CALL 6842 0 1
// Assemble_Armories ( 3 ) ;
  61: LD_INT 3
  63: PPUSH
  64: CALL 7126 0 1
// Fill_Turrets ( 3 ) ;
  68: LD_INT 3
  70: PPUSH
  71: CALL 7585 0 1
// Fill_Bunkers ( 3 ) ;
  75: LD_INT 3
  77: PPUSH
  78: CALL 7424 0 1
// PrepareNature ( 11 , 6 , 22 , 14 , 7 , 0 , 0 , Animals_Area , 0 ) ;
  82: LD_INT 11
  84: PPUSH
  85: LD_INT 6
  87: PPUSH
  88: LD_INT 22
  90: PPUSH
  91: LD_INT 14
  93: PPUSH
  94: LD_INT 7
  96: PPUSH
  97: LD_INT 0
  99: PPUSH
 100: LD_INT 0
 102: PPUSH
 103: LD_INT 17
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL 72096 0 9
// PlaceUnitXY ( Smithy , 125 , 160 , false ) ;
 113: LD_EXP 12
 117: PPUSH
 118: LD_INT 125
 120: PPUSH
 121: LD_INT 160
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: CALL_OW 48
// ComTurnUnit ( Smithy , Simone ) ;
 131: LD_EXP 12
 135: PPUSH
 136: LD_EXP 8
 140: PPUSH
 141: CALL_OW 119
// InGameOn ;
 145: CALL_OW 8
// CenterNowOnUnits ( Sim_Veh ) ;
 149: LD_EXP 18
 153: PPUSH
 154: CALL_OW 87
// ComMoveXY ( [ FilterAllUnits ( [ f_side , 7 ] ) diff Simone ] , 110 , 157 ) ;
 158: LD_INT 22
 160: PUSH
 161: LD_INT 7
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: PPUSH
 168: CALL_OW 69
 172: PUSH
 173: LD_EXP 8
 177: DIFF
 178: PUSH
 179: EMPTY
 180: LIST
 181: PPUSH
 182: LD_INT 110
 184: PPUSH
 185: LD_INT 157
 187: PPUSH
 188: CALL_OW 111
// wait ( 0 0$1 ) ;
 192: LD_INT 35
 194: PPUSH
 195: CALL_OW 67
// ComMoveXY ( Simone , 120 , 160 ) ;
 199: LD_EXP 8
 203: PPUSH
 204: LD_INT 120
 206: PPUSH
 207: LD_INT 160
 209: PPUSH
 210: CALL_OW 111
// wait ( 0 0$1 ) ;
 214: LD_INT 35
 216: PPUSH
 217: CALL_OW 67
// repeat begin CenterNowOnUnits ( Sim_Veh ) ;
 221: LD_EXP 18
 225: PPUSH
 226: CALL_OW 87
// wait ( 0 0$1 ) ;
 230: LD_INT 35
 232: PPUSH
 233: CALL_OW 67
// end until IsInArea ( Simone , AM_Base_Area ) ;
 237: LD_EXP 8
 241: PPUSH
 242: LD_INT 10
 244: PPUSH
 245: CALL_OW 308
 249: IFFALSE 221
// ComExitVehicle ( Simone ) ;
 251: LD_EXP 8
 255: PPUSH
 256: CALL_OW 121
// wait ( 0 0$1 ) ;
 260: LD_INT 35
 262: PPUSH
 263: CALL_OW 67
// ComMoveXY ( Simone , 124 , 160 ) ;
 267: LD_EXP 8
 271: PPUSH
 272: LD_INT 124
 274: PPUSH
 275: LD_INT 160
 277: PPUSH
 278: CALL_OW 111
// AddComTurnUnit ( Simone , Smithy ) ;
 282: LD_EXP 8
 286: PPUSH
 287: LD_EXP 12
 291: PPUSH
 292: CALL_OW 179
// wait ( 0 0$7 ) ;
 296: LD_INT 245
 298: PPUSH
 299: CALL_OW 67
// CenterNowOnUnits ( Simone ) ;
 303: LD_EXP 8
 307: PPUSH
 308: CALL_OW 87
// Say ( Simone , D1-Simone-1 ) ;
 312: LD_EXP 8
 316: PPUSH
 317: LD_STRING D1-Simone-1
 319: PPUSH
 320: CALL_OW 88
// Say ( Smithy , D1-Smithy-1 ) ;
 324: LD_EXP 12
 328: PPUSH
 329: LD_STRING D1-Smithy-1
 331: PPUSH
 332: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 336: LD_EXP 8
 340: PPUSH
 341: LD_STRING D1-Simone-2
 343: PPUSH
 344: CALL_OW 88
// Say ( Smithy , D1-Smithy-2 ) ;
 348: LD_EXP 12
 352: PPUSH
 353: LD_STRING D1-Smithy-2
 355: PPUSH
 356: CALL_OW 88
// Say ( Simone , D1-Simone-3 ) ;
 360: LD_EXP 8
 364: PPUSH
 365: LD_STRING D1-Simone-3
 367: PPUSH
 368: CALL_OW 88
// Say ( Smithy , D1-Smithy-3 ) ;
 372: LD_EXP 12
 376: PPUSH
 377: LD_STRING D1-Smithy-3
 379: PPUSH
 380: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 384: LD_EXP 8
 388: PPUSH
 389: LD_STRING D1-Simone-4
 391: PPUSH
 392: CALL_OW 88
// Say ( Smithy , D1-Smithy-4 ) ;
 396: LD_EXP 12
 400: PPUSH
 401: LD_STRING D1-Smithy-4
 403: PPUSH
 404: CALL_OW 88
// ComEnterUnit ( Simone , Sim_Veh ) ;
 408: LD_EXP 8
 412: PPUSH
 413: LD_EXP 18
 417: PPUSH
 418: CALL_OW 120
// AddComMoveXY ( FilterAllUnits ( [ f_side , 7 ] ) , 149 , 195 ) ;
 422: LD_INT 22
 424: PUSH
 425: LD_INT 7
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PPUSH
 437: LD_INT 149
 439: PPUSH
 440: LD_INT 195
 442: PPUSH
 443: CALL_OW 171
// wait ( 0 0$5 ) ;
 447: LD_INT 175
 449: PPUSH
 450: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
 454: LD_STRING M1
 456: PPUSH
 457: CALL_OW 337
// ComEnterUnit ( Smithy , AM_Depot ) ;
 461: LD_EXP 12
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL_OW 120
// InGameOff ;
 473: CALL_OW 9
// SetSide ( MnBase , 7 ) ;
 477: LD_INT 157
 479: PPUSH
 480: LD_INT 7
 482: PPUSH
 483: CALL_OW 235
// MissionStart = true ;
 487: LD_ADDR_EXP 1
 491: PUSH
 492: LD_INT 1
 494: ST_TO_ADDR
// SaveForQuickRestart ;
 495: CALL_OW 22
// end ;
 499: END
// every 0 0$1 trigger MissionStart do
 500: LD_EXP 1
 504: IFFALSE 624
 506: GO 508
 508: DISABLE
// begin Wait ( 11 11$0 ) ;
 509: LD_INT 23100
 511: PPUSH
 512: CALL_OW 67
// Say ( Simone , D2a-Simone-1 ) ;
 516: LD_EXP 8
 520: PPUSH
 521: LD_STRING D2a-Simone-1
 523: PPUSH
 524: CALL_OW 88
// Say ( Smithy , D2a-Smithy-1 ) ;
 528: LD_EXP 12
 532: PPUSH
 533: LD_STRING D2a-Smithy-1
 535: PPUSH
 536: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 540: LD_EXP 8
 544: PPUSH
 545: LD_STRING D2a-Simone-2
 547: PPUSH
 548: CALL_OW 88
// Say ( Smithy , D2a-Smithy-2 ) ;
 552: LD_EXP 12
 556: PPUSH
 557: LD_STRING D2a-Smithy-2
 559: PPUSH
 560: CALL_OW 88
// Say ( Smithy , D2a-Smithy-3 ) ;
 564: LD_EXP 12
 568: PPUSH
 569: LD_STRING D2a-Smithy-3
 571: PPUSH
 572: CALL_OW 88
// Say ( Simone , D2a-Simone-3 ) ;
 576: LD_EXP 8
 580: PPUSH
 581: LD_STRING D2a-Simone-3
 583: PPUSH
 584: CALL_OW 88
// Say ( Smithy , D2a-Smithy-4 ) ;
 588: LD_EXP 12
 592: PPUSH
 593: LD_STRING D2a-Smithy-4
 595: PPUSH
 596: CALL_OW 88
// Say ( Smithy , D2a-Smithy-5 ) ;
 600: LD_EXP 12
 604: PPUSH
 605: LD_STRING D2a-Smithy-5
 607: PPUSH
 608: CALL_OW 88
// Say ( Smithy , D2a-Smithy-6 ) ;
 612: LD_EXP 12
 616: PPUSH
 617: LD_STRING D2a-Smithy-6
 619: PPUSH
 620: CALL_OW 88
// end ;
 624: END
// every 0 0$1 trigger See ( 1 , RU2_SibMine ) do
 625: LD_INT 1
 627: PPUSH
 628: LD_EXP 38
 632: PPUSH
 633: CALL_OW 292
 637: IFFALSE 654
 639: GO 641
 641: DISABLE
// begin Say ( Simone , D2-Simone-1a ) ;
 642: LD_EXP 8
 646: PPUSH
 647: LD_STRING D2-Simone-1a
 649: PPUSH
 650: CALL_OW 88
// end ;
 654: END
// every 0 0$1 trigger MissionStart do var Edmonds_Car ;
 655: LD_EXP 1
 659: IFFALSE 927
 661: GO 663
 663: DISABLE
 664: LD_INT 0
 666: PPUSH
// begin Wait ( 17 17$0 ) ;
 667: LD_INT 35700
 669: PPUSH
 670: CALL_OW 67
// uc_side = 1 ;
 674: LD_ADDR_OWVAR 20
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// uc_nation := nation_american ;
 682: LD_ADDR_OWVAR 21
 686: PUSH
 687: LD_INT 1
 689: ST_TO_ADDR
// vc_chassis := us_light_wheeled ;
 690: LD_ADDR_OWVAR 37
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// vc_engine := engine_combustion ;
 698: LD_ADDR_OWVAR 39
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
 706: LD_ADDR_OWVAR 40
 710: PUSH
 711: LD_INT 2
 713: ST_TO_ADDR
// vc_control := control_manual ;
 714: LD_ADDR_OWVAR 38
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// Edmonds_Car := CreateVehicle ;
 722: LD_ADDR_VAR 0 1
 726: PUSH
 727: CALL_OW 45
 731: ST_TO_ADDR
// PlaceHumanInUnit ( Edmonds , Edmonds_Car ) ;
 732: LD_EXP 14
 736: PPUSH
 737: LD_VAR 0 1
 741: PPUSH
 742: CALL_OW 52
// PlaceUnitArea ( Edmonds_Car , AM_Start , false ) ;
 746: LD_VAR 0 1
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// ComMoveXY ( Edmonds , 159 , 207 ) ;
 761: LD_EXP 14
 765: PPUSH
 766: LD_INT 159
 768: PPUSH
 769: LD_INT 207
 771: PPUSH
 772: CALL_OW 111
// AddComExitVehicle ( Edmonds ) ;
 776: LD_EXP 14
 780: PPUSH
 781: CALL_OW 181
// Wait ( 0 0$20 ) ;
 785: LD_INT 700
 787: PPUSH
 788: CALL_OW 67
// Say ( Simone , D3-Simone-1 ) ;
 792: LD_EXP 8
 796: PPUSH
 797: LD_STRING D3-Simone-1
 799: PPUSH
 800: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
 804: LD_EXP 14
 808: PPUSH
 809: LD_STRING D3-Edmonds-1
 811: PPUSH
 812: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
 816: LD_EXP 14
 820: PPUSH
 821: LD_STRING D3-Edmonds-2
 823: PPUSH
 824: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
 828: LD_EXP 8
 832: PPUSH
 833: LD_STRING D3-Simone-2
 835: PPUSH
 836: CALL_OW 88
// SetSide ( Edmonds , 7 ) ;
 840: LD_EXP 14
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: CALL_OW 235
// SetTech ( tech_LasDouble , 7 , state_enabled ) ;
 852: LD_INT 14
 854: PPUSH
 855: LD_INT 7
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 322
// ChangeMissionObjectives ( M1a ) ;
 865: LD_STRING M1a
 867: PPUSH
 868: CALL_OW 337
// Wait ( 0 0$40 ) ;
 872: LD_INT 1400
 874: PPUSH
 875: CALL_OW 67
// Say ( Simone , D3a-Simone-1 ) ;
 879: LD_EXP 8
 883: PPUSH
 884: LD_STRING D3a-Simone-1
 886: PPUSH
 887: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-1 ) ;
 891: LD_EXP 14
 895: PPUSH
 896: LD_STRING D3a-Edmonds-1
 898: PPUSH
 899: CALL_OW 88
// Say ( Simone , D3a-Simone-2 ) ;
 903: LD_EXP 8
 907: PPUSH
 908: LD_STRING D3a-Simone-2
 910: PPUSH
 911: CALL_OW 88
// Say ( Edmonds , D3a-Edmonds-2 ) ;
 915: LD_EXP 14
 919: PPUSH
 920: LD_STRING D3a-Edmonds-2
 922: PPUSH
 923: CALL_OW 88
// end ;
 927: PPOPN 1
 929: END
// every 0 0$1 trigger MissionStart do
 930: LD_EXP 1
 934: IFFALSE 1233
 936: GO 938
 938: DISABLE
// begin Wait ( 19 19$30 ) ;
 939: LD_INT 40950
 941: PPUSH
 942: CALL_OW 67
// PlaceUnitXYR ( Stone , 137 , 107 , 5 , false ) ;
 946: LD_EXP 13
 950: PPUSH
 951: LD_INT 137
 953: PPUSH
 954: LD_INT 107
 956: PPUSH
 957: LD_INT 5
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: CALL_OW 50
// ComMoveXY ( Stone , 128 , 162 ) ;
 967: LD_EXP 13
 971: PPUSH
 972: LD_INT 128
 974: PPUSH
 975: LD_INT 162
 977: PPUSH
 978: CALL_OW 111
// repeat Wait ( 0 0$1 ) ;
 982: LD_INT 35
 984: PPUSH
 985: CALL_OW 67
// until IsInArea ( Stone , AM_Base_Area ) ;
 989: LD_EXP 13
 993: PPUSH
 994: LD_INT 10
 996: PPUSH
 997: CALL_OW 308
1001: IFFALSE 982
// DialogueOn ;
1003: CALL_OW 6
// CenterOnUnits ( Stone ) ;
1007: LD_EXP 13
1011: PPUSH
1012: CALL_OW 85
// Say ( Smithy , D4-Smithy-1 ) ;
1016: LD_EXP 12
1020: PPUSH
1021: LD_STRING D4-Smithy-1
1023: PPUSH
1024: CALL_OW 88
// DWait ( 0 0$1 ) ;
1028: LD_INT 35
1030: PPUSH
1031: CALL_OW 68
// Say ( Stone , D4-Stone-1 ) ;
1035: LD_EXP 13
1039: PPUSH
1040: LD_STRING D4-Stone-1
1042: PPUSH
1043: CALL_OW 88
// Say ( Smithy , D4-Smithy-2 ) ;
1047: LD_EXP 12
1051: PPUSH
1052: LD_STRING D4-Smithy-2
1054: PPUSH
1055: CALL_OW 88
// DWait ( 0 0$1 ) ;
1059: LD_INT 35
1061: PPUSH
1062: CALL_OW 68
// Say ( Simone , D4-Simone-1 ) ;
1066: LD_EXP 8
1070: PPUSH
1071: LD_STRING D4-Simone-1
1073: PPUSH
1074: CALL_OW 88
// Say ( Stone , D4-Stone-2 ) ;
1078: LD_EXP 13
1082: PPUSH
1083: LD_STRING D4-Stone-2
1085: PPUSH
1086: CALL_OW 88
// Say ( Simone , D4-Simone-2 ) ;
1090: LD_EXP 8
1094: PPUSH
1095: LD_STRING D4-Simone-2
1097: PPUSH
1098: CALL_OW 88
// Say ( Stone , D4-Stone-3 ) ;
1102: LD_EXP 13
1106: PPUSH
1107: LD_STRING D4-Stone-3
1109: PPUSH
1110: CALL_OW 88
// Say ( Simone , D4-Simone-3 ) ;
1114: LD_EXP 8
1118: PPUSH
1119: LD_STRING D4-Simone-3
1121: PPUSH
1122: CALL_OW 88
// Say ( Stone , D4-Stone-4 ) ;
1126: LD_EXP 13
1130: PPUSH
1131: LD_STRING D4-Stone-4
1133: PPUSH
1134: CALL_OW 88
// Say ( Simone , D4-Simone-4 ) ;
1138: LD_EXP 8
1142: PPUSH
1143: LD_STRING D4-Simone-4
1145: PPUSH
1146: CALL_OW 88
// ChangeMissionObjectives ( M1b ) ;
1150: LD_STRING M1b
1152: PPUSH
1153: CALL_OW 337
// SetSide ( Stone , 7 ) ;
1157: LD_EXP 13
1161: PPUSH
1162: LD_INT 7
1164: PPUSH
1165: CALL_OW 235
// Say ( Simone , D4c-Simone-1 ) ;
1169: LD_EXP 8
1173: PPUSH
1174: LD_STRING D4c-Simone-1
1176: PPUSH
1177: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-1 ) ;
1181: LD_EXP 15
1185: PPUSH
1186: LD_STRING D4c-Barnes-1
1188: PPUSH
1189: CALL_OW 94
// Say ( Simone , D4c-Simone-2 ) ;
1193: LD_EXP 8
1197: PPUSH
1198: LD_STRING D4c-Simone-2
1200: PPUSH
1201: CALL_OW 88
// SayRadio ( Barnes , D4c-Barnes-2 ) ;
1205: LD_EXP 15
1209: PPUSH
1210: LD_STRING D4c-Barnes-2
1212: PPUSH
1213: CALL_OW 94
// Say ( Simone , D4c-Simone-3 ) ;
1217: LD_EXP 8
1221: PPUSH
1222: LD_STRING D4c-Simone-3
1224: PPUSH
1225: CALL_OW 88
// DialogueOff ;
1229: CALL_OW 7
// end ;
1233: END
// every 0 0$1 trigger MissionStart do var Squad ;
1234: LD_EXP 1
1238: IFFALSE 1487
1240: GO 1242
1242: DISABLE
1243: LD_INT 0
1245: PPUSH
// begin Wait ( 21 21$0 ) ;
1246: LD_INT 44100
1248: PPUSH
1249: CALL_OW 67
// RussianAssault = true ;
1253: LD_ADDR_EXP 2
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// RussianFirstAssault ;
1261: CALL 7741 0 0
// Wait ( 0 0$30 ) ;
1265: LD_INT 1050
1267: PPUSH
1268: CALL_OW 67
// Squad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ Simone , Kathryn , Miller ] ;
1272: LD_ADDR_VAR 0 1
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_INT 7
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 2
1289: PUSH
1290: LD_INT 25
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 25
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: LD_INT 25
1312: PUSH
1313: LD_INT 3
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: PUSH
1320: LD_INT 25
1322: PUSH
1323: LD_INT 4
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 25
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: PUSH
1357: LD_EXP 8
1361: PUSH
1362: LD_EXP 9
1366: PUSH
1367: LD_EXP 10
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: DIFF
1377: ST_TO_ADDR
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2b-Sol-1 , D2b-FemSol-1 ) ;
1378: LD_VAR 0 1
1382: PUSH
1383: LD_INT 1
1385: PPUSH
1386: LD_VAR 0 1
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_STRING D2b-Sol-1
1399: PPUSH
1400: LD_STRING D2b-FemSol-1
1402: PPUSH
1403: CALL 7690 0 3
// Say ( Simone , D2b-Simone-1 ) ;
1407: LD_EXP 8
1411: PPUSH
1412: LD_STRING D2b-Simone-1
1414: PPUSH
1415: CALL_OW 88
// Wait ( 1 1$20 ) ;
1419: LD_INT 2800
1421: PPUSH
1422: CALL_OW 67
// DialogueOn ;
1426: CALL_OW 6
// SaySex ( Squad [ Rand ( 1 , Squad ) ] , D2c-Sol-1 , D2c-FemSol-1 ) ;
1430: LD_VAR 0 1
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 12
1447: ARRAY
1448: PPUSH
1449: LD_STRING D2c-Sol-1
1451: PPUSH
1452: LD_STRING D2c-FemSol-1
1454: PPUSH
1455: CALL 7690 0 3
// Say ( Smithy , D2c-Smithy-1 ) ;
1459: LD_EXP 12
1463: PPUSH
1464: LD_STRING D2c-Smithy-1
1466: PPUSH
1467: CALL_OW 88
// Say ( Simone , D2c-Simone-1 ) ;
1471: LD_EXP 8
1475: PPUSH
1476: LD_STRING D2c-Simone-1
1478: PPUSH
1479: CALL_OW 88
// DialogueOff ;
1483: CALL_OW 7
// end ;
1487: PPOPN 1
1489: END
// every 0 0$1 trigger MissionStart do
1490: LD_EXP 1
1494: IFFALSE 1847
1496: GO 1498
1498: DISABLE
// begin Wait ( 54 54$0 ) ;
1499: LD_INT 113400
1501: PPUSH
1502: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_E ) ;
1506: LD_INT 8
1508: PPUSH
1509: LD_INT 2
1511: PPUSH
1512: LD_INT 4
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: LD_INT 0
1526: PPUSH
1527: LD_INT 6
1529: PPUSH
1530: LD_INT 7
1532: PPUSH
1533: CALL 5359 0 9
// Wait ( 0 0$15 ) ;
1537: LD_INT 525
1539: PPUSH
1540: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 3 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1544: LD_INT 7
1546: PPUSH
1547: LD_INT 8
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 5
1555: PPUSH
1556: LD_INT 2
1558: PPUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: PPUSH
1573: LD_INT 1
1575: PPUSH
1576: EMPTY
1577: PPUSH
1578: LD_INT 25
1580: PUSH
1581: LD_INT 26
1583: PUSH
1584: LD_INT 27
1586: PUSH
1587: LD_INT 28
1589: PUSH
1590: LD_INT 72
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PPUSH
1600: EMPTY
1601: PPUSH
1602: CALL 3875 0 10
// Wait ( 0 0$45 ) ;
1606: LD_INT 1575
1608: PPUSH
1609: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 3 , 0 , 0 , 0 , 0 , 6 , GU_Spawn_S ) ;
1613: LD_INT 8
1615: PPUSH
1616: LD_INT 2
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: LD_INT 0
1633: PPUSH
1634: LD_INT 6
1636: PPUSH
1637: LD_INT 6
1639: PPUSH
1640: CALL 5359 0 9
// Wait ( 5 5$25 ) ;
1644: LD_INT 11375
1646: PPUSH
1647: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 5 , 0 , 0 , 2 , 0 , 6 , GU_Spawn_E ) ;
1651: LD_INT 8
1653: PPUSH
1654: LD_INT 2
1656: PPUSH
1657: LD_INT 5
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: LD_INT 2
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 6
1674: PPUSH
1675: LD_INT 7
1677: PPUSH
1678: CALL 5359 0 9
// Wait ( 0 0$25 ) ;
1682: LD_INT 875
1684: PPUSH
1685: CALL_OW 67
// RespawnAttackVehicle ( GU_Spawn_E , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 , 72 ] , [ ] ) ;
1689: LD_INT 7
1691: PPUSH
1692: LD_INT 8
1694: PPUSH
1695: LD_INT 2
1697: PPUSH
1698: LD_INT 5
1700: PPUSH
1701: LD_INT 2
1703: PPUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 3
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: EMPTY
1722: PPUSH
1723: LD_INT 25
1725: PUSH
1726: LD_INT 26
1728: PUSH
1729: LD_INT 27
1731: PUSH
1732: LD_INT 28
1734: PUSH
1735: LD_INT 72
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PPUSH
1745: EMPTY
1746: PPUSH
1747: CALL 3875 0 10
// Wait ( 0 0$10 ) ;
1751: LD_INT 350
1753: PPUSH
1754: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 4 , 0 , 0 , 1 , 0 , 6 , GU_Spawn_S ) ;
1758: LD_INT 8
1760: PPUSH
1761: LD_INT 2
1763: PPUSH
1764: LD_INT 4
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: LD_INT 6
1781: PPUSH
1782: LD_INT 6
1784: PPUSH
1785: CALL 5359 0 9
// RespawnAttackVehicle ( GU_Spawn_S , 8 , 2 , 5 , 2 , [ 1 , 2 , 3 ] , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] ) ;
1789: LD_INT 6
1791: PPUSH
1792: LD_INT 8
1794: PPUSH
1795: LD_INT 2
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: LD_INT 2
1803: PPUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: LD_INT 3
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: EMPTY
1822: PPUSH
1823: LD_INT 25
1825: PUSH
1826: LD_INT 26
1828: PUSH
1829: LD_INT 27
1831: PUSH
1832: LD_INT 28
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PPUSH
1841: EMPTY
1842: PPUSH
1843: CALL 3875 0 10
// end ;
1847: END
// every 0 0$1 trigger RusMainAttacks = 0 do
1848: LD_EXP 45
1852: PUSH
1853: LD_INT 0
1855: EQUAL
1856: IFFALSE 2007
1858: GO 1860
1860: DISABLE
// begin Wait ( 5 5$0 ) ;
1861: LD_INT 10500
1863: PPUSH
1864: CALL_OW 67
// SayRadio ( Barnes , D4b-Barnes-1 ) ;
1868: LD_EXP 15
1872: PPUSH
1873: LD_STRING D4b-Barnes-1
1875: PPUSH
1876: CALL_OW 94
// Say ( Simone , D4b-Simone-1 ) ;
1880: LD_EXP 8
1884: PPUSH
1885: LD_STRING D4b-Simone-1
1887: PPUSH
1888: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-2 ) ;
1892: LD_EXP 15
1896: PPUSH
1897: LD_STRING D4b-Barnes-2
1899: PPUSH
1900: CALL_OW 94
// Say ( Simone , D4b-Simone-2 ) ;
1904: LD_EXP 8
1908: PPUSH
1909: LD_STRING D4b-Simone-2
1911: PPUSH
1912: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-3 ) ;
1916: LD_EXP 15
1920: PPUSH
1921: LD_STRING D4b-Barnes-3
1923: PPUSH
1924: CALL_OW 94
// Say ( Simone , D4b-Simone-3 ) ;
1928: LD_EXP 8
1932: PPUSH
1933: LD_STRING D4b-Simone-3
1935: PPUSH
1936: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-4 ) ;
1940: LD_EXP 15
1944: PPUSH
1945: LD_STRING D4b-Barnes-4
1947: PPUSH
1948: CALL_OW 94
// Say ( Simone , D4b-Simone-4 ) ;
1952: LD_EXP 8
1956: PPUSH
1957: LD_STRING D4b-Simone-4
1959: PPUSH
1960: CALL_OW 88
// SayRadio ( Barnes , D4b-Barnes-5 ) ;
1964: LD_EXP 15
1968: PPUSH
1969: LD_STRING D4b-Barnes-5
1971: PPUSH
1972: CALL_OW 94
// Say ( Simone , D4b-Simone-5 ) ;
1976: LD_EXP 8
1980: PPUSH
1981: LD_STRING D4b-Simone-5
1983: PPUSH
1984: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
1988: LD_STRING M3
1990: PPUSH
1991: CALL_OW 337
// RU3_Baterie_Prepare ;
1995: CALL 8947 0 0
// AfterOffensive = true ;
1999: LD_ADDR_EXP 53
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// end ;
2007: END
// every 0 0$1 trigger AfterOffensive do
2008: LD_EXP 53
2012: IFFALSE 2050
2014: GO 2016
2016: DISABLE
// begin wait ( RU3RocketBatteryActivation ) ;
2017: LD_EXP 48
2021: PPUSH
2022: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
2026: LD_EXP 30
2030: PUSH
2031: LD_INT 0
2033: GREATER
2034: PUSH
2035: LD_EXP 29
2039: PUSH
2040: LD_INT 0
2042: GREATER
2043: AND
2044: IFFALSE 2050
// RU3BaterieMovement ;
2046: CALL 9445 0 0
// end ;
2050: END
// every 0 0$1 trigger AfterOffensive and RU3BaterieTimeOut and ( See ( 7 , RU3_BaterieVehs [ 1 ] ) or See ( 7 , RU3_BaterieVehs [ 2 ] ) or See ( 7 , RU3_BaterieVehs [ 3 ] ) or See ( 7 , RU3_BaterieVehs [ 4 ] ) or See ( 7 , RU3_BaterieVehs [ 5 ] ) ) do
2051: LD_EXP 53
2055: PUSH
2056: LD_EXP 31
2060: AND
2061: PUSH
2062: LD_INT 7
2064: PPUSH
2065: LD_EXP 29
2069: PUSH
2070: LD_INT 1
2072: ARRAY
2073: PPUSH
2074: CALL_OW 292
2078: PUSH
2079: LD_INT 7
2081: PPUSH
2082: LD_EXP 29
2086: PUSH
2087: LD_INT 2
2089: ARRAY
2090: PPUSH
2091: CALL_OW 292
2095: OR
2096: PUSH
2097: LD_INT 7
2099: PPUSH
2100: LD_EXP 29
2104: PUSH
2105: LD_INT 3
2107: ARRAY
2108: PPUSH
2109: CALL_OW 292
2113: OR
2114: PUSH
2115: LD_INT 7
2117: PPUSH
2118: LD_EXP 29
2122: PUSH
2123: LD_INT 4
2125: ARRAY
2126: PPUSH
2127: CALL_OW 292
2131: OR
2132: PUSH
2133: LD_INT 7
2135: PPUSH
2136: LD_EXP 29
2140: PUSH
2141: LD_INT 5
2143: ARRAY
2144: PPUSH
2145: CALL_OW 292
2149: OR
2150: AND
2151: IFFALSE 2168
2153: GO 2155
2155: DISABLE
// begin Say ( Simone , D6-Simone-1a ) end ;
2156: LD_EXP 8
2160: PPUSH
2161: LD_STRING D6-Simone-1a
2163: PPUSH
2164: CALL_OW 88
2168: END
// every 0 0$1 trigger AfterOffensive and ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut do
2169: LD_EXP 53
2173: PUSH
2174: LD_EXP 30
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: PUSH
2183: LD_EXP 29
2187: PUSH
2188: LD_INT 0
2190: EQUAL
2191: OR
2192: AND
2193: PUSH
2194: LD_EXP 31
2198: NOT
2199: AND
2200: IFFALSE 2217
2202: GO 2204
2204: DISABLE
// begin Say ( Simone , D6-Simone-1 ) ;
2205: LD_EXP 8
2209: PPUSH
2210: LD_STRING D6-Simone-1
2212: PPUSH
2213: CALL_OW 88
// end ; end_of_file
2217: END
// export Simone , Kathryn , Miller , Loghain , Smithy , Stone , Edmonds , Barnes , AMSurvivors , Selected_americans ; export Sim_Veh , Kat_Veh , Mil_Veh ; export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function PreparePlayerSquad ( ) ; var i , veh ; begin
2218: LD_INT 0
2220: PPUSH
2221: PPUSH
2222: PPUSH
// uc_side := 7 ;
2223: LD_ADDR_OWVAR 20
2227: PUSH
2228: LD_INT 7
2230: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
2231: LD_ADDR_EXP 8
2235: PUSH
2236: LD_STRING Simone
2238: PPUSH
2239: CALL_OW 34
2243: ST_TO_ADDR
// Kathryn = CreateCharacter ( Kathryn ) ;
2244: LD_ADDR_EXP 9
2248: PUSH
2249: LD_STRING Kathryn
2251: PPUSH
2252: CALL_OW 34
2256: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
2257: LD_ADDR_EXP 10
2261: PUSH
2262: LD_STRING Miller
2264: PPUSH
2265: CALL_OW 34
2269: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM01_Survivors ) ;
2270: LD_ADDR_EXP 16
2274: PUSH
2275: LD_STRING AM01_Survivors
2277: PPUSH
2278: CALL_OW 31
2282: ST_TO_ADDR
// Selected_americans = CharacterSelection (  , 11 , 11 , [ sel_hired , sel_not_changeable , sel_change_class , Simone , Kathryn , Miller , sel_not_hired , sel_changeable , sel_ignore_class_nation , sel_change_class ] ^ AMSurvivors , [ [ class_engineer , 1 ] , class_soldier , class_scientistic , class_mechanic ] ) ;
2283: LD_ADDR_EXP 17
2287: PUSH
2288: LD_STRING 
2290: PPUSH
2291: LD_INT 11
2293: PPUSH
2294: LD_INT 11
2296: PPUSH
2297: LD_INT -1
2299: PUSH
2300: LD_INT -4
2302: PUSH
2303: LD_INT -5
2305: PUSH
2306: LD_EXP 8
2310: PUSH
2311: LD_EXP 9
2315: PUSH
2316: LD_EXP 10
2320: PUSH
2321: LD_INT -2
2323: PUSH
2324: LD_INT -3
2326: PUSH
2327: LD_INT -7
2329: PUSH
2330: LD_INT -5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: PUSH
2345: LD_EXP 16
2349: ADD
2350: PPUSH
2351: LD_INT 2
2353: PUSH
2354: LD_INT 1
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 4
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 42
2380: ST_TO_ADDR
// for i = 1 to 2 do
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: DOUBLE
2387: LD_INT 1
2389: DEC
2390: ST_TO_ADDR
2391: LD_INT 2
2393: PUSH
2394: FOR_TO
2395: IFFALSE 2498
// begin vc_chassis := us_heavy_tracked ;
2397: LD_ADDR_OWVAR 37
2401: PUSH
2402: LD_INT 4
2404: ST_TO_ADDR
// vc_engine := engine_siberite ;
2405: LD_ADDR_OWVAR 39
2409: PUSH
2410: LD_INT 3
2412: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2413: LD_ADDR_OWVAR 40
2417: PUSH
2418: LD_INT 5
2420: ST_TO_ADDR
// vc_control := control_manual ;
2421: LD_ADDR_OWVAR 38
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// veh := CreateVehicle ;
2429: LD_ADDR_VAR 0 3
2433: PUSH
2434: CALL_OW 45
2438: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2439: LD_EXP 17
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: PPUSH
2450: LD_VAR 0 3
2454: PPUSH
2455: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2459: LD_VAR 0 3
2463: PPUSH
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2474: LD_ADDR_EXP 17
2478: PUSH
2479: LD_EXP 17
2483: PUSH
2484: LD_EXP 17
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: DIFF
2495: ST_TO_ADDR
// end ;
2496: GO 2394
2498: POP
2499: POP
// for i = 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2617
// begin vc_chassis := us_medium_wheeled ;
2516: LD_ADDR_OWVAR 37
2520: PUSH
2521: LD_INT 2
2523: ST_TO_ADDR
// vc_engine := engine_siberite ;
2524: LD_ADDR_OWVAR 39
2528: PUSH
2529: LD_INT 3
2531: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
2532: LD_ADDR_OWVAR 40
2536: PUSH
2537: LD_INT 4
2539: ST_TO_ADDR
// vc_control := control_manual ;
2540: LD_ADDR_OWVAR 38
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// veh := CreateVehicle ;
2548: LD_ADDR_VAR 0 3
2552: PUSH
2553: CALL_OW 45
2557: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2558: LD_EXP 17
2562: PUSH
2563: LD_VAR 0 2
2567: ARRAY
2568: PPUSH
2569: LD_VAR 0 3
2573: PPUSH
2574: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2578: LD_VAR 0 3
2582: PPUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2593: LD_ADDR_EXP 17
2597: PUSH
2598: LD_EXP 17
2602: PUSH
2603: LD_EXP 17
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: DIFF
2614: ST_TO_ADDR
// end ;
2615: GO 2513
2617: POP
2618: POP
// for i = 1 to 2 do
2619: LD_ADDR_VAR 0 2
2623: PUSH
2624: DOUBLE
2625: LD_INT 1
2627: DEC
2628: ST_TO_ADDR
2629: LD_INT 2
2631: PUSH
2632: FOR_TO
2633: IFFALSE 2736
// begin vc_chassis := us_medium_tracked ;
2635: LD_ADDR_OWVAR 37
2639: PUSH
2640: LD_INT 3
2642: ST_TO_ADDR
// vc_engine := engine_siberite ;
2643: LD_ADDR_OWVAR 39
2647: PUSH
2648: LD_INT 3
2650: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 5
2658: ST_TO_ADDR
// vc_control := control_manual ;
2659: LD_ADDR_OWVAR 38
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// veh := CreateVehicle ;
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: CALL_OW 45
2676: ST_TO_ADDR
// PlaceHumanInUnit ( Selected_americans [ i ] , veh ) ;
2677: LD_EXP 17
2681: PUSH
2682: LD_VAR 0 2
2686: ARRAY
2687: PPUSH
2688: LD_VAR 0 3
2692: PPUSH
2693: CALL_OW 52
// PlaceUnitArea ( veh , AM_Start , false ) ;
2697: LD_VAR 0 3
2701: PPUSH
2702: LD_INT 1
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// Selected_americans = Selected_americans diff Selected_americans [ i ] ;
2712: LD_ADDR_EXP 17
2716: PUSH
2717: LD_EXP 17
2721: PUSH
2722: LD_EXP 17
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: DIFF
2733: ST_TO_ADDR
// end ;
2734: GO 2632
2736: POP
2737: POP
// for i in Selected_americans do
2738: LD_ADDR_VAR 0 2
2742: PUSH
2743: LD_EXP 17
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2768
// PlaceUnitArea ( i , AM_Start , false ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 0
2761: PPUSH
2762: CALL_OW 49
2766: GO 2748
2768: POP
2769: POP
// vc_chassis := us_heavy_tracked ;
2770: LD_ADDR_OWVAR 37
2774: PUSH
2775: LD_INT 4
2777: ST_TO_ADDR
// vc_engine := engine_siberite ;
2778: LD_ADDR_OWVAR 39
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2786: LD_ADDR_OWVAR 40
2790: PUSH
2791: LD_INT 12
2793: ST_TO_ADDR
// vc_control := control_manual ;
2794: LD_ADDR_OWVAR 38
2798: PUSH
2799: LD_INT 1
2801: ST_TO_ADDR
// Sim_veh := CreateVehicle ;
2802: LD_ADDR_EXP 18
2806: PUSH
2807: CALL_OW 45
2811: ST_TO_ADDR
// Kat_veh := CreateVehicle ;
2812: LD_ADDR_EXP 19
2816: PUSH
2817: CALL_OW 45
2821: ST_TO_ADDR
// Mil_veh := CreateVehicle ;
2822: LD_ADDR_EXP 20
2826: PUSH
2827: CALL_OW 45
2831: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , Sim_veh ) ;
2832: LD_EXP 8
2836: PPUSH
2837: LD_EXP 18
2841: PPUSH
2842: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , Kat_veh ) ;
2846: LD_EXP 9
2850: PPUSH
2851: LD_EXP 19
2855: PPUSH
2856: CALL_OW 52
// PlaceHumanInUnit ( Miller , Mil_veh ) ;
2860: LD_EXP 10
2864: PPUSH
2865: LD_EXP 20
2869: PPUSH
2870: CALL_OW 52
// PlaceUnitArea ( Sim_veh , AM_Start , false ) ;
2874: LD_EXP 18
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 49
// PlaceUnitArea ( Kat_veh , AM_Start , false ) ;
2889: LD_EXP 19
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 49
// PlaceUnitArea ( Mil_veh , AM_Start , false ) ;
2904: LD_EXP 20
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 0
2914: PPUSH
2915: CALL_OW 49
// AddCargo ( [ Sim_veh , Kat_veh , Mil_veh ] , mat_cans , 100 ) ;
2919: LD_EXP 18
2923: PUSH
2924: LD_EXP 19
2928: PUSH
2929: LD_EXP 20
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: LD_INT 100
2944: PPUSH
2945: CALL_OW 291
// end ;
2949: LD_VAR 0 1
2953: RET
// export function CreatePersonnel ; begin
2954: LD_INT 0
2956: PPUSH
// uc_side := 1 ;
2957: LD_ADDR_OWVAR 20
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// hc_class = class_soldier ;
2965: LD_ADDR_OWVAR 28
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// uc_nation := nation_american ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// hc_sex = sex_male ;
2981: LD_ADDR_OWVAR 27
2985: PUSH
2986: LD_INT 1
2988: ST_TO_ADDR
// hc_importance = 80 ;
2989: LD_ADDR_OWVAR 32
2993: PUSH
2994: LD_INT 80
2996: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 3 , 3 ] ;
2997: LD_ADDR_OWVAR 31
3001: PUSH
3002: LD_INT 6
3004: PUSH
3005: LD_INT 4
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3020: LD_ADDR_OWVAR 29
3024: PUSH
3025: LD_INT 10
3027: PUSH
3028: LD_INT 10
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// hc_name := Smithy ;
3035: LD_ADDR_OWVAR 26
3039: PUSH
3040: LD_STRING Smithy
3042: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces ;
3043: LD_ADDR_OWVAR 33
3047: PUSH
3048: LD_STRING ZieloneLaserki_AddtFaces
3050: ST_TO_ADDR
// hc_face_number := 2 ;
3051: LD_ADDR_OWVAR 34
3055: PUSH
3056: LD_INT 2
3058: ST_TO_ADDR
// Smithy := CreateHuman ;
3059: LD_ADDR_EXP 12
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// uc_side := 4 ;
3069: LD_ADDR_OWVAR 20
3073: PUSH
3074: LD_INT 4
3076: ST_TO_ADDR
// hc_class = class_sniper ;
3077: LD_ADDR_OWVAR 28
3081: PUSH
3082: LD_INT 5
3084: ST_TO_ADDR
// uc_nation := nation_american ;
3085: LD_ADDR_OWVAR 21
3089: PUSH
3090: LD_INT 1
3092: ST_TO_ADDR
// hc_sex = sex_male ;
3093: LD_ADDR_OWVAR 27
3097: PUSH
3098: LD_INT 1
3100: ST_TO_ADDR
// hc_importance = 40 ;
3101: LD_ADDR_OWVAR 32
3105: PUSH
3106: LD_INT 40
3108: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 1 ] ;
3109: LD_ADDR_OWVAR 31
3113: PUSH
3114: LD_INT 5
3116: PUSH
3117: LD_INT 2
3119: PUSH
3120: LD_INT 4
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3132: LD_ADDR_OWVAR 29
3136: PUSH
3137: LD_INT 10
3139: PUSH
3140: LD_INT 10
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: ST_TO_ADDR
// hc_name := Harry Stone ;
3147: LD_ADDR_OWVAR 26
3151: PUSH
3152: LD_STRING Harry Stone
3154: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3155: LD_ADDR_OWVAR 33
3159: PUSH
3160: LD_STRING ZieloneLaserki_Commanders
3162: ST_TO_ADDR
// hc_face_number := 4 ;
3163: LD_ADDR_OWVAR 34
3167: PUSH
3168: LD_INT 4
3170: ST_TO_ADDR
// Stone := CreateHuman ;
3171: LD_ADDR_EXP 13
3175: PUSH
3176: CALL_OW 44
3180: ST_TO_ADDR
// uc_side := 1 ;
3181: LD_ADDR_OWVAR 20
3185: PUSH
3186: LD_INT 1
3188: ST_TO_ADDR
// hc_class = class_scientistic ;
3189: LD_ADDR_OWVAR 28
3193: PUSH
3194: LD_INT 4
3196: ST_TO_ADDR
// uc_nation := nation_american ;
3197: LD_ADDR_OWVAR 21
3201: PUSH
3202: LD_INT 1
3204: ST_TO_ADDR
// hc_sex = sex_male ;
3205: LD_ADDR_OWVAR 27
3209: PUSH
3210: LD_INT 1
3212: ST_TO_ADDR
// hc_importance = 40 ;
3213: LD_ADDR_OWVAR 32
3217: PUSH
3218: LD_INT 40
3220: ST_TO_ADDR
// hc_skills = [ 2 , 0 , 3 , 7 ] ;
3221: LD_ADDR_OWVAR 31
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: LD_INT 0
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3244: LD_ADDR_OWVAR 29
3248: PUSH
3249: LD_INT 10
3251: PUSH
3252: LD_INT 10
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: ST_TO_ADDR
// hc_name := dr Samuel Edmonds ;
3259: LD_ADDR_OWVAR 26
3263: PUSH
3264: LD_STRING dr Samuel Edmonds
3266: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
3267: LD_ADDR_OWVAR 33
3271: PUSH
3272: LD_STRING ZieloneLaserki_Heroes
3274: ST_TO_ADDR
// hc_face_number := 4 ;
3275: LD_ADDR_OWVAR 34
3279: PUSH
3280: LD_INT 4
3282: ST_TO_ADDR
// Edmonds := CreateHuman ;
3283: LD_ADDR_EXP 14
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// hc_class = class_soldier ;
3293: LD_ADDR_OWVAR 28
3297: PUSH
3298: LD_INT 1
3300: ST_TO_ADDR
// uc_nation := nation_american ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 1
3308: ST_TO_ADDR
// hc_importance = 70 ;
3309: LD_ADDR_OWVAR 32
3313: PUSH
3314: LD_INT 70
3316: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
3317: LD_INT 1
3319: PPUSH
3320: LD_INT 8
3322: PPUSH
3323: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
3327: LD_ADDR_OWVAR 29
3331: PUSH
3332: LD_INT 10
3334: PUSH
3335: LD_INT 10
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: ST_TO_ADDR
// hc_name := Barnes ;
3342: LD_ADDR_OWVAR 26
3346: PUSH
3347: LD_STRING Barnes
3349: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3350: LD_ADDR_OWVAR 33
3354: PUSH
3355: LD_STRING ZieloneLaserki_Commanders
3357: ST_TO_ADDR
// hc_face_number := 2 ;
3358: LD_ADDR_OWVAR 34
3362: PUSH
3363: LD_INT 2
3365: ST_TO_ADDR
// Barnes := CreateHuman ;
3366: LD_ADDR_EXP 15
3370: PUSH
3371: CALL_OW 44
3375: ST_TO_ADDR
// end ;
3376: LD_VAR 0 1
3380: RET
// export function CreateAlliedPersonnel ; var i , un ; begin
3381: LD_INT 0
3383: PPUSH
3384: PPUSH
3385: PPUSH
// for i = 1 to 5 do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 5
3398: PUSH
3399: FOR_TO
3400: IFFALSE 3505
// begin uc_side = 1 ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_INT 1
3409: ST_TO_ADDR
// uc_nation = 1 ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// hc_name =  ;
3418: LD_ADDR_OWVAR 26
3422: PUSH
3423: LD_STRING 
3425: ST_TO_ADDR
// hc_gallery =  ;
3426: LD_ADDR_OWVAR 33
3430: PUSH
3431: LD_STRING 
3433: ST_TO_ADDR
// PrepareHuman ( false , 1 , 5 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 5
3442: PPUSH
3443: CALL_OW 380
// un = CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3457: LD_VAR 0 3
3461: PPUSH
3462: LD_INT 8
3464: PPUSH
3465: LD_INT 0
3467: PPUSH
3468: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3472: LD_VAR 0 3
3476: PPUSH
3477: LD_INT 121
3479: PPUSH
3480: LD_INT 163
3482: PPUSH
3483: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
3487: LD_ADDR_EXP 21
3491: PUSH
3492: LD_EXP 21
3496: PUSH
3497: LD_VAR 0 3
3501: ADD
3502: ST_TO_ADDR
// end ;
3503: GO 3399
3505: POP
3506: POP
// for i = 1 to 4 do
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_INT 4
3519: PUSH
3520: FOR_TO
3521: IFFALSE 3626
// begin uc_side = 1 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 1
3530: ST_TO_ADDR
// uc_nation = 1 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 1
3538: ST_TO_ADDR
// hc_name =  ;
3539: LD_ADDR_OWVAR 26
3543: PUSH
3544: LD_STRING 
3546: ST_TO_ADDR
// hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 5 ) ;
3555: LD_INT 1
3557: PPUSH
3558: LD_INT 2
3560: PPUSH
3561: LD_INT 5
3563: PPUSH
3564: CALL_OW 380
// un = CreateHuman ;
3568: LD_ADDR_VAR 0 3
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3578: LD_VAR 0 3
3582: PPUSH
3583: LD_INT 8
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_INT 121
3600: PPUSH
3601: LD_INT 163
3603: PPUSH
3604: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
3608: LD_ADDR_EXP 22
3612: PUSH
3613: LD_EXP 22
3617: PUSH
3618: LD_VAR 0 3
3622: ADD
3623: ST_TO_ADDR
// end ;
3624: GO 3520
3626: POP
3627: POP
// for i = 1 to 4 do
3628: LD_ADDR_VAR 0 2
3632: PUSH
3633: DOUBLE
3634: LD_INT 1
3636: DEC
3637: ST_TO_ADDR
3638: LD_INT 4
3640: PUSH
3641: FOR_TO
3642: IFFALSE 3747
// begin uc_side = 1 ;
3644: LD_ADDR_OWVAR 20
3648: PUSH
3649: LD_INT 1
3651: ST_TO_ADDR
// uc_nation = 1 ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// hc_name =  ;
3660: LD_ADDR_OWVAR 26
3664: PUSH
3665: LD_STRING 
3667: ST_TO_ADDR
// hc_gallery =  ;
3668: LD_ADDR_OWVAR 33
3672: PUSH
3673: LD_STRING 
3675: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
3676: LD_INT 0
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 5
3684: PPUSH
3685: CALL_OW 380
// un = CreateHuman ;
3689: LD_ADDR_VAR 0 3
3693: PUSH
3694: CALL_OW 44
3698: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3699: LD_VAR 0 3
3703: PPUSH
3704: LD_INT 8
3706: PPUSH
3707: LD_INT 0
3709: PPUSH
3710: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3714: LD_VAR 0 3
3718: PPUSH
3719: LD_INT 121
3721: PPUSH
3722: LD_INT 163
3724: PPUSH
3725: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
3729: LD_ADDR_EXP 23
3733: PUSH
3734: LD_EXP 23
3738: PUSH
3739: LD_VAR 0 3
3743: ADD
3744: ST_TO_ADDR
// end ;
3745: GO 3641
3747: POP
3748: POP
// for i = 1 to 5 do
3749: LD_ADDR_VAR 0 2
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 5
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3868
// begin uc_side = 1 ;
3765: LD_ADDR_OWVAR 20
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// uc_nation = 1 ;
3773: LD_ADDR_OWVAR 21
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// hc_name =  ;
3781: LD_ADDR_OWVAR 26
3785: PUSH
3786: LD_STRING 
3788: ST_TO_ADDR
// hc_gallery =  ;
3789: LD_ADDR_OWVAR 33
3793: PUSH
3794: LD_STRING 
3796: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
3797: LD_INT 0
3799: PPUSH
3800: LD_INT 4
3802: PPUSH
3803: LD_INT 5
3805: PPUSH
3806: CALL_OW 380
// un = CreateHuman ;
3810: LD_ADDR_VAR 0 3
3814: PUSH
3815: CALL_OW 44
3819: ST_TO_ADDR
// PlaceUnitArea ( un , AM_Personnel , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 8
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
3835: LD_VAR 0 3
3839: PPUSH
3840: LD_INT 121
3842: PPUSH
3843: LD_INT 163
3845: PPUSH
3846: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
3850: LD_ADDR_EXP 24
3854: PUSH
3855: LD_EXP 24
3859: PUSH
3860: LD_VAR 0 3
3864: ADD
3865: ST_TO_ADDR
// end ;
3866: GO 3762
3868: POP
3869: POP
// end ; end_of_file
3870: LD_VAR 0 1
3874: RET
// export attack_group ; export RusHarassSquad ; export RU2_DemoTeam , RU3_Baterie , RU3_BaterieVehs , RU3_BaterieMechs ; export RU3BaterieTimeOut ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 , RUWeaponChosen ; begin
3875: LD_INT 0
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
3887: PPUSH
// amChassisTab = [ ] ;
3888: LD_ADDR_VAR 0 18
3892: PUSH
3893: EMPTY
3894: ST_TO_ADDR
// arChassisTab = [ ] ;
3895: LD_ADDR_VAR 0 17
3899: PUSH
3900: EMPTY
3901: ST_TO_ADDR
// ruChassisTab = [ ] ;
3902: LD_ADDR_VAR 0 16
3906: PUSH
3907: EMPTY
3908: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
3909: LD_INT 35
3911: PPUSH
3912: CALL_OW 67
// if nation = 1 then
3916: LD_VAR 0 5
3920: PUSH
3921: LD_INT 1
3923: EQUAL
3924: IFFALSE 4445
// begin uc_side = side ;
3926: LD_ADDR_OWVAR 20
3930: PUSH
3931: LD_VAR 0 2
3935: ST_TO_ADDR
// uc_nation = nation ;
3936: LD_ADDR_OWVAR 21
3940: PUSH
3941: LD_VAR 0 5
3945: ST_TO_ADDR
// vc_engine = vehengine ;
3946: LD_ADDR_OWVAR 39
3950: PUSH
3951: LD_VAR 0 6
3955: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
3956: LD_ADDR_OWVAR 38
3960: PUSH
3961: LD_VAR 0 7
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_VAR 0 7
3973: PPUSH
3974: CALL_OW 12
3978: ARRAY
3979: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
3980: LD_ADDR_OWVAR 40
3984: PUSH
3985: LD_VAR 0 10
3989: PUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_VAR 0 10
3997: PPUSH
3998: CALL_OW 12
4002: ARRAY
4003: ST_TO_ADDR
// for j = 1 to AMWeapon do
4004: LD_ADDR_VAR 0 13
4008: PUSH
4009: DOUBLE
4010: LD_INT 1
4012: DEC
4013: ST_TO_ADDR
4014: LD_VAR 0 10
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4321
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4022: LD_VAR 0 10
4026: PUSH
4027: LD_VAR 0 13
4031: ARRAY
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: PUSH
4037: LD_VAR 0 10
4041: PUSH
4042: LD_VAR 0 13
4046: ARRAY
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: OR
4052: IFFALSE 4105
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4054: LD_ADDR_VAR 0 18
4058: PUSH
4059: LD_INT 1
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4081: LD_ADDR_OWVAR 37
4085: PUSH
4086: LD_VAR 0 18
4090: PUSH
4091: LD_INT 1
4093: PPUSH
4094: LD_VAR 0 18
4098: PPUSH
4099: CALL_OW 12
4103: ARRAY
4104: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4105: LD_VAR 0 10
4109: PUSH
4110: LD_VAR 0 13
4114: ARRAY
4115: PUSH
4116: LD_INT 4
4118: EQUAL
4119: PUSH
4120: LD_VAR 0 10
4124: PUSH
4125: LD_VAR 0 13
4129: ARRAY
4130: PUSH
4131: LD_INT 5
4133: EQUAL
4134: OR
4135: PUSH
4136: LD_VAR 0 10
4140: PUSH
4141: LD_VAR 0 13
4145: ARRAY
4146: PUSH
4147: LD_INT 9
4149: EQUAL
4150: OR
4151: PUSH
4152: LD_VAR 0 10
4156: PUSH
4157: LD_VAR 0 13
4161: ARRAY
4162: PUSH
4163: LD_INT 11
4165: EQUAL
4166: OR
4167: PUSH
4168: LD_VAR 0 10
4172: PUSH
4173: LD_VAR 0 13
4177: ARRAY
4178: PUSH
4179: LD_INT 7
4181: EQUAL
4182: OR
4183: IFFALSE 4232
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4185: LD_ADDR_VAR 0 18
4189: PUSH
4190: LD_INT 2
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4208: LD_ADDR_OWVAR 37
4212: PUSH
4213: LD_VAR 0 18
4217: PUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_VAR 0 18
4225: PPUSH
4226: CALL_OW 12
4230: ARRAY
4231: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4232: LD_VAR 0 10
4236: PUSH
4237: LD_VAR 0 13
4241: ARRAY
4242: PUSH
4243: LD_INT 8
4245: EQUAL
4246: PUSH
4247: LD_VAR 0 10
4251: PUSH
4252: LD_VAR 0 13
4256: ARRAY
4257: PUSH
4258: LD_INT 6
4260: EQUAL
4261: OR
4262: PUSH
4263: LD_VAR 0 10
4267: PUSH
4268: LD_VAR 0 13
4272: ARRAY
4273: PUSH
4274: LD_INT 10
4276: EQUAL
4277: OR
4278: IFFALSE 4319
// begin amChassisTab = [ 4 , 5 ] ;
4280: LD_ADDR_VAR 0 18
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4295: LD_ADDR_OWVAR 37
4299: PUSH
4300: LD_VAR 0 18
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_VAR 0 18
4312: PPUSH
4313: CALL_OW 12
4317: ARRAY
4318: ST_TO_ADDR
// end ; end ;
4319: GO 4019
4321: POP
4322: POP
// veh = CreateVehicle ;
4323: LD_ADDR_VAR 0 15
4327: PUSH
4328: CALL_OW 45
4332: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4333: LD_VAR 0 15
4337: PPUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL_OW 49
// if vc_control = 1 then
4350: LD_OWVAR 38
4354: PUSH
4355: LD_INT 1
4357: EQUAL
4358: IFFALSE 4415
// begin hc_gallery =  ;
4360: LD_ADDR_OWVAR 33
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// hc_name =  ;
4368: LD_ADDR_OWVAR 26
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4376: LD_INT 0
4378: PPUSH
4379: LD_INT 3
4381: PPUSH
4382: LD_VAR 0 4
4386: PPUSH
4387: CALL_OW 380
// un = CreateHuman ;
4391: LD_ADDR_VAR 0 14
4395: PUSH
4396: CALL_OW 44
4400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4401: LD_VAR 0 14
4405: PPUSH
4406: LD_VAR 0 15
4410: PPUSH
4411: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
4415: LD_ADDR_EXP 25
4419: PUSH
4420: LD_EXP 25
4424: PUSH
4425: LD_VAR 0 15
4429: ADD
4430: ST_TO_ADDR
// i = i + 1 ;
4431: LD_ADDR_VAR 0 12
4435: PUSH
4436: LD_VAR 0 12
4440: PUSH
4441: LD_INT 1
4443: PLUS
4444: ST_TO_ADDR
// end ; if nation = 2 then
4445: LD_VAR 0 5
4449: PUSH
4450: LD_INT 2
4452: EQUAL
4453: IFFALSE 4946
// begin uc_side = side ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_VAR 0 2
4464: ST_TO_ADDR
// uc_nation = nation ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// vc_engine = vehengine ;
4475: LD_ADDR_OWVAR 39
4479: PUSH
4480: LD_VAR 0 6
4484: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4485: LD_ADDR_OWVAR 38
4489: PUSH
4490: LD_VAR 0 7
4494: PUSH
4495: LD_INT 1
4497: PPUSH
4498: LD_VAR 0 7
4502: PPUSH
4503: CALL_OW 12
4507: ARRAY
4508: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4509: LD_ADDR_OWVAR 40
4513: PUSH
4514: LD_VAR 0 9
4518: PUSH
4519: LD_INT 1
4521: PPUSH
4522: LD_VAR 0 9
4526: PPUSH
4527: CALL_OW 12
4531: ARRAY
4532: ST_TO_ADDR
// for j = 1 to ARWeapons do
4533: LD_ADDR_VAR 0 13
4537: PUSH
4538: DOUBLE
4539: LD_INT 1
4541: DEC
4542: ST_TO_ADDR
4543: LD_VAR 0 9
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4822
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4551: LD_VAR 0 9
4555: PUSH
4556: LD_VAR 0 13
4560: ARRAY
4561: PUSH
4562: LD_INT 24
4564: EQUAL
4565: PUSH
4566: LD_VAR 0 9
4570: PUSH
4571: LD_VAR 0 13
4575: ARRAY
4576: PUSH
4577: LD_INT 22
4579: EQUAL
4580: OR
4581: PUSH
4582: LD_VAR 0 9
4586: PUSH
4587: LD_VAR 0 13
4591: ARRAY
4592: PUSH
4593: LD_INT 23
4595: EQUAL
4596: OR
4597: PUSH
4598: LD_VAR 0 9
4602: PUSH
4603: LD_VAR 0 13
4607: ARRAY
4608: PUSH
4609: LD_INT 30
4611: EQUAL
4612: OR
4613: IFFALSE 4650
// begin arChassisTab = [ 14 ] ;
4615: LD_ADDR_VAR 0 17
4619: PUSH
4620: LD_INT 14
4622: PUSH
4623: EMPTY
4624: LIST
4625: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_VAR 0 17
4635: PUSH
4636: LD_INT 1
4638: PPUSH
4639: LD_VAR 0 17
4643: PPUSH
4644: CALL_OW 12
4648: ARRAY
4649: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4650: LD_VAR 0 9
4654: PUSH
4655: LD_VAR 0 13
4659: ARRAY
4660: PUSH
4661: LD_INT 29
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 9
4669: PUSH
4670: LD_VAR 0 13
4674: ARRAY
4675: PUSH
4676: LD_INT 28
4678: EQUAL
4679: OR
4680: PUSH
4681: LD_VAR 0 9
4685: PUSH
4686: LD_VAR 0 13
4690: ARRAY
4691: PUSH
4692: LD_INT 27
4694: EQUAL
4695: OR
4696: PUSH
4697: LD_VAR 0 9
4701: PUSH
4702: LD_VAR 0 13
4706: ARRAY
4707: PUSH
4708: LD_INT 26
4710: EQUAL
4711: OR
4712: PUSH
4713: LD_VAR 0 9
4717: PUSH
4718: LD_VAR 0 13
4722: ARRAY
4723: PUSH
4724: LD_INT 25
4726: EQUAL
4727: OR
4728: IFFALSE 4769
// begin arChassisTab = [ 14 , 16 ] ;
4730: LD_ADDR_VAR 0 17
4734: PUSH
4735: LD_INT 14
4737: PUSH
4738: LD_INT 16
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4745: LD_ADDR_OWVAR 37
4749: PUSH
4750: LD_VAR 0 17
4754: PUSH
4755: LD_INT 1
4757: PPUSH
4758: LD_VAR 0 17
4762: PPUSH
4763: CALL_OW 12
4767: ARRAY
4768: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 then
4769: LD_VAR 0 9
4773: PUSH
4774: LD_VAR 0 13
4778: ARRAY
4779: PUSH
4780: LD_INT 72
4782: EQUAL
4783: IFFALSE 4820
// begin arChassisTab = [ 16 ] ;
4785: LD_ADDR_VAR 0 17
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4796: LD_ADDR_OWVAR 37
4800: PUSH
4801: LD_VAR 0 17
4805: PUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_VAR 0 17
4813: PPUSH
4814: CALL_OW 12
4818: ARRAY
4819: ST_TO_ADDR
// end ; end ;
4820: GO 4548
4822: POP
4823: POP
// veh = CreateVehicle ;
4824: LD_ADDR_VAR 0 15
4828: PUSH
4829: CALL_OW 45
4833: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4834: LD_VAR 0 15
4838: PPUSH
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 0
4846: PPUSH
4847: CALL_OW 49
// if vc_control = 1 then
4851: LD_OWVAR 38
4855: PUSH
4856: LD_INT 1
4858: EQUAL
4859: IFFALSE 4916
// begin hc_gallery =  ;
4861: LD_ADDR_OWVAR 33
4865: PUSH
4866: LD_STRING 
4868: ST_TO_ADDR
// hc_name =  ;
4869: LD_ADDR_OWVAR 26
4873: PUSH
4874: LD_STRING 
4876: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4877: LD_INT 0
4879: PPUSH
4880: LD_INT 3
4882: PPUSH
4883: LD_VAR 0 4
4887: PPUSH
4888: CALL_OW 380
// un = CreateHuman ;
4892: LD_ADDR_VAR 0 14
4896: PUSH
4897: CALL_OW 44
4901: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4902: LD_VAR 0 14
4906: PPUSH
4907: LD_VAR 0 15
4911: PPUSH
4912: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
4916: LD_ADDR_EXP 25
4920: PUSH
4921: LD_EXP 25
4925: PUSH
4926: LD_VAR 0 15
4930: ADD
4931: ST_TO_ADDR
// i = i + 1 ;
4932: LD_ADDR_VAR 0 12
4936: PUSH
4937: LD_VAR 0 12
4941: PUSH
4942: LD_INT 1
4944: PLUS
4945: ST_TO_ADDR
// end ; if nation = 3 then
4946: LD_VAR 0 5
4950: PUSH
4951: LD_INT 3
4953: EQUAL
4954: IFFALSE 5342
// begin uc_side = side ;
4956: LD_ADDR_OWVAR 20
4960: PUSH
4961: LD_VAR 0 2
4965: ST_TO_ADDR
// uc_nation = nation ;
4966: LD_ADDR_OWVAR 21
4970: PUSH
4971: LD_VAR 0 5
4975: ST_TO_ADDR
// vc_engine = vehengine ;
4976: LD_ADDR_OWVAR 39
4980: PUSH
4981: LD_VAR 0 6
4985: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4986: LD_ADDR_OWVAR 38
4990: PUSH
4991: LD_VAR 0 7
4995: PUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: CALL_OW 12
5008: ARRAY
5009: ST_TO_ADDR
// RUWeaponChosen := RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5010: LD_ADDR_VAR 0 21
5014: PUSH
5015: LD_VAR 0 8
5019: PUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_VAR 0 8
5027: PPUSH
5028: CALL_OW 12
5032: ARRAY
5033: ST_TO_ADDR
// vc_weapon = RUWeaponChosen ;
5034: LD_ADDR_OWVAR 40
5038: PUSH
5039: LD_VAR 0 21
5043: ST_TO_ADDR
// if RUWeaponChosen = 42 or RUWeaponChosen = 43 or RUWeaponChosen = 44 or RUWeaponChosen = 45 or RUWeaponChosen = 49 or RUWeaponChosen = 75 or RUWeaponChosen = 76 then
5044: LD_VAR 0 21
5048: PUSH
5049: LD_INT 42
5051: EQUAL
5052: PUSH
5053: LD_VAR 0 21
5057: PUSH
5058: LD_INT 43
5060: EQUAL
5061: OR
5062: PUSH
5063: LD_VAR 0 21
5067: PUSH
5068: LD_INT 44
5070: EQUAL
5071: OR
5072: PUSH
5073: LD_VAR 0 21
5077: PUSH
5078: LD_INT 45
5080: EQUAL
5081: OR
5082: PUSH
5083: LD_VAR 0 21
5087: PUSH
5088: LD_INT 49
5090: EQUAL
5091: OR
5092: PUSH
5093: LD_VAR 0 21
5097: PUSH
5098: LD_INT 75
5100: EQUAL
5101: OR
5102: PUSH
5103: LD_VAR 0 21
5107: PUSH
5108: LD_INT 76
5110: EQUAL
5111: OR
5112: IFFALSE 5161
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5114: LD_ADDR_VAR 0 16
5118: PUSH
5119: LD_INT 21
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 23
5127: PUSH
5128: LD_INT 24
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5137: LD_ADDR_OWVAR 37
5141: PUSH
5142: LD_VAR 0 16
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: LD_VAR 0 16
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: ST_TO_ADDR
// end ; if RUWeaponChosen = 46 or RUWeaponChosen = 47 then
5161: LD_VAR 0 21
5165: PUSH
5166: LD_INT 46
5168: EQUAL
5169: PUSH
5170: LD_VAR 0 21
5174: PUSH
5175: LD_INT 47
5177: EQUAL
5178: OR
5179: IFFALSE 5220
// begin ruChassisTab = [ 23 , 24 ] ;
5181: LD_ADDR_VAR 0 16
5185: PUSH
5186: LD_INT 23
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5196: LD_ADDR_OWVAR 37
5200: PUSH
5201: LD_VAR 0 16
5205: PUSH
5206: LD_INT 1
5208: PPUSH
5209: LD_VAR 0 16
5213: PPUSH
5214: CALL_OW 12
5218: ARRAY
5219: ST_TO_ADDR
// end ; veh = CreateVehicle ;
5220: LD_ADDR_VAR 0 15
5224: PUSH
5225: CALL_OW 45
5229: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5230: LD_VAR 0 15
5234: PPUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 0
5242: PPUSH
5243: CALL_OW 49
// if vc_control = 1 then
5247: LD_OWVAR 38
5251: PUSH
5252: LD_INT 1
5254: EQUAL
5255: IFFALSE 5312
// begin hc_gallery =  ;
5257: LD_ADDR_OWVAR 33
5261: PUSH
5262: LD_STRING 
5264: ST_TO_ADDR
// hc_name =  ;
5265: LD_ADDR_OWVAR 26
5269: PUSH
5270: LD_STRING 
5272: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5273: LD_INT 0
5275: PPUSH
5276: LD_INT 3
5278: PPUSH
5279: LD_VAR 0 4
5283: PPUSH
5284: CALL_OW 380
// un = CreateHuman ;
5288: LD_ADDR_VAR 0 14
5292: PUSH
5293: CALL_OW 44
5297: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5298: LD_VAR 0 14
5302: PPUSH
5303: LD_VAR 0 15
5307: PPUSH
5308: CALL_OW 52
// end ; attack_group = attack_group ^ veh ;
5312: LD_ADDR_EXP 25
5316: PUSH
5317: LD_EXP 25
5321: PUSH
5322: LD_VAR 0 15
5326: ADD
5327: ST_TO_ADDR
// i = i + 1 ;
5328: LD_ADDR_VAR 0 12
5332: PUSH
5333: LD_VAR 0 12
5337: PUSH
5338: LD_INT 1
5340: PLUS
5341: ST_TO_ADDR
// end ; until i = vehCount ;
5342: LD_VAR 0 12
5346: PUSH
5347: LD_VAR 0 3
5351: EQUAL
5352: IFFALSE 3909
// end ;
5354: LD_VAR 0 11
5358: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
5359: LD_INT 0
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
// for i = 1 to medicCount do
5368: LD_ADDR_VAR 0 11
5372: PUSH
5373: DOUBLE
5374: LD_INT 1
5376: DEC
5377: ST_TO_ADDR
5378: LD_VAR 0 7
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5466
// begin uc_side = side ;
5386: LD_ADDR_OWVAR 20
5390: PUSH
5391: LD_VAR 0 1
5395: ST_TO_ADDR
// uc_nation = nation ;
5396: LD_ADDR_OWVAR 21
5400: PUSH
5401: LD_VAR 0 2
5405: ST_TO_ADDR
// hc_name =  ;
5406: LD_ADDR_OWVAR 26
5410: PUSH
5411: LD_STRING 
5413: ST_TO_ADDR
// hc_gallery =  ;
5414: LD_ADDR_OWVAR 33
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 4
5427: PPUSH
5428: LD_VAR 0 8
5432: PPUSH
5433: CALL_OW 380
// un = CreateHuman ;
5437: LD_ADDR_VAR 0 13
5441: PUSH
5442: CALL_OW 44
5446: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5447: LD_VAR 0 13
5451: PPUSH
5452: LD_VAR 0 9
5456: PPUSH
5457: LD_INT 0
5459: PPUSH
5460: CALL_OW 49
// end ;
5464: GO 5383
5466: POP
5467: POP
// for i = 1 to soldierCount do
5468: LD_ADDR_VAR 0 11
5472: PUSH
5473: DOUBLE
5474: LD_INT 1
5476: DEC
5477: ST_TO_ADDR
5478: LD_VAR 0 3
5482: PUSH
5483: FOR_TO
5484: IFFALSE 5582
// begin uc_side = side ;
5486: LD_ADDR_OWVAR 20
5490: PUSH
5491: LD_VAR 0 1
5495: ST_TO_ADDR
// uc_nation = nation ;
5496: LD_ADDR_OWVAR 21
5500: PUSH
5501: LD_VAR 0 2
5505: ST_TO_ADDR
// hc_name =  ;
5506: LD_ADDR_OWVAR 26
5510: PUSH
5511: LD_STRING 
5513: ST_TO_ADDR
// hc_gallery =  ;
5514: LD_ADDR_OWVAR 33
5518: PUSH
5519: LD_STRING 
5521: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5522: LD_INT 0
5524: PPUSH
5525: LD_INT 1
5527: PPUSH
5528: LD_VAR 0 8
5532: PPUSH
5533: CALL_OW 380
// un = CreateHuman ;
5537: LD_ADDR_VAR 0 13
5541: PUSH
5542: CALL_OW 44
5546: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5547: LD_VAR 0 13
5551: PPUSH
5552: LD_VAR 0 9
5556: PPUSH
5557: LD_INT 0
5559: PPUSH
5560: CALL_OW 49
// attack_group = attack_group ^ un ;
5564: LD_ADDR_EXP 25
5568: PUSH
5569: LD_EXP 25
5573: PUSH
5574: LD_VAR 0 13
5578: ADD
5579: ST_TO_ADDR
// end ;
5580: GO 5483
5582: POP
5583: POP
// for i = 1 to sniperCount do
5584: LD_ADDR_VAR 0 11
5588: PUSH
5589: DOUBLE
5590: LD_INT 1
5592: DEC
5593: ST_TO_ADDR
5594: LD_VAR 0 4
5598: PUSH
5599: FOR_TO
5600: IFFALSE 5698
// begin uc_side = side ;
5602: LD_ADDR_OWVAR 20
5606: PUSH
5607: LD_VAR 0 1
5611: ST_TO_ADDR
// uc_nation = nation ;
5612: LD_ADDR_OWVAR 21
5616: PUSH
5617: LD_VAR 0 2
5621: ST_TO_ADDR
// hc_name =  ;
5622: LD_ADDR_OWVAR 26
5626: PUSH
5627: LD_STRING 
5629: ST_TO_ADDR
// hc_gallery =  ;
5630: LD_ADDR_OWVAR 33
5634: PUSH
5635: LD_STRING 
5637: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5638: LD_INT 0
5640: PPUSH
5641: LD_INT 5
5643: PPUSH
5644: LD_VAR 0 8
5648: PPUSH
5649: CALL_OW 380
// un = CreateHuman ;
5653: LD_ADDR_VAR 0 13
5657: PUSH
5658: CALL_OW 44
5662: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5663: LD_VAR 0 13
5667: PPUSH
5668: LD_VAR 0 9
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 49
// attack_group = attack_group ^ un ;
5680: LD_ADDR_EXP 25
5684: PUSH
5685: LD_EXP 25
5689: PUSH
5690: LD_VAR 0 13
5694: ADD
5695: ST_TO_ADDR
// end ;
5696: GO 5599
5698: POP
5699: POP
// for i = 1 to bazookCount do
5700: LD_ADDR_VAR 0 11
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_VAR 0 5
5714: PUSH
5715: FOR_TO
5716: IFFALSE 5814
// begin uc_side = side ;
5718: LD_ADDR_OWVAR 20
5722: PUSH
5723: LD_VAR 0 1
5727: ST_TO_ADDR
// uc_nation = nation ;
5728: LD_ADDR_OWVAR 21
5732: PUSH
5733: LD_VAR 0 2
5737: ST_TO_ADDR
// hc_name =  ;
5738: LD_ADDR_OWVAR 26
5742: PUSH
5743: LD_STRING 
5745: ST_TO_ADDR
// hc_gallery =  ;
5746: LD_ADDR_OWVAR 33
5750: PUSH
5751: LD_STRING 
5753: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5754: LD_INT 0
5756: PPUSH
5757: LD_INT 9
5759: PPUSH
5760: LD_VAR 0 8
5764: PPUSH
5765: CALL_OW 380
// un = CreateHuman ;
5769: LD_ADDR_VAR 0 13
5773: PUSH
5774: CALL_OW 44
5778: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5779: LD_VAR 0 13
5783: PPUSH
5784: LD_VAR 0 9
5788: PPUSH
5789: LD_INT 0
5791: PPUSH
5792: CALL_OW 49
// attack_group = attack_group ^ un ;
5796: LD_ADDR_EXP 25
5800: PUSH
5801: LD_EXP 25
5805: PUSH
5806: LD_VAR 0 13
5810: ADD
5811: ST_TO_ADDR
// end ;
5812: GO 5715
5814: POP
5815: POP
// for i = 1 to mortalCount do
5816: LD_ADDR_VAR 0 11
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_VAR 0 6
5830: PUSH
5831: FOR_TO
5832: IFFALSE 5930
// begin uc_side = side ;
5834: LD_ADDR_OWVAR 20
5838: PUSH
5839: LD_VAR 0 1
5843: ST_TO_ADDR
// uc_nation = nation ;
5844: LD_ADDR_OWVAR 21
5848: PUSH
5849: LD_VAR 0 2
5853: ST_TO_ADDR
// hc_name =  ;
5854: LD_ADDR_OWVAR 26
5858: PUSH
5859: LD_STRING 
5861: ST_TO_ADDR
// hc_gallery =  ;
5862: LD_ADDR_OWVAR 33
5866: PUSH
5867: LD_STRING 
5869: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5870: LD_INT 0
5872: PPUSH
5873: LD_INT 8
5875: PPUSH
5876: LD_VAR 0 8
5880: PPUSH
5881: CALL_OW 380
// un = CreateHuman ;
5885: LD_ADDR_VAR 0 13
5889: PUSH
5890: CALL_OW 44
5894: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5895: LD_VAR 0 13
5899: PPUSH
5900: LD_VAR 0 9
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// attack_group = attack_group ^ un ;
5912: LD_ADDR_EXP 25
5916: PUSH
5917: LD_EXP 25
5921: PUSH
5922: LD_VAR 0 13
5926: ADD
5927: ST_TO_ADDR
// end ;
5928: GO 5831
5930: POP
5931: POP
// end ;
5932: LD_VAR 0 10
5936: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
5937: LD_INT 0
5939: PPUSH
5940: PPUSH
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
5950: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
5951: LD_ADDR_VAR 0 6
5955: PUSH
5956: LD_INT 22
5958: PUSH
5959: LD_VAR 0 1
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 30
5970: PUSH
5971: LD_INT 6
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
5987: LD_ADDR_VAR 0 6
5991: PUSH
5992: LD_VAR 0 6
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_VAR 0 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PUSH
6009: LD_INT 30
6011: PUSH
6012: LD_INT 7
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PPUSH
6023: CALL_OW 69
6027: ADD
6028: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
6029: LD_ADDR_VAR 0 6
6033: PUSH
6034: LD_VAR 0 6
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_VAR 0 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 30
6053: PUSH
6054: LD_INT 8
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PPUSH
6065: CALL_OW 69
6069: ADD
6070: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
6071: LD_ADDR_VAR 0 8
6075: PUSH
6076: LD_INT 22
6078: PUSH
6079: LD_VAR 0 1
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 30
6090: PUSH
6091: LD_INT 2
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PPUSH
6102: CALL_OW 69
6106: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
6107: LD_ADDR_VAR 0 9
6111: PUSH
6112: LD_INT 22
6114: PUSH
6115: LD_VAR 0 1
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 30
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
6143: LD_ADDR_VAR 0 10
6147: PUSH
6148: LD_INT 22
6150: PUSH
6151: LD_VAR 0 1
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 30
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PPUSH
6174: CALL_OW 69
6178: ST_TO_ADDR
// sklad := sklad ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6179: LD_ADDR_VAR 0 10
6183: PUSH
6184: LD_VAR 0 10
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_VAR 0 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PPUSH
6215: CALL_OW 69
6219: ADD
6220: ST_TO_ADDR
// case side of 1 :
6221: LD_VAR 0 1
6225: PUSH
6226: LD_INT 1
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6234
6232: GO 6245
6234: POP
// uc_nation = nation_american ; 3 :
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
6243: GO 6265
6245: LD_INT 3
6247: DOUBLE
6248: EQUAL
6249: IFTRUE 6253
6251: GO 6264
6253: POP
// uc_nation = nation_russian ; end ;
6254: LD_ADDR_OWVAR 21
6258: PUSH
6259: LD_INT 3
6261: ST_TO_ADDR
6262: GO 6265
6264: POP
// for i = 1 to laby do
6265: LD_ADDR_VAR 0 3
6269: PUSH
6270: DOUBLE
6271: LD_INT 1
6273: DEC
6274: ST_TO_ADDR
6275: LD_VAR 0 6
6279: PUSH
6280: FOR_TO
6281: IFFALSE 6410
// begin if IsInUnit ( laby [ i ] ) = 0 then
6283: LD_VAR 0 6
6287: PUSH
6288: LD_VAR 0 3
6292: ARRAY
6293: PPUSH
6294: CALL_OW 310
6298: PUSH
6299: LD_INT 0
6301: EQUAL
6302: IFFALSE 6408
// begin uc_side = side ;
6304: LD_ADDR_OWVAR 20
6308: PUSH
6309: LD_VAR 0 1
6313: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6314: LD_ADDR_VAR 0 11
6318: PUSH
6319: LD_INT 2
6321: PPUSH
6322: LD_INT 4
6324: PPUSH
6325: CALL_OW 12
6329: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6330: LD_ADDR_VAR 0 4
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_VAR 0 11
6344: PUSH
6345: FOR_TO
6346: IFFALSE 6406
// begin PrepareScientist ( 0 , 4 ) ;
6348: LD_INT 0
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: CALL_OW 384
// ludz = CreateHuman ;
6358: LD_ADDR_VAR 0 12
6362: PUSH
6363: CALL_OW 44
6367: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
6368: LD_VAR 0 12
6372: PPUSH
6373: LD_VAR 0 6
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6388: LD_ADDR_VAR 0 11
6392: PUSH
6393: LD_INT 2
6395: PPUSH
6396: LD_INT 4
6398: PPUSH
6399: CALL_OW 12
6403: ST_TO_ADDR
// end ;
6404: GO 6345
6406: POP
6407: POP
// end ; end ;
6408: GO 6280
6410: POP
6411: POP
// for i = 1 to fabryki do
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: DOUBLE
6418: LD_INT 1
6420: DEC
6421: ST_TO_ADDR
6422: LD_VAR 0 9
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6557
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
6430: LD_VAR 0 9
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 310
6445: PUSH
6446: LD_INT 0
6448: EQUAL
6449: IFFALSE 6555
// begin uc_side = side ;
6451: LD_ADDR_OWVAR 20
6455: PUSH
6456: LD_VAR 0 1
6460: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6461: LD_ADDR_VAR 0 11
6465: PUSH
6466: LD_INT 2
6468: PPUSH
6469: LD_INT 4
6471: PPUSH
6472: CALL_OW 12
6476: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6477: LD_ADDR_VAR 0 4
6481: PUSH
6482: DOUBLE
6483: LD_INT 1
6485: DEC
6486: ST_TO_ADDR
6487: LD_VAR 0 11
6491: PUSH
6492: FOR_TO
6493: IFFALSE 6553
// begin PrepareMechanic ( 0 , 4 ) ;
6495: LD_INT 0
6497: PPUSH
6498: LD_INT 4
6500: PPUSH
6501: CALL_OW 383
// ludz = CreateHuman ;
6505: LD_ADDR_VAR 0 12
6509: PUSH
6510: CALL_OW 44
6514: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
6515: LD_VAR 0 12
6519: PPUSH
6520: LD_VAR 0 9
6524: PUSH
6525: LD_VAR 0 3
6529: ARRAY
6530: PPUSH
6531: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6535: LD_ADDR_VAR 0 11
6539: PUSH
6540: LD_INT 2
6542: PPUSH
6543: LD_INT 4
6545: PPUSH
6546: CALL_OW 12
6550: ST_TO_ADDR
// end ;
6551: GO 6492
6553: POP
6554: POP
// end ; end ;
6555: GO 6427
6557: POP
6558: POP
// for i = 1 to warsztaty do
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_VAR 0 8
6573: PUSH
6574: FOR_TO
6575: IFFALSE 6704
// begin if IsInUnit ( warsztaty [ i ] ) = 0 then
6577: LD_VAR 0 8
6581: PUSH
6582: LD_VAR 0 3
6586: ARRAY
6587: PPUSH
6588: CALL_OW 310
6592: PUSH
6593: LD_INT 0
6595: EQUAL
6596: IFFALSE 6702
// begin uc_side = side ;
6598: LD_ADDR_OWVAR 20
6602: PUSH
6603: LD_VAR 0 1
6607: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
6608: LD_ADDR_VAR 0 11
6612: PUSH
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 4
6618: PPUSH
6619: CALL_OW 12
6623: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6624: LD_ADDR_VAR 0 4
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_VAR 0 11
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6700
// begin PrepareMechanic ( 0 , 4 ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 4
6647: PPUSH
6648: CALL_OW 383
// ludz = CreateHuman ;
6652: LD_ADDR_VAR 0 12
6656: PUSH
6657: CALL_OW 44
6661: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , warsztaty [ i ] ) ;
6662: LD_VAR 0 12
6666: PPUSH
6667: LD_VAR 0 8
6671: PUSH
6672: LD_VAR 0 3
6676: ARRAY
6677: PPUSH
6678: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
6682: LD_ADDR_VAR 0 11
6686: PUSH
6687: LD_INT 2
6689: PPUSH
6690: LD_INT 4
6692: PPUSH
6693: CALL_OW 12
6697: ST_TO_ADDR
// end ;
6698: GO 6639
6700: POP
6701: POP
// end ; end ;
6702: GO 6574
6704: POP
6705: POP
// for i = 1 to sklad do
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: DOUBLE
6712: LD_INT 1
6714: DEC
6715: ST_TO_ADDR
6716: LD_VAR 0 10
6720: PUSH
6721: FOR_TO
6722: IFFALSE 6835
// begin if IsInUnit ( sklad [ i ] ) = 0 then
6724: LD_VAR 0 10
6728: PUSH
6729: LD_VAR 0 3
6733: ARRAY
6734: PPUSH
6735: CALL_OW 310
6739: PUSH
6740: LD_INT 0
6742: EQUAL
6743: IFFALSE 6833
// begin uc_side = side ;
6745: LD_ADDR_OWVAR 20
6749: PUSH
6750: LD_VAR 0 1
6754: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
6755: LD_ADDR_VAR 0 11
6759: PUSH
6760: LD_INT 2
6762: PPUSH
6763: LD_INT 3
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
6771: LD_ADDR_VAR 0 4
6775: PUSH
6776: DOUBLE
6777: LD_INT 1
6779: DEC
6780: ST_TO_ADDR
6781: LD_VAR 0 11
6785: PUSH
6786: FOR_TO
6787: IFFALSE 6831
// begin PrepareEngineer ( 0 , 4 ) ;
6789: LD_INT 0
6791: PPUSH
6792: LD_INT 4
6794: PPUSH
6795: CALL_OW 382
// ludz = CreateHuman ;
6799: LD_ADDR_VAR 0 12
6803: PUSH
6804: CALL_OW 44
6808: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
6809: LD_VAR 0 12
6813: PPUSH
6814: LD_VAR 0 10
6818: PUSH
6819: LD_VAR 0 3
6823: ARRAY
6824: PPUSH
6825: CALL_OW 52
// end ;
6829: GO 6786
6831: POP
6832: POP
// end ; end ;
6833: GO 6721
6835: POP
6836: POP
// end ;
6837: LD_VAR 0 2
6841: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
// case side of 1 :
6850: LD_VAR 0 1
6854: PUSH
6855: LD_INT 1
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6874
6863: POP
// uc_nation = nation_american ; 3 :
6864: LD_ADDR_OWVAR 21
6868: PUSH
6869: LD_INT 1
6871: ST_TO_ADDR
6872: GO 6894
6874: LD_INT 3
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 6893
6882: POP
// uc_nation = nation_russian ; end ;
6883: LD_ADDR_OWVAR 21
6887: PUSH
6888: LD_INT 3
6890: ST_TO_ADDR
6891: GO 6894
6893: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
6894: LD_ADDR_VAR 0 5
6898: PUSH
6899: LD_INT 22
6901: PUSH
6902: LD_VAR 0 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 30
6913: PUSH
6914: LD_INT 5
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 69
6929: ST_TO_ADDR
// for i = 1 to barrack do
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: DOUBLE
6936: LD_INT 1
6938: DEC
6939: ST_TO_ADDR
6940: LD_VAR 0 5
6944: PUSH
6945: FOR_TO
6946: IFFALSE 7119
// begin if IsInUnit ( barrack [ i ] ) = 0 then
6948: LD_VAR 0 5
6952: PUSH
6953: LD_VAR 0 3
6957: ARRAY
6958: PPUSH
6959: CALL_OW 310
6963: PUSH
6964: LD_INT 0
6966: EQUAL
6967: IFFALSE 7117
// begin uc_side = side ;
6969: LD_ADDR_OWVAR 20
6973: PUSH
6974: LD_VAR 0 1
6978: ST_TO_ADDR
// for j = 1 to 2 do
6979: LD_ADDR_VAR 0 4
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_INT 2
6991: PUSH
6992: FOR_TO
6993: IFFALSE 7037
// begin PrepareSoldier ( 0 , 5 ) ;
6995: LD_INT 0
6997: PPUSH
6998: LD_INT 5
7000: PPUSH
7001: CALL_OW 381
// soldat := CreateHuman ;
7005: LD_ADDR_VAR 0 6
7009: PUSH
7010: CALL_OW 44
7014: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7015: LD_VAR 0 6
7019: PPUSH
7020: LD_VAR 0 5
7024: PUSH
7025: LD_VAR 0 3
7029: ARRAY
7030: PPUSH
7031: CALL_OW 52
// end ;
7035: GO 6992
7037: POP
7038: POP
// if side = 3 then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_INT 3
7046: EQUAL
7047: IFFALSE 7117
// for j = 1 to 2 do
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: DOUBLE
7055: LD_INT 1
7057: DEC
7058: ST_TO_ADDR
7059: LD_INT 2
7061: PUSH
7062: FOR_TO
7063: IFFALSE 7115
// begin PrepareSoldier ( 0 , 5 ) ;
7065: LD_INT 0
7067: PPUSH
7068: LD_INT 5
7070: PPUSH
7071: CALL_OW 381
// hc_class = class_bazooker ;
7075: LD_ADDR_OWVAR 28
7079: PUSH
7080: LD_INT 9
7082: ST_TO_ADDR
// soldat := CreateHuman ;
7083: LD_ADDR_VAR 0 6
7087: PUSH
7088: CALL_OW 44
7092: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7093: LD_VAR 0 6
7097: PPUSH
7098: LD_VAR 0 5
7102: PUSH
7103: LD_VAR 0 3
7107: ARRAY
7108: PPUSH
7109: CALL_OW 52
// end ;
7113: GO 7062
7115: POP
7116: POP
// end ; end ;
7117: GO 6945
7119: POP
7120: POP
// end ;
7121: LD_VAR 0 2
7125: RET
// export function Assemble_Armories ( side ) ; var i , j , barrack , soldat , filter ; begin
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// case side of 1 :
7134: LD_VAR 0 1
7138: PUSH
7139: LD_INT 1
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7158
7147: POP
// uc_nation = nation_american ; 3 :
7148: LD_ADDR_OWVAR 21
7152: PUSH
7153: LD_INT 1
7155: ST_TO_ADDR
7156: GO 7178
7158: LD_INT 3
7160: DOUBLE
7161: EQUAL
7162: IFTRUE 7166
7164: GO 7177
7166: POP
// uc_nation = nation_russian ; end ;
7167: LD_ADDR_OWVAR 21
7171: PUSH
7172: LD_INT 3
7174: ST_TO_ADDR
7175: GO 7178
7177: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_armoury ] ] ) ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_VAR 0 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 30
7197: PUSH
7198: LD_INT 4
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: ST_TO_ADDR
// for i = 1 to barrack do
7214: LD_ADDR_VAR 0 3
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 5
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7325
// begin if IsInUnit ( barrack [ i ] ) = 0 then
7232: LD_VAR 0 5
7236: PUSH
7237: LD_VAR 0 3
7241: ARRAY
7242: PPUSH
7243: CALL_OW 310
7247: PUSH
7248: LD_INT 0
7250: EQUAL
7251: IFFALSE 7323
// begin uc_side = side ;
7253: LD_ADDR_OWVAR 20
7257: PUSH
7258: LD_VAR 0 1
7262: ST_TO_ADDR
// for j = 1 to 3 do
7263: LD_ADDR_VAR 0 4
7267: PUSH
7268: DOUBLE
7269: LD_INT 1
7271: DEC
7272: ST_TO_ADDR
7273: LD_INT 3
7275: PUSH
7276: FOR_TO
7277: IFFALSE 7321
// begin PrepareSoldier ( 0 , 5 ) ;
7279: LD_INT 0
7281: PPUSH
7282: LD_INT 5
7284: PPUSH
7285: CALL_OW 381
// soldat := CreateHuman ;
7289: LD_ADDR_VAR 0 6
7293: PUSH
7294: CALL_OW 44
7298: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
7299: LD_VAR 0 6
7303: PPUSH
7304: LD_VAR 0 5
7308: PUSH
7309: LD_VAR 0 3
7313: ARRAY
7314: PPUSH
7315: CALL_OW 52
// end ;
7319: GO 7276
7321: POP
7322: POP
// end ; end ;
7323: GO 7229
7325: POP
7326: POP
// end ;
7327: LD_VAR 0 2
7331: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
// dir := GetDir ( b ) ;
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_VAR 0 2
7345: PPUSH
7346: CALL_OW 254
7350: ST_TO_ADDR
// if dir < 3 then
7351: LD_VAR 0 4
7355: PUSH
7356: LD_INT 3
7358: LESS
7359: IFFALSE 7377
// dir := dir + 3 else
7361: LD_ADDR_VAR 0 4
7365: PUSH
7366: LD_VAR 0 4
7370: PUSH
7371: LD_INT 3
7373: PLUS
7374: ST_TO_ADDR
7375: GO 7391
// dir := dir - 3 ;
7377: LD_ADDR_VAR 0 4
7381: PUSH
7382: LD_VAR 0 4
7386: PUSH
7387: LD_INT 3
7389: MINUS
7390: ST_TO_ADDR
// SetDir ( un , dir ) ;
7391: LD_VAR 0 1
7395: PPUSH
7396: LD_VAR 0 4
7400: PPUSH
7401: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7405: LD_VAR 0 1
7409: PPUSH
7410: LD_VAR 0 2
7414: PPUSH
7415: CALL_OW 52
// end ;
7419: LD_VAR 0 3
7423: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
7424: LD_INT 0
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
7430: LD_ADDR_VAR 0 4
7434: PUSH
7435: LD_INT 22
7437: PUSH
7438: LD_VAR 0 1
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: LD_INT 23
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 30
7459: PUSH
7460: LD_INT 31
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: PPUSH
7472: CALL_OW 69
7476: ST_TO_ADDR
// for i = 1 to filter do
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: DOUBLE
7483: LD_INT 1
7485: DEC
7486: ST_TO_ADDR
7487: LD_VAR 0 4
7491: PUSH
7492: FOR_TO
7493: IFFALSE 7578
// if IsInUnit ( filter [ i ] ) = 0 then
7495: LD_VAR 0 4
7499: PUSH
7500: LD_VAR 0 3
7504: ARRAY
7505: PPUSH
7506: CALL_OW 310
7510: PUSH
7511: LD_INT 0
7513: EQUAL
7514: IFFALSE 7576
// begin uc_nation = nation_russian ;
7516: LD_ADDR_OWVAR 21
7520: PUSH
7521: LD_INT 3
7523: ST_TO_ADDR
// uc_side = side ;
7524: LD_ADDR_OWVAR 20
7528: PUSH
7529: LD_VAR 0 1
7533: ST_TO_ADDR
// PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7534: LD_INT 1
7536: PPUSH
7537: LD_EXP 42
7541: PPUSH
7542: CALL_OW 381
// un := CreateHuman ;
7546: LD_ADDR_VAR 0 5
7550: PUSH
7551: CALL_OW 44
7555: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
7556: LD_VAR 0 5
7560: PPUSH
7561: LD_VAR 0 4
7565: PUSH
7566: LD_VAR 0 3
7570: ARRAY
7571: PPUSH
7572: CALL 7332 0 2
// end ;
7576: GO 7492
7578: POP
7579: POP
// end ;
7580: LD_VAR 0 2
7584: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
7585: LD_INT 0
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
// uc_side := side ;
7591: LD_ADDR_OWVAR 20
7595: PUSH
7596: LD_VAR 0 1
7600: ST_TO_ADDR
// uc_nation := 3 ;
7601: LD_ADDR_OWVAR 21
7605: PUSH
7606: LD_INT 3
7608: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 30
7628: PUSH
7629: LD_INT 32
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 58
7638: PUSH
7639: EMPTY
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7683
// begin PrepareSoldier ( 1 , RuSolMaxLevel ) ;
7655: LD_INT 1
7657: PPUSH
7658: LD_EXP 42
7662: PPUSH
7663: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
7667: CALL_OW 44
7671: PPUSH
7672: LD_VAR 0 3
7676: PPUSH
7677: CALL_OW 52
// end ;
7681: GO 7652
7683: POP
7684: POP
// end ;
7685: LD_VAR 0 2
7689: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
7690: LD_INT 0
7692: PPUSH
// if not unit then
7693: LD_VAR 0 1
7697: NOT
7698: IFFALSE 7702
// exit ;
7700: GO 7736
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
7702: LD_VAR 0 1
7706: PPUSH
7707: LD_VAR 0 2
7711: PUSH
7712: LD_VAR 0 3
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_VAR 0 1
7725: PPUSH
7726: CALL_OW 258
7730: ARRAY
7731: PPUSH
7732: CALL_OW 88
// end ;
7736: LD_VAR 0 4
7740: RET
// export function RussianFirstAssault ; var i , filter , un , veh ; begin
7741: LD_INT 0
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
// uc_nation = nation_russian ;
7748: LD_ADDR_OWVAR 21
7752: PUSH
7753: LD_INT 3
7755: ST_TO_ADDR
// uc_side = 3 ;
7756: LD_ADDR_OWVAR 20
7760: PUSH
7761: LD_INT 3
7763: ST_TO_ADDR
// for i = 1 to 8 do
7764: LD_ADDR_VAR 0 2
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_INT 8
7776: PUSH
7777: FOR_TO
7778: IFFALSE 7855
// begin vc_chassis := ru_medium_wheeled ;
7780: LD_ADDR_OWVAR 37
7784: PUSH
7785: LD_INT 21
7787: ST_TO_ADDR
// vc_engine := engine_siberite ;
7788: LD_ADDR_OWVAR 39
7792: PUSH
7793: LD_INT 3
7795: ST_TO_ADDR
// vc_weapon := ru_gun ;
7796: LD_ADDR_OWVAR 40
7800: PUSH
7801: LD_INT 44
7803: ST_TO_ADDR
// vc_control := control_computer ;
7804: LD_ADDR_OWVAR 38
7808: PUSH
7809: LD_INT 3
7811: ST_TO_ADDR
// veh := CreateVehicle ;
7812: LD_ADDR_VAR 0 5
7816: PUSH
7817: CALL_OW 45
7821: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
7822: LD_VAR 0 5
7826: PPUSH
7827: LD_INT 2
7829: PPUSH
7830: LD_INT 0
7832: PPUSH
7833: CALL_OW 49
// RusHarassSquad = RusHarassSquad ^ veh ;
7837: LD_ADDR_EXP 26
7841: PUSH
7842: LD_EXP 26
7846: PUSH
7847: LD_VAR 0 5
7851: ADD
7852: ST_TO_ADDR
// end ;
7853: GO 7777
7855: POP
7856: POP
// ComMoveXY ( RusHarassSquad , 135 , 144 ) ;
7857: LD_EXP 26
7861: PPUSH
7862: LD_INT 135
7864: PPUSH
7865: LD_INT 144
7867: PPUSH
7868: CALL_OW 111
// AddComMoveXY ( RusHarassSquad , 158 , 176 ) ;
7872: LD_EXP 26
7876: PPUSH
7877: LD_INT 158
7879: PPUSH
7880: LD_INT 176
7882: PPUSH
7883: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 189 ) ;
7887: LD_EXP 26
7891: PPUSH
7892: LD_INT 169
7894: PPUSH
7895: LD_INT 189
7897: PPUSH
7898: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 176 , 225 ) ;
7902: LD_EXP 26
7906: PPUSH
7907: LD_INT 176
7909: PPUSH
7910: LD_INT 225
7912: PPUSH
7913: CALL_OW 171
// AddComMoveXY ( RusHarassSquad , 169 , 88 ) ;
7917: LD_EXP 26
7921: PPUSH
7922: LD_INT 169
7924: PPUSH
7925: LD_INT 88
7927: PPUSH
7928: CALL_OW 171
// end ;
7932: LD_VAR 0 1
7936: RET
// export RU2_Sols , RU2_Medics , RU2_Engs ; export function RU2_Assemble_MineBase ; var i , un ; begin
7937: LD_INT 0
7939: PPUSH
7940: PPUSH
7941: PPUSH
// uc_side = 6 ;
7942: LD_ADDR_OWVAR 20
7946: PUSH
7947: LD_INT 6
7949: ST_TO_ADDR
// uc_nation = 3 ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 3
7957: ST_TO_ADDR
// for i = 1 to 14 do
7958: LD_ADDR_VAR 0 2
7962: PUSH
7963: DOUBLE
7964: LD_INT 1
7966: DEC
7967: ST_TO_ADDR
7968: LD_INT 14
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8074
// begin uc_side = 6 ;
7974: LD_ADDR_OWVAR 20
7978: PUSH
7979: LD_INT 6
7981: ST_TO_ADDR
// uc_nation = 3 ;
7982: LD_ADDR_OWVAR 21
7986: PUSH
7987: LD_INT 3
7989: ST_TO_ADDR
// hc_gallery =  ;
7990: LD_ADDR_OWVAR 33
7994: PUSH
7995: LD_STRING 
7997: ST_TO_ADDR
// hc_name =  ;
7998: LD_ADDR_OWVAR 26
8002: PUSH
8003: LD_STRING 
8005: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8006: LD_INT 0
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: LD_EXP 41
8016: PPUSH
8017: LD_EXP 42
8021: PPUSH
8022: CALL_OW 12
8026: PPUSH
8027: CALL_OW 380
// un = CreateHuman ;
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: CALL_OW 44
8040: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8041: LD_VAR 0 3
8045: PPUSH
8046: LD_INT 2
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// RU2_Sols = RU2_Sols ^ un ;
8056: LD_ADDR_EXP 32
8060: PUSH
8061: LD_EXP 32
8065: PUSH
8066: LD_VAR 0 3
8070: ADD
8071: ST_TO_ADDR
// end ;
8072: GO 7971
8074: POP
8075: POP
// for i = 1 to 4 do
8076: LD_ADDR_VAR 0 2
8080: PUSH
8081: DOUBLE
8082: LD_INT 1
8084: DEC
8085: ST_TO_ADDR
8086: LD_INT 4
8088: PUSH
8089: FOR_TO
8090: IFFALSE 8192
// begin uc_side = 6 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 6
8099: ST_TO_ADDR
// uc_nation = 3 ;
8100: LD_ADDR_OWVAR 21
8104: PUSH
8105: LD_INT 3
8107: ST_TO_ADDR
// hc_gallery =  ;
8108: LD_ADDR_OWVAR 33
8112: PUSH
8113: LD_STRING 
8115: ST_TO_ADDR
// hc_name =  ;
8116: LD_ADDR_OWVAR 26
8120: PUSH
8121: LD_STRING 
8123: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8124: LD_INT 0
8126: PPUSH
8127: LD_INT 2
8129: PPUSH
8130: LD_EXP 41
8134: PPUSH
8135: LD_EXP 42
8139: PPUSH
8140: CALL_OW 12
8144: PPUSH
8145: CALL_OW 380
// un = CreateHuman ;
8149: LD_ADDR_VAR 0 3
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8159: LD_VAR 0 3
8163: PPUSH
8164: LD_INT 2
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: CALL_OW 49
// RU2_Engs = RU2_Engs ^ un ;
8174: LD_ADDR_EXP 34
8178: PUSH
8179: LD_EXP 34
8183: PUSH
8184: LD_VAR 0 3
8188: ADD
8189: ST_TO_ADDR
// end ;
8190: GO 8089
8192: POP
8193: POP
// for i = 1 to 2 do
8194: LD_ADDR_VAR 0 2
8198: PUSH
8199: DOUBLE
8200: LD_INT 1
8202: DEC
8203: ST_TO_ADDR
8204: LD_INT 2
8206: PUSH
8207: FOR_TO
8208: IFFALSE 8310
// begin uc_side = 6 ;
8210: LD_ADDR_OWVAR 20
8214: PUSH
8215: LD_INT 6
8217: ST_TO_ADDR
// uc_nation = 3 ;
8218: LD_ADDR_OWVAR 21
8222: PUSH
8223: LD_INT 3
8225: ST_TO_ADDR
// hc_gallery =  ;
8226: LD_ADDR_OWVAR 33
8230: PUSH
8231: LD_STRING 
8233: ST_TO_ADDR
// hc_name =  ;
8234: LD_ADDR_OWVAR 26
8238: PUSH
8239: LD_STRING 
8241: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8242: LD_INT 0
8244: PPUSH
8245: LD_INT 4
8247: PPUSH
8248: LD_EXP 41
8252: PPUSH
8253: LD_EXP 42
8257: PPUSH
8258: CALL_OW 12
8262: PPUSH
8263: CALL_OW 380
// un = CreateHuman ;
8267: LD_ADDR_VAR 0 3
8271: PUSH
8272: CALL_OW 44
8276: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8277: LD_VAR 0 3
8281: PPUSH
8282: LD_INT 2
8284: PPUSH
8285: LD_INT 0
8287: PPUSH
8288: CALL_OW 49
// RU2_Medics = RU2_Medics ^ un ;
8292: LD_ADDR_EXP 33
8296: PUSH
8297: LD_EXP 33
8301: PUSH
8302: LD_VAR 0 3
8306: ADD
8307: ST_TO_ADDR
// end ;
8308: GO 8207
8310: POP
8311: POP
// ComAgressiveMove ( RU2_Sols , 38 , 35 ) ;
8312: LD_EXP 32
8316: PPUSH
8317: LD_INT 38
8319: PPUSH
8320: LD_INT 35
8322: PPUSH
8323: CALL_OW 114
// ComAgressiveMove ( RU2_Medics , 38 , 35 ) ;
8327: LD_EXP 33
8331: PPUSH
8332: LD_INT 38
8334: PPUSH
8335: LD_INT 35
8337: PPUSH
8338: CALL_OW 114
// ComBuild ( RU2_Engs , b_depot , 32 , 30 , 2 ) ;
8342: LD_EXP 34
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: LD_INT 32
8352: PPUSH
8353: LD_INT 30
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 145
// AddComBuild ( RU2_Engs , b_siberite_mine , 39 , 38 , 0 ) ;
8363: LD_EXP 34
8367: PPUSH
8368: LD_INT 30
8370: PPUSH
8371: LD_INT 39
8373: PPUSH
8374: LD_INT 38
8376: PPUSH
8377: LD_INT 0
8379: PPUSH
8380: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 37 , 45 , 0 ) ;
8384: LD_EXP 34
8388: PPUSH
8389: LD_INT 4
8391: PPUSH
8392: LD_INT 37
8394: PPUSH
8395: LD_INT 45
8397: PPUSH
8398: LD_INT 0
8400: PPUSH
8401: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 33 , 46 , 0 ) ;
8405: LD_EXP 34
8409: PPUSH
8410: LD_INT 31
8412: PPUSH
8413: LD_INT 33
8415: PPUSH
8416: LD_INT 46
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 44 , 46 , 5 ) ;
8426: LD_EXP 34
8430: PPUSH
8431: LD_INT 31
8433: PPUSH
8434: LD_INT 44
8436: PPUSH
8437: LD_INT 46
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 205
// AddComBuild ( RU2_Engs , b_armoury , 39 , 14 , 4 ) ;
8447: LD_EXP 34
8451: PPUSH
8452: LD_INT 4
8454: PPUSH
8455: LD_INT 39
8457: PPUSH
8458: LD_INT 14
8460: PPUSH
8461: LD_INT 4
8463: PPUSH
8464: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 34 , 7 , 4 ) ;
8468: LD_EXP 34
8472: PPUSH
8473: LD_INT 31
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 7
8481: PPUSH
8482: LD_INT 4
8484: PPUSH
8485: CALL_OW 205
// AddComBuild ( RU2_Engs , b_breastwork , 39 , 18 , 4 ) ;
8489: LD_EXP 34
8493: PPUSH
8494: LD_INT 31
8496: PPUSH
8497: LD_INT 39
8499: PPUSH
8500: LD_INT 18
8502: PPUSH
8503: LD_INT 4
8505: PPUSH
8506: CALL_OW 205
// AddComMoveXY ( RU2_Engs , 35 , 39 ) ;
8510: LD_EXP 34
8514: PPUSH
8515: LD_INT 35
8517: PPUSH
8518: LD_INT 39
8520: PPUSH
8521: CALL_OW 171
// end ;
8525: LD_VAR 0 1
8529: RET
// export function RU2_Attack_Minebase ; var i , un , veh , DemoTeam_Enemy , attacker ; begin
8530: LD_INT 0
8532: PPUSH
8533: PPUSH
8534: PPUSH
8535: PPUSH
8536: PPUSH
8537: PPUSH
// uc_side = 6 ;
8538: LD_ADDR_OWVAR 20
8542: PUSH
8543: LD_INT 6
8545: ST_TO_ADDR
// uc_nation = 3 ;
8546: LD_ADDR_OWVAR 21
8550: PUSH
8551: LD_INT 3
8553: ST_TO_ADDR
// for i = 1 to 8 do
8554: LD_ADDR_VAR 0 2
8558: PUSH
8559: DOUBLE
8560: LD_INT 1
8562: DEC
8563: ST_TO_ADDR
8564: LD_INT 8
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8670
// begin uc_side = 6 ;
8570: LD_ADDR_OWVAR 20
8574: PUSH
8575: LD_INT 6
8577: ST_TO_ADDR
// uc_nation = 3 ;
8578: LD_ADDR_OWVAR 21
8582: PUSH
8583: LD_INT 3
8585: ST_TO_ADDR
// hc_gallery =  ;
8586: LD_ADDR_OWVAR 33
8590: PUSH
8591: LD_STRING 
8593: ST_TO_ADDR
// hc_name =  ;
8594: LD_ADDR_OWVAR 26
8598: PUSH
8599: LD_STRING 
8601: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8602: LD_INT 0
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: LD_EXP 41
8612: PPUSH
8613: LD_EXP 42
8617: PPUSH
8618: CALL_OW 12
8622: PPUSH
8623: CALL_OW 380
// un = CreateHuman ;
8627: LD_ADDR_VAR 0 3
8631: PUSH
8632: CALL_OW 44
8636: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Spawn_N , false ) ;
8637: LD_VAR 0 3
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: LD_INT 0
8647: PPUSH
8648: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ un ;
8652: LD_ADDR_EXP 27
8656: PUSH
8657: LD_EXP 27
8661: PUSH
8662: LD_VAR 0 3
8666: ADD
8667: ST_TO_ADDR
// end ;
8668: GO 8567
8670: POP
8671: POP
// for i = 1 to 2 do
8672: LD_ADDR_VAR 0 2
8676: PUSH
8677: DOUBLE
8678: LD_INT 1
8680: DEC
8681: ST_TO_ADDR
8682: LD_INT 2
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8763
// begin vc_chassis := ru_medium_tracked ;
8688: LD_ADDR_OWVAR 37
8692: PUSH
8693: LD_INT 22
8695: ST_TO_ADDR
// vc_engine := engine_siberite ;
8696: LD_ADDR_OWVAR 39
8700: PUSH
8701: LD_INT 3
8703: ST_TO_ADDR
// vc_weapon := ru_gun ;
8704: LD_ADDR_OWVAR 40
8708: PUSH
8709: LD_INT 44
8711: ST_TO_ADDR
// vc_control := control_computer ;
8712: LD_ADDR_OWVAR 38
8716: PUSH
8717: LD_INT 3
8719: ST_TO_ADDR
// veh := CreateVehicle ;
8720: LD_ADDR_VAR 0 4
8724: PUSH
8725: CALL_OW 45
8729: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8730: LD_VAR 0 4
8734: PPUSH
8735: LD_INT 2
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8745: LD_ADDR_EXP 27
8749: PUSH
8750: LD_EXP 27
8754: PUSH
8755: LD_VAR 0 4
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8685
8763: POP
8764: POP
// for i = 1 to 2 do
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_INT 2
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8856
// begin vc_chassis := ru_medium_tracked ;
8781: LD_ADDR_OWVAR 37
8785: PUSH
8786: LD_INT 22
8788: ST_TO_ADDR
// vc_engine := engine_siberite ;
8789: LD_ADDR_OWVAR 39
8793: PUSH
8794: LD_INT 3
8796: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
8797: LD_ADDR_OWVAR 40
8801: PUSH
8802: LD_INT 43
8804: ST_TO_ADDR
// vc_control := control_computer ;
8805: LD_ADDR_OWVAR 38
8809: PUSH
8810: LD_INT 3
8812: ST_TO_ADDR
// veh := CreateVehicle ;
8813: LD_ADDR_VAR 0 4
8817: PUSH
8818: CALL_OW 45
8822: ST_TO_ADDR
// PlaceUnitArea ( veh , RU_Spawn_N , false ) ;
8823: LD_VAR 0 4
8827: PPUSH
8828: LD_INT 2
8830: PPUSH
8831: LD_INT 0
8833: PPUSH
8834: CALL_OW 49
// RU2_DemoTeam = RU2_DemoTeam ^ veh ;
8838: LD_ADDR_EXP 27
8842: PUSH
8843: LD_EXP 27
8847: PUSH
8848: LD_VAR 0 4
8852: ADD
8853: ST_TO_ADDR
// end ;
8854: GO 8778
8856: POP
8857: POP
// Attack ( [ 0 , RU2_DemoTeam , [ [ 78 , 10 ] , [ 20 , 16 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
8858: LD_INT 0
8860: PUSH
8861: LD_EXP 27
8865: PUSH
8866: LD_INT 78
8868: PUSH
8869: LD_INT 10
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 16
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 0
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: LD_INT 0
8898: PUSH
8899: LD_INT 1
8901: PUSH
8902: LD_INT 0
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: LD_INT 0
8910: PUSH
8911: LD_INT 0
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: LD_INT 1
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PPUSH
8938: CALL 72881 0 1
// end ;
8942: LD_VAR 0 1
8946: RET
// export function RU3_Baterie_Prepare ; var i , un , veh ; begin
8947: LD_INT 0
8949: PPUSH
8950: PPUSH
8951: PPUSH
8952: PPUSH
// uc_side = 5 ;
8953: LD_ADDR_OWVAR 20
8957: PUSH
8958: LD_INT 5
8960: ST_TO_ADDR
// uc_nation = 3 ;
8961: LD_ADDR_OWVAR 21
8965: PUSH
8966: LD_INT 3
8968: ST_TO_ADDR
// for i = 1 to 5 do
8969: LD_ADDR_VAR 0 2
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_INT 5
8981: PUSH
8982: FOR_TO
8983: IFFALSE 9061
// begin vc_chassis := ru_heavy_tracked ;
8985: LD_ADDR_OWVAR 37
8989: PUSH
8990: LD_INT 24
8992: ST_TO_ADDR
// vc_engine := engine_siberite ;
8993: LD_ADDR_OWVAR 39
8997: PUSH
8998: LD_INT 3
9000: ST_TO_ADDR
// vc_weapon := ru_rocket ;
9001: LD_ADDR_OWVAR 40
9005: PUSH
9006: LD_INT 47
9008: ST_TO_ADDR
// vc_control := control_manual ;
9009: LD_ADDR_OWVAR 38
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// veh := CreateVehicle ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: CALL_OW 45
9026: ST_TO_ADDR
// RU3_Baterie = RU3_Baterie ^ veh ;
9027: LD_ADDR_EXP 28
9031: PUSH
9032: LD_EXP 28
9036: PUSH
9037: LD_VAR 0 4
9041: ADD
9042: ST_TO_ADDR
// RU3_BaterieVehs = RU3_BaterieVehs ^ veh ;
9043: LD_ADDR_EXP 29
9047: PUSH
9048: LD_EXP 29
9052: PUSH
9053: LD_VAR 0 4
9057: ADD
9058: ST_TO_ADDR
// end ;
9059: GO 8982
9061: POP
9062: POP
// PlaceUnitXYR ( RU3_BaterieVehs [ 1 ] , 275 , 234 , 0 , false ) ;
9063: LD_EXP 29
9067: PUSH
9068: LD_INT 1
9070: ARRAY
9071: PPUSH
9072: LD_INT 275
9074: PPUSH
9075: LD_INT 234
9077: PPUSH
9078: LD_INT 0
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 2 ] , 280 , 237 , 0 , false ) ;
9088: LD_EXP 29
9092: PUSH
9093: LD_INT 2
9095: ARRAY
9096: PPUSH
9097: LD_INT 280
9099: PPUSH
9100: LD_INT 237
9102: PPUSH
9103: LD_INT 0
9105: PPUSH
9106: LD_INT 0
9108: PPUSH
9109: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 3 ] , 283 , 235 , 0 , false ) ;
9113: LD_EXP 29
9117: PUSH
9118: LD_INT 3
9120: ARRAY
9121: PPUSH
9122: LD_INT 283
9124: PPUSH
9125: LD_INT 235
9127: PPUSH
9128: LD_INT 0
9130: PPUSH
9131: LD_INT 0
9133: PPUSH
9134: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 4 ] , 282 , 231 , 0 , false ) ;
9138: LD_EXP 29
9142: PUSH
9143: LD_INT 4
9145: ARRAY
9146: PPUSH
9147: LD_INT 282
9149: PPUSH
9150: LD_INT 231
9152: PPUSH
9153: LD_INT 0
9155: PPUSH
9156: LD_INT 0
9158: PPUSH
9159: CALL_OW 50
// PlaceUnitXYR ( RU3_BaterieVehs [ 5 ] , 279 , 229 , 0 , false ) ;
9163: LD_EXP 29
9167: PUSH
9168: LD_INT 5
9170: ARRAY
9171: PPUSH
9172: LD_INT 279
9174: PPUSH
9175: LD_INT 229
9177: PPUSH
9178: LD_INT 0
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 50
// for i = 1 to 9 do
9188: LD_ADDR_VAR 0 2
9192: PUSH
9193: DOUBLE
9194: LD_INT 1
9196: DEC
9197: ST_TO_ADDR
9198: LD_INT 9
9200: PUSH
9201: FOR_TO
9202: IFFALSE 9304
// begin uc_side = 5 ;
9204: LD_ADDR_OWVAR 20
9208: PUSH
9209: LD_INT 5
9211: ST_TO_ADDR
// uc_nation = 3 ;
9212: LD_ADDR_OWVAR 21
9216: PUSH
9217: LD_INT 3
9219: ST_TO_ADDR
// hc_gallery =  ;
9220: LD_ADDR_OWVAR 33
9224: PUSH
9225: LD_STRING 
9227: ST_TO_ADDR
// hc_name =  ;
9228: LD_ADDR_OWVAR 26
9232: PUSH
9233: LD_STRING 
9235: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_EXP 41
9246: PPUSH
9247: LD_EXP 42
9251: PPUSH
9252: CALL_OW 12
9256: PPUSH
9257: CALL_OW 380
// un = CreateHuman ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: CALL_OW 44
9270: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 13
9278: PPUSH
9279: LD_INT 0
9281: PPUSH
9282: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9286: LD_ADDR_EXP 28
9290: PUSH
9291: LD_EXP 28
9295: PUSH
9296: LD_VAR 0 3
9300: ADD
9301: ST_TO_ADDR
// end ;
9302: GO 9201
9304: POP
9305: POP
// for i = 1 to 5 do
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: DOUBLE
9312: LD_INT 1
9314: DEC
9315: ST_TO_ADDR
9316: LD_INT 5
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9438
// begin uc_side = 5 ;
9322: LD_ADDR_OWVAR 20
9326: PUSH
9327: LD_INT 5
9329: ST_TO_ADDR
// uc_nation = 3 ;
9330: LD_ADDR_OWVAR 21
9334: PUSH
9335: LD_INT 3
9337: ST_TO_ADDR
// hc_gallery =  ;
9338: LD_ADDR_OWVAR 33
9342: PUSH
9343: LD_STRING 
9345: ST_TO_ADDR
// hc_name =  ;
9346: LD_ADDR_OWVAR 26
9350: PUSH
9351: LD_STRING 
9353: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9354: LD_INT 0
9356: PPUSH
9357: LD_INT 3
9359: PPUSH
9360: LD_EXP 41
9364: PPUSH
9365: LD_EXP 42
9369: PPUSH
9370: CALL_OW 12
9374: PPUSH
9375: CALL_OW 380
// un = CreateHuman ;
9379: LD_ADDR_VAR 0 3
9383: PUSH
9384: CALL_OW 44
9388: ST_TO_ADDR
// PlaceUnitArea ( un , RU3_Spawn , false ) ;
9389: LD_VAR 0 3
9393: PPUSH
9394: LD_INT 13
9396: PPUSH
9397: LD_INT 0
9399: PPUSH
9400: CALL_OW 49
// RU3_Baterie = RU3_Baterie ^ un ;
9404: LD_ADDR_EXP 28
9408: PUSH
9409: LD_EXP 28
9413: PUSH
9414: LD_VAR 0 3
9418: ADD
9419: ST_TO_ADDR
// RU3_BaterieMechs = RU3_BaterieMechs ^ un ;
9420: LD_ADDR_EXP 30
9424: PUSH
9425: LD_EXP 30
9429: PUSH
9430: LD_VAR 0 3
9434: ADD
9435: ST_TO_ADDR
// end ;
9436: GO 9319
9438: POP
9439: POP
// end ;
9440: LD_VAR 0 1
9444: RET
// export function RU3BaterieMovement ; var Baterie_Enemy , attacker ; begin
9445: LD_INT 0
9447: PPUSH
9448: PPUSH
9449: PPUSH
// ComEnterUnit ( RU3_BaterieMechs [ 1 ] , RU3_BaterieVehs [ 1 ] ) ;
9450: LD_EXP 30
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_EXP 29
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 2 ] , RU3_BaterieVehs [ 2 ] ) ;
9472: LD_EXP 30
9476: PUSH
9477: LD_INT 2
9479: ARRAY
9480: PPUSH
9481: LD_EXP 29
9485: PUSH
9486: LD_INT 2
9488: ARRAY
9489: PPUSH
9490: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 3 ] , RU3_BaterieVehs [ 3 ] ) ;
9494: LD_EXP 30
9498: PUSH
9499: LD_INT 3
9501: ARRAY
9502: PPUSH
9503: LD_EXP 29
9507: PUSH
9508: LD_INT 3
9510: ARRAY
9511: PPUSH
9512: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 4 ] , RU3_BaterieVehs [ 4 ] ) ;
9516: LD_EXP 30
9520: PUSH
9521: LD_INT 4
9523: ARRAY
9524: PPUSH
9525: LD_EXP 29
9529: PUSH
9530: LD_INT 4
9532: ARRAY
9533: PPUSH
9534: CALL_OW 120
// ComEnterUnit ( RU3_BaterieMechs [ 5 ] , RU3_BaterieVehs [ 5 ] ) ;
9538: LD_EXP 30
9542: PUSH
9543: LD_INT 5
9545: ARRAY
9546: PPUSH
9547: LD_EXP 29
9551: PUSH
9552: LD_INT 5
9554: ARRAY
9555: PPUSH
9556: CALL_OW 120
// wait ( 0 0$15 ) ;
9560: LD_INT 525
9562: PPUSH
9563: CALL_OW 67
// if RU3_BaterieMechs > 0 and RU3_BaterieVehs > 0 then
9567: LD_EXP 30
9571: PUSH
9572: LD_INT 0
9574: GREATER
9575: PUSH
9576: LD_EXP 29
9580: PUSH
9581: LD_INT 0
9583: GREATER
9584: AND
9585: IFFALSE 9679
// begin RU3BaterieTimeOut = true ;
9587: LD_ADDR_EXP 31
9591: PUSH
9592: LD_INT 1
9594: ST_TO_ADDR
// Attack ( [ 0 , RU3_Baterie , [ [ 204 , 209 ] , [ 162 , 205 ] ] , [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
9595: LD_INT 0
9597: PUSH
9598: LD_EXP 28
9602: PUSH
9603: LD_INT 204
9605: PUSH
9606: LD_INT 209
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 162
9615: PUSH
9616: LD_INT 205
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 0
9629: PUSH
9630: LD_INT 1
9632: PUSH
9633: LD_INT 0
9635: PUSH
9636: LD_INT 1
9638: PUSH
9639: LD_INT 0
9641: PUSH
9642: LD_INT 0
9644: PUSH
9645: LD_INT 0
9647: PUSH
9648: LD_INT 0
9650: PUSH
9651: LD_INT 1
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PPUSH
9675: CALL 72881 0 1
// end ; end ; end_of_file
9679: LD_VAR 0 1
9683: RET
// export SiberiteMineTaken , DvaliContactMade ; export RU2MineBaseBuilt , RU2_SibMine , RU2_Armouries , RU2_Breastworks ; on UnitDestroyed ( un ) do begin if un = Simone then
9684: LD_VAR 0 1
9688: PUSH
9689: LD_EXP 8
9693: EQUAL
9694: IFFALSE 9722
// begin ExclusiveOn ;
9696: CALL_OW 4
// Wait ( 0 0$2 ) ;
9700: LD_INT 70
9702: PPUSH
9703: CALL_OW 67
// YouLost ( Simone ) ;
9707: LD_STRING Simone
9709: PPUSH
9710: CALL_OW 104
// ExclusiveOff ;
9714: CALL_OW 5
// exit ;
9718: GO 9971
// end else
9720: GO 9962
// if un = Kathryn then
9722: LD_VAR 0 1
9726: PUSH
9727: LD_EXP 9
9731: EQUAL
9732: IFFALSE 9760
// begin ExclusiveOn ;
9734: CALL_OW 4
// Wait ( 0 0$2 ) ;
9738: LD_INT 70
9740: PPUSH
9741: CALL_OW 67
// YouLost ( Kathryn ) ;
9745: LD_STRING Kathryn
9747: PPUSH
9748: CALL_OW 104
// ExclusiveOff ;
9752: CALL_OW 5
// exit ;
9756: GO 9971
// end else
9758: GO 9962
// if un = Miller then
9760: LD_VAR 0 1
9764: PUSH
9765: LD_EXP 10
9769: EQUAL
9770: IFFALSE 9798
// begin ExclusiveOn ;
9772: CALL_OW 4
// Wait ( 0 0$2 ) ;
9776: LD_INT 70
9778: PPUSH
9779: CALL_OW 67
// YouLost ( Miller ) ;
9783: LD_STRING Miller
9785: PPUSH
9786: CALL_OW 104
// ExclusiveOff ;
9790: CALL_OW 5
// exit ;
9794: GO 9971
// end else
9796: GO 9962
// if un = Smithy then
9798: LD_VAR 0 1
9802: PUSH
9803: LD_EXP 12
9807: EQUAL
9808: IFFALSE 9836
// begin ExclusiveOn ;
9810: CALL_OW 4
// Wait ( 0 0$2 ) ;
9814: LD_INT 70
9816: PPUSH
9817: CALL_OW 67
// YouLost ( Smithy ) ;
9821: LD_STRING Smithy
9823: PPUSH
9824: CALL_OW 104
// ExclusiveOff ;
9828: CALL_OW 5
// exit ;
9832: GO 9971
// end else
9834: GO 9962
// if un = AM_Depot then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 1
9843: EQUAL
9844: IFFALSE 9872
// begin ExclusiveOn ;
9846: CALL_OW 4
// Wait ( 0 0$2 ) ;
9850: LD_INT 70
9852: PPUSH
9853: CALL_OW 67
// YouLost ( FriendlyBase ) ;
9857: LD_STRING FriendlyBase
9859: PPUSH
9860: CALL_OW 104
// ExclusiveOff ;
9864: CALL_OW 5
// exit ;
9868: GO 9971
// end else
9870: GO 9962
// if GetSide ( un ) = 5 and GetClass ( un ) = class_mechanic then
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 255
9881: PUSH
9882: LD_INT 5
9884: EQUAL
9885: PUSH
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: AND
9900: IFFALSE 9918
// begin RU3_BaterieMechs = RU3_BaterieMechs - 1 ;
9902: LD_ADDR_EXP 30
9906: PUSH
9907: LD_EXP 30
9911: PUSH
9912: LD_INT 1
9914: MINUS
9915: ST_TO_ADDR
// end else
9916: GO 9962
// if GetSide ( un ) = 5 and GetWeapon ( un ) = ru_rocket then
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 255
9927: PUSH
9928: LD_INT 5
9930: EQUAL
9931: PUSH
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 264
9941: PUSH
9942: LD_INT 47
9944: EQUAL
9945: AND
9946: IFFALSE 9962
// begin RU3_BaterieVehs = RU3_BaterieVehs - 1 ;
9948: LD_ADDR_EXP 29
9952: PUSH
9953: LD_EXP 29
9957: PUSH
9958: LD_INT 1
9960: MINUS
9961: ST_TO_ADDR
// end ; MCE_UnitDestroyed ( un ) ;
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL 35391 0 1
// end ;
9971: PPOPN 1
9973: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9974: LD_VAR 0 1
9978: PPUSH
9979: LD_VAR 0 2
9983: PPUSH
9984: CALL 37258 0 2
// end ;
9988: PPOPN 2
9990: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 7 and not SiberiteMineTaken then
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 266
10000: PUSH
10001: LD_INT 30
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PPUSH
10010: CALL_OW 255
10014: PUSH
10015: LD_INT 7
10017: EQUAL
10018: AND
10019: PUSH
10020: LD_EXP 35
10024: NOT
10025: AND
10026: IFFALSE 10102
// begin if not RU2MineBaseBuilt then
10028: LD_EXP 37
10032: NOT
10033: IFFALSE 10049
// Say ( Simone , D2-Simone-1 ) else
10035: LD_EXP 8
10039: PPUSH
10040: LD_STRING D2-Simone-1
10042: PPUSH
10043: CALL_OW 88
10047: GO 10061
// Say ( Simone , D2-Simone-1b ) ;
10049: LD_EXP 8
10053: PPUSH
10054: LD_STRING D2-Simone-1b
10056: PPUSH
10057: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
10061: LD_STRING M2
10063: PPUSH
10064: CALL_OW 337
// SiberiteMineTaken = true ;
10068: LD_ADDR_EXP 35
10072: PUSH
10073: LD_INT 1
10075: ST_TO_ADDR
// wait ( 0 0$25 ) ;
10076: LD_INT 875
10078: PPUSH
10079: CALL_OW 67
// if not RU2MineBaseBuilt then
10083: LD_EXP 37
10087: NOT
10088: IFFALSE 10102
// Say ( Simone , D2-Simone-2 ) ;
10090: LD_EXP 8
10094: PPUSH
10095: LD_STRING D2-Simone-2
10097: PPUSH
10098: CALL_OW 88
// end ; if GetBType ( building ) = b_siberite_mine and GetSide ( building ) = 6 then
10102: LD_VAR 0 1
10106: PPUSH
10107: CALL_OW 266
10111: PUSH
10112: LD_INT 30
10114: EQUAL
10115: PUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 255
10125: PUSH
10126: LD_INT 6
10128: EQUAL
10129: AND
10130: IFFALSE 10150
// begin RU2_SibMine = building ;
10132: LD_ADDR_EXP 38
10136: PUSH
10137: LD_VAR 0 1
10141: ST_TO_ADDR
// RU2MineBaseBuilt = true ;
10142: LD_ADDR_EXP 37
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 6 then
10150: LD_VAR 0 1
10154: PPUSH
10155: CALL_OW 266
10159: PUSH
10160: LD_INT 4
10162: EQUAL
10163: PUSH
10164: LD_VAR 0 1
10168: PPUSH
10169: CALL_OW 255
10173: PUSH
10174: LD_INT 6
10176: EQUAL
10177: AND
10178: IFFALSE 10324
// begin RU2_Armouries = RU2_Armouries + 1 ;
10180: LD_ADDR_EXP 39
10184: PUSH
10185: LD_EXP 39
10189: PUSH
10190: LD_INT 1
10192: PLUS
10193: ST_TO_ADDR
// case RU2_Armouries of 1 :
10194: LD_EXP 39
10198: PUSH
10199: LD_INT 1
10201: DOUBLE
10202: EQUAL
10203: IFTRUE 10207
10205: GO 10261
10207: POP
// ComEnterUnit ( [ RU2_Sols [ 1 ] , RU2_Sols [ 2 ] , RU2_Sols [ 3 ] , RU2_Sols [ 4 ] ] , building ) ; 2 :
10208: LD_EXP 32
10212: PUSH
10213: LD_INT 1
10215: ARRAY
10216: PUSH
10217: LD_EXP 32
10221: PUSH
10222: LD_INT 2
10224: ARRAY
10225: PUSH
10226: LD_EXP 32
10230: PUSH
10231: LD_INT 3
10233: ARRAY
10234: PUSH
10235: LD_EXP 32
10239: PUSH
10240: LD_INT 4
10242: ARRAY
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: PPUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 120
10259: GO 10324
10261: LD_INT 2
10263: DOUBLE
10264: EQUAL
10265: IFTRUE 10269
10267: GO 10323
10269: POP
// ComEnterUnit ( [ RU2_Sols [ 7 ] , RU2_Sols [ 8 ] , RU2_Sols [ 9 ] , RU2_Sols [ 10 ] ] , building ) ; end ;
10270: LD_EXP 32
10274: PUSH
10275: LD_INT 7
10277: ARRAY
10278: PUSH
10279: LD_EXP 32
10283: PUSH
10284: LD_INT 8
10286: ARRAY
10287: PUSH
10288: LD_EXP 32
10292: PUSH
10293: LD_INT 9
10295: ARRAY
10296: PUSH
10297: LD_EXP 32
10301: PUSH
10302: LD_INT 10
10304: ARRAY
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: LD_VAR 0 1
10316: PPUSH
10317: CALL_OW 120
10321: GO 10324
10323: POP
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 266
10333: PUSH
10334: LD_INT 31
10336: EQUAL
10337: PUSH
10338: LD_VAR 0 1
10342: PPUSH
10343: CALL_OW 255
10347: PUSH
10348: LD_INT 6
10350: EQUAL
10351: AND
10352: IFFALSE 10490
// begin RU2_Breastworks = RU2_Breastworks + 1 ;
10354: LD_ADDR_EXP 40
10358: PUSH
10359: LD_EXP 40
10363: PUSH
10364: LD_INT 1
10366: PLUS
10367: ST_TO_ADDR
// case RU2_Breastworks of 1 :
10368: LD_EXP 40
10372: PUSH
10373: LD_INT 1
10375: DOUBLE
10376: EQUAL
10377: IFTRUE 10381
10379: GO 10402
10381: POP
// ComEnterUnit ( RU2_Sols [ 5 ] , building ) ; 2 :
10382: LD_EXP 32
10386: PUSH
10387: LD_INT 5
10389: ARRAY
10390: PPUSH
10391: LD_VAR 0 1
10395: PPUSH
10396: CALL_OW 120
10400: GO 10490
10402: LD_INT 2
10404: DOUBLE
10405: EQUAL
10406: IFTRUE 10410
10408: GO 10431
10410: POP
// ComEnterUnit ( RU2_Sols [ 6 ] , building ) ; 3 :
10411: LD_EXP 32
10415: PUSH
10416: LD_INT 6
10418: ARRAY
10419: PPUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 120
10429: GO 10490
10431: LD_INT 3
10433: DOUBLE
10434: EQUAL
10435: IFTRUE 10439
10437: GO 10460
10439: POP
// ComEnterUnit ( RU2_Sols [ 11 ] , building ) ; 4 :
10440: LD_EXP 32
10444: PUSH
10445: LD_INT 11
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 120
10458: GO 10490
10460: LD_INT 4
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10489
10468: POP
// ComEnterUnit ( RU2_Sols [ 12 ] , building ) ; end ;
10469: LD_EXP 32
10473: PUSH
10474: LD_INT 12
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 1
10482: PPUSH
10483: CALL_OW 120
10487: GO 10490
10489: POP
// end ; if ( GetSide ( building ) = 6 ) and ( GetBType ( building ) = b_depot ) then
10490: LD_VAR 0 1
10494: PPUSH
10495: CALL_OW 255
10499: PUSH
10500: LD_INT 6
10502: EQUAL
10503: PUSH
10504: LD_VAR 0 1
10508: PPUSH
10509: CALL_OW 266
10513: PUSH
10514: LD_INT 0
10516: EQUAL
10517: AND
10518: IFFALSE 10540
// begin SetResourceType ( GetBase ( building ) , mat_cans , 250 ) ;
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 274
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: LD_INT 250
10535: PPUSH
10536: CALL_OW 277
// end ; MCE_BuildingComplete ( building ) ;
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL 36574 0 1
// end ;
10549: PPOPN 1
10551: END
// on BuildingCaptured ( building , former_side , capturing_unit ) do begin if GetBType ( building ) = b_siberite_mine and former_side = 6 then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 266
10561: PUSH
10562: LD_INT 30
10564: EQUAL
10565: PUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_INT 6
10573: EQUAL
10574: AND
10575: IFFALSE 10604
// begin Say ( Simone , D2-Simone-1b ) ;
10577: LD_EXP 8
10581: PPUSH
10582: LD_STRING D2-Simone-1b
10584: PPUSH
10585: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
10589: LD_STRING M2
10591: PPUSH
10592: CALL_OW 337
// SiberiteMineTaken = true ;
10596: LD_ADDR_EXP 35
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// end ; MCE_BuildingCaptured ( building , former_side , capturing_unit ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_VAR 0 2
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: CALL 34045 0 3
// end ;
10623: PPOPN 3
10625: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10626: LD_VAR 0 1
10630: PPUSH
10631: CALL 36340 0 1
// end ;
10635: PPOPN 1
10637: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10638: LD_VAR 0 1
10642: PPUSH
10643: LD_VAR 0 2
10647: PPUSH
10648: CALL 35103 0 2
// end ;
10652: PPOPN 2
10654: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10655: LD_VAR 0 1
10659: PPUSH
10660: LD_VAR 0 2
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_VAR 0 4
10674: PPUSH
10675: LD_VAR 0 5
10679: PPUSH
10680: CALL 34730 0 5
// end ;
10684: PPOPN 5
10686: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10687: LD_VAR 0 1
10691: PPUSH
10692: LD_VAR 0 2
10696: PPUSH
10697: CALL 34418 0 2
// end ;
10701: PPOPN 2
10703: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10704: LD_VAR 0 1
10708: PPUSH
10709: LD_VAR 0 2
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_VAR 0 4
10723: PPUSH
10724: CALL 34263 0 4
// end ;
10728: PPOPN 4
10730: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_VAR 0 2
10740: PPUSH
10741: CALL 33937 0 2
// end ;
10745: PPOPN 2
10747: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_VAR 0 2
10757: PPUSH
10758: CALL 37512 0 2
// end ;
10762: PPOPN 2
10764: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_VAR 0 2
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_VAR 0 4
10784: PPUSH
10785: CALL 37721 0 4
// end ;
10789: PPOPN 4
10791: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10792: LD_VAR 0 1
10796: PPUSH
10797: LD_VAR 0 2
10801: PPUSH
10802: CALL 33753 0 2
// end ;
10806: PPOPN 2
10808: END
// on Contact ( side1 , side2 ) do begin if side1 = 7 and side2 = 8 and not DvaliContactMade then
10809: LD_VAR 0 1
10813: PUSH
10814: LD_INT 7
10816: EQUAL
10817: PUSH
10818: LD_VAR 0 2
10822: PUSH
10823: LD_INT 8
10825: EQUAL
10826: AND
10827: PUSH
10828: LD_EXP 36
10832: NOT
10833: AND
10834: IFFALSE 10868
// begin Say ( Simone , D5-Simone-1 ) ;
10836: LD_EXP 8
10840: PPUSH
10841: LD_STRING D5-Simone-1
10843: PPUSH
10844: CALL_OW 88
// Say ( Smithy , D5-Smithy-1 ) ;
10848: LD_EXP 12
10852: PPUSH
10853: LD_STRING D5-Smithy-1
10855: PPUSH
10856: CALL_OW 88
// DvaliContactMade = true ;
10860: LD_ADDR_EXP 36
10864: PUSH
10865: LD_INT 1
10867: ST_TO_ADDR
// end ; if ( side1 = 7 and side2 = 1 ) or ( side2 = 1 and side1 = 7 ) then
10868: LD_VAR 0 1
10872: PUSH
10873: LD_INT 7
10875: EQUAL
10876: PUSH
10877: LD_VAR 0 2
10881: PUSH
10882: LD_INT 1
10884: EQUAL
10885: AND
10886: PUSH
10887: LD_VAR 0 2
10891: PUSH
10892: LD_INT 1
10894: EQUAL
10895: PUSH
10896: LD_VAR 0 1
10900: PUSH
10901: LD_INT 7
10903: EQUAL
10904: AND
10905: OR
10906: IFFALSE 10945
// begin ExclusiveOn ;
10908: CALL_OW 4
// DialogueOn ;
10912: CALL_OW 6
// SayRadio ( Barnes , DFriendlyFire-Barnes-1 ) ;
10916: LD_EXP 15
10920: PPUSH
10921: LD_STRING DFriendlyFire-Barnes-1
10923: PPUSH
10924: CALL_OW 94
// DialogueOff ;
10928: CALL_OW 7
// YouLost ( FriendlyFire ) ;
10932: LD_STRING FriendlyFire
10934: PPUSH
10935: CALL_OW 104
// ExclusiveOff ;
10939: CALL_OW 5
// exit ;
10943: GO 10945
// end ; end ; end_of_file
10945: PPOPN 2
10947: END
// export function AIEngageEnemy ; var enemy , attacker ; begin
10948: LD_INT 0
10950: PPUSH
10951: PPUSH
10952: PPUSH
// enemy = Filterallunits ( [ f_side , 1 ] ) ^ Filterallunits ( [ f_side , 7 ] ) ;
10953: LD_ADDR_VAR 0 2
10957: PUSH
10958: LD_INT 22
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_INT 7
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PPUSH
10983: CALL_OW 69
10987: ADD
10988: ST_TO_ADDR
// for attacker in attack_group do
10989: LD_ADDR_VAR 0 3
10993: PUSH
10994: LD_EXP 25
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11028
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: CALL_OW 74
11021: PPUSH
11022: CALL_OW 115
11026: GO 10999
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 1
11034: RET
// every 0 0$1 do
11035: GO 11037
11037: DISABLE
// begin enable ;
11038: ENABLE
// AIEngageEnemy ;
11039: CALL 10948 0 0
// end ;
11043: END
// every 0 0$1 trigger MissionStart do var Side1 ;
11044: LD_EXP 1
11048: IFFALSE 11148
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
// begin Side1 := FilterAllUnits ( [ f_side , 1 ] ) diff Smithy ;
11056: LD_ADDR_VAR 0 1
11060: PUSH
11061: LD_INT 22
11063: PUSH
11064: LD_INT 1
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 69
11075: PUSH
11076: LD_EXP 12
11080: DIFF
11081: ST_TO_ADDR
// ComStop ( Side1 ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 141
// mc_bases := Replace ( mc_bases , 1 , Side1 ) ;
11091: LD_ADDR_EXP 57
11095: PUSH
11096: LD_EXP 57
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 1
11113: ST_TO_ADDR
// MC_Start ;
11114: CALL 17465 0 0
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
11118: LD_INT 1
11120: PPUSH
11121: LD_INT 0
11123: PPUSH
11124: CALL 32989 0 2
// MC_SetUpgradeBuilding ( 1 , b_workshop ) ;
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 2
11133: PPUSH
11134: CALL 32989 0 2
// MC_SetUpgradeBuilding ( 1 , b_armoury ) ;
11138: LD_INT 1
11140: PPUSH
11141: LD_INT 4
11143: PPUSH
11144: CALL 32989 0 2
// end ;
11148: PPOPN 1
11150: END
// every 0 0$1 trigger MissionStart do
11151: LD_EXP 1
11155: IFFALSE 11261
11157: GO 11159
11159: DISABLE
// begin wait ( RU2MineSquadArrivalTime ) ;
11160: LD_EXP 46
11164: PPUSH
11165: CALL_OW 67
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) >= 1 or FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) >= 4 then
11169: LD_INT 11
11171: PPUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 7
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 3
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PPUSH
11196: CALL_OW 70
11200: PUSH
11201: LD_INT 1
11203: GREATEREQUAL
11204: PUSH
11205: LD_INT 11
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 7
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PPUSH
11232: CALL_OW 70
11236: PUSH
11237: LD_INT 4
11239: GREATEREQUAL
11240: OR
11241: IFFALSE 11257
// begin RU2_MineBase_FirstAttemptFailed = true ;
11243: LD_ADDR_EXP 3
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// RU2_Attack_Minebase ;
11251: CALL 8530 0 0
// end else
11255: GO 11261
// RU2_Assemble_MineBase ;
11257: CALL 7937 0 0
// end ;
11261: END
// every 5 5$0 trigger RU2_MineBase_FirstAttemptFailed and not RU2_MineBase_SecondAttempt do
11262: LD_EXP 3
11266: PUSH
11267: LD_EXP 4
11271: NOT
11272: AND
11273: IFFALSE 11366
11275: GO 11277
11277: DISABLE
// begin enable ;
11278: ENABLE
// if FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) = 0 and FilterUnitsInArea ( Mine_Area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= 5 then
11279: LD_INT 11
11281: PPUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 7
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 3
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 70
11310: PUSH
11311: LD_INT 0
11313: EQUAL
11314: PUSH
11315: LD_INT 11
11317: PPUSH
11318: LD_INT 22
11320: PUSH
11321: LD_INT 7
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 21
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 70
11346: PUSH
11347: LD_INT 5
11349: LESSEQUAL
11350: AND
11351: IFFALSE 11366
// begin RU2_Assemble_MineBase ;
11353: CALL 7937 0 0
// RU2_MineBase_SecondAttempt = true ;
11357: LD_ADDR_EXP 4
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// disable ;
11365: DISABLE
// end ; end ;
11366: END
// export function CustomInitMacro ( ) ; begin
11367: LD_INT 0
11369: PPUSH
// MC_SetScanArea ( 1 , AM1_Base_Area ) ;
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 14
11375: PPUSH
11376: CALL 33697 0 2
// MC_SetParkingArea ( 1 , AM1_Base_Parking ) ;
11380: LD_INT 1
11382: PPUSH
11383: LD_INT 15
11385: PPUSH
11386: CALL 33641 0 2
// MC_SetDepositsXY ( 1 , [ [ 120 , 151 , 0 ] , ] ) ;
11390: LD_INT 1
11392: PPUSH
11393: LD_INT 120
11395: PUSH
11396: LD_INT 151
11398: PUSH
11399: LD_INT 0
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: PPUSH
11410: CALL 32761 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_heavy_gun , us_rocket_launcher ] ) ;
11414: LD_INT 1
11416: PPUSH
11417: LD_INT 6
11419: PUSH
11420: LD_INT 7
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL 33529 0 2
// MC_SetCratesArea ( 1 , AM1_Base_Crates ) ;
11431: LD_INT 1
11433: PPUSH
11434: LD_INT 16
11436: PPUSH
11437: CALL 33209 0 2
// MC_SetTame ( 1 , AM1_Base_Crates ) ;
11441: LD_INT 1
11443: PPUSH
11444: LD_INT 16
11446: PPUSH
11447: CALL 32940 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
11451: LD_INT 1
11453: PPUSH
11454: LD_INT 5
11456: PPUSH
11457: CALL 32622 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ] ] ) ;
11461: LD_INT 1
11463: PPUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: LD_INT 3
11472: PUSH
11473: LD_INT 5
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: LD_INT 3
11490: PUSH
11491: LD_INT 5
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 3
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: LD_INT 3
11508: PUSH
11509: LD_INT 7
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 4
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: LD_INT 6
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 6
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL 32376 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 118 , 159 , 2 ] , [ b_lab , 136 , 164 , 5 ] , [ b_oil_power , 123 , 172 , 0 ] , [ b_oil_power , 120 , 169 , 0 ] , [ b_oil_power , 122 , 168 , 0 ] , [ b_turret , 141 , 155 , 3 ] , [ b_turret , 144 , 158 , 3 ] , [ b_turret , 148 , 166 , 4 ] , [ b_turret , 131 , 149 , 3 ] , [ b_turret , 127 , 147 , 3 ] , [ b_turret , 122 , 142 , 3 ] , [ b_turret , 150 , 172 , 4 ] , ] ) ;
11565: LD_INT 1
11567: PPUSH
11568: LD_INT 6
11570: PUSH
11571: LD_INT 118
11573: PUSH
11574: LD_INT 159
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 6
11588: PUSH
11589: LD_INT 136
11591: PUSH
11592: LD_INT 164
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 26
11606: PUSH
11607: LD_INT 123
11609: PUSH
11610: LD_INT 172
11612: PUSH
11613: LD_INT 0
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 26
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 169
11630: PUSH
11631: LD_INT 0
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 26
11642: PUSH
11643: LD_INT 122
11645: PUSH
11646: LD_INT 168
11648: PUSH
11649: LD_INT 0
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 33
11660: PUSH
11661: LD_INT 141
11663: PUSH
11664: LD_INT 155
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 33
11678: PUSH
11679: LD_INT 144
11681: PUSH
11682: LD_INT 158
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 33
11696: PUSH
11697: LD_INT 148
11699: PUSH
11700: LD_INT 166
11702: PUSH
11703: LD_INT 4
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 33
11714: PUSH
11715: LD_INT 131
11717: PUSH
11718: LD_INT 149
11720: PUSH
11721: LD_INT 3
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 33
11732: PUSH
11733: LD_INT 127
11735: PUSH
11736: LD_INT 147
11738: PUSH
11739: LD_INT 3
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: PUSH
11748: LD_INT 33
11750: PUSH
11751: LD_INT 122
11753: PUSH
11754: LD_INT 142
11756: PUSH
11757: LD_INT 3
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 33
11768: PUSH
11769: LD_INT 150
11771: PUSH
11772: LD_INT 172
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL 32249 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_opto , b_lab_siberium ] ) ;
11802: LD_INT 1
11804: PPUSH
11805: LD_INT 10
11807: PUSH
11808: LD_INT 12
11810: PUSH
11811: LD_INT 15
11813: PUSH
11814: LD_INT 11
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: PPUSH
11823: CALL 33116 0 2
// MC_SetFactoryExtension ( 1 , 131 , 170 , 5 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat ] ) ;
11827: LD_INT 1
11829: PPUSH
11830: LD_INT 131
11832: PPUSH
11833: LD_INT 170
11835: PPUSH
11836: LD_INT 5
11838: PPUSH
11839: LD_INT 24
11841: PUSH
11842: LD_INT 16
11844: PUSH
11845: LD_INT 17
11847: PUSH
11848: LD_INT 18
11850: PUSH
11851: LD_INT 19
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL 33323 0 5
// end ; end_of_file
11865: LD_VAR 0 1
11869: RET
// every 6 6$0 + 2 2$20 trigger russianAssault = true and RusMainAttacks > 0 do
11870: LD_EXP 2
11874: PUSH
11875: LD_INT 1
11877: EQUAL
11878: PUSH
11879: LD_EXP 45
11883: PUSH
11884: LD_INT 0
11886: GREATER
11887: AND
11888: IFFALSE 13231
11890: GO 11892
11892: DISABLE
// begin enable ;
11893: ENABLE
// if Difficulty = 3 then
11894: LD_OWVAR 67
11898: PUSH
11899: LD_INT 3
11901: EQUAL
11902: IFFALSE 12563
// begin case Rand ( 1 , 3 ) of 1 :
11904: LD_INT 1
11906: PPUSH
11907: LD_INT 3
11909: PPUSH
11910: CALL_OW 12
11914: PUSH
11915: LD_INT 1
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 12079
11923: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
11924: LD_INT 6
11926: PPUSH
11927: LD_INT 3
11929: PPUSH
11930: LD_EXP 101
11934: PPUSH
11935: LD_EXP 102
11939: PPUSH
11940: CALL_OW 12
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: LD_EXP 103
11952: PPUSH
11953: LD_EXP 104
11957: PPUSH
11958: CALL_OW 12
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: LD_INT 0
11968: PPUSH
11969: LD_EXP 41
11973: PPUSH
11974: LD_EXP 42
11978: PPUSH
11979: CALL_OW 12
11983: PPUSH
11984: LD_INT 2
11986: PPUSH
11987: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
11991: LD_INT 700
11993: PPUSH
11994: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
11998: LD_INT 2
12000: PPUSH
12001: LD_INT 6
12003: PPUSH
12004: LD_EXP 99
12008: PPUSH
12009: LD_EXP 100
12013: PPUSH
12014: CALL_OW 12
12018: PPUSH
12019: LD_EXP 41
12023: PPUSH
12024: LD_EXP 42
12028: PPUSH
12029: CALL_OW 12
12033: PPUSH
12034: LD_INT 3
12036: PPUSH
12037: LD_INT 3
12039: PPUSH
12040: LD_INT 1
12042: PUSH
12043: LD_INT 3
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: LD_EXP 98
12054: PPUSH
12055: EMPTY
12056: PPUSH
12057: EMPTY
12058: PPUSH
12059: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12063: LD_ADDR_EXP 45
12067: PUSH
12068: LD_EXP 45
12072: PUSH
12073: LD_INT 1
12075: MINUS
12076: ST_TO_ADDR
// end ; 2 :
12077: GO 12408
12079: LD_INT 2
12081: DOUBLE
12082: EQUAL
12083: IFTRUE 12087
12085: GO 12243
12087: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
12088: LD_INT 6
12090: PPUSH
12091: LD_INT 3
12093: PPUSH
12094: LD_EXP 101
12098: PPUSH
12099: LD_EXP 102
12103: PPUSH
12104: CALL_OW 12
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: LD_EXP 103
12116: PPUSH
12117: LD_EXP 104
12121: PPUSH
12122: CALL_OW 12
12126: PPUSH
12127: LD_INT 0
12129: PPUSH
12130: LD_INT 0
12132: PPUSH
12133: LD_EXP 41
12137: PPUSH
12138: LD_EXP 42
12142: PPUSH
12143: CALL_OW 12
12147: PPUSH
12148: LD_INT 3
12150: PPUSH
12151: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12155: LD_INT 700
12157: PPUSH
12158: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12162: LD_INT 3
12164: PPUSH
12165: LD_INT 6
12167: PPUSH
12168: LD_EXP 99
12172: PPUSH
12173: LD_EXP 100
12177: PPUSH
12178: CALL_OW 12
12182: PPUSH
12183: LD_EXP 41
12187: PPUSH
12188: LD_EXP 42
12192: PPUSH
12193: CALL_OW 12
12197: PPUSH
12198: LD_INT 3
12200: PPUSH
12201: LD_INT 3
12203: PPUSH
12204: LD_INT 1
12206: PUSH
12207: LD_INT 3
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: LD_EXP 98
12218: PPUSH
12219: EMPTY
12220: PPUSH
12221: EMPTY
12222: PPUSH
12223: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12227: LD_ADDR_EXP 45
12231: PUSH
12232: LD_EXP 45
12236: PUSH
12237: LD_INT 1
12239: MINUS
12240: ST_TO_ADDR
// end ; 3 :
12241: GO 12408
12243: LD_INT 3
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12407
12251: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12252: LD_INT 6
12254: PPUSH
12255: LD_INT 3
12257: PPUSH
12258: LD_EXP 101
12262: PPUSH
12263: LD_EXP 102
12267: PPUSH
12268: CALL_OW 12
12272: PPUSH
12273: LD_INT 0
12275: PPUSH
12276: LD_EXP 103
12280: PPUSH
12281: LD_EXP 104
12285: PPUSH
12286: CALL_OW 12
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: LD_INT 0
12296: PPUSH
12297: LD_EXP 41
12301: PPUSH
12302: LD_EXP 42
12306: PPUSH
12307: CALL_OW 12
12311: PPUSH
12312: LD_INT 4
12314: PPUSH
12315: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12319: LD_INT 700
12321: PPUSH
12322: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12326: LD_INT 4
12328: PPUSH
12329: LD_INT 6
12331: PPUSH
12332: LD_EXP 99
12336: PPUSH
12337: LD_EXP 100
12341: PPUSH
12342: CALL_OW 12
12346: PPUSH
12347: LD_EXP 41
12351: PPUSH
12352: LD_EXP 42
12356: PPUSH
12357: CALL_OW 12
12361: PPUSH
12362: LD_INT 3
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: LD_INT 1
12370: PUSH
12371: LD_INT 3
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: LD_EXP 98
12382: PPUSH
12383: EMPTY
12384: PPUSH
12385: EMPTY
12386: PPUSH
12387: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12391: LD_ADDR_EXP 45
12395: PUSH
12396: LD_EXP 45
12400: PUSH
12401: LD_INT 1
12403: MINUS
12404: ST_TO_ADDR
// end ; end ;
12405: GO 12408
12407: POP
// RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
12408: LD_INT 6
12410: PPUSH
12411: LD_INT 3
12413: PPUSH
12414: LD_EXP 101
12418: PPUSH
12419: LD_EXP 102
12423: PPUSH
12424: CALL_OW 12
12428: PPUSH
12429: LD_INT 0
12431: PPUSH
12432: LD_EXP 103
12436: PPUSH
12437: LD_EXP 104
12441: PPUSH
12442: CALL_OW 12
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: LD_INT 0
12452: PPUSH
12453: LD_EXP 41
12457: PPUSH
12458: LD_EXP 42
12462: PPUSH
12463: CALL_OW 12
12467: PPUSH
12468: LD_INT 5
12470: PPUSH
12471: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12475: LD_INT 700
12477: PPUSH
12478: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12482: LD_INT 5
12484: PPUSH
12485: LD_INT 6
12487: PPUSH
12488: LD_EXP 99
12492: PPUSH
12493: LD_EXP 100
12497: PPUSH
12498: CALL_OW 12
12502: PPUSH
12503: LD_EXP 41
12507: PPUSH
12508: LD_EXP 42
12512: PPUSH
12513: CALL_OW 12
12517: PPUSH
12518: LD_INT 3
12520: PPUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 1
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PPUSH
12534: LD_EXP 98
12538: PPUSH
12539: EMPTY
12540: PPUSH
12541: EMPTY
12542: PPUSH
12543: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12547: LD_ADDR_EXP 45
12551: PUSH
12552: LD_EXP 45
12556: PUSH
12557: LD_INT 1
12559: MINUS
12560: ST_TO_ADDR
// end else
12561: GO 13231
// begin ; case Rand ( 1 , 4 ) of 1 :
12563: LD_INT 1
12565: PPUSH
12566: LD_INT 4
12568: PPUSH
12569: CALL_OW 12
12573: PUSH
12574: LD_INT 1
12576: DOUBLE
12577: EQUAL
12578: IFTRUE 12582
12580: GO 12738
12582: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_N ) ;
12583: LD_INT 6
12585: PPUSH
12586: LD_INT 3
12588: PPUSH
12589: LD_EXP 101
12593: PPUSH
12594: LD_EXP 102
12598: PPUSH
12599: CALL_OW 12
12603: PPUSH
12604: LD_INT 0
12606: PPUSH
12607: LD_EXP 103
12611: PPUSH
12612: LD_EXP 104
12616: PPUSH
12617: CALL_OW 12
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: LD_EXP 41
12632: PPUSH
12633: LD_EXP 42
12637: PPUSH
12638: CALL_OW 12
12642: PPUSH
12643: LD_INT 2
12645: PPUSH
12646: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12650: LD_INT 700
12652: PPUSH
12653: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_N , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12657: LD_INT 2
12659: PPUSH
12660: LD_INT 6
12662: PPUSH
12663: LD_EXP 99
12667: PPUSH
12668: LD_EXP 100
12672: PPUSH
12673: CALL_OW 12
12677: PPUSH
12678: LD_EXP 41
12682: PPUSH
12683: LD_EXP 42
12687: PPUSH
12688: CALL_OW 12
12692: PPUSH
12693: LD_INT 3
12695: PPUSH
12696: LD_INT 3
12698: PPUSH
12699: LD_INT 1
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: LD_EXP 98
12713: PPUSH
12714: EMPTY
12715: PPUSH
12716: EMPTY
12717: PPUSH
12718: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12722: LD_ADDR_EXP 45
12726: PUSH
12727: LD_EXP 45
12731: PUSH
12732: LD_INT 1
12734: MINUS
12735: ST_TO_ADDR
// end ; 2 :
12736: GO 13231
12738: LD_INT 2
12740: DOUBLE
12741: EQUAL
12742: IFTRUE 12746
12744: GO 12902
12746: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E1 ) ;
12747: LD_INT 6
12749: PPUSH
12750: LD_INT 3
12752: PPUSH
12753: LD_EXP 101
12757: PPUSH
12758: LD_EXP 102
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 0
12770: PPUSH
12771: LD_EXP 103
12775: PPUSH
12776: LD_EXP 104
12780: PPUSH
12781: CALL_OW 12
12785: PPUSH
12786: LD_INT 0
12788: PPUSH
12789: LD_INT 0
12791: PPUSH
12792: LD_EXP 41
12796: PPUSH
12797: LD_EXP 42
12801: PPUSH
12802: CALL_OW 12
12806: PPUSH
12807: LD_INT 3
12809: PPUSH
12810: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12814: LD_INT 700
12816: PPUSH
12817: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E1 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12821: LD_INT 3
12823: PPUSH
12824: LD_INT 6
12826: PPUSH
12827: LD_EXP 99
12831: PPUSH
12832: LD_EXP 100
12836: PPUSH
12837: CALL_OW 12
12841: PPUSH
12842: LD_EXP 41
12846: PPUSH
12847: LD_EXP 42
12851: PPUSH
12852: CALL_OW 12
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 3
12862: PPUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PPUSH
12873: LD_EXP 98
12877: PPUSH
12878: EMPTY
12879: PPUSH
12880: EMPTY
12881: PPUSH
12882: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
12886: LD_ADDR_EXP 45
12890: PUSH
12891: LD_EXP 45
12895: PUSH
12896: LD_INT 1
12898: MINUS
12899: ST_TO_ADDR
// end ; 3 :
12900: GO 13231
12902: LD_INT 3
12904: DOUBLE
12905: EQUAL
12906: IFTRUE 12910
12908: GO 13066
12910: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E2 ) ;
12911: LD_INT 6
12913: PPUSH
12914: LD_INT 3
12916: PPUSH
12917: LD_EXP 101
12921: PPUSH
12922: LD_EXP 102
12926: PPUSH
12927: CALL_OW 12
12931: PPUSH
12932: LD_INT 0
12934: PPUSH
12935: LD_EXP 103
12939: PPUSH
12940: LD_EXP 104
12944: PPUSH
12945: CALL_OW 12
12949: PPUSH
12950: LD_INT 0
12952: PPUSH
12953: LD_INT 0
12955: PPUSH
12956: LD_EXP 41
12960: PPUSH
12961: LD_EXP 42
12965: PPUSH
12966: CALL_OW 12
12970: PPUSH
12971: LD_INT 4
12973: PPUSH
12974: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
12978: LD_INT 700
12980: PPUSH
12981: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E2 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
12985: LD_INT 4
12987: PPUSH
12988: LD_INT 6
12990: PPUSH
12991: LD_EXP 99
12995: PPUSH
12996: LD_EXP 100
13000: PPUSH
13001: CALL_OW 12
13005: PPUSH
13006: LD_EXP 41
13010: PPUSH
13011: LD_EXP 42
13015: PPUSH
13016: CALL_OW 12
13020: PPUSH
13021: LD_INT 3
13023: PPUSH
13024: LD_INT 3
13026: PPUSH
13027: LD_INT 1
13029: PUSH
13030: LD_INT 3
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: LD_EXP 98
13041: PPUSH
13042: EMPTY
13043: PPUSH
13044: EMPTY
13045: PPUSH
13046: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
13050: LD_ADDR_EXP 45
13054: PUSH
13055: LD_EXP 45
13059: PUSH
13060: LD_INT 1
13062: MINUS
13063: ST_TO_ADDR
// end ; 4 :
13064: GO 13231
13066: LD_INT 4
13068: DOUBLE
13069: EQUAL
13070: IFTRUE 13074
13072: GO 13230
13074: POP
// begin RespawnAttackInfantry ( 6 , 3 , Rand ( RUMinSolCount , RUMaxSolCount ) , 0 , Rand ( RUMinBazookaCount , RUMaxBazookaCount ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_Spawn_E3 ) ;
13075: LD_INT 6
13077: PPUSH
13078: LD_INT 3
13080: PPUSH
13081: LD_EXP 101
13085: PPUSH
13086: LD_EXP 102
13090: PPUSH
13091: CALL_OW 12
13095: PPUSH
13096: LD_INT 0
13098: PPUSH
13099: LD_EXP 103
13103: PPUSH
13104: LD_EXP 104
13108: PPUSH
13109: CALL_OW 12
13113: PPUSH
13114: LD_INT 0
13116: PPUSH
13117: LD_INT 0
13119: PPUSH
13120: LD_EXP 41
13124: PPUSH
13125: LD_EXP 42
13129: PPUSH
13130: CALL_OW 12
13134: PPUSH
13135: LD_INT 5
13137: PPUSH
13138: CALL 5359 0 9
// Wait ( 0 0$20 ) ;
13142: LD_INT 700
13144: PPUSH
13145: CALL_OW 67
// RespawnAttackVehicle ( RU_Spawn_E3 , 6 , Rand ( RUMinVehCount , RUMaxVehCount ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RUWeaponsPool , [ ] , [ ] ) ;
13149: LD_INT 5
13151: PPUSH
13152: LD_INT 6
13154: PPUSH
13155: LD_EXP 99
13159: PPUSH
13160: LD_EXP 100
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: LD_EXP 41
13174: PPUSH
13175: LD_EXP 42
13179: PPUSH
13180: CALL_OW 12
13184: PPUSH
13185: LD_INT 3
13187: PPUSH
13188: LD_INT 3
13190: PPUSH
13191: LD_INT 1
13193: PUSH
13194: LD_INT 3
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PPUSH
13201: LD_EXP 98
13205: PPUSH
13206: EMPTY
13207: PPUSH
13208: EMPTY
13209: PPUSH
13210: CALL 3875 0 10
// RusMainAttacks = RusMainAttacks - 1 ;
13214: LD_ADDR_EXP 45
13218: PUSH
13219: LD_EXP 45
13223: PUSH
13224: LD_INT 1
13226: MINUS
13227: ST_TO_ADDR
// end ; end ;
13228: GO 13231
13230: POP
// end ; end ; end_of_file
13231: END
// export RuSolMinLevel , RuSolMaxLevel ; export RusEngReserve , RusRearAttacks , RusMainAttacks ; export RU2MineSquadArrivalTime , AMOffensiveTime , RU3RocketBatteryActivation ; export function PrepareDifficulty ; begin
13232: LD_INT 0
13234: PPUSH
// if difficulty = 1 then
13235: LD_OWVAR 67
13239: PUSH
13240: LD_INT 1
13242: EQUAL
13243: IFFALSE 13455
// begin RuSolMinLevel = 4 ;
13245: LD_ADDR_EXP 41
13249: PUSH
13250: LD_INT 4
13252: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
13253: LD_ADDR_EXP 42
13257: PUSH
13258: LD_INT 5
13260: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13261: LD_INT 48
13263: PPUSH
13264: LD_INT 3
13266: PPUSH
13267: LD_INT 2
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13274: LD_INT 51
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: LD_INT 2
13282: PPUSH
13283: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13287: LD_INT 57
13289: PPUSH
13290: LD_INT 3
13292: PPUSH
13293: LD_INT 2
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13300: LD_INT 48
13302: PPUSH
13303: LD_INT 5
13305: PPUSH
13306: LD_INT 2
13308: PPUSH
13309: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13313: LD_INT 51
13315: PPUSH
13316: LD_INT 5
13318: PPUSH
13319: LD_INT 2
13321: PPUSH
13322: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13326: LD_INT 48
13328: PPUSH
13329: LD_INT 6
13331: PPUSH
13332: LD_INT 2
13334: PPUSH
13335: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13339: LD_INT 51
13341: PPUSH
13342: LD_INT 6
13344: PPUSH
13345: LD_INT 2
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13352: LD_INT 57
13354: PPUSH
13355: LD_INT 6
13357: PPUSH
13358: LD_INT 2
13360: PPUSH
13361: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13365: LD_INT 48
13367: PPUSH
13368: LD_INT 8
13370: PPUSH
13371: LD_INT 2
13373: PPUSH
13374: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13378: LD_INT 51
13380: PPUSH
13381: LD_INT 8
13383: PPUSH
13384: LD_INT 2
13386: PPUSH
13387: CALL_OW 322
// RusMainAttacks = 8 ;
13391: LD_ADDR_EXP 45
13395: PUSH
13396: LD_INT 8
13398: ST_TO_ADDR
// ThresholdLvl2 := 6 ;
13399: LD_ADDR_EXP 105
13403: PUSH
13404: LD_INT 6
13406: ST_TO_ADDR
// ThresholdLvl3 := 4 ;
13407: LD_ADDR_EXP 106
13411: PUSH
13412: LD_INT 4
13414: ST_TO_ADDR
// ThresholdLvl4 := 2 ;
13415: LD_ADDR_EXP 107
13419: PUSH
13420: LD_INT 2
13422: ST_TO_ADDR
// ThresholdLvl5 := 0 ;
13423: LD_ADDR_EXP 108
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// RU2MineSquadArrivalTime = 20 20$0 ;
13431: LD_ADDR_EXP 46
13435: PUSH
13436: LD_INT 42000
13438: ST_TO_ADDR
// AMOffensiveTime = 90 90$00 ;
13439: LD_ADDR_EXP 47
13443: PUSH
13444: LD_INT 189000
13446: ST_TO_ADDR
// RU3RocketBatteryActivation = 30 30$00 ;
13447: LD_ADDR_EXP 48
13451: PUSH
13452: LD_INT 63000
13454: ST_TO_ADDR
// end ; if difficulty = 2 then
13455: LD_OWVAR 67
13459: PUSH
13460: LD_INT 2
13462: EQUAL
13463: IFFALSE 13831
// begin RuSolMinLevel = 4 ;
13465: LD_ADDR_EXP 41
13469: PUSH
13470: LD_INT 4
13472: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
13473: LD_ADDR_EXP 42
13477: PUSH
13478: LD_INT 6
13480: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13481: LD_INT 48
13483: PPUSH
13484: LD_INT 3
13486: PPUSH
13487: LD_INT 2
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13494: LD_INT 49
13496: PPUSH
13497: LD_INT 3
13499: PPUSH
13500: LD_INT 2
13502: PPUSH
13503: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13507: LD_INT 51
13509: PPUSH
13510: LD_INT 3
13512: PPUSH
13513: LD_INT 2
13515: PPUSH
13516: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13520: LD_INT 52
13522: PPUSH
13523: LD_INT 3
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13533: LD_INT 57
13535: PPUSH
13536: LD_INT 3
13538: PPUSH
13539: LD_INT 2
13541: PPUSH
13542: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13546: LD_INT 58
13548: PPUSH
13549: LD_INT 3
13551: PPUSH
13552: LD_INT 2
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
13559: LD_INT 63
13561: PPUSH
13562: LD_INT 3
13564: PPUSH
13565: LD_INT 2
13567: PPUSH
13568: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
13572: LD_INT 48
13574: PPUSH
13575: LD_INT 5
13577: PPUSH
13578: LD_INT 2
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
13585: LD_INT 49
13587: PPUSH
13588: LD_INT 5
13590: PPUSH
13591: LD_INT 2
13593: PPUSH
13594: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
13598: LD_INT 51
13600: PPUSH
13601: LD_INT 5
13603: PPUSH
13604: LD_INT 2
13606: PPUSH
13607: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
13611: LD_INT 52
13613: PPUSH
13614: LD_INT 5
13616: PPUSH
13617: LD_INT 2
13619: PPUSH
13620: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
13624: LD_INT 48
13626: PPUSH
13627: LD_INT 6
13629: PPUSH
13630: LD_INT 2
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
13637: LD_INT 49
13639: PPUSH
13640: LD_INT 6
13642: PPUSH
13643: LD_INT 2
13645: PPUSH
13646: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
13650: LD_INT 51
13652: PPUSH
13653: LD_INT 6
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
13663: LD_INT 52
13665: PPUSH
13666: LD_INT 6
13668: PPUSH
13669: LD_INT 2
13671: PPUSH
13672: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
13676: LD_INT 57
13678: PPUSH
13679: LD_INT 6
13681: PPUSH
13682: LD_INT 2
13684: PPUSH
13685: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
13689: LD_INT 58
13691: PPUSH
13692: LD_INT 6
13694: PPUSH
13695: LD_INT 2
13697: PPUSH
13698: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
13702: LD_INT 63
13704: PPUSH
13705: LD_INT 6
13707: PPUSH
13708: LD_INT 2
13710: PPUSH
13711: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
13715: LD_INT 48
13717: PPUSH
13718: LD_INT 8
13720: PPUSH
13721: LD_INT 2
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
13728: LD_INT 49
13730: PPUSH
13731: LD_INT 8
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
13741: LD_INT 51
13743: PPUSH
13744: LD_INT 8
13746: PPUSH
13747: LD_INT 2
13749: PPUSH
13750: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
13754: LD_INT 52
13756: PPUSH
13757: LD_INT 8
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: CALL_OW 322
// RusMainAttacks = 12 ;
13767: LD_ADDR_EXP 45
13771: PUSH
13772: LD_INT 12
13774: ST_TO_ADDR
// ThresholdLvl2 := 10 ;
13775: LD_ADDR_EXP 105
13779: PUSH
13780: LD_INT 10
13782: ST_TO_ADDR
// ThresholdLvl3 := 8 ;
13783: LD_ADDR_EXP 106
13787: PUSH
13788: LD_INT 8
13790: ST_TO_ADDR
// ThresholdLvl4 := 6 ;
13791: LD_ADDR_EXP 107
13795: PUSH
13796: LD_INT 6
13798: ST_TO_ADDR
// ThresholdLvl5 := 4 ;
13799: LD_ADDR_EXP 108
13803: PUSH
13804: LD_INT 4
13806: ST_TO_ADDR
// RU2MineSquadArrivalTime = 15 15$0 ;
13807: LD_ADDR_EXP 46
13811: PUSH
13812: LD_INT 31500
13814: ST_TO_ADDR
// AMOffensiveTime = 80 80$00 ;
13815: LD_ADDR_EXP 47
13819: PUSH
13820: LD_INT 168000
13822: ST_TO_ADDR
// RU3RocketBatteryActivation = 25 25$00 ;
13823: LD_ADDR_EXP 48
13827: PUSH
13828: LD_INT 52500
13830: ST_TO_ADDR
// end ; if difficulty = 3 then
13831: LD_OWVAR 67
13835: PUSH
13836: LD_INT 3
13838: EQUAL
13839: IFFALSE 14337
// begin RuSolMinLevel = 5 ;
13841: LD_ADDR_EXP 41
13845: PUSH
13846: LD_INT 5
13848: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
13849: LD_ADDR_EXP 42
13853: PUSH
13854: LD_INT 7
13856: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
13857: LD_INT 48
13859: PPUSH
13860: LD_INT 3
13862: PPUSH
13863: LD_INT 2
13865: PPUSH
13866: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
13870: LD_INT 51
13872: PPUSH
13873: LD_INT 3
13875: PPUSH
13876: LD_INT 2
13878: PPUSH
13879: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
13883: LD_INT 57
13885: PPUSH
13886: LD_INT 3
13888: PPUSH
13889: LD_INT 2
13891: PPUSH
13892: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
13896: LD_INT 49
13898: PPUSH
13899: LD_INT 3
13901: PPUSH
13902: LD_INT 2
13904: PPUSH
13905: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
13909: LD_INT 52
13911: PPUSH
13912: LD_INT 3
13914: PPUSH
13915: LD_INT 2
13917: PPUSH
13918: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
13922: LD_INT 58
13924: PPUSH
13925: LD_INT 3
13927: PPUSH
13928: LD_INT 2
13930: PPUSH
13931: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
13935: LD_INT 50
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
13948: LD_INT 59
13950: PPUSH
13951: LD_INT 3
13953: PPUSH
13954: LD_INT 2
13956: PPUSH
13957: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
13961: LD_INT 53
13963: PPUSH
13964: LD_INT 3
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
13974: LD_INT 63
13976: PPUSH
13977: LD_INT 3
13979: PPUSH
13980: LD_INT 2
13982: PPUSH
13983: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
13987: LD_INT 64
13989: PPUSH
13990: LD_INT 3
13992: PPUSH
13993: LD_INT 2
13995: PPUSH
13996: CALL_OW 322
// SetTech ( tech_Tech1 , 5 , state_researched ) ;
14000: LD_INT 48
14002: PPUSH
14003: LD_INT 5
14005: PPUSH
14006: LD_INT 2
14008: PPUSH
14009: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
14013: LD_INT 51
14015: PPUSH
14016: LD_INT 5
14018: PPUSH
14019: LD_INT 2
14021: PPUSH
14022: CALL_OW 322
// SetTech ( tech_Tech2 , 5 , state_researched ) ;
14026: LD_INT 49
14028: PPUSH
14029: LD_INT 5
14031: PPUSH
14032: LD_INT 2
14034: PPUSH
14035: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
14039: LD_INT 52
14041: PPUSH
14042: LD_INT 5
14044: PPUSH
14045: LD_INT 2
14047: PPUSH
14048: CALL_OW 322
// SetTech ( tech_Tech3 , 5 , state_researched ) ;
14052: LD_INT 50
14054: PPUSH
14055: LD_INT 5
14057: PPUSH
14058: LD_INT 2
14060: PPUSH
14061: CALL_OW 322
// SetTech ( tech_Weap3 , 5 , state_researched ) ;
14065: LD_INT 53
14067: PPUSH
14068: LD_INT 5
14070: PPUSH
14071: LD_INT 2
14073: PPUSH
14074: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
14078: LD_INT 48
14080: PPUSH
14081: LD_INT 6
14083: PPUSH
14084: LD_INT 2
14086: PPUSH
14087: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
14091: LD_INT 51
14093: PPUSH
14094: LD_INT 6
14096: PPUSH
14097: LD_INT 2
14099: PPUSH
14100: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
14104: LD_INT 57
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: LD_INT 2
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
14117: LD_INT 49
14119: PPUSH
14120: LD_INT 6
14122: PPUSH
14123: LD_INT 2
14125: PPUSH
14126: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
14130: LD_INT 52
14132: PPUSH
14133: LD_INT 6
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
14143: LD_INT 58
14145: PPUSH
14146: LD_INT 6
14148: PPUSH
14149: LD_INT 2
14151: PPUSH
14152: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
14156: LD_INT 63
14158: PPUSH
14159: LD_INT 6
14161: PPUSH
14162: LD_INT 2
14164: PPUSH
14165: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
14169: LD_INT 64
14171: PPUSH
14172: LD_INT 6
14174: PPUSH
14175: LD_INT 2
14177: PPUSH
14178: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14182: LD_INT 48
14184: PPUSH
14185: LD_INT 8
14187: PPUSH
14188: LD_INT 2
14190: PPUSH
14191: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
14195: LD_INT 49
14197: PPUSH
14198: LD_INT 8
14200: PPUSH
14201: LD_INT 2
14203: PPUSH
14204: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
14208: LD_INT 50
14210: PPUSH
14211: LD_INT 8
14213: PPUSH
14214: LD_INT 2
14216: PPUSH
14217: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14221: LD_INT 51
14223: PPUSH
14224: LD_INT 8
14226: PPUSH
14227: LD_INT 2
14229: PPUSH
14230: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14234: LD_INT 52
14236: PPUSH
14237: LD_INT 8
14239: PPUSH
14240: LD_INT 2
14242: PPUSH
14243: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
14247: LD_INT 53
14249: PPUSH
14250: LD_INT 8
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
14260: LD_INT 5
14262: PPUSH
14263: LD_INT 8
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// RusMainAttacks = 24 ;
14273: LD_ADDR_EXP 45
14277: PUSH
14278: LD_INT 24
14280: ST_TO_ADDR
// ThresholdLvl2 := 20 ;
14281: LD_ADDR_EXP 105
14285: PUSH
14286: LD_INT 20
14288: ST_TO_ADDR
// ThresholdLvl3 := 16 ;
14289: LD_ADDR_EXP 106
14293: PUSH
14294: LD_INT 16
14296: ST_TO_ADDR
// ThresholdLvl4 := 12 ;
14297: LD_ADDR_EXP 107
14301: PUSH
14302: LD_INT 12
14304: ST_TO_ADDR
// ThresholdLvl5 := 8 ;
14305: LD_ADDR_EXP 108
14309: PUSH
14310: LD_INT 8
14312: ST_TO_ADDR
// RU2MineSquadArrivalTime = 10 10$0 ;
14313: LD_ADDR_EXP 46
14317: PUSH
14318: LD_INT 21000
14320: ST_TO_ADDR
// AMOffensiveTime = 75 75$00 ;
14321: LD_ADDR_EXP 47
14325: PUSH
14326: LD_INT 157500
14328: ST_TO_ADDR
// RU3RocketBatteryActivation = 20 20$00 ;
14329: LD_ADDR_EXP 48
14333: PUSH
14334: LD_INT 42000
14336: ST_TO_ADDR
// end ; end ; end_of_file
14337: LD_VAR 0 1
14341: RET
// export personnel ; export RU_OfficersAlive ; export OffensiveTimeOut , OffensiveSuccessful ; export AfterOffensive ; export PrepareToEnd ; export TanksBuilt ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_double_laser ] ] ) >= 10 do
14342: LD_INT 22
14344: PUSH
14345: LD_INT 7
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 34
14364: PUSH
14365: LD_INT 10
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 69
14381: PUSH
14382: LD_INT 10
14384: GREATEREQUAL
14385: IFFALSE 14398
14387: GO 14389
14389: DISABLE
// begin TanksBuilt = true ;
14390: LD_ADDR_EXP 55
14394: PUSH
14395: LD_INT 1
14397: ST_TO_ADDR
// end ;
14398: END
// every 0 0$1 trigger AfterOffensive do
14399: LD_EXP 53
14403: IFFALSE 14432
14405: GO 14407
14407: DISABLE
// begin Wait ( AMOffensiveTime ) ;
14408: LD_EXP 47
14412: PPUSH
14413: CALL_OW 67
// if not OffensiveSuccessful then
14417: LD_EXP 52
14421: NOT
14422: IFFALSE 14432
// OffensiveTimeOut = true ;
14424: LD_ADDR_EXP 51
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// end ;
14432: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) <= 1 and RU_OfficersAlive <= 1 ) and not PrepareToEnd and not OffensiveTimeOut do
14433: LD_INT 22
14435: PUSH
14436: LD_INT 3
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 1
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PUSH
14462: LD_INT 1
14464: LESSEQUAL
14465: PUSH
14466: LD_EXP 50
14470: PUSH
14471: LD_INT 1
14473: LESSEQUAL
14474: AND
14475: PUSH
14476: LD_EXP 54
14480: NOT
14481: AND
14482: PUSH
14483: LD_EXP 51
14487: NOT
14488: AND
14489: IFFALSE 14502
14491: GO 14493
14493: DISABLE
// begin OffensiveSuccessful = true ;
14494: LD_ADDR_EXP 52
14498: PUSH
14499: LD_INT 1
14501: ST_TO_ADDR
// end ;
14502: END
// every 0 0$1 trigger OffensiveTimeOut or OffensiveSuccessful do
14503: LD_EXP 51
14507: PUSH
14508: LD_EXP 52
14512: OR
14513: IFFALSE 14770
14515: GO 14517
14517: DISABLE
// begin SayRadio ( Barnes , D7-Barnes-1 ) ;
14518: LD_EXP 15
14522: PPUSH
14523: LD_STRING D7-Barnes-1
14525: PPUSH
14526: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
14530: LD_EXP 8
14534: PPUSH
14535: LD_STRING D7-Simone-1
14537: PPUSH
14538: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2 ) ;
14542: LD_EXP 15
14546: PPUSH
14547: LD_STRING D7-Barnes-2
14549: PPUSH
14550: CALL_OW 94
// if OffensiveTimeOut then
14554: LD_EXP 51
14558: IFFALSE 14586
// begin Say ( Simone , D7-Simone-2a ) ;
14560: LD_EXP 8
14564: PPUSH
14565: LD_STRING D7-Simone-2a
14567: PPUSH
14568: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2a ) ;
14572: LD_EXP 15
14576: PPUSH
14577: LD_STRING D7-Barnes-2a
14579: PPUSH
14580: CALL_OW 94
// end else
14584: GO 14598
// Say ( Simone , D7-Simone-2 ) ;
14586: LD_EXP 8
14590: PPUSH
14591: LD_STRING D7-Simone-2
14593: PPUSH
14594: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-3 ) ;
14598: LD_EXP 15
14602: PPUSH
14603: LD_STRING D7-Barnes-3
14605: PPUSH
14606: CALL_OW 94
// Say ( Simone , D7-Simone-3 ) ;
14610: LD_EXP 8
14614: PPUSH
14615: LD_STRING D7-Simone-3
14617: PPUSH
14618: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-4 ) ;
14622: LD_EXP 15
14626: PPUSH
14627: LD_STRING D7-Barnes-4
14629: PPUSH
14630: CALL_OW 94
// Say ( Simone , D7-Simone-3a ) ;
14634: LD_EXP 8
14638: PPUSH
14639: LD_STRING D7-Simone-3a
14641: PPUSH
14642: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-5 ) ;
14646: LD_EXP 15
14650: PPUSH
14651: LD_STRING D7-Barnes-5
14653: PPUSH
14654: CALL_OW 94
// Say ( Simone , D7-Simone-4 ) ;
14658: LD_EXP 8
14662: PPUSH
14663: LD_STRING D7-Simone-4
14665: PPUSH
14666: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-6 ) ;
14670: LD_EXP 15
14674: PPUSH
14675: LD_STRING D7-Barnes-6
14677: PPUSH
14678: CALL_OW 94
// SayRadio ( Barnes , D7-Barnes-7 ) ;
14682: LD_EXP 15
14686: PPUSH
14687: LD_STRING D7-Barnes-7
14689: PPUSH
14690: CALL_OW 94
// if OffensiveTimeOut then
14694: LD_EXP 51
14698: IFFALSE 14712
// SayRadio ( Barnes , D7-Barnes-7a ) ;
14700: LD_EXP 15
14704: PPUSH
14705: LD_STRING D7-Barnes-7a
14707: PPUSH
14708: CALL_OW 94
// Say ( Simone , D7-Simone-5 ) ;
14712: LD_EXP 8
14716: PPUSH
14717: LD_STRING D7-Simone-5
14719: PPUSH
14720: CALL_OW 88
// if not IsDead ( Edmonds ) then
14724: LD_EXP 14
14728: PPUSH
14729: CALL_OW 301
14733: NOT
14734: IFFALSE 14745
// ChangeMissionObjectives ( M4 ) else
14736: LD_STRING M4
14738: PPUSH
14739: CALL_OW 337
14743: GO 14752
// ChangeMissionObjectives ( M4a ) ;
14745: LD_STRING M4a
14747: PPUSH
14748: CALL_OW 337
// SetAreaMapShow ( End_Area , 1 ) ;
14752: LD_INT 12
14754: PPUSH
14755: LD_INT 1
14757: PPUSH
14758: CALL_OW 424
// PrepareToEnd = true ;
14762: LD_ADDR_EXP 54
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// end ;
14770: END
// every 0 0$01 trigger PrepareToEnd and IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
14771: LD_EXP 54
14775: PUSH
14776: LD_EXP 14
14780: PPUSH
14781: CALL_OW 301
14785: AND
14786: IFFALSE 15369
14788: GO 14790
14790: DISABLE
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
// begin enable ;
14797: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) >= 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) then
14798: LD_INT 12
14800: PPUSH
14801: LD_INT 22
14803: PUSH
14804: LD_INT 7
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 21
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 33
14823: PUSH
14824: LD_INT 1
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 3
14833: PUSH
14834: LD_INT 58
14836: PUSH
14837: EMPTY
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 70
14854: PUSH
14855: LD_INT 8
14857: GREATEREQUAL
14858: PUSH
14859: LD_EXP 8
14863: PPUSH
14864: LD_INT 12
14866: PPUSH
14867: CALL_OW 308
14871: AND
14872: PUSH
14873: LD_EXP 9
14877: PPUSH
14878: LD_INT 12
14880: PPUSH
14881: CALL_OW 308
14885: AND
14886: PUSH
14887: LD_EXP 10
14891: PPUSH
14892: LD_INT 12
14894: PPUSH
14895: CALL_OW 308
14899: AND
14900: IFFALSE 15369
// begin wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// Units = [ ] ;
14909: LD_ADDR_VAR 0 4
14913: PUSH
14914: EMPTY
14915: ST_TO_ADDR
// Vehicles := [ ] ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: EMPTY
14922: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14923: LD_ADDR_EXP 49
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 7
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 21
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 50
14950: PUSH
14951: EMPTY
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_INT 12
14971: PPUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 7
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 2
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL_OW 70
15000: ST_TO_ADDR
// for i = 1 to 8 do
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: DOUBLE
15007: LD_INT 1
15009: DEC
15010: ST_TO_ADDR
15011: LD_INT 8
15013: PUSH
15014: FOR_TO
15015: IFFALSE 15127
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_VAR 0 3
15026: PUSH
15027: LD_VAR 0 1
15031: PUSH
15032: LD_VAR 0 2
15036: ARRAY
15037: PPUSH
15038: CALL_OW 265
15042: PUSH
15043: LD_VAR 0 1
15047: PUSH
15048: LD_VAR 0 2
15052: ARRAY
15053: PPUSH
15054: CALL_OW 262
15058: PUSH
15059: LD_VAR 0 1
15063: PUSH
15064: LD_VAR 0 2
15068: ARRAY
15069: PPUSH
15070: CALL_OW 263
15074: PUSH
15075: LD_VAR 0 1
15079: PUSH
15080: LD_VAR 0 2
15084: ARRAY
15085: PPUSH
15086: CALL_OW 264
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: ADD
15097: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
15098: LD_ADDR_VAR 0 4
15102: PUSH
15103: LD_VAR 0 4
15107: PUSH
15108: LD_VAR 0 1
15112: PUSH
15113: LD_VAR 0 2
15117: ARRAY
15118: PPUSH
15119: CALL_OW 311
15123: ADD
15124: ST_TO_ADDR
// end ;
15125: GO 15014
15127: POP
15128: POP
// Units = Units diff [ Simone , Kathryn , Miller ] ;
15129: LD_ADDR_VAR 0 4
15133: PUSH
15134: LD_VAR 0 4
15138: PUSH
15139: LD_EXP 8
15143: PUSH
15144: LD_EXP 9
15148: PUSH
15149: LD_EXP 10
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: DIFF
15159: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
15160: LD_VAR 0 4
15164: PPUSH
15165: LD_STRING AM02_Survivors
15167: PPUSH
15168: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
15172: LD_EXP 8
15176: PPUSH
15177: LD_STRING Simone
15179: PPUSH
15180: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
15184: LD_EXP 9
15188: PPUSH
15189: LD_STRING Kathryn
15191: PPUSH
15192: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
15196: LD_EXP 10
15200: PPUSH
15201: LD_STRING Miller
15203: PPUSH
15204: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_STRING AM02_Vehicles
15215: PPUSH
15216: CALL_OW 39
// if OffensiveSuccessful then
15220: LD_EXP 52
15224: IFFALSE 15238
// AddMedal ( Bases , 1 ) else
15226: LD_STRING Bases
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 101
15236: GO 15249
// AddMedal ( Bases , - 1 ) ;
15238: LD_STRING Bases
15240: PPUSH
15241: LD_INT 1
15243: NEG
15244: PPUSH
15245: CALL_OW 101
// if TanksBuilt then
15249: LD_EXP 55
15253: IFFALSE 15267
// AddMedal ( Tanks , 1 ) else
15255: LD_STRING Tanks
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 101
15265: GO 15278
// AddMedal ( Tanks , - 1 ) ;
15267: LD_STRING Tanks
15269: PPUSH
15270: LD_INT 1
15272: NEG
15273: PPUSH
15274: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15278: LD_EXP 30
15282: PUSH
15283: LD_INT 0
15285: EQUAL
15286: PUSH
15287: LD_EXP 29
15291: PUSH
15292: LD_INT 0
15294: EQUAL
15295: OR
15296: PUSH
15297: LD_EXP 31
15301: NOT
15302: AND
15303: IFFALSE 15317
// AddMedal ( Rockets , 1 ) else
15305: LD_STRING Rockets
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 101
15315: GO 15328
// AddMedal ( Rockets , - 1 ) ;
15317: LD_STRING Rockets
15319: PPUSH
15320: LD_INT 1
15322: NEG
15323: PPUSH
15324: CALL_OW 101
// GiveMedals ( Main ) ;
15328: LD_STRING Main
15330: PPUSH
15331: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Units ] ) ;
15335: LD_EXP 8
15339: PUSH
15340: LD_EXP 9
15344: PUSH
15345: LD_EXP 10
15349: PUSH
15350: LD_VAR 0 4
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 43
// YouWin ;
15365: CALL_OW 103
// end ; end ;
15369: PPOPN 4
15371: END
// every 0 0$01 trigger PrepareToEnd and not IsDead ( Edmonds ) do var filter , i , Vehicles , Units ;
15372: LD_EXP 54
15376: PUSH
15377: LD_EXP 14
15381: PPUSH
15382: CALL_OW 301
15386: NOT
15387: AND
15388: IFFALSE 16009
15390: GO 15392
15392: DISABLE
15393: LD_INT 0
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
// begin enable ;
15399: ENABLE
// if FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , Control_manual ] , [ f_not , [ f_empty ] ] ] ) >= 8 and IsInArea ( Simone , End_Area ) and IsInArea ( Kathryn , End_Area ) and IsInArea ( Miller , End_Area ) and IsInArea ( Edmonds , End_Area ) then
15400: LD_INT 12
15402: PPUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 7
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 21
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 58
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: PPUSH
15452: CALL_OW 70
15456: PUSH
15457: LD_INT 8
15459: GREATEREQUAL
15460: PUSH
15461: LD_EXP 8
15465: PPUSH
15466: LD_INT 12
15468: PPUSH
15469: CALL_OW 308
15473: AND
15474: PUSH
15475: LD_EXP 9
15479: PPUSH
15480: LD_INT 12
15482: PPUSH
15483: CALL_OW 308
15487: AND
15488: PUSH
15489: LD_EXP 10
15493: PPUSH
15494: LD_INT 12
15496: PPUSH
15497: CALL_OW 308
15501: AND
15502: PUSH
15503: LD_EXP 14
15507: PPUSH
15508: LD_INT 12
15510: PPUSH
15511: CALL_OW 308
15515: AND
15516: IFFALSE 16009
// begin wait ( 0 0$1 ) ;
15518: LD_INT 35
15520: PPUSH
15521: CALL_OW 67
// Units = [ ] ;
15525: LD_ADDR_VAR 0 4
15529: PUSH
15530: EMPTY
15531: ST_TO_ADDR
// Vehicles := [ ] ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: EMPTY
15538: ST_TO_ADDR
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15539: LD_ADDR_EXP 49
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_INT 7
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 21
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 50
15566: PUSH
15567: EMPTY
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 69
15579: ST_TO_ADDR
// filter := FilterUnitsInArea ( End_Area , [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_INT 12
15587: PPUSH
15588: LD_INT 22
15590: PUSH
15591: LD_INT 7
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 70
15616: ST_TO_ADDR
// for i = 1 to 8 do
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: DOUBLE
15623: LD_INT 1
15625: DEC
15626: ST_TO_ADDR
15627: LD_INT 8
15629: PUSH
15630: FOR_TO
15631: IFFALSE 15743
// begin Vehicles := Vehicles ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_VAR 0 3
15642: PUSH
15643: LD_VAR 0 1
15647: PUSH
15648: LD_VAR 0 2
15652: ARRAY
15653: PPUSH
15654: CALL_OW 265
15658: PUSH
15659: LD_VAR 0 1
15663: PUSH
15664: LD_VAR 0 2
15668: ARRAY
15669: PPUSH
15670: CALL_OW 262
15674: PUSH
15675: LD_VAR 0 1
15679: PUSH
15680: LD_VAR 0 2
15684: ARRAY
15685: PPUSH
15686: CALL_OW 263
15690: PUSH
15691: LD_VAR 0 1
15695: PUSH
15696: LD_VAR 0 2
15700: ARRAY
15701: PPUSH
15702: CALL_OW 264
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: ADD
15713: ST_TO_ADDR
// Units = Units ^ IsDrivenBy ( filter [ i ] ) ;
15714: LD_ADDR_VAR 0 4
15718: PUSH
15719: LD_VAR 0 4
15723: PUSH
15724: LD_VAR 0 1
15728: PUSH
15729: LD_VAR 0 2
15733: ARRAY
15734: PPUSH
15735: CALL_OW 311
15739: ADD
15740: ST_TO_ADDR
// end ;
15741: GO 15630
15743: POP
15744: POP
// Units = Units diff [ Simone , Kathryn , Miller , Edmonds ] ;
15745: LD_ADDR_VAR 0 4
15749: PUSH
15750: LD_VAR 0 4
15754: PUSH
15755: LD_EXP 8
15759: PUSH
15760: LD_EXP 9
15764: PUSH
15765: LD_EXP 10
15769: PUSH
15770: LD_EXP 14
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: DIFF
15781: ST_TO_ADDR
// SaveCharacters ( Units , AM02_Survivors ) ;
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_STRING AM02_Survivors
15789: PPUSH
15790: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
15794: LD_EXP 8
15798: PPUSH
15799: LD_STRING Simone
15801: PPUSH
15802: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
15806: LD_EXP 9
15810: PPUSH
15811: LD_STRING Kathryn
15813: PPUSH
15814: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
15818: LD_EXP 10
15822: PPUSH
15823: LD_STRING Miller
15825: PPUSH
15826: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
15830: LD_EXP 14
15834: PPUSH
15835: LD_STRING Edmonds
15837: PPUSH
15838: CALL_OW 38
// SaveVariable ( Vehicles , AM02_Vehicles ) ;
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_STRING AM02_Vehicles
15849: PPUSH
15850: CALL_OW 39
// if OffensiveSuccessful then
15854: LD_EXP 52
15858: IFFALSE 15872
// AddMedal ( Bases , 1 ) else
15860: LD_STRING Bases
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 101
15870: GO 15883
// AddMedal ( Bases , - 1 ) ;
15872: LD_STRING Bases
15874: PPUSH
15875: LD_INT 1
15877: NEG
15878: PPUSH
15879: CALL_OW 101
// if TanksBuilt then
15883: LD_EXP 55
15887: IFFALSE 15901
// AddMedal ( Tanks , 1 ) else
15889: LD_STRING Tanks
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 101
15899: GO 15912
// AddMedal ( Tanks , - 1 ) ;
15901: LD_STRING Tanks
15903: PPUSH
15904: LD_INT 1
15906: NEG
15907: PPUSH
15908: CALL_OW 101
// if ( RU3_BaterieMechs = 0 or RU3_BaterieVehs = 0 ) and not RU3BaterieTimeOut then
15912: LD_EXP 30
15916: PUSH
15917: LD_INT 0
15919: EQUAL
15920: PUSH
15921: LD_EXP 29
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: OR
15930: PUSH
15931: LD_EXP 31
15935: NOT
15936: AND
15937: IFFALSE 15951
// AddMedal ( Rockets , 1 ) else
15939: LD_STRING Rockets
15941: PPUSH
15942: LD_INT 1
15944: PPUSH
15945: CALL_OW 101
15949: GO 15962
// AddMedal ( Rockets , - 1 ) ;
15951: LD_STRING Rockets
15953: PPUSH
15954: LD_INT 1
15956: NEG
15957: PPUSH
15958: CALL_OW 101
// GiveMedals ( Main ) ;
15962: LD_STRING Main
15964: PPUSH
15965: CALL_OW 102
// RewardPeople ( [ Simone , Kathryn , Miller , Edmonds , Units ] ) ;
15969: LD_EXP 8
15973: PUSH
15974: LD_EXP 9
15978: PUSH
15979: LD_EXP 10
15983: PUSH
15984: LD_EXP 14
15988: PUSH
15989: LD_VAR 0 4
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: PPUSH
16001: CALL_OW 43
// YouWin ;
16005: CALL_OW 103
// end ; end ;
16009: PPOPN 4
16011: END
// every 0 0$1 trigger EndTime = 0 do
16012: LD_EXP 5
16016: PUSH
16017: LD_INT 0
16019: EQUAL
16020: IFFALSE 16061
16022: GO 16024
16024: DISABLE
// begin InGameOn ;
16025: CALL_OW 8
// DialogueOn ;
16029: CALL_OW 6
// SayRadio ( Barnes , D7a-Barnes-1 ) ;
16033: LD_EXP 15
16037: PPUSH
16038: LD_STRING D7a-Barnes-1
16040: PPUSH
16041: CALL_OW 94
// TimeOutFirstWarning := true ;
16045: LD_ADDR_EXP 7
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// InGameOff ;
16053: CALL_OW 9
// DialogueOff ;
16057: CALL_OW 7
// end ;
16061: END
// every 0 0$1 trigger EndTime2 = 0 do
16062: LD_EXP 6
16066: PUSH
16067: LD_INT 0
16069: EQUAL
16070: IFFALSE 16110
16072: GO 16074
16074: DISABLE
// begin InGameOn ;
16075: CALL_OW 8
// DialogueOn ;
16079: CALL_OW 6
// SayRadio ( Barnes , D7b-Barnes-1 ) ;
16083: LD_EXP 15
16087: PPUSH
16088: LD_STRING D7b-Barnes-1
16090: PPUSH
16091: CALL_OW 94
// InGameOff ;
16095: CALL_OW 9
// DialogueOff ;
16099: CALL_OW 7
// YouLost ( TimeOut ) ;
16103: LD_STRING TimeOut
16105: PPUSH
16106: CALL_OW 104
// end ;
16110: END
// every 0 0$1 do
16111: GO 16113
16113: DISABLE
// begin enable ;
16114: ENABLE
// if not PrepareToEnd then
16115: LD_EXP 54
16119: NOT
16120: IFFALSE 16130
// begin Display_Strings :=  ;
16122: LD_ADDR_OWVAR 47
16126: PUSH
16127: LD_STRING 
16129: ST_TO_ADDR
// end ; if PrepareToEnd and not TimeOutFirstWarning then
16130: LD_EXP 54
16134: PUSH
16135: LD_EXP 7
16139: NOT
16140: AND
16141: IFFALSE 16174
// begin EndTime := EndTime - 0 0$01 ;
16143: LD_ADDR_EXP 5
16147: PUSH
16148: LD_EXP 5
16152: PUSH
16153: LD_INT 35
16155: MINUS
16156: ST_TO_ADDR
// Display_Strings := [ #Am02-Timeout , EndTime ] ;
16157: LD_ADDR_OWVAR 47
16161: PUSH
16162: LD_STRING #Am02-Timeout
16164: PUSH
16165: LD_EXP 5
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: ST_TO_ADDR
// end ; if PrepareToEnd and TimeOutFirstWarning then
16174: LD_EXP 54
16178: PUSH
16179: LD_EXP 7
16183: AND
16184: IFFALSE 16217
// begin EndTime2 := EndTime2 - 0 0$01 ;
16186: LD_ADDR_EXP 6
16190: PUSH
16191: LD_EXP 6
16195: PUSH
16196: LD_INT 35
16198: MINUS
16199: ST_TO_ADDR
// Display_Strings := [ #Am02-TimeoutAdd , EndTime2 ] ;
16200: LD_ADDR_OWVAR 47
16204: PUSH
16205: LD_STRING #Am02-TimeoutAdd
16207: PUSH
16208: LD_EXP 6
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: ST_TO_ADDR
// end ; end ; end_of_file
16217: END
// every 0 0$1 trigger MissionStart do
16218: LD_EXP 1
16222: IFFALSE 16406
16224: GO 16226
16226: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
16227: LD_INT 2100
16229: PPUSH
16230: LD_INT 3150
16232: PPUSH
16233: CALL_OW 12
16237: PPUSH
16238: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16242: LD_INT 2
16244: PPUSH
16245: LD_INT 5
16247: PPUSH
16248: CALL_OW 12
16252: PPUSH
16253: LD_INT 9
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: CALL_OW 55
// case Rand ( 1 , 3 ) of 1 :
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 3
16268: PPUSH
16269: CALL_OW 12
16273: PUSH
16274: LD_INT 1
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16321
16282: POP
// begin wait ( Rand ( 0 0$5 , 0 0$10 ) ) ;
16283: LD_INT 175
16285: PPUSH
16286: LD_INT 350
16288: PPUSH
16289: CALL_OW 12
16293: PPUSH
16294: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16298: LD_INT 2
16300: PPUSH
16301: LD_INT 5
16303: PPUSH
16304: CALL_OW 12
16308: PPUSH
16309: LD_INT 9
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: CALL_OW 55
// end ; 2 :
16319: GO 16405
16321: LD_INT 2
16323: DOUBLE
16324: EQUAL
16325: IFTRUE 16329
16327: GO 16404
16329: POP
// begin wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16330: LD_INT 70
16332: PPUSH
16333: LD_INT 350
16335: PPUSH
16336: CALL_OW 12
16340: PPUSH
16341: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16345: LD_INT 2
16347: PPUSH
16348: LD_INT 5
16350: PPUSH
16351: CALL_OW 12
16355: PPUSH
16356: LD_INT 9
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 55
// wait ( Rand ( 0 0$2 , 0 0$10 ) ) ;
16366: LD_INT 70
16368: PPUSH
16369: LD_INT 350
16371: PPUSH
16372: CALL_OW 12
16376: PPUSH
16377: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16381: LD_INT 2
16383: PPUSH
16384: LD_INT 5
16386: PPUSH
16387: CALL_OW 12
16391: PPUSH
16392: LD_INT 9
16394: PPUSH
16395: LD_INT 1
16397: PPUSH
16398: CALL_OW 55
// end ; end ;
16402: GO 16405
16404: POP
// enable ;
16405: ENABLE
// end ; end_of_file
16406: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
// skirmish := false ;
16411: LD_ADDR_EXP 56
16415: PUSH
16416: LD_INT 0
16418: ST_TO_ADDR
// mc_bases := [ ] ;
16419: LD_ADDR_EXP 57
16423: PUSH
16424: EMPTY
16425: ST_TO_ADDR
// mc_sides := [ ] ;
16426: LD_ADDR_EXP 83
16430: PUSH
16431: EMPTY
16432: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16433: LD_ADDR_EXP 58
16437: PUSH
16438: EMPTY
16439: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16440: LD_ADDR_EXP 59
16444: PUSH
16445: EMPTY
16446: ST_TO_ADDR
// mc_need_heal := [ ] ;
16447: LD_ADDR_EXP 60
16451: PUSH
16452: EMPTY
16453: ST_TO_ADDR
// mc_healers := [ ] ;
16454: LD_ADDR_EXP 61
16458: PUSH
16459: EMPTY
16460: ST_TO_ADDR
// mc_build_list := [ ] ;
16461: LD_ADDR_EXP 62
16465: PUSH
16466: EMPTY
16467: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16468: LD_ADDR_EXP 89
16472: PUSH
16473: EMPTY
16474: ST_TO_ADDR
// mc_builders := [ ] ;
16475: LD_ADDR_EXP 63
16479: PUSH
16480: EMPTY
16481: ST_TO_ADDR
// mc_construct_list := [ ] ;
16482: LD_ADDR_EXP 64
16486: PUSH
16487: EMPTY
16488: ST_TO_ADDR
// mc_turret_list := [ ] ;
16489: LD_ADDR_EXP 65
16493: PUSH
16494: EMPTY
16495: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16496: LD_ADDR_EXP 66
16500: PUSH
16501: EMPTY
16502: ST_TO_ADDR
// mc_miners := [ ] ;
16503: LD_ADDR_EXP 71
16507: PUSH
16508: EMPTY
16509: ST_TO_ADDR
// mc_mines := [ ] ;
16510: LD_ADDR_EXP 70
16514: PUSH
16515: EMPTY
16516: ST_TO_ADDR
// mc_minefields := [ ] ;
16517: LD_ADDR_EXP 72
16521: PUSH
16522: EMPTY
16523: ST_TO_ADDR
// mc_crates := [ ] ;
16524: LD_ADDR_EXP 73
16528: PUSH
16529: EMPTY
16530: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16531: LD_ADDR_EXP 74
16535: PUSH
16536: EMPTY
16537: ST_TO_ADDR
// mc_crates_area := [ ] ;
16538: LD_ADDR_EXP 75
16542: PUSH
16543: EMPTY
16544: ST_TO_ADDR
// mc_vehicles := [ ] ;
16545: LD_ADDR_EXP 76
16549: PUSH
16550: EMPTY
16551: ST_TO_ADDR
// mc_attack := [ ] ;
16552: LD_ADDR_EXP 77
16556: PUSH
16557: EMPTY
16558: ST_TO_ADDR
// mc_produce := [ ] ;
16559: LD_ADDR_EXP 78
16563: PUSH
16564: EMPTY
16565: ST_TO_ADDR
// mc_defender := [ ] ;
16566: LD_ADDR_EXP 79
16570: PUSH
16571: EMPTY
16572: ST_TO_ADDR
// mc_parking := [ ] ;
16573: LD_ADDR_EXP 81
16577: PUSH
16578: EMPTY
16579: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16580: LD_ADDR_EXP 67
16584: PUSH
16585: EMPTY
16586: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16587: LD_ADDR_EXP 69
16591: PUSH
16592: EMPTY
16593: ST_TO_ADDR
// mc_scan := [ ] ;
16594: LD_ADDR_EXP 80
16598: PUSH
16599: EMPTY
16600: ST_TO_ADDR
// mc_scan_area := [ ] ;
16601: LD_ADDR_EXP 82
16605: PUSH
16606: EMPTY
16607: ST_TO_ADDR
// mc_tech := [ ] ;
16608: LD_ADDR_EXP 84
16612: PUSH
16613: EMPTY
16614: ST_TO_ADDR
// end ;
16615: LD_VAR 0 1
16619: RET
// export function MC_Kill ( base ) ; begin
16620: LD_INT 0
16622: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16623: LD_ADDR_EXP 57
16627: PUSH
16628: LD_EXP 57
16632: PPUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: EMPTY
16639: PPUSH
16640: CALL_OW 1
16644: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16645: LD_ADDR_EXP 58
16649: PUSH
16650: LD_EXP 58
16654: PPUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: EMPTY
16661: PPUSH
16662: CALL_OW 1
16666: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16667: LD_ADDR_EXP 59
16671: PUSH
16672: LD_EXP 59
16676: PPUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: EMPTY
16683: PPUSH
16684: CALL_OW 1
16688: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16689: LD_ADDR_EXP 60
16693: PUSH
16694: LD_EXP 60
16698: PPUSH
16699: LD_VAR 0 1
16703: PPUSH
16704: EMPTY
16705: PPUSH
16706: CALL_OW 1
16710: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16711: LD_ADDR_EXP 61
16715: PUSH
16716: LD_EXP 61
16720: PPUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: EMPTY
16727: PPUSH
16728: CALL_OW 1
16732: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16733: LD_ADDR_EXP 62
16737: PUSH
16738: LD_EXP 62
16742: PPUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: EMPTY
16749: PPUSH
16750: CALL_OW 1
16754: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16755: LD_ADDR_EXP 63
16759: PUSH
16760: LD_EXP 63
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: EMPTY
16771: PPUSH
16772: CALL_OW 1
16776: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16777: LD_ADDR_EXP 64
16781: PUSH
16782: LD_EXP 64
16786: PPUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: EMPTY
16793: PPUSH
16794: CALL_OW 1
16798: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16799: LD_ADDR_EXP 65
16803: PUSH
16804: LD_EXP 65
16808: PPUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: EMPTY
16815: PPUSH
16816: CALL_OW 1
16820: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16821: LD_ADDR_EXP 66
16825: PUSH
16826: LD_EXP 66
16830: PPUSH
16831: LD_VAR 0 1
16835: PPUSH
16836: EMPTY
16837: PPUSH
16838: CALL_OW 1
16842: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16843: LD_ADDR_EXP 67
16847: PUSH
16848: LD_EXP 67
16852: PPUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: EMPTY
16859: PPUSH
16860: CALL_OW 1
16864: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16865: LD_ADDR_EXP 68
16869: PUSH
16870: LD_EXP 68
16874: PPUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: LD_INT 0
16882: PPUSH
16883: CALL_OW 1
16887: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16888: LD_ADDR_EXP 69
16892: PUSH
16893: LD_EXP 69
16897: PPUSH
16898: LD_VAR 0 1
16902: PPUSH
16903: EMPTY
16904: PPUSH
16905: CALL_OW 1
16909: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16910: LD_ADDR_EXP 70
16914: PUSH
16915: LD_EXP 70
16919: PPUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: EMPTY
16926: PPUSH
16927: CALL_OW 1
16931: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16932: LD_ADDR_EXP 71
16936: PUSH
16937: LD_EXP 71
16941: PPUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: EMPTY
16948: PPUSH
16949: CALL_OW 1
16953: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16954: LD_ADDR_EXP 72
16958: PUSH
16959: LD_EXP 72
16963: PPUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: EMPTY
16970: PPUSH
16971: CALL_OW 1
16975: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16976: LD_ADDR_EXP 73
16980: PUSH
16981: LD_EXP 73
16985: PPUSH
16986: LD_VAR 0 1
16990: PPUSH
16991: EMPTY
16992: PPUSH
16993: CALL_OW 1
16997: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
16998: LD_ADDR_EXP 74
17002: PUSH
17003: LD_EXP 74
17007: PPUSH
17008: LD_VAR 0 1
17012: PPUSH
17013: EMPTY
17014: PPUSH
17015: CALL_OW 1
17019: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17020: LD_ADDR_EXP 75
17024: PUSH
17025: LD_EXP 75
17029: PPUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: EMPTY
17036: PPUSH
17037: CALL_OW 1
17041: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17042: LD_ADDR_EXP 76
17046: PUSH
17047: LD_EXP 76
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: EMPTY
17058: PPUSH
17059: CALL_OW 1
17063: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17064: LD_ADDR_EXP 77
17068: PUSH
17069: LD_EXP 77
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: EMPTY
17080: PPUSH
17081: CALL_OW 1
17085: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17086: LD_ADDR_EXP 78
17090: PUSH
17091: LD_EXP 78
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: EMPTY
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17108: LD_ADDR_EXP 79
17112: PUSH
17113: LD_EXP 79
17117: PPUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: EMPTY
17124: PPUSH
17125: CALL_OW 1
17129: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17130: LD_ADDR_EXP 80
17134: PUSH
17135: LD_EXP 80
17139: PPUSH
17140: LD_VAR 0 1
17144: PPUSH
17145: EMPTY
17146: PPUSH
17147: CALL_OW 1
17151: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17152: LD_ADDR_EXP 81
17156: PUSH
17157: LD_EXP 81
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: EMPTY
17168: PPUSH
17169: CALL_OW 1
17173: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17174: LD_ADDR_EXP 82
17178: PUSH
17179: LD_EXP 82
17183: PPUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: EMPTY
17190: PPUSH
17191: CALL_OW 1
17195: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17196: LD_ADDR_EXP 84
17200: PUSH
17201: LD_EXP 84
17205: PPUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: EMPTY
17212: PPUSH
17213: CALL_OW 1
17217: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17218: LD_ADDR_EXP 86
17222: PUSH
17223: LD_EXP 86
17227: PPUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: EMPTY
17234: PPUSH
17235: CALL_OW 1
17239: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17240: LD_ADDR_EXP 87
17244: PUSH
17245: LD_EXP 87
17249: PPUSH
17250: LD_VAR 0 1
17254: PPUSH
17255: EMPTY
17256: PPUSH
17257: CALL_OW 1
17261: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17262: LD_ADDR_EXP 88
17266: PUSH
17267: LD_EXP 88
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: EMPTY
17278: PPUSH
17279: CALL_OW 1
17283: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17284: LD_ADDR_EXP 89
17288: PUSH
17289: LD_EXP 89
17293: PPUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: EMPTY
17300: PPUSH
17301: CALL_OW 1
17305: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17306: LD_ADDR_EXP 90
17310: PUSH
17311: LD_EXP 90
17315: PPUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: EMPTY
17322: PPUSH
17323: CALL_OW 1
17327: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17328: LD_ADDR_EXP 91
17332: PUSH
17333: LD_EXP 91
17337: PPUSH
17338: LD_VAR 0 1
17342: PPUSH
17343: EMPTY
17344: PPUSH
17345: CALL_OW 1
17349: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17350: LD_ADDR_EXP 92
17354: PUSH
17355: LD_EXP 92
17359: PPUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: EMPTY
17366: PPUSH
17367: CALL_OW 1
17371: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17372: LD_ADDR_EXP 93
17376: PUSH
17377: LD_EXP 93
17381: PPUSH
17382: LD_VAR 0 1
17386: PPUSH
17387: EMPTY
17388: PPUSH
17389: CALL_OW 1
17393: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17394: LD_ADDR_EXP 94
17398: PUSH
17399: LD_EXP 94
17403: PPUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: EMPTY
17410: PPUSH
17411: CALL_OW 1
17415: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17416: LD_ADDR_EXP 95
17420: PUSH
17421: LD_EXP 95
17425: PPUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: EMPTY
17432: PPUSH
17433: CALL_OW 1
17437: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17438: LD_ADDR_EXP 96
17442: PUSH
17443: LD_EXP 96
17447: PPUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: EMPTY
17454: PPUSH
17455: CALL_OW 1
17459: ST_TO_ADDR
// end ;
17460: LD_VAR 0 2
17464: RET
// export function MC_Start ( ) ; var i ; begin
17465: LD_INT 0
17467: PPUSH
17468: PPUSH
// for i = 1 to mc_bases do
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: DOUBLE
17475: LD_INT 1
17477: DEC
17478: ST_TO_ADDR
17479: LD_EXP 57
17483: PUSH
17484: FOR_TO
17485: IFFALSE 18418
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17487: LD_ADDR_EXP 58
17491: PUSH
17492: LD_EXP 58
17496: PPUSH
17497: LD_VAR 0 2
17501: PPUSH
17502: EMPTY
17503: PPUSH
17504: CALL_OW 1
17508: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17509: LD_ADDR_EXP 59
17513: PUSH
17514: LD_EXP 59
17518: PPUSH
17519: LD_VAR 0 2
17523: PPUSH
17524: EMPTY
17525: PPUSH
17526: CALL_OW 1
17530: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17531: LD_ADDR_EXP 60
17535: PUSH
17536: LD_EXP 60
17540: PPUSH
17541: LD_VAR 0 2
17545: PPUSH
17546: EMPTY
17547: PPUSH
17548: CALL_OW 1
17552: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17553: LD_ADDR_EXP 61
17557: PUSH
17558: LD_EXP 61
17562: PPUSH
17563: LD_VAR 0 2
17567: PPUSH
17568: EMPTY
17569: PUSH
17570: EMPTY
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 1
17580: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17581: LD_ADDR_EXP 62
17585: PUSH
17586: LD_EXP 62
17590: PPUSH
17591: LD_VAR 0 2
17595: PPUSH
17596: EMPTY
17597: PPUSH
17598: CALL_OW 1
17602: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17603: LD_ADDR_EXP 89
17607: PUSH
17608: LD_EXP 89
17612: PPUSH
17613: LD_VAR 0 2
17617: PPUSH
17618: EMPTY
17619: PPUSH
17620: CALL_OW 1
17624: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17625: LD_ADDR_EXP 63
17629: PUSH
17630: LD_EXP 63
17634: PPUSH
17635: LD_VAR 0 2
17639: PPUSH
17640: EMPTY
17641: PPUSH
17642: CALL_OW 1
17646: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17647: LD_ADDR_EXP 64
17651: PUSH
17652: LD_EXP 64
17656: PPUSH
17657: LD_VAR 0 2
17661: PPUSH
17662: EMPTY
17663: PPUSH
17664: CALL_OW 1
17668: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17669: LD_ADDR_EXP 65
17673: PUSH
17674: LD_EXP 65
17678: PPUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: EMPTY
17685: PPUSH
17686: CALL_OW 1
17690: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17691: LD_ADDR_EXP 66
17695: PUSH
17696: LD_EXP 66
17700: PPUSH
17701: LD_VAR 0 2
17705: PPUSH
17706: LD_EXP 57
17710: PUSH
17711: LD_VAR 0 2
17715: ARRAY
17716: PPUSH
17717: LD_INT 2
17719: PUSH
17720: LD_INT 30
17722: PUSH
17723: LD_INT 32
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 30
17732: PUSH
17733: LD_INT 31
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 58
17747: PUSH
17748: EMPTY
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: PPUSH
17760: CALL_OW 1
17764: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17765: LD_ADDR_EXP 67
17769: PUSH
17770: LD_EXP 67
17774: PPUSH
17775: LD_VAR 0 2
17779: PPUSH
17780: EMPTY
17781: PPUSH
17782: CALL_OW 1
17786: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17787: LD_ADDR_EXP 71
17791: PUSH
17792: LD_EXP 71
17796: PPUSH
17797: LD_VAR 0 2
17801: PPUSH
17802: EMPTY
17803: PPUSH
17804: CALL_OW 1
17808: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17809: LD_ADDR_EXP 70
17813: PUSH
17814: LD_EXP 70
17818: PPUSH
17819: LD_VAR 0 2
17823: PPUSH
17824: EMPTY
17825: PPUSH
17826: CALL_OW 1
17830: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17831: LD_ADDR_EXP 72
17835: PUSH
17836: LD_EXP 72
17840: PPUSH
17841: LD_VAR 0 2
17845: PPUSH
17846: EMPTY
17847: PPUSH
17848: CALL_OW 1
17852: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17853: LD_ADDR_EXP 73
17857: PUSH
17858: LD_EXP 73
17862: PPUSH
17863: LD_VAR 0 2
17867: PPUSH
17868: EMPTY
17869: PPUSH
17870: CALL_OW 1
17874: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17875: LD_ADDR_EXP 74
17879: PUSH
17880: LD_EXP 74
17884: PPUSH
17885: LD_VAR 0 2
17889: PPUSH
17890: EMPTY
17891: PPUSH
17892: CALL_OW 1
17896: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17897: LD_ADDR_EXP 75
17901: PUSH
17902: LD_EXP 75
17906: PPUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: EMPTY
17913: PPUSH
17914: CALL_OW 1
17918: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17919: LD_ADDR_EXP 76
17923: PUSH
17924: LD_EXP 76
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: EMPTY
17935: PPUSH
17936: CALL_OW 1
17940: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17941: LD_ADDR_EXP 77
17945: PUSH
17946: LD_EXP 77
17950: PPUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: EMPTY
17957: PPUSH
17958: CALL_OW 1
17962: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17963: LD_ADDR_EXP 78
17967: PUSH
17968: LD_EXP 78
17972: PPUSH
17973: LD_VAR 0 2
17977: PPUSH
17978: EMPTY
17979: PPUSH
17980: CALL_OW 1
17984: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17985: LD_ADDR_EXP 79
17989: PUSH
17990: LD_EXP 79
17994: PPUSH
17995: LD_VAR 0 2
17999: PPUSH
18000: EMPTY
18001: PPUSH
18002: CALL_OW 1
18006: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18007: LD_ADDR_EXP 68
18011: PUSH
18012: LD_EXP 68
18016: PPUSH
18017: LD_VAR 0 2
18021: PPUSH
18022: LD_INT 0
18024: PPUSH
18025: CALL_OW 1
18029: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18030: LD_ADDR_EXP 81
18034: PUSH
18035: LD_EXP 81
18039: PPUSH
18040: LD_VAR 0 2
18044: PPUSH
18045: LD_INT 0
18047: PPUSH
18048: CALL_OW 1
18052: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18053: LD_ADDR_EXP 69
18057: PUSH
18058: LD_EXP 69
18062: PPUSH
18063: LD_VAR 0 2
18067: PPUSH
18068: EMPTY
18069: PPUSH
18070: CALL_OW 1
18074: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18075: LD_ADDR_EXP 80
18079: PUSH
18080: LD_EXP 80
18084: PPUSH
18085: LD_VAR 0 2
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 1
18097: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18098: LD_ADDR_EXP 82
18102: PUSH
18103: LD_EXP 82
18107: PPUSH
18108: LD_VAR 0 2
18112: PPUSH
18113: EMPTY
18114: PPUSH
18115: CALL_OW 1
18119: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18120: LD_ADDR_EXP 85
18124: PUSH
18125: LD_EXP 85
18129: PPUSH
18130: LD_VAR 0 2
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 1
18142: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18143: LD_ADDR_EXP 86
18147: PUSH
18148: LD_EXP 86
18152: PPUSH
18153: LD_VAR 0 2
18157: PPUSH
18158: EMPTY
18159: PPUSH
18160: CALL_OW 1
18164: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18165: LD_ADDR_EXP 87
18169: PUSH
18170: LD_EXP 87
18174: PPUSH
18175: LD_VAR 0 2
18179: PPUSH
18180: EMPTY
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18187: LD_ADDR_EXP 88
18191: PUSH
18192: LD_EXP 88
18196: PPUSH
18197: LD_VAR 0 2
18201: PPUSH
18202: EMPTY
18203: PPUSH
18204: CALL_OW 1
18208: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18209: LD_ADDR_EXP 90
18213: PUSH
18214: LD_EXP 90
18218: PPUSH
18219: LD_VAR 0 2
18223: PPUSH
18224: LD_EXP 57
18228: PUSH
18229: LD_VAR 0 2
18233: ARRAY
18234: PPUSH
18235: LD_INT 2
18237: PUSH
18238: LD_INT 30
18240: PUSH
18241: LD_INT 6
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 30
18250: PUSH
18251: LD_INT 7
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 30
18260: PUSH
18261: LD_INT 8
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 72
18278: PPUSH
18279: CALL_OW 1
18283: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18284: LD_ADDR_EXP 91
18288: PUSH
18289: LD_EXP 91
18293: PPUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: EMPTY
18300: PPUSH
18301: CALL_OW 1
18305: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18306: LD_ADDR_EXP 92
18310: PUSH
18311: LD_EXP 92
18315: PPUSH
18316: LD_VAR 0 2
18320: PPUSH
18321: EMPTY
18322: PPUSH
18323: CALL_OW 1
18327: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18328: LD_ADDR_EXP 93
18332: PUSH
18333: LD_EXP 93
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: EMPTY
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18350: LD_ADDR_EXP 94
18354: PUSH
18355: LD_EXP 94
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: EMPTY
18366: PPUSH
18367: CALL_OW 1
18371: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18372: LD_ADDR_EXP 95
18376: PUSH
18377: LD_EXP 95
18381: PPUSH
18382: LD_VAR 0 2
18386: PPUSH
18387: EMPTY
18388: PPUSH
18389: CALL_OW 1
18393: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18394: LD_ADDR_EXP 96
18398: PUSH
18399: LD_EXP 96
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: EMPTY
18410: PPUSH
18411: CALL_OW 1
18415: ST_TO_ADDR
// end ;
18416: GO 17484
18418: POP
18419: POP
// MC_InitSides ( ) ;
18420: CALL 18706 0 0
// MC_InitResearch ( ) ;
18424: CALL 18445 0 0
// CustomInitMacro ( ) ;
18428: CALL 11367 0 0
// skirmish := true ;
18432: LD_ADDR_EXP 56
18436: PUSH
18437: LD_INT 1
18439: ST_TO_ADDR
// end ;
18440: LD_VAR 0 1
18444: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18445: LD_INT 0
18447: PPUSH
18448: PPUSH
18449: PPUSH
18450: PPUSH
18451: PPUSH
18452: PPUSH
// if not mc_bases then
18453: LD_EXP 57
18457: NOT
18458: IFFALSE 18462
// exit ;
18460: GO 18701
// for i = 1 to 8 do
18462: LD_ADDR_VAR 0 2
18466: PUSH
18467: DOUBLE
18468: LD_INT 1
18470: DEC
18471: ST_TO_ADDR
18472: LD_INT 8
18474: PUSH
18475: FOR_TO
18476: IFFALSE 18502
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18478: LD_ADDR_EXP 84
18482: PUSH
18483: LD_EXP 84
18487: PPUSH
18488: LD_VAR 0 2
18492: PPUSH
18493: EMPTY
18494: PPUSH
18495: CALL_OW 1
18499: ST_TO_ADDR
18500: GO 18475
18502: POP
18503: POP
// tmp := [ ] ;
18504: LD_ADDR_VAR 0 5
18508: PUSH
18509: EMPTY
18510: ST_TO_ADDR
// for i = 1 to mc_sides do
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: DOUBLE
18517: LD_INT 1
18519: DEC
18520: ST_TO_ADDR
18521: LD_EXP 83
18525: PUSH
18526: FOR_TO
18527: IFFALSE 18585
// if not mc_sides [ i ] in tmp then
18529: LD_EXP 83
18533: PUSH
18534: LD_VAR 0 2
18538: ARRAY
18539: PUSH
18540: LD_VAR 0 5
18544: IN
18545: NOT
18546: IFFALSE 18583
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18548: LD_ADDR_VAR 0 5
18552: PUSH
18553: LD_VAR 0 5
18557: PPUSH
18558: LD_VAR 0 5
18562: PUSH
18563: LD_INT 1
18565: PLUS
18566: PPUSH
18567: LD_EXP 83
18571: PUSH
18572: LD_VAR 0 2
18576: ARRAY
18577: PPUSH
18578: CALL_OW 2
18582: ST_TO_ADDR
18583: GO 18526
18585: POP
18586: POP
// if not tmp then
18587: LD_VAR 0 5
18591: NOT
18592: IFFALSE 18596
// exit ;
18594: GO 18701
// for j in tmp do
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_VAR 0 5
18605: PUSH
18606: FOR_IN
18607: IFFALSE 18699
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18609: LD_ADDR_VAR 0 6
18613: PUSH
18614: LD_INT 22
18616: PUSH
18617: LD_VAR 0 3
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not un then
18631: LD_VAR 0 6
18635: NOT
18636: IFFALSE 18640
// continue ;
18638: GO 18606
// nation := GetNation ( un [ 1 ] ) ;
18640: LD_ADDR_VAR 0 4
18644: PUSH
18645: LD_VAR 0 6
18649: PUSH
18650: LD_INT 1
18652: ARRAY
18653: PPUSH
18654: CALL_OW 248
18658: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18659: LD_ADDR_EXP 84
18663: PUSH
18664: LD_EXP 84
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: LD_VAR 0 3
18678: PPUSH
18679: LD_VAR 0 4
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL 37918 0 3
18691: PPUSH
18692: CALL_OW 1
18696: ST_TO_ADDR
// end ;
18697: GO 18606
18699: POP
18700: POP
// end ;
18701: LD_VAR 0 1
18705: RET
// export function MC_InitSides ( ) ; var i ; begin
18706: LD_INT 0
18708: PPUSH
18709: PPUSH
// if not mc_bases then
18710: LD_EXP 57
18714: NOT
18715: IFFALSE 18719
// exit ;
18717: GO 18793
// for i = 1 to mc_bases do
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: DOUBLE
18725: LD_INT 1
18727: DEC
18728: ST_TO_ADDR
18729: LD_EXP 57
18733: PUSH
18734: FOR_TO
18735: IFFALSE 18791
// if mc_bases [ i ] then
18737: LD_EXP 57
18741: PUSH
18742: LD_VAR 0 2
18746: ARRAY
18747: IFFALSE 18789
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18749: LD_ADDR_EXP 83
18753: PUSH
18754: LD_EXP 83
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: LD_EXP 57
18768: PUSH
18769: LD_VAR 0 2
18773: ARRAY
18774: PUSH
18775: LD_INT 1
18777: ARRAY
18778: PPUSH
18779: CALL_OW 255
18783: PPUSH
18784: CALL_OW 1
18788: ST_TO_ADDR
18789: GO 18734
18791: POP
18792: POP
// end ;
18793: LD_VAR 0 1
18797: RET
// every 0 0$01 trigger skirmish do
18798: LD_EXP 56
18802: IFFALSE 18935
18804: GO 18806
18806: DISABLE
// begin enable ;
18807: ENABLE
// MC_CheckBuildings ( ) ;
18808: CALL 19420 0 0
// MC_CheckPeopleLife ( ) ;
18812: CALL 19545 0 0
// RaiseSailEvent ( 103 ) ;
18816: LD_INT 103
18818: PPUSH
18819: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18823: LD_INT 104
18825: PPUSH
18826: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18830: LD_INT 105
18832: PPUSH
18833: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18837: LD_INT 106
18839: PPUSH
18840: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18844: LD_INT 107
18846: PPUSH
18847: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18851: LD_INT 108
18853: PPUSH
18854: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18858: LD_INT 109
18860: PPUSH
18861: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18865: LD_INT 110
18867: PPUSH
18868: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18872: LD_INT 111
18874: PPUSH
18875: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18879: LD_INT 112
18881: PPUSH
18882: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18886: LD_INT 120
18888: PPUSH
18889: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18893: LD_INT 121
18895: PPUSH
18896: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18900: LD_INT 122
18902: PPUSH
18903: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18907: LD_INT 123
18909: PPUSH
18910: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18914: LD_INT 125
18916: PPUSH
18917: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18921: LD_INT 126
18923: PPUSH
18924: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18928: LD_INT 200
18930: PPUSH
18931: CALL_OW 427
// end ;
18935: END
// every 10 trigger skirmish do var i ;
18936: LD_EXP 56
18940: IFFALSE 19039
18942: GO 18944
18944: DISABLE
18945: LD_INT 0
18947: PPUSH
// begin enable ;
18948: ENABLE
// if not mc_bases then
18949: LD_EXP 57
18953: NOT
18954: IFFALSE 18958
// exit ;
18956: GO 19039
// for i = 1 to mc_bases do
18958: LD_ADDR_VAR 0 1
18962: PUSH
18963: DOUBLE
18964: LD_INT 1
18966: DEC
18967: ST_TO_ADDR
18968: LD_EXP 57
18972: PUSH
18973: FOR_TO
18974: IFFALSE 19037
// if mc_mines [ i ] and mc_miners [ i ] then
18976: LD_EXP 70
18980: PUSH
18981: LD_VAR 0 1
18985: ARRAY
18986: PUSH
18987: LD_EXP 71
18991: PUSH
18992: LD_VAR 0 1
18996: ARRAY
18997: AND
18998: IFFALSE 19035
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
19000: LD_EXP 71
19004: PUSH
19005: LD_VAR 0 1
19009: ARRAY
19010: PUSH
19011: LD_INT 1
19013: ARRAY
19014: PPUSH
19015: CALL_OW 255
19019: PPUSH
19020: LD_EXP 70
19024: PUSH
19025: LD_VAR 0 1
19029: ARRAY
19030: PPUSH
19031: CALL 41667 0 2
19035: GO 18973
19037: POP
19038: POP
// end ;
19039: PPOPN 1
19041: END
// on SailEvent ( event ) do begin if event = 101 then
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 101
19049: EQUAL
19050: IFFALSE 19056
// MC_RepairBuildings ( ) ;
19052: CALL 20103 0 0
// if event = 102 then
19056: LD_VAR 0 1
19060: PUSH
19061: LD_INT 102
19063: EQUAL
19064: IFFALSE 19070
// MC_Heal ( ) ;
19066: CALL 20509 0 0
// if event = 103 then
19070: LD_VAR 0 1
19074: PUSH
19075: LD_INT 103
19077: EQUAL
19078: IFFALSE 19084
// MC_Build ( ) ;
19080: CALL 20931 0 0
// if event = 104 then
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 104
19091: EQUAL
19092: IFFALSE 19098
// MC_TurretWeapon ( ) ;
19094: CALL 22370 0 0
// if event = 105 then
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 105
19105: EQUAL
19106: IFFALSE 19112
// MC_BuildUpgrade ( ) ;
19108: CALL 21921 0 0
// if event = 106 then
19112: LD_VAR 0 1
19116: PUSH
19117: LD_INT 106
19119: EQUAL
19120: IFFALSE 19126
// MC_PlantMines ( ) ;
19122: CALL 22722 0 0
// if event = 107 then
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 107
19133: EQUAL
19134: IFFALSE 19140
// MC_CollectCrates ( ) ;
19136: CALL 23729 0 0
// if event = 108 then
19140: LD_VAR 0 1
19144: PUSH
19145: LD_INT 108
19147: EQUAL
19148: IFFALSE 19154
// MC_LinkRemoteControl ( ) ;
19150: CALL 25233 0 0
// if event = 109 then
19154: LD_VAR 0 1
19158: PUSH
19159: LD_INT 109
19161: EQUAL
19162: IFFALSE 19168
// MC_ProduceVehicle ( ) ;
19164: CALL 25414 0 0
// if event = 110 then
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 110
19175: EQUAL
19176: IFFALSE 19182
// MC_SendAttack ( ) ;
19178: CALL 25895 0 0
// if event = 111 then
19182: LD_VAR 0 1
19186: PUSH
19187: LD_INT 111
19189: EQUAL
19190: IFFALSE 19196
// MC_Defend ( ) ;
19192: CALL 26003 0 0
// if event = 112 then
19196: LD_VAR 0 1
19200: PUSH
19201: LD_INT 112
19203: EQUAL
19204: IFFALSE 19210
// MC_Research ( ) ;
19206: CALL 26401 0 0
// if event = 120 then
19210: LD_VAR 0 1
19214: PUSH
19215: LD_INT 120
19217: EQUAL
19218: IFFALSE 19224
// MC_RepairVehicle ( ) ;
19220: CALL 27370 0 0
// if event = 121 then
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 121
19231: EQUAL
19232: IFFALSE 19238
// MC_TameApe ( ) ;
19234: CALL 28059 0 0
// if event = 122 then
19238: LD_VAR 0 1
19242: PUSH
19243: LD_INT 122
19245: EQUAL
19246: IFFALSE 19252
// MC_ChangeApeClass ( ) ;
19248: CALL 28822 0 0
// if event = 123 then
19252: LD_VAR 0 1
19256: PUSH
19257: LD_INT 123
19259: EQUAL
19260: IFFALSE 19266
// MC_Bazooka ( ) ;
19262: CALL 29456 0 0
// if event = 124 then
19266: LD_VAR 0 1
19270: PUSH
19271: LD_INT 124
19273: EQUAL
19274: IFFALSE 19280
// MC_TeleportExit ( ) ;
19276: CALL 29654 0 0
// if event = 125 then
19280: LD_VAR 0 1
19284: PUSH
19285: LD_INT 125
19287: EQUAL
19288: IFFALSE 19294
// MC_Deposits ( ) ;
19290: CALL 29696 0 0
// if event = 126 then
19294: LD_VAR 0 1
19298: PUSH
19299: LD_INT 126
19301: EQUAL
19302: IFFALSE 19308
// MC_RemoteDriver ( ) ;
19304: CALL 30275 0 0
// if event = 200 then
19308: LD_VAR 0 1
19312: PUSH
19313: LD_INT 200
19315: EQUAL
19316: IFFALSE 19322
// MC_Idle ( ) ;
19318: CALL 31780 0 0
// end ;
19322: PPOPN 1
19324: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
// if not mc_bases [ base ] or not tag then
19329: LD_EXP 57
19333: PUSH
19334: LD_VAR 0 1
19338: ARRAY
19339: NOT
19340: PUSH
19341: LD_VAR 0 2
19345: NOT
19346: OR
19347: IFFALSE 19351
// exit ;
19349: GO 19415
// for i in mc_bases [ base ] union mc_ape [ base ] do
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_EXP 57
19360: PUSH
19361: LD_VAR 0 1
19365: ARRAY
19366: PUSH
19367: LD_EXP 86
19371: PUSH
19372: LD_VAR 0 1
19376: ARRAY
19377: UNION
19378: PUSH
19379: FOR_IN
19380: IFFALSE 19413
// if GetTag ( i ) = tag then
19382: LD_VAR 0 4
19386: PPUSH
19387: CALL_OW 110
19391: PUSH
19392: LD_VAR 0 2
19396: EQUAL
19397: IFFALSE 19411
// SetTag ( i , 0 ) ;
19399: LD_VAR 0 4
19403: PPUSH
19404: LD_INT 0
19406: PPUSH
19407: CALL_OW 109
19411: GO 19379
19413: POP
19414: POP
// end ;
19415: LD_VAR 0 3
19419: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
19420: LD_INT 0
19422: PPUSH
19423: PPUSH
19424: PPUSH
// if not mc_bases then
19425: LD_EXP 57
19429: NOT
19430: IFFALSE 19434
// exit ;
19432: GO 19540
// for i = 1 to mc_bases do
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: DOUBLE
19440: LD_INT 1
19442: DEC
19443: ST_TO_ADDR
19444: LD_EXP 57
19448: PUSH
19449: FOR_TO
19450: IFFALSE 19531
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
19452: LD_ADDR_VAR 0 3
19456: PUSH
19457: LD_EXP 57
19461: PUSH
19462: LD_VAR 0 2
19466: ARRAY
19467: PPUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 3
19480: PUSH
19481: LD_INT 24
19483: PUSH
19484: LD_INT 1000
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 72
19503: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
19504: LD_ADDR_EXP 58
19508: PUSH
19509: LD_EXP 58
19513: PPUSH
19514: LD_VAR 0 2
19518: PPUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 1
19528: ST_TO_ADDR
// end ;
19529: GO 19449
19531: POP
19532: POP
// RaiseSailEvent ( 101 ) ;
19533: LD_INT 101
19535: PPUSH
19536: CALL_OW 427
// end ;
19540: LD_VAR 0 1
19544: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
19545: LD_INT 0
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
19553: PPUSH
// if not mc_bases then
19554: LD_EXP 57
19558: NOT
19559: IFFALSE 19563
// exit ;
19561: GO 20098
// for i = 1 to mc_bases do
19563: LD_ADDR_VAR 0 2
19567: PUSH
19568: DOUBLE
19569: LD_INT 1
19571: DEC
19572: ST_TO_ADDR
19573: LD_EXP 57
19577: PUSH
19578: FOR_TO
19579: IFFALSE 20089
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
19581: LD_ADDR_VAR 0 5
19585: PUSH
19586: LD_EXP 57
19590: PUSH
19591: LD_VAR 0 2
19595: ARRAY
19596: PUSH
19597: LD_EXP 86
19601: PUSH
19602: LD_VAR 0 2
19606: ARRAY
19607: UNION
19608: PPUSH
19609: LD_INT 21
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: LD_INT 54
19627: PUSH
19628: EMPTY
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: LD_INT 24
19640: PUSH
19641: LD_INT 700
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PPUSH
19661: CALL_OW 72
19665: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
19666: LD_ADDR_VAR 0 6
19670: PUSH
19671: LD_EXP 57
19675: PUSH
19676: LD_VAR 0 2
19680: ARRAY
19681: PPUSH
19682: LD_INT 21
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: LD_INT 3
19697: PUSH
19698: LD_INT 54
19700: PUSH
19701: EMPTY
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 24
19713: PUSH
19714: LD_INT 250
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 72
19738: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
19739: LD_ADDR_VAR 0 7
19743: PUSH
19744: LD_VAR 0 5
19748: PUSH
19749: LD_VAR 0 6
19753: DIFF
19754: ST_TO_ADDR
// if not need_heal_1 then
19755: LD_VAR 0 6
19759: NOT
19760: IFFALSE 19793
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
19762: LD_ADDR_EXP 60
19766: PUSH
19767: LD_EXP 60
19771: PPUSH
19772: LD_VAR 0 2
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: EMPTY
19785: PPUSH
19786: CALL 45045 0 3
19790: ST_TO_ADDR
19791: GO 19825
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
19793: LD_ADDR_EXP 60
19797: PUSH
19798: LD_EXP 60
19802: PPUSH
19803: LD_VAR 0 2
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PPUSH
19815: LD_VAR 0 6
19819: PPUSH
19820: CALL 45045 0 3
19824: ST_TO_ADDR
// if not need_heal_2 then
19825: LD_VAR 0 7
19829: NOT
19830: IFFALSE 19863
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
19832: LD_ADDR_EXP 60
19836: PUSH
19837: LD_EXP 60
19841: PPUSH
19842: LD_VAR 0 2
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PPUSH
19854: EMPTY
19855: PPUSH
19856: CALL 45045 0 3
19860: ST_TO_ADDR
19861: GO 19895
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
19863: LD_ADDR_EXP 60
19867: PUSH
19868: LD_EXP 60
19872: PPUSH
19873: LD_VAR 0 2
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PPUSH
19885: LD_VAR 0 7
19889: PPUSH
19890: CALL 45045 0 3
19894: ST_TO_ADDR
// if need_heal_2 then
19895: LD_VAR 0 7
19899: IFFALSE 20071
// for j in need_heal_2 do
19901: LD_ADDR_VAR 0 3
19905: PUSH
19906: LD_VAR 0 7
19910: PUSH
19911: FOR_IN
19912: IFFALSE 20069
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
19914: LD_ADDR_VAR 0 5
19918: PUSH
19919: LD_EXP 57
19923: PUSH
19924: LD_VAR 0 2
19928: ARRAY
19929: PPUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 6
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 7
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 30
19955: PUSH
19956: LD_INT 8
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 30
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 30
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 25
19985: PUSH
19986: LD_INT 4
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: PPUSH
20002: CALL_OW 72
20006: ST_TO_ADDR
// if tmp then
20007: LD_VAR 0 5
20011: IFFALSE 20067
// begin k := NearestUnitToUnit ( tmp , j ) ;
20013: LD_ADDR_VAR 0 4
20017: PUSH
20018: LD_VAR 0 5
20022: PPUSH
20023: LD_VAR 0 3
20027: PPUSH
20028: CALL_OW 74
20032: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
20033: LD_VAR 0 3
20037: PPUSH
20038: LD_VAR 0 4
20042: PPUSH
20043: CALL_OW 296
20047: PUSH
20048: LD_INT 7
20050: GREATER
20051: IFFALSE 20067
// ComMoveUnit ( j , k ) ;
20053: LD_VAR 0 3
20057: PPUSH
20058: LD_VAR 0 4
20062: PPUSH
20063: CALL_OW 112
// end ; end ;
20067: GO 19911
20069: POP
20070: POP
// if not need_heal_1 and not need_heal_2 then
20071: LD_VAR 0 6
20075: NOT
20076: PUSH
20077: LD_VAR 0 7
20081: NOT
20082: AND
20083: IFFALSE 20087
// continue ;
20085: GO 19578
// end ;
20087: GO 19578
20089: POP
20090: POP
// RaiseSailEvent ( 102 ) ;
20091: LD_INT 102
20093: PPUSH
20094: CALL_OW 427
// end ;
20098: LD_VAR 0 1
20102: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
// if not mc_bases then
20110: LD_EXP 57
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20504
// for i = 1 to mc_bases do
20119: LD_ADDR_VAR 0 2
20123: PUSH
20124: DOUBLE
20125: LD_INT 1
20127: DEC
20128: ST_TO_ADDR
20129: LD_EXP 57
20133: PUSH
20134: FOR_TO
20135: IFFALSE 20502
// begin if not mc_building_need_repair [ i ] then
20137: LD_EXP 58
20141: PUSH
20142: LD_VAR 0 2
20146: ARRAY
20147: NOT
20148: IFFALSE 20186
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
20150: LD_ADDR_EXP 59
20154: PUSH
20155: LD_EXP 59
20159: PPUSH
20160: LD_VAR 0 2
20164: PPUSH
20165: EMPTY
20166: PPUSH
20167: CALL_OW 1
20171: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
20172: LD_VAR 0 2
20176: PPUSH
20177: LD_INT 101
20179: PPUSH
20180: CALL 19325 0 2
// continue ;
20184: GO 20134
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
20186: LD_ADDR_EXP 63
20190: PUSH
20191: LD_EXP 63
20195: PPUSH
20196: LD_VAR 0 2
20200: PPUSH
20201: EMPTY
20202: PPUSH
20203: CALL_OW 1
20207: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20208: LD_VAR 0 2
20212: PPUSH
20213: LD_INT 103
20215: PPUSH
20216: CALL 19325 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_EXP 57
20229: PUSH
20230: LD_VAR 0 2
20234: ARRAY
20235: PUSH
20236: LD_EXP 86
20240: PUSH
20241: LD_VAR 0 2
20245: ARRAY
20246: UNION
20247: PPUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 25
20253: PUSH
20254: LD_INT 2
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 25
20263: PUSH
20264: LD_INT 16
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: PPUSH
20279: CALL_OW 72
20283: ST_TO_ADDR
// if not tmp then
20284: LD_VAR 0 5
20288: NOT
20289: IFFALSE 20293
// continue ;
20291: GO 20134
// for j in tmp do
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_VAR 0 5
20302: PUSH
20303: FOR_IN
20304: IFFALSE 20498
// begin if mc_need_heal [ i ] then
20306: LD_EXP 60
20310: PUSH
20311: LD_VAR 0 2
20315: ARRAY
20316: IFFALSE 20364
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_EXP 60
20327: PUSH
20328: LD_VAR 0 2
20332: ARRAY
20333: PUSH
20334: LD_INT 1
20336: ARRAY
20337: IN
20338: PUSH
20339: LD_VAR 0 3
20343: PUSH
20344: LD_EXP 60
20348: PUSH
20349: LD_VAR 0 2
20353: ARRAY
20354: PUSH
20355: LD_INT 2
20357: ARRAY
20358: IN
20359: OR
20360: IFFALSE 20364
// continue ;
20362: GO 20303
// if IsInUnit ( j ) then
20364: LD_VAR 0 3
20368: PPUSH
20369: CALL_OW 310
20373: IFFALSE 20384
// ComExitBuilding ( j ) ;
20375: LD_VAR 0 3
20379: PPUSH
20380: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_EXP 59
20393: PUSH
20394: LD_VAR 0 2
20398: ARRAY
20399: IN
20400: NOT
20401: IFFALSE 20459
// begin SetTag ( j , 101 ) ;
20403: LD_VAR 0 3
20407: PPUSH
20408: LD_INT 101
20410: PPUSH
20411: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
20415: LD_ADDR_EXP 59
20419: PUSH
20420: LD_EXP 59
20424: PPUSH
20425: LD_VAR 0 2
20429: PUSH
20430: LD_EXP 59
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 1
20443: PLUS
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PPUSH
20449: LD_VAR 0 3
20453: PPUSH
20454: CALL 45045 0 3
20458: ST_TO_ADDR
// end ; Wait ( 3 ) ;
20459: LD_INT 3
20461: PPUSH
20462: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_EXP 58
20475: PUSH
20476: LD_VAR 0 2
20480: ARRAY
20481: PPUSH
20482: LD_VAR 0 3
20486: PPUSH
20487: CALL_OW 74
20491: PPUSH
20492: CALL_OW 130
// end ;
20496: GO 20303
20498: POP
20499: POP
// end ;
20500: GO 20134
20502: POP
20503: POP
// end ;
20504: LD_VAR 0 1
20508: RET
// export function MC_Heal ; var i , j , tmp ; begin
20509: LD_INT 0
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
// if not mc_bases then
20515: LD_EXP 57
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 20926
// for i = 1 to mc_bases do
20524: LD_ADDR_VAR 0 2
20528: PUSH
20529: DOUBLE
20530: LD_INT 1
20532: DEC
20533: ST_TO_ADDR
20534: LD_EXP 57
20538: PUSH
20539: FOR_TO
20540: IFFALSE 20924
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
20542: LD_EXP 60
20546: PUSH
20547: LD_VAR 0 2
20551: ARRAY
20552: PUSH
20553: LD_INT 1
20555: ARRAY
20556: NOT
20557: PUSH
20558: LD_EXP 60
20562: PUSH
20563: LD_VAR 0 2
20567: ARRAY
20568: PUSH
20569: LD_INT 2
20571: ARRAY
20572: NOT
20573: AND
20574: IFFALSE 20612
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
20576: LD_ADDR_EXP 61
20580: PUSH
20581: LD_EXP 61
20585: PPUSH
20586: LD_VAR 0 2
20590: PPUSH
20591: EMPTY
20592: PPUSH
20593: CALL_OW 1
20597: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_INT 102
20605: PPUSH
20606: CALL 19325 0 2
// continue ;
20610: GO 20539
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20612: LD_ADDR_VAR 0 4
20616: PUSH
20617: LD_EXP 57
20621: PUSH
20622: LD_VAR 0 2
20626: ARRAY
20627: PPUSH
20628: LD_INT 25
20630: PUSH
20631: LD_INT 4
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: CALL_OW 72
20642: ST_TO_ADDR
// if not tmp then
20643: LD_VAR 0 4
20647: NOT
20648: IFFALSE 20652
// continue ;
20650: GO 20539
// if mc_taming [ i ] then
20652: LD_EXP 88
20656: PUSH
20657: LD_VAR 0 2
20661: ARRAY
20662: IFFALSE 20686
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20664: LD_ADDR_EXP 88
20668: PUSH
20669: LD_EXP 88
20673: PPUSH
20674: LD_VAR 0 2
20678: PPUSH
20679: EMPTY
20680: PPUSH
20681: CALL_OW 1
20685: ST_TO_ADDR
// for j in tmp do
20686: LD_ADDR_VAR 0 3
20690: PUSH
20691: LD_VAR 0 4
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20920
// begin if IsInUnit ( j ) then
20699: LD_VAR 0 3
20703: PPUSH
20704: CALL_OW 310
20708: IFFALSE 20719
// ComExitBuilding ( j ) ;
20710: LD_VAR 0 3
20714: PPUSH
20715: CALL_OW 122
// if not j in mc_healers [ i ] then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_EXP 61
20728: PUSH
20729: LD_VAR 0 2
20733: ARRAY
20734: IN
20735: NOT
20736: IFFALSE 20782
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
20738: LD_ADDR_EXP 61
20742: PUSH
20743: LD_EXP 61
20747: PPUSH
20748: LD_VAR 0 2
20752: PUSH
20753: LD_EXP 61
20757: PUSH
20758: LD_VAR 0 2
20762: ARRAY
20763: PUSH
20764: LD_INT 1
20766: PLUS
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: CALL 45045 0 3
20781: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
20782: LD_VAR 0 3
20786: PPUSH
20787: CALL_OW 110
20791: PUSH
20792: LD_INT 102
20794: NONEQUAL
20795: IFFALSE 20809
// SetTag ( j , 102 ) ;
20797: LD_VAR 0 3
20801: PPUSH
20802: LD_INT 102
20804: PPUSH
20805: CALL_OW 109
// Wait ( 3 ) ;
20809: LD_INT 3
20811: PPUSH
20812: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
20816: LD_EXP 60
20820: PUSH
20821: LD_VAR 0 2
20825: ARRAY
20826: PUSH
20827: LD_INT 1
20829: ARRAY
20830: IFFALSE 20862
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
20832: LD_VAR 0 3
20836: PPUSH
20837: LD_EXP 60
20841: PUSH
20842: LD_VAR 0 2
20846: ARRAY
20847: PUSH
20848: LD_INT 1
20850: ARRAY
20851: PUSH
20852: LD_INT 1
20854: ARRAY
20855: PPUSH
20856: CALL_OW 128
20860: GO 20918
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
20862: LD_VAR 0 3
20866: PPUSH
20867: CALL_OW 314
20871: NOT
20872: PUSH
20873: LD_EXP 60
20877: PUSH
20878: LD_VAR 0 2
20882: ARRAY
20883: PUSH
20884: LD_INT 2
20886: ARRAY
20887: AND
20888: IFFALSE 20918
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
20890: LD_VAR 0 3
20894: PPUSH
20895: LD_EXP 60
20899: PUSH
20900: LD_VAR 0 2
20904: ARRAY
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: PUSH
20910: LD_INT 1
20912: ARRAY
20913: PPUSH
20914: CALL_OW 128
// end ;
20918: GO 20696
20920: POP
20921: POP
// end ;
20922: GO 20539
20924: POP
20925: POP
// end ;
20926: LD_VAR 0 1
20930: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
// if not mc_bases then
20938: LD_EXP 57
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 21916
// for i = 1 to mc_bases do
20947: LD_ADDR_VAR 0 2
20951: PUSH
20952: DOUBLE
20953: LD_INT 1
20955: DEC
20956: ST_TO_ADDR
20957: LD_EXP 57
20961: PUSH
20962: FOR_TO
20963: IFFALSE 21914
// begin if mc_scan [ i ] then
20965: LD_EXP 80
20969: PUSH
20970: LD_VAR 0 2
20974: ARRAY
20975: IFFALSE 20979
// continue ;
20977: GO 20962
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
20979: LD_EXP 62
20983: PUSH
20984: LD_VAR 0 2
20988: ARRAY
20989: NOT
20990: PUSH
20991: LD_EXP 64
20995: PUSH
20996: LD_VAR 0 2
21000: ARRAY
21001: NOT
21002: AND
21003: PUSH
21004: LD_EXP 63
21008: PUSH
21009: LD_VAR 0 2
21013: ARRAY
21014: AND
21015: IFFALSE 21053
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
21017: LD_ADDR_EXP 63
21021: PUSH
21022: LD_EXP 63
21026: PPUSH
21027: LD_VAR 0 2
21031: PPUSH
21032: EMPTY
21033: PPUSH
21034: CALL_OW 1
21038: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
21039: LD_VAR 0 2
21043: PPUSH
21044: LD_INT 103
21046: PPUSH
21047: CALL 19325 0 2
// continue ;
21051: GO 20962
// end ; if mc_construct_list [ i ] then
21053: LD_EXP 64
21057: PUSH
21058: LD_VAR 0 2
21062: ARRAY
21063: IFFALSE 21283
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21065: LD_ADDR_VAR 0 4
21069: PUSH
21070: LD_EXP 57
21074: PUSH
21075: LD_VAR 0 2
21079: ARRAY
21080: PPUSH
21081: LD_INT 25
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 72
21095: PUSH
21096: LD_EXP 59
21100: PUSH
21101: LD_VAR 0 2
21105: ARRAY
21106: DIFF
21107: ST_TO_ADDR
// if not tmp then
21108: LD_VAR 0 4
21112: NOT
21113: IFFALSE 21117
// continue ;
21115: GO 20962
// for j in tmp do
21117: LD_ADDR_VAR 0 3
21121: PUSH
21122: LD_VAR 0 4
21126: PUSH
21127: FOR_IN
21128: IFFALSE 21279
// begin if not mc_builders [ i ] then
21130: LD_EXP 63
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: NOT
21141: IFFALSE 21199
// begin SetTag ( j , 103 ) ;
21143: LD_VAR 0 3
21147: PPUSH
21148: LD_INT 103
21150: PPUSH
21151: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21155: LD_ADDR_EXP 63
21159: PUSH
21160: LD_EXP 63
21164: PPUSH
21165: LD_VAR 0 2
21169: PUSH
21170: LD_EXP 63
21174: PUSH
21175: LD_VAR 0 2
21179: ARRAY
21180: PUSH
21181: LD_INT 1
21183: PLUS
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PPUSH
21189: LD_VAR 0 3
21193: PPUSH
21194: CALL 45045 0 3
21198: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21199: LD_VAR 0 3
21203: PPUSH
21204: CALL_OW 310
21208: IFFALSE 21219
// ComExitBuilding ( j ) ;
21210: LD_VAR 0 3
21214: PPUSH
21215: CALL_OW 122
// wait ( 3 ) ;
21219: LD_INT 3
21221: PPUSH
21222: CALL_OW 67
// if not mc_construct_list [ i ] then
21226: LD_EXP 64
21230: PUSH
21231: LD_VAR 0 2
21235: ARRAY
21236: NOT
21237: IFFALSE 21241
// break ;
21239: GO 21279
// if not HasTask ( j ) then
21241: LD_VAR 0 3
21245: PPUSH
21246: CALL_OW 314
21250: NOT
21251: IFFALSE 21277
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
21253: LD_VAR 0 3
21257: PPUSH
21258: LD_EXP 64
21262: PUSH
21263: LD_VAR 0 2
21267: ARRAY
21268: PUSH
21269: LD_INT 1
21271: ARRAY
21272: PPUSH
21273: CALL 47481 0 2
// end ;
21277: GO 21127
21279: POP
21280: POP
// end else
21281: GO 21912
// if mc_build_list [ i ] then
21283: LD_EXP 62
21287: PUSH
21288: LD_VAR 0 2
21292: ARRAY
21293: IFFALSE 21912
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: LD_EXP 57
21304: PUSH
21305: LD_VAR 0 2
21309: ARRAY
21310: PPUSH
21311: LD_INT 2
21313: PUSH
21314: LD_INT 30
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 30
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 72
21343: ST_TO_ADDR
// if depot then
21344: LD_VAR 0 5
21348: IFFALSE 21366
// depot := depot [ 1 ] else
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: LD_VAR 0 5
21359: PUSH
21360: LD_INT 1
21362: ARRAY
21363: ST_TO_ADDR
21364: GO 21374
// depot := 0 ;
21366: LD_ADDR_VAR 0 5
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
21374: LD_EXP 62
21378: PUSH
21379: LD_VAR 0 2
21383: ARRAY
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PUSH
21389: LD_INT 1
21391: ARRAY
21392: PUSH
21393: LD_INT 0
21395: EQUAL
21396: PUSH
21397: LD_VAR 0 5
21401: PUSH
21402: LD_VAR 0 5
21406: PPUSH
21407: LD_EXP 62
21411: PUSH
21412: LD_VAR 0 2
21416: ARRAY
21417: PUSH
21418: LD_INT 1
21420: ARRAY
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: PPUSH
21426: LD_EXP 62
21430: PUSH
21431: LD_VAR 0 2
21435: ARRAY
21436: PUSH
21437: LD_INT 1
21439: ARRAY
21440: PUSH
21441: LD_INT 2
21443: ARRAY
21444: PPUSH
21445: LD_EXP 62
21449: PUSH
21450: LD_VAR 0 2
21454: ARRAY
21455: PUSH
21456: LD_INT 1
21458: ARRAY
21459: PUSH
21460: LD_INT 3
21462: ARRAY
21463: PPUSH
21464: LD_EXP 62
21468: PUSH
21469: LD_VAR 0 2
21473: ARRAY
21474: PUSH
21475: LD_INT 1
21477: ARRAY
21478: PUSH
21479: LD_INT 4
21481: ARRAY
21482: PPUSH
21483: CALL 51833 0 5
21487: AND
21488: OR
21489: IFFALSE 21770
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21491: LD_ADDR_VAR 0 4
21495: PUSH
21496: LD_EXP 57
21500: PUSH
21501: LD_VAR 0 2
21505: ARRAY
21506: PPUSH
21507: LD_INT 25
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PPUSH
21517: CALL_OW 72
21521: PUSH
21522: LD_EXP 59
21526: PUSH
21527: LD_VAR 0 2
21531: ARRAY
21532: DIFF
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 4
21538: NOT
21539: IFFALSE 21543
// continue ;
21541: GO 20962
// for j in tmp do
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_VAR 0 4
21552: PUSH
21553: FOR_IN
21554: IFFALSE 21766
// begin if not mc_builders [ i ] then
21556: LD_EXP 63
21560: PUSH
21561: LD_VAR 0 2
21565: ARRAY
21566: NOT
21567: IFFALSE 21625
// begin SetTag ( j , 103 ) ;
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_INT 103
21576: PPUSH
21577: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21581: LD_ADDR_EXP 63
21585: PUSH
21586: LD_EXP 63
21590: PPUSH
21591: LD_VAR 0 2
21595: PUSH
21596: LD_EXP 63
21600: PUSH
21601: LD_VAR 0 2
21605: ARRAY
21606: PUSH
21607: LD_INT 1
21609: PLUS
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PPUSH
21615: LD_VAR 0 3
21619: PPUSH
21620: CALL 45045 0 3
21624: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21625: LD_VAR 0 3
21629: PPUSH
21630: CALL_OW 310
21634: IFFALSE 21645
// ComExitBuilding ( j ) ;
21636: LD_VAR 0 3
21640: PPUSH
21641: CALL_OW 122
// wait ( 3 ) ;
21645: LD_INT 3
21647: PPUSH
21648: CALL_OW 67
// if not mc_build_list [ i ] then
21652: LD_EXP 62
21656: PUSH
21657: LD_VAR 0 2
21661: ARRAY
21662: NOT
21663: IFFALSE 21667
// break ;
21665: GO 21766
// if not HasTask ( j ) then
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 314
21676: NOT
21677: IFFALSE 21764
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
21679: LD_VAR 0 3
21683: PPUSH
21684: LD_EXP 62
21688: PUSH
21689: LD_VAR 0 2
21693: ARRAY
21694: PUSH
21695: LD_INT 1
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: ARRAY
21702: PPUSH
21703: LD_EXP 62
21707: PUSH
21708: LD_VAR 0 2
21712: ARRAY
21713: PUSH
21714: LD_INT 1
21716: ARRAY
21717: PUSH
21718: LD_INT 2
21720: ARRAY
21721: PPUSH
21722: LD_EXP 62
21726: PUSH
21727: LD_VAR 0 2
21731: ARRAY
21732: PUSH
21733: LD_INT 1
21735: ARRAY
21736: PUSH
21737: LD_INT 3
21739: ARRAY
21740: PPUSH
21741: LD_EXP 62
21745: PUSH
21746: LD_VAR 0 2
21750: ARRAY
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PUSH
21756: LD_INT 4
21758: ARRAY
21759: PPUSH
21760: CALL_OW 145
// end ;
21764: GO 21553
21766: POP
21767: POP
// end else
21768: GO 21912
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21770: LD_EXP 57
21774: PUSH
21775: LD_VAR 0 2
21779: ARRAY
21780: PPUSH
21781: LD_EXP 62
21785: PUSH
21786: LD_VAR 0 2
21790: ARRAY
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PUSH
21796: LD_INT 1
21798: ARRAY
21799: PPUSH
21800: LD_EXP 62
21804: PUSH
21805: LD_VAR 0 2
21809: ARRAY
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PUSH
21815: LD_INT 2
21817: ARRAY
21818: PPUSH
21819: LD_EXP 62
21823: PUSH
21824: LD_VAR 0 2
21828: ARRAY
21829: PUSH
21830: LD_INT 1
21832: ARRAY
21833: PUSH
21834: LD_INT 3
21836: ARRAY
21837: PPUSH
21838: LD_EXP 62
21842: PUSH
21843: LD_VAR 0 2
21847: ARRAY
21848: PUSH
21849: LD_INT 1
21851: ARRAY
21852: PUSH
21853: LD_INT 4
21855: ARRAY
21856: PPUSH
21857: CALL 51264 0 5
21861: NOT
21862: IFFALSE 21912
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
21864: LD_ADDR_EXP 62
21868: PUSH
21869: LD_EXP 62
21873: PPUSH
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_EXP 62
21883: PUSH
21884: LD_VAR 0 2
21888: ARRAY
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: LD_INT 1
21895: NEG
21896: PPUSH
21897: LD_INT 0
21899: PPUSH
21900: CALL 44028 0 4
21904: PPUSH
21905: CALL_OW 1
21909: ST_TO_ADDR
// continue ;
21910: GO 20962
// end ; end ; end ;
21912: GO 20962
21914: POP
21915: POP
// end ;
21916: LD_VAR 0 1
21920: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
21921: LD_INT 0
21923: PPUSH
21924: PPUSH
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
// if not mc_bases then
21929: LD_EXP 57
21933: NOT
21934: IFFALSE 21938
// exit ;
21936: GO 22365
// for i = 1 to mc_bases do
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: DOUBLE
21944: LD_INT 1
21946: DEC
21947: ST_TO_ADDR
21948: LD_EXP 57
21952: PUSH
21953: FOR_TO
21954: IFFALSE 22363
// begin tmp := mc_build_upgrade [ i ] ;
21956: LD_ADDR_VAR 0 4
21960: PUSH
21961: LD_EXP 89
21965: PUSH
21966: LD_VAR 0 2
21970: ARRAY
21971: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
21972: LD_ADDR_VAR 0 6
21976: PUSH
21977: LD_EXP 90
21981: PUSH
21982: LD_VAR 0 2
21986: ARRAY
21987: PPUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 6
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 30
22003: PUSH
22004: LD_INT 7
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: PPUSH
22016: CALL_OW 72
22020: ST_TO_ADDR
// if not tmp and not lab then
22021: LD_VAR 0 4
22025: NOT
22026: PUSH
22027: LD_VAR 0 6
22031: NOT
22032: AND
22033: IFFALSE 22037
// continue ;
22035: GO 21953
// if tmp then
22037: LD_VAR 0 4
22041: IFFALSE 22161
// for j in tmp do
22043: LD_ADDR_VAR 0 3
22047: PUSH
22048: LD_VAR 0 4
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22159
// begin if UpgradeCost ( j ) then
22056: LD_VAR 0 3
22060: PPUSH
22061: CALL 50924 0 1
22065: IFFALSE 22157
// begin ComUpgrade ( j ) ;
22067: LD_VAR 0 3
22071: PPUSH
22072: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
22076: LD_ADDR_EXP 89
22080: PUSH
22081: LD_EXP 89
22085: PPUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_EXP 89
22095: PUSH
22096: LD_VAR 0 2
22100: ARRAY
22101: PUSH
22102: LD_VAR 0 3
22106: DIFF
22107: PPUSH
22108: CALL_OW 1
22112: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22113: LD_ADDR_EXP 64
22117: PUSH
22118: LD_EXP 64
22122: PPUSH
22123: LD_VAR 0 2
22127: PUSH
22128: LD_EXP 64
22132: PUSH
22133: LD_VAR 0 2
22137: ARRAY
22138: PUSH
22139: LD_INT 1
22141: PLUS
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: CALL 45045 0 3
22156: ST_TO_ADDR
// end ; end ;
22157: GO 22053
22159: POP
22160: POP
// if not lab or not mc_lab_upgrade [ i ] then
22161: LD_VAR 0 6
22165: NOT
22166: PUSH
22167: LD_EXP 91
22171: PUSH
22172: LD_VAR 0 2
22176: ARRAY
22177: NOT
22178: OR
22179: IFFALSE 22183
// continue ;
22181: GO 21953
// for j in lab do
22183: LD_ADDR_VAR 0 3
22187: PUSH
22188: LD_VAR 0 6
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22359
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
22196: LD_VAR 0 3
22200: PPUSH
22201: CALL_OW 266
22205: PUSH
22206: LD_INT 6
22208: PUSH
22209: LD_INT 7
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: IN
22216: PUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: CALL_OW 461
22226: PUSH
22227: LD_INT 1
22229: NONEQUAL
22230: AND
22231: IFFALSE 22357
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
22233: LD_VAR 0 3
22237: PPUSH
22238: LD_EXP 91
22242: PUSH
22243: LD_VAR 0 2
22247: ARRAY
22248: PUSH
22249: LD_INT 1
22251: ARRAY
22252: PPUSH
22253: CALL 51129 0 2
22257: IFFALSE 22357
// begin ComCancel ( j ) ;
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
22268: LD_VAR 0 3
22272: PPUSH
22273: LD_EXP 91
22277: PUSH
22278: LD_VAR 0 2
22282: ARRAY
22283: PUSH
22284: LD_INT 1
22286: ARRAY
22287: PPUSH
22288: CALL_OW 207
// if not j in mc_construct_list [ i ] then
22292: LD_VAR 0 3
22296: PUSH
22297: LD_EXP 64
22301: PUSH
22302: LD_VAR 0 2
22306: ARRAY
22307: IN
22308: NOT
22309: IFFALSE 22355
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22311: LD_ADDR_EXP 64
22315: PUSH
22316: LD_EXP 64
22320: PPUSH
22321: LD_VAR 0 2
22325: PUSH
22326: LD_EXP 64
22330: PUSH
22331: LD_VAR 0 2
22335: ARRAY
22336: PUSH
22337: LD_INT 1
22339: PLUS
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: CALL 45045 0 3
22354: ST_TO_ADDR
// break ;
22355: GO 22359
// end ; end ; end ;
22357: GO 22193
22359: POP
22360: POP
// end ;
22361: GO 21953
22363: POP
22364: POP
// end ;
22365: LD_VAR 0 1
22369: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
22370: LD_INT 0
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
22376: PPUSH
22377: PPUSH
22378: PPUSH
// if not mc_bases then
22379: LD_EXP 57
22383: NOT
22384: IFFALSE 22388
// exit ;
22386: GO 22717
// for i = 1 to mc_bases do
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: DOUBLE
22394: LD_INT 1
22396: DEC
22397: ST_TO_ADDR
22398: LD_EXP 57
22402: PUSH
22403: FOR_TO
22404: IFFALSE 22715
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
22406: LD_EXP 65
22410: PUSH
22411: LD_VAR 0 2
22415: ARRAY
22416: NOT
22417: PUSH
22418: LD_EXP 57
22422: PUSH
22423: LD_VAR 0 2
22427: ARRAY
22428: PPUSH
22429: LD_INT 30
22431: PUSH
22432: LD_INT 3
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 72
22443: NOT
22444: OR
22445: IFFALSE 22449
// continue ;
22447: GO 22403
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
22449: LD_EXP 65
22453: PUSH
22454: LD_VAR 0 2
22458: ARRAY
22459: PUSH
22460: LD_INT 1
22462: ARRAY
22463: PPUSH
22464: CALL_OW 269
22468: IFFALSE 22534
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
22470: LD_ADDR_VAR 0 4
22474: PUSH
22475: LD_EXP 65
22479: PUSH
22480: LD_VAR 0 2
22484: ARRAY
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 3
22493: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
22494: LD_ADDR_EXP 65
22498: PUSH
22499: LD_EXP 65
22503: PPUSH
22504: LD_VAR 0 2
22508: PPUSH
22509: LD_VAR 0 4
22513: PPUSH
22514: CALL_OW 1
22518: ST_TO_ADDR
// if not mc_turret_list [ i ] then
22519: LD_EXP 65
22523: PUSH
22524: LD_VAR 0 2
22528: ARRAY
22529: NOT
22530: IFFALSE 22534
// continue ;
22532: GO 22403
// end ; busy := false ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_INT 0
22541: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
22542: LD_ADDR_VAR 0 4
22546: PUSH
22547: LD_EXP 57
22551: PUSH
22552: LD_VAR 0 2
22556: ARRAY
22557: PPUSH
22558: LD_INT 30
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 72
22572: ST_TO_ADDR
// for j in tmp do
22573: LD_ADDR_VAR 0 3
22577: PUSH
22578: LD_VAR 0 4
22582: PUSH
22583: FOR_IN
22584: IFFALSE 22612
// if not BuildingStatus ( j ) = bs_idle then
22586: LD_VAR 0 3
22590: PPUSH
22591: CALL_OW 461
22595: PUSH
22596: LD_INT 2
22598: EQUAL
22599: NOT
22600: IFFALSE 22610
// busy := true ;
22602: LD_ADDR_VAR 0 6
22606: PUSH
22607: LD_INT 1
22609: ST_TO_ADDR
22610: GO 22583
22612: POP
22613: POP
// if busy then
22614: LD_VAR 0 6
22618: IFFALSE 22622
// continue ;
22620: GO 22403
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
22622: LD_ADDR_VAR 0 7
22626: PUSH
22627: LD_EXP 65
22631: PUSH
22632: LD_VAR 0 2
22636: ARRAY
22637: PUSH
22638: LD_INT 1
22640: ARRAY
22641: PPUSH
22642: CALL 49488 0 1
22646: ST_TO_ADDR
// if not weapon then
22647: LD_VAR 0 7
22651: NOT
22652: IFFALSE 22656
// continue ;
22654: GO 22403
// if mc_allowed_tower_weapons [ i ] then
22656: LD_EXP 95
22660: PUSH
22661: LD_VAR 0 2
22665: ARRAY
22666: IFFALSE 22689
// if not weapon in mc_allowed_tower_weapons [ i ] then
22668: LD_VAR 0 7
22672: PUSH
22673: LD_EXP 95
22677: PUSH
22678: LD_VAR 0 2
22682: ARRAY
22683: IN
22684: NOT
22685: IFFALSE 22689
// continue ;
22687: GO 22403
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
22689: LD_EXP 65
22693: PUSH
22694: LD_VAR 0 2
22698: ARRAY
22699: PUSH
22700: LD_INT 1
22702: ARRAY
22703: PPUSH
22704: LD_VAR 0 7
22708: PPUSH
22709: CALL_OW 148
// end ;
22713: GO 22403
22715: POP
22716: POP
// end ;
22717: LD_VAR 0 1
22721: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
22722: LD_INT 0
22724: PPUSH
22725: PPUSH
22726: PPUSH
22727: PPUSH
22728: PPUSH
22729: PPUSH
// if not mc_bases then
22730: LD_EXP 57
22734: NOT
22735: IFFALSE 22739
// exit ;
22737: GO 23724
// for i = 1 to mc_bases do
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: DOUBLE
22745: LD_INT 1
22747: DEC
22748: ST_TO_ADDR
22749: LD_EXP 57
22753: PUSH
22754: FOR_TO
22755: IFFALSE 23722
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
22757: LD_EXP 70
22761: PUSH
22762: LD_VAR 0 2
22766: ARRAY
22767: NOT
22768: PUSH
22769: LD_EXP 70
22773: PUSH
22774: LD_VAR 0 2
22778: ARRAY
22779: PUSH
22780: LD_EXP 71
22784: PUSH
22785: LD_VAR 0 2
22789: ARRAY
22790: EQUAL
22791: OR
22792: IFFALSE 22796
// continue ;
22794: GO 22754
// if mc_miners [ i ] then
22796: LD_EXP 71
22800: PUSH
22801: LD_VAR 0 2
22805: ARRAY
22806: IFFALSE 23409
// begin k := 1 ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_INT 1
22815: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: DOUBLE
22822: LD_EXP 71
22826: PUSH
22827: LD_VAR 0 2
22831: ARRAY
22832: INC
22833: ST_TO_ADDR
22834: LD_INT 1
22836: PUSH
22837: FOR_DOWNTO
22838: IFFALSE 23407
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
22840: LD_EXP 71
22844: PUSH
22845: LD_VAR 0 2
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 3
22855: ARRAY
22856: PPUSH
22857: CALL_OW 301
22861: IFFALSE 22924
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
22863: LD_ADDR_VAR 0 5
22867: PUSH
22868: LD_EXP 71
22872: PUSH
22873: LD_VAR 0 2
22877: ARRAY
22878: PUSH
22879: LD_EXP 71
22883: PUSH
22884: LD_VAR 0 2
22888: ARRAY
22889: PUSH
22890: LD_VAR 0 3
22894: ARRAY
22895: DIFF
22896: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
22897: LD_ADDR_EXP 71
22901: PUSH
22902: LD_EXP 71
22906: PPUSH
22907: LD_VAR 0 2
22911: PPUSH
22912: LD_VAR 0 5
22916: PPUSH
22917: CALL_OW 1
22921: ST_TO_ADDR
// continue ;
22922: GO 22837
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
22924: LD_EXP 71
22928: PUSH
22929: LD_VAR 0 2
22933: ARRAY
22934: PUSH
22935: LD_VAR 0 3
22939: ARRAY
22940: PPUSH
22941: CALL 44546 0 1
22945: PUSH
22946: LD_EXP 71
22950: PUSH
22951: LD_VAR 0 2
22955: ARRAY
22956: PUSH
22957: LD_VAR 0 3
22961: ARRAY
22962: PPUSH
22963: CALL_OW 255
22967: PPUSH
22968: LD_EXP 70
22972: PUSH
22973: LD_VAR 0 2
22977: ARRAY
22978: PUSH
22979: LD_VAR 0 4
22983: ARRAY
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: PPUSH
22989: LD_EXP 70
22993: PUSH
22994: LD_VAR 0 2
22998: ARRAY
22999: PUSH
23000: LD_VAR 0 4
23004: ARRAY
23005: PUSH
23006: LD_INT 2
23008: ARRAY
23009: PPUSH
23010: LD_INT 15
23012: PPUSH
23013: CALL 45539 0 4
23017: PUSH
23018: LD_INT 4
23020: ARRAY
23021: PUSH
23022: LD_EXP 71
23026: PUSH
23027: LD_VAR 0 2
23031: ARRAY
23032: PUSH
23033: LD_VAR 0 3
23037: ARRAY
23038: PPUSH
23039: LD_INT 10
23041: PPUSH
23042: CALL 47236 0 2
23046: PUSH
23047: LD_INT 4
23049: ARRAY
23050: OR
23051: AND
23052: IFFALSE 23075
// ComStop ( mc_miners [ i ] [ j ] ) ;
23054: LD_EXP 71
23058: PUSH
23059: LD_VAR 0 2
23063: ARRAY
23064: PUSH
23065: LD_VAR 0 3
23069: ARRAY
23070: PPUSH
23071: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
23075: LD_EXP 71
23079: PUSH
23080: LD_VAR 0 2
23084: ARRAY
23085: PUSH
23086: LD_VAR 0 3
23090: ARRAY
23091: PPUSH
23092: CALL_OW 257
23096: PUSH
23097: LD_INT 1
23099: EQUAL
23100: PUSH
23101: LD_EXP 71
23105: PUSH
23106: LD_VAR 0 2
23110: ARRAY
23111: PUSH
23112: LD_VAR 0 3
23116: ARRAY
23117: PPUSH
23118: CALL_OW 459
23122: NOT
23123: AND
23124: PUSH
23125: LD_EXP 71
23129: PUSH
23130: LD_VAR 0 2
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 3
23140: ARRAY
23141: PPUSH
23142: CALL_OW 255
23146: PPUSH
23147: LD_EXP 70
23151: PUSH
23152: LD_VAR 0 2
23156: ARRAY
23157: PUSH
23158: LD_VAR 0 4
23162: ARRAY
23163: PUSH
23164: LD_INT 1
23166: ARRAY
23167: PPUSH
23168: LD_EXP 70
23172: PUSH
23173: LD_VAR 0 2
23177: ARRAY
23178: PUSH
23179: LD_VAR 0 4
23183: ARRAY
23184: PUSH
23185: LD_INT 2
23187: ARRAY
23188: PPUSH
23189: LD_INT 15
23191: PPUSH
23192: CALL 45539 0 4
23196: PUSH
23197: LD_INT 4
23199: ARRAY
23200: PUSH
23201: LD_INT 0
23203: EQUAL
23204: AND
23205: PUSH
23206: LD_EXP 71
23210: PUSH
23211: LD_VAR 0 2
23215: ARRAY
23216: PUSH
23217: LD_VAR 0 3
23221: ARRAY
23222: PPUSH
23223: CALL_OW 314
23227: NOT
23228: AND
23229: IFFALSE 23405
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
23231: LD_EXP 71
23235: PUSH
23236: LD_VAR 0 2
23240: ARRAY
23241: PUSH
23242: LD_VAR 0 3
23246: ARRAY
23247: PPUSH
23248: CALL_OW 310
23252: IFFALSE 23275
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
23254: LD_EXP 71
23258: PUSH
23259: LD_VAR 0 2
23263: ARRAY
23264: PUSH
23265: LD_VAR 0 3
23269: ARRAY
23270: PPUSH
23271: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
23275: LD_EXP 71
23279: PUSH
23280: LD_VAR 0 2
23284: ARRAY
23285: PUSH
23286: LD_VAR 0 3
23290: ARRAY
23291: PPUSH
23292: CALL_OW 314
23296: NOT
23297: IFFALSE 23365
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
23299: LD_EXP 71
23303: PUSH
23304: LD_VAR 0 2
23308: ARRAY
23309: PUSH
23310: LD_VAR 0 3
23314: ARRAY
23315: PPUSH
23316: LD_EXP 70
23320: PUSH
23321: LD_VAR 0 2
23325: ARRAY
23326: PUSH
23327: LD_VAR 0 4
23331: ARRAY
23332: PUSH
23333: LD_INT 1
23335: ARRAY
23336: PPUSH
23337: LD_EXP 70
23341: PUSH
23342: LD_VAR 0 2
23346: ARRAY
23347: PUSH
23348: LD_VAR 0 4
23352: ARRAY
23353: PUSH
23354: LD_INT 2
23356: ARRAY
23357: PPUSH
23358: LD_INT 0
23360: PPUSH
23361: CALL_OW 193
// k := k + 1 ;
23365: LD_ADDR_VAR 0 4
23369: PUSH
23370: LD_VAR 0 4
23374: PUSH
23375: LD_INT 1
23377: PLUS
23378: ST_TO_ADDR
// if k > mc_mines [ i ] then
23379: LD_VAR 0 4
23383: PUSH
23384: LD_EXP 70
23388: PUSH
23389: LD_VAR 0 2
23393: ARRAY
23394: GREATER
23395: IFFALSE 23405
// k := 1 ;
23397: LD_ADDR_VAR 0 4
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// end ; end ;
23405: GO 22837
23407: POP
23408: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
23409: LD_ADDR_VAR 0 5
23413: PUSH
23414: LD_EXP 57
23418: PUSH
23419: LD_VAR 0 2
23423: ARRAY
23424: PPUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 30
23430: PUSH
23431: LD_INT 4
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 30
23440: PUSH
23441: LD_INT 5
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 30
23450: PUSH
23451: LD_INT 32
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: PPUSH
23464: CALL_OW 72
23468: ST_TO_ADDR
// if not tmp then
23469: LD_VAR 0 5
23473: NOT
23474: IFFALSE 23478
// continue ;
23476: GO 22754
// list := [ ] ;
23478: LD_ADDR_VAR 0 6
23482: PUSH
23483: EMPTY
23484: ST_TO_ADDR
// for j in tmp do
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_VAR 0 5
23494: PUSH
23495: FOR_IN
23496: IFFALSE 23565
// begin for k in UnitsInside ( j ) do
23498: LD_ADDR_VAR 0 4
23502: PUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: CALL_OW 313
23512: PUSH
23513: FOR_IN
23514: IFFALSE 23561
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
23516: LD_VAR 0 4
23520: PPUSH
23521: CALL_OW 257
23525: PUSH
23526: LD_INT 1
23528: EQUAL
23529: PUSH
23530: LD_VAR 0 4
23534: PPUSH
23535: CALL_OW 459
23539: NOT
23540: AND
23541: IFFALSE 23559
// list := list ^ k ;
23543: LD_ADDR_VAR 0 6
23547: PUSH
23548: LD_VAR 0 6
23552: PUSH
23553: LD_VAR 0 4
23557: ADD
23558: ST_TO_ADDR
23559: GO 23513
23561: POP
23562: POP
// end ;
23563: GO 23495
23565: POP
23566: POP
// list := list diff mc_miners [ i ] ;
23567: LD_ADDR_VAR 0 6
23571: PUSH
23572: LD_VAR 0 6
23576: PUSH
23577: LD_EXP 71
23581: PUSH
23582: LD_VAR 0 2
23586: ARRAY
23587: DIFF
23588: ST_TO_ADDR
// if not list then
23589: LD_VAR 0 6
23593: NOT
23594: IFFALSE 23598
// continue ;
23596: GO 22754
// k := mc_mines [ i ] - mc_miners [ i ] ;
23598: LD_ADDR_VAR 0 4
23602: PUSH
23603: LD_EXP 70
23607: PUSH
23608: LD_VAR 0 2
23612: ARRAY
23613: PUSH
23614: LD_EXP 71
23618: PUSH
23619: LD_VAR 0 2
23623: ARRAY
23624: MINUS
23625: ST_TO_ADDR
// if k > list then
23626: LD_VAR 0 4
23630: PUSH
23631: LD_VAR 0 6
23635: GREATER
23636: IFFALSE 23648
// k := list ;
23638: LD_ADDR_VAR 0 4
23642: PUSH
23643: LD_VAR 0 6
23647: ST_TO_ADDR
// for j = 1 to k do
23648: LD_ADDR_VAR 0 3
23652: PUSH
23653: DOUBLE
23654: LD_INT 1
23656: DEC
23657: ST_TO_ADDR
23658: LD_VAR 0 4
23662: PUSH
23663: FOR_TO
23664: IFFALSE 23718
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
23666: LD_ADDR_EXP 71
23670: PUSH
23671: LD_EXP 71
23675: PPUSH
23676: LD_VAR 0 2
23680: PUSH
23681: LD_EXP 71
23685: PUSH
23686: LD_VAR 0 2
23690: ARRAY
23691: PUSH
23692: LD_INT 1
23694: PLUS
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PPUSH
23700: LD_VAR 0 6
23704: PUSH
23705: LD_VAR 0 3
23709: ARRAY
23710: PPUSH
23711: CALL 45045 0 3
23715: ST_TO_ADDR
23716: GO 23663
23718: POP
23719: POP
// end ;
23720: GO 22754
23722: POP
23723: POP
// end ;
23724: LD_VAR 0 1
23728: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
23729: LD_INT 0
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
// if not mc_bases then
23740: LD_EXP 57
23744: NOT
23745: IFFALSE 23749
// exit ;
23747: GO 25228
// for i = 1 to mc_bases do
23749: LD_ADDR_VAR 0 2
23753: PUSH
23754: DOUBLE
23755: LD_INT 1
23757: DEC
23758: ST_TO_ADDR
23759: LD_EXP 57
23763: PUSH
23764: FOR_TO
23765: IFFALSE 25226
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
23767: LD_EXP 57
23771: PUSH
23772: LD_VAR 0 2
23776: ARRAY
23777: NOT
23778: PUSH
23779: LD_EXP 64
23783: PUSH
23784: LD_VAR 0 2
23788: ARRAY
23789: OR
23790: IFFALSE 23794
// continue ;
23792: GO 23764
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
23794: LD_EXP 73
23798: PUSH
23799: LD_VAR 0 2
23803: ARRAY
23804: NOT
23805: PUSH
23806: LD_EXP 74
23810: PUSH
23811: LD_VAR 0 2
23815: ARRAY
23816: AND
23817: IFFALSE 23855
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23819: LD_ADDR_EXP 74
23823: PUSH
23824: LD_EXP 74
23828: PPUSH
23829: LD_VAR 0 2
23833: PPUSH
23834: EMPTY
23835: PPUSH
23836: CALL_OW 1
23840: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_INT 107
23848: PPUSH
23849: CALL 19325 0 2
// continue ;
23853: GO 23764
// end ; target := [ ] ;
23855: LD_ADDR_VAR 0 5
23859: PUSH
23860: EMPTY
23861: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
23862: LD_ADDR_VAR 0 3
23866: PUSH
23867: DOUBLE
23868: LD_EXP 73
23872: PUSH
23873: LD_VAR 0 2
23877: ARRAY
23878: INC
23879: ST_TO_ADDR
23880: LD_INT 1
23882: PUSH
23883: FOR_DOWNTO
23884: IFFALSE 24144
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
23886: LD_EXP 73
23890: PUSH
23891: LD_VAR 0 2
23895: ARRAY
23896: PUSH
23897: LD_VAR 0 3
23901: ARRAY
23902: PUSH
23903: LD_INT 2
23905: ARRAY
23906: PPUSH
23907: LD_EXP 73
23911: PUSH
23912: LD_VAR 0 2
23916: ARRAY
23917: PUSH
23918: LD_VAR 0 3
23922: ARRAY
23923: PUSH
23924: LD_INT 3
23926: ARRAY
23927: PPUSH
23928: CALL_OW 488
23932: PUSH
23933: LD_EXP 73
23937: PUSH
23938: LD_VAR 0 2
23942: ARRAY
23943: PUSH
23944: LD_VAR 0 3
23948: ARRAY
23949: PUSH
23950: LD_INT 2
23952: ARRAY
23953: PPUSH
23954: LD_EXP 73
23958: PUSH
23959: LD_VAR 0 2
23963: ARRAY
23964: PUSH
23965: LD_VAR 0 3
23969: ARRAY
23970: PUSH
23971: LD_INT 3
23973: ARRAY
23974: PPUSH
23975: CALL_OW 284
23979: PUSH
23980: LD_INT 0
23982: EQUAL
23983: AND
23984: IFFALSE 24039
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
23986: LD_ADDR_VAR 0 4
23990: PUSH
23991: LD_EXP 73
23995: PUSH
23996: LD_VAR 0 2
24000: ARRAY
24001: PPUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: CALL_OW 3
24011: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
24012: LD_ADDR_EXP 73
24016: PUSH
24017: LD_EXP 73
24021: PPUSH
24022: LD_VAR 0 2
24026: PPUSH
24027: LD_VAR 0 4
24031: PPUSH
24032: CALL_OW 1
24036: ST_TO_ADDR
// continue ;
24037: GO 23883
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
24039: LD_EXP 57
24043: PUSH
24044: LD_VAR 0 2
24048: ARRAY
24049: PUSH
24050: LD_INT 1
24052: ARRAY
24053: PPUSH
24054: CALL_OW 255
24058: PPUSH
24059: LD_EXP 73
24063: PUSH
24064: LD_VAR 0 2
24068: ARRAY
24069: PUSH
24070: LD_VAR 0 3
24074: ARRAY
24075: PUSH
24076: LD_INT 2
24078: ARRAY
24079: PPUSH
24080: LD_EXP 73
24084: PUSH
24085: LD_VAR 0 2
24089: ARRAY
24090: PUSH
24091: LD_VAR 0 3
24095: ARRAY
24096: PUSH
24097: LD_INT 3
24099: ARRAY
24100: PPUSH
24101: LD_INT 20
24103: PPUSH
24104: CALL 45539 0 4
24108: PUSH
24109: LD_INT 4
24111: ARRAY
24112: PUSH
24113: LD_INT 0
24115: EQUAL
24116: IFFALSE 24142
// begin target := mc_crates [ i ] [ j ] ;
24118: LD_ADDR_VAR 0 5
24122: PUSH
24123: LD_EXP 73
24127: PUSH
24128: LD_VAR 0 2
24132: ARRAY
24133: PUSH
24134: LD_VAR 0 3
24138: ARRAY
24139: ST_TO_ADDR
// break ;
24140: GO 24144
// end ; end ;
24142: GO 23883
24144: POP
24145: POP
// if not target then
24146: LD_VAR 0 5
24150: NOT
24151: IFFALSE 24155
// continue ;
24153: GO 23764
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
24155: LD_ADDR_VAR 0 6
24159: PUSH
24160: LD_EXP 76
24164: PUSH
24165: LD_VAR 0 2
24169: ARRAY
24170: PPUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 58
24179: PUSH
24180: EMPTY
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 61
24189: PUSH
24190: EMPTY
24191: LIST
24192: PUSH
24193: LD_INT 33
24195: PUSH
24196: LD_INT 5
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 33
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 34
24225: PUSH
24226: LD_INT 32
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 34
24235: PUSH
24236: LD_INT 51
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 34
24245: PUSH
24246: LD_INT 12
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PPUSH
24263: CALL_OW 72
24267: ST_TO_ADDR
// if not cargo then
24268: LD_VAR 0 6
24272: NOT
24273: IFFALSE 24761
// begin if mc_crates_collector [ i ] < 5 then
24275: LD_EXP 74
24279: PUSH
24280: LD_VAR 0 2
24284: ARRAY
24285: PUSH
24286: LD_INT 5
24288: LESS
24289: IFFALSE 24575
// begin if mc_ape [ i ] then
24291: LD_EXP 86
24295: PUSH
24296: LD_VAR 0 2
24300: ARRAY
24301: IFFALSE 24348
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
24303: LD_ADDR_VAR 0 4
24307: PUSH
24308: LD_EXP 86
24312: PUSH
24313: LD_VAR 0 2
24317: ARRAY
24318: PPUSH
24319: LD_INT 25
24321: PUSH
24322: LD_INT 16
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 24
24331: PUSH
24332: LD_INT 750
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PPUSH
24343: CALL_OW 72
24347: ST_TO_ADDR
// if not tmp then
24348: LD_VAR 0 4
24352: NOT
24353: IFFALSE 24402
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
24355: LD_ADDR_VAR 0 4
24359: PUSH
24360: LD_EXP 57
24364: PUSH
24365: LD_VAR 0 2
24369: ARRAY
24370: PPUSH
24371: LD_INT 25
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 24
24383: PUSH
24384: LD_INT 750
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PPUSH
24395: CALL_OW 72
24399: ST_TO_ADDR
24400: GO 24463
// if tmp < 5 then
24402: LD_VAR 0 4
24406: PUSH
24407: LD_INT 5
24409: LESS
24410: IFFALSE 24463
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
24412: LD_ADDR_VAR 0 4
24416: PUSH
24417: LD_VAR 0 4
24421: PUSH
24422: LD_EXP 57
24426: PUSH
24427: LD_VAR 0 2
24431: ARRAY
24432: PPUSH
24433: LD_INT 25
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 24
24445: PUSH
24446: LD_INT 750
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PPUSH
24457: CALL_OW 72
24461: UNION
24462: ST_TO_ADDR
// if not tmp then
24463: LD_VAR 0 4
24467: NOT
24468: IFFALSE 24472
// continue ;
24470: GO 23764
// for j in tmp do
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_VAR 0 4
24481: PUSH
24482: FOR_IN
24483: IFFALSE 24573
// if not GetTag ( j ) then
24485: LD_VAR 0 3
24489: PPUSH
24490: CALL_OW 110
24494: NOT
24495: IFFALSE 24571
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
24497: LD_ADDR_EXP 74
24501: PUSH
24502: LD_EXP 74
24506: PPUSH
24507: LD_VAR 0 2
24511: PUSH
24512: LD_EXP 74
24516: PUSH
24517: LD_VAR 0 2
24521: ARRAY
24522: PUSH
24523: LD_INT 1
24525: PLUS
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PPUSH
24531: LD_VAR 0 3
24535: PPUSH
24536: CALL 45045 0 3
24540: ST_TO_ADDR
// SetTag ( j , 107 ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_INT 107
24548: PPUSH
24549: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
24553: LD_EXP 74
24557: PUSH
24558: LD_VAR 0 2
24562: ARRAY
24563: PUSH
24564: LD_INT 5
24566: GREATEREQUAL
24567: IFFALSE 24571
// break ;
24569: GO 24573
// end ;
24571: GO 24482
24573: POP
24574: POP
// end ; if mc_crates_collector [ i ] and target then
24575: LD_EXP 74
24579: PUSH
24580: LD_VAR 0 2
24584: ARRAY
24585: PUSH
24586: LD_VAR 0 5
24590: AND
24591: IFFALSE 24759
// begin if mc_crates_collector [ i ] < target [ 1 ] then
24593: LD_EXP 74
24597: PUSH
24598: LD_VAR 0 2
24602: ARRAY
24603: PUSH
24604: LD_VAR 0 5
24608: PUSH
24609: LD_INT 1
24611: ARRAY
24612: LESS
24613: IFFALSE 24633
// tmp := mc_crates_collector [ i ] else
24615: LD_ADDR_VAR 0 4
24619: PUSH
24620: LD_EXP 74
24624: PUSH
24625: LD_VAR 0 2
24629: ARRAY
24630: ST_TO_ADDR
24631: GO 24647
// tmp := target [ 1 ] ;
24633: LD_ADDR_VAR 0 4
24637: PUSH
24638: LD_VAR 0 5
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: ST_TO_ADDR
// for j = 1 to tmp do
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: DOUBLE
24653: LD_INT 1
24655: DEC
24656: ST_TO_ADDR
24657: LD_VAR 0 4
24661: PUSH
24662: FOR_TO
24663: IFFALSE 24757
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
24665: LD_EXP 74
24669: PUSH
24670: LD_VAR 0 2
24674: ARRAY
24675: PUSH
24676: LD_VAR 0 3
24680: ARRAY
24681: PPUSH
24682: CALL_OW 310
24686: IFFALSE 24709
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
24688: LD_EXP 74
24692: PUSH
24693: LD_VAR 0 2
24697: ARRAY
24698: PUSH
24699: LD_VAR 0 3
24703: ARRAY
24704: PPUSH
24705: CALL_OW 122
// wait ( 3 ) ;
24709: LD_INT 3
24711: PPUSH
24712: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
24716: LD_EXP 74
24720: PUSH
24721: LD_VAR 0 2
24725: ARRAY
24726: PUSH
24727: LD_VAR 0 3
24731: ARRAY
24732: PPUSH
24733: LD_VAR 0 5
24737: PUSH
24738: LD_INT 2
24740: ARRAY
24741: PPUSH
24742: LD_VAR 0 5
24746: PUSH
24747: LD_INT 3
24749: ARRAY
24750: PPUSH
24751: CALL_OW 117
// end ;
24755: GO 24662
24757: POP
24758: POP
// end ; end else
24759: GO 25224
// begin for j in cargo do
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_VAR 0 6
24770: PUSH
24771: FOR_IN
24772: IFFALSE 25222
// begin if GetTag ( j ) <> 0 then
24774: LD_VAR 0 3
24778: PPUSH
24779: CALL_OW 110
24783: PUSH
24784: LD_INT 0
24786: NONEQUAL
24787: IFFALSE 24791
// continue ;
24789: GO 24771
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
24791: LD_VAR 0 3
24795: PPUSH
24796: CALL_OW 262
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: PUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 261
24814: PUSH
24815: LD_INT 15
24817: LESS
24818: AND
24819: IFFALSE 24823
// continue ;
24821: GO 24771
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
24823: LD_VAR 0 3
24827: PPUSH
24828: CALL_OW 262
24832: PUSH
24833: LD_INT 1
24835: EQUAL
24836: PUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: CALL_OW 261
24846: PUSH
24847: LD_INT 10
24849: LESS
24850: AND
24851: IFFALSE 25161
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24853: LD_ADDR_VAR 0 7
24857: PUSH
24858: LD_EXP 57
24862: PUSH
24863: LD_VAR 0 2
24867: ARRAY
24868: PPUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 30
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 30
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 72
24901: ST_TO_ADDR
// if not depot then
24902: LD_VAR 0 7
24906: NOT
24907: IFFALSE 24911
// continue ;
24909: GO 24771
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
24911: LD_VAR 0 3
24915: PPUSH
24916: LD_VAR 0 7
24920: PPUSH
24921: LD_VAR 0 3
24925: PPUSH
24926: CALL_OW 74
24930: PPUSH
24931: CALL_OW 296
24935: PUSH
24936: LD_INT 6
24938: LESS
24939: IFFALSE 24955
// SetFuel ( j , 100 ) else
24941: LD_VAR 0 3
24945: PPUSH
24946: LD_INT 100
24948: PPUSH
24949: CALL_OW 240
24953: GO 25161
// if GetFuel ( j ) = 0 then
24955: LD_VAR 0 3
24959: PPUSH
24960: CALL_OW 261
24964: PUSH
24965: LD_INT 0
24967: EQUAL
24968: IFFALSE 25161
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
24970: LD_ADDR_EXP 76
24974: PUSH
24975: LD_EXP 76
24979: PPUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: LD_EXP 76
24989: PUSH
24990: LD_VAR 0 2
24994: ARRAY
24995: PUSH
24996: LD_VAR 0 3
25000: DIFF
25001: PPUSH
25002: CALL_OW 1
25006: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
25007: LD_VAR 0 3
25011: PPUSH
25012: CALL_OW 263
25016: PUSH
25017: LD_INT 1
25019: EQUAL
25020: IFFALSE 25036
// ComExitVehicle ( IsInUnit ( j ) ) ;
25022: LD_VAR 0 3
25026: PPUSH
25027: CALL_OW 310
25031: PPUSH
25032: CALL_OW 121
// if GetControl ( j ) = control_remote then
25036: LD_VAR 0 3
25040: PPUSH
25041: CALL_OW 263
25045: PUSH
25046: LD_INT 2
25048: EQUAL
25049: IFFALSE 25060
// ComUnlink ( j ) ;
25051: LD_VAR 0 3
25055: PPUSH
25056: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
25060: LD_ADDR_VAR 0 8
25064: PUSH
25065: LD_VAR 0 2
25069: PPUSH
25070: LD_INT 3
25072: PPUSH
25073: CALL 32857 0 2
25077: ST_TO_ADDR
// if fac then
25078: LD_VAR 0 8
25082: IFFALSE 25159
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
25084: LD_ADDR_VAR 0 9
25088: PUSH
25089: LD_VAR 0 8
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: CALL_OW 265
25103: PPUSH
25104: LD_VAR 0 3
25108: PPUSH
25109: CALL_OW 262
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 263
25123: PPUSH
25124: LD_VAR 0 3
25128: PPUSH
25129: CALL_OW 264
25133: PPUSH
25134: CALL 42210 0 5
25138: ST_TO_ADDR
// if components then
25139: LD_VAR 0 9
25143: IFFALSE 25159
// MC_InsertProduceList ( i , components ) ;
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_VAR 0 9
25154: PPUSH
25155: CALL 32424 0 2
// end ; continue ;
25159: GO 24771
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
25161: LD_VAR 0 3
25165: PPUSH
25166: LD_INT 1
25168: PPUSH
25169: CALL_OW 289
25173: PUSH
25174: LD_INT 100
25176: LESS
25177: PUSH
25178: LD_VAR 0 3
25182: PPUSH
25183: CALL_OW 314
25187: NOT
25188: AND
25189: IFFALSE 25218
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
25191: LD_VAR 0 3
25195: PPUSH
25196: LD_VAR 0 5
25200: PUSH
25201: LD_INT 2
25203: ARRAY
25204: PPUSH
25205: LD_VAR 0 5
25209: PUSH
25210: LD_INT 3
25212: ARRAY
25213: PPUSH
25214: CALL_OW 117
// break ;
25218: GO 25222
// end ;
25220: GO 24771
25222: POP
25223: POP
// end ; end ;
25224: GO 23764
25226: POP
25227: POP
// end ;
25228: LD_VAR 0 1
25232: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
25233: LD_INT 0
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
// if not mc_bases then
25239: LD_EXP 57
25243: NOT
25244: IFFALSE 25248
// exit ;
25246: GO 25409
// for i = 1 to mc_bases do
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: DOUBLE
25254: LD_INT 1
25256: DEC
25257: ST_TO_ADDR
25258: LD_EXP 57
25262: PUSH
25263: FOR_TO
25264: IFFALSE 25407
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
25266: LD_ADDR_VAR 0 4
25270: PUSH
25271: LD_EXP 76
25275: PUSH
25276: LD_VAR 0 2
25280: ARRAY
25281: PUSH
25282: LD_EXP 79
25286: PUSH
25287: LD_VAR 0 2
25291: ARRAY
25292: ADD
25293: PPUSH
25294: LD_INT 33
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PPUSH
25304: CALL_OW 72
25308: ST_TO_ADDR
// if tmp then
25309: LD_VAR 0 4
25313: IFFALSE 25405
// for j in tmp do
25315: LD_ADDR_VAR 0 3
25319: PUSH
25320: LD_VAR 0 4
25324: PUSH
25325: FOR_IN
25326: IFFALSE 25403
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
25328: LD_VAR 0 3
25332: PPUSH
25333: CALL_OW 312
25337: NOT
25338: PUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: CALL_OW 256
25348: PUSH
25349: LD_INT 250
25351: GREATEREQUAL
25352: AND
25353: IFFALSE 25366
// Connect ( j ) else
25355: LD_VAR 0 3
25359: PPUSH
25360: CALL 47563 0 1
25364: GO 25401
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
25366: LD_VAR 0 3
25370: PPUSH
25371: CALL_OW 256
25375: PUSH
25376: LD_INT 250
25378: LESS
25379: PUSH
25380: LD_VAR 0 3
25384: PPUSH
25385: CALL_OW 312
25389: AND
25390: IFFALSE 25401
// ComUnlink ( j ) ;
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 136
25401: GO 25325
25403: POP
25404: POP
// end ;
25405: GO 25263
25407: POP
25408: POP
// end ;
25409: LD_VAR 0 1
25413: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
25420: PPUSH
// if not mc_bases then
25421: LD_EXP 57
25425: NOT
25426: IFFALSE 25430
// exit ;
25428: GO 25890
// for i = 1 to mc_bases do
25430: LD_ADDR_VAR 0 2
25434: PUSH
25435: DOUBLE
25436: LD_INT 1
25438: DEC
25439: ST_TO_ADDR
25440: LD_EXP 57
25444: PUSH
25445: FOR_TO
25446: IFFALSE 25888
// begin if not mc_produce [ i ] then
25448: LD_EXP 78
25452: PUSH
25453: LD_VAR 0 2
25457: ARRAY
25458: NOT
25459: IFFALSE 25463
// continue ;
25461: GO 25445
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
25463: LD_ADDR_VAR 0 5
25467: PUSH
25468: LD_EXP 57
25472: PUSH
25473: LD_VAR 0 2
25477: ARRAY
25478: PPUSH
25479: LD_INT 30
25481: PUSH
25482: LD_INT 3
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PPUSH
25489: CALL_OW 72
25493: ST_TO_ADDR
// if not fac then
25494: LD_VAR 0 5
25498: NOT
25499: IFFALSE 25503
// continue ;
25501: GO 25445
// for j in fac do
25503: LD_ADDR_VAR 0 3
25507: PUSH
25508: LD_VAR 0 5
25512: PUSH
25513: FOR_IN
25514: IFFALSE 25884
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
25516: LD_VAR 0 3
25520: PPUSH
25521: CALL_OW 461
25525: PUSH
25526: LD_INT 2
25528: NONEQUAL
25529: PUSH
25530: LD_VAR 0 3
25534: PPUSH
25535: LD_INT 15
25537: PPUSH
25538: CALL 47236 0 2
25542: PUSH
25543: LD_INT 4
25545: ARRAY
25546: OR
25547: PUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: CALL_OW 313
25557: PUSH
25558: LD_INT 0
25560: EQUAL
25561: OR
25562: IFFALSE 25566
// continue ;
25564: GO 25513
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
25566: LD_VAR 0 3
25570: PPUSH
25571: LD_EXP 78
25575: PUSH
25576: LD_VAR 0 2
25580: ARRAY
25581: PUSH
25582: LD_INT 1
25584: ARRAY
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: LD_EXP 78
25594: PUSH
25595: LD_VAR 0 2
25599: ARRAY
25600: PUSH
25601: LD_INT 1
25603: ARRAY
25604: PUSH
25605: LD_INT 2
25607: ARRAY
25608: PPUSH
25609: LD_EXP 78
25613: PUSH
25614: LD_VAR 0 2
25618: ARRAY
25619: PUSH
25620: LD_INT 1
25622: ARRAY
25623: PUSH
25624: LD_INT 3
25626: ARRAY
25627: PPUSH
25628: LD_EXP 78
25632: PUSH
25633: LD_VAR 0 2
25637: ARRAY
25638: PUSH
25639: LD_INT 1
25641: ARRAY
25642: PUSH
25643: LD_INT 4
25645: ARRAY
25646: PPUSH
25647: CALL_OW 448
25651: PUSH
25652: LD_VAR 0 3
25656: PPUSH
25657: LD_EXP 78
25661: PUSH
25662: LD_VAR 0 2
25666: ARRAY
25667: PUSH
25668: LD_INT 1
25670: ARRAY
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PUSH
25676: LD_EXP 78
25680: PUSH
25681: LD_VAR 0 2
25685: ARRAY
25686: PUSH
25687: LD_INT 1
25689: ARRAY
25690: PUSH
25691: LD_INT 2
25693: ARRAY
25694: PUSH
25695: LD_EXP 78
25699: PUSH
25700: LD_VAR 0 2
25704: ARRAY
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: PUSH
25710: LD_INT 3
25712: ARRAY
25713: PUSH
25714: LD_EXP 78
25718: PUSH
25719: LD_VAR 0 2
25723: ARRAY
25724: PUSH
25725: LD_INT 1
25727: ARRAY
25728: PUSH
25729: LD_INT 4
25731: ARRAY
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: PPUSH
25739: CALL 50777 0 2
25743: AND
25744: IFFALSE 25882
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
25746: LD_VAR 0 3
25750: PPUSH
25751: LD_EXP 78
25755: PUSH
25756: LD_VAR 0 2
25760: ARRAY
25761: PUSH
25762: LD_INT 1
25764: ARRAY
25765: PUSH
25766: LD_INT 1
25768: ARRAY
25769: PPUSH
25770: LD_EXP 78
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: PUSH
25781: LD_INT 1
25783: ARRAY
25784: PUSH
25785: LD_INT 2
25787: ARRAY
25788: PPUSH
25789: LD_EXP 78
25793: PUSH
25794: LD_VAR 0 2
25798: ARRAY
25799: PUSH
25800: LD_INT 1
25802: ARRAY
25803: PUSH
25804: LD_INT 3
25806: ARRAY
25807: PPUSH
25808: LD_EXP 78
25812: PUSH
25813: LD_VAR 0 2
25817: ARRAY
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: PUSH
25823: LD_INT 4
25825: ARRAY
25826: PPUSH
25827: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
25831: LD_ADDR_VAR 0 4
25835: PUSH
25836: LD_EXP 78
25840: PUSH
25841: LD_VAR 0 2
25845: ARRAY
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: CALL_OW 3
25854: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
25855: LD_ADDR_EXP 78
25859: PUSH
25860: LD_EXP 78
25864: PPUSH
25865: LD_VAR 0 2
25869: PPUSH
25870: LD_VAR 0 4
25874: PPUSH
25875: CALL_OW 1
25879: ST_TO_ADDR
// break ;
25880: GO 25884
// end ; end ;
25882: GO 25513
25884: POP
25885: POP
// end ;
25886: GO 25445
25888: POP
25889: POP
// end ;
25890: LD_VAR 0 1
25894: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
25895: LD_INT 0
25897: PPUSH
25898: PPUSH
25899: PPUSH
// if not mc_bases then
25900: LD_EXP 57
25904: NOT
25905: IFFALSE 25909
// exit ;
25907: GO 25998
// for i = 1 to mc_bases do
25909: LD_ADDR_VAR 0 2
25913: PUSH
25914: DOUBLE
25915: LD_INT 1
25917: DEC
25918: ST_TO_ADDR
25919: LD_EXP 57
25923: PUSH
25924: FOR_TO
25925: IFFALSE 25996
// begin if mc_attack [ i ] then
25927: LD_EXP 77
25931: PUSH
25932: LD_VAR 0 2
25936: ARRAY
25937: IFFALSE 25994
// begin tmp := mc_attack [ i ] [ 1 ] ;
25939: LD_ADDR_VAR 0 3
25943: PUSH
25944: LD_EXP 77
25948: PUSH
25949: LD_VAR 0 2
25953: ARRAY
25954: PUSH
25955: LD_INT 1
25957: ARRAY
25958: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25959: LD_ADDR_EXP 77
25963: PUSH
25964: LD_EXP 77
25968: PPUSH
25969: LD_VAR 0 2
25973: PPUSH
25974: EMPTY
25975: PPUSH
25976: CALL_OW 1
25980: ST_TO_ADDR
// Attack ( tmp ) ;
25981: LD_VAR 0 3
25985: PPUSH
25986: CALL 72881 0 1
// exit ;
25990: POP
25991: POP
25992: GO 25998
// end ; end ;
25994: GO 25924
25996: POP
25997: POP
// end ;
25998: LD_VAR 0 1
26002: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
26003: LD_INT 0
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
// if not mc_bases then
26012: LD_EXP 57
26016: NOT
26017: IFFALSE 26021
// exit ;
26019: GO 26396
// for i = 1 to mc_bases do
26021: LD_ADDR_VAR 0 2
26025: PUSH
26026: DOUBLE
26027: LD_INT 1
26029: DEC
26030: ST_TO_ADDR
26031: LD_EXP 57
26035: PUSH
26036: FOR_TO
26037: IFFALSE 26394
// begin if not mc_bases [ i ] then
26039: LD_EXP 57
26043: PUSH
26044: LD_VAR 0 2
26048: ARRAY
26049: NOT
26050: IFFALSE 26054
// continue ;
26052: GO 26036
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
26054: LD_ADDR_VAR 0 7
26058: PUSH
26059: LD_EXP 57
26063: PUSH
26064: LD_VAR 0 2
26068: ARRAY
26069: PUSH
26070: LD_INT 1
26072: ARRAY
26073: PPUSH
26074: CALL 41514 0 1
26078: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
26079: LD_ADDR_EXP 80
26083: PUSH
26084: LD_EXP 80
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_EXP 57
26098: PUSH
26099: LD_VAR 0 2
26103: ARRAY
26104: PUSH
26105: LD_INT 1
26107: ARRAY
26108: PPUSH
26109: CALL_OW 255
26113: PPUSH
26114: LD_EXP 82
26118: PUSH
26119: LD_VAR 0 2
26123: ARRAY
26124: PPUSH
26125: CALL 39474 0 2
26129: PPUSH
26130: CALL_OW 1
26134: ST_TO_ADDR
// if not mc_scan [ i ] then
26135: LD_EXP 80
26139: PUSH
26140: LD_VAR 0 2
26144: ARRAY
26145: NOT
26146: IFFALSE 26301
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
26148: LD_ADDR_VAR 0 4
26152: PUSH
26153: LD_EXP 57
26157: PUSH
26158: LD_VAR 0 2
26162: ARRAY
26163: PPUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 25
26169: PUSH
26170: LD_INT 5
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 25
26179: PUSH
26180: LD_INT 8
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 25
26189: PUSH
26190: LD_INT 9
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: PPUSH
26203: CALL_OW 72
26207: ST_TO_ADDR
// if not tmp then
26208: LD_VAR 0 4
26212: NOT
26213: IFFALSE 26217
// continue ;
26215: GO 26036
// for j in tmp do
26217: LD_ADDR_VAR 0 3
26221: PUSH
26222: LD_VAR 0 4
26226: PUSH
26227: FOR_IN
26228: IFFALSE 26299
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
26230: LD_VAR 0 3
26234: PPUSH
26235: CALL_OW 310
26239: PPUSH
26240: CALL_OW 266
26244: PUSH
26245: LD_INT 5
26247: EQUAL
26248: PUSH
26249: LD_VAR 0 3
26253: PPUSH
26254: CALL_OW 257
26258: PUSH
26259: LD_INT 1
26261: EQUAL
26262: AND
26263: PUSH
26264: LD_VAR 0 3
26268: PPUSH
26269: CALL_OW 459
26273: NOT
26274: AND
26275: PUSH
26276: LD_VAR 0 7
26280: AND
26281: IFFALSE 26297
// ComChangeProfession ( j , class ) ;
26283: LD_VAR 0 3
26287: PPUSH
26288: LD_VAR 0 7
26292: PPUSH
26293: CALL_OW 123
26297: GO 26227
26299: POP
26300: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
26301: LD_EXP 80
26305: PUSH
26306: LD_VAR 0 2
26310: ARRAY
26311: PUSH
26312: LD_EXP 79
26316: PUSH
26317: LD_VAR 0 2
26321: ARRAY
26322: AND
26323: IFFALSE 26392
// begin tmp := mc_defender [ i ] ;
26325: LD_ADDR_VAR 0 4
26329: PUSH
26330: LD_EXP 79
26334: PUSH
26335: LD_VAR 0 2
26339: ARRAY
26340: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
26341: LD_ADDR_EXP 79
26345: PUSH
26346: LD_EXP 79
26350: PPUSH
26351: LD_VAR 0 2
26355: PPUSH
26356: EMPTY
26357: PPUSH
26358: CALL_OW 1
26362: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
26363: LD_VAR 0 2
26367: PPUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_EXP 80
26377: PUSH
26378: LD_VAR 0 2
26382: ARRAY
26383: PPUSH
26384: CALL 40007 0 3
// exit ;
26388: POP
26389: POP
26390: GO 26396
// end ; end ;
26392: GO 26036
26394: POP
26395: POP
// end ;
26396: LD_VAR 0 1
26400: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
26401: LD_INT 0
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
26407: PPUSH
26408: PPUSH
26409: PPUSH
26410: PPUSH
26411: PPUSH
// if not mc_bases then
26412: LD_EXP 57
26416: NOT
26417: IFFALSE 26421
// exit ;
26419: GO 27365
// for i = 1 to mc_bases do
26421: LD_ADDR_VAR 0 2
26425: PUSH
26426: DOUBLE
26427: LD_INT 1
26429: DEC
26430: ST_TO_ADDR
26431: LD_EXP 57
26435: PUSH
26436: FOR_TO
26437: IFFALSE 27363
// begin tmp := mc_lab [ i ] ;
26439: LD_ADDR_VAR 0 6
26443: PUSH
26444: LD_EXP 90
26448: PUSH
26449: LD_VAR 0 2
26453: ARRAY
26454: ST_TO_ADDR
// if not tmp then
26455: LD_VAR 0 6
26459: NOT
26460: IFFALSE 26464
// continue ;
26462: GO 26436
// for j in tmp do
26464: LD_ADDR_VAR 0 3
26468: PUSH
26469: LD_VAR 0 6
26473: PUSH
26474: FOR_IN
26475: IFFALSE 27359
// begin side := GetSide ( j ) ;
26477: LD_ADDR_VAR 0 4
26481: PUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 255
26491: ST_TO_ADDR
// if not mc_tech [ side ] then
26492: LD_EXP 84
26496: PUSH
26497: LD_VAR 0 4
26501: ARRAY
26502: NOT
26503: IFFALSE 26507
// continue ;
26505: GO 26474
// if BuildingStatus ( j ) = bs_idle then
26507: LD_VAR 0 3
26511: PPUSH
26512: CALL_OW 461
26516: PUSH
26517: LD_INT 2
26519: EQUAL
26520: IFFALSE 26593
// for t in mc_tech [ side ] do
26522: LD_ADDR_VAR 0 5
26526: PUSH
26527: LD_EXP 84
26531: PUSH
26532: LD_VAR 0 4
26536: ARRAY
26537: PUSH
26538: FOR_IN
26539: IFFALSE 26591
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
26541: LD_VAR 0 3
26545: PPUSH
26546: LD_VAR 0 5
26550: PPUSH
26551: CALL_OW 430
26555: PUSH
26556: LD_VAR 0 4
26560: PPUSH
26561: LD_VAR 0 5
26565: PPUSH
26566: CALL 38579 0 2
26570: AND
26571: IFFALSE 26589
// begin ComResearch ( j , t ) ;
26573: LD_VAR 0 3
26577: PPUSH
26578: LD_VAR 0 5
26582: PPUSH
26583: CALL_OW 124
// break ;
26587: GO 26591
// end ;
26589: GO 26538
26591: POP
26592: POP
// if BuildingStatus ( j ) = bs_need_ape then
26593: LD_VAR 0 3
26597: PPUSH
26598: CALL_OW 461
26602: PUSH
26603: LD_INT 10
26605: EQUAL
26606: IFFALSE 27194
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
26608: LD_EXP 86
26612: PUSH
26613: LD_VAR 0 2
26617: ARRAY
26618: NOT
26619: PUSH
26620: LD_EXP 87
26624: PUSH
26625: LD_VAR 0 2
26629: ARRAY
26630: NOT
26631: AND
26632: PUSH
26633: LD_EXP 84
26637: PUSH
26638: LD_VAR 0 4
26642: ARRAY
26643: PUSH
26644: LD_INT 1
26646: GREATER
26647: AND
26648: IFFALSE 26779
// begin ComCancel ( j ) ;
26650: LD_VAR 0 3
26654: PPUSH
26655: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
26659: LD_ADDR_EXP 84
26663: PUSH
26664: LD_EXP 84
26668: PPUSH
26669: LD_VAR 0 4
26673: PPUSH
26674: LD_EXP 84
26678: PUSH
26679: LD_VAR 0 4
26683: ARRAY
26684: PPUSH
26685: LD_EXP 84
26689: PUSH
26690: LD_VAR 0 4
26694: ARRAY
26695: PUSH
26696: LD_INT 1
26698: MINUS
26699: PPUSH
26700: LD_EXP 84
26704: PUSH
26705: LD_VAR 0 4
26709: ARRAY
26710: PPUSH
26711: LD_INT 0
26713: PPUSH
26714: CALL 44028 0 4
26718: PPUSH
26719: CALL_OW 1
26723: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
26724: LD_ADDR_EXP 84
26728: PUSH
26729: LD_EXP 84
26733: PPUSH
26734: LD_VAR 0 4
26738: PPUSH
26739: LD_EXP 84
26743: PUSH
26744: LD_VAR 0 4
26748: ARRAY
26749: PPUSH
26750: LD_EXP 84
26754: PUSH
26755: LD_VAR 0 4
26759: ARRAY
26760: PPUSH
26761: LD_INT 1
26763: PPUSH
26764: LD_INT 0
26766: PPUSH
26767: CALL 44028 0 4
26771: PPUSH
26772: CALL_OW 1
26776: ST_TO_ADDR
// continue ;
26777: GO 26474
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
26779: LD_EXP 86
26783: PUSH
26784: LD_VAR 0 2
26788: ARRAY
26789: PUSH
26790: LD_EXP 87
26794: PUSH
26795: LD_VAR 0 2
26799: ARRAY
26800: NOT
26801: AND
26802: IFFALSE 26929
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
26804: LD_ADDR_EXP 87
26808: PUSH
26809: LD_EXP 87
26813: PPUSH
26814: LD_VAR 0 2
26818: PUSH
26819: LD_EXP 87
26823: PUSH
26824: LD_VAR 0 2
26828: ARRAY
26829: PUSH
26830: LD_INT 1
26832: PLUS
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PPUSH
26838: LD_EXP 86
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: PPUSH
26853: CALL 45045 0 3
26857: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
26858: LD_EXP 86
26862: PUSH
26863: LD_VAR 0 2
26867: ARRAY
26868: PUSH
26869: LD_INT 1
26871: ARRAY
26872: PPUSH
26873: LD_INT 112
26875: PPUSH
26876: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
26880: LD_ADDR_VAR 0 9
26884: PUSH
26885: LD_EXP 86
26889: PUSH
26890: LD_VAR 0 2
26894: ARRAY
26895: PPUSH
26896: LD_INT 1
26898: PPUSH
26899: CALL_OW 3
26903: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
26904: LD_ADDR_EXP 86
26908: PUSH
26909: LD_EXP 86
26913: PPUSH
26914: LD_VAR 0 2
26918: PPUSH
26919: LD_VAR 0 9
26923: PPUSH
26924: CALL_OW 1
26928: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
26929: LD_EXP 86
26933: PUSH
26934: LD_VAR 0 2
26938: ARRAY
26939: PUSH
26940: LD_EXP 87
26944: PUSH
26945: LD_VAR 0 2
26949: ARRAY
26950: AND
26951: PUSH
26952: LD_EXP 87
26956: PUSH
26957: LD_VAR 0 2
26961: ARRAY
26962: PUSH
26963: LD_INT 1
26965: ARRAY
26966: PPUSH
26967: CALL_OW 310
26971: NOT
26972: AND
26973: PUSH
26974: LD_VAR 0 3
26978: PPUSH
26979: CALL_OW 313
26983: PUSH
26984: LD_INT 6
26986: EQUAL
26987: AND
26988: IFFALSE 27044
// begin tmp2 := UnitsInside ( j ) ;
26990: LD_ADDR_VAR 0 9
26994: PUSH
26995: LD_VAR 0 3
26999: PPUSH
27000: CALL_OW 313
27004: ST_TO_ADDR
// if tmp2 = 6 then
27005: LD_VAR 0 9
27009: PUSH
27010: LD_INT 6
27012: EQUAL
27013: IFFALSE 27044
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
27015: LD_VAR 0 9
27019: PUSH
27020: LD_INT 1
27022: ARRAY
27023: PPUSH
27024: LD_INT 112
27026: PPUSH
27027: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
27031: LD_VAR 0 9
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
27044: LD_EXP 87
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: PUSH
27055: LD_EXP 87
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: PUSH
27066: LD_INT 1
27068: ARRAY
27069: PPUSH
27070: CALL_OW 314
27074: NOT
27075: AND
27076: PUSH
27077: LD_EXP 87
27081: PUSH
27082: LD_VAR 0 2
27086: ARRAY
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: PPUSH
27092: CALL_OW 310
27096: NOT
27097: AND
27098: IFFALSE 27124
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
27100: LD_EXP 87
27104: PUSH
27105: LD_VAR 0 2
27109: ARRAY
27110: PUSH
27111: LD_INT 1
27113: ARRAY
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
27124: LD_EXP 87
27128: PUSH
27129: LD_VAR 0 2
27133: ARRAY
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: CALL_OW 310
27143: PUSH
27144: LD_EXP 87
27148: PUSH
27149: LD_VAR 0 2
27153: ARRAY
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: PPUSH
27159: CALL_OW 310
27163: PPUSH
27164: CALL_OW 461
27168: PUSH
27169: LD_INT 3
27171: NONEQUAL
27172: AND
27173: IFFALSE 27194
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
27175: LD_EXP 87
27179: PUSH
27180: LD_VAR 0 2
27184: ARRAY
27185: PUSH
27186: LD_INT 1
27188: ARRAY
27189: PPUSH
27190: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 461
27203: PUSH
27204: LD_INT 6
27206: EQUAL
27207: PUSH
27208: LD_VAR 0 6
27212: PUSH
27213: LD_INT 1
27215: GREATER
27216: AND
27217: IFFALSE 27357
// begin sci := [ ] ;
27219: LD_ADDR_VAR 0 8
27223: PUSH
27224: EMPTY
27225: ST_TO_ADDR
// for x in tmp diff j do
27226: LD_ADDR_VAR 0 7
27230: PUSH
27231: LD_VAR 0 6
27235: PUSH
27236: LD_VAR 0 3
27240: DIFF
27241: PUSH
27242: FOR_IN
27243: IFFALSE 27283
// begin if BuildingStatus ( x ) = bs_idle then
27245: LD_VAR 0 7
27249: PPUSH
27250: CALL_OW 461
27254: PUSH
27255: LD_INT 2
27257: EQUAL
27258: IFFALSE 27281
// sci := sci ^ UnitsInside ( x ) ;
27260: LD_ADDR_VAR 0 8
27264: PUSH
27265: LD_VAR 0 8
27269: PUSH
27270: LD_VAR 0 7
27274: PPUSH
27275: CALL_OW 313
27279: ADD
27280: ST_TO_ADDR
// end ;
27281: GO 27242
27283: POP
27284: POP
// if not sci then
27285: LD_VAR 0 8
27289: NOT
27290: IFFALSE 27294
// continue ;
27292: GO 26474
// for x in sci do
27294: LD_ADDR_VAR 0 7
27298: PUSH
27299: LD_VAR 0 8
27303: PUSH
27304: FOR_IN
27305: IFFALSE 27355
// if IsInUnit ( x ) and not HasTask ( x ) then
27307: LD_VAR 0 7
27311: PPUSH
27312: CALL_OW 310
27316: PUSH
27317: LD_VAR 0 7
27321: PPUSH
27322: CALL_OW 314
27326: NOT
27327: AND
27328: IFFALSE 27353
// begin ComExitBuilding ( x ) ;
27330: LD_VAR 0 7
27334: PPUSH
27335: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
27339: LD_VAR 0 7
27343: PPUSH
27344: LD_VAR 0 3
27348: PPUSH
27349: CALL_OW 180
// end ;
27353: GO 27304
27355: POP
27356: POP
// end ; end ;
27357: GO 26474
27359: POP
27360: POP
// end ;
27361: GO 26436
27363: POP
27364: POP
// end ;
27365: LD_VAR 0 1
27369: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
27370: LD_INT 0
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
// if not mc_bases or not mc_parking then
27380: LD_EXP 57
27384: NOT
27385: PUSH
27386: LD_EXP 81
27390: NOT
27391: OR
27392: IFFALSE 27396
// exit ;
27394: GO 28054
// for i = 1 to mc_bases do
27396: LD_ADDR_VAR 0 2
27400: PUSH
27401: DOUBLE
27402: LD_INT 1
27404: DEC
27405: ST_TO_ADDR
27406: LD_EXP 57
27410: PUSH
27411: FOR_TO
27412: IFFALSE 28052
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
27414: LD_EXP 57
27418: PUSH
27419: LD_VAR 0 2
27423: ARRAY
27424: NOT
27425: PUSH
27426: LD_EXP 81
27430: PUSH
27431: LD_VAR 0 2
27435: ARRAY
27436: NOT
27437: OR
27438: IFFALSE 27442
// continue ;
27440: GO 27411
// if mc_scan [ i ] then
27442: LD_EXP 80
27446: PUSH
27447: LD_VAR 0 2
27451: ARRAY
27452: IFFALSE 27478
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27454: LD_ADDR_EXP 69
27458: PUSH
27459: LD_EXP 69
27463: PPUSH
27464: LD_VAR 0 2
27468: PPUSH
27469: EMPTY
27470: PPUSH
27471: CALL_OW 1
27475: ST_TO_ADDR
// continue ;
27476: GO 27411
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
27478: LD_ADDR_VAR 0 5
27482: PUSH
27483: LD_EXP 57
27487: PUSH
27488: LD_VAR 0 2
27492: ARRAY
27493: PUSH
27494: LD_INT 1
27496: ARRAY
27497: PPUSH
27498: CALL_OW 255
27502: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27503: LD_ADDR_VAR 0 6
27507: PUSH
27508: LD_EXP 57
27512: PUSH
27513: LD_VAR 0 2
27517: ARRAY
27518: PPUSH
27519: LD_INT 30
27521: PUSH
27522: LD_INT 3
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PPUSH
27529: CALL_OW 72
27533: ST_TO_ADDR
// if not fac then
27534: LD_VAR 0 6
27538: NOT
27539: IFFALSE 27590
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27541: LD_ADDR_VAR 0 6
27545: PUSH
27546: LD_EXP 57
27550: PUSH
27551: LD_VAR 0 2
27555: ARRAY
27556: PPUSH
27557: LD_INT 2
27559: PUSH
27560: LD_INT 30
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 30
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: PPUSH
27585: CALL_OW 72
27589: ST_TO_ADDR
// if not fac then
27590: LD_VAR 0 6
27594: NOT
27595: IFFALSE 27599
// continue ;
27597: GO 27411
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27599: LD_ADDR_VAR 0 7
27603: PUSH
27604: LD_EXP 81
27608: PUSH
27609: LD_VAR 0 2
27613: ARRAY
27614: PPUSH
27615: LD_INT 22
27617: PUSH
27618: LD_VAR 0 5
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 21
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 3
27639: PUSH
27640: LD_INT 24
27642: PUSH
27643: LD_INT 1000
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: PPUSH
27659: CALL_OW 70
27663: PUSH
27664: LD_INT 22
27666: PUSH
27667: LD_VAR 0 5
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 91
27678: PUSH
27679: LD_VAR 0 6
27683: PUSH
27684: LD_INT 1
27686: ARRAY
27687: PUSH
27688: LD_INT 25
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 21
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 3
27708: PUSH
27709: LD_INT 24
27711: PUSH
27712: LD_INT 1000
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: PPUSH
27729: CALL_OW 69
27733: UNION
27734: ST_TO_ADDR
// if not vehs then
27735: LD_VAR 0 7
27739: NOT
27740: IFFALSE 27766
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27742: LD_ADDR_EXP 69
27746: PUSH
27747: LD_EXP 69
27751: PPUSH
27752: LD_VAR 0 2
27756: PPUSH
27757: EMPTY
27758: PPUSH
27759: CALL_OW 1
27763: ST_TO_ADDR
// continue ;
27764: GO 27411
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27766: LD_ADDR_VAR 0 8
27770: PUSH
27771: LD_EXP 57
27775: PUSH
27776: LD_VAR 0 2
27780: ARRAY
27781: PPUSH
27782: LD_INT 30
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 72
27796: ST_TO_ADDR
// if tmp then
27797: LD_VAR 0 8
27801: IFFALSE 27904
// begin for j in tmp do
27803: LD_ADDR_VAR 0 3
27807: PUSH
27808: LD_VAR 0 8
27812: PUSH
27813: FOR_IN
27814: IFFALSE 27902
// for k in UnitsInside ( j ) do
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: LD_VAR 0 3
27825: PPUSH
27826: CALL_OW 313
27830: PUSH
27831: FOR_IN
27832: IFFALSE 27898
// if k then
27834: LD_VAR 0 4
27838: IFFALSE 27896
// if not k in mc_repair_vehicle [ i ] then
27840: LD_VAR 0 4
27844: PUSH
27845: LD_EXP 69
27849: PUSH
27850: LD_VAR 0 2
27854: ARRAY
27855: IN
27856: NOT
27857: IFFALSE 27896
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
27859: LD_ADDR_EXP 69
27863: PUSH
27864: LD_EXP 69
27868: PPUSH
27869: LD_VAR 0 2
27873: PPUSH
27874: LD_EXP 69
27878: PUSH
27879: LD_VAR 0 2
27883: ARRAY
27884: PUSH
27885: LD_VAR 0 4
27889: UNION
27890: PPUSH
27891: CALL_OW 1
27895: ST_TO_ADDR
27896: GO 27831
27898: POP
27899: POP
27900: GO 27813
27902: POP
27903: POP
// end ; if not mc_repair_vehicle [ i ] then
27904: LD_EXP 69
27908: PUSH
27909: LD_VAR 0 2
27913: ARRAY
27914: NOT
27915: IFFALSE 27919
// continue ;
27917: GO 27411
// for j in mc_repair_vehicle [ i ] do
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_EXP 69
27928: PUSH
27929: LD_VAR 0 2
27933: ARRAY
27934: PUSH
27935: FOR_IN
27936: IFFALSE 28048
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
27938: LD_VAR 0 3
27942: PPUSH
27943: CALL_OW 311
27947: NOT
27948: PUSH
27949: LD_VAR 0 3
27953: PUSH
27954: LD_EXP 60
27958: PUSH
27959: LD_VAR 0 2
27963: ARRAY
27964: PUSH
27965: LD_INT 1
27967: ARRAY
27968: IN
27969: NOT
27970: AND
27971: PUSH
27972: LD_VAR 0 3
27976: PUSH
27977: LD_EXP 60
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: PUSH
27988: LD_INT 2
27990: ARRAY
27991: IN
27992: NOT
27993: AND
27994: IFFALSE 28046
// begin if IsInUnit ( j ) then
27996: LD_VAR 0 3
28000: PPUSH
28001: CALL_OW 310
28005: IFFALSE 28016
// ComExitBuilding ( j ) ;
28007: LD_VAR 0 3
28011: PPUSH
28012: CALL_OW 122
// if not HasTask ( j ) then
28016: LD_VAR 0 3
28020: PPUSH
28021: CALL_OW 314
28025: NOT
28026: IFFALSE 28046
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
28028: LD_VAR 0 3
28032: PPUSH
28033: LD_VAR 0 7
28037: PUSH
28038: LD_INT 1
28040: ARRAY
28041: PPUSH
28042: CALL_OW 189
// end ; end ;
28046: GO 27935
28048: POP
28049: POP
// end ;
28050: GO 27411
28052: POP
28053: POP
// end ;
28054: LD_VAR 0 1
28058: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
28071: PPUSH
// if not mc_bases then
28072: LD_EXP 57
28076: NOT
28077: IFFALSE 28081
// exit ;
28079: GO 28817
// for i = 1 to mc_bases do
28081: LD_ADDR_VAR 0 2
28085: PUSH
28086: DOUBLE
28087: LD_INT 1
28089: DEC
28090: ST_TO_ADDR
28091: LD_EXP 57
28095: PUSH
28096: FOR_TO
28097: IFFALSE 28815
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
28099: LD_EXP 85
28103: PUSH
28104: LD_VAR 0 2
28108: ARRAY
28109: NOT
28110: PUSH
28111: LD_EXP 60
28115: PUSH
28116: LD_VAR 0 2
28120: ARRAY
28121: PUSH
28122: LD_INT 1
28124: ARRAY
28125: OR
28126: PUSH
28127: LD_EXP 60
28131: PUSH
28132: LD_VAR 0 2
28136: ARRAY
28137: PUSH
28138: LD_INT 2
28140: ARRAY
28141: OR
28142: PUSH
28143: LD_EXP 83
28147: PUSH
28148: LD_VAR 0 2
28152: ARRAY
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 325
28161: NOT
28162: OR
28163: PUSH
28164: LD_EXP 80
28168: PUSH
28169: LD_VAR 0 2
28173: ARRAY
28174: OR
28175: IFFALSE 28179
// continue ;
28177: GO 28096
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
28179: LD_ADDR_VAR 0 8
28183: PUSH
28184: LD_EXP 57
28188: PUSH
28189: LD_VAR 0 2
28193: ARRAY
28194: PPUSH
28195: LD_INT 25
28197: PUSH
28198: LD_INT 4
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 50
28207: PUSH
28208: EMPTY
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: LD_INT 60
28216: PUSH
28217: EMPTY
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: PPUSH
28229: CALL_OW 72
28233: PUSH
28234: LD_EXP 61
28238: PUSH
28239: LD_VAR 0 2
28243: ARRAY
28244: DIFF
28245: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28246: LD_ADDR_VAR 0 9
28250: PUSH
28251: LD_EXP 57
28255: PUSH
28256: LD_VAR 0 2
28260: ARRAY
28261: PPUSH
28262: LD_INT 2
28264: PUSH
28265: LD_INT 30
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 30
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 72
28294: ST_TO_ADDR
// if not tmp or not dep then
28295: LD_VAR 0 8
28299: NOT
28300: PUSH
28301: LD_VAR 0 9
28305: NOT
28306: OR
28307: IFFALSE 28311
// continue ;
28309: GO 28096
// side := GetSide ( tmp [ 1 ] ) ;
28311: LD_ADDR_VAR 0 11
28315: PUSH
28316: LD_VAR 0 8
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PPUSH
28325: CALL_OW 255
28329: ST_TO_ADDR
// dep := dep [ 1 ] ;
28330: LD_ADDR_VAR 0 9
28334: PUSH
28335: LD_VAR 0 9
28339: PUSH
28340: LD_INT 1
28342: ARRAY
28343: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
28344: LD_ADDR_VAR 0 7
28348: PUSH
28349: LD_EXP 85
28353: PUSH
28354: LD_VAR 0 2
28358: ARRAY
28359: PPUSH
28360: LD_INT 22
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 25
28372: PUSH
28373: LD_INT 12
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PPUSH
28384: CALL_OW 70
28388: PUSH
28389: LD_INT 22
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 25
28401: PUSH
28402: LD_INT 12
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 91
28411: PUSH
28412: LD_VAR 0 9
28416: PUSH
28417: LD_INT 20
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: UNION
28435: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
28436: LD_ADDR_VAR 0 10
28440: PUSH
28441: LD_EXP 85
28445: PUSH
28446: LD_VAR 0 2
28450: ARRAY
28451: PPUSH
28452: LD_INT 81
28454: PUSH
28455: LD_VAR 0 11
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 70
28468: ST_TO_ADDR
// if not apes or danger_at_area then
28469: LD_VAR 0 7
28473: NOT
28474: PUSH
28475: LD_VAR 0 10
28479: OR
28480: IFFALSE 28530
// begin if mc_taming [ i ] then
28482: LD_EXP 88
28486: PUSH
28487: LD_VAR 0 2
28491: ARRAY
28492: IFFALSE 28528
// begin MC_Reset ( i , 121 ) ;
28494: LD_VAR 0 2
28498: PPUSH
28499: LD_INT 121
28501: PPUSH
28502: CALL 19325 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
28506: LD_ADDR_EXP 88
28510: PUSH
28511: LD_EXP 88
28515: PPUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: EMPTY
28522: PPUSH
28523: CALL_OW 1
28527: ST_TO_ADDR
// end ; continue ;
28528: GO 28096
// end ; for j in tmp do
28530: LD_ADDR_VAR 0 3
28534: PUSH
28535: LD_VAR 0 8
28539: PUSH
28540: FOR_IN
28541: IFFALSE 28811
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
28543: LD_VAR 0 3
28547: PUSH
28548: LD_EXP 88
28552: PUSH
28553: LD_VAR 0 2
28557: ARRAY
28558: IN
28559: NOT
28560: PUSH
28561: LD_EXP 88
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PUSH
28572: LD_INT 3
28574: LESS
28575: AND
28576: IFFALSE 28634
// begin SetTag ( j , 121 ) ;
28578: LD_VAR 0 3
28582: PPUSH
28583: LD_INT 121
28585: PPUSH
28586: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
28590: LD_ADDR_EXP 88
28594: PUSH
28595: LD_EXP 88
28599: PPUSH
28600: LD_VAR 0 2
28604: PUSH
28605: LD_EXP 88
28609: PUSH
28610: LD_VAR 0 2
28614: ARRAY
28615: PUSH
28616: LD_INT 1
28618: PLUS
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PPUSH
28624: LD_VAR 0 3
28628: PPUSH
28629: CALL 45045 0 3
28633: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
28634: LD_VAR 0 3
28638: PUSH
28639: LD_EXP 88
28643: PUSH
28644: LD_VAR 0 2
28648: ARRAY
28649: IN
28650: IFFALSE 28809
// begin if IsInUnit ( j ) then
28652: LD_VAR 0 3
28656: PPUSH
28657: CALL_OW 310
28661: IFFALSE 28672
// ComExitBuilding ( j ) ;
28663: LD_VAR 0 3
28667: PPUSH
28668: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
28672: LD_ADDR_VAR 0 6
28676: PUSH
28677: LD_VAR 0 7
28681: PPUSH
28682: LD_VAR 0 3
28686: PPUSH
28687: CALL_OW 74
28691: ST_TO_ADDR
// if not ape then
28692: LD_VAR 0 6
28696: NOT
28697: IFFALSE 28701
// break ;
28699: GO 28811
// x := GetX ( ape ) ;
28701: LD_ADDR_VAR 0 4
28705: PUSH
28706: LD_VAR 0 6
28710: PPUSH
28711: CALL_OW 250
28715: ST_TO_ADDR
// y := GetY ( ape ) ;
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 6
28725: PPUSH
28726: CALL_OW 251
28730: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_VAR 0 5
28740: PPUSH
28741: CALL_OW 488
28745: NOT
28746: PUSH
28747: LD_VAR 0 11
28751: PPUSH
28752: LD_VAR 0 4
28756: PPUSH
28757: LD_VAR 0 5
28761: PPUSH
28762: LD_INT 20
28764: PPUSH
28765: CALL 45539 0 4
28769: PUSH
28770: LD_INT 4
28772: ARRAY
28773: OR
28774: IFFALSE 28778
// break ;
28776: GO 28811
// if not HasTask ( j ) then
28778: LD_VAR 0 3
28782: PPUSH
28783: CALL_OW 314
28787: NOT
28788: IFFALSE 28809
// ComTameXY ( j , x , y ) ;
28790: LD_VAR 0 3
28794: PPUSH
28795: LD_VAR 0 4
28799: PPUSH
28800: LD_VAR 0 5
28804: PPUSH
28805: CALL_OW 131
// end ; end ;
28809: GO 28540
28811: POP
28812: POP
// end ;
28813: GO 28096
28815: POP
28816: POP
// end ;
28817: LD_VAR 0 1
28821: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
28822: LD_INT 0
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
28828: PPUSH
28829: PPUSH
28830: PPUSH
28831: PPUSH
// if not mc_bases then
28832: LD_EXP 57
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 29451
// for i = 1 to mc_bases do
28841: LD_ADDR_VAR 0 2
28845: PUSH
28846: DOUBLE
28847: LD_INT 1
28849: DEC
28850: ST_TO_ADDR
28851: LD_EXP 57
28855: PUSH
28856: FOR_TO
28857: IFFALSE 29449
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
28859: LD_EXP 86
28863: PUSH
28864: LD_VAR 0 2
28868: ARRAY
28869: NOT
28870: PUSH
28871: LD_EXP 86
28875: PUSH
28876: LD_VAR 0 2
28880: ARRAY
28881: PPUSH
28882: LD_INT 25
28884: PUSH
28885: LD_INT 12
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 72
28896: NOT
28897: OR
28898: IFFALSE 28902
// continue ;
28900: GO 28856
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
28902: LD_ADDR_VAR 0 5
28906: PUSH
28907: LD_EXP 86
28911: PUSH
28912: LD_VAR 0 2
28916: ARRAY
28917: PUSH
28918: LD_INT 1
28920: ARRAY
28921: PPUSH
28922: CALL_OW 255
28926: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
28927: LD_VAR 0 5
28931: PPUSH
28932: LD_INT 2
28934: PPUSH
28935: CALL_OW 325
28939: IFFALSE 29184
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28941: LD_ADDR_VAR 0 4
28945: PUSH
28946: LD_EXP 86
28950: PUSH
28951: LD_VAR 0 2
28955: ARRAY
28956: PPUSH
28957: LD_INT 25
28959: PUSH
28960: LD_INT 16
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PPUSH
28967: CALL_OW 72
28971: ST_TO_ADDR
// if tmp < 6 then
28972: LD_VAR 0 4
28976: PUSH
28977: LD_INT 6
28979: LESS
28980: IFFALSE 29184
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28982: LD_ADDR_VAR 0 6
28986: PUSH
28987: LD_EXP 57
28991: PUSH
28992: LD_VAR 0 2
28996: ARRAY
28997: PPUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 30
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 30
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 72
29030: ST_TO_ADDR
// if depot then
29031: LD_VAR 0 6
29035: IFFALSE 29184
// begin for j in depot do
29037: LD_ADDR_VAR 0 3
29041: PUSH
29042: LD_VAR 0 6
29046: PUSH
29047: FOR_IN
29048: IFFALSE 29079
// begin if UnitsInside ( j ) < 6 then
29050: LD_VAR 0 3
29054: PPUSH
29055: CALL_OW 313
29059: PUSH
29060: LD_INT 6
29062: LESS
29063: IFFALSE 29077
// begin selected := j ;
29065: LD_ADDR_VAR 0 7
29069: PUSH
29070: LD_VAR 0 3
29074: ST_TO_ADDR
// break ;
29075: GO 29079
// end ; end ;
29077: GO 29047
29079: POP
29080: POP
// if selected then
29081: LD_VAR 0 7
29085: IFFALSE 29184
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29087: LD_ADDR_VAR 0 3
29091: PUSH
29092: LD_EXP 86
29096: PUSH
29097: LD_VAR 0 2
29101: ARRAY
29102: PPUSH
29103: LD_INT 25
29105: PUSH
29106: LD_INT 12
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PPUSH
29113: CALL_OW 72
29117: PUSH
29118: FOR_IN
29119: IFFALSE 29182
// if not HasTask ( j ) then
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 314
29130: NOT
29131: IFFALSE 29180
// begin if not IsInUnit ( j ) then
29133: LD_VAR 0 3
29137: PPUSH
29138: CALL_OW 310
29142: NOT
29143: IFFALSE 29159
// ComEnterUnit ( j , selected ) ;
29145: LD_VAR 0 3
29149: PPUSH
29150: LD_VAR 0 7
29154: PPUSH
29155: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
29159: LD_VAR 0 3
29163: PPUSH
29164: LD_INT 16
29166: PPUSH
29167: CALL_OW 183
// AddComExitBuilding ( j ) ;
29171: LD_VAR 0 3
29175: PPUSH
29176: CALL_OW 182
// end ;
29180: GO 29118
29182: POP
29183: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
29184: LD_VAR 0 5
29188: PPUSH
29189: LD_INT 11
29191: PPUSH
29192: CALL_OW 325
29196: IFFALSE 29447
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
29198: LD_ADDR_VAR 0 4
29202: PUSH
29203: LD_EXP 86
29207: PUSH
29208: LD_VAR 0 2
29212: ARRAY
29213: PPUSH
29214: LD_INT 25
29216: PUSH
29217: LD_INT 16
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 72
29228: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
29229: LD_VAR 0 4
29233: PUSH
29234: LD_INT 6
29236: GREATEREQUAL
29237: PUSH
29238: LD_VAR 0 5
29242: PPUSH
29243: LD_INT 2
29245: PPUSH
29246: CALL_OW 325
29250: NOT
29251: OR
29252: IFFALSE 29447
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
29254: LD_ADDR_VAR 0 8
29258: PUSH
29259: LD_EXP 57
29263: PUSH
29264: LD_VAR 0 2
29268: ARRAY
29269: PPUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 30
29275: PUSH
29276: LD_INT 4
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 30
29285: PUSH
29286: LD_INT 5
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 72
29302: ST_TO_ADDR
// if barracks then
29303: LD_VAR 0 8
29307: IFFALSE 29447
// begin for j in barracks do
29309: LD_ADDR_VAR 0 3
29313: PUSH
29314: LD_VAR 0 8
29318: PUSH
29319: FOR_IN
29320: IFFALSE 29351
// begin if UnitsInside ( j ) < 6 then
29322: LD_VAR 0 3
29326: PPUSH
29327: CALL_OW 313
29331: PUSH
29332: LD_INT 6
29334: LESS
29335: IFFALSE 29349
// begin selected := j ;
29337: LD_ADDR_VAR 0 7
29341: PUSH
29342: LD_VAR 0 3
29346: ST_TO_ADDR
// break ;
29347: GO 29351
// end ; end ;
29349: GO 29319
29351: POP
29352: POP
// if selected then
29353: LD_VAR 0 7
29357: IFFALSE 29447
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_EXP 86
29368: PUSH
29369: LD_VAR 0 2
29373: ARRAY
29374: PPUSH
29375: LD_INT 25
29377: PUSH
29378: LD_INT 12
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PPUSH
29385: CALL_OW 72
29389: PUSH
29390: FOR_IN
29391: IFFALSE 29445
// if not IsInUnit ( j ) and not HasTask ( j ) then
29393: LD_VAR 0 3
29397: PPUSH
29398: CALL_OW 310
29402: NOT
29403: PUSH
29404: LD_VAR 0 3
29408: PPUSH
29409: CALL_OW 314
29413: NOT
29414: AND
29415: IFFALSE 29443
// begin ComEnterUnit ( j , selected ) ;
29417: LD_VAR 0 3
29421: PPUSH
29422: LD_VAR 0 7
29426: PPUSH
29427: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
29431: LD_VAR 0 3
29435: PPUSH
29436: LD_INT 15
29438: PPUSH
29439: CALL_OW 183
// end ;
29443: GO 29390
29445: POP
29446: POP
// end ; end ; end ; end ; end ;
29447: GO 28856
29449: POP
29450: POP
// end ;
29451: LD_VAR 0 1
29455: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
// if not mc_bases then
29462: LD_EXP 57
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29649
// for i = 1 to mc_bases do
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: DOUBLE
29477: LD_INT 1
29479: DEC
29480: ST_TO_ADDR
29481: LD_EXP 57
29485: PUSH
29486: FOR_TO
29487: IFFALSE 29647
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
29489: LD_ADDR_VAR 0 4
29493: PUSH
29494: LD_EXP 57
29498: PUSH
29499: LD_VAR 0 2
29503: ARRAY
29504: PPUSH
29505: LD_INT 25
29507: PUSH
29508: LD_INT 9
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PPUSH
29515: CALL_OW 72
29519: ST_TO_ADDR
// if not tmp then
29520: LD_VAR 0 4
29524: NOT
29525: IFFALSE 29529
// continue ;
29527: GO 29486
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
29529: LD_EXP 83
29533: PUSH
29534: LD_VAR 0 2
29538: ARRAY
29539: PPUSH
29540: LD_INT 29
29542: PPUSH
29543: CALL_OW 325
29547: NOT
29548: PUSH
29549: LD_EXP 83
29553: PUSH
29554: LD_VAR 0 2
29558: ARRAY
29559: PPUSH
29560: LD_INT 28
29562: PPUSH
29563: CALL_OW 325
29567: NOT
29568: AND
29569: IFFALSE 29573
// continue ;
29571: GO 29486
// for j in tmp do
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: LD_VAR 0 4
29582: PUSH
29583: FOR_IN
29584: IFFALSE 29643
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
29586: LD_VAR 0 3
29590: PUSH
29591: LD_EXP 60
29595: PUSH
29596: LD_VAR 0 2
29600: ARRAY
29601: PUSH
29602: LD_INT 1
29604: ARRAY
29605: IN
29606: NOT
29607: PUSH
29608: LD_VAR 0 3
29612: PUSH
29613: LD_EXP 60
29617: PUSH
29618: LD_VAR 0 2
29622: ARRAY
29623: PUSH
29624: LD_INT 2
29626: ARRAY
29627: IN
29628: NOT
29629: AND
29630: IFFALSE 29641
// ComSpaceTimeShoot ( j ) ;
29632: LD_VAR 0 3
29636: PPUSH
29637: CALL 38670 0 1
29641: GO 29583
29643: POP
29644: POP
// end ;
29645: GO 29486
29647: POP
29648: POP
// end ;
29649: LD_VAR 0 1
29653: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
// if not mc_bases then
29660: LD_EXP 57
29664: NOT
29665: IFFALSE 29669
// exit ;
29667: GO 29691
// for i = 1 to mc_bases do
29669: LD_ADDR_VAR 0 2
29673: PUSH
29674: DOUBLE
29675: LD_INT 1
29677: DEC
29678: ST_TO_ADDR
29679: LD_EXP 57
29683: PUSH
29684: FOR_TO
29685: IFFALSE 29689
// begin end ;
29687: GO 29684
29689: POP
29690: POP
// end ;
29691: LD_VAR 0 1
29695: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
29700: PPUSH
// if not mc_bases then
29701: LD_EXP 57
29705: NOT
29706: IFFALSE 29710
// exit ;
29708: GO 30270
// for i = 1 to mc_bases do
29710: LD_ADDR_VAR 0 2
29714: PUSH
29715: DOUBLE
29716: LD_INT 1
29718: DEC
29719: ST_TO_ADDR
29720: LD_EXP 57
29724: PUSH
29725: FOR_TO
29726: IFFALSE 30268
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29728: LD_ADDR_VAR 0 3
29732: PUSH
29733: LD_EXP 57
29737: PUSH
29738: LD_VAR 0 2
29742: ARRAY
29743: PPUSH
29744: LD_INT 25
29746: PUSH
29747: LD_INT 4
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 72
29758: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
29759: LD_VAR 0 3
29763: NOT
29764: PUSH
29765: LD_EXP 93
29769: PUSH
29770: LD_VAR 0 2
29774: ARRAY
29775: NOT
29776: OR
29777: IFFALSE 29827
// begin if mc_deposits_finder [ i ] then
29779: LD_EXP 94
29783: PUSH
29784: LD_VAR 0 2
29788: ARRAY
29789: IFFALSE 29825
// begin MC_Reset ( i , 125 ) ;
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_INT 125
29798: PPUSH
29799: CALL 19325 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29803: LD_ADDR_EXP 94
29807: PUSH
29808: LD_EXP 94
29812: PPUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: EMPTY
29819: PPUSH
29820: CALL_OW 1
29824: ST_TO_ADDR
// end ; continue ;
29825: GO 29725
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
29827: LD_EXP 93
29831: PUSH
29832: LD_VAR 0 2
29836: ARRAY
29837: PUSH
29838: LD_INT 1
29840: ARRAY
29841: PUSH
29842: LD_INT 3
29844: ARRAY
29845: PUSH
29846: LD_INT 1
29848: EQUAL
29849: PUSH
29850: LD_INT 20
29852: PPUSH
29853: LD_EXP 83
29857: PUSH
29858: LD_VAR 0 2
29862: ARRAY
29863: PPUSH
29864: CALL_OW 321
29868: PUSH
29869: LD_INT 2
29871: NONEQUAL
29872: AND
29873: IFFALSE 29923
// begin if mc_deposits_finder [ i ] then
29875: LD_EXP 94
29879: PUSH
29880: LD_VAR 0 2
29884: ARRAY
29885: IFFALSE 29921
// begin MC_Reset ( i , 125 ) ;
29887: LD_VAR 0 2
29891: PPUSH
29892: LD_INT 125
29894: PPUSH
29895: CALL 19325 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29899: LD_ADDR_EXP 94
29903: PUSH
29904: LD_EXP 94
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: EMPTY
29915: PPUSH
29916: CALL_OW 1
29920: ST_TO_ADDR
// end ; continue ;
29921: GO 29725
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
29923: LD_EXP 93
29927: PUSH
29928: LD_VAR 0 2
29932: ARRAY
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: PUSH
29938: LD_INT 1
29940: ARRAY
29941: PPUSH
29942: LD_EXP 93
29946: PUSH
29947: LD_VAR 0 2
29951: ARRAY
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PUSH
29957: LD_INT 2
29959: ARRAY
29960: PPUSH
29961: LD_EXP 83
29965: PUSH
29966: LD_VAR 0 2
29970: ARRAY
29971: PPUSH
29972: CALL_OW 440
29976: IFFALSE 30019
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
29978: LD_ADDR_EXP 93
29982: PUSH
29983: LD_EXP 93
29987: PPUSH
29988: LD_VAR 0 2
29992: PPUSH
29993: LD_EXP 93
29997: PUSH
29998: LD_VAR 0 2
30002: ARRAY
30003: PPUSH
30004: LD_INT 1
30006: PPUSH
30007: CALL_OW 3
30011: PPUSH
30012: CALL_OW 1
30016: ST_TO_ADDR
30017: GO 30266
// begin if not mc_deposits_finder [ i ] then
30019: LD_EXP 94
30023: PUSH
30024: LD_VAR 0 2
30028: ARRAY
30029: NOT
30030: IFFALSE 30082
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
30032: LD_ADDR_EXP 94
30036: PUSH
30037: LD_EXP 94
30041: PPUSH
30042: LD_VAR 0 2
30046: PPUSH
30047: LD_VAR 0 3
30051: PUSH
30052: LD_INT 1
30054: ARRAY
30055: PUSH
30056: EMPTY
30057: LIST
30058: PPUSH
30059: CALL_OW 1
30063: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
30064: LD_VAR 0 3
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: LD_INT 125
30075: PPUSH
30076: CALL_OW 109
// end else
30080: GO 30266
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
30082: LD_EXP 94
30086: PUSH
30087: LD_VAR 0 2
30091: ARRAY
30092: PUSH
30093: LD_INT 1
30095: ARRAY
30096: PPUSH
30097: CALL_OW 310
30101: IFFALSE 30124
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
30103: LD_EXP 94
30107: PUSH
30108: LD_VAR 0 2
30112: ARRAY
30113: PUSH
30114: LD_INT 1
30116: ARRAY
30117: PPUSH
30118: CALL_OW 122
30122: GO 30266
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
30124: LD_EXP 94
30128: PUSH
30129: LD_VAR 0 2
30133: ARRAY
30134: PUSH
30135: LD_INT 1
30137: ARRAY
30138: PPUSH
30139: CALL_OW 314
30143: NOT
30144: PUSH
30145: LD_EXP 94
30149: PUSH
30150: LD_VAR 0 2
30154: ARRAY
30155: PUSH
30156: LD_INT 1
30158: ARRAY
30159: PPUSH
30160: LD_EXP 93
30164: PUSH
30165: LD_VAR 0 2
30169: ARRAY
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: PUSH
30175: LD_INT 1
30177: ARRAY
30178: PPUSH
30179: LD_EXP 93
30183: PUSH
30184: LD_VAR 0 2
30188: ARRAY
30189: PUSH
30190: LD_INT 1
30192: ARRAY
30193: PUSH
30194: LD_INT 2
30196: ARRAY
30197: PPUSH
30198: CALL_OW 297
30202: PUSH
30203: LD_INT 6
30205: GREATER
30206: AND
30207: IFFALSE 30266
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
30209: LD_EXP 94
30213: PUSH
30214: LD_VAR 0 2
30218: ARRAY
30219: PUSH
30220: LD_INT 1
30222: ARRAY
30223: PPUSH
30224: LD_EXP 93
30228: PUSH
30229: LD_VAR 0 2
30233: ARRAY
30234: PUSH
30235: LD_INT 1
30237: ARRAY
30238: PUSH
30239: LD_INT 1
30241: ARRAY
30242: PPUSH
30243: LD_EXP 93
30247: PUSH
30248: LD_VAR 0 2
30252: ARRAY
30253: PUSH
30254: LD_INT 1
30256: ARRAY
30257: PUSH
30258: LD_INT 2
30260: ARRAY
30261: PPUSH
30262: CALL_OW 111
// end ; end ; end ;
30266: GO 29725
30268: POP
30269: POP
// end ;
30270: LD_VAR 0 1
30274: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
30275: LD_INT 0
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
// if not mc_bases then
30286: LD_EXP 57
30290: NOT
30291: IFFALSE 30295
// exit ;
30293: GO 30793
// for i = 1 to mc_bases do
30295: LD_ADDR_VAR 0 2
30299: PUSH
30300: DOUBLE
30301: LD_INT 1
30303: DEC
30304: ST_TO_ADDR
30305: LD_EXP 57
30309: PUSH
30310: FOR_TO
30311: IFFALSE 30791
// begin if not mc_bases [ i ] then
30313: LD_EXP 57
30317: PUSH
30318: LD_VAR 0 2
30322: ARRAY
30323: NOT
30324: IFFALSE 30328
// continue ;
30326: GO 30310
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
30328: LD_ADDR_VAR 0 7
30332: PUSH
30333: LD_EXP 57
30337: PUSH
30338: LD_VAR 0 2
30342: ARRAY
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PPUSH
30348: CALL_OW 248
30352: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
30353: LD_VAR 0 7
30357: PUSH
30358: LD_INT 1
30360: NONEQUAL
30361: PUSH
30362: LD_EXP 76
30366: PUSH
30367: LD_VAR 0 2
30371: ARRAY
30372: PUSH
30373: LD_EXP 79
30377: PUSH
30378: LD_VAR 0 2
30382: ARRAY
30383: UNION
30384: PPUSH
30385: LD_INT 33
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PPUSH
30395: CALL_OW 72
30399: NOT
30400: OR
30401: IFFALSE 30405
// continue ;
30403: GO 30310
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
30405: LD_ADDR_VAR 0 9
30409: PUSH
30410: LD_EXP 57
30414: PUSH
30415: LD_VAR 0 2
30419: ARRAY
30420: PPUSH
30421: LD_INT 30
30423: PUSH
30424: LD_INT 36
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PPUSH
30431: CALL_OW 72
30435: ST_TO_ADDR
// if not cts then
30436: LD_VAR 0 9
30440: NOT
30441: IFFALSE 30445
// continue ;
30443: GO 30310
// if mc_remote_driver [ i ] then
30445: LD_EXP 96
30449: PUSH
30450: LD_VAR 0 2
30454: ARRAY
30455: IFFALSE 30604
// for j in mc_remote_driver [ i ] do
30457: LD_ADDR_VAR 0 3
30461: PUSH
30462: LD_EXP 96
30466: PUSH
30467: LD_VAR 0 2
30471: ARRAY
30472: PUSH
30473: FOR_IN
30474: IFFALSE 30602
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
30476: LD_VAR 0 3
30480: PPUSH
30481: CALL_OW 310
30485: NOT
30486: PUSH
30487: LD_VAR 0 3
30491: PPUSH
30492: CALL_OW 310
30496: PPUSH
30497: CALL_OW 266
30501: PUSH
30502: LD_INT 36
30504: NONEQUAL
30505: OR
30506: IFFALSE 30600
// begin if IsInUnit ( j ) then
30508: LD_VAR 0 3
30512: PPUSH
30513: CALL_OW 310
30517: IFFALSE 30528
// ComExitBuilding ( j ) ;
30519: LD_VAR 0 3
30523: PPUSH
30524: CALL_OW 122
// ct := 0 ;
30528: LD_ADDR_VAR 0 8
30532: PUSH
30533: LD_INT 0
30535: ST_TO_ADDR
// for k in cts do
30536: LD_ADDR_VAR 0 4
30540: PUSH
30541: LD_VAR 0 9
30545: PUSH
30546: FOR_IN
30547: IFFALSE 30578
// if UnitsInside ( k ) < 3 then
30549: LD_VAR 0 4
30553: PPUSH
30554: CALL_OW 313
30558: PUSH
30559: LD_INT 3
30561: LESS
30562: IFFALSE 30576
// begin ct := k ;
30564: LD_ADDR_VAR 0 8
30568: PUSH
30569: LD_VAR 0 4
30573: ST_TO_ADDR
// break ;
30574: GO 30578
// end ;
30576: GO 30546
30578: POP
30579: POP
// if ct then
30580: LD_VAR 0 8
30584: IFFALSE 30600
// AddComEnterUnit ( j , ct ) ;
30586: LD_VAR 0 3
30590: PPUSH
30591: LD_VAR 0 8
30595: PPUSH
30596: CALL_OW 180
// end ;
30600: GO 30473
30602: POP
30603: POP
// places := 0 ;
30604: LD_ADDR_VAR 0 5
30608: PUSH
30609: LD_INT 0
30611: ST_TO_ADDR
// for j = 1 to cts do
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: DOUBLE
30618: LD_INT 1
30620: DEC
30621: ST_TO_ADDR
30622: LD_VAR 0 9
30626: PUSH
30627: FOR_TO
30628: IFFALSE 30646
// places := places + 3 ;
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 3
30642: PLUS
30643: ST_TO_ADDR
30644: GO 30627
30646: POP
30647: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
30648: LD_ADDR_VAR 0 6
30652: PUSH
30653: LD_EXP 57
30657: PUSH
30658: LD_VAR 0 2
30662: ARRAY
30663: PPUSH
30664: LD_INT 25
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PPUSH
30674: CALL_OW 72
30678: PUSH
30679: LD_EXP 96
30683: PUSH
30684: LD_VAR 0 2
30688: ARRAY
30689: DIFF
30690: ST_TO_ADDR
// if not tmp then
30691: LD_VAR 0 6
30695: NOT
30696: IFFALSE 30700
// continue ;
30698: GO 30310
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
30700: LD_ADDR_VAR 0 5
30704: PUSH
30705: LD_VAR 0 5
30709: PUSH
30710: LD_EXP 96
30714: PUSH
30715: LD_VAR 0 2
30719: ARRAY
30720: PUSH
30721: LD_INT 1
30723: PLUS
30724: MINUS
30725: ST_TO_ADDR
// if places then
30726: LD_VAR 0 5
30730: IFFALSE 30789
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
30732: LD_ADDR_EXP 96
30736: PUSH
30737: LD_EXP 96
30741: PPUSH
30742: LD_VAR 0 2
30746: PPUSH
30747: LD_EXP 96
30751: PUSH
30752: LD_VAR 0 2
30756: ARRAY
30757: PUSH
30758: LD_VAR 0 6
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: UNION
30767: PPUSH
30768: CALL_OW 1
30772: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
30773: LD_VAR 0 6
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: LD_INT 126
30784: PPUSH
30785: CALL_OW 109
// end ; end ;
30789: GO 30310
30791: POP
30792: POP
// end ;
30793: LD_VAR 0 1
30797: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
30798: LD_INT 0
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
30806: LD_VAR 0 1
30810: NOT
30811: PUSH
30812: LD_VAR 0 2
30816: NOT
30817: OR
30818: PUSH
30819: LD_VAR 0 3
30823: NOT
30824: OR
30825: PUSH
30826: LD_VAR 0 4
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: LD_INT 8
30848: PUSH
30849: LD_INT 9
30851: PUSH
30852: LD_INT 15
30854: PUSH
30855: LD_INT 16
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: IN
30869: NOT
30870: OR
30871: IFFALSE 30875
// exit ;
30873: GO 31775
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
30875: LD_ADDR_VAR 0 2
30879: PUSH
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_INT 21
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 24
30897: PUSH
30898: LD_INT 250
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PPUSH
30909: CALL_OW 72
30913: ST_TO_ADDR
// case class of 1 , 15 :
30914: LD_VAR 0 4
30918: PUSH
30919: LD_INT 1
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30933
30925: LD_INT 15
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 31018
30933: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
30934: LD_ADDR_VAR 0 8
30938: PUSH
30939: LD_VAR 0 2
30943: PPUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 30
30949: PUSH
30950: LD_INT 32
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 31
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: PPUSH
30972: CALL_OW 72
30976: PUSH
30977: LD_VAR 0 2
30981: PPUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 30
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: ADD
31015: ST_TO_ADDR
31016: GO 31264
31018: LD_INT 2
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31032
31024: LD_INT 16
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31078
31032: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
31033: LD_ADDR_VAR 0 8
31037: PUSH
31038: LD_VAR 0 2
31042: PPUSH
31043: LD_INT 2
31045: PUSH
31046: LD_INT 30
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 30
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: PPUSH
31071: CALL_OW 72
31075: ST_TO_ADDR
31076: GO 31264
31078: LD_INT 3
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31132
31086: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
31087: LD_ADDR_VAR 0 8
31091: PUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_INT 2
31099: PUSH
31100: LD_INT 30
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 30
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 72
31129: ST_TO_ADDR
31130: GO 31264
31132: LD_INT 4
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31197
31140: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
31141: LD_ADDR_VAR 0 8
31145: PUSH
31146: LD_VAR 0 2
31150: PPUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 30
31156: PUSH
31157: LD_INT 6
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 30
31166: PUSH
31167: LD_INT 7
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 30
31176: PUSH
31177: LD_INT 8
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: PPUSH
31190: CALL_OW 72
31194: ST_TO_ADDR
31195: GO 31264
31197: LD_INT 5
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31217
31203: LD_INT 8
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31217
31209: LD_INT 9
31211: DOUBLE
31212: EQUAL
31213: IFTRUE 31217
31215: GO 31263
31217: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
31218: LD_ADDR_VAR 0 8
31222: PUSH
31223: LD_VAR 0 2
31227: PPUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: LD_INT 4
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 30
31243: PUSH
31244: LD_INT 5
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 72
31260: ST_TO_ADDR
31261: GO 31264
31263: POP
// if not tmp then
31264: LD_VAR 0 8
31268: NOT
31269: IFFALSE 31273
// exit ;
31271: GO 31775
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
31273: LD_VAR 0 4
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 15
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: IN
31288: PUSH
31289: LD_EXP 66
31293: PUSH
31294: LD_VAR 0 1
31298: ARRAY
31299: AND
31300: IFFALSE 31456
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
31302: LD_ADDR_VAR 0 9
31306: PUSH
31307: LD_EXP 66
31311: PUSH
31312: LD_VAR 0 1
31316: ARRAY
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
31322: LD_VAR 0 9
31326: PUSH
31327: LD_EXP 67
31331: PUSH
31332: LD_VAR 0 1
31336: ARRAY
31337: IN
31338: NOT
31339: IFFALSE 31454
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
31341: LD_ADDR_EXP 67
31345: PUSH
31346: LD_EXP 67
31350: PPUSH
31351: LD_VAR 0 1
31355: PUSH
31356: LD_EXP 67
31360: PUSH
31361: LD_VAR 0 1
31365: ARRAY
31366: PUSH
31367: LD_INT 1
31369: PLUS
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PPUSH
31375: LD_VAR 0 9
31379: PPUSH
31380: CALL 45045 0 3
31384: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
31385: LD_ADDR_EXP 66
31389: PUSH
31390: LD_EXP 66
31394: PPUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_EXP 66
31404: PUSH
31405: LD_VAR 0 1
31409: ARRAY
31410: PUSH
31411: LD_VAR 0 9
31415: DIFF
31416: PPUSH
31417: CALL_OW 1
31421: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
31422: LD_VAR 0 3
31426: PPUSH
31427: LD_EXP 67
31431: PUSH
31432: LD_VAR 0 1
31436: ARRAY
31437: PUSH
31438: LD_EXP 67
31442: PUSH
31443: LD_VAR 0 1
31447: ARRAY
31448: ARRAY
31449: PPUSH
31450: CALL_OW 120
// end ; exit ;
31454: GO 31775
// end ; if tmp > 1 then
31456: LD_VAR 0 8
31460: PUSH
31461: LD_INT 1
31463: GREATER
31464: IFFALSE 31568
// for i = 2 to tmp do
31466: LD_ADDR_VAR 0 6
31470: PUSH
31471: DOUBLE
31472: LD_INT 2
31474: DEC
31475: ST_TO_ADDR
31476: LD_VAR 0 8
31480: PUSH
31481: FOR_TO
31482: IFFALSE 31566
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
31484: LD_VAR 0 8
31488: PUSH
31489: LD_VAR 0 6
31493: ARRAY
31494: PPUSH
31495: CALL_OW 461
31499: PUSH
31500: LD_INT 6
31502: EQUAL
31503: IFFALSE 31564
// begin x := tmp [ i ] ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_VAR 0 8
31514: PUSH
31515: LD_VAR 0 6
31519: ARRAY
31520: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
31521: LD_ADDR_VAR 0 8
31525: PUSH
31526: LD_VAR 0 8
31530: PPUSH
31531: LD_VAR 0 6
31535: PPUSH
31536: CALL_OW 3
31540: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
31541: LD_ADDR_VAR 0 8
31545: PUSH
31546: LD_VAR 0 8
31550: PPUSH
31551: LD_INT 1
31553: PPUSH
31554: LD_VAR 0 9
31558: PPUSH
31559: CALL_OW 2
31563: ST_TO_ADDR
// end ;
31564: GO 31481
31566: POP
31567: POP
// for i in tmp do
31568: LD_ADDR_VAR 0 6
31572: PUSH
31573: LD_VAR 0 8
31577: PUSH
31578: FOR_IN
31579: IFFALSE 31648
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
31581: LD_VAR 0 6
31585: PPUSH
31586: CALL_OW 313
31590: PUSH
31591: LD_INT 6
31593: LESS
31594: PUSH
31595: LD_VAR 0 6
31599: PPUSH
31600: CALL_OW 266
31604: PUSH
31605: LD_INT 31
31607: PUSH
31608: LD_INT 32
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: IN
31615: NOT
31616: AND
31617: PUSH
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 313
31627: PUSH
31628: LD_INT 0
31630: EQUAL
31631: OR
31632: IFFALSE 31646
// begin j := i ;
31634: LD_ADDR_VAR 0 7
31638: PUSH
31639: LD_VAR 0 6
31643: ST_TO_ADDR
// break ;
31644: GO 31648
// end ; end ;
31646: GO 31578
31648: POP
31649: POP
// if j then
31650: LD_VAR 0 7
31654: IFFALSE 31672
// ComEnterUnit ( unit , j ) else
31656: LD_VAR 0 3
31660: PPUSH
31661: LD_VAR 0 7
31665: PPUSH
31666: CALL_OW 120
31670: GO 31775
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31672: LD_ADDR_VAR 0 10
31676: PUSH
31677: LD_VAR 0 2
31681: PPUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 30
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: PPUSH
31710: CALL_OW 72
31714: ST_TO_ADDR
// if depot then
31715: LD_VAR 0 10
31719: IFFALSE 31775
// begin depot := NearestUnitToUnit ( depot , unit ) ;
31721: LD_ADDR_VAR 0 10
31725: PUSH
31726: LD_VAR 0 10
31730: PPUSH
31731: LD_VAR 0 3
31735: PPUSH
31736: CALL_OW 74
31740: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
31741: LD_VAR 0 3
31745: PPUSH
31746: LD_VAR 0 10
31750: PPUSH
31751: CALL_OW 296
31755: PUSH
31756: LD_INT 10
31758: GREATER
31759: IFFALSE 31775
// ComStandNearbyBuilding ( unit , depot ) ;
31761: LD_VAR 0 3
31765: PPUSH
31766: LD_VAR 0 10
31770: PPUSH
31771: CALL 39287 0 2
// end ; end ; end ;
31775: LD_VAR 0 5
31779: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
31780: LD_INT 0
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
// if not mc_bases then
31786: LD_EXP 57
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 32034
// for i = 1 to mc_bases do
31795: LD_ADDR_VAR 0 2
31799: PUSH
31800: DOUBLE
31801: LD_INT 1
31803: DEC
31804: ST_TO_ADDR
31805: LD_EXP 57
31809: PUSH
31810: FOR_TO
31811: IFFALSE 32032
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
31813: LD_ADDR_VAR 0 4
31817: PUSH
31818: LD_EXP 57
31822: PUSH
31823: LD_VAR 0 2
31827: ARRAY
31828: PPUSH
31829: LD_INT 21
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PPUSH
31839: CALL_OW 72
31843: PUSH
31844: LD_EXP 86
31848: PUSH
31849: LD_VAR 0 2
31853: ARRAY
31854: UNION
31855: ST_TO_ADDR
// if not tmp then
31856: LD_VAR 0 4
31860: NOT
31861: IFFALSE 31865
// continue ;
31863: GO 31810
// for j in tmp do
31865: LD_ADDR_VAR 0 3
31869: PUSH
31870: LD_VAR 0 4
31874: PUSH
31875: FOR_IN
31876: IFFALSE 32028
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
31878: LD_VAR 0 3
31882: PPUSH
31883: CALL_OW 110
31887: NOT
31888: PUSH
31889: LD_VAR 0 3
31893: PPUSH
31894: CALL_OW 314
31898: NOT
31899: AND
31900: PUSH
31901: LD_VAR 0 3
31905: PPUSH
31906: CALL_OW 311
31910: NOT
31911: AND
31912: PUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: CALL_OW 310
31922: NOT
31923: AND
31924: PUSH
31925: LD_VAR 0 3
31929: PUSH
31930: LD_EXP 60
31934: PUSH
31935: LD_VAR 0 2
31939: ARRAY
31940: PUSH
31941: LD_INT 1
31943: ARRAY
31944: IN
31945: NOT
31946: AND
31947: PUSH
31948: LD_VAR 0 3
31952: PUSH
31953: LD_EXP 60
31957: PUSH
31958: LD_VAR 0 2
31962: ARRAY
31963: PUSH
31964: LD_INT 2
31966: ARRAY
31967: IN
31968: NOT
31969: AND
31970: PUSH
31971: LD_VAR 0 3
31975: PUSH
31976: LD_EXP 69
31980: PUSH
31981: LD_VAR 0 2
31985: ARRAY
31986: IN
31987: NOT
31988: AND
31989: IFFALSE 32026
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
31991: LD_VAR 0 2
31995: PPUSH
31996: LD_EXP 57
32000: PUSH
32001: LD_VAR 0 2
32005: ARRAY
32006: PPUSH
32007: LD_VAR 0 3
32011: PPUSH
32012: LD_VAR 0 3
32016: PPUSH
32017: CALL_OW 257
32021: PPUSH
32022: CALL 30798 0 4
// end ;
32026: GO 31875
32028: POP
32029: POP
// end ;
32030: GO 31810
32032: POP
32033: POP
// end ;
32034: LD_VAR 0 1
32038: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
// if not mc_bases [ base ] then
32047: LD_EXP 57
32051: PUSH
32052: LD_VAR 0 1
32056: ARRAY
32057: NOT
32058: IFFALSE 32062
// exit ;
32060: GO 32244
// tmp := [ ] ;
32062: LD_ADDR_VAR 0 6
32066: PUSH
32067: EMPTY
32068: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
32069: LD_ADDR_VAR 0 7
32073: PUSH
32074: LD_VAR 0 3
32078: PPUSH
32079: LD_INT 0
32081: PPUSH
32082: CALL_OW 517
32086: ST_TO_ADDR
// if not list then
32087: LD_VAR 0 7
32091: NOT
32092: IFFALSE 32096
// exit ;
32094: GO 32244
// for i = 1 to amount do
32096: LD_ADDR_VAR 0 5
32100: PUSH
32101: DOUBLE
32102: LD_INT 1
32104: DEC
32105: ST_TO_ADDR
32106: LD_VAR 0 2
32110: PUSH
32111: FOR_TO
32112: IFFALSE 32192
// begin x := rand ( 1 , list [ 1 ] ) ;
32114: LD_ADDR_VAR 0 8
32118: PUSH
32119: LD_INT 1
32121: PPUSH
32122: LD_VAR 0 7
32126: PUSH
32127: LD_INT 1
32129: ARRAY
32130: PPUSH
32131: CALL_OW 12
32135: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
32136: LD_ADDR_VAR 0 6
32140: PUSH
32141: LD_VAR 0 6
32145: PPUSH
32146: LD_VAR 0 5
32150: PPUSH
32151: LD_VAR 0 7
32155: PUSH
32156: LD_INT 1
32158: ARRAY
32159: PUSH
32160: LD_VAR 0 8
32164: ARRAY
32165: PUSH
32166: LD_VAR 0 7
32170: PUSH
32171: LD_INT 2
32173: ARRAY
32174: PUSH
32175: LD_VAR 0 8
32179: ARRAY
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PPUSH
32185: CALL_OW 1
32189: ST_TO_ADDR
// end ;
32190: GO 32111
32192: POP
32193: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
32194: LD_ADDR_EXP 70
32198: PUSH
32199: LD_EXP 70
32203: PPUSH
32204: LD_VAR 0 1
32208: PPUSH
32209: LD_VAR 0 6
32213: PPUSH
32214: CALL_OW 1
32218: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
32219: LD_ADDR_EXP 72
32223: PUSH
32224: LD_EXP 72
32228: PPUSH
32229: LD_VAR 0 1
32233: PPUSH
32234: LD_VAR 0 3
32238: PPUSH
32239: CALL_OW 1
32243: ST_TO_ADDR
// end ;
32244: LD_VAR 0 4
32248: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
32249: LD_INT 0
32251: PPUSH
// if not mc_bases [ base ] then
32252: LD_EXP 57
32256: PUSH
32257: LD_VAR 0 1
32261: ARRAY
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32292
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
32267: LD_ADDR_EXP 62
32271: PUSH
32272: LD_EXP 62
32276: PPUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: LD_VAR 0 2
32286: PPUSH
32287: CALL_OW 1
32291: ST_TO_ADDR
// end ;
32292: LD_VAR 0 3
32296: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
32297: LD_INT 0
32299: PPUSH
// if not mc_bases [ base ] then
32300: LD_EXP 57
32304: PUSH
32305: LD_VAR 0 1
32309: ARRAY
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 32371
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
32315: LD_ADDR_EXP 62
32319: PUSH
32320: LD_EXP 62
32324: PPUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: LD_EXP 62
32334: PUSH
32335: LD_VAR 0 1
32339: ARRAY
32340: PPUSH
32341: LD_EXP 62
32345: PUSH
32346: LD_VAR 0 1
32350: ARRAY
32351: PUSH
32352: LD_INT 1
32354: PLUS
32355: PPUSH
32356: LD_VAR 0 2
32360: PPUSH
32361: CALL_OW 2
32365: PPUSH
32366: CALL_OW 1
32370: ST_TO_ADDR
// end ;
32371: LD_VAR 0 3
32375: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
32376: LD_INT 0
32378: PPUSH
// if not mc_bases [ base ] then
32379: LD_EXP 57
32383: PUSH
32384: LD_VAR 0 1
32388: ARRAY
32389: NOT
32390: IFFALSE 32394
// exit ;
32392: GO 32419
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
32394: LD_ADDR_EXP 78
32398: PUSH
32399: LD_EXP 78
32403: PPUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 1
32418: ST_TO_ADDR
// end ;
32419: LD_VAR 0 3
32423: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
32424: LD_INT 0
32426: PPUSH
// if not mc_bases [ base ] then
32427: LD_EXP 57
32431: PUSH
32432: LD_VAR 0 1
32436: ARRAY
32437: NOT
32438: IFFALSE 32442
// exit ;
32440: GO 32482
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
32442: LD_ADDR_EXP 78
32446: PUSH
32447: LD_EXP 78
32451: PPUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_EXP 78
32461: PUSH
32462: LD_VAR 0 1
32466: ARRAY
32467: PUSH
32468: LD_VAR 0 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: ADD
32476: PPUSH
32477: CALL_OW 1
32481: ST_TO_ADDR
// end ;
32482: LD_VAR 0 3
32486: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
32487: LD_INT 0
32489: PPUSH
// if not mc_bases [ base ] then
32490: LD_EXP 57
32494: PUSH
32495: LD_VAR 0 1
32499: ARRAY
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 32617
// mc_defender := Replace ( mc_defender , base , deflist ) ;
32505: LD_ADDR_EXP 79
32509: PUSH
32510: LD_EXP 79
32514: PPUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: CALL_OW 1
32529: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
32530: LD_ADDR_EXP 68
32534: PUSH
32535: LD_EXP 68
32539: PPUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: LD_VAR 0 2
32549: PUSH
32550: LD_INT 0
32552: PLUS
32553: PPUSH
32554: CALL_OW 1
32558: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
32559: LD_ADDR_EXP 76
32563: PUSH
32564: LD_EXP 76
32568: PPUSH
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_EXP 76
32578: PUSH
32579: LD_VAR 0 1
32583: ARRAY
32584: PUSH
32585: LD_EXP 79
32589: PUSH
32590: LD_VAR 0 1
32594: ARRAY
32595: PPUSH
32596: LD_INT 21
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 72
32610: UNION
32611: PPUSH
32612: CALL_OW 1
32616: ST_TO_ADDR
// end ;
32617: LD_VAR 0 3
32621: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
32622: LD_INT 0
32624: PPUSH
// if not mc_bases [ base ] then
32625: LD_EXP 57
32629: PUSH
32630: LD_VAR 0 1
32634: ARRAY
32635: NOT
32636: IFFALSE 32640
// exit ;
32638: GO 32665
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
32640: LD_ADDR_EXP 68
32644: PUSH
32645: LD_EXP 68
32649: PPUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: LD_VAR 0 2
32659: PPUSH
32660: CALL_OW 1
32664: ST_TO_ADDR
// end ;
32665: LD_VAR 0 3
32669: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
32670: LD_INT 0
32672: PPUSH
32673: PPUSH
32674: PPUSH
32675: PPUSH
// if not mc_bases [ base ] then
32676: LD_EXP 57
32680: PUSH
32681: LD_VAR 0 1
32685: ARRAY
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 32756
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
32691: LD_ADDR_EXP 77
32695: PUSH
32696: LD_EXP 77
32700: PPUSH
32701: LD_VAR 0 1
32705: PUSH
32706: LD_EXP 77
32710: PUSH
32711: LD_VAR 0 1
32715: ARRAY
32716: PUSH
32717: LD_INT 1
32719: PLUS
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PPUSH
32725: LD_VAR 0 1
32729: PUSH
32730: LD_VAR 0 2
32734: PUSH
32735: LD_VAR 0 3
32739: PUSH
32740: LD_VAR 0 4
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL 45045 0 3
32755: ST_TO_ADDR
// end ;
32756: LD_VAR 0 5
32760: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
32761: LD_INT 0
32763: PPUSH
// if not mc_bases [ base ] then
32764: LD_EXP 57
32768: PUSH
32769: LD_VAR 0 1
32773: ARRAY
32774: NOT
32775: IFFALSE 32779
// exit ;
32777: GO 32804
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
32779: LD_ADDR_EXP 93
32783: PUSH
32784: LD_EXP 93
32788: PPUSH
32789: LD_VAR 0 1
32793: PPUSH
32794: LD_VAR 0 2
32798: PPUSH
32799: CALL_OW 1
32803: ST_TO_ADDR
// end ;
32804: LD_VAR 0 3
32808: RET
// export function MC_GetMinesField ( base ) ; begin
32809: LD_INT 0
32811: PPUSH
// result := mc_mines [ base ] ;
32812: LD_ADDR_VAR 0 2
32816: PUSH
32817: LD_EXP 70
32821: PUSH
32822: LD_VAR 0 1
32826: ARRAY
32827: ST_TO_ADDR
// end ;
32828: LD_VAR 0 2
32832: RET
// export function MC_GetProduceList ( base ) ; begin
32833: LD_INT 0
32835: PPUSH
// result := mc_produce [ base ] ;
32836: LD_ADDR_VAR 0 2
32840: PUSH
32841: LD_EXP 78
32845: PUSH
32846: LD_VAR 0 1
32850: ARRAY
32851: ST_TO_ADDR
// end ;
32852: LD_VAR 0 2
32856: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
// if not mc_bases then
32861: LD_EXP 57
32865: NOT
32866: IFFALSE 32870
// exit ;
32868: GO 32935
// if mc_bases [ base ] then
32870: LD_EXP 57
32874: PUSH
32875: LD_VAR 0 1
32879: ARRAY
32880: IFFALSE 32935
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: LD_EXP 57
32891: PUSH
32892: LD_VAR 0 1
32896: ARRAY
32897: PPUSH
32898: LD_INT 30
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PPUSH
32910: CALL_OW 72
32914: ST_TO_ADDR
// if result then
32915: LD_VAR 0 3
32919: IFFALSE 32935
// result := result [ 1 ] ;
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_VAR 0 3
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: ST_TO_ADDR
// end ; end ;
32935: LD_VAR 0 3
32939: RET
// export function MC_SetTame ( base , area ) ; begin
32940: LD_INT 0
32942: PPUSH
// if not mc_bases or not base then
32943: LD_EXP 57
32947: NOT
32948: PUSH
32949: LD_VAR 0 1
32953: NOT
32954: OR
32955: IFFALSE 32959
// exit ;
32957: GO 32984
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
32959: LD_ADDR_EXP 85
32963: PUSH
32964: LD_EXP 85
32968: PPUSH
32969: LD_VAR 0 1
32973: PPUSH
32974: LD_VAR 0 2
32978: PPUSH
32979: CALL_OW 1
32983: ST_TO_ADDR
// end ;
32984: LD_VAR 0 3
32988: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
32989: LD_INT 0
32991: PPUSH
32992: PPUSH
// if not mc_bases or not base then
32993: LD_EXP 57
32997: NOT
32998: PUSH
32999: LD_VAR 0 1
33003: NOT
33004: OR
33005: IFFALSE 33009
// exit ;
33007: GO 33111
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: LD_EXP 57
33018: PUSH
33019: LD_VAR 0 1
33023: ARRAY
33024: PPUSH
33025: LD_INT 30
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PPUSH
33037: CALL_OW 72
33041: ST_TO_ADDR
// if not tmp then
33042: LD_VAR 0 4
33046: NOT
33047: IFFALSE 33051
// exit ;
33049: GO 33111
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
33051: LD_ADDR_EXP 89
33055: PUSH
33056: LD_EXP 89
33060: PPUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: LD_EXP 89
33070: PUSH
33071: LD_VAR 0 1
33075: ARRAY
33076: PPUSH
33077: LD_EXP 89
33081: PUSH
33082: LD_VAR 0 1
33086: ARRAY
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: PPUSH
33092: LD_VAR 0 4
33096: PUSH
33097: LD_INT 1
33099: ARRAY
33100: PPUSH
33101: CALL_OW 2
33105: PPUSH
33106: CALL_OW 1
33110: ST_TO_ADDR
// end ;
33111: LD_VAR 0 3
33115: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
33116: LD_INT 0
33118: PPUSH
33119: PPUSH
// if not mc_bases or not base or not kinds then
33120: LD_EXP 57
33124: NOT
33125: PUSH
33126: LD_VAR 0 1
33130: NOT
33131: OR
33132: PUSH
33133: LD_VAR 0 2
33137: NOT
33138: OR
33139: IFFALSE 33143
// exit ;
33141: GO 33204
// for i in kinds do
33143: LD_ADDR_VAR 0 4
33147: PUSH
33148: LD_VAR 0 2
33152: PUSH
33153: FOR_IN
33154: IFFALSE 33202
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
33156: LD_ADDR_EXP 91
33160: PUSH
33161: LD_EXP 91
33165: PPUSH
33166: LD_VAR 0 1
33170: PUSH
33171: LD_EXP 91
33175: PUSH
33176: LD_VAR 0 1
33180: ARRAY
33181: PUSH
33182: LD_INT 1
33184: PLUS
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PPUSH
33190: LD_VAR 0 4
33194: PPUSH
33195: CALL 45045 0 3
33199: ST_TO_ADDR
33200: GO 33153
33202: POP
33203: POP
// end ;
33204: LD_VAR 0 3
33208: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
33209: LD_INT 0
33211: PPUSH
// if not mc_bases or not base or not areas then
33212: LD_EXP 57
33216: NOT
33217: PUSH
33218: LD_VAR 0 1
33222: NOT
33223: OR
33224: PUSH
33225: LD_VAR 0 2
33229: NOT
33230: OR
33231: IFFALSE 33235
// exit ;
33233: GO 33260
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
33235: LD_ADDR_EXP 75
33239: PUSH
33240: LD_EXP 75
33244: PPUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: LD_VAR 0 2
33254: PPUSH
33255: CALL_OW 1
33259: ST_TO_ADDR
// end ;
33260: LD_VAR 0 3
33264: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
33265: LD_INT 0
33267: PPUSH
// if not mc_bases or not base then
33268: LD_EXP 57
33272: NOT
33273: PUSH
33274: LD_VAR 0 1
33278: NOT
33279: OR
33280: IFFALSE 33284
// exit ;
33282: GO 33318
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
33284: LD_ADDR_EXP 92
33288: PUSH
33289: LD_EXP 92
33293: PPUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_VAR 0 3
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PPUSH
33313: CALL_OW 1
33317: ST_TO_ADDR
// end ;
33318: LD_VAR 0 4
33322: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
33323: LD_INT 0
33325: PPUSH
33326: PPUSH
33327: PPUSH
// if not mc_bases or not base or not ext_list then
33328: LD_EXP 57
33332: NOT
33333: PUSH
33334: LD_VAR 0 1
33338: NOT
33339: OR
33340: PUSH
33341: LD_VAR 0 5
33345: NOT
33346: OR
33347: IFFALSE 33351
// exit ;
33349: GO 33524
// tmp := GetFacExtXYD ( x , y , d ) ;
33351: LD_ADDR_VAR 0 8
33355: PUSH
33356: LD_VAR 0 2
33360: PPUSH
33361: LD_VAR 0 3
33365: PPUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL 77743 0 3
33375: ST_TO_ADDR
// if not tmp then
33376: LD_VAR 0 8
33380: NOT
33381: IFFALSE 33385
// exit ;
33383: GO 33524
// for i in tmp do
33385: LD_ADDR_VAR 0 7
33389: PUSH
33390: LD_VAR 0 8
33394: PUSH
33395: FOR_IN
33396: IFFALSE 33522
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
33398: LD_ADDR_EXP 62
33402: PUSH
33403: LD_EXP 62
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: LD_EXP 62
33417: PUSH
33418: LD_VAR 0 1
33422: ARRAY
33423: PPUSH
33424: LD_EXP 62
33428: PUSH
33429: LD_VAR 0 1
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: PLUS
33438: PPUSH
33439: LD_VAR 0 5
33443: PUSH
33444: LD_INT 1
33446: ARRAY
33447: PUSH
33448: LD_VAR 0 7
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: PUSH
33457: LD_VAR 0 7
33461: PUSH
33462: LD_INT 2
33464: ARRAY
33465: PUSH
33466: LD_VAR 0 7
33470: PUSH
33471: LD_INT 3
33473: ARRAY
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: PPUSH
33481: CALL_OW 2
33485: PPUSH
33486: CALL_OW 1
33490: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
33491: LD_ADDR_VAR 0 5
33495: PUSH
33496: LD_VAR 0 5
33500: PPUSH
33501: LD_INT 1
33503: PPUSH
33504: CALL_OW 3
33508: ST_TO_ADDR
// if not ext_list then
33509: LD_VAR 0 5
33513: NOT
33514: IFFALSE 33520
// exit ;
33516: POP
33517: POP
33518: GO 33524
// end ;
33520: GO 33395
33522: POP
33523: POP
// end ;
33524: LD_VAR 0 6
33528: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
33529: LD_INT 0
33531: PPUSH
// if not mc_bases or not base or not weapon_list then
33532: LD_EXP 57
33536: NOT
33537: PUSH
33538: LD_VAR 0 1
33542: NOT
33543: OR
33544: PUSH
33545: LD_VAR 0 2
33549: NOT
33550: OR
33551: IFFALSE 33555
// exit ;
33553: GO 33580
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
33555: LD_ADDR_EXP 95
33559: PUSH
33560: LD_EXP 95
33564: PPUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: LD_VAR 0 2
33574: PPUSH
33575: CALL_OW 1
33579: ST_TO_ADDR
// end ;
33580: LD_VAR 0 3
33584: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
33585: LD_INT 0
33587: PPUSH
// if not mc_bases or not base or not tech_list then
33588: LD_EXP 57
33592: NOT
33593: PUSH
33594: LD_VAR 0 1
33598: NOT
33599: OR
33600: PUSH
33601: LD_VAR 0 2
33605: NOT
33606: OR
33607: IFFALSE 33611
// exit ;
33609: GO 33636
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
33611: LD_ADDR_EXP 84
33615: PUSH
33616: LD_EXP 84
33620: PPUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: LD_VAR 0 2
33630: PPUSH
33631: CALL_OW 1
33635: ST_TO_ADDR
// end ;
33636: LD_VAR 0 3
33640: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
33641: LD_INT 0
33643: PPUSH
// if not mc_bases or not parking_area or not base then
33644: LD_EXP 57
33648: NOT
33649: PUSH
33650: LD_VAR 0 2
33654: NOT
33655: OR
33656: PUSH
33657: LD_VAR 0 1
33661: NOT
33662: OR
33663: IFFALSE 33667
// exit ;
33665: GO 33692
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
33667: LD_ADDR_EXP 81
33671: PUSH
33672: LD_EXP 81
33676: PPUSH
33677: LD_VAR 0 1
33681: PPUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: CALL_OW 1
33691: ST_TO_ADDR
// end ;
33692: LD_VAR 0 3
33696: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
33697: LD_INT 0
33699: PPUSH
// if not mc_bases or not base or not scan_area then
33700: LD_EXP 57
33704: NOT
33705: PUSH
33706: LD_VAR 0 1
33710: NOT
33711: OR
33712: PUSH
33713: LD_VAR 0 2
33717: NOT
33718: OR
33719: IFFALSE 33723
// exit ;
33721: GO 33748
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
33723: LD_ADDR_EXP 82
33727: PUSH
33728: LD_EXP 82
33732: PPUSH
33733: LD_VAR 0 1
33737: PPUSH
33738: LD_VAR 0 2
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
// end ; end_of_file
33748: LD_VAR 0 3
33752: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
33753: LD_INT 0
33755: PPUSH
33756: PPUSH
33757: PPUSH
// if not mc_bases then
33758: LD_EXP 57
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 33932
// for i = 1 to mc_bases do
33767: LD_ADDR_VAR 0 4
33771: PUSH
33772: DOUBLE
33773: LD_INT 1
33775: DEC
33776: ST_TO_ADDR
33777: LD_EXP 57
33781: PUSH
33782: FOR_TO
33783: IFFALSE 33930
// begin if sci in mc_bases [ i ] then
33785: LD_VAR 0 2
33789: PUSH
33790: LD_EXP 57
33794: PUSH
33795: LD_VAR 0 4
33799: ARRAY
33800: IN
33801: IFFALSE 33928
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
33803: LD_ADDR_EXP 86
33807: PUSH
33808: LD_EXP 86
33812: PPUSH
33813: LD_VAR 0 4
33817: PUSH
33818: LD_EXP 86
33822: PUSH
33823: LD_VAR 0 4
33827: ARRAY
33828: PUSH
33829: LD_INT 1
33831: PLUS
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PPUSH
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL 45045 0 3
33846: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
33847: LD_ADDR_VAR 0 5
33851: PUSH
33852: LD_EXP 57
33856: PUSH
33857: LD_VAR 0 4
33861: ARRAY
33862: PPUSH
33863: LD_INT 2
33865: PUSH
33866: LD_INT 30
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 30
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: PPUSH
33891: CALL_OW 72
33895: PPUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 74
33905: ST_TO_ADDR
// if tmp then
33906: LD_VAR 0 5
33910: IFFALSE 33926
// ComStandNearbyBuilding ( ape , tmp ) ;
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 5
33921: PPUSH
33922: CALL 39287 0 2
// break ;
33926: GO 33930
// end ; end ;
33928: GO 33782
33930: POP
33931: POP
// end ;
33932: LD_VAR 0 3
33936: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
33941: PPUSH
// if not mc_bases then
33942: LD_EXP 57
33946: NOT
33947: IFFALSE 33951
// exit ;
33949: GO 34040
// for i = 1 to mc_bases do
33951: LD_ADDR_VAR 0 4
33955: PUSH
33956: DOUBLE
33957: LD_INT 1
33959: DEC
33960: ST_TO_ADDR
33961: LD_EXP 57
33965: PUSH
33966: FOR_TO
33967: IFFALSE 34038
// begin if building in mc_busy_turret_list [ i ] then
33969: LD_VAR 0 1
33973: PUSH
33974: LD_EXP 67
33978: PUSH
33979: LD_VAR 0 4
33983: ARRAY
33984: IN
33985: IFFALSE 34036
// begin tmp := mc_busy_turret_list [ i ] diff building ;
33987: LD_ADDR_VAR 0 5
33991: PUSH
33992: LD_EXP 67
33996: PUSH
33997: LD_VAR 0 4
34001: ARRAY
34002: PUSH
34003: LD_VAR 0 1
34007: DIFF
34008: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
34009: LD_ADDR_EXP 67
34013: PUSH
34014: LD_EXP 67
34018: PPUSH
34019: LD_VAR 0 4
34023: PPUSH
34024: LD_VAR 0 5
34028: PPUSH
34029: CALL_OW 1
34033: ST_TO_ADDR
// break ;
34034: GO 34038
// end ; end ;
34036: GO 33966
34038: POP
34039: POP
// end ;
34040: LD_VAR 0 3
34044: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
34045: LD_INT 0
34047: PPUSH
34048: PPUSH
34049: PPUSH
// if not mc_bases then
34050: LD_EXP 57
34054: NOT
34055: IFFALSE 34059
// exit ;
34057: GO 34258
// for i = 1 to mc_bases do
34059: LD_ADDR_VAR 0 5
34063: PUSH
34064: DOUBLE
34065: LD_INT 1
34067: DEC
34068: ST_TO_ADDR
34069: LD_EXP 57
34073: PUSH
34074: FOR_TO
34075: IFFALSE 34256
// if building in mc_bases [ i ] then
34077: LD_VAR 0 1
34081: PUSH
34082: LD_EXP 57
34086: PUSH
34087: LD_VAR 0 5
34091: ARRAY
34092: IN
34093: IFFALSE 34254
// begin tmp := mc_bases [ i ] diff building ;
34095: LD_ADDR_VAR 0 6
34099: PUSH
34100: LD_EXP 57
34104: PUSH
34105: LD_VAR 0 5
34109: ARRAY
34110: PUSH
34111: LD_VAR 0 1
34115: DIFF
34116: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
34117: LD_ADDR_EXP 57
34121: PUSH
34122: LD_EXP 57
34126: PPUSH
34127: LD_VAR 0 5
34131: PPUSH
34132: LD_VAR 0 6
34136: PPUSH
34137: CALL_OW 1
34141: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
34142: LD_VAR 0 1
34146: PUSH
34147: LD_EXP 65
34151: PUSH
34152: LD_VAR 0 5
34156: ARRAY
34157: IN
34158: IFFALSE 34197
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
34160: LD_ADDR_EXP 65
34164: PUSH
34165: LD_EXP 65
34169: PPUSH
34170: LD_VAR 0 5
34174: PPUSH
34175: LD_EXP 65
34179: PUSH
34180: LD_VAR 0 5
34184: ARRAY
34185: PUSH
34186: LD_VAR 0 1
34190: DIFF
34191: PPUSH
34192: CALL_OW 1
34196: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
34197: LD_VAR 0 1
34201: PUSH
34202: LD_EXP 66
34206: PUSH
34207: LD_VAR 0 5
34211: ARRAY
34212: IN
34213: IFFALSE 34252
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
34215: LD_ADDR_EXP 66
34219: PUSH
34220: LD_EXP 66
34224: PPUSH
34225: LD_VAR 0 5
34229: PPUSH
34230: LD_EXP 66
34234: PUSH
34235: LD_VAR 0 5
34239: ARRAY
34240: PUSH
34241: LD_VAR 0 1
34245: DIFF
34246: PPUSH
34247: CALL_OW 1
34251: ST_TO_ADDR
// break ;
34252: GO 34256
// end ;
34254: GO 34074
34256: POP
34257: POP
// end ;
34258: LD_VAR 0 4
34262: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
34263: LD_INT 0
34265: PPUSH
34266: PPUSH
34267: PPUSH
// if not mc_bases or not side in mc_sides then
34268: LD_EXP 57
34272: NOT
34273: PUSH
34274: LD_VAR 0 3
34278: PUSH
34279: LD_EXP 83
34283: IN
34284: NOT
34285: OR
34286: IFFALSE 34290
// exit ;
34288: GO 34413
// for i = 1 to mc_vehicles do
34290: LD_ADDR_VAR 0 6
34294: PUSH
34295: DOUBLE
34296: LD_INT 1
34298: DEC
34299: ST_TO_ADDR
34300: LD_EXP 76
34304: PUSH
34305: FOR_TO
34306: IFFALSE 34411
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
34308: LD_VAR 0 2
34312: PUSH
34313: LD_EXP 76
34317: PUSH
34318: LD_VAR 0 6
34322: ARRAY
34323: IN
34324: PUSH
34325: LD_VAR 0 1
34329: PUSH
34330: LD_EXP 76
34334: PUSH
34335: LD_VAR 0 6
34339: ARRAY
34340: IN
34341: OR
34342: IFFALSE 34409
// begin tmp := mc_vehicles [ i ] diff old ;
34344: LD_ADDR_VAR 0 7
34348: PUSH
34349: LD_EXP 76
34353: PUSH
34354: LD_VAR 0 6
34358: ARRAY
34359: PUSH
34360: LD_VAR 0 2
34364: DIFF
34365: ST_TO_ADDR
// tmp := tmp diff new ;
34366: LD_ADDR_VAR 0 7
34370: PUSH
34371: LD_VAR 0 7
34375: PUSH
34376: LD_VAR 0 1
34380: DIFF
34381: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
34382: LD_ADDR_EXP 76
34386: PUSH
34387: LD_EXP 76
34391: PPUSH
34392: LD_VAR 0 6
34396: PPUSH
34397: LD_VAR 0 7
34401: PPUSH
34402: CALL_OW 1
34406: ST_TO_ADDR
// break ;
34407: GO 34411
// end ;
34409: GO 34305
34411: POP
34412: POP
// end ;
34413: LD_VAR 0 5
34417: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
34418: LD_INT 0
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
// if not mc_bases then
34424: LD_EXP 57
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34725
// side := GetSide ( vehicle ) ;
34433: LD_ADDR_VAR 0 5
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: CALL_OW 255
34447: ST_TO_ADDR
// for i = 1 to mc_bases do
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: DOUBLE
34454: LD_INT 1
34456: DEC
34457: ST_TO_ADDR
34458: LD_EXP 57
34462: PUSH
34463: FOR_TO
34464: IFFALSE 34723
// begin if factory in mc_bases [ i ] then
34466: LD_VAR 0 2
34470: PUSH
34471: LD_EXP 57
34475: PUSH
34476: LD_VAR 0 4
34480: ARRAY
34481: IN
34482: IFFALSE 34721
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
34484: LD_EXP 79
34488: PUSH
34489: LD_VAR 0 4
34493: ARRAY
34494: PUSH
34495: LD_EXP 68
34499: PUSH
34500: LD_VAR 0 4
34504: ARRAY
34505: LESS
34506: IFFALSE 34677
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
34508: LD_ADDR_EXP 79
34512: PUSH
34513: LD_EXP 79
34517: PPUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: LD_EXP 79
34527: PUSH
34528: LD_VAR 0 4
34532: ARRAY
34533: PUSH
34534: LD_VAR 0 1
34538: ADD
34539: PPUSH
34540: CALL_OW 1
34544: ST_TO_ADDR
// if not mc_scan [ i ] then
34545: LD_EXP 80
34549: PUSH
34550: LD_VAR 0 4
34554: ARRAY
34555: NOT
34556: IFFALSE 34675
// begin if GetControl ( vehicle ) = control_remote then
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 263
34567: PUSH
34568: LD_INT 2
34570: EQUAL
34571: IFFALSE 34591
// repeat wait ( 0 0$1 ) ;
34573: LD_INT 35
34575: PPUSH
34576: CALL_OW 67
// until IsControledBy ( vehicle ) ;
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 312
34589: IFFALSE 34573
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
34591: LD_VAR 0 1
34595: PPUSH
34596: LD_EXP 81
34600: PUSH
34601: LD_VAR 0 4
34605: ARRAY
34606: PPUSH
34607: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 263
34620: PUSH
34621: LD_INT 1
34623: NONEQUAL
34624: IFFALSE 34628
// break ;
34626: GO 34723
// repeat wait ( 0 0$1 ) ;
34628: LD_INT 35
34630: PPUSH
34631: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
34635: LD_VAR 0 1
34639: PPUSH
34640: LD_EXP 81
34644: PUSH
34645: LD_VAR 0 4
34649: ARRAY
34650: PPUSH
34651: CALL_OW 308
34655: IFFALSE 34628
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
34657: LD_VAR 0 1
34661: PPUSH
34662: CALL_OW 311
34666: PPUSH
34667: CALL_OW 121
// exit ;
34671: POP
34672: POP
34673: GO 34725
// end ; end else
34675: GO 34721
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
34677: LD_ADDR_EXP 76
34681: PUSH
34682: LD_EXP 76
34686: PPUSH
34687: LD_VAR 0 4
34691: PUSH
34692: LD_EXP 76
34696: PUSH
34697: LD_VAR 0 4
34701: ARRAY
34702: PUSH
34703: LD_INT 1
34705: PLUS
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL 45045 0 3
34720: ST_TO_ADDR
// end ; end ;
34721: GO 34463
34723: POP
34724: POP
// end ;
34725: LD_VAR 0 3
34729: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
34730: LD_INT 0
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
// if not mc_bases then
34736: LD_EXP 57
34740: NOT
34741: IFFALSE 34745
// exit ;
34743: GO 35098
// repeat wait ( 0 0$1 ) ;
34745: LD_INT 35
34747: PPUSH
34748: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
34752: LD_VAR 0 2
34756: PPUSH
34757: LD_VAR 0 3
34761: PPUSH
34762: CALL_OW 284
34766: IFFALSE 34745
// if GetResourceTypeXY ( x , y ) = mat_artefact then
34768: LD_VAR 0 2
34772: PPUSH
34773: LD_VAR 0 3
34777: PPUSH
34778: CALL_OW 283
34782: PUSH
34783: LD_INT 4
34785: EQUAL
34786: IFFALSE 34790
// exit ;
34788: GO 35098
// for i = 1 to mc_bases do
34790: LD_ADDR_VAR 0 7
34794: PUSH
34795: DOUBLE
34796: LD_INT 1
34798: DEC
34799: ST_TO_ADDR
34800: LD_EXP 57
34804: PUSH
34805: FOR_TO
34806: IFFALSE 35096
// begin if mc_crates_area [ i ] then
34808: LD_EXP 75
34812: PUSH
34813: LD_VAR 0 7
34817: ARRAY
34818: IFFALSE 34929
// for j in mc_crates_area [ i ] do
34820: LD_ADDR_VAR 0 8
34824: PUSH
34825: LD_EXP 75
34829: PUSH
34830: LD_VAR 0 7
34834: ARRAY
34835: PUSH
34836: FOR_IN
34837: IFFALSE 34927
// if InArea ( x , y , j ) then
34839: LD_VAR 0 2
34843: PPUSH
34844: LD_VAR 0 3
34848: PPUSH
34849: LD_VAR 0 8
34853: PPUSH
34854: CALL_OW 309
34858: IFFALSE 34925
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34860: LD_ADDR_EXP 73
34864: PUSH
34865: LD_EXP 73
34869: PPUSH
34870: LD_VAR 0 7
34874: PUSH
34875: LD_EXP 73
34879: PUSH
34880: LD_VAR 0 7
34884: ARRAY
34885: PUSH
34886: LD_INT 1
34888: PLUS
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PPUSH
34894: LD_VAR 0 4
34898: PUSH
34899: LD_VAR 0 2
34903: PUSH
34904: LD_VAR 0 3
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: PPUSH
34914: CALL 45045 0 3
34918: ST_TO_ADDR
// exit ;
34919: POP
34920: POP
34921: POP
34922: POP
34923: GO 35098
// end ;
34925: GO 34836
34927: POP
34928: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34929: LD_ADDR_VAR 0 9
34933: PUSH
34934: LD_EXP 57
34938: PUSH
34939: LD_VAR 0 7
34943: ARRAY
34944: PPUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 30
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 30
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: PPUSH
34973: CALL_OW 72
34977: ST_TO_ADDR
// if not depot then
34978: LD_VAR 0 9
34982: NOT
34983: IFFALSE 34987
// continue ;
34985: GO 34805
// for j in depot do
34987: LD_ADDR_VAR 0 8
34991: PUSH
34992: LD_VAR 0 9
34996: PUSH
34997: FOR_IN
34998: IFFALSE 35092
// if GetDistUnitXY ( j , x , y ) < 30 then
35000: LD_VAR 0 8
35004: PPUSH
35005: LD_VAR 0 2
35009: PPUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: CALL_OW 297
35019: PUSH
35020: LD_INT 30
35022: LESS
35023: IFFALSE 35090
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
35025: LD_ADDR_EXP 73
35029: PUSH
35030: LD_EXP 73
35034: PPUSH
35035: LD_VAR 0 7
35039: PUSH
35040: LD_EXP 73
35044: PUSH
35045: LD_VAR 0 7
35049: ARRAY
35050: PUSH
35051: LD_INT 1
35053: PLUS
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PPUSH
35059: LD_VAR 0 4
35063: PUSH
35064: LD_VAR 0 2
35068: PUSH
35069: LD_VAR 0 3
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: PPUSH
35079: CALL 45045 0 3
35083: ST_TO_ADDR
// exit ;
35084: POP
35085: POP
35086: POP
35087: POP
35088: GO 35098
// end ;
35090: GO 34997
35092: POP
35093: POP
// end ;
35094: GO 34805
35096: POP
35097: POP
// end ;
35098: LD_VAR 0 6
35102: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
35103: LD_INT 0
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
// side := GetSide ( lab ) ;
35109: LD_ADDR_VAR 0 4
35113: PUSH
35114: LD_VAR 0 2
35118: PPUSH
35119: CALL_OW 255
35123: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
35124: LD_VAR 0 4
35128: PUSH
35129: LD_EXP 83
35133: IN
35134: NOT
35135: PUSH
35136: LD_EXP 84
35140: NOT
35141: OR
35142: PUSH
35143: LD_EXP 57
35147: NOT
35148: OR
35149: IFFALSE 35153
// exit ;
35151: GO 35386
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
35153: LD_ADDR_EXP 84
35157: PUSH
35158: LD_EXP 84
35162: PPUSH
35163: LD_VAR 0 4
35167: PPUSH
35168: LD_EXP 84
35172: PUSH
35173: LD_VAR 0 4
35177: ARRAY
35178: PUSH
35179: LD_VAR 0 1
35183: DIFF
35184: PPUSH
35185: CALL_OW 1
35189: ST_TO_ADDR
// for i = 1 to mc_bases do
35190: LD_ADDR_VAR 0 5
35194: PUSH
35195: DOUBLE
35196: LD_INT 1
35198: DEC
35199: ST_TO_ADDR
35200: LD_EXP 57
35204: PUSH
35205: FOR_TO
35206: IFFALSE 35384
// begin if lab in mc_bases [ i ] then
35208: LD_VAR 0 2
35212: PUSH
35213: LD_EXP 57
35217: PUSH
35218: LD_VAR 0 5
35222: ARRAY
35223: IN
35224: IFFALSE 35382
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
35226: LD_VAR 0 1
35230: PUSH
35231: LD_INT 11
35233: PUSH
35234: LD_INT 4
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: IN
35249: PUSH
35250: LD_EXP 87
35254: PUSH
35255: LD_VAR 0 5
35259: ARRAY
35260: AND
35261: IFFALSE 35382
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
35263: LD_ADDR_VAR 0 6
35267: PUSH
35268: LD_EXP 87
35272: PUSH
35273: LD_VAR 0 5
35277: ARRAY
35278: PUSH
35279: LD_INT 1
35281: ARRAY
35282: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35283: LD_ADDR_EXP 87
35287: PUSH
35288: LD_EXP 87
35292: PPUSH
35293: LD_VAR 0 5
35297: PPUSH
35298: EMPTY
35299: PPUSH
35300: CALL_OW 1
35304: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
35305: LD_VAR 0 6
35309: PPUSH
35310: LD_INT 0
35312: PPUSH
35313: CALL_OW 109
// ComExitBuilding ( tmp ) ;
35317: LD_VAR 0 6
35321: PPUSH
35322: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
35326: LD_ADDR_EXP 86
35330: PUSH
35331: LD_EXP 86
35335: PPUSH
35336: LD_VAR 0 5
35340: PPUSH
35341: LD_EXP 86
35345: PUSH
35346: LD_VAR 0 5
35350: ARRAY
35351: PPUSH
35352: LD_INT 1
35354: PPUSH
35355: LD_VAR 0 6
35359: PPUSH
35360: CALL_OW 2
35364: PPUSH
35365: CALL_OW 1
35369: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
35370: LD_VAR 0 5
35374: PPUSH
35375: LD_INT 112
35377: PPUSH
35378: CALL 19325 0 2
// end ; end ; end ;
35382: GO 35205
35384: POP
35385: POP
// end ;
35386: LD_VAR 0 3
35390: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
35391: LD_INT 0
35393: PPUSH
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
35400: PPUSH
// if not mc_bases then
35401: LD_EXP 57
35405: NOT
35406: IFFALSE 35410
// exit ;
35408: GO 36335
// for i = 1 to mc_bases do
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: DOUBLE
35416: LD_INT 1
35418: DEC
35419: ST_TO_ADDR
35420: LD_EXP 57
35424: PUSH
35425: FOR_TO
35426: IFFALSE 36333
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
35428: LD_VAR 0 1
35432: PUSH
35433: LD_EXP 57
35437: PUSH
35438: LD_VAR 0 3
35442: ARRAY
35443: IN
35444: PUSH
35445: LD_VAR 0 1
35449: PUSH
35450: LD_EXP 64
35454: PUSH
35455: LD_VAR 0 3
35459: ARRAY
35460: IN
35461: OR
35462: PUSH
35463: LD_VAR 0 1
35467: PUSH
35468: LD_EXP 76
35472: PUSH
35473: LD_VAR 0 3
35477: ARRAY
35478: IN
35479: OR
35480: PUSH
35481: LD_VAR 0 1
35485: PUSH
35486: LD_EXP 86
35490: PUSH
35491: LD_VAR 0 3
35495: ARRAY
35496: IN
35497: OR
35498: PUSH
35499: LD_VAR 0 1
35503: PUSH
35504: LD_EXP 87
35508: PUSH
35509: LD_VAR 0 3
35513: ARRAY
35514: IN
35515: OR
35516: IFFALSE 36331
// begin if un in mc_ape [ i ] then
35518: LD_VAR 0 1
35522: PUSH
35523: LD_EXP 86
35527: PUSH
35528: LD_VAR 0 3
35532: ARRAY
35533: IN
35534: IFFALSE 35573
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
35536: LD_ADDR_EXP 86
35540: PUSH
35541: LD_EXP 86
35545: PPUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: LD_EXP 86
35555: PUSH
35556: LD_VAR 0 3
35560: ARRAY
35561: PUSH
35562: LD_VAR 0 1
35566: DIFF
35567: PPUSH
35568: CALL_OW 1
35572: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
35573: LD_VAR 0 1
35577: PUSH
35578: LD_EXP 87
35582: PUSH
35583: LD_VAR 0 3
35587: ARRAY
35588: IN
35589: IFFALSE 35613
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35591: LD_ADDR_EXP 87
35595: PUSH
35596: LD_EXP 87
35600: PPUSH
35601: LD_VAR 0 3
35605: PPUSH
35606: EMPTY
35607: PPUSH
35608: CALL_OW 1
35612: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 247
35622: PUSH
35623: LD_INT 2
35625: EQUAL
35626: PUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 110
35636: PUSH
35637: LD_INT 20
35639: EQUAL
35640: AND
35641: IFFALSE 35744
// begin fac := MC_GetBuilding ( i , b_factory ) ;
35643: LD_ADDR_VAR 0 8
35647: PUSH
35648: LD_VAR 0 3
35652: PPUSH
35653: LD_INT 3
35655: PPUSH
35656: CALL 32857 0 2
35660: ST_TO_ADDR
// if fac then
35661: LD_VAR 0 8
35665: IFFALSE 35744
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
35667: LD_ADDR_VAR 0 9
35671: PUSH
35672: LD_VAR 0 8
35676: PPUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 265
35686: PPUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 262
35696: PPUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: CALL_OW 263
35706: PPUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 264
35716: PPUSH
35717: CALL 42210 0 5
35721: ST_TO_ADDR
// if components then
35722: LD_VAR 0 9
35726: IFFALSE 35742
// MC_InsertProduceList ( i , components ) ;
35728: LD_VAR 0 3
35732: PPUSH
35733: LD_VAR 0 9
35737: PPUSH
35738: CALL 32424 0 2
// break ;
35742: GO 36333
// end ; end ; if GetType ( un ) = unit_building then
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 247
35753: PUSH
35754: LD_INT 3
35756: EQUAL
35757: IFFALSE 36054
// begin btype := GetBType ( un ) ;
35759: LD_ADDR_VAR 0 5
35763: PUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 266
35773: ST_TO_ADDR
// if btype = b_warehouse then
35774: LD_VAR 0 5
35778: PUSH
35779: LD_INT 1
35781: EQUAL
35782: IFFALSE 35800
// begin btype := b_depot ;
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_INT 0
35791: ST_TO_ADDR
// pos := 1 ;
35792: LD_ADDR_VAR 0 6
35796: PUSH
35797: LD_INT 1
35799: ST_TO_ADDR
// end ; if btype = b_factory then
35800: LD_VAR 0 5
35804: PUSH
35805: LD_INT 3
35807: EQUAL
35808: IFFALSE 35826
// begin btype := b_workshop ;
35810: LD_ADDR_VAR 0 5
35814: PUSH
35815: LD_INT 2
35817: ST_TO_ADDR
// pos := 1 ;
35818: LD_ADDR_VAR 0 6
35822: PUSH
35823: LD_INT 1
35825: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
35826: LD_VAR 0 5
35830: PUSH
35831: LD_INT 7
35833: PUSH
35834: LD_INT 8
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: IN
35841: IFFALSE 35851
// btype := b_lab ;
35843: LD_ADDR_VAR 0 5
35847: PUSH
35848: LD_INT 6
35850: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
35851: LD_ADDR_EXP 62
35855: PUSH
35856: LD_EXP 62
35860: PPUSH
35861: LD_VAR 0 3
35865: PUSH
35866: LD_EXP 62
35870: PUSH
35871: LD_VAR 0 3
35875: ARRAY
35876: PUSH
35877: LD_INT 1
35879: PLUS
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PPUSH
35885: LD_VAR 0 5
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 250
35899: PUSH
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 251
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 254
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: PPUSH
35926: CALL 45045 0 3
35930: ST_TO_ADDR
// if pos = 1 then
35931: LD_VAR 0 6
35935: PUSH
35936: LD_INT 1
35938: EQUAL
35939: IFFALSE 36054
// begin tmp := mc_build_list [ i ] ;
35941: LD_ADDR_VAR 0 7
35945: PUSH
35946: LD_EXP 62
35950: PUSH
35951: LD_VAR 0 3
35955: ARRAY
35956: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35957: LD_VAR 0 7
35961: PPUSH
35962: LD_INT 2
35964: PUSH
35965: LD_INT 30
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 30
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: PPUSH
35990: CALL_OW 72
35994: IFFALSE 36004
// pos := 2 ;
35996: LD_ADDR_VAR 0 6
36000: PUSH
36001: LD_INT 2
36003: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
36004: LD_ADDR_VAR 0 7
36008: PUSH
36009: LD_VAR 0 7
36013: PPUSH
36014: LD_VAR 0 6
36018: PPUSH
36019: LD_VAR 0 7
36023: PPUSH
36024: CALL 44936 0 3
36028: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
36029: LD_ADDR_EXP 62
36033: PUSH
36034: LD_EXP 62
36038: PPUSH
36039: LD_VAR 0 3
36043: PPUSH
36044: LD_VAR 0 7
36048: PPUSH
36049: CALL_OW 1
36053: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
36054: LD_VAR 0 1
36058: PUSH
36059: LD_EXP 57
36063: PUSH
36064: LD_VAR 0 3
36068: ARRAY
36069: IN
36070: IFFALSE 36109
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
36072: LD_ADDR_EXP 57
36076: PUSH
36077: LD_EXP 57
36081: PPUSH
36082: LD_VAR 0 3
36086: PPUSH
36087: LD_EXP 57
36091: PUSH
36092: LD_VAR 0 3
36096: ARRAY
36097: PUSH
36098: LD_VAR 0 1
36102: DIFF
36103: PPUSH
36104: CALL_OW 1
36108: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
36109: LD_VAR 0 1
36113: PUSH
36114: LD_EXP 64
36118: PUSH
36119: LD_VAR 0 3
36123: ARRAY
36124: IN
36125: IFFALSE 36164
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
36127: LD_ADDR_EXP 64
36131: PUSH
36132: LD_EXP 64
36136: PPUSH
36137: LD_VAR 0 3
36141: PPUSH
36142: LD_EXP 64
36146: PUSH
36147: LD_VAR 0 3
36151: ARRAY
36152: PUSH
36153: LD_VAR 0 1
36157: DIFF
36158: PPUSH
36159: CALL_OW 1
36163: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
36164: LD_VAR 0 1
36168: PUSH
36169: LD_EXP 76
36173: PUSH
36174: LD_VAR 0 3
36178: ARRAY
36179: IN
36180: IFFALSE 36219
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
36182: LD_ADDR_EXP 76
36186: PUSH
36187: LD_EXP 76
36191: PPUSH
36192: LD_VAR 0 3
36196: PPUSH
36197: LD_EXP 76
36201: PUSH
36202: LD_VAR 0 3
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 1
36212: DIFF
36213: PPUSH
36214: CALL_OW 1
36218: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
36219: LD_VAR 0 1
36223: PUSH
36224: LD_EXP 66
36228: PUSH
36229: LD_VAR 0 3
36233: ARRAY
36234: IN
36235: IFFALSE 36274
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
36237: LD_ADDR_EXP 66
36241: PUSH
36242: LD_EXP 66
36246: PPUSH
36247: LD_VAR 0 3
36251: PPUSH
36252: LD_EXP 66
36256: PUSH
36257: LD_VAR 0 3
36261: ARRAY
36262: PUSH
36263: LD_VAR 0 1
36267: DIFF
36268: PPUSH
36269: CALL_OW 1
36273: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
36274: LD_VAR 0 1
36278: PUSH
36279: LD_EXP 65
36283: PUSH
36284: LD_VAR 0 3
36288: ARRAY
36289: IN
36290: IFFALSE 36329
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
36292: LD_ADDR_EXP 65
36296: PUSH
36297: LD_EXP 65
36301: PPUSH
36302: LD_VAR 0 3
36306: PPUSH
36307: LD_EXP 65
36311: PUSH
36312: LD_VAR 0 3
36316: ARRAY
36317: PUSH
36318: LD_VAR 0 1
36322: DIFF
36323: PPUSH
36324: CALL_OW 1
36328: ST_TO_ADDR
// end ; break ;
36329: GO 36333
// end ;
36331: GO 35425
36333: POP
36334: POP
// end ;
36335: LD_VAR 0 2
36339: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
36344: PPUSH
// if not mc_bases then
36345: LD_EXP 57
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36569
// for i = 1 to mc_bases do
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: DOUBLE
36360: LD_INT 1
36362: DEC
36363: ST_TO_ADDR
36364: LD_EXP 57
36368: PUSH
36369: FOR_TO
36370: IFFALSE 36567
// begin if building in mc_construct_list [ i ] then
36372: LD_VAR 0 1
36376: PUSH
36377: LD_EXP 64
36381: PUSH
36382: LD_VAR 0 3
36386: ARRAY
36387: IN
36388: IFFALSE 36565
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36390: LD_ADDR_EXP 64
36394: PUSH
36395: LD_EXP 64
36399: PPUSH
36400: LD_VAR 0 3
36404: PPUSH
36405: LD_EXP 64
36409: PUSH
36410: LD_VAR 0 3
36414: ARRAY
36415: PUSH
36416: LD_VAR 0 1
36420: DIFF
36421: PPUSH
36422: CALL_OW 1
36426: ST_TO_ADDR
// if building in mc_lab [ i ] then
36427: LD_VAR 0 1
36431: PUSH
36432: LD_EXP 90
36436: PUSH
36437: LD_VAR 0 3
36441: ARRAY
36442: IN
36443: IFFALSE 36498
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
36445: LD_ADDR_EXP 91
36449: PUSH
36450: LD_EXP 91
36454: PPUSH
36455: LD_VAR 0 3
36459: PPUSH
36460: LD_EXP 91
36464: PUSH
36465: LD_VAR 0 3
36469: ARRAY
36470: PPUSH
36471: LD_INT 1
36473: PPUSH
36474: LD_EXP 91
36478: PUSH
36479: LD_VAR 0 3
36483: ARRAY
36484: PPUSH
36485: LD_INT 0
36487: PPUSH
36488: CALL 44028 0 4
36492: PPUSH
36493: CALL_OW 1
36497: ST_TO_ADDR
// if not building in mc_bases [ i ] then
36498: LD_VAR 0 1
36502: PUSH
36503: LD_EXP 57
36507: PUSH
36508: LD_VAR 0 3
36512: ARRAY
36513: IN
36514: NOT
36515: IFFALSE 36561
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36517: LD_ADDR_EXP 57
36521: PUSH
36522: LD_EXP 57
36526: PPUSH
36527: LD_VAR 0 3
36531: PUSH
36532: LD_EXP 57
36536: PUSH
36537: LD_VAR 0 3
36541: ARRAY
36542: PUSH
36543: LD_INT 1
36545: PLUS
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL 45045 0 3
36560: ST_TO_ADDR
// exit ;
36561: POP
36562: POP
36563: GO 36569
// end ; end ;
36565: GO 36369
36567: POP
36568: POP
// end ;
36569: LD_VAR 0 2
36573: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
// if not mc_bases then
36583: LD_EXP 57
36587: NOT
36588: IFFALSE 36592
// exit ;
36590: GO 37253
// for i = 1 to mc_bases do
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: DOUBLE
36598: LD_INT 1
36600: DEC
36601: ST_TO_ADDR
36602: LD_EXP 57
36606: PUSH
36607: FOR_TO
36608: IFFALSE 37251
// begin if building in mc_construct_list [ i ] then
36610: LD_VAR 0 1
36614: PUSH
36615: LD_EXP 64
36619: PUSH
36620: LD_VAR 0 3
36624: ARRAY
36625: IN
36626: IFFALSE 37249
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36628: LD_ADDR_EXP 64
36632: PUSH
36633: LD_EXP 64
36637: PPUSH
36638: LD_VAR 0 3
36642: PPUSH
36643: LD_EXP 64
36647: PUSH
36648: LD_VAR 0 3
36652: ARRAY
36653: PUSH
36654: LD_VAR 0 1
36658: DIFF
36659: PPUSH
36660: CALL_OW 1
36664: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36665: LD_ADDR_EXP 57
36669: PUSH
36670: LD_EXP 57
36674: PPUSH
36675: LD_VAR 0 3
36679: PUSH
36680: LD_EXP 57
36684: PUSH
36685: LD_VAR 0 3
36689: ARRAY
36690: PUSH
36691: LD_INT 1
36693: PLUS
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PPUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL 45045 0 3
36708: ST_TO_ADDR
// btype := GetBType ( building ) ;
36709: LD_ADDR_VAR 0 5
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 266
36723: ST_TO_ADDR
// side := GetSide ( building ) ;
36724: LD_ADDR_VAR 0 8
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 255
36738: ST_TO_ADDR
// if btype = b_lab then
36739: LD_VAR 0 5
36743: PUSH
36744: LD_INT 6
36746: EQUAL
36747: IFFALSE 36797
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
36749: LD_ADDR_EXP 90
36753: PUSH
36754: LD_EXP 90
36758: PPUSH
36759: LD_VAR 0 3
36763: PUSH
36764: LD_EXP 90
36768: PUSH
36769: LD_VAR 0 3
36773: ARRAY
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL 45045 0 3
36792: ST_TO_ADDR
// exit ;
36793: POP
36794: POP
36795: GO 37253
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
36797: LD_VAR 0 5
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 4
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: IN
36816: IFFALSE 36940
// begin if btype = b_armoury then
36818: LD_VAR 0 5
36822: PUSH
36823: LD_INT 4
36825: EQUAL
36826: IFFALSE 36836
// btype := b_barracks ;
36828: LD_ADDR_VAR 0 5
36832: PUSH
36833: LD_INT 5
36835: ST_TO_ADDR
// if btype = b_depot then
36836: LD_VAR 0 5
36840: PUSH
36841: LD_INT 0
36843: EQUAL
36844: IFFALSE 36854
// btype := b_warehouse ;
36846: LD_ADDR_VAR 0 5
36850: PUSH
36851: LD_INT 1
36853: ST_TO_ADDR
// if btype = b_workshop then
36854: LD_VAR 0 5
36858: PUSH
36859: LD_INT 2
36861: EQUAL
36862: IFFALSE 36872
// btype := b_factory ;
36864: LD_ADDR_VAR 0 5
36868: PUSH
36869: LD_INT 3
36871: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
36872: LD_VAR 0 5
36876: PPUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: CALL_OW 323
36886: PUSH
36887: LD_INT 1
36889: EQUAL
36890: IFFALSE 36936
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
36892: LD_ADDR_EXP 89
36896: PUSH
36897: LD_EXP 89
36901: PPUSH
36902: LD_VAR 0 3
36906: PUSH
36907: LD_EXP 89
36911: PUSH
36912: LD_VAR 0 3
36916: ARRAY
36917: PUSH
36918: LD_INT 1
36920: PLUS
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PPUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL 45045 0 3
36935: ST_TO_ADDR
// exit ;
36936: POP
36937: POP
36938: GO 37253
// end ; if btype in [ b_bunker , b_turret ] then
36940: LD_VAR 0 5
36944: PUSH
36945: LD_INT 32
36947: PUSH
36948: LD_INT 33
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: IN
36955: IFFALSE 37245
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
36957: LD_ADDR_EXP 65
36961: PUSH
36962: LD_EXP 65
36966: PPUSH
36967: LD_VAR 0 3
36971: PUSH
36972: LD_EXP 65
36976: PUSH
36977: LD_VAR 0 3
36981: ARRAY
36982: PUSH
36983: LD_INT 1
36985: PLUS
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PPUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL 45045 0 3
37000: ST_TO_ADDR
// if btype = b_bunker then
37001: LD_VAR 0 5
37005: PUSH
37006: LD_INT 32
37008: EQUAL
37009: IFFALSE 37245
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37011: LD_ADDR_EXP 66
37015: PUSH
37016: LD_EXP 66
37020: PPUSH
37021: LD_VAR 0 3
37025: PUSH
37026: LD_EXP 66
37030: PUSH
37031: LD_VAR 0 3
37035: ARRAY
37036: PUSH
37037: LD_INT 1
37039: PLUS
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PPUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: CALL 45045 0 3
37054: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
37055: LD_ADDR_VAR 0 6
37059: PUSH
37060: LD_EXP 57
37064: PUSH
37065: LD_VAR 0 3
37069: ARRAY
37070: PPUSH
37071: LD_INT 25
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 54
37086: PUSH
37087: EMPTY
37088: LIST
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PPUSH
37098: CALL_OW 72
37102: ST_TO_ADDR
// if tmp then
37103: LD_VAR 0 6
37107: IFFALSE 37113
// exit ;
37109: POP
37110: POP
37111: GO 37253
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
37113: LD_ADDR_VAR 0 6
37117: PUSH
37118: LD_EXP 57
37122: PUSH
37123: LD_VAR 0 3
37127: ARRAY
37128: PPUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 30
37134: PUSH
37135: LD_INT 4
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 30
37144: PUSH
37145: LD_INT 5
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: PPUSH
37157: CALL_OW 72
37161: ST_TO_ADDR
// if not tmp then
37162: LD_VAR 0 6
37166: NOT
37167: IFFALSE 37173
// exit ;
37169: POP
37170: POP
37171: GO 37253
// for j in tmp do
37173: LD_ADDR_VAR 0 4
37177: PUSH
37178: LD_VAR 0 6
37182: PUSH
37183: FOR_IN
37184: IFFALSE 37243
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
37186: LD_ADDR_VAR 0 7
37190: PUSH
37191: LD_VAR 0 4
37195: PPUSH
37196: CALL_OW 313
37200: PPUSH
37201: LD_INT 25
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PPUSH
37211: CALL_OW 72
37215: ST_TO_ADDR
// if units then
37216: LD_VAR 0 7
37220: IFFALSE 37241
// begin ComExitBuilding ( units [ 1 ] ) ;
37222: LD_VAR 0 7
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PPUSH
37231: CALL_OW 122
// exit ;
37235: POP
37236: POP
37237: POP
37238: POP
37239: GO 37253
// end ; end ;
37241: GO 37183
37243: POP
37244: POP
// end ; end ; exit ;
37245: POP
37246: POP
37247: GO 37253
// end ; end ;
37249: GO 36607
37251: POP
37252: POP
// end ;
37253: LD_VAR 0 2
37257: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
37258: LD_INT 0
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
// if not mc_bases then
37267: LD_EXP 57
37271: NOT
37272: IFFALSE 37276
// exit ;
37274: GO 37507
// btype := GetBType ( building ) ;
37276: LD_ADDR_VAR 0 6
37280: PUSH
37281: LD_VAR 0 1
37285: PPUSH
37286: CALL_OW 266
37290: ST_TO_ADDR
// x := GetX ( building ) ;
37291: LD_ADDR_VAR 0 7
37295: PUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 250
37305: ST_TO_ADDR
// y := GetY ( building ) ;
37306: LD_ADDR_VAR 0 8
37310: PUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 251
37320: ST_TO_ADDR
// d := GetDir ( building ) ;
37321: LD_ADDR_VAR 0 9
37325: PUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: CALL_OW 254
37335: ST_TO_ADDR
// for i = 1 to mc_bases do
37336: LD_ADDR_VAR 0 4
37340: PUSH
37341: DOUBLE
37342: LD_INT 1
37344: DEC
37345: ST_TO_ADDR
37346: LD_EXP 57
37350: PUSH
37351: FOR_TO
37352: IFFALSE 37505
// begin if not mc_build_list [ i ] then
37354: LD_EXP 62
37358: PUSH
37359: LD_VAR 0 4
37363: ARRAY
37364: NOT
37365: IFFALSE 37369
// continue ;
37367: GO 37351
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
37369: LD_VAR 0 6
37373: PUSH
37374: LD_VAR 0 7
37378: PUSH
37379: LD_VAR 0 8
37383: PUSH
37384: LD_VAR 0 9
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: PPUSH
37395: LD_EXP 62
37399: PUSH
37400: LD_VAR 0 4
37404: ARRAY
37405: PUSH
37406: LD_INT 1
37408: ARRAY
37409: PPUSH
37410: CALL 50682 0 2
37414: IFFALSE 37503
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
37416: LD_ADDR_EXP 62
37420: PUSH
37421: LD_EXP 62
37425: PPUSH
37426: LD_VAR 0 4
37430: PPUSH
37431: LD_EXP 62
37435: PUSH
37436: LD_VAR 0 4
37440: ARRAY
37441: PPUSH
37442: LD_INT 1
37444: PPUSH
37445: CALL_OW 3
37449: PPUSH
37450: CALL_OW 1
37454: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
37455: LD_ADDR_EXP 64
37459: PUSH
37460: LD_EXP 64
37464: PPUSH
37465: LD_VAR 0 4
37469: PUSH
37470: LD_EXP 64
37474: PUSH
37475: LD_VAR 0 4
37479: ARRAY
37480: PUSH
37481: LD_INT 1
37483: PLUS
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PPUSH
37489: LD_VAR 0 1
37493: PPUSH
37494: CALL 45045 0 3
37498: ST_TO_ADDR
// exit ;
37499: POP
37500: POP
37501: GO 37507
// end ; end ;
37503: GO 37351
37505: POP
37506: POP
// end ;
37507: LD_VAR 0 3
37511: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
37512: LD_INT 0
37514: PPUSH
37515: PPUSH
37516: PPUSH
// if not mc_bases then
37517: LD_EXP 57
37521: NOT
37522: IFFALSE 37526
// exit ;
37524: GO 37716
// for i = 1 to mc_bases do
37526: LD_ADDR_VAR 0 4
37530: PUSH
37531: DOUBLE
37532: LD_INT 1
37534: DEC
37535: ST_TO_ADDR
37536: LD_EXP 57
37540: PUSH
37541: FOR_TO
37542: IFFALSE 37629
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
37544: LD_VAR 0 1
37548: PUSH
37549: LD_EXP 65
37553: PUSH
37554: LD_VAR 0 4
37558: ARRAY
37559: IN
37560: PUSH
37561: LD_VAR 0 1
37565: PUSH
37566: LD_EXP 66
37570: PUSH
37571: LD_VAR 0 4
37575: ARRAY
37576: IN
37577: NOT
37578: AND
37579: IFFALSE 37627
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37581: LD_ADDR_EXP 66
37585: PUSH
37586: LD_EXP 66
37590: PPUSH
37591: LD_VAR 0 4
37595: PUSH
37596: LD_EXP 66
37600: PUSH
37601: LD_VAR 0 4
37605: ARRAY
37606: PUSH
37607: LD_INT 1
37609: PLUS
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PPUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL 45045 0 3
37624: ST_TO_ADDR
// break ;
37625: GO 37629
// end ; end ;
37627: GO 37541
37629: POP
37630: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 257
37640: PUSH
37641: LD_EXP 83
37645: IN
37646: PUSH
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL_OW 266
37656: PUSH
37657: LD_INT 5
37659: EQUAL
37660: AND
37661: PUSH
37662: LD_VAR 0 2
37666: PPUSH
37667: CALL_OW 110
37671: PUSH
37672: LD_INT 18
37674: NONEQUAL
37675: AND
37676: IFFALSE 37716
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
37678: LD_VAR 0 2
37682: PPUSH
37683: CALL_OW 257
37687: PUSH
37688: LD_INT 5
37690: PUSH
37691: LD_INT 8
37693: PUSH
37694: LD_INT 9
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: IN
37702: IFFALSE 37716
// SetClass ( unit , 1 ) ;
37704: LD_VAR 0 2
37708: PPUSH
37709: LD_INT 1
37711: PPUSH
37712: CALL_OW 336
// end ;
37716: LD_VAR 0 3
37720: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
37721: LD_INT 0
37723: PPUSH
37724: PPUSH
// if not mc_bases then
37725: LD_EXP 57
37729: NOT
37730: IFFALSE 37734
// exit ;
37732: GO 37850
// if GetLives ( abandoned_vehicle ) > 250 then
37734: LD_VAR 0 2
37738: PPUSH
37739: CALL_OW 256
37743: PUSH
37744: LD_INT 250
37746: GREATER
37747: IFFALSE 37751
// exit ;
37749: GO 37850
// for i = 1 to mc_bases do
37751: LD_ADDR_VAR 0 6
37755: PUSH
37756: DOUBLE
37757: LD_INT 1
37759: DEC
37760: ST_TO_ADDR
37761: LD_EXP 57
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37848
// begin if driver in mc_bases [ i ] then
37769: LD_VAR 0 1
37773: PUSH
37774: LD_EXP 57
37778: PUSH
37779: LD_VAR 0 6
37783: ARRAY
37784: IN
37785: IFFALSE 37846
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
37787: LD_VAR 0 1
37791: PPUSH
37792: LD_EXP 57
37796: PUSH
37797: LD_VAR 0 6
37801: ARRAY
37802: PPUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 30
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 30
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: PPUSH
37831: CALL_OW 72
37835: PUSH
37836: LD_INT 1
37838: ARRAY
37839: PPUSH
37840: CALL_OW 112
// break ;
37844: GO 37848
// end ; end ;
37846: GO 37766
37848: POP
37849: POP
// end ; end_of_file
37850: LD_VAR 0 5
37854: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
// if exist_mode then
37859: LD_VAR 0 2
37863: IFFALSE 37888
// unit := CreateCharacter ( prefix & ident ) else
37865: LD_ADDR_VAR 0 5
37869: PUSH
37870: LD_VAR 0 3
37874: PUSH
37875: LD_VAR 0 1
37879: STR
37880: PPUSH
37881: CALL_OW 34
37885: ST_TO_ADDR
37886: GO 37903
// unit := NewCharacter ( ident ) ;
37888: LD_ADDR_VAR 0 5
37892: PUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 25
37902: ST_TO_ADDR
// result := unit ;
37903: LD_ADDR_VAR 0 4
37907: PUSH
37908: LD_VAR 0 5
37912: ST_TO_ADDR
// end ;
37913: LD_VAR 0 4
37917: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37918: LD_INT 0
37920: PPUSH
37921: PPUSH
// if not side or not nation then
37922: LD_VAR 0 1
37926: NOT
37927: PUSH
37928: LD_VAR 0 2
37932: NOT
37933: OR
37934: IFFALSE 37938
// exit ;
37936: GO 38574
// case nation of nation_american :
37938: LD_VAR 0 2
37942: PUSH
37943: LD_INT 1
37945: DOUBLE
37946: EQUAL
37947: IFTRUE 37951
37949: GO 38121
37951: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
37952: LD_ADDR_VAR 0 4
37956: PUSH
37957: LD_INT 35
37959: PUSH
37960: LD_INT 45
37962: PUSH
37963: LD_INT 46
37965: PUSH
37966: LD_INT 47
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 6
37977: PUSH
37978: LD_INT 15
37980: PUSH
37981: LD_INT 16
37983: PUSH
37984: LD_INT 7
37986: PUSH
37987: LD_INT 12
37989: PUSH
37990: LD_INT 13
37992: PUSH
37993: LD_INT 10
37995: PUSH
37996: LD_INT 14
37998: PUSH
37999: LD_INT 20
38001: PUSH
38002: LD_INT 21
38004: PUSH
38005: LD_INT 22
38007: PUSH
38008: LD_INT 25
38010: PUSH
38011: LD_INT 32
38013: PUSH
38014: LD_INT 27
38016: PUSH
38017: LD_INT 36
38019: PUSH
38020: LD_INT 69
38022: PUSH
38023: LD_INT 39
38025: PUSH
38026: LD_INT 34
38028: PUSH
38029: LD_INT 40
38031: PUSH
38032: LD_INT 48
38034: PUSH
38035: LD_INT 49
38037: PUSH
38038: LD_INT 50
38040: PUSH
38041: LD_INT 51
38043: PUSH
38044: LD_INT 52
38046: PUSH
38047: LD_INT 53
38049: PUSH
38050: LD_INT 54
38052: PUSH
38053: LD_INT 55
38055: PUSH
38056: LD_INT 56
38058: PUSH
38059: LD_INT 57
38061: PUSH
38062: LD_INT 58
38064: PUSH
38065: LD_INT 59
38067: PUSH
38068: LD_INT 60
38070: PUSH
38071: LD_INT 61
38073: PUSH
38074: LD_INT 62
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: ST_TO_ADDR
38119: GO 38498
38121: LD_INT 2
38123: DOUBLE
38124: EQUAL
38125: IFTRUE 38129
38127: GO 38307
38129: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
38130: LD_ADDR_VAR 0 4
38134: PUSH
38135: LD_INT 35
38137: PUSH
38138: LD_INT 45
38140: PUSH
38141: LD_INT 46
38143: PUSH
38144: LD_INT 47
38146: PUSH
38147: LD_INT 70
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 11
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 4
38161: PUSH
38162: LD_INT 5
38164: PUSH
38165: LD_INT 6
38167: PUSH
38168: LD_INT 15
38170: PUSH
38171: LD_INT 18
38173: PUSH
38174: LD_INT 7
38176: PUSH
38177: LD_INT 17
38179: PUSH
38180: LD_INT 8
38182: PUSH
38183: LD_INT 20
38185: PUSH
38186: LD_INT 21
38188: PUSH
38189: LD_INT 22
38191: PUSH
38192: LD_INT 72
38194: PUSH
38195: LD_INT 26
38197: PUSH
38198: LD_INT 69
38200: PUSH
38201: LD_INT 39
38203: PUSH
38204: LD_INT 40
38206: PUSH
38207: LD_INT 41
38209: PUSH
38210: LD_INT 42
38212: PUSH
38213: LD_INT 43
38215: PUSH
38216: LD_INT 48
38218: PUSH
38219: LD_INT 49
38221: PUSH
38222: LD_INT 50
38224: PUSH
38225: LD_INT 51
38227: PUSH
38228: LD_INT 52
38230: PUSH
38231: LD_INT 53
38233: PUSH
38234: LD_INT 54
38236: PUSH
38237: LD_INT 55
38239: PUSH
38240: LD_INT 56
38242: PUSH
38243: LD_INT 60
38245: PUSH
38246: LD_INT 61
38248: PUSH
38249: LD_INT 62
38251: PUSH
38252: LD_INT 66
38254: PUSH
38255: LD_INT 67
38257: PUSH
38258: LD_INT 68
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
38305: GO 38498
38307: LD_INT 3
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38497
38315: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
38316: LD_ADDR_VAR 0 4
38320: PUSH
38321: LD_INT 46
38323: PUSH
38324: LD_INT 47
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 11
38335: PUSH
38336: LD_INT 9
38338: PUSH
38339: LD_INT 20
38341: PUSH
38342: LD_INT 19
38344: PUSH
38345: LD_INT 21
38347: PUSH
38348: LD_INT 24
38350: PUSH
38351: LD_INT 22
38353: PUSH
38354: LD_INT 25
38356: PUSH
38357: LD_INT 28
38359: PUSH
38360: LD_INT 29
38362: PUSH
38363: LD_INT 30
38365: PUSH
38366: LD_INT 31
38368: PUSH
38369: LD_INT 37
38371: PUSH
38372: LD_INT 38
38374: PUSH
38375: LD_INT 32
38377: PUSH
38378: LD_INT 27
38380: PUSH
38381: LD_INT 33
38383: PUSH
38384: LD_INT 69
38386: PUSH
38387: LD_INT 39
38389: PUSH
38390: LD_INT 34
38392: PUSH
38393: LD_INT 40
38395: PUSH
38396: LD_INT 71
38398: PUSH
38399: LD_INT 23
38401: PUSH
38402: LD_INT 44
38404: PUSH
38405: LD_INT 48
38407: PUSH
38408: LD_INT 49
38410: PUSH
38411: LD_INT 50
38413: PUSH
38414: LD_INT 51
38416: PUSH
38417: LD_INT 52
38419: PUSH
38420: LD_INT 53
38422: PUSH
38423: LD_INT 54
38425: PUSH
38426: LD_INT 55
38428: PUSH
38429: LD_INT 56
38431: PUSH
38432: LD_INT 57
38434: PUSH
38435: LD_INT 58
38437: PUSH
38438: LD_INT 59
38440: PUSH
38441: LD_INT 63
38443: PUSH
38444: LD_INT 64
38446: PUSH
38447: LD_INT 65
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
38495: GO 38498
38497: POP
// if state > - 1 and state < 3 then
38498: LD_VAR 0 3
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: GREATER
38507: PUSH
38508: LD_VAR 0 3
38512: PUSH
38513: LD_INT 3
38515: LESS
38516: AND
38517: IFFALSE 38574
// for i in result do
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 4
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38572
// if GetTech ( i , side ) <> state then
38532: LD_VAR 0 5
38536: PPUSH
38537: LD_VAR 0 1
38541: PPUSH
38542: CALL_OW 321
38546: PUSH
38547: LD_VAR 0 3
38551: NONEQUAL
38552: IFFALSE 38570
// result := result diff i ;
38554: LD_ADDR_VAR 0 4
38558: PUSH
38559: LD_VAR 0 4
38563: PUSH
38564: LD_VAR 0 5
38568: DIFF
38569: ST_TO_ADDR
38570: GO 38529
38572: POP
38573: POP
// end ;
38574: LD_VAR 0 4
38578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38579: LD_INT 0
38581: PPUSH
38582: PPUSH
38583: PPUSH
// result := true ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_INT 1
38591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 2
38601: PPUSH
38602: CALL_OW 480
38606: ST_TO_ADDR
// if not tmp then
38607: LD_VAR 0 5
38611: NOT
38612: IFFALSE 38616
// exit ;
38614: GO 38665
// for i in tmp do
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: LD_VAR 0 5
38625: PUSH
38626: FOR_IN
38627: IFFALSE 38663
// if GetTech ( i , side ) <> state_researched then
38629: LD_VAR 0 4
38633: PPUSH
38634: LD_VAR 0 1
38638: PPUSH
38639: CALL_OW 321
38643: PUSH
38644: LD_INT 2
38646: NONEQUAL
38647: IFFALSE 38661
// begin result := false ;
38649: LD_ADDR_VAR 0 3
38653: PUSH
38654: LD_INT 0
38656: ST_TO_ADDR
// exit ;
38657: POP
38658: POP
38659: GO 38665
// end ;
38661: GO 38626
38663: POP
38664: POP
// end ;
38665: LD_VAR 0 3
38669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38670: LD_INT 0
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38685: LD_VAR 0 1
38689: NOT
38690: PUSH
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL_OW 257
38700: PUSH
38701: LD_INT 9
38703: NONEQUAL
38704: OR
38705: IFFALSE 38709
// exit ;
38707: GO 39282
// side := GetSide ( unit ) ;
38709: LD_ADDR_VAR 0 9
38713: PUSH
38714: LD_VAR 0 1
38718: PPUSH
38719: CALL_OW 255
38723: ST_TO_ADDR
// tech_space := tech_spacanom ;
38724: LD_ADDR_VAR 0 12
38728: PUSH
38729: LD_INT 29
38731: ST_TO_ADDR
// tech_time := tech_taurad ;
38732: LD_ADDR_VAR 0 13
38736: PUSH
38737: LD_INT 28
38739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38740: LD_ADDR_VAR 0 11
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 310
38754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38755: LD_VAR 0 11
38759: PPUSH
38760: CALL_OW 247
38764: PUSH
38765: LD_INT 2
38767: EQUAL
38768: IFFALSE 38772
// exit ;
38770: GO 39282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38772: LD_ADDR_VAR 0 8
38776: PUSH
38777: LD_INT 81
38779: PUSH
38780: LD_VAR 0 9
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: LD_INT 21
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PPUSH
38810: CALL_OW 69
38814: ST_TO_ADDR
// if not tmp then
38815: LD_VAR 0 8
38819: NOT
38820: IFFALSE 38824
// exit ;
38822: GO 39282
// if in_unit then
38824: LD_VAR 0 11
38828: IFFALSE 38852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38830: LD_ADDR_VAR 0 10
38834: PUSH
38835: LD_VAR 0 8
38839: PPUSH
38840: LD_VAR 0 11
38844: PPUSH
38845: CALL_OW 74
38849: ST_TO_ADDR
38850: GO 38872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38852: LD_ADDR_VAR 0 10
38856: PUSH
38857: LD_VAR 0 8
38861: PPUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 74
38871: ST_TO_ADDR
// if not enemy then
38872: LD_VAR 0 10
38876: NOT
38877: IFFALSE 38881
// exit ;
38879: GO 39282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38881: LD_VAR 0 11
38885: PUSH
38886: LD_VAR 0 11
38890: PPUSH
38891: LD_VAR 0 10
38895: PPUSH
38896: CALL_OW 296
38900: PUSH
38901: LD_INT 13
38903: GREATER
38904: AND
38905: PUSH
38906: LD_VAR 0 1
38910: PPUSH
38911: LD_VAR 0 10
38915: PPUSH
38916: CALL_OW 296
38920: PUSH
38921: LD_INT 12
38923: GREATER
38924: OR
38925: IFFALSE 38929
// exit ;
38927: GO 39282
// missile := [ 1 ] ;
38929: LD_ADDR_VAR 0 14
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38940: LD_VAR 0 9
38944: PPUSH
38945: LD_VAR 0 12
38949: PPUSH
38950: CALL_OW 325
38954: IFFALSE 38983
// missile := Insert ( missile , missile + 1 , 2 ) ;
38956: LD_ADDR_VAR 0 14
38960: PUSH
38961: LD_VAR 0 14
38965: PPUSH
38966: LD_VAR 0 14
38970: PUSH
38971: LD_INT 1
38973: PLUS
38974: PPUSH
38975: LD_INT 2
38977: PPUSH
38978: CALL_OW 2
38982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38983: LD_VAR 0 9
38987: PPUSH
38988: LD_VAR 0 13
38992: PPUSH
38993: CALL_OW 325
38997: PUSH
38998: LD_VAR 0 10
39002: PPUSH
39003: CALL_OW 255
39007: PPUSH
39008: LD_VAR 0 13
39012: PPUSH
39013: CALL_OW 325
39017: NOT
39018: AND
39019: IFFALSE 39048
// missile := Insert ( missile , missile + 1 , 3 ) ;
39021: LD_ADDR_VAR 0 14
39025: PUSH
39026: LD_VAR 0 14
39030: PPUSH
39031: LD_VAR 0 14
39035: PUSH
39036: LD_INT 1
39038: PLUS
39039: PPUSH
39040: LD_INT 3
39042: PPUSH
39043: CALL_OW 2
39047: ST_TO_ADDR
// if missile < 2 then
39048: LD_VAR 0 14
39052: PUSH
39053: LD_INT 2
39055: LESS
39056: IFFALSE 39060
// exit ;
39058: GO 39282
// x := GetX ( enemy ) ;
39060: LD_ADDR_VAR 0 4
39064: PUSH
39065: LD_VAR 0 10
39069: PPUSH
39070: CALL_OW 250
39074: ST_TO_ADDR
// y := GetY ( enemy ) ;
39075: LD_ADDR_VAR 0 5
39079: PUSH
39080: LD_VAR 0 10
39084: PPUSH
39085: CALL_OW 251
39089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39090: LD_ADDR_VAR 0 6
39094: PUSH
39095: LD_VAR 0 4
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: CALL_OW 12
39111: PLUS
39112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39113: LD_ADDR_VAR 0 7
39117: PUSH
39118: LD_VAR 0 5
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PPUSH
39127: LD_INT 1
39129: PPUSH
39130: CALL_OW 12
39134: PLUS
39135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39136: LD_VAR 0 6
39140: PPUSH
39141: LD_VAR 0 7
39145: PPUSH
39146: CALL_OW 488
39150: NOT
39151: IFFALSE 39173
// begin _x := x ;
39153: LD_ADDR_VAR 0 6
39157: PUSH
39158: LD_VAR 0 4
39162: ST_TO_ADDR
// _y := y ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: LD_VAR 0 5
39172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_INT 1
39180: PPUSH
39181: LD_VAR 0 14
39185: PPUSH
39186: CALL_OW 12
39190: ST_TO_ADDR
// case i of 1 :
39191: LD_VAR 0 3
39195: PUSH
39196: LD_INT 1
39198: DOUBLE
39199: EQUAL
39200: IFTRUE 39204
39202: GO 39221
39204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39205: LD_VAR 0 1
39209: PPUSH
39210: LD_VAR 0 10
39214: PPUSH
39215: CALL_OW 115
39219: GO 39282
39221: LD_INT 2
39223: DOUBLE
39224: EQUAL
39225: IFTRUE 39229
39227: GO 39251
39229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_VAR 0 6
39239: PPUSH
39240: LD_VAR 0 7
39244: PPUSH
39245: CALL_OW 153
39249: GO 39282
39251: LD_INT 3
39253: DOUBLE
39254: EQUAL
39255: IFTRUE 39259
39257: GO 39281
39259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39260: LD_VAR 0 1
39264: PPUSH
39265: LD_VAR 0 6
39269: PPUSH
39270: LD_VAR 0 7
39274: PPUSH
39275: CALL_OW 154
39279: GO 39282
39281: POP
// end ;
39282: LD_VAR 0 2
39286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39287: LD_INT 0
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
// if not unit or not building then
39295: LD_VAR 0 1
39299: NOT
39300: PUSH
39301: LD_VAR 0 2
39305: NOT
39306: OR
39307: IFFALSE 39311
// exit ;
39309: GO 39469
// x := GetX ( building ) ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 2
39320: PPUSH
39321: CALL_OW 250
39325: ST_TO_ADDR
// y := GetY ( building ) ;
39326: LD_ADDR_VAR 0 6
39330: PUSH
39331: LD_VAR 0 2
39335: PPUSH
39336: CALL_OW 251
39340: ST_TO_ADDR
// for i = 0 to 5 do
39341: LD_ADDR_VAR 0 4
39345: PUSH
39346: DOUBLE
39347: LD_INT 0
39349: DEC
39350: ST_TO_ADDR
39351: LD_INT 5
39353: PUSH
39354: FOR_TO
39355: IFFALSE 39467
// begin _x := ShiftX ( x , i , 3 ) ;
39357: LD_ADDR_VAR 0 7
39361: PUSH
39362: LD_VAR 0 5
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: LD_INT 3
39374: PPUSH
39375: CALL_OW 272
39379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39380: LD_ADDR_VAR 0 8
39384: PUSH
39385: LD_VAR 0 6
39389: PPUSH
39390: LD_VAR 0 4
39394: PPUSH
39395: LD_INT 3
39397: PPUSH
39398: CALL_OW 273
39402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39403: LD_VAR 0 7
39407: PPUSH
39408: LD_VAR 0 8
39412: PPUSH
39413: CALL_OW 488
39417: NOT
39418: IFFALSE 39422
// continue ;
39420: GO 39354
// if HexInfo ( _x , _y ) = 0 then
39422: LD_VAR 0 7
39426: PPUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: CALL_OW 428
39436: PUSH
39437: LD_INT 0
39439: EQUAL
39440: IFFALSE 39465
// begin ComMoveXY ( unit , _x , _y ) ;
39442: LD_VAR 0 1
39446: PPUSH
39447: LD_VAR 0 7
39451: PPUSH
39452: LD_VAR 0 8
39456: PPUSH
39457: CALL_OW 111
// exit ;
39461: POP
39462: POP
39463: GO 39469
// end ; end ;
39465: GO 39354
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 3
39473: RET
// export function ScanBase ( side , base_area ) ; begin
39474: LD_INT 0
39476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_VAR 0 2
39486: PPUSH
39487: LD_INT 81
39489: PUSH
39490: LD_VAR 0 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PPUSH
39499: CALL_OW 70
39503: ST_TO_ADDR
// end ;
39504: LD_VAR 0 3
39508: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
39509: LD_INT 0
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
39516: LD_VAR 0 1
39520: NOT
39521: PUSH
39522: LD_EXP 57
39526: PUSH
39527: LD_VAR 0 1
39531: ARRAY
39532: NOT
39533: OR
39534: PUSH
39535: LD_VAR 0 2
39539: NOT
39540: OR
39541: PUSH
39542: LD_VAR 0 3
39546: NOT
39547: OR
39548: IFFALSE 39552
// exit ;
39550: GO 40002
// side := mc_sides [ base ] ;
39552: LD_ADDR_VAR 0 6
39556: PUSH
39557: LD_EXP 83
39561: PUSH
39562: LD_VAR 0 1
39566: ARRAY
39567: ST_TO_ADDR
// if not side then
39568: LD_VAR 0 6
39572: NOT
39573: IFFALSE 39577
// exit ;
39575: GO 40002
// for i in solds do
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_VAR 0 2
39586: PUSH
39587: FOR_IN
39588: IFFALSE 39649
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
39590: LD_VAR 0 7
39594: PPUSH
39595: CALL_OW 310
39599: PPUSH
39600: CALL_OW 266
39604: PUSH
39605: LD_INT 32
39607: PUSH
39608: LD_INT 31
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: IN
39615: IFFALSE 39635
// solds := solds diff i else
39617: LD_ADDR_VAR 0 2
39621: PUSH
39622: LD_VAR 0 2
39626: PUSH
39627: LD_VAR 0 7
39631: DIFF
39632: ST_TO_ADDR
39633: GO 39647
// SetTag ( i , 18 ) ;
39635: LD_VAR 0 7
39639: PPUSH
39640: LD_INT 18
39642: PPUSH
39643: CALL_OW 109
39647: GO 39587
39649: POP
39650: POP
// if not solds then
39651: LD_VAR 0 2
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 40002
// repeat wait ( 0 0$1 ) ;
39660: LD_INT 35
39662: PPUSH
39663: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
39667: LD_ADDR_VAR 0 5
39671: PUSH
39672: LD_VAR 0 6
39676: PPUSH
39677: LD_VAR 0 3
39681: PPUSH
39682: CALL 39474 0 2
39686: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
39687: LD_VAR 0 5
39691: NOT
39692: PUSH
39693: LD_VAR 0 5
39697: PUSH
39698: LD_INT 3
39700: GREATER
39701: OR
39702: PUSH
39703: LD_EXP 79
39707: PUSH
39708: LD_VAR 0 1
39712: ARRAY
39713: OR
39714: IFFALSE 39755
// begin for i in solds do
39716: LD_ADDR_VAR 0 7
39720: PUSH
39721: LD_VAR 0 2
39725: PUSH
39726: FOR_IN
39727: IFFALSE 39751
// if HasTask ( i ) then
39729: LD_VAR 0 7
39733: PPUSH
39734: CALL_OW 314
39738: IFFALSE 39749
// ComStop ( i ) ;
39740: LD_VAR 0 7
39744: PPUSH
39745: CALL_OW 141
39749: GO 39726
39751: POP
39752: POP
// break ;
39753: GO 39990
// end ; for i in solds do
39755: LD_ADDR_VAR 0 7
39759: PUSH
39760: LD_VAR 0 2
39764: PUSH
39765: FOR_IN
39766: IFFALSE 39982
// begin if IsInUnit ( i ) then
39768: LD_VAR 0 7
39772: PPUSH
39773: CALL_OW 310
39777: IFFALSE 39788
// ComExitBuilding ( i ) ;
39779: LD_VAR 0 7
39783: PPUSH
39784: CALL_OW 122
// if GetLives ( i ) > 333 then
39788: LD_VAR 0 7
39792: PPUSH
39793: CALL_OW 256
39797: PUSH
39798: LD_INT 333
39800: GREATER
39801: IFFALSE 39829
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
39803: LD_VAR 0 7
39807: PPUSH
39808: LD_VAR 0 5
39812: PPUSH
39813: LD_VAR 0 7
39817: PPUSH
39818: CALL_OW 74
39822: PPUSH
39823: CALL_OW 115
39827: GO 39980
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
39829: LD_ADDR_VAR 0 8
39833: PUSH
39834: LD_EXP 57
39838: PUSH
39839: LD_VAR 0 1
39843: ARRAY
39844: PPUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 30
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 30
39870: PUSH
39871: LD_INT 6
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: PPUSH
39884: CALL_OW 72
39888: PPUSH
39889: LD_VAR 0 7
39893: PPUSH
39894: CALL_OW 74
39898: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
39899: LD_VAR 0 7
39903: PPUSH
39904: LD_VAR 0 8
39908: PPUSH
39909: CALL_OW 250
39913: PPUSH
39914: LD_INT 3
39916: PPUSH
39917: LD_INT 5
39919: PPUSH
39920: CALL_OW 272
39924: PPUSH
39925: LD_VAR 0 8
39929: PPUSH
39930: CALL_OW 251
39934: PPUSH
39935: LD_INT 3
39937: PPUSH
39938: LD_INT 5
39940: PPUSH
39941: CALL_OW 273
39945: PPUSH
39946: CALL_OW 111
// SetTag ( i , 0 ) ;
39950: LD_VAR 0 7
39954: PPUSH
39955: LD_INT 0
39957: PPUSH
39958: CALL_OW 109
// solds := solds diff i ;
39962: LD_ADDR_VAR 0 2
39966: PUSH
39967: LD_VAR 0 2
39971: PUSH
39972: LD_VAR 0 7
39976: DIFF
39977: ST_TO_ADDR
// continue ;
39978: GO 39765
// end ; end ;
39980: GO 39765
39982: POP
39983: POP
// until solds ;
39984: LD_VAR 0 2
39988: IFFALSE 39660
// MC_Reset ( base , 18 ) ;
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_INT 18
39997: PPUSH
39998: CALL 19325 0 2
// end ;
40002: LD_VAR 0 4
40006: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
40007: LD_INT 0
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
40025: LD_ADDR_VAR 0 12
40029: PUSH
40030: LD_EXP 57
40034: PUSH
40035: LD_VAR 0 1
40039: ARRAY
40040: PPUSH
40041: LD_INT 25
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 72
40055: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
40056: LD_ADDR_VAR 0 8
40060: PUSH
40061: LD_EXP 57
40065: PUSH
40066: LD_VAR 0 1
40070: ARRAY
40071: PPUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 25
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 25
40087: PUSH
40088: LD_INT 5
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 25
40097: PUSH
40098: LD_INT 8
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 25
40107: PUSH
40108: LD_INT 9
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PPUSH
40122: CALL_OW 72
40126: ST_TO_ADDR
// if not defenders and not solds then
40127: LD_VAR 0 2
40131: NOT
40132: PUSH
40133: LD_VAR 0 8
40137: NOT
40138: AND
40139: IFFALSE 40143
// exit ;
40141: GO 41509
// depot_under_attack := false ;
40143: LD_ADDR_VAR 0 16
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// sold_defenders := [ ] ;
40151: LD_ADDR_VAR 0 17
40155: PUSH
40156: EMPTY
40157: ST_TO_ADDR
// if mechs then
40158: LD_VAR 0 12
40162: IFFALSE 40291
// for i in defenders do
40164: LD_ADDR_VAR 0 5
40168: PUSH
40169: LD_VAR 0 2
40173: PUSH
40174: FOR_IN
40175: IFFALSE 40289
// begin SetTag ( i , 20 ) ;
40177: LD_VAR 0 5
40181: PPUSH
40182: LD_INT 20
40184: PPUSH
40185: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
40189: LD_VAR 0 5
40193: PPUSH
40194: CALL_OW 263
40198: PUSH
40199: LD_INT 1
40201: EQUAL
40202: PUSH
40203: LD_VAR 0 5
40207: PPUSH
40208: CALL_OW 311
40212: NOT
40213: AND
40214: PUSH
40215: LD_VAR 0 12
40219: AND
40220: IFFALSE 40287
// begin un := mechs [ 1 ] ;
40222: LD_ADDR_VAR 0 10
40226: PUSH
40227: LD_VAR 0 12
40231: PUSH
40232: LD_INT 1
40234: ARRAY
40235: ST_TO_ADDR
// ComExitBuilding ( un ) ;
40236: LD_VAR 0 10
40240: PPUSH
40241: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
40245: LD_VAR 0 10
40249: PPUSH
40250: LD_VAR 0 5
40254: PPUSH
40255: CALL_OW 180
// SetTag ( un , 19 ) ;
40259: LD_VAR 0 10
40263: PPUSH
40264: LD_INT 19
40266: PPUSH
40267: CALL_OW 109
// mechs := mechs diff un ;
40271: LD_ADDR_VAR 0 12
40275: PUSH
40276: LD_VAR 0 12
40280: PUSH
40281: LD_VAR 0 10
40285: DIFF
40286: ST_TO_ADDR
// end ; end ;
40287: GO 40174
40289: POP
40290: POP
// if solds then
40291: LD_VAR 0 8
40295: IFFALSE 40354
// for i in solds do
40297: LD_ADDR_VAR 0 5
40301: PUSH
40302: LD_VAR 0 8
40306: PUSH
40307: FOR_IN
40308: IFFALSE 40352
// if not GetTag ( i ) then
40310: LD_VAR 0 5
40314: PPUSH
40315: CALL_OW 110
40319: NOT
40320: IFFALSE 40350
// begin defenders := defenders union i ;
40322: LD_ADDR_VAR 0 2
40326: PUSH
40327: LD_VAR 0 2
40331: PUSH
40332: LD_VAR 0 5
40336: UNION
40337: ST_TO_ADDR
// SetTag ( i , 18 ) ;
40338: LD_VAR 0 5
40342: PPUSH
40343: LD_INT 18
40345: PPUSH
40346: CALL_OW 109
// end ;
40350: GO 40307
40352: POP
40353: POP
// repeat wait ( 0 0$1 ) ;
40354: LD_INT 35
40356: PPUSH
40357: CALL_OW 67
// enemy := mc_scan [ base ] ;
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_EXP 80
40370: PUSH
40371: LD_VAR 0 1
40375: ARRAY
40376: ST_TO_ADDR
// for i in defenders do
40377: LD_ADDR_VAR 0 5
40381: PUSH
40382: LD_VAR 0 2
40386: PUSH
40387: FOR_IN
40388: IFFALSE 41073
// begin e := NearestUnitToUnit ( enemy , i ) ;
40390: LD_ADDR_VAR 0 13
40394: PUSH
40395: LD_VAR 0 3
40399: PPUSH
40400: LD_VAR 0 5
40404: PPUSH
40405: CALL_OW 74
40409: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
40410: LD_ADDR_VAR 0 16
40414: PUSH
40415: LD_EXP 57
40419: PUSH
40420: LD_VAR 0 1
40424: ARRAY
40425: PPUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 30
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 30
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: PPUSH
40454: CALL_OW 72
40458: NOT
40459: PUSH
40460: LD_EXP 57
40464: PUSH
40465: LD_VAR 0 1
40469: ARRAY
40470: PPUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 30
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 30
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL_OW 72
40503: PPUSH
40504: CALL_OW 256
40508: PUSH
40509: LD_INT 600
40511: LESS
40512: OR
40513: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
40514: LD_VAR 0 5
40518: PPUSH
40519: CALL_OW 247
40523: PUSH
40524: LD_INT 2
40526: DOUBLE
40527: EQUAL
40528: IFTRUE 40532
40530: GO 40779
40532: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
40533: LD_VAR 0 5
40537: PPUSH
40538: CALL_OW 256
40542: PUSH
40543: LD_INT 650
40545: GREATER
40546: PUSH
40547: LD_VAR 0 5
40551: PPUSH
40552: LD_VAR 0 13
40556: PPUSH
40557: CALL_OW 296
40561: PUSH
40562: LD_INT 40
40564: LESS
40565: AND
40566: IFFALSE 40584
// ComAttackUnit ( i , e ) else
40568: LD_VAR 0 5
40572: PPUSH
40573: LD_VAR 0 13
40577: PPUSH
40578: CALL_OW 115
40582: GO 40662
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
40584: LD_VAR 0 5
40588: PPUSH
40589: LD_VAR 0 13
40593: PPUSH
40594: CALL_OW 296
40598: PUSH
40599: LD_INT 30
40601: GREATEREQUAL
40602: PUSH
40603: LD_VAR 0 5
40607: PPUSH
40608: CALL_OW 256
40612: PUSH
40613: LD_INT 650
40615: LESSEQUAL
40616: OR
40617: PUSH
40618: LD_VAR 0 5
40622: PPUSH
40623: LD_EXP 81
40627: PUSH
40628: LD_VAR 0 1
40632: ARRAY
40633: PPUSH
40634: CALL_OW 308
40638: NOT
40639: AND
40640: IFFALSE 40662
// ComMoveToArea ( i , mc_parking [ base ] ) ;
40642: LD_VAR 0 5
40646: PPUSH
40647: LD_EXP 81
40651: PUSH
40652: LD_VAR 0 1
40656: ARRAY
40657: PPUSH
40658: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
40662: LD_VAR 0 5
40666: PPUSH
40667: CALL_OW 256
40671: PUSH
40672: LD_INT 998
40674: LESS
40675: PUSH
40676: LD_VAR 0 5
40680: PPUSH
40681: CALL_OW 263
40685: PUSH
40686: LD_INT 1
40688: EQUAL
40689: AND
40690: PUSH
40691: LD_VAR 0 5
40695: PPUSH
40696: CALL_OW 311
40700: AND
40701: PUSH
40702: LD_VAR 0 5
40706: PPUSH
40707: LD_EXP 81
40711: PUSH
40712: LD_VAR 0 1
40716: ARRAY
40717: PPUSH
40718: CALL_OW 308
40722: AND
40723: IFFALSE 40777
// begin mech := IsDrivenBy ( i ) ;
40725: LD_ADDR_VAR 0 9
40729: PUSH
40730: LD_VAR 0 5
40734: PPUSH
40735: CALL_OW 311
40739: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
40740: LD_VAR 0 9
40744: PPUSH
40745: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
40749: LD_VAR 0 9
40753: PPUSH
40754: LD_VAR 0 5
40758: PPUSH
40759: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
40763: LD_VAR 0 9
40767: PPUSH
40768: LD_VAR 0 5
40772: PPUSH
40773: CALL_OW 180
// end ; end ; unit_human :
40777: GO 41044
40779: LD_INT 1
40781: DOUBLE
40782: EQUAL
40783: IFTRUE 40787
40785: GO 41043
40787: POP
// begin b := IsInUnit ( i ) ;
40788: LD_ADDR_VAR 0 18
40792: PUSH
40793: LD_VAR 0 5
40797: PPUSH
40798: CALL_OW 310
40802: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
40803: LD_ADDR_VAR 0 19
40807: PUSH
40808: LD_VAR 0 18
40812: NOT
40813: PUSH
40814: LD_VAR 0 18
40818: PPUSH
40819: CALL_OW 266
40823: PUSH
40824: LD_INT 32
40826: PUSH
40827: LD_INT 31
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: IN
40834: OR
40835: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
40836: LD_VAR 0 16
40840: PUSH
40841: LD_VAR 0 2
40845: PPUSH
40846: LD_INT 21
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PPUSH
40856: CALL_OW 72
40860: PUSH
40861: LD_INT 1
40863: LESSEQUAL
40864: OR
40865: PUSH
40866: LD_VAR 0 19
40870: AND
40871: PUSH
40872: LD_VAR 0 5
40876: PUSH
40877: LD_VAR 0 17
40881: IN
40882: NOT
40883: AND
40884: IFFALSE 40977
// begin if b then
40886: LD_VAR 0 18
40890: IFFALSE 40939
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
40892: LD_VAR 0 18
40896: PPUSH
40897: LD_VAR 0 3
40901: PPUSH
40902: LD_VAR 0 18
40906: PPUSH
40907: CALL_OW 74
40911: PPUSH
40912: CALL_OW 296
40916: PUSH
40917: LD_INT 10
40919: LESS
40920: PUSH
40921: LD_VAR 0 18
40925: PPUSH
40926: CALL_OW 461
40930: PUSH
40931: LD_INT 7
40933: NONEQUAL
40934: AND
40935: IFFALSE 40939
// continue ;
40937: GO 40387
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
40939: LD_ADDR_VAR 0 17
40943: PUSH
40944: LD_VAR 0 17
40948: PPUSH
40949: LD_VAR 0 17
40953: PUSH
40954: LD_INT 1
40956: PLUS
40957: PPUSH
40958: LD_VAR 0 5
40962: PPUSH
40963: CALL_OW 1
40967: ST_TO_ADDR
// ComExitBuilding ( i ) ;
40968: LD_VAR 0 5
40972: PPUSH
40973: CALL_OW 122
// end ; if sold_defenders then
40977: LD_VAR 0 17
40981: IFFALSE 41041
// if i in sold_defenders then
40983: LD_VAR 0 5
40987: PUSH
40988: LD_VAR 0 17
40992: IN
40993: IFFALSE 41041
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
40995: LD_VAR 0 5
40999: PPUSH
41000: CALL_OW 314
41004: NOT
41005: PUSH
41006: LD_VAR 0 5
41010: PPUSH
41011: LD_VAR 0 13
41015: PPUSH
41016: CALL_OW 296
41020: PUSH
41021: LD_INT 30
41023: LESS
41024: AND
41025: IFFALSE 41041
// ComAttackUnit ( i , e ) ;
41027: LD_VAR 0 5
41031: PPUSH
41032: LD_VAR 0 13
41036: PPUSH
41037: CALL_OW 115
// end ; end ; end ;
41041: GO 41044
41043: POP
// if IsDead ( i ) then
41044: LD_VAR 0 5
41048: PPUSH
41049: CALL_OW 301
41053: IFFALSE 41071
// defenders := defenders diff i ;
41055: LD_ADDR_VAR 0 2
41059: PUSH
41060: LD_VAR 0 2
41064: PUSH
41065: LD_VAR 0 5
41069: DIFF
41070: ST_TO_ADDR
// end ;
41071: GO 40387
41073: POP
41074: POP
// until not enemy or not defenders ;
41075: LD_VAR 0 3
41079: NOT
41080: PUSH
41081: LD_VAR 0 2
41085: NOT
41086: OR
41087: IFFALSE 40354
// MC_Reset ( base , 18 ) ;
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_INT 18
41096: PPUSH
41097: CALL 19325 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
41101: LD_ADDR_VAR 0 2
41105: PUSH
41106: LD_VAR 0 2
41110: PUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 25
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 25
41131: PUSH
41132: LD_INT 5
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 25
41141: PUSH
41142: LD_INT 8
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 25
41151: PUSH
41152: LD_INT 9
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: PPUSH
41166: CALL_OW 72
41170: DIFF
41171: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
41172: LD_VAR 0 3
41176: NOT
41177: PUSH
41178: LD_VAR 0 2
41182: PPUSH
41183: LD_INT 21
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PPUSH
41193: CALL_OW 72
41197: AND
41198: IFFALSE 41460
// begin tmp := FilterByTag ( defenders , 19 ) ;
41200: LD_ADDR_VAR 0 11
41204: PUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: LD_INT 19
41212: PPUSH
41213: CALL 77625 0 2
41217: ST_TO_ADDR
// if tmp then
41218: LD_VAR 0 11
41222: IFFALSE 41292
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
41224: LD_ADDR_VAR 0 11
41228: PUSH
41229: LD_VAR 0 11
41233: PPUSH
41234: LD_INT 25
41236: PUSH
41237: LD_INT 3
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PPUSH
41244: CALL_OW 72
41248: ST_TO_ADDR
// if tmp then
41249: LD_VAR 0 11
41253: IFFALSE 41292
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
41255: LD_ADDR_EXP 69
41259: PUSH
41260: LD_EXP 69
41264: PPUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: LD_EXP 69
41274: PUSH
41275: LD_VAR 0 1
41279: ARRAY
41280: PUSH
41281: LD_VAR 0 11
41285: UNION
41286: PPUSH
41287: CALL_OW 1
41291: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
41292: LD_VAR 0 1
41296: PPUSH
41297: LD_INT 19
41299: PPUSH
41300: CALL 19325 0 2
// repeat wait ( 0 0$1 ) ;
41304: LD_INT 35
41306: PPUSH
41307: CALL_OW 67
// for i in defenders do
41311: LD_ADDR_VAR 0 5
41315: PUSH
41316: LD_VAR 0 2
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41411
// begin if not IsInArea ( i , mc_parking [ base ] ) then
41324: LD_VAR 0 5
41328: PPUSH
41329: LD_EXP 81
41333: PUSH
41334: LD_VAR 0 1
41338: ARRAY
41339: PPUSH
41340: CALL_OW 308
41344: NOT
41345: IFFALSE 41369
// ComMoveToArea ( i , mc_parking [ base ] ) else
41347: LD_VAR 0 5
41351: PPUSH
41352: LD_EXP 81
41356: PUSH
41357: LD_VAR 0 1
41361: ARRAY
41362: PPUSH
41363: CALL_OW 113
41367: GO 41409
// if GetControl ( i ) = control_manual then
41369: LD_VAR 0 5
41373: PPUSH
41374: CALL_OW 263
41378: PUSH
41379: LD_INT 1
41381: EQUAL
41382: IFFALSE 41409
// if IsDrivenBy ( i ) then
41384: LD_VAR 0 5
41388: PPUSH
41389: CALL_OW 311
41393: IFFALSE 41409
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
41395: LD_VAR 0 5
41399: PPUSH
41400: CALL_OW 311
41404: PPUSH
41405: CALL_OW 121
// end ;
41409: GO 41321
41411: POP
41412: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
41413: LD_VAR 0 2
41417: PPUSH
41418: LD_INT 95
41420: PUSH
41421: LD_EXP 81
41425: PUSH
41426: LD_VAR 0 1
41430: ARRAY
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PPUSH
41436: CALL_OW 72
41440: PUSH
41441: LD_VAR 0 2
41445: EQUAL
41446: PUSH
41447: LD_EXP 80
41451: PUSH
41452: LD_VAR 0 1
41456: ARRAY
41457: OR
41458: IFFALSE 41304
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
41460: LD_ADDR_EXP 79
41464: PUSH
41465: LD_EXP 79
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_EXP 79
41479: PUSH
41480: LD_VAR 0 1
41484: ARRAY
41485: PUSH
41486: LD_VAR 0 2
41490: UNION
41491: PPUSH
41492: CALL_OW 1
41496: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
41497: LD_VAR 0 1
41501: PPUSH
41502: LD_INT 20
41504: PPUSH
41505: CALL 19325 0 2
// end ;
41509: LD_VAR 0 4
41513: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
// result := false ;
41520: LD_ADDR_VAR 0 2
41524: PUSH
41525: LD_INT 0
41527: ST_TO_ADDR
// side := GetSide ( unit ) ;
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 255
41542: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41543: LD_ADDR_VAR 0 4
41547: PUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 248
41557: ST_TO_ADDR
// case nat of 1 :
41558: LD_VAR 0 4
41562: PUSH
41563: LD_INT 1
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 41582
41571: POP
// tech := tech_lassight ; 2 :
41572: LD_ADDR_VAR 0 5
41576: PUSH
41577: LD_INT 12
41579: ST_TO_ADDR
41580: GO 41621
41582: LD_INT 2
41584: DOUBLE
41585: EQUAL
41586: IFTRUE 41590
41588: GO 41601
41590: POP
// tech := tech_mortar ; 3 :
41591: LD_ADDR_VAR 0 5
41595: PUSH
41596: LD_INT 41
41598: ST_TO_ADDR
41599: GO 41621
41601: LD_INT 3
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41620
41609: POP
// tech := tech_bazooka ; end ;
41610: LD_ADDR_VAR 0 5
41614: PUSH
41615: LD_INT 44
41617: ST_TO_ADDR
41618: GO 41621
41620: POP
// if Researched ( side , tech ) then
41621: LD_VAR 0 3
41625: PPUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: CALL_OW 325
41635: IFFALSE 41662
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41637: LD_ADDR_VAR 0 2
41641: PUSH
41642: LD_INT 5
41644: PUSH
41645: LD_INT 8
41647: PUSH
41648: LD_INT 9
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: PUSH
41656: LD_VAR 0 4
41660: ARRAY
41661: ST_TO_ADDR
// end ;
41662: LD_VAR 0 2
41666: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41667: LD_INT 0
41669: PPUSH
41670: PPUSH
41671: PPUSH
// if not mines then
41672: LD_VAR 0 2
41676: NOT
41677: IFFALSE 41681
// exit ;
41679: GO 41825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41681: LD_ADDR_VAR 0 5
41685: PUSH
41686: LD_INT 81
41688: PUSH
41689: LD_VAR 0 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 21
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PPUSH
41719: CALL_OW 69
41723: ST_TO_ADDR
// for i in mines do
41724: LD_ADDR_VAR 0 4
41728: PUSH
41729: LD_VAR 0 2
41733: PUSH
41734: FOR_IN
41735: IFFALSE 41823
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41737: LD_VAR 0 4
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: PPUSH
41746: LD_VAR 0 4
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 458
41759: NOT
41760: IFFALSE 41764
// continue ;
41762: GO 41734
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41764: LD_VAR 0 4
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: PPUSH
41773: LD_VAR 0 4
41777: PUSH
41778: LD_INT 2
41780: ARRAY
41781: PPUSH
41782: CALL_OW 428
41786: PUSH
41787: LD_VAR 0 5
41791: IN
41792: IFFALSE 41821
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41794: LD_VAR 0 4
41798: PUSH
41799: LD_INT 1
41801: ARRAY
41802: PPUSH
41803: LD_VAR 0 4
41807: PUSH
41808: LD_INT 2
41810: ARRAY
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 456
// end ;
41821: GO 41734
41823: POP
41824: POP
// end ;
41825: LD_VAR 0 3
41829: RET
// export function Count ( array ) ; var i ; begin
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
// result := 0 ;
41834: LD_ADDR_VAR 0 2
41838: PUSH
41839: LD_INT 0
41841: ST_TO_ADDR
// for i in array do
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 1
41851: PUSH
41852: FOR_IN
41853: IFFALSE 41877
// if i then
41855: LD_VAR 0 3
41859: IFFALSE 41875
// result := result + 1 ;
41861: LD_ADDR_VAR 0 2
41865: PUSH
41866: LD_VAR 0 2
41870: PUSH
41871: LD_INT 1
41873: PLUS
41874: ST_TO_ADDR
41875: GO 41852
41877: POP
41878: POP
// end ;
41879: LD_VAR 0 2
41883: RET
// export function IsEmpty ( building ) ; begin
41884: LD_INT 0
41886: PPUSH
// if not building then
41887: LD_VAR 0 1
41891: NOT
41892: IFFALSE 41896
// exit ;
41894: GO 41939
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41896: LD_ADDR_VAR 0 2
41900: PUSH
41901: LD_VAR 0 1
41905: PUSH
41906: LD_INT 22
41908: PUSH
41909: LD_VAR 0 1
41913: PPUSH
41914: CALL_OW 255
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 58
41925: PUSH
41926: EMPTY
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: IN
41938: ST_TO_ADDR
// end ;
41939: LD_VAR 0 2
41943: RET
// export function IsNotFull ( building ) ; begin
41944: LD_INT 0
41946: PPUSH
// if not building then
41947: LD_VAR 0 1
41951: NOT
41952: IFFALSE 41956
// exit ;
41954: GO 41975
// result := UnitsInside ( building ) < 6 ;
41956: LD_ADDR_VAR 0 2
41960: PUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: CALL_OW 313
41970: PUSH
41971: LD_INT 6
41973: LESS
41974: ST_TO_ADDR
// end ;
41975: LD_VAR 0 2
41979: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41980: LD_INT 0
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
// tmp := [ ] ;
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: EMPTY
41992: ST_TO_ADDR
// list := [ ] ;
41993: LD_ADDR_VAR 0 5
41997: PUSH
41998: EMPTY
41999: ST_TO_ADDR
// for i = 16 to 25 do
42000: LD_ADDR_VAR 0 4
42004: PUSH
42005: DOUBLE
42006: LD_INT 16
42008: DEC
42009: ST_TO_ADDR
42010: LD_INT 25
42012: PUSH
42013: FOR_TO
42014: IFFALSE 42087
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42016: LD_ADDR_VAR 0 3
42020: PUSH
42021: LD_VAR 0 3
42025: PUSH
42026: LD_INT 22
42028: PUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 255
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 91
42045: PUSH
42046: LD_VAR 0 1
42050: PUSH
42051: LD_INT 6
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 30
42061: PUSH
42062: LD_VAR 0 4
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: PUSH
42076: EMPTY
42077: LIST
42078: PPUSH
42079: CALL_OW 69
42083: ADD
42084: ST_TO_ADDR
42085: GO 42013
42087: POP
42088: POP
// for i = 1 to tmp do
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_VAR 0 3
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42193
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_VAR 0 5
42116: PUSH
42117: LD_VAR 0 3
42121: PUSH
42122: LD_VAR 0 4
42126: ARRAY
42127: PPUSH
42128: CALL_OW 266
42132: PUSH
42133: LD_VAR 0 3
42137: PUSH
42138: LD_VAR 0 4
42142: ARRAY
42143: PPUSH
42144: CALL_OW 250
42148: PUSH
42149: LD_VAR 0 3
42153: PUSH
42154: LD_VAR 0 4
42158: ARRAY
42159: PPUSH
42160: CALL_OW 251
42164: PUSH
42165: LD_VAR 0 3
42169: PUSH
42170: LD_VAR 0 4
42174: ARRAY
42175: PPUSH
42176: CALL_OW 254
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: ADD
42190: ST_TO_ADDR
42191: GO 42104
42193: POP
42194: POP
// result := list ;
42195: LD_ADDR_VAR 0 2
42199: PUSH
42200: LD_VAR 0 5
42204: ST_TO_ADDR
// end ;
42205: LD_VAR 0 2
42209: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42210: LD_INT 0
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
// if not factory then
42219: LD_VAR 0 1
42223: NOT
42224: IFFALSE 42228
// exit ;
42226: GO 42753
// if control = control_apeman then
42228: LD_VAR 0 4
42232: PUSH
42233: LD_INT 5
42235: EQUAL
42236: IFFALSE 42345
// begin tmp := UnitsInside ( factory ) ;
42238: LD_ADDR_VAR 0 8
42242: PUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 313
42252: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42253: LD_VAR 0 8
42257: PPUSH
42258: LD_INT 25
42260: PUSH
42261: LD_INT 12
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PPUSH
42268: CALL_OW 72
42272: NOT
42273: IFFALSE 42283
// control := control_manual ;
42275: LD_ADDR_VAR 0 4
42279: PUSH
42280: LD_INT 1
42282: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42283: LD_ADDR_VAR 0 8
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: CALL 41980 0 1
42297: ST_TO_ADDR
// if tmp then
42298: LD_VAR 0 8
42302: IFFALSE 42345
// begin for i in tmp do
42304: LD_ADDR_VAR 0 7
42308: PUSH
42309: LD_VAR 0 8
42313: PUSH
42314: FOR_IN
42315: IFFALSE 42343
// if i [ 1 ] = b_ext_radar then
42317: LD_VAR 0 7
42321: PUSH
42322: LD_INT 1
42324: ARRAY
42325: PUSH
42326: LD_INT 20
42328: EQUAL
42329: IFFALSE 42341
// begin control := control_remote ;
42331: LD_ADDR_VAR 0 4
42335: PUSH
42336: LD_INT 2
42338: ST_TO_ADDR
// break ;
42339: GO 42343
// end ;
42341: GO 42314
42343: POP
42344: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42345: LD_VAR 0 1
42349: PPUSH
42350: LD_VAR 0 2
42354: PPUSH
42355: LD_VAR 0 3
42359: PPUSH
42360: LD_VAR 0 4
42364: PPUSH
42365: LD_VAR 0 5
42369: PPUSH
42370: CALL_OW 448
42374: IFFALSE 42409
// begin result := [ chassis , engine , control , weapon ] ;
42376: LD_ADDR_VAR 0 6
42380: PUSH
42381: LD_VAR 0 2
42385: PUSH
42386: LD_VAR 0 3
42390: PUSH
42391: LD_VAR 0 4
42395: PUSH
42396: LD_VAR 0 5
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// exit ;
42407: GO 42753
// end ; _chassis := AvailableChassisList ( factory ) ;
42409: LD_ADDR_VAR 0 9
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 475
42423: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42424: LD_ADDR_VAR 0 11
42428: PUSH
42429: LD_VAR 0 1
42433: PPUSH
42434: CALL_OW 476
42438: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42439: LD_ADDR_VAR 0 12
42443: PUSH
42444: LD_VAR 0 1
42448: PPUSH
42449: CALL_OW 477
42453: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42454: LD_ADDR_VAR 0 10
42458: PUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 478
42468: ST_TO_ADDR
// if not chassis in _chassis then
42469: LD_VAR 0 2
42473: PUSH
42474: LD_VAR 0 9
42478: IN
42479: NOT
42480: IFFALSE 42506
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42482: LD_ADDR_VAR 0 2
42486: PUSH
42487: LD_VAR 0 9
42491: PUSH
42492: LD_INT 1
42494: PPUSH
42495: LD_VAR 0 9
42499: PPUSH
42500: CALL_OW 12
42504: ARRAY
42505: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42506: LD_VAR 0 2
42510: PPUSH
42511: LD_VAR 0 3
42515: PPUSH
42516: CALL 42758 0 2
42520: NOT
42521: IFFALSE 42580
// repeat engine := _engine [ 1 ] ;
42523: LD_ADDR_VAR 0 3
42527: PUSH
42528: LD_VAR 0 11
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42537: LD_ADDR_VAR 0 11
42541: PUSH
42542: LD_VAR 0 11
42546: PPUSH
42547: LD_INT 1
42549: PPUSH
42550: CALL_OW 3
42554: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42555: LD_VAR 0 2
42559: PPUSH
42560: LD_VAR 0 3
42564: PPUSH
42565: CALL 42758 0 2
42569: PUSH
42570: LD_VAR 0 11
42574: PUSH
42575: EMPTY
42576: EQUAL
42577: OR
42578: IFFALSE 42523
// if not control in _control then
42580: LD_VAR 0 4
42584: PUSH
42585: LD_VAR 0 12
42589: IN
42590: NOT
42591: IFFALSE 42617
// control := _control [ rand ( 1 , _control ) ] ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: LD_VAR 0 12
42602: PUSH
42603: LD_INT 1
42605: PPUSH
42606: LD_VAR 0 12
42610: PPUSH
42611: CALL_OW 12
42615: ARRAY
42616: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42617: LD_VAR 0 2
42621: PPUSH
42622: LD_VAR 0 5
42626: PPUSH
42627: CALL 42978 0 2
42631: NOT
42632: IFFALSE 42691
// repeat weapon := _weapon [ 1 ] ;
42634: LD_ADDR_VAR 0 5
42638: PUSH
42639: LD_VAR 0 10
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42648: LD_ADDR_VAR 0 10
42652: PUSH
42653: LD_VAR 0 10
42657: PPUSH
42658: LD_INT 1
42660: PPUSH
42661: CALL_OW 3
42665: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42666: LD_VAR 0 2
42670: PPUSH
42671: LD_VAR 0 5
42675: PPUSH
42676: CALL 42978 0 2
42680: PUSH
42681: LD_VAR 0 10
42685: PUSH
42686: EMPTY
42687: EQUAL
42688: OR
42689: IFFALSE 42634
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42691: LD_VAR 0 1
42695: PPUSH
42696: LD_VAR 0 2
42700: PPUSH
42701: LD_VAR 0 3
42705: PPUSH
42706: LD_VAR 0 4
42710: PPUSH
42711: LD_VAR 0 5
42715: PPUSH
42716: CALL_OW 448
42720: IFFALSE 42753
// result := [ chassis , engine , control , weapon ] ;
42722: LD_ADDR_VAR 0 6
42726: PUSH
42727: LD_VAR 0 2
42731: PUSH
42732: LD_VAR 0 3
42736: PUSH
42737: LD_VAR 0 4
42741: PUSH
42742: LD_VAR 0 5
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// end ;
42753: LD_VAR 0 6
42757: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42758: LD_INT 0
42760: PPUSH
// if not chassis or not engine then
42761: LD_VAR 0 1
42765: NOT
42766: PUSH
42767: LD_VAR 0 2
42771: NOT
42772: OR
42773: IFFALSE 42777
// exit ;
42775: GO 42973
// case engine of engine_solar :
42777: LD_VAR 0 2
42781: PUSH
42782: LD_INT 2
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42828
42790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_INT 11
42798: PUSH
42799: LD_INT 12
42801: PUSH
42802: LD_INT 13
42804: PUSH
42805: LD_INT 14
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
42826: GO 42957
42828: LD_INT 1
42830: DOUBLE
42831: EQUAL
42832: IFTRUE 42836
42834: GO 42898
42836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42837: LD_ADDR_VAR 0 3
42841: PUSH
42842: LD_INT 11
42844: PUSH
42845: LD_INT 12
42847: PUSH
42848: LD_INT 13
42850: PUSH
42851: LD_INT 14
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: LD_INT 4
42865: PUSH
42866: LD_INT 5
42868: PUSH
42869: LD_INT 21
42871: PUSH
42872: LD_INT 23
42874: PUSH
42875: LD_INT 22
42877: PUSH
42878: LD_INT 24
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: ST_TO_ADDR
42896: GO 42957
42898: LD_INT 3
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42906
42904: GO 42956
42906: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_INT 13
42914: PUSH
42915: LD_INT 14
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 4
42926: PUSH
42927: LD_INT 5
42929: PUSH
42930: LD_INT 21
42932: PUSH
42933: LD_INT 22
42935: PUSH
42936: LD_INT 23
42938: PUSH
42939: LD_INT 24
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
42954: GO 42957
42956: POP
// result := ( chassis in result ) ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_VAR 0 1
42966: PUSH
42967: LD_VAR 0 3
42971: IN
42972: ST_TO_ADDR
// end ;
42973: LD_VAR 0 3
42977: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42978: LD_INT 0
42980: PPUSH
// if not chassis or not weapon then
42981: LD_VAR 0 1
42985: NOT
42986: PUSH
42987: LD_VAR 0 2
42991: NOT
42992: OR
42993: IFFALSE 42997
// exit ;
42995: GO 44023
// case weapon of us_machine_gun :
42997: LD_VAR 0 2
43001: PUSH
43002: LD_INT 2
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43040
43010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 4
43027: PUSH
43028: LD_INT 5
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
43038: GO 44007
43040: LD_INT 3
43042: DOUBLE
43043: EQUAL
43044: IFTRUE 43048
43046: GO 43078
43048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43049: LD_ADDR_VAR 0 3
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: LD_INT 5
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
43076: GO 44007
43078: LD_INT 11
43080: DOUBLE
43081: EQUAL
43082: IFTRUE 43086
43084: GO 43116
43086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: LD_INT 4
43103: PUSH
43104: LD_INT 5
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
43114: GO 44007
43116: LD_INT 4
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43150
43124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 4
43138: PUSH
43139: LD_INT 5
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
43148: GO 44007
43150: LD_INT 5
43152: DOUBLE
43153: EQUAL
43154: IFTRUE 43158
43156: GO 43184
43158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43159: LD_ADDR_VAR 0 3
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: LD_INT 4
43172: PUSH
43173: LD_INT 5
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: ST_TO_ADDR
43182: GO 44007
43184: LD_INT 9
43186: DOUBLE
43187: EQUAL
43188: IFTRUE 43192
43190: GO 43218
43192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: LD_INT 4
43206: PUSH
43207: LD_INT 5
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: ST_TO_ADDR
43216: GO 44007
43218: LD_INT 7
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43226
43224: GO 43252
43226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 5
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
43250: GO 44007
43252: LD_INT 12
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43286
43260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43261: LD_ADDR_VAR 0 3
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: LD_INT 4
43274: PUSH
43275: LD_INT 5
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
43284: GO 44007
43286: LD_INT 13
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43320
43294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 4
43308: PUSH
43309: LD_INT 5
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
43318: GO 44007
43320: LD_INT 14
43322: DOUBLE
43323: EQUAL
43324: IFTRUE 43328
43326: GO 43346
43328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43329: LD_ADDR_VAR 0 3
43333: PUSH
43334: LD_INT 4
43336: PUSH
43337: LD_INT 5
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: ST_TO_ADDR
43344: GO 44007
43346: LD_INT 6
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43372
43354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 4
43362: PUSH
43363: LD_INT 5
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: ST_TO_ADDR
43370: GO 44007
43372: LD_INT 10
43374: DOUBLE
43375: EQUAL
43376: IFTRUE 43380
43378: GO 43398
43380: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: ST_TO_ADDR
43396: GO 44007
43398: LD_INT 22
43400: DOUBLE
43401: EQUAL
43402: IFTRUE 43406
43404: GO 43432
43406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43407: LD_ADDR_VAR 0 3
43411: PUSH
43412: LD_INT 11
43414: PUSH
43415: LD_INT 12
43417: PUSH
43418: LD_INT 13
43420: PUSH
43421: LD_INT 14
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
43430: GO 44007
43432: LD_INT 23
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43440
43438: GO 43466
43440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_INT 11
43448: PUSH
43449: LD_INT 12
43451: PUSH
43452: LD_INT 13
43454: PUSH
43455: LD_INT 14
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
43464: GO 44007
43466: LD_INT 24
43468: DOUBLE
43469: EQUAL
43470: IFTRUE 43474
43472: GO 43500
43474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43475: LD_ADDR_VAR 0 3
43479: PUSH
43480: LD_INT 11
43482: PUSH
43483: LD_INT 12
43485: PUSH
43486: LD_INT 13
43488: PUSH
43489: LD_INT 14
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
43498: GO 44007
43500: LD_INT 30
43502: DOUBLE
43503: EQUAL
43504: IFTRUE 43508
43506: GO 43534
43508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43509: LD_ADDR_VAR 0 3
43513: PUSH
43514: LD_INT 11
43516: PUSH
43517: LD_INT 12
43519: PUSH
43520: LD_INT 13
43522: PUSH
43523: LD_INT 14
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
43532: GO 44007
43534: LD_INT 25
43536: DOUBLE
43537: EQUAL
43538: IFTRUE 43542
43540: GO 43560
43542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_INT 13
43550: PUSH
43551: LD_INT 14
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: ST_TO_ADDR
43558: GO 44007
43560: LD_INT 27
43562: DOUBLE
43563: EQUAL
43564: IFTRUE 43568
43566: GO 43586
43568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_INT 13
43576: PUSH
43577: LD_INT 14
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: ST_TO_ADDR
43584: GO 44007
43586: LD_INT 28
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43612
43594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43595: LD_ADDR_VAR 0 3
43599: PUSH
43600: LD_INT 13
43602: PUSH
43603: LD_INT 14
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: ST_TO_ADDR
43610: GO 44007
43612: LD_INT 29
43614: DOUBLE
43615: EQUAL
43616: IFTRUE 43620
43618: GO 43638
43620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43621: LD_ADDR_VAR 0 3
43625: PUSH
43626: LD_INT 13
43628: PUSH
43629: LD_INT 14
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: ST_TO_ADDR
43636: GO 44007
43638: LD_INT 31
43640: DOUBLE
43641: EQUAL
43642: IFTRUE 43646
43644: GO 43664
43646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_INT 13
43654: PUSH
43655: LD_INT 14
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: ST_TO_ADDR
43662: GO 44007
43664: LD_INT 26
43666: DOUBLE
43667: EQUAL
43668: IFTRUE 43672
43670: GO 43690
43672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43673: LD_ADDR_VAR 0 3
43677: PUSH
43678: LD_INT 13
43680: PUSH
43681: LD_INT 14
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: ST_TO_ADDR
43688: GO 44007
43690: LD_INT 42
43692: DOUBLE
43693: EQUAL
43694: IFTRUE 43698
43696: GO 43724
43698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43699: LD_ADDR_VAR 0 3
43703: PUSH
43704: LD_INT 21
43706: PUSH
43707: LD_INT 22
43709: PUSH
43710: LD_INT 23
43712: PUSH
43713: LD_INT 24
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
43722: GO 44007
43724: LD_INT 43
43726: DOUBLE
43727: EQUAL
43728: IFTRUE 43732
43730: GO 43758
43732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_INT 21
43740: PUSH
43741: LD_INT 22
43743: PUSH
43744: LD_INT 23
43746: PUSH
43747: LD_INT 24
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
43756: GO 44007
43758: LD_INT 44
43760: DOUBLE
43761: EQUAL
43762: IFTRUE 43766
43764: GO 43792
43766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43767: LD_ADDR_VAR 0 3
43771: PUSH
43772: LD_INT 21
43774: PUSH
43775: LD_INT 22
43777: PUSH
43778: LD_INT 23
43780: PUSH
43781: LD_INT 24
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
43790: GO 44007
43792: LD_INT 45
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43800
43798: GO 43826
43800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43801: LD_ADDR_VAR 0 3
43805: PUSH
43806: LD_INT 21
43808: PUSH
43809: LD_INT 22
43811: PUSH
43812: LD_INT 23
43814: PUSH
43815: LD_INT 24
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
43824: GO 44007
43826: LD_INT 49
43828: DOUBLE
43829: EQUAL
43830: IFTRUE 43834
43832: GO 43860
43834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43835: LD_ADDR_VAR 0 3
43839: PUSH
43840: LD_INT 21
43842: PUSH
43843: LD_INT 22
43845: PUSH
43846: LD_INT 23
43848: PUSH
43849: LD_INT 24
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
43858: GO 44007
43860: LD_INT 51
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43894
43868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 21
43876: PUSH
43877: LD_INT 22
43879: PUSH
43880: LD_INT 23
43882: PUSH
43883: LD_INT 24
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
43892: GO 44007
43894: LD_INT 52
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43928
43902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 21
43910: PUSH
43911: LD_INT 22
43913: PUSH
43914: LD_INT 23
43916: PUSH
43917: LD_INT 24
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: ST_TO_ADDR
43926: GO 44007
43928: LD_INT 53
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43954
43936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_INT 23
43944: PUSH
43945: LD_INT 24
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: ST_TO_ADDR
43952: GO 44007
43954: LD_INT 46
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 43962
43960: GO 43980
43962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: LD_INT 23
43970: PUSH
43971: LD_INT 24
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: ST_TO_ADDR
43978: GO 44007
43980: LD_INT 47
43982: DOUBLE
43983: EQUAL
43984: IFTRUE 43988
43986: GO 44006
43988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43989: LD_ADDR_VAR 0 3
43993: PUSH
43994: LD_INT 23
43996: PUSH
43997: LD_INT 24
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: ST_TO_ADDR
44004: GO 44007
44006: POP
// result := ( chassis in result ) ;
44007: LD_ADDR_VAR 0 3
44011: PUSH
44012: LD_VAR 0 1
44016: PUSH
44017: LD_VAR 0 3
44021: IN
44022: ST_TO_ADDR
// end ;
44023: LD_VAR 0 3
44027: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44028: LD_INT 0
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
// result := array ;
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: LD_VAR 0 1
44046: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44047: LD_VAR 0 1
44051: NOT
44052: PUSH
44053: LD_VAR 0 2
44057: NOT
44058: OR
44059: PUSH
44060: LD_VAR 0 3
44064: NOT
44065: OR
44066: PUSH
44067: LD_VAR 0 2
44071: PUSH
44072: LD_VAR 0 1
44076: GREATER
44077: OR
44078: PUSH
44079: LD_VAR 0 3
44083: PUSH
44084: LD_VAR 0 1
44088: GREATER
44089: OR
44090: IFFALSE 44094
// exit ;
44092: GO 44390
// if direction then
44094: LD_VAR 0 4
44098: IFFALSE 44162
// begin d := 1 ;
44100: LD_ADDR_VAR 0 9
44104: PUSH
44105: LD_INT 1
44107: ST_TO_ADDR
// if i_from > i_to then
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 3
44117: GREATER
44118: IFFALSE 44144
// length := ( array - i_from ) + i_to else
44120: LD_ADDR_VAR 0 11
44124: PUSH
44125: LD_VAR 0 1
44129: PUSH
44130: LD_VAR 0 2
44134: MINUS
44135: PUSH
44136: LD_VAR 0 3
44140: PLUS
44141: ST_TO_ADDR
44142: GO 44160
// length := i_to - i_from ;
44144: LD_ADDR_VAR 0 11
44148: PUSH
44149: LD_VAR 0 3
44153: PUSH
44154: LD_VAR 0 2
44158: MINUS
44159: ST_TO_ADDR
// end else
44160: GO 44223
// begin d := - 1 ;
44162: LD_ADDR_VAR 0 9
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: ST_TO_ADDR
// if i_from > i_to then
44171: LD_VAR 0 2
44175: PUSH
44176: LD_VAR 0 3
44180: GREATER
44181: IFFALSE 44201
// length := i_from - i_to else
44183: LD_ADDR_VAR 0 11
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: LD_VAR 0 3
44197: MINUS
44198: ST_TO_ADDR
44199: GO 44223
// length := ( array - i_to ) + i_from ;
44201: LD_ADDR_VAR 0 11
44205: PUSH
44206: LD_VAR 0 1
44210: PUSH
44211: LD_VAR 0 3
44215: MINUS
44216: PUSH
44217: LD_VAR 0 2
44221: PLUS
44222: ST_TO_ADDR
// end ; if not length then
44223: LD_VAR 0 11
44227: NOT
44228: IFFALSE 44232
// exit ;
44230: GO 44390
// tmp := array ;
44232: LD_ADDR_VAR 0 10
44236: PUSH
44237: LD_VAR 0 1
44241: ST_TO_ADDR
// for i = 1 to length do
44242: LD_ADDR_VAR 0 6
44246: PUSH
44247: DOUBLE
44248: LD_INT 1
44250: DEC
44251: ST_TO_ADDR
44252: LD_VAR 0 11
44256: PUSH
44257: FOR_TO
44258: IFFALSE 44378
// begin for j = 1 to array do
44260: LD_ADDR_VAR 0 7
44264: PUSH
44265: DOUBLE
44266: LD_INT 1
44268: DEC
44269: ST_TO_ADDR
44270: LD_VAR 0 1
44274: PUSH
44275: FOR_TO
44276: IFFALSE 44364
// begin k := j + d ;
44278: LD_ADDR_VAR 0 8
44282: PUSH
44283: LD_VAR 0 7
44287: PUSH
44288: LD_VAR 0 9
44292: PLUS
44293: ST_TO_ADDR
// if k > array then
44294: LD_VAR 0 8
44298: PUSH
44299: LD_VAR 0 1
44303: GREATER
44304: IFFALSE 44314
// k := 1 ;
44306: LD_ADDR_VAR 0 8
44310: PUSH
44311: LD_INT 1
44313: ST_TO_ADDR
// if not k then
44314: LD_VAR 0 8
44318: NOT
44319: IFFALSE 44331
// k := array ;
44321: LD_ADDR_VAR 0 8
44325: PUSH
44326: LD_VAR 0 1
44330: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44331: LD_ADDR_VAR 0 10
44335: PUSH
44336: LD_VAR 0 10
44340: PPUSH
44341: LD_VAR 0 8
44345: PPUSH
44346: LD_VAR 0 1
44350: PUSH
44351: LD_VAR 0 7
44355: ARRAY
44356: PPUSH
44357: CALL_OW 1
44361: ST_TO_ADDR
// end ;
44362: GO 44275
44364: POP
44365: POP
// array := tmp ;
44366: LD_ADDR_VAR 0 1
44370: PUSH
44371: LD_VAR 0 10
44375: ST_TO_ADDR
// end ;
44376: GO 44257
44378: POP
44379: POP
// result := array ;
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: LD_VAR 0 1
44389: ST_TO_ADDR
// end ;
44390: LD_VAR 0 5
44394: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44395: LD_INT 0
44397: PPUSH
44398: PPUSH
// result := 0 ;
44399: LD_ADDR_VAR 0 3
44403: PUSH
44404: LD_INT 0
44406: ST_TO_ADDR
// if not array or not value in array then
44407: LD_VAR 0 1
44411: NOT
44412: PUSH
44413: LD_VAR 0 2
44417: PUSH
44418: LD_VAR 0 1
44422: IN
44423: NOT
44424: OR
44425: IFFALSE 44429
// exit ;
44427: GO 44483
// for i = 1 to array do
44429: LD_ADDR_VAR 0 4
44433: PUSH
44434: DOUBLE
44435: LD_INT 1
44437: DEC
44438: ST_TO_ADDR
44439: LD_VAR 0 1
44443: PUSH
44444: FOR_TO
44445: IFFALSE 44481
// if value = array [ i ] then
44447: LD_VAR 0 2
44451: PUSH
44452: LD_VAR 0 1
44456: PUSH
44457: LD_VAR 0 4
44461: ARRAY
44462: EQUAL
44463: IFFALSE 44479
// begin result := i ;
44465: LD_ADDR_VAR 0 3
44469: PUSH
44470: LD_VAR 0 4
44474: ST_TO_ADDR
// exit ;
44475: POP
44476: POP
44477: GO 44483
// end ;
44479: GO 44444
44481: POP
44482: POP
// end ;
44483: LD_VAR 0 3
44487: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44488: LD_INT 0
44490: PPUSH
// vc_chassis := chassis ;
44491: LD_ADDR_OWVAR 37
44495: PUSH
44496: LD_VAR 0 1
44500: ST_TO_ADDR
// vc_engine := engine ;
44501: LD_ADDR_OWVAR 39
44505: PUSH
44506: LD_VAR 0 2
44510: ST_TO_ADDR
// vc_control := control ;
44511: LD_ADDR_OWVAR 38
44515: PUSH
44516: LD_VAR 0 3
44520: ST_TO_ADDR
// vc_weapon := weapon ;
44521: LD_ADDR_OWVAR 40
44525: PUSH
44526: LD_VAR 0 4
44530: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44531: LD_ADDR_OWVAR 41
44535: PUSH
44536: LD_VAR 0 5
44540: ST_TO_ADDR
// end ;
44541: LD_VAR 0 6
44545: RET
// export function WantPlant ( unit ) ; var task ; begin
44546: LD_INT 0
44548: PPUSH
44549: PPUSH
// result := false ;
44550: LD_ADDR_VAR 0 2
44554: PUSH
44555: LD_INT 0
44557: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44558: LD_ADDR_VAR 0 3
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: CALL_OW 437
44572: ST_TO_ADDR
// if task then
44573: LD_VAR 0 3
44577: IFFALSE 44605
// if task [ 1 ] [ 1 ] = p then
44579: LD_VAR 0 3
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: PUSH
44588: LD_INT 1
44590: ARRAY
44591: PUSH
44592: LD_STRING p
44594: EQUAL
44595: IFFALSE 44605
// result := true ;
44597: LD_ADDR_VAR 0 2
44601: PUSH
44602: LD_INT 1
44604: ST_TO_ADDR
// end ;
44605: LD_VAR 0 2
44609: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44610: LD_INT 0
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
// if pos < 1 then
44616: LD_VAR 0 2
44620: PUSH
44621: LD_INT 1
44623: LESS
44624: IFFALSE 44628
// exit ;
44626: GO 44931
// if pos = 1 then
44628: LD_VAR 0 2
44632: PUSH
44633: LD_INT 1
44635: EQUAL
44636: IFFALSE 44669
// result := Replace ( arr , pos [ 1 ] , value ) else
44638: LD_ADDR_VAR 0 4
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: LD_VAR 0 2
44652: PUSH
44653: LD_INT 1
44655: ARRAY
44656: PPUSH
44657: LD_VAR 0 3
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
44667: GO 44931
// begin tmp := arr ;
44669: LD_ADDR_VAR 0 6
44673: PUSH
44674: LD_VAR 0 1
44678: ST_TO_ADDR
// s_arr := [ tmp ] ;
44679: LD_ADDR_VAR 0 7
44683: PUSH
44684: LD_VAR 0 6
44688: PUSH
44689: EMPTY
44690: LIST
44691: ST_TO_ADDR
// for i = 1 to pos - 1 do
44692: LD_ADDR_VAR 0 5
44696: PUSH
44697: DOUBLE
44698: LD_INT 1
44700: DEC
44701: ST_TO_ADDR
44702: LD_VAR 0 2
44706: PUSH
44707: LD_INT 1
44709: MINUS
44710: PUSH
44711: FOR_TO
44712: IFFALSE 44757
// begin tmp := tmp [ pos [ i ] ] ;
44714: LD_ADDR_VAR 0 6
44718: PUSH
44719: LD_VAR 0 6
44723: PUSH
44724: LD_VAR 0 2
44728: PUSH
44729: LD_VAR 0 5
44733: ARRAY
44734: ARRAY
44735: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44736: LD_ADDR_VAR 0 7
44740: PUSH
44741: LD_VAR 0 7
44745: PUSH
44746: LD_VAR 0 6
44750: PUSH
44751: EMPTY
44752: LIST
44753: ADD
44754: ST_TO_ADDR
// end ;
44755: GO 44711
44757: POP
44758: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44759: LD_ADDR_VAR 0 6
44763: PUSH
44764: LD_VAR 0 6
44768: PPUSH
44769: LD_VAR 0 2
44773: PUSH
44774: LD_VAR 0 2
44778: ARRAY
44779: PPUSH
44780: LD_VAR 0 3
44784: PPUSH
44785: CALL_OW 1
44789: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44790: LD_ADDR_VAR 0 7
44794: PUSH
44795: LD_VAR 0 7
44799: PPUSH
44800: LD_VAR 0 7
44804: PPUSH
44805: LD_VAR 0 6
44809: PPUSH
44810: CALL_OW 1
44814: ST_TO_ADDR
// for i = s_arr downto 2 do
44815: LD_ADDR_VAR 0 5
44819: PUSH
44820: DOUBLE
44821: LD_VAR 0 7
44825: INC
44826: ST_TO_ADDR
44827: LD_INT 2
44829: PUSH
44830: FOR_DOWNTO
44831: IFFALSE 44915
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44833: LD_ADDR_VAR 0 6
44837: PUSH
44838: LD_VAR 0 7
44842: PUSH
44843: LD_VAR 0 5
44847: PUSH
44848: LD_INT 1
44850: MINUS
44851: ARRAY
44852: PPUSH
44853: LD_VAR 0 2
44857: PUSH
44858: LD_VAR 0 5
44862: PUSH
44863: LD_INT 1
44865: MINUS
44866: ARRAY
44867: PPUSH
44868: LD_VAR 0 7
44872: PUSH
44873: LD_VAR 0 5
44877: ARRAY
44878: PPUSH
44879: CALL_OW 1
44883: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44884: LD_ADDR_VAR 0 7
44888: PUSH
44889: LD_VAR 0 7
44893: PPUSH
44894: LD_VAR 0 5
44898: PUSH
44899: LD_INT 1
44901: MINUS
44902: PPUSH
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 1
44912: ST_TO_ADDR
// end ;
44913: GO 44830
44915: POP
44916: POP
// result := s_arr [ 1 ] ;
44917: LD_ADDR_VAR 0 4
44921: PUSH
44922: LD_VAR 0 7
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: ST_TO_ADDR
// end ; end ;
44931: LD_VAR 0 4
44935: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44936: LD_INT 0
44938: PPUSH
44939: PPUSH
// if not list then
44940: LD_VAR 0 1
44944: NOT
44945: IFFALSE 44949
// exit ;
44947: GO 45040
// i := list [ pos1 ] ;
44949: LD_ADDR_VAR 0 5
44953: PUSH
44954: LD_VAR 0 1
44958: PUSH
44959: LD_VAR 0 2
44963: ARRAY
44964: ST_TO_ADDR
// if not i then
44965: LD_VAR 0 5
44969: NOT
44970: IFFALSE 44974
// exit ;
44972: GO 45040
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44974: LD_ADDR_VAR 0 1
44978: PUSH
44979: LD_VAR 0 1
44983: PPUSH
44984: LD_VAR 0 2
44988: PPUSH
44989: LD_VAR 0 1
44993: PUSH
44994: LD_VAR 0 3
44998: ARRAY
44999: PPUSH
45000: CALL_OW 1
45004: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45005: LD_ADDR_VAR 0 1
45009: PUSH
45010: LD_VAR 0 1
45014: PPUSH
45015: LD_VAR 0 3
45019: PPUSH
45020: LD_VAR 0 5
45024: PPUSH
45025: CALL_OW 1
45029: ST_TO_ADDR
// result := list ;
45030: LD_ADDR_VAR 0 4
45034: PUSH
45035: LD_VAR 0 1
45039: ST_TO_ADDR
// end ;
45040: LD_VAR 0 4
45044: RET
// export function Add ( list , pos , val ) ; begin
45045: LD_INT 0
45047: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
45048: LD_ADDR_VAR 0 4
45052: PUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: LD_VAR 0 2
45062: PPUSH
45063: LD_VAR 0 3
45067: PPUSH
45068: CALL 44610 0 3
45072: ST_TO_ADDR
45073: LD_VAR 0 4
45077: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45078: LD_INT 0
45080: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45081: LD_ADDR_VAR 0 5
45085: PUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 250
45095: PPUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 251
45105: PPUSH
45106: LD_VAR 0 2
45110: PPUSH
45111: LD_VAR 0 3
45115: PPUSH
45116: LD_VAR 0 4
45120: PPUSH
45121: CALL 45131 0 5
45125: ST_TO_ADDR
// end ;
45126: LD_VAR 0 5
45130: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45131: LD_INT 0
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
// if not list then
45137: LD_VAR 0 3
45141: NOT
45142: IFFALSE 45146
// exit ;
45144: GO 45534
// result := [ ] ;
45146: LD_ADDR_VAR 0 6
45150: PUSH
45151: EMPTY
45152: ST_TO_ADDR
// for i in list do
45153: LD_ADDR_VAR 0 7
45157: PUSH
45158: LD_VAR 0 3
45162: PUSH
45163: FOR_IN
45164: IFFALSE 45366
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45166: LD_ADDR_VAR 0 9
45170: PUSH
45171: LD_VAR 0 7
45175: PPUSH
45176: LD_VAR 0 1
45180: PPUSH
45181: LD_VAR 0 2
45185: PPUSH
45186: CALL_OW 297
45190: ST_TO_ADDR
// if not result then
45191: LD_VAR 0 6
45195: NOT
45196: IFFALSE 45222
// result := [ [ i , tmp ] ] else
45198: LD_ADDR_VAR 0 6
45202: PUSH
45203: LD_VAR 0 7
45207: PUSH
45208: LD_VAR 0 9
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: ST_TO_ADDR
45220: GO 45364
// begin if result [ result ] [ 2 ] < tmp then
45222: LD_VAR 0 6
45226: PUSH
45227: LD_VAR 0 6
45231: ARRAY
45232: PUSH
45233: LD_INT 2
45235: ARRAY
45236: PUSH
45237: LD_VAR 0 9
45241: LESS
45242: IFFALSE 45284
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45244: LD_ADDR_VAR 0 6
45248: PUSH
45249: LD_VAR 0 6
45253: PPUSH
45254: LD_VAR 0 6
45258: PUSH
45259: LD_INT 1
45261: PLUS
45262: PPUSH
45263: LD_VAR 0 7
45267: PUSH
45268: LD_VAR 0 9
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PPUSH
45277: CALL_OW 2
45281: ST_TO_ADDR
45282: GO 45364
// for j = 1 to result do
45284: LD_ADDR_VAR 0 8
45288: PUSH
45289: DOUBLE
45290: LD_INT 1
45292: DEC
45293: ST_TO_ADDR
45294: LD_VAR 0 6
45298: PUSH
45299: FOR_TO
45300: IFFALSE 45362
// begin if tmp < result [ j ] [ 2 ] then
45302: LD_VAR 0 9
45306: PUSH
45307: LD_VAR 0 6
45311: PUSH
45312: LD_VAR 0 8
45316: ARRAY
45317: PUSH
45318: LD_INT 2
45320: ARRAY
45321: LESS
45322: IFFALSE 45360
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45324: LD_ADDR_VAR 0 6
45328: PUSH
45329: LD_VAR 0 6
45333: PPUSH
45334: LD_VAR 0 8
45338: PPUSH
45339: LD_VAR 0 7
45343: PUSH
45344: LD_VAR 0 9
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PPUSH
45353: CALL_OW 2
45357: ST_TO_ADDR
// break ;
45358: GO 45362
// end ; end ;
45360: GO 45299
45362: POP
45363: POP
// end ; end ;
45364: GO 45163
45366: POP
45367: POP
// if result and not asc then
45368: LD_VAR 0 6
45372: PUSH
45373: LD_VAR 0 4
45377: NOT
45378: AND
45379: IFFALSE 45454
// begin tmp := result ;
45381: LD_ADDR_VAR 0 9
45385: PUSH
45386: LD_VAR 0 6
45390: ST_TO_ADDR
// for i = tmp downto 1 do
45391: LD_ADDR_VAR 0 7
45395: PUSH
45396: DOUBLE
45397: LD_VAR 0 9
45401: INC
45402: ST_TO_ADDR
45403: LD_INT 1
45405: PUSH
45406: FOR_DOWNTO
45407: IFFALSE 45452
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45409: LD_ADDR_VAR 0 6
45413: PUSH
45414: LD_VAR 0 6
45418: PPUSH
45419: LD_VAR 0 9
45423: PUSH
45424: LD_VAR 0 7
45428: MINUS
45429: PUSH
45430: LD_INT 1
45432: PLUS
45433: PPUSH
45434: LD_VAR 0 9
45438: PUSH
45439: LD_VAR 0 7
45443: ARRAY
45444: PPUSH
45445: CALL_OW 1
45449: ST_TO_ADDR
45450: GO 45406
45452: POP
45453: POP
// end ; tmp := [ ] ;
45454: LD_ADDR_VAR 0 9
45458: PUSH
45459: EMPTY
45460: ST_TO_ADDR
// if mode then
45461: LD_VAR 0 5
45465: IFFALSE 45534
// begin for i = 1 to result do
45467: LD_ADDR_VAR 0 7
45471: PUSH
45472: DOUBLE
45473: LD_INT 1
45475: DEC
45476: ST_TO_ADDR
45477: LD_VAR 0 6
45481: PUSH
45482: FOR_TO
45483: IFFALSE 45522
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45485: LD_ADDR_VAR 0 9
45489: PUSH
45490: LD_VAR 0 9
45494: PPUSH
45495: LD_VAR 0 7
45499: PPUSH
45500: LD_VAR 0 6
45504: PUSH
45505: LD_VAR 0 7
45509: ARRAY
45510: PUSH
45511: LD_INT 1
45513: ARRAY
45514: PPUSH
45515: CALL_OW 1
45519: ST_TO_ADDR
45520: GO 45482
45522: POP
45523: POP
// result := tmp ;
45524: LD_ADDR_VAR 0 6
45528: PUSH
45529: LD_VAR 0 9
45533: ST_TO_ADDR
// end ; end ;
45534: LD_VAR 0 6
45538: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45539: LD_INT 0
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45547: LD_ADDR_VAR 0 5
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// if not x or not y then
45569: LD_VAR 0 2
45573: NOT
45574: PUSH
45575: LD_VAR 0 3
45579: NOT
45580: OR
45581: IFFALSE 45585
// exit ;
45583: GO 47231
// if not range then
45585: LD_VAR 0 4
45589: NOT
45590: IFFALSE 45600
// range := 10 ;
45592: LD_ADDR_VAR 0 4
45596: PUSH
45597: LD_INT 10
45599: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45600: LD_ADDR_VAR 0 8
45604: PUSH
45605: LD_INT 81
45607: PUSH
45608: LD_VAR 0 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 92
45619: PUSH
45620: LD_VAR 0 2
45624: PUSH
45625: LD_VAR 0 3
45629: PUSH
45630: LD_VAR 0 4
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: LD_INT 21
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: PPUSH
45663: CALL_OW 69
45667: ST_TO_ADDR
// if not tmp then
45668: LD_VAR 0 8
45672: NOT
45673: IFFALSE 45677
// exit ;
45675: GO 47231
// for i in tmp do
45677: LD_ADDR_VAR 0 6
45681: PUSH
45682: LD_VAR 0 8
45686: PUSH
45687: FOR_IN
45688: IFFALSE 47206
// begin points := [ 0 , 0 , 0 ] ;
45690: LD_ADDR_VAR 0 9
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// bpoints := 1 ;
45709: LD_ADDR_VAR 0 10
45713: PUSH
45714: LD_INT 1
45716: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45717: LD_VAR 0 6
45721: PPUSH
45722: CALL_OW 247
45726: PUSH
45727: LD_INT 1
45729: DOUBLE
45730: EQUAL
45731: IFTRUE 45735
45733: GO 46313
45735: POP
// begin if GetClass ( i ) = 1 then
45736: LD_VAR 0 6
45740: PPUSH
45741: CALL_OW 257
45745: PUSH
45746: LD_INT 1
45748: EQUAL
45749: IFFALSE 45770
// points := [ 10 , 5 , 3 ] ;
45751: LD_ADDR_VAR 0 9
45755: PUSH
45756: LD_INT 10
45758: PUSH
45759: LD_INT 5
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45770: LD_VAR 0 6
45774: PPUSH
45775: CALL_OW 257
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: IN
45794: IFFALSE 45815
// points := [ 3 , 2 , 1 ] ;
45796: LD_ADDR_VAR 0 9
45800: PUSH
45801: LD_INT 3
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45815: LD_VAR 0 6
45819: PPUSH
45820: CALL_OW 257
45824: PUSH
45825: LD_INT 5
45827: EQUAL
45828: IFFALSE 45849
// points := [ 130 , 5 , 2 ] ;
45830: LD_ADDR_VAR 0 9
45834: PUSH
45835: LD_INT 130
45837: PUSH
45838: LD_INT 5
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45849: LD_VAR 0 6
45853: PPUSH
45854: CALL_OW 257
45858: PUSH
45859: LD_INT 8
45861: EQUAL
45862: IFFALSE 45883
// points := [ 35 , 35 , 30 ] ;
45864: LD_ADDR_VAR 0 9
45868: PUSH
45869: LD_INT 35
45871: PUSH
45872: LD_INT 35
45874: PUSH
45875: LD_INT 30
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45883: LD_VAR 0 6
45887: PPUSH
45888: CALL_OW 257
45892: PUSH
45893: LD_INT 9
45895: EQUAL
45896: IFFALSE 45917
// points := [ 20 , 55 , 40 ] ;
45898: LD_ADDR_VAR 0 9
45902: PUSH
45903: LD_INT 20
45905: PUSH
45906: LD_INT 55
45908: PUSH
45909: LD_INT 40
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45917: LD_VAR 0 6
45921: PPUSH
45922: CALL_OW 257
45926: PUSH
45927: LD_INT 12
45929: PUSH
45930: LD_INT 16
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: IN
45937: IFFALSE 45958
// points := [ 5 , 3 , 2 ] ;
45939: LD_ADDR_VAR 0 9
45943: PUSH
45944: LD_INT 5
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45958: LD_VAR 0 6
45962: PPUSH
45963: CALL_OW 257
45967: PUSH
45968: LD_INT 17
45970: EQUAL
45971: IFFALSE 45992
// points := [ 100 , 50 , 75 ] ;
45973: LD_ADDR_VAR 0 9
45977: PUSH
45978: LD_INT 100
45980: PUSH
45981: LD_INT 50
45983: PUSH
45984: LD_INT 75
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45992: LD_VAR 0 6
45996: PPUSH
45997: CALL_OW 257
46001: PUSH
46002: LD_INT 15
46004: EQUAL
46005: IFFALSE 46026
// points := [ 10 , 5 , 3 ] ;
46007: LD_ADDR_VAR 0 9
46011: PUSH
46012: LD_INT 10
46014: PUSH
46015: LD_INT 5
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46026: LD_VAR 0 6
46030: PPUSH
46031: CALL_OW 257
46035: PUSH
46036: LD_INT 14
46038: EQUAL
46039: IFFALSE 46060
// points := [ 10 , 0 , 0 ] ;
46041: LD_ADDR_VAR 0 9
46045: PUSH
46046: LD_INT 10
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46060: LD_VAR 0 6
46064: PPUSH
46065: CALL_OW 257
46069: PUSH
46070: LD_INT 11
46072: EQUAL
46073: IFFALSE 46094
// points := [ 30 , 10 , 5 ] ;
46075: LD_ADDR_VAR 0 9
46079: PUSH
46080: LD_INT 30
46082: PUSH
46083: LD_INT 10
46085: PUSH
46086: LD_INT 5
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46094: LD_VAR 0 1
46098: PPUSH
46099: LD_INT 5
46101: PPUSH
46102: CALL_OW 321
46106: PUSH
46107: LD_INT 2
46109: EQUAL
46110: IFFALSE 46127
// bpoints := bpoints * 1.8 ;
46112: LD_ADDR_VAR 0 10
46116: PUSH
46117: LD_VAR 0 10
46121: PUSH
46122: LD_REAL  1.80000000000000E+0000
46125: MUL
46126: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46127: LD_VAR 0 6
46131: PPUSH
46132: CALL_OW 257
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: LD_INT 4
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: IN
46155: PUSH
46156: LD_VAR 0 1
46160: PPUSH
46161: LD_INT 51
46163: PPUSH
46164: CALL_OW 321
46168: PUSH
46169: LD_INT 2
46171: EQUAL
46172: AND
46173: IFFALSE 46190
// bpoints := bpoints * 1.2 ;
46175: LD_ADDR_VAR 0 10
46179: PUSH
46180: LD_VAR 0 10
46184: PUSH
46185: LD_REAL  1.20000000000000E+0000
46188: MUL
46189: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46190: LD_VAR 0 6
46194: PPUSH
46195: CALL_OW 257
46199: PUSH
46200: LD_INT 5
46202: PUSH
46203: LD_INT 7
46205: PUSH
46206: LD_INT 9
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: IN
46214: PUSH
46215: LD_VAR 0 1
46219: PPUSH
46220: LD_INT 52
46222: PPUSH
46223: CALL_OW 321
46227: PUSH
46228: LD_INT 2
46230: EQUAL
46231: AND
46232: IFFALSE 46249
// bpoints := bpoints * 1.5 ;
46234: LD_ADDR_VAR 0 10
46238: PUSH
46239: LD_VAR 0 10
46243: PUSH
46244: LD_REAL  1.50000000000000E+0000
46247: MUL
46248: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46249: LD_VAR 0 1
46253: PPUSH
46254: LD_INT 66
46256: PPUSH
46257: CALL_OW 321
46261: PUSH
46262: LD_INT 2
46264: EQUAL
46265: IFFALSE 46282
// bpoints := bpoints * 1.1 ;
46267: LD_ADDR_VAR 0 10
46271: PUSH
46272: LD_VAR 0 10
46276: PUSH
46277: LD_REAL  1.10000000000000E+0000
46280: MUL
46281: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46282: LD_ADDR_VAR 0 10
46286: PUSH
46287: LD_VAR 0 10
46291: PUSH
46292: LD_VAR 0 6
46296: PPUSH
46297: LD_INT 1
46299: PPUSH
46300: CALL_OW 259
46304: PUSH
46305: LD_REAL  1.15000000000000E+0000
46308: MUL
46309: MUL
46310: ST_TO_ADDR
// end ; unit_vehicle :
46311: GO 47135
46313: LD_INT 2
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46321
46319: GO 47123
46321: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46322: LD_VAR 0 6
46326: PPUSH
46327: CALL_OW 264
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 42
46337: PUSH
46338: LD_INT 24
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: IN
46346: IFFALSE 46367
// points := [ 25 , 5 , 3 ] ;
46348: LD_ADDR_VAR 0 9
46352: PUSH
46353: LD_INT 25
46355: PUSH
46356: LD_INT 5
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46367: LD_VAR 0 6
46371: PPUSH
46372: CALL_OW 264
46376: PUSH
46377: LD_INT 4
46379: PUSH
46380: LD_INT 43
46382: PUSH
46383: LD_INT 25
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: IN
46391: IFFALSE 46412
// points := [ 40 , 15 , 5 ] ;
46393: LD_ADDR_VAR 0 9
46397: PUSH
46398: LD_INT 40
46400: PUSH
46401: LD_INT 15
46403: PUSH
46404: LD_INT 5
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46412: LD_VAR 0 6
46416: PPUSH
46417: CALL_OW 264
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: LD_INT 23
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: IN
46432: IFFALSE 46453
// points := [ 7 , 25 , 8 ] ;
46434: LD_ADDR_VAR 0 9
46438: PUSH
46439: LD_INT 7
46441: PUSH
46442: LD_INT 25
46444: PUSH
46445: LD_INT 8
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46453: LD_VAR 0 6
46457: PPUSH
46458: CALL_OW 264
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: LD_INT 27
46468: PUSH
46469: LD_INT 44
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: IN
46477: IFFALSE 46498
// points := [ 14 , 50 , 16 ] ;
46479: LD_ADDR_VAR 0 9
46483: PUSH
46484: LD_INT 14
46486: PUSH
46487: LD_INT 50
46489: PUSH
46490: LD_INT 16
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46498: LD_VAR 0 6
46502: PPUSH
46503: CALL_OW 264
46507: PUSH
46508: LD_INT 6
46510: PUSH
46511: LD_INT 46
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: IN
46518: IFFALSE 46539
// points := [ 32 , 120 , 70 ] ;
46520: LD_ADDR_VAR 0 9
46524: PUSH
46525: LD_INT 32
46527: PUSH
46528: LD_INT 120
46530: PUSH
46531: LD_INT 70
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46539: LD_VAR 0 6
46543: PPUSH
46544: CALL_OW 264
46548: PUSH
46549: LD_INT 7
46551: PUSH
46552: LD_INT 28
46554: PUSH
46555: LD_INT 45
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: IN
46563: IFFALSE 46584
// points := [ 35 , 20 , 45 ] ;
46565: LD_ADDR_VAR 0 9
46569: PUSH
46570: LD_INT 35
46572: PUSH
46573: LD_INT 20
46575: PUSH
46576: LD_INT 45
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46584: LD_VAR 0 6
46588: PPUSH
46589: CALL_OW 264
46593: PUSH
46594: LD_INT 47
46596: PUSH
46597: EMPTY
46598: LIST
46599: IN
46600: IFFALSE 46621
// points := [ 67 , 45 , 75 ] ;
46602: LD_ADDR_VAR 0 9
46606: PUSH
46607: LD_INT 67
46609: PUSH
46610: LD_INT 45
46612: PUSH
46613: LD_INT 75
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46621: LD_VAR 0 6
46625: PPUSH
46626: CALL_OW 264
46630: PUSH
46631: LD_INT 26
46633: PUSH
46634: EMPTY
46635: LIST
46636: IN
46637: IFFALSE 46658
// points := [ 120 , 30 , 80 ] ;
46639: LD_ADDR_VAR 0 9
46643: PUSH
46644: LD_INT 120
46646: PUSH
46647: LD_INT 30
46649: PUSH
46650: LD_INT 80
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46658: LD_VAR 0 6
46662: PPUSH
46663: CALL_OW 264
46667: PUSH
46668: LD_INT 22
46670: PUSH
46671: EMPTY
46672: LIST
46673: IN
46674: IFFALSE 46695
// points := [ 40 , 1 , 1 ] ;
46676: LD_ADDR_VAR 0 9
46680: PUSH
46681: LD_INT 40
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46695: LD_VAR 0 6
46699: PPUSH
46700: CALL_OW 264
46704: PUSH
46705: LD_INT 29
46707: PUSH
46708: EMPTY
46709: LIST
46710: IN
46711: IFFALSE 46732
// points := [ 70 , 200 , 400 ] ;
46713: LD_ADDR_VAR 0 9
46717: PUSH
46718: LD_INT 70
46720: PUSH
46721: LD_INT 200
46723: PUSH
46724: LD_INT 400
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46732: LD_VAR 0 6
46736: PPUSH
46737: CALL_OW 264
46741: PUSH
46742: LD_INT 14
46744: PUSH
46745: LD_INT 53
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: IN
46752: IFFALSE 46773
// points := [ 40 , 10 , 20 ] ;
46754: LD_ADDR_VAR 0 9
46758: PUSH
46759: LD_INT 40
46761: PUSH
46762: LD_INT 10
46764: PUSH
46765: LD_INT 20
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46773: LD_VAR 0 6
46777: PPUSH
46778: CALL_OW 264
46782: PUSH
46783: LD_INT 9
46785: PUSH
46786: EMPTY
46787: LIST
46788: IN
46789: IFFALSE 46810
// points := [ 5 , 70 , 20 ] ;
46791: LD_ADDR_VAR 0 9
46795: PUSH
46796: LD_INT 5
46798: PUSH
46799: LD_INT 70
46801: PUSH
46802: LD_INT 20
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46810: LD_VAR 0 6
46814: PPUSH
46815: CALL_OW 264
46819: PUSH
46820: LD_INT 10
46822: PUSH
46823: EMPTY
46824: LIST
46825: IN
46826: IFFALSE 46847
// points := [ 35 , 110 , 70 ] ;
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: LD_INT 35
46835: PUSH
46836: LD_INT 110
46838: PUSH
46839: LD_INT 70
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46847: LD_VAR 0 6
46851: PPUSH
46852: CALL_OW 265
46856: PUSH
46857: LD_INT 25
46859: EQUAL
46860: IFFALSE 46881
// points := [ 80 , 65 , 100 ] ;
46862: LD_ADDR_VAR 0 9
46866: PUSH
46867: LD_INT 80
46869: PUSH
46870: LD_INT 65
46872: PUSH
46873: LD_INT 100
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46881: LD_VAR 0 6
46885: PPUSH
46886: CALL_OW 263
46890: PUSH
46891: LD_INT 1
46893: EQUAL
46894: IFFALSE 46929
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46896: LD_ADDR_VAR 0 10
46900: PUSH
46901: LD_VAR 0 10
46905: PUSH
46906: LD_VAR 0 6
46910: PPUSH
46911: CALL_OW 311
46915: PPUSH
46916: LD_INT 3
46918: PPUSH
46919: CALL_OW 259
46923: PUSH
46924: LD_INT 4
46926: MUL
46927: MUL
46928: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46929: LD_VAR 0 6
46933: PPUSH
46934: CALL_OW 263
46938: PUSH
46939: LD_INT 2
46941: EQUAL
46942: IFFALSE 46993
// begin j := IsControledBy ( i ) ;
46944: LD_ADDR_VAR 0 7
46948: PUSH
46949: LD_VAR 0 6
46953: PPUSH
46954: CALL_OW 312
46958: ST_TO_ADDR
// if j then
46959: LD_VAR 0 7
46963: IFFALSE 46993
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46965: LD_ADDR_VAR 0 10
46969: PUSH
46970: LD_VAR 0 10
46974: PUSH
46975: LD_VAR 0 7
46979: PPUSH
46980: LD_INT 3
46982: PPUSH
46983: CALL_OW 259
46987: PUSH
46988: LD_INT 3
46990: MUL
46991: MUL
46992: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46993: LD_VAR 0 6
46997: PPUSH
46998: CALL_OW 264
47002: PUSH
47003: LD_INT 5
47005: PUSH
47006: LD_INT 6
47008: PUSH
47009: LD_INT 46
47011: PUSH
47012: LD_INT 44
47014: PUSH
47015: LD_INT 47
47017: PUSH
47018: LD_INT 45
47020: PUSH
47021: LD_INT 28
47023: PUSH
47024: LD_INT 7
47026: PUSH
47027: LD_INT 27
47029: PUSH
47030: LD_INT 29
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: IN
47045: PUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: LD_INT 52
47053: PPUSH
47054: CALL_OW 321
47058: PUSH
47059: LD_INT 2
47061: EQUAL
47062: AND
47063: IFFALSE 47080
// bpoints := bpoints * 1.2 ;
47065: LD_ADDR_VAR 0 10
47069: PUSH
47070: LD_VAR 0 10
47074: PUSH
47075: LD_REAL  1.20000000000000E+0000
47078: MUL
47079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47080: LD_VAR 0 6
47084: PPUSH
47085: CALL_OW 264
47089: PUSH
47090: LD_INT 6
47092: PUSH
47093: LD_INT 46
47095: PUSH
47096: LD_INT 47
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: IN
47104: IFFALSE 47121
// bpoints := bpoints * 1.2 ;
47106: LD_ADDR_VAR 0 10
47110: PUSH
47111: LD_VAR 0 10
47115: PUSH
47116: LD_REAL  1.20000000000000E+0000
47119: MUL
47120: ST_TO_ADDR
// end ; unit_building :
47121: GO 47135
47123: LD_INT 3
47125: DOUBLE
47126: EQUAL
47127: IFTRUE 47131
47129: GO 47134
47131: POP
// ; end ;
47132: GO 47135
47134: POP
// for j = 1 to 3 do
47135: LD_ADDR_VAR 0 7
47139: PUSH
47140: DOUBLE
47141: LD_INT 1
47143: DEC
47144: ST_TO_ADDR
47145: LD_INT 3
47147: PUSH
47148: FOR_TO
47149: IFFALSE 47202
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: LD_VAR 0 5
47160: PPUSH
47161: LD_VAR 0 7
47165: PPUSH
47166: LD_VAR 0 5
47170: PUSH
47171: LD_VAR 0 7
47175: ARRAY
47176: PUSH
47177: LD_VAR 0 9
47181: PUSH
47182: LD_VAR 0 7
47186: ARRAY
47187: PUSH
47188: LD_VAR 0 10
47192: MUL
47193: PLUS
47194: PPUSH
47195: CALL_OW 1
47199: ST_TO_ADDR
47200: GO 47148
47202: POP
47203: POP
// end ;
47204: GO 45687
47206: POP
47207: POP
// result := Replace ( result , 4 , tmp ) ;
47208: LD_ADDR_VAR 0 5
47212: PUSH
47213: LD_VAR 0 5
47217: PPUSH
47218: LD_INT 4
47220: PPUSH
47221: LD_VAR 0 8
47225: PPUSH
47226: CALL_OW 1
47230: ST_TO_ADDR
// end ;
47231: LD_VAR 0 5
47235: RET
// export function DangerAtRange ( unit , range ) ; begin
47236: LD_INT 0
47238: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47239: LD_ADDR_VAR 0 3
47243: PUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 255
47253: PPUSH
47254: LD_VAR 0 1
47258: PPUSH
47259: CALL_OW 250
47263: PPUSH
47264: LD_VAR 0 1
47268: PPUSH
47269: CALL_OW 251
47273: PPUSH
47274: LD_VAR 0 2
47278: PPUSH
47279: CALL 45539 0 4
47283: ST_TO_ADDR
// end ;
47284: LD_VAR 0 3
47288: RET
// export function DangerInArea ( side , area ) ; begin
47289: LD_INT 0
47291: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47292: LD_ADDR_VAR 0 3
47296: PUSH
47297: LD_VAR 0 2
47301: PPUSH
47302: LD_INT 81
47304: PUSH
47305: LD_VAR 0 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PPUSH
47314: CALL_OW 70
47318: ST_TO_ADDR
// end ;
47319: LD_VAR 0 3
47323: RET
// export function IsExtension ( b ) ; begin
47324: LD_INT 0
47326: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47327: LD_ADDR_VAR 0 2
47331: PUSH
47332: LD_VAR 0 1
47336: PUSH
47337: LD_INT 23
47339: PUSH
47340: LD_INT 20
47342: PUSH
47343: LD_INT 22
47345: PUSH
47346: LD_INT 17
47348: PUSH
47349: LD_INT 24
47351: PUSH
47352: LD_INT 21
47354: PUSH
47355: LD_INT 19
47357: PUSH
47358: LD_INT 16
47360: PUSH
47361: LD_INT 25
47363: PUSH
47364: LD_INT 18
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: IN
47379: ST_TO_ADDR
// end ;
47380: LD_VAR 0 2
47384: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
47385: LD_INT 0
47387: PPUSH
47388: PPUSH
47389: PPUSH
// result := [ ] ;
47390: LD_ADDR_VAR 0 2
47394: PUSH
47395: EMPTY
47396: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
47397: LD_ADDR_VAR 0 3
47401: PUSH
47402: LD_INT 21
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PPUSH
47412: CALL_OW 69
47416: ST_TO_ADDR
// if not tmp then
47417: LD_VAR 0 3
47421: NOT
47422: IFFALSE 47426
// exit ;
47424: GO 47476
// for i in tmp do
47426: LD_ADDR_VAR 0 4
47430: PUSH
47431: LD_VAR 0 3
47435: PUSH
47436: FOR_IN
47437: IFFALSE 47474
// if GetBase ( i ) = base then
47439: LD_VAR 0 4
47443: PPUSH
47444: CALL_OW 274
47448: PUSH
47449: LD_VAR 0 1
47453: EQUAL
47454: IFFALSE 47472
// result := result ^ i ;
47456: LD_ADDR_VAR 0 2
47460: PUSH
47461: LD_VAR 0 2
47465: PUSH
47466: LD_VAR 0 4
47470: ADD
47471: ST_TO_ADDR
47472: GO 47436
47474: POP
47475: POP
// end ;
47476: LD_VAR 0 2
47480: RET
// export function ComComplete ( unit , b ) ; var i ; begin
47481: LD_INT 0
47483: PPUSH
47484: PPUSH
// if BuildingStatus ( b ) = bs_build then
47485: LD_VAR 0 2
47489: PPUSH
47490: CALL_OW 461
47494: PUSH
47495: LD_INT 1
47497: EQUAL
47498: IFFALSE 47558
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47500: LD_VAR 0 1
47504: PPUSH
47505: LD_STRING h
47507: PUSH
47508: LD_VAR 0 2
47512: PPUSH
47513: CALL_OW 250
47517: PUSH
47518: LD_VAR 0 2
47522: PPUSH
47523: CALL_OW 251
47527: PUSH
47528: LD_VAR 0 2
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: PPUSH
47554: CALL_OW 446
// end ;
47558: LD_VAR 0 3
47562: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47563: LD_INT 0
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47571: LD_VAR 0 1
47575: NOT
47576: PUSH
47577: LD_VAR 0 1
47581: PPUSH
47582: CALL_OW 263
47586: PUSH
47587: LD_INT 2
47589: EQUAL
47590: NOT
47591: OR
47592: IFFALSE 47596
// exit ;
47594: GO 47912
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47596: LD_ADDR_VAR 0 6
47600: PUSH
47601: LD_INT 22
47603: PUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: CALL_OW 255
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 30
47623: PUSH
47624: LD_INT 36
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 34
47633: PUSH
47634: LD_INT 31
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PPUSH
47650: CALL_OW 69
47654: ST_TO_ADDR
// if not tmp then
47655: LD_VAR 0 6
47659: NOT
47660: IFFALSE 47664
// exit ;
47662: GO 47912
// result := [ ] ;
47664: LD_ADDR_VAR 0 2
47668: PUSH
47669: EMPTY
47670: ST_TO_ADDR
// for i in tmp do
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_VAR 0 6
47680: PUSH
47681: FOR_IN
47682: IFFALSE 47753
// begin t := UnitsInside ( i ) ;
47684: LD_ADDR_VAR 0 4
47688: PUSH
47689: LD_VAR 0 3
47693: PPUSH
47694: CALL_OW 313
47698: ST_TO_ADDR
// if t then
47699: LD_VAR 0 4
47703: IFFALSE 47751
// for j in t do
47705: LD_ADDR_VAR 0 7
47709: PUSH
47710: LD_VAR 0 4
47714: PUSH
47715: FOR_IN
47716: IFFALSE 47749
// result := Insert ( result , result + 1 , j ) ;
47718: LD_ADDR_VAR 0 2
47722: PUSH
47723: LD_VAR 0 2
47727: PPUSH
47728: LD_VAR 0 2
47732: PUSH
47733: LD_INT 1
47735: PLUS
47736: PPUSH
47737: LD_VAR 0 7
47741: PPUSH
47742: CALL_OW 2
47746: ST_TO_ADDR
47747: GO 47715
47749: POP
47750: POP
// end ;
47751: GO 47681
47753: POP
47754: POP
// if not result then
47755: LD_VAR 0 2
47759: NOT
47760: IFFALSE 47764
// exit ;
47762: GO 47912
// mech := result [ 1 ] ;
47764: LD_ADDR_VAR 0 5
47768: PUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 1
47776: ARRAY
47777: ST_TO_ADDR
// if result > 1 then
47778: LD_VAR 0 2
47782: PUSH
47783: LD_INT 1
47785: GREATER
47786: IFFALSE 47898
// for i = 2 to result do
47788: LD_ADDR_VAR 0 3
47792: PUSH
47793: DOUBLE
47794: LD_INT 2
47796: DEC
47797: ST_TO_ADDR
47798: LD_VAR 0 2
47802: PUSH
47803: FOR_TO
47804: IFFALSE 47896
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47806: LD_ADDR_VAR 0 4
47810: PUSH
47811: LD_VAR 0 2
47815: PUSH
47816: LD_VAR 0 3
47820: ARRAY
47821: PPUSH
47822: LD_INT 3
47824: PPUSH
47825: CALL_OW 259
47829: PUSH
47830: LD_VAR 0 2
47834: PUSH
47835: LD_VAR 0 3
47839: ARRAY
47840: PPUSH
47841: CALL_OW 432
47845: MINUS
47846: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47847: LD_VAR 0 4
47851: PUSH
47852: LD_VAR 0 5
47856: PPUSH
47857: LD_INT 3
47859: PPUSH
47860: CALL_OW 259
47864: PUSH
47865: LD_VAR 0 5
47869: PPUSH
47870: CALL_OW 432
47874: MINUS
47875: GREATEREQUAL
47876: IFFALSE 47894
// mech := result [ i ] ;
47878: LD_ADDR_VAR 0 5
47882: PUSH
47883: LD_VAR 0 2
47887: PUSH
47888: LD_VAR 0 3
47892: ARRAY
47893: ST_TO_ADDR
// end ;
47894: GO 47803
47896: POP
47897: POP
// ComLinkTo ( vehicle , mech ) ;
47898: LD_VAR 0 1
47902: PPUSH
47903: LD_VAR 0 5
47907: PPUSH
47908: CALL_OW 135
// end ;
47912: LD_VAR 0 2
47916: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47917: LD_INT 0
47919: PPUSH
47920: PPUSH
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
// result := [ ] ;
47932: LD_ADDR_VAR 0 6
47936: PUSH
47937: EMPTY
47938: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47939: LD_VAR 0 1
47943: PPUSH
47944: CALL_OW 266
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: IN
47959: NOT
47960: IFFALSE 47964
// exit ;
47962: GO 49483
// if name then
47964: LD_VAR 0 2
47968: IFFALSE 47984
// SetBName ( base_dep , name ) ;
47970: LD_VAR 0 1
47974: PPUSH
47975: LD_VAR 0 2
47979: PPUSH
47980: CALL_OW 500
// base := GetBase ( base_dep ) ;
47984: LD_ADDR_VAR 0 14
47988: PUSH
47989: LD_VAR 0 1
47993: PPUSH
47994: CALL_OW 274
47998: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47999: LD_ADDR_VAR 0 15
48003: PUSH
48004: LD_VAR 0 1
48008: PPUSH
48009: CALL_OW 255
48013: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48014: LD_ADDR_VAR 0 16
48018: PUSH
48019: LD_VAR 0 1
48023: PPUSH
48024: CALL_OW 248
48028: ST_TO_ADDR
// if sources then
48029: LD_VAR 0 4
48033: IFFALSE 48080
// for i = 1 to 3 do
48035: LD_ADDR_VAR 0 7
48039: PUSH
48040: DOUBLE
48041: LD_INT 1
48043: DEC
48044: ST_TO_ADDR
48045: LD_INT 3
48047: PUSH
48048: FOR_TO
48049: IFFALSE 48078
// AddResourceType ( base , i , sources [ i ] ) ;
48051: LD_VAR 0 14
48055: PPUSH
48056: LD_VAR 0 7
48060: PPUSH
48061: LD_VAR 0 4
48065: PUSH
48066: LD_VAR 0 7
48070: ARRAY
48071: PPUSH
48072: CALL_OW 276
48076: GO 48048
48078: POP
48079: POP
// buildings := GetBaseBuildings ( base ) ;
48080: LD_ADDR_VAR 0 17
48084: PUSH
48085: LD_VAR 0 14
48089: PPUSH
48090: CALL 47385 0 1
48094: ST_TO_ADDR
// InitHc ;
48095: CALL_OW 19
// InitUc ;
48099: CALL_OW 18
// uc_side := side ;
48103: LD_ADDR_OWVAR 20
48107: PUSH
48108: LD_VAR 0 15
48112: ST_TO_ADDR
// uc_nation := nation ;
48113: LD_ADDR_OWVAR 21
48117: PUSH
48118: LD_VAR 0 16
48122: ST_TO_ADDR
// if buildings then
48123: LD_VAR 0 17
48127: IFFALSE 49342
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48129: LD_VAR 0 17
48133: PPUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 30
48139: PUSH
48140: LD_INT 32
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 30
48149: PUSH
48150: LD_INT 33
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: PPUSH
48162: CALL_OW 72
48166: IFFALSE 48249
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48168: LD_ADDR_VAR 0 7
48172: PUSH
48173: LD_VAR 0 17
48177: PPUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 30
48183: PUSH
48184: LD_INT 32
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 30
48193: PUSH
48194: LD_INT 33
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: PPUSH
48206: CALL_OW 72
48210: PUSH
48211: FOR_IN
48212: IFFALSE 48247
// begin if not GetBWeapon ( i ) then
48214: LD_VAR 0 7
48218: PPUSH
48219: CALL_OW 269
48223: NOT
48224: IFFALSE 48245
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
48226: LD_VAR 0 7
48230: PPUSH
48231: LD_VAR 0 7
48235: PPUSH
48236: CALL 49488 0 1
48240: PPUSH
48241: CALL_OW 431
// end ;
48245: GO 48211
48247: POP
48248: POP
// end ; for i = 1 to personel do
48249: LD_ADDR_VAR 0 7
48253: PUSH
48254: DOUBLE
48255: LD_INT 1
48257: DEC
48258: ST_TO_ADDR
48259: LD_VAR 0 5
48263: PUSH
48264: FOR_TO
48265: IFFALSE 49322
// begin if i > 4 then
48267: LD_VAR 0 7
48271: PUSH
48272: LD_INT 4
48274: GREATER
48275: IFFALSE 48279
// break ;
48277: GO 49322
// case i of 1 :
48279: LD_VAR 0 7
48283: PUSH
48284: LD_INT 1
48286: DOUBLE
48287: EQUAL
48288: IFTRUE 48292
48290: GO 48365
48292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48293: LD_ADDR_VAR 0 11
48297: PUSH
48298: LD_VAR 0 17
48302: PPUSH
48303: LD_INT 22
48305: PUSH
48306: LD_VAR 0 15
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 30
48320: PUSH
48321: LD_INT 32
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 30
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 30
48340: PUSH
48341: LD_INT 5
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PPUSH
48358: CALL_OW 72
48362: ST_TO_ADDR
48363: GO 48587
48365: LD_INT 2
48367: DOUBLE
48368: EQUAL
48369: IFTRUE 48373
48371: GO 48435
48373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48374: LD_ADDR_VAR 0 11
48378: PUSH
48379: LD_VAR 0 17
48383: PPUSH
48384: LD_INT 22
48386: PUSH
48387: LD_VAR 0 15
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 30
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 30
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PPUSH
48428: CALL_OW 72
48432: ST_TO_ADDR
48433: GO 48587
48435: LD_INT 3
48437: DOUBLE
48438: EQUAL
48439: IFTRUE 48443
48441: GO 48505
48443: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48444: LD_ADDR_VAR 0 11
48448: PUSH
48449: LD_VAR 0 17
48453: PPUSH
48454: LD_INT 22
48456: PUSH
48457: LD_VAR 0 15
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 30
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 30
48481: PUSH
48482: LD_INT 3
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PPUSH
48498: CALL_OW 72
48502: ST_TO_ADDR
48503: GO 48587
48505: LD_INT 4
48507: DOUBLE
48508: EQUAL
48509: IFTRUE 48513
48511: GO 48586
48513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48514: LD_ADDR_VAR 0 11
48518: PUSH
48519: LD_VAR 0 17
48523: PPUSH
48524: LD_INT 22
48526: PUSH
48527: LD_VAR 0 15
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 30
48541: PUSH
48542: LD_INT 6
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 30
48551: PUSH
48552: LD_INT 7
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 30
48561: PUSH
48562: LD_INT 8
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PPUSH
48579: CALL_OW 72
48583: ST_TO_ADDR
48584: GO 48587
48586: POP
// if i = 1 then
48587: LD_VAR 0 7
48591: PUSH
48592: LD_INT 1
48594: EQUAL
48595: IFFALSE 48706
// begin tmp := [ ] ;
48597: LD_ADDR_VAR 0 18
48601: PUSH
48602: EMPTY
48603: ST_TO_ADDR
// for j in f do
48604: LD_ADDR_VAR 0 8
48608: PUSH
48609: LD_VAR 0 11
48613: PUSH
48614: FOR_IN
48615: IFFALSE 48688
// if GetBType ( j ) = b_bunker then
48617: LD_VAR 0 8
48621: PPUSH
48622: CALL_OW 266
48626: PUSH
48627: LD_INT 32
48629: EQUAL
48630: IFFALSE 48657
// tmp := Insert ( tmp , 1 , j ) else
48632: LD_ADDR_VAR 0 18
48636: PUSH
48637: LD_VAR 0 18
48641: PPUSH
48642: LD_INT 1
48644: PPUSH
48645: LD_VAR 0 8
48649: PPUSH
48650: CALL_OW 2
48654: ST_TO_ADDR
48655: GO 48686
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48657: LD_ADDR_VAR 0 18
48661: PUSH
48662: LD_VAR 0 18
48666: PPUSH
48667: LD_VAR 0 18
48671: PUSH
48672: LD_INT 1
48674: PLUS
48675: PPUSH
48676: LD_VAR 0 8
48680: PPUSH
48681: CALL_OW 2
48685: ST_TO_ADDR
48686: GO 48614
48688: POP
48689: POP
// if tmp then
48690: LD_VAR 0 18
48694: IFFALSE 48706
// f := tmp ;
48696: LD_ADDR_VAR 0 11
48700: PUSH
48701: LD_VAR 0 18
48705: ST_TO_ADDR
// end ; x := personel [ i ] ;
48706: LD_ADDR_VAR 0 12
48710: PUSH
48711: LD_VAR 0 5
48715: PUSH
48716: LD_VAR 0 7
48720: ARRAY
48721: ST_TO_ADDR
// if x = - 1 then
48722: LD_VAR 0 12
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: EQUAL
48731: IFFALSE 48940
// begin for j in f do
48733: LD_ADDR_VAR 0 8
48737: PUSH
48738: LD_VAR 0 11
48742: PUSH
48743: FOR_IN
48744: IFFALSE 48936
// repeat InitHc ;
48746: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48750: LD_VAR 0 8
48754: PPUSH
48755: CALL_OW 266
48759: PUSH
48760: LD_INT 5
48762: EQUAL
48763: IFFALSE 48833
// begin if UnitsInside ( j ) < 3 then
48765: LD_VAR 0 8
48769: PPUSH
48770: CALL_OW 313
48774: PUSH
48775: LD_INT 3
48777: LESS
48778: IFFALSE 48814
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48780: LD_INT 0
48782: PPUSH
48783: LD_INT 5
48785: PUSH
48786: LD_INT 8
48788: PUSH
48789: LD_INT 9
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: PUSH
48797: LD_VAR 0 16
48801: ARRAY
48802: PPUSH
48803: LD_VAR 0 3
48807: PPUSH
48808: CALL_OW 380
48812: GO 48831
// PrepareHuman ( false , i , skill ) ;
48814: LD_INT 0
48816: PPUSH
48817: LD_VAR 0 7
48821: PPUSH
48822: LD_VAR 0 3
48826: PPUSH
48827: CALL_OW 380
// end else
48831: GO 48850
// PrepareHuman ( false , i , skill ) ;
48833: LD_INT 0
48835: PPUSH
48836: LD_VAR 0 7
48840: PPUSH
48841: LD_VAR 0 3
48845: PPUSH
48846: CALL_OW 380
// un := CreateHuman ;
48850: LD_ADDR_VAR 0 13
48854: PUSH
48855: CALL_OW 44
48859: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48860: LD_ADDR_VAR 0 6
48864: PUSH
48865: LD_VAR 0 6
48869: PPUSH
48870: LD_INT 1
48872: PPUSH
48873: LD_VAR 0 13
48877: PPUSH
48878: CALL_OW 2
48882: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48883: LD_VAR 0 13
48887: PPUSH
48888: LD_VAR 0 8
48892: PPUSH
48893: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48897: LD_VAR 0 8
48901: PPUSH
48902: CALL_OW 313
48906: PUSH
48907: LD_INT 6
48909: EQUAL
48910: PUSH
48911: LD_VAR 0 8
48915: PPUSH
48916: CALL_OW 266
48920: PUSH
48921: LD_INT 32
48923: PUSH
48924: LD_INT 31
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: IN
48931: OR
48932: IFFALSE 48746
48934: GO 48743
48936: POP
48937: POP
// end else
48938: GO 49320
// for j = 1 to x do
48940: LD_ADDR_VAR 0 8
48944: PUSH
48945: DOUBLE
48946: LD_INT 1
48948: DEC
48949: ST_TO_ADDR
48950: LD_VAR 0 12
48954: PUSH
48955: FOR_TO
48956: IFFALSE 49318
// begin InitHc ;
48958: CALL_OW 19
// if not f then
48962: LD_VAR 0 11
48966: NOT
48967: IFFALSE 49056
// begin PrepareHuman ( false , i , skill ) ;
48969: LD_INT 0
48971: PPUSH
48972: LD_VAR 0 7
48976: PPUSH
48977: LD_VAR 0 3
48981: PPUSH
48982: CALL_OW 380
// un := CreateHuman ;
48986: LD_ADDR_VAR 0 13
48990: PUSH
48991: CALL_OW 44
48995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48996: LD_ADDR_VAR 0 6
49000: PUSH
49001: LD_VAR 0 6
49005: PPUSH
49006: LD_INT 1
49008: PPUSH
49009: LD_VAR 0 13
49013: PPUSH
49014: CALL_OW 2
49018: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49019: LD_VAR 0 13
49023: PPUSH
49024: LD_VAR 0 1
49028: PPUSH
49029: CALL_OW 250
49033: PPUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: CALL_OW 251
49043: PPUSH
49044: LD_INT 10
49046: PPUSH
49047: LD_INT 0
49049: PPUSH
49050: CALL_OW 50
// continue ;
49054: GO 48955
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49056: LD_VAR 0 11
49060: PUSH
49061: LD_INT 1
49063: ARRAY
49064: PPUSH
49065: CALL_OW 313
49069: PUSH
49070: LD_VAR 0 11
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: PPUSH
49079: CALL_OW 266
49083: PUSH
49084: LD_INT 32
49086: PUSH
49087: LD_INT 31
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: IN
49094: AND
49095: PUSH
49096: LD_VAR 0 11
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: PPUSH
49105: CALL_OW 313
49109: PUSH
49110: LD_INT 6
49112: EQUAL
49113: OR
49114: IFFALSE 49134
// f := Delete ( f , 1 ) ;
49116: LD_ADDR_VAR 0 11
49120: PUSH
49121: LD_VAR 0 11
49125: PPUSH
49126: LD_INT 1
49128: PPUSH
49129: CALL_OW 3
49133: ST_TO_ADDR
// if not f then
49134: LD_VAR 0 11
49138: NOT
49139: IFFALSE 49157
// begin x := x + 2 ;
49141: LD_ADDR_VAR 0 12
49145: PUSH
49146: LD_VAR 0 12
49150: PUSH
49151: LD_INT 2
49153: PLUS
49154: ST_TO_ADDR
// continue ;
49155: GO 48955
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49157: LD_VAR 0 11
49161: PUSH
49162: LD_INT 1
49164: ARRAY
49165: PPUSH
49166: CALL_OW 266
49170: PUSH
49171: LD_INT 5
49173: EQUAL
49174: IFFALSE 49248
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49176: LD_VAR 0 11
49180: PUSH
49181: LD_INT 1
49183: ARRAY
49184: PPUSH
49185: CALL_OW 313
49189: PUSH
49190: LD_INT 3
49192: LESS
49193: IFFALSE 49229
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49195: LD_INT 0
49197: PPUSH
49198: LD_INT 5
49200: PUSH
49201: LD_INT 8
49203: PUSH
49204: LD_INT 9
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: LIST
49211: PUSH
49212: LD_VAR 0 16
49216: ARRAY
49217: PPUSH
49218: LD_VAR 0 3
49222: PPUSH
49223: CALL_OW 380
49227: GO 49246
// PrepareHuman ( false , i , skill ) ;
49229: LD_INT 0
49231: PPUSH
49232: LD_VAR 0 7
49236: PPUSH
49237: LD_VAR 0 3
49241: PPUSH
49242: CALL_OW 380
// end else
49246: GO 49265
// PrepareHuman ( false , i , skill ) ;
49248: LD_INT 0
49250: PPUSH
49251: LD_VAR 0 7
49255: PPUSH
49256: LD_VAR 0 3
49260: PPUSH
49261: CALL_OW 380
// un := CreateHuman ;
49265: LD_ADDR_VAR 0 13
49269: PUSH
49270: CALL_OW 44
49274: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49275: LD_ADDR_VAR 0 6
49279: PUSH
49280: LD_VAR 0 6
49284: PPUSH
49285: LD_INT 1
49287: PPUSH
49288: LD_VAR 0 13
49292: PPUSH
49293: CALL_OW 2
49297: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49298: LD_VAR 0 13
49302: PPUSH
49303: LD_VAR 0 11
49307: PUSH
49308: LD_INT 1
49310: ARRAY
49311: PPUSH
49312: CALL_OW 52
// end ;
49316: GO 48955
49318: POP
49319: POP
// end ;
49320: GO 48264
49322: POP
49323: POP
// result := result ^ buildings ;
49324: LD_ADDR_VAR 0 6
49328: PUSH
49329: LD_VAR 0 6
49333: PUSH
49334: LD_VAR 0 17
49338: ADD
49339: ST_TO_ADDR
// end else
49340: GO 49483
// begin for i = 1 to personel do
49342: LD_ADDR_VAR 0 7
49346: PUSH
49347: DOUBLE
49348: LD_INT 1
49350: DEC
49351: ST_TO_ADDR
49352: LD_VAR 0 5
49356: PUSH
49357: FOR_TO
49358: IFFALSE 49481
// begin if i > 4 then
49360: LD_VAR 0 7
49364: PUSH
49365: LD_INT 4
49367: GREATER
49368: IFFALSE 49372
// break ;
49370: GO 49481
// x := personel [ i ] ;
49372: LD_ADDR_VAR 0 12
49376: PUSH
49377: LD_VAR 0 5
49381: PUSH
49382: LD_VAR 0 7
49386: ARRAY
49387: ST_TO_ADDR
// if x = - 1 then
49388: LD_VAR 0 12
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: EQUAL
49397: IFFALSE 49401
// continue ;
49399: GO 49357
// PrepareHuman ( false , i , skill ) ;
49401: LD_INT 0
49403: PPUSH
49404: LD_VAR 0 7
49408: PPUSH
49409: LD_VAR 0 3
49413: PPUSH
49414: CALL_OW 380
// un := CreateHuman ;
49418: LD_ADDR_VAR 0 13
49422: PUSH
49423: CALL_OW 44
49427: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49428: LD_VAR 0 13
49432: PPUSH
49433: LD_VAR 0 1
49437: PPUSH
49438: CALL_OW 250
49442: PPUSH
49443: LD_VAR 0 1
49447: PPUSH
49448: CALL_OW 251
49452: PPUSH
49453: LD_INT 10
49455: PPUSH
49456: LD_INT 0
49458: PPUSH
49459: CALL_OW 50
// result := result ^ un ;
49463: LD_ADDR_VAR 0 6
49467: PUSH
49468: LD_VAR 0 6
49472: PUSH
49473: LD_VAR 0 13
49477: ADD
49478: ST_TO_ADDR
// end ;
49479: GO 49357
49481: POP
49482: POP
// end ; end ;
49483: LD_VAR 0 6
49487: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49488: LD_INT 0
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
49504: PPUSH
49505: PPUSH
// result := false ;
49506: LD_ADDR_VAR 0 2
49510: PUSH
49511: LD_INT 0
49513: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49514: LD_VAR 0 1
49518: NOT
49519: PUSH
49520: LD_VAR 0 1
49524: PPUSH
49525: CALL_OW 266
49529: PUSH
49530: LD_INT 32
49532: PUSH
49533: LD_INT 33
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: IN
49540: NOT
49541: OR
49542: IFFALSE 49546
// exit ;
49544: GO 50677
// nat := GetNation ( tower ) ;
49546: LD_ADDR_VAR 0 11
49550: PUSH
49551: LD_VAR 0 1
49555: PPUSH
49556: CALL_OW 248
49560: ST_TO_ADDR
// side := GetSide ( tower ) ;
49561: LD_ADDR_VAR 0 15
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL_OW 255
49575: ST_TO_ADDR
// x := GetX ( tower ) ;
49576: LD_ADDR_VAR 0 9
49580: PUSH
49581: LD_VAR 0 1
49585: PPUSH
49586: CALL_OW 250
49590: ST_TO_ADDR
// y := GetY ( tower ) ;
49591: LD_ADDR_VAR 0 10
49595: PUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 251
49605: ST_TO_ADDR
// if not x or not y then
49606: LD_VAR 0 9
49610: NOT
49611: PUSH
49612: LD_VAR 0 10
49616: NOT
49617: OR
49618: IFFALSE 49622
// exit ;
49620: GO 50677
// weapon := 0 ;
49622: LD_ADDR_VAR 0 17
49626: PUSH
49627: LD_INT 0
49629: ST_TO_ADDR
// fac_list := [ ] ;
49630: LD_ADDR_VAR 0 16
49634: PUSH
49635: EMPTY
49636: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
49637: LD_ADDR_VAR 0 5
49641: PUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: CALL_OW 274
49651: PPUSH
49652: CALL 47385 0 1
49656: PPUSH
49657: LD_INT 30
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PPUSH
49667: CALL_OW 72
49671: ST_TO_ADDR
// if not factories then
49672: LD_VAR 0 5
49676: NOT
49677: IFFALSE 49681
// exit ;
49679: GO 50677
// for i in factories do
49681: LD_ADDR_VAR 0 7
49685: PUSH
49686: LD_VAR 0 5
49690: PUSH
49691: FOR_IN
49692: IFFALSE 49717
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49694: LD_ADDR_VAR 0 16
49698: PUSH
49699: LD_VAR 0 16
49703: PUSH
49704: LD_VAR 0 7
49708: PPUSH
49709: CALL_OW 478
49713: UNION
49714: ST_TO_ADDR
49715: GO 49691
49717: POP
49718: POP
// if not fac_list then
49719: LD_VAR 0 16
49723: NOT
49724: IFFALSE 49728
// exit ;
49726: GO 50677
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49728: LD_ADDR_VAR 0 4
49732: PUSH
49733: LD_INT 4
49735: PUSH
49736: LD_INT 5
49738: PUSH
49739: LD_INT 9
49741: PUSH
49742: LD_INT 10
49744: PUSH
49745: LD_INT 6
49747: PUSH
49748: LD_INT 7
49750: PUSH
49751: LD_INT 11
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 27
49765: PUSH
49766: LD_INT 28
49768: PUSH
49769: LD_INT 26
49771: PUSH
49772: LD_INT 30
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 43
49783: PUSH
49784: LD_INT 44
49786: PUSH
49787: LD_INT 46
49789: PUSH
49790: LD_INT 45
49792: PUSH
49793: LD_INT 47
49795: PUSH
49796: LD_INT 49
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: PUSH
49812: LD_VAR 0 11
49816: ARRAY
49817: ST_TO_ADDR
// for i in list do
49818: LD_ADDR_VAR 0 7
49822: PUSH
49823: LD_VAR 0 4
49827: PUSH
49828: FOR_IN
49829: IFFALSE 49862
// if not i in fac_list then
49831: LD_VAR 0 7
49835: PUSH
49836: LD_VAR 0 16
49840: IN
49841: NOT
49842: IFFALSE 49860
// list := list diff i ;
49844: LD_ADDR_VAR 0 4
49848: PUSH
49849: LD_VAR 0 4
49853: PUSH
49854: LD_VAR 0 7
49858: DIFF
49859: ST_TO_ADDR
49860: GO 49828
49862: POP
49863: POP
// if not list then
49864: LD_VAR 0 4
49868: NOT
49869: IFFALSE 49873
// exit ;
49871: GO 50677
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49873: LD_VAR 0 11
49877: PUSH
49878: LD_INT 3
49880: EQUAL
49881: PUSH
49882: LD_INT 49
49884: PUSH
49885: LD_VAR 0 4
49889: IN
49890: AND
49891: PUSH
49892: LD_INT 31
49894: PPUSH
49895: LD_VAR 0 15
49899: PPUSH
49900: CALL_OW 321
49904: PUSH
49905: LD_INT 2
49907: EQUAL
49908: AND
49909: IFFALSE 49969
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49911: LD_INT 22
49913: PUSH
49914: LD_VAR 0 15
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 35
49925: PUSH
49926: LD_INT 49
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 91
49935: PUSH
49936: LD_VAR 0 1
49940: PUSH
49941: LD_INT 10
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: PPUSH
49954: CALL_OW 69
49958: NOT
49959: IFFALSE 49969
// weapon := ru_time_lapser ;
49961: LD_ADDR_VAR 0 17
49965: PUSH
49966: LD_INT 49
49968: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49969: LD_VAR 0 11
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: IN
49984: PUSH
49985: LD_INT 11
49987: PUSH
49988: LD_VAR 0 4
49992: IN
49993: PUSH
49994: LD_INT 30
49996: PUSH
49997: LD_VAR 0 4
50001: IN
50002: OR
50003: AND
50004: PUSH
50005: LD_INT 6
50007: PPUSH
50008: LD_VAR 0 15
50012: PPUSH
50013: CALL_OW 321
50017: PUSH
50018: LD_INT 2
50020: EQUAL
50021: AND
50022: IFFALSE 50187
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50024: LD_INT 22
50026: PUSH
50027: LD_VAR 0 15
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 35
50041: PUSH
50042: LD_INT 11
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 35
50051: PUSH
50052: LD_INT 30
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 91
50066: PUSH
50067: LD_VAR 0 1
50071: PUSH
50072: LD_INT 18
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: PPUSH
50085: CALL_OW 69
50089: NOT
50090: PUSH
50091: LD_INT 22
50093: PUSH
50094: LD_VAR 0 15
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 30
50108: PUSH
50109: LD_INT 32
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 30
50118: PUSH
50119: LD_INT 33
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 91
50133: PUSH
50134: LD_VAR 0 1
50138: PUSH
50139: LD_INT 12
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: LIST
50151: PUSH
50152: EMPTY
50153: LIST
50154: PPUSH
50155: CALL_OW 69
50159: PUSH
50160: LD_INT 2
50162: GREATER
50163: AND
50164: IFFALSE 50187
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50166: LD_ADDR_VAR 0 17
50170: PUSH
50171: LD_INT 11
50173: PUSH
50174: LD_INT 30
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_VAR 0 11
50185: ARRAY
50186: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50187: LD_VAR 0 17
50191: NOT
50192: PUSH
50193: LD_INT 40
50195: PPUSH
50196: LD_VAR 0 15
50200: PPUSH
50201: CALL_OW 321
50205: PUSH
50206: LD_INT 2
50208: EQUAL
50209: AND
50210: PUSH
50211: LD_INT 7
50213: PUSH
50214: LD_VAR 0 4
50218: IN
50219: PUSH
50220: LD_INT 28
50222: PUSH
50223: LD_VAR 0 4
50227: IN
50228: OR
50229: PUSH
50230: LD_INT 45
50232: PUSH
50233: LD_VAR 0 4
50237: IN
50238: OR
50239: AND
50240: IFFALSE 50494
// begin hex := GetHexInfo ( x , y ) ;
50242: LD_ADDR_VAR 0 3
50246: PUSH
50247: LD_VAR 0 9
50251: PPUSH
50252: LD_VAR 0 10
50256: PPUSH
50257: CALL_OW 546
50261: ST_TO_ADDR
// if hex [ 1 ] then
50262: LD_VAR 0 3
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: IFFALSE 50274
// exit ;
50272: GO 50677
// height := hex [ 2 ] ;
50274: LD_ADDR_VAR 0 14
50278: PUSH
50279: LD_VAR 0 3
50283: PUSH
50284: LD_INT 2
50286: ARRAY
50287: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50288: LD_ADDR_VAR 0 13
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 5
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// for i in tmp do
50311: LD_ADDR_VAR 0 7
50315: PUSH
50316: LD_VAR 0 13
50320: PUSH
50321: FOR_IN
50322: IFFALSE 50492
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50324: LD_ADDR_VAR 0 8
50328: PUSH
50329: LD_VAR 0 9
50333: PPUSH
50334: LD_VAR 0 7
50338: PPUSH
50339: LD_INT 5
50341: PPUSH
50342: CALL_OW 272
50346: PUSH
50347: LD_VAR 0 10
50351: PPUSH
50352: LD_VAR 0 7
50356: PPUSH
50357: LD_INT 5
50359: PPUSH
50360: CALL_OW 273
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50369: LD_VAR 0 8
50373: PUSH
50374: LD_INT 1
50376: ARRAY
50377: PPUSH
50378: LD_VAR 0 8
50382: PUSH
50383: LD_INT 2
50385: ARRAY
50386: PPUSH
50387: CALL_OW 488
50391: IFFALSE 50490
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50393: LD_ADDR_VAR 0 3
50397: PUSH
50398: LD_VAR 0 8
50402: PUSH
50403: LD_INT 1
50405: ARRAY
50406: PPUSH
50407: LD_VAR 0 8
50411: PUSH
50412: LD_INT 2
50414: ARRAY
50415: PPUSH
50416: CALL_OW 546
50420: ST_TO_ADDR
// if hex [ 1 ] then
50421: LD_VAR 0 3
50425: PUSH
50426: LD_INT 1
50428: ARRAY
50429: IFFALSE 50433
// continue ;
50431: GO 50321
// h := hex [ 2 ] ;
50433: LD_ADDR_VAR 0 12
50437: PUSH
50438: LD_VAR 0 3
50442: PUSH
50443: LD_INT 2
50445: ARRAY
50446: ST_TO_ADDR
// if h + 7 < height then
50447: LD_VAR 0 12
50451: PUSH
50452: LD_INT 7
50454: PLUS
50455: PUSH
50456: LD_VAR 0 14
50460: LESS
50461: IFFALSE 50490
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50463: LD_ADDR_VAR 0 17
50467: PUSH
50468: LD_INT 7
50470: PUSH
50471: LD_INT 28
50473: PUSH
50474: LD_INT 45
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: PUSH
50482: LD_VAR 0 11
50486: ARRAY
50487: ST_TO_ADDR
// break ;
50488: GO 50492
// end ; end ; end ;
50490: GO 50321
50492: POP
50493: POP
// end ; if not weapon then
50494: LD_VAR 0 17
50498: NOT
50499: IFFALSE 50559
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50501: LD_ADDR_VAR 0 4
50505: PUSH
50506: LD_VAR 0 4
50510: PUSH
50511: LD_INT 11
50513: PUSH
50514: LD_INT 30
50516: PUSH
50517: LD_INT 49
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: DIFF
50525: ST_TO_ADDR
// if not list then
50526: LD_VAR 0 4
50530: NOT
50531: IFFALSE 50535
// exit ;
50533: GO 50677
// weapon := list [ rand ( 1 , list ) ] ;
50535: LD_ADDR_VAR 0 17
50539: PUSH
50540: LD_VAR 0 4
50544: PUSH
50545: LD_INT 1
50547: PPUSH
50548: LD_VAR 0 4
50552: PPUSH
50553: CALL_OW 12
50557: ARRAY
50558: ST_TO_ADDR
// end ; if weapon then
50559: LD_VAR 0 17
50563: IFFALSE 50677
// begin tmp := CostOfWeapon ( weapon ) ;
50565: LD_ADDR_VAR 0 13
50569: PUSH
50570: LD_VAR 0 17
50574: PPUSH
50575: CALL_OW 451
50579: ST_TO_ADDR
// j := GetBase ( tower ) ;
50580: LD_ADDR_VAR 0 8
50584: PUSH
50585: LD_VAR 0 1
50589: PPUSH
50590: CALL_OW 274
50594: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50595: LD_VAR 0 8
50599: PPUSH
50600: LD_INT 1
50602: PPUSH
50603: CALL_OW 275
50607: PUSH
50608: LD_VAR 0 13
50612: PUSH
50613: LD_INT 1
50615: ARRAY
50616: GREATEREQUAL
50617: PUSH
50618: LD_VAR 0 8
50622: PPUSH
50623: LD_INT 2
50625: PPUSH
50626: CALL_OW 275
50630: PUSH
50631: LD_VAR 0 13
50635: PUSH
50636: LD_INT 2
50638: ARRAY
50639: GREATEREQUAL
50640: AND
50641: PUSH
50642: LD_VAR 0 8
50646: PPUSH
50647: LD_INT 3
50649: PPUSH
50650: CALL_OW 275
50654: PUSH
50655: LD_VAR 0 13
50659: PUSH
50660: LD_INT 3
50662: ARRAY
50663: GREATEREQUAL
50664: AND
50665: IFFALSE 50677
// result := weapon ;
50667: LD_ADDR_VAR 0 2
50671: PUSH
50672: LD_VAR 0 17
50676: ST_TO_ADDR
// end ; end ;
50677: LD_VAR 0 2
50681: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
// result := true ;
50686: LD_ADDR_VAR 0 3
50690: PUSH
50691: LD_INT 1
50693: ST_TO_ADDR
// if array1 = array2 then
50694: LD_VAR 0 1
50698: PUSH
50699: LD_VAR 0 2
50703: EQUAL
50704: IFFALSE 50764
// begin for i = 1 to array1 do
50706: LD_ADDR_VAR 0 4
50710: PUSH
50711: DOUBLE
50712: LD_INT 1
50714: DEC
50715: ST_TO_ADDR
50716: LD_VAR 0 1
50720: PUSH
50721: FOR_TO
50722: IFFALSE 50760
// if array1 [ i ] <> array2 [ i ] then
50724: LD_VAR 0 1
50728: PUSH
50729: LD_VAR 0 4
50733: ARRAY
50734: PUSH
50735: LD_VAR 0 2
50739: PUSH
50740: LD_VAR 0 4
50744: ARRAY
50745: NONEQUAL
50746: IFFALSE 50758
// begin result := false ;
50748: LD_ADDR_VAR 0 3
50752: PUSH
50753: LD_INT 0
50755: ST_TO_ADDR
// break ;
50756: GO 50760
// end ;
50758: GO 50721
50760: POP
50761: POP
// end else
50762: GO 50772
// result := false ;
50764: LD_ADDR_VAR 0 3
50768: PUSH
50769: LD_INT 0
50771: ST_TO_ADDR
// end ;
50772: LD_VAR 0 3
50776: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50777: LD_INT 0
50779: PPUSH
50780: PPUSH
50781: PPUSH
// pom := GetBase ( fac ) ;
50782: LD_ADDR_VAR 0 5
50786: PUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: CALL_OW 274
50796: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50797: LD_ADDR_VAR 0 4
50801: PUSH
50802: LD_VAR 0 2
50806: PUSH
50807: LD_INT 1
50809: ARRAY
50810: PPUSH
50811: LD_VAR 0 2
50815: PUSH
50816: LD_INT 2
50818: ARRAY
50819: PPUSH
50820: LD_VAR 0 2
50824: PUSH
50825: LD_INT 3
50827: ARRAY
50828: PPUSH
50829: LD_VAR 0 2
50833: PUSH
50834: LD_INT 4
50836: ARRAY
50837: PPUSH
50838: CALL_OW 449
50842: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50843: LD_ADDR_VAR 0 3
50847: PUSH
50848: LD_VAR 0 5
50852: PPUSH
50853: LD_INT 1
50855: PPUSH
50856: CALL_OW 275
50860: PUSH
50861: LD_VAR 0 4
50865: PUSH
50866: LD_INT 1
50868: ARRAY
50869: GREATEREQUAL
50870: PUSH
50871: LD_VAR 0 5
50875: PPUSH
50876: LD_INT 2
50878: PPUSH
50879: CALL_OW 275
50883: PUSH
50884: LD_VAR 0 4
50888: PUSH
50889: LD_INT 2
50891: ARRAY
50892: GREATEREQUAL
50893: AND
50894: PUSH
50895: LD_VAR 0 5
50899: PPUSH
50900: LD_INT 3
50902: PPUSH
50903: CALL_OW 275
50907: PUSH
50908: LD_VAR 0 4
50912: PUSH
50913: LD_INT 3
50915: ARRAY
50916: GREATEREQUAL
50917: AND
50918: ST_TO_ADDR
// end ;
50919: LD_VAR 0 3
50923: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50924: LD_INT 0
50926: PPUSH
50927: PPUSH
50928: PPUSH
50929: PPUSH
// pom := GetBase ( building ) ;
50930: LD_ADDR_VAR 0 3
50934: PUSH
50935: LD_VAR 0 1
50939: PPUSH
50940: CALL_OW 274
50944: ST_TO_ADDR
// if not pom then
50945: LD_VAR 0 3
50949: NOT
50950: IFFALSE 50954
// exit ;
50952: GO 51124
// btype := GetBType ( building ) ;
50954: LD_ADDR_VAR 0 5
50958: PUSH
50959: LD_VAR 0 1
50963: PPUSH
50964: CALL_OW 266
50968: ST_TO_ADDR
// if btype = b_armoury then
50969: LD_VAR 0 5
50973: PUSH
50974: LD_INT 4
50976: EQUAL
50977: IFFALSE 50987
// btype := b_barracks ;
50979: LD_ADDR_VAR 0 5
50983: PUSH
50984: LD_INT 5
50986: ST_TO_ADDR
// if btype = b_depot then
50987: LD_VAR 0 5
50991: PUSH
50992: LD_INT 0
50994: EQUAL
50995: IFFALSE 51005
// btype := b_warehouse ;
50997: LD_ADDR_VAR 0 5
51001: PUSH
51002: LD_INT 1
51004: ST_TO_ADDR
// if btype = b_workshop then
51005: LD_VAR 0 5
51009: PUSH
51010: LD_INT 2
51012: EQUAL
51013: IFFALSE 51023
// btype := b_factory ;
51015: LD_ADDR_VAR 0 5
51019: PUSH
51020: LD_INT 3
51022: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51023: LD_ADDR_VAR 0 4
51027: PUSH
51028: LD_VAR 0 5
51032: PPUSH
51033: LD_VAR 0 1
51037: PPUSH
51038: CALL_OW 248
51042: PPUSH
51043: CALL_OW 450
51047: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51048: LD_ADDR_VAR 0 2
51052: PUSH
51053: LD_VAR 0 3
51057: PPUSH
51058: LD_INT 1
51060: PPUSH
51061: CALL_OW 275
51065: PUSH
51066: LD_VAR 0 4
51070: PUSH
51071: LD_INT 1
51073: ARRAY
51074: GREATEREQUAL
51075: PUSH
51076: LD_VAR 0 3
51080: PPUSH
51081: LD_INT 2
51083: PPUSH
51084: CALL_OW 275
51088: PUSH
51089: LD_VAR 0 4
51093: PUSH
51094: LD_INT 2
51096: ARRAY
51097: GREATEREQUAL
51098: AND
51099: PUSH
51100: LD_VAR 0 3
51104: PPUSH
51105: LD_INT 3
51107: PPUSH
51108: CALL_OW 275
51112: PUSH
51113: LD_VAR 0 4
51117: PUSH
51118: LD_INT 3
51120: ARRAY
51121: GREATEREQUAL
51122: AND
51123: ST_TO_ADDR
// end ;
51124: LD_VAR 0 2
51128: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51129: LD_INT 0
51131: PPUSH
51132: PPUSH
51133: PPUSH
// pom := GetBase ( building ) ;
51134: LD_ADDR_VAR 0 4
51138: PUSH
51139: LD_VAR 0 1
51143: PPUSH
51144: CALL_OW 274
51148: ST_TO_ADDR
// if not pom then
51149: LD_VAR 0 4
51153: NOT
51154: IFFALSE 51158
// exit ;
51156: GO 51259
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51158: LD_ADDR_VAR 0 5
51162: PUSH
51163: LD_VAR 0 2
51167: PPUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL_OW 248
51177: PPUSH
51178: CALL_OW 450
51182: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51183: LD_ADDR_VAR 0 3
51187: PUSH
51188: LD_VAR 0 4
51192: PPUSH
51193: LD_INT 1
51195: PPUSH
51196: CALL_OW 275
51200: PUSH
51201: LD_VAR 0 5
51205: PUSH
51206: LD_INT 1
51208: ARRAY
51209: GREATEREQUAL
51210: PUSH
51211: LD_VAR 0 4
51215: PPUSH
51216: LD_INT 2
51218: PPUSH
51219: CALL_OW 275
51223: PUSH
51224: LD_VAR 0 5
51228: PUSH
51229: LD_INT 2
51231: ARRAY
51232: GREATEREQUAL
51233: AND
51234: PUSH
51235: LD_VAR 0 4
51239: PPUSH
51240: LD_INT 3
51242: PPUSH
51243: CALL_OW 275
51247: PUSH
51248: LD_VAR 0 5
51252: PUSH
51253: LD_INT 3
51255: ARRAY
51256: GREATEREQUAL
51257: AND
51258: ST_TO_ADDR
// end ;
51259: LD_VAR 0 3
51263: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
51270: PPUSH
51271: PPUSH
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
// result := false ;
51276: LD_ADDR_VAR 0 6
51280: PUSH
51281: LD_INT 0
51283: ST_TO_ADDR
// if not base or not btype or not x or not y then
51284: LD_VAR 0 1
51288: NOT
51289: PUSH
51290: LD_VAR 0 2
51294: NOT
51295: OR
51296: PUSH
51297: LD_VAR 0 3
51301: NOT
51302: OR
51303: PUSH
51304: LD_VAR 0 4
51308: NOT
51309: OR
51310: IFFALSE 51314
// exit ;
51312: GO 51828
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
51314: LD_ADDR_VAR 0 12
51318: PUSH
51319: LD_VAR 0 2
51323: PPUSH
51324: LD_VAR 0 3
51328: PPUSH
51329: LD_VAR 0 4
51333: PPUSH
51334: LD_VAR 0 5
51338: PPUSH
51339: LD_VAR 0 1
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: CALL_OW 248
51352: PPUSH
51353: LD_INT 0
51355: PPUSH
51356: CALL 52657 0 6
51360: ST_TO_ADDR
// if not hexes then
51361: LD_VAR 0 12
51365: NOT
51366: IFFALSE 51370
// exit ;
51368: GO 51828
// for i = 1 to hexes do
51370: LD_ADDR_VAR 0 7
51374: PUSH
51375: DOUBLE
51376: LD_INT 1
51378: DEC
51379: ST_TO_ADDR
51380: LD_VAR 0 12
51384: PUSH
51385: FOR_TO
51386: IFFALSE 51826
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51388: LD_ADDR_VAR 0 11
51392: PUSH
51393: LD_VAR 0 12
51397: PUSH
51398: LD_VAR 0 7
51402: ARRAY
51403: PUSH
51404: LD_INT 1
51406: ARRAY
51407: PPUSH
51408: LD_VAR 0 12
51412: PUSH
51413: LD_VAR 0 7
51417: ARRAY
51418: PUSH
51419: LD_INT 2
51421: ARRAY
51422: PPUSH
51423: CALL_OW 428
51427: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
51428: LD_VAR 0 11
51432: NOT
51433: PUSH
51434: LD_VAR 0 11
51438: PPUSH
51439: CALL_OW 247
51443: PUSH
51444: LD_INT 3
51446: EQUAL
51447: OR
51448: IFFALSE 51452
// continue ;
51450: GO 51385
// result := true ;
51452: LD_ADDR_VAR 0 6
51456: PUSH
51457: LD_INT 1
51459: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51460: LD_ADDR_VAR 0 15
51464: PUSH
51465: LD_INT 22
51467: PUSH
51468: LD_VAR 0 11
51472: PPUSH
51473: CALL_OW 255
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 30
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 30
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PPUSH
51514: CALL_OW 69
51518: ST_TO_ADDR
// if dep then
51519: LD_VAR 0 15
51523: IFFALSE 51659
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51525: LD_ADDR_VAR 0 14
51529: PUSH
51530: LD_VAR 0 15
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PPUSH
51539: CALL_OW 250
51543: PPUSH
51544: LD_VAR 0 15
51548: PUSH
51549: LD_INT 1
51551: ARRAY
51552: PPUSH
51553: CALL_OW 254
51557: PPUSH
51558: LD_INT 5
51560: PPUSH
51561: CALL_OW 272
51565: PUSH
51566: LD_VAR 0 15
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: PPUSH
51575: CALL_OW 251
51579: PPUSH
51580: LD_VAR 0 15
51584: PUSH
51585: LD_INT 1
51587: ARRAY
51588: PPUSH
51589: CALL_OW 254
51593: PPUSH
51594: LD_INT 5
51596: PPUSH
51597: CALL_OW 273
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51606: LD_VAR 0 14
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PPUSH
51615: LD_VAR 0 14
51619: PUSH
51620: LD_INT 2
51622: ARRAY
51623: PPUSH
51624: CALL_OW 488
51628: IFFALSE 51659
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51630: LD_VAR 0 11
51634: PPUSH
51635: LD_VAR 0 14
51639: PUSH
51640: LD_INT 1
51642: ARRAY
51643: PPUSH
51644: LD_VAR 0 14
51648: PUSH
51649: LD_INT 2
51651: ARRAY
51652: PPUSH
51653: CALL_OW 111
// continue ;
51657: GO 51385
// end ; end ; r := GetDir ( tmp ) ;
51659: LD_ADDR_VAR 0 13
51663: PUSH
51664: LD_VAR 0 11
51668: PPUSH
51669: CALL_OW 254
51673: ST_TO_ADDR
// if r = 5 then
51674: LD_VAR 0 13
51678: PUSH
51679: LD_INT 5
51681: EQUAL
51682: IFFALSE 51692
// r := 0 ;
51684: LD_ADDR_VAR 0 13
51688: PUSH
51689: LD_INT 0
51691: ST_TO_ADDR
// for j = r to 5 do
51692: LD_ADDR_VAR 0 8
51696: PUSH
51697: DOUBLE
51698: LD_VAR 0 13
51702: DEC
51703: ST_TO_ADDR
51704: LD_INT 5
51706: PUSH
51707: FOR_TO
51708: IFFALSE 51822
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51710: LD_ADDR_VAR 0 9
51714: PUSH
51715: LD_VAR 0 11
51719: PPUSH
51720: CALL_OW 250
51724: PPUSH
51725: LD_VAR 0 8
51729: PPUSH
51730: LD_INT 2
51732: PPUSH
51733: CALL_OW 272
51737: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51738: LD_ADDR_VAR 0 10
51742: PUSH
51743: LD_VAR 0 11
51747: PPUSH
51748: CALL_OW 251
51752: PPUSH
51753: LD_VAR 0 8
51757: PPUSH
51758: LD_INT 2
51760: PPUSH
51761: CALL_OW 273
51765: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51766: LD_VAR 0 9
51770: PPUSH
51771: LD_VAR 0 10
51775: PPUSH
51776: CALL_OW 488
51780: PUSH
51781: LD_VAR 0 9
51785: PPUSH
51786: LD_VAR 0 10
51790: PPUSH
51791: CALL_OW 428
51795: NOT
51796: AND
51797: IFFALSE 51820
// begin ComMoveXY ( tmp , _x , _y ) ;
51799: LD_VAR 0 11
51803: PPUSH
51804: LD_VAR 0 9
51808: PPUSH
51809: LD_VAR 0 10
51813: PPUSH
51814: CALL_OW 111
// break ;
51818: GO 51822
// end ; end ;
51820: GO 51707
51822: POP
51823: POP
// end ;
51824: GO 51385
51826: POP
51827: POP
// end ;
51828: LD_VAR 0 6
51832: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
51833: LD_INT 0
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
// result := false ;
51844: LD_ADDR_VAR 0 6
51848: PUSH
51849: LD_INT 0
51851: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51852: LD_VAR 0 1
51856: NOT
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 266
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: IN
51878: NOT
51879: OR
51880: PUSH
51881: LD_VAR 0 2
51885: NOT
51886: OR
51887: PUSH
51888: LD_VAR 0 5
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 4
51907: PUSH
51908: LD_INT 5
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: IN
51919: NOT
51920: OR
51921: PUSH
51922: LD_VAR 0 3
51926: PPUSH
51927: LD_VAR 0 4
51931: PPUSH
51932: CALL_OW 488
51936: NOT
51937: OR
51938: IFFALSE 51942
// exit ;
51940: GO 52652
// pom := GetBase ( bdepot ) ;
51942: LD_ADDR_VAR 0 9
51946: PUSH
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 274
51956: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
51957: LD_ADDR_VAR 0 10
51961: PUSH
51962: LD_VAR 0 2
51966: PPUSH
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 248
51976: PPUSH
51977: CALL_OW 450
51981: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51982: LD_VAR 0 9
51986: PPUSH
51987: LD_INT 1
51989: PPUSH
51990: CALL_OW 275
51994: PUSH
51995: LD_VAR 0 10
51999: PUSH
52000: LD_INT 1
52002: ARRAY
52003: GREATEREQUAL
52004: PUSH
52005: LD_VAR 0 9
52009: PPUSH
52010: LD_INT 2
52012: PPUSH
52013: CALL_OW 275
52017: PUSH
52018: LD_VAR 0 10
52022: PUSH
52023: LD_INT 2
52025: ARRAY
52026: GREATEREQUAL
52027: AND
52028: PUSH
52029: LD_VAR 0 9
52033: PPUSH
52034: LD_INT 3
52036: PPUSH
52037: CALL_OW 275
52041: PUSH
52042: LD_VAR 0 10
52046: PUSH
52047: LD_INT 3
52049: ARRAY
52050: GREATEREQUAL
52051: AND
52052: NOT
52053: IFFALSE 52057
// exit ;
52055: GO 52652
// if GetBType ( bdepot ) = b_depot then
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 266
52066: PUSH
52067: LD_INT 0
52069: EQUAL
52070: IFFALSE 52082
// dist := 28 else
52072: LD_ADDR_VAR 0 13
52076: PUSH
52077: LD_INT 28
52079: ST_TO_ADDR
52080: GO 52090
// dist := 36 ;
52082: LD_ADDR_VAR 0 13
52086: PUSH
52087: LD_INT 36
52089: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
52090: LD_VAR 0 1
52094: PPUSH
52095: LD_VAR 0 3
52099: PPUSH
52100: LD_VAR 0 4
52104: PPUSH
52105: CALL_OW 297
52109: PUSH
52110: LD_VAR 0 13
52114: GREATER
52115: IFFALSE 52119
// exit ;
52117: GO 52652
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
52119: LD_ADDR_VAR 0 11
52123: PUSH
52124: LD_VAR 0 2
52128: PPUSH
52129: LD_VAR 0 3
52133: PPUSH
52134: LD_VAR 0 4
52138: PPUSH
52139: LD_VAR 0 5
52143: PPUSH
52144: LD_VAR 0 1
52148: PPUSH
52149: CALL_OW 248
52153: PPUSH
52154: LD_INT 0
52156: PPUSH
52157: CALL 52657 0 6
52161: ST_TO_ADDR
// if not hexes then
52162: LD_VAR 0 11
52166: NOT
52167: IFFALSE 52171
// exit ;
52169: GO 52652
// hex := GetHexInfo ( x , y ) ;
52171: LD_ADDR_VAR 0 14
52175: PUSH
52176: LD_VAR 0 3
52180: PPUSH
52181: LD_VAR 0 4
52185: PPUSH
52186: CALL_OW 546
52190: ST_TO_ADDR
// if hex [ 1 ] then
52191: LD_VAR 0 14
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: IFFALSE 52203
// exit ;
52201: GO 52652
// height := hex [ 2 ] ;
52203: LD_ADDR_VAR 0 12
52207: PUSH
52208: LD_VAR 0 14
52212: PUSH
52213: LD_INT 2
52215: ARRAY
52216: ST_TO_ADDR
// for i = 1 to hexes do
52217: LD_ADDR_VAR 0 7
52221: PUSH
52222: DOUBLE
52223: LD_INT 1
52225: DEC
52226: ST_TO_ADDR
52227: LD_VAR 0 11
52231: PUSH
52232: FOR_TO
52233: IFFALSE 52561
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52235: LD_VAR 0 11
52239: PUSH
52240: LD_VAR 0 7
52244: ARRAY
52245: PUSH
52246: LD_INT 1
52248: ARRAY
52249: PPUSH
52250: LD_VAR 0 11
52254: PUSH
52255: LD_VAR 0 7
52259: ARRAY
52260: PUSH
52261: LD_INT 2
52263: ARRAY
52264: PPUSH
52265: CALL_OW 488
52269: NOT
52270: IFFALSE 52274
// continue ;
52272: GO 52232
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52274: LD_ADDR_VAR 0 8
52278: PUSH
52279: LD_VAR 0 11
52283: PUSH
52284: LD_VAR 0 7
52288: ARRAY
52289: PUSH
52290: LD_INT 1
52292: ARRAY
52293: PPUSH
52294: LD_VAR 0 11
52298: PUSH
52299: LD_VAR 0 7
52303: ARRAY
52304: PUSH
52305: LD_INT 2
52307: ARRAY
52308: PPUSH
52309: CALL_OW 546
52313: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52314: LD_VAR 0 8
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PUSH
52323: LD_VAR 0 8
52327: PUSH
52328: LD_INT 2
52330: ARRAY
52331: PUSH
52332: LD_VAR 0 12
52336: PUSH
52337: LD_INT 2
52339: PLUS
52340: GREATER
52341: OR
52342: PUSH
52343: LD_VAR 0 8
52347: PUSH
52348: LD_INT 2
52350: ARRAY
52351: PUSH
52352: LD_VAR 0 12
52356: PUSH
52357: LD_INT 2
52359: MINUS
52360: LESS
52361: OR
52362: PUSH
52363: LD_VAR 0 8
52367: PUSH
52368: LD_INT 3
52370: ARRAY
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 8
52377: PUSH
52378: LD_INT 9
52380: PUSH
52381: LD_INT 10
52383: PUSH
52384: LD_INT 11
52386: PUSH
52387: LD_INT 12
52389: PUSH
52390: LD_INT 13
52392: PUSH
52393: LD_INT 16
52395: PUSH
52396: LD_INT 17
52398: PUSH
52399: LD_INT 18
52401: PUSH
52402: LD_INT 19
52404: PUSH
52405: LD_INT 20
52407: PUSH
52408: LD_INT 21
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: IN
52426: NOT
52427: OR
52428: PUSH
52429: LD_VAR 0 8
52433: PUSH
52434: LD_INT 5
52436: ARRAY
52437: NOT
52438: OR
52439: PUSH
52440: LD_VAR 0 8
52444: PUSH
52445: LD_INT 6
52447: ARRAY
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 7
52457: PUSH
52458: LD_INT 9
52460: PUSH
52461: LD_INT 10
52463: PUSH
52464: LD_INT 11
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: IN
52475: NOT
52476: OR
52477: PUSH
52478: LD_VAR 0 11
52482: PUSH
52483: LD_VAR 0 7
52487: ARRAY
52488: PUSH
52489: LD_INT 1
52491: ARRAY
52492: PPUSH
52493: LD_VAR 0 11
52497: PUSH
52498: LD_VAR 0 7
52502: ARRAY
52503: PUSH
52504: LD_INT 2
52506: ARRAY
52507: PPUSH
52508: CALL_OW 428
52512: PUSH
52513: LD_INT 0
52515: GREATER
52516: OR
52517: PUSH
52518: LD_VAR 0 11
52522: PUSH
52523: LD_VAR 0 7
52527: ARRAY
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: PPUSH
52533: LD_VAR 0 11
52537: PUSH
52538: LD_VAR 0 7
52542: ARRAY
52543: PUSH
52544: LD_INT 2
52546: ARRAY
52547: PPUSH
52548: CALL_OW 351
52552: OR
52553: IFFALSE 52559
// exit ;
52555: POP
52556: POP
52557: GO 52652
// end ;
52559: GO 52232
52561: POP
52562: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
52563: LD_VAR 0 1
52567: PPUSH
52568: CALL_OW 255
52572: PPUSH
52573: LD_VAR 0 3
52577: PPUSH
52578: LD_VAR 0 4
52582: PPUSH
52583: LD_INT 20
52585: PPUSH
52586: CALL 45539 0 4
52590: PUSH
52591: LD_INT 4
52593: ARRAY
52594: IFFALSE 52598
// exit ;
52596: GO 52652
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
52598: LD_VAR 0 2
52602: PUSH
52603: LD_INT 29
52605: PUSH
52606: LD_INT 30
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: IN
52613: PUSH
52614: LD_VAR 0 3
52618: PPUSH
52619: LD_VAR 0 4
52623: PPUSH
52624: LD_VAR 0 1
52628: PPUSH
52629: CALL_OW 255
52633: PPUSH
52634: CALL_OW 440
52638: NOT
52639: AND
52640: IFFALSE 52644
// exit ;
52642: GO 52652
// result := true ;
52644: LD_ADDR_VAR 0 6
52648: PUSH
52649: LD_INT 1
52651: ST_TO_ADDR
// end ;
52652: LD_VAR 0 6
52656: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
52657: LD_INT 0
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
52671: PPUSH
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
52681: PPUSH
52682: PPUSH
52683: PPUSH
52684: PPUSH
52685: PPUSH
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
// result = [ ] ;
52717: LD_ADDR_VAR 0 7
52721: PUSH
52722: EMPTY
52723: ST_TO_ADDR
// temp_list = [ ] ;
52724: LD_ADDR_VAR 0 9
52728: PUSH
52729: EMPTY
52730: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52731: LD_VAR 0 4
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: LD_INT 4
52750: PUSH
52751: LD_INT 5
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: IN
52762: NOT
52763: PUSH
52764: LD_VAR 0 1
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: IN
52779: PUSH
52780: LD_VAR 0 5
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: IN
52799: NOT
52800: AND
52801: OR
52802: IFFALSE 52806
// exit ;
52804: GO 71191
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52806: LD_VAR 0 1
52810: PUSH
52811: LD_INT 6
52813: PUSH
52814: LD_INT 7
52816: PUSH
52817: LD_INT 8
52819: PUSH
52820: LD_INT 13
52822: PUSH
52823: LD_INT 12
52825: PUSH
52826: LD_INT 15
52828: PUSH
52829: LD_INT 11
52831: PUSH
52832: LD_INT 14
52834: PUSH
52835: LD_INT 10
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: IN
52849: IFFALSE 52859
// btype = b_lab ;
52851: LD_ADDR_VAR 0 1
52855: PUSH
52856: LD_INT 6
52858: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52859: LD_VAR 0 6
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: IN
52878: NOT
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 6
52899: PUSH
52900: LD_INT 36
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: LD_INT 5
52908: PUSH
52909: LD_INT 31
52911: PUSH
52912: LD_INT 32
52914: PUSH
52915: LD_INT 33
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: IN
52931: NOT
52932: PUSH
52933: LD_VAR 0 6
52937: PUSH
52938: LD_INT 1
52940: EQUAL
52941: AND
52942: OR
52943: PUSH
52944: LD_VAR 0 1
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: IN
52959: NOT
52960: PUSH
52961: LD_VAR 0 6
52965: PUSH
52966: LD_INT 2
52968: EQUAL
52969: AND
52970: OR
52971: IFFALSE 52981
// mode = 0 ;
52973: LD_ADDR_VAR 0 6
52977: PUSH
52978: LD_INT 0
52980: ST_TO_ADDR
// case mode of 0 :
52981: LD_VAR 0 6
52985: PUSH
52986: LD_INT 0
52988: DOUBLE
52989: EQUAL
52990: IFTRUE 52994
52992: GO 64447
52994: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52995: LD_ADDR_VAR 0 11
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53188: LD_ADDR_VAR 0 12
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53384: LD_ADDR_VAR 0 13
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53583: LD_ADDR_VAR 0 14
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53779: LD_ADDR_VAR 0 15
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53972: LD_ADDR_VAR 0 16
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54165: LD_ADDR_VAR 0 17
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54395: LD_ADDR_VAR 0 18
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54625: LD_ADDR_VAR 0 19
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54855: LD_ADDR_VAR 0 20
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55085: LD_ADDR_VAR 0 21
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55315: LD_ADDR_VAR 0 22
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55545: LD_ADDR_VAR 0 23
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55825: LD_ADDR_VAR 0 24
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56101: LD_ADDR_VAR 0 25
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56375: LD_ADDR_VAR 0 26
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56651: LD_ADDR_VAR 0 27
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56931: LD_ADDR_VAR 0 28
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57213: LD_ADDR_VAR 0 29
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57492: LD_ADDR_VAR 0 30
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57770: LD_ADDR_VAR 0 31
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58048: LD_ADDR_VAR 0 32
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58326: LD_ADDR_VAR 0 33
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58605: LD_ADDR_VAR 0 34
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58885: LD_ADDR_VAR 0 35
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58997: LD_ADDR_VAR 0 36
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59109: LD_ADDR_VAR 0 37
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59221: LD_ADDR_VAR 0 38
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59333: LD_ADDR_VAR 0 39
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59445: LD_ADDR_VAR 0 40
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59557: LD_ADDR_VAR 0 41
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 3
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59907: LD_ADDR_VAR 0 42
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60257: LD_ADDR_VAR 0 43
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60605: LD_ADDR_VAR 0 44
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60955: LD_ADDR_VAR 0 45
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61305: LD_ADDR_VAR 0 46
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61653: LD_ADDR_VAR 0 47
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61804: LD_ADDR_VAR 0 48
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61951: LD_ADDR_VAR 0 49
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62095: LD_ADDR_VAR 0 50
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62239: LD_ADDR_VAR 0 51
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62386: LD_ADDR_VAR 0 52
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62537: LD_ADDR_VAR 0 53
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62767: LD_ADDR_VAR 0 54
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 2
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62997: LD_ADDR_VAR 0 55
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63227: LD_ADDR_VAR 0 56
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63457: LD_ADDR_VAR 0 57
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63687: LD_ADDR_VAR 0 58
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: LD_INT 2
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63917: LD_ADDR_VAR 0 59
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64005: LD_ADDR_VAR 0 60
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64093: LD_ADDR_VAR 0 61
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64181: LD_ADDR_VAR 0 62
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 1
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64269: LD_ADDR_VAR 0 63
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64357: LD_ADDR_VAR 0 64
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// end ; 1 :
64445: GO 70342
64447: LD_INT 1
64449: DOUBLE
64450: EQUAL
64451: IFTRUE 64455
64453: GO 67078
64455: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64456: LD_ADDR_VAR 0 11
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 2
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64500: LD_ADDR_VAR 0 12
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64541: LD_ADDR_VAR 0 13
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64581: LD_ADDR_VAR 0 14
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64622: LD_ADDR_VAR 0 15
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 3
64651: NEG
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64666: LD_ADDR_VAR 0 16
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64712: LD_ADDR_VAR 0 17
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64756: LD_ADDR_VAR 0 18
64760: PUSH
64761: LD_INT 2
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64797: LD_ADDR_VAR 0 19
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64837: LD_ADDR_VAR 0 20
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64878: LD_ADDR_VAR 0 21
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64922: LD_ADDR_VAR 0 22
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: LD_INT 3
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 3
64941: NEG
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: LD_INT 3
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64968: LD_ADDR_VAR 0 23
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: LD_INT 4
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65012: LD_ADDR_VAR 0 24
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 4
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65053: LD_ADDR_VAR 0 25
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 4
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 3
65080: PUSH
65081: LD_INT 4
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65093: LD_ADDR_VAR 0 26
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: LD_INT 4
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65134: LD_ADDR_VAR 0 27
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 3
65152: NEG
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 4
65163: NEG
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65178: LD_ADDR_VAR 0 28
65182: PUSH
65183: LD_INT 3
65185: NEG
65186: PUSH
65187: LD_INT 3
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65224: LD_ADDR_VAR 0 29
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 4
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 3
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 5
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 5
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: LD_INT 4
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 6
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 6
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 5
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65379: LD_ADDR_VAR 0 30
65383: PUSH
65384: LD_INT 2
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 5
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 5
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 5
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 6
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 6
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65522: LD_ADDR_VAR 0 31
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 3
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: LD_INT 3
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 4
65569: PUSH
65570: LD_INT 4
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: LD_INT 4
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 5
65589: PUSH
65590: LD_INT 4
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 4
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 6
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 6
65629: PUSH
65630: LD_INT 6
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 5
65639: PUSH
65640: LD_INT 6
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65661: LD_ADDR_VAR 0 32
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 5
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 4
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 6
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 6
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 5
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65804: LD_ADDR_VAR 0 33
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 4
65856: NEG
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 4
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 5
65890: NEG
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 5
65901: NEG
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 5
65913: NEG
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 6
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 6
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65959: LD_ADDR_VAR 0 34
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: LD_INT 3
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: LD_INT 3
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: LD_INT 4
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 4
66014: NEG
66015: PUSH
66016: LD_INT 3
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: NEG
66027: PUSH
66028: LD_INT 4
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 4
66038: NEG
66039: PUSH
66040: LD_INT 5
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 5
66050: NEG
66051: PUSH
66052: LD_INT 4
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 5
66062: NEG
66063: PUSH
66064: LD_INT 5
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 5
66074: NEG
66075: PUSH
66076: LD_INT 6
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 6
66086: NEG
66087: PUSH
66088: LD_INT 5
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 6
66098: NEG
66099: PUSH
66100: LD_INT 6
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66122: LD_ADDR_VAR 0 41
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: LD_INT 3
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 2
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66166: LD_ADDR_VAR 0 42
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66207: LD_ADDR_VAR 0 43
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: LD_INT 3
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66247: LD_ADDR_VAR 0 44
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 2
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66288: LD_ADDR_VAR 0 45
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66332: LD_ADDR_VAR 0 46
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66378: LD_ADDR_VAR 0 47
66382: PUSH
66383: LD_INT 2
66385: NEG
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: LD_INT 3
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66411: LD_ADDR_VAR 0 48
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66442: LD_ADDR_VAR 0 49
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66471: LD_ADDR_VAR 0 50
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66500: LD_ADDR_VAR 0 51
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: NEG
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66531: LD_ADDR_VAR 0 52
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66564: LD_ADDR_VAR 0 53
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66608: LD_ADDR_VAR 0 54
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66649: LD_ADDR_VAR 0 55
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 3
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66689: LD_ADDR_VAR 0 56
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66730: LD_ADDR_VAR 0 57
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66774: LD_ADDR_VAR 0 58
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: LD_INT 2
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66820: LD_ADDR_VAR 0 59
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66864: LD_ADDR_VAR 0 60
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66905: LD_ADDR_VAR 0 61
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 2
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66945: LD_ADDR_VAR 0 62
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 2
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66986: LD_ADDR_VAR 0 63
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67030: LD_ADDR_VAR 0 64
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: NEG
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: NEG
67062: PUSH
67063: LD_INT 2
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// end ; 2 :
67076: GO 70342
67078: LD_INT 2
67080: DOUBLE
67081: EQUAL
67082: IFTRUE 67086
67084: GO 70341
67086: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67087: LD_ADDR_VAR 0 29
67091: PUSH
67092: LD_INT 4
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 4
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 5
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 5
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 3
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 5
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 4
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 4
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: LD_INT 3
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 4
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: LD_INT 4
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 4
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: LD_INT 3
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 4
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: LD_INT 5
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 5
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 5
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 4
67437: NEG
67438: PUSH
67439: LD_INT 1
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: NEG
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 4
67472: NEG
67473: PUSH
67474: LD_INT 4
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: LD_INT 5
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 3
67508: NEG
67509: PUSH
67510: LD_INT 3
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 4
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 5
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 5
67544: NEG
67545: PUSH
67546: LD_INT 5
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: NEG
67557: PUSH
67558: LD_INT 5
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 5
67568: NEG
67569: PUSH
67570: LD_INT 3
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67625: LD_ADDR_VAR 0 30
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 4
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 5
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 5
67662: PUSH
67663: LD_INT 5
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 4
67672: PUSH
67673: LD_INT 5
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: LD_INT 4
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 5
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: LD_INT 5
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 2
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: PUSH
67753: LD_INT 4
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 4
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 2
67794: PUSH
67795: LD_INT 4
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 4
67815: NEG
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 4
67826: NEG
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 3
67838: NEG
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 3
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 4
67860: NEG
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 5
67871: NEG
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 5
67882: NEG
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 5
67894: NEG
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 3
67917: NEG
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: LD_INT 4
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 2
67953: NEG
67954: PUSH
67955: LD_INT 2
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 3
67965: NEG
67966: PUSH
67967: LD_INT 2
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 4
67977: NEG
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: NEG
67990: PUSH
67991: LD_INT 4
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: NEG
68002: PUSH
68003: LD_INT 4
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 4
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 5
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 4
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: LD_INT 3
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 4
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: LD_INT 5
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: LD_INT 5
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68172: LD_ADDR_VAR 0 31
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 4
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 3
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 4
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 5
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 4
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: PUSH
68242: LD_INT 3
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 5
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 3
68272: NEG
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 3
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 4
68328: NEG
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 4
68339: NEG
68340: PUSH
68341: LD_INT 1
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 4
68351: NEG
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: NEG
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 4
68374: NEG
68375: PUSH
68376: LD_INT 4
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 4
68386: NEG
68387: PUSH
68388: LD_INT 5
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 3
68398: NEG
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: LD_INT 3
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 5
68446: NEG
68447: PUSH
68448: LD_INT 5
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: LD_INT 5
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 5
68470: NEG
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 4
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: PUSH
68505: LD_INT 3
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: LD_INT 3
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: LD_INT 4
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: LD_INT 4
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 4
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 4
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 5
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 3
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 5
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68722: LD_ADDR_VAR 0 32
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 4
68740: NEG
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 3
68763: NEG
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 4
68774: NEG
68775: PUSH
68776: LD_INT 1
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 5
68785: NEG
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 5
68796: NEG
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 5
68808: NEG
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: LD_INT 4
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 2
68855: NEG
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: NEG
68868: PUSH
68869: LD_INT 2
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 4
68903: NEG
68904: PUSH
68905: LD_INT 4
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: LD_INT 2
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 4
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: LD_INT 5
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: LD_INT 3
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 3
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 1
68994: NEG
68995: PUSH
68996: LD_INT 4
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 5
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: PUSH
69019: LD_INT 3
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: LD_INT 5
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 4
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 4
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 2
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 2
69113: PUSH
69114: LD_INT 2
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 4
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 5
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 5
69164: PUSH
69165: LD_INT 5
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 4
69174: PUSH
69175: LD_INT 5
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 3
69184: PUSH
69185: LD_INT 4
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: LD_INT 3
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 5
69204: PUSH
69205: LD_INT 3
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: LD_INT 5
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69269: LD_ADDR_VAR 0 33
69273: PUSH
69274: LD_INT 4
69276: NEG
69277: PUSH
69278: LD_INT 4
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 4
69288: NEG
69289: PUSH
69290: LD_INT 5
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: LD_INT 3
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 4
69324: NEG
69325: PUSH
69326: LD_INT 3
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 5
69336: NEG
69337: PUSH
69338: LD_INT 4
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 5
69348: NEG
69349: PUSH
69350: LD_INT 5
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: LD_INT 5
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 5
69372: NEG
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 4
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 1
69451: NEG
69452: PUSH
69453: LD_INT 4
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: LD_INT 2
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: NEG
69475: PUSH
69476: LD_INT 4
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 4
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 5
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 5
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 4
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 3
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: LD_INT 2
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 5
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 3
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 2
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 4
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: PUSH
69660: LD_INT 4
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 0
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 4
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: PUSH
69700: LD_INT 5
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 4
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: NEG
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: LD_INT 5
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: NEG
69752: PUSH
69753: LD_INT 3
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69807: LD_ADDR_VAR 0 34
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 4
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: LD_INT 5
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 1
69847: PUSH
69848: LD_INT 3
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: LD_INT 4
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: LD_INT 5
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: LD_INT 3
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 2
69904: NEG
69905: PUSH
69906: LD_INT 5
69908: NEG
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 3
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 3
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: LD_INT 1
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: LD_INT 1
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 2
69988: PUSH
69989: LD_INT 2
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 4
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 4
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 5
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 5
70039: PUSH
70040: LD_INT 5
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 4
70049: PUSH
70050: LD_INT 5
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: LD_INT 4
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: LD_INT 3
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 5
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: LD_INT 5
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 0
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: LD_INT 3
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: LD_INT 4
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 1
70160: NEG
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: LD_INT 4
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: LD_INT 2
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 4
70203: NEG
70204: PUSH
70205: LD_INT 1
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 3
70215: NEG
70216: PUSH
70217: LD_INT 0
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 3
70226: NEG
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: NEG
70238: PUSH
70239: LD_INT 1
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 5
70248: NEG
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 5
70259: NEG
70260: PUSH
70261: LD_INT 1
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 5
70271: NEG
70272: PUSH
70273: LD_INT 2
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 3
70283: NEG
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: ST_TO_ADDR
// end ; end ;
70339: GO 70342
70341: POP
// case btype of b_depot , b_warehouse :
70342: LD_VAR 0 1
70346: PUSH
70347: LD_INT 0
70349: DOUBLE
70350: EQUAL
70351: IFTRUE 70361
70353: LD_INT 1
70355: DOUBLE
70356: EQUAL
70357: IFTRUE 70361
70359: GO 70562
70361: POP
// case nation of nation_american :
70362: LD_VAR 0 5
70366: PUSH
70367: LD_INT 1
70369: DOUBLE
70370: EQUAL
70371: IFTRUE 70375
70373: GO 70431
70375: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
70376: LD_ADDR_VAR 0 9
70380: PUSH
70381: LD_VAR 0 11
70385: PUSH
70386: LD_VAR 0 12
70390: PUSH
70391: LD_VAR 0 13
70395: PUSH
70396: LD_VAR 0 14
70400: PUSH
70401: LD_VAR 0 15
70405: PUSH
70406: LD_VAR 0 16
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: PUSH
70419: LD_VAR 0 4
70423: PUSH
70424: LD_INT 1
70426: PLUS
70427: ARRAY
70428: ST_TO_ADDR
70429: GO 70560
70431: LD_INT 2
70433: DOUBLE
70434: EQUAL
70435: IFTRUE 70439
70437: GO 70495
70439: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
70440: LD_ADDR_VAR 0 9
70444: PUSH
70445: LD_VAR 0 17
70449: PUSH
70450: LD_VAR 0 18
70454: PUSH
70455: LD_VAR 0 19
70459: PUSH
70460: LD_VAR 0 20
70464: PUSH
70465: LD_VAR 0 21
70469: PUSH
70470: LD_VAR 0 22
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: PUSH
70483: LD_VAR 0 4
70487: PUSH
70488: LD_INT 1
70490: PLUS
70491: ARRAY
70492: ST_TO_ADDR
70493: GO 70560
70495: LD_INT 3
70497: DOUBLE
70498: EQUAL
70499: IFTRUE 70503
70501: GO 70559
70503: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70504: LD_ADDR_VAR 0 9
70508: PUSH
70509: LD_VAR 0 23
70513: PUSH
70514: LD_VAR 0 24
70518: PUSH
70519: LD_VAR 0 25
70523: PUSH
70524: LD_VAR 0 26
70528: PUSH
70529: LD_VAR 0 27
70533: PUSH
70534: LD_VAR 0 28
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: PUSH
70547: LD_VAR 0 4
70551: PUSH
70552: LD_INT 1
70554: PLUS
70555: ARRAY
70556: ST_TO_ADDR
70557: GO 70560
70559: POP
70560: GO 71109
70562: LD_INT 2
70564: DOUBLE
70565: EQUAL
70566: IFTRUE 70576
70568: LD_INT 3
70570: DOUBLE
70571: EQUAL
70572: IFTRUE 70576
70574: GO 70632
70576: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70577: LD_ADDR_VAR 0 9
70581: PUSH
70582: LD_VAR 0 29
70586: PUSH
70587: LD_VAR 0 30
70591: PUSH
70592: LD_VAR 0 31
70596: PUSH
70597: LD_VAR 0 32
70601: PUSH
70602: LD_VAR 0 33
70606: PUSH
70607: LD_VAR 0 34
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: LD_VAR 0 4
70624: PUSH
70625: LD_INT 1
70627: PLUS
70628: ARRAY
70629: ST_TO_ADDR
70630: GO 71109
70632: LD_INT 16
70634: DOUBLE
70635: EQUAL
70636: IFTRUE 70688
70638: LD_INT 17
70640: DOUBLE
70641: EQUAL
70642: IFTRUE 70688
70644: LD_INT 18
70646: DOUBLE
70647: EQUAL
70648: IFTRUE 70688
70650: LD_INT 19
70652: DOUBLE
70653: EQUAL
70654: IFTRUE 70688
70656: LD_INT 20
70658: DOUBLE
70659: EQUAL
70660: IFTRUE 70688
70662: LD_INT 21
70664: DOUBLE
70665: EQUAL
70666: IFTRUE 70688
70668: LD_INT 23
70670: DOUBLE
70671: EQUAL
70672: IFTRUE 70688
70674: LD_INT 24
70676: DOUBLE
70677: EQUAL
70678: IFTRUE 70688
70680: LD_INT 25
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70688
70686: GO 70744
70688: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70689: LD_ADDR_VAR 0 9
70693: PUSH
70694: LD_VAR 0 35
70698: PUSH
70699: LD_VAR 0 36
70703: PUSH
70704: LD_VAR 0 37
70708: PUSH
70709: LD_VAR 0 38
70713: PUSH
70714: LD_VAR 0 39
70718: PUSH
70719: LD_VAR 0 40
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: PUSH
70732: LD_VAR 0 4
70736: PUSH
70737: LD_INT 1
70739: PLUS
70740: ARRAY
70741: ST_TO_ADDR
70742: GO 71109
70744: LD_INT 6
70746: DOUBLE
70747: EQUAL
70748: IFTRUE 70800
70750: LD_INT 7
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70800
70756: LD_INT 8
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70800
70762: LD_INT 13
70764: DOUBLE
70765: EQUAL
70766: IFTRUE 70800
70768: LD_INT 12
70770: DOUBLE
70771: EQUAL
70772: IFTRUE 70800
70774: LD_INT 15
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70800
70780: LD_INT 11
70782: DOUBLE
70783: EQUAL
70784: IFTRUE 70800
70786: LD_INT 14
70788: DOUBLE
70789: EQUAL
70790: IFTRUE 70800
70792: LD_INT 10
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70800
70798: GO 70856
70800: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
70801: LD_ADDR_VAR 0 9
70805: PUSH
70806: LD_VAR 0 41
70810: PUSH
70811: LD_VAR 0 42
70815: PUSH
70816: LD_VAR 0 43
70820: PUSH
70821: LD_VAR 0 44
70825: PUSH
70826: LD_VAR 0 45
70830: PUSH
70831: LD_VAR 0 46
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: PUSH
70844: LD_VAR 0 4
70848: PUSH
70849: LD_INT 1
70851: PLUS
70852: ARRAY
70853: ST_TO_ADDR
70854: GO 71109
70856: LD_INT 36
70858: DOUBLE
70859: EQUAL
70860: IFTRUE 70864
70862: GO 70920
70864: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70865: LD_ADDR_VAR 0 9
70869: PUSH
70870: LD_VAR 0 47
70874: PUSH
70875: LD_VAR 0 48
70879: PUSH
70880: LD_VAR 0 49
70884: PUSH
70885: LD_VAR 0 50
70889: PUSH
70890: LD_VAR 0 51
70894: PUSH
70895: LD_VAR 0 52
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 4
70912: PUSH
70913: LD_INT 1
70915: PLUS
70916: ARRAY
70917: ST_TO_ADDR
70918: GO 71109
70920: LD_INT 4
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70946
70926: LD_INT 5
70928: DOUBLE
70929: EQUAL
70930: IFTRUE 70946
70932: LD_INT 34
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70946
70938: LD_INT 37
70940: DOUBLE
70941: EQUAL
70942: IFTRUE 70946
70944: GO 71002
70946: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70947: LD_ADDR_VAR 0 9
70951: PUSH
70952: LD_VAR 0 53
70956: PUSH
70957: LD_VAR 0 54
70961: PUSH
70962: LD_VAR 0 55
70966: PUSH
70967: LD_VAR 0 56
70971: PUSH
70972: LD_VAR 0 57
70976: PUSH
70977: LD_VAR 0 58
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: PUSH
70990: LD_VAR 0 4
70994: PUSH
70995: LD_INT 1
70997: PLUS
70998: ARRAY
70999: ST_TO_ADDR
71000: GO 71109
71002: LD_INT 31
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71052
71008: LD_INT 32
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71052
71014: LD_INT 33
71016: DOUBLE
71017: EQUAL
71018: IFTRUE 71052
71020: LD_INT 27
71022: DOUBLE
71023: EQUAL
71024: IFTRUE 71052
71026: LD_INT 26
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71052
71032: LD_INT 28
71034: DOUBLE
71035: EQUAL
71036: IFTRUE 71052
71038: LD_INT 29
71040: DOUBLE
71041: EQUAL
71042: IFTRUE 71052
71044: LD_INT 30
71046: DOUBLE
71047: EQUAL
71048: IFTRUE 71052
71050: GO 71108
71052: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
71053: LD_ADDR_VAR 0 9
71057: PUSH
71058: LD_VAR 0 59
71062: PUSH
71063: LD_VAR 0 60
71067: PUSH
71068: LD_VAR 0 61
71072: PUSH
71073: LD_VAR 0 62
71077: PUSH
71078: LD_VAR 0 63
71082: PUSH
71083: LD_VAR 0 64
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: PUSH
71096: LD_VAR 0 4
71100: PUSH
71101: LD_INT 1
71103: PLUS
71104: ARRAY
71105: ST_TO_ADDR
71106: GO 71109
71108: POP
// temp_list2 = [ ] ;
71109: LD_ADDR_VAR 0 10
71113: PUSH
71114: EMPTY
71115: ST_TO_ADDR
// for i in temp_list do
71116: LD_ADDR_VAR 0 8
71120: PUSH
71121: LD_VAR 0 9
71125: PUSH
71126: FOR_IN
71127: IFFALSE 71179
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71129: LD_ADDR_VAR 0 10
71133: PUSH
71134: LD_VAR 0 10
71138: PUSH
71139: LD_VAR 0 8
71143: PUSH
71144: LD_INT 1
71146: ARRAY
71147: PUSH
71148: LD_VAR 0 2
71152: PLUS
71153: PUSH
71154: LD_VAR 0 8
71158: PUSH
71159: LD_INT 2
71161: ARRAY
71162: PUSH
71163: LD_VAR 0 3
71167: PLUS
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: EMPTY
71174: LIST
71175: ADD
71176: ST_TO_ADDR
71177: GO 71126
71179: POP
71180: POP
// result = temp_list2 ;
71181: LD_ADDR_VAR 0 7
71185: PUSH
71186: LD_VAR 0 10
71190: ST_TO_ADDR
// end ;
71191: LD_VAR 0 7
71195: RET
// export function EnemyInRange ( unit , dist ) ; begin
71196: LD_INT 0
71198: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71199: LD_ADDR_VAR 0 3
71203: PUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 255
71213: PPUSH
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL_OW 250
71223: PPUSH
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 251
71233: PPUSH
71234: LD_VAR 0 2
71238: PPUSH
71239: CALL 45539 0 4
71243: PUSH
71244: LD_INT 4
71246: ARRAY
71247: ST_TO_ADDR
// end ;
71248: LD_VAR 0 3
71252: RET
// export function PlayerSeeMe ( unit ) ; begin
71253: LD_INT 0
71255: PPUSH
// result := See ( your_side , unit ) ;
71256: LD_ADDR_VAR 0 2
71260: PUSH
71261: LD_OWVAR 2
71265: PPUSH
71266: LD_VAR 0 1
71270: PPUSH
71271: CALL_OW 292
71275: ST_TO_ADDR
// end ;
71276: LD_VAR 0 2
71280: RET
// export function ReverseDir ( unit ) ; begin
71281: LD_INT 0
71283: PPUSH
// if not unit then
71284: LD_VAR 0 1
71288: NOT
71289: IFFALSE 71293
// exit ;
71291: GO 71339
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
71293: LD_ADDR_VAR 0 2
71297: PUSH
71298: LD_INT 3
71300: PUSH
71301: LD_INT 4
71303: PUSH
71304: LD_INT 5
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: LD_INT 2
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: PUSH
71324: LD_VAR 0 1
71328: PPUSH
71329: CALL_OW 254
71333: PUSH
71334: LD_INT 1
71336: PLUS
71337: ARRAY
71338: ST_TO_ADDR
// end ;
71339: LD_VAR 0 2
71343: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71344: LD_INT 0
71346: PPUSH
71347: PPUSH
71348: PPUSH
71349: PPUSH
71350: PPUSH
// if not hexes then
71351: LD_VAR 0 2
71355: NOT
71356: IFFALSE 71360
// exit ;
71358: GO 71508
// dist := 9999 ;
71360: LD_ADDR_VAR 0 5
71364: PUSH
71365: LD_INT 9999
71367: ST_TO_ADDR
// for i = 1 to hexes do
71368: LD_ADDR_VAR 0 4
71372: PUSH
71373: DOUBLE
71374: LD_INT 1
71376: DEC
71377: ST_TO_ADDR
71378: LD_VAR 0 2
71382: PUSH
71383: FOR_TO
71384: IFFALSE 71496
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71386: LD_VAR 0 1
71390: PPUSH
71391: LD_VAR 0 2
71395: PUSH
71396: LD_VAR 0 4
71400: ARRAY
71401: PUSH
71402: LD_INT 1
71404: ARRAY
71405: PPUSH
71406: LD_VAR 0 2
71410: PUSH
71411: LD_VAR 0 4
71415: ARRAY
71416: PUSH
71417: LD_INT 2
71419: ARRAY
71420: PPUSH
71421: CALL_OW 297
71425: PUSH
71426: LD_VAR 0 5
71430: LESS
71431: IFFALSE 71494
// begin hex := hexes [ i ] ;
71433: LD_ADDR_VAR 0 7
71437: PUSH
71438: LD_VAR 0 2
71442: PUSH
71443: LD_VAR 0 4
71447: ARRAY
71448: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71449: LD_ADDR_VAR 0 5
71453: PUSH
71454: LD_VAR 0 1
71458: PPUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_VAR 0 4
71468: ARRAY
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: PPUSH
71474: LD_VAR 0 2
71478: PUSH
71479: LD_VAR 0 4
71483: ARRAY
71484: PUSH
71485: LD_INT 2
71487: ARRAY
71488: PPUSH
71489: CALL_OW 297
71493: ST_TO_ADDR
// end ; end ;
71494: GO 71383
71496: POP
71497: POP
// result := hex ;
71498: LD_ADDR_VAR 0 3
71502: PUSH
71503: LD_VAR 0 7
71507: ST_TO_ADDR
// end ;
71508: LD_VAR 0 3
71512: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71513: LD_INT 0
71515: PPUSH
71516: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71517: LD_VAR 0 1
71521: NOT
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: LD_INT 21
71530: PUSH
71531: LD_INT 2
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 23
71540: PUSH
71541: LD_INT 2
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PPUSH
71552: CALL_OW 69
71556: IN
71557: NOT
71558: OR
71559: IFFALSE 71563
// exit ;
71561: GO 71610
// for i = 1 to 3 do
71563: LD_ADDR_VAR 0 3
71567: PUSH
71568: DOUBLE
71569: LD_INT 1
71571: DEC
71572: ST_TO_ADDR
71573: LD_INT 3
71575: PUSH
71576: FOR_TO
71577: IFFALSE 71608
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71579: LD_VAR 0 1
71583: PPUSH
71584: CALL_OW 250
71588: PPUSH
71589: LD_VAR 0 1
71593: PPUSH
71594: CALL_OW 251
71598: PPUSH
71599: LD_INT 1
71601: PPUSH
71602: CALL_OW 453
71606: GO 71576
71608: POP
71609: POP
// end ;
71610: LD_VAR 0 2
71614: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71615: LD_INT 0
71617: PPUSH
71618: PPUSH
71619: PPUSH
71620: PPUSH
71621: PPUSH
71622: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71623: LD_VAR 0 1
71627: NOT
71628: PUSH
71629: LD_VAR 0 2
71633: NOT
71634: OR
71635: PUSH
71636: LD_VAR 0 1
71640: PPUSH
71641: CALL_OW 314
71645: OR
71646: IFFALSE 71650
// exit ;
71648: GO 72091
// x := GetX ( enemy_unit ) ;
71650: LD_ADDR_VAR 0 7
71654: PUSH
71655: LD_VAR 0 2
71659: PPUSH
71660: CALL_OW 250
71664: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71665: LD_ADDR_VAR 0 8
71669: PUSH
71670: LD_VAR 0 2
71674: PPUSH
71675: CALL_OW 251
71679: ST_TO_ADDR
// if not x or not y then
71680: LD_VAR 0 7
71684: NOT
71685: PUSH
71686: LD_VAR 0 8
71690: NOT
71691: OR
71692: IFFALSE 71696
// exit ;
71694: GO 72091
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71696: LD_ADDR_VAR 0 6
71700: PUSH
71701: LD_VAR 0 7
71705: PPUSH
71706: LD_INT 0
71708: PPUSH
71709: LD_INT 4
71711: PPUSH
71712: CALL_OW 272
71716: PUSH
71717: LD_VAR 0 8
71721: PPUSH
71722: LD_INT 0
71724: PPUSH
71725: LD_INT 4
71727: PPUSH
71728: CALL_OW 273
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_VAR 0 7
71741: PPUSH
71742: LD_INT 1
71744: PPUSH
71745: LD_INT 4
71747: PPUSH
71748: CALL_OW 272
71752: PUSH
71753: LD_VAR 0 8
71757: PPUSH
71758: LD_INT 1
71760: PPUSH
71761: LD_INT 4
71763: PPUSH
71764: CALL_OW 273
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_VAR 0 7
71777: PPUSH
71778: LD_INT 2
71780: PPUSH
71781: LD_INT 4
71783: PPUSH
71784: CALL_OW 272
71788: PUSH
71789: LD_VAR 0 8
71793: PPUSH
71794: LD_INT 2
71796: PPUSH
71797: LD_INT 4
71799: PPUSH
71800: CALL_OW 273
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_VAR 0 7
71813: PPUSH
71814: LD_INT 3
71816: PPUSH
71817: LD_INT 4
71819: PPUSH
71820: CALL_OW 272
71824: PUSH
71825: LD_VAR 0 8
71829: PPUSH
71830: LD_INT 3
71832: PPUSH
71833: LD_INT 4
71835: PPUSH
71836: CALL_OW 273
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_VAR 0 7
71849: PPUSH
71850: LD_INT 4
71852: PPUSH
71853: LD_INT 4
71855: PPUSH
71856: CALL_OW 272
71860: PUSH
71861: LD_VAR 0 8
71865: PPUSH
71866: LD_INT 4
71868: PPUSH
71869: LD_INT 4
71871: PPUSH
71872: CALL_OW 273
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_VAR 0 7
71885: PPUSH
71886: LD_INT 5
71888: PPUSH
71889: LD_INT 4
71891: PPUSH
71892: CALL_OW 272
71896: PUSH
71897: LD_VAR 0 8
71901: PPUSH
71902: LD_INT 5
71904: PPUSH
71905: LD_INT 4
71907: PPUSH
71908: CALL_OW 273
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: ST_TO_ADDR
// for i = tmp downto 1 do
71925: LD_ADDR_VAR 0 4
71929: PUSH
71930: DOUBLE
71931: LD_VAR 0 6
71935: INC
71936: ST_TO_ADDR
71937: LD_INT 1
71939: PUSH
71940: FOR_DOWNTO
71941: IFFALSE 72042
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71943: LD_VAR 0 6
71947: PUSH
71948: LD_VAR 0 4
71952: ARRAY
71953: PUSH
71954: LD_INT 1
71956: ARRAY
71957: PPUSH
71958: LD_VAR 0 6
71962: PUSH
71963: LD_VAR 0 4
71967: ARRAY
71968: PUSH
71969: LD_INT 2
71971: ARRAY
71972: PPUSH
71973: CALL_OW 488
71977: NOT
71978: PUSH
71979: LD_VAR 0 6
71983: PUSH
71984: LD_VAR 0 4
71988: ARRAY
71989: PUSH
71990: LD_INT 1
71992: ARRAY
71993: PPUSH
71994: LD_VAR 0 6
71998: PUSH
71999: LD_VAR 0 4
72003: ARRAY
72004: PUSH
72005: LD_INT 2
72007: ARRAY
72008: PPUSH
72009: CALL_OW 428
72013: PUSH
72014: LD_INT 0
72016: NONEQUAL
72017: OR
72018: IFFALSE 72040
// tmp := Delete ( tmp , i ) ;
72020: LD_ADDR_VAR 0 6
72024: PUSH
72025: LD_VAR 0 6
72029: PPUSH
72030: LD_VAR 0 4
72034: PPUSH
72035: CALL_OW 3
72039: ST_TO_ADDR
72040: GO 71940
72042: POP
72043: POP
// j := GetClosestHex ( unit , tmp ) ;
72044: LD_ADDR_VAR 0 5
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: LD_VAR 0 6
72058: PPUSH
72059: CALL 71344 0 2
72063: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72064: LD_VAR 0 1
72068: PPUSH
72069: LD_VAR 0 5
72073: PUSH
72074: LD_INT 1
72076: ARRAY
72077: PPUSH
72078: LD_VAR 0 5
72082: PUSH
72083: LD_INT 2
72085: ARRAY
72086: PPUSH
72087: CALL_OW 111
// end ;
72091: LD_VAR 0 3
72095: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72096: LD_INT 0
72098: PPUSH
72099: PPUSH
72100: PPUSH
// uc_side = 0 ;
72101: LD_ADDR_OWVAR 20
72105: PUSH
72106: LD_INT 0
72108: ST_TO_ADDR
// uc_nation = 0 ;
72109: LD_ADDR_OWVAR 21
72113: PUSH
72114: LD_INT 0
72116: ST_TO_ADDR
// InitHc ;
72117: CALL_OW 19
// InitVc ;
72121: CALL_OW 20
// if mastodonts then
72125: LD_VAR 0 6
72129: IFFALSE 72196
// for i = 1 to mastodonts do
72131: LD_ADDR_VAR 0 11
72135: PUSH
72136: DOUBLE
72137: LD_INT 1
72139: DEC
72140: ST_TO_ADDR
72141: LD_VAR 0 6
72145: PUSH
72146: FOR_TO
72147: IFFALSE 72194
// begin vc_chassis := 31 ;
72149: LD_ADDR_OWVAR 37
72153: PUSH
72154: LD_INT 31
72156: ST_TO_ADDR
// vc_control := control_rider ;
72157: LD_ADDR_OWVAR 38
72161: PUSH
72162: LD_INT 4
72164: ST_TO_ADDR
// animal := CreateVehicle ;
72165: LD_ADDR_VAR 0 12
72169: PUSH
72170: CALL_OW 45
72174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72175: LD_VAR 0 12
72179: PPUSH
72180: LD_VAR 0 8
72184: PPUSH
72185: LD_INT 0
72187: PPUSH
72188: CALL 78902 0 3
// end ;
72192: GO 72146
72194: POP
72195: POP
// if horses then
72196: LD_VAR 0 5
72200: IFFALSE 72267
// for i = 1 to horses do
72202: LD_ADDR_VAR 0 11
72206: PUSH
72207: DOUBLE
72208: LD_INT 1
72210: DEC
72211: ST_TO_ADDR
72212: LD_VAR 0 5
72216: PUSH
72217: FOR_TO
72218: IFFALSE 72265
// begin hc_class := 21 ;
72220: LD_ADDR_OWVAR 28
72224: PUSH
72225: LD_INT 21
72227: ST_TO_ADDR
// hc_gallery :=  ;
72228: LD_ADDR_OWVAR 33
72232: PUSH
72233: LD_STRING 
72235: ST_TO_ADDR
// animal := CreateHuman ;
72236: LD_ADDR_VAR 0 12
72240: PUSH
72241: CALL_OW 44
72245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72246: LD_VAR 0 12
72250: PPUSH
72251: LD_VAR 0 8
72255: PPUSH
72256: LD_INT 0
72258: PPUSH
72259: CALL 78902 0 3
// end ;
72263: GO 72217
72265: POP
72266: POP
// if birds then
72267: LD_VAR 0 1
72271: IFFALSE 72338
// for i = 1 to birds do
72273: LD_ADDR_VAR 0 11
72277: PUSH
72278: DOUBLE
72279: LD_INT 1
72281: DEC
72282: ST_TO_ADDR
72283: LD_VAR 0 1
72287: PUSH
72288: FOR_TO
72289: IFFALSE 72336
// begin hc_class = 18 ;
72291: LD_ADDR_OWVAR 28
72295: PUSH
72296: LD_INT 18
72298: ST_TO_ADDR
// hc_gallery =  ;
72299: LD_ADDR_OWVAR 33
72303: PUSH
72304: LD_STRING 
72306: ST_TO_ADDR
// animal := CreateHuman ;
72307: LD_ADDR_VAR 0 12
72311: PUSH
72312: CALL_OW 44
72316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72317: LD_VAR 0 12
72321: PPUSH
72322: LD_VAR 0 8
72326: PPUSH
72327: LD_INT 0
72329: PPUSH
72330: CALL 78902 0 3
// end ;
72334: GO 72288
72336: POP
72337: POP
// if tigers then
72338: LD_VAR 0 2
72342: IFFALSE 72426
// for i = 1 to tigers do
72344: LD_ADDR_VAR 0 11
72348: PUSH
72349: DOUBLE
72350: LD_INT 1
72352: DEC
72353: ST_TO_ADDR
72354: LD_VAR 0 2
72358: PUSH
72359: FOR_TO
72360: IFFALSE 72424
// begin hc_class = class_tiger ;
72362: LD_ADDR_OWVAR 28
72366: PUSH
72367: LD_INT 14
72369: ST_TO_ADDR
// hc_gallery =  ;
72370: LD_ADDR_OWVAR 33
72374: PUSH
72375: LD_STRING 
72377: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72378: LD_ADDR_OWVAR 35
72382: PUSH
72383: LD_INT 7
72385: NEG
72386: PPUSH
72387: LD_INT 7
72389: PPUSH
72390: CALL_OW 12
72394: ST_TO_ADDR
// animal := CreateHuman ;
72395: LD_ADDR_VAR 0 12
72399: PUSH
72400: CALL_OW 44
72404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72405: LD_VAR 0 12
72409: PPUSH
72410: LD_VAR 0 8
72414: PPUSH
72415: LD_INT 0
72417: PPUSH
72418: CALL 78902 0 3
// end ;
72422: GO 72359
72424: POP
72425: POP
// if apemans then
72426: LD_VAR 0 3
72430: IFFALSE 72553
// for i = 1 to apemans do
72432: LD_ADDR_VAR 0 11
72436: PUSH
72437: DOUBLE
72438: LD_INT 1
72440: DEC
72441: ST_TO_ADDR
72442: LD_VAR 0 3
72446: PUSH
72447: FOR_TO
72448: IFFALSE 72551
// begin hc_class = class_apeman ;
72450: LD_ADDR_OWVAR 28
72454: PUSH
72455: LD_INT 12
72457: ST_TO_ADDR
// hc_gallery =  ;
72458: LD_ADDR_OWVAR 33
72462: PUSH
72463: LD_STRING 
72465: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72466: LD_ADDR_OWVAR 35
72470: PUSH
72471: LD_INT 5
72473: NEG
72474: PPUSH
72475: LD_INT 5
72477: PPUSH
72478: CALL_OW 12
72482: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72483: LD_ADDR_OWVAR 31
72487: PUSH
72488: LD_INT 1
72490: PPUSH
72491: LD_INT 3
72493: PPUSH
72494: CALL_OW 12
72498: PUSH
72499: LD_INT 1
72501: PPUSH
72502: LD_INT 3
72504: PPUSH
72505: CALL_OW 12
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: ST_TO_ADDR
// animal := CreateHuman ;
72522: LD_ADDR_VAR 0 12
72526: PUSH
72527: CALL_OW 44
72531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72532: LD_VAR 0 12
72536: PPUSH
72537: LD_VAR 0 8
72541: PPUSH
72542: LD_INT 0
72544: PPUSH
72545: CALL 78902 0 3
// end ;
72549: GO 72447
72551: POP
72552: POP
// if enchidnas then
72553: LD_VAR 0 4
72557: IFFALSE 72624
// for i = 1 to enchidnas do
72559: LD_ADDR_VAR 0 11
72563: PUSH
72564: DOUBLE
72565: LD_INT 1
72567: DEC
72568: ST_TO_ADDR
72569: LD_VAR 0 4
72573: PUSH
72574: FOR_TO
72575: IFFALSE 72622
// begin hc_class = 13 ;
72577: LD_ADDR_OWVAR 28
72581: PUSH
72582: LD_INT 13
72584: ST_TO_ADDR
// hc_gallery =  ;
72585: LD_ADDR_OWVAR 33
72589: PUSH
72590: LD_STRING 
72592: ST_TO_ADDR
// animal := CreateHuman ;
72593: LD_ADDR_VAR 0 12
72597: PUSH
72598: CALL_OW 44
72602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72603: LD_VAR 0 12
72607: PPUSH
72608: LD_VAR 0 8
72612: PPUSH
72613: LD_INT 0
72615: PPUSH
72616: CALL 78902 0 3
// end ;
72620: GO 72574
72622: POP
72623: POP
// if fishes then
72624: LD_VAR 0 7
72628: IFFALSE 72695
// for i = 1 to fishes do
72630: LD_ADDR_VAR 0 11
72634: PUSH
72635: DOUBLE
72636: LD_INT 1
72638: DEC
72639: ST_TO_ADDR
72640: LD_VAR 0 7
72644: PUSH
72645: FOR_TO
72646: IFFALSE 72693
// begin hc_class = 20 ;
72648: LD_ADDR_OWVAR 28
72652: PUSH
72653: LD_INT 20
72655: ST_TO_ADDR
// hc_gallery =  ;
72656: LD_ADDR_OWVAR 33
72660: PUSH
72661: LD_STRING 
72663: ST_TO_ADDR
// animal := CreateHuman ;
72664: LD_ADDR_VAR 0 12
72668: PUSH
72669: CALL_OW 44
72673: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72674: LD_VAR 0 12
72678: PPUSH
72679: LD_VAR 0 9
72683: PPUSH
72684: LD_INT 0
72686: PPUSH
72687: CALL 78902 0 3
// end ;
72691: GO 72645
72693: POP
72694: POP
// end ;
72695: LD_VAR 0 10
72699: RET
// export function WantHeal ( sci , unit ) ; begin
72700: LD_INT 0
72702: PPUSH
// if GetTaskList ( sci ) > 0 then
72703: LD_VAR 0 1
72707: PPUSH
72708: CALL_OW 437
72712: PUSH
72713: LD_INT 0
72715: GREATER
72716: IFFALSE 72786
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72718: LD_VAR 0 1
72722: PPUSH
72723: CALL_OW 437
72727: PUSH
72728: LD_INT 1
72730: ARRAY
72731: PUSH
72732: LD_INT 1
72734: ARRAY
72735: PUSH
72736: LD_STRING l
72738: EQUAL
72739: PUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: CALL_OW 437
72749: PUSH
72750: LD_INT 1
72752: ARRAY
72753: PUSH
72754: LD_INT 4
72756: ARRAY
72757: PUSH
72758: LD_VAR 0 2
72762: EQUAL
72763: AND
72764: IFFALSE 72776
// result := true else
72766: LD_ADDR_VAR 0 3
72770: PUSH
72771: LD_INT 1
72773: ST_TO_ADDR
72774: GO 72784
// result := false ;
72776: LD_ADDR_VAR 0 3
72780: PUSH
72781: LD_INT 0
72783: ST_TO_ADDR
// end else
72784: GO 72794
// result := false ;
72786: LD_ADDR_VAR 0 3
72790: PUSH
72791: LD_INT 0
72793: ST_TO_ADDR
// end ;
72794: LD_VAR 0 3
72798: RET
// export function HealTarget ( sci ) ; begin
72799: LD_INT 0
72801: PPUSH
// if not sci then
72802: LD_VAR 0 1
72806: NOT
72807: IFFALSE 72811
// exit ;
72809: GO 72876
// result := 0 ;
72811: LD_ADDR_VAR 0 2
72815: PUSH
72816: LD_INT 0
72818: ST_TO_ADDR
// if GetTaskList ( sci ) then
72819: LD_VAR 0 1
72823: PPUSH
72824: CALL_OW 437
72828: IFFALSE 72876
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72830: LD_VAR 0 1
72834: PPUSH
72835: CALL_OW 437
72839: PUSH
72840: LD_INT 1
72842: ARRAY
72843: PUSH
72844: LD_INT 1
72846: ARRAY
72847: PUSH
72848: LD_STRING l
72850: EQUAL
72851: IFFALSE 72876
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72853: LD_ADDR_VAR 0 2
72857: PUSH
72858: LD_VAR 0 1
72862: PPUSH
72863: CALL_OW 437
72867: PUSH
72868: LD_INT 1
72870: ARRAY
72871: PUSH
72872: LD_INT 4
72874: ARRAY
72875: ST_TO_ADDR
// end ;
72876: LD_VAR 0 2
72880: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
72881: LD_INT 0
72883: PPUSH
72884: PPUSH
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
72893: PPUSH
72894: PPUSH
72895: PPUSH
72896: PPUSH
72897: PPUSH
72898: PPUSH
72899: PPUSH
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
72912: PPUSH
72913: PPUSH
72914: PPUSH
72915: PPUSH
// if not list then
72916: LD_VAR 0 1
72920: NOT
72921: IFFALSE 72925
// exit ;
72923: GO 77513
// base := list [ 1 ] ;
72925: LD_ADDR_VAR 0 3
72929: PUSH
72930: LD_VAR 0 1
72934: PUSH
72935: LD_INT 1
72937: ARRAY
72938: ST_TO_ADDR
// group := list [ 2 ] ;
72939: LD_ADDR_VAR 0 4
72943: PUSH
72944: LD_VAR 0 1
72948: PUSH
72949: LD_INT 2
72951: ARRAY
72952: ST_TO_ADDR
// path := list [ 3 ] ;
72953: LD_ADDR_VAR 0 5
72957: PUSH
72958: LD_VAR 0 1
72962: PUSH
72963: LD_INT 3
72965: ARRAY
72966: ST_TO_ADDR
// flags := list [ 4 ] ;
72967: LD_ADDR_VAR 0 6
72971: PUSH
72972: LD_VAR 0 1
72976: PUSH
72977: LD_INT 4
72979: ARRAY
72980: ST_TO_ADDR
// mined := [ ] ;
72981: LD_ADDR_VAR 0 27
72985: PUSH
72986: EMPTY
72987: ST_TO_ADDR
// bombed := [ ] ;
72988: LD_ADDR_VAR 0 28
72992: PUSH
72993: EMPTY
72994: ST_TO_ADDR
// healers := [ ] ;
72995: LD_ADDR_VAR 0 31
72999: PUSH
73000: EMPTY
73001: ST_TO_ADDR
// to_heal := [ ] ;
73002: LD_ADDR_VAR 0 30
73006: PUSH
73007: EMPTY
73008: ST_TO_ADDR
// repairs := [ ] ;
73009: LD_ADDR_VAR 0 33
73013: PUSH
73014: EMPTY
73015: ST_TO_ADDR
// to_repair := [ ] ;
73016: LD_ADDR_VAR 0 32
73020: PUSH
73021: EMPTY
73022: ST_TO_ADDR
// if not group or not path then
73023: LD_VAR 0 4
73027: NOT
73028: PUSH
73029: LD_VAR 0 5
73033: NOT
73034: OR
73035: IFFALSE 73039
// exit ;
73037: GO 77513
// if flags then
73039: LD_VAR 0 6
73043: IFFALSE 73187
// begin f_ignore_area := flags [ 1 ] ;
73045: LD_ADDR_VAR 0 17
73049: PUSH
73050: LD_VAR 0 6
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
73059: LD_ADDR_VAR 0 18
73063: PUSH
73064: LD_VAR 0 6
73068: PUSH
73069: LD_INT 2
73071: ARRAY
73072: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
73073: LD_ADDR_VAR 0 19
73077: PUSH
73078: LD_VAR 0 6
73082: PUSH
73083: LD_INT 3
73085: ARRAY
73086: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
73087: LD_ADDR_VAR 0 20
73091: PUSH
73092: LD_VAR 0 6
73096: PUSH
73097: LD_INT 4
73099: ARRAY
73100: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
73101: LD_ADDR_VAR 0 21
73105: PUSH
73106: LD_VAR 0 6
73110: PUSH
73111: LD_INT 5
73113: ARRAY
73114: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
73115: LD_ADDR_VAR 0 22
73119: PUSH
73120: LD_VAR 0 6
73124: PUSH
73125: LD_INT 6
73127: ARRAY
73128: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
73129: LD_ADDR_VAR 0 23
73133: PUSH
73134: LD_VAR 0 6
73138: PUSH
73139: LD_INT 7
73141: ARRAY
73142: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
73143: LD_ADDR_VAR 0 24
73147: PUSH
73148: LD_VAR 0 6
73152: PUSH
73153: LD_INT 8
73155: ARRAY
73156: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
73157: LD_ADDR_VAR 0 25
73161: PUSH
73162: LD_VAR 0 6
73166: PUSH
73167: LD_INT 9
73169: ARRAY
73170: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
73171: LD_ADDR_VAR 0 26
73175: PUSH
73176: LD_VAR 0 6
73180: PUSH
73181: LD_INT 10
73183: ARRAY
73184: ST_TO_ADDR
// end else
73185: GO 73267
// begin f_ignore_area := false ;
73187: LD_ADDR_VAR 0 17
73191: PUSH
73192: LD_INT 0
73194: ST_TO_ADDR
// f_capture := false ;
73195: LD_ADDR_VAR 0 18
73199: PUSH
73200: LD_INT 0
73202: ST_TO_ADDR
// f_ignore_civ := false ;
73203: LD_ADDR_VAR 0 19
73207: PUSH
73208: LD_INT 0
73210: ST_TO_ADDR
// f_murder := false ;
73211: LD_ADDR_VAR 0 20
73215: PUSH
73216: LD_INT 0
73218: ST_TO_ADDR
// f_mines := false ;
73219: LD_ADDR_VAR 0 21
73223: PUSH
73224: LD_INT 0
73226: ST_TO_ADDR
// f_repair := false ;
73227: LD_ADDR_VAR 0 22
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// f_heal := false ;
73235: LD_ADDR_VAR 0 23
73239: PUSH
73240: LD_INT 0
73242: ST_TO_ADDR
// f_spacetime := false ;
73243: LD_ADDR_VAR 0 24
73247: PUSH
73248: LD_INT 0
73250: ST_TO_ADDR
// f_attack_depot := false ;
73251: LD_ADDR_VAR 0 25
73255: PUSH
73256: LD_INT 0
73258: ST_TO_ADDR
// f_crawl := false ;
73259: LD_ADDR_VAR 0 26
73263: PUSH
73264: LD_INT 0
73266: ST_TO_ADDR
// end ; if f_heal then
73267: LD_VAR 0 23
73271: IFFALSE 73298
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
73273: LD_ADDR_VAR 0 31
73277: PUSH
73278: LD_VAR 0 4
73282: PPUSH
73283: LD_INT 25
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PPUSH
73293: CALL_OW 72
73297: ST_TO_ADDR
// if f_repair then
73298: LD_VAR 0 22
73302: IFFALSE 73329
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
73304: LD_ADDR_VAR 0 33
73308: PUSH
73309: LD_VAR 0 4
73313: PPUSH
73314: LD_INT 25
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PPUSH
73324: CALL_OW 72
73328: ST_TO_ADDR
// units_path := [ ] ;
73329: LD_ADDR_VAR 0 16
73333: PUSH
73334: EMPTY
73335: ST_TO_ADDR
// for i = 1 to group do
73336: LD_ADDR_VAR 0 7
73340: PUSH
73341: DOUBLE
73342: LD_INT 1
73344: DEC
73345: ST_TO_ADDR
73346: LD_VAR 0 4
73350: PUSH
73351: FOR_TO
73352: IFFALSE 73381
// units_path := Replace ( units_path , i , path ) ;
73354: LD_ADDR_VAR 0 16
73358: PUSH
73359: LD_VAR 0 16
73363: PPUSH
73364: LD_VAR 0 7
73368: PPUSH
73369: LD_VAR 0 5
73373: PPUSH
73374: CALL_OW 1
73378: ST_TO_ADDR
73379: GO 73351
73381: POP
73382: POP
// repeat for i = group downto 1 do
73383: LD_ADDR_VAR 0 7
73387: PUSH
73388: DOUBLE
73389: LD_VAR 0 4
73393: INC
73394: ST_TO_ADDR
73395: LD_INT 1
73397: PUSH
73398: FOR_DOWNTO
73399: IFFALSE 77495
// begin wait ( 5 ) ;
73401: LD_INT 5
73403: PPUSH
73404: CALL_OW 67
// tmp := [ ] ;
73408: LD_ADDR_VAR 0 14
73412: PUSH
73413: EMPTY
73414: ST_TO_ADDR
// attacking := false ;
73415: LD_ADDR_VAR 0 29
73419: PUSH
73420: LD_INT 0
73422: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
73423: LD_VAR 0 4
73427: PUSH
73428: LD_VAR 0 7
73432: ARRAY
73433: PPUSH
73434: CALL_OW 301
73438: PUSH
73439: LD_VAR 0 4
73443: PUSH
73444: LD_VAR 0 7
73448: ARRAY
73449: NOT
73450: OR
73451: IFFALSE 73560
// begin if GetType ( group [ i ] ) = unit_human then
73453: LD_VAR 0 4
73457: PUSH
73458: LD_VAR 0 7
73462: ARRAY
73463: PPUSH
73464: CALL_OW 247
73468: PUSH
73469: LD_INT 1
73471: EQUAL
73472: IFFALSE 73518
// begin to_heal := to_heal diff group [ i ] ;
73474: LD_ADDR_VAR 0 30
73478: PUSH
73479: LD_VAR 0 30
73483: PUSH
73484: LD_VAR 0 4
73488: PUSH
73489: LD_VAR 0 7
73493: ARRAY
73494: DIFF
73495: ST_TO_ADDR
// healers := healers diff group [ i ] ;
73496: LD_ADDR_VAR 0 31
73500: PUSH
73501: LD_VAR 0 31
73505: PUSH
73506: LD_VAR 0 4
73510: PUSH
73511: LD_VAR 0 7
73515: ARRAY
73516: DIFF
73517: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
73518: LD_ADDR_VAR 0 4
73522: PUSH
73523: LD_VAR 0 4
73527: PPUSH
73528: LD_VAR 0 7
73532: PPUSH
73533: CALL_OW 3
73537: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
73538: LD_ADDR_VAR 0 16
73542: PUSH
73543: LD_VAR 0 16
73547: PPUSH
73548: LD_VAR 0 7
73552: PPUSH
73553: CALL_OW 3
73557: ST_TO_ADDR
// continue ;
73558: GO 73398
// end ; if f_repair then
73560: LD_VAR 0 22
73564: IFFALSE 74053
// begin if GetType ( group [ i ] ) = unit_vehicle then
73566: LD_VAR 0 4
73570: PUSH
73571: LD_VAR 0 7
73575: ARRAY
73576: PPUSH
73577: CALL_OW 247
73581: PUSH
73582: LD_INT 2
73584: EQUAL
73585: IFFALSE 73775
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
73587: LD_VAR 0 4
73591: PUSH
73592: LD_VAR 0 7
73596: ARRAY
73597: PPUSH
73598: CALL_OW 256
73602: PUSH
73603: LD_INT 700
73605: LESS
73606: PUSH
73607: LD_VAR 0 4
73611: PUSH
73612: LD_VAR 0 7
73616: ARRAY
73617: PUSH
73618: LD_VAR 0 32
73622: IN
73623: NOT
73624: AND
73625: IFFALSE 73649
// to_repair := to_repair union group [ i ] ;
73627: LD_ADDR_VAR 0 32
73631: PUSH
73632: LD_VAR 0 32
73636: PUSH
73637: LD_VAR 0 4
73641: PUSH
73642: LD_VAR 0 7
73646: ARRAY
73647: UNION
73648: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
73649: LD_VAR 0 4
73653: PUSH
73654: LD_VAR 0 7
73658: ARRAY
73659: PPUSH
73660: CALL_OW 256
73664: PUSH
73665: LD_INT 1000
73667: EQUAL
73668: PUSH
73669: LD_VAR 0 4
73673: PUSH
73674: LD_VAR 0 7
73678: ARRAY
73679: PUSH
73680: LD_VAR 0 32
73684: IN
73685: AND
73686: IFFALSE 73710
// to_repair := to_repair diff group [ i ] ;
73688: LD_ADDR_VAR 0 32
73692: PUSH
73693: LD_VAR 0 32
73697: PUSH
73698: LD_VAR 0 4
73702: PUSH
73703: LD_VAR 0 7
73707: ARRAY
73708: DIFF
73709: ST_TO_ADDR
// if group [ i ] in to_repair then
73710: LD_VAR 0 4
73714: PUSH
73715: LD_VAR 0 7
73719: ARRAY
73720: PUSH
73721: LD_VAR 0 32
73725: IN
73726: IFFALSE 73773
// begin if not IsInArea ( group [ i ] , f_repair ) then
73728: LD_VAR 0 4
73732: PUSH
73733: LD_VAR 0 7
73737: ARRAY
73738: PPUSH
73739: LD_VAR 0 22
73743: PPUSH
73744: CALL_OW 308
73748: NOT
73749: IFFALSE 73771
// ComMoveToArea ( group [ i ] , f_repair ) ;
73751: LD_VAR 0 4
73755: PUSH
73756: LD_VAR 0 7
73760: ARRAY
73761: PPUSH
73762: LD_VAR 0 22
73766: PPUSH
73767: CALL_OW 113
// continue ;
73771: GO 73398
// end ; end else
73773: GO 74053
// if group [ i ] in repairs then
73775: LD_VAR 0 4
73779: PUSH
73780: LD_VAR 0 7
73784: ARRAY
73785: PUSH
73786: LD_VAR 0 33
73790: IN
73791: IFFALSE 74053
// begin if IsInUnit ( group [ i ] ) then
73793: LD_VAR 0 4
73797: PUSH
73798: LD_VAR 0 7
73802: ARRAY
73803: PPUSH
73804: CALL_OW 310
73808: IFFALSE 73876
// begin z := IsInUnit ( group [ i ] ) ;
73810: LD_ADDR_VAR 0 13
73814: PUSH
73815: LD_VAR 0 4
73819: PUSH
73820: LD_VAR 0 7
73824: ARRAY
73825: PPUSH
73826: CALL_OW 310
73830: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
73831: LD_VAR 0 13
73835: PUSH
73836: LD_VAR 0 32
73840: IN
73841: PUSH
73842: LD_VAR 0 13
73846: PPUSH
73847: LD_VAR 0 22
73851: PPUSH
73852: CALL_OW 308
73856: AND
73857: IFFALSE 73874
// ComExitVehicle ( group [ i ] ) ;
73859: LD_VAR 0 4
73863: PUSH
73864: LD_VAR 0 7
73868: ARRAY
73869: PPUSH
73870: CALL_OW 121
// end else
73874: GO 74053
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
73876: LD_ADDR_VAR 0 13
73880: PUSH
73881: LD_VAR 0 4
73885: PPUSH
73886: LD_INT 95
73888: PUSH
73889: LD_VAR 0 22
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 58
73900: PUSH
73901: EMPTY
73902: LIST
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PPUSH
73908: CALL_OW 72
73912: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
73913: LD_VAR 0 4
73917: PUSH
73918: LD_VAR 0 7
73922: ARRAY
73923: PPUSH
73924: CALL_OW 314
73928: NOT
73929: IFFALSE 74051
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
73931: LD_ADDR_VAR 0 10
73935: PUSH
73936: LD_VAR 0 13
73940: PPUSH
73941: LD_VAR 0 4
73945: PUSH
73946: LD_VAR 0 7
73950: ARRAY
73951: PPUSH
73952: CALL_OW 74
73956: ST_TO_ADDR
// if not x then
73957: LD_VAR 0 10
73961: NOT
73962: IFFALSE 73966
// continue ;
73964: GO 73398
// if GetLives ( x ) < 1000 then
73966: LD_VAR 0 10
73970: PPUSH
73971: CALL_OW 256
73975: PUSH
73976: LD_INT 1000
73978: LESS
73979: IFFALSE 74003
// ComRepairVehicle ( group [ i ] , x ) else
73981: LD_VAR 0 4
73985: PUSH
73986: LD_VAR 0 7
73990: ARRAY
73991: PPUSH
73992: LD_VAR 0 10
73996: PPUSH
73997: CALL_OW 129
74001: GO 74051
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
74003: LD_VAR 0 23
74007: PUSH
74008: LD_VAR 0 4
74012: PUSH
74013: LD_VAR 0 7
74017: ARRAY
74018: PPUSH
74019: CALL_OW 256
74023: PUSH
74024: LD_INT 1000
74026: LESS
74027: AND
74028: NOT
74029: IFFALSE 74051
// ComEnterUnit ( group [ i ] , x ) ;
74031: LD_VAR 0 4
74035: PUSH
74036: LD_VAR 0 7
74040: ARRAY
74041: PPUSH
74042: LD_VAR 0 10
74046: PPUSH
74047: CALL_OW 120
// end ; continue ;
74051: GO 73398
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
74053: LD_VAR 0 23
74057: PUSH
74058: LD_VAR 0 4
74062: PUSH
74063: LD_VAR 0 7
74067: ARRAY
74068: PPUSH
74069: CALL_OW 247
74073: PUSH
74074: LD_INT 1
74076: EQUAL
74077: AND
74078: IFFALSE 74556
// begin if group [ i ] in healers then
74080: LD_VAR 0 4
74084: PUSH
74085: LD_VAR 0 7
74089: ARRAY
74090: PUSH
74091: LD_VAR 0 31
74095: IN
74096: IFFALSE 74369
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
74098: LD_VAR 0 4
74102: PUSH
74103: LD_VAR 0 7
74107: ARRAY
74108: PPUSH
74109: LD_VAR 0 23
74113: PPUSH
74114: CALL_OW 308
74118: NOT
74119: PUSH
74120: LD_VAR 0 4
74124: PUSH
74125: LD_VAR 0 7
74129: ARRAY
74130: PPUSH
74131: CALL_OW 314
74135: NOT
74136: AND
74137: IFFALSE 74161
// ComMoveToArea ( group [ i ] , f_heal ) else
74139: LD_VAR 0 4
74143: PUSH
74144: LD_VAR 0 7
74148: ARRAY
74149: PPUSH
74150: LD_VAR 0 23
74154: PPUSH
74155: CALL_OW 113
74159: GO 74367
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
74161: LD_VAR 0 4
74165: PUSH
74166: LD_VAR 0 7
74170: ARRAY
74171: PPUSH
74172: CALL 72799 0 1
74176: PPUSH
74177: CALL_OW 256
74181: PUSH
74182: LD_INT 1000
74184: EQUAL
74185: IFFALSE 74204
// ComStop ( group [ i ] ) else
74187: LD_VAR 0 4
74191: PUSH
74192: LD_VAR 0 7
74196: ARRAY
74197: PPUSH
74198: CALL_OW 141
74202: GO 74367
// if not HasTask ( group [ i ] ) and to_heal then
74204: LD_VAR 0 4
74208: PUSH
74209: LD_VAR 0 7
74213: ARRAY
74214: PPUSH
74215: CALL_OW 314
74219: NOT
74220: PUSH
74221: LD_VAR 0 30
74225: AND
74226: IFFALSE 74367
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
74228: LD_ADDR_VAR 0 13
74232: PUSH
74233: LD_VAR 0 30
74237: PPUSH
74238: LD_INT 3
74240: PUSH
74241: LD_INT 54
74243: PUSH
74244: EMPTY
74245: LIST
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PPUSH
74251: CALL_OW 72
74255: PPUSH
74256: LD_VAR 0 4
74260: PUSH
74261: LD_VAR 0 7
74265: ARRAY
74266: PPUSH
74267: CALL_OW 74
74271: ST_TO_ADDR
// if z then
74272: LD_VAR 0 13
74276: IFFALSE 74367
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
74278: LD_INT 91
74280: PUSH
74281: LD_VAR 0 13
74285: PUSH
74286: LD_INT 10
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 81
74296: PUSH
74297: LD_VAR 0 13
74301: PPUSH
74302: CALL_OW 255
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PPUSH
74315: CALL_OW 69
74319: PUSH
74320: LD_INT 0
74322: EQUAL
74323: IFFALSE 74347
// ComHeal ( group [ i ] , z ) else
74325: LD_VAR 0 4
74329: PUSH
74330: LD_VAR 0 7
74334: ARRAY
74335: PPUSH
74336: LD_VAR 0 13
74340: PPUSH
74341: CALL_OW 128
74345: GO 74367
// ComMoveToArea ( group [ i ] , f_heal ) ;
74347: LD_VAR 0 4
74351: PUSH
74352: LD_VAR 0 7
74356: ARRAY
74357: PPUSH
74358: LD_VAR 0 23
74362: PPUSH
74363: CALL_OW 113
// end ; continue ;
74367: GO 73398
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
74369: LD_VAR 0 4
74373: PUSH
74374: LD_VAR 0 7
74378: ARRAY
74379: PPUSH
74380: CALL_OW 256
74384: PUSH
74385: LD_INT 700
74387: LESS
74388: PUSH
74389: LD_VAR 0 4
74393: PUSH
74394: LD_VAR 0 7
74398: ARRAY
74399: PUSH
74400: LD_VAR 0 30
74404: IN
74405: NOT
74406: AND
74407: IFFALSE 74431
// to_heal := to_heal union group [ i ] ;
74409: LD_ADDR_VAR 0 30
74413: PUSH
74414: LD_VAR 0 30
74418: PUSH
74419: LD_VAR 0 4
74423: PUSH
74424: LD_VAR 0 7
74428: ARRAY
74429: UNION
74430: ST_TO_ADDR
// if group [ i ] in to_heal then
74431: LD_VAR 0 4
74435: PUSH
74436: LD_VAR 0 7
74440: ARRAY
74441: PUSH
74442: LD_VAR 0 30
74446: IN
74447: IFFALSE 74556
// begin if GetLives ( group [ i ] ) = 1000 then
74449: LD_VAR 0 4
74453: PUSH
74454: LD_VAR 0 7
74458: ARRAY
74459: PPUSH
74460: CALL_OW 256
74464: PUSH
74465: LD_INT 1000
74467: EQUAL
74468: IFFALSE 74494
// to_heal := to_heal diff group [ i ] else
74470: LD_ADDR_VAR 0 30
74474: PUSH
74475: LD_VAR 0 30
74479: PUSH
74480: LD_VAR 0 4
74484: PUSH
74485: LD_VAR 0 7
74489: ARRAY
74490: DIFF
74491: ST_TO_ADDR
74492: GO 74556
// begin if not IsInArea ( group [ i ] , to_heal ) then
74494: LD_VAR 0 4
74498: PUSH
74499: LD_VAR 0 7
74503: ARRAY
74504: PPUSH
74505: LD_VAR 0 30
74509: PPUSH
74510: CALL_OW 308
74514: NOT
74515: IFFALSE 74539
// ComMoveToArea ( group [ i ] , f_heal ) else
74517: LD_VAR 0 4
74521: PUSH
74522: LD_VAR 0 7
74526: ARRAY
74527: PPUSH
74528: LD_VAR 0 23
74532: PPUSH
74533: CALL_OW 113
74537: GO 74554
// ComHold ( group [ i ] ) ;
74539: LD_VAR 0 4
74543: PUSH
74544: LD_VAR 0 7
74548: ARRAY
74549: PPUSH
74550: CALL_OW 140
// continue ;
74554: GO 73398
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
74556: LD_VAR 0 4
74560: PUSH
74561: LD_VAR 0 7
74565: ARRAY
74566: PPUSH
74567: LD_INT 10
74569: PPUSH
74570: CALL 71196 0 2
74574: NOT
74575: PUSH
74576: LD_VAR 0 16
74580: PUSH
74581: LD_VAR 0 7
74585: ARRAY
74586: PUSH
74587: EMPTY
74588: EQUAL
74589: NOT
74590: AND
74591: IFFALSE 74857
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
74593: LD_VAR 0 4
74597: PUSH
74598: LD_VAR 0 7
74602: ARRAY
74603: PPUSH
74604: CALL_OW 262
74608: PUSH
74609: LD_INT 1
74611: PUSH
74612: LD_INT 2
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: IN
74619: IFFALSE 74660
// if GetFuel ( group [ i ] ) < 10 then
74621: LD_VAR 0 4
74625: PUSH
74626: LD_VAR 0 7
74630: ARRAY
74631: PPUSH
74632: CALL_OW 261
74636: PUSH
74637: LD_INT 10
74639: LESS
74640: IFFALSE 74660
// SetFuel ( group [ i ] , 12 ) ;
74642: LD_VAR 0 4
74646: PUSH
74647: LD_VAR 0 7
74651: ARRAY
74652: PPUSH
74653: LD_INT 12
74655: PPUSH
74656: CALL_OW 240
// if units_path [ i ] then
74660: LD_VAR 0 16
74664: PUSH
74665: LD_VAR 0 7
74669: ARRAY
74670: IFFALSE 74855
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
74672: LD_VAR 0 4
74676: PUSH
74677: LD_VAR 0 7
74681: ARRAY
74682: PPUSH
74683: LD_VAR 0 16
74687: PUSH
74688: LD_VAR 0 7
74692: ARRAY
74693: PUSH
74694: LD_INT 1
74696: ARRAY
74697: PUSH
74698: LD_INT 1
74700: ARRAY
74701: PPUSH
74702: LD_VAR 0 16
74706: PUSH
74707: LD_VAR 0 7
74711: ARRAY
74712: PUSH
74713: LD_INT 1
74715: ARRAY
74716: PUSH
74717: LD_INT 2
74719: ARRAY
74720: PPUSH
74721: CALL_OW 297
74725: PUSH
74726: LD_INT 6
74728: GREATER
74729: IFFALSE 74804
// begin if not HasTask ( group [ i ] ) then
74731: LD_VAR 0 4
74735: PUSH
74736: LD_VAR 0 7
74740: ARRAY
74741: PPUSH
74742: CALL_OW 314
74746: NOT
74747: IFFALSE 74802
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
74749: LD_VAR 0 4
74753: PUSH
74754: LD_VAR 0 7
74758: ARRAY
74759: PPUSH
74760: LD_VAR 0 16
74764: PUSH
74765: LD_VAR 0 7
74769: ARRAY
74770: PUSH
74771: LD_INT 1
74773: ARRAY
74774: PUSH
74775: LD_INT 1
74777: ARRAY
74778: PPUSH
74779: LD_VAR 0 16
74783: PUSH
74784: LD_VAR 0 7
74788: ARRAY
74789: PUSH
74790: LD_INT 1
74792: ARRAY
74793: PUSH
74794: LD_INT 2
74796: ARRAY
74797: PPUSH
74798: CALL_OW 114
// end else
74802: GO 74855
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
74804: LD_ADDR_VAR 0 15
74808: PUSH
74809: LD_VAR 0 16
74813: PUSH
74814: LD_VAR 0 7
74818: ARRAY
74819: PPUSH
74820: LD_INT 1
74822: PPUSH
74823: CALL_OW 3
74827: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
74828: LD_ADDR_VAR 0 16
74832: PUSH
74833: LD_VAR 0 16
74837: PPUSH
74838: LD_VAR 0 7
74842: PPUSH
74843: LD_VAR 0 15
74847: PPUSH
74848: CALL_OW 1
74852: ST_TO_ADDR
// continue ;
74853: GO 73398
// end ; end ; end else
74855: GO 77493
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
74857: LD_ADDR_VAR 0 14
74861: PUSH
74862: LD_INT 81
74864: PUSH
74865: LD_VAR 0 4
74869: PUSH
74870: LD_VAR 0 7
74874: ARRAY
74875: PPUSH
74876: CALL_OW 255
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PPUSH
74885: CALL_OW 69
74889: ST_TO_ADDR
// if not tmp then
74890: LD_VAR 0 14
74894: NOT
74895: IFFALSE 74899
// continue ;
74897: GO 73398
// if f_ignore_area then
74899: LD_VAR 0 17
74903: IFFALSE 74991
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
74905: LD_ADDR_VAR 0 15
74909: PUSH
74910: LD_VAR 0 14
74914: PPUSH
74915: LD_INT 3
74917: PUSH
74918: LD_INT 92
74920: PUSH
74921: LD_VAR 0 17
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PUSH
74930: LD_VAR 0 17
74934: PUSH
74935: LD_INT 2
74937: ARRAY
74938: PUSH
74939: LD_VAR 0 17
74943: PUSH
74944: LD_INT 3
74946: ARRAY
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PPUSH
74958: CALL_OW 72
74962: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
74963: LD_VAR 0 14
74967: PUSH
74968: LD_VAR 0 15
74972: DIFF
74973: IFFALSE 74991
// tmp := tmp diff tmp2 ;
74975: LD_ADDR_VAR 0 14
74979: PUSH
74980: LD_VAR 0 14
74984: PUSH
74985: LD_VAR 0 15
74989: DIFF
74990: ST_TO_ADDR
// end ; if not f_murder then
74991: LD_VAR 0 20
74995: NOT
74996: IFFALSE 75054
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
74998: LD_ADDR_VAR 0 15
75002: PUSH
75003: LD_VAR 0 14
75007: PPUSH
75008: LD_INT 3
75010: PUSH
75011: LD_INT 50
75013: PUSH
75014: EMPTY
75015: LIST
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PPUSH
75021: CALL_OW 72
75025: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
75026: LD_VAR 0 14
75030: PUSH
75031: LD_VAR 0 15
75035: DIFF
75036: IFFALSE 75054
// tmp := tmp diff tmp2 ;
75038: LD_ADDR_VAR 0 14
75042: PUSH
75043: LD_VAR 0 14
75047: PUSH
75048: LD_VAR 0 15
75052: DIFF
75053: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
75054: LD_ADDR_VAR 0 14
75058: PUSH
75059: LD_VAR 0 4
75063: PUSH
75064: LD_VAR 0 7
75068: ARRAY
75069: PPUSH
75070: LD_VAR 0 14
75074: PPUSH
75075: LD_INT 1
75077: PPUSH
75078: LD_INT 1
75080: PPUSH
75081: CALL 45078 0 4
75085: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
75086: LD_VAR 0 4
75090: PUSH
75091: LD_VAR 0 7
75095: ARRAY
75096: PPUSH
75097: CALL_OW 257
75101: PUSH
75102: LD_INT 1
75104: EQUAL
75105: IFFALSE 75553
// begin if WantPlant ( group [ i ] ) then
75107: LD_VAR 0 4
75111: PUSH
75112: LD_VAR 0 7
75116: ARRAY
75117: PPUSH
75118: CALL 44546 0 1
75122: IFFALSE 75126
// continue ;
75124: GO 73398
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
75126: LD_VAR 0 18
75130: PUSH
75131: LD_VAR 0 4
75135: PUSH
75136: LD_VAR 0 7
75140: ARRAY
75141: PPUSH
75142: CALL_OW 310
75146: NOT
75147: AND
75148: PUSH
75149: LD_VAR 0 14
75153: PUSH
75154: LD_INT 1
75156: ARRAY
75157: PUSH
75158: LD_VAR 0 14
75162: PPUSH
75163: LD_INT 21
75165: PUSH
75166: LD_INT 2
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: LD_INT 58
75175: PUSH
75176: EMPTY
75177: LIST
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PPUSH
75183: CALL_OW 72
75187: IN
75188: AND
75189: IFFALSE 75225
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
75191: LD_VAR 0 4
75195: PUSH
75196: LD_VAR 0 7
75200: ARRAY
75201: PPUSH
75202: LD_VAR 0 14
75206: PUSH
75207: LD_INT 1
75209: ARRAY
75210: PPUSH
75211: CALL_OW 120
// attacking := true ;
75215: LD_ADDR_VAR 0 29
75219: PUSH
75220: LD_INT 1
75222: ST_TO_ADDR
// continue ;
75223: GO 73398
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
75225: LD_VAR 0 26
75229: PUSH
75230: LD_VAR 0 4
75234: PUSH
75235: LD_VAR 0 7
75239: ARRAY
75240: PPUSH
75241: CALL_OW 257
75245: PUSH
75246: LD_INT 1
75248: EQUAL
75249: AND
75250: PUSH
75251: LD_VAR 0 4
75255: PUSH
75256: LD_VAR 0 7
75260: ARRAY
75261: PPUSH
75262: CALL_OW 256
75266: PUSH
75267: LD_INT 800
75269: LESS
75270: AND
75271: PUSH
75272: LD_VAR 0 4
75276: PUSH
75277: LD_VAR 0 7
75281: ARRAY
75282: PPUSH
75283: CALL_OW 318
75287: NOT
75288: AND
75289: IFFALSE 75306
// ComCrawl ( group [ i ] ) ;
75291: LD_VAR 0 4
75295: PUSH
75296: LD_VAR 0 7
75300: ARRAY
75301: PPUSH
75302: CALL_OW 137
// if f_mines then
75306: LD_VAR 0 21
75310: IFFALSE 75553
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
75312: LD_VAR 0 14
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PPUSH
75321: CALL_OW 247
75325: PUSH
75326: LD_INT 3
75328: EQUAL
75329: PUSH
75330: LD_VAR 0 14
75334: PUSH
75335: LD_INT 1
75337: ARRAY
75338: PUSH
75339: LD_VAR 0 27
75343: IN
75344: NOT
75345: AND
75346: IFFALSE 75553
// begin x := GetX ( tmp [ 1 ] ) ;
75348: LD_ADDR_VAR 0 10
75352: PUSH
75353: LD_VAR 0 14
75357: PUSH
75358: LD_INT 1
75360: ARRAY
75361: PPUSH
75362: CALL_OW 250
75366: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
75367: LD_ADDR_VAR 0 11
75371: PUSH
75372: LD_VAR 0 14
75376: PUSH
75377: LD_INT 1
75379: ARRAY
75380: PPUSH
75381: CALL_OW 251
75385: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
75386: LD_ADDR_VAR 0 12
75390: PUSH
75391: LD_VAR 0 4
75395: PUSH
75396: LD_VAR 0 7
75400: ARRAY
75401: PPUSH
75402: CALL 71281 0 1
75406: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
75407: LD_VAR 0 4
75411: PUSH
75412: LD_VAR 0 7
75416: ARRAY
75417: PPUSH
75418: LD_VAR 0 10
75422: PPUSH
75423: LD_VAR 0 11
75427: PPUSH
75428: LD_VAR 0 14
75432: PUSH
75433: LD_INT 1
75435: ARRAY
75436: PPUSH
75437: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
75441: LD_VAR 0 4
75445: PUSH
75446: LD_VAR 0 7
75450: ARRAY
75451: PPUSH
75452: LD_VAR 0 10
75456: PPUSH
75457: LD_VAR 0 12
75461: PPUSH
75462: LD_INT 7
75464: PPUSH
75465: CALL_OW 272
75469: PPUSH
75470: LD_VAR 0 11
75474: PPUSH
75475: LD_VAR 0 12
75479: PPUSH
75480: LD_INT 7
75482: PPUSH
75483: CALL_OW 273
75487: PPUSH
75488: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
75492: LD_VAR 0 4
75496: PUSH
75497: LD_VAR 0 7
75501: ARRAY
75502: PPUSH
75503: LD_INT 71
75505: PPUSH
75506: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
75510: LD_ADDR_VAR 0 27
75514: PUSH
75515: LD_VAR 0 27
75519: PPUSH
75520: LD_VAR 0 27
75524: PUSH
75525: LD_INT 1
75527: PLUS
75528: PPUSH
75529: LD_VAR 0 14
75533: PUSH
75534: LD_INT 1
75536: ARRAY
75537: PPUSH
75538: CALL_OW 1
75542: ST_TO_ADDR
// attacking := true ;
75543: LD_ADDR_VAR 0 29
75547: PUSH
75548: LD_INT 1
75550: ST_TO_ADDR
// continue ;
75551: GO 73398
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
75553: LD_VAR 0 4
75557: PUSH
75558: LD_VAR 0 7
75562: ARRAY
75563: PPUSH
75564: CALL_OW 257
75568: PUSH
75569: LD_INT 17
75571: EQUAL
75572: PUSH
75573: LD_VAR 0 4
75577: PUSH
75578: LD_VAR 0 7
75582: ARRAY
75583: PPUSH
75584: CALL_OW 110
75588: PUSH
75589: LD_INT 71
75591: EQUAL
75592: NOT
75593: AND
75594: IFFALSE 75740
// begin attacking := false ;
75596: LD_ADDR_VAR 0 29
75600: PUSH
75601: LD_INT 0
75603: ST_TO_ADDR
// k := 5 ;
75604: LD_ADDR_VAR 0 9
75608: PUSH
75609: LD_INT 5
75611: ST_TO_ADDR
// if tmp < k then
75612: LD_VAR 0 14
75616: PUSH
75617: LD_VAR 0 9
75621: LESS
75622: IFFALSE 75634
// k := tmp ;
75624: LD_ADDR_VAR 0 9
75628: PUSH
75629: LD_VAR 0 14
75633: ST_TO_ADDR
// for j = 1 to k do
75634: LD_ADDR_VAR 0 8
75638: PUSH
75639: DOUBLE
75640: LD_INT 1
75642: DEC
75643: ST_TO_ADDR
75644: LD_VAR 0 9
75648: PUSH
75649: FOR_TO
75650: IFFALSE 75738
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
75652: LD_VAR 0 14
75656: PUSH
75657: LD_VAR 0 8
75661: ARRAY
75662: PUSH
75663: LD_VAR 0 14
75667: PPUSH
75668: LD_INT 58
75670: PUSH
75671: EMPTY
75672: LIST
75673: PPUSH
75674: CALL_OW 72
75678: IN
75679: NOT
75680: IFFALSE 75736
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75682: LD_VAR 0 4
75686: PUSH
75687: LD_VAR 0 7
75691: ARRAY
75692: PPUSH
75693: LD_VAR 0 14
75697: PUSH
75698: LD_VAR 0 8
75702: ARRAY
75703: PPUSH
75704: CALL_OW 115
// attacking := true ;
75708: LD_ADDR_VAR 0 29
75712: PUSH
75713: LD_INT 1
75715: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
75716: LD_VAR 0 4
75720: PUSH
75721: LD_VAR 0 7
75725: ARRAY
75726: PPUSH
75727: LD_INT 71
75729: PPUSH
75730: CALL_OW 109
// continue ;
75734: GO 75649
// end ; end ;
75736: GO 75649
75738: POP
75739: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
75740: LD_VAR 0 4
75744: PUSH
75745: LD_VAR 0 7
75749: ARRAY
75750: PPUSH
75751: CALL_OW 257
75755: PUSH
75756: LD_INT 8
75758: EQUAL
75759: PUSH
75760: LD_VAR 0 4
75764: PUSH
75765: LD_VAR 0 7
75769: ARRAY
75770: PPUSH
75771: CALL_OW 264
75775: PUSH
75776: LD_INT 28
75778: PUSH
75779: LD_INT 45
75781: PUSH
75782: LD_INT 7
75784: PUSH
75785: LD_INT 47
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: IN
75794: OR
75795: IFFALSE 76025
// begin attacking := false ;
75797: LD_ADDR_VAR 0 29
75801: PUSH
75802: LD_INT 0
75804: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
75805: LD_VAR 0 14
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PPUSH
75814: CALL_OW 266
75818: PUSH
75819: LD_INT 32
75821: PUSH
75822: LD_INT 31
75824: PUSH
75825: LD_INT 33
75827: PUSH
75828: LD_INT 4
75830: PUSH
75831: LD_INT 5
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: IN
75841: IFFALSE 76025
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
75843: LD_ADDR_VAR 0 9
75847: PUSH
75848: LD_VAR 0 14
75852: PUSH
75853: LD_INT 1
75855: ARRAY
75856: PPUSH
75857: CALL_OW 266
75861: PPUSH
75862: LD_VAR 0 14
75866: PUSH
75867: LD_INT 1
75869: ARRAY
75870: PPUSH
75871: CALL_OW 250
75875: PPUSH
75876: LD_VAR 0 14
75880: PUSH
75881: LD_INT 1
75883: ARRAY
75884: PPUSH
75885: CALL_OW 251
75889: PPUSH
75890: LD_VAR 0 14
75894: PUSH
75895: LD_INT 1
75897: ARRAY
75898: PPUSH
75899: CALL_OW 254
75903: PPUSH
75904: LD_VAR 0 14
75908: PUSH
75909: LD_INT 1
75911: ARRAY
75912: PPUSH
75913: CALL_OW 248
75917: PPUSH
75918: LD_INT 0
75920: PPUSH
75921: CALL 52657 0 6
75925: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
75926: LD_ADDR_VAR 0 8
75930: PUSH
75931: LD_VAR 0 4
75935: PUSH
75936: LD_VAR 0 7
75940: ARRAY
75941: PPUSH
75942: LD_VAR 0 9
75946: PPUSH
75947: CALL 71344 0 2
75951: ST_TO_ADDR
// if j then
75952: LD_VAR 0 8
75956: IFFALSE 76025
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
75958: LD_VAR 0 8
75962: PUSH
75963: LD_INT 1
75965: ARRAY
75966: PPUSH
75967: LD_VAR 0 8
75971: PUSH
75972: LD_INT 2
75974: ARRAY
75975: PPUSH
75976: CALL_OW 488
75980: IFFALSE 76025
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
75982: LD_VAR 0 4
75986: PUSH
75987: LD_VAR 0 7
75991: ARRAY
75992: PPUSH
75993: LD_VAR 0 8
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: PPUSH
76002: LD_VAR 0 8
76006: PUSH
76007: LD_INT 2
76009: ARRAY
76010: PPUSH
76011: CALL_OW 116
// attacking := true ;
76015: LD_ADDR_VAR 0 29
76019: PUSH
76020: LD_INT 1
76022: ST_TO_ADDR
// continue ;
76023: GO 73398
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
76025: LD_VAR 0 4
76029: PUSH
76030: LD_VAR 0 7
76034: ARRAY
76035: PPUSH
76036: CALL_OW 265
76040: PUSH
76041: LD_INT 11
76043: EQUAL
76044: IFFALSE 76322
// begin k := 10 ;
76046: LD_ADDR_VAR 0 9
76050: PUSH
76051: LD_INT 10
76053: ST_TO_ADDR
// x := 0 ;
76054: LD_ADDR_VAR 0 10
76058: PUSH
76059: LD_INT 0
76061: ST_TO_ADDR
// if tmp < k then
76062: LD_VAR 0 14
76066: PUSH
76067: LD_VAR 0 9
76071: LESS
76072: IFFALSE 76084
// k := tmp ;
76074: LD_ADDR_VAR 0 9
76078: PUSH
76079: LD_VAR 0 14
76083: ST_TO_ADDR
// for j = k downto 1 do
76084: LD_ADDR_VAR 0 8
76088: PUSH
76089: DOUBLE
76090: LD_VAR 0 9
76094: INC
76095: ST_TO_ADDR
76096: LD_INT 1
76098: PUSH
76099: FOR_DOWNTO
76100: IFFALSE 76175
// begin if GetType ( tmp [ j ] ) = unit_human then
76102: LD_VAR 0 14
76106: PUSH
76107: LD_VAR 0 8
76111: ARRAY
76112: PPUSH
76113: CALL_OW 247
76117: PUSH
76118: LD_INT 1
76120: EQUAL
76121: IFFALSE 76173
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
76123: LD_VAR 0 4
76127: PUSH
76128: LD_VAR 0 7
76132: ARRAY
76133: PPUSH
76134: LD_VAR 0 14
76138: PUSH
76139: LD_VAR 0 8
76143: ARRAY
76144: PPUSH
76145: CALL 71615 0 2
// x := tmp [ j ] ;
76149: LD_ADDR_VAR 0 10
76153: PUSH
76154: LD_VAR 0 14
76158: PUSH
76159: LD_VAR 0 8
76163: ARRAY
76164: ST_TO_ADDR
// attacking := true ;
76165: LD_ADDR_VAR 0 29
76169: PUSH
76170: LD_INT 1
76172: ST_TO_ADDR
// end ; end ;
76173: GO 76099
76175: POP
76176: POP
// if not x then
76177: LD_VAR 0 10
76181: NOT
76182: IFFALSE 76322
// begin attacking := true ;
76184: LD_ADDR_VAR 0 29
76188: PUSH
76189: LD_INT 1
76191: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
76192: LD_VAR 0 4
76196: PUSH
76197: LD_VAR 0 7
76201: ARRAY
76202: PPUSH
76203: CALL_OW 250
76207: PPUSH
76208: LD_VAR 0 4
76212: PUSH
76213: LD_VAR 0 7
76217: ARRAY
76218: PPUSH
76219: CALL_OW 251
76223: PPUSH
76224: CALL_OW 546
76228: PUSH
76229: LD_INT 2
76231: ARRAY
76232: PUSH
76233: LD_VAR 0 14
76237: PUSH
76238: LD_INT 1
76240: ARRAY
76241: PPUSH
76242: CALL_OW 250
76246: PPUSH
76247: LD_VAR 0 14
76251: PUSH
76252: LD_INT 1
76254: ARRAY
76255: PPUSH
76256: CALL_OW 251
76260: PPUSH
76261: CALL_OW 546
76265: PUSH
76266: LD_INT 2
76268: ARRAY
76269: EQUAL
76270: IFFALSE 76298
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
76272: LD_VAR 0 4
76276: PUSH
76277: LD_VAR 0 7
76281: ARRAY
76282: PPUSH
76283: LD_VAR 0 14
76287: PUSH
76288: LD_INT 1
76290: ARRAY
76291: PPUSH
76292: CALL 71615 0 2
76296: GO 76322
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76298: LD_VAR 0 4
76302: PUSH
76303: LD_VAR 0 7
76307: ARRAY
76308: PPUSH
76309: LD_VAR 0 14
76313: PUSH
76314: LD_INT 1
76316: ARRAY
76317: PPUSH
76318: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
76322: LD_VAR 0 4
76326: PUSH
76327: LD_VAR 0 7
76331: ARRAY
76332: PPUSH
76333: CALL_OW 264
76337: PUSH
76338: LD_INT 29
76340: EQUAL
76341: IFFALSE 76707
// begin if WantsToAttack ( group [ i ] ) in bombed then
76343: LD_VAR 0 4
76347: PUSH
76348: LD_VAR 0 7
76352: ARRAY
76353: PPUSH
76354: CALL_OW 319
76358: PUSH
76359: LD_VAR 0 28
76363: IN
76364: IFFALSE 76368
// continue ;
76366: GO 73398
// k := 8 ;
76368: LD_ADDR_VAR 0 9
76372: PUSH
76373: LD_INT 8
76375: ST_TO_ADDR
// x := 0 ;
76376: LD_ADDR_VAR 0 10
76380: PUSH
76381: LD_INT 0
76383: ST_TO_ADDR
// if tmp < k then
76384: LD_VAR 0 14
76388: PUSH
76389: LD_VAR 0 9
76393: LESS
76394: IFFALSE 76406
// k := tmp ;
76396: LD_ADDR_VAR 0 9
76400: PUSH
76401: LD_VAR 0 14
76405: ST_TO_ADDR
// for j = 1 to k do
76406: LD_ADDR_VAR 0 8
76410: PUSH
76411: DOUBLE
76412: LD_INT 1
76414: DEC
76415: ST_TO_ADDR
76416: LD_VAR 0 9
76420: PUSH
76421: FOR_TO
76422: IFFALSE 76554
// begin if GetType ( tmp [ j ] ) = unit_building then
76424: LD_VAR 0 14
76428: PUSH
76429: LD_VAR 0 8
76433: ARRAY
76434: PPUSH
76435: CALL_OW 247
76439: PUSH
76440: LD_INT 3
76442: EQUAL
76443: IFFALSE 76552
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
76445: LD_VAR 0 14
76449: PUSH
76450: LD_VAR 0 8
76454: ARRAY
76455: PUSH
76456: LD_VAR 0 28
76460: IN
76461: NOT
76462: PUSH
76463: LD_VAR 0 14
76467: PUSH
76468: LD_VAR 0 8
76472: ARRAY
76473: PPUSH
76474: CALL_OW 313
76478: AND
76479: IFFALSE 76552
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
76481: LD_VAR 0 4
76485: PUSH
76486: LD_VAR 0 7
76490: ARRAY
76491: PPUSH
76492: LD_VAR 0 14
76496: PUSH
76497: LD_VAR 0 8
76501: ARRAY
76502: PPUSH
76503: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
76507: LD_ADDR_VAR 0 28
76511: PUSH
76512: LD_VAR 0 28
76516: PPUSH
76517: LD_VAR 0 28
76521: PUSH
76522: LD_INT 1
76524: PLUS
76525: PPUSH
76526: LD_VAR 0 14
76530: PUSH
76531: LD_VAR 0 8
76535: ARRAY
76536: PPUSH
76537: CALL_OW 1
76541: ST_TO_ADDR
// attacking := true ;
76542: LD_ADDR_VAR 0 29
76546: PUSH
76547: LD_INT 1
76549: ST_TO_ADDR
// break ;
76550: GO 76554
// end ; end ;
76552: GO 76421
76554: POP
76555: POP
// if not attacking and f_attack_depot then
76556: LD_VAR 0 29
76560: NOT
76561: PUSH
76562: LD_VAR 0 25
76566: AND
76567: IFFALSE 76662
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76569: LD_ADDR_VAR 0 13
76573: PUSH
76574: LD_VAR 0 14
76578: PPUSH
76579: LD_INT 2
76581: PUSH
76582: LD_INT 30
76584: PUSH
76585: LD_INT 0
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 30
76594: PUSH
76595: LD_INT 1
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: LIST
76606: PPUSH
76607: CALL_OW 72
76611: ST_TO_ADDR
// if z then
76612: LD_VAR 0 13
76616: IFFALSE 76662
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
76618: LD_VAR 0 4
76622: PUSH
76623: LD_VAR 0 7
76627: ARRAY
76628: PPUSH
76629: LD_VAR 0 13
76633: PPUSH
76634: LD_VAR 0 4
76638: PUSH
76639: LD_VAR 0 7
76643: ARRAY
76644: PPUSH
76645: CALL_OW 74
76649: PPUSH
76650: CALL_OW 115
// attacking := true ;
76654: LD_ADDR_VAR 0 29
76658: PUSH
76659: LD_INT 1
76661: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
76662: LD_VAR 0 4
76666: PUSH
76667: LD_VAR 0 7
76671: ARRAY
76672: PPUSH
76673: CALL_OW 256
76677: PUSH
76678: LD_INT 500
76680: LESS
76681: IFFALSE 76707
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76683: LD_VAR 0 4
76687: PUSH
76688: LD_VAR 0 7
76692: ARRAY
76693: PPUSH
76694: LD_VAR 0 14
76698: PUSH
76699: LD_INT 1
76701: ARRAY
76702: PPUSH
76703: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
76707: LD_VAR 0 4
76711: PUSH
76712: LD_VAR 0 7
76716: ARRAY
76717: PPUSH
76718: CALL_OW 264
76722: PUSH
76723: LD_INT 49
76725: EQUAL
76726: IFFALSE 76847
// begin if not HasTask ( group [ i ] ) then
76728: LD_VAR 0 4
76732: PUSH
76733: LD_VAR 0 7
76737: ARRAY
76738: PPUSH
76739: CALL_OW 314
76743: NOT
76744: IFFALSE 76847
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
76746: LD_ADDR_VAR 0 9
76750: PUSH
76751: LD_INT 81
76753: PUSH
76754: LD_VAR 0 4
76758: PUSH
76759: LD_VAR 0 7
76763: ARRAY
76764: PPUSH
76765: CALL_OW 255
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: PPUSH
76774: CALL_OW 69
76778: PPUSH
76779: LD_VAR 0 4
76783: PUSH
76784: LD_VAR 0 7
76788: ARRAY
76789: PPUSH
76790: CALL_OW 74
76794: ST_TO_ADDR
// if k then
76795: LD_VAR 0 9
76799: IFFALSE 76847
// if GetDistUnits ( group [ i ] , k ) > 10 then
76801: LD_VAR 0 4
76805: PUSH
76806: LD_VAR 0 7
76810: ARRAY
76811: PPUSH
76812: LD_VAR 0 9
76816: PPUSH
76817: CALL_OW 296
76821: PUSH
76822: LD_INT 10
76824: GREATER
76825: IFFALSE 76847
// ComMoveUnit ( group [ i ] , k ) ;
76827: LD_VAR 0 4
76831: PUSH
76832: LD_VAR 0 7
76836: ARRAY
76837: PPUSH
76838: LD_VAR 0 9
76842: PPUSH
76843: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76847: LD_VAR 0 4
76851: PUSH
76852: LD_VAR 0 7
76856: ARRAY
76857: PPUSH
76858: CALL_OW 256
76862: PUSH
76863: LD_INT 250
76865: LESS
76866: PUSH
76867: LD_VAR 0 4
76871: PUSH
76872: LD_VAR 0 7
76876: ARRAY
76877: PUSH
76878: LD_INT 21
76880: PUSH
76881: LD_INT 2
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 23
76890: PUSH
76891: LD_INT 2
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PPUSH
76902: CALL_OW 69
76906: IN
76907: AND
76908: IFFALSE 77033
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
76910: LD_ADDR_VAR 0 9
76914: PUSH
76915: LD_OWVAR 3
76919: PUSH
76920: LD_VAR 0 4
76924: PUSH
76925: LD_VAR 0 7
76929: ARRAY
76930: DIFF
76931: PPUSH
76932: LD_VAR 0 4
76936: PUSH
76937: LD_VAR 0 7
76941: ARRAY
76942: PPUSH
76943: CALL_OW 74
76947: ST_TO_ADDR
// if not k then
76948: LD_VAR 0 9
76952: NOT
76953: IFFALSE 76957
// continue ;
76955: GO 73398
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
76957: LD_VAR 0 9
76961: PUSH
76962: LD_INT 81
76964: PUSH
76965: LD_VAR 0 4
76969: PUSH
76970: LD_VAR 0 7
76974: ARRAY
76975: PPUSH
76976: CALL_OW 255
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PPUSH
76985: CALL_OW 69
76989: IN
76990: PUSH
76991: LD_VAR 0 9
76995: PPUSH
76996: LD_VAR 0 4
77000: PUSH
77001: LD_VAR 0 7
77005: ARRAY
77006: PPUSH
77007: CALL_OW 296
77011: PUSH
77012: LD_INT 5
77014: LESS
77015: AND
77016: IFFALSE 77033
// ComAutodestruct ( group [ i ] ) ;
77018: LD_VAR 0 4
77022: PUSH
77023: LD_VAR 0 7
77027: ARRAY
77028: PPUSH
77029: CALL 71513 0 1
// end ; if f_attack_depot then
77033: LD_VAR 0 25
77037: IFFALSE 77149
// begin k := 6 ;
77039: LD_ADDR_VAR 0 9
77043: PUSH
77044: LD_INT 6
77046: ST_TO_ADDR
// if tmp < k then
77047: LD_VAR 0 14
77051: PUSH
77052: LD_VAR 0 9
77056: LESS
77057: IFFALSE 77069
// k := tmp ;
77059: LD_ADDR_VAR 0 9
77063: PUSH
77064: LD_VAR 0 14
77068: ST_TO_ADDR
// for j = 1 to k do
77069: LD_ADDR_VAR 0 8
77073: PUSH
77074: DOUBLE
77075: LD_INT 1
77077: DEC
77078: ST_TO_ADDR
77079: LD_VAR 0 9
77083: PUSH
77084: FOR_TO
77085: IFFALSE 77147
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
77087: LD_VAR 0 8
77091: PPUSH
77092: CALL_OW 266
77096: PUSH
77097: LD_INT 0
77099: PUSH
77100: LD_INT 1
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: IN
77107: IFFALSE 77145
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
77109: LD_VAR 0 4
77113: PUSH
77114: LD_VAR 0 7
77118: ARRAY
77119: PPUSH
77120: LD_VAR 0 14
77124: PUSH
77125: LD_VAR 0 8
77129: ARRAY
77130: PPUSH
77131: CALL_OW 115
// attacking := true ;
77135: LD_ADDR_VAR 0 29
77139: PUSH
77140: LD_INT 1
77142: ST_TO_ADDR
// break ;
77143: GO 77147
// end ;
77145: GO 77084
77147: POP
77148: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
77149: LD_VAR 0 4
77153: PUSH
77154: LD_VAR 0 7
77158: ARRAY
77159: PPUSH
77160: CALL_OW 302
77164: PUSH
77165: LD_VAR 0 29
77169: NOT
77170: AND
77171: IFFALSE 77493
// begin if GetTag ( group [ i ] ) = 71 then
77173: LD_VAR 0 4
77177: PUSH
77178: LD_VAR 0 7
77182: ARRAY
77183: PPUSH
77184: CALL_OW 110
77188: PUSH
77189: LD_INT 71
77191: EQUAL
77192: IFFALSE 77233
// begin if HasTask ( group [ i ] ) then
77194: LD_VAR 0 4
77198: PUSH
77199: LD_VAR 0 7
77203: ARRAY
77204: PPUSH
77205: CALL_OW 314
77209: IFFALSE 77215
// continue else
77211: GO 73398
77213: GO 77233
// SetTag ( group [ i ] , 0 ) ;
77215: LD_VAR 0 4
77219: PUSH
77220: LD_VAR 0 7
77224: ARRAY
77225: PPUSH
77226: LD_INT 0
77228: PPUSH
77229: CALL_OW 109
// end ; k := 8 ;
77233: LD_ADDR_VAR 0 9
77237: PUSH
77238: LD_INT 8
77240: ST_TO_ADDR
// x := 0 ;
77241: LD_ADDR_VAR 0 10
77245: PUSH
77246: LD_INT 0
77248: ST_TO_ADDR
// if tmp < k then
77249: LD_VAR 0 14
77253: PUSH
77254: LD_VAR 0 9
77258: LESS
77259: IFFALSE 77271
// k := tmp ;
77261: LD_ADDR_VAR 0 9
77265: PUSH
77266: LD_VAR 0 14
77270: ST_TO_ADDR
// for j = 1 to k do
77271: LD_ADDR_VAR 0 8
77275: PUSH
77276: DOUBLE
77277: LD_INT 1
77279: DEC
77280: ST_TO_ADDR
77281: LD_VAR 0 9
77285: PUSH
77286: FOR_TO
77287: IFFALSE 77385
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
77289: LD_VAR 0 14
77293: PUSH
77294: LD_VAR 0 8
77298: ARRAY
77299: PPUSH
77300: CALL_OW 247
77304: PUSH
77305: LD_INT 1
77307: EQUAL
77308: PUSH
77309: LD_VAR 0 14
77313: PUSH
77314: LD_VAR 0 8
77318: ARRAY
77319: PPUSH
77320: CALL_OW 256
77324: PUSH
77325: LD_INT 250
77327: LESS
77328: PUSH
77329: LD_VAR 0 20
77333: AND
77334: PUSH
77335: LD_VAR 0 20
77339: NOT
77340: PUSH
77341: LD_VAR 0 14
77345: PUSH
77346: LD_VAR 0 8
77350: ARRAY
77351: PPUSH
77352: CALL_OW 256
77356: PUSH
77357: LD_INT 250
77359: GREATEREQUAL
77360: AND
77361: OR
77362: AND
77363: IFFALSE 77383
// begin x := tmp [ j ] ;
77365: LD_ADDR_VAR 0 10
77369: PUSH
77370: LD_VAR 0 14
77374: PUSH
77375: LD_VAR 0 8
77379: ARRAY
77380: ST_TO_ADDR
// break ;
77381: GO 77385
// end ;
77383: GO 77286
77385: POP
77386: POP
// if x then
77387: LD_VAR 0 10
77391: IFFALSE 77415
// ComAttackUnit ( group [ i ] , x ) else
77393: LD_VAR 0 4
77397: PUSH
77398: LD_VAR 0 7
77402: ARRAY
77403: PPUSH
77404: LD_VAR 0 10
77408: PPUSH
77409: CALL_OW 115
77413: GO 77439
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
77415: LD_VAR 0 4
77419: PUSH
77420: LD_VAR 0 7
77424: ARRAY
77425: PPUSH
77426: LD_VAR 0 14
77430: PUSH
77431: LD_INT 1
77433: ARRAY
77434: PPUSH
77435: CALL_OW 115
// if not HasTask ( group [ i ] ) then
77439: LD_VAR 0 4
77443: PUSH
77444: LD_VAR 0 7
77448: ARRAY
77449: PPUSH
77450: CALL_OW 314
77454: NOT
77455: IFFALSE 77493
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
77457: LD_VAR 0 4
77461: PUSH
77462: LD_VAR 0 7
77466: ARRAY
77467: PPUSH
77468: LD_VAR 0 14
77472: PPUSH
77473: LD_VAR 0 4
77477: PUSH
77478: LD_VAR 0 7
77482: ARRAY
77483: PPUSH
77484: CALL_OW 74
77488: PPUSH
77489: CALL_OW 115
// end ; end ; end ;
77493: GO 73398
77495: POP
77496: POP
// wait ( 0 0$1 ) ;
77497: LD_INT 35
77499: PPUSH
77500: CALL_OW 67
// until group = [ ] ;
77504: LD_VAR 0 4
77508: PUSH
77509: EMPTY
77510: EQUAL
77511: IFFALSE 73383
// end ;
77513: LD_VAR 0 2
77517: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77518: LD_INT 0
77520: PPUSH
77521: PPUSH
77522: PPUSH
77523: PPUSH
// if not base_units then
77524: LD_VAR 0 1
77528: NOT
77529: IFFALSE 77533
// exit ;
77531: GO 77620
// result := false ;
77533: LD_ADDR_VAR 0 2
77537: PUSH
77538: LD_INT 0
77540: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77541: LD_ADDR_VAR 0 5
77545: PUSH
77546: LD_VAR 0 1
77550: PPUSH
77551: LD_INT 21
77553: PUSH
77554: LD_INT 3
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PPUSH
77561: CALL_OW 72
77565: ST_TO_ADDR
// if not tmp then
77566: LD_VAR 0 5
77570: NOT
77571: IFFALSE 77575
// exit ;
77573: GO 77620
// for i in tmp do
77575: LD_ADDR_VAR 0 3
77579: PUSH
77580: LD_VAR 0 5
77584: PUSH
77585: FOR_IN
77586: IFFALSE 77618
// begin result := EnemyInRange ( i , 22 ) ;
77588: LD_ADDR_VAR 0 2
77592: PUSH
77593: LD_VAR 0 3
77597: PPUSH
77598: LD_INT 22
77600: PPUSH
77601: CALL 71196 0 2
77605: ST_TO_ADDR
// if result then
77606: LD_VAR 0 2
77610: IFFALSE 77616
// exit ;
77612: POP
77613: POP
77614: GO 77620
// end ;
77616: GO 77585
77618: POP
77619: POP
// end ;
77620: LD_VAR 0 2
77624: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77625: LD_INT 0
77627: PPUSH
77628: PPUSH
// if not units then
77629: LD_VAR 0 1
77633: NOT
77634: IFFALSE 77638
// exit ;
77636: GO 77708
// result := [ ] ;
77638: LD_ADDR_VAR 0 3
77642: PUSH
77643: EMPTY
77644: ST_TO_ADDR
// for i in units do
77645: LD_ADDR_VAR 0 4
77649: PUSH
77650: LD_VAR 0 1
77654: PUSH
77655: FOR_IN
77656: IFFALSE 77706
// if GetTag ( i ) = tag then
77658: LD_VAR 0 4
77662: PPUSH
77663: CALL_OW 110
77667: PUSH
77668: LD_VAR 0 2
77672: EQUAL
77673: IFFALSE 77704
// result := Insert ( result , result + 1 , i ) ;
77675: LD_ADDR_VAR 0 3
77679: PUSH
77680: LD_VAR 0 3
77684: PPUSH
77685: LD_VAR 0 3
77689: PUSH
77690: LD_INT 1
77692: PLUS
77693: PPUSH
77694: LD_VAR 0 4
77698: PPUSH
77699: CALL_OW 2
77703: ST_TO_ADDR
77704: GO 77655
77706: POP
77707: POP
// end ;
77708: LD_VAR 0 3
77712: RET
// export function IsDriver ( un ) ; begin
77713: LD_INT 0
77715: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77716: LD_ADDR_VAR 0 2
77720: PUSH
77721: LD_VAR 0 1
77725: PUSH
77726: LD_INT 55
77728: PUSH
77729: EMPTY
77730: LIST
77731: PPUSH
77732: CALL_OW 69
77736: IN
77737: ST_TO_ADDR
// end ;
77738: LD_VAR 0 2
77742: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77743: LD_INT 0
77745: PPUSH
77746: PPUSH
// list := [ ] ;
77747: LD_ADDR_VAR 0 5
77751: PUSH
77752: EMPTY
77753: ST_TO_ADDR
// case d of 0 :
77754: LD_VAR 0 3
77758: PUSH
77759: LD_INT 0
77761: DOUBLE
77762: EQUAL
77763: IFTRUE 77767
77765: GO 77900
77767: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77768: LD_ADDR_VAR 0 5
77772: PUSH
77773: LD_VAR 0 1
77777: PUSH
77778: LD_INT 4
77780: MINUS
77781: PUSH
77782: LD_VAR 0 2
77786: PUSH
77787: LD_INT 4
77789: MINUS
77790: PUSH
77791: LD_INT 2
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: LIST
77798: PUSH
77799: LD_VAR 0 1
77803: PUSH
77804: LD_INT 3
77806: MINUS
77807: PUSH
77808: LD_VAR 0 2
77812: PUSH
77813: LD_INT 1
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: LIST
77820: PUSH
77821: LD_VAR 0 1
77825: PUSH
77826: LD_INT 4
77828: PLUS
77829: PUSH
77830: LD_VAR 0 2
77834: PUSH
77835: LD_INT 4
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: LIST
77842: PUSH
77843: LD_VAR 0 1
77847: PUSH
77848: LD_INT 3
77850: PLUS
77851: PUSH
77852: LD_VAR 0 2
77856: PUSH
77857: LD_INT 3
77859: PLUS
77860: PUSH
77861: LD_INT 5
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: LIST
77868: PUSH
77869: LD_VAR 0 1
77873: PUSH
77874: LD_VAR 0 2
77878: PUSH
77879: LD_INT 4
77881: PLUS
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: LIST
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: ST_TO_ADDR
// end ; 1 :
77898: GO 78598
77900: LD_INT 1
77902: DOUBLE
77903: EQUAL
77904: IFTRUE 77908
77906: GO 78041
77908: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77909: LD_ADDR_VAR 0 5
77913: PUSH
77914: LD_VAR 0 1
77918: PUSH
77919: LD_VAR 0 2
77923: PUSH
77924: LD_INT 4
77926: MINUS
77927: PUSH
77928: LD_INT 3
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: LIST
77935: PUSH
77936: LD_VAR 0 1
77940: PUSH
77941: LD_INT 3
77943: MINUS
77944: PUSH
77945: LD_VAR 0 2
77949: PUSH
77950: LD_INT 3
77952: MINUS
77953: PUSH
77954: LD_INT 2
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: LIST
77961: PUSH
77962: LD_VAR 0 1
77966: PUSH
77967: LD_INT 4
77969: MINUS
77970: PUSH
77971: LD_VAR 0 2
77975: PUSH
77976: LD_INT 1
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: LIST
77983: PUSH
77984: LD_VAR 0 1
77988: PUSH
77989: LD_VAR 0 2
77993: PUSH
77994: LD_INT 3
77996: PLUS
77997: PUSH
77998: LD_INT 0
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: LIST
78005: PUSH
78006: LD_VAR 0 1
78010: PUSH
78011: LD_INT 4
78013: PLUS
78014: PUSH
78015: LD_VAR 0 2
78019: PUSH
78020: LD_INT 4
78022: PLUS
78023: PUSH
78024: LD_INT 5
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: LIST
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: ST_TO_ADDR
// end ; 2 :
78039: GO 78598
78041: LD_INT 2
78043: DOUBLE
78044: EQUAL
78045: IFTRUE 78049
78047: GO 78178
78049: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78050: LD_ADDR_VAR 0 5
78054: PUSH
78055: LD_VAR 0 1
78059: PUSH
78060: LD_VAR 0 2
78064: PUSH
78065: LD_INT 3
78067: MINUS
78068: PUSH
78069: LD_INT 3
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: LIST
78076: PUSH
78077: LD_VAR 0 1
78081: PUSH
78082: LD_INT 4
78084: PLUS
78085: PUSH
78086: LD_VAR 0 2
78090: PUSH
78091: LD_INT 4
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: LIST
78098: PUSH
78099: LD_VAR 0 1
78103: PUSH
78104: LD_VAR 0 2
78108: PUSH
78109: LD_INT 4
78111: PLUS
78112: PUSH
78113: LD_INT 0
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: LIST
78120: PUSH
78121: LD_VAR 0 1
78125: PUSH
78126: LD_INT 3
78128: MINUS
78129: PUSH
78130: LD_VAR 0 2
78134: PUSH
78135: LD_INT 1
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: LIST
78142: PUSH
78143: LD_VAR 0 1
78147: PUSH
78148: LD_INT 4
78150: MINUS
78151: PUSH
78152: LD_VAR 0 2
78156: PUSH
78157: LD_INT 4
78159: MINUS
78160: PUSH
78161: LD_INT 2
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: LIST
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: ST_TO_ADDR
// end ; 3 :
78176: GO 78598
78178: LD_INT 3
78180: DOUBLE
78181: EQUAL
78182: IFTRUE 78186
78184: GO 78319
78186: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78187: LD_ADDR_VAR 0 5
78191: PUSH
78192: LD_VAR 0 1
78196: PUSH
78197: LD_INT 3
78199: PLUS
78200: PUSH
78201: LD_VAR 0 2
78205: PUSH
78206: LD_INT 4
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: LIST
78213: PUSH
78214: LD_VAR 0 1
78218: PUSH
78219: LD_INT 4
78221: PLUS
78222: PUSH
78223: LD_VAR 0 2
78227: PUSH
78228: LD_INT 4
78230: PLUS
78231: PUSH
78232: LD_INT 5
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: LIST
78239: PUSH
78240: LD_VAR 0 1
78244: PUSH
78245: LD_INT 4
78247: MINUS
78248: PUSH
78249: LD_VAR 0 2
78253: PUSH
78254: LD_INT 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: LIST
78261: PUSH
78262: LD_VAR 0 1
78266: PUSH
78267: LD_VAR 0 2
78271: PUSH
78272: LD_INT 4
78274: MINUS
78275: PUSH
78276: LD_INT 3
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: LIST
78283: PUSH
78284: LD_VAR 0 1
78288: PUSH
78289: LD_INT 3
78291: MINUS
78292: PUSH
78293: LD_VAR 0 2
78297: PUSH
78298: LD_INT 3
78300: MINUS
78301: PUSH
78302: LD_INT 2
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: LIST
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: ST_TO_ADDR
// end ; 4 :
78317: GO 78598
78319: LD_INT 4
78321: DOUBLE
78322: EQUAL
78323: IFTRUE 78327
78325: GO 78460
78327: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78328: LD_ADDR_VAR 0 5
78332: PUSH
78333: LD_VAR 0 1
78337: PUSH
78338: LD_VAR 0 2
78342: PUSH
78343: LD_INT 4
78345: PLUS
78346: PUSH
78347: LD_INT 0
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: LIST
78354: PUSH
78355: LD_VAR 0 1
78359: PUSH
78360: LD_INT 3
78362: PLUS
78363: PUSH
78364: LD_VAR 0 2
78368: PUSH
78369: LD_INT 3
78371: PLUS
78372: PUSH
78373: LD_INT 5
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: LIST
78380: PUSH
78381: LD_VAR 0 1
78385: PUSH
78386: LD_INT 4
78388: PLUS
78389: PUSH
78390: LD_VAR 0 2
78394: PUSH
78395: LD_INT 4
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: LIST
78402: PUSH
78403: LD_VAR 0 1
78407: PUSH
78408: LD_VAR 0 2
78412: PUSH
78413: LD_INT 3
78415: MINUS
78416: PUSH
78417: LD_INT 3
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: LIST
78424: PUSH
78425: LD_VAR 0 1
78429: PUSH
78430: LD_INT 4
78432: MINUS
78433: PUSH
78434: LD_VAR 0 2
78438: PUSH
78439: LD_INT 4
78441: MINUS
78442: PUSH
78443: LD_INT 2
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: LIST
78450: PUSH
78451: EMPTY
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: ST_TO_ADDR
// end ; 5 :
78458: GO 78598
78460: LD_INT 5
78462: DOUBLE
78463: EQUAL
78464: IFTRUE 78468
78466: GO 78597
78468: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78469: LD_ADDR_VAR 0 5
78473: PUSH
78474: LD_VAR 0 1
78478: PUSH
78479: LD_INT 4
78481: MINUS
78482: PUSH
78483: LD_VAR 0 2
78487: PUSH
78488: LD_INT 1
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: LIST
78495: PUSH
78496: LD_VAR 0 1
78500: PUSH
78501: LD_VAR 0 2
78505: PUSH
78506: LD_INT 4
78508: MINUS
78509: PUSH
78510: LD_INT 3
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: LIST
78517: PUSH
78518: LD_VAR 0 1
78522: PUSH
78523: LD_INT 4
78525: PLUS
78526: PUSH
78527: LD_VAR 0 2
78531: PUSH
78532: LD_INT 4
78534: PLUS
78535: PUSH
78536: LD_INT 5
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: LIST
78543: PUSH
78544: LD_VAR 0 1
78548: PUSH
78549: LD_INT 3
78551: PLUS
78552: PUSH
78553: LD_VAR 0 2
78557: PUSH
78558: LD_INT 4
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: LIST
78565: PUSH
78566: LD_VAR 0 1
78570: PUSH
78571: LD_VAR 0 2
78575: PUSH
78576: LD_INT 3
78578: PLUS
78579: PUSH
78580: LD_INT 0
78582: PUSH
78583: EMPTY
78584: LIST
78585: LIST
78586: LIST
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: ST_TO_ADDR
// end ; end ;
78595: GO 78598
78597: POP
// result := list ;
78598: LD_ADDR_VAR 0 4
78602: PUSH
78603: LD_VAR 0 5
78607: ST_TO_ADDR
// end ;
78608: LD_VAR 0 4
78612: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78613: LD_INT 0
78615: PPUSH
78616: PPUSH
78617: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78618: LD_VAR 0 1
78622: NOT
78623: PUSH
78624: LD_VAR 0 2
78628: PUSH
78629: LD_INT 1
78631: PUSH
78632: LD_INT 2
78634: PUSH
78635: LD_INT 3
78637: PUSH
78638: LD_INT 4
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: IN
78647: NOT
78648: OR
78649: IFFALSE 78653
// exit ;
78651: GO 78745
// tmp := [ ] ;
78653: LD_ADDR_VAR 0 5
78657: PUSH
78658: EMPTY
78659: ST_TO_ADDR
// for i in units do
78660: LD_ADDR_VAR 0 4
78664: PUSH
78665: LD_VAR 0 1
78669: PUSH
78670: FOR_IN
78671: IFFALSE 78714
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78673: LD_ADDR_VAR 0 5
78677: PUSH
78678: LD_VAR 0 5
78682: PPUSH
78683: LD_VAR 0 5
78687: PUSH
78688: LD_INT 1
78690: PLUS
78691: PPUSH
78692: LD_VAR 0 4
78696: PPUSH
78697: LD_VAR 0 2
78701: PPUSH
78702: CALL_OW 259
78706: PPUSH
78707: CALL_OW 2
78711: ST_TO_ADDR
78712: GO 78670
78714: POP
78715: POP
// if not tmp then
78716: LD_VAR 0 5
78720: NOT
78721: IFFALSE 78725
// exit ;
78723: GO 78745
// result := SortListByListDesc ( units , tmp ) ;
78725: LD_ADDR_VAR 0 3
78729: PUSH
78730: LD_VAR 0 1
78734: PPUSH
78735: LD_VAR 0 5
78739: PPUSH
78740: CALL_OW 77
78744: ST_TO_ADDR
// end ;
78745: LD_VAR 0 3
78749: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78750: LD_INT 0
78752: PPUSH
78753: PPUSH
78754: PPUSH
// x := GetX ( building ) ;
78755: LD_ADDR_VAR 0 4
78759: PUSH
78760: LD_VAR 0 2
78764: PPUSH
78765: CALL_OW 250
78769: ST_TO_ADDR
// y := GetY ( building ) ;
78770: LD_ADDR_VAR 0 5
78774: PUSH
78775: LD_VAR 0 2
78779: PPUSH
78780: CALL_OW 251
78784: ST_TO_ADDR
// if GetTaskList ( unit ) then
78785: LD_VAR 0 1
78789: PPUSH
78790: CALL_OW 437
78794: IFFALSE 78889
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78796: LD_STRING e
78798: PUSH
78799: LD_VAR 0 1
78803: PPUSH
78804: CALL_OW 437
78808: PUSH
78809: LD_INT 1
78811: ARRAY
78812: PUSH
78813: LD_INT 1
78815: ARRAY
78816: EQUAL
78817: PUSH
78818: LD_VAR 0 4
78822: PUSH
78823: LD_VAR 0 1
78827: PPUSH
78828: CALL_OW 437
78832: PUSH
78833: LD_INT 1
78835: ARRAY
78836: PUSH
78837: LD_INT 2
78839: ARRAY
78840: EQUAL
78841: AND
78842: PUSH
78843: LD_VAR 0 5
78847: PUSH
78848: LD_VAR 0 1
78852: PPUSH
78853: CALL_OW 437
78857: PUSH
78858: LD_INT 1
78860: ARRAY
78861: PUSH
78862: LD_INT 3
78864: ARRAY
78865: EQUAL
78866: AND
78867: IFFALSE 78879
// result := true else
78869: LD_ADDR_VAR 0 3
78873: PUSH
78874: LD_INT 1
78876: ST_TO_ADDR
78877: GO 78887
// result := false ;
78879: LD_ADDR_VAR 0 3
78883: PUSH
78884: LD_INT 0
78886: ST_TO_ADDR
// end else
78887: GO 78897
// result := false ;
78889: LD_ADDR_VAR 0 3
78893: PUSH
78894: LD_INT 0
78896: ST_TO_ADDR
// end ;
78897: LD_VAR 0 3
78901: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78902: LD_INT 0
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
// if not unit or not area then
78908: LD_VAR 0 1
78912: NOT
78913: PUSH
78914: LD_VAR 0 2
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79089
// tmp := AreaToList ( area , i ) ;
78924: LD_ADDR_VAR 0 6
78928: PUSH
78929: LD_VAR 0 2
78933: PPUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: CALL_OW 517
78943: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78944: LD_ADDR_VAR 0 5
78948: PUSH
78949: DOUBLE
78950: LD_INT 1
78952: DEC
78953: ST_TO_ADDR
78954: LD_VAR 0 6
78958: PUSH
78959: LD_INT 1
78961: ARRAY
78962: PUSH
78963: FOR_TO
78964: IFFALSE 79079
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78966: LD_ADDR_VAR 0 7
78970: PUSH
78971: LD_VAR 0 6
78975: PUSH
78976: LD_INT 1
78978: ARRAY
78979: PUSH
78980: LD_VAR 0 5
78984: ARRAY
78985: PUSH
78986: LD_VAR 0 6
78990: PUSH
78991: LD_INT 2
78993: ARRAY
78994: PUSH
78995: LD_VAR 0 5
78999: ARRAY
79000: PUSH
79001: EMPTY
79002: LIST
79003: LIST
79004: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
79005: LD_VAR 0 7
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PPUSH
79014: LD_VAR 0 7
79018: PUSH
79019: LD_INT 2
79021: ARRAY
79022: PPUSH
79023: CALL_OW 428
79027: PUSH
79028: LD_INT 0
79030: EQUAL
79031: IFFALSE 79077
// begin result := true ;
79033: LD_ADDR_VAR 0 4
79037: PUSH
79038: LD_INT 1
79040: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79041: LD_VAR 0 1
79045: PPUSH
79046: LD_VAR 0 7
79050: PUSH
79051: LD_INT 1
79053: ARRAY
79054: PPUSH
79055: LD_VAR 0 7
79059: PUSH
79060: LD_INT 2
79062: ARRAY
79063: PPUSH
79064: LD_VAR 0 3
79068: PPUSH
79069: CALL_OW 48
// exit ;
79073: POP
79074: POP
79075: GO 79089
// end ; end ;
79077: GO 78963
79079: POP
79080: POP
// result := false ;
79081: LD_ADDR_VAR 0 4
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// end ;
79089: LD_VAR 0 4
79093: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79094: LD_INT 0
79096: PPUSH
79097: PPUSH
79098: PPUSH
// if not side or side > 8 then
79099: LD_VAR 0 1
79103: NOT
79104: PUSH
79105: LD_VAR 0 1
79109: PUSH
79110: LD_INT 8
79112: GREATER
79113: OR
79114: IFFALSE 79118
// exit ;
79116: GO 79305
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79118: LD_ADDR_VAR 0 4
79122: PUSH
79123: LD_INT 22
79125: PUSH
79126: LD_VAR 0 1
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 21
79137: PUSH
79138: LD_INT 3
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PPUSH
79149: CALL_OW 69
79153: ST_TO_ADDR
// if not tmp then
79154: LD_VAR 0 4
79158: NOT
79159: IFFALSE 79163
// exit ;
79161: GO 79305
// enable_addtolog := true ;
79163: LD_ADDR_OWVAR 81
79167: PUSH
79168: LD_INT 1
79170: ST_TO_ADDR
// AddToLog ( [ ) ;
79171: LD_STRING [
79173: PPUSH
79174: CALL_OW 561
// for i in tmp do
79178: LD_ADDR_VAR 0 3
79182: PUSH
79183: LD_VAR 0 4
79187: PUSH
79188: FOR_IN
79189: IFFALSE 79296
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79191: LD_STRING [
79193: PUSH
79194: LD_VAR 0 3
79198: PPUSH
79199: CALL_OW 266
79203: STR
79204: PUSH
79205: LD_STRING , 
79207: STR
79208: PUSH
79209: LD_VAR 0 3
79213: PPUSH
79214: CALL_OW 250
79218: STR
79219: PUSH
79220: LD_STRING , 
79222: STR
79223: PUSH
79224: LD_VAR 0 3
79228: PPUSH
79229: CALL_OW 251
79233: STR
79234: PUSH
79235: LD_STRING , 
79237: STR
79238: PUSH
79239: LD_VAR 0 3
79243: PPUSH
79244: CALL_OW 254
79248: STR
79249: PUSH
79250: LD_STRING , 
79252: STR
79253: PUSH
79254: LD_VAR 0 3
79258: PPUSH
79259: LD_INT 1
79261: PPUSH
79262: CALL_OW 268
79266: STR
79267: PUSH
79268: LD_STRING , 
79270: STR
79271: PUSH
79272: LD_VAR 0 3
79276: PPUSH
79277: LD_INT 2
79279: PPUSH
79280: CALL_OW 268
79284: STR
79285: PUSH
79286: LD_STRING ],
79288: STR
79289: PPUSH
79290: CALL_OW 561
// end ;
79294: GO 79188
79296: POP
79297: POP
// AddToLog ( ]; ) ;
79298: LD_STRING ];
79300: PPUSH
79301: CALL_OW 561
// end ;
79305: LD_VAR 0 2
79309: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79310: LD_INT 0
79312: PPUSH
79313: PPUSH
79314: PPUSH
79315: PPUSH
79316: PPUSH
// if not area or not rate or not max then
79317: LD_VAR 0 1
79321: NOT
79322: PUSH
79323: LD_VAR 0 2
79327: NOT
79328: OR
79329: PUSH
79330: LD_VAR 0 4
79334: NOT
79335: OR
79336: IFFALSE 79340
// exit ;
79338: GO 79532
// while 1 do
79340: LD_INT 1
79342: IFFALSE 79532
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79344: LD_ADDR_VAR 0 9
79348: PUSH
79349: LD_VAR 0 1
79353: PPUSH
79354: LD_INT 1
79356: PPUSH
79357: CALL_OW 287
79361: PUSH
79362: LD_INT 10
79364: MUL
79365: ST_TO_ADDR
// r := rate / 10 ;
79366: LD_ADDR_VAR 0 7
79370: PUSH
79371: LD_VAR 0 2
79375: PUSH
79376: LD_INT 10
79378: DIVREAL
79379: ST_TO_ADDR
// time := 1 1$00 ;
79380: LD_ADDR_VAR 0 8
79384: PUSH
79385: LD_INT 2100
79387: ST_TO_ADDR
// if amount < min then
79388: LD_VAR 0 9
79392: PUSH
79393: LD_VAR 0 3
79397: LESS
79398: IFFALSE 79416
// r := r * 2 else
79400: LD_ADDR_VAR 0 7
79404: PUSH
79405: LD_VAR 0 7
79409: PUSH
79410: LD_INT 2
79412: MUL
79413: ST_TO_ADDR
79414: GO 79442
// if amount > max then
79416: LD_VAR 0 9
79420: PUSH
79421: LD_VAR 0 4
79425: GREATER
79426: IFFALSE 79442
// r := r / 2 ;
79428: LD_ADDR_VAR 0 7
79432: PUSH
79433: LD_VAR 0 7
79437: PUSH
79438: LD_INT 2
79440: DIVREAL
79441: ST_TO_ADDR
// time := time / r ;
79442: LD_ADDR_VAR 0 8
79446: PUSH
79447: LD_VAR 0 8
79451: PUSH
79452: LD_VAR 0 7
79456: DIVREAL
79457: ST_TO_ADDR
// if time < 0 then
79458: LD_VAR 0 8
79462: PUSH
79463: LD_INT 0
79465: LESS
79466: IFFALSE 79483
// time := time * - 1 ;
79468: LD_ADDR_VAR 0 8
79472: PUSH
79473: LD_VAR 0 8
79477: PUSH
79478: LD_INT 1
79480: NEG
79481: MUL
79482: ST_TO_ADDR
// wait ( time ) ;
79483: LD_VAR 0 8
79487: PPUSH
79488: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79492: LD_INT 35
79494: PPUSH
79495: LD_INT 875
79497: PPUSH
79498: CALL_OW 12
79502: PPUSH
79503: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79507: LD_INT 1
79509: PPUSH
79510: LD_INT 5
79512: PPUSH
79513: CALL_OW 12
79517: PPUSH
79518: LD_VAR 0 1
79522: PPUSH
79523: LD_INT 1
79525: PPUSH
79526: CALL_OW 55
// end ;
79530: GO 79340
// end ;
79532: LD_VAR 0 5
79536: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79537: LD_INT 0
79539: PPUSH
79540: PPUSH
79541: PPUSH
79542: PPUSH
79543: PPUSH
79544: PPUSH
79545: PPUSH
79546: PPUSH
// if not turrets or not factories then
79547: LD_VAR 0 1
79551: NOT
79552: PUSH
79553: LD_VAR 0 2
79557: NOT
79558: OR
79559: IFFALSE 79563
// exit ;
79561: GO 79870
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79563: LD_ADDR_VAR 0 10
79567: PUSH
79568: LD_INT 5
79570: PUSH
79571: LD_INT 6
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: LD_INT 2
79580: PUSH
79581: LD_INT 4
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PUSH
79588: LD_INT 3
79590: PUSH
79591: LD_INT 5
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: LIST
79602: PUSH
79603: LD_INT 24
79605: PUSH
79606: LD_INT 25
79608: PUSH
79609: EMPTY
79610: LIST
79611: LIST
79612: PUSH
79613: LD_INT 23
79615: PUSH
79616: LD_INT 27
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PUSH
79627: LD_INT 42
79629: PUSH
79630: LD_INT 43
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: PUSH
79637: LD_INT 44
79639: PUSH
79640: LD_INT 46
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: PUSH
79647: LD_INT 45
79649: PUSH
79650: LD_INT 47
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: LIST
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: LIST
79666: ST_TO_ADDR
// result := [ ] ;
79667: LD_ADDR_VAR 0 3
79671: PUSH
79672: EMPTY
79673: ST_TO_ADDR
// for i in turrets do
79674: LD_ADDR_VAR 0 4
79678: PUSH
79679: LD_VAR 0 1
79683: PUSH
79684: FOR_IN
79685: IFFALSE 79868
// begin nat := GetNation ( i ) ;
79687: LD_ADDR_VAR 0 7
79691: PUSH
79692: LD_VAR 0 4
79696: PPUSH
79697: CALL_OW 248
79701: ST_TO_ADDR
// weapon := 0 ;
79702: LD_ADDR_VAR 0 8
79706: PUSH
79707: LD_INT 0
79709: ST_TO_ADDR
// if not nat then
79710: LD_VAR 0 7
79714: NOT
79715: IFFALSE 79719
// continue ;
79717: GO 79684
// for j in list [ nat ] do
79719: LD_ADDR_VAR 0 5
79723: PUSH
79724: LD_VAR 0 10
79728: PUSH
79729: LD_VAR 0 7
79733: ARRAY
79734: PUSH
79735: FOR_IN
79736: IFFALSE 79777
// if GetBWeapon ( i ) = j [ 1 ] then
79738: LD_VAR 0 4
79742: PPUSH
79743: CALL_OW 269
79747: PUSH
79748: LD_VAR 0 5
79752: PUSH
79753: LD_INT 1
79755: ARRAY
79756: EQUAL
79757: IFFALSE 79775
// begin weapon := j [ 2 ] ;
79759: LD_ADDR_VAR 0 8
79763: PUSH
79764: LD_VAR 0 5
79768: PUSH
79769: LD_INT 2
79771: ARRAY
79772: ST_TO_ADDR
// break ;
79773: GO 79777
// end ;
79775: GO 79735
79777: POP
79778: POP
// if not weapon then
79779: LD_VAR 0 8
79783: NOT
79784: IFFALSE 79788
// continue ;
79786: GO 79684
// for k in factories do
79788: LD_ADDR_VAR 0 6
79792: PUSH
79793: LD_VAR 0 2
79797: PUSH
79798: FOR_IN
79799: IFFALSE 79864
// begin weapons := AvailableWeaponList ( k ) ;
79801: LD_ADDR_VAR 0 9
79805: PUSH
79806: LD_VAR 0 6
79810: PPUSH
79811: CALL_OW 478
79815: ST_TO_ADDR
// if not weapons then
79816: LD_VAR 0 9
79820: NOT
79821: IFFALSE 79825
// continue ;
79823: GO 79798
// if weapon in weapons then
79825: LD_VAR 0 8
79829: PUSH
79830: LD_VAR 0 9
79834: IN
79835: IFFALSE 79862
// begin result := [ i , weapon ] ;
79837: LD_ADDR_VAR 0 3
79841: PUSH
79842: LD_VAR 0 4
79846: PUSH
79847: LD_VAR 0 8
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: ST_TO_ADDR
// exit ;
79856: POP
79857: POP
79858: POP
79859: POP
79860: GO 79870
// end ; end ;
79862: GO 79798
79864: POP
79865: POP
// end ;
79866: GO 79684
79868: POP
79869: POP
// end ; end_of_file
79870: LD_VAR 0 3
79874: RET
// export RUAggressivenessLevel , RUWeaponsPool ; export RUMinVehCount , RUMaxVehCount , RUMinSolCount , RUMaxSolCount ; export RUMinBazookaCount , RUMaxBazookaCount ; export ThresholdLvl2 , ThresholdLvl3 , ThresholdLvl4 , ThresholdLvl5 ; export function SetAggressivenessLevel ( level ) ; begin
79875: LD_INT 0
79877: PPUSH
// case level of 1 :
79878: LD_VAR 0 1
79882: PUSH
79883: LD_INT 1
79885: DOUBLE
79886: EQUAL
79887: IFTRUE 79891
79889: GO 79969
79891: POP
// begin RUAggressivenessLevel := 1 ;
79892: LD_ADDR_EXP 97
79896: PUSH
79897: LD_INT 1
79899: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79900: LD_ADDR_EXP 98
79904: PUSH
79905: LD_INT 42
79907: PUSH
79908: LD_INT 43
79910: PUSH
79911: LD_INT 44
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: LIST
79918: ST_TO_ADDR
// RUMinVehCount := 3 ;
79919: LD_ADDR_EXP 99
79923: PUSH
79924: LD_INT 3
79926: ST_TO_ADDR
// RUMaxVehCount := 5 ;
79927: LD_ADDR_EXP 100
79931: PUSH
79932: LD_INT 5
79934: ST_TO_ADDR
// RUMinSolCount := 4 ;
79935: LD_ADDR_EXP 101
79939: PUSH
79940: LD_INT 4
79942: ST_TO_ADDR
// RUMaxSolCount := 5 ;
79943: LD_ADDR_EXP 102
79947: PUSH
79948: LD_INT 5
79950: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
79951: LD_ADDR_EXP 103
79955: PUSH
79956: LD_INT 0
79958: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
79959: LD_ADDR_EXP 104
79963: PUSH
79964: LD_INT 0
79966: ST_TO_ADDR
// end ; 2 :
79967: GO 80330
79969: LD_INT 2
79971: DOUBLE
79972: EQUAL
79973: IFTRUE 79977
79975: GO 80055
79977: POP
// begin RUAggressivenessLevel := 2 ;
79978: LD_ADDR_EXP 97
79982: PUSH
79983: LD_INT 2
79985: ST_TO_ADDR
// RUWeaponsPool := [ 42 , 43 , 44 ] ;
79986: LD_ADDR_EXP 98
79990: PUSH
79991: LD_INT 42
79993: PUSH
79994: LD_INT 43
79996: PUSH
79997: LD_INT 44
79999: PUSH
80000: EMPTY
80001: LIST
80002: LIST
80003: LIST
80004: ST_TO_ADDR
// RUMinVehCount := 4 ;
80005: LD_ADDR_EXP 99
80009: PUSH
80010: LD_INT 4
80012: ST_TO_ADDR
// RUMaxVehCount := 5 ;
80013: LD_ADDR_EXP 100
80017: PUSH
80018: LD_INT 5
80020: ST_TO_ADDR
// RUMinSolCount := 5 ;
80021: LD_ADDR_EXP 101
80025: PUSH
80026: LD_INT 5
80028: ST_TO_ADDR
// RUMaxSolCount := 6 ;
80029: LD_ADDR_EXP 102
80033: PUSH
80034: LD_INT 6
80036: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
80037: LD_ADDR_EXP 103
80041: PUSH
80042: LD_INT 0
80044: ST_TO_ADDR
// RUMaxBazookaCount := 0 ;
80045: LD_ADDR_EXP 104
80049: PUSH
80050: LD_INT 0
80052: ST_TO_ADDR
// end ; 3 :
80053: GO 80330
80055: LD_INT 3
80057: DOUBLE
80058: EQUAL
80059: IFTRUE 80063
80061: GO 80141
80063: POP
// begin RUAggressivenessLevel := 3 ;
80064: LD_ADDR_EXP 97
80068: PUSH
80069: LD_INT 3
80071: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 76 ] ;
80072: LD_ADDR_EXP 98
80076: PUSH
80077: LD_INT 43
80079: PUSH
80080: LD_INT 44
80082: PUSH
80083: LD_INT 76
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: LIST
80090: ST_TO_ADDR
// RUMinVehCount := 4 ;
80091: LD_ADDR_EXP 99
80095: PUSH
80096: LD_INT 4
80098: ST_TO_ADDR
// RUMaxVehCount := 6 ;
80099: LD_ADDR_EXP 100
80103: PUSH
80104: LD_INT 6
80106: ST_TO_ADDR
// RUMinSolCount := 4 ;
80107: LD_ADDR_EXP 101
80111: PUSH
80112: LD_INT 4
80114: ST_TO_ADDR
// RUMaxSolCount := 5 ;
80115: LD_ADDR_EXP 102
80119: PUSH
80120: LD_INT 5
80122: ST_TO_ADDR
// RUMinBazookaCount := 0 ;
80123: LD_ADDR_EXP 103
80127: PUSH
80128: LD_INT 0
80130: ST_TO_ADDR
// RUMaxBazookaCount := 1 ;
80131: LD_ADDR_EXP 104
80135: PUSH
80136: LD_INT 1
80138: ST_TO_ADDR
// end ; 4 :
80139: GO 80330
80141: LD_INT 4
80143: DOUBLE
80144: EQUAL
80145: IFTRUE 80149
80147: GO 80231
80149: POP
// begin RUAggressivenessLevel := 4 ;
80150: LD_ADDR_EXP 97
80154: PUSH
80155: LD_INT 4
80157: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 76 ] ;
80158: LD_ADDR_EXP 98
80162: PUSH
80163: LD_INT 43
80165: PUSH
80166: LD_INT 44
80168: PUSH
80169: LD_INT 45
80171: PUSH
80172: LD_INT 76
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: ST_TO_ADDR
// RUMinVehCount := 3 ;
80181: LD_ADDR_EXP 99
80185: PUSH
80186: LD_INT 3
80188: ST_TO_ADDR
// RUMaxVehCount := 5 ;
80189: LD_ADDR_EXP 100
80193: PUSH
80194: LD_INT 5
80196: ST_TO_ADDR
// RUMinSolCount := 4 ;
80197: LD_ADDR_EXP 101
80201: PUSH
80202: LD_INT 4
80204: ST_TO_ADDR
// RUMaxSolCount := 5 ;
80205: LD_ADDR_EXP 102
80209: PUSH
80210: LD_INT 5
80212: ST_TO_ADDR
// RUMinBazookaCount := 1 ;
80213: LD_ADDR_EXP 103
80217: PUSH
80218: LD_INT 1
80220: ST_TO_ADDR
// RUMaxBazookaCount := 2 ;
80221: LD_ADDR_EXP 104
80225: PUSH
80226: LD_INT 2
80228: ST_TO_ADDR
// end ; 5 :
80229: GO 80330
80231: LD_INT 5
80233: DOUBLE
80234: EQUAL
80235: IFTRUE 80239
80237: GO 80329
80239: POP
// begin RUAggressivenessLevel := 5 ;
80240: LD_ADDR_EXP 97
80244: PUSH
80245: LD_INT 5
80247: ST_TO_ADDR
// RUWeaponsPool := [ 43 , 44 , 45 , 46 , 75 , 76 ] ;
80248: LD_ADDR_EXP 98
80252: PUSH
80253: LD_INT 43
80255: PUSH
80256: LD_INT 44
80258: PUSH
80259: LD_INT 45
80261: PUSH
80262: LD_INT 46
80264: PUSH
80265: LD_INT 75
80267: PUSH
80268: LD_INT 76
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: ST_TO_ADDR
// RUMinVehCount := 5 ;
80279: LD_ADDR_EXP 99
80283: PUSH
80284: LD_INT 5
80286: ST_TO_ADDR
// RUMaxVehCount := 7 ;
80287: LD_ADDR_EXP 100
80291: PUSH
80292: LD_INT 7
80294: ST_TO_ADDR
// RUMinSolCount := 6 ;
80295: LD_ADDR_EXP 101
80299: PUSH
80300: LD_INT 6
80302: ST_TO_ADDR
// RUMaxSolCount := 7 ;
80303: LD_ADDR_EXP 102
80307: PUSH
80308: LD_INT 7
80310: ST_TO_ADDR
// RUMinBazookaCount := 2 ;
80311: LD_ADDR_EXP 103
80315: PUSH
80316: LD_INT 2
80318: ST_TO_ADDR
// RUMaxBazookaCount := 3 ;
80319: LD_ADDR_EXP 104
80323: PUSH
80324: LD_INT 3
80326: ST_TO_ADDR
// end ; end ;
80327: GO 80330
80329: POP
// end ;
80330: LD_VAR 0 2
80334: RET
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl2 do
80335: LD_EXP 45
80339: PUSH
80340: LD_EXP 105
80344: LESS
80345: IFFALSE 80357
80347: GO 80349
80349: DISABLE
// SetAggressivenessLevel ( 2 ) ;
80350: LD_INT 2
80352: PPUSH
80353: CALL 79875 0 1
80357: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl3 do
80358: LD_EXP 45
80362: PUSH
80363: LD_EXP 106
80367: LESS
80368: IFFALSE 80380
80370: GO 80372
80372: DISABLE
// SetAggressivenessLevel ( 3 ) ;
80373: LD_INT 3
80375: PPUSH
80376: CALL 79875 0 1
80380: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl4 do
80381: LD_EXP 45
80385: PUSH
80386: LD_EXP 107
80390: LESS
80391: IFFALSE 80403
80393: GO 80395
80395: DISABLE
// SetAggressivenessLevel ( 4 ) ;
80396: LD_INT 4
80398: PPUSH
80399: CALL 79875 0 1
80403: END
// every 0 0$1 trigger RusMainAttacks < ThresholdLvl5 do
80404: LD_EXP 45
80408: PUSH
80409: LD_EXP 108
80413: LESS
80414: IFFALSE 80426
80416: GO 80418
80418: DISABLE
// SetAggressivenessLevel ( 5 ) ;
80419: LD_INT 5
80421: PPUSH
80422: CALL 79875 0 1
80426: END
