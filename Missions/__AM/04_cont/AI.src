export KathrynOrderAttack;
export KathrynAttackStance;
export KathrynLostControl;
export KathrynHalfForcesRemaining;
export KathrynMood;

Every 0$01 trigger KathrynOrderAttack = true do
var i, un, filter, fac, enemy;
begin
enable;

       filter := FilterAllUnits([[f_side, 4], [f_type, unit_vehicle]]);
       enemy = Filterallunits([f_side, 6]);
        if filter > 0 then
           begin

           for i = 1 to filter do
             ComAttackUnit(filter[i],NearestUnitToUnit(enemy,filter[i]));

           end;

        if not KathrynAttackStance = 1 then
         if filter > 0 then
           begin
           for i = 1 to filter do
               if GetLives(filter[i]) <= 550 then
                  begin
                  SetTag(filter[i], 1);
                  un := IsDrivenBy(filter[i]);
                  if not IsInArea(filter[i], Kat_Parking) then
                  ComMoveToArea(filter[i], Kat_Parking)
                  else
                    begin
                    if IsInUnit(un) then
                       ComExitVehicle(un);
                    if not HasTask(un) then
                       ComRepairVehicle(un, filter[i]);

                    if GetTag(filter[i]) = 1 and GetLives(filter[i]) = 1000 then
                       SetTag(filter[i],  0);

                    if not GetTag(filter[i]) = 1 then
                    begin
                      AddComEnterUnit(un, filter[i]);
                      ComAttackUnit(filter[i],NearestUnitToUnit(enemy,filter[i]));
                    end;
                  end;
           end;
    end;
End;

Every 0$01 trigger KathrynOrderAttack = true do
var i, un, filter, filter_meds, fac, enemy;
begin
enable;

       filter := FilterAllUnits([[f_side, 4], [f_class, class_soldier]]);
       filter_meds := FilterAllUnits([[f_side, 4], [f_class, class_scientistic]]);
       enemy = Filterallunits([f_side, 6]);
       if not KathrynAttackStance = 3 then
        if filter > 0 then
           begin

           for i = 1 to filter do
             ComAttackUnit(filter[i],NearestUnitToUnit(enemy,filter[i]));

           end;
        if KathrynAttackStance = 2 then
         if filter > 0 then
           begin

           for i = 1 to filter do
               if GetLives(filter[i]) <= 550 then
                  begin
                  SetTag(filter[i], 1);
                  if not IsInArea(filter[i], Kat_Parking) then
                  ComMoveToArea(filter[i], Kat_Parking);
                  AddComHeal(filter_meds, filter[i]);

                    if GetTag(filter[i]) = 1 and GetLives(filter[i]) = 1000 then
                       SetTag(filter[i],  0);

                    if not GetTag(filter[i]) = 1 then
                    begin
                     if not KathrynAttackStance = 3 then
                      ComAttackUnit(filter[i],NearestUnitToUnit(enemy,filter[i]));
                    end;
                  end;
      end;
End;

export attack_group;

export function AIEngageEnemy;
var enemy,attacker;
begin
enemy = Filterallunits([f_side, 7]);
  for attacker in attack_group do
    ComAttackUnit(attacker,NearestUnitToUnit(enemy,attacker));
end;

every 0$1 do
begin
enable;
AIEngageEnemy;

end;

every 0$1 trigger IsSelected(Kathryn) or IsSelected(IsInUnit(Kathryn)) and not ( (IsDead(RU2Base1) and IsDead(RU2Base2)) or KathrynLostControl) do
begin
  if not KathrynOrderAttack then
    Case Query('QKathryn1') of
    1: begin
         SimoneCommandIssue;
         case Rand(1,3) of
           1: Say(Simone, 'DCommandAttack-Simone-1');
           2: Say(Simone, 'DCommandAttack-Simone-2');
           3: Say(Simone, 'DCommandAttack-Simone-3');
         end;
         if not KathrynOrderAttack then
           KathrynMood := KathrynMood + 5;
         KathrynOrderAttack := true;
         KathrynCommandAcknowledge;
       end;
    2: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandHold-Simone-1');
           2: Say(Simone, 'DCommandHold-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 5;
         KathrynOrderAttack := false;
         KathrynCommandAcknowledge;
       end;
    3: begin
         case Query('QKathrynTactics') of
           1: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsHardcore-Simone-1');
                   2: Say(Simone, 'DCommandTacticsHardcore-Simone-2');
                end;
               if not KathrynAttackStance = 1 then
               KathrynMood := KathrynMood + 2;
               KathrynAttackStance = 1;
               KathrynCommandAcknowledge;
              end;
           2: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsBalanced-Simone-1');
                   2: Say(Simone, 'DCommandTacticsBalanced-Simone-2');
                end;
               KathrynAttackStance = 2;
               KathrynCommandAcknowledge;
              end;
           3: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsSlow-Simone-1');
                   2: Say(Simone, 'DCommandTacticsSlow-Simone-2');
                end;
               if not KathrynAttackStance = 3 then
               KathrynMood := KathrynMood - 2;
               KathrynAttackStance = 3;
               ComMoveToArea(FilterAllUnits([[f_side, 4], [f_class, class_soldier]]), Kat_Parking);
               ComMoveToArea(FilterAllUnits([[f_side, 4], [f_class, class_scientistic]]), Kat_Parking);
               KathrynCommandAcknowledge;
              end;
           end;
         end;
       end
    else
    Case Query('QKathryn2') of
    1: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandRetreat-Simone-1');
           2: Say(Simone, 'DCommandRetreat-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 15;
         KathrynOrderAttack := false;
         if IsDead(RU2Base1) then
           ComMoveToArea(KathrynSquad, RU2Base1Area)
         else
           ComMoveToArea(KathrynSquad, StartAreaKathryn);
         case Rand(1,3) of
           1: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-1');
           2: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-2');
           3: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-3');
         end;
       end;
    2: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandHold-Simone-1');
           2: Say(Simone, 'DCommandHold-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 5;
         KathrynOrderAttack := false;
         KathrynCommandAcknowledge;
       end;
    3: begin
         case Query('QKathrynTactics') of
           1: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsHardcore-Simone-1');
                   2: Say(Simone, 'DCommandTacticsHardcore-Simone-2');
                end;
               if not KathrynAttackStance = 1 then
               KathrynMood := KathrynMood + 5;
               KathrynAttackStance = 1;
               KathrynCommandAcknowledge;
              end;
           2: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsBalanced-Simone-1');
                   2: Say(Simone, 'DCommandTacticsBalanced-Simone-2');
                end;
               KathrynAttackStance = 2;
               KathrynCommandAcknowledge;
              end;
           3: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsSlow-Simone-1');
                   2: Say(Simone, 'DCommandTacticsSlow-Simone-2');
                end;
               if not KathrynAttackStance = 3 then
               KathrynMood := KathrynMood - 5;
               KathrynAttackStance = 3;
               ComMoveToArea(FilterAllUnits([[f_side, 4], [f_class, class_soldier]]), Kat_Parking);
               ComMoveToArea(FilterAllUnits([[f_side, 4], [f_class, class_scientistic]]), Kat_Parking);
               KathrynCommandAcknowledge;
              end;
           end;
         end;
       end;
wait(0$3);
enable;
end;