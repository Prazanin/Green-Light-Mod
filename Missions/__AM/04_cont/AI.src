export KathrynOrderAttack;
export KathrynAttackStance;
export KathrynLostControl;
export KathrynHalfForcesRemaining;
export KathrynMood;

Export KathrynStatus;



export attack_group;

Export Function KathrynScript;
var i, xy, sold, e, mech, sci, driver, hurt, highHurt, tmp, vehs, parking, target, soldAttackArea;
begin
sold := FilterAllUnits([[f_side, 4], [f_class, 1]]);
mech := FilterAllUnits([[f_side, 4], [f_class, 3]]);
sci  := FilterAllUnits([[f_side, 4], [f_class, 4]]);
vehs := FilterAllUnits([[f_side, 4], [f_type, unit_vehicle]]);

while not ReachedBase do
      begin
      wait(0$1);
      debug_strings := tick;

      // check attack status:
      // 0 - init, 1 - attack first base, 2 - attack second base, 3 - attack third base

      if not KathrynStatus then
         continue;

      case KathrynStatus of
      1: begin
         parking := KatParking1;
         target := KatBase1;
         soldAttackArea := KatSold1;
         xy := [238, 278];
         end;
      2: begin
         parking := KatParking2;
         target := KatBase2;
         soldAttackArea := KatSold2;
         xy := [208, 211];
         end;
      3: begin
         parking := KatParking3;
         target := KatBase3;
         soldAttackArea := KatSold3;
         xy := [174, 156];
         end;
      end;

      // defense positions
      if not KathrynOrderAttack then
         begin

         if vehs then
            for i in vehs do
                begin

                if GetDistUnitXY(i, xy[1], xy[2]) > 15 then
                   ComMoveToArea(i, parking)
                else if GetLives(i) < 1000 then
                   begin
                   driver := IsDrivenBy(i);

                   ComExitVehicle(driver);
                   AddComRepairVehicle(driver, i);
                   AddComEnterUnit(driver, i);
                   end;

               end;

         if sold then
            for i in sold do
                begin

                if GetTag(i) = 5 then
                   SetTag(i, 0);

                if GetDistUnitXY(i, xy[1], xy[2]) > 15 then
                   ComMoveToArea(i, parking);

                end;

         if mech then
            for i in mech do
                begin
                e := FilterAllUnits([[f_side, 4], [f_type, unit_vehicle], [f_empty], [f_lives, 1000]]);

                if not IsInUnit(i) and not HasTask(i) then
                   if e then
                      ComEnterUnit(i, e)
                   else if GetDistUnitXY(i, xy[1], xy[2]) > 15 then
                        ComMoveToArea(i, parking);
                end;

         if sci then
            begin
            hurt := FilterAllUnits([[f_side, 4], [f_type, unit_human], [f_not, [f_lives, 750]]]);

            for i in sci do
                begin
                if hurt then
                   ComHeal(i, NearestUnitToUnit(hurt, i))
                else if GetDistUnitXY(i, xy[1], xy[2]) > 15 then
                   ComMoveToArea(i, parking);
                end;

            end;

         end
       else // attack order
         begin 
         tmp := FilterUnitsInArea(target, [f_enemy, 4]);

         if not tmp then
            begin
            KathrynStatus := KathrynStatus + 1;
            KathrynOrderAttack := false;
            continue;
            end;

         // KathrynAttackStance: 1 - agressive, 2 - normal, 3 - carefull
         if KathrynAttackStance = 1 then
            begin

            for i in vehs do
                begin
                driver := IsDrivenBy(i);

                if not driver then
                   continue;

                if GetLives(i) < 350 then
                   SetTag(i, 2);

                if GetLives(i) < 1000 and GetTag(i) = 2 then
                   begin
                   if not IsInArea(i, parking) then
                      ComMoveToArea(i, parking)
                   else if driver then
                      begin
                      ComExitVehicle(driver);
                      AddComRepairVehicle(driver, i);
                      AddComEnterUnit(driver, i);
                      end;
                end;

                if GetLives(i) = 1000 and GetTag(i) = 2 then
                   SetTag(i, 0);

                if not HasTask(driver) and GetTag(i) <> 2 then
                   ComAttackUnit(i, NearestUnitToUnit(tmp, i));
                end;

            for i in sold do
                begin

                if GetLives(i) < 350 then
                   SetTag(i, 3);

                if GetTag(i) = 3 and not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);

                if GetLives(i) = 1000 and GetTag(i) = 3 then
                   SetTag(i, 0);

                if GetTag(i) <> 3 then
                   ComAttackUnit(i, NearestUnitToUnit(tmp, i));

                end;

            hurt := FilterAllUnits([[f_side, 4], [f_type, unit_human], [f_not, [f_lives, 750]]]);

            for i in sci do
                begin
                if not hurt and sold and GetDistUnits(i, NearestUnitToUnit(sold, i)) > 7 then
                   ComMoveUnit(i, NearestUnitToUnit(sold, i))
                else if hurt then
                   ComHeal(i, NearestUnitToUnit(hurt, i))
                else if not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);
                end;
            end
         else if KathrynAttackStance = 2 then
            begin

            for i in vehs do
                begin
                driver := IsDrivenBy(i);

                if not driver then
                   continue;

                if GetLives(i) < 550 then
                   SetTag(i, 2);

                if GetLives(i) < 1000 and GetTag(i) = 2 then
                   begin
                   if not IsInArea(i, parking) then
                      ComMoveToArea(i, parking)
                   else if driver then
                      begin
                      ComExitVehicle(driver);
                      AddComRepairVehicle(driver, i);
                      AddComEnterUnit(driver, i);
                      end;
                end;

                if GetLives(i) = 1000 and GetTag(i) = 2 then
                   SetTag(i, 0);

                if not HasTask(driver) and GetTag(i) <> 2 then
                   ComAttackUnit(i, NearestUnitToUnit(tmp, i));
                end;

            for i in sold do
                begin

                if GetLives(i) < 650 then
                   SetTag(i, 3);

                if GetTag(i) = 3 and not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);

                if GetLives(i) = 1000 and not GetTag(i) in [4, 5] then
                   SetTag(i, 4);

                if GetTag(i) = 4 and not IsInArea(i, soldAttackArea) then
                   ComMoveToArea(i, soldAttackArea);

                if GetTag(i) = 4 and IsInArea(i, soldAttackArea) then
                   SetTag(i, 5);

                if GetTag(i) = 5 then
                   ComAttackUnit(i, NearestUnitToUnit(tmp, i));
                end;

            hurt := FilterAllUnits([[f_side, 4], [f_type, unit_human], [f_not, [f_lives, 1000]]]);

            for i in sci do
                begin
                if not hurt and not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);

                highHurt := UnitFilter(hurt, [f_not, [f_lives, 250]]);

                if highHurt then
                   ComHeal(i, NearestUnitToUnit(highHurt, i))
                else
                   if UnitFilter(hurt, [f_inarea, parking]) then
                      ComHeal(i, NearestUnitToUnit(UnitFilter(hurt, [f_inarea, parking]), i))
                   else
                      ComMoveToArea(i, parking);
                end;
            end
         else
            begin
            
            for i in vehs do
                begin
                driver := IsDrivenBy(i);

                if not driver then
                   continue;

                if GetLives(i) < 650 then
                   SetTag(i, 2);

                if GetLives(i) < 1000 and GetTag(i) = 2 then
                   begin
                   if not IsInArea(i, parking) then
                      ComMoveToArea(i, parking)
                   else if driver then
                      begin
                      ComExitVehicle(driver);
                      AddComRepairVehicle(driver, i);
                      AddComEnterUnit(driver, i);
                      end;
                end;

                if GetLives(i) = 1000 and GetTag(i) = 2 then
                   SetTag(i, 0);

                if not HasTask(driver) and GetTag(i) <> 2 then
                   ComAttackUnit(i, NearestUnitToUnit(tmp, i));
                end;

            for i in sold do
                begin

                if not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);

                end;

            hurt := FilterAllUnits([[f_side, 4], [f_type, unit_human], [f_not, [f_lives, 1000]]]);

            for i in sci do
                begin
                if not hurt and not IsInArea(i, parking) then
                   ComMoveToArea(i, parking);

                highHurt := UnitFilter(hurt, [f_not, [f_lives, 250]]);

                if highHurt then
                   ComHeal(i, NearestUnitToUnit(highHurt, i))
                else
                   if UnitFilter(hurt, [f_inarea, parking]) then
                      ComHeal(i, NearestUnitToUnit(UnitFilter(hurt, [f_inarea, parking]), i))
                   else
                      ComMoveToArea(i, parking);
                end;

            end;
         end;
      end;
End;

export function AIEngageEnemy;
var enemy,attacker;
begin
enemy = Filterallunits([f_side, 7]);

if not attack_group then
   exit;

for attacker in attack_group do
    ComAttackUnit(attacker, NearestUnitToUnit(enemy,attacker));
end;

every 0$1 do
begin
enable;
AIEngageEnemy;
end;

every 0$1 trigger IsSelected(Kathryn) or IsSelected(IsInUnit(Kathryn)) and not ( (IsDead(RU2Base1) and IsDead(RU2Base2) and IsDead(RU3_Depot)) or KathrynLostControl) do
begin
  if not KathrynOrderAttack then
    Case Query('QKathryn1') of
    1: begin
         SimoneCommandIssue;
         case Rand(1,3) of
           1: Say(Simone, 'DCommandAttack-Simone-1');
           2: Say(Simone, 'DCommandAttack-Simone-2');
           3: Say(Simone, 'DCommandAttack-Simone-3');
         end;
         if not KathrynOrderAttack then
           KathrynMood := KathrynMood + 5;
         KathrynOrderAttack := true;
         KathrynCommandAcknowledge;
       end;
    2: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandHold-Simone-1');
           2: Say(Simone, 'DCommandHold-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 5;
         KathrynOrderAttack := false;
         KathrynCommandAcknowledge;
       end;
    3: begin
         case Query('QKathrynTactics') of
           1: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsHardcore-Simone-1');
                   2: Say(Simone, 'DCommandTacticsHardcore-Simone-2');
                end;
               if not KathrynAttackStance = 1 then
               KathrynMood := KathrynMood + 2;
               KathrynAttackStance = 1;
               KathrynCommandAcknowledge;
              end;
           2: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsBalanced-Simone-1');
                   2: Say(Simone, 'DCommandTacticsBalanced-Simone-2');
                end;
               KathrynAttackStance = 2;
               KathrynCommandAcknowledge;
              end;
           3: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsSlow-Simone-1');
                   2: Say(Simone, 'DCommandTacticsSlow-Simone-2');
                end;
               if not KathrynAttackStance = 3 then
               KathrynMood := KathrynMood - 2;
               KathrynAttackStance = 3;
               KathrynCommandAcknowledge;
              end;
           end;
         end;
       end
    else
    Case Query('QKathryn2') of
    1: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandRetreat-Simone-1');
           2: Say(Simone, 'DCommandRetreat-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 15;
         KathrynOrderAttack := false;

         case Rand(1,3) of
           1: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-1');
           2: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-2');
           3: SayRadio(Kathryn, 'DCommandAcknowledgeRetreat-Kathryn-3');
         end;
       end;
    2: begin
         SimoneCommandIssue;
         case Rand(1,2) of
           1: Say(Simone, 'DCommandHold-Simone-1');
           2: Say(Simone, 'DCommandHold-Simone-2');
         end;
         if KathrynOrderAttack then
           KathrynMood := KathrynMood - 5;
         KathrynOrderAttack := false;
         KathrynCommandAcknowledge;
       end;
    3: begin
         case Query('QKathrynTactics') of
           1: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsHardcore-Simone-1');
                   2: Say(Simone, 'DCommandTacticsHardcore-Simone-2');
                end;
               if not KathrynAttackStance = 1 then
               KathrynMood := KathrynMood + 5;
               KathrynAttackStance = 1;
               KathrynCommandAcknowledge;
              end;
           2: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsBalanced-Simone-1');
                   2: Say(Simone, 'DCommandTacticsBalanced-Simone-2');
                end;
               KathrynAttackStance = 2;
               KathrynCommandAcknowledge;
              end;
           3: begin
               SimoneCommandIssue;
               SimoneCommandTacticsIssue;
                case Rand(1,2) of
                   1: Say(Simone, 'DCommandTacticsSlow-Simone-1');
                   2: Say(Simone, 'DCommandTacticsSlow-Simone-2');
                end;
               if not KathrynAttackStance = 3 then
               KathrynMood := KathrynMood - 5;
               KathrynAttackStance = 3;                 
               KathrynCommandAcknowledge;
              end;
           end;
         end;
       end;
wait(0$3);
enable;
end;