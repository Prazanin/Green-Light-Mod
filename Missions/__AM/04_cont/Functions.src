export ConvoysEscaped, EstherQuestCompleted, TeslaQuestCompleted;
export function LoadVariables;
begin
  ConvoysEscaped := LoadVariable('AM03_Convoys', 0);
  EstherQuestCompleted := LoadVariable('AM03_EstherResearch', 0);
  TeslaQuestCompleted := LoadVariable('AM03_TeslaResearched', 0);
end;

Export Function Garrison_Buildings(side);
var i,j,l,labs,factorio,depots,ilu_ludzi,ludz,filter;
begin
labs := FilterAllUnits([[f_side,side],[f_btype,b_lab]]);
labs := labs^FilterAllUnits([[f_side,side],[f_btype,b_lab_half]]);
labs := labs^FilterAllUnits([[f_side,side],[f_btype,b_lab_full]]);
factorio := FilterAllUnits([[f_side,side],[f_btype,b_factory]]);
depots := FilterAllUnits([[f_side,side],[f_btype,b_depot]]);
depots := depots^FilterAllUnits([[f_side,side],[f_btype,b_warehouse]]);

Case side of
1:uc_nation= nation_american;
3:uc_nation= nation_russian;
6:uc_nation= nation_russian;
end;
  for i=1 to labs do //labs
   begin
    if IsInUnit(labs[i])=0 then
       begin
          uc_side=side;
          ilu_ludzi=Rand(2,4);
          for j=1 to ilu_ludzi do
            begin
            PrepareScientist(0, RuSolMaxLevel);
            ludz= CreateHuman;
              PlaceHumanInUnit(ludz, labs[i]);
          ilu_ludzi=Rand(2,4);
            end;
        end;
   end;
  for i=1 to factorio do //factories
   begin
    if IsInUnit(factorio[i])=0 then
       begin
          uc_side=side;
          ilu_ludzi=Rand(2,4);
          for j=1 to ilu_ludzi do
            begin
            PrepareMechanic(0, RuSolMaxLevel);
            ludz= CreateHuman;
            PlaceHumanInUnit(ludz, factorio[i]);
            ilu_ludzi=Rand(2,4);
            end;
        end;
   end;
  for i=1 to depots do //depot/warehouse
   begin
    if IsInUnit(depots[i])=0 then
       begin
          uc_side=side;
          ilu_ludzi=Rand(2,3);
          for j=1 to ilu_ludzi do
            begin
            PrepareEngineer(0, RuSolMaxLevel);
            ludz= CreateHuman;
            PlaceHumanInUnit(ludz, depots[i]);
            end;
        end;
   end;
end;

Export Function Assemble_Barracks(side); //2 soldiers, 2 bazooka (only RU)
var i,j,barrack,soldat,filter;
begin
Case side of
1:uc_nation= nation_american;
3:uc_nation= nation_russian;
end;
barrack := FilterAllUnits([[f_side,side],[f_btype, b_barracks]]);
  for i=1 to barrack do
   begin
    if IsInUnit(barrack[i])=0 then
       begin
          uc_side=side;
          for j=1 to 2 do
            begin
              PrepareSoldier(0, RuSolMaxLevel);
              soldat := CreateHuman;
              PlaceHumanInUnit(soldat, barrack[i]);
            end;
            if side=3 then
          for j=1 to 2 do
            begin
              PrepareSoldier(0, RuSolMaxLevel);
              hc_class=class_bazooker;
              soldat := CreateHuman;
              PlaceHumanInUnit(soldat, barrack[i]);
            end;
        end;
   end;
end;

Export Function Assemble_Armories(side); //3 soldiers
var i,j,barrack,soldat,filter;
begin
Case side of
1:uc_nation= nation_american;
3:uc_nation= nation_russian;
6:uc_nation= nation_russian;
end;
barrack := FilterAllUnits([[f_side,side],[f_btype, b_armoury]]);
  for i=1 to barrack do
   begin
    if IsInUnit(barrack[i])=0 then
       begin
          uc_side=side;
          if side = 6 then
          for j=1 to 2 do
            begin
              PrepareSoldier(0, 5);
              soldat := CreateHuman;
              PlaceHumanInUnit(soldat, barrack[i]);
            end
          else
          for j=1 to 3 do
            begin
              PrepareSoldier(0, RuSolMaxLevel);
              soldat := CreateHuman;
              PlaceHumanInUnit(soldat, barrack[i]);
            end;
        end;
   end;
end;

Export Function PlaceUnitInBunker(un, b);
var dir;
begin
dir := GetDir(b);

if dir < 3 then
   dir := dir + 3
    else
      dir := dir - 3;

SetDir(un, dir);
PlaceHumanInUnit(un, b);
End;

Export Function Fill_Bunkers(side);
var i,filter,un;
begin
filter := FilterAllUnits([[f_side,side], [f_nation,3],[f_btype, b_breastwork]]);
for i = 1 to filter do
    if IsInUnit(filter[i])=0 then
       begin
          uc_nation= nation_russian;
          uc_side= side;
          PrepareSoldier(1, RuSolMaxLevel);
          un := CreateHuman;
          PlaceUnitInBunker(un, filter[i]);
        end;
end;

Export Function Fill_Turrets(side);
var i,filter,un;
begin
uc_side := side;
uc_nation := 3;

for i in FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_empty]]) do
begin
PrepareSoldier(1, RuSolMaxLevel);
PlaceHumanInUnit(CreateHuman, i);
end;
end;

export function RussianMobile(side,medium,heavy,area);
var i,veh,ru_veh_medium,ru_veh_heavy,auto;
begin
     uc_nation= nation_russian;
     uc_side=side;
    hc_name:='';
    hc_gallery := '';

  ru_veh_medium:=[ // chassis, vc_engine, vc_weapon, vc_control
  [ru_medium_wheeled,engine_siberite,ru_heavy_machine_gun,control_computer],
  [ru_medium_tracked,engine_siberite,ru_heavy_machine_gun,control_computer],
  [ru_medium_tracked,engine_siberite,ru_gatling_gun,control_computer],
  [ru_medium_wheeled,engine_siberite,ru_gatling_gun,control_computer],
  [ru_medium_wheeled,engine_siberite,ru_gun,control_computer],
  [ru_medium_tracked,engine_siberite,ru_gun,control_computer],
  [ru_medium_tracked,engine_siberite,ru_rocket_launcher,control_computer]];

  ru_veh_heavy:=[ // chassis, vc_engine, vc_weapon, vc_control
  [ru_heavy_wheeled,engine_siberite,ru_gatling_gun,control_computer],
  [ru_heavy_wheeled,engine_siberite,ru_gun,control_computer],
  [ru_heavy_tracked,engine_siberite,ru_gatling_gun,control_computer],
  [ru_heavy_tracked,engine_siberite,ru_gun,control_computer],
  [ru_heavy_tracked,engine_siberite,ru_heavy_gun,control_computer]];

  for i=1 to medium do
   begin
    auto:=Rand(1,(0+ru_veh_medium));
    vc_chassis:=ru_veh_medium[auto][1];
    vc_engine:=ru_veh_medium[auto][2];
    vc_weapon:=ru_veh_medium[auto][3];
    vc_control:=ru_veh_medium[auto][4];
     veh:=CreateVehicle;
     PlaceUnitArea(veh,area,false);
   end;
  for i=1 to heavy do
   begin
    auto:=Rand(1,(0+ru_veh_heavy));
    vc_chassis:=ru_veh_heavy[auto][1];
    vc_engine:=ru_veh_heavy[auto][2];
    vc_weapon:=ru_veh_heavy[auto][3];
    vc_control:=ru_veh_heavy[auto][4];
     veh:=CreateVehicle;
     PlaceUnitArea(veh,area,false);
   end;
end;

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, target1, target2;
begin

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  repeat

  wait(0$01);

  IF nation = 1 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = AMWeapon[Rand(1, AMWeapon)];

        for j = 1 to AMWeapon do
        begin
            IF AMWeapon[j] = 2 or AMWeapon[j] = 3 then
            begin
                amChassisTab = [1,2,3,4,5];
                vc_chassis = amChassisTab[Rand(1,amChassisTab)];
            end;

            IF AMWeapon[j] = 4 or AMWeapon[j] = 5 or AMWeapon[j] = 9 or AMWeapon[j] = 11 or AMWeapon[j] = 7 then
            begin
                amChassisTab = [2,3,4,5];
                vc_chassis = amChassisTab[Rand(1, amChassisTab)];
            end;

            IF AMWeapon[j] = 8 or AMWeapon[j] = 6 or AMWeapon[j] = 10 then
            begin
                amChassisTab = [4,5];
                vc_chassis = amChassisTab[Rand(1, amChassisTab)];
            end;

        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;

        attack_group = attack_group ^ veh;
        i = i + 1;

    end;

  IF nation = 2 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = ARWeapons[Rand(1, ARWeapons)];

        for j = 1 to ARWeapons do
        begin

            IF ARWeapons[j] = 24 or ARWeapons[j] = 22 or ARWeapons[j] = 23 or ARWeapons[j] = 30 then
            begin
                arChassisTab = [14];
                vc_chassis = arChassisTab[Rand(1, arChassisTab)];
            end;

            IF ARWeapons[j] = 29 or ARWeapons[j] = 28 or ARWeapons[j] = 27 or ARWeapons[j] = 26 or ARWeapons[j] = 25 then
            begin
                arChassisTab = [14,16];
                vc_chassis = arChassisTab[Rand(1, arChassisTab)];
            end;

            IF ARWeapons[j] = 72 or ARWeapons[j] = 73 or ARWeapons[j] = 71 then
            begin
                arChassisTab = [16];
                vc_chassis = arChassisTab[Rand(1, arChassisTab)];
            end;

        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;

        attack_group = attack_group ^ veh;
        i = i + 1;

    end;


  IF nation = 3 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = RUWeapons[Rand(1, RUWeapons)];


        for j = 1 to RuWeapons do
        begin

            IF RUWeapons[j] = 42 or RUWeapons[j] = 43 or RUWeapons[j] = 44 or RUWeapons[j] = 45 or RUWeapons[j] = 49 then
            begin
                ruChassisTab = [21, 22, 23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;

            IF RUWeapons[j] = 46 or RUWeapons[j] = 47 then
            begin
                ruChassisTab = [23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;

        end;


        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;

        attack_group = attack_group ^ veh;
        i = i + 1;

    end;

  until i = vehCount;


END;

export function SimoneCommandIssue;
begin
  case Rand(1,3) of
  1: Say(Simone, 'DCommandIssue-Simone-1');
  2: Say(Simone, 'DCommandIssue-Simone-2');
  3: Say(Simone, 'DCommandIssue-Simone-3');
  end;
end;

export function SimoneCommandTacticsIssue;
begin
  case Rand(1,3) of
  1: Say(Simone, 'DCommandTactics-Simone-1');
  2: Say(Simone, 'DCommandTactics-Simone-2');
  3: Say(Simone, 'DCommandTactics-Simone-3');
  end;
end;

export function KathrynCommandAcknowledge;
begin
  case Rand(1,5) of
  1: Say(Kathryn, 'DCommandAcknowledge-Kathryn-1');
  2: Say(Kathryn, 'DCommandAcknowledge-Kathryn-2');
  3: Say(Kathryn, 'DCommandAcknowledge-Kathryn-3');
  4: Say(Kathryn, 'DCommandAcknowledge-Kathryn-4');
  5: Say(Kathryn, 'DCommandAcknowledge-Kathryn-5');
  end;
end;

Export Function SaySex(unit, dialogM, dialogF);
begin
if not unit then
   exit;

Say(unit, [dialogM, dialogF][GetSex(unit)]);
End;

export function EndMission;
VAR Vehicles, filter, i;
begin
  Wait(0$1);

  Vehicles := [];

  if not KathrynLostControl and KathrynHalfForcesRemaining then
    AddMedal('Commandement',1)
  else if not KathrynLostControl and not KathrynHalfForcesRemaining then
    AddMedal('Commandement',-1)
  else if KathrynLostControl and KathrynHalfForcesRemaining then
    AddMedal('Commandement',-2)
  else
    AddMedal('Commandement',-3);

  if FilterAllUnits([[f_side, 7], [f_type, unit_human]]) < 15 then
    AddMedal('Losses',-1)
  else
    AddMedal('Losses',1);

  if not BradfordSecondCallout then
    AddMedal('Hurry',1)
  else
    AddMedal('Hurry',-1);

  filter := FilterAllUnits([[f_side, 7], [f_type, unit_vehicle]]);
  for i = 1 to filter do
  begin
    Vehicles := Vehicles ^ [GetChassis(filter[i]), GetEngine(filter[i]), GetControl(filter[i]), GetWeapon(filter[i])];
  end;

  SaveVariable(Vehicles, 'AM04_Vehicles');

  SaveVariable(BradfordSecondCallout, 'AM04_WasTooSlow');

  GiveMedals('Main');

  RewardPeople(FilterAllUnits([[f_side, 7], [f_type, unit_human]]));

  SaveCharacters(Simone, 'Simone');
  SaveCharacters(Miller, 'Miller');
  SaveCharacters(Pravar, 'Pravar');

  SaveCharacters(FilterAllUnits([[f_side, 7], [f_type, unit_human]]) diff [Simone, Miller, Pravar],'AM04_Survivors');

  YouWin;
  exit;

end;

