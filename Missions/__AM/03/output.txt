// export AlliedSquadMet , OutpostCaptured , BioLabSecured ; export LastStand , Evacuation ; export Squad_Assembled ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ingame_video = true ;
   4: LD_ADDR_OWVAR 52
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// interface_hidden = true ;
  12: LD_ADDR_OWVAR 54
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// InitiateConstants ;
  20: CALL 13651 0 0
// PrepareDifficulty ;
  24: CALL 14308 0 0
// Garrison_Enemy_Base ;
  28: CALL 10822 0 0
// CreatePersonas ;
  32: CALL 4830 0 0
// PlaceUnitXY ( Pravar , 121 , 85 , false ) ;
  36: LD_EXP 13
  40: PPUSH
  41: LD_INT 121
  43: PPUSH
  44: LD_INT 85
  46: PPUSH
  47: LD_INT 0
  49: PPUSH
  50: CALL_OW 48
// PlaceUnitXY ( Esther , 121 , 88 , false ) ;
  54: LD_EXP 14
  58: PPUSH
  59: LD_INT 121
  61: PPUSH
  62: LD_INT 88
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: CALL_OW 48
// PrepareEngineer ( sex_male , 8 ) ;
  72: LD_INT 1
  74: PPUSH
  75: LD_INT 8
  77: PPUSH
  78: CALL_OW 382
// AMEng := CreateHuman ;
  82: LD_ADDR_EXP 19
  86: PUSH
  87: CALL_OW 44
  91: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_INT 8
  97: PPUSH
  98: CALL_OW 381
// AMSolRand := CreateHuman ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: CALL_OW 44
 111: ST_TO_ADDR
// PlaceUnitXY ( AMEng , 121 , 91 , false ) ;
 112: LD_EXP 19
 116: PPUSH
 117: LD_INT 121
 119: PPUSH
 120: LD_INT 91
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: CALL_OW 48
// PlaceUnitXY ( AMSolRand , 119 , 85 , false ) ;
 130: LD_EXP 20
 134: PPUSH
 135: LD_INT 119
 137: PPUSH
 138: LD_INT 85
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 48
// AddCargo ( truc1 , mat_cans , 100 ) ;
 148: LD_INT 22
 150: PPUSH
 151: LD_INT 1
 153: PPUSH
 154: LD_INT 100
 156: PPUSH
 157: CALL_OW 291
// AddCargo ( truc2 , mat_cans , 50 ) ;
 161: LD_INT 23
 163: PPUSH
 164: LD_INT 1
 166: PPUSH
 167: LD_INT 50
 169: PPUSH
 170: CALL_OW 291
// AddCargo ( truc2 , mat_siberit , 50 ) ;
 174: LD_INT 23
 176: PPUSH
 177: LD_INT 3
 179: PPUSH
 180: LD_INT 50
 182: PPUSH
 183: CALL_OW 291
// CenterNowOnXY ( 48 , 86 ) ;
 187: LD_INT 48
 189: PPUSH
 190: LD_INT 86
 192: PPUSH
 193: CALL_OW 86
// SayRadio ( Barnes , D1-Barnes-1 ) ;
 197: LD_EXP 16
 201: PPUSH
 202: LD_STRING D1-Barnes-1
 204: PPUSH
 205: CALL_OW 94
// Say ( Simone , D1-Simone-1 ) ;
 209: LD_EXP 7
 213: PPUSH
 214: LD_STRING D1-Simone-1
 216: PPUSH
 217: CALL_OW 88
// DWait ( 0 0$1 ) ;
 221: LD_INT 35
 223: PPUSH
 224: CALL_OW 68
// Say ( Kathryn , D1-Kathryn-1 ) ;
 228: LD_EXP 8
 232: PPUSH
 233: LD_STRING D1-Kathryn-1
 235: PPUSH
 236: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 240: LD_EXP 7
 244: PPUSH
 245: LD_STRING D1-Simone-2
 247: PPUSH
 248: CALL_OW 88
// Say ( Kathryn , D1-Kathryn-2 ) ;
 252: LD_EXP 8
 256: PPUSH
 257: LD_STRING D1-Kathryn-2
 259: PPUSH
 260: CALL_OW 88
// Say ( Simone , D1-Simone-3 ) ;
 264: LD_EXP 7
 268: PPUSH
 269: LD_STRING D1-Simone-3
 271: PPUSH
 272: CALL_OW 88
// Say ( Kathryn , D1-Kathryn-3 ) ;
 276: LD_EXP 8
 280: PPUSH
 281: LD_STRING D1-Kathryn-3
 283: PPUSH
 284: CALL_OW 88
// DWait ( 0 0$1 ) ;
 288: LD_INT 35
 290: PPUSH
 291: CALL_OW 68
// repeat Wait ( 0 0$1 ) ;
 295: LD_INT 35
 297: PPUSH
 298: CALL_OW 67
// until Squad_Assembled ;
 302: LD_EXP 6
 306: IFFALSE 295
// ChangeMissionObjectives ( M1 ) ;
 308: LD_STRING M1
 310: PPUSH
 311: CALL_OW 337
// ingame_video = false ;
 315: LD_ADDR_OWVAR 52
 319: PUSH
 320: LD_INT 0
 322: ST_TO_ADDR
// interface_hidden = false ;
 323: LD_ADDR_OWVAR 54
 327: PUSH
 328: LD_INT 0
 330: ST_TO_ADDR
// SaveForQuickRestart ;
 331: CALL_OW 22
// end ;
 335: END
// every 0 0$1 do
 336: GO 338
 338: DISABLE
// begin Squad_Assembly ;
 339: CALL 5546 0 0
// end ;
 343: END
// every 0 0$1 trigger not AlliedSquadMet and FilterUnitsInArea ( AM_MeetingPoint , [ f_side , 7 ] ) >= 1 do
 344: LD_EXP 1
 348: NOT
 349: PUSH
 350: LD_INT 1
 352: PPUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 7
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PPUSH
 363: CALL_OW 70
 367: PUSH
 368: LD_INT 1
 370: GREATEREQUAL
 371: AND
 372: IFFALSE 819
 374: GO 376
 376: DISABLE
// begin AlliedSquadMet := true ;
 377: LD_ADDR_EXP 1
 381: PUSH
 382: LD_INT 1
 384: ST_TO_ADDR
// ChangeSideFog ( 1 , 7 ) ;
 385: LD_INT 1
 387: PPUSH
 388: LD_INT 7
 390: PPUSH
 391: CALL_OW 343
// InGameOn ;
 395: CALL_OW 8
// CenterOnXY ( 121 , 86 ) ;
 399: LD_INT 121
 401: PPUSH
 402: LD_INT 86
 404: PPUSH
 405: CALL_OW 84
// Say ( Pravar , D2-Sol-1 ) ;
 409: LD_EXP 13
 413: PPUSH
 414: LD_STRING D2-Sol-1
 416: PPUSH
 417: CALL_OW 88
// Say ( Simone , D2-Simone-1 ) ;
 421: LD_EXP 7
 425: PPUSH
 426: LD_STRING D2-Simone-1
 428: PPUSH
 429: CALL_OW 88
// Say ( Pravar , D2-Sol-2 ) ;
 433: LD_EXP 13
 437: PPUSH
 438: LD_STRING D2-Sol-2
 440: PPUSH
 441: CALL_OW 88
// Say ( Simone , D2-Simone-2 ) ;
 445: LD_EXP 7
 449: PPUSH
 450: LD_STRING D2-Simone-2
 452: PPUSH
 453: CALL_OW 88
// SetSide ( [ Pravar , Esther , AMEng , AMSolRand ] , 7 ) ;
 457: LD_EXP 13
 461: PUSH
 462: LD_EXP 14
 466: PUSH
 467: LD_EXP 19
 471: PUSH
 472: LD_EXP 20
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: PPUSH
 483: LD_INT 7
 485: PPUSH
 486: CALL_OW 235
// DWait ( 0 0$1 ) ;
 490: LD_INT 35
 492: PPUSH
 493: CALL_OW 68
// Say ( Simone , D2a-Simone-1 ) ;
 497: LD_EXP 7
 501: PPUSH
 502: LD_STRING D2a-Simone-1
 504: PPUSH
 505: CALL_OW 88
// Say ( Esther , D2a-Esther-1 ) ;
 509: LD_EXP 14
 513: PPUSH
 514: LD_STRING D2a-Esther-1
 516: PPUSH
 517: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 521: LD_EXP 7
 525: PPUSH
 526: LD_STRING D2a-Simone-2
 528: PPUSH
 529: CALL_OW 88
// Say ( Esther , D2a-Esther-2 ) ;
 533: LD_EXP 14
 537: PPUSH
 538: LD_STRING D2a-Esther-2
 540: PPUSH
 541: CALL_OW 88
// Say ( Simone , D2a-Simone-3 ) ;
 545: LD_EXP 7
 549: PPUSH
 550: LD_STRING D2a-Simone-3
 552: PPUSH
 553: CALL_OW 88
// Say ( Simone , D2a-Simone-4 ) ;
 557: LD_EXP 7
 561: PPUSH
 562: LD_STRING D2a-Simone-4
 564: PPUSH
 565: CALL_OW 88
// DWait ( 0 0$1 ) ;
 569: LD_INT 35
 571: PPUSH
 572: CALL_OW 68
// Say ( Esther , D2a-Esther-3 ) ;
 576: LD_EXP 14
 580: PPUSH
 581: LD_STRING D2a-Esther-3
 583: PPUSH
 584: CALL_OW 88
// if not IsDead ( Edmonds ) then
 588: LD_EXP 10
 592: PPUSH
 593: CALL_OW 301
 597: NOT
 598: IFFALSE 669
// begin Say ( Edmonds , D2a-Edmonds-1 ) ;
 600: LD_EXP 10
 604: PPUSH
 605: LD_STRING D2a-Edmonds-1
 607: PPUSH
 608: CALL_OW 88
// Say ( Esther , D2a-Esther-4 ) ;
 612: LD_EXP 14
 616: PPUSH
 617: LD_STRING D2a-Esther-4
 619: PPUSH
 620: CALL_OW 88
// Say ( Edmonds , D2a-Edmonds-2 ) ;
 624: LD_EXP 10
 628: PPUSH
 629: LD_STRING D2a-Edmonds-2
 631: PPUSH
 632: CALL_OW 88
// Say ( Edmonds , D2a-Edmonds-3 ) ;
 636: LD_EXP 10
 640: PPUSH
 641: LD_STRING D2a-Edmonds-3
 643: PPUSH
 644: CALL_OW 88
// Say ( Esther , D2a-Esther-5 ) ;
 648: LD_EXP 14
 652: PPUSH
 653: LD_STRING D2a-Esther-5
 655: PPUSH
 656: CALL_OW 88
// DWait ( 0 0$1 ) ;
 660: LD_INT 35
 662: PPUSH
 663: CALL_OW 68
// end else
 667: GO 729
// begin Say ( Simone , D2a-Simone-5a ) ;
 669: LD_EXP 7
 673: PPUSH
 674: LD_STRING D2a-Simone-5a
 676: PPUSH
 677: CALL_OW 88
// Say ( Esther , D2a-Esther-4a ) ;
 681: LD_EXP 14
 685: PPUSH
 686: LD_STRING D2a-Esther-4a
 688: PPUSH
 689: CALL_OW 88
// Say ( Simone , D2a-Simone-6a ) ;
 693: LD_EXP 7
 697: PPUSH
 698: LD_STRING D2a-Simone-6a
 700: PPUSH
 701: CALL_OW 88
// Say ( Esther , D2a-Esther-5a ) ;
 705: LD_EXP 14
 709: PPUSH
 710: LD_STRING D2a-Esther-5a
 712: PPUSH
 713: CALL_OW 88
// Say ( Simone , D2a-Simone-7a ) ;
 717: LD_EXP 7
 721: PPUSH
 722: LD_STRING D2a-Simone-7a
 724: PPUSH
 725: CALL_OW 88
// end ; Say ( Simone , D2a-Simone-5 ) ;
 729: LD_EXP 7
 733: PPUSH
 734: LD_STRING D2a-Simone-5
 736: PPUSH
 737: CALL_OW 88
// Say ( Esther , D2a-Esther-6 ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_STRING D2a-Esther-6
 748: PPUSH
 749: CALL_OW 88
// Say ( Esther , D2a-Esther-7 ) ;
 753: LD_EXP 14
 757: PPUSH
 758: LD_STRING D2a-Esther-7
 760: PPUSH
 761: CALL_OW 88
// Say ( Simone , D2a-Simone-6 ) ;
 765: LD_EXP 7
 769: PPUSH
 770: LD_STRING D2a-Simone-6
 772: PPUSH
 773: CALL_OW 88
// Say ( Esther , D2a-Esther-8 ) ;
 777: LD_EXP 14
 781: PPUSH
 782: LD_STRING D2a-Esther-8
 784: PPUSH
 785: CALL_OW 88
// Say ( Simone , D2a-Simone-7 ) ;
 789: LD_EXP 7
 793: PPUSH
 794: LD_STRING D2a-Simone-7
 796: PPUSH
 797: CALL_OW 88
// DWait ( 0 0$1 ) ;
 801: LD_INT 35
 803: PPUSH
 804: CALL_OW 68
// InGameOff ;
 808: CALL_OW 9
// ChangeMissionObjectives ( M1a ) ;
 812: LD_STRING M1a
 814: PPUSH
 815: CALL_OW 337
// end ;
 819: END
// every 0 0$1 trigger GetSide ( GeoBase ) = 7 do
 820: LD_INT 2
 822: PPUSH
 823: CALL_OW 255
 827: PUSH
 828: LD_INT 7
 830: EQUAL
 831: IFFALSE 1478
 833: GO 835
 835: DISABLE
// begin DialogueOn ;
 836: CALL_OW 6
// OutpostCaptured = true ;
 840: LD_ADDR_EXP 2
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// Say ( Simone , D3-Simone-1 ) ;
 848: LD_EXP 7
 852: PPUSH
 853: LD_STRING D3-Simone-1
 855: PPUSH
 856: CALL_OW 88
// SayRadio ( Barnes , D3-Barnes-1 ) ;
 860: LD_EXP 16
 864: PPUSH
 865: LD_STRING D3-Barnes-1
 867: PPUSH
 868: CALL_OW 94
// Say ( Simone , D3-Simone-2 ) ;
 872: LD_EXP 7
 876: PPUSH
 877: LD_STRING D3-Simone-2
 879: PPUSH
 880: CALL_OW 88
// ChangeMissionObjectives ( M1b ) ;
 884: LD_STRING M1b
 886: PPUSH
 887: CALL_OW 337
// DWait ( 0 0$1 ) ;
 891: LD_INT 35
 893: PPUSH
 894: CALL_OW 68
// Say ( Miller , D3-Miller-1 ) ;
 898: LD_EXP 9
 902: PPUSH
 903: LD_STRING D3-Miller-1
 905: PPUSH
 906: CALL_OW 88
// Say ( Simone , D3-Simone-3 ) ;
 910: LD_EXP 7
 914: PPUSH
 915: LD_STRING D3-Simone-3
 917: PPUSH
 918: CALL_OW 88
// DialogueOff ;
 922: CALL_OW 7
// if not AlliedSquadMet then
 926: LD_EXP 1
 930: NOT
 931: IFFALSE 1478
// begin ComEnterUnit ( Pravar , AMTank1 ) ;
 933: LD_EXP 13
 937: PPUSH
 938: LD_INT 17
 940: PPUSH
 941: CALL_OW 120
// ComEnterUnit ( Esther , Truc1 ) ;
 945: LD_EXP 14
 949: PPUSH
 950: LD_INT 22
 952: PPUSH
 953: CALL_OW 120
// ComEnterUnit ( AMEng , Truc2 ) ;
 957: LD_EXP 19
 961: PPUSH
 962: LD_INT 23
 964: PPUSH
 965: CALL_OW 120
// AddComMoveXY ( [ Pravar , Esther , AMEng , AMSolRand ] , 78 , 51 ) ;
 969: LD_EXP 13
 973: PUSH
 974: LD_EXP 14
 978: PUSH
 979: LD_EXP 19
 983: PUSH
 984: LD_EXP 20
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: LD_INT 78
 997: PPUSH
 998: LD_INT 51
1000: PPUSH
1001: CALL_OW 171
// wait ( 0 0$15 ) ;
1005: LD_INT 525
1007: PPUSH
1008: CALL_OW 67
// InGameOn ;
1012: CALL_OW 8
// ChangeSideFog ( 1 , 7 ) ;
1016: LD_INT 1
1018: PPUSH
1019: LD_INT 7
1021: PPUSH
1022: CALL_OW 343
// CenterOnUnits ( Pravar ) ;
1026: LD_EXP 13
1030: PPUSH
1031: CALL_OW 85
// Say ( Pravar , D2b-Sol-1 ) ;
1035: LD_EXP 13
1039: PPUSH
1040: LD_STRING D2b-Sol-1
1042: PPUSH
1043: CALL_OW 88
// Say ( Simone , D2b-Simone-1 ) ;
1047: LD_EXP 7
1051: PPUSH
1052: LD_STRING D2b-Simone-1
1054: PPUSH
1055: CALL_OW 88
// Say ( Pravar , D2b-Sol-2 ) ;
1059: LD_EXP 13
1063: PPUSH
1064: LD_STRING D2b-Sol-2
1066: PPUSH
1067: CALL_OW 88
// Say ( Simone , D2b-Simone-2 ) ;
1071: LD_EXP 7
1075: PPUSH
1076: LD_STRING D2b-Simone-2
1078: PPUSH
1079: CALL_OW 88
// SetSide ( [ Pravar , Esther , AMEng , AMSolRand , IsDrivenBy ( Pravar ) , IsDrivenBy ( Esther ) , IsDrivenBy ( AMEng ) ] , 7 ) ;
1083: LD_EXP 13
1087: PUSH
1088: LD_EXP 14
1092: PUSH
1093: LD_EXP 19
1097: PUSH
1098: LD_EXP 20
1102: PUSH
1103: LD_EXP 13
1107: PPUSH
1108: CALL_OW 311
1112: PUSH
1113: LD_EXP 14
1117: PPUSH
1118: CALL_OW 311
1122: PUSH
1123: LD_EXP 19
1127: PPUSH
1128: CALL_OW 311
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: PPUSH
1142: LD_INT 7
1144: PPUSH
1145: CALL_OW 235
// DWait ( 0 0$1 ) ;
1149: LD_INT 35
1151: PPUSH
1152: CALL_OW 68
// Say ( Simone , D2a-Simone-1 ) ;
1156: LD_EXP 7
1160: PPUSH
1161: LD_STRING D2a-Simone-1
1163: PPUSH
1164: CALL_OW 88
// Say ( Esther , D2a-Esther-1 ) ;
1168: LD_EXP 14
1172: PPUSH
1173: LD_STRING D2a-Esther-1
1175: PPUSH
1176: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
1180: LD_EXP 7
1184: PPUSH
1185: LD_STRING D2a-Simone-2
1187: PPUSH
1188: CALL_OW 88
// Say ( Esther , D2a-Esther-2 ) ;
1192: LD_EXP 14
1196: PPUSH
1197: LD_STRING D2a-Esther-2
1199: PPUSH
1200: CALL_OW 88
// Say ( Simone , D2a-Simone-3 ) ;
1204: LD_EXP 7
1208: PPUSH
1209: LD_STRING D2a-Simone-3
1211: PPUSH
1212: CALL_OW 88
// Say ( Simone , D2a-Simone-4 ) ;
1216: LD_EXP 7
1220: PPUSH
1221: LD_STRING D2a-Simone-4
1223: PPUSH
1224: CALL_OW 88
// DWait ( 0 0$1 ) ;
1228: LD_INT 35
1230: PPUSH
1231: CALL_OW 68
// Say ( Esther , D2a-Esther-3 ) ;
1235: LD_EXP 14
1239: PPUSH
1240: LD_STRING D2a-Esther-3
1242: PPUSH
1243: CALL_OW 88
// if not IsDead ( Edmonds ) then
1247: LD_EXP 10
1251: PPUSH
1252: CALL_OW 301
1256: NOT
1257: IFFALSE 1328
// begin Say ( Edmonds , D2a-Edmonds-1 ) ;
1259: LD_EXP 10
1263: PPUSH
1264: LD_STRING D2a-Edmonds-1
1266: PPUSH
1267: CALL_OW 88
// Say ( Esther , D2a-Esther-4 ) ;
1271: LD_EXP 14
1275: PPUSH
1276: LD_STRING D2a-Esther-4
1278: PPUSH
1279: CALL_OW 88
// Say ( Edmonds , D2a-Edmonds-2 ) ;
1283: LD_EXP 10
1287: PPUSH
1288: LD_STRING D2a-Edmonds-2
1290: PPUSH
1291: CALL_OW 88
// Say ( Edmonds , D2a-Edmonds-3 ) ;
1295: LD_EXP 10
1299: PPUSH
1300: LD_STRING D2a-Edmonds-3
1302: PPUSH
1303: CALL_OW 88
// Say ( Esther , D2a-Esther-5 ) ;
1307: LD_EXP 14
1311: PPUSH
1312: LD_STRING D2a-Esther-5
1314: PPUSH
1315: CALL_OW 88
// DWait ( 0 0$1 ) ;
1319: LD_INT 35
1321: PPUSH
1322: CALL_OW 68
// end else
1326: GO 1388
// begin Say ( Simone , D2a-Simone-5a ) ;
1328: LD_EXP 7
1332: PPUSH
1333: LD_STRING D2a-Simone-5a
1335: PPUSH
1336: CALL_OW 88
// Say ( Esther , D2a-Esther-4a ) ;
1340: LD_EXP 14
1344: PPUSH
1345: LD_STRING D2a-Esther-4a
1347: PPUSH
1348: CALL_OW 88
// Say ( Simone , D2a-Simone-6a ) ;
1352: LD_EXP 7
1356: PPUSH
1357: LD_STRING D2a-Simone-6a
1359: PPUSH
1360: CALL_OW 88
// Say ( Esther , D2a-Esther-5a ) ;
1364: LD_EXP 14
1368: PPUSH
1369: LD_STRING D2a-Esther-5a
1371: PPUSH
1372: CALL_OW 88
// Say ( Simone , D2a-Simone-7a ) ;
1376: LD_EXP 7
1380: PPUSH
1381: LD_STRING D2a-Simone-7a
1383: PPUSH
1384: CALL_OW 88
// end ; Say ( Simone , D2a-Simone-5 ) ;
1388: LD_EXP 7
1392: PPUSH
1393: LD_STRING D2a-Simone-5
1395: PPUSH
1396: CALL_OW 88
// Say ( Esther , D2a-Esther-6 ) ;
1400: LD_EXP 14
1404: PPUSH
1405: LD_STRING D2a-Esther-6
1407: PPUSH
1408: CALL_OW 88
// Say ( Esther , D2a-Esther-7 ) ;
1412: LD_EXP 14
1416: PPUSH
1417: LD_STRING D2a-Esther-7
1419: PPUSH
1420: CALL_OW 88
// Say ( Simone , D2a-Simone-6 ) ;
1424: LD_EXP 7
1428: PPUSH
1429: LD_STRING D2a-Simone-6
1431: PPUSH
1432: CALL_OW 88
// Say ( Esther , D2a-Esther-8 ) ;
1436: LD_EXP 14
1440: PPUSH
1441: LD_STRING D2a-Esther-8
1443: PPUSH
1444: CALL_OW 88
// Say ( Simone , D2a-Simone-7 ) ;
1448: LD_EXP 7
1452: PPUSH
1453: LD_STRING D2a-Simone-7
1455: PPUSH
1456: CALL_OW 88
// DWait ( 0 0$1 ) ;
1460: LD_INT 35
1462: PPUSH
1463: CALL_OW 68
// InGameOff ;
1467: CALL_OW 9
// ChangeMissionObjectives ( M1aa ) ;
1471: LD_STRING M1aa
1473: PPUSH
1474: CALL_OW 337
// end ; end ;
1478: END
// every 0 0$1 trigger OutpostCaptured do
1479: LD_EXP 2
1483: IFFALSE 1509
1485: GO 1487
1487: DISABLE
// begin Wait ( 2 2$25 ) ;
1488: LD_INT 5075
1490: PPUSH
1491: CALL_OW 67
// AlliedReinforcement ;
1495: CALL 5830 0 0
// CenterOnXY ( 47 , 86 ) ;
1499: LD_INT 47
1501: PPUSH
1502: LD_INT 86
1504: PPUSH
1505: CALL_OW 84
// end ;
1509: END
// every 0 0$1 trigger GetSide ( BioLab ) = 7 do
1510: LD_INT 3
1512: PPUSH
1513: CALL_OW 255
1517: PUSH
1518: LD_INT 7
1520: EQUAL
1521: IFFALSE 1715
1523: GO 1525
1525: DISABLE
// begin BioLabSecured = true ;
1526: LD_ADDR_EXP 3
1530: PUSH
1531: LD_INT 1
1533: ST_TO_ADDR
// Say ( Edmonds , D3c-Edmonds-1 ) ;
1534: LD_EXP 10
1538: PPUSH
1539: LD_STRING D3c-Edmonds-1
1541: PPUSH
1542: CALL_OW 88
// Say ( Esther , D3c-Esther-1 ) ;
1546: LD_EXP 14
1550: PPUSH
1551: LD_STRING D3c-Esther-1
1553: PPUSH
1554: CALL_OW 88
// Say ( Simone , D3c-Simone-1 ) ;
1558: LD_EXP 7
1562: PPUSH
1563: LD_STRING D3c-Simone-1
1565: PPUSH
1566: CALL_OW 88
// Say ( Esther , D3c-Esther-2 ) ;
1570: LD_EXP 14
1574: PPUSH
1575: LD_STRING D3c-Esther-2
1577: PPUSH
1578: CALL_OW 88
// Say ( Kathryn , D3c-Kathryn-1 ) ;
1582: LD_EXP 8
1586: PPUSH
1587: LD_STRING D3c-Kathryn-1
1589: PPUSH
1590: CALL_OW 88
// Say ( Simone , D3c-Simone-2 ) ;
1594: LD_EXP 7
1598: PPUSH
1599: LD_STRING D3c-Simone-2
1601: PPUSH
1602: CALL_OW 88
// Say ( Esther , D3c-Esther-3 ) ;
1606: LD_EXP 14
1610: PPUSH
1611: LD_STRING D3c-Esther-3
1613: PPUSH
1614: CALL_OW 88
// Say ( Esther , D3c-Esther-4a ) ;
1618: LD_EXP 14
1622: PPUSH
1623: LD_STRING D3c-Esther-4a
1625: PPUSH
1626: CALL_OW 88
// Say ( Esther , D3c-Esther-4b ) ;
1630: LD_EXP 14
1634: PPUSH
1635: LD_STRING D3c-Esther-4b
1637: PPUSH
1638: CALL_OW 88
// Say ( Simone , D3c-Simone-3 ) ;
1642: LD_EXP 7
1646: PPUSH
1647: LD_STRING D3c-Simone-3
1649: PPUSH
1650: CALL_OW 88
// Say ( Esther , D3c-Esther-5 ) ;
1654: LD_EXP 14
1658: PPUSH
1659: LD_STRING D3c-Esther-5
1661: PPUSH
1662: CALL_OW 88
// Say ( Kathryn , D3c-Kathryn-2 ) ;
1666: LD_EXP 8
1670: PPUSH
1671: LD_STRING D3c-Kathryn-2
1673: PPUSH
1674: CALL_OW 88
// ChangeMissionObjectives ( MEsther ) ;
1678: LD_STRING MEsther
1680: PPUSH
1681: CALL_OW 337
// SetAreaMapShow ( BioArea1Mark , 1 ) ;
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: CALL_OW 424
// SetAreaMapShow ( BioArea2Mark , 1 ) ;
1695: LD_INT 4
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: CALL_OW 424
// SetAreaMapShow ( BioArea3Mark , 1 ) ;
1705: LD_INT 6
1707: PPUSH
1708: LD_INT 1
1710: PPUSH
1711: CALL_OW 424
// end ;
1715: END
// every 0 0$1 trigger OutpostCaptured do var LabSpeaker , Squad , nul ;
1716: LD_EXP 2
1720: IFFALSE 2131
1722: GO 1724
1724: DISABLE
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
1729: PPUSH
// begin Wait ( 11 11$15 ) ;
1730: LD_INT 23625
1732: PPUSH
1733: CALL_OW 67
// DialogueOn ;
1737: CALL_OW 6
// if not IsDead ( Edmonds ) then
1741: LD_EXP 10
1745: PPUSH
1746: CALL_OW 301
1750: NOT
1751: IFFALSE 1887
// begin Say ( Edmonds , D4a-Edmonds-1 ) ;
1753: LD_EXP 10
1757: PPUSH
1758: LD_STRING D4a-Edmonds-1
1760: PPUSH
1761: CALL_OW 88
// Say ( Simone , D4a-Simone-1 ) ;
1765: LD_EXP 7
1769: PPUSH
1770: LD_STRING D4a-Simone-1
1772: PPUSH
1773: CALL_OW 88
// Say ( Edmonds , D4a-Edmonds-2 ) ;
1777: LD_EXP 10
1781: PPUSH
1782: LD_STRING D4a-Edmonds-2
1784: PPUSH
1785: CALL_OW 88
// Say ( Edmonds , D4a-Edmonds-3 ) ;
1789: LD_EXP 10
1793: PPUSH
1794: LD_STRING D4a-Edmonds-3
1796: PPUSH
1797: CALL_OW 88
// Say ( Kathryn , D4a-Kathryn-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING D4a-Kathryn-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Simone , D4a-Simone-2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_STRING D4a-Simone-2
1820: PPUSH
1821: CALL_OW 88
// Say ( Edmonds , D4a-Edmonds-4 ) ;
1825: LD_EXP 10
1829: PPUSH
1830: LD_STRING D4a-Edmonds-4
1832: PPUSH
1833: CALL_OW 88
// Say ( Edmonds , D4a-Edmonds-5 ) ;
1837: LD_EXP 10
1841: PPUSH
1842: LD_STRING D4a-Edmonds-5
1844: PPUSH
1845: CALL_OW 88
// Say ( Kathryn , D4a-Kathryn-2 ) ;
1849: LD_EXP 8
1853: PPUSH
1854: LD_STRING D4a-Kathryn-2
1856: PPUSH
1857: CALL_OW 88
// Say ( Edmonds , D4a-Edmonds-6 ) ;
1861: LD_EXP 10
1865: PPUSH
1866: LD_STRING D4a-Edmonds-6
1868: PPUSH
1869: CALL_OW 88
// Say ( Simone , D4a-Simone-3 ) ;
1873: LD_EXP 7
1877: PPUSH
1878: LD_STRING D4a-Simone-3
1880: PPUSH
1881: CALL_OW 88
// end else
1885: GO 2099
// begin Squad := FilterAllUnits ( [ f_side , 7 ] ) diff [ Simone , Kathryn , Esther , Miller ] ;
1887: LD_ADDR_VAR 0 2
1891: PUSH
1892: LD_INT 22
1894: PUSH
1895: LD_INT 7
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PPUSH
1902: CALL_OW 69
1906: PUSH
1907: LD_EXP 7
1911: PUSH
1912: LD_EXP 8
1916: PUSH
1917: LD_EXP 14
1921: PUSH
1922: LD_EXP 9
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: DIFF
1933: ST_TO_ADDR
// LabSpeaker := SortBySkill ( Squad , 4 ) ;
1934: LD_ADDR_VAR 0 1
1938: PUSH
1939: LD_VAR 0 2
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL 7773 0 2
1951: ST_TO_ADDR
// SaySex ( LabSpeaker [ 1 ] , D4b-Sci-1 , D4b-FemSci-1 ) ;
1952: LD_VAR 0 1
1956: PUSH
1957: LD_INT 1
1959: ARRAY
1960: PPUSH
1961: LD_STRING D4b-Sci-1
1963: PPUSH
1964: LD_STRING D4b-FemSci-1
1966: PPUSH
1967: CALL 7910 0 3
// SaySex ( LabSpeaker [ 1 ] , D4b-Sci-2 , D4b-FemSci-2 ) ;
1971: LD_VAR 0 1
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: LD_STRING D4b-Sci-2
1982: PPUSH
1983: LD_STRING D4b-FemSci-2
1985: PPUSH
1986: CALL 7910 0 3
// Say ( Simone , D4b-Simone-1 ) ;
1990: LD_EXP 7
1994: PPUSH
1995: LD_STRING D4b-Simone-1
1997: PPUSH
1998: CALL_OW 88
// SaySex ( LabSpeaker [ 1 ] , D4b-Sci-3 , D4b-FemSci-3 ) ;
2002: LD_VAR 0 1
2006: PUSH
2007: LD_INT 1
2009: ARRAY
2010: PPUSH
2011: LD_STRING D4b-Sci-3
2013: PPUSH
2014: LD_STRING D4b-FemSci-3
2016: PPUSH
2017: CALL 7910 0 3
// if GetSex ( LabSpeaker [ 1 ] ) = sex_male then
2021: LD_VAR 0 1
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: PPUSH
2030: CALL_OW 258
2034: PUSH
2035: LD_INT 1
2037: EQUAL
2038: IFFALSE 2068
// begin Say ( LabSpeaker [ 1 ] , D4b-Sci-4 ) ;
2040: LD_VAR 0 1
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_STRING D4b-Sci-4
2051: PPUSH
2052: CALL_OW 88
// Say ( Simone , D4b-Simone-2 ) ;
2056: LD_EXP 7
2060: PPUSH
2061: LD_STRING D4b-Simone-2
2063: PPUSH
2064: CALL_OW 88
// end ; SaySex ( LabSpeaker [ 1 ] , D4b-Sci-5 , D4b-FemSci-4 ) ;
2068: LD_VAR 0 1
2072: PUSH
2073: LD_INT 1
2075: ARRAY
2076: PPUSH
2077: LD_STRING D4b-Sci-5
2079: PPUSH
2080: LD_STRING D4b-FemSci-4
2082: PPUSH
2083: CALL 7910 0 3
// Say ( Simone , D4b-Simone-3 ) ;
2087: LD_EXP 7
2091: PPUSH
2092: LD_STRING D4b-Simone-3
2094: PPUSH
2095: CALL_OW 88
// end ; ChangeMissionObjectives ( MTesla ) ;
2099: LD_STRING MTesla
2101: PPUSH
2102: CALL_OW 337
// nul := Query ( QTesla ) ;
2106: LD_ADDR_VAR 0 3
2110: PUSH
2111: LD_STRING QTesla
2113: PPUSH
2114: CALL_OW 97
2118: ST_TO_ADDR
// TeslaQuestStart = true ;
2119: LD_ADDR_EXP 29
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// DialogueOff ;
2127: CALL_OW 7
// end ;
2131: PPOPN 3
2133: END
// every 0 0$1 trigger OutpostCaptured do
2134: LD_EXP 2
2138: IFFALSE 2398
2140: GO 2142
2142: DISABLE
// begin Wait ( 27 27$00 ) ;
2143: LD_INT 56700
2145: PPUSH
2146: CALL_OW 67
// DialogueOn ;
2150: CALL_OW 6
// Say ( Simone , D3a-Simone-1 ) ;
2154: LD_EXP 7
2158: PPUSH
2159: LD_STRING D3a-Simone-1
2161: PPUSH
2162: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-1 ) ;
2166: LD_EXP 8
2170: PPUSH
2171: LD_STRING D3a-Kathryn-1
2173: PPUSH
2174: CALL_OW 88
// Say ( Simone , D3a-Simone-2 ) ;
2178: LD_EXP 7
2182: PPUSH
2183: LD_STRING D3a-Simone-2
2185: PPUSH
2186: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-2 ) ;
2190: LD_EXP 8
2194: PPUSH
2195: LD_STRING D3a-Kathryn-2
2197: PPUSH
2198: CALL_OW 88
// Say ( Simone , D3a-Simone-3 ) ;
2202: LD_EXP 7
2206: PPUSH
2207: LD_STRING D3a-Simone-3
2209: PPUSH
2210: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-3 ) ;
2214: LD_EXP 8
2218: PPUSH
2219: LD_STRING D3a-Kathryn-3
2221: PPUSH
2222: CALL_OW 88
// Say ( Simone , D3a-Simone-4 ) ;
2226: LD_EXP 7
2230: PPUSH
2231: LD_STRING D3a-Simone-4
2233: PPUSH
2234: CALL_OW 88
// Say ( Simone , D3a-Simone-5 ) ;
2238: LD_EXP 7
2242: PPUSH
2243: LD_STRING D3a-Simone-5
2245: PPUSH
2246: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-4 ) ;
2250: LD_EXP 8
2254: PPUSH
2255: LD_STRING D3a-Kathryn-4
2257: PPUSH
2258: CALL_OW 88
// Say ( Simone , D3a-Simone-6 ) ;
2262: LD_EXP 7
2266: PPUSH
2267: LD_STRING D3a-Simone-6
2269: PPUSH
2270: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-5 ) ;
2274: LD_EXP 8
2278: PPUSH
2279: LD_STRING D3a-Kathryn-5
2281: PPUSH
2282: CALL_OW 88
// Say ( Simone , D3a-Simone-7 ) ;
2286: LD_EXP 7
2290: PPUSH
2291: LD_STRING D3a-Simone-7
2293: PPUSH
2294: CALL_OW 88
// Say ( Simone , D3a-Simone-8 ) ;
2298: LD_EXP 7
2302: PPUSH
2303: LD_STRING D3a-Simone-8
2305: PPUSH
2306: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-6 ) ;
2310: LD_EXP 8
2314: PPUSH
2315: LD_STRING D3a-Kathryn-6
2317: PPUSH
2318: CALL_OW 88
// Say ( Simone , D3a-Simone-9 ) ;
2322: LD_EXP 7
2326: PPUSH
2327: LD_STRING D3a-Simone-9
2329: PPUSH
2330: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-7 ) ;
2334: LD_EXP 8
2338: PPUSH
2339: LD_STRING D3a-Kathryn-7
2341: PPUSH
2342: CALL_OW 88
// Say ( Simone , D3a-Simone-10 ) ;
2346: LD_EXP 7
2350: PPUSH
2351: LD_STRING D3a-Simone-10
2353: PPUSH
2354: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-8 ) ;
2358: LD_EXP 8
2362: PPUSH
2363: LD_STRING D3a-Kathryn-8
2365: PPUSH
2366: CALL_OW 88
// Say ( Simone , D3a-Simone-11 ) ;
2370: LD_EXP 7
2374: PPUSH
2375: LD_STRING D3a-Simone-11
2377: PPUSH
2378: CALL_OW 88
// Say ( Kathryn , D3a-Kathryn-9 ) ;
2382: LD_EXP 8
2386: PPUSH
2387: LD_STRING D3a-Kathryn-9
2389: PPUSH
2390: CALL_OW 88
// DialogueOff ;
2394: CALL_OW 7
// end ;
2398: END
// every 0 0$1 trigger OutpostCaptured do var Vehs , Solds ;
2399: LD_EXP 2
2403: IFFALSE 2654
2405: GO 2407
2407: DISABLE
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
// begin Wait ( Rand ( 12 12$10 , 15 15$00 ) ) ;
2412: LD_INT 25550
2414: PPUSH
2415: LD_INT 31500
2417: PPUSH
2418: CALL_OW 12
2422: PPUSH
2423: CALL_OW 67
// DialogueOn ;
2427: CALL_OW 6
// SayRadio ( Barnes , D4-Barnes-1 ) ;
2431: LD_EXP 16
2435: PPUSH
2436: LD_STRING D4-Barnes-1
2438: PPUSH
2439: CALL_OW 94
// Say ( Simone , D4-Simone-1 ) ;
2443: LD_EXP 7
2447: PPUSH
2448: LD_STRING D4-Simone-1
2450: PPUSH
2451: CALL_OW 88
// DialogueOff ;
2455: CALL_OW 7
// Solds := [ Rand ( 1 , 2 ) , Rand ( 2 , 3 ) , 3 ] [ Difficulty ] ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 2
2469: PPUSH
2470: CALL_OW 12
2474: PUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 3
2480: PPUSH
2481: CALL_OW 12
2485: PUSH
2486: LD_INT 3
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: LD_OWVAR 67
2498: ARRAY
2499: ST_TO_ADDR
// Vehs := [ 1 , 2 , 2 ] [ Difficulty ] ;
2500: LD_ADDR_VAR 0 1
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: LD_INT 2
2510: PUSH
2511: LD_INT 2
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_OWVAR 67
2523: ARRAY
2524: ST_TO_ADDR
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
2525: LD_INT 2100
2527: PPUSH
2528: LD_INT 5250
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: CALL_OW 67
// PrepareConvoy ( 2 , Solds , Vehs , 2 , [ 25 , 27 ] , 1 ) ;
2540: LD_INT 2
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: LD_VAR 0 1
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 27
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PPUSH
2566: LD_INT 1
2568: PPUSH
2569: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 159 , 86 ) ;
2573: LD_EXP 32
2577: PPUSH
2578: LD_INT 159
2580: PPUSH
2581: LD_INT 86
2583: PPUSH
2584: CALL_OW 114
// Wait ( 0 0$20 ) ;
2588: LD_INT 700
2590: PPUSH
2591: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 120 , 85 ) ;
2595: LD_EXP 32
2599: PPUSH
2600: LD_INT 120
2602: PPUSH
2603: LD_INT 85
2605: PPUSH
2606: CALL_OW 114
// Wait ( 0 0$20 ) ;
2610: LD_INT 700
2612: PPUSH
2613: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 78 , 84 ) ;
2617: LD_EXP 32
2621: PPUSH
2622: LD_INT 78
2624: PPUSH
2625: LD_INT 84
2627: PPUSH
2628: CALL_OW 114
// Wait ( 0 0$20 ) ;
2632: LD_INT 700
2634: PPUSH
2635: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 46 , 86 ) ;
2639: LD_EXP 32
2643: PPUSH
2644: LD_INT 46
2646: PPUSH
2647: LD_INT 86
2649: PPUSH
2650: CALL_OW 114
// end ;
2654: PPOPN 2
2656: END
// every 0 0$1 trigger OutpostCaptured do var Solds ;
2657: LD_EXP 2
2661: IFFALSE 2892
2663: GO 2665
2665: DISABLE
2666: LD_INT 0
2668: PPUSH
// begin Wait ( Rand ( 19 19$20 , 22 22$00 ) ) ;
2669: LD_INT 40600
2671: PPUSH
2672: LD_INT 46200
2674: PPUSH
2675: CALL_OW 12
2679: PPUSH
2680: CALL_OW 67
// DialogueOn ;
2684: CALL_OW 6
// SayRadio ( Barnes , D4-Barnes-2 ) ;
2688: LD_EXP 16
2692: PPUSH
2693: LD_STRING D4-Barnes-2
2695: PPUSH
2696: CALL_OW 94
// Say ( Simone , D4-Simone-2 ) ;
2700: LD_EXP 7
2704: PPUSH
2705: LD_STRING D4-Simone-2
2707: PPUSH
2708: CALL_OW 88
// DialogueOff ;
2712: CALL_OW 7
// Solds := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 4 ) ] [ Difficulty ] ;
2716: LD_ADDR_VAR 0 1
2720: PUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_INT 3
2726: PPUSH
2727: CALL_OW 12
2731: PUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 4
2737: PPUSH
2738: CALL_OW 12
2742: PUSH
2743: LD_INT 3
2745: PPUSH
2746: LD_INT 4
2748: PPUSH
2749: CALL_OW 12
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: PUSH
2759: LD_OWVAR 67
2763: ARRAY
2764: ST_TO_ADDR
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
2765: LD_INT 2100
2767: PPUSH
2768: LD_INT 5250
2770: PPUSH
2771: CALL_OW 12
2775: PPUSH
2776: CALL_OW 67
// PrepareConvoy ( 1 , Solds , 2 , 3 , [ 25 , 27 ] , 1 ) ;
2780: LD_INT 1
2782: PPUSH
2783: LD_VAR 0 1
2787: PPUSH
2788: LD_INT 2
2790: PPUSH
2791: LD_INT 3
2793: PPUSH
2794: LD_INT 25
2796: PUSH
2797: LD_INT 27
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PPUSH
2804: LD_INT 1
2806: PPUSH
2807: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 105 , 41 ) ;
2811: LD_EXP 32
2815: PPUSH
2816: LD_INT 105
2818: PPUSH
2819: LD_INT 41
2821: PPUSH
2822: CALL_OW 114
// Wait ( 0 0$25 ) ;
2826: LD_INT 875
2828: PPUSH
2829: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 120 , 85 ) ;
2833: LD_EXP 32
2837: PPUSH
2838: LD_INT 120
2840: PPUSH
2841: LD_INT 85
2843: PPUSH
2844: CALL_OW 114
// Wait ( 0 0$20 ) ;
2848: LD_INT 700
2850: PPUSH
2851: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 78 , 84 ) ;
2855: LD_EXP 32
2859: PPUSH
2860: LD_INT 78
2862: PPUSH
2863: LD_INT 84
2865: PPUSH
2866: CALL_OW 114
// Wait ( 0 0$20 ) ;
2870: LD_INT 700
2872: PPUSH
2873: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 46 , 86 ) ;
2877: LD_EXP 32
2881: PPUSH
2882: LD_INT 46
2884: PPUSH
2885: LD_INT 86
2887: PPUSH
2888: CALL_OW 114
// end ;
2892: PPOPN 1
2894: END
// every 0 0$1 trigger OutpostCaptured do var Solds , Vehs ;
2895: LD_EXP 2
2899: IFFALSE 3199
2901: GO 2903
2903: DISABLE
2904: LD_INT 0
2906: PPUSH
2907: PPUSH
// begin Wait ( Rand ( 33 33$40 , 36 36$00 ) ) ;
2908: LD_INT 70700
2910: PPUSH
2911: LD_INT 75600
2913: PPUSH
2914: CALL_OW 12
2918: PPUSH
2919: CALL_OW 67
// DialogueOn ;
2923: CALL_OW 6
// SayRadio ( Barnes , D4-Barnes-3 ) ;
2927: LD_EXP 16
2931: PPUSH
2932: LD_STRING D4-Barnes-3
2934: PPUSH
2935: CALL_OW 94
// DialogueOff ;
2939: CALL_OW 7
// Solds := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
2943: LD_ADDR_VAR 0 1
2947: PUSH
2948: LD_INT 2
2950: PPUSH
2951: LD_INT 3
2953: PPUSH
2954: CALL_OW 12
2958: PUSH
2959: LD_INT 2
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 12
2969: PUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: CALL_OW 12
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: PUSH
2986: LD_OWVAR 67
2990: ARRAY
2991: ST_TO_ADDR
// Vehs := [ Rand ( 1 , 2 ) , 2 , Rand ( 2 , 3 ) ] [ Difficulty ] ;
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 12
3007: PUSH
3008: LD_INT 2
3010: PUSH
3011: LD_INT 2
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: CALL_OW 12
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_OWVAR 67
3031: ARRAY
3032: ST_TO_ADDR
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
3033: LD_INT 2100
3035: PPUSH
3036: LD_INT 5250
3038: PPUSH
3039: CALL_OW 12
3043: PPUSH
3044: CALL_OW 67
// PrepareConvoy ( 2 , Solds , Vehs , 3 , [ 25 , 27 , 26 ] , 1 ) ;
3048: LD_INT 2
3050: PPUSH
3051: LD_VAR 0 1
3055: PPUSH
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_INT 3
3063: PPUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 27
3069: PUSH
3070: LD_INT 26
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: LIST
3077: PPUSH
3078: LD_INT 1
3080: PPUSH
3081: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 159 , 86 ) ;
3085: LD_EXP 32
3089: PPUSH
3090: LD_INT 159
3092: PPUSH
3093: LD_INT 86
3095: PPUSH
3096: CALL_OW 114
// Wait ( 0 0$20 ) ;
3100: LD_INT 700
3102: PPUSH
3103: CALL_OW 67
// PrepareConvoy ( 2 , 0 , 1 , 2 , [ 25 , 27 , 26 ] , 1 ) ;
3107: LD_INT 2
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: LD_INT 1
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: LD_INT 25
3121: PUSH
3122: LD_INT 27
3124: PUSH
3125: LD_INT 26
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: PPUSH
3133: LD_INT 1
3135: PPUSH
3136: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 120 , 85 ) ;
3140: LD_EXP 32
3144: PPUSH
3145: LD_INT 120
3147: PPUSH
3148: LD_INT 85
3150: PPUSH
3151: CALL_OW 114
// Wait ( 0 0$20 ) ;
3155: LD_INT 700
3157: PPUSH
3158: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 78 , 84 ) ;
3162: LD_EXP 32
3166: PPUSH
3167: LD_INT 78
3169: PPUSH
3170: LD_INT 84
3172: PPUSH
3173: CALL_OW 114
// Wait ( 0 0$20 ) ;
3177: LD_INT 700
3179: PPUSH
3180: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 46 , 86 ) ;
3184: LD_EXP 32
3188: PPUSH
3189: LD_INT 46
3191: PPUSH
3192: LD_INT 86
3194: PPUSH
3195: CALL_OW 114
// end ;
3199: PPOPN 2
3201: END
// every 0 0$1 trigger OutpostCaptured do var Solds , Vehs , Solds2 , Vehs2 ;
3202: LD_EXP 2
3206: IFFALSE 3662
3208: GO 3210
3210: DISABLE
3211: LD_INT 0
3213: PPUSH
3214: PPUSH
3215: PPUSH
3216: PPUSH
// begin Wait ( Rand ( 45 45$00 , 48 48$00 ) ) ;
3217: LD_INT 94500
3219: PPUSH
3220: LD_INT 100800
3222: PPUSH
3223: CALL_OW 12
3227: PPUSH
3228: CALL_OW 67
// DialogueOn ;
3232: CALL_OW 6
// SayRadio ( Barnes , D4-Barnes-4 ) ;
3236: LD_EXP 16
3240: PPUSH
3241: LD_STRING D4-Barnes-4
3243: PPUSH
3244: CALL_OW 94
// DialogueOff ;
3248: CALL_OW 7
// Solds := [ Rand ( 1 , 3 ) , Rand ( 2 , 3 ) , Rand ( 2 , 4 ) ] [ Difficulty ] ;
3252: LD_ADDR_VAR 0 1
3256: PUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 12
3267: PUSH
3268: LD_INT 2
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: CALL_OW 12
3278: PUSH
3279: LD_INT 2
3281: PPUSH
3282: LD_INT 4
3284: PPUSH
3285: CALL_OW 12
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: PUSH
3295: LD_OWVAR 67
3299: ARRAY
3300: ST_TO_ADDR
// Vehs := [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
3301: LD_ADDR_VAR 0 2
3305: PUSH
3306: LD_INT 1
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 12
3316: PUSH
3317: LD_INT 1
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PUSH
3328: LD_INT 2
3330: PPUSH
3331: LD_INT 3
3333: PPUSH
3334: CALL_OW 12
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: LIST
3343: PUSH
3344: LD_OWVAR 67
3348: ARRAY
3349: ST_TO_ADDR
// Solds2 := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 3
3360: PPUSH
3361: CALL_OW 12
3365: PUSH
3366: LD_INT 2
3368: PPUSH
3369: LD_INT 4
3371: PPUSH
3372: CALL_OW 12
3376: PUSH
3377: LD_INT 3
3379: PPUSH
3380: LD_INT 5
3382: PPUSH
3383: CALL_OW 12
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_OWVAR 67
3397: ARRAY
3398: ST_TO_ADDR
// Vehs2 := [ 1 , 1 , 2 ] [ Difficulty ] ;
3399: LD_ADDR_VAR 0 4
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 2
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: PUSH
3418: LD_OWVAR 67
3422: ARRAY
3423: ST_TO_ADDR
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
3424: LD_INT 2100
3426: PPUSH
3427: LD_INT 5250
3429: PPUSH
3430: CALL_OW 12
3434: PPUSH
3435: CALL_OW 67
// PrepareConvoy ( 1 , Solds , Vehs , 3 , [ 25 , 27 , 26 , 28 ] , 1 ) ;
3439: LD_INT 1
3441: PPUSH
3442: LD_VAR 0 1
3446: PPUSH
3447: LD_VAR 0 2
3451: PPUSH
3452: LD_INT 3
3454: PPUSH
3455: LD_INT 25
3457: PUSH
3458: LD_INT 27
3460: PUSH
3461: LD_INT 26
3463: PUSH
3464: LD_INT 28
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: CALL 9484 0 6
// PrepareConvoy ( 3 , Solds2 , Vehs2 , 3 , [ 25 , 27 , 26 , 28 ] , 2 ) ;
3480: LD_INT 3
3482: PPUSH
3483: LD_VAR 0 3
3487: PPUSH
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_INT 3
3495: PPUSH
3496: LD_INT 25
3498: PUSH
3499: LD_INT 27
3501: PUSH
3502: LD_INT 26
3504: PUSH
3505: LD_INT 28
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PPUSH
3514: LD_INT 2
3516: PPUSH
3517: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 105 , 41 ) ;
3521: LD_EXP 32
3525: PPUSH
3526: LD_INT 105
3528: PPUSH
3529: LD_INT 41
3531: PPUSH
3532: CALL_OW 114
// ComAgressiveMove ( ConvoyGroup2 , 137 , 123 ) ;
3536: LD_EXP 33
3540: PPUSH
3541: LD_INT 137
3543: PPUSH
3544: LD_INT 123
3546: PPUSH
3547: CALL_OW 114
// Wait ( 0 0$25 ) ;
3551: LD_INT 875
3553: PPUSH
3554: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 120 , 85 ) ;
3558: LD_EXP 32
3562: PPUSH
3563: LD_INT 120
3565: PPUSH
3566: LD_INT 85
3568: PPUSH
3569: CALL_OW 114
// ComAgressiveMove ( ConvoyGroup2 , 120 , 85 ) ;
3573: LD_EXP 33
3577: PPUSH
3578: LD_INT 120
3580: PPUSH
3581: LD_INT 85
3583: PPUSH
3584: CALL_OW 114
// Wait ( 0 0$20 ) ;
3588: LD_INT 700
3590: PPUSH
3591: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 78 , 84 ) ;
3595: LD_EXP 32
3599: PPUSH
3600: LD_INT 78
3602: PPUSH
3603: LD_INT 84
3605: PPUSH
3606: CALL_OW 114
// ComAgressiveMove ( ConvoyGroup2 , 78 , 84 ) ;
3610: LD_EXP 33
3614: PPUSH
3615: LD_INT 78
3617: PPUSH
3618: LD_INT 84
3620: PPUSH
3621: CALL_OW 114
// Wait ( 0 0$20 ) ;
3625: LD_INT 700
3627: PPUSH
3628: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 46 , 86 ) ;
3632: LD_EXP 32
3636: PPUSH
3637: LD_INT 46
3639: PPUSH
3640: LD_INT 86
3642: PPUSH
3643: CALL_OW 114
// ComAgressiveMove ( ConvoyGroup2 , 46 , 86 ) ;
3647: LD_EXP 33
3651: PPUSH
3652: LD_INT 46
3654: PPUSH
3655: LD_INT 86
3657: PPUSH
3658: CALL_OW 114
// end ;
3662: PPOPN 4
3664: END
// every 0 0$1 trigger OutpostCaptured do var Solds , Vehs ;
3665: LD_EXP 2
3669: IFFALSE 3948
3671: GO 3673
3673: DISABLE
3674: LD_INT 0
3676: PPUSH
3677: PPUSH
// begin Wait ( Rand ( 61 61$30 , 64 64$00 ) ) ;
3678: LD_INT 129150
3680: PPUSH
3681: LD_INT 134400
3683: PPUSH
3684: CALL_OW 12
3688: PPUSH
3689: CALL_OW 67
// DialogueOn ;
3693: CALL_OW 6
// SayRadio ( Barnes , D4-Barnes-5 ) ;
3697: LD_EXP 16
3701: PPUSH
3702: LD_STRING D4-Barnes-5
3704: PPUSH
3705: CALL_OW 94
// DialogueOff ;
3709: CALL_OW 7
// Solds := [ Rand ( 4 , 5 ) , Rand ( 5 , 7 ) , Rand ( 5 , 8 ) ] [ Difficulty ] ;
3713: LD_ADDR_VAR 0 1
3717: PUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 5
3723: PPUSH
3724: CALL_OW 12
3728: PUSH
3729: LD_INT 5
3731: PPUSH
3732: LD_INT 7
3734: PPUSH
3735: CALL_OW 12
3739: PUSH
3740: LD_INT 5
3742: PPUSH
3743: LD_INT 8
3745: PPUSH
3746: CALL_OW 12
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: ST_TO_ADDR
// Vehs := [ Rand ( 2 , 3 ) , Rand ( 3 , 5 ) , Rand ( 4 , 6 ) ] [ Difficulty ] ;
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_INT 2
3769: PPUSH
3770: LD_INT 3
3772: PPUSH
3773: CALL_OW 12
3777: PUSH
3778: LD_INT 3
3780: PPUSH
3781: LD_INT 5
3783: PPUSH
3784: CALL_OW 12
3788: PUSH
3789: LD_INT 4
3791: PPUSH
3792: LD_INT 6
3794: PPUSH
3795: CALL_OW 12
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_OWVAR 67
3809: ARRAY
3810: ST_TO_ADDR
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
3811: LD_INT 2100
3813: PPUSH
3814: LD_INT 5250
3816: PPUSH
3817: CALL_OW 12
3821: PPUSH
3822: CALL_OW 67
// PrepareConvoy ( 3 , Solds , Vehs , 0 , [ 25 , 27 , 26 , 28 ] , 1 ) ;
3826: LD_INT 3
3828: PPUSH
3829: LD_VAR 0 1
3833: PPUSH
3834: LD_VAR 0 2
3838: PPUSH
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 27
3847: PUSH
3848: LD_INT 26
3850: PUSH
3851: LD_INT 28
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: CALL 9484 0 6
// ComAgressiveMove ( ConvoyGroup , 137 , 123 ) ;
3867: LD_EXP 32
3871: PPUSH
3872: LD_INT 137
3874: PPUSH
3875: LD_INT 123
3877: PPUSH
3878: CALL_OW 114
// Wait ( 0 0$25 ) ;
3882: LD_INT 875
3884: PPUSH
3885: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 120 , 85 ) ;
3889: LD_EXP 32
3893: PPUSH
3894: LD_INT 120
3896: PPUSH
3897: LD_INT 85
3899: PPUSH
3900: CALL_OW 114
// Wait ( 0 0$20 ) ;
3904: LD_INT 700
3906: PPUSH
3907: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 78 , 84 ) ;
3911: LD_EXP 32
3915: PPUSH
3916: LD_INT 78
3918: PPUSH
3919: LD_INT 84
3921: PPUSH
3922: CALL_OW 114
// Wait ( 0 0$20 ) ;
3926: LD_INT 700
3928: PPUSH
3929: CALL_OW 67
// ComAgressiveMove ( ConvoyGroup , 46 , 86 ) ;
3933: LD_EXP 32
3937: PPUSH
3938: LD_INT 46
3940: PPUSH
3941: LD_INT 86
3943: PPUSH
3944: CALL_OW 114
// end ;
3948: PPOPN 2
3950: END
// every 0 0$1 trigger OutpostCaptured do
3951: LD_EXP 2
3955: IFFALSE 4788
3957: GO 3959
3959: DISABLE
// begin Wait ( Rand ( 67 67$20 , 68 68$40 ) ) ;
3960: LD_INT 141400
3962: PPUSH
3963: LD_INT 144200
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 67
// LastStand = true ;
3975: LD_ADDR_EXP 4
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// SayRadio ( Loghain , D5-Loghain-1 ) ;
3983: LD_EXP 17
3987: PPUSH
3988: LD_STRING D5-Loghain-1
3990: PPUSH
3991: CALL_OW 94
// SayRadio ( Barnes , D5-Barnes-1 ) ;
3995: LD_EXP 16
3999: PPUSH
4000: LD_STRING D5-Barnes-1
4002: PPUSH
4003: CALL_OW 94
// SayRadio ( Loghain , D5-Loghain-2 ) ;
4007: LD_EXP 17
4011: PPUSH
4012: LD_STRING D5-Loghain-2
4014: PPUSH
4015: CALL_OW 94
// Wait ( 0 0$20 ) ;
4019: LD_INT 700
4021: PPUSH
4022: CALL_OW 67
// SayRadio ( Smithy , D5-Smithy-1 ) ;
4026: LD_EXP 18
4030: PPUSH
4031: LD_STRING D5-Smithy-1
4033: PPUSH
4034: CALL_OW 94
// SayRadio ( Barnes , D5-Barnes-2 ) ;
4038: LD_EXP 16
4042: PPUSH
4043: LD_STRING D5-Barnes-2
4045: PPUSH
4046: CALL_OW 94
// Wait ( Rand ( 1 1$0 , 2 2$30 ) ) ;
4050: LD_INT 2100
4052: PPUSH
4053: LD_INT 5250
4055: PPUSH
4056: CALL_OW 12
4060: PPUSH
4061: CALL_OW 67
// SayRadio ( Loghain , D5a-Loghain-1 ) ;
4065: LD_EXP 17
4069: PPUSH
4070: LD_STRING D5a-Loghain-1
4072: PPUSH
4073: CALL_OW 94
// SayRadio ( Barnes , D5a-Barnes-1 ) ;
4077: LD_EXP 16
4081: PPUSH
4082: LD_STRING D5a-Barnes-1
4084: PPUSH
4085: CALL_OW 94
// SayRadio ( Loghain , D5a-Loghain-2 ) ;
4089: LD_EXP 17
4093: PPUSH
4094: LD_STRING D5a-Loghain-2
4096: PPUSH
4097: CALL_OW 94
// Wait ( 0 0$30 ) ;
4101: LD_INT 1050
4103: PPUSH
4104: CALL_OW 67
// SayRadio ( Barnes , D6-Barnes-1 ) ;
4108: LD_EXP 16
4112: PPUSH
4113: LD_STRING D6-Barnes-1
4115: PPUSH
4116: CALL_OW 94
// Say ( Simone , D6-Simone-1 ) ;
4120: LD_EXP 7
4124: PPUSH
4125: LD_STRING D6-Simone-1
4127: PPUSH
4128: CALL_OW 88
// SayRadio ( Barnes , D6-Barnes-2 ) ;
4132: LD_EXP 16
4136: PPUSH
4137: LD_STRING D6-Barnes-2
4139: PPUSH
4140: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
4144: LD_EXP 7
4148: PPUSH
4149: LD_STRING D6-Simone-2
4151: PPUSH
4152: CALL_OW 88
// Wait ( 0 0$5 ) ;
4156: LD_INT 175
4158: PPUSH
4159: CALL_OW 67
// if Difficulty = 3 then
4163: LD_OWVAR 67
4167: PUSH
4168: LD_INT 3
4170: EQUAL
4171: IFFALSE 4182
// SetMercenaryAggressivenessLevel ( 8 ) else
4173: LD_INT 8
4175: PPUSH
4176: CALL 12255 0 1
4180: GO 4189
// SetMercenaryAggressivenessLevel ( 5 ) ;
4182: LD_INT 5
4184: PPUSH
4185: CALL 12255 0 1
// InGameOn ;
4189: CALL_OW 8
// CenterOnXY ( 78 , 53 ) ;
4193: LD_INT 78
4195: PPUSH
4196: LD_INT 53
4198: PPUSH
4199: CALL_OW 84
// SayRadio ( Dvalishvili , D6-Dvali-1 ) ;
4203: LD_EXP 15
4207: PPUSH
4208: LD_STRING D6-Dvali-1
4210: PPUSH
4211: CALL_OW 94
// Say ( Simone , D6-Simone-3 ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_STRING D6-Simone-3
4222: PPUSH
4223: CALL_OW 88
// SayRadio ( Dvalishvili , D6-Dvali-2 ) ;
4227: LD_EXP 15
4231: PPUSH
4232: LD_STRING D6-Dvali-2
4234: PPUSH
4235: CALL_OW 94
// ChangeSideFog ( 8 , 7 ) ;
4239: LD_INT 8
4241: PPUSH
4242: LD_INT 7
4244: PPUSH
4245: CALL_OW 343
// CenterOnXY ( 90 , 4 ) ;
4249: LD_INT 90
4251: PPUSH
4252: LD_INT 4
4254: PPUSH
4255: CALL_OW 84
// GenerateVehicleAttack ( 8 , 1 , 3 ) ;
4259: LD_INT 8
4261: PPUSH
4262: LD_INT 1
4264: PPUSH
4265: LD_INT 3
4267: PPUSH
4268: CALL 7961 0 3
// CenterOnXY ( 180 , 85 ) ;
4272: LD_INT 180
4274: PPUSH
4275: LD_INT 85
4277: PPUSH
4278: CALL_OW 84
// GenerateVehicleAttack ( 8 , 2 , 4 ) ;
4282: LD_INT 8
4284: PPUSH
4285: LD_INT 2
4287: PPUSH
4288: LD_INT 4
4290: PPUSH
4291: CALL 7961 0 3
// CenterOnXY ( 148 , 158 ) ;
4295: LD_INT 148
4297: PPUSH
4298: LD_INT 158
4300: PPUSH
4301: CALL_OW 84
// GenerateVehicleAttack ( 8 , 3 , 4 ) ;
4305: LD_INT 8
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: CALL 7961 0 3
// ChangeSideFog ( 8 , 8 ) ;
4318: LD_INT 8
4320: PPUSH
4321: LD_INT 8
4323: PPUSH
4324: CALL_OW 343
// CenterOnXY ( 78 , 53 ) ;
4328: LD_INT 78
4330: PPUSH
4331: LD_INT 53
4333: PPUSH
4334: CALL_OW 84
// DWait ( 0 0$1 ) ;
4338: LD_INT 35
4340: PPUSH
4341: CALL_OW 68
// Say ( Esther , D6-Esther-1 ) ;
4345: LD_EXP 14
4349: PPUSH
4350: LD_STRING D6-Esther-1
4352: PPUSH
4353: CALL_OW 88
// SayRadio ( Dvalishvili , D6-Dvali-3 ) ;
4357: LD_EXP 15
4361: PPUSH
4362: LD_STRING D6-Dvali-3
4364: PPUSH
4365: CALL_OW 94
// InGameOff ;
4369: CALL_OW 9
// RespawnAttackInfantry ( 8 , 2 , 8 , 0 , 0 , 3 , 0 , ARSolSkill , SoldierSpawn ) ;
4373: LD_INT 8
4375: PPUSH
4376: LD_INT 2
4378: PPUSH
4379: LD_INT 8
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: LD_INT 3
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: LD_EXP 36
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: CALL 8906 0 9
// Say ( Simone , D6-Simone-4 ) ;
4406: LD_EXP 7
4410: PPUSH
4411: LD_STRING D6-Simone-4
4413: PPUSH
4414: CALL_OW 88
// SayRadio ( Barnes , D6-Barnes-3 ) ;
4418: LD_EXP 16
4422: PPUSH
4423: LD_STRING D6-Barnes-3
4425: PPUSH
4426: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
4430: LD_STRING M2
4432: PPUSH
4433: CALL_OW 337
// Wait ( 2 2$0 ) ;
4437: LD_INT 4200
4439: PPUSH
4440: CALL_OW 67
// GenerateVehicleAttack ( 8 , 0 , 9 ) ;
4444: LD_INT 8
4446: PPUSH
4447: LD_INT 0
4449: PPUSH
4450: LD_INT 9
4452: PPUSH
4453: CALL 7961 0 3
// RespawnAttackInfantry ( 8 , 2 , 11 , 0 , 0 , 2 , 0 , ARSolSkill , SoldierSpawn ) ;
4457: LD_INT 8
4459: PPUSH
4460: LD_INT 2
4462: PPUSH
4463: LD_INT 11
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 2
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: LD_EXP 36
4482: PPUSH
4483: LD_INT 12
4485: PPUSH
4486: CALL 8906 0 9
// Wait ( 2 2$30 ) ;
4490: LD_INT 5250
4492: PPUSH
4493: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , 7 , 0 , 0 , 2 , 0 , ARSolSkill , SoldierSpawn ) ;
4497: LD_INT 8
4499: PPUSH
4500: LD_INT 2
4502: PPUSH
4503: LD_INT 7
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: LD_INT 0
4511: PPUSH
4512: LD_INT 2
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: LD_EXP 36
4522: PPUSH
4523: LD_INT 12
4525: PPUSH
4526: CALL 8906 0 9
// GenerateVehicleAttack ( 8 , 0 , 10 ) ;
4530: LD_INT 8
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: LD_INT 10
4538: PPUSH
4539: CALL 7961 0 3
// RespawnAttackInfantry ( 8 , 2 , 14 , 0 , 0 , 4 , 0 , ARSolSkill , SoldierSpawn ) ;
4543: LD_INT 8
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_INT 14
4551: PPUSH
4552: LD_INT 0
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 0
4563: PPUSH
4564: LD_EXP 36
4568: PPUSH
4569: LD_INT 12
4571: PPUSH
4572: CALL 8906 0 9
// Wait ( 2 2$50 ) ;
4576: LD_INT 5950
4578: PPUSH
4579: CALL_OW 67
// InGameOn ;
4583: CALL_OW 8
// SayRadio ( Barnes , D7-Barnes-1 ) ;
4587: LD_EXP 16
4591: PPUSH
4592: LD_STRING D7-Barnes-1
4594: PPUSH
4595: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
4599: LD_EXP 7
4603: PPUSH
4604: LD_STRING D7-Simone-1
4606: PPUSH
4607: CALL_OW 88
// SayRadio ( Barnes , D7-Barnes-2 ) ;
4611: LD_EXP 16
4615: PPUSH
4616: LD_STRING D7-Barnes-2
4618: PPUSH
4619: CALL_OW 94
// Say ( Simone , D7-Simone-2 ) ;
4623: LD_EXP 7
4627: PPUSH
4628: LD_STRING D7-Simone-2
4630: PPUSH
4631: CALL_OW 88
// Say ( Kathryn , D7-Kathryn-1 ) ;
4635: LD_EXP 8
4639: PPUSH
4640: LD_STRING D7-Kathryn-1
4642: PPUSH
4643: CALL_OW 88
// Say ( Simone , D7-Simone-3 ) ;
4647: LD_EXP 7
4651: PPUSH
4652: LD_STRING D7-Simone-3
4654: PPUSH
4655: CALL_OW 88
// InGameOff ;
4659: CALL_OW 9
// LastStand = false ;
4663: LD_ADDR_EXP 4
4667: PUSH
4668: LD_INT 0
4670: ST_TO_ADDR
// Evacuation = true ;
4671: LD_ADDR_EXP 5
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// player_units = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
4679: LD_ADDR_EXP 66
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 7
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 21
4696: PUSH
4697: LD_INT 1
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PPUSH
4708: CALL_OW 69
4712: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
4713: LD_STRING M3
4715: PPUSH
4716: CALL_OW 337
// SetAreaMapShow ( ExitArea , 1 ) ;
4720: LD_INT 11
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 424
// Say ( Simone , D7-Simone-4 ) ;
4730: LD_EXP 7
4734: PPUSH
4735: LD_STRING D7-Simone-4
4737: PPUSH
4738: CALL_OW 88
// RespawnAttackInfantry ( 8 , 2 , 5 , 0 , 0 , 1 , 0 , ARSolSkill , SoldierSpawn ) ;
4742: LD_INT 8
4744: PPUSH
4745: LD_INT 2
4747: PPUSH
4748: LD_INT 5
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: LD_INT 0
4756: PPUSH
4757: LD_INT 1
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: LD_EXP 36
4767: PPUSH
4768: LD_INT 12
4770: PPUSH
4771: CALL 8906 0 9
// GenerateVehicleAttack ( 8 , 0 , 4 ) ;
4775: LD_INT 8
4777: PPUSH
4778: LD_INT 0
4780: PPUSH
4781: LD_INT 4
4783: PPUSH
4784: CALL 7961 0 3
// end ;
4788: END
// every 0 0$1 do
4789: GO 4791
4791: DISABLE
// begin wait ( Rand ( 0 0$50 , 1 1$20 ) ) ;
4792: LD_INT 1750
4794: PPUSH
4795: LD_INT 2800
4797: PPUSH
4798: CALL_OW 12
4802: PPUSH
4803: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , CratesArea , true ) ;
4807: LD_INT 3
4809: PPUSH
4810: LD_INT 5
4812: PPUSH
4813: CALL_OW 12
4817: PPUSH
4818: LD_INT 15
4820: PPUSH
4821: LD_INT 1
4823: PPUSH
4824: CALL_OW 55
// enable ;
4828: ENABLE
// end ; end_of_file
4829: END
// export Simone , Kathryn , Miller , Edmonds , AMSurvivors , AvengerSquad ; export Pravar , Esther , Dvalishvili , Barnes , Loghain , Smithy ; export AMEng , AMSolRand ; export function CreatePersonas ; begin
4830: LD_INT 0
4832: PPUSH
// uc_side := 7 ;
4833: LD_ADDR_OWVAR 20
4837: PUSH
4838: LD_INT 7
4840: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
4841: LD_ADDR_EXP 7
4845: PUSH
4846: LD_STRING Simone
4848: PPUSH
4849: CALL_OW 34
4853: ST_TO_ADDR
// Kathryn = CreateCharacter ( Kathryn ) ;
4854: LD_ADDR_EXP 8
4858: PUSH
4859: LD_STRING Kathryn
4861: PPUSH
4862: CALL_OW 34
4866: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
4867: LD_ADDR_EXP 9
4871: PUSH
4872: LD_STRING Miller
4874: PPUSH
4875: CALL_OW 34
4879: ST_TO_ADDR
// Edmonds = CreateCharacter ( Edmonds ) ;
4880: LD_ADDR_EXP 10
4884: PUSH
4885: LD_STRING Edmonds
4887: PPUSH
4888: CALL_OW 34
4892: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM02_Survivors ) ;
4893: LD_ADDR_EXP 11
4897: PUSH
4898: LD_STRING AM02_Survivors
4900: PPUSH
4901: CALL_OW 31
4905: ST_TO_ADDR
// AvengerSquad := Simone ^ Kathryn ^ Miller ^ Edmonds ^ AMSurvivors ;
4906: LD_ADDR_EXP 12
4910: PUSH
4911: LD_EXP 7
4915: PUSH
4916: LD_EXP 8
4920: ADD
4921: PUSH
4922: LD_EXP 9
4926: ADD
4927: PUSH
4928: LD_EXP 10
4932: ADD
4933: PUSH
4934: LD_EXP 11
4938: ADD
4939: ST_TO_ADDR
// uc_side := 1 ;
4940: LD_ADDR_OWVAR 20
4944: PUSH
4945: LD_INT 1
4947: ST_TO_ADDR
// hc_class = class_soldier ;
4948: LD_ADDR_OWVAR 28
4952: PUSH
4953: LD_INT 1
4955: ST_TO_ADDR
// uc_nation := nation_american ;
4956: LD_ADDR_OWVAR 21
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// hc_sex = sex_male ;
4964: LD_ADDR_OWVAR 27
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// hc_importance = 70 ;
4972: LD_ADDR_OWVAR 32
4976: PUSH
4977: LD_INT 70
4979: ST_TO_ADDR
// hc_skills = [ 7 , 5 , 5 , 3 ] ;
4980: LD_ADDR_OWVAR 31
4984: PUSH
4985: LD_INT 7
4987: PUSH
4988: LD_INT 5
4990: PUSH
4991: LD_INT 5
4993: PUSH
4994: LD_INT 3
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
5003: LD_ADDR_OWVAR 29
5007: PUSH
5008: LD_INT 10
5010: PUSH
5011: LD_INT 10
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: ST_TO_ADDR
// hc_name := Pravar Mervesh ;
5018: LD_ADDR_OWVAR 26
5022: PUSH
5023: LD_STRING Pravar Mervesh
5025: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
5026: LD_ADDR_OWVAR 33
5030: PUSH
5031: LD_STRING ZieloneLaserki_Commanders
5033: ST_TO_ADDR
// hc_face_number := 5 ;
5034: LD_ADDR_OWVAR 34
5038: PUSH
5039: LD_INT 5
5041: ST_TO_ADDR
// Pravar := CreateHuman ;
5042: LD_ADDR_EXP 13
5046: PUSH
5047: CALL_OW 44
5051: ST_TO_ADDR
// hc_class = class_scientistic ;
5052: LD_ADDR_OWVAR 28
5056: PUSH
5057: LD_INT 4
5059: ST_TO_ADDR
// uc_nation := nation_american ;
5060: LD_ADDR_OWVAR 21
5064: PUSH
5065: LD_INT 1
5067: ST_TO_ADDR
// hc_sex = sex_female ;
5068: LD_ADDR_OWVAR 27
5072: PUSH
5073: LD_INT 2
5075: ST_TO_ADDR
// hc_importance = 105 ;
5076: LD_ADDR_OWVAR 32
5080: PUSH
5081: LD_INT 105
5083: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 5 , 9 ] ;
5084: LD_ADDR_OWVAR 31
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: LD_INT 5
5097: PUSH
5098: LD_INT 9
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
5107: LD_ADDR_OWVAR 29
5111: PUSH
5112: LD_INT 11
5114: PUSH
5115: LD_INT 10
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: ST_TO_ADDR
// hc_name := Esther Corrigan ;
5122: LD_ADDR_OWVAR 26
5126: PUSH
5127: LD_STRING Esther Corrigan
5129: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Esther ;
5130: LD_ADDR_OWVAR 33
5134: PUSH
5135: LD_STRING ZieloneLaserki_Esther
5137: ST_TO_ADDR
// hc_face_number := 2 ;
5138: LD_ADDR_OWVAR 34
5142: PUSH
5143: LD_INT 2
5145: ST_TO_ADDR
// Esther := CreateHuman ;
5146: LD_ADDR_EXP 14
5150: PUSH
5151: CALL_OW 44
5155: ST_TO_ADDR
// uc_side := 8 ;
5156: LD_ADDR_OWVAR 20
5160: PUSH
5161: LD_INT 8
5163: ST_TO_ADDR
// hc_class = class_soldier ;
5164: LD_ADDR_OWVAR 28
5168: PUSH
5169: LD_INT 1
5171: ST_TO_ADDR
// uc_nation := nation_arabian ;
5172: LD_ADDR_OWVAR 21
5176: PUSH
5177: LD_INT 2
5179: ST_TO_ADDR
// hc_sex = sex_male ;
5180: LD_ADDR_OWVAR 27
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// hc_importance = 40 ;
5188: LD_ADDR_OWVAR 32
5192: PUSH
5193: LD_INT 40
5195: ST_TO_ADDR
// hc_skills = [ 9 , 4 , 8 , 3 ] ;
5196: LD_ADDR_OWVAR 31
5200: PUSH
5201: LD_INT 9
5203: PUSH
5204: LD_INT 4
5206: PUSH
5207: LD_INT 8
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: ST_TO_ADDR
// hc_attr = [ 15 , 10 ] ;
5219: LD_ADDR_OWVAR 29
5223: PUSH
5224: LD_INT 15
5226: PUSH
5227: LD_INT 10
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: ST_TO_ADDR
// hc_name := Giorgi Dvalishvili ;
5234: LD_ADDR_OWVAR 26
5238: PUSH
5239: LD_STRING Giorgi Dvalishvili
5241: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Dvalishvili ;
5242: LD_ADDR_OWVAR 33
5246: PUSH
5247: LD_STRING ZieloneLaserki_Dvalishvili
5249: ST_TO_ADDR
// hc_face_number := 1 ;
5250: LD_ADDR_OWVAR 34
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// Dvalishvili := CreateHuman ;
5258: LD_ADDR_EXP 15
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// uc_side := 1 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// hc_class = class_soldier ;
5276: LD_ADDR_OWVAR 28
5280: PUSH
5281: LD_INT 1
5283: ST_TO_ADDR
// uc_nation := nation_american ;
5284: LD_ADDR_OWVAR 21
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// hc_importance = 70 ;
5292: LD_ADDR_OWVAR 32
5296: PUSH
5297: LD_INT 70
5299: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
5300: LD_INT 1
5302: PPUSH
5303: LD_INT 8
5305: PPUSH
5306: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
5310: LD_ADDR_OWVAR 29
5314: PUSH
5315: LD_INT 10
5317: PUSH
5318: LD_INT 10
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_name := Barnes ;
5325: LD_ADDR_OWVAR 26
5329: PUSH
5330: LD_STRING Barnes
5332: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
5333: LD_ADDR_OWVAR 33
5337: PUSH
5338: LD_STRING ZieloneLaserki_Commanders
5340: ST_TO_ADDR
// hc_face_number := 2 ;
5341: LD_ADDR_OWVAR 34
5345: PUSH
5346: LD_INT 2
5348: ST_TO_ADDR
// Barnes := CreateHuman ;
5349: LD_ADDR_EXP 16
5353: PUSH
5354: CALL_OW 44
5358: ST_TO_ADDR
// hc_class = class_soldier ;
5359: LD_ADDR_OWVAR 28
5363: PUSH
5364: LD_INT 1
5366: ST_TO_ADDR
// uc_nation := nation_american ;
5367: LD_ADDR_OWVAR 21
5371: PUSH
5372: LD_INT 1
5374: ST_TO_ADDR
// hc_importance = 70 ;
5375: LD_ADDR_OWVAR 32
5379: PUSH
5380: LD_INT 70
5382: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
5383: LD_INT 1
5385: PPUSH
5386: LD_INT 8
5388: PPUSH
5389: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
5393: LD_ADDR_OWVAR 29
5397: PUSH
5398: LD_INT 10
5400: PUSH
5401: LD_INT 10
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: ST_TO_ADDR
// hc_name := Loghain ;
5408: LD_ADDR_OWVAR 26
5412: PUSH
5413: LD_STRING Loghain
5415: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
5416: LD_ADDR_OWVAR 33
5420: PUSH
5421: LD_STRING ZieloneLaserki_Heroes
5423: ST_TO_ADDR
// hc_face_number := 6 ;
5424: LD_ADDR_OWVAR 34
5428: PUSH
5429: LD_INT 6
5431: ST_TO_ADDR
// Loghain := CreateHuman ;
5432: LD_ADDR_EXP 17
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// hc_class = class_soldier ;
5442: LD_ADDR_OWVAR 28
5446: PUSH
5447: LD_INT 1
5449: ST_TO_ADDR
// uc_nation := nation_american ;
5450: LD_ADDR_OWVAR 21
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// hc_importance = 70 ;
5458: LD_ADDR_OWVAR 32
5462: PUSH
5463: LD_INT 70
5465: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
5466: LD_INT 1
5468: PPUSH
5469: LD_INT 8
5471: PPUSH
5472: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
5476: LD_ADDR_OWVAR 29
5480: PUSH
5481: LD_INT 10
5483: PUSH
5484: LD_INT 10
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: ST_TO_ADDR
// hc_name := Smithy ;
5491: LD_ADDR_OWVAR 26
5495: PUSH
5496: LD_STRING Smithy
5498: ST_TO_ADDR
// hc_gallery := us_old ;
5499: LD_ADDR_OWVAR 33
5503: PUSH
5504: LD_STRING us_old
5506: ST_TO_ADDR
// hc_face_number := 20 ;
5507: LD_ADDR_OWVAR 34
5511: PUSH
5512: LD_INT 20
5514: ST_TO_ADDR
// Smithy := CreateHuman ;
5515: LD_ADDR_EXP 18
5519: PUSH
5520: CALL_OW 44
5524: ST_TO_ADDR
// hc_name :=  ;
5525: LD_ADDR_OWVAR 26
5529: PUSH
5530: LD_STRING 
5532: ST_TO_ADDR
// hc_gallery :=  ;
5533: LD_ADDR_OWVAR 33
5537: PUSH
5538: LD_STRING 
5540: ST_TO_ADDR
// end ;
5541: LD_VAR 0 1
5545: RET
// export function Squad_Assembly ; var Vehicles , i , p , x , veh , filter ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
5553: PPUSH
5554: PPUSH
// uc_side := 7 ;
5555: LD_ADDR_OWVAR 20
5559: PUSH
5560: LD_INT 7
5562: ST_TO_ADDR
// Vehicles := LoadVariable ( AM02_Vehicles , [ ] ) ;
5563: LD_ADDR_VAR 0 2
5567: PUSH
5568: LD_STRING AM02_Vehicles
5570: PPUSH
5571: EMPTY
5572: PPUSH
5573: CALL_OW 30
5577: ST_TO_ADDR
// x := 1 ;
5578: LD_ADDR_VAR 0 5
5582: PUSH
5583: LD_INT 1
5585: ST_TO_ADDR
// i := 1 ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// p := 1 ;
5594: LD_ADDR_VAR 0 4
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// if Vehicles > 0 then
5602: LD_VAR 0 2
5606: PUSH
5607: LD_INT 0
5609: GREATER
5610: IFFALSE 5817
// while ( i <= Vehicles ) do
5612: LD_VAR 0 3
5616: PUSH
5617: LD_VAR 0 2
5621: LESSEQUAL
5622: IFFALSE 5817
// begin vc_chassis := Vehicles [ i ] ;
5624: LD_ADDR_OWVAR 37
5628: PUSH
5629: LD_VAR 0 2
5633: PUSH
5634: LD_VAR 0 3
5638: ARRAY
5639: ST_TO_ADDR
// vc_engine := Vehicles [ i + 1 ] ;
5640: LD_ADDR_OWVAR 39
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: ARRAY
5659: ST_TO_ADDR
// vc_control := Vehicles [ i + 2 ] ;
5660: LD_ADDR_OWVAR 38
5664: PUSH
5665: LD_VAR 0 2
5669: PUSH
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 2
5677: PLUS
5678: ARRAY
5679: ST_TO_ADDR
// vc_weapon := Vehicles [ i + 3 ] ;
5680: LD_ADDR_OWVAR 40
5684: PUSH
5685: LD_VAR 0 2
5689: PUSH
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 3
5697: PLUS
5698: ARRAY
5699: ST_TO_ADDR
// veh := CreateVehicle ;
5700: LD_ADDR_VAR 0 6
5704: PUSH
5705: CALL_OW 45
5709: ST_TO_ADDR
// PlaceUnitXYR ( veh , 46 , 86 , 1 , false ) ;
5710: LD_VAR 0 6
5714: PPUSH
5715: LD_INT 46
5717: PPUSH
5718: LD_INT 86
5720: PPUSH
5721: LD_INT 1
5723: PPUSH
5724: LD_INT 0
5726: PPUSH
5727: CALL_OW 50
// PlaceHumanInUnit ( AvengerSquad [ x ] , veh ) ;
5731: LD_EXP 12
5735: PUSH
5736: LD_VAR 0 5
5740: ARRAY
5741: PPUSH
5742: LD_VAR 0 6
5746: PPUSH
5747: CALL_OW 52
// ComMoveXY ( veh , 58 , 85 ) ;
5751: LD_VAR 0 6
5755: PPUSH
5756: LD_INT 58
5758: PPUSH
5759: LD_INT 85
5761: PPUSH
5762: CALL_OW 111
// wait ( 0 0$03 ) ;
5766: LD_INT 105
5768: PPUSH
5769: CALL_OW 67
// p := p + 1 ;
5773: LD_ADDR_VAR 0 4
5777: PUSH
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 1
5785: PLUS
5786: ST_TO_ADDR
// i := i + 4 ;
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 4
5799: PLUS
5800: ST_TO_ADDR
// x := x + 1 ;
5801: LD_ADDR_VAR 0 5
5805: PUSH
5806: LD_VAR 0 5
5810: PUSH
5811: LD_INT 1
5813: PLUS
5814: ST_TO_ADDR
// end ;
5815: GO 5612
// Squad_Assembled := true ;
5817: LD_ADDR_EXP 6
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// end ;
5825: LD_VAR 0 1
5829: RET
// export function AlliedReinforcement ; var ReinfMech1 , ReinfMech2 , RVeh1 , RVeh2 , RVeh3 , RVeh4 ; begin
5830: LD_INT 0
5832: PPUSH
5833: PPUSH
5834: PPUSH
5835: PPUSH
5836: PPUSH
5837: PPUSH
5838: PPUSH
// hc_name :=  ;
5839: LD_ADDR_OWVAR 26
5843: PUSH
5844: LD_STRING 
5846: ST_TO_ADDR
// hc_gallery :=  ;
5847: LD_ADDR_OWVAR 33
5851: PUSH
5852: LD_STRING 
5854: ST_TO_ADDR
// uc_side := 7 ;
5855: LD_ADDR_OWVAR 20
5859: PUSH
5860: LD_INT 7
5862: ST_TO_ADDR
// uc_nation := nation_american ;
5863: LD_ADDR_OWVAR 21
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
5871: LD_INT 1
5873: PPUSH
5874: LD_INT 8
5876: PPUSH
5877: CALL_OW 383
// ReinfMech1 := CreateHuman ;
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: CALL_OW 44
5890: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
5891: LD_INT 2
5893: PPUSH
5894: LD_INT 8
5896: PPUSH
5897: CALL_OW 383
// ReinfMech2 := CreateHuman ;
5901: LD_ADDR_VAR 0 3
5905: PUSH
5906: CALL_OW 44
5910: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
5911: LD_ADDR_OWVAR 37
5915: PUSH
5916: LD_INT 3
5918: ST_TO_ADDR
// vc_engine := engine_siberite ;
5919: LD_ADDR_OWVAR 39
5923: PUSH
5924: LD_INT 3
5926: ST_TO_ADDR
// vc_control := control_manual ;
5927: LD_ADDR_OWVAR 38
5931: PUSH
5932: LD_INT 1
5934: ST_TO_ADDR
// vc_weapon := us_double_gun ;
5935: LD_ADDR_OWVAR 40
5939: PUSH
5940: LD_INT 5
5942: ST_TO_ADDR
// RVeh1 := CreateVehicle ;
5943: LD_ADDR_VAR 0 4
5947: PUSH
5948: CALL_OW 45
5952: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
5953: LD_ADDR_OWVAR 40
5957: PUSH
5958: LD_INT 4
5960: ST_TO_ADDR
// RVeh2 := CreateVehicle ;
5961: LD_ADDR_VAR 0 5
5965: PUSH
5966: CALL_OW 45
5970: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
5971: LD_ADDR_OWVAR 37
5975: PUSH
5976: LD_INT 2
5978: ST_TO_ADDR
// vc_control := control_computer ;
5979: LD_ADDR_OWVAR 38
5983: PUSH
5984: LD_INT 3
5986: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
5987: LD_ADDR_OWVAR 40
5991: PUSH
5992: LD_INT 12
5994: ST_TO_ADDR
// RVeh3 := CreateVehicle ;
5995: LD_ADDR_VAR 0 6
5999: PUSH
6000: CALL_OW 45
6004: ST_TO_ADDR
// RVeh4 := CreateVehicle ;
6005: LD_ADDR_VAR 0 7
6009: PUSH
6010: CALL_OW 45
6014: ST_TO_ADDR
// AddCargo ( RVeh3 , mat_cans , 100 ) ;
6015: LD_VAR 0 6
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 100
6025: PPUSH
6026: CALL_OW 291
// AddCargo ( RVeh4 , mat_oil , 60 ) ;
6030: LD_VAR 0 7
6034: PPUSH
6035: LD_INT 2
6037: PPUSH
6038: LD_INT 60
6040: PPUSH
6041: CALL_OW 291
// AddCargo ( RVeh4 , mat_siberit , 40 ) ;
6045: LD_VAR 0 7
6049: PPUSH
6050: LD_INT 3
6052: PPUSH
6053: LD_INT 40
6055: PPUSH
6056: CALL_OW 291
// PlaceHumanInUnit ( ReinfMech1 , RVeh1 ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_VAR 0 4
6069: PPUSH
6070: CALL_OW 52
// PlaceHumanInUnit ( ReinfMech2 , RVeh2 ) ;
6074: LD_VAR 0 3
6078: PPUSH
6079: LD_VAR 0 5
6083: PPUSH
6084: CALL_OW 52
// PlaceUnitXYR ( RVeh1 , 46 , 86 , 1 , false ) ;
6088: LD_VAR 0 4
6092: PPUSH
6093: LD_INT 46
6095: PPUSH
6096: LD_INT 86
6098: PPUSH
6099: LD_INT 1
6101: PPUSH
6102: LD_INT 0
6104: PPUSH
6105: CALL_OW 50
// PlaceUnitXYR ( RVeh2 , 50 , 86 , 1 , false ) ;
6109: LD_VAR 0 5
6113: PPUSH
6114: LD_INT 50
6116: PPUSH
6117: LD_INT 86
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 0
6125: PPUSH
6126: CALL_OW 50
// PlaceUnitXYR ( RVeh3 , 46 , 82 , 1 , false ) ;
6130: LD_VAR 0 6
6134: PPUSH
6135: LD_INT 46
6137: PPUSH
6138: LD_INT 82
6140: PPUSH
6141: LD_INT 1
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 50
// PlaceUnitXYR ( RVeh4 , 49 , 89 , 1 , false ) ;
6151: LD_VAR 0 7
6155: PPUSH
6156: LD_INT 49
6158: PPUSH
6159: LD_INT 89
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: LD_INT 0
6167: PPUSH
6168: CALL_OW 50
// case Rand ( 1 , 2 ) of 1 :
6172: LD_INT 1
6174: PPUSH
6175: LD_INT 2
6177: PPUSH
6178: CALL_OW 12
6182: PUSH
6183: LD_INT 1
6185: DOUBLE
6186: EQUAL
6187: IFTRUE 6191
6189: GO 6206
6191: POP
// Say ( ReinfMech1 , D3-Sol-1 ) ; 2 :
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_STRING D3-Sol-1
6199: PPUSH
6200: CALL_OW 88
6204: GO 6230
6206: LD_INT 2
6208: DOUBLE
6209: EQUAL
6210: IFTRUE 6214
6212: GO 6229
6214: POP
// Say ( ReinfMech2 , D3-FemSol-1 ) ; end ;
6215: LD_VAR 0 3
6219: PPUSH
6220: LD_STRING D3-FemSol-1
6222: PPUSH
6223: CALL_OW 88
6227: GO 6230
6229: POP
// end ; end_of_file
6230: LD_VAR 0 1
6234: RET
// export BioCollected ; export BioXCollected , BioYCollected , BioZCollected ; export BioXVisited , BioYVisited , BioZVisited ; export EstherQuestCompleted , TeslaQuestStart , TeslaQuestCompleted ; every 0 0$1 trigger BioLabSecured and not BioXCollected and not BioXVisited and IsInArea ( Esther , BioArea1 ) do
6235: LD_EXP 3
6239: PUSH
6240: LD_EXP 22
6244: NOT
6245: AND
6246: PUSH
6247: LD_EXP 25
6251: NOT
6252: AND
6253: PUSH
6254: LD_EXP 14
6258: PPUSH
6259: LD_INT 3
6261: PPUSH
6262: CALL_OW 308
6266: AND
6267: IFFALSE 6518
6269: GO 6271
6271: DISABLE
// begin enable ;
6272: ENABLE
// if GetClass ( Esther ) = 4 then
6273: LD_EXP 14
6277: PPUSH
6278: CALL_OW 257
6282: PUSH
6283: LD_INT 4
6285: EQUAL
6286: IFFALSE 6431
// begin BioXVisited := true ;
6288: LD_ADDR_EXP 25
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// SetSide ( Esther , 1 ) ;
6296: LD_EXP 14
6300: PPUSH
6301: LD_INT 1
6303: PPUSH
6304: CALL_OW 235
// SetAreaMapShow ( BioArea1Mark , 0 ) ;
6308: LD_INT 2
6310: PPUSH
6311: LD_INT 0
6313: PPUSH
6314: CALL_OW 424
// Say ( Esther , D3d-Esther-1 ) ;
6318: LD_EXP 14
6322: PPUSH
6323: LD_STRING D3d-Esther-1
6325: PPUSH
6326: CALL_OW 88
// ComMoveXY ( Esther , 25 , 22 ) ;
6330: LD_EXP 14
6334: PPUSH
6335: LD_INT 25
6337: PPUSH
6338: LD_INT 22
6340: PPUSH
6341: CALL_OW 111
// Wait ( 0 0$8 ) ;
6345: LD_INT 280
6347: PPUSH
6348: CALL_OW 67
// ComMoveXY ( Esther , 26 , 28 ) ;
6352: LD_EXP 14
6356: PPUSH
6357: LD_INT 26
6359: PPUSH
6360: LD_INT 28
6362: PPUSH
6363: CALL_OW 111
// Wait ( 0 0$8 ) ;
6367: LD_INT 280
6369: PPUSH
6370: CALL_OW 67
// ComMoveXY ( Esther , 23 , 24 ) ;
6374: LD_EXP 14
6378: PPUSH
6379: LD_INT 23
6381: PPUSH
6382: LD_INT 24
6384: PPUSH
6385: CALL_OW 111
// Wait ( 0 0$8 ) ;
6389: LD_INT 280
6391: PPUSH
6392: CALL_OW 67
// BioCollected := BioCollected + 1 ;
6396: LD_ADDR_EXP 21
6400: PUSH
6401: LD_EXP 21
6405: PUSH
6406: LD_INT 1
6408: PLUS
6409: ST_TO_ADDR
// BioXCollected = true ;
6410: LD_ADDR_EXP 22
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// ChangeMissionObjectives ( MEstherX ) ;
6418: LD_STRING MEstherX
6420: PPUSH
6421: CALL_OW 337
// ReturnEsther ;
6425: CALL 7572 0 0
// end else
6429: GO 6518
// if GetClass ( Esther ) = 1 then
6431: LD_EXP 14
6435: PPUSH
6436: CALL_OW 257
6440: PUSH
6441: LD_INT 1
6443: EQUAL
6444: IFFALSE 6483
// begin BioXVisited := true ;
6446: LD_ADDR_EXP 25
6450: PUSH
6451: LD_INT 1
6453: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2b ) ;
6454: LD_EXP 14
6458: PPUSH
6459: LD_STRING D3d-Esther-2b
6461: PPUSH
6462: CALL_OW 88
// Wait ( 0 0$20 ) ;
6466: LD_INT 700
6468: PPUSH
6469: CALL_OW 67
// BioXVisited := false ;
6473: LD_ADDR_EXP 25
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// end else
6481: GO 6518
// begin BioXVisited := true ;
6483: LD_ADDR_EXP 25
6487: PUSH
6488: LD_INT 1
6490: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2a ) ;
6491: LD_EXP 14
6495: PPUSH
6496: LD_STRING D3d-Esther-2a
6498: PPUSH
6499: CALL_OW 88
// Wait ( 0 0$20 ) ;
6503: LD_INT 700
6505: PPUSH
6506: CALL_OW 67
// BioXVisited := false ;
6510: LD_ADDR_EXP 25
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// end ; end ;
6518: END
// every 0 0$1 trigger BioLabSecured and not BioYCollected and not BioYVisited and IsInArea ( Esther , BioArea2 ) do
6519: LD_EXP 3
6523: PUSH
6524: LD_EXP 23
6528: NOT
6529: AND
6530: PUSH
6531: LD_EXP 26
6535: NOT
6536: AND
6537: PUSH
6538: LD_EXP 14
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 308
6550: AND
6551: IFFALSE 6802
6553: GO 6555
6555: DISABLE
// begin enable ;
6556: ENABLE
// if GetClass ( Esther ) = 4 then
6557: LD_EXP 14
6561: PPUSH
6562: CALL_OW 257
6566: PUSH
6567: LD_INT 4
6569: EQUAL
6570: IFFALSE 6715
// begin BioYVisited := true ;
6572: LD_ADDR_EXP 26
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// SetSide ( Esther , 1 ) ;
6580: LD_EXP 14
6584: PPUSH
6585: LD_INT 1
6587: PPUSH
6588: CALL_OW 235
// SetAreaMapShow ( BioArea2Mark , 0 ) ;
6592: LD_INT 4
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 424
// Say ( Esther , D3d-Esther-2 ) ;
6602: LD_EXP 14
6606: PPUSH
6607: LD_STRING D3d-Esther-2
6609: PPUSH
6610: CALL_OW 88
// ComMoveXY ( Esther , 126 , 115 ) ;
6614: LD_EXP 14
6618: PPUSH
6619: LD_INT 126
6621: PPUSH
6622: LD_INT 115
6624: PPUSH
6625: CALL_OW 111
// Wait ( 0 0$12 ) ;
6629: LD_INT 420
6631: PPUSH
6632: CALL_OW 67
// ComMoveXY ( Esther , 125 , 120 ) ;
6636: LD_EXP 14
6640: PPUSH
6641: LD_INT 125
6643: PPUSH
6644: LD_INT 120
6646: PPUSH
6647: CALL_OW 111
// Wait ( 0 0$8 ) ;
6651: LD_INT 280
6653: PPUSH
6654: CALL_OW 67
// ComMoveXY ( Esther , 129 , 121 ) ;
6658: LD_EXP 14
6662: PPUSH
6663: LD_INT 129
6665: PPUSH
6666: LD_INT 121
6668: PPUSH
6669: CALL_OW 111
// Wait ( 0 0$8 ) ;
6673: LD_INT 280
6675: PPUSH
6676: CALL_OW 67
// BioCollected := BioCollected + 1 ;
6680: LD_ADDR_EXP 21
6684: PUSH
6685: LD_EXP 21
6689: PUSH
6690: LD_INT 1
6692: PLUS
6693: ST_TO_ADDR
// BioYCollected = true ;
6694: LD_ADDR_EXP 23
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// ChangeMissionObjectives ( MEstherY ) ;
6702: LD_STRING MEstherY
6704: PPUSH
6705: CALL_OW 337
// ReturnEsther ;
6709: CALL 7572 0 0
// end else
6713: GO 6802
// if GetClass ( Esther ) = 1 then
6715: LD_EXP 14
6719: PPUSH
6720: CALL_OW 257
6724: PUSH
6725: LD_INT 1
6727: EQUAL
6728: IFFALSE 6767
// begin BioYVisited := true ;
6730: LD_ADDR_EXP 26
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2b ) ;
6738: LD_EXP 14
6742: PPUSH
6743: LD_STRING D3d-Esther-2b
6745: PPUSH
6746: CALL_OW 88
// Wait ( 0 0$20 ) ;
6750: LD_INT 700
6752: PPUSH
6753: CALL_OW 67
// BioYVisited := false ;
6757: LD_ADDR_EXP 26
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// end else
6765: GO 6802
// begin BioYVisited := true ;
6767: LD_ADDR_EXP 26
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2a ) ;
6775: LD_EXP 14
6779: PPUSH
6780: LD_STRING D3d-Esther-2a
6782: PPUSH
6783: CALL_OW 88
// Wait ( 0 0$20 ) ;
6787: LD_INT 700
6789: PPUSH
6790: CALL_OW 67
// BioYVisited := false ;
6794: LD_ADDR_EXP 26
6798: PUSH
6799: LD_INT 0
6801: ST_TO_ADDR
// end ; end ;
6802: END
// every 0 0$1 trigger BioLabSecured and not BioZCollected and not BioZVisited and IsInArea ( Esther , BioArea3 ) do
6803: LD_EXP 3
6807: PUSH
6808: LD_EXP 24
6812: NOT
6813: AND
6814: PUSH
6815: LD_EXP 27
6819: NOT
6820: AND
6821: PUSH
6822: LD_EXP 14
6826: PPUSH
6827: LD_INT 7
6829: PPUSH
6830: CALL_OW 308
6834: AND
6835: IFFALSE 7086
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// if GetClass ( Esther ) = 4 then
6841: LD_EXP 14
6845: PPUSH
6846: CALL_OW 257
6850: PUSH
6851: LD_INT 4
6853: EQUAL
6854: IFFALSE 6999
// begin BioZVisited := true ;
6856: LD_ADDR_EXP 27
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// SetSide ( Esther , 1 ) ;
6864: LD_EXP 14
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 235
// SetAreaMapShow ( BioArea3Mark , 0 ) ;
6876: LD_INT 6
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 424
// Say ( Esther , D3d-Esther-3 ) ;
6886: LD_EXP 14
6890: PPUSH
6891: LD_STRING D3d-Esther-3
6893: PPUSH
6894: CALL_OW 88
// ComMoveXY ( Esther , 201 , 133 ) ;
6898: LD_EXP 14
6902: PPUSH
6903: LD_INT 201
6905: PPUSH
6906: LD_INT 133
6908: PPUSH
6909: CALL_OW 111
// Wait ( 0 0$8 ) ;
6913: LD_INT 280
6915: PPUSH
6916: CALL_OW 67
// ComMoveXY ( Esther , 204 , 140 ) ;
6920: LD_EXP 14
6924: PPUSH
6925: LD_INT 204
6927: PPUSH
6928: LD_INT 140
6930: PPUSH
6931: CALL_OW 111
// Wait ( 0 0$12 ) ;
6935: LD_INT 420
6937: PPUSH
6938: CALL_OW 67
// ComMoveXY ( Esther , 200 , 138 ) ;
6942: LD_EXP 14
6946: PPUSH
6947: LD_INT 200
6949: PPUSH
6950: LD_INT 138
6952: PPUSH
6953: CALL_OW 111
// Wait ( 0 0$8 ) ;
6957: LD_INT 280
6959: PPUSH
6960: CALL_OW 67
// BioCollected := BioCollected + 1 ;
6964: LD_ADDR_EXP 21
6968: PUSH
6969: LD_EXP 21
6973: PUSH
6974: LD_INT 1
6976: PLUS
6977: ST_TO_ADDR
// BioZCollected = true ;
6978: LD_ADDR_EXP 24
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// ChangeMissionObjectives ( MEstherZ ) ;
6986: LD_STRING MEstherZ
6988: PPUSH
6989: CALL_OW 337
// ReturnEsther ;
6993: CALL 7572 0 0
// end else
6997: GO 7086
// if GetClass ( Esther ) = 1 then
6999: LD_EXP 14
7003: PPUSH
7004: CALL_OW 257
7008: PUSH
7009: LD_INT 1
7011: EQUAL
7012: IFFALSE 7051
// begin BioZVisited := true ;
7014: LD_ADDR_EXP 27
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2b ) ;
7022: LD_EXP 14
7026: PPUSH
7027: LD_STRING D3d-Esther-2b
7029: PPUSH
7030: CALL_OW 88
// Wait ( 0 0$20 ) ;
7034: LD_INT 700
7036: PPUSH
7037: CALL_OW 67
// BioZVisited := false ;
7041: LD_ADDR_EXP 27
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// end else
7049: GO 7086
// begin BioZVisited := true ;
7051: LD_ADDR_EXP 27
7055: PUSH
7056: LD_INT 1
7058: ST_TO_ADDR
// Say ( Esther , D3d-Esther-2a ) ;
7059: LD_EXP 14
7063: PPUSH
7064: LD_STRING D3d-Esther-2a
7066: PPUSH
7067: CALL_OW 88
// Wait ( 0 0$20 ) ;
7071: LD_INT 700
7073: PPUSH
7074: CALL_OW 67
// BioZVisited := false ;
7078: LD_ADDR_EXP 27
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ; end ;
7086: END
// every 0 0$1 trigger GetTech ( Tech_Bio1 , 7 ) = state_researched do
7087: LD_INT 66
7089: PPUSH
7090: LD_INT 7
7092: PPUSH
7093: CALL_OW 321
7097: PUSH
7098: LD_INT 2
7100: EQUAL
7101: IFFALSE 7118
7103: GO 7105
7105: DISABLE
// Say ( Esther , D3f-Esther-1 ) ;
7106: LD_EXP 14
7110: PPUSH
7111: LD_STRING D3f-Esther-1
7113: PPUSH
7114: CALL_OW 88
7118: END
// every 0 0$1 trigger GetTech ( Tech_Bio2 , 7 ) = state_researched do
7119: LD_INT 67
7121: PPUSH
7122: LD_INT 7
7124: PPUSH
7125: CALL_OW 321
7129: PUSH
7130: LD_INT 2
7132: EQUAL
7133: IFFALSE 7150
7135: GO 7137
7137: DISABLE
// Say ( Esther , D3f-Esther-2 ) ;
7138: LD_EXP 14
7142: PPUSH
7143: LD_STRING D3f-Esther-2
7145: PPUSH
7146: CALL_OW 88
7150: END
// every 0 0$1 trigger GetTech ( Tech_Bio3 , 7 ) = state_researched do
7151: LD_INT 68
7153: PPUSH
7154: LD_INT 7
7156: PPUSH
7157: CALL_OW 321
7161: PUSH
7162: LD_INT 2
7164: EQUAL
7165: IFFALSE 7209
7167: GO 7169
7169: DISABLE
// begin ChangeMissionObjectives ( MEstherFinished ) ;
7170: LD_STRING MEstherFinished
7172: PPUSH
7173: CALL_OW 337
// EstherQuestCompleted := true ;
7177: LD_ADDR_EXP 28
7181: PUSH
7182: LD_INT 1
7184: ST_TO_ADDR
// Say ( Esther , D3f-Esther-3 ) ;
7185: LD_EXP 14
7189: PPUSH
7190: LD_STRING D3f-Esther-3
7192: PPUSH
7193: CALL_OW 88
// Say ( Simone , D3f-Simone-1 ) ;
7197: LD_EXP 7
7201: PPUSH
7202: LD_STRING D3f-Simone-1
7204: PPUSH
7205: CALL_OW 88
// end ;
7209: END
// export LabTechTesla ; every 0 0$1 trigger TeslaQuestStart and not TeslaQuestCompleted do var i ;
7210: LD_EXP 29
7214: PUSH
7215: LD_EXP 30
7219: NOT
7220: AND
7221: IFFALSE 7480
7223: GO 7225
7225: DISABLE
7226: LD_INT 0
7228: PPUSH
// begin enable ;
7229: ENABLE
// LabTechTesla := FilterAllUnits ( [ f_and , [ f_side , 7 ] , [ f_btype , b_lab_full ] , [ f_nation , 1 ] ] ) ;
7230: LD_ADDR_EXP 31
7234: PUSH
7235: LD_INT 1
7237: PUSH
7238: LD_INT 22
7240: PUSH
7241: LD_INT 7
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: LD_INT 8
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
// if not GetTech ( Tech_Tesla , 7 ) = state_researched and GetTech ( Tech_Tech3 , 7 ) = state_researched then
7279: LD_EXP 54
7283: PPUSH
7284: LD_INT 7
7286: PPUSH
7287: CALL_OW 321
7291: PUSH
7292: LD_INT 2
7294: EQUAL
7295: NOT
7296: PUSH
7297: LD_INT 50
7299: PPUSH
7300: LD_INT 7
7302: PPUSH
7303: CALL_OW 321
7307: PUSH
7308: LD_INT 2
7310: EQUAL
7311: AND
7312: IFFALSE 7358
// for i in LabTechTesla do
7314: LD_ADDR_VAR 0 1
7318: PUSH
7319: LD_EXP 31
7323: PUSH
7324: FOR_IN
7325: IFFALSE 7354
// SetArtifactUse ( GetSide ( i ) , art_use_power , art_instant , i ) else
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 255
7336: PPUSH
7337: LD_INT 9
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 468
7352: GO 7324
7354: POP
7355: POP
7356: GO 7480
// if not GetTech ( Tech_Tesla , 7 ) = state_researched and not GetTech ( Tech_Tech3 , 7 ) = state_researched then
7358: LD_EXP 54
7362: PPUSH
7363: LD_INT 7
7365: PPUSH
7366: CALL_OW 321
7370: PUSH
7371: LD_INT 2
7373: EQUAL
7374: NOT
7375: PUSH
7376: LD_INT 50
7378: PPUSH
7379: LD_INT 7
7381: PPUSH
7382: CALL_OW 321
7386: PUSH
7387: LD_INT 2
7389: EQUAL
7390: NOT
7391: AND
7392: IFFALSE 7438
// for i in LabTechTesla do
7394: LD_ADDR_VAR 0 1
7398: PUSH
7399: LD_EXP 31
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7434
// SetArtifactUse ( GetSide ( i ) , art_use_power , art_gray , i ) else
7407: LD_VAR 0 1
7411: PPUSH
7412: CALL_OW 255
7416: PPUSH
7417: LD_INT 9
7419: PPUSH
7420: LD_INT 1
7422: PPUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 468
7432: GO 7404
7434: POP
7435: POP
7436: GO 7480
// for i in LabTechTesla do
7438: LD_ADDR_VAR 0 1
7442: PUSH
7443: LD_EXP 31
7447: PUSH
7448: FOR_IN
7449: IFFALSE 7478
// SetArtifactUse ( GetSide ( i ) , art_use_power , art_no , i ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL_OW 255
7460: PPUSH
7461: LD_INT 9
7463: PPUSH
7464: LD_INT 0
7466: PPUSH
7467: LD_VAR 0 1
7471: PPUSH
7472: CALL_OW 468
7476: GO 7448
7478: POP
7479: POP
// end ;
7480: PPOPN 1
7482: END
// every 0 0$1 trigger GetTech ( Tech_Tesla , 7 ) = state_researched and FilterAllUnits ( [ f_and , [ f_side , 7 ] , [ f_weapon , us_tesla_coil ] ] ) >= 1 do
7483: LD_EXP 54
7487: PPUSH
7488: LD_INT 7
7490: PPUSH
7491: CALL_OW 321
7495: PUSH
7496: LD_INT 2
7498: EQUAL
7499: PUSH
7500: LD_INT 1
7502: PUSH
7503: LD_INT 22
7505: PUSH
7506: LD_INT 7
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_EXP 47
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PUSH
7535: LD_INT 1
7537: GREATEREQUAL
7538: AND
7539: IFFALSE 7571
7541: GO 7543
7543: DISABLE
// begin TeslaQuestCompleted = true ;
7544: LD_ADDR_EXP 30
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// ChangeMissionObjectives ( MTeslaOut ) ;
7552: LD_STRING MTeslaOut
7554: PPUSH
7555: CALL_OW 337
// Say ( Simone , D4c-Simone-1 ) ;
7559: LD_EXP 7
7563: PPUSH
7564: LD_STRING D4c-Simone-1
7566: PPUSH
7567: CALL_OW 88
// end ; end_of_file
7571: END
// export function ReturnEsther ; begin
7572: LD_INT 0
7574: PPUSH
// case BioCollected of 1 :
7575: LD_EXP 21
7579: PUSH
7580: LD_INT 1
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7588
7586: GO 7615
7588: POP
// begin SetSide ( Esther , 7 ) ;
7589: LD_EXP 14
7593: PPUSH
7594: LD_INT 7
7596: PPUSH
7597: CALL_OW 235
// Say ( Esther , D3d-Esther-1a ) ;
7601: LD_EXP 14
7605: PPUSH
7606: LD_STRING D3d-Esther-1a
7608: PPUSH
7609: CALL_OW 88
// end ; 2 :
7613: GO 7768
7615: LD_INT 2
7617: DOUBLE
7618: EQUAL
7619: IFTRUE 7623
7621: GO 7650
7623: POP
// begin SetSide ( Esther , 7 ) ;
7624: LD_EXP 14
7628: PPUSH
7629: LD_INT 7
7631: PPUSH
7632: CALL_OW 235
// Say ( Esther , D3d-Esther-2a ) ;
7636: LD_EXP 14
7640: PPUSH
7641: LD_STRING D3d-Esther-2a
7643: PPUSH
7644: CALL_OW 88
// end ; 3 :
7648: GO 7768
7650: LD_INT 3
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7767
7658: POP
// begin SetSide ( Esther , 7 ) ;
7659: LD_EXP 14
7663: PPUSH
7664: LD_INT 7
7666: PPUSH
7667: CALL_OW 235
// Say ( Esther , D3d-Esther-3a ) ;
7671: LD_EXP 14
7675: PPUSH
7676: LD_STRING D3d-Esther-3a
7678: PPUSH
7679: CALL_OW 88
// ChangeMissionObjectives ( MEstherAll ) ;
7683: LD_STRING MEstherAll
7685: PPUSH
7686: CALL_OW 337
// SetTech ( Tech_Bio1 , 7 , state_enabled ) ;
7690: LD_INT 66
7692: PPUSH
7693: LD_INT 7
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: CALL_OW 322
// SetTech ( Tech_Bio2 , 7 , state_enabled ) ;
7703: LD_INT 67
7705: PPUSH
7706: LD_INT 7
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL_OW 322
// SetTech ( Tech_Bio3 , 7 , state_enabled ) ;
7716: LD_INT 68
7718: PPUSH
7719: LD_INT 7
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 322
// Say ( Simone , D3e-Simone-1 ) ;
7729: LD_EXP 7
7733: PPUSH
7734: LD_STRING D3e-Simone-1
7736: PPUSH
7737: CALL_OW 88
// Say ( Esther , D3e-Esther-1 ) ;
7741: LD_EXP 14
7745: PPUSH
7746: LD_STRING D3e-Esther-1
7748: PPUSH
7749: CALL_OW 88
// Say ( Simone , D3e-Simone-2 ) ;
7753: LD_EXP 7
7757: PPUSH
7758: LD_STRING D3e-Simone-2
7760: PPUSH
7761: CALL_OW 88
// end ; end ;
7765: GO 7768
7767: POP
// end ;
7768: LD_VAR 0 1
7772: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
7773: LD_INT 0
7775: PPUSH
7776: PPUSH
7777: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
7778: LD_VAR 0 1
7782: NOT
7783: PUSH
7784: LD_VAR 0 2
7788: PUSH
7789: LD_INT 1
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 3
7797: PUSH
7798: LD_INT 4
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: IN
7807: NOT
7808: OR
7809: IFFALSE 7813
// exit ;
7811: GO 7905
// tmp := [ ] ;
7813: LD_ADDR_VAR 0 5
7817: PUSH
7818: EMPTY
7819: ST_TO_ADDR
// for i in units do
7820: LD_ADDR_VAR 0 4
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: FOR_IN
7831: IFFALSE 7874
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
7833: LD_ADDR_VAR 0 5
7837: PUSH
7838: LD_VAR 0 5
7842: PPUSH
7843: LD_VAR 0 5
7847: PUSH
7848: LD_INT 1
7850: PLUS
7851: PPUSH
7852: LD_VAR 0 4
7856: PPUSH
7857: LD_VAR 0 2
7861: PPUSH
7862: CALL_OW 259
7866: PPUSH
7867: CALL_OW 2
7871: ST_TO_ADDR
7872: GO 7830
7874: POP
7875: POP
// if not tmp then
7876: LD_VAR 0 5
7880: NOT
7881: IFFALSE 7885
// exit ;
7883: GO 7905
// result := SortListByListDesc ( units , tmp ) ;
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_VAR 0 5
7899: PPUSH
7900: CALL_OW 77
7904: ST_TO_ADDR
// end ;
7905: LD_VAR 0 3
7909: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
7910: LD_INT 0
7912: PPUSH
// if not unit then
7913: LD_VAR 0 1
7917: NOT
7918: IFFALSE 7922
// exit ;
7920: GO 7956
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
7922: LD_VAR 0 1
7926: PPUSH
7927: LD_VAR 0 2
7931: PUSH
7932: LD_VAR 0 3
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 258
7950: ARRAY
7951: PPUSH
7952: CALL_OW 88
// end ;
7956: LD_VAR 0 4
7960: RET
// export function GenerateVehicleAttack ( side , mapSide , vehCount ) ; var i , j , un , genPos , movePos , arChassisTab , veh , vehGroup , WeaponChosen ; begin
7961: LD_INT 0
7963: PPUSH
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
7968: PPUSH
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// arChassisTab := [ ] ;
7973: LD_ADDR_VAR 0 10
7977: PUSH
7978: EMPTY
7979: ST_TO_ADDR
// case mapSide of 1 :
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: DOUBLE
7988: EQUAL
7989: IFTRUE 7993
7991: GO 8038
7993: POP
// begin genPos := [ 89 , 3 , 2 ] ;
7994: LD_ADDR_VAR 0 8
7998: PUSH
7999: LD_INT 89
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: ST_TO_ADDR
// movePos := [ 100 , 28 ] ;
8013: LD_ADDR_VAR 0 9
8017: PUSH
8018: LD_INT 100
8020: PUSH
8021: LD_INT 28
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: ST_TO_ADDR
// uc_direction := 2 ;
8028: LD_ADDR_OWVAR 24
8032: PUSH
8033: LD_INT 2
8035: ST_TO_ADDR
// end ; 2 :
8036: GO 8145
8038: LD_INT 2
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8091
8046: POP
// begin genPos := [ 180 , 85 , 4 ] ;
8047: LD_ADDR_VAR 0 8
8051: PUSH
8052: LD_INT 180
8054: PUSH
8055: LD_INT 85
8057: PUSH
8058: LD_INT 4
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: ST_TO_ADDR
// movePos := [ 130 , 85 ] ;
8066: LD_ADDR_VAR 0 9
8070: PUSH
8071: LD_INT 130
8073: PUSH
8074: LD_INT 85
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: ST_TO_ADDR
// uc_direction := 4 ;
8081: LD_ADDR_OWVAR 24
8085: PUSH
8086: LD_INT 4
8088: ST_TO_ADDR
// end ; 3 :
8089: GO 8145
8091: LD_INT 3
8093: DOUBLE
8094: EQUAL
8095: IFTRUE 8099
8097: GO 8144
8099: POP
// begin genPos := [ 148 , 156 , 0 ] ;
8100: LD_ADDR_VAR 0 8
8104: PUSH
8105: LD_INT 148
8107: PUSH
8108: LD_INT 156
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: ST_TO_ADDR
// movePos := [ 133 , 110 ] ;
8119: LD_ADDR_VAR 0 9
8123: PUSH
8124: LD_INT 133
8126: PUSH
8127: LD_INT 110
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
// uc_direction := 0 ;
8134: LD_ADDR_OWVAR 24
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// end ; end ;
8142: GO 8145
8144: POP
// for i = 1 to vehCount do
8145: LD_ADDR_VAR 0 5
8149: PUSH
8150: DOUBLE
8151: LD_INT 1
8153: DEC
8154: ST_TO_ADDR
8155: LD_VAR 0 3
8159: PUSH
8160: FOR_TO
8161: IFFALSE 8876
// begin uc_side = side ;
8163: LD_ADDR_OWVAR 20
8167: PUSH
8168: LD_VAR 0 1
8172: ST_TO_ADDR
// uc_nation = 2 ;
8173: LD_ADDR_OWVAR 21
8177: PUSH
8178: LD_INT 2
8180: ST_TO_ADDR
// if mapSide = 0 then
8181: LD_VAR 0 2
8185: PUSH
8186: LD_INT 0
8188: EQUAL
8189: IFFALSE 8362
// case Rand ( 1 , 3 ) of 1 :
8191: LD_INT 1
8193: PPUSH
8194: LD_INT 3
8196: PPUSH
8197: CALL_OW 12
8201: PUSH
8202: LD_INT 1
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8255
8210: POP
// begin genPos := [ 89 , 3 , 2 ] ;
8211: LD_ADDR_VAR 0 8
8215: PUSH
8216: LD_INT 89
8218: PUSH
8219: LD_INT 3
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// movePos := [ 100 , 28 ] ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 100
8237: PUSH
8238: LD_INT 28
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: ST_TO_ADDR
// uc_direction := 2 ;
8245: LD_ADDR_OWVAR 24
8249: PUSH
8250: LD_INT 2
8252: ST_TO_ADDR
// end ; 2 :
8253: GO 8362
8255: LD_INT 2
8257: DOUBLE
8258: EQUAL
8259: IFTRUE 8263
8261: GO 8308
8263: POP
// begin genPos := [ 180 , 85 , 4 ] ;
8264: LD_ADDR_VAR 0 8
8268: PUSH
8269: LD_INT 180
8271: PUSH
8272: LD_INT 85
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// movePos := [ 130 , 85 ] ;
8283: LD_ADDR_VAR 0 9
8287: PUSH
8288: LD_INT 130
8290: PUSH
8291: LD_INT 85
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: ST_TO_ADDR
// uc_direction := 4 ;
8298: LD_ADDR_OWVAR 24
8302: PUSH
8303: LD_INT 4
8305: ST_TO_ADDR
// end ; 3 :
8306: GO 8362
8308: LD_INT 3
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8361
8316: POP
// begin genPos := [ 148 , 156 , 0 ] ;
8317: LD_ADDR_VAR 0 8
8321: PUSH
8322: LD_INT 148
8324: PUSH
8325: LD_INT 156
8327: PUSH
8328: LD_INT 0
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: ST_TO_ADDR
// movePos := [ 133 , 110 ] ;
8336: LD_ADDR_VAR 0 9
8340: PUSH
8341: LD_INT 133
8343: PUSH
8344: LD_INT 110
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: ST_TO_ADDR
// uc_direction := 0 ;
8351: LD_ADDR_OWVAR 24
8355: PUSH
8356: LD_INT 0
8358: ST_TO_ADDR
// end ; end ;
8359: GO 8362
8361: POP
// vc_engine = engine_siberite ;
8362: LD_ADDR_OWVAR 39
8366: PUSH
8367: LD_INT 3
8369: ST_TO_ADDR
// vc_control = control_manual ;
8370: LD_ADDR_OWVAR 38
8374: PUSH
8375: LD_INT 1
8377: ST_TO_ADDR
// WeaponChosen = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8378: LD_ADDR_VAR 0 13
8382: PUSH
8383: LD_EXP 35
8387: PUSH
8388: LD_INT 1
8390: PPUSH
8391: LD_EXP 35
8395: PPUSH
8396: CALL_OW 12
8400: ARRAY
8401: ST_TO_ADDR
// vc_weapon = WeaponChosen ;
8402: LD_ADDR_OWVAR 40
8406: PUSH
8407: LD_VAR 0 13
8411: ST_TO_ADDR
// if WeaponChosen = 24 or WeaponChosen = 22 or WeaponChosen = 23 or WeaponChosen = 30 then
8412: LD_VAR 0 13
8416: PUSH
8417: LD_INT 24
8419: EQUAL
8420: PUSH
8421: LD_VAR 0 13
8425: PUSH
8426: LD_INT 22
8428: EQUAL
8429: OR
8430: PUSH
8431: LD_VAR 0 13
8435: PUSH
8436: LD_INT 23
8438: EQUAL
8439: OR
8440: PUSH
8441: LD_VAR 0 13
8445: PUSH
8446: LD_INT 30
8448: EQUAL
8449: OR
8450: IFFALSE 8503
// begin arChassisTab = [ 12 , 13 , 14 ] ;
8452: LD_ADDR_VAR 0 10
8456: PUSH
8457: LD_INT 12
8459: PUSH
8460: LD_INT 13
8462: PUSH
8463: LD_INT 14
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: ST_TO_ADDR
// vc_control = control_manual ;
8471: LD_ADDR_OWVAR 38
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8479: LD_ADDR_OWVAR 37
8483: PUSH
8484: LD_VAR 0 10
8488: PUSH
8489: LD_INT 1
8491: PPUSH
8492: LD_VAR 0 10
8496: PPUSH
8497: CALL_OW 12
8501: ARRAY
8502: ST_TO_ADDR
// end ; if WeaponChosen = 28 or WeaponChosen = 27 or WeaponChosen = 26 or WeaponChosen = 25 then
8503: LD_VAR 0 13
8507: PUSH
8508: LD_INT 28
8510: EQUAL
8511: PUSH
8512: LD_VAR 0 13
8516: PUSH
8517: LD_INT 27
8519: EQUAL
8520: OR
8521: PUSH
8522: LD_VAR 0 13
8526: PUSH
8527: LD_INT 26
8529: EQUAL
8530: OR
8531: PUSH
8532: LD_VAR 0 13
8536: PUSH
8537: LD_INT 25
8539: EQUAL
8540: OR
8541: IFFALSE 8594
// begin arChassisTab = [ 13 , 14 , 16 ] ;
8543: LD_ADDR_VAR 0 10
8547: PUSH
8548: LD_INT 13
8550: PUSH
8551: LD_INT 14
8553: PUSH
8554: LD_INT 16
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: ST_TO_ADDR
// vc_control = control_manual ;
8562: LD_ADDR_OWVAR 38
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8570: LD_ADDR_OWVAR 37
8574: PUSH
8575: LD_VAR 0 10
8579: PUSH
8580: LD_INT 1
8582: PPUSH
8583: LD_VAR 0 10
8587: PPUSH
8588: CALL_OW 12
8592: ARRAY
8593: ST_TO_ADDR
// end ; if WeaponChosen = 29 then
8594: LD_VAR 0 13
8598: PUSH
8599: LD_INT 29
8601: EQUAL
8602: IFFALSE 8647
// begin arChassisTab = [ 16 ] ;
8604: LD_ADDR_VAR 0 10
8608: PUSH
8609: LD_INT 16
8611: PUSH
8612: EMPTY
8613: LIST
8614: ST_TO_ADDR
// vc_control = control_apeman ;
8615: LD_ADDR_OWVAR 38
8619: PUSH
8620: LD_INT 5
8622: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8623: LD_ADDR_OWVAR 37
8627: PUSH
8628: LD_VAR 0 10
8632: PUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_VAR 0 10
8640: PPUSH
8641: CALL_OW 12
8645: ARRAY
8646: ST_TO_ADDR
// end ; if WeaponChosen = 72 or WeaponChosen = 71 then
8647: LD_VAR 0 13
8651: PUSH
8652: LD_INT 72
8654: EQUAL
8655: PUSH
8656: LD_VAR 0 13
8660: PUSH
8661: LD_INT 71
8663: EQUAL
8664: OR
8665: IFFALSE 8710
// begin arChassisTab = [ 16 ] ;
8667: LD_ADDR_VAR 0 10
8671: PUSH
8672: LD_INT 16
8674: PUSH
8675: EMPTY
8676: LIST
8677: ST_TO_ADDR
// vc_control = control_manual ;
8678: LD_ADDR_OWVAR 38
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8686: LD_ADDR_OWVAR 37
8690: PUSH
8691: LD_VAR 0 10
8695: PUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_VAR 0 10
8703: PPUSH
8704: CALL_OW 12
8708: ARRAY
8709: ST_TO_ADDR
// end ; veh = CreateVehicle ;
8710: LD_ADDR_VAR 0 11
8714: PUSH
8715: CALL_OW 45
8719: ST_TO_ADDR
// vehGroup = vehGroup ^ veh ;
8720: LD_ADDR_VAR 0 12
8724: PUSH
8725: LD_VAR 0 12
8729: PUSH
8730: LD_VAR 0 11
8734: ADD
8735: ST_TO_ADDR
// PlaceUnitXYR ( veh , genPos [ 1 ] , genPos [ 2 ] , genPos [ 3 ] , false ) ;
8736: LD_VAR 0 11
8740: PPUSH
8741: LD_VAR 0 8
8745: PUSH
8746: LD_INT 1
8748: ARRAY
8749: PPUSH
8750: LD_VAR 0 8
8754: PUSH
8755: LD_INT 2
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 8
8763: PUSH
8764: LD_INT 3
8766: ARRAY
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 50
// if vc_control = 1 then
8775: LD_OWVAR 38
8779: PUSH
8780: LD_INT 1
8782: EQUAL
8783: IFFALSE 8840
// begin hc_gallery =  ;
8785: LD_ADDR_OWVAR 33
8789: PUSH
8790: LD_STRING 
8792: ST_TO_ADDR
// hc_name =  ;
8793: LD_ADDR_OWVAR 26
8797: PUSH
8798: LD_STRING 
8800: ST_TO_ADDR
// PrepareHuman ( false , 3 , ARMechSkill ) ;
8801: LD_INT 0
8803: PPUSH
8804: LD_INT 3
8806: PPUSH
8807: LD_EXP 37
8811: PPUSH
8812: CALL_OW 380
// un = CreateHuman ;
8816: LD_ADDR_VAR 0 7
8820: PUSH
8821: CALL_OW 44
8825: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8826: LD_VAR 0 7
8830: PPUSH
8831: LD_VAR 0 11
8835: PPUSH
8836: CALL_OW 52
// end ; ComMoveXY ( veh , movePos [ 1 ] , movePos [ 2 ] ) ;
8840: LD_VAR 0 11
8844: PPUSH
8845: LD_VAR 0 9
8849: PUSH
8850: LD_INT 1
8852: ARRAY
8853: PPUSH
8854: LD_VAR 0 9
8858: PUSH
8859: LD_INT 2
8861: ARRAY
8862: PPUSH
8863: CALL_OW 111
// wait ( 0 0$3 ) ;
8867: LD_INT 105
8869: PPUSH
8870: CALL_OW 67
// end ;
8874: GO 8160
8876: POP
8877: POP
// wait ( 0 0$5 ) ;
8878: LD_INT 175
8880: PPUSH
8881: CALL_OW 67
// attack_group = attack_group ^ vehGroup ;
8885: LD_ADDR_EXP 55
8889: PUSH
8890: LD_EXP 55
8894: PUSH
8895: LD_VAR 0 12
8899: ADD
8900: ST_TO_ADDR
// end ;
8901: LD_VAR 0 4
8905: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortarCount , medicCount , skil , spawnArea ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
8906: LD_INT 0
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
// for i = 1 to medicCount do
8915: LD_ADDR_VAR 0 11
8919: PUSH
8920: DOUBLE
8921: LD_INT 1
8923: DEC
8924: ST_TO_ADDR
8925: LD_VAR 0 7
8929: PUSH
8930: FOR_TO
8931: IFFALSE 9013
// begin uc_side = side ;
8933: LD_ADDR_OWVAR 20
8937: PUSH
8938: LD_VAR 0 1
8942: ST_TO_ADDR
// uc_nation = nation ;
8943: LD_ADDR_OWVAR 21
8947: PUSH
8948: LD_VAR 0 2
8952: ST_TO_ADDR
// hc_name =  ;
8953: LD_ADDR_OWVAR 26
8957: PUSH
8958: LD_STRING 
8960: ST_TO_ADDR
// hc_gallery =  ;
8961: LD_ADDR_OWVAR 33
8965: PUSH
8966: LD_STRING 
8968: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8969: LD_INT 0
8971: PPUSH
8972: LD_INT 4
8974: PPUSH
8975: LD_VAR 0 8
8979: PPUSH
8980: CALL_OW 380
// un = CreateHuman ;
8984: LD_ADDR_VAR 0 13
8988: PUSH
8989: CALL_OW 44
8993: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8994: LD_VAR 0 13
8998: PPUSH
8999: LD_VAR 0 9
9003: PPUSH
9004: LD_INT 0
9006: PPUSH
9007: CALL_OW 49
// end ;
9011: GO 8930
9013: POP
9014: POP
// for i = 1 to soldierCount do
9015: LD_ADDR_VAR 0 11
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 3
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9129
// begin uc_side = side ;
9033: LD_ADDR_OWVAR 20
9037: PUSH
9038: LD_VAR 0 1
9042: ST_TO_ADDR
// uc_nation = nation ;
9043: LD_ADDR_OWVAR 21
9047: PUSH
9048: LD_VAR 0 2
9052: ST_TO_ADDR
// hc_name =  ;
9053: LD_ADDR_OWVAR 26
9057: PUSH
9058: LD_STRING 
9060: ST_TO_ADDR
// hc_gallery =  ;
9061: LD_ADDR_OWVAR 33
9065: PUSH
9066: LD_STRING 
9068: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9069: LD_INT 0
9071: PPUSH
9072: LD_INT 1
9074: PPUSH
9075: LD_VAR 0 8
9079: PPUSH
9080: CALL_OW 380
// un = CreateHuman ;
9084: LD_ADDR_VAR 0 13
9088: PUSH
9089: CALL_OW 44
9093: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9094: LD_VAR 0 13
9098: PPUSH
9099: LD_VAR 0 9
9103: PPUSH
9104: LD_INT 0
9106: PPUSH
9107: CALL_OW 49
// attack_group = attack_group ^ un ;
9111: LD_ADDR_EXP 55
9115: PUSH
9116: LD_EXP 55
9120: PUSH
9121: LD_VAR 0 13
9125: ADD
9126: ST_TO_ADDR
// end ;
9127: GO 9030
9129: POP
9130: POP
// for i = 1 to sniperCount do
9131: LD_ADDR_VAR 0 11
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_VAR 0 4
9145: PUSH
9146: FOR_TO
9147: IFFALSE 9245
// begin uc_side = side ;
9149: LD_ADDR_OWVAR 20
9153: PUSH
9154: LD_VAR 0 1
9158: ST_TO_ADDR
// uc_nation = nation ;
9159: LD_ADDR_OWVAR 21
9163: PUSH
9164: LD_VAR 0 2
9168: ST_TO_ADDR
// hc_name =  ;
9169: LD_ADDR_OWVAR 26
9173: PUSH
9174: LD_STRING 
9176: ST_TO_ADDR
// hc_gallery =  ;
9177: LD_ADDR_OWVAR 33
9181: PUSH
9182: LD_STRING 
9184: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9185: LD_INT 0
9187: PPUSH
9188: LD_INT 5
9190: PPUSH
9191: LD_VAR 0 8
9195: PPUSH
9196: CALL_OW 380
// un = CreateHuman ;
9200: LD_ADDR_VAR 0 13
9204: PUSH
9205: CALL_OW 44
9209: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9210: LD_VAR 0 13
9214: PPUSH
9215: LD_VAR 0 9
9219: PPUSH
9220: LD_INT 0
9222: PPUSH
9223: CALL_OW 49
// attack_group = attack_group ^ un ;
9227: LD_ADDR_EXP 55
9231: PUSH
9232: LD_EXP 55
9236: PUSH
9237: LD_VAR 0 13
9241: ADD
9242: ST_TO_ADDR
// end ;
9243: GO 9146
9245: POP
9246: POP
// for i = 1 to bazookCount do
9247: LD_ADDR_VAR 0 11
9251: PUSH
9252: DOUBLE
9253: LD_INT 1
9255: DEC
9256: ST_TO_ADDR
9257: LD_VAR 0 5
9261: PUSH
9262: FOR_TO
9263: IFFALSE 9361
// begin uc_side = side ;
9265: LD_ADDR_OWVAR 20
9269: PUSH
9270: LD_VAR 0 1
9274: ST_TO_ADDR
// uc_nation = nation ;
9275: LD_ADDR_OWVAR 21
9279: PUSH
9280: LD_VAR 0 2
9284: ST_TO_ADDR
// hc_name =  ;
9285: LD_ADDR_OWVAR 26
9289: PUSH
9290: LD_STRING 
9292: ST_TO_ADDR
// hc_gallery =  ;
9293: LD_ADDR_OWVAR 33
9297: PUSH
9298: LD_STRING 
9300: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9301: LD_INT 0
9303: PPUSH
9304: LD_INT 9
9306: PPUSH
9307: LD_VAR 0 8
9311: PPUSH
9312: CALL_OW 380
// un = CreateHuman ;
9316: LD_ADDR_VAR 0 13
9320: PUSH
9321: CALL_OW 44
9325: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9326: LD_VAR 0 13
9330: PPUSH
9331: LD_VAR 0 9
9335: PPUSH
9336: LD_INT 0
9338: PPUSH
9339: CALL_OW 49
// attack_group = attack_group ^ un ;
9343: LD_ADDR_EXP 55
9347: PUSH
9348: LD_EXP 55
9352: PUSH
9353: LD_VAR 0 13
9357: ADD
9358: ST_TO_ADDR
// end ;
9359: GO 9262
9361: POP
9362: POP
// for i = 1 to mortarCount do
9363: LD_ADDR_VAR 0 11
9367: PUSH
9368: DOUBLE
9369: LD_INT 1
9371: DEC
9372: ST_TO_ADDR
9373: LD_VAR 0 6
9377: PUSH
9378: FOR_TO
9379: IFFALSE 9477
// begin uc_side = side ;
9381: LD_ADDR_OWVAR 20
9385: PUSH
9386: LD_VAR 0 1
9390: ST_TO_ADDR
// uc_nation = nation ;
9391: LD_ADDR_OWVAR 21
9395: PUSH
9396: LD_VAR 0 2
9400: ST_TO_ADDR
// hc_name =  ;
9401: LD_ADDR_OWVAR 26
9405: PUSH
9406: LD_STRING 
9408: ST_TO_ADDR
// hc_gallery =  ;
9409: LD_ADDR_OWVAR 33
9413: PUSH
9414: LD_STRING 
9416: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9417: LD_INT 0
9419: PPUSH
9420: LD_INT 8
9422: PPUSH
9423: LD_VAR 0 8
9427: PPUSH
9428: CALL_OW 380
// un = CreateHuman ;
9432: LD_ADDR_VAR 0 13
9436: PUSH
9437: CALL_OW 44
9441: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9442: LD_VAR 0 13
9446: PPUSH
9447: LD_VAR 0 9
9451: PPUSH
9452: LD_INT 0
9454: PPUSH
9455: CALL_OW 49
// attack_group = attack_group ^ un ;
9459: LD_ADDR_EXP 55
9463: PUSH
9464: LD_EXP 55
9468: PUSH
9469: LD_VAR 0 13
9473: ADD
9474: ST_TO_ADDR
// end ;
9475: GO 9378
9477: POP
9478: POP
// end ;
9479: LD_VAR 0 10
9483: RET
// export ConvoyGroup , ConvoyGroup2 , ConvoyGroupBoth ; export function PrepareConvoy ( mapSide , solds , vehCombat , vehTransport , ARWeaponsConvoy , convoyNumber ) ; var i , j , un , veh , arChassisTab , genArea ; begin
9484: LD_INT 0
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
9492: PPUSH
// case mapSide of 1 :
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 1
9500: DOUBLE
9501: EQUAL
9502: IFTRUE 9506
9504: GO 9525
9506: POP
// begin genArea := ConvoyNorth ;
9507: LD_ADDR_VAR 0 13
9511: PUSH
9512: LD_INT 8
9514: ST_TO_ADDR
// uc_direction := 2 ;
9515: LD_ADDR_OWVAR 24
9519: PUSH
9520: LD_INT 2
9522: ST_TO_ADDR
// end ; 2 :
9523: GO 9580
9525: LD_INT 2
9527: DOUBLE
9528: EQUAL
9529: IFTRUE 9533
9531: GO 9552
9533: POP
// begin genArea := ConvoyEast ;
9534: LD_ADDR_VAR 0 13
9538: PUSH
9539: LD_INT 9
9541: ST_TO_ADDR
// uc_direction := 4 ;
9542: LD_ADDR_OWVAR 24
9546: PUSH
9547: LD_INT 4
9549: ST_TO_ADDR
// end ; 3 :
9550: GO 9580
9552: LD_INT 3
9554: DOUBLE
9555: EQUAL
9556: IFTRUE 9560
9558: GO 9579
9560: POP
// begin genArea := ConvoySouth ;
9561: LD_ADDR_VAR 0 13
9565: PUSH
9566: LD_INT 10
9568: ST_TO_ADDR
// uc_direction := 0 ;
9569: LD_ADDR_OWVAR 24
9573: PUSH
9574: LD_INT 0
9576: ST_TO_ADDR
// end ; end ;
9577: GO 9580
9579: POP
// for i = 1 to solds do
9580: LD_ADDR_VAR 0 8
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_VAR 0 2
9594: PUSH
9595: FOR_TO
9596: IFFALSE 9734
// begin uc_side = 8 ;
9598: LD_ADDR_OWVAR 20
9602: PUSH
9603: LD_INT 8
9605: ST_TO_ADDR
// uc_nation = 2 ;
9606: LD_ADDR_OWVAR 21
9610: PUSH
9611: LD_INT 2
9613: ST_TO_ADDR
// hc_gallery =  ;
9614: LD_ADDR_OWVAR 33
9618: PUSH
9619: LD_STRING 
9621: ST_TO_ADDR
// hc_name =  ;
9622: LD_ADDR_OWVAR 26
9626: PUSH
9627: LD_STRING 
9629: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , ARSolSkill ) ;
9630: LD_INT 1
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_EXP 36
9640: PPUSH
9641: CALL_OW 380
// un = CreateHuman ;
9645: LD_ADDR_VAR 0 10
9649: PUSH
9650: CALL_OW 44
9654: ST_TO_ADDR
// PlaceUnitArea ( un , genArea , false ) ;
9655: LD_VAR 0 10
9659: PPUSH
9660: LD_VAR 0 13
9664: PPUSH
9665: LD_INT 0
9667: PPUSH
9668: CALL_OW 49
// case convoyNumber of 1 :
9672: LD_VAR 0 6
9676: PUSH
9677: LD_INT 1
9679: DOUBLE
9680: EQUAL
9681: IFTRUE 9685
9683: GO 9704
9685: POP
// ConvoyGroup := ConvoyGroup ^ un ; 2 :
9686: LD_ADDR_EXP 32
9690: PUSH
9691: LD_EXP 32
9695: PUSH
9696: LD_VAR 0 10
9700: ADD
9701: ST_TO_ADDR
9702: GO 9732
9704: LD_INT 2
9706: DOUBLE
9707: EQUAL
9708: IFTRUE 9712
9710: GO 9731
9712: POP
// ConvoyGroup2 := ConvoyGroup2 ^ un ; end ;
9713: LD_ADDR_EXP 33
9717: PUSH
9718: LD_EXP 33
9722: PUSH
9723: LD_VAR 0 10
9727: ADD
9728: ST_TO_ADDR
9729: GO 9732
9731: POP
// end ;
9732: GO 9595
9734: POP
9735: POP
// for i = 1 to vehCombat do
9736: LD_ADDR_VAR 0 8
9740: PUSH
9741: DOUBLE
9742: LD_INT 1
9744: DEC
9745: ST_TO_ADDR
9746: LD_VAR 0 3
9750: PUSH
9751: FOR_TO
9752: IFFALSE 10249
// begin uc_side = 8 ;
9754: LD_ADDR_OWVAR 20
9758: PUSH
9759: LD_INT 8
9761: ST_TO_ADDR
// uc_nation = 2 ;
9762: LD_ADDR_OWVAR 21
9766: PUSH
9767: LD_INT 2
9769: ST_TO_ADDR
// vc_engine = engine_siberite ;
9770: LD_ADDR_OWVAR 39
9774: PUSH
9775: LD_INT 3
9777: ST_TO_ADDR
// vc_control = control_manual ;
9778: LD_ADDR_OWVAR 38
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// vc_weapon = ARWeaponsConvoy [ Rand ( 1 , ARWeaponsConvoy ) ] ;
9786: LD_ADDR_OWVAR 40
9790: PUSH
9791: LD_VAR 0 5
9795: PUSH
9796: LD_INT 1
9798: PPUSH
9799: LD_VAR 0 5
9803: PPUSH
9804: CALL_OW 12
9808: ARRAY
9809: ST_TO_ADDR
// for j = 1 to ARWeapons do
9810: LD_ADDR_VAR 0 9
9814: PUSH
9815: DOUBLE
9816: LD_INT 1
9818: DEC
9819: ST_TO_ADDR
9820: LD_EXP 35
9824: PUSH
9825: FOR_TO
9826: IFFALSE 10103
// begin if ARWeaponsConvoy [ j ] = 24 or ARWeaponsConvoy [ j ] = 22 or ARWeaponsConvoy [ j ] = 23 or ARWeaponsConvoy [ j ] = 30 then
9828: LD_VAR 0 5
9832: PUSH
9833: LD_VAR 0 9
9837: ARRAY
9838: PUSH
9839: LD_INT 24
9841: EQUAL
9842: PUSH
9843: LD_VAR 0 5
9847: PUSH
9848: LD_VAR 0 9
9852: ARRAY
9853: PUSH
9854: LD_INT 22
9856: EQUAL
9857: OR
9858: PUSH
9859: LD_VAR 0 5
9863: PUSH
9864: LD_VAR 0 9
9868: ARRAY
9869: PUSH
9870: LD_INT 23
9872: EQUAL
9873: OR
9874: PUSH
9875: LD_VAR 0 5
9879: PUSH
9880: LD_VAR 0 9
9884: ARRAY
9885: PUSH
9886: LD_INT 30
9888: EQUAL
9889: OR
9890: IFFALSE 9931
// begin arChassisTab = [ 13 , 14 ] ;
9892: LD_ADDR_VAR 0 12
9896: PUSH
9897: LD_INT 13
9899: PUSH
9900: LD_INT 14
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9907: LD_ADDR_OWVAR 37
9911: PUSH
9912: LD_VAR 0 12
9916: PUSH
9917: LD_INT 1
9919: PPUSH
9920: LD_VAR 0 12
9924: PPUSH
9925: CALL_OW 12
9929: ARRAY
9930: ST_TO_ADDR
// end ; if ARWeaponsConvoy [ j ] = 28 or ARWeaponsConvoy [ j ] = 27 or ARWeaponsConvoy [ j ] = 26 or ARWeaponsConvoy [ j ] = 25 then
9931: LD_VAR 0 5
9935: PUSH
9936: LD_VAR 0 9
9940: ARRAY
9941: PUSH
9942: LD_INT 28
9944: EQUAL
9945: PUSH
9946: LD_VAR 0 5
9950: PUSH
9951: LD_VAR 0 9
9955: ARRAY
9956: PUSH
9957: LD_INT 27
9959: EQUAL
9960: OR
9961: PUSH
9962: LD_VAR 0 5
9966: PUSH
9967: LD_VAR 0 9
9971: ARRAY
9972: PUSH
9973: LD_INT 26
9975: EQUAL
9976: OR
9977: PUSH
9978: LD_VAR 0 5
9982: PUSH
9983: LD_VAR 0 9
9987: ARRAY
9988: PUSH
9989: LD_INT 25
9991: EQUAL
9992: OR
9993: IFFALSE 10034
// begin arChassisTab = [ 14 , 16 ] ;
9995: LD_ADDR_VAR 0 12
9999: PUSH
10000: LD_INT 14
10002: PUSH
10003: LD_INT 16
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10010: LD_ADDR_OWVAR 37
10014: PUSH
10015: LD_VAR 0 12
10019: PUSH
10020: LD_INT 1
10022: PPUSH
10023: LD_VAR 0 12
10027: PPUSH
10028: CALL_OW 12
10032: ARRAY
10033: ST_TO_ADDR
// end ; if ARWeaponsConvoy [ j ] = 72 or ARWeaponsConvoy [ j ] = 71 then
10034: LD_VAR 0 5
10038: PUSH
10039: LD_VAR 0 9
10043: ARRAY
10044: PUSH
10045: LD_INT 72
10047: EQUAL
10048: PUSH
10049: LD_VAR 0 5
10053: PUSH
10054: LD_VAR 0 9
10058: ARRAY
10059: PUSH
10060: LD_INT 71
10062: EQUAL
10063: OR
10064: IFFALSE 10101
// begin arChassisTab = [ 16 ] ;
10066: LD_ADDR_VAR 0 12
10070: PUSH
10071: LD_INT 16
10073: PUSH
10074: EMPTY
10075: LIST
10076: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10077: LD_ADDR_OWVAR 37
10081: PUSH
10082: LD_VAR 0 12
10086: PUSH
10087: LD_INT 1
10089: PPUSH
10090: LD_VAR 0 12
10094: PPUSH
10095: CALL_OW 12
10099: ARRAY
10100: ST_TO_ADDR
// end ; end ;
10101: GO 9825
10103: POP
10104: POP
// veh = CreateVehicle ;
10105: LD_ADDR_VAR 0 11
10109: PUSH
10110: CALL_OW 45
10114: ST_TO_ADDR
// hc_gallery =  ;
10115: LD_ADDR_OWVAR 33
10119: PUSH
10120: LD_STRING 
10122: ST_TO_ADDR
// hc_name =  ;
10123: LD_ADDR_OWVAR 26
10127: PUSH
10128: LD_STRING 
10130: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , ARMechSkill ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_INT 3
10136: PPUSH
10137: LD_EXP 37
10141: PPUSH
10142: CALL_OW 380
// un = CreateHuman ;
10146: LD_ADDR_VAR 0 10
10150: PUSH
10151: CALL_OW 44
10155: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10156: LD_VAR 0 10
10160: PPUSH
10161: LD_VAR 0 11
10165: PPUSH
10166: CALL_OW 52
// PlaceUnitArea ( veh , genArea , false ) ;
10170: LD_VAR 0 11
10174: PPUSH
10175: LD_VAR 0 13
10179: PPUSH
10180: LD_INT 0
10182: PPUSH
10183: CALL_OW 49
// case convoyNumber of 1 :
10187: LD_VAR 0 6
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10219
10200: POP
// ConvoyGroup := ConvoyGroup ^ veh ; 2 :
10201: LD_ADDR_EXP 32
10205: PUSH
10206: LD_EXP 32
10210: PUSH
10211: LD_VAR 0 11
10215: ADD
10216: ST_TO_ADDR
10217: GO 10247
10219: LD_INT 2
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10227
10225: GO 10246
10227: POP
// ConvoyGroup2 := ConvoyGroup2 ^ veh ; end ;
10228: LD_ADDR_EXP 33
10232: PUSH
10233: LD_EXP 33
10237: PUSH
10238: LD_VAR 0 11
10242: ADD
10243: ST_TO_ADDR
10244: GO 10247
10246: POP
// end ;
10247: GO 9751
10249: POP
10250: POP
// for i = 1 to vehTransport do
10251: LD_ADDR_VAR 0 8
10255: PUSH
10256: DOUBLE
10257: LD_INT 1
10259: DEC
10260: ST_TO_ADDR
10261: LD_VAR 0 4
10265: PUSH
10266: FOR_TO
10267: IFFALSE 10723
// begin uc_side = 8 ;
10269: LD_ADDR_OWVAR 20
10273: PUSH
10274: LD_INT 8
10276: ST_TO_ADDR
// uc_nation = 2 ;
10277: LD_ADDR_OWVAR 21
10281: PUSH
10282: LD_INT 2
10284: ST_TO_ADDR
// vc_engine = engine_siberite ;
10285: LD_ADDR_OWVAR 39
10289: PUSH
10290: LD_INT 3
10292: ST_TO_ADDR
// vc_control = control_manual ;
10293: LD_ADDR_OWVAR 38
10297: PUSH
10298: LD_INT 1
10300: ST_TO_ADDR
// vc_weapon = ar_cargo_bay ;
10301: LD_ADDR_OWVAR 40
10305: PUSH
10306: LD_INT 32
10308: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
10309: LD_ADDR_OWVAR 37
10313: PUSH
10314: LD_INT 14
10316: ST_TO_ADDR
// veh = CreateVehicle ;
10317: LD_ADDR_VAR 0 11
10321: PUSH
10322: CALL_OW 45
10326: ST_TO_ADDR
// case Rand ( 1 , 5 ) of 1 :
10327: LD_INT 1
10329: PPUSH
10330: LD_INT 5
10332: PPUSH
10333: CALL_OW 12
10337: PUSH
10338: LD_INT 1
10340: DOUBLE
10341: EQUAL
10342: IFTRUE 10346
10344: GO 10379
10346: POP
// begin AddCargo ( veh , mat_cans , 80 ) ;
10347: LD_VAR 0 11
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: LD_INT 80
10357: PPUSH
10358: CALL_OW 291
// AddCargo ( veh , mat_siberit , 20 ) ;
10362: LD_VAR 0 11
10366: PPUSH
10367: LD_INT 3
10369: PPUSH
10370: LD_INT 20
10372: PPUSH
10373: CALL_OW 291
// end ; 2 :
10377: GO 10589
10379: LD_INT 2
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10435
10387: POP
// begin AddCargo ( veh , mat_cans , 50 ) ;
10388: LD_VAR 0 11
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: LD_INT 50
10398: PPUSH
10399: CALL_OW 291
// AddCargo ( veh , mat_oil , 30 ) ;
10403: LD_VAR 0 11
10407: PPUSH
10408: LD_INT 2
10410: PPUSH
10411: LD_INT 30
10413: PPUSH
10414: CALL_OW 291
// AddCargo ( veh , mat_siberit , 20 ) ;
10418: LD_VAR 0 11
10422: PPUSH
10423: LD_INT 3
10425: PPUSH
10426: LD_INT 20
10428: PPUSH
10429: CALL_OW 291
// end ; 3 :
10433: GO 10589
10435: LD_INT 3
10437: DOUBLE
10438: EQUAL
10439: IFTRUE 10443
10441: GO 10476
10443: POP
// begin AddCargo ( veh , mat_cans , 50 ) ;
10444: LD_VAR 0 11
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: LD_INT 50
10454: PPUSH
10455: CALL_OW 291
// AddCargo ( veh , mat_oil , 50 ) ;
10459: LD_VAR 0 11
10463: PPUSH
10464: LD_INT 2
10466: PPUSH
10467: LD_INT 50
10469: PPUSH
10470: CALL_OW 291
// end ; 4 :
10474: GO 10589
10476: LD_INT 4
10478: DOUBLE
10479: EQUAL
10480: IFTRUE 10484
10482: GO 10532
10484: POP
// begin AddCargo ( veh , mat_cans , 40 ) ;
10485: LD_VAR 0 11
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: LD_INT 40
10495: PPUSH
10496: CALL_OW 291
// AddCargo ( veh , mat_oil , 40 ) ;
10500: LD_VAR 0 11
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: LD_INT 40
10510: PPUSH
10511: CALL_OW 291
// AddCargo ( veh , mat_siberit , 20 ) ;
10515: LD_VAR 0 11
10519: PPUSH
10520: LD_INT 3
10522: PPUSH
10523: LD_INT 20
10525: PPUSH
10526: CALL_OW 291
// end ; 5 :
10530: GO 10589
10532: LD_INT 5
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10588
10540: POP
// begin AddCargo ( veh , mat_cans , 60 ) ;
10541: LD_VAR 0 11
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_INT 60
10551: PPUSH
10552: CALL_OW 291
// AddCargo ( veh , mat_oil , 20 ) ;
10556: LD_VAR 0 11
10560: PPUSH
10561: LD_INT 2
10563: PPUSH
10564: LD_INT 20
10566: PPUSH
10567: CALL_OW 291
// AddCargo ( veh , mat_siberit , 20 ) ;
10571: LD_VAR 0 11
10575: PPUSH
10576: LD_INT 3
10578: PPUSH
10579: LD_INT 20
10581: PPUSH
10582: CALL_OW 291
// end ; end ;
10586: GO 10589
10588: POP
// hc_gallery =  ;
10589: LD_ADDR_OWVAR 33
10593: PUSH
10594: LD_STRING 
10596: ST_TO_ADDR
// hc_name =  ;
10597: LD_ADDR_OWVAR 26
10601: PUSH
10602: LD_STRING 
10604: ST_TO_ADDR
// PrepareHuman ( sex_female , 3 , ARMechSkill ) ;
10605: LD_INT 2
10607: PPUSH
10608: LD_INT 3
10610: PPUSH
10611: LD_EXP 37
10615: PPUSH
10616: CALL_OW 380
// un = CreateHuman ;
10620: LD_ADDR_VAR 0 10
10624: PUSH
10625: CALL_OW 44
10629: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10630: LD_VAR 0 10
10634: PPUSH
10635: LD_VAR 0 11
10639: PPUSH
10640: CALL_OW 52
// PlaceUnitArea ( veh , genArea , false ) ;
10644: LD_VAR 0 11
10648: PPUSH
10649: LD_VAR 0 13
10653: PPUSH
10654: LD_INT 0
10656: PPUSH
10657: CALL_OW 49
// case convoyNumber of 1 :
10661: LD_VAR 0 6
10665: PUSH
10666: LD_INT 1
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10693
10674: POP
// ConvoyGroup := ConvoyGroup ^ veh ; 2 :
10675: LD_ADDR_EXP 32
10679: PUSH
10680: LD_EXP 32
10684: PUSH
10685: LD_VAR 0 11
10689: ADD
10690: ST_TO_ADDR
10691: GO 10721
10693: LD_INT 2
10695: DOUBLE
10696: EQUAL
10697: IFTRUE 10701
10699: GO 10720
10701: POP
// ConvoyGroup2 := ConvoyGroup2 ^ veh ; end ;
10702: LD_ADDR_EXP 33
10706: PUSH
10707: LD_EXP 33
10711: PUSH
10712: LD_VAR 0 11
10716: ADD
10717: ST_TO_ADDR
10718: GO 10721
10720: POP
// end ;
10721: GO 10266
10723: POP
10724: POP
// end ;
10725: LD_VAR 0 7
10729: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
10730: LD_INT 0
10732: PPUSH
10733: PPUSH
// dir := GetDir ( b ) ;
10734: LD_ADDR_VAR 0 4
10738: PUSH
10739: LD_VAR 0 2
10743: PPUSH
10744: CALL_OW 254
10748: ST_TO_ADDR
// if dir < 3 then
10749: LD_VAR 0 4
10753: PUSH
10754: LD_INT 3
10756: LESS
10757: IFFALSE 10775
// dir := dir + 3 else
10759: LD_ADDR_VAR 0 4
10763: PUSH
10764: LD_VAR 0 4
10768: PUSH
10769: LD_INT 3
10771: PLUS
10772: ST_TO_ADDR
10773: GO 10789
// dir := dir - 3 ;
10775: LD_ADDR_VAR 0 4
10779: PUSH
10780: LD_VAR 0 4
10784: PUSH
10785: LD_INT 3
10787: MINUS
10788: ST_TO_ADDR
// SetDir ( un , dir ) ;
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 4
10798: PPUSH
10799: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
10803: LD_VAR 0 1
10807: PPUSH
10808: LD_VAR 0 2
10812: PPUSH
10813: CALL_OW 52
// end ;
10817: LD_VAR 0 3
10821: RET
// export function Garrison_Enemy_Base ; var i , j , l , lab , warehouse , breastworks , occupation , man , filter ; begin
10822: LD_INT 0
10824: PPUSH
10825: PPUSH
10826: PPUSH
10827: PPUSH
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
// lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_half ] ] ) ;
10834: LD_ADDR_VAR 0 5
10838: PUSH
10839: LD_INT 22
10841: PUSH
10842: LD_INT 8
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 7
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// warehouse := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) ;
10868: LD_ADDR_VAR 0 6
10872: PUSH
10873: LD_INT 22
10875: PUSH
10876: LD_INT 8
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 30
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PPUSH
10897: CALL_OW 69
10901: ST_TO_ADDR
// breastworks := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_breastwork ] ] ) ;
10902: LD_ADDR_VAR 0 7
10906: PUSH
10907: LD_INT 22
10909: PUSH
10910: LD_INT 8
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 30
10919: PUSH
10920: LD_INT 31
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: ST_TO_ADDR
// uc_side = 8 ;
10936: LD_ADDR_OWVAR 20
10940: PUSH
10941: LD_INT 8
10943: ST_TO_ADDR
// uc_nation = nation_arabian ;
10944: LD_ADDR_OWVAR 21
10948: PUSH
10949: LD_INT 2
10951: ST_TO_ADDR
// for i = 1 to lab do
10952: LD_ADDR_VAR 0 2
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_VAR 0 5
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11065
// begin if IsInUnit ( lab [ i ] ) = 0 then
10970: LD_VAR 0 5
10974: PUSH
10975: LD_VAR 0 2
10979: ARRAY
10980: PPUSH
10981: CALL_OW 310
10985: PUSH
10986: LD_INT 0
10988: EQUAL
10989: IFFALSE 11063
// begin occupation = 2 ;
10991: LD_ADDR_VAR 0 8
10995: PUSH
10996: LD_INT 2
10998: ST_TO_ADDR
// for j = 1 to occupation do
10999: LD_ADDR_VAR 0 3
11003: PUSH
11004: DOUBLE
11005: LD_INT 1
11007: DEC
11008: ST_TO_ADDR
11009: LD_VAR 0 8
11013: PUSH
11014: FOR_TO
11015: IFFALSE 11061
// begin PrepareScientist ( 0 , ARSolSkill ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_EXP 36
11024: PPUSH
11025: CALL_OW 384
// man = CreateHuman ;
11029: LD_ADDR_VAR 0 9
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceHumanInUnit ( man , lab [ i ] ) ;
11039: LD_VAR 0 9
11043: PPUSH
11044: LD_VAR 0 5
11048: PUSH
11049: LD_VAR 0 2
11053: ARRAY
11054: PPUSH
11055: CALL_OW 52
// end ;
11059: GO 11014
11061: POP
11062: POP
// end ; end ;
11063: GO 10967
11065: POP
11066: POP
// for i = 1 to warehouse do
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: DOUBLE
11073: LD_INT 1
11075: DEC
11076: ST_TO_ADDR
11077: LD_VAR 0 6
11081: PUSH
11082: FOR_TO
11083: IFFALSE 11180
// begin if IsInUnit ( warehouse [ i ] ) = 0 then
11085: LD_VAR 0 6
11089: PUSH
11090: LD_VAR 0 2
11094: ARRAY
11095: PPUSH
11096: CALL_OW 310
11100: PUSH
11101: LD_INT 0
11103: EQUAL
11104: IFFALSE 11178
// begin occupation = 3 ;
11106: LD_ADDR_VAR 0 8
11110: PUSH
11111: LD_INT 3
11113: ST_TO_ADDR
// for j = 1 to occupation do
11114: LD_ADDR_VAR 0 3
11118: PUSH
11119: DOUBLE
11120: LD_INT 1
11122: DEC
11123: ST_TO_ADDR
11124: LD_VAR 0 8
11128: PUSH
11129: FOR_TO
11130: IFFALSE 11176
// begin PrepareEngineer ( 1 , ARSolSkill ) ;
11132: LD_INT 1
11134: PPUSH
11135: LD_EXP 36
11139: PPUSH
11140: CALL_OW 382
// man = CreateHuman ;
11144: LD_ADDR_VAR 0 9
11148: PUSH
11149: CALL_OW 44
11153: ST_TO_ADDR
// PlaceHumanInUnit ( man , warehouse [ i ] ) ;
11154: LD_VAR 0 9
11158: PPUSH
11159: LD_VAR 0 6
11163: PUSH
11164: LD_VAR 0 2
11168: ARRAY
11169: PPUSH
11170: CALL_OW 52
// end ;
11174: GO 11129
11176: POP
11177: POP
// end ; end ;
11178: GO 11082
11180: POP
11181: POP
// for i = 1 to breastworks do
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: DOUBLE
11188: LD_INT 1
11190: DEC
11191: ST_TO_ADDR
11192: LD_VAR 0 7
11196: PUSH
11197: FOR_TO
11198: IFFALSE 11273
// if IsInUnit ( breastworks [ i ] ) = 0 then
11200: LD_VAR 0 7
11204: PUSH
11205: LD_VAR 0 2
11209: ARRAY
11210: PPUSH
11211: CALL_OW 310
11215: PUSH
11216: LD_INT 0
11218: EQUAL
11219: IFFALSE 11271
// begin PrepareSoldier ( 1 , ARSolSkill ) ;
11221: LD_INT 1
11223: PPUSH
11224: LD_EXP 36
11228: PPUSH
11229: CALL_OW 381
// hc_class := class_mortar ;
11233: LD_ADDR_OWVAR 28
11237: PUSH
11238: LD_INT 8
11240: ST_TO_ADDR
// man := CreateHuman ;
11241: LD_ADDR_VAR 0 9
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitInBunker ( man , breastworks [ i ] ) ;
11251: LD_VAR 0 9
11255: PPUSH
11256: LD_VAR 0 7
11260: PUSH
11261: LD_VAR 0 2
11265: ARRAY
11266: PPUSH
11267: CALL 10730 0 2
// end ;
11271: GO 11197
11273: POP
11274: POP
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_INT 8
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 32
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 58
11302: PUSH
11303: EMPTY
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 69
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11347
// begin PrepareSoldier ( 1 , ARSolSkill ) ;
11319: LD_INT 1
11321: PPUSH
11322: LD_EXP 36
11326: PPUSH
11327: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
11331: CALL_OW 44
11335: PPUSH
11336: LD_VAR 0 2
11340: PPUSH
11341: CALL_OW 52
// end ;
11345: GO 11316
11347: POP
11348: POP
// end ;
11349: LD_VAR 0 1
11353: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11354: LD_INT 0
11356: PPUSH
11357: PPUSH
11358: PPUSH
11359: PPUSH
11360: PPUSH
11361: PPUSH
11362: PPUSH
11363: PPUSH
11364: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
11365: LD_ADDR_VAR 0 6
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_VAR 0 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 4
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 24
11394: PUSH
11395: LD_INT 251
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 69
11411: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11412: LD_ADDR_VAR 0 7
11416: PUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 25
11436: PUSH
11437: LD_INT 4
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 50
11446: PUSH
11447: EMPTY
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PPUSH
11455: CALL_OW 70
11459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11460: LD_ADDR_VAR 0 10
11464: PUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: LD_INT 22
11472: PUSH
11473: LD_VAR 0 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 21
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: LD_INT 25
11497: PUSH
11498: LD_INT 3
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: LD_INT 24
11514: PUSH
11515: LD_INT 750
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 70
11536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11537: LD_ADDR_VAR 0 11
11541: PUSH
11542: LD_VAR 0 2
11546: PPUSH
11547: LD_INT 22
11549: PUSH
11550: LD_VAR 0 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 3
11571: PUSH
11572: LD_INT 25
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: PPUSH
11609: CALL_OW 70
11613: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
11614: LD_VAR 0 10
11618: NOT
11619: PUSH
11620: LD_VAR 0 7
11624: NOT
11625: AND
11626: PUSH
11627: LD_VAR 0 11
11631: NOT
11632: AND
11633: IFFALSE 11637
// exit ;
11635: GO 11897
// if damageUnits > 0 and sci_list > 0 then
11637: LD_VAR 0 10
11641: PUSH
11642: LD_INT 0
11644: GREATER
11645: PUSH
11646: LD_VAR 0 6
11650: PUSH
11651: LD_INT 0
11653: GREATER
11654: AND
11655: IFFALSE 11688
// for i in damageUnits do
11657: LD_ADDR_VAR 0 8
11661: PUSH
11662: LD_VAR 0 10
11666: PUSH
11667: FOR_IN
11668: IFFALSE 11686
// ComMoveToArea ( i , healArea ) ;
11670: LD_VAR 0 8
11674: PPUSH
11675: LD_VAR 0 2
11679: PPUSH
11680: CALL_OW 113
11684: GO 11667
11686: POP
11687: POP
// if unitsToHeal > 0 and sci_list > 0 then
11688: LD_VAR 0 11
11692: PUSH
11693: LD_INT 0
11695: GREATER
11696: PUSH
11697: LD_VAR 0 6
11701: PUSH
11702: LD_INT 0
11704: GREATER
11705: AND
11706: IFFALSE 11765
// begin for i in sci_list do
11708: LD_ADDR_VAR 0 8
11712: PUSH
11713: LD_VAR 0 6
11717: PUSH
11718: FOR_IN
11719: IFFALSE 11763
// begin ComExitBuilding ( i ) ;
11721: LD_VAR 0 8
11725: PPUSH
11726: CALL_OW 122
// for j in unitsToHeal do
11730: LD_ADDR_VAR 0 9
11734: PUSH
11735: LD_VAR 0 11
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11759
// AddComHeal ( i , j ) ;
11743: LD_VAR 0 8
11747: PPUSH
11748: LD_VAR 0 9
11752: PPUSH
11753: CALL_OW 188
11757: GO 11740
11759: POP
11760: POP
// end ;
11761: GO 11718
11763: POP
11764: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
11765: LD_VAR 0 10
11769: PUSH
11770: LD_INT 0
11772: EQUAL
11773: PUSH
11774: LD_VAR 0 11
11778: PUSH
11779: LD_INT 0
11781: EQUAL
11782: AND
11783: PUSH
11784: LD_VAR 0 7
11788: PUSH
11789: LD_INT 0
11791: GREATER
11792: AND
11793: IFFALSE 11897
// for i in sci_listOutside do
11795: LD_ADDR_VAR 0 8
11799: PUSH
11800: LD_VAR 0 7
11804: PUSH
11805: FOR_IN
11806: IFFALSE 11895
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
11808: LD_ADDR_VAR 0 12
11812: PUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 3
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 30
11837: PUSH
11838: LD_INT 8
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
11855: LD_ADDR_VAR 0 13
11859: PUSH
11860: LD_INT 1
11862: PPUSH
11863: LD_VAR 0 12
11867: PPUSH
11868: CALL_OW 12
11872: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
11873: LD_VAR 0 8
11877: PPUSH
11878: LD_VAR 0 12
11882: PUSH
11883: LD_VAR 0 13
11887: ARRAY
11888: PPUSH
11889: CALL_OW 120
// end ;
11893: GO 11805
11895: POP
11896: POP
// end ;
11897: LD_VAR 0 5
11901: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11902: LD_INT 0
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
11909: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_VAR 0 2
11919: PPUSH
11920: CALL_OW 313
11924: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
11925: LD_ADDR_VAR 0 7
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_VAR 0 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 2
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 24
11954: PUSH
11955: LD_INT 1000
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 3
11964: PUSH
11965: LD_INT 54
11967: PUSH
11968: EMPTY
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11986: LD_ADDR_VAR 0 4
11990: PUSH
11991: LD_INT 22
11993: PUSH
11994: LD_VAR 0 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 3
12015: PUSH
12016: LD_INT 24
12018: PUSH
12019: LD_INT 1000
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12043: LD_VAR 0 4
12047: NOT
12048: PUSH
12049: LD_VAR 0 7
12053: NOT
12054: AND
12055: IFFALSE 12059
// exit ;
12057: GO 12250
// if buildings_list > 0 and engineerOkInside then
12059: LD_VAR 0 4
12063: PUSH
12064: LD_INT 0
12066: GREATER
12067: PUSH
12068: LD_VAR 0 6
12072: AND
12073: IFFALSE 12127
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12075: LD_ADDR_VAR 0 5
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_VAR 0 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 25
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: PUSH
12111: FOR_IN
12112: IFFALSE 12125
// ComExitBuilding ( i ) ;
12114: LD_VAR 0 5
12118: PPUSH
12119: CALL_OW 122
12123: GO 12111
12125: POP
12126: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
12127: LD_VAR 0 4
12131: PUSH
12132: LD_INT 0
12134: GREATER
12135: PUSH
12136: LD_VAR 0 7
12140: PUSH
12141: LD_INT 0
12143: GREATER
12144: AND
12145: IFFALSE 12199
// begin for i in engineerOkOutside do
12147: LD_ADDR_VAR 0 5
12151: PUSH
12152: LD_VAR 0 7
12156: PUSH
12157: FOR_IN
12158: IFFALSE 12197
// for j in buildings_list do
12160: LD_ADDR_VAR 0 8
12164: PUSH
12165: LD_VAR 0 4
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12193
// ComRepairBuilding ( i , j [ 1 ] ) ;
12173: LD_VAR 0 5
12177: PPUSH
12178: LD_VAR 0 8
12182: PUSH
12183: LD_INT 1
12185: ARRAY
12186: PPUSH
12187: CALL_OW 130
12191: GO 12170
12193: POP
12194: POP
12195: GO 12157
12197: POP
12198: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12199: LD_VAR 0 4
12203: PUSH
12204: LD_INT 0
12206: EQUAL
12207: PUSH
12208: LD_VAR 0 7
12212: PUSH
12213: LD_INT 0
12215: GREATER
12216: AND
12217: IFFALSE 12250
// for i in engineerOkOutside do
12219: LD_ADDR_VAR 0 5
12223: PUSH
12224: LD_VAR 0 7
12228: PUSH
12229: FOR_IN
12230: IFFALSE 12248
// ComEnterUnit ( i , building ) ;
12232: LD_VAR 0 5
12236: PPUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: CALL_OW 120
12246: GO 12229
12248: POP
12249: POP
// end ;
12250: LD_VAR 0 3
12254: RET
// export ARWeapons , ARSolSkill , ARMechSkill , ARMinVehCount , ARMaxVehCount , ARMinSolCount , ARMaxSolCount , ARMinMortarCount , ARMaxMortarCount , ARAttackIntervale ; export MercAggressivenessLevel ; export function SetMercenaryAggressivenessLevel ( level ) ; begin
12255: LD_INT 0
12257: PPUSH
// case level of 1 :
12258: LD_VAR 0 1
12262: PUSH
12263: LD_INT 1
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12380
12271: POP
// begin MercAggressivenessLevel := 1 ;
12272: LD_ADDR_EXP 45
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// ARWeapons := [ 24 , 23 , 22 ] ;
12280: LD_ADDR_EXP 35
12284: PUSH
12285: LD_INT 24
12287: PUSH
12288: LD_INT 23
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: ST_TO_ADDR
// ARSolSkill := 6 ;
12299: LD_ADDR_EXP 36
12303: PUSH
12304: LD_INT 6
12306: ST_TO_ADDR
// ARMechSkill := 6 ;
12307: LD_ADDR_EXP 37
12311: PUSH
12312: LD_INT 6
12314: ST_TO_ADDR
// ARMinVehCount := 1 ;
12315: LD_ADDR_EXP 38
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// ARMaxVehCount := 2 ;
12323: LD_ADDR_EXP 39
12327: PUSH
12328: LD_INT 2
12330: ST_TO_ADDR
// ARMinSolCount := 1 ;
12331: LD_ADDR_EXP 40
12335: PUSH
12336: LD_INT 1
12338: ST_TO_ADDR
// ARMaxSolCount := 3 ;
12339: LD_ADDR_EXP 41
12343: PUSH
12344: LD_INT 3
12346: ST_TO_ADDR
// ARMinMortarCount := 0 ;
12347: LD_ADDR_EXP 42
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// ARMaxMortarCount := 0 ;
12355: LD_ADDR_EXP 43
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// ARAttackIntervale := [ 4 4$0 , 5 5$0 ] ;
12363: LD_ADDR_EXP 44
12367: PUSH
12368: LD_INT 8400
12370: PUSH
12371: LD_INT 10500
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: ST_TO_ADDR
// end ; 2 :
12378: GO 13256
12380: LD_INT 2
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 12501
12388: POP
// begin MercAggressivenessLevel := 2 ;
12389: LD_ADDR_EXP 45
12393: PUSH
12394: LD_INT 2
12396: ST_TO_ADDR
// ARWeapons := [ 24 , 23 , 25 , 26 ] ;
12397: LD_ADDR_EXP 35
12401: PUSH
12402: LD_INT 24
12404: PUSH
12405: LD_INT 23
12407: PUSH
12408: LD_INT 25
12410: PUSH
12411: LD_INT 26
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: ST_TO_ADDR
// ARSolSkill := 6 ;
12420: LD_ADDR_EXP 36
12424: PUSH
12425: LD_INT 6
12427: ST_TO_ADDR
// ARMechSkill := 6 ;
12428: LD_ADDR_EXP 37
12432: PUSH
12433: LD_INT 6
12435: ST_TO_ADDR
// ARMinVehCount := 1 ;
12436: LD_ADDR_EXP 38
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// ARMaxVehCount := 2 ;
12444: LD_ADDR_EXP 39
12448: PUSH
12449: LD_INT 2
12451: ST_TO_ADDR
// ARMinSolCount := 1 ;
12452: LD_ADDR_EXP 40
12456: PUSH
12457: LD_INT 1
12459: ST_TO_ADDR
// ARMaxSolCount := 4 ;
12460: LD_ADDR_EXP 41
12464: PUSH
12465: LD_INT 4
12467: ST_TO_ADDR
// ARMinMortarCount := 0 ;
12468: LD_ADDR_EXP 42
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// ARMaxMortarCount := 0 ;
12476: LD_ADDR_EXP 43
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// ARAttackIntervale := [ 4 4$0 , 5 5$0 ] ;
12484: LD_ADDR_EXP 44
12488: PUSH
12489: LD_INT 8400
12491: PUSH
12492: LD_INT 10500
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: ST_TO_ADDR
// end ; 3 :
12499: GO 13256
12501: LD_INT 3
12503: DOUBLE
12504: EQUAL
12505: IFTRUE 12509
12507: GO 12618
12509: POP
// begin MercAggressivenessLevel := 3 ;
12510: LD_ADDR_EXP 45
12514: PUSH
12515: LD_INT 3
12517: ST_TO_ADDR
// ARWeapons := [ 25 , 26 , 27 ] ;
12518: LD_ADDR_EXP 35
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 26
12528: PUSH
12529: LD_INT 27
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: ST_TO_ADDR
// ARSolSkill := 7 ;
12537: LD_ADDR_EXP 36
12541: PUSH
12542: LD_INT 7
12544: ST_TO_ADDR
// ARMechSkill := 7 ;
12545: LD_ADDR_EXP 37
12549: PUSH
12550: LD_INT 7
12552: ST_TO_ADDR
// ARMinVehCount := 2 ;
12553: LD_ADDR_EXP 38
12557: PUSH
12558: LD_INT 2
12560: ST_TO_ADDR
// ARMaxVehCount := 3 ;
12561: LD_ADDR_EXP 39
12565: PUSH
12566: LD_INT 3
12568: ST_TO_ADDR
// ARMinSolCount := 2 ;
12569: LD_ADDR_EXP 40
12573: PUSH
12574: LD_INT 2
12576: ST_TO_ADDR
// ARMaxSolCount := 4 ;
12577: LD_ADDR_EXP 41
12581: PUSH
12582: LD_INT 4
12584: ST_TO_ADDR
// ARMinMortarCount := 0 ;
12585: LD_ADDR_EXP 42
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// ARMaxMortarCount := 0 ;
12593: LD_ADDR_EXP 43
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// ARAttackIntervale := [ 3 3$30 , 4 4$30 ] ;
12601: LD_ADDR_EXP 44
12605: PUSH
12606: LD_INT 7350
12608: PUSH
12609: LD_INT 9450
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: ST_TO_ADDR
// end ; 4 :
12616: GO 13256
12618: LD_INT 4
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12743
12626: POP
// begin MercAggressivenessLevel := 4 ;
12627: LD_ADDR_EXP 45
12631: PUSH
12632: LD_INT 4
12634: ST_TO_ADDR
// ARWeapons := [ 25 , 26 , 27 , 29 , 72 ] ;
12635: LD_ADDR_EXP 35
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 26
12645: PUSH
12646: LD_INT 27
12648: PUSH
12649: LD_INT 29
12651: PUSH
12652: LD_INT 72
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: ST_TO_ADDR
// ARSolSkill := 7 ;
12662: LD_ADDR_EXP 36
12666: PUSH
12667: LD_INT 7
12669: ST_TO_ADDR
// ARMechSkill := 7 ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 7
12677: ST_TO_ADDR
// ARMinVehCount := 2 ;
12678: LD_ADDR_EXP 38
12682: PUSH
12683: LD_INT 2
12685: ST_TO_ADDR
// ARMaxVehCount := 4 ;
12686: LD_ADDR_EXP 39
12690: PUSH
12691: LD_INT 4
12693: ST_TO_ADDR
// ARMinSolCount := 3 ;
12694: LD_ADDR_EXP 40
12698: PUSH
12699: LD_INT 3
12701: ST_TO_ADDR
// ARMaxSolCount := 5 ;
12702: LD_ADDR_EXP 41
12706: PUSH
12707: LD_INT 5
12709: ST_TO_ADDR
// ARMinMortarCount := 0 ;
12710: LD_ADDR_EXP 42
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// ARMaxMortarCount := 1 ;
12718: LD_ADDR_EXP 43
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// ARAttackIntervale := [ 3 3$30 , 4 4$30 ] ;
12726: LD_ADDR_EXP 44
12730: PUSH
12731: LD_INT 7350
12733: PUSH
12734: LD_INT 9450
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
// end ; 5 :
12741: GO 13256
12743: LD_INT 5
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12872
12751: POP
// begin MercAggressivenessLevel := 5 ;
12752: LD_ADDR_EXP 45
12756: PUSH
12757: LD_INT 5
12759: ST_TO_ADDR
// ARWeapons := [ 25 , 26 , 27 , 28 , 29 , 72 ] ;
12760: LD_ADDR_EXP 35
12764: PUSH
12765: LD_INT 25
12767: PUSH
12768: LD_INT 26
12770: PUSH
12771: LD_INT 27
12773: PUSH
12774: LD_INT 28
12776: PUSH
12777: LD_INT 29
12779: PUSH
12780: LD_INT 72
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: ST_TO_ADDR
// ARSolSkill := 8 ;
12791: LD_ADDR_EXP 36
12795: PUSH
12796: LD_INT 8
12798: ST_TO_ADDR
// ARMechSkill := 8 ;
12799: LD_ADDR_EXP 37
12803: PUSH
12804: LD_INT 8
12806: ST_TO_ADDR
// ARMinVehCount := 2 ;
12807: LD_ADDR_EXP 38
12811: PUSH
12812: LD_INT 2
12814: ST_TO_ADDR
// ARMaxVehCount := 5 ;
12815: LD_ADDR_EXP 39
12819: PUSH
12820: LD_INT 5
12822: ST_TO_ADDR
// ARMinSolCount := 3 ;
12823: LD_ADDR_EXP 40
12827: PUSH
12828: LD_INT 3
12830: ST_TO_ADDR
// ARMaxSolCount := 5 ;
12831: LD_ADDR_EXP 41
12835: PUSH
12836: LD_INT 5
12838: ST_TO_ADDR
// ARMinMortarCount := 0 ;
12839: LD_ADDR_EXP 42
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// ARMaxMortarCount := 2 ;
12847: LD_ADDR_EXP 43
12851: PUSH
12852: LD_INT 2
12854: ST_TO_ADDR
// ARAttackIntervale := [ 3 3$00 , 4 4$00 ] ;
12855: LD_ADDR_EXP 44
12859: PUSH
12860: LD_INT 6300
12862: PUSH
12863: LD_INT 8400
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: ST_TO_ADDR
// end ; 6 :
12870: GO 13256
12872: LD_INT 6
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 13005
12880: POP
// begin MercAggressivenessLevel := 6 ;
12881: LD_ADDR_EXP 45
12885: PUSH
12886: LD_INT 6
12888: ST_TO_ADDR
// ARWeapons := [ 25 , 26 , 27 , 28 , 29 , 72 , 73 ] ;
12889: LD_ADDR_EXP 35
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 26
12899: PUSH
12900: LD_INT 27
12902: PUSH
12903: LD_INT 28
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: LD_INT 72
12911: PUSH
12912: LD_INT 73
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: ST_TO_ADDR
// ARSolSkill := 8 ;
12924: LD_ADDR_EXP 36
12928: PUSH
12929: LD_INT 8
12931: ST_TO_ADDR
// ARMechSkill := 8 ;
12932: LD_ADDR_EXP 37
12936: PUSH
12937: LD_INT 8
12939: ST_TO_ADDR
// ARMinVehCount := 3 ;
12940: LD_ADDR_EXP 38
12944: PUSH
12945: LD_INT 3
12947: ST_TO_ADDR
// ARMaxVehCount := 6 ;
12948: LD_ADDR_EXP 39
12952: PUSH
12953: LD_INT 6
12955: ST_TO_ADDR
// ARMinSolCount := 4 ;
12956: LD_ADDR_EXP 40
12960: PUSH
12961: LD_INT 4
12963: ST_TO_ADDR
// ARMaxSolCount := 7 ;
12964: LD_ADDR_EXP 41
12968: PUSH
12969: LD_INT 7
12971: ST_TO_ADDR
// ARMinMortarCount := 1 ;
12972: LD_ADDR_EXP 42
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// ARMaxMortarCount := 3 ;
12980: LD_ADDR_EXP 43
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
// ARAttackIntervale := [ 4 4$0 , 5 5$0 ] ;
12988: LD_ADDR_EXP 44
12992: PUSH
12993: LD_INT 8400
12995: PUSH
12996: LD_INT 10500
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: ST_TO_ADDR
// end ; 7 :
13003: GO 13256
13005: LD_INT 7
13007: DOUBLE
13008: EQUAL
13009: IFTRUE 13013
13011: GO 13130
13013: POP
// begin MercAggressivenessLevel := 7 ;
13014: LD_ADDR_EXP 45
13018: PUSH
13019: LD_INT 7
13021: ST_TO_ADDR
// ARWeapons := [ 26 , 28 , 29 , 72 , 73 ] ;
13022: LD_ADDR_EXP 35
13026: PUSH
13027: LD_INT 26
13029: PUSH
13030: LD_INT 28
13032: PUSH
13033: LD_INT 29
13035: PUSH
13036: LD_INT 72
13038: PUSH
13039: LD_INT 73
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: ST_TO_ADDR
// ARSolSkill := 9 ;
13049: LD_ADDR_EXP 36
13053: PUSH
13054: LD_INT 9
13056: ST_TO_ADDR
// ARMechSkill := 9 ;
13057: LD_ADDR_EXP 37
13061: PUSH
13062: LD_INT 9
13064: ST_TO_ADDR
// ARMinVehCount := 3 ;
13065: LD_ADDR_EXP 38
13069: PUSH
13070: LD_INT 3
13072: ST_TO_ADDR
// ARMaxVehCount := 7 ;
13073: LD_ADDR_EXP 39
13077: PUSH
13078: LD_INT 7
13080: ST_TO_ADDR
// ARMinSolCount := 5 ;
13081: LD_ADDR_EXP 40
13085: PUSH
13086: LD_INT 5
13088: ST_TO_ADDR
// ARMaxSolCount := 8 ;
13089: LD_ADDR_EXP 41
13093: PUSH
13094: LD_INT 8
13096: ST_TO_ADDR
// ARMinMortarCount := 2 ;
13097: LD_ADDR_EXP 42
13101: PUSH
13102: LD_INT 2
13104: ST_TO_ADDR
// ARMaxMortarCount := 3 ;
13105: LD_ADDR_EXP 43
13109: PUSH
13110: LD_INT 3
13112: ST_TO_ADDR
// ARAttackIntervale := [ 4 4$0 , 5 5$0 ] ;
13113: LD_ADDR_EXP 44
13117: PUSH
13118: LD_INT 8400
13120: PUSH
13121: LD_INT 10500
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
// end ; 8 :
13128: GO 13256
13130: LD_INT 8
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13255
13138: POP
// begin MercAggressivenessLevel := 8 ;
13139: LD_ADDR_EXP 45
13143: PUSH
13144: LD_INT 8
13146: ST_TO_ADDR
// ARWeapons := [ 26 , 28 , 29 , 72 , 73 ] ;
13147: LD_ADDR_EXP 35
13151: PUSH
13152: LD_INT 26
13154: PUSH
13155: LD_INT 28
13157: PUSH
13158: LD_INT 29
13160: PUSH
13161: LD_INT 72
13163: PUSH
13164: LD_INT 73
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: ST_TO_ADDR
// ARSolSkill := 10 ;
13174: LD_ADDR_EXP 36
13178: PUSH
13179: LD_INT 10
13181: ST_TO_ADDR
// ARMechSkill := 10 ;
13182: LD_ADDR_EXP 37
13186: PUSH
13187: LD_INT 10
13189: ST_TO_ADDR
// ARMinVehCount := 4 ;
13190: LD_ADDR_EXP 38
13194: PUSH
13195: LD_INT 4
13197: ST_TO_ADDR
// ARMaxVehCount := 8 ;
13198: LD_ADDR_EXP 39
13202: PUSH
13203: LD_INT 8
13205: ST_TO_ADDR
// ARMinSolCount := 6 ;
13206: LD_ADDR_EXP 40
13210: PUSH
13211: LD_INT 6
13213: ST_TO_ADDR
// ARMaxSolCount := 9 ;
13214: LD_ADDR_EXP 41
13218: PUSH
13219: LD_INT 9
13221: ST_TO_ADDR
// ARMinMortarCount := 2 ;
13222: LD_ADDR_EXP 42
13226: PUSH
13227: LD_INT 2
13229: ST_TO_ADDR
// ARMaxMortarCount := 3 ;
13230: LD_ADDR_EXP 43
13234: PUSH
13235: LD_INT 3
13237: ST_TO_ADDR
// ARAttackIntervale := [ 4 4$0 , 4 4$30 ] ;
13238: LD_ADDR_EXP 44
13242: PUSH
13243: LD_INT 8400
13245: PUSH
13246: LD_INT 9450
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
// end ; end ;
13253: GO 13256
13255: POP
// end ; end_of_file
13256: LD_VAR 0 2
13260: RET
// on ArtifactUsed ( side , button , paramaraj1 , paramaraj2 ) do var i ;
13261: LD_INT 0
13263: PPUSH
// begin if side = 7 and button = art_use_power then
13264: LD_VAR 0 1
13268: PUSH
13269: LD_INT 7
13271: EQUAL
13272: PUSH
13273: LD_VAR 0 2
13277: PUSH
13278: LD_INT 9
13280: EQUAL
13281: AND
13282: IFFALSE 13326
// begin for i in LabTechTesla do
13284: LD_ADDR_VAR 0 5
13288: PUSH
13289: LD_EXP 31
13293: PUSH
13294: FOR_IN
13295: IFFALSE 13324
// if IsSelected ( i ) then
13297: LD_VAR 0 5
13301: PPUSH
13302: CALL_OW 306
13306: IFFALSE 13322
// ComResearch ( i , Tech_Tesla ) end end ;
13308: LD_VAR 0 5
13312: PPUSH
13313: LD_EXP 54
13317: PPUSH
13318: CALL_OW 124
13322: GO 13294
13324: POP
13325: POP
13326: PPOPN 5
13328: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 8 and GetType ( un ) = unit_human then
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 255
13338: PUSH
13339: LD_INT 8
13341: EQUAL
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 247
13352: PUSH
13353: LD_INT 1
13355: EQUAL
13356: AND
13357: IFFALSE 13375
// MercsKilled = MercsKilled + 1 else
13359: LD_ADDR_EXP 63
13363: PUSH
13364: LD_EXP 63
13368: PUSH
13369: LD_INT 1
13371: PLUS
13372: ST_TO_ADDR
13373: GO 13568
// if un = Simone then
13375: LD_VAR 0 1
13379: PUSH
13380: LD_EXP 7
13384: EQUAL
13385: IFFALSE 13413
// begin ExclusiveOn ;
13387: CALL_OW 4
// Wait ( 0 0$2 ) ;
13391: LD_INT 70
13393: PPUSH
13394: CALL_OW 67
// YouLost ( Simone ) ;
13398: LD_STRING Simone
13400: PPUSH
13401: CALL_OW 104
// ExclusiveOff ;
13405: CALL_OW 5
// exit ;
13409: GO 13568
// end else
13411: GO 13568
// if un = Kathryn then
13413: LD_VAR 0 1
13417: PUSH
13418: LD_EXP 8
13422: EQUAL
13423: IFFALSE 13451
// begin ExclusiveOn ;
13425: CALL_OW 4
// Wait ( 0 0$2 ) ;
13429: LD_INT 70
13431: PPUSH
13432: CALL_OW 67
// YouLost ( Kathryn ) ;
13436: LD_STRING Kathryn
13438: PPUSH
13439: CALL_OW 104
// ExclusiveOff ;
13443: CALL_OW 5
// exit ;
13447: GO 13568
// end else
13449: GO 13568
// if un = Miller then
13451: LD_VAR 0 1
13455: PUSH
13456: LD_EXP 9
13460: EQUAL
13461: IFFALSE 13489
// begin ExclusiveOn ;
13463: CALL_OW 4
// Wait ( 0 0$2 ) ;
13467: LD_INT 70
13469: PPUSH
13470: CALL_OW 67
// YouLost ( Miller ) ;
13474: LD_STRING Miller
13476: PPUSH
13477: CALL_OW 104
// ExclusiveOff ;
13481: CALL_OW 5
// exit ;
13485: GO 13568
// end else
13487: GO 13568
// if un = Esther then
13489: LD_VAR 0 1
13493: PUSH
13494: LD_EXP 14
13498: EQUAL
13499: IFFALSE 13527
// begin ExclusiveOn ;
13501: CALL_OW 4
// Wait ( 0 0$2 ) ;
13505: LD_INT 70
13507: PPUSH
13508: CALL_OW 67
// YouLost ( Esther ) ;
13512: LD_STRING Esther
13514: PPUSH
13515: CALL_OW 104
// ExclusiveOff ;
13519: CALL_OW 5
// exit ;
13523: GO 13568
// end else
13525: GO 13568
// if un = GeoBase and not Evacuation then
13527: LD_VAR 0 1
13531: PUSH
13532: LD_INT 2
13534: EQUAL
13535: PUSH
13536: LD_EXP 5
13540: NOT
13541: AND
13542: IFFALSE 13568
// begin ExclusiveOn ;
13544: CALL_OW 4
// Wait ( 0 0$2 ) ;
13548: LD_INT 70
13550: PPUSH
13551: CALL_OW 67
// YouLost ( BaseDestroyed ) ;
13555: LD_STRING BaseDestroyed
13557: PPUSH
13558: CALL_OW 104
// ExclusiveOff ;
13562: CALL_OW 5
// exit ;
13566: GO 13568
// end end ;
13568: PPOPN 1
13570: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 7 and side2 = 1 ) or ( side1 = 1 and side2 = 7 ) then
13571: LD_VAR 0 1
13575: PUSH
13576: LD_INT 7
13578: EQUAL
13579: PUSH
13580: LD_VAR 0 2
13584: PUSH
13585: LD_INT 1
13587: EQUAL
13588: AND
13589: PUSH
13590: LD_VAR 0 1
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: PUSH
13599: LD_VAR 0 2
13603: PUSH
13604: LD_INT 7
13606: EQUAL
13607: AND
13608: OR
13609: IFFALSE 13648
// begin ExclusiveOn ;
13611: CALL_OW 4
// DialogueOn ;
13615: CALL_OW 6
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
13619: LD_EXP 16
13623: PPUSH
13624: LD_STRING DFriendlyFire-Barnes-1
13626: PPUSH
13627: CALL_OW 88
// DialogueOff ;
13631: CALL_OW 7
// YouLost ( FriendlyFire ) ;
13635: LD_STRING FriendlyFire
13637: PPUSH
13638: CALL_OW 104
// ExclusiveOff ;
13642: CALL_OW 5
// exit ;
13646: GO 13648
// end ; end ; end_of_file
13648: PPOPN 2
13650: END
// export ar_heavy_tracked , us_tesla_coil , ar_liquid_siberite , ar_heavy_gun , ar_mobile_mortar , ru_laser , ru_rocket_battery , ru_flame_thrower , Tech_Tesla ; export function InitiateConstants ; begin
13651: LD_INT 0
13653: PPUSH
// ar_heavy_tracked := 16 ;
13654: LD_ADDR_EXP 46
13658: PUSH
13659: LD_INT 16
13661: ST_TO_ADDR
// us_tesla_coil := 70 ;
13662: LD_ADDR_EXP 47
13666: PUSH
13667: LD_INT 70
13669: ST_TO_ADDR
// ar_liquid_siberite := 71 ;
13670: LD_ADDR_EXP 48
13674: PUSH
13675: LD_INT 71
13677: ST_TO_ADDR
// ar_heavy_gun := 72 ;
13678: LD_ADDR_EXP 49
13682: PUSH
13683: LD_INT 72
13685: ST_TO_ADDR
// ar_mobile_mortar := 73 ;
13686: LD_ADDR_EXP 50
13690: PUSH
13691: LD_INT 73
13693: ST_TO_ADDR
// ru_laser := 74 ;
13694: LD_ADDR_EXP 51
13698: PUSH
13699: LD_INT 74
13701: ST_TO_ADDR
// ru_rocket_battery := 75 ;
13702: LD_ADDR_EXP 52
13706: PUSH
13707: LD_INT 75
13709: ST_TO_ADDR
// ru_flame_thrower := 76 ;
13710: LD_ADDR_EXP 53
13714: PUSH
13715: LD_INT 76
13717: ST_TO_ADDR
// Tech_Tesla := 73 ;
13718: LD_ADDR_EXP 54
13722: PUSH
13723: LD_INT 73
13725: ST_TO_ADDR
// end ; end_of_file
13726: LD_VAR 0 1
13730: RET
// export attack_group ; export function AIEngageEnemy ; var enemy , attacker ; begin
13731: LD_INT 0
13733: PPUSH
13734: PPUSH
13735: PPUSH
// enemy = Filterallunits ( [ f_side , 7 ] ) ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 22
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: ST_TO_ADDR
// for attacker in attack_group do
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_EXP 55
13765: PUSH
13766: FOR_IN
13767: IFFALSE 13795
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
13769: LD_VAR 0 3
13773: PPUSH
13774: LD_VAR 0 2
13778: PPUSH
13779: LD_VAR 0 3
13783: PPUSH
13784: CALL_OW 74
13788: PPUSH
13789: CALL_OW 115
13793: GO 13766
13795: POP
13796: POP
// end ;
13797: LD_VAR 0 1
13801: RET
// every 0 0$1 do
13802: GO 13804
13804: DISABLE
// begin enable ;
13805: ENABLE
// AIEngageEnemy ;
13806: CALL 13731 0 0
// end ;
13810: END
// every 0 0$1 trigger OutpostCaptured and not LastStand do
13811: LD_EXP 2
13815: PUSH
13816: LD_EXP 4
13820: NOT
13821: AND
13822: IFFALSE 13880
13824: GO 13826
13826: DISABLE
// begin wait ( Rand ( ARAttackIntervale [ 1 ] , ARAttackIntervale [ 2 ] ) ) ;
13827: LD_EXP 44
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PPUSH
13836: LD_EXP 44
13840: PUSH
13841: LD_INT 2
13843: ARRAY
13844: PPUSH
13845: CALL_OW 12
13849: PPUSH
13850: CALL_OW 67
// GenerateVehicleAttack ( 8 , 0 , Rand ( ARMinVehCount , ARMaxVehCount ) ) ;
13854: LD_INT 8
13856: PPUSH
13857: LD_INT 0
13859: PPUSH
13860: LD_EXP 38
13864: PPUSH
13865: LD_EXP 39
13869: PPUSH
13870: CALL_OW 12
13874: PPUSH
13875: CALL 7961 0 3
// enable ;
13879: ENABLE
// end ;
13880: END
// every 0 0$1 trigger OutpostCaptured and not LastStand do
13881: LD_EXP 2
13885: PUSH
13886: LD_EXP 4
13890: NOT
13891: AND
13892: IFFALSE 13982
13894: GO 13896
13896: DISABLE
// begin wait ( Rand ( ARAttackIntervale [ 1 ] , ARAttackIntervale [ 2 ] ) ) ;
13897: LD_EXP 44
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: LD_EXP 44
13910: PUSH
13911: LD_INT 2
13913: ARRAY
13914: PPUSH
13915: CALL_OW 12
13919: PPUSH
13920: CALL_OW 67
// RespawnAttackInfantry ( 8 , 2 , Rand ( ARMinSolCount , ARMaxSolCount ) , 0 , 0 , Rand ( ARMinMortarCount , ARMaxMortarCount ) , 0 , ARSolSkill , SoldierSpawn ) ;
13924: LD_INT 8
13926: PPUSH
13927: LD_INT 2
13929: PPUSH
13930: LD_EXP 40
13934: PPUSH
13935: LD_EXP 41
13939: PPUSH
13940: CALL_OW 12
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: LD_INT 0
13950: PPUSH
13951: LD_EXP 42
13955: PPUSH
13956: LD_EXP 43
13960: PPUSH
13961: CALL_OW 12
13965: PPUSH
13966: LD_INT 0
13968: PPUSH
13969: LD_EXP 36
13973: PPUSH
13974: LD_INT 12
13976: PPUSH
13977: CALL 8906 0 9
// enable ;
13981: ENABLE
// end ;
13982: END
// every 0 0$1 trigger not OutpostCaptured do
13983: LD_EXP 2
13987: NOT
13988: IFFALSE 14057
13990: GO 13992
13992: DISABLE
// begin enable ;
13993: ENABLE
// RepairBuilding ( 8 , GeoBase ) ;
13994: LD_INT 8
13996: PPUSH
13997: LD_INT 2
13999: PPUSH
14000: CALL 11902 0 2
// HealUnitInBase ( 8 , GeoBaseHealArea , GeoBaseArea , FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) ) ;
14004: LD_INT 8
14006: PPUSH
14007: LD_INT 13
14009: PPUSH
14010: LD_INT 14
14012: PPUSH
14013: LD_INT 22
14015: PUSH
14016: LD_INT 8
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 21
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 30
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 69
14052: PPUSH
14053: CALL 11354 0 4
// end ; end_of_file
14057: END
// export ThresholdLvl2 , ThresholdLvl3 , ThresholdLvl4 , ThresholdLvl5 , ThresholdLvl6 , ThresholdLvl7 , ThresholdLvl8 ; export MercsKilled ; every 0 0$1 trigger MercsKilled >= ThresholdLvl2 and Difficulty < 3 and not LastStand do
14058: LD_EXP 63
14062: PUSH
14063: LD_EXP 56
14067: GREATEREQUAL
14068: PUSH
14069: LD_OWVAR 67
14073: PUSH
14074: LD_INT 3
14076: LESS
14077: AND
14078: PUSH
14079: LD_EXP 4
14083: NOT
14084: AND
14085: IFFALSE 14097
14087: GO 14089
14089: DISABLE
// SetMercenaryAggressivenessLevel ( 2 ) ;
14090: LD_INT 2
14092: PPUSH
14093: CALL 12255 0 1
14097: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl3 and not LastStand do
14098: LD_EXP 63
14102: PUSH
14103: LD_EXP 57
14107: GREATEREQUAL
14108: PUSH
14109: LD_EXP 4
14113: NOT
14114: AND
14115: IFFALSE 14127
14117: GO 14119
14119: DISABLE
// SetMercenaryAggressivenessLevel ( 3 ) ;
14120: LD_INT 3
14122: PPUSH
14123: CALL 12255 0 1
14127: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl4 and not LastStand do
14128: LD_EXP 63
14132: PUSH
14133: LD_EXP 58
14137: GREATEREQUAL
14138: PUSH
14139: LD_EXP 4
14143: NOT
14144: AND
14145: IFFALSE 14157
14147: GO 14149
14149: DISABLE
// SetMercenaryAggressivenessLevel ( 4 ) ;
14150: LD_INT 4
14152: PPUSH
14153: CALL 12255 0 1
14157: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl5 and not LastStand do
14158: LD_EXP 63
14162: PUSH
14163: LD_EXP 59
14167: GREATEREQUAL
14168: PUSH
14169: LD_EXP 4
14173: NOT
14174: AND
14175: IFFALSE 14187
14177: GO 14179
14179: DISABLE
// SetMercenaryAggressivenessLevel ( 5 ) ;
14180: LD_INT 5
14182: PPUSH
14183: CALL 12255 0 1
14187: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl6 and Difficulty = 3 and not LastStand do
14188: LD_EXP 63
14192: PUSH
14193: LD_EXP 60
14197: GREATEREQUAL
14198: PUSH
14199: LD_OWVAR 67
14203: PUSH
14204: LD_INT 3
14206: EQUAL
14207: AND
14208: PUSH
14209: LD_EXP 4
14213: NOT
14214: AND
14215: IFFALSE 14227
14217: GO 14219
14219: DISABLE
// SetMercenaryAggressivenessLevel ( 6 ) ;
14220: LD_INT 6
14222: PPUSH
14223: CALL 12255 0 1
14227: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl7 and Difficulty = 3 and not LastStand do
14228: LD_EXP 63
14232: PUSH
14233: LD_EXP 61
14237: GREATEREQUAL
14238: PUSH
14239: LD_OWVAR 67
14243: PUSH
14244: LD_INT 3
14246: EQUAL
14247: AND
14248: PUSH
14249: LD_EXP 4
14253: NOT
14254: AND
14255: IFFALSE 14267
14257: GO 14259
14259: DISABLE
// SetMercenaryAggressivenessLevel ( 7 ) ;
14260: LD_INT 7
14262: PPUSH
14263: CALL 12255 0 1
14267: END
// every 0 0$1 trigger MercsKilled >= ThresholdLvl8 and Difficulty = 3 and not LastStand do
14268: LD_EXP 63
14272: PUSH
14273: LD_EXP 62
14277: GREATEREQUAL
14278: PUSH
14279: LD_OWVAR 67
14283: PUSH
14284: LD_INT 3
14286: EQUAL
14287: AND
14288: PUSH
14289: LD_EXP 4
14293: NOT
14294: AND
14295: IFFALSE 14307
14297: GO 14299
14299: DISABLE
// SetMercenaryAggressivenessLevel ( 8 ) ; end_of_file
14300: LD_INT 8
14302: PPUSH
14303: CALL 12255 0 1
14307: END
// export function PrepareDifficulty ; begin
14308: LD_INT 0
14310: PPUSH
// if difficulty = 1 then
14311: LD_OWVAR 67
14315: PUSH
14316: LD_INT 1
14318: EQUAL
14319: IFFALSE 14464
// begin SetMercenaryAggressivenessLevel ( 1 ) ;
14321: LD_INT 1
14323: PPUSH
14324: CALL 12255 0 1
// AddResourceType ( GetBase ( GeoBase ) , mat_cans , 250 ) ;
14328: LD_INT 2
14330: PPUSH
14331: CALL_OW 274
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: LD_INT 250
14341: PPUSH
14342: CALL_OW 276
// AddResourceType ( GetBase ( GeoBase ) , mat_oil , 150 ) ;
14346: LD_INT 2
14348: PPUSH
14349: CALL_OW 274
14353: PPUSH
14354: LD_INT 2
14356: PPUSH
14357: LD_INT 150
14359: PPUSH
14360: CALL_OW 276
// AddResourceType ( GetBase ( GeoBase ) , mat_siberit , 50 ) ;
14364: LD_INT 2
14366: PPUSH
14367: CALL_OW 274
14371: PPUSH
14372: LD_INT 3
14374: PPUSH
14375: LD_INT 50
14377: PPUSH
14378: CALL_OW 276
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14382: LD_INT 48
14384: PPUSH
14385: LD_INT 8
14387: PPUSH
14388: LD_INT 2
14390: PPUSH
14391: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14395: LD_INT 51
14397: PPUSH
14398: LD_INT 8
14400: PPUSH
14401: LD_INT 2
14403: PPUSH
14404: CALL_OW 322
// ThresholdLvl2 := 19 ;
14408: LD_ADDR_EXP 56
14412: PUSH
14413: LD_INT 19
14415: ST_TO_ADDR
// ThresholdLvl3 := 54 ;
14416: LD_ADDR_EXP 57
14420: PUSH
14421: LD_INT 54
14423: ST_TO_ADDR
// ThresholdLvl4 := 87 ;
14424: LD_ADDR_EXP 58
14428: PUSH
14429: LD_INT 87
14431: ST_TO_ADDR
// ThresholdLvl5 := 119 ;
14432: LD_ADDR_EXP 59
14436: PUSH
14437: LD_INT 119
14439: ST_TO_ADDR
// ThresholdLvl6 := 999 ;
14440: LD_ADDR_EXP 60
14444: PUSH
14445: LD_INT 999
14447: ST_TO_ADDR
// ThresholdLvl7 := 999 ;
14448: LD_ADDR_EXP 61
14452: PUSH
14453: LD_INT 999
14455: ST_TO_ADDR
// ThresholdLvl8 := 999 ;
14456: LD_ADDR_EXP 62
14460: PUSH
14461: LD_INT 999
14463: ST_TO_ADDR
// end ; if difficulty = 2 then
14464: LD_OWVAR 67
14468: PUSH
14469: LD_INT 2
14471: EQUAL
14472: IFFALSE 14669
// begin SetMercenaryAggressivenessLevel ( 1 ) ;
14474: LD_INT 1
14476: PPUSH
14477: CALL 12255 0 1
// AddResourceType ( GetBase ( GeoBase ) , mat_cans , 100 ) ;
14481: LD_INT 2
14483: PPUSH
14484: CALL_OW 274
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: LD_INT 100
14494: PPUSH
14495: CALL_OW 276
// AddResourceType ( GetBase ( GeoBase ) , mat_oil , 50 ) ;
14499: LD_INT 2
14501: PPUSH
14502: CALL_OW 274
14506: PPUSH
14507: LD_INT 2
14509: PPUSH
14510: LD_INT 50
14512: PPUSH
14513: CALL_OW 276
// AddResourceType ( GetBase ( GeoBase ) , mat_siberit , 25 ) ;
14517: LD_INT 2
14519: PPUSH
14520: CALL_OW 274
14524: PPUSH
14525: LD_INT 3
14527: PPUSH
14528: LD_INT 25
14530: PPUSH
14531: CALL_OW 276
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14535: LD_INT 48
14537: PPUSH
14538: LD_INT 8
14540: PPUSH
14541: LD_INT 2
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
14548: LD_INT 49
14550: PPUSH
14551: LD_INT 8
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14561: LD_INT 51
14563: PPUSH
14564: LD_INT 8
14566: PPUSH
14567: LD_INT 2
14569: PPUSH
14570: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14574: LD_INT 52
14576: PPUSH
14577: LD_INT 8
14579: PPUSH
14580: LD_INT 2
14582: PPUSH
14583: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
14587: LD_INT 66
14589: PPUSH
14590: LD_INT 8
14592: PPUSH
14593: LD_INT 2
14595: PPUSH
14596: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
14600: LD_INT 5
14602: PPUSH
14603: LD_INT 8
14605: PPUSH
14606: LD_INT 2
14608: PPUSH
14609: CALL_OW 322
// ThresholdLvl2 := 14 ;
14613: LD_ADDR_EXP 56
14617: PUSH
14618: LD_INT 14
14620: ST_TO_ADDR
// ThresholdLvl3 := 41 ;
14621: LD_ADDR_EXP 57
14625: PUSH
14626: LD_INT 41
14628: ST_TO_ADDR
// ThresholdLvl4 := 64 ;
14629: LD_ADDR_EXP 58
14633: PUSH
14634: LD_INT 64
14636: ST_TO_ADDR
// ThresholdLvl5 := 101 ;
14637: LD_ADDR_EXP 59
14641: PUSH
14642: LD_INT 101
14644: ST_TO_ADDR
// ThresholdLvl6 := 999 ;
14645: LD_ADDR_EXP 60
14649: PUSH
14650: LD_INT 999
14652: ST_TO_ADDR
// ThresholdLvl7 := 999 ;
14653: LD_ADDR_EXP 61
14657: PUSH
14658: LD_INT 999
14660: ST_TO_ADDR
// ThresholdLvl8 := 999 ;
14661: LD_ADDR_EXP 62
14665: PUSH
14666: LD_INT 999
14668: ST_TO_ADDR
// end ; if difficulty = 3 then
14669: LD_OWVAR 67
14673: PUSH
14674: LD_INT 3
14676: EQUAL
14677: IFFALSE 14846
// begin SetMercenaryAggressivenessLevel ( 2 ) ;
14679: LD_INT 2
14681: PPUSH
14682: CALL 12255 0 1
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14686: LD_INT 48
14688: PPUSH
14689: LD_INT 8
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
14699: LD_INT 49
14701: PPUSH
14702: LD_INT 8
14704: PPUSH
14705: LD_INT 2
14707: PPUSH
14708: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
14712: LD_INT 50
14714: PPUSH
14715: LD_INT 8
14717: PPUSH
14718: LD_INT 2
14720: PPUSH
14721: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14725: LD_INT 51
14727: PPUSH
14728: LD_INT 8
14730: PPUSH
14731: LD_INT 2
14733: PPUSH
14734: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14738: LD_INT 52
14740: PPUSH
14741: LD_INT 8
14743: PPUSH
14744: LD_INT 2
14746: PPUSH
14747: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
14751: LD_INT 66
14753: PPUSH
14754: LD_INT 8
14756: PPUSH
14757: LD_INT 2
14759: PPUSH
14760: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
14764: LD_INT 67
14766: PPUSH
14767: LD_INT 8
14769: PPUSH
14770: LD_INT 2
14772: PPUSH
14773: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
14777: LD_INT 5
14779: PPUSH
14780: LD_INT 8
14782: PPUSH
14783: LD_INT 2
14785: PPUSH
14786: CALL_OW 322
// ThresholdLvl2 := 0 ;
14790: LD_ADDR_EXP 56
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// ThresholdLvl3 := 24 ;
14798: LD_ADDR_EXP 57
14802: PUSH
14803: LD_INT 24
14805: ST_TO_ADDR
// ThresholdLvl4 := 52 ;
14806: LD_ADDR_EXP 58
14810: PUSH
14811: LD_INT 52
14813: ST_TO_ADDR
// ThresholdLvl5 := 74 ;
14814: LD_ADDR_EXP 59
14818: PUSH
14819: LD_INT 74
14821: ST_TO_ADDR
// ThresholdLvl6 := 99 ;
14822: LD_ADDR_EXP 60
14826: PUSH
14827: LD_INT 99
14829: ST_TO_ADDR
// ThresholdLvl7 := 131 ;
14830: LD_ADDR_EXP 61
14834: PUSH
14835: LD_INT 131
14837: ST_TO_ADDR
// ThresholdLvl8 := 155 ;
14838: LD_ADDR_EXP 62
14842: PUSH
14843: LD_INT 155
14845: ST_TO_ADDR
// end ; end ; end_of_file
14846: LD_VAR 0 1
14850: RET
// export EscMercs , ConvoysEscaped ; every 0 0$0.8 do var qqq , i , un , my_filter ;
14851: GO 14853
14853: DISABLE
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
// begin ConvoyGroupBoth = ConvoyGroup ^ ConvoyGroup2 ;
14860: LD_ADDR_EXP 34
14864: PUSH
14865: LD_EXP 32
14869: PUSH
14870: LD_EXP 33
14874: ADD
14875: ST_TO_ADDR
// for un in ConvoyGroupBoth do
14876: LD_ADDR_VAR 0 3
14880: PUSH
14881: LD_EXP 34
14885: PUSH
14886: FOR_IN
14887: IFFALSE 14968
// begin if IsInArea ( un , ExitArea ) then
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 11
14896: PPUSH
14897: CALL_OW 308
14901: IFFALSE 14966
// begin if GetType ( un ) = unit_vehicle then
14903: LD_VAR 0 3
14907: PPUSH
14908: CALL_OW 247
14912: PUSH
14913: LD_INT 2
14915: EQUAL
14916: IFFALSE 14943
// begin RemoveUnit ( IsDrivenBy ( un ) ) ;
14918: LD_VAR 0 3
14922: PPUSH
14923: CALL_OW 311
14927: PPUSH
14928: CALL_OW 64
// RemoveUnit ( un ) ;
14932: LD_VAR 0 3
14936: PPUSH
14937: CALL_OW 64
// end else
14941: GO 14952
// begin RemoveUnit ( un ) ;
14943: LD_VAR 0 3
14947: PPUSH
14948: CALL_OW 64
// end ; EscMercs = EscMercs + 1 ;
14952: LD_ADDR_EXP 64
14956: PUSH
14957: LD_EXP 64
14961: PUSH
14962: LD_INT 1
14964: PLUS
14965: ST_TO_ADDR
// end ; end ;
14966: GO 14886
14968: POP
14969: POP
// enable ;
14970: ENABLE
// end ;
14971: PPOPN 4
14973: END
// every 0 0$1 trigger EscMercs > 3 do
14974: LD_EXP 64
14978: PUSH
14979: LD_INT 3
14981: GREATER
14982: IFFALSE 15139
14984: GO 14986
14986: DISABLE
// begin case ConvoysEscaped of 0 :
14987: LD_EXP 65
14991: PUSH
14992: LD_INT 0
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15000
14998: GO 15038
15000: POP
// begin SayRadio ( Barnes , D4d-Barnes-1 ) ;
15001: LD_EXP 16
15005: PPUSH
15006: LD_STRING D4d-Barnes-1
15008: PPUSH
15009: CALL_OW 94
// Wait ( 1 1$0 ) ;
15013: LD_INT 2100
15015: PPUSH
15016: CALL_OW 67
// ConvoysEscaped = 1 ;
15020: LD_ADDR_EXP 65
15024: PUSH
15025: LD_INT 1
15027: ST_TO_ADDR
// EscMercs = 0 ;
15028: LD_ADDR_EXP 64
15032: PUSH
15033: LD_INT 0
15035: ST_TO_ADDR
// end ; 1 :
15036: GO 15138
15038: LD_INT 1
15040: DOUBLE
15041: EQUAL
15042: IFTRUE 15046
15044: GO 15084
15046: POP
// begin SayRadio ( Barnes , D4d-Barnes-2 ) ;
15047: LD_EXP 16
15051: PPUSH
15052: LD_STRING D4d-Barnes-2
15054: PPUSH
15055: CALL_OW 94
// Wait ( 1 1$0 ) ;
15059: LD_INT 2100
15061: PPUSH
15062: CALL_OW 67
// ConvoysEscaped = 2 ;
15066: LD_ADDR_EXP 65
15070: PUSH
15071: LD_INT 2
15073: ST_TO_ADDR
// EscMercs = 0 ;
15074: LD_ADDR_EXP 64
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// end ; 2 :
15082: GO 15138
15084: LD_INT 2
15086: DOUBLE
15087: EQUAL
15088: IFTRUE 15092
15090: GO 15137
15092: POP
// begin ConvoysEscaped = 3 ;
15093: LD_ADDR_EXP 65
15097: PUSH
15098: LD_INT 3
15100: ST_TO_ADDR
// DialogueOn ;
15101: CALL_OW 6
// SayRadio ( Barnes , D4d-Barnes-3 ) ;
15105: LD_EXP 16
15109: PPUSH
15110: LD_STRING D4d-Barnes-3
15112: PPUSH
15113: CALL_OW 94
// Wait ( 0 0$1 ) ;
15117: LD_INT 35
15119: PPUSH
15120: CALL_OW 67
// DialogueOff ;
15124: CALL_OW 7
// YouLost ( TooManyConvoys ) ;
15128: LD_STRING TooManyConvoys
15130: PPUSH
15131: CALL_OW 104
// end ; end ;
15135: GO 15138
15137: POP
// enable ;
15138: ENABLE
// end ;
15139: END
// export player_units , saved_player_units , Simone_saved , Kathryn_saved , Miller_saved , Esther_saved ; every 0 0$0.8 do var qqq , i , un , my_filter ;
15140: GO 15142
15142: DISABLE
15143: LD_INT 0
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
// begin if Evacuation then
15149: LD_EXP 5
15153: IFFALSE 15217
// my_filter := FilterUnitsInArea ( ExitArea , [ [ f_side , 7 ] , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ] ) ;
15155: LD_ADDR_VAR 0 4
15159: PUSH
15160: LD_INT 11
15162: PPUSH
15163: LD_INT 22
15165: PUSH
15166: LD_INT 7
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 3
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 25
15181: PUSH
15182: LD_INT 16
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 25
15191: PUSH
15192: LD_INT 15
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PPUSH
15212: CALL_OW 70
15216: ST_TO_ADDR
// if my_filter + 0 > 0 then
15217: LD_VAR 0 4
15221: PUSH
15222: LD_INT 0
15224: PLUS
15225: PUSH
15226: LD_INT 0
15228: GREATER
15229: IFFALSE 15528
// for un in my_filter do
15231: LD_ADDR_VAR 0 3
15235: PUSH
15236: LD_VAR 0 4
15240: PUSH
15241: FOR_IN
15242: IFFALSE 15526
// begin if un = Simone or ( IsDrivenBy ( un ) = Simone ) then
15244: LD_VAR 0 3
15248: PUSH
15249: LD_EXP 7
15253: EQUAL
15254: PUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: CALL_OW 311
15264: PUSH
15265: LD_EXP 7
15269: EQUAL
15270: OR
15271: IFFALSE 15281
// begin Simone_saved := true ;
15273: LD_ADDR_EXP 68
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// end ; if un = Kathryn or ( IsDrivenBy ( un ) = Kathryn ) then
15281: LD_VAR 0 3
15285: PUSH
15286: LD_EXP 8
15290: EQUAL
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 311
15301: PUSH
15302: LD_EXP 8
15306: EQUAL
15307: OR
15308: IFFALSE 15318
// begin Kathryn_saved := true ;
15310: LD_ADDR_EXP 69
15314: PUSH
15315: LD_INT 1
15317: ST_TO_ADDR
// end ; if un = Miller or ( IsDrivenBy ( un ) = Miller ) then
15318: LD_VAR 0 3
15322: PUSH
15323: LD_EXP 9
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 311
15338: PUSH
15339: LD_EXP 9
15343: EQUAL
15344: OR
15345: IFFALSE 15355
// begin Miller_saved := true ;
15347: LD_ADDR_EXP 70
15351: PUSH
15352: LD_INT 1
15354: ST_TO_ADDR
// end ; if un = Esther or ( IsDrivenBy ( un ) = Esther ) then
15355: LD_VAR 0 3
15359: PUSH
15360: LD_EXP 14
15364: EQUAL
15365: PUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: CALL_OW 311
15375: PUSH
15376: LD_EXP 14
15380: EQUAL
15381: OR
15382: IFFALSE 15392
// begin Esther_saved := true ;
15384: LD_ADDR_EXP 71
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// end ; if Evacuation then
15392: LD_EXP 5
15396: IFFALSE 15524
// begin if GetType ( un ) = unit_vehicle and GetSide ( IsDrivenBy ( un ) ) = 7 and not GetNation ( IsDrivenBy ( un ) ) = nation_nature then
15398: LD_VAR 0 3
15402: PPUSH
15403: CALL_OW 247
15407: PUSH
15408: LD_INT 2
15410: EQUAL
15411: PUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: CALL_OW 311
15421: PPUSH
15422: CALL_OW 255
15426: PUSH
15427: LD_INT 7
15429: EQUAL
15430: AND
15431: PUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: CALL_OW 311
15441: PPUSH
15442: CALL_OW 248
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: NOT
15451: AND
15452: IFFALSE 15477
// saved_player_units := saved_player_units union IsDrivenBy ( un ) else
15454: LD_ADDR_EXP 67
15458: PUSH
15459: LD_EXP 67
15463: PUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: CALL_OW 311
15473: UNION
15474: ST_TO_ADDR
15475: GO 15524
// if GetSide ( un ) = 7 and not GetNation ( un ) = nation_nature then
15477: LD_VAR 0 3
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 7
15489: EQUAL
15490: PUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: CALL_OW 248
15500: PUSH
15501: LD_INT 0
15503: EQUAL
15504: NOT
15505: AND
15506: IFFALSE 15524
// saved_player_units := saved_player_units union un ;
15508: LD_ADDR_EXP 67
15512: PUSH
15513: LD_EXP 67
15517: PUSH
15518: LD_VAR 0 3
15522: UNION
15523: ST_TO_ADDR
// end ; end ;
15524: GO 15241
15526: POP
15527: POP
// for un in player_units do
15528: LD_ADDR_VAR 0 3
15532: PUSH
15533: LD_EXP 66
15537: PUSH
15538: FOR_IN
15539: IFFALSE 15570
// if IsDead ( un ) then
15541: LD_VAR 0 3
15545: PPUSH
15546: CALL_OW 301
15550: IFFALSE 15568
// player_units := player_units diff un ;
15552: LD_ADDR_EXP 66
15556: PUSH
15557: LD_EXP 66
15561: PUSH
15562: LD_VAR 0 3
15566: DIFF
15567: ST_TO_ADDR
15568: GO 15538
15570: POP
15571: POP
// for un in my_filter do
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_VAR 0 4
15581: PUSH
15582: FOR_IN
15583: IFFALSE 15673
// begin if GetType ( un ) = unit_vehicle then
15585: LD_VAR 0 3
15589: PPUSH
15590: CALL_OW 247
15594: PUSH
15595: LD_INT 2
15597: EQUAL
15598: IFFALSE 15646
// begin player_units := player_units diff ( IsDrivenBy ( un ) ) ;
15600: LD_ADDR_EXP 66
15604: PUSH
15605: LD_EXP 66
15609: PUSH
15610: LD_VAR 0 3
15614: PPUSH
15615: CALL_OW 311
15619: DIFF
15620: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( un ) ) ;
15621: LD_VAR 0 3
15625: PPUSH
15626: CALL_OW 311
15630: PPUSH
15631: CALL_OW 64
// RemoveUnit ( un ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: CALL_OW 64
// end else
15644: GO 15671
// begin player_units := player_units diff un ;
15646: LD_ADDR_EXP 66
15650: PUSH
15651: LD_EXP 66
15655: PUSH
15656: LD_VAR 0 3
15660: DIFF
15661: ST_TO_ADDR
// RemoveUnit ( un ) ;
15662: LD_VAR 0 3
15666: PPUSH
15667: CALL_OW 64
// end ; end ;
15671: GO 15582
15673: POP
15674: POP
// if Simone_saved and Kathryn_saved and Miller_saved and Esther_saved and player_units = 0 then
15675: LD_EXP 68
15679: PUSH
15680: LD_EXP 69
15684: AND
15685: PUSH
15686: LD_EXP 70
15690: AND
15691: PUSH
15692: LD_EXP 71
15696: AND
15697: PUSH
15698: LD_EXP 66
15702: PUSH
15703: LD_INT 0
15705: EQUAL
15706: AND
15707: IFFALSE 15713
// EndMission ;
15709: CALL 15717 0 0
// enable ;
15713: ENABLE
// end ; end_of_file
15714: PPOPN 4
15716: END
// export function EndMission ; var pom , pom1 , i , all_people , drv , filter ; begin
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
// Wait ( 0 0$1 ) ;
15726: LD_INT 35
15728: PPUSH
15729: CALL_OW 67
// saved_player_units := UnitFilter ( saved_player_units , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) ;
15733: LD_ADDR_EXP 67
15737: PUSH
15738: LD_EXP 67
15742: PPUSH
15743: LD_INT 3
15745: PUSH
15746: LD_INT 2
15748: PUSH
15749: LD_INT 25
15751: PUSH
15752: LD_INT 16
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 25
15761: PUSH
15762: LD_INT 15
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PPUSH
15778: CALL_OW 72
15782: ST_TO_ADDR
// if ConvoysEscaped = 0 then
15783: LD_EXP 65
15787: PUSH
15788: LD_INT 0
15790: EQUAL
15791: IFFALSE 15805
// AddMedal ( Convoys , 1 ) else
15793: LD_STRING Convoys
15795: PPUSH
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 101
15803: GO 15816
// AddMedal ( Convoys , - 1 ) ;
15805: LD_STRING Convoys
15807: PPUSH
15808: LD_INT 1
15810: NEG
15811: PPUSH
15812: CALL_OW 101
// SaveVariable ( ConvoysEscaped , AM03_Convoys ) ;
15816: LD_EXP 65
15820: PPUSH
15821: LD_STRING AM03_Convoys
15823: PPUSH
15824: CALL_OW 39
// if EstherQuestCompleted then
15828: LD_EXP 28
15832: IFFALSE 15846
// AddMedal ( Esther , 1 ) else
15834: LD_STRING Esther
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 101
15844: GO 15923
// if not EstherQuestCompleted and BioCollected = 3 then
15846: LD_EXP 28
15850: NOT
15851: PUSH
15852: LD_EXP 21
15856: PUSH
15857: LD_INT 3
15859: EQUAL
15860: AND
15861: IFFALSE 15876
// AddMedal ( Esther , - 1 ) else
15863: LD_STRING Esther
15865: PPUSH
15866: LD_INT 1
15868: NEG
15869: PPUSH
15870: CALL_OW 101
15874: GO 15923
// if not EstherQuestCompleted and BioCollected < 3 and BioLabSecured then
15876: LD_EXP 28
15880: NOT
15881: PUSH
15882: LD_EXP 21
15886: PUSH
15887: LD_INT 3
15889: LESS
15890: AND
15891: PUSH
15892: LD_EXP 3
15896: AND
15897: IFFALSE 15912
// AddMedal ( Esther , - 2 ) else
15899: LD_STRING Esther
15901: PPUSH
15902: LD_INT 2
15904: NEG
15905: PPUSH
15906: CALL_OW 101
15910: GO 15923
// AddMedal ( Esther , - 3 ) ;
15912: LD_STRING Esther
15914: PPUSH
15915: LD_INT 3
15917: NEG
15918: PPUSH
15919: CALL_OW 101
// SaveVariable ( EstherQuestCompleted , AM03_EstherResearch ) ;
15923: LD_EXP 28
15927: PPUSH
15928: LD_STRING AM03_EstherResearch
15930: PPUSH
15931: CALL_OW 39
// filter := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_oil_mine ] , [ f_btype , b_bunker ] ] ] ] ) ;
15935: LD_ADDR_VAR 0 7
15939: PUSH
15940: LD_INT 21
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: LD_INT 30
15958: PUSH
15959: LD_INT 26
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 30
15968: PUSH
15969: LD_INT 29
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 30
15978: PUSH
15979: LD_INT 32
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PPUSH
16000: CALL_OW 69
16004: ST_TO_ADDR
// if TeslaQuestCompleted then
16005: LD_EXP 30
16009: IFFALSE 16023
// AddMedal ( Tesla , 1 ) else
16011: LD_STRING Tesla
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 101
16021: GO 16072
// if not TeslaQuestCompleted and GetTech ( Tech_Tesla , 7 ) = state_researched then
16023: LD_EXP 30
16027: NOT
16028: PUSH
16029: LD_EXP 54
16033: PPUSH
16034: LD_INT 7
16036: PPUSH
16037: CALL_OW 321
16041: PUSH
16042: LD_INT 2
16044: EQUAL
16045: AND
16046: IFFALSE 16061
// AddMedal ( Tesla , - 1 ) else
16048: LD_STRING Tesla
16050: PPUSH
16051: LD_INT 1
16053: NEG
16054: PPUSH
16055: CALL_OW 101
16059: GO 16072
// AddMedal ( Tesla , - 2 ) ;
16061: LD_STRING Tesla
16063: PPUSH
16064: LD_INT 2
16066: NEG
16067: PPUSH
16068: CALL_OW 101
// SaveVariable ( TeslaQuestCompleted , AM03_TeslaResearched ) ;
16072: LD_EXP 30
16076: PPUSH
16077: LD_STRING AM03_TeslaResearched
16079: PPUSH
16080: CALL_OW 39
// GiveMedals ( Main ) ;
16084: LD_STRING Main
16086: PPUSH
16087: CALL_OW 102
// RewardPeople ( saved_player_units ) ;
16091: LD_EXP 67
16095: PPUSH
16096: CALL_OW 43
// SaveCharacters ( Simone , Simone ) ;
16100: LD_EXP 7
16104: PPUSH
16105: LD_STRING Simone
16107: PPUSH
16108: CALL_OW 38
// SaveCharacters ( Kathryn , Kathryn ) ;
16112: LD_EXP 8
16116: PPUSH
16117: LD_STRING Kathryn
16119: PPUSH
16120: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
16124: LD_EXP 9
16128: PPUSH
16129: LD_STRING Miller
16131: PPUSH
16132: CALL_OW 38
// SaveCharacters ( Esther , Esther ) ;
16136: LD_EXP 14
16140: PPUSH
16141: LD_STRING Esther
16143: PPUSH
16144: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
16148: LD_EXP 10
16152: PPUSH
16153: LD_STRING Edmonds
16155: PPUSH
16156: CALL_OW 38
// SaveCharacters ( Pravar , Pravar ) ;
16160: LD_EXP 13
16164: PPUSH
16165: LD_STRING Pravar
16167: PPUSH
16168: CALL_OW 38
// SaveCharacters ( saved_player_units diff [ Simone , Kathryn , Miller , Esther , Edmonds , Pravar ] , AM03_Survivors ) ;
16172: LD_EXP 67
16176: PUSH
16177: LD_EXP 7
16181: PUSH
16182: LD_EXP 8
16186: PUSH
16187: LD_EXP 9
16191: PUSH
16192: LD_EXP 14
16196: PUSH
16197: LD_EXP 10
16201: PUSH
16202: LD_EXP 13
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: DIFF
16215: PPUSH
16216: LD_STRING AM03_Survivors
16218: PPUSH
16219: CALL_OW 38
// YouWin ;
16223: CALL_OW 103
// exit ;
16227: GO 16229
// end ; end_of_file
16229: LD_VAR 0 1
16233: RET
// every 0 0$1 trigger OutpostCaptured do
16234: LD_EXP 2
16238: IFFALSE 16280
16240: GO 16242
16242: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
16243: LD_INT 2100
16245: PPUSH
16246: LD_INT 3150
16248: PPUSH
16249: CALL_OW 12
16253: PPUSH
16254: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
16258: LD_INT 2
16260: PPUSH
16261: LD_INT 5
16263: PPUSH
16264: CALL_OW 12
16268: PPUSH
16269: LD_INT 15
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: CALL_OW 55
// enable ;
16279: ENABLE
// end ;
16280: END
