Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 251]]);
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_class, 4], [f_ok]]);
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not sci_listOutside and not unitsToHeal then exit;

  if damageUnits > 0 and sci_list > 0 then
    for i in damageUnits do ComMoveToArea(i, healArea);

  if unitsToHeal > 0 and sci_list > 0 then
  begin
    for i in sci_list do
    begin

      ComExitBuilding(i);

      for j in unitsToHeal do AddComHeal(i, j);
    end;
  end;

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
      for i in sci_listOutside do
      begin
          tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
          rnd = rand(1, tmp);
          ComEnterUnit(i, tmp[rnd]);
      end;

END;

Export function RepairBuilding(side, building);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

  engineerOkInside = UnitsInside(building);
  engineerOkOutside = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000], [f_not, [f_inside]]]);
  buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not engineerOkOutside then exit;

  if buildings_list > 0 and engineerOkInside then
     for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do ComExitBuilding(i);

  if buildings_list > 0  and engineerOkOutside > 0 then
  begin

    for i in engineerOkOutside do
      for j in buildings_list do
          ComRepairBuilding(i, j[1]);

  end;

  if buildings_list = 0 and engineerOkOutside > 0 then
      for i in engineerOkOutside do ComEnterUnit(i, building);
END;

Export Function IntBazooka(list); // by Serpent, usage of special ammo by RU bazookers
var ta, c, i, side, filter;
begin
if not list then
    exit;

    side := GetSide(list[1]);
    list := UnitFilter(list, [f_class, class_bazooker]);
    filter := FilterAllUnits([[f_enemy, Side], [f_not, [f_type, unit_building]]]);

    c := Rand(1, 3);

        for i = 1 to list do
        for ta in filter do
            begin

            if GetDistUnits(list[i], ta) <= 15 then
                begin
                    Case c of
                    1: begin
                        ComTimeShift(list[i], GetX(ta), GetY(ta));
                    end;
                    2: begin
                        ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                    end;
                    3:  ComAttackUnit(list[i], ta);
                    end;

                end;
            end;

End;

Export function BuildingVehicleAndAttackEnemy(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i, j, randWeapon, lastIndex, weaponTabTemp, temp, target1, target2;
begin

     IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do
        begin
            randWeapon = weaponTab[Rand(1, weaponTab)];
            if randWeapon = 46 then AddComConstruct(fabric, 24, engine, control[Rand(1, control)], randWeapon)
            else AddComConstruct(fabric, chassis, engine, control[Rand(1, control)], randWeapon);
        end;

        repeat
                wait(0$1);;
        until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount;

    IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount then
    begin

        readyForAttack = true;

    end;
END;