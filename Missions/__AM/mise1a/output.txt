// export MissionBegin , RussianAssaultStopped , readyForAttack ; export AMAttack ; export LaserTanks , personnel ; starting begin IngameOn ;
   0: CALL_OW 8
// LaserTanks = [ ts , tk , t1 , t2 , t3 ] ;
   4: LD_ADDR_EXP 5
   8: PUSH
   9: LD_INT 78
  11: PUSH
  12: LD_INT 79
  14: PUSH
  15: LD_INT 80
  17: PUSH
  18: LD_INT 82
  20: PUSH
  21: LD_INT 83
  23: PUSH
  24: EMPTY
  25: LIST
  26: LIST
  27: LIST
  28: LIST
  29: LIST
  30: ST_TO_ADDR
// CreatePersonnel ;
  31: CALL 2260 0 0
// PrepareDifficulty ;
  35: CALL 7240 0 0
// Garrison_Buildings ( 3 ) ;
  39: LD_INT 3
  41: PPUSH
  42: CALL 3099 0 1
// Garrison_Buildings ( 1 ) ;
  46: LD_INT 1
  48: PPUSH
  49: CALL 3099 0 1
// music_class = 1 ;
  53: LD_ADDR_OWVAR 72
  57: PUSH
  58: LD_INT 1
  60: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , ts ) ;
  61: LD_EXP 7
  65: PPUSH
  66: LD_INT 78
  68: PPUSH
  69: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , tk ) ;
  73: LD_EXP 8
  77: PPUSH
  78: LD_INT 79
  80: PPUSH
  81: CALL_OW 52
// PlaceHumanInUnit ( Lazarfeld , tlz ) ;
  85: LD_EXP 12
  89: PPUSH
  90: LD_INT 81
  92: PPUSH
  93: CALL_OW 52
// PlaceHumanInUnit ( Gomez , t1 ) ;
  97: LD_EXP 11
 101: PPUSH
 102: LD_INT 80
 104: PPUSH
 105: CALL_OW 52
// PlaceHumanInUnit ( Mirron , t2 ) ;
 109: LD_EXP 9
 113: PPUSH
 114: LD_INT 82
 116: PPUSH
 117: CALL_OW 52
// PlaceHumanInUnit ( Valheim , t3 ) ;
 121: LD_EXP 10
 125: PPUSH
 126: LD_INT 83
 128: PPUSH
 129: CALL_OW 52
// ComAgressiveMove ( Lazarfeld , 75 , 71 ) ;
 133: LD_EXP 12
 137: PPUSH
 138: LD_INT 75
 140: PPUSH
 141: LD_INT 71
 143: PPUSH
 144: CALL_OW 114
// ComAgressiveMove ( Mirron , 61 , 67 ) ;
 148: LD_EXP 9
 152: PPUSH
 153: LD_INT 61
 155: PPUSH
 156: LD_INT 67
 158: PPUSH
 159: CALL_OW 114
// ComAgressiveMove ( Valheim , 86 , 79 ) ;
 163: LD_EXP 10
 167: PPUSH
 168: LD_INT 86
 170: PPUSH
 171: LD_INT 79
 173: PPUSH
 174: CALL_OW 114
// ComAgressiveMove ( Simone , 126 , 92 ) ;
 178: LD_EXP 7
 182: PPUSH
 183: LD_INT 126
 185: PPUSH
 186: LD_INT 92
 188: PPUSH
 189: CALL_OW 114
// ComAgressiveMove ( Kathryn , 114 , 86 ) ;
 193: LD_EXP 8
 197: PPUSH
 198: LD_INT 114
 200: PPUSH
 201: LD_INT 86
 203: PPUSH
 204: CALL_OW 114
// ComAgressiveMove ( Gomez , 135 , 94 ) ;
 208: LD_EXP 11
 212: PPUSH
 213: LD_INT 135
 215: PPUSH
 216: LD_INT 94
 218: PPUSH
 219: CALL_OW 114
// CenterNowOnXY ( 61 , 96 ) ;
 223: LD_INT 61
 225: PPUSH
 226: LD_INT 96
 228: PPUSH
 229: CALL_OW 86
// Wait ( 0 0$2 ) ;
 233: LD_INT 70
 235: PPUSH
 236: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-2 ) ;
 240: LD_EXP 12
 244: PPUSH
 245: LD_STRING D1-Lazar-2
 247: PPUSH
 248: CALL_OW 94
// Wait ( 0 0$3 ) ;
 252: LD_INT 105
 254: PPUSH
 255: CALL_OW 67
// CenterOnXY ( 124 , 116 ) ;
 259: LD_INT 124
 261: PPUSH
 262: LD_INT 116
 264: PPUSH
 265: CALL_OW 84
// Wait ( 0 0$2 ) ;
 269: LD_INT 70
 271: PPUSH
 272: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-1 ) ;
 276: LD_EXP 12
 280: PPUSH
 281: LD_STRING D1-Lazar-1
 283: PPUSH
 284: CALL_OW 94
// Wait ( 0 0$3 ) ;
 288: LD_INT 105
 290: PPUSH
 291: CALL_OW 67
// CenterOnXY ( 127 , 89 ) ;
 295: LD_INT 127
 297: PPUSH
 298: LD_INT 89
 300: PPUSH
 301: CALL_OW 84
// Wait ( 0 0$15 ) ;
 305: LD_INT 525
 307: PPUSH
 308: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-3 ) ;
 312: LD_EXP 12
 316: PPUSH
 317: LD_STRING D1-Lazar-3
 319: PPUSH
 320: CALL_OW 94
// Wait ( 0 0$3 ) ;
 324: LD_INT 105
 326: PPUSH
 327: CALL_OW 67
// IngameOff ;
 331: CALL_OW 9
// SayRadio ( Lazarfeld , D1a-Lazar-1 ) ;
 335: LD_EXP 12
 339: PPUSH
 340: LD_STRING D1a-Lazar-1
 342: PPUSH
 343: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-1 ) ;
 347: LD_EXP 14
 351: PPUSH
 352: LD_STRING D1a-Off-1
 354: PPUSH
 355: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-2 ) ;
 359: LD_EXP 14
 363: PPUSH
 364: LD_STRING D1a-Off-2
 366: PPUSH
 367: CALL_OW 94
// SayRadio ( Lazarfeld , D1a-Lazar-2 ) ;
 371: LD_EXP 12
 375: PPUSH
 376: LD_STRING D1a-Lazar-2
 378: PPUSH
 379: CALL_OW 94
// Say ( Simone , D1a-Simone-1 ) ;
 383: LD_EXP 7
 387: PPUSH
 388: LD_STRING D1a-Simone-1
 390: PPUSH
 391: CALL_OW 88
// SayRadio ( Lazarfeld , D1a-Lazar-3 ) ;
 395: LD_EXP 12
 399: PPUSH
 400: LD_STRING D1a-Lazar-3
 402: PPUSH
 403: CALL_OW 94
// music_class = 0 ;
 407: LD_ADDR_OWVAR 72
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
 415: LD_STRING M1
 417: PPUSH
 418: CALL_OW 337
// MissionBegin = true ;
 422: LD_ADDR_EXP 1
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// end ;
 430: END
// every 0 0$1 trigger MissionBegin do
 431: LD_EXP 1
 435: IFFALSE 1333
 437: GO 439
 439: DISABLE
// begin Wait ( 0 0$42 ) ;
 440: LD_INT 1470
 442: PPUSH
 443: CALL_OW 67
// SayRadio ( Scout , D2-Scout-1 ) ;
 447: LD_EXP 16
 451: PPUSH
 452: LD_STRING D2-Scout-1
 454: PPUSH
 455: CALL_OW 94
// Say ( Simone , D2-Simone-1 ) ;
 459: LD_EXP 7
 463: PPUSH
 464: LD_STRING D2-Simone-1
 466: PPUSH
 467: CALL_OW 88
// Say ( Kathryn , D2-Kathryn-1 ) ;
 471: LD_EXP 8
 475: PPUSH
 476: LD_STRING D2-Kathryn-1
 478: PPUSH
 479: CALL_OW 88
// RespawnAttackInfantry ( 3 , 3 , 4 , 0 , 1 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N ) ;
 483: LD_INT 3
 485: PPUSH
 486: LD_INT 3
 488: PPUSH
 489: LD_INT 4
 491: PPUSH
 492: LD_INT 0
 494: PPUSH
 495: LD_INT 1
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: LD_INT 3
 503: PPUSH
 504: LD_EXP 21
 508: PPUSH
 509: LD_EXP 22
 513: PPUSH
 514: CALL_OW 12
 518: PPUSH
 519: LD_INT 3
 521: PPUSH
 522: CALL 5513 0 9
// RespawnAttackInfantry ( 3 , 3 , 9 , 0 , 2 , 0 , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_E ) ;
 526: LD_INT 3
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 0
 537: PPUSH
 538: LD_INT 2
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_INT 2
 546: PPUSH
 547: LD_EXP 21
 551: PPUSH
 552: LD_EXP 22
 556: PPUSH
 557: CALL_OW 12
 561: PPUSH
 562: LD_INT 4
 564: PPUSH
 565: CALL 5513 0 9
// Wait ( 0 0$12 ) ;
 569: LD_INT 420
 571: PPUSH
 572: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] ) ;
 576: LD_INT 3
 578: PPUSH
 579: LD_INT 3
 581: PPUSH
 582: LD_INT 3
 584: PPUSH
 585: LD_EXP 21
 589: PPUSH
 590: LD_EXP 22
 594: PPUSH
 595: CALL_OW 12
 599: PPUSH
 600: LD_INT 3
 602: PPUSH
 603: LD_INT 3
 605: PPUSH
 606: LD_INT 1
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: LD_INT 43
 618: PUSH
 619: LD_INT 44
 621: PUSH
 622: LD_INT 45
 624: PUSH
 625: LD_INT 46
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: EMPTY
 635: PPUSH
 636: EMPTY
 637: PPUSH
 638: CALL 4099 0 10
// RespawnAttackVehicle ( RU_SpawnZone_E , 3 , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] ) ;
 642: LD_INT 4
 644: PPUSH
 645: LD_INT 3
 647: PPUSH
 648: LD_INT 5
 650: PPUSH
 651: LD_EXP 21
 655: PPUSH
 656: LD_EXP 22
 660: PPUSH
 661: CALL_OW 12
 665: PPUSH
 666: LD_INT 3
 668: PPUSH
 669: LD_INT 3
 671: PPUSH
 672: LD_INT 1
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PPUSH
 682: LD_INT 43
 684: PUSH
 685: LD_INT 44
 687: PUSH
 688: LD_INT 45
 690: PUSH
 691: LD_INT 46
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: PPUSH
 700: EMPTY
 701: PPUSH
 702: EMPTY
 703: PPUSH
 704: CALL 4099 0 10
// Wait ( 3 3$20 ) ;
 708: LD_INT 7000
 710: PPUSH
 711: CALL_OW 67
// SayRadio ( Scout , D2-Scout-2 ) ;
 715: LD_EXP 16
 719: PPUSH
 720: LD_STRING D2-Scout-2
 722: PPUSH
 723: CALL_OW 94
// RespawnAttackInfantry ( 3 , 3 , 8 , 0 , 2 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N ) ;
 727: LD_INT 3
 729: PPUSH
 730: LD_INT 3
 732: PPUSH
 733: LD_INT 8
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: LD_INT 2
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: LD_INT 3
 747: PPUSH
 748: LD_EXP 21
 752: PPUSH
 753: LD_EXP 22
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 3
 765: PPUSH
 766: CALL 5513 0 9
// RespawnAttackInfantry ( 3 , 3 , 11 , 0 , 3 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_E ) ;
 770: LD_INT 3
 772: PPUSH
 773: LD_INT 3
 775: PPUSH
 776: LD_INT 11
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: LD_INT 3
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: LD_INT 3
 790: PPUSH
 791: LD_EXP 21
 795: PPUSH
 796: LD_EXP 22
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: LD_INT 4
 808: PPUSH
 809: CALL 5513 0 9
// Wait ( 0 0$30 ) ;
 813: LD_INT 1050
 815: PPUSH
 816: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] ) ;
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 3
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_EXP 21
 833: PPUSH
 834: LD_EXP 22
 838: PPUSH
 839: CALL_OW 12
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 3
 849: PPUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: LD_INT 43
 862: PUSH
 863: LD_INT 44
 865: PUSH
 866: LD_INT 45
 868: PUSH
 869: LD_INT 46
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: PPUSH
 878: EMPTY
 879: PPUSH
 880: EMPTY
 881: PPUSH
 882: CALL 4099 0 10
// RespawnAttackVehicle ( RU_SpawnZone_E , 3 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] ) ;
 886: LD_INT 4
 888: PPUSH
 889: LD_INT 3
 891: PPUSH
 892: LD_INT 6
 894: PPUSH
 895: LD_EXP 21
 899: PPUSH
 900: LD_EXP 22
 904: PPUSH
 905: CALL_OW 12
 909: PPUSH
 910: LD_INT 3
 912: PPUSH
 913: LD_INT 3
 915: PPUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: LD_INT 43
 928: PUSH
 929: LD_INT 44
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: LD_INT 46
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: EMPTY
 945: PPUSH
 946: EMPTY
 947: PPUSH
 948: CALL 4099 0 10
// Wait ( 0 0$30 ) ;
 952: LD_INT 1050
 954: PPUSH
 955: CALL_OW 67
// SetLives ( tlz , 0 ) ;
 959: LD_INT 81
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL_OW 234
// CenterOnUnits ( tlz ) ;
 969: LD_INT 81
 971: PPUSH
 972: CALL_OW 85
// Wait ( 0 0$1 ) ;
 976: LD_INT 35
 978: PPUSH
 979: CALL_OW 67
// DialogueOn ;
 983: CALL_OW 6
// SayRadio ( Lazarfeld , D3-Lazar-1 ) ;
 987: LD_EXP 12
 991: PPUSH
 992: LD_STRING D3-Lazar-1
 994: PPUSH
 995: CALL_OW 94
// SetLives ( Lazarfeld , 0 ) ;
 999: LD_EXP 12
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 234
// DialogueOff ;
1011: CALL_OW 7
// SayRadio ( Valheim , D3-Valheim-1 ) ;
1015: LD_EXP 10
1019: PPUSH
1020: LD_STRING D3-Valheim-1
1022: PPUSH
1023: CALL_OW 94
// SayRadio ( Simone , D3-Simone-1 ) ;
1027: LD_EXP 7
1031: PPUSH
1032: LD_STRING D3-Simone-1
1034: PPUSH
1035: CALL_OW 94
// Wait ( 0 0$30 ) ;
1039: LD_INT 1050
1041: PPUSH
1042: CALL_OW 67
// RespawnAttackInfantry ( 3 , 3 , 7 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_SE ) ;
1046: LD_INT 3
1048: PPUSH
1049: LD_INT 3
1051: PPUSH
1052: LD_INT 7
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: LD_INT 0
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: LD_EXP 21
1071: PPUSH
1072: LD_EXP 22
1076: PPUSH
1077: CALL_OW 12
1081: PPUSH
1082: LD_INT 5
1084: PPUSH
1085: CALL 5513 0 9
// Wait ( 0 0$5 ) ;
1089: LD_INT 175
1091: PPUSH
1092: CALL_OW 67
// SayRadio ( Scout , D2-Scout-3 ) ;
1096: LD_EXP 16
1100: PPUSH
1101: LD_STRING D2-Scout-3
1103: PPUSH
1104: CALL_OW 94
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] ) ;
1108: LD_INT 3
1110: PPUSH
1111: LD_INT 3
1113: PPUSH
1114: LD_INT 4
1116: PPUSH
1117: LD_EXP 21
1121: PPUSH
1122: LD_EXP 22
1126: PPUSH
1127: CALL_OW 12
1131: PPUSH
1132: LD_INT 3
1134: PPUSH
1135: LD_INT 3
1137: PPUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PPUSH
1148: LD_INT 43
1150: PUSH
1151: LD_INT 44
1153: PUSH
1154: LD_INT 45
1156: PUSH
1157: LD_INT 46
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PPUSH
1166: EMPTY
1167: PPUSH
1168: EMPTY
1169: PPUSH
1170: CALL 4099 0 10
// Wait ( 2 2$10 ) ;
1174: LD_INT 4550
1176: PPUSH
1177: CALL_OW 67
// Say ( Loghain , D4-Off-1 ) ;
1181: LD_EXP 14
1185: PPUSH
1186: LD_STRING D4-Off-1
1188: PPUSH
1189: CALL_OW 88
// Say ( Simone , D4-Simone-1 ) ;
1193: LD_EXP 7
1197: PPUSH
1198: LD_STRING D4-Simone-1
1200: PPUSH
1201: CALL_OW 88
// Say ( Kathryn , D4-Kathryn-1 ) ;
1205: LD_EXP 8
1209: PPUSH
1210: LD_STRING D4-Kathryn-1
1212: PPUSH
1213: CALL_OW 88
// Say ( Simone , D4-Simone-2 ) ;
1217: LD_EXP 7
1221: PPUSH
1222: LD_STRING D4-Simone-2
1224: PPUSH
1225: CALL_OW 88
// SayRadio ( Barnes , D4-Comm-1 ) ;
1229: LD_EXP 13
1233: PPUSH
1234: LD_STRING D4-Comm-1
1236: PPUSH
1237: CALL_OW 94
// SayRadio ( Barnes , D4-Comm-2 ) ;
1241: LD_EXP 13
1245: PPUSH
1246: LD_STRING D4-Comm-2
1248: PPUSH
1249: CALL_OW 94
// Say ( Simone , D4-Simone-3 ) ;
1253: LD_EXP 7
1257: PPUSH
1258: LD_STRING D4-Simone-3
1260: PPUSH
1261: CALL_OW 88
// Say ( Kathryn , D4-Kathryn-2 ) ;
1265: LD_EXP 8
1269: PPUSH
1270: LD_STRING D4-Kathryn-2
1272: PPUSH
1273: CALL_OW 88
// Say ( Simone , D4-Simone-4 ) ;
1277: LD_EXP 7
1281: PPUSH
1282: LD_STRING D4-Simone-4
1284: PPUSH
1285: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
1289: LD_STRING M2
1291: PPUSH
1292: CALL_OW 337
// SetSide ( [ Mirron , t2 , Valheim , t3 ] , 4 ) ;
1296: LD_EXP 9
1300: PUSH
1301: LD_INT 82
1303: PUSH
1304: LD_EXP 10
1308: PUSH
1309: LD_INT 83
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PPUSH
1318: LD_INT 4
1320: PPUSH
1321: CALL_OW 235
// RussianAssaultStopped = true ;
1325: LD_ADDR_EXP 2
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// end ;
1333: END
// every 0 0$1 trigger RussianAssaultStopped do
1334: LD_EXP 2
1338: IFFALSE 1406
1340: GO 1342
1342: DISABLE
// begin Wait ( 0 0$30 ) ;
1343: LD_INT 1050
1345: PPUSH
1346: CALL_OW 67
// Say ( Loghain , D5-Off-1 ) ;
1350: LD_EXP 14
1354: PPUSH
1355: LD_STRING D5-Off-1
1357: PPUSH
1358: CALL_OW 88
// BuildingVehicleAndAttackEnemy ( 1 , factor , rand ( 7 , 8 ) , [ 6 , 7 , 4 ] , 3 , 3 , 5 ) ;
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 7
1370: PPUSH
1371: LD_INT 8
1373: PPUSH
1374: CALL_OW 12
1378: PPUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 7
1384: PUSH
1385: LD_INT 4
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: PPUSH
1393: LD_INT 3
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: LD_INT 5
1401: PPUSH
1402: CALL 8741 0 7
// end ;
1406: END
// every 0 0$1 trigger readyForAttack do var i , un , AttackParty , target1 , target2 ;
1407: LD_EXP 3
1411: IFFALSE 1930
1413: GO 1415
1415: DISABLE
1416: LD_INT 0
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
// begin for i = 1 to 7 do
1423: LD_ADDR_VAR 0 1
1427: PUSH
1428: DOUBLE
1429: LD_INT 1
1431: DEC
1432: ST_TO_ADDR
1433: LD_INT 7
1435: PUSH
1436: FOR_TO
1437: IFFALSE 1527
// begin uc_side = 1 ;
1439: LD_ADDR_OWVAR 20
1443: PUSH
1444: LD_INT 1
1446: ST_TO_ADDR
// uc_nation = 1 ;
1447: LD_ADDR_OWVAR 21
1451: PUSH
1452: LD_INT 1
1454: ST_TO_ADDR
// hc_name =  ;
1455: LD_ADDR_OWVAR 26
1459: PUSH
1460: LD_STRING 
1462: ST_TO_ADDR
// hc_gallery =  ;
1463: LD_ADDR_OWVAR 33
1467: PUSH
1468: LD_STRING 
1470: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
1471: LD_INT 1
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 6
1479: PPUSH
1480: CALL_OW 380
// un = CreateHuman ;
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: CALL_OW 44
1493: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_S , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 1
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// AttackParty = AttackParty ^ un ;
1509: LD_ADDR_VAR 0 3
1513: PUSH
1514: LD_VAR 0 3
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1436
1527: POP
1528: POP
// for i = 1 to 7 do
1529: LD_ADDR_VAR 0 1
1533: PUSH
1534: DOUBLE
1535: LD_INT 1
1537: DEC
1538: ST_TO_ADDR
1539: LD_INT 7
1541: PUSH
1542: FOR_TO
1543: IFFALSE 1633
// begin uc_side = 1 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 1
1552: ST_TO_ADDR
// uc_nation = 1 ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_INT 1
1560: ST_TO_ADDR
// hc_name =  ;
1561: LD_ADDR_OWVAR 26
1565: PUSH
1566: LD_STRING 
1568: ST_TO_ADDR
// hc_gallery =  ;
1569: LD_ADDR_OWVAR 33
1573: PUSH
1574: LD_STRING 
1576: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 6
1585: PPUSH
1586: CALL_OW 380
// un = CreateHuman ;
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: CALL_OW 44
1599: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_W , false ) ;
1600: LD_VAR 0 2
1604: PPUSH
1605: LD_INT 2
1607: PPUSH
1608: LD_INT 0
1610: PPUSH
1611: CALL_OW 49
// AttackParty = AttackParty ^ un ;
1615: LD_ADDR_VAR 0 3
1619: PUSH
1620: LD_VAR 0 3
1624: PUSH
1625: LD_VAR 0 2
1629: ADD
1630: ST_TO_ADDR
// end ;
1631: GO 1542
1633: POP
1634: POP
// ComMoveXY ( AttackParty , 113 , 103 ) ;
1635: LD_VAR 0 3
1639: PPUSH
1640: LD_INT 113
1642: PPUSH
1643: LD_INT 103
1645: PPUSH
1646: CALL_OW 111
// Say ( Loghain , D5-Off-2 ) ;
1650: LD_EXP 14
1654: PPUSH
1655: LD_STRING D5-Off-2
1657: PPUSH
1658: CALL_OW 88
// Say ( Simone , D5-Simone-1 ) ;
1662: LD_EXP 7
1666: PPUSH
1667: LD_STRING D5-Simone-1
1669: PPUSH
1670: CALL_OW 88
// Say ( Loghain , D5-Off-3 ) ;
1674: LD_EXP 14
1678: PPUSH
1679: LD_STRING D5-Off-3
1681: PPUSH
1682: CALL_OW 88
// AMAttack = AttackParty ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
1686: LD_ADDR_EXP 4
1690: PUSH
1691: LD_VAR 0 3
1695: PUSH
1696: LD_INT 9
1698: PPUSH
1699: LD_INT 22
1701: PUSH
1702: LD_INT 1
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 21
1711: PUSH
1712: LD_INT 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL_OW 71
1727: ADD
1728: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1729: LD_INT 35
1731: PPUSH
1732: CALL_OW 67
// for i in AMAttack do
1736: LD_ADDR_VAR 0 1
1740: PUSH
1741: LD_EXP 4
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1919
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ;
1749: LD_ADDR_VAR 0 4
1753: PUSH
1754: LD_INT 81
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 74
1778: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 81
1786: PUSH
1787: LD_INT 1
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 59
1799: PUSH
1800: EMPTY
1801: LIST
1802: PUSH
1803: LD_INT 21
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: PPUSH
1841: LD_VAR 0 1
1845: PPUSH
1846: CALL_OW 74
1850: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
1851: LD_VAR 0 1
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL_OW 296
1865: PUSH
1866: LD_INT 8
1868: PLUS
1869: PUSH
1870: LD_VAR 0 1
1874: PPUSH
1875: LD_VAR 0 5
1879: PPUSH
1880: CALL_OW 296
1884: LESS
1885: IFFALSE 1903
// begin ComAttackUnit ( i , target1 ) ;
1887: LD_VAR 0 1
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL_OW 115
// end else
1901: GO 1917
// begin ComAttackUnit ( i , target2 ) ;
1903: LD_VAR 0 1
1907: PPUSH
1908: LD_VAR 0 5
1912: PPUSH
1913: CALL_OW 115
// end ; end ;
1917: GO 1746
1919: POP
1920: POP
// until AMAttack = [ ] ;
1921: LD_EXP 4
1925: PUSH
1926: EMPTY
1927: EQUAL
1928: IFFALSE 1729
// end ;
1930: PPOPN 5
1932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 4 do
1933: LD_INT 22
1935: PUSH
1936: LD_INT 3
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 21
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 50
1955: PUSH
1956: EMPTY
1957: LIST
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 4
1971: LESS
1972: IFFALSE 2259
1974: GO 1976
1976: DISABLE
// begin SayRadio ( ROff , D6-ROff-1 ) ;
1977: LD_EXP 15
1981: PPUSH
1982: LD_STRING D6-ROff-1
1984: PPUSH
1985: CALL_OW 94
// Say ( Kathryn , D6-Kathryn-1 ) ;
1989: LD_EXP 8
1993: PPUSH
1994: LD_STRING D6-Kathryn-1
1996: PPUSH
1997: CALL_OW 88
// Say ( Simone , D6-Simone-1 ) ;
2001: LD_EXP 7
2005: PPUSH
2006: LD_STRING D6-Simone-1
2008: PPUSH
2009: CALL_OW 88
// SayRadio ( Barnes , D6-Comm-1 ) ;
2013: LD_EXP 13
2017: PPUSH
2018: LD_STRING D6-Comm-1
2020: PPUSH
2021: CALL_OW 94
// SayRadio ( Barnes , D6-Comm-2 ) ;
2025: LD_EXP 13
2029: PPUSH
2030: LD_STRING D6-Comm-2
2032: PPUSH
2033: CALL_OW 94
// wait ( 0 0$1 ) ;
2037: LD_INT 35
2039: PPUSH
2040: CALL_OW 67
// if IsOK ( Gomez ) and IsOK ( Mirron ) and IsOK ( Valheim ) then
2044: LD_EXP 11
2048: PPUSH
2049: CALL_OW 302
2053: PUSH
2054: LD_EXP 9
2058: PPUSH
2059: CALL_OW 302
2063: AND
2064: PUSH
2065: LD_EXP 10
2069: PPUSH
2070: CALL_OW 302
2074: AND
2075: IFFALSE 2089
// AddMedal ( Personnel , 1 ) else
2077: LD_STRING Personnel
2079: PPUSH
2080: LD_INT 1
2082: PPUSH
2083: CALL_OW 101
2087: GO 2100
// AddMedal ( Personnel , - 1 ) ;
2089: LD_STRING Personnel
2091: PPUSH
2092: LD_INT 1
2094: NEG
2095: PPUSH
2096: CALL_OW 101
// if LaserTanks <= 5 then
2100: LD_EXP 5
2104: PUSH
2105: LD_INT 5
2107: LESSEQUAL
2108: IFFALSE 2123
// AddMedal ( Vehicles , - 1 ) else
2110: LD_STRING Vehicles
2112: PPUSH
2113: LD_INT 1
2115: NEG
2116: PPUSH
2117: CALL_OW 101
2121: GO 2133
// AddMedal ( Vehicles , 1 ) ;
2123: LD_STRING Vehicles
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 101
// AddMedal ( Bases , 1 ) ;
2133: LD_STRING Bases
2135: PPUSH
2136: LD_INT 1
2138: PPUSH
2139: CALL_OW 101
// GiveMedals ( Main ) ;
2143: LD_STRING Main
2145: PPUSH
2146: CALL_OW 102
// personnel = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
2150: LD_ADDR_EXP 6
2154: PUSH
2155: LD_INT 22
2157: PUSH
2158: LD_INT 4
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 21
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 50
2177: PUSH
2178: EMPTY
2179: LIST
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: PPUSH
2186: CALL_OW 69
2190: ST_TO_ADDR
// RewardPeople ( personnel ) ;
2191: LD_EXP 6
2195: PPUSH
2196: CALL_OW 43
// SaveCharacters ( Kathryn , Kathryn ) ;
2200: LD_EXP 8
2204: PPUSH
2205: LD_STRING Kathryn
2207: PPUSH
2208: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
2212: LD_EXP 7
2216: PPUSH
2217: LD_STRING Simone
2219: PPUSH
2220: CALL_OW 38
// SaveCharacters ( personnel diff [ Kathryn , Simone , 0 ] , AM01_Survivors ) ;
2224: LD_EXP 6
2228: PUSH
2229: LD_EXP 8
2233: PUSH
2234: LD_EXP 7
2238: PUSH
2239: LD_INT 0
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: DIFF
2247: PPUSH
2248: LD_STRING AM01_Survivors
2250: PPUSH
2251: CALL_OW 38
// YouWin ;
2255: CALL_OW 103
// end ; end_of_file
2259: END
// export Simone , Kathryn , Mirron , Valheim , Gomez , Lazarfeld , Barnes , Loghain , ROff , Scout ; export RUBazookers , soldiersOK_list , vehicleOK_list , medic_list ; export function CreatePersonnel ; begin
2260: LD_INT 0
2262: PPUSH
// uc_side := 4 ;
2263: LD_ADDR_OWVAR 20
2267: PUSH
2268: LD_INT 4
2270: ST_TO_ADDR
// hc_class = class_mechanic ;
2271: LD_ADDR_OWVAR 28
2275: PUSH
2276: LD_INT 3
2278: ST_TO_ADDR
// uc_nation := nation_american ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// hc_sex = sex_female ;
2287: LD_ADDR_OWVAR 27
2291: PUSH
2292: LD_INT 2
2294: ST_TO_ADDR
// hc_importance = 120 ;
2295: LD_ADDR_OWVAR 32
2299: PUSH
2300: LD_INT 120
2302: ST_TO_ADDR
// hc_skills = [ 4 , 3 , 5 , 2 ] ;
2303: LD_ADDR_OWVAR 31
2307: PUSH
2308: LD_INT 4
2310: PUSH
2311: LD_INT 3
2313: PUSH
2314: LD_INT 5
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2326: LD_ADDR_OWVAR 29
2330: PUSH
2331: LD_INT 12
2333: PUSH
2334: LD_INT 10
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: ST_TO_ADDR
// hc_name := Simone Pelletier ;
2341: LD_ADDR_OWVAR 26
2345: PUSH
2346: LD_STRING Simone Pelletier
2348: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
2349: LD_ADDR_OWVAR 33
2353: PUSH
2354: LD_STRING ZieloneLaserki_Heroines
2356: ST_TO_ADDR
// hc_face_number := 1 ;
2357: LD_ADDR_OWVAR 34
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// Simone := CreateHuman ;
2365: LD_ADDR_EXP 7
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// uc_nation := nation_american ;
2375: LD_ADDR_OWVAR 21
2379: PUSH
2380: LD_INT 1
2382: ST_TO_ADDR
// hc_importance = 110 ;
2383: LD_ADDR_OWVAR 32
2387: PUSH
2388: LD_INT 110
2390: ST_TO_ADDR
// hc_sex = sex_female ;
2391: LD_ADDR_OWVAR 27
2395: PUSH
2396: LD_INT 2
2398: ST_TO_ADDR
// hc_skills = [ 2 , 2 , 4 , 3 ] ;
2399: LD_ADDR_OWVAR 31
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: LD_INT 4
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
2422: LD_ADDR_OWVAR 29
2426: PUSH
2427: LD_INT 11
2429: PUSH
2430: LD_INT 10
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: ST_TO_ADDR
// hc_name := Kathryn Pelletier ;
2437: LD_ADDR_OWVAR 26
2441: PUSH
2442: LD_STRING Kathryn Pelletier
2444: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING ZieloneLaserki_Heroines
2452: ST_TO_ADDR
// hc_face_number := 2 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 2
2460: ST_TO_ADDR
// Kathryn := CreateHuman ;
2461: LD_ADDR_EXP 8
2465: PUSH
2466: CALL_OW 44
2470: ST_TO_ADDR
// hc_sex = sex_male ;
2471: LD_ADDR_OWVAR 27
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := nation_american ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// hc_importance = 70 ;
2487: LD_ADDR_OWVAR 32
2491: PUSH
2492: LD_INT 70
2494: ST_TO_ADDR
// hc_skills = [ 3 , 3 , 4 , 1 ] ;
2495: LD_ADDR_OWVAR 31
2499: PUSH
2500: LD_INT 3
2502: PUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 1
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2518: LD_ADDR_OWVAR 29
2522: PUSH
2523: LD_INT 10
2525: PUSH
2526: LD_INT 10
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: ST_TO_ADDR
// hc_name := Mike Gomez ;
2533: LD_ADDR_OWVAR 26
2537: PUSH
2538: LD_STRING Mike Gomez
2540: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
2541: LD_ADDR_OWVAR 33
2545: PUSH
2546: LD_STRING ZieloneLaserki_Heroes
2548: ST_TO_ADDR
// hc_face_number := 7 ;
2549: LD_ADDR_OWVAR 34
2553: PUSH
2554: LD_INT 7
2556: ST_TO_ADDR
// Gomez := CreateHuman ;
2557: LD_ADDR_EXP 11
2561: PUSH
2562: CALL_OW 44
2566: ST_TO_ADDR
// uc_side := 1 ;
2567: LD_ADDR_OWVAR 20
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// uc_nation := nation_american ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// hc_importance = 70 ;
2583: LD_ADDR_OWVAR 32
2587: PUSH
2588: LD_INT 70
2590: ST_TO_ADDR
// hc_skills = [ 5 , 4 , 7 , 3 ] ;
2591: LD_ADDR_OWVAR 31
2595: PUSH
2596: LD_INT 5
2598: PUSH
2599: LD_INT 4
2601: PUSH
2602: LD_INT 7
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2614: LD_ADDR_OWVAR 29
2618: PUSH
2619: LD_INT 10
2621: PUSH
2622: LD_INT 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: ST_TO_ADDR
// hc_name := Lazarfeld ;
2629: LD_ADDR_OWVAR 26
2633: PUSH
2634: LD_STRING Lazarfeld
2636: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
2637: LD_ADDR_OWVAR 33
2641: PUSH
2642: LD_STRING ZieloneLaserki_Heroes
2644: ST_TO_ADDR
// hc_face_number := 1 ;
2645: LD_ADDR_OWVAR 34
2649: PUSH
2650: LD_INT 1
2652: ST_TO_ADDR
// Lazarfeld := CreateHuman ;
2653: LD_ADDR_EXP 12
2657: PUSH
2658: CALL_OW 44
2662: ST_TO_ADDR
// uc_nation := nation_american ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_importance = 70 ;
2671: LD_ADDR_OWVAR 32
2675: PUSH
2676: LD_INT 70
2678: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 3 ] ;
2679: LD_ADDR_OWVAR 31
2683: PUSH
2684: LD_INT 5
2686: PUSH
2687: LD_INT 2
2689: PUSH
2690: LD_INT 4
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2702: LD_ADDR_OWVAR 29
2706: PUSH
2707: LD_INT 10
2709: PUSH
2710: LD_INT 10
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: ST_TO_ADDR
// hc_name := Geoff Mirron ;
2717: LD_ADDR_OWVAR 26
2721: PUSH
2722: LD_STRING Geoff Mirron
2724: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
2725: LD_ADDR_OWVAR 33
2729: PUSH
2730: LD_STRING ZieloneLaserki_Heroes
2732: ST_TO_ADDR
// hc_face_number := 2 ;
2733: LD_ADDR_OWVAR 34
2737: PUSH
2738: LD_INT 2
2740: ST_TO_ADDR
// Mirron := CreateHuman ;
2741: LD_ADDR_EXP 9
2745: PUSH
2746: CALL_OW 44
2750: ST_TO_ADDR
// uc_nation := nation_american ;
2751: LD_ADDR_OWVAR 21
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// hc_importance = 70 ;
2759: LD_ADDR_OWVAR 32
2763: PUSH
2764: LD_INT 70
2766: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 4 , 2 ] ;
2767: LD_ADDR_OWVAR 31
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: LD_INT 4
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2790: LD_ADDR_OWVAR 29
2794: PUSH
2795: LD_INT 10
2797: PUSH
2798: LD_INT 10
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: ST_TO_ADDR
// hc_name := Pavel Valheim ;
2805: LD_ADDR_OWVAR 26
2809: PUSH
2810: LD_STRING Pavel Valheim
2812: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
2813: LD_ADDR_OWVAR 33
2817: PUSH
2818: LD_STRING ZieloneLaserki_Heroes
2820: ST_TO_ADDR
// hc_face_number := 5 ;
2821: LD_ADDR_OWVAR 34
2825: PUSH
2826: LD_INT 5
2828: ST_TO_ADDR
// Valheim := CreateHuman ;
2829: LD_ADDR_EXP 10
2833: PUSH
2834: CALL_OW 44
2838: ST_TO_ADDR
// hc_class = class_soldier ;
2839: LD_ADDR_OWVAR 28
2843: PUSH
2844: LD_INT 1
2846: ST_TO_ADDR
// uc_nation := nation_american ;
2847: LD_ADDR_OWVAR 21
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// hc_importance = 70 ;
2855: LD_ADDR_OWVAR 32
2859: PUSH
2860: LD_INT 70
2862: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
2863: LD_INT 1
2865: PPUSH
2866: LD_INT 8
2868: PPUSH
2869: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
2873: LD_ADDR_OWVAR 29
2877: PUSH
2878: LD_INT 10
2880: PUSH
2881: LD_INT 10
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: ST_TO_ADDR
// hc_name := Barnes ;
2888: LD_ADDR_OWVAR 26
2892: PUSH
2893: LD_STRING Barnes
2895: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
2896: LD_ADDR_OWVAR 33
2900: PUSH
2901: LD_STRING ZieloneLaserki_Commanders
2903: ST_TO_ADDR
// hc_face_number := 2 ;
2904: LD_ADDR_OWVAR 34
2908: PUSH
2909: LD_INT 2
2911: ST_TO_ADDR
// Barnes := CreateHuman ;
2912: LD_ADDR_EXP 13
2916: PUSH
2917: CALL_OW 44
2921: ST_TO_ADDR
// uc_nation := nation_american ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// hc_importance = 50 ;
2930: LD_ADDR_OWVAR 32
2934: PUSH
2935: LD_INT 50
2937: ST_TO_ADDR
// PrepareSoldier ( 1 , 6 ) ;
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 6
2943: PPUSH
2944: CALL_OW 381
// hc_name := Loghain ;
2948: LD_ADDR_OWVAR 26
2952: PUSH
2953: LD_STRING Loghain
2955: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
2956: LD_ADDR_OWVAR 33
2960: PUSH
2961: LD_STRING ZieloneLaserki_Heroes
2963: ST_TO_ADDR
// hc_face_number := 6 ;
2964: LD_ADDR_OWVAR 34
2968: PUSH
2969: LD_INT 6
2971: ST_TO_ADDR
// Loghain := CreateHuman ;
2972: LD_ADDR_EXP 14
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// uc_nation := nation_russian ;
2982: LD_ADDR_OWVAR 21
2986: PUSH
2987: LD_INT 3
2989: ST_TO_ADDR
// hc_importance = 50 ;
2990: LD_ADDR_OWVAR 32
2994: PUSH
2995: LD_INT 50
2997: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 381
// hc_name := Sidorenko ;
3008: LD_ADDR_OWVAR 26
3012: PUSH
3013: LD_STRING Sidorenko
3015: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
3016: LD_ADDR_OWVAR 33
3020: PUSH
3021: LD_STRING ZieloneLaserki_Commanders
3023: ST_TO_ADDR
// hc_face_number := 8 ;
3024: LD_ADDR_OWVAR 34
3028: PUSH
3029: LD_INT 8
3031: ST_TO_ADDR
// ROff := CreateHuman ;
3032: LD_ADDR_EXP 15
3036: PUSH
3037: CALL_OW 44
3041: ST_TO_ADDR
// uc_nation := nation_american ;
3042: LD_ADDR_OWVAR 21
3046: PUSH
3047: LD_INT 1
3049: ST_TO_ADDR
// hc_importance = 50 ;
3050: LD_ADDR_OWVAR 32
3054: PUSH
3055: LD_INT 50
3057: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
3058: LD_INT 1
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: CALL_OW 381
// hc_name :=  ;
3068: LD_ADDR_OWVAR 26
3072: PUSH
3073: LD_STRING 
3075: ST_TO_ADDR
// hc_gallery :=  ;
3076: LD_ADDR_OWVAR 33
3080: PUSH
3081: LD_STRING 
3083: ST_TO_ADDR
// Scout := CreateHuman ;
3084: LD_ADDR_EXP 16
3088: PUSH
3089: CALL_OW 44
3093: ST_TO_ADDR
// end ;
3094: LD_VAR 0 1
3098: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
3099: LD_INT 0
3101: PPUSH
3102: PPUSH
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
3113: LD_ADDR_VAR 0 6
3117: PUSH
3118: LD_INT 22
3120: PUSH
3121: LD_VAR 0 1
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 30
3132: PUSH
3133: LD_INT 6
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
3149: LD_ADDR_VAR 0 6
3153: PUSH
3154: LD_VAR 0 6
3158: PUSH
3159: LD_INT 22
3161: PUSH
3162: LD_VAR 0 1
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 30
3173: PUSH
3174: LD_INT 7
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PPUSH
3185: CALL_OW 69
3189: ADD
3190: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
3191: LD_ADDR_VAR 0 6
3195: PUSH
3196: LD_VAR 0 6
3200: PUSH
3201: LD_INT 22
3203: PUSH
3204: LD_VAR 0 1
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 30
3215: PUSH
3216: LD_INT 8
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ADD
3232: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
3233: LD_ADDR_VAR 0 8
3237: PUSH
3238: LD_INT 22
3240: PUSH
3241: LD_VAR 0 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 30
3252: PUSH
3253: LD_INT 2
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PPUSH
3264: CALL_OW 69
3268: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
3269: LD_ADDR_VAR 0 9
3273: PUSH
3274: LD_INT 22
3276: PUSH
3277: LD_VAR 0 1
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 30
3288: PUSH
3289: LD_INT 3
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 69
3304: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
3305: LD_ADDR_VAR 0 10
3309: PUSH
3310: LD_INT 22
3312: PUSH
3313: LD_VAR 0 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 30
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: ST_TO_ADDR
// case side of 1 :
3341: LD_VAR 0 1
3345: PUSH
3346: LD_INT 1
3348: DOUBLE
3349: EQUAL
3350: IFTRUE 3354
3352: GO 3365
3354: POP
// uc_nation = nation_american ; 3 :
3355: LD_ADDR_OWVAR 21
3359: PUSH
3360: LD_INT 1
3362: ST_TO_ADDR
3363: GO 3385
3365: LD_INT 3
3367: DOUBLE
3368: EQUAL
3369: IFTRUE 3373
3371: GO 3384
3373: POP
// uc_nation = nation_russian ; end ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
3382: GO 3385
3384: POP
// for i = 1 to laby do
3385: LD_ADDR_VAR 0 3
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_VAR 0 6
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3530
// begin if IsInUnit ( laby [ i ] ) = 0 then
3403: LD_VAR 0 6
3407: PUSH
3408: LD_VAR 0 3
3412: ARRAY
3413: PPUSH
3414: CALL_OW 310
3418: PUSH
3419: LD_INT 0
3421: EQUAL
3422: IFFALSE 3528
// begin uc_side = side ;
3424: LD_ADDR_OWVAR 20
3428: PUSH
3429: LD_VAR 0 1
3433: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
3434: LD_ADDR_VAR 0 11
3438: PUSH
3439: LD_INT 2
3441: PPUSH
3442: LD_INT 4
3444: PPUSH
3445: CALL_OW 12
3449: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
3450: LD_ADDR_VAR 0 4
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_VAR 0 11
3464: PUSH
3465: FOR_TO
3466: IFFALSE 3526
// begin PrepareScientist ( 0 , 4 ) ;
3468: LD_INT 0
3470: PPUSH
3471: LD_INT 4
3473: PPUSH
3474: CALL_OW 384
// ludz = CreateHuman ;
3478: LD_ADDR_VAR 0 12
3482: PUSH
3483: CALL_OW 44
3487: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
3488: LD_VAR 0 12
3492: PPUSH
3493: LD_VAR 0 6
3497: PUSH
3498: LD_VAR 0 3
3502: ARRAY
3503: PPUSH
3504: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
3508: LD_ADDR_VAR 0 11
3512: PUSH
3513: LD_INT 2
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: CALL_OW 12
3523: ST_TO_ADDR
// end ;
3524: GO 3465
3526: POP
3527: POP
// end ; end ;
3528: GO 3400
3530: POP
3531: POP
// for i = 1 to fabryki do
3532: LD_ADDR_VAR 0 3
3536: PUSH
3537: DOUBLE
3538: LD_INT 1
3540: DEC
3541: ST_TO_ADDR
3542: LD_VAR 0 9
3546: PUSH
3547: FOR_TO
3548: IFFALSE 3677
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
3550: LD_VAR 0 9
3554: PUSH
3555: LD_VAR 0 3
3559: ARRAY
3560: PPUSH
3561: CALL_OW 310
3565: PUSH
3566: LD_INT 0
3568: EQUAL
3569: IFFALSE 3675
// begin uc_side = side ;
3571: LD_ADDR_OWVAR 20
3575: PUSH
3576: LD_VAR 0 1
3580: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
3581: LD_ADDR_VAR 0 11
3585: PUSH
3586: LD_INT 2
3588: PPUSH
3589: LD_INT 4
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
3597: LD_ADDR_VAR 0 4
3601: PUSH
3602: DOUBLE
3603: LD_INT 1
3605: DEC
3606: ST_TO_ADDR
3607: LD_VAR 0 11
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3673
// begin PrepareMechanic ( 0 , 4 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 4
3620: PPUSH
3621: CALL_OW 383
// ludz = CreateHuman ;
3625: LD_ADDR_VAR 0 12
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
3635: LD_VAR 0 12
3639: PPUSH
3640: LD_VAR 0 9
3644: PUSH
3645: LD_VAR 0 3
3649: ARRAY
3650: PPUSH
3651: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
3655: LD_ADDR_VAR 0 11
3659: PUSH
3660: LD_INT 2
3662: PPUSH
3663: LD_INT 4
3665: PPUSH
3666: CALL_OW 12
3670: ST_TO_ADDR
// end ;
3671: GO 3612
3673: POP
3674: POP
// end ; end ;
3675: GO 3547
3677: POP
3678: POP
// for i = 1 to sklad do
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: DOUBLE
3685: LD_INT 1
3687: DEC
3688: ST_TO_ADDR
3689: LD_VAR 0 10
3693: PUSH
3694: FOR_TO
3695: IFFALSE 3808
// begin if IsInUnit ( sklad [ i ] ) = 0 then
3697: LD_VAR 0 10
3701: PUSH
3702: LD_VAR 0 3
3706: ARRAY
3707: PPUSH
3708: CALL_OW 310
3712: PUSH
3713: LD_INT 0
3715: EQUAL
3716: IFFALSE 3806
// begin uc_side = side ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_VAR 0 1
3727: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
3728: LD_ADDR_VAR 0 11
3732: PUSH
3733: LD_INT 2
3735: PPUSH
3736: LD_INT 3
3738: PPUSH
3739: CALL_OW 12
3743: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
3744: LD_ADDR_VAR 0 4
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 11
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3804
// begin PrepareEngineer ( 0 , 4 ) ;
3762: LD_INT 0
3764: PPUSH
3765: LD_INT 4
3767: PPUSH
3768: CALL_OW 382
// ludz = CreateHuman ;
3772: LD_ADDR_VAR 0 12
3776: PUSH
3777: CALL_OW 44
3781: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
3782: LD_VAR 0 12
3786: PPUSH
3787: LD_VAR 0 10
3791: PUSH
3792: LD_VAR 0 3
3796: ARRAY
3797: PPUSH
3798: CALL_OW 52
// end ;
3802: GO 3759
3804: POP
3805: POP
// end ; end ;
3806: GO 3694
3808: POP
3809: POP
// end ;
3810: LD_VAR 0 2
3814: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// case side of 1 :
3823: LD_VAR 0 1
3827: PUSH
3828: LD_INT 1
3830: DOUBLE
3831: EQUAL
3832: IFTRUE 3836
3834: GO 3847
3836: POP
// uc_nation = nation_american ; 3 :
3837: LD_ADDR_OWVAR 21
3841: PUSH
3842: LD_INT 1
3844: ST_TO_ADDR
3845: GO 3867
3847: LD_INT 3
3849: DOUBLE
3850: EQUAL
3851: IFTRUE 3855
3853: GO 3866
3855: POP
// uc_nation = nation_russian ; end ;
3856: LD_ADDR_OWVAR 21
3860: PUSH
3861: LD_INT 3
3863: ST_TO_ADDR
3864: GO 3867
3866: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
3867: LD_ADDR_VAR 0 5
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_VAR 0 1
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 30
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PPUSH
3898: CALL_OW 69
3902: ST_TO_ADDR
// for i = 1 to barrack do
3903: LD_ADDR_VAR 0 3
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_VAR 0 5
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4092
// begin if IsInUnit ( barrack [ i ] ) = 0 then
3921: LD_VAR 0 5
3925: PUSH
3926: LD_VAR 0 3
3930: ARRAY
3931: PPUSH
3932: CALL_OW 310
3936: PUSH
3937: LD_INT 0
3939: EQUAL
3940: IFFALSE 4090
// begin uc_side = side ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_VAR 0 1
3951: ST_TO_ADDR
// for j = 1 to 3 do
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 3
3964: PUSH
3965: FOR_TO
3966: IFFALSE 4010
// begin PrepareSoldier ( 0 , 5 ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 5
3973: PPUSH
3974: CALL_OW 381
// soldat := CreateHuman ;
3978: LD_ADDR_VAR 0 6
3982: PUSH
3983: CALL_OW 44
3987: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
3988: LD_VAR 0 6
3992: PPUSH
3993: LD_VAR 0 5
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PPUSH
4004: CALL_OW 52
// end ;
4008: GO 3965
4010: POP
4011: POP
// if side = 3 then
4012: LD_VAR 0 1
4016: PUSH
4017: LD_INT 3
4019: EQUAL
4020: IFFALSE 4090
// for j = 1 to 2 do
4022: LD_ADDR_VAR 0 4
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: FOR_TO
4036: IFFALSE 4088
// begin PrepareSoldier ( 0 , 5 ) ;
4038: LD_INT 0
4040: PPUSH
4041: LD_INT 5
4043: PPUSH
4044: CALL_OW 381
// hc_class = class_bazooker ;
4048: LD_ADDR_OWVAR 28
4052: PUSH
4053: LD_INT 9
4055: ST_TO_ADDR
// soldat := CreateHuman ;
4056: LD_ADDR_VAR 0 6
4060: PUSH
4061: CALL_OW 44
4065: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
4066: LD_VAR 0 6
4070: PPUSH
4071: LD_VAR 0 5
4075: PUSH
4076: LD_VAR 0 3
4080: ARRAY
4081: PPUSH
4082: CALL_OW 52
// end ;
4086: GO 4035
4088: POP
4089: POP
// end ; end ;
4090: GO 3918
4092: POP
4093: POP
// end ;
4094: LD_VAR 0 2
4098: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
4105: PPUSH
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
4110: PPUSH
// amChassisTab = [ ] ;
4111: LD_ADDR_VAR 0 18
4115: PUSH
4116: EMPTY
4117: ST_TO_ADDR
// arChassisTab = [ ] ;
4118: LD_ADDR_VAR 0 17
4122: PUSH
4123: EMPTY
4124: ST_TO_ADDR
// ruChassisTab = [ ] ;
4125: LD_ADDR_VAR 0 16
4129: PUSH
4130: EMPTY
4131: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4132: LD_INT 35
4134: PPUSH
4135: CALL_OW 67
// if nation = 1 then
4139: LD_VAR 0 5
4143: PUSH
4144: LD_INT 1
4146: EQUAL
4147: IFFALSE 4652
// begin uc_side = side ;
4149: LD_ADDR_OWVAR 20
4153: PUSH
4154: LD_VAR 0 2
4158: ST_TO_ADDR
// uc_nation = nation ;
4159: LD_ADDR_OWVAR 21
4163: PUSH
4164: LD_VAR 0 5
4168: ST_TO_ADDR
// vc_engine = vehengine ;
4169: LD_ADDR_OWVAR 39
4173: PUSH
4174: LD_VAR 0 6
4178: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4179: LD_ADDR_OWVAR 38
4183: PUSH
4184: LD_VAR 0 7
4188: PUSH
4189: LD_INT 1
4191: PPUSH
4192: LD_VAR 0 7
4196: PPUSH
4197: CALL_OW 12
4201: ARRAY
4202: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
4203: LD_ADDR_OWVAR 40
4207: PUSH
4208: LD_VAR 0 10
4212: PUSH
4213: LD_INT 1
4215: PPUSH
4216: LD_VAR 0 10
4220: PPUSH
4221: CALL_OW 12
4225: ARRAY
4226: ST_TO_ADDR
// for j = 1 to AMWeapon do
4227: LD_ADDR_VAR 0 13
4231: PUSH
4232: DOUBLE
4233: LD_INT 1
4235: DEC
4236: ST_TO_ADDR
4237: LD_VAR 0 10
4241: PUSH
4242: FOR_TO
4243: IFFALSE 4544
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
4245: LD_VAR 0 10
4249: PUSH
4250: LD_VAR 0 13
4254: ARRAY
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: PUSH
4260: LD_VAR 0 10
4264: PUSH
4265: LD_VAR 0 13
4269: ARRAY
4270: PUSH
4271: LD_INT 3
4273: EQUAL
4274: OR
4275: IFFALSE 4328
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
4277: LD_ADDR_VAR 0 18
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 4
4293: PUSH
4294: LD_INT 5
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4304: LD_ADDR_OWVAR 37
4308: PUSH
4309: LD_VAR 0 18
4313: PUSH
4314: LD_INT 1
4316: PPUSH
4317: LD_VAR 0 18
4321: PPUSH
4322: CALL_OW 12
4326: ARRAY
4327: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
4328: LD_VAR 0 10
4332: PUSH
4333: LD_VAR 0 13
4337: ARRAY
4338: PUSH
4339: LD_INT 4
4341: EQUAL
4342: PUSH
4343: LD_VAR 0 10
4347: PUSH
4348: LD_VAR 0 13
4352: ARRAY
4353: PUSH
4354: LD_INT 5
4356: EQUAL
4357: OR
4358: PUSH
4359: LD_VAR 0 10
4363: PUSH
4364: LD_VAR 0 13
4368: ARRAY
4369: PUSH
4370: LD_INT 9
4372: EQUAL
4373: OR
4374: PUSH
4375: LD_VAR 0 10
4379: PUSH
4380: LD_VAR 0 13
4384: ARRAY
4385: PUSH
4386: LD_INT 11
4388: EQUAL
4389: OR
4390: PUSH
4391: LD_VAR 0 10
4395: PUSH
4396: LD_VAR 0 13
4400: ARRAY
4401: PUSH
4402: LD_INT 7
4404: EQUAL
4405: OR
4406: IFFALSE 4455
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
4408: LD_ADDR_VAR 0 18
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: LD_INT 5
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4431: LD_ADDR_OWVAR 37
4435: PUSH
4436: LD_VAR 0 18
4440: PUSH
4441: LD_INT 1
4443: PPUSH
4444: LD_VAR 0 18
4448: PPUSH
4449: CALL_OW 12
4453: ARRAY
4454: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
4455: LD_VAR 0 10
4459: PUSH
4460: LD_VAR 0 13
4464: ARRAY
4465: PUSH
4466: LD_INT 8
4468: EQUAL
4469: PUSH
4470: LD_VAR 0 10
4474: PUSH
4475: LD_VAR 0 13
4479: ARRAY
4480: PUSH
4481: LD_INT 6
4483: EQUAL
4484: OR
4485: PUSH
4486: LD_VAR 0 10
4490: PUSH
4491: LD_VAR 0 13
4495: ARRAY
4496: PUSH
4497: LD_INT 10
4499: EQUAL
4500: OR
4501: IFFALSE 4542
// begin amChassisTab = [ 4 , 5 ] ;
4503: LD_ADDR_VAR 0 18
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 5
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
4518: LD_ADDR_OWVAR 37
4522: PUSH
4523: LD_VAR 0 18
4527: PUSH
4528: LD_INT 1
4530: PPUSH
4531: LD_VAR 0 18
4535: PPUSH
4536: CALL_OW 12
4540: ARRAY
4541: ST_TO_ADDR
// end ; end ;
4542: GO 4242
4544: POP
4545: POP
// veh = CreateVehicle ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: CALL_OW 45
4555: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4556: LD_VAR 0 15
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// if vc_control = 1 then
4573: LD_OWVAR 38
4577: PUSH
4578: LD_INT 1
4580: EQUAL
4581: IFFALSE 4638
// begin hc_gallery =  ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING 
4590: ST_TO_ADDR
// hc_name =  ;
4591: LD_ADDR_OWVAR 26
4595: PUSH
4596: LD_STRING 
4598: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
4599: LD_INT 0
4601: PPUSH
4602: LD_INT 3
4604: PPUSH
4605: LD_VAR 0 4
4609: PPUSH
4610: CALL_OW 380
// un = CreateHuman ;
4614: LD_ADDR_VAR 0 14
4618: PUSH
4619: CALL_OW 44
4623: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4624: LD_VAR 0 14
4628: PPUSH
4629: LD_VAR 0 15
4633: PPUSH
4634: CALL_OW 52
// end ; i = i + 1 ;
4638: LD_ADDR_VAR 0 12
4642: PUSH
4643: LD_VAR 0 12
4647: PUSH
4648: LD_INT 1
4650: PLUS
4651: ST_TO_ADDR
// end ; if nation = 2 then
4652: LD_VAR 0 5
4656: PUSH
4657: LD_INT 2
4659: EQUAL
4660: IFFALSE 5082
// begin uc_side = side ;
4662: LD_ADDR_OWVAR 20
4666: PUSH
4667: LD_VAR 0 2
4671: ST_TO_ADDR
// uc_nation = nation ;
4672: LD_ADDR_OWVAR 21
4676: PUSH
4677: LD_VAR 0 5
4681: ST_TO_ADDR
// vc_engine = vehengine ;
4682: LD_ADDR_OWVAR 39
4686: PUSH
4687: LD_VAR 0 6
4691: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
4692: LD_ADDR_OWVAR 38
4696: PUSH
4697: LD_VAR 0 7
4701: PUSH
4702: LD_INT 1
4704: PPUSH
4705: LD_VAR 0 7
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
4716: LD_ADDR_OWVAR 40
4720: PUSH
4721: LD_VAR 0 9
4725: PUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_VAR 0 9
4733: PPUSH
4734: CALL_OW 12
4738: ARRAY
4739: ST_TO_ADDR
// for j = 1 to ARWeapons do
4740: LD_ADDR_VAR 0 13
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_VAR 0 9
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4974
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
4758: LD_VAR 0 9
4762: PUSH
4763: LD_VAR 0 13
4767: ARRAY
4768: PUSH
4769: LD_INT 24
4771: EQUAL
4772: PUSH
4773: LD_VAR 0 9
4777: PUSH
4778: LD_VAR 0 13
4782: ARRAY
4783: PUSH
4784: LD_INT 22
4786: EQUAL
4787: OR
4788: PUSH
4789: LD_VAR 0 9
4793: PUSH
4794: LD_VAR 0 13
4798: ARRAY
4799: PUSH
4800: LD_INT 23
4802: EQUAL
4803: OR
4804: PUSH
4805: LD_VAR 0 9
4809: PUSH
4810: LD_VAR 0 13
4814: ARRAY
4815: PUSH
4816: LD_INT 30
4818: EQUAL
4819: OR
4820: IFFALSE 4857
// begin arChassisTab = [ 14 ] ;
4822: LD_ADDR_VAR 0 17
4826: PUSH
4827: LD_INT 14
4829: PUSH
4830: EMPTY
4831: LIST
4832: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4833: LD_ADDR_OWVAR 37
4837: PUSH
4838: LD_VAR 0 17
4842: PUSH
4843: LD_INT 1
4845: PPUSH
4846: LD_VAR 0 17
4850: PPUSH
4851: CALL_OW 12
4855: ARRAY
4856: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
4857: LD_VAR 0 9
4861: PUSH
4862: LD_VAR 0 13
4866: ARRAY
4867: PUSH
4868: LD_INT 29
4870: EQUAL
4871: PUSH
4872: LD_VAR 0 9
4876: PUSH
4877: LD_VAR 0 13
4881: ARRAY
4882: PUSH
4883: LD_INT 28
4885: EQUAL
4886: OR
4887: PUSH
4888: LD_VAR 0 9
4892: PUSH
4893: LD_VAR 0 13
4897: ARRAY
4898: PUSH
4899: LD_INT 27
4901: EQUAL
4902: OR
4903: PUSH
4904: LD_VAR 0 9
4908: PUSH
4909: LD_VAR 0 13
4913: ARRAY
4914: PUSH
4915: LD_INT 26
4917: EQUAL
4918: OR
4919: PUSH
4920: LD_VAR 0 9
4924: PUSH
4925: LD_VAR 0 13
4929: ARRAY
4930: PUSH
4931: LD_INT 25
4933: EQUAL
4934: OR
4935: IFFALSE 4972
// begin arChassisTab = [ 14 ] ;
4937: LD_ADDR_VAR 0 17
4941: PUSH
4942: LD_INT 14
4944: PUSH
4945: EMPTY
4946: LIST
4947: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
4948: LD_ADDR_OWVAR 37
4952: PUSH
4953: LD_VAR 0 17
4957: PUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_VAR 0 17
4965: PPUSH
4966: CALL_OW 12
4970: ARRAY
4971: ST_TO_ADDR
// end ; end ;
4972: GO 4755
4974: POP
4975: POP
// veh = CreateVehicle ;
4976: LD_ADDR_VAR 0 15
4980: PUSH
4981: CALL_OW 45
4985: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4986: LD_VAR 0 15
4990: PPUSH
4991: LD_VAR 0 1
4995: PPUSH
4996: LD_INT 0
4998: PPUSH
4999: CALL_OW 49
// if vc_control = 1 then
5003: LD_OWVAR 38
5007: PUSH
5008: LD_INT 1
5010: EQUAL
5011: IFFALSE 5068
// begin hc_gallery =  ;
5013: LD_ADDR_OWVAR 33
5017: PUSH
5018: LD_STRING 
5020: ST_TO_ADDR
// hc_name =  ;
5021: LD_ADDR_OWVAR 26
5025: PUSH
5026: LD_STRING 
5028: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5029: LD_INT 0
5031: PPUSH
5032: LD_INT 3
5034: PPUSH
5035: LD_VAR 0 4
5039: PPUSH
5040: CALL_OW 380
// un = CreateHuman ;
5044: LD_ADDR_VAR 0 14
5048: PUSH
5049: CALL_OW 44
5053: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5054: LD_VAR 0 14
5058: PPUSH
5059: LD_VAR 0 15
5063: PPUSH
5064: CALL_OW 52
// end ; i = i + 1 ;
5068: LD_ADDR_VAR 0 12
5072: PUSH
5073: LD_VAR 0 12
5077: PUSH
5078: LD_INT 1
5080: PLUS
5081: ST_TO_ADDR
// end ; if nation = 3 then
5082: LD_VAR 0 5
5086: PUSH
5087: LD_INT 3
5089: EQUAL
5090: IFFALSE 5496
// begin uc_side = side ;
5092: LD_ADDR_OWVAR 20
5096: PUSH
5097: LD_VAR 0 2
5101: ST_TO_ADDR
// uc_nation = nation ;
5102: LD_ADDR_OWVAR 21
5106: PUSH
5107: LD_VAR 0 5
5111: ST_TO_ADDR
// vc_engine = vehengine ;
5112: LD_ADDR_OWVAR 39
5116: PUSH
5117: LD_VAR 0 6
5121: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
5122: LD_ADDR_OWVAR 38
5126: PUSH
5127: LD_VAR 0 7
5131: PUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_VAR 0 7
5139: PPUSH
5140: CALL_OW 12
5144: ARRAY
5145: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
5146: LD_ADDR_OWVAR 40
5150: PUSH
5151: LD_VAR 0 8
5155: PUSH
5156: LD_INT 1
5158: PPUSH
5159: LD_VAR 0 8
5163: PPUSH
5164: CALL_OW 12
5168: ARRAY
5169: ST_TO_ADDR
// for j = 1 to RuWeapons do
5170: LD_ADDR_VAR 0 13
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_VAR 0 8
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5388
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
5188: LD_VAR 0 8
5192: PUSH
5193: LD_VAR 0 13
5197: ARRAY
5198: PUSH
5199: LD_INT 42
5201: EQUAL
5202: PUSH
5203: LD_VAR 0 8
5207: PUSH
5208: LD_VAR 0 13
5212: ARRAY
5213: PUSH
5214: LD_INT 43
5216: EQUAL
5217: OR
5218: PUSH
5219: LD_VAR 0 8
5223: PUSH
5224: LD_VAR 0 13
5228: ARRAY
5229: PUSH
5230: LD_INT 44
5232: EQUAL
5233: OR
5234: PUSH
5235: LD_VAR 0 8
5239: PUSH
5240: LD_VAR 0 13
5244: ARRAY
5245: PUSH
5246: LD_INT 45
5248: EQUAL
5249: OR
5250: PUSH
5251: LD_VAR 0 8
5255: PUSH
5256: LD_VAR 0 13
5260: ARRAY
5261: PUSH
5262: LD_INT 49
5264: EQUAL
5265: OR
5266: IFFALSE 5315
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
5268: LD_ADDR_VAR 0 16
5272: PUSH
5273: LD_INT 21
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 23
5281: PUSH
5282: LD_INT 24
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5291: LD_ADDR_OWVAR 37
5295: PUSH
5296: LD_VAR 0 16
5300: PUSH
5301: LD_INT 1
5303: PPUSH
5304: LD_VAR 0 16
5308: PPUSH
5309: CALL_OW 12
5313: ARRAY
5314: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
5315: LD_VAR 0 8
5319: PUSH
5320: LD_VAR 0 13
5324: ARRAY
5325: PUSH
5326: LD_INT 46
5328: EQUAL
5329: PUSH
5330: LD_VAR 0 8
5334: PUSH
5335: LD_VAR 0 13
5339: ARRAY
5340: PUSH
5341: LD_INT 47
5343: EQUAL
5344: OR
5345: IFFALSE 5386
// begin ruChassisTab = [ 23 , 24 ] ;
5347: LD_ADDR_VAR 0 16
5351: PUSH
5352: LD_INT 23
5354: PUSH
5355: LD_INT 24
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
5362: LD_ADDR_OWVAR 37
5366: PUSH
5367: LD_VAR 0 16
5371: PUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_VAR 0 16
5379: PPUSH
5380: CALL_OW 12
5384: ARRAY
5385: ST_TO_ADDR
// end ; end ;
5386: GO 5185
5388: POP
5389: POP
// veh = CreateVehicle ;
5390: LD_ADDR_VAR 0 15
5394: PUSH
5395: CALL_OW 45
5399: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5400: LD_VAR 0 15
5404: PPUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// if vc_control = 1 then
5417: LD_OWVAR 38
5421: PUSH
5422: LD_INT 1
5424: EQUAL
5425: IFFALSE 5482
// begin hc_gallery =  ;
5427: LD_ADDR_OWVAR 33
5431: PUSH
5432: LD_STRING 
5434: ST_TO_ADDR
// hc_name =  ;
5435: LD_ADDR_OWVAR 26
5439: PUSH
5440: LD_STRING 
5442: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
5443: LD_INT 0
5445: PPUSH
5446: LD_INT 3
5448: PPUSH
5449: LD_VAR 0 4
5453: PPUSH
5454: CALL_OW 380
// un = CreateHuman ;
5458: LD_ADDR_VAR 0 14
5462: PUSH
5463: CALL_OW 44
5467: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5468: LD_VAR 0 14
5472: PPUSH
5473: LD_VAR 0 15
5477: PPUSH
5478: CALL_OW 52
// end ; i = i + 1 ;
5482: LD_ADDR_VAR 0 12
5486: PUSH
5487: LD_VAR 0 12
5491: PUSH
5492: LD_INT 1
5494: PLUS
5495: ST_TO_ADDR
// end ; until i = vehCount ;
5496: LD_VAR 0 12
5500: PUSH
5501: LD_VAR 0 3
5505: EQUAL
5506: IFFALSE 4132
// end ;
5508: LD_VAR 0 11
5512: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
5513: LD_INT 0
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
// for i = 1 to medicCount do
5522: LD_ADDR_VAR 0 11
5526: PUSH
5527: DOUBLE
5528: LD_INT 1
5530: DEC
5531: ST_TO_ADDR
5532: LD_VAR 0 7
5536: PUSH
5537: FOR_TO
5538: IFFALSE 5620
// begin uc_side = side ;
5540: LD_ADDR_OWVAR 20
5544: PUSH
5545: LD_VAR 0 1
5549: ST_TO_ADDR
// uc_nation = nation ;
5550: LD_ADDR_OWVAR 21
5554: PUSH
5555: LD_VAR 0 2
5559: ST_TO_ADDR
// hc_name =  ;
5560: LD_ADDR_OWVAR 26
5564: PUSH
5565: LD_STRING 
5567: ST_TO_ADDR
// hc_gallery =  ;
5568: LD_ADDR_OWVAR 33
5572: PUSH
5573: LD_STRING 
5575: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5576: LD_INT 0
5578: PPUSH
5579: LD_INT 4
5581: PPUSH
5582: LD_VAR 0 8
5586: PPUSH
5587: CALL_OW 380
// un = CreateHuman ;
5591: LD_ADDR_VAR 0 13
5595: PUSH
5596: CALL_OW 44
5600: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5601: LD_VAR 0 13
5605: PPUSH
5606: LD_VAR 0 9
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5537
5620: POP
5621: POP
// for i = 1 to soldierCount do
5622: LD_ADDR_VAR 0 11
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 3
5636: PUSH
5637: FOR_TO
5638: IFFALSE 5720
// begin uc_side = side ;
5640: LD_ADDR_OWVAR 20
5644: PUSH
5645: LD_VAR 0 1
5649: ST_TO_ADDR
// uc_nation = nation ;
5650: LD_ADDR_OWVAR 21
5654: PUSH
5655: LD_VAR 0 2
5659: ST_TO_ADDR
// hc_name =  ;
5660: LD_ADDR_OWVAR 26
5664: PUSH
5665: LD_STRING 
5667: ST_TO_ADDR
// hc_gallery =  ;
5668: LD_ADDR_OWVAR 33
5672: PUSH
5673: LD_STRING 
5675: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5676: LD_INT 0
5678: PPUSH
5679: LD_INT 1
5681: PPUSH
5682: LD_VAR 0 8
5686: PPUSH
5687: CALL_OW 380
// un = CreateHuman ;
5691: LD_ADDR_VAR 0 13
5695: PUSH
5696: CALL_OW 44
5700: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5701: LD_VAR 0 13
5705: PPUSH
5706: LD_VAR 0 9
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// end ;
5718: GO 5637
5720: POP
5721: POP
// for i = 1 to sniperCount do
5722: LD_ADDR_VAR 0 11
5726: PUSH
5727: DOUBLE
5728: LD_INT 1
5730: DEC
5731: ST_TO_ADDR
5732: LD_VAR 0 4
5736: PUSH
5737: FOR_TO
5738: IFFALSE 5820
// begin uc_side = side ;
5740: LD_ADDR_OWVAR 20
5744: PUSH
5745: LD_VAR 0 1
5749: ST_TO_ADDR
// uc_nation = nation ;
5750: LD_ADDR_OWVAR 21
5754: PUSH
5755: LD_VAR 0 2
5759: ST_TO_ADDR
// hc_name =  ;
5760: LD_ADDR_OWVAR 26
5764: PUSH
5765: LD_STRING 
5767: ST_TO_ADDR
// hc_gallery =  ;
5768: LD_ADDR_OWVAR 33
5772: PUSH
5773: LD_STRING 
5775: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5776: LD_INT 0
5778: PPUSH
5779: LD_INT 5
5781: PPUSH
5782: LD_VAR 0 8
5786: PPUSH
5787: CALL_OW 380
// un = CreateHuman ;
5791: LD_ADDR_VAR 0 13
5795: PUSH
5796: CALL_OW 44
5800: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5801: LD_VAR 0 13
5805: PPUSH
5806: LD_VAR 0 9
5810: PPUSH
5811: LD_INT 0
5813: PPUSH
5814: CALL_OW 49
// end ;
5818: GO 5737
5820: POP
5821: POP
// for i = 1 to bazookCount do
5822: LD_ADDR_VAR 0 11
5826: PUSH
5827: DOUBLE
5828: LD_INT 1
5830: DEC
5831: ST_TO_ADDR
5832: LD_VAR 0 5
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5920
// begin uc_side = side ;
5840: LD_ADDR_OWVAR 20
5844: PUSH
5845: LD_VAR 0 1
5849: ST_TO_ADDR
// uc_nation = nation ;
5850: LD_ADDR_OWVAR 21
5854: PUSH
5855: LD_VAR 0 2
5859: ST_TO_ADDR
// hc_name =  ;
5860: LD_ADDR_OWVAR 26
5864: PUSH
5865: LD_STRING 
5867: ST_TO_ADDR
// hc_gallery =  ;
5868: LD_ADDR_OWVAR 33
5872: PUSH
5873: LD_STRING 
5875: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5876: LD_INT 0
5878: PPUSH
5879: LD_INT 9
5881: PPUSH
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 380
// un = CreateHuman ;
5891: LD_ADDR_VAR 0 13
5895: PUSH
5896: CALL_OW 44
5900: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5901: LD_VAR 0 13
5905: PPUSH
5906: LD_VAR 0 9
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5837
5920: POP
5921: POP
// for i = 1 to mortalCount do
5922: LD_ADDR_VAR 0 11
5926: PUSH
5927: DOUBLE
5928: LD_INT 1
5930: DEC
5931: ST_TO_ADDR
5932: LD_VAR 0 6
5936: PUSH
5937: FOR_TO
5938: IFFALSE 6020
// begin uc_side = side ;
5940: LD_ADDR_OWVAR 20
5944: PUSH
5945: LD_VAR 0 1
5949: ST_TO_ADDR
// uc_nation = nation ;
5950: LD_ADDR_OWVAR 21
5954: PUSH
5955: LD_VAR 0 2
5959: ST_TO_ADDR
// hc_name =  ;
5960: LD_ADDR_OWVAR 26
5964: PUSH
5965: LD_STRING 
5967: ST_TO_ADDR
// hc_gallery =  ;
5968: LD_ADDR_OWVAR 33
5972: PUSH
5973: LD_STRING 
5975: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5976: LD_INT 0
5978: PPUSH
5979: LD_INT 8
5981: PPUSH
5982: LD_VAR 0 8
5986: PPUSH
5987: CALL_OW 380
// un = CreateHuman ;
5991: LD_ADDR_VAR 0 13
5995: PUSH
5996: CALL_OW 44
6000: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6001: LD_VAR 0 13
6005: PPUSH
6006: LD_VAR 0 9
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: CALL_OW 49
// end ;
6018: GO 5937
6020: POP
6021: POP
// soldiersOK_list = soldiersOK_list ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6022: LD_ADDR_EXP 18
6026: PUSH
6027: LD_EXP 18
6031: PUSH
6032: LD_INT 9
6034: PPUSH
6035: LD_INT 22
6037: PUSH
6038: LD_VAR 0 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 2
6049: PUSH
6050: LD_INT 25
6052: PUSH
6053: LD_INT 1
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 25
6062: PUSH
6063: LD_INT 5
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 8
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 25
6082: PUSH
6083: LD_INT 9
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 71
6105: ADD
6106: ST_TO_ADDR
// RUBazookers = RUBazookers ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 9 ] ] ) ;
6107: LD_ADDR_EXP 17
6111: PUSH
6112: LD_EXP 17
6116: PUSH
6117: LD_INT 9
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_VAR 0 1
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 25
6134: PUSH
6135: LD_INT 9
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PPUSH
6146: CALL_OW 71
6150: ADD
6151: ST_TO_ADDR
// medic_list = medic_list ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6152: LD_ADDR_EXP 20
6156: PUSH
6157: LD_EXP 20
6161: PUSH
6162: LD_INT 9
6164: PPUSH
6165: LD_INT 22
6167: PUSH
6168: LD_VAR 0 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 4
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 71
6195: ADD
6196: ST_TO_ADDR
// for i in medic_list do
6197: LD_ADDR_VAR 0 11
6201: PUSH
6202: LD_EXP 20
6206: PUSH
6207: FOR_IN
6208: IFFALSE 6224
// ComMoveToArea ( i , RussianHealArea2 ) ;
6210: LD_VAR 0 11
6214: PPUSH
6215: LD_INT 7
6217: PPUSH
6218: CALL_OW 113
6222: GO 6207
6224: POP
6225: POP
// end ; end_of_file
6226: LD_VAR 0 10
6230: RET
// every 0 0$1 do
6231: GO 6233
6233: DISABLE
// begin enable ;
6234: ENABLE
// IntBazooka ( RUBazookers ) ;
6235: LD_EXP 17
6239: PPUSH
6240: CALL 8396 0 1
// end ;
6244: END
// every 0 0$1 do
6245: GO 6247
6247: DISABLE
// begin enable ;
6248: ENABLE
// RepairBuilding ( 3 , RuBase ) ;
6249: LD_INT 3
6251: PPUSH
6252: LD_INT 37
6254: PPUSH
6255: CALL 8043 0 2
// HealUnitInBase ( 3 , RussianHealArea1 , MainRUBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
6259: LD_INT 3
6261: PPUSH
6262: LD_INT 8
6264: PPUSH
6265: LD_INT 9
6267: PPUSH
6268: LD_INT 22
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 21
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 30
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: PPUSH
6303: CALL_OW 69
6307: PPUSH
6308: CALL 7495 0 4
// end ;
6312: END
// every 0 0$1 do var damageUnit_list , i , j , target1 , target2 ;
6313: GO 6315
6315: DISABLE
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
6321: PPUSH
6322: PPUSH
// begin repeat wait ( 0 0$1 ) ;
6323: LD_INT 35
6325: PPUSH
6326: CALL_OW 67
// damageUnit_list = FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6330: LD_ADDR_VAR 0 1
6334: PUSH
6335: LD_INT 9
6337: PPUSH
6338: LD_INT 22
6340: PUSH
6341: LD_INT 3
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 24
6356: PUSH
6357: LD_INT 550
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 250
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PPUSH
6387: CALL_OW 71
6391: ST_TO_ADDR
// soldiersOK_list = FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6392: LD_ADDR_EXP 18
6396: PUSH
6397: LD_INT 9
6399: PPUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 3
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 25
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 25
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 25
6445: PUSH
6446: LD_INT 9
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_INT 24
6462: PUSH
6463: LD_INT 1000
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 71
6479: ST_TO_ADDR
// if medic_list > 0 then
6480: LD_EXP 20
6484: PUSH
6485: LD_INT 0
6487: GREATER
6488: IFFALSE 6560
// begin if damageUnit_list > 0 then
6490: LD_VAR 0 1
6494: PUSH
6495: LD_INT 0
6497: GREATER
6498: IFFALSE 6560
// begin for i in damageUnit_list do
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: LD_VAR 0 1
6509: PUSH
6510: FOR_IN
6511: IFFALSE 6558
// begin ComMoveToArea ( i , RussianHealArea2 ) ;
6513: LD_VAR 0 2
6517: PPUSH
6518: LD_INT 7
6520: PPUSH
6521: CALL_OW 113
// for j in medic_list do
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_EXP 20
6534: PUSH
6535: FOR_IN
6536: IFFALSE 6554
// AddComHeal ( j , i ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_VAR 0 2
6547: PPUSH
6548: CALL_OW 188
6552: GO 6535
6554: POP
6555: POP
// end ;
6556: GO 6510
6558: POP
6559: POP
// end ; end ; for i in soldiersOK_list do
6560: LD_ADDR_VAR 0 2
6564: PUSH
6565: LD_EXP 18
6569: PUSH
6570: FOR_IN
6571: IFFALSE 6743
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
6573: LD_ADDR_VAR 0 4
6577: PUSH
6578: LD_INT 81
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PPUSH
6588: CALL_OW 69
6592: PPUSH
6593: LD_VAR 0 2
6597: PPUSH
6598: CALL_OW 74
6602: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6603: LD_ADDR_VAR 0 5
6607: PUSH
6608: LD_INT 81
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: LD_INT 59
6623: PUSH
6624: EMPTY
6625: LIST
6626: PUSH
6627: LD_INT 21
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 21
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: PPUSH
6660: CALL_OW 69
6664: PPUSH
6665: LD_VAR 0 2
6669: PPUSH
6670: CALL_OW 74
6674: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_VAR 0 4
6684: PPUSH
6685: CALL_OW 296
6689: PUSH
6690: LD_INT 8
6692: PLUS
6693: PUSH
6694: LD_VAR 0 2
6698: PPUSH
6699: LD_VAR 0 5
6703: PPUSH
6704: CALL_OW 296
6708: LESS
6709: IFFALSE 6727
// begin ComAttackUnit ( i , target1 ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 4
6720: PPUSH
6721: CALL_OW 115
// end else
6725: GO 6741
// begin ComAttackUnit ( i , target2 ) ;
6727: LD_VAR 0 2
6731: PPUSH
6732: LD_VAR 0 5
6736: PPUSH
6737: CALL_OW 115
// end ; end ;
6741: GO 6570
6743: POP
6744: POP
// for i in soldiersOK_list do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_EXP 18
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6928
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
6758: LD_ADDR_VAR 0 4
6762: PUSH
6763: LD_INT 81
6765: PUSH
6766: LD_INT 3
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: PPUSH
6778: LD_VAR 0 2
6782: PPUSH
6783: CALL_OW 74
6787: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: LD_INT 81
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 2
6805: PUSH
6806: LD_INT 59
6808: PUSH
6809: EMPTY
6810: LIST
6811: PUSH
6812: LD_INT 21
6814: PUSH
6815: LD_INT 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 21
6824: PUSH
6825: LD_INT 2
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PPUSH
6850: LD_VAR 0 2
6854: PPUSH
6855: CALL_OW 74
6859: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6860: LD_VAR 0 2
6864: PPUSH
6865: LD_VAR 0 4
6869: PPUSH
6870: CALL_OW 296
6874: PUSH
6875: LD_INT 8
6877: PLUS
6878: PUSH
6879: LD_VAR 0 2
6883: PPUSH
6884: LD_VAR 0 5
6888: PPUSH
6889: CALL_OW 296
6893: LESS
6894: IFFALSE 6912
// begin ComAttackUnit ( i , target1 ) ;
6896: LD_VAR 0 2
6900: PPUSH
6901: LD_VAR 0 4
6905: PPUSH
6906: CALL_OW 115
// end else
6910: GO 6926
// begin ComAttackUnit ( i , target2 ) ;
6912: LD_VAR 0 2
6916: PPUSH
6917: LD_VAR 0 5
6921: PPUSH
6922: CALL_OW 115
// end ; end ;
6926: GO 6755
6928: POP
6929: POP
// until soldiersOK_list = [ ] ;
6930: LD_EXP 18
6934: PUSH
6935: EMPTY
6936: EQUAL
6937: IFFALSE 6323
// end ;
6939: PPOPN 5
6941: END
// every 0 0$1 do var i , target1 , target2 ;
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
// begin repeat wait ( 0 0$1 ) ;
6950: LD_INT 35
6952: PPUSH
6953: CALL_OW 67
// vehicleOK_list = FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6957: LD_ADDR_EXP 19
6961: PUSH
6962: LD_INT 9
6964: PPUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 3
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 21
6977: PUSH
6978: LD_INT 2
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 24
6987: PUSH
6988: LD_INT 650
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 71
7004: ST_TO_ADDR
// if vehicleOK_list > 0 then
7005: LD_EXP 19
7009: PUSH
7010: LD_INT 0
7012: GREATER
7013: IFFALSE 7200
// begin for i in vehicleOK_list do
7015: LD_ADDR_VAR 0 1
7019: PUSH
7020: LD_EXP 19
7024: PUSH
7025: FOR_IN
7026: IFFALSE 7198
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
7028: LD_ADDR_VAR 0 2
7032: PUSH
7033: LD_INT 81
7035: PUSH
7036: LD_INT 3
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: PPUSH
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 74
7057: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 81
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 59
7078: PUSH
7079: EMPTY
7080: LIST
7081: PUSH
7082: LD_INT 21
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 21
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: PPUSH
7120: LD_VAR 0 1
7124: PPUSH
7125: CALL_OW 74
7129: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7130: LD_VAR 0 1
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: CALL_OW 296
7144: PUSH
7145: LD_INT 8
7147: PLUS
7148: PUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: LD_VAR 0 3
7158: PPUSH
7159: CALL_OW 296
7163: LESS
7164: IFFALSE 7182
// begin ComAttackUnit ( i , target1 ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: LD_VAR 0 2
7175: PPUSH
7176: CALL_OW 115
// end else
7180: GO 7196
// begin ComAttackUnit ( i , target2 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_VAR 0 3
7191: PPUSH
7192: CALL_OW 115
// end ; end ;
7196: GO 7025
7198: POP
7199: POP
// end ; until ( FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
7200: LD_INT 9
7202: PPUSH
7203: LD_INT 22
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 21
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 71
7231: PUSH
7232: LD_INT 0
7234: EQUAL
7235: IFFALSE 6950
// end ; end_of_file
7237: PPOPN 3
7239: END
// export RuSolMinLevel , RuSolMaxLevel ; export function PrepareDifficulty ; begin
7240: LD_INT 0
7242: PPUSH
// if difficulty = 1 then
7243: LD_OWVAR 67
7247: PUSH
7248: LD_INT 1
7250: EQUAL
7251: IFFALSE 7295
// begin RuSolMinLevel = 3 ;
7253: LD_ADDR_EXP 21
7257: PUSH
7258: LD_INT 3
7260: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7261: LD_ADDR_EXP 22
7265: PUSH
7266: LD_INT 6
7268: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
7269: LD_INT 51
7271: PPUSH
7272: LD_INT 3
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
7282: LD_INT 57
7284: PPUSH
7285: LD_INT 3
7287: PPUSH
7288: LD_INT 2
7290: PPUSH
7291: CALL_OW 322
// end ; if difficulty = 2 then
7295: LD_OWVAR 67
7299: PUSH
7300: LD_INT 2
7302: EQUAL
7303: IFFALSE 7386
// begin RuSolMinLevel = 4 ;
7305: LD_ADDR_EXP 21
7309: PUSH
7310: LD_INT 4
7312: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7313: LD_ADDR_EXP 22
7317: PUSH
7318: LD_INT 6
7320: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
7321: LD_INT 51
7323: PPUSH
7324: LD_INT 3
7326: PPUSH
7327: LD_INT 2
7329: PPUSH
7330: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
7334: LD_INT 52
7336: PPUSH
7337: LD_INT 3
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
7347: LD_INT 57
7349: PPUSH
7350: LD_INT 3
7352: PPUSH
7353: LD_INT 2
7355: PPUSH
7356: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
7360: LD_INT 58
7362: PPUSH
7363: LD_INT 3
7365: PPUSH
7366: LD_INT 2
7368: PPUSH
7369: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
7373: LD_INT 63
7375: PPUSH
7376: LD_INT 3
7378: PPUSH
7379: LD_INT 2
7381: PPUSH
7382: CALL_OW 322
// end ; if difficulty = 3 then
7386: LD_OWVAR 67
7390: PUSH
7391: LD_INT 3
7393: EQUAL
7394: IFFALSE 7490
// begin RuSolMinLevel = 5 ;
7396: LD_ADDR_EXP 21
7400: PUSH
7401: LD_INT 5
7403: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 7
7411: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
7412: LD_INT 51
7414: PPUSH
7415: LD_INT 3
7417: PPUSH
7418: LD_INT 2
7420: PPUSH
7421: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
7425: LD_INT 57
7427: PPUSH
7428: LD_INT 3
7430: PPUSH
7431: LD_INT 2
7433: PPUSH
7434: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
7438: LD_INT 52
7440: PPUSH
7441: LD_INT 3
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
7451: LD_INT 58
7453: PPUSH
7454: LD_INT 3
7456: PPUSH
7457: LD_INT 2
7459: PPUSH
7460: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
7464: LD_INT 63
7466: PPUSH
7467: LD_INT 3
7469: PPUSH
7470: LD_INT 2
7472: PPUSH
7473: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
7477: LD_INT 64
7479: PPUSH
7480: LD_INT 3
7482: PPUSH
7483: LD_INT 2
7485: PPUSH
7486: CALL_OW 322
// end ; end ; end_of_file
7490: LD_VAR 0 1
7494: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7495: LD_INT 0
7497: PPUSH
7498: PPUSH
7499: PPUSH
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
7506: LD_ADDR_VAR 0 6
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_VAR 0 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 25
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 24
7535: PUSH
7536: LD_INT 251
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7553: LD_ADDR_VAR 0 7
7557: PUSH
7558: LD_VAR 0 3
7562: PPUSH
7563: LD_INT 22
7565: PUSH
7566: LD_VAR 0 1
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 25
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 50
7587: PUSH
7588: EMPTY
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 70
7600: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7601: LD_ADDR_VAR 0 10
7605: PUSH
7606: LD_VAR 0 3
7610: PPUSH
7611: LD_INT 22
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 21
7625: PUSH
7626: LD_INT 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: LD_INT 25
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: LD_INT 24
7655: PUSH
7656: LD_INT 750
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 70
7677: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7678: LD_ADDR_VAR 0 11
7682: PUSH
7683: LD_VAR 0 2
7687: PPUSH
7688: LD_INT 22
7690: PUSH
7691: LD_VAR 0 1
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 3
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: LD_INT 24
7732: PUSH
7733: LD_INT 1000
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 70
7754: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
7755: LD_VAR 0 10
7759: NOT
7760: PUSH
7761: LD_VAR 0 7
7765: NOT
7766: AND
7767: PUSH
7768: LD_VAR 0 11
7772: NOT
7773: AND
7774: IFFALSE 7778
// exit ;
7776: GO 8038
// if damageUnits > 0 and sci_list > 0 then
7778: LD_VAR 0 10
7782: PUSH
7783: LD_INT 0
7785: GREATER
7786: PUSH
7787: LD_VAR 0 6
7791: PUSH
7792: LD_INT 0
7794: GREATER
7795: AND
7796: IFFALSE 7829
// for i in damageUnits do
7798: LD_ADDR_VAR 0 8
7802: PUSH
7803: LD_VAR 0 10
7807: PUSH
7808: FOR_IN
7809: IFFALSE 7827
// ComMoveToArea ( i , healArea ) ;
7811: LD_VAR 0 8
7815: PPUSH
7816: LD_VAR 0 2
7820: PPUSH
7821: CALL_OW 113
7825: GO 7808
7827: POP
7828: POP
// if unitsToHeal > 0 and sci_list > 0 then
7829: LD_VAR 0 11
7833: PUSH
7834: LD_INT 0
7836: GREATER
7837: PUSH
7838: LD_VAR 0 6
7842: PUSH
7843: LD_INT 0
7845: GREATER
7846: AND
7847: IFFALSE 7906
// begin for i in sci_list do
7849: LD_ADDR_VAR 0 8
7853: PUSH
7854: LD_VAR 0 6
7858: PUSH
7859: FOR_IN
7860: IFFALSE 7904
// begin ComExitBuilding ( i ) ;
7862: LD_VAR 0 8
7866: PPUSH
7867: CALL_OW 122
// for j in unitsToHeal do
7871: LD_ADDR_VAR 0 9
7875: PUSH
7876: LD_VAR 0 11
7880: PUSH
7881: FOR_IN
7882: IFFALSE 7900
// AddComHeal ( i , j ) ;
7884: LD_VAR 0 8
7888: PPUSH
7889: LD_VAR 0 9
7893: PPUSH
7894: CALL_OW 188
7898: GO 7881
7900: POP
7901: POP
// end ;
7902: GO 7859
7904: POP
7905: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
7906: LD_VAR 0 10
7910: PUSH
7911: LD_INT 0
7913: EQUAL
7914: PUSH
7915: LD_VAR 0 11
7919: PUSH
7920: LD_INT 0
7922: EQUAL
7923: AND
7924: PUSH
7925: LD_VAR 0 7
7929: PUSH
7930: LD_INT 0
7932: GREATER
7933: AND
7934: IFFALSE 8038
// for i in sci_listOutside do
7936: LD_ADDR_VAR 0 8
7940: PUSH
7941: LD_VAR 0 7
7945: PUSH
7946: FOR_IN
7947: IFFALSE 8036
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
7949: LD_ADDR_VAR 0 12
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_VAR 0 1
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 21
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 30
7978: PUSH
7979: LD_INT 8
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: PPUSH
7991: CALL_OW 69
7995: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
7996: LD_ADDR_VAR 0 13
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 12
8008: PPUSH
8009: CALL_OW 12
8013: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
8014: LD_VAR 0 8
8018: PPUSH
8019: LD_VAR 0 12
8023: PUSH
8024: LD_VAR 0 13
8028: ARRAY
8029: PPUSH
8030: CALL_OW 120
// end ;
8034: GO 7946
8036: POP
8037: POP
// end ;
8038: LD_VAR 0 5
8042: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8043: LD_INT 0
8045: PPUSH
8046: PPUSH
8047: PPUSH
8048: PPUSH
8049: PPUSH
8050: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8051: LD_ADDR_VAR 0 6
8055: PUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: CALL_OW 313
8065: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
8066: LD_ADDR_VAR 0 7
8070: PUSH
8071: LD_INT 22
8073: PUSH
8074: LD_VAR 0 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 2
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 24
8095: PUSH
8096: LD_INT 1000
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 3
8105: PUSH
8106: LD_INT 54
8108: PUSH
8109: EMPTY
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL_OW 69
8126: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8127: LD_ADDR_VAR 0 4
8131: PUSH
8132: LD_INT 22
8134: PUSH
8135: LD_VAR 0 1
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 21
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: LD_INT 24
8159: PUSH
8160: LD_INT 1000
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: PPUSH
8179: CALL_OW 69
8183: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
8184: LD_VAR 0 4
8188: NOT
8189: PUSH
8190: LD_VAR 0 7
8194: NOT
8195: AND
8196: IFFALSE 8200
// exit ;
8198: GO 8391
// if buildings_list > 0 and engineerOkInside then
8200: LD_VAR 0 4
8204: PUSH
8205: LD_INT 0
8207: GREATER
8208: PUSH
8209: LD_VAR 0 6
8213: AND
8214: IFFALSE 8268
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: LD_INT 22
8223: PUSH
8224: LD_VAR 0 1
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: LD_INT 25
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 69
8251: PUSH
8252: FOR_IN
8253: IFFALSE 8266
// ComExitBuilding ( i ) ;
8255: LD_VAR 0 5
8259: PPUSH
8260: CALL_OW 122
8264: GO 8252
8266: POP
8267: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
8268: LD_VAR 0 4
8272: PUSH
8273: LD_INT 0
8275: GREATER
8276: PUSH
8277: LD_VAR 0 7
8281: PUSH
8282: LD_INT 0
8284: GREATER
8285: AND
8286: IFFALSE 8340
// begin for i in engineerOkOutside do
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: LD_VAR 0 7
8297: PUSH
8298: FOR_IN
8299: IFFALSE 8338
// for j in buildings_list do
8301: LD_ADDR_VAR 0 8
8305: PUSH
8306: LD_VAR 0 4
8310: PUSH
8311: FOR_IN
8312: IFFALSE 8334
// ComRepairBuilding ( i , j [ 1 ] ) ;
8314: LD_VAR 0 5
8318: PPUSH
8319: LD_VAR 0 8
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: CALL_OW 130
8332: GO 8311
8334: POP
8335: POP
8336: GO 8298
8338: POP
8339: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
8340: LD_VAR 0 4
8344: PUSH
8345: LD_INT 0
8347: EQUAL
8348: PUSH
8349: LD_VAR 0 7
8353: PUSH
8354: LD_INT 0
8356: GREATER
8357: AND
8358: IFFALSE 8391
// for i in engineerOkOutside do
8360: LD_ADDR_VAR 0 5
8364: PUSH
8365: LD_VAR 0 7
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8389
// ComEnterUnit ( i , building ) ;
8373: LD_VAR 0 5
8377: PPUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 120
8387: GO 8370
8389: POP
8390: POP
// end ;
8391: LD_VAR 0 3
8395: RET
// export function IntBazooka ( list ) ; var ta , c , i , side , filter ; begin
8396: LD_INT 0
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
8402: PPUSH
8403: PPUSH
// if not list then
8404: LD_VAR 0 1
8408: NOT
8409: IFFALSE 8413
// exit ;
8411: GO 8736
// side := GetSide ( list [ 1 ] ) ;
8413: LD_ADDR_VAR 0 6
8417: PUSH
8418: LD_VAR 0 1
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: CALL_OW 255
8431: ST_TO_ADDR
// list := UnitFilter ( list , [ f_class , class_bazooker ] ) ;
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_INT 25
8444: PUSH
8445: LD_INT 9
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 72
8456: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8457: LD_ADDR_VAR 0 7
8461: PUSH
8462: LD_INT 81
8464: PUSH
8465: LD_VAR 0 6
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: LD_INT 21
8479: PUSH
8480: LD_INT 3
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
8500: LD_ADDR_VAR 0 4
8504: PUSH
8505: LD_INT 1
8507: PPUSH
8508: LD_INT 3
8510: PPUSH
8511: CALL_OW 12
8515: ST_TO_ADDR
// for i = 1 to list do
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: DOUBLE
8522: LD_INT 1
8524: DEC
8525: ST_TO_ADDR
8526: LD_VAR 0 1
8530: PUSH
8531: FOR_TO
8532: IFFALSE 8734
// for ta in filter do
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: LD_VAR 0 7
8543: PUSH
8544: FOR_IN
8545: IFFALSE 8730
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
8547: LD_VAR 0 1
8551: PUSH
8552: LD_VAR 0 5
8556: ARRAY
8557: PPUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: CALL_OW 296
8567: PUSH
8568: LD_INT 15
8570: LESSEQUAL
8571: IFFALSE 8728
// begin case c of 1 :
8573: LD_VAR 0 4
8577: PUSH
8578: LD_INT 1
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8624
8586: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
8587: LD_VAR 0 1
8591: PUSH
8592: LD_VAR 0 5
8596: ARRAY
8597: PPUSH
8598: LD_VAR 0 3
8602: PPUSH
8603: CALL_OW 250
8607: PPUSH
8608: LD_VAR 0 3
8612: PPUSH
8613: CALL_OW 251
8617: PPUSH
8618: CALL_OW 154
// end ; 2 :
8622: GO 8728
8624: LD_INT 2
8626: DOUBLE
8627: EQUAL
8628: IFTRUE 8632
8630: GO 8696
8632: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
8633: LD_VAR 0 1
8637: PUSH
8638: LD_VAR 0 5
8642: ARRAY
8643: PPUSH
8644: LD_VAR 0 3
8648: PPUSH
8649: CALL_OW 250
8653: PUSH
8654: LD_INT 1
8656: NEG
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: CALL_OW 12
8665: PLUS
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: CALL_OW 251
8676: PUSH
8677: LD_INT 1
8679: NEG
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 12
8688: PLUS
8689: PPUSH
8690: CALL_OW 153
// end ; 3 :
8694: GO 8728
8696: LD_INT 3
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8727
8704: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
8705: LD_VAR 0 1
8709: PUSH
8710: LD_VAR 0 5
8714: ARRAY
8715: PPUSH
8716: LD_VAR 0 3
8720: PPUSH
8721: CALL_OW 115
8725: GO 8728
8727: POP
// end ; end ;
8728: GO 8544
8730: POP
8731: POP
8732: GO 8531
8734: POP
8735: POP
// end ;
8736: LD_VAR 0 2
8740: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
8745: PPUSH
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
8750: PPUSH
8751: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8752: LD_INT 22
8754: PUSH
8755: LD_VAR 0 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 69
8782: PUSH
8783: LD_VAR 0 3
8787: LESSEQUAL
8788: IFFALSE 8932
// for i = 1 to vehCount do
8790: LD_ADDR_VAR 0 9
8794: PUSH
8795: DOUBLE
8796: LD_INT 1
8798: DEC
8799: ST_TO_ADDR
8800: LD_VAR 0 3
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8930
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
8808: LD_ADDR_VAR 0 11
8812: PUSH
8813: LD_VAR 0 4
8817: PUSH
8818: LD_INT 1
8820: PPUSH
8821: LD_VAR 0 4
8825: PPUSH
8826: CALL_OW 12
8830: ARRAY
8831: ST_TO_ADDR
// if randWeapon = 46 then
8832: LD_VAR 0 11
8836: PUSH
8837: LD_INT 46
8839: EQUAL
8840: IFFALSE 8885
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
8842: LD_VAR 0 2
8846: PPUSH
8847: LD_INT 24
8849: PPUSH
8850: LD_VAR 0 5
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_INT 1
8862: PPUSH
8863: LD_VAR 0 6
8867: PPUSH
8868: CALL_OW 12
8872: ARRAY
8873: PPUSH
8874: LD_VAR 0 11
8878: PPUSH
8879: CALL_OW 185
8883: GO 8928
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
8885: LD_VAR 0 2
8889: PPUSH
8890: LD_VAR 0 7
8894: PPUSH
8895: LD_VAR 0 5
8899: PPUSH
8900: LD_VAR 0 6
8904: PUSH
8905: LD_INT 1
8907: PPUSH
8908: LD_VAR 0 6
8912: PPUSH
8913: CALL_OW 12
8917: ARRAY
8918: PPUSH
8919: LD_VAR 0 11
8923: PPUSH
8924: CALL_OW 185
// end ;
8928: GO 8805
8930: POP
8931: POP
// repeat wait ( 0 0$1 ) ;
8932: LD_INT 35
8934: PPUSH
8935: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
8939: LD_INT 22
8941: PUSH
8942: LD_VAR 0 1
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 21
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 24
8963: PUSH
8964: LD_INT 250
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 69
8980: PUSH
8981: LD_VAR 0 3
8985: GREATEREQUAL
8986: IFFALSE 8932
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
8988: LD_INT 22
8990: PUSH
8991: LD_VAR 0 1
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 21
9002: PUSH
9003: LD_INT 2
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 250
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: PUSH
9030: LD_VAR 0 3
9034: GREATEREQUAL
9035: IFFALSE 9045
// begin readyForAttack = true ;
9037: LD_ADDR_EXP 3
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
// end ; end ; end_of_file
9045: LD_VAR 0 8
9049: RET
// on UnitDestroyed ( un ) do begin if un = Simone then
9050: LD_VAR 0 1
9054: PUSH
9055: LD_EXP 7
9059: EQUAL
9060: IFFALSE 9088
// begin ExclusiveOn ;
9062: CALL_OW 4
// Wait ( 0 0$2 ) ;
9066: LD_INT 70
9068: PPUSH
9069: CALL_OW 67
// YouLost ( Simone ) ;
9073: LD_STRING Simone
9075: PPUSH
9076: CALL_OW 104
// ExclusiveOff ;
9080: CALL_OW 5
// exit ;
9084: GO 9124
// end else
9086: GO 9124
// if un = Kathryn then
9088: LD_VAR 0 1
9092: PUSH
9093: LD_EXP 8
9097: EQUAL
9098: IFFALSE 9124
// begin ExclusiveOn ;
9100: CALL_OW 4
// Wait ( 0 0$2 ) ;
9104: LD_INT 70
9106: PPUSH
9107: CALL_OW 67
// YouLost ( Kathryn ) ;
9111: LD_STRING Kathryn
9113: PPUSH
9114: CALL_OW 104
// ExclusiveOff ;
9118: CALL_OW 5
// exit ;
9122: GO 9124
// end end ;
9124: PPOPN 1
9126: END
// every 0 0$1 trigger LaserTanks < 1 do
9127: LD_EXP 5
9131: PUSH
9132: LD_INT 1
9134: LESS
9135: IFFALSE 9162
9137: GO 9139
9139: DISABLE
// begin ExclusiveOn ;
9140: CALL_OW 4
// Wait ( 0 0$2 ) ;
9144: LD_INT 70
9146: PPUSH
9147: CALL_OW 67
// YouLost ( Vehicles ) ;
9151: LD_STRING Vehicles
9153: PPUSH
9154: CALL_OW 104
// ExclusiveOff ;
9158: CALL_OW 5
// end ;
9162: END
