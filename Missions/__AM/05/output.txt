// export MissionStart , BradfordAssault , AfterBradfordAssault ; export Squad_Assembly_Start ; export PlansCourierEscape , KolvichEnRoute ; starting begin RandomizeAll ;
   0: CALL_OW 11
// PrepareDifficulty ;
   4: CALL 15854 0 0
// Garrison_Buildings ( 3 , 3 , 2 , 4 , 2 , 3 , 2 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
   8: LD_INT 3
  10: PPUSH
  11: LD_INT 3
  13: PPUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 2
  22: PPUSH
  23: LD_INT 3
  25: PPUSH
  26: LD_INT 2
  28: PPUSH
  29: LD_EXP 58
  33: PPUSH
  34: LD_EXP 59
  38: PPUSH
  39: CALL_OW 12
  43: PPUSH
  44: CALL 7081 0 8
// Fill_Turrets ( 3 ) ;
  48: LD_INT 3
  50: PPUSH
  51: CALL 8088 0 1
// SetBName ( ustinov1 , ustinova ) ;
  55: LD_INT 2
  57: PPUSH
  58: LD_STRING ustinova
  60: PPUSH
  61: CALL_OW 500
// SetBName ( ustinov2 , ustinovb ) ;
  65: LD_INT 3
  67: PPUSH
  68: LD_STRING ustinovb
  70: PPUSH
  71: CALL_OW 500
// Prepare_AMBase ;
  75: CALL 5844 0 0
// CreatePersonas ;
  79: CALL 11600 0 0
// PlaceUnitXY ( Bradford , 90 , 80 , false ) ;
  83: LD_EXP 42
  87: PPUSH
  88: LD_INT 90
  90: PPUSH
  91: LD_INT 80
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 48
// PlaceUnitXY ( Richford , 91 , 81 , false ) ;
 101: LD_EXP 49
 105: PPUSH
 106: LD_INT 91
 108: PPUSH
 109: LD_INT 81
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: CALL_OW 48
// PlaceUnitXY ( Esther , 82 , 84 , false ) ;
 119: LD_EXP 38
 123: PPUSH
 124: LD_INT 82
 126: PPUSH
 127: LD_INT 84
 129: PPUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 48
// PlaceUnitXY ( Edmonds , 84 , 91 , false ) ;
 137: LD_EXP 39
 141: PPUSH
 142: LD_INT 84
 144: PPUSH
 145: LD_INT 91
 147: PPUSH
 148: LD_INT 0
 150: PPUSH
 151: CALL_OW 48
// PlaceUnitXY ( Barnes , 88 , 83 , false ) ;
 155: LD_EXP 43
 159: PPUSH
 160: LD_INT 88
 162: PPUSH
 163: LD_INT 83
 165: PPUSH
 166: LD_INT 0
 168: PPUSH
 169: CALL_OW 48
// PlaceUnitXY ( Mortimer , 97 , 81 , false ) ;
 173: LD_EXP 48
 177: PPUSH
 178: LD_INT 97
 180: PPUSH
 181: LD_INT 81
 183: PPUSH
 184: LD_INT 0
 186: PPUSH
 187: CALL_OW 48
// ComTurnUnit ( Bradford , Richford ) ;
 191: LD_EXP 42
 195: PPUSH
 196: LD_EXP 49
 200: PPUSH
 201: CALL_OW 119
// ComTurnUnit ( Richford , Bradford ) ;
 205: LD_EXP 49
 209: PPUSH
 210: LD_EXP 42
 214: PPUSH
 215: CALL_OW 119
// PlaceHumanInUnit ( Sidorovich , ustinov2 ) ;
 219: LD_EXP 44
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: CALL_OW 52
// ingame_video = true ;
 231: LD_ADDR_OWVAR 52
 235: PUSH
 236: LD_INT 1
 238: ST_TO_ADDR
// interface_hidden = true ;
 239: LD_ADDR_OWVAR 54
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// CenterNowOnUnits ( Bradford ) ;
 247: LD_EXP 42
 251: PPUSH
 252: CALL_OW 87
// Squad_Assembly_Start := true ;
 256: LD_ADDR_EXP 4
 260: PUSH
 261: LD_INT 1
 263: ST_TO_ADDR
// wait ( 0 0$2 ) ;
 264: LD_INT 70
 266: PPUSH
 267: CALL_OW 67
// Say ( Bradford , D1-Bradford-1 ) ;
 271: LD_EXP 42
 275: PPUSH
 276: LD_STRING D1-Bradford-1
 278: PPUSH
 279: CALL_OW 88
// Say ( Richford , D1-Sol-1 ) ;
 283: LD_EXP 49
 287: PPUSH
 288: LD_STRING D1-Sol-1
 290: PPUSH
 291: CALL_OW 88
// ComMoveXY ( Richford , 102 , 88 ) ;
 295: LD_EXP 49
 299: PPUSH
 300: LD_INT 102
 302: PPUSH
 303: LD_INT 88
 305: PPUSH
 306: CALL_OW 111
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 310: LD_EXP 36
 314: PPUSH
 315: CALL_OW 310
 319: PPUSH
 320: CALL_OW 85
// ComMoveXY ( IsInUnit ( Simone ) , 88 , 94 ) ;
 324: LD_EXP 36
 328: PPUSH
 329: CALL_OW 310
 333: PPUSH
 334: LD_INT 88
 336: PPUSH
 337: LD_INT 94
 339: PPUSH
 340: CALL_OW 111
// wait ( 0 0$5 ) ;
 344: LD_INT 175
 346: PPUSH
 347: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 351: LD_EXP 36
 355: PPUSH
 356: CALL_OW 310
 360: PPUSH
 361: CALL_OW 85
// wait ( 0 0$5 ) ;
 365: LD_INT 175
 367: PPUSH
 368: CALL_OW 67
// ComExitVehicle ( IsInUnit ( Simone ) ) ;
 372: LD_EXP 36
 376: PPUSH
 377: CALL_OW 310
 381: PPUSH
 382: CALL_OW 121
// CenterOnUnits ( Simone ) ;
 386: LD_EXP 36
 390: PPUSH
 391: CALL_OW 85
// wait ( 0 0$0.5 ) ;
 395: LD_INT 18
 397: PPUSH
 398: CALL_OW 67
// AddComMoveXY ( Simone , 90 , 81 ) ;
 402: LD_EXP 36
 406: PPUSH
 407: LD_INT 90
 409: PPUSH
 410: LD_INT 81
 412: PPUSH
 413: CALL_OW 171
// wait ( 0 0$5 ) ;
 417: LD_INT 175
 419: PPUSH
 420: CALL_OW 67
// CenterOnUnits ( Simone ) ;
 424: LD_EXP 36
 428: PPUSH
 429: CALL_OW 85
// Say ( Simone , D1-Simone-1 ) ;
 433: LD_EXP 36
 437: PPUSH
 438: LD_STRING D1-Simone-1
 440: PPUSH
 441: CALL_OW 88
// Say ( Bradford , D1-Bradford-2 ) ;
 445: LD_EXP 42
 449: PPUSH
 450: LD_STRING D1-Bradford-2
 452: PPUSH
 453: CALL_OW 88
// Say ( Bradford , D1-Bradford-2a ) ;
 457: LD_EXP 42
 461: PPUSH
 462: LD_STRING D1-Bradford-2a
 464: PPUSH
 465: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 469: LD_EXP 36
 473: PPUSH
 474: LD_STRING D1-Simone-2
 476: PPUSH
 477: CALL_OW 88
// Say ( Bradford , D1-Bradford-3 ) ;
 481: LD_EXP 42
 485: PPUSH
 486: LD_STRING D1-Bradford-3
 488: PPUSH
 489: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 493: LD_EXP 36
 497: PPUSH
 498: LD_STRING D1-Simone-4
 500: PPUSH
 501: CALL_OW 88
// Say ( Bradford , D1-Bradford-4 ) ;
 505: LD_EXP 42
 509: PPUSH
 510: LD_STRING D1-Bradford-4
 512: PPUSH
 513: CALL_OW 88
// Say ( Bradford , D1-Bradford-5 ) ;
 517: LD_EXP 42
 521: PPUSH
 522: LD_STRING D1-Bradford-5
 524: PPUSH
 525: CALL_OW 88
// ingame_video = false ;
 529: LD_ADDR_OWVAR 52
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// interface_hidden = false ;
 537: LD_ADDR_OWVAR 54
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// SetSide ( Esther , 7 ) ;
 545: LD_EXP 38
 549: PPUSH
 550: LD_INT 7
 552: PPUSH
 553: CALL_OW 235
// SetSide ( Edmonds , 7 ) ;
 557: LD_EXP 39
 561: PPUSH
 562: LD_INT 7
 564: PPUSH
 565: CALL_OW 235
// MissionStart := true ;
 569: LD_ADDR_EXP 1
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// AlliedReinforcement ;
 577: CALL 6772 0 0
// ChangeMissionObjectives ( M1 ) ;
 581: LD_STRING M1
 583: PPUSH
 584: CALL_OW 337
// SaveForQuickRestart ;
 588: CALL_OW 22
// Wait ( 0 0$5 ) ;
 592: LD_INT 175
 594: PPUSH
 595: CALL_OW 67
// Say ( Barnes , D1a-Barnes-1 ) ;
 599: LD_EXP 43
 603: PPUSH
 604: LD_STRING D1a-Barnes-1
 606: PPUSH
 607: CALL_OW 88
// Say ( Simone , D1a-Simone-1 ) ;
 611: LD_EXP 36
 615: PPUSH
 616: LD_STRING D1a-Simone-1
 618: PPUSH
 619: CALL_OW 88
// Say ( Barnes , D1a-Barnes-2 ) ;
 623: LD_EXP 43
 627: PPUSH
 628: LD_STRING D1a-Barnes-2
 630: PPUSH
 631: CALL_OW 88
// Say ( Simone , D1a-Simone-2 ) ;
 635: LD_EXP 36
 639: PPUSH
 640: LD_STRING D1a-Simone-2
 642: PPUSH
 643: CALL_OW 88
// Say ( Barnes , D1a-Barnes-3 ) ;
 647: LD_EXP 43
 651: PPUSH
 652: LD_STRING D1a-Barnes-3
 654: PPUSH
 655: CALL_OW 88
// Wait ( 1 1$0 ) ;
 659: LD_INT 2100
 661: PPUSH
 662: CALL_OW 67
// Say ( Esther , D1b-Esther-1 ) ;
 666: LD_EXP 38
 670: PPUSH
 671: LD_STRING D1b-Esther-1
 673: PPUSH
 674: CALL_OW 88
// Say ( Simone , D1b-Simone-1 ) ;
 678: LD_EXP 36
 682: PPUSH
 683: LD_STRING D1b-Simone-1
 685: PPUSH
 686: CALL_OW 88
// Say ( Esther , D1b-Esther-2 ) ;
 690: LD_EXP 38
 694: PPUSH
 695: LD_STRING D1b-Esther-2
 697: PPUSH
 698: CALL_OW 88
// Say ( Simone , D1b-Simone-2 ) ;
 702: LD_EXP 36
 706: PPUSH
 707: LD_STRING D1b-Simone-2
 709: PPUSH
 710: CALL_OW 88
// Say ( Esther , D1b-Esther-3 ) ;
 714: LD_EXP 38
 718: PPUSH
 719: LD_STRING D1b-Esther-3
 721: PPUSH
 722: CALL_OW 88
// end ;
 726: END
// every 0 0$1 trigger Squad_Assembly_Start do
 727: LD_EXP 4
 731: IFFALSE 740
 733: GO 735
 735: DISABLE
// begin Squad_Assembly ;
 736: CALL 12911 0 0
// end ;
 740: END
// export Base_DepotBuilt , Base_WorkshopBuilt , Base_LabBuilt ; export Base_WholeBuilt , Base_TooLate ; every 0 0$1 trigger Base_DepotBuilt and Base_WorkshopBuilt and Base_LabBuilt and not Base_TooLate do
 741: LD_EXP 7
 745: PUSH
 746: LD_EXP 8
 750: AND
 751: PUSH
 752: LD_EXP 9
 756: AND
 757: PUSH
 758: LD_EXP 11
 762: NOT
 763: AND
 764: IFFALSE 813
 766: GO 768
 768: DISABLE
// begin Say ( Simone , D2-Simone-1 ) ;
 769: LD_EXP 36
 773: PPUSH
 774: LD_STRING D2-Simone-1
 776: PPUSH
 777: CALL_OW 88
// SayRadio ( Bradford , D2-Bradford-1 ) ;
 781: LD_EXP 42
 785: PPUSH
 786: LD_STRING D2-Bradford-1
 788: PPUSH
 789: CALL_OW 94
// Say ( Simone , D2-Simone-2 ) ;
 793: LD_EXP 36
 797: PPUSH
 798: LD_STRING D2-Simone-2
 800: PPUSH
 801: CALL_OW 88
// Base_WholeBuilt := true ;
 805: LD_ADDR_EXP 10
 809: PUSH
 810: LD_INT 1
 812: ST_TO_ADDR
// end ;
 813: END
// every 0 0$1 trigger MissionStart do
 814: LD_EXP 1
 818: IFFALSE 913
 820: GO 822
 822: DISABLE
// begin wait ( 5 5$0 ) ;
 823: LD_INT 10500
 825: PPUSH
 826: CALL_OW 67
// if not Base_WholeBuilt then
 830: LD_EXP 10
 834: NOT
 835: IFFALSE 913
// begin Base_TooLate := true ;
 837: LD_ADDR_EXP 11
 841: PUSH
 842: LD_INT 1
 844: ST_TO_ADDR
// SayRadio ( Bradford , D2a-Bradford-1 ) ;
 845: LD_EXP 42
 849: PPUSH
 850: LD_STRING D2a-Bradford-1
 852: PPUSH
 853: CALL_OW 94
// Say ( Simone , D2a-Simone-1 ) ;
 857: LD_EXP 36
 861: PPUSH
 862: LD_STRING D2a-Simone-1
 864: PPUSH
 865: CALL_OW 88
// SayRadio ( Bradford , D2a-Bradford-2 ) ;
 869: LD_EXP 42
 873: PPUSH
 874: LD_STRING D2a-Bradford-2
 876: PPUSH
 877: CALL_OW 94
// Say ( Simone , D2a-Simone-2 ) ;
 881: LD_EXP 36
 885: PPUSH
 886: LD_STRING D2a-Simone-2
 888: PPUSH
 889: CALL_OW 88
// SayRadio ( Bradford , D2a-Bradford-3 ) ;
 893: LD_EXP 42
 897: PPUSH
 898: LD_STRING D2a-Bradford-3
 900: PPUSH
 901: CALL_OW 94
// Base_WholeBuilt := true ;
 905: LD_ADDR_EXP 10
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
// end ; end ;
 913: END
// every 0 0$1 trigger Base_WholeBuilt do var WholeSquad , LabSpeaker ;
 914: LD_EXP 10
 918: IFFALSE 1201
 920: GO 922
 922: DISABLE
 923: LD_INT 0
 925: PPUSH
 926: PPUSH
// begin wait ( Rand ( 3 3$0 , 5 5$0 ) ) ;
 927: LD_INT 6300
 929: PPUSH
 930: LD_INT 10500
 932: PPUSH
 933: CALL_OW 12
 937: PPUSH
 938: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds , Pravar ] ;
 942: LD_ADDR_VAR 0 1
 946: PUSH
 947: LD_INT 22
 949: PUSH
 950: LD_INT 7
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 21
 959: PUSH
 960: LD_INT 1
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PPUSH
 971: CALL_OW 69
 975: PUSH
 976: LD_EXP 36
 980: PUSH
 981: LD_EXP 37
 985: PUSH
 986: LD_EXP 38
 990: PUSH
 991: LD_EXP 39
 995: PUSH
 996: LD_EXP 40
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: DIFF
1008: ST_TO_ADDR
// LabSpeaker := SortBySkill ( WholeSquad , 4 ) ;
1009: LD_ADDR_VAR 0 2
1013: PUSH
1014: LD_VAR 0 1
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL 60376 0 2
1026: ST_TO_ADDR
// if not IsDead ( Edmonds ) then
1027: LD_EXP 39
1031: PPUSH
1032: CALL_OW 301
1036: NOT
1037: IFFALSE 1125
// begin Say ( Simone , D3-Simone-1 ) ;
1039: LD_EXP 36
1043: PPUSH
1044: LD_STRING D3-Simone-1
1046: PPUSH
1047: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
1051: LD_EXP 39
1055: PPUSH
1056: LD_STRING D3-Edmonds-1
1058: PPUSH
1059: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
1063: LD_EXP 39
1067: PPUSH
1068: LD_STRING D3-Edmonds-2
1070: PPUSH
1071: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
1075: LD_EXP 36
1079: PPUSH
1080: LD_STRING D3-Simone-2
1082: PPUSH
1083: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-3 ) ;
1087: LD_EXP 39
1091: PPUSH
1092: LD_STRING D3-Edmonds-3
1094: PPUSH
1095: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-4 ) ;
1099: LD_EXP 39
1103: PPUSH
1104: LD_STRING D3-Edmonds-4
1106: PPUSH
1107: CALL_OW 88
// Say ( Simone , D3-Simone-3 ) ;
1111: LD_EXP 36
1115: PPUSH
1116: LD_STRING D3-Simone-3
1118: PPUSH
1119: CALL_OW 88
// end else
1123: GO 1194
// begin SaySex ( LabSpeaker [ 1 ] , D4-Sci-1 , D4-FemSci-1 ) ;
1125: LD_VAR 0 2
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PPUSH
1134: LD_STRING D4-Sci-1
1136: PPUSH
1137: LD_STRING D4-FemSci-1
1139: PPUSH
1140: CALL 9041 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-2 , D4-FemSci-2 ) ;
1144: LD_VAR 0 2
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING D4-Sci-2
1155: PPUSH
1156: LD_STRING D4-FemSci-2
1158: PPUSH
1159: CALL 9041 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-3 , D4-FemSci-3 ) ;
1163: LD_VAR 0 2
1167: PUSH
1168: LD_INT 1
1170: ARRAY
1171: PPUSH
1172: LD_STRING D4-Sci-3
1174: PPUSH
1175: LD_STRING D4-FemSci-3
1177: PPUSH
1178: CALL 9041 0 3
// Say ( Simone , D3-Simone-3 ) ;
1182: LD_EXP 36
1186: PPUSH
1187: LD_STRING D3-Simone-3
1189: PPUSH
1190: CALL_OW 88
// end ; ChangeMissionObjectives ( M1a ) ;
1194: LD_STRING M1a
1196: PPUSH
1197: CALL_OW 337
// end ;
1201: PPOPN 2
1203: END
// every 0 0$1 trigger Base_WholeBuilt do
1204: LD_EXP 10
1208: IFFALSE 1288
1210: GO 1212
1212: DISABLE
// begin wait ( Rand ( 11 11$0 , 14 14$0 ) ) ;
1213: LD_INT 23100
1215: PPUSH
1216: LD_INT 29400
1218: PPUSH
1219: CALL_OW 12
1223: PPUSH
1224: CALL_OW 67
// Say ( Barnes , D4a-Barnes-1 ) ;
1228: LD_EXP 43
1232: PPUSH
1233: LD_STRING D4a-Barnes-1
1235: PPUSH
1236: CALL_OW 88
// Say ( Bradford , D4a-Bradford-1 ) ;
1240: LD_EXP 42
1244: PPUSH
1245: LD_STRING D4a-Bradford-1
1247: PPUSH
1248: CALL_OW 88
// Say ( Barnes , D4a-Barnes-2 ) ;
1252: LD_EXP 43
1256: PPUSH
1257: LD_STRING D4a-Barnes-2
1259: PPUSH
1260: CALL_OW 88
// Say ( Bradford , D4a-Bradford-2 ) ;
1264: LD_EXP 42
1268: PPUSH
1269: LD_STRING D4a-Bradford-2
1271: PPUSH
1272: CALL_OW 88
// Say ( Bradford , D4a-Bradford-3 ) ;
1276: LD_EXP 42
1280: PPUSH
1281: LD_STRING D4a-Bradford-3
1283: PPUSH
1284: CALL_OW 88
// end ;
1288: END
// every 0 0$1 trigger Base_WholeBuilt do
1289: LD_EXP 10
1293: IFFALSE 1626
1295: GO 1297
1297: DISABLE
// begin wait ( 30 30$00 ) ;
1298: LD_INT 63000
1300: PPUSH
1301: CALL_OW 67
// InGameOn ;
1305: CALL_OW 8
// CenterOnUnits ( Bradford ) ;
1309: LD_EXP 42
1313: PPUSH
1314: CALL_OW 85
// AM_SquadOne := AM_SquadOne ^ [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] ] ;
1318: LD_ADDR_EXP 64
1322: PUSH
1323: LD_EXP 64
1327: PUSH
1328: LD_EXP 26
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: PUSH
1337: LD_EXP 26
1341: PUSH
1342: LD_INT 2
1344: ARRAY
1345: PUSH
1346: LD_EXP 26
1350: PUSH
1351: LD_INT 3
1353: ARRAY
1354: PUSH
1355: LD_EXP 26
1359: PUSH
1360: LD_INT 4
1362: ARRAY
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: ADD
1370: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ [ AM_Sols [ 5 ] , AM_Sols [ 6 ] , AM_Sols [ 7 ] ] ;
1371: LD_ADDR_EXP 65
1375: PUSH
1376: LD_EXP 65
1380: PUSH
1381: LD_EXP 26
1385: PUSH
1386: LD_INT 5
1388: ARRAY
1389: PUSH
1390: LD_EXP 26
1394: PUSH
1395: LD_INT 6
1397: ARRAY
1398: PUSH
1399: LD_EXP 26
1403: PUSH
1404: LD_INT 7
1406: ARRAY
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: ADD
1413: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ [ AM_Sols [ 8 ] , AM_Sols [ 9 ] , AM_Sols [ 10 ] ] ;
1414: LD_ADDR_EXP 66
1418: PUSH
1419: LD_EXP 66
1423: PUSH
1424: LD_EXP 26
1428: PUSH
1429: LD_INT 8
1431: ARRAY
1432: PUSH
1433: LD_EXP 26
1437: PUSH
1438: LD_INT 9
1440: ARRAY
1441: PUSH
1442: LD_EXP 26
1446: PUSH
1447: LD_INT 10
1449: ARRAY
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: ADD
1456: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ Bradford ;
1457: LD_ADDR_EXP 65
1461: PUSH
1462: LD_EXP 65
1466: PUSH
1467: LD_EXP 42
1471: ADD
1472: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ Richford ;
1473: LD_ADDR_EXP 66
1477: PUSH
1478: LD_EXP 66
1482: PUSH
1483: LD_EXP 49
1487: ADD
1488: ST_TO_ADDR
// ComMoveXY ( AM_Sols , 93 , 84 ) ;
1489: LD_EXP 26
1493: PPUSH
1494: LD_INT 93
1496: PPUSH
1497: LD_INT 84
1499: PPUSH
1500: CALL_OW 111
// Say ( Bradford , D5-Bradford-1 ) ;
1504: LD_EXP 42
1508: PPUSH
1509: LD_STRING D5-Bradford-1
1511: PPUSH
1512: CALL_OW 88
// Say ( Bradford , D5-Bradford-2 ) ;
1516: LD_EXP 42
1520: PPUSH
1521: LD_STRING D5-Bradford-2
1523: PPUSH
1524: CALL_OW 88
// Say ( Bradford , D5-Bradford-3 ) ;
1528: LD_EXP 42
1532: PPUSH
1533: LD_STRING D5-Bradford-3
1535: PPUSH
1536: CALL_OW 88
// ComMoveXY ( AM_SquadOne , 130 , 56 ) ;
1540: LD_EXP 64
1544: PPUSH
1545: LD_INT 130
1547: PPUSH
1548: LD_INT 56
1550: PPUSH
1551: CALL_OW 111
// ComMoveXY ( AM_SquadTwo , 143 , 95 ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 143
1562: PPUSH
1563: LD_INT 95
1565: PPUSH
1566: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 169 , 147 ) ;
1570: LD_EXP 66
1574: PPUSH
1575: LD_INT 169
1577: PPUSH
1578: LD_INT 147
1580: PPUSH
1581: CALL_OW 111
// ComMoveXY ( Mortimer , 130 , 56 ) ;
1585: LD_EXP 48
1589: PPUSH
1590: LD_INT 130
1592: PPUSH
1593: LD_INT 56
1595: PPUSH
1596: CALL_OW 111
// Wait ( 0 0$5 ) ;
1600: LD_INT 175
1602: PPUSH
1603: CALL_OW 67
// InGameOff ;
1607: CALL_OW 9
// BradfordAssault := true ;
1611: LD_ADDR_EXP 2
1615: PUSH
1616: LD_INT 1
1618: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
1619: LD_STRING M2
1621: PPUSH
1622: CALL_OW 337
// end ;
1626: END
// every 0 0$1 trigger BradfordAssault do
1627: LD_EXP 2
1631: IFFALSE 1970
1633: GO 1635
1635: DISABLE
// begin Wait ( 0 0$35 ) ;
1636: LD_INT 1225
1638: PPUSH
1639: CALL_OW 67
// ComAgressiveMove ( AM_SquadOne , 176 , 58 ) ;
1643: LD_EXP 64
1647: PPUSH
1648: LD_INT 176
1650: PPUSH
1651: LD_INT 58
1653: PPUSH
1654: CALL_OW 114
// ComAgressiveMove ( AM_SquadTwo , 206 , 94 ) ;
1658: LD_EXP 65
1662: PPUSH
1663: LD_INT 206
1665: PPUSH
1666: LD_INT 94
1668: PPUSH
1669: CALL_OW 114
// ComAgressiveMove ( AM_SquadThree , 220 , 142 ) ;
1673: LD_EXP 66
1677: PPUSH
1678: LD_INT 220
1680: PPUSH
1681: LD_INT 142
1683: PPUSH
1684: CALL_OW 114
// Say ( Bradford , D5a-Bradford-1 ) ;
1688: LD_EXP 42
1692: PPUSH
1693: LD_STRING D5a-Bradford-1
1695: PPUSH
1696: CALL_OW 88
// Wait ( 0 0$15 ) ;
1700: LD_INT 525
1702: PPUSH
1703: CALL_OW 67
// Say ( Mortimer , D5a-Doherty-1 ) ;
1707: LD_EXP 48
1711: PPUSH
1712: LD_STRING D5a-Doherty-1
1714: PPUSH
1715: CALL_OW 88
// Say ( Richford , D5a-Richford-1 ) ;
1719: LD_EXP 49
1723: PPUSH
1724: LD_STRING D5a-Richford-1
1726: PPUSH
1727: CALL_OW 88
// PriorityAttack ( 3 , Bradford ) ;
1731: LD_INT 3
1733: PPUSH
1734: LD_EXP 42
1738: PPUSH
1739: CALL_OW 470
// PriorityAttack ( 3 , Richford ) ;
1743: LD_INT 3
1745: PPUSH
1746: LD_EXP 49
1750: PPUSH
1751: CALL_OW 470
// Wait ( 0 0$45 ) ;
1755: LD_INT 1575
1757: PPUSH
1758: CALL_OW 67
// SayRadio ( Barnes , D5a-Barnes-1 ) ;
1762: LD_EXP 43
1766: PPUSH
1767: LD_STRING D5a-Barnes-1
1769: PPUSH
1770: CALL_OW 94
// ComMoveXY ( AM_SquadOne , 95 , 83 ) ;
1774: LD_EXP 64
1778: PPUSH
1779: LD_INT 95
1781: PPUSH
1782: LD_INT 83
1784: PPUSH
1785: CALL_OW 111
// ComMoveXY ( AM_SquadTwo , 95 , 83 ) ;
1789: LD_EXP 65
1793: PPUSH
1794: LD_INT 95
1796: PPUSH
1797: LD_INT 83
1799: PPUSH
1800: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 95 , 83 ) ;
1804: LD_EXP 66
1808: PPUSH
1809: LD_INT 95
1811: PPUSH
1812: LD_INT 83
1814: PPUSH
1815: CALL_OW 111
// ComMoveXY ( Mortimer , 95 , 83 ) ;
1819: LD_EXP 48
1823: PPUSH
1824: LD_INT 95
1826: PPUSH
1827: LD_INT 83
1829: PPUSH
1830: CALL_OW 111
// SayRadio ( Barnes , D5a-Barnes-2 ) ;
1834: LD_EXP 43
1838: PPUSH
1839: LD_STRING D5a-Barnes-2
1841: PPUSH
1842: CALL_OW 94
// Wait ( 0 0$40 ) ;
1846: LD_INT 1400
1848: PPUSH
1849: CALL_OW 67
// InGameOn ;
1853: CALL_OW 8
// DialogueOn ;
1857: CALL_OW 6
// CenterOnUnits ( Barnes ) ;
1861: LD_EXP 43
1865: PPUSH
1866: CALL_OW 85
// Say ( Barnes , D5b-Barnes-1 ) ;
1870: LD_EXP 43
1874: PPUSH
1875: LD_STRING D5b-Barnes-1
1877: PPUSH
1878: CALL_OW 88
// Say ( Simone , D5b-Simone-1 ) ;
1882: LD_EXP 36
1886: PPUSH
1887: LD_STRING D5b-Simone-1
1889: PPUSH
1890: CALL_OW 88
// Say ( Barnes , D5b-Barnes-2 ) ;
1894: LD_EXP 43
1898: PPUSH
1899: LD_STRING D5b-Barnes-2
1901: PPUSH
1902: CALL_OW 88
// SetSide ( AM_SquadOne , 7 ) ;
1906: LD_EXP 64
1910: PPUSH
1911: LD_INT 7
1913: PPUSH
1914: CALL_OW 235
// SetSide ( AM_SquadTwo , 7 ) ;
1918: LD_EXP 65
1922: PPUSH
1923: LD_INT 7
1925: PPUSH
1926: CALL_OW 235
// SetSide ( AM_SquadThree , 7 ) ;
1930: LD_EXP 66
1934: PPUSH
1935: LD_INT 7
1937: PPUSH
1938: CALL_OW 235
// SetSide ( Mortimer , 7 ) ;
1942: LD_EXP 48
1946: PPUSH
1947: LD_INT 7
1949: PPUSH
1950: CALL_OW 235
// DialogueOff ;
1954: CALL_OW 7
// InGameOff ;
1958: CALL_OW 9
// AfterBradfordAssault := true ;
1962: LD_ADDR_EXP 3
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// end ;
1970: END
// every 0 0$1 trigger AfterBradfordAssault do
1971: LD_EXP 3
1975: IFFALSE 2035
1977: GO 1979
1979: DISABLE
// begin Wait ( 3 3$40 ) ;
1980: LD_INT 7700
1982: PPUSH
1983: CALL_OW 67
// SayRadio ( Sidorovich , D6-Sidor-1 ) ;
1987: LD_EXP 44
1991: PPUSH
1992: LD_STRING D6-Sidor-1
1994: PPUSH
1995: CALL_OW 94
// Say ( Simone , D6-Simone-1 ) ;
1999: LD_EXP 36
2003: PPUSH
2004: LD_STRING D6-Simone-1
2006: PPUSH
2007: CALL_OW 88
// SayRadio ( Sidorovich , D6-Sidor-2 ) ;
2011: LD_EXP 44
2015: PPUSH
2016: LD_STRING D6-Sidor-2
2018: PPUSH
2019: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
2023: LD_EXP 36
2027: PPUSH
2028: LD_STRING D6-Simone-2
2030: PPUSH
2031: CALL_OW 88
// end ;
2035: END
// every 0 0$1 trigger AfterBradfordAssault do
2036: LD_EXP 3
2040: IFFALSE 2264
2042: GO 2044
2044: DISABLE
// begin Wait ( 7 7$20 ) ;
2045: LD_INT 15400
2047: PPUSH
2048: CALL_OW 67
// SayRadio ( Botnicov , D6a-Botnicov-1 ) ;
2052: LD_EXP 47
2056: PPUSH
2057: LD_STRING D6a-Botnicov-1
2059: PPUSH
2060: CALL_OW 94
// Say ( Simone , D6a-Simone-1 ) ;
2064: LD_EXP 36
2068: PPUSH
2069: LD_STRING D6a-Simone-1
2071: PPUSH
2072: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-2 ) ;
2076: LD_EXP 47
2080: PPUSH
2081: LD_STRING D6a-Botnicov-2
2083: PPUSH
2084: CALL_OW 94
// Say ( Simone , D6a-Simone-2 ) ;
2088: LD_EXP 36
2092: PPUSH
2093: LD_STRING D6a-Simone-2
2095: PPUSH
2096: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-3 ) ;
2100: LD_EXP 47
2104: PPUSH
2105: LD_STRING D6a-Botnicov-3
2107: PPUSH
2108: CALL_OW 94
// Say ( Simone , D6a-Simone-3 ) ;
2112: LD_EXP 36
2116: PPUSH
2117: LD_STRING D6a-Simone-3
2119: PPUSH
2120: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-4 ) ;
2124: LD_EXP 47
2128: PPUSH
2129: LD_STRING D6a-Botnicov-4
2131: PPUSH
2132: CALL_OW 94
// Say ( Simone , D6a-Simone-4 ) ;
2136: LD_EXP 36
2140: PPUSH
2141: LD_STRING D6a-Simone-4
2143: PPUSH
2144: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-5 ) ;
2148: LD_EXP 47
2152: PPUSH
2153: LD_STRING D6a-Botnicov-5
2155: PPUSH
2156: CALL_OW 94
// Say ( Simone , D6a-Simone-5 ) ;
2160: LD_EXP 36
2164: PPUSH
2165: LD_STRING D6a-Simone-5
2167: PPUSH
2168: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-6 ) ;
2172: LD_EXP 47
2176: PPUSH
2177: LD_STRING D6a-Botnicov-6
2179: PPUSH
2180: CALL_OW 94
// KolvichEnRoute := true ;
2184: LD_ADDR_EXP 6
2188: PUSH
2189: LD_INT 1
2191: ST_TO_ADDR
// SayRadio ( Botnicov , D6a-Botnicov-7 ) ;
2192: LD_EXP 47
2196: PPUSH
2197: LD_STRING D6a-Botnicov-7
2199: PPUSH
2200: CALL_OW 94
// Say ( Esther , D6a-Esther-1 ) ;
2204: LD_EXP 38
2208: PPUSH
2209: LD_STRING D6a-Esther-1
2211: PPUSH
2212: CALL_OW 88
// Say ( Simone , D6a-Simone-6 ) ;
2216: LD_EXP 36
2220: PPUSH
2221: LD_STRING D6a-Simone-6
2223: PPUSH
2224: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-8 ) ;
2228: LD_EXP 47
2232: PPUSH
2233: LD_STRING D6a-Botnicov-8
2235: PPUSH
2236: CALL_OW 94
// SayRadio ( Botnicov , D6a-Botnicov-9 ) ;
2240: LD_EXP 47
2244: PPUSH
2245: LD_STRING D6a-Botnicov-9
2247: PPUSH
2248: CALL_OW 94
// Say ( Simone , D6a-Simone-7 ) ;
2252: LD_EXP 36
2256: PPUSH
2257: LD_STRING D6a-Simone-7
2259: PPUSH
2260: CALL_OW 88
// end ;
2264: END
// every 0 0$1 trigger AfterBradfordAssault do
2265: LD_EXP 3
2269: IFFALSE 2329
2271: GO 2273
2273: DISABLE
// begin Wait ( 16 16$30 ) ;
2274: LD_INT 34650
2276: PPUSH
2277: CALL_OW 67
// SayRadio ( Sidorovich , D7-Sidor-1 ) ;
2281: LD_EXP 44
2285: PPUSH
2286: LD_STRING D7-Sidor-1
2288: PPUSH
2289: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
2293: LD_EXP 36
2297: PPUSH
2298: LD_STRING D7-Simone-1
2300: PPUSH
2301: CALL_OW 88
// SayRadio ( Sidorovich , D7-Sidor-2 ) ;
2305: LD_EXP 44
2309: PPUSH
2310: LD_STRING D7-Sidor-2
2312: PPUSH
2313: CALL_OW 94
// Say ( Simone , D7-Simone-2 ) ;
2317: LD_EXP 36
2321: PPUSH
2322: LD_STRING D7-Simone-2
2324: PPUSH
2325: CALL_OW 88
// end ;
2329: END
// every 0 0$1 trigger AfterBradfordAssault do var WholeSquad , SolSpeaker ;
2330: LD_EXP 3
2334: IFFALSE 2530
2336: GO 2338
2338: DISABLE
2339: LD_INT 0
2341: PPUSH
2342: PPUSH
// begin Wait ( 23 23$20 ) ;
2343: LD_INT 49000
2345: PPUSH
2346: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds ] ;
2350: LD_ADDR_VAR 0 1
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 7
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 21
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_EXP 36
2388: PUSH
2389: LD_EXP 37
2393: PUSH
2394: LD_EXP 38
2398: PUSH
2399: LD_EXP 39
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: DIFF
2410: ST_TO_ADDR
// SolSpeaker := WholeSquad [ Rand ( 1 , WholeSquad ) ] ;
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: LD_VAR 0 1
2420: PUSH
2421: LD_INT 1
2423: PPUSH
2424: LD_VAR 0 1
2428: PPUSH
2429: CALL_OW 12
2433: ARRAY
2434: ST_TO_ADDR
// if GetSex ( SolSpeaker ) = sex_male then
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL_OW 258
2444: PUSH
2445: LD_INT 1
2447: EQUAL
2448: IFFALSE 2464
// Say ( SolSpeaker , D8-Sol-1 ) else
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_STRING D8-Sol-1
2457: PPUSH
2458: CALL_OW 88
2462: GO 2491
// if GetSex ( SolSpeaker ) = sex_female then
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL_OW 258
2473: PUSH
2474: LD_INT 2
2476: EQUAL
2477: IFFALSE 2491
// Say ( SolSpeaker , D8-FemSol-1 ) ;
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_STRING D8-FemSol-1
2486: PPUSH
2487: CALL_OW 88
// SayRadio ( Sidorovich , D8-Sidor-1 ) ;
2491: LD_EXP 44
2495: PPUSH
2496: LD_STRING D8-Sidor-1
2498: PPUSH
2499: CALL_OW 94
// Say ( Simone , D8-Simone-1 ) ;
2503: LD_EXP 36
2507: PPUSH
2508: LD_STRING D8-Simone-1
2510: PPUSH
2511: CALL_OW 88
// ChangeMissionObjectives ( MPlans ) ;
2515: LD_STRING MPlans
2517: PPUSH
2518: CALL_OW 337
// PlansCourierEscape := true ;
2522: LD_ADDR_EXP 5
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// end ;
2530: PPOPN 2
2532: END
// export CourierVeh , RU_Courier , RUVeh1 , RUVeh2 ; every 0 0$1 trigger PlansCourierEscape do
2533: LD_EXP 5
2537: IFFALSE 2865
2539: GO 2541
2541: DISABLE
// begin uc_side := 6 ;
2542: LD_ADDR_OWVAR 20
2546: PUSH
2547: LD_INT 6
2549: ST_TO_ADDR
// uc_nation := nation_russian ;
2550: LD_ADDR_OWVAR 21
2554: PUSH
2555: LD_INT 3
2557: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
2558: LD_ADDR_OWVAR 37
2562: PUSH
2563: LD_INT 22
2565: ST_TO_ADDR
// vc_engine := engine_siberite ;
2566: LD_ADDR_OWVAR 39
2570: PUSH
2571: LD_INT 3
2573: ST_TO_ADDR
// vc_control := control_manual ;
2574: LD_ADDR_OWVAR 38
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_weapon := ru_gun ;
2582: LD_ADDR_OWVAR 40
2586: PUSH
2587: LD_INT 44
2589: ST_TO_ADDR
// CourierVeh := CreateVehicle ;
2590: LD_ADDR_EXP 12
2594: PUSH
2595: CALL_OW 45
2599: ST_TO_ADDR
// vc_control := control_computer ;
2600: LD_ADDR_OWVAR 38
2604: PUSH
2605: LD_INT 3
2607: ST_TO_ADDR
// RUVeh1 := CreateVehicle ;
2608: LD_ADDR_EXP 14
2612: PUSH
2613: CALL_OW 45
2617: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
2618: LD_ADDR_OWVAR 40
2622: PUSH
2623: LD_INT 43
2625: ST_TO_ADDR
// RUVeh2 := CreateVehicle ;
2626: LD_ADDR_EXP 15
2630: PUSH
2631: CALL_OW 45
2635: ST_TO_ADDR
// hc_class = class_mechanic ;
2636: LD_ADDR_OWVAR 28
2640: PUSH
2641: LD_INT 3
2643: ST_TO_ADDR
// hc_sex = sex_male ;
2644: LD_ADDR_OWVAR 27
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// hc_importance = 40 ;
2652: LD_ADDR_OWVAR 32
2656: PUSH
2657: LD_INT 40
2659: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 7 ] ;
2660: LD_ADDR_OWVAR 31
2664: PUSH
2665: LD_INT 6
2667: PUSH
2668: LD_INT 4
2670: PUSH
2671: LD_INT 10
2673: PUSH
2674: LD_INT 7
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
2683: LD_ADDR_OWVAR 29
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: LD_INT 10
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// hc_name := Jovan Radovcic ;
2698: LD_ADDR_OWVAR 26
2702: PUSH
2703: LD_STRING Jovan Radovcic
2705: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING ZieloneLaserki_Commanders
2713: ST_TO_ADDR
// hc_face_number := 7 ;
2714: LD_ADDR_OWVAR 34
2718: PUSH
2719: LD_INT 7
2721: ST_TO_ADDR
// RU_Courier := CreateHuman ;
2722: LD_ADDR_EXP 13
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// hc_name :=  ;
2732: LD_ADDR_OWVAR 26
2736: PUSH
2737: LD_STRING 
2739: ST_TO_ADDR
// hc_gallery :=  ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING 
2747: ST_TO_ADDR
// PlaceUnitArea ( CourierVeh , CourierVehsArea , false ) ;
2748: LD_EXP 12
2752: PPUSH
2753: LD_INT 6
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// PlaceUnitArea ( RUVeh1 , CourierVehsArea , false ) ;
2763: LD_EXP 14
2767: PPUSH
2768: LD_INT 6
2770: PPUSH
2771: LD_INT 0
2773: PPUSH
2774: CALL_OW 49
// PlaceUnitArea ( RUVeh2 , CourierVehsArea , false ) ;
2778: LD_EXP 15
2782: PPUSH
2783: LD_INT 6
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// PlaceHumanInUnit ( RU_Courier , ustinov2 ) ;
2793: LD_EXP 13
2797: PPUSH
2798: LD_INT 3
2800: PPUSH
2801: CALL_OW 52
// ComEnterUnit ( RU_Courier , CourierVeh ) ;
2805: LD_EXP 13
2809: PPUSH
2810: LD_EXP 12
2814: PPUSH
2815: CALL_OW 120
// wait ( 1 1$0 ) ;
2819: LD_INT 2100
2821: PPUSH
2822: CALL_OW 67
// ComMoveXY ( CourierVeh , 123 , 3 ) ;
2826: LD_EXP 12
2830: PPUSH
2831: LD_INT 123
2833: PPUSH
2834: LD_INT 3
2836: PPUSH
2837: CALL_OW 111
// ComAgressiveMove ( [ RUVeh1 , RUVeh2 ] , 123 , 3 ) ;
2841: LD_EXP 14
2845: PUSH
2846: LD_EXP 15
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: LD_INT 123
2857: PPUSH
2858: LD_INT 3
2860: PPUSH
2861: CALL_OW 114
// end ;
2865: END
// export RUCourierEscaped , RU_Courier_Dead ; every 0 0$1 trigger ( IsInArea ( CourierVeh , RUCourierEvac ) or IsInArea ( RU_Courier , RUCourierEvac ) ) and IsOK ( RU_Courier ) do
2866: LD_EXP 12
2870: PPUSH
2871: LD_INT 5
2873: PPUSH
2874: CALL_OW 308
2878: PUSH
2879: LD_EXP 13
2883: PPUSH
2884: LD_INT 5
2886: PPUSH
2887: CALL_OW 308
2891: OR
2892: PUSH
2893: LD_EXP 13
2897: PPUSH
2898: CALL_OW 302
2902: AND
2903: IFFALSE 2958
2905: GO 2907
2907: DISABLE
// begin if not IsDead ( CourierVeh ) then
2908: LD_EXP 12
2912: PPUSH
2913: CALL_OW 301
2917: NOT
2918: IFFALSE 2929
// RemoveUnit ( CourierVeh ) ;
2920: LD_EXP 12
2924: PPUSH
2925: CALL_OW 64
// RemoveUnit ( RU_Courier ) ;
2929: LD_EXP 13
2933: PPUSH
2934: CALL_OW 64
// Say ( Miller , D8c-Miller-1 ) ;
2938: LD_EXP 37
2942: PPUSH
2943: LD_STRING D8c-Miller-1
2945: PPUSH
2946: CALL_OW 88
// RUCourierEscaped := true ;
2950: LD_ADDR_EXP 16
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// end ;
2958: END
// every 0 0$1 trigger IsInArea ( RUVeh1 , RUCourierEvac ) and IsOK ( RUVeh1 ) and RUCourierEscaped do
2959: LD_EXP 14
2963: PPUSH
2964: LD_INT 5
2966: PPUSH
2967: CALL_OW 308
2971: PUSH
2972: LD_EXP 14
2976: PPUSH
2977: CALL_OW 302
2981: AND
2982: PUSH
2983: LD_EXP 16
2987: AND
2988: IFFALSE 3002
2990: GO 2992
2992: DISABLE
// RemoveUnit ( RUVeh1 ) ;
2993: LD_EXP 14
2997: PPUSH
2998: CALL_OW 64
3002: END
// every 0 0$1 trigger IsInArea ( RUVeh2 , RUCourierEvac ) and IsOK ( RUVeh2 ) and RUCourierEscaped do
3003: LD_EXP 15
3007: PPUSH
3008: LD_INT 5
3010: PPUSH
3011: CALL_OW 308
3015: PUSH
3016: LD_EXP 15
3020: PPUSH
3021: CALL_OW 302
3025: AND
3026: PUSH
3027: LD_EXP 16
3031: AND
3032: IFFALSE 3046
3034: GO 3036
3036: DISABLE
// RemoveUnit ( RUVeh2 ) ;
3037: LD_EXP 15
3041: PPUSH
3042: CALL_OW 64
3046: END
// export Endgame ; export RU1Evacuation , BotnicovSpared , BotnicovAntagonized ; every 0 0$1 trigger IsDead ( Sidorovich ) and ( GetSide ( ustinov1 ) = 7 or IsDead ( ustinov1 ) ) and ( GetSide ( ustinov2 ) = 7 or IsDead ( ustinov2 ) ) do
3047: LD_EXP 44
3051: PPUSH
3052: CALL_OW 301
3056: PUSH
3057: LD_INT 2
3059: PPUSH
3060: CALL_OW 255
3064: PUSH
3065: LD_INT 7
3067: EQUAL
3068: PUSH
3069: LD_INT 2
3071: PPUSH
3072: CALL_OW 301
3076: OR
3077: AND
3078: PUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 255
3086: PUSH
3087: LD_INT 7
3089: EQUAL
3090: PUSH
3091: LD_INT 3
3093: PPUSH
3094: CALL_OW 301
3098: OR
3099: AND
3100: IFFALSE 3375
3102: GO 3104
3104: DISABLE
// begin KolvichEnRoute := true ;
3105: LD_ADDR_EXP 6
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
// RU1Evacuation := true ;
3113: LD_ADDR_EXP 19
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// wait ( 0 0$25 ) ;
3121: LD_INT 875
3123: PPUSH
3124: CALL_OW 67
// Prepare_Escapees ;
3128: CALL 8203 0 0
// wait ( 0 0$5 ) ;
3132: LD_INT 175
3134: PPUSH
3135: CALL_OW 67
// CenterOnUnits ( Botnicov ) ;
3139: LD_EXP 47
3143: PPUSH
3144: CALL_OW 85
// DialogueOn ;
3148: CALL_OW 6
// Say ( Miller , D9a-Miller-2 ) ;
3152: LD_EXP 37
3156: PPUSH
3157: LD_STRING D9a-Miller-2
3159: PPUSH
3160: CALL_OW 88
// if not GetAttitude ( 5 , 7 ) = att_enemy then
3164: LD_INT 5
3166: PPUSH
3167: LD_INT 7
3169: PPUSH
3170: CALL_OW 81
3174: PUSH
3175: LD_INT 2
3177: EQUAL
3178: NOT
3179: IFFALSE 3352
// case Query ( QRussians ) of 1 :
3181: LD_STRING QRussians
3183: PPUSH
3184: CALL_OW 97
3188: PUSH
3189: LD_INT 1
3191: DOUBLE
3192: EQUAL
3193: IFTRUE 3197
3195: GO 3262
3197: POP
// begin Say ( Simone , D9a-Simone-2 ) ;
3198: LD_EXP 36
3202: PPUSH
3203: LD_STRING D9a-Simone-2
3205: PPUSH
3206: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1 ) ;
3210: LD_EXP 47
3214: PPUSH
3215: LD_STRING D9a-Botnicov-1
3217: PPUSH
3218: CALL_OW 88
// BotnicovSpared := true ;
3222: LD_ADDR_EXP 20
3226: PUSH
3227: LD_INT 1
3229: ST_TO_ADDR
// ComMoveXY ( Botnicov_Sols , 218 , 3 ) ;
3230: LD_EXP 30
3234: PPUSH
3235: LD_INT 218
3237: PPUSH
3238: LD_INT 3
3240: PPUSH
3241: CALL_OW 111
// ComMoveXY ( Botnicov , 218 , 3 ) ;
3245: LD_EXP 47
3249: PPUSH
3250: LD_INT 218
3252: PPUSH
3253: LD_INT 3
3255: PPUSH
3256: CALL_OW 111
// end ; 2 :
3260: GO 3352
3262: LD_INT 2
3264: DOUBLE
3265: EQUAL
3266: IFTRUE 3270
3268: GO 3351
3270: POP
// begin Say ( Simone , D9a-Simone-2a ) ;
3271: LD_EXP 36
3275: PPUSH
3276: LD_STRING D9a-Simone-2a
3278: PPUSH
3279: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1a ) ;
3283: LD_EXP 47
3287: PPUSH
3288: LD_STRING D9a-Botnicov-1a
3290: PPUSH
3291: CALL_OW 88
// BotnicovAntagonized := true ;
3295: LD_ADDR_EXP 21
3299: PUSH
3300: LD_INT 1
3302: ST_TO_ADDR
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
3303: LD_INT 5
3305: PPUSH
3306: LD_INT 7
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: CALL_OW 80
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
3319: LD_EXP 30
3323: PPUSH
3324: LD_INT 257
3326: PPUSH
3327: LD_INT 108
3329: PPUSH
3330: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
3334: LD_EXP 47
3338: PPUSH
3339: LD_INT 257
3341: PPUSH
3342: LD_INT 108
3344: PPUSH
3345: CALL_OW 114
// end ; end ;
3349: GO 3352
3351: POP
// DialogueOff ;
3352: CALL_OW 7
// wait ( 0 0$40 ) ;
3356: LD_INT 1400
3358: PPUSH
3359: CALL_OW 67
// Dialogue_Barnes_General ;
3363: CALL 8576 0 0
// Endgame := true ;
3367: LD_ADDR_EXP 18
3371: PUSH
3372: LD_INT 1
3374: ST_TO_ADDR
// end ;
3375: END
// every 0 0$1 trigger RU1Evacuation and FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var RU1Escapees ;
3376: LD_EXP 19
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 21
3396: PUSH
3397: LD_INT 1
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 21
3406: PUSH
3407: LD_INT 2
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: PUSH
3428: LD_INT 0
3430: GREATER
3431: AND
3432: IFFALSE 3514
3434: GO 3436
3436: DISABLE
3437: LD_INT 0
3439: PPUSH
// begin enable ;
3440: ENABLE
// RU1Escapees := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff Sidorovich ;
3441: LD_ADDR_VAR 0 1
3445: PUSH
3446: LD_INT 22
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 21
3461: PUSH
3462: LD_INT 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 21
3471: PUSH
3472: LD_INT 2
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 69
3492: PUSH
3493: LD_EXP 44
3497: DIFF
3498: ST_TO_ADDR
// ComAgressiveMove ( RU1Escapees , 218 , 3 ) ;
3499: LD_VAR 0 1
3503: PPUSH
3504: LD_INT 218
3506: PPUSH
3507: LD_INT 3
3509: PPUSH
3510: CALL_OW 114
// end ;
3514: PPOPN 1
3516: END
// every 0 0$1 trigger BotnicovSpared and Botnicov_Sols > 0 do
3517: LD_EXP 20
3521: PUSH
3522: LD_EXP 30
3526: PUSH
3527: LD_INT 0
3529: GREATER
3530: AND
3531: IFFALSE 3567
3533: GO 3535
3535: DISABLE
// begin enable ;
3536: ENABLE
// ComMoveXY ( Botnicov_Sols , 218 , 3 ) ;
3537: LD_EXP 30
3541: PPUSH
3542: LD_INT 218
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: CALL_OW 111
// ComMoveXY ( Botnicov , 218 , 3 ) ;
3552: LD_EXP 47
3556: PPUSH
3557: LD_INT 218
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 111
// end ;
3567: END
// every 0 0$0.8 do var qqq , i , un , my_filter ;
3568: GO 3570
3570: DISABLE
3571: LD_INT 0
3573: PPUSH
3574: PPUSH
3575: PPUSH
3576: PPUSH
// begin if RU1Evacuation then
3577: LD_EXP 19
3581: IFFALSE 3627
// my_filter := FilterUnitsInArea ( RUEvacZone , [ [ f_or , [ f_side , 3 ] , [ f_side , 5 ] ] ] ) ;
3583: LD_ADDR_VAR 0 4
3587: PUSH
3588: LD_INT 9
3590: PPUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: EMPTY
3620: LIST
3621: PPUSH
3622: CALL_OW 70
3626: ST_TO_ADDR
// for un in my_filter do
3627: LD_ADDR_VAR 0 3
3631: PUSH
3632: LD_VAR 0 4
3636: PUSH
3637: FOR_IN
3638: IFFALSE 3705
// begin if GetType ( un ) = unit_vehicle then
3640: LD_VAR 0 3
3644: PPUSH
3645: CALL_OW 247
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: IFFALSE 3687
// begin Wait ( 0 0$2 ) ;
3655: LD_INT 70
3657: PPUSH
3658: CALL_OW 67
// RemoveUnit ( IsDrivenBy ( un ) ) ;
3662: LD_VAR 0 3
3666: PPUSH
3667: CALL_OW 311
3671: PPUSH
3672: CALL_OW 64
// RemoveUnit ( un ) ;
3676: LD_VAR 0 3
3680: PPUSH
3681: CALL_OW 64
// end else
3685: GO 3703
// begin Wait ( 0 0$2 ) ;
3687: LD_INT 70
3689: PPUSH
3690: CALL_OW 67
// RemoveUnit ( un ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: CALL_OW 64
// end ; end ;
3703: GO 3637
3705: POP
3706: POP
// enable ;
3707: ENABLE
// end ;
3708: PPOPN 4
3710: END
// export DvaliAttack ; every 0 0$1 trigger Endgame do
3711: LD_EXP 18
3715: IFFALSE 3812
3717: GO 3719
3719: DISABLE
// begin wait ( GEODvaliArrival ) ;
3720: LD_EXP 62
3724: PPUSH
3725: CALL_OW 67
// DialogueOn ;
3729: CALL_OW 6
// SayRadio ( Dvalishvili , D11-Dvali-1 ) ;
3733: LD_EXP 46
3737: PPUSH
3738: LD_STRING D11-Dvali-1
3740: PPUSH
3741: CALL_OW 94
// Say ( Simone , D11-Simone-1 ) ;
3745: LD_EXP 36
3749: PPUSH
3750: LD_STRING D11-Simone-1
3752: PPUSH
3753: CALL_OW 88
// SayRadio ( Dvalishvili , D11-Dvali-2 ) ;
3757: LD_EXP 46
3761: PPUSH
3762: LD_STRING D11-Dvali-2
3764: PPUSH
3765: CALL_OW 94
// SayRadio ( Dvalishvili , D11-Dvali-3 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_STRING D11-Dvali-3
3776: PPUSH
3777: CALL_OW 94
// Say ( Simone , D11-Simone-2 ) ;
3781: LD_EXP 36
3785: PPUSH
3786: LD_STRING D11-Simone-2
3788: PPUSH
3789: CALL_OW 88
// DialogueOff ;
3793: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
3797: LD_STRING M3a
3799: PPUSH
3800: CALL_OW 337
// DvaliAttack := true ;
3804: LD_ADDR_EXP 22
3808: PUSH
3809: LD_INT 1
3811: ST_TO_ADDR
// end ;
3812: END
// every 0 0$1 trigger DvaliAttack do
3813: LD_EXP 22
3817: IFFALSE 4033
3819: GO 3821
3821: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_N , 8 , Rand ( 6 , 8 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 1 ) ;
3822: LD_INT 10
3824: PPUSH
3825: LD_INT 8
3827: PPUSH
3828: LD_INT 6
3830: PPUSH
3831: LD_INT 8
3833: PPUSH
3834: CALL_OW 12
3838: PPUSH
3839: LD_EXP 60
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: EMPTY
3854: PPUSH
3855: LD_INT 25
3857: PUSH
3858: LD_INT 26
3860: PUSH
3861: LD_INT 27
3863: PUSH
3864: LD_INT 28
3866: PUSH
3867: LD_INT 71
3869: PUSH
3870: LD_INT 72
3872: PUSH
3873: LD_INT 73
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: PPUSH
3885: EMPTY
3886: PPUSH
3887: LD_INT 1
3889: PPUSH
3890: CALL 13285 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 8 , 11 ) , 0 , 0 , 3 , 2 , GeoSolMaxLevel , DvaliSpawn_N , 1 ) ;
3894: LD_INT 8
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: LD_INT 8
3902: PPUSH
3903: LD_INT 11
3905: PPUSH
3906: CALL_OW 12
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 3
3919: PPUSH
3920: LD_INT 2
3922: PPUSH
3923: LD_EXP 60
3927: PPUSH
3928: LD_INT 10
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: CALL 14948 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
3938: LD_INT 0
3940: PUSH
3941: LD_EXP 56
3945: PUSH
3946: LD_INT 181
3948: PUSH
3949: LD_INT 21
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 226
3958: PUSH
3959: LD_INT 72
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 225
3968: PUSH
3969: LD_INT 103
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: PUSH
3981: LD_INT 0
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 1
3992: PUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: LD_INT 0
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PPUSH
4029: CALL 54644 0 1
// end ;
4033: END
// every 0 0$1 trigger DvaliAttack do
4034: LD_EXP 22
4038: IFFALSE 4258
4040: GO 4042
4042: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_S , 8 , Rand ( 6 , 9 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 2 ) ;
4043: LD_INT 11
4045: PPUSH
4046: LD_INT 8
4048: PPUSH
4049: LD_INT 6
4051: PPUSH
4052: LD_INT 9
4054: PPUSH
4055: CALL_OW 12
4059: PPUSH
4060: LD_EXP 60
4064: PPUSH
4065: LD_INT 2
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: EMPTY
4075: PPUSH
4076: LD_INT 25
4078: PUSH
4079: LD_INT 26
4081: PUSH
4082: LD_INT 27
4084: PUSH
4085: LD_INT 28
4087: PUSH
4088: LD_INT 71
4090: PUSH
4091: LD_INT 72
4093: PUSH
4094: LD_INT 73
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PPUSH
4106: EMPTY
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: CALL 13285 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 7 , 10 ) , 0 , 0 , 2 , 2 , GeoSolMaxLevel , DvaliSpawn_S , 2 ) ;
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: LD_INT 7
4123: PPUSH
4124: LD_INT 10
4126: PPUSH
4127: CALL_OW 12
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 2
4143: PPUSH
4144: LD_EXP 60
4148: PPUSH
4149: LD_INT 11
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: CALL 14948 0 10
// PrepareDvalishvili ;
4159: CALL 15732 0 0
// Attack ( [ 0 , MC_attack_group2 , [ [ 211 , 145 ] , [ 242 , 126 ] , [ 254 , 104 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
4163: LD_INT 0
4165: PUSH
4166: LD_EXP 57
4170: PUSH
4171: LD_INT 211
4173: PUSH
4174: LD_INT 145
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 242
4183: PUSH
4184: LD_INT 126
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 254
4193: PUSH
4194: LD_INT 104
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 1
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: LD_INT 1
4220: PUSH
4221: LD_INT 0
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: LD_INT 1
4232: PUSH
4233: LD_INT 1
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL 54644 0 1
// end ;
4258: END
// export KolvichArrival , KolvichAttacks ; every 0 0$1 trigger Endgame do var i ;
4259: LD_EXP 18
4263: IFFALSE 5048
4265: GO 4267
4267: DISABLE
4268: LD_INT 0
4270: PPUSH
// begin wait ( GEODvaliArrival + 15 15$00 ) ;
4271: LD_EXP 62
4275: PUSH
4276: LD_INT 31500
4278: PLUS
4279: PPUSH
4280: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-1 ) ;
4284: LD_EXP 45
4288: PPUSH
4289: LD_STRING D12-Kolvich-1
4291: PPUSH
4292: CALL_OW 94
// wait ( 0 0$05 ) ;
4296: LD_INT 175
4298: PPUSH
4299: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-2 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D12-Kolvich-2
4310: PPUSH
4311: CALL_OW 94
// wait ( 0 0$05 ) ;
4315: LD_INT 175
4317: PPUSH
4318: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-3 ) ;
4322: LD_EXP 45
4326: PPUSH
4327: LD_STRING D12-Kolvich-3
4329: PPUSH
4330: CALL_OW 94
// wait ( 0 0$02 ) ;
4334: LD_INT 70
4336: PPUSH
4337: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-4 ) ;
4341: LD_EXP 45
4345: PPUSH
4346: LD_STRING D12-Kolvich-4
4348: PPUSH
4349: CALL_OW 94
// InGameOn ;
4353: CALL_OW 8
// SayRadio ( Kolvich , D12-Kolvich-5 ) ;
4357: LD_EXP 45
4361: PPUSH
4362: LD_STRING D12-Kolvich-5
4364: PPUSH
4365: CALL_OW 94
// Say ( Simone , D12-Simone-1 ) ;
4369: LD_EXP 36
4373: PPUSH
4374: LD_STRING D12-Simone-1
4376: PPUSH
4377: CALL_OW 88
// SayRadio ( Kolvich , D12a-Kolvich-1 ) ;
4381: LD_EXP 45
4385: PPUSH
4386: LD_STRING D12a-Kolvich-1
4388: PPUSH
4389: CALL_OW 94
// InGameOff ;
4393: CALL_OW 9
// KolvichArrival := true ;
4397: LD_ADDR_EXP 23
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// SetSide ( AMBase , 6 ) ;
4405: LD_INT 351
4407: PPUSH
4408: LD_INT 6
4410: PPUSH
4411: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) , 6 ) ;
4415: LD_INT 22
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 30
4427: PUSH
4428: LD_INT 4
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PPUSH
4439: CALL_OW 69
4443: PPUSH
4444: LD_INT 6
4446: PPUSH
4447: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) , 6 ) ;
4451: LD_INT 22
4453: PUSH
4454: LD_INT 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 30
4463: PUSH
4464: LD_INT 31
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 69
4479: PPUSH
4480: LD_INT 6
4482: PPUSH
4483: CALL_OW 235
// RespawnAttackVehicle ( RU2_Kolvich_ArmySpawn , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , [ ] , 1 ) ;
4487: LD_INT 20
4489: PPUSH
4490: LD_INT 6
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: LD_INT 8
4498: PPUSH
4499: CALL_OW 12
4503: PPUSH
4504: LD_EXP 59
4508: PPUSH
4509: LD_INT 3
4511: PPUSH
4512: LD_INT 3
4514: PPUSH
4515: LD_INT 1
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: LD_INT 46
4527: PUSH
4528: LD_INT 43
4530: PUSH
4531: LD_INT 44
4533: PUSH
4534: LD_INT 47
4536: PUSH
4537: LD_INT 45
4539: PUSH
4540: LD_INT 74
4542: PUSH
4543: LD_INT 75
4545: PUSH
4546: LD_INT 76
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: EMPTY
4560: PPUSH
4561: EMPTY
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: CALL 13285 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , RU2_Kolvich_ArmySpawn , 1 ) ;
4570: LD_INT 6
4572: PPUSH
4573: LD_INT 3
4575: PPUSH
4576: LD_INT 6
4578: PPUSH
4579: LD_INT 8
4581: PPUSH
4582: CALL_OW 12
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: CALL_OW 12
4600: PPUSH
4601: LD_INT 0
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_EXP 59
4611: PPUSH
4612: LD_INT 20
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: CALL 14948 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 94 , 115 ] , [ 112 , 137 ] , [ 242 , 127 ] , [ 277 , 139 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
4622: LD_INT 0
4624: PUSH
4625: LD_EXP 56
4629: PUSH
4630: LD_INT 94
4632: PUSH
4633: LD_INT 115
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 112
4642: PUSH
4643: LD_INT 137
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 242
4652: PUSH
4653: LD_INT 127
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 277
4662: PUSH
4663: LD_INT 139
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 0
4678: PUSH
4679: LD_INT 1
4681: PUSH
4682: LD_INT 0
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: LD_INT 0
4693: PUSH
4694: LD_INT 0
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: LD_INT 1
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL 54644 0 1
// RespawnAttackVehicle ( RU2_Kolvich_ArmySpawn , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , [ ] , 1 ) ;
4728: LD_INT 20
4730: PPUSH
4731: LD_INT 6
4733: PPUSH
4734: LD_INT 5
4736: PPUSH
4737: LD_INT 8
4739: PPUSH
4740: CALL_OW 12
4744: PPUSH
4745: LD_EXP 59
4749: PPUSH
4750: LD_INT 3
4752: PPUSH
4753: LD_INT 3
4755: PPUSH
4756: LD_INT 1
4758: PUSH
4759: LD_INT 3
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: LD_INT 46
4768: PUSH
4769: LD_INT 43
4771: PUSH
4772: LD_INT 44
4774: PUSH
4775: LD_INT 47
4777: PUSH
4778: LD_INT 45
4780: PUSH
4781: LD_INT 74
4783: PUSH
4784: LD_INT 75
4786: PUSH
4787: LD_INT 76
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PPUSH
4800: EMPTY
4801: PPUSH
4802: EMPTY
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL 13285 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , RU2_Kolvich_ArmySpawn , 1 ) ;
4811: LD_INT 6
4813: PPUSH
4814: LD_INT 3
4816: PPUSH
4817: LD_INT 6
4819: PPUSH
4820: LD_INT 8
4822: PPUSH
4823: CALL_OW 12
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 3
4836: PPUSH
4837: CALL_OW 12
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: LD_INT 2
4847: PPUSH
4848: LD_EXP 59
4852: PPUSH
4853: LD_INT 20
4855: PPUSH
4856: LD_INT 1
4858: PPUSH
4859: CALL 14948 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 91 , 81 ] , [ 163 , 79 ] , [ 227 , 73 ] , [ 246 , 85 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
4863: LD_INT 0
4865: PUSH
4866: LD_EXP 56
4870: PUSH
4871: LD_INT 91
4873: PUSH
4874: LD_INT 81
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 163
4883: PUSH
4884: LD_INT 79
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 227
4893: PUSH
4894: LD_INT 73
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 246
4903: PUSH
4904: LD_INT 85
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 0
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: LD_INT 0
4925: PUSH
4926: LD_INT 1
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 0
4934: PUSH
4935: LD_INT 0
4937: PUSH
4938: LD_INT 0
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL 54644 0 1
// Wait ( 1 1$0 ) ;
4969: LD_INT 2100
4971: PPUSH
4972: CALL_OW 67
// Prepare_RU2 ;
4976: CALL 9092 0 0
// PriorityAttack ( 6 , AMLab ) ;
4980: LD_INT 6
4982: PPUSH
4983: LD_EXP 33
4987: PPUSH
4988: CALL_OW 470
// PriorityAttack ( 6 , AM_Factory ) ;
4992: LD_INT 6
4994: PPUSH
4995: LD_EXP 67
4999: PPUSH
5000: CALL_OW 470
// for i in AMFactoryExt do
5004: LD_ADDR_VAR 0 1
5008: PUSH
5009: LD_EXP 34
5013: PUSH
5014: FOR_IN
5015: IFFALSE 5031
// PriorityAttack ( 6 , i ) ;
5017: LD_INT 6
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 470
5029: GO 5014
5031: POP
5032: POP
// Wait ( 2 2$0 ) ;
5033: LD_INT 4200
5035: PPUSH
5036: CALL_OW 67
// KolvichAttacks := true ;
5040: LD_ADDR_EXP 24
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// end ;
5048: PPOPN 1
5050: END
// export RandallAwaiting ; every 0 0$1 trigger KolvichArrival do
5051: LD_EXP 23
5055: IFFALSE 5329
5057: GO 5059
5059: DISABLE
// begin wait ( DefenseTime ) ;
5060: LD_EXP 63
5064: PPUSH
5065: CALL_OW 67
// KolvichAttacks = false ;
5069: LD_ADDR_EXP 24
5073: PUSH
5074: LD_INT 0
5076: ST_TO_ADDR
// RespawnAttackVehicle ( AM1_ReinforceArrival , 1 , 20 , 10 , 1 , engine_siberite , control_manual , [ ] , [ ] , [ 4 , 6 , 9 , 7 ] , 2 ) ;
5077: LD_INT 12
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: LD_INT 20
5085: PPUSH
5086: LD_INT 10
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 1
5097: PPUSH
5098: EMPTY
5099: PPUSH
5100: EMPTY
5101: PPUSH
5102: LD_INT 4
5104: PUSH
5105: LD_INT 6
5107: PUSH
5108: LD_INT 9
5110: PUSH
5111: LD_INT 7
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: LD_INT 2
5122: PPUSH
5123: CALL 13285 0 11
// Attack ( [ 0 , MC_attack_group2 , [ [ 93 , 55 ] , [ 100 , 72 ] , [ 88 , 82 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
5127: LD_INT 0
5129: PUSH
5130: LD_EXP 57
5134: PUSH
5135: LD_INT 93
5137: PUSH
5138: LD_INT 55
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 100
5147: PUSH
5148: LD_INT 72
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 88
5157: PUSH
5158: LD_INT 82
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 1
5175: PUSH
5176: LD_INT 0
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: LD_INT 1
5184: PUSH
5185: LD_INT 0
5187: PUSH
5188: LD_INT 0
5190: PUSH
5191: LD_INT 0
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PPUSH
5218: CALL 54644 0 1
// wait ( 0 0$5 ) ;
5222: LD_INT 175
5224: PPUSH
5225: CALL_OW 67
// Say ( Simone , D13-Simone-1 ) ;
5229: LD_EXP 36
5233: PPUSH
5234: LD_STRING D13-Simone-1
5236: PPUSH
5237: CALL_OW 88
// SayRadio ( Kolvich , D13a-Kolvich-1 ) ;
5241: LD_EXP 45
5245: PPUSH
5246: LD_STRING D13a-Kolvich-1
5248: PPUSH
5249: CALL_OW 94
// wait ( 0 0$45 ) ;
5253: LD_INT 1575
5255: PPUSH
5256: CALL_OW 67
// PlaceUnitXY ( Randall , 217 , 1 , false ) ;
5260: LD_EXP 51
5264: PPUSH
5265: LD_INT 217
5267: PPUSH
5268: LD_INT 1
5270: PPUSH
5271: LD_INT 0
5273: PPUSH
5274: CALL_OW 48
// ComMoveXY ( Randall , 277 , 135 ) ;
5278: LD_EXP 51
5282: PPUSH
5283: LD_INT 277
5285: PPUSH
5286: LD_INT 135
5288: PPUSH
5289: CALL_OW 111
// AddComTurnUnit ( Randall , Simone ) ;
5293: LD_EXP 51
5297: PPUSH
5298: LD_EXP 36
5302: PPUSH
5303: CALL_OW 179
// wait ( 0 0$25 ) ;
5307: LD_INT 875
5309: PPUSH
5310: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
5314: LD_STRING M4
5316: PPUSH
5317: CALL_OW 337
// RandallAwaiting := true ;
5321: LD_ADDR_EXP 25
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// end ;
5329: END
// every 0 0$1 trigger RandallAwaiting and GetDistUnits ( Simone , Randall ) < 3 do
5330: LD_EXP 25
5334: PUSH
5335: LD_EXP 36
5339: PPUSH
5340: LD_EXP 51
5344: PPUSH
5345: CALL_OW 296
5349: PUSH
5350: LD_INT 3
5352: LESS
5353: AND
5354: IFFALSE 5843
5356: GO 5358
5358: DISABLE
// begin InGameOn ;
5359: CALL_OW 8
// ComExitVehicle ( [ Esther , Miller , Edmonds ] ) ;
5363: LD_EXP 38
5367: PUSH
5368: LD_EXP 37
5372: PUSH
5373: LD_EXP 39
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: PPUSH
5383: CALL_OW 121
// ComMoveXY ( [ Esther , Miller , Edmonds ] , 276 , 137 ) ;
5387: LD_EXP 38
5391: PUSH
5392: LD_EXP 37
5396: PUSH
5397: LD_EXP 39
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: LD_INT 276
5409: PPUSH
5410: LD_INT 137
5412: PPUSH
5413: CALL_OW 111
// ComMoveXY ( Simone , 278 , 136 ) ;
5417: LD_EXP 36
5421: PPUSH
5422: LD_INT 278
5424: PPUSH
5425: LD_INT 136
5427: PPUSH
5428: CALL_OW 111
// AddComTurnUnit ( Simone , Randall ) ;
5432: LD_EXP 36
5436: PPUSH
5437: LD_EXP 51
5441: PPUSH
5442: CALL_OW 179
// CenterOnUnits ( Randall ) ;
5446: LD_EXP 51
5450: PPUSH
5451: CALL_OW 85
// Say ( Randall , D14-Randall-1 ) ;
5455: LD_EXP 51
5459: PPUSH
5460: LD_STRING D14-Randall-1
5462: PPUSH
5463: CALL_OW 88
// Say ( Simone , D14-Simone-1 ) ;
5467: LD_EXP 36
5471: PPUSH
5472: LD_STRING D14-Simone-1
5474: PPUSH
5475: CALL_OW 88
// Say ( Randall , D14-Randall-2 ) ;
5479: LD_EXP 51
5483: PPUSH
5484: LD_STRING D14-Randall-2
5486: PPUSH
5487: CALL_OW 88
// Say ( Simone , D14-Simone-2 ) ;
5491: LD_EXP 36
5495: PPUSH
5496: LD_STRING D14-Simone-2
5498: PPUSH
5499: CALL_OW 88
// Say ( Randall , D14-Randall-2a ) ;
5503: LD_EXP 51
5507: PPUSH
5508: LD_STRING D14-Randall-2a
5510: PPUSH
5511: CALL_OW 88
// Say ( Simone , D14-Simone-2a ) ;
5515: LD_EXP 36
5519: PPUSH
5520: LD_STRING D14-Simone-2a
5522: PPUSH
5523: CALL_OW 88
// Say ( Randall , D14-Randall-3 ) ;
5527: LD_EXP 51
5531: PPUSH
5532: LD_STRING D14-Randall-3
5534: PPUSH
5535: CALL_OW 88
// Say ( Simone , D14-Simone-2b ) ;
5539: LD_EXP 36
5543: PPUSH
5544: LD_STRING D14-Simone-2b
5546: PPUSH
5547: CALL_OW 88
// Say ( Randall , D14-Randall-4 ) ;
5551: LD_EXP 51
5555: PPUSH
5556: LD_STRING D14-Randall-4
5558: PPUSH
5559: CALL_OW 88
// Say ( Simone , D14-Simone-3 ) ;
5563: LD_EXP 36
5567: PPUSH
5568: LD_STRING D14-Simone-3
5570: PPUSH
5571: CALL_OW 88
// Say ( Randall , D14-Randall-5 ) ;
5575: LD_EXP 51
5579: PPUSH
5580: LD_STRING D14-Randall-5
5582: PPUSH
5583: CALL_OW 88
// Say ( Randall , D14-Randall-6 ) ;
5587: LD_EXP 51
5591: PPUSH
5592: LD_STRING D14-Randall-6
5594: PPUSH
5595: CALL_OW 88
// Say ( Randall , D14-Randall-7 ) ;
5599: LD_EXP 51
5603: PPUSH
5604: LD_STRING D14-Randall-7
5606: PPUSH
5607: CALL_OW 88
// if not IsDead ( Edmonds ) then
5611: LD_EXP 39
5615: PPUSH
5616: CALL_OW 301
5620: NOT
5621: IFFALSE 5664
// begin Say ( Randall , D14-Edmonds-1 ) ;
5623: LD_EXP 51
5627: PPUSH
5628: LD_STRING D14-Edmonds-1
5630: PPUSH
5631: CALL_OW 88
// Say ( Randall , D14-Randall-8a ) ;
5635: LD_EXP 51
5639: PPUSH
5640: LD_STRING D14-Randall-8a
5642: PPUSH
5643: CALL_OW 88
// ComMoveXY ( Edmonds , 277 , 135 ) ;
5647: LD_EXP 39
5651: PPUSH
5652: LD_INT 277
5654: PPUSH
5655: LD_INT 135
5657: PPUSH
5658: CALL_OW 111
// end else
5662: GO 5676
// Say ( Randall , D14-Randall-8 ) ;
5664: LD_EXP 51
5668: PPUSH
5669: LD_STRING D14-Randall-8
5671: PPUSH
5672: CALL_OW 88
// wait ( 0 0$5 ) ;
5676: LD_INT 175
5678: PPUSH
5679: CALL_OW 67
// Say ( Randall , D14-Randall-9 ) ;
5683: LD_EXP 51
5687: PPUSH
5688: LD_STRING D14-Randall-9
5690: PPUSH
5691: CALL_OW 88
// ComMoveXY ( Randall , 277 , 135 ) ;
5695: LD_EXP 51
5699: PPUSH
5700: LD_INT 277
5702: PPUSH
5703: LD_INT 135
5705: PPUSH
5706: CALL_OW 111
// wait ( 0 0$2 ) ;
5710: LD_INT 70
5712: PPUSH
5713: CALL_OW 67
// Say ( Esther , D15-Esther-1 ) ;
5717: LD_EXP 38
5721: PPUSH
5722: LD_STRING D15-Esther-1
5724: PPUSH
5725: CALL_OW 88
// Say ( Simone , D15-Simone-1 ) ;
5729: LD_EXP 36
5733: PPUSH
5734: LD_STRING D15-Simone-1
5736: PPUSH
5737: CALL_OW 88
// Say ( Esther , D15-Esther-2 ) ;
5741: LD_EXP 38
5745: PPUSH
5746: LD_STRING D15-Esther-2
5748: PPUSH
5749: CALL_OW 88
// Say ( Simone , D15-Simone-2 ) ;
5753: LD_EXP 36
5757: PPUSH
5758: LD_STRING D15-Simone-2
5760: PPUSH
5761: CALL_OW 88
// Say ( Esther , D15-Esther-3 ) ;
5765: LD_EXP 38
5769: PPUSH
5770: LD_STRING D15-Esther-3
5772: PPUSH
5773: CALL_OW 88
// ComMoveXY ( Esther , 277 , 135 ) ;
5777: LD_EXP 38
5781: PPUSH
5782: LD_INT 277
5784: PPUSH
5785: LD_INT 135
5787: PPUSH
5788: CALL_OW 111
// Say ( Simone , D15-Simone-3 ) ;
5792: LD_EXP 36
5796: PPUSH
5797: LD_STRING D15-Simone-3
5799: PPUSH
5800: CALL_OW 88
// wait ( 0 0$2 ) ;
5804: LD_INT 70
5806: PPUSH
5807: CALL_OW 67
// Say ( Miller , D15-Miller-1 ) ;
5811: LD_EXP 37
5815: PPUSH
5816: LD_STRING D15-Miller-1
5818: PPUSH
5819: CALL_OW 88
// Say ( Simone , D15-Simone-4 ) ;
5823: LD_EXP 36
5827: PPUSH
5828: LD_STRING D15-Simone-4
5830: PPUSH
5831: CALL_OW 88
// InGameOff ;
5835: CALL_OW 9
// EndMission ;
5839: CALL 83086 0 0
// end ; end_of_file
5843: END
// export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function Prepare_AMBase ; var i , un ; begin
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
5848: PPUSH
// for i = 1 to 10 do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_INT 10
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5953
// begin uc_side = 1 ;
5865: LD_ADDR_OWVAR 20
5869: PUSH
5870: LD_INT 1
5872: ST_TO_ADDR
// uc_nation = 1 ;
5873: LD_ADDR_OWVAR 21
5877: PUSH
5878: LD_INT 1
5880: ST_TO_ADDR
// hc_name =  ;
5881: LD_ADDR_OWVAR 26
5885: PUSH
5886: LD_STRING 
5888: ST_TO_ADDR
// hc_gallery =  ;
5889: LD_ADDR_OWVAR 33
5893: PUSH
5894: LD_STRING 
5896: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
5897: LD_INT 0
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: LD_INT 9
5905: PPUSH
5906: CALL_OW 380
// un = CreateHuman ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: CALL_OW 44
5919: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
5920: LD_VAR 0 3
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 49
// AM_Sols = AM_Sols ^ un ;
5935: LD_ADDR_EXP 26
5939: PUSH
5940: LD_EXP 26
5944: PUSH
5945: LD_VAR 0 3
5949: ADD
5950: ST_TO_ADDR
// end ;
5951: GO 5862
5953: POP
5954: POP
// for i = 1 to 4 do
5955: LD_ADDR_VAR 0 2
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 4
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6059
// begin uc_side = 1 ;
5971: LD_ADDR_OWVAR 20
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// uc_nation = 1 ;
5979: LD_ADDR_OWVAR 21
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// hc_name =  ;
5987: LD_ADDR_OWVAR 26
5991: PUSH
5992: LD_STRING 
5994: ST_TO_ADDR
// hc_gallery =  ;
5995: LD_ADDR_OWVAR 33
5999: PUSH
6000: LD_STRING 
6002: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
6003: LD_INT 1
6005: PPUSH
6006: LD_INT 2
6008: PPUSH
6009: LD_INT 9
6011: PPUSH
6012: CALL_OW 380
// un = CreateHuman ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: CALL_OW 44
6025: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
6026: LD_VAR 0 3
6030: PPUSH
6031: LD_INT 3
6033: PPUSH
6034: LD_INT 0
6036: PPUSH
6037: CALL_OW 49
// AM_Engineers = AM_Engineers ^ un ;
6041: LD_ADDR_EXP 27
6045: PUSH
6046: LD_EXP 27
6050: PUSH
6051: LD_VAR 0 3
6055: ADD
6056: ST_TO_ADDR
// end ;
6057: GO 5968
6059: POP
6060: POP
// for i = 1 to 6 do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 6
6073: PUSH
6074: FOR_TO
6075: IFFALSE 6165
// begin uc_side = 1 ;
6077: LD_ADDR_OWVAR 20
6081: PUSH
6082: LD_INT 1
6084: ST_TO_ADDR
// uc_nation = 1 ;
6085: LD_ADDR_OWVAR 21
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// hc_name =  ;
6093: LD_ADDR_OWVAR 26
6097: PUSH
6098: LD_STRING 
6100: ST_TO_ADDR
// hc_gallery =  ;
6101: LD_ADDR_OWVAR 33
6105: PUSH
6106: LD_STRING 
6108: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
6109: LD_INT 0
6111: PPUSH
6112: LD_INT 3
6114: PPUSH
6115: LD_INT 9
6117: PPUSH
6118: CALL_OW 380
// un = CreateHuman ;
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: CALL_OW 44
6131: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
6132: LD_VAR 0 3
6136: PPUSH
6137: LD_INT 2
6139: PPUSH
6140: LD_INT 0
6142: PPUSH
6143: CALL_OW 49
// AM_Mechs = AM_Mechs ^ un ;
6147: LD_ADDR_EXP 28
6151: PUSH
6152: LD_EXP 28
6156: PUSH
6157: LD_VAR 0 3
6161: ADD
6162: ST_TO_ADDR
// end ;
6163: GO 6074
6165: POP
6166: POP
// for i = 1 to 4 do
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_INT 4
6179: PUSH
6180: FOR_TO
6181: IFFALSE 6271
// begin uc_side = 1 ;
6183: LD_ADDR_OWVAR 20
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
// uc_nation = 1 ;
6191: LD_ADDR_OWVAR 21
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// hc_name =  ;
6199: LD_ADDR_OWVAR 26
6203: PUSH
6204: LD_STRING 
6206: ST_TO_ADDR
// hc_gallery =  ;
6207: LD_ADDR_OWVAR 33
6211: PUSH
6212: LD_STRING 
6214: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
6215: LD_INT 0
6217: PPUSH
6218: LD_INT 4
6220: PPUSH
6221: LD_INT 10
6223: PPUSH
6224: CALL_OW 380
// un = CreateHuman ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: CALL_OW 44
6237: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_INT 4
6245: PPUSH
6246: LD_INT 0
6248: PPUSH
6249: CALL_OW 49
// AM_Scientists = AM_Scientists ^ un ;
6253: LD_ADDR_EXP 29
6257: PUSH
6258: LD_EXP 29
6262: PUSH
6263: LD_VAR 0 3
6267: ADD
6268: ST_TO_ADDR
// end ;
6269: GO 6180
6271: POP
6272: POP
// end ;
6273: LD_VAR 0 1
6277: RET
// export function Prepare_AMBase_LateVersion ; var i , un ; begin
6278: LD_INT 0
6280: PPUSH
6281: PPUSH
6282: PPUSH
// for i = 1 to 10 do
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: DOUBLE
6289: LD_INT 1
6291: DEC
6292: ST_TO_ADDR
6293: LD_INT 10
6295: PUSH
6296: FOR_TO
6297: IFFALSE 6402
// begin uc_side = 1 ;
6299: LD_ADDR_OWVAR 20
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// uc_nation = 1 ;
6307: LD_ADDR_OWVAR 21
6311: PUSH
6312: LD_INT 1
6314: ST_TO_ADDR
// hc_name =  ;
6315: LD_ADDR_OWVAR 26
6319: PUSH
6320: LD_STRING 
6322: ST_TO_ADDR
// hc_gallery =  ;
6323: LD_ADDR_OWVAR 33
6327: PUSH
6328: LD_STRING 
6330: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
6331: LD_INT 0
6333: PPUSH
6334: LD_INT 1
6336: PPUSH
6337: LD_INT 9
6339: PPUSH
6340: CALL_OW 380
// un = CreateHuman ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: CALL_OW 44
6353: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
6354: LD_VAR 0 3
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: LD_INT 0
6364: PPUSH
6365: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_INT 121
6376: PPUSH
6377: LD_INT 163
6379: PPUSH
6380: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
6384: LD_ADDR_EXP 26
6388: PUSH
6389: LD_EXP 26
6393: PUSH
6394: LD_VAR 0 3
6398: ADD
6399: ST_TO_ADDR
// end ;
6400: GO 6296
6402: POP
6403: POP
// for i = 1 to 4 do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: DOUBLE
6410: LD_INT 1
6412: DEC
6413: ST_TO_ADDR
6414: LD_INT 4
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6523
// begin uc_side = 1 ;
6420: LD_ADDR_OWVAR 20
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// uc_nation = 1 ;
6428: LD_ADDR_OWVAR 21
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// hc_name =  ;
6436: LD_ADDR_OWVAR 26
6440: PUSH
6441: LD_STRING 
6443: ST_TO_ADDR
// hc_gallery =  ;
6444: LD_ADDR_OWVAR 33
6448: PUSH
6449: LD_STRING 
6451: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
6452: LD_INT 1
6454: PPUSH
6455: LD_INT 2
6457: PPUSH
6458: LD_INT 9
6460: PPUSH
6461: CALL_OW 380
// un = CreateHuman ;
6465: LD_ADDR_VAR 0 3
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
6475: LD_VAR 0 3
6479: PPUSH
6480: LD_INT 3
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 121
6497: PPUSH
6498: LD_INT 163
6500: PPUSH
6501: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
6505: LD_ADDR_EXP 27
6509: PUSH
6510: LD_EXP 27
6514: PUSH
6515: LD_VAR 0 3
6519: ADD
6520: ST_TO_ADDR
// end ;
6521: GO 6417
6523: POP
6524: POP
// for i = 1 to 6 do
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: DOUBLE
6531: LD_INT 1
6533: DEC
6534: ST_TO_ADDR
6535: LD_INT 6
6537: PUSH
6538: FOR_TO
6539: IFFALSE 6644
// begin uc_side = 1 ;
6541: LD_ADDR_OWVAR 20
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// uc_nation = 1 ;
6549: LD_ADDR_OWVAR 21
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// hc_name =  ;
6557: LD_ADDR_OWVAR 26
6561: PUSH
6562: LD_STRING 
6564: ST_TO_ADDR
// hc_gallery =  ;
6565: LD_ADDR_OWVAR 33
6569: PUSH
6570: LD_STRING 
6572: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
6573: LD_INT 0
6575: PPUSH
6576: LD_INT 3
6578: PPUSH
6579: LD_INT 9
6581: PPUSH
6582: CALL_OW 380
// un = CreateHuman ;
6586: LD_ADDR_VAR 0 3
6590: PUSH
6591: CALL_OW 44
6595: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
6596: LD_VAR 0 3
6600: PPUSH
6601: LD_INT 2
6603: PPUSH
6604: LD_INT 0
6606: PPUSH
6607: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
6611: LD_VAR 0 3
6615: PPUSH
6616: LD_INT 121
6618: PPUSH
6619: LD_INT 163
6621: PPUSH
6622: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
6626: LD_ADDR_EXP 28
6630: PUSH
6631: LD_EXP 28
6635: PUSH
6636: LD_VAR 0 3
6640: ADD
6641: ST_TO_ADDR
// end ;
6642: GO 6538
6644: POP
6645: POP
// for i = 1 to 4 do
6646: LD_ADDR_VAR 0 2
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_INT 4
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6765
// begin uc_side = 1 ;
6662: LD_ADDR_OWVAR 20
6666: PUSH
6667: LD_INT 1
6669: ST_TO_ADDR
// uc_nation = 1 ;
6670: LD_ADDR_OWVAR 21
6674: PUSH
6675: LD_INT 1
6677: ST_TO_ADDR
// hc_name =  ;
6678: LD_ADDR_OWVAR 26
6682: PUSH
6683: LD_STRING 
6685: ST_TO_ADDR
// hc_gallery =  ;
6686: LD_ADDR_OWVAR 33
6690: PUSH
6691: LD_STRING 
6693: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
6694: LD_INT 0
6696: PPUSH
6697: LD_INT 4
6699: PPUSH
6700: LD_INT 5
6702: PPUSH
6703: CALL_OW 380
// un = CreateHuman ;
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: CALL_OW 44
6716: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 4
6724: PPUSH
6725: LD_INT 0
6727: PPUSH
6728: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_INT 121
6739: PPUSH
6740: LD_INT 163
6742: PPUSH
6743: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
6747: LD_ADDR_EXP 29
6751: PUSH
6752: LD_EXP 29
6756: PUSH
6757: LD_VAR 0 3
6761: ADD
6762: ST_TO_ADDR
// end ;
6763: GO 6659
6765: POP
6766: POP
// end ;
6767: LD_VAR 0 1
6771: RET
// export function AlliedReinforcement ; var RVeh1 , RVeh2 , RVeh3 , RVeh4 , RVeh5 ; begin
6772: LD_INT 0
6774: PPUSH
6775: PPUSH
6776: PPUSH
6777: PPUSH
6778: PPUSH
6779: PPUSH
// hc_name :=  ;
6780: LD_ADDR_OWVAR 26
6784: PUSH
6785: LD_STRING 
6787: ST_TO_ADDR
// hc_gallery :=  ;
6788: LD_ADDR_OWVAR 33
6792: PUSH
6793: LD_STRING 
6795: ST_TO_ADDR
// uc_side := 7 ;
6796: LD_ADDR_OWVAR 20
6800: PUSH
6801: LD_INT 7
6803: ST_TO_ADDR
// uc_nation := nation_american ;
6804: LD_ADDR_OWVAR 21
6808: PUSH
6809: LD_INT 1
6811: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6812: LD_ADDR_OWVAR 37
6816: PUSH
6817: LD_INT 4
6819: ST_TO_ADDR
// vc_engine := engine_siberite ;
6820: LD_ADDR_OWVAR 39
6824: PUSH
6825: LD_INT 3
6827: ST_TO_ADDR
// vc_control := control_computer ;
6828: LD_ADDR_OWVAR 38
6832: PUSH
6833: LD_INT 3
6835: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
6836: LD_ADDR_OWVAR 40
6840: PUSH
6841: LD_INT 14
6843: ST_TO_ADDR
// RVeh1 := CreateVehicle ;
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: CALL_OW 45
6853: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
6854: LD_ADDR_OWVAR 37
6858: PUSH
6859: LD_INT 2
6861: ST_TO_ADDR
// vc_control := control_computer ;
6862: LD_ADDR_OWVAR 38
6866: PUSH
6867: LD_INT 3
6869: ST_TO_ADDR
// vc_weapon := us_crane ;
6870: LD_ADDR_OWVAR 40
6874: PUSH
6875: LD_INT 13
6877: ST_TO_ADDR
// RVeh2 := CreateVehicle ;
6878: LD_ADDR_VAR 0 3
6882: PUSH
6883: CALL_OW 45
6887: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
6888: LD_ADDR_OWVAR 40
6892: PUSH
6893: LD_INT 12
6895: ST_TO_ADDR
// RVeh3 := CreateVehicle ;
6896: LD_ADDR_VAR 0 4
6900: PUSH
6901: CALL_OW 45
6905: ST_TO_ADDR
// RVeh4 := CreateVehicle ;
6906: LD_ADDR_VAR 0 5
6910: PUSH
6911: CALL_OW 45
6915: ST_TO_ADDR
// RVeh5 := CreateVehicle ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: CALL_OW 45
6925: ST_TO_ADDR
// AddCargo ( RVeh3 , mat_cans , 100 ) ;
6926: LD_VAR 0 4
6930: PPUSH
6931: LD_INT 1
6933: PPUSH
6934: LD_INT 100
6936: PPUSH
6937: CALL_OW 291
// AddCargo ( RVeh4 , mat_cans , 100 ) ;
6941: LD_VAR 0 5
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 100
6951: PPUSH
6952: CALL_OW 291
// AddCargo ( RVeh5 , mat_cans , 100 ) ;
6956: LD_VAR 0 6
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: LD_INT 100
6966: PPUSH
6967: CALL_OW 291
// PlaceUnitXYR ( RVeh1 , 67 , 129 , 4 , false ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 67
6978: PPUSH
6979: LD_INT 129
6981: PPUSH
6982: LD_INT 4
6984: PPUSH
6985: LD_INT 0
6987: PPUSH
6988: CALL_OW 50
// PlaceUnitXYR ( RVeh2 , 70 , 134 , 4 , false ) ;
6992: LD_VAR 0 3
6996: PPUSH
6997: LD_INT 70
6999: PPUSH
7000: LD_INT 134
7002: PPUSH
7003: LD_INT 4
7005: PPUSH
7006: LD_INT 0
7008: PPUSH
7009: CALL_OW 50
// PlaceUnitXYR ( RVeh3 , 73 , 141 , 4 , false ) ;
7013: LD_VAR 0 4
7017: PPUSH
7018: LD_INT 73
7020: PPUSH
7021: LD_INT 141
7023: PPUSH
7024: LD_INT 4
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 50
// PlaceUnitXYR ( RVeh4 , 76 , 146 , 4 , false ) ;
7034: LD_VAR 0 5
7038: PPUSH
7039: LD_INT 76
7041: PPUSH
7042: LD_INT 146
7044: PPUSH
7045: LD_INT 4
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 50
// PlaceUnitXYR ( RVeh5 , 76 , 131 , 4 , false ) ;
7055: LD_VAR 0 6
7059: PPUSH
7060: LD_INT 76
7062: PPUSH
7063: LD_INT 131
7065: PPUSH
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 0
7071: PPUSH
7072: CALL_OW 50
// end ;
7076: LD_VAR 0 1
7080: RET
// export function Garrison_Buildings ( side , nation , min_pers , max_pers , min_sols , max_sols , max_spec_class , lvl ) ; var i , j , buildings , un_count , sol_count , spec_count , un , filter ; begin
7081: LD_INT 0
7083: PPUSH
7084: PPUSH
7085: PPUSH
7086: PPUSH
7087: PPUSH
7088: PPUSH
7089: PPUSH
7090: PPUSH
7091: PPUSH
// buildings := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
7092: LD_ADDR_VAR 0 12
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_VAR 0 1
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 21
7111: PUSH
7112: LD_INT 3
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: PUSH
7128: LD_INT 22
7130: PUSH
7131: LD_VAR 0 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 30
7142: PUSH
7143: LD_INT 32
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PPUSH
7154: CALL_OW 69
7158: DIFF
7159: ST_TO_ADDR
// case nation of 1 :
7160: LD_VAR 0 2
7164: PUSH
7165: LD_INT 1
7167: DOUBLE
7168: EQUAL
7169: IFTRUE 7173
7171: GO 7184
7173: POP
// uc_nation = nation_american ; 2 :
7174: LD_ADDR_OWVAR 21
7178: PUSH
7179: LD_INT 1
7181: ST_TO_ADDR
7182: GO 7223
7184: LD_INT 2
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7203
7192: POP
// uc_nation = nation_arabian ; 3 :
7193: LD_ADDR_OWVAR 21
7197: PUSH
7198: LD_INT 2
7200: ST_TO_ADDR
7201: GO 7223
7203: LD_INT 3
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7211
7209: GO 7222
7211: POP
// uc_nation = nation_russian ; end ;
7212: LD_ADDR_OWVAR 21
7216: PUSH
7217: LD_INT 3
7219: ST_TO_ADDR
7220: GO 7223
7222: POP
// for i = 1 to buildings do
7223: LD_ADDR_VAR 0 10
7227: PUSH
7228: DOUBLE
7229: LD_INT 1
7231: DEC
7232: ST_TO_ADDR
7233: LD_VAR 0 12
7237: PUSH
7238: FOR_TO
7239: IFFALSE 7818
// begin if IsInUnit ( buildings [ i ] ) = 0 then
7241: LD_VAR 0 12
7245: PUSH
7246: LD_VAR 0 10
7250: ARRAY
7251: PPUSH
7252: CALL_OW 310
7256: PUSH
7257: LD_INT 0
7259: EQUAL
7260: IFFALSE 7816
// begin uc_side = side ;
7262: LD_ADDR_OWVAR 20
7266: PUSH
7267: LD_VAR 0 1
7271: ST_TO_ADDR
// if GetBType ( buildings [ i ] ) = b_armoury or GetBType ( buildings [ i ] ) = b_barracks then
7272: LD_VAR 0 12
7276: PUSH
7277: LD_VAR 0 10
7281: ARRAY
7282: PPUSH
7283: CALL_OW 266
7287: PUSH
7288: LD_INT 4
7290: EQUAL
7291: PUSH
7292: LD_VAR 0 12
7296: PUSH
7297: LD_VAR 0 10
7301: ARRAY
7302: PPUSH
7303: CALL_OW 266
7307: PUSH
7308: LD_INT 5
7310: EQUAL
7311: OR
7312: IFFALSE 7566
// begin sol_count = Rand ( min_sols , max_sols ) ;
7314: LD_ADDR_VAR 0 14
7318: PUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: LD_VAR 0 6
7328: PPUSH
7329: CALL_OW 12
7333: ST_TO_ADDR
// for j = 1 to sol_count do
7334: LD_ADDR_VAR 0 11
7338: PUSH
7339: DOUBLE
7340: LD_INT 1
7342: DEC
7343: ST_TO_ADDR
7344: LD_VAR 0 14
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7396
// begin PrepareSoldier ( 0 , lvl ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_VAR 0 8
7359: PPUSH
7360: CALL_OW 381
// un = CreateHuman ;
7364: LD_ADDR_VAR 0 16
7368: PUSH
7369: CALL_OW 44
7373: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
7374: LD_VAR 0 16
7378: PPUSH
7379: LD_VAR 0 12
7383: PUSH
7384: LD_VAR 0 10
7388: ARRAY
7389: PPUSH
7390: CALL_OW 52
// end ;
7394: GO 7349
7396: POP
7397: POP
// if GetBType ( buildings [ i ] ) = b_barracks then
7398: LD_VAR 0 12
7402: PUSH
7403: LD_VAR 0 10
7407: ARRAY
7408: PPUSH
7409: CALL_OW 266
7413: PUSH
7414: LD_INT 5
7416: EQUAL
7417: IFFALSE 7564
// begin spec_count = Rand ( 0 , max_spec_class ) ;
7419: LD_ADDR_VAR 0 15
7423: PUSH
7424: LD_INT 0
7426: PPUSH
7427: LD_VAR 0 7
7431: PPUSH
7432: CALL_OW 12
7436: ST_TO_ADDR
// for j = 1 to sol_count do
7437: LD_ADDR_VAR 0 11
7441: PUSH
7442: DOUBLE
7443: LD_INT 1
7445: DEC
7446: ST_TO_ADDR
7447: LD_VAR 0 14
7451: PUSH
7452: FOR_TO
7453: IFFALSE 7562
// begin PrepareSoldier ( 0 , lvl ) ;
7455: LD_INT 0
7457: PPUSH
7458: LD_VAR 0 8
7462: PPUSH
7463: CALL_OW 381
// case nation of 1 :
7467: LD_VAR 0 2
7471: PUSH
7472: LD_INT 1
7474: DOUBLE
7475: EQUAL
7476: IFTRUE 7480
7478: GO 7491
7480: POP
// hc_class = class_sniper ; 2 :
7481: LD_ADDR_OWVAR 28
7485: PUSH
7486: LD_INT 5
7488: ST_TO_ADDR
7489: GO 7530
7491: LD_INT 2
7493: DOUBLE
7494: EQUAL
7495: IFTRUE 7499
7497: GO 7510
7499: POP
// hc_class = class_mortar ; 3 :
7500: LD_ADDR_OWVAR 28
7504: PUSH
7505: LD_INT 8
7507: ST_TO_ADDR
7508: GO 7530
7510: LD_INT 3
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7529
7518: POP
// hc_class = class_bazooker ; end ;
7519: LD_ADDR_OWVAR 28
7523: PUSH
7524: LD_INT 9
7526: ST_TO_ADDR
7527: GO 7530
7529: POP
// un = CreateHuman ;
7530: LD_ADDR_VAR 0 16
7534: PUSH
7535: CALL_OW 44
7539: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
7540: LD_VAR 0 16
7544: PPUSH
7545: LD_VAR 0 12
7549: PUSH
7550: LD_VAR 0 10
7554: ARRAY
7555: PPUSH
7556: CALL_OW 52
// end ;
7560: GO 7452
7562: POP
7563: POP
// end ; end else
7564: GO 7586
// un_count = Rand ( min_pers , max_pers ) ;
7566: LD_ADDR_VAR 0 13
7570: PUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: LD_VAR 0 4
7580: PPUSH
7581: CALL_OW 12
7585: ST_TO_ADDR
// for j = 1 to un_count do
7586: LD_ADDR_VAR 0 11
7590: PUSH
7591: DOUBLE
7592: LD_INT 1
7594: DEC
7595: ST_TO_ADDR
7596: LD_VAR 0 13
7600: PUSH
7601: FOR_TO
7602: IFFALSE 7814
// begin case GetBType ( buildings [ i ] ) of b_depot :
7604: LD_VAR 0 12
7608: PUSH
7609: LD_VAR 0 10
7613: ARRAY
7614: PPUSH
7615: CALL_OW 266
7619: PUSH
7620: LD_INT 0
7622: DOUBLE
7623: EQUAL
7624: IFTRUE 7628
7626: GO 7643
7628: POP
// PrepareEngineer ( 0 , lvl ) ; b_warehouse :
7629: LD_INT 0
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 382
7641: GO 7782
7643: LD_INT 1
7645: DOUBLE
7646: EQUAL
7647: IFTRUE 7651
7649: GO 7666
7651: POP
// PrepareEngineer ( 0 , lvl ) ; b_workshop :
7652: LD_INT 0
7654: PPUSH
7655: LD_VAR 0 8
7659: PPUSH
7660: CALL_OW 382
7664: GO 7782
7666: LD_INT 2
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7689
7674: POP
// PrepareMechanic ( 0 , lvl ) ; b_factory :
7675: LD_INT 0
7677: PPUSH
7678: LD_VAR 0 8
7682: PPUSH
7683: CALL_OW 383
7687: GO 7782
7689: LD_INT 3
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7712
7697: POP
// PrepareMechanic ( 0 , lvl ) ; b_lab :
7698: LD_INT 0
7700: PPUSH
7701: LD_VAR 0 8
7705: PPUSH
7706: CALL_OW 383
7710: GO 7782
7712: LD_INT 6
7714: DOUBLE
7715: EQUAL
7716: IFTRUE 7720
7718: GO 7735
7720: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_half :
7721: LD_INT 0
7723: PPUSH
7724: LD_VAR 0 8
7728: PPUSH
7729: CALL_OW 384
7733: GO 7782
7735: LD_INT 7
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7758
7743: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_full :
7744: LD_INT 0
7746: PPUSH
7747: LD_VAR 0 8
7751: PPUSH
7752: CALL_OW 384
7756: GO 7782
7758: LD_INT 8
7760: DOUBLE
7761: EQUAL
7762: IFTRUE 7766
7764: GO 7781
7766: POP
// PrepareScientist ( 0 , lvl ) ; end ;
7767: LD_INT 0
7769: PPUSH
7770: LD_VAR 0 8
7774: PPUSH
7775: CALL_OW 384
7779: GO 7782
7781: POP
// un = CreateHuman ;
7782: LD_ADDR_VAR 0 16
7786: PUSH
7787: CALL_OW 44
7791: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
7792: LD_VAR 0 16
7796: PPUSH
7797: LD_VAR 0 12
7801: PUSH
7802: LD_VAR 0 10
7806: ARRAY
7807: PPUSH
7808: CALL_OW 52
// end ;
7812: GO 7601
7814: POP
7815: POP
// end ; end ;
7816: GO 7238
7818: POP
7819: POP
// end ;
7820: LD_VAR 0 9
7824: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
7825: LD_INT 0
7827: PPUSH
7828: PPUSH
// dir := GetDir ( b ) ;
7829: LD_ADDR_VAR 0 4
7833: PUSH
7834: LD_VAR 0 2
7838: PPUSH
7839: CALL_OW 254
7843: ST_TO_ADDR
// if dir < 3 then
7844: LD_VAR 0 4
7848: PUSH
7849: LD_INT 3
7851: LESS
7852: IFFALSE 7870
// dir := dir + 3 else
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: LD_VAR 0 4
7863: PUSH
7864: LD_INT 3
7866: PLUS
7867: ST_TO_ADDR
7868: GO 7884
// dir := dir - 3 ;
7870: LD_ADDR_VAR 0 4
7874: PUSH
7875: LD_VAR 0 4
7879: PUSH
7880: LD_INT 3
7882: MINUS
7883: ST_TO_ADDR
// SetDir ( un , dir ) ;
7884: LD_VAR 0 1
7888: PPUSH
7889: LD_VAR 0 4
7893: PPUSH
7894: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_VAR 0 2
7907: PPUSH
7908: CALL_OW 52
// end ;
7912: LD_VAR 0 3
7916: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
7917: LD_INT 0
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
7923: LD_ADDR_VAR 0 4
7927: PUSH
7928: LD_INT 22
7930: PUSH
7931: LD_VAR 0 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 30
7952: PUSH
7953: LD_INT 31
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 69
7969: ST_TO_ADDR
// for i = 1 to filter do
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: DOUBLE
7976: LD_INT 1
7978: DEC
7979: ST_TO_ADDR
7980: LD_VAR 0 4
7984: PUSH
7985: FOR_TO
7986: IFFALSE 8081
// if IsInUnit ( filter [ i ] ) = 0 then
7988: LD_VAR 0 4
7992: PUSH
7993: LD_VAR 0 3
7997: ARRAY
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 0
8006: EQUAL
8007: IFFALSE 8079
// begin uc_nation = nation_russian ;
8009: LD_ADDR_OWVAR 21
8013: PUSH
8014: LD_INT 3
8016: ST_TO_ADDR
// uc_side = side ;
8017: LD_ADDR_OWVAR 20
8021: PUSH
8022: LD_VAR 0 1
8026: ST_TO_ADDR
// PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8027: LD_INT 1
8029: PPUSH
8030: LD_EXP 58
8034: PPUSH
8035: LD_EXP 59
8039: PPUSH
8040: CALL_OW 12
8044: PPUSH
8045: CALL_OW 381
// un := CreateHuman ;
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: CALL_OW 44
8058: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
8059: LD_VAR 0 5
8063: PPUSH
8064: LD_VAR 0 4
8068: PUSH
8069: LD_VAR 0 3
8073: ARRAY
8074: PPUSH
8075: CALL 7825 0 2
// end ;
8079: GO 7985
8081: POP
8082: POP
// end ;
8083: LD_VAR 0 2
8087: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
// uc_side := side ;
8094: LD_ADDR_OWVAR 20
8098: PUSH
8099: LD_VAR 0 1
8103: ST_TO_ADDR
// uc_nation := 3 ;
8104: LD_ADDR_OWVAR 21
8108: PUSH
8109: LD_INT 3
8111: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
8112: LD_ADDR_VAR 0 3
8116: PUSH
8117: LD_INT 22
8119: PUSH
8120: LD_VAR 0 1
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 30
8131: PUSH
8132: LD_INT 32
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 58
8141: PUSH
8142: EMPTY
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8196
// begin PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8158: LD_INT 1
8160: PPUSH
8161: LD_EXP 58
8165: PPUSH
8166: LD_EXP 59
8170: PPUSH
8171: CALL_OW 12
8175: PPUSH
8176: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8180: CALL_OW 44
8184: PPUSH
8185: LD_VAR 0 3
8189: PPUSH
8190: CALL_OW 52
// end ;
8194: GO 8155
8196: POP
8197: POP
// end ;
8198: LD_VAR 0 2
8202: RET
// export Botnicov_Sols ; export function Prepare_Escapees ; var i , un ; begin
8203: LD_INT 0
8205: PPUSH
8206: PPUSH
8207: PPUSH
// for i = 1 to 7 do
8208: LD_ADDR_VAR 0 2
8212: PUSH
8213: DOUBLE
8214: LD_INT 1
8216: DEC
8217: ST_TO_ADDR
8218: LD_INT 7
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8312
// begin uc_side = 5 ;
8224: LD_ADDR_OWVAR 20
8228: PUSH
8229: LD_INT 5
8231: ST_TO_ADDR
// uc_nation = 3 ;
8232: LD_ADDR_OWVAR 21
8236: PUSH
8237: LD_INT 3
8239: ST_TO_ADDR
// hc_name =  ;
8240: LD_ADDR_OWVAR 26
8244: PUSH
8245: LD_STRING 
8247: ST_TO_ADDR
// hc_gallery =  ;
8248: LD_ADDR_OWVAR 33
8252: PUSH
8253: LD_STRING 
8255: ST_TO_ADDR
// PrepareHuman ( false , 1 , 8 ) ;
8256: LD_INT 0
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: LD_INT 8
8264: PPUSH
8265: CALL_OW 380
// un = CreateHuman ;
8269: LD_ADDR_VAR 0 3
8273: PUSH
8274: CALL_OW 44
8278: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
8279: LD_VAR 0 3
8283: PPUSH
8284: LD_INT 8
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
8294: LD_ADDR_EXP 30
8298: PUSH
8299: LD_EXP 30
8303: PUSH
8304: LD_VAR 0 3
8308: ADD
8309: ST_TO_ADDR
// end ;
8310: GO 8221
8312: POP
8313: POP
// for i = 1 to 2 do
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: DOUBLE
8320: LD_INT 1
8322: DEC
8323: ST_TO_ADDR
8324: LD_INT 2
8326: PUSH
8327: FOR_TO
8328: IFFALSE 8418
// begin uc_side = 5 ;
8330: LD_ADDR_OWVAR 20
8334: PUSH
8335: LD_INT 5
8337: ST_TO_ADDR
// uc_nation = 3 ;
8338: LD_ADDR_OWVAR 21
8342: PUSH
8343: LD_INT 3
8345: ST_TO_ADDR
// hc_name =  ;
8346: LD_ADDR_OWVAR 26
8350: PUSH
8351: LD_STRING 
8353: ST_TO_ADDR
// hc_gallery =  ;
8354: LD_ADDR_OWVAR 33
8358: PUSH
8359: LD_STRING 
8361: ST_TO_ADDR
// PrepareHuman ( false , 2 , 8 ) ;
8362: LD_INT 0
8364: PPUSH
8365: LD_INT 2
8367: PPUSH
8368: LD_INT 8
8370: PPUSH
8371: CALL_OW 380
// un = CreateHuman ;
8375: LD_ADDR_VAR 0 3
8379: PUSH
8380: CALL_OW 44
8384: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
8385: LD_VAR 0 3
8389: PPUSH
8390: LD_INT 8
8392: PPUSH
8393: LD_INT 0
8395: PPUSH
8396: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
8400: LD_ADDR_EXP 30
8404: PUSH
8405: LD_EXP 30
8409: PUSH
8410: LD_VAR 0 3
8414: ADD
8415: ST_TO_ADDR
// end ;
8416: GO 8327
8418: POP
8419: POP
// for i = 1 to 3 do
8420: LD_ADDR_VAR 0 2
8424: PUSH
8425: DOUBLE
8426: LD_INT 1
8428: DEC
8429: ST_TO_ADDR
8430: LD_INT 3
8432: PUSH
8433: FOR_TO
8434: IFFALSE 8524
// begin uc_side = 5 ;
8436: LD_ADDR_OWVAR 20
8440: PUSH
8441: LD_INT 5
8443: ST_TO_ADDR
// uc_nation = 3 ;
8444: LD_ADDR_OWVAR 21
8448: PUSH
8449: LD_INT 3
8451: ST_TO_ADDR
// hc_name =  ;
8452: LD_ADDR_OWVAR 26
8456: PUSH
8457: LD_STRING 
8459: ST_TO_ADDR
// hc_gallery =  ;
8460: LD_ADDR_OWVAR 33
8464: PUSH
8465: LD_STRING 
8467: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
8468: LD_INT 0
8470: PPUSH
8471: LD_INT 4
8473: PPUSH
8474: LD_INT 10
8476: PPUSH
8477: CALL_OW 380
// un = CreateHuman ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: CALL_OW 44
8490: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
8491: LD_VAR 0 3
8495: PPUSH
8496: LD_INT 8
8498: PPUSH
8499: LD_INT 0
8501: PPUSH
8502: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
8506: LD_ADDR_EXP 30
8510: PUSH
8511: LD_EXP 30
8515: PUSH
8516: LD_VAR 0 3
8520: ADD
8521: ST_TO_ADDR
// end ;
8522: GO 8433
8524: POP
8525: POP
// PlaceUnitArea ( Botnicov , BotnicovSoldiersSpawn , false ) ;
8526: LD_EXP 47
8530: PPUSH
8531: LD_INT 8
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL_OW 49
// ComMoveXY ( Botnicov_Sols , 245 , 84 ) ;
8541: LD_EXP 30
8545: PPUSH
8546: LD_INT 245
8548: PPUSH
8549: LD_INT 84
8551: PPUSH
8552: CALL_OW 111
// ComMoveXY ( Botnicov , 245 , 84 ) ;
8556: LD_EXP 47
8560: PPUSH
8561: LD_INT 245
8563: PPUSH
8564: LD_INT 84
8566: PPUSH
8567: CALL_OW 111
// end ;
8571: LD_VAR 0 1
8575: RET
// export function Dialogue_Barnes_General ; var i ; begin
8576: LD_INT 0
8578: PPUSH
8579: PPUSH
// InGameOn ;
8580: CALL_OW 8
// CenterOnUnits ( Barnes ) ;
8584: LD_EXP 43
8588: PPUSH
8589: CALL_OW 85
// Wait ( 0 0$2 ) ;
8593: LD_INT 70
8595: PPUSH
8596: CALL_OW 67
// SayRadio ( General , D9b-Unknown-1 ) ;
8600: LD_EXP 50
8604: PPUSH
8605: LD_STRING D9b-Unknown-1
8607: PPUSH
8608: CALL_OW 94
// Say ( Barnes , D9b-Barnes-1 ) ;
8612: LD_EXP 43
8616: PPUSH
8617: LD_STRING D9b-Barnes-1
8619: PPUSH
8620: CALL_OW 88
// SayRadio ( General , D9b-Unknown-2 ) ;
8624: LD_EXP 50
8628: PPUSH
8629: LD_STRING D9b-Unknown-2
8631: PPUSH
8632: CALL_OW 94
// Say ( Barnes , D9b-Barnes-2 ) ;
8636: LD_EXP 43
8640: PPUSH
8641: LD_STRING D9b-Barnes-2
8643: PPUSH
8644: CALL_OW 88
// SayRadio ( General , D9b-Unknown-3 ) ;
8648: LD_EXP 50
8652: PPUSH
8653: LD_STRING D9b-Unknown-3
8655: PPUSH
8656: CALL_OW 94
// Say ( Barnes , D9b-Barnes-3 ) ;
8660: LD_EXP 43
8664: PPUSH
8665: LD_STRING D9b-Barnes-3
8667: PPUSH
8668: CALL_OW 88
// SayRadio ( General , D9b-Unknown-4 ) ;
8672: LD_EXP 50
8676: PPUSH
8677: LD_STRING D9b-Unknown-4
8679: PPUSH
8680: CALL_OW 94
// Say ( Barnes , D9b-Barnes-4 ) ;
8684: LD_EXP 43
8688: PPUSH
8689: LD_STRING D9b-Barnes-4
8691: PPUSH
8692: CALL_OW 88
// SayRadio ( General , D9b-Unknown-5 ) ;
8696: LD_EXP 50
8700: PPUSH
8701: LD_STRING D9b-Unknown-5
8703: PPUSH
8704: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5 ) ;
8708: LD_EXP 43
8712: PPUSH
8713: LD_STRING D9b-Barnes-5
8715: PPUSH
8716: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6 ) ;
8720: LD_EXP 50
8724: PPUSH
8725: LD_STRING D9b-Unknown-6
8727: PPUSH
8728: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5a ) ;
8732: LD_EXP 43
8736: PPUSH
8737: LD_STRING D9b-Barnes-5a
8739: PPUSH
8740: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6a ) ;
8744: LD_EXP 50
8748: PPUSH
8749: LD_STRING D9b-Unknown-6a
8751: PPUSH
8752: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5b ) ;
8756: LD_EXP 43
8760: PPUSH
8761: LD_STRING D9b-Barnes-5b
8763: PPUSH
8764: CALL_OW 88
// SayRadio ( General , D9b-Unknown-7 ) ;
8768: LD_EXP 50
8772: PPUSH
8773: LD_STRING D9b-Unknown-7
8775: PPUSH
8776: CALL_OW 94
// Say ( Barnes , D9b-Barnes-6 ) ;
8780: LD_EXP 43
8784: PPUSH
8785: LD_STRING D9b-Barnes-6
8787: PPUSH
8788: CALL_OW 88
// Say ( Barnes , D9b-Barnes-7 ) ;
8792: LD_EXP 43
8796: PPUSH
8797: LD_STRING D9b-Barnes-7
8799: PPUSH
8800: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 50 , 95 ) ;
8804: LD_INT 22
8806: PUSH
8807: LD_INT 1
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: PPUSH
8819: LD_INT 50
8821: PPUSH
8822: LD_INT 95
8824: PPUSH
8825: CALL_OW 111
// DWait ( 0 0$5 ) ;
8829: LD_INT 175
8831: PPUSH
8832: CALL_OW 68
// CenterOnXY ( 264 , 105 ) ;
8836: LD_INT 264
8838: PPUSH
8839: LD_INT 105
8841: PPUSH
8842: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: PUSH
8880: FOR_IN
8881: IFFALSE 8894
// RemoveUnit ( i ) ;
8883: LD_VAR 0 2
8887: PPUSH
8888: CALL_OW 64
8892: GO 8880
8894: POP
8895: POP
// Say ( Simone , D9b-Simone-1 ) ;
8896: LD_EXP 36
8900: PPUSH
8901: LD_STRING D9b-Simone-1
8903: PPUSH
8904: CALL_OW 88
// DWait ( 0 0$2 ) ;
8908: LD_INT 70
8910: PPUSH
8911: CALL_OW 68
// Say ( Simone , D9b-Simone-2 ) ;
8915: LD_EXP 36
8919: PPUSH
8920: LD_STRING D9b-Simone-2
8922: PPUSH
8923: CALL_OW 88
// DWait ( 0 0$2 ) ;
8927: LD_INT 70
8929: PPUSH
8930: CALL_OW 68
// Say ( Miller , D9b-Miller-1 ) ;
8934: LD_EXP 37
8938: PPUSH
8939: LD_STRING D9b-Miller-1
8941: PPUSH
8942: CALL_OW 88
// Say ( Simone , D9b-Simone-3 ) ;
8946: LD_EXP 36
8950: PPUSH
8951: LD_STRING D9b-Simone-3
8953: PPUSH
8954: CALL_OW 88
// DWait ( 0 0$1 ) ;
8958: LD_INT 35
8960: PPUSH
8961: CALL_OW 68
// InGameOff ;
8965: CALL_OW 9
// Say ( Simone , D10-Simone-1 ) ;
8969: LD_EXP 36
8973: PPUSH
8974: LD_STRING D10-Simone-1
8976: PPUSH
8977: CALL_OW 88
// Say ( Miller , D10-Miller-1 ) ;
8981: LD_EXP 37
8985: PPUSH
8986: LD_STRING D10-Miller-1
8988: PPUSH
8989: CALL_OW 88
// Say ( Miller , D10-Miller-2 ) ;
8993: LD_EXP 37
8997: PPUSH
8998: LD_STRING D10-Miller-2
9000: PPUSH
9001: CALL_OW 88
// Say ( Simone , D10-Simone-2 ) ;
9005: LD_EXP 36
9009: PPUSH
9010: LD_STRING D10-Simone-2
9012: PPUSH
9013: CALL_OW 88
// Say ( Miller , D10-Miller-3 ) ;
9017: LD_EXP 37
9021: PPUSH
9022: LD_STRING D10-Miller-3
9024: PPUSH
9025: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9029: LD_STRING M3
9031: PPUSH
9032: CALL_OW 337
// end ;
9036: LD_VAR 0 1
9040: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
9041: LD_INT 0
9043: PPUSH
// if not unit then
9044: LD_VAR 0 1
9048: NOT
9049: IFFALSE 9053
// exit ;
9051: GO 9087
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
9053: LD_VAR 0 1
9057: PPUSH
9058: LD_VAR 0 2
9062: PUSH
9063: LD_VAR 0 3
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_VAR 0 1
9076: PPUSH
9077: CALL_OW 258
9081: ARRAY
9082: PPUSH
9083: CALL_OW 88
// end ;
9087: LD_VAR 0 4
9091: RET
// export function Prepare_RU2 ; var i , un ; begin
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
9096: PPUSH
// uc_side = 6 ;
9097: LD_ADDR_OWVAR 20
9101: PUSH
9102: LD_INT 6
9104: ST_TO_ADDR
// uc_nation = 3 ;
9105: LD_ADDR_OWVAR 21
9109: PUSH
9110: LD_INT 3
9112: ST_TO_ADDR
// for i = 1 to 24 do
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: DOUBLE
9119: LD_INT 1
9121: DEC
9122: ST_TO_ADDR
9123: LD_INT 24
9125: PUSH
9126: FOR_TO
9127: IFFALSE 9228
// begin uc_side = 6 ;
9129: LD_ADDR_OWVAR 20
9133: PUSH
9134: LD_INT 6
9136: ST_TO_ADDR
// uc_nation = 3 ;
9137: LD_ADDR_OWVAR 21
9141: PUSH
9142: LD_INT 3
9144: ST_TO_ADDR
// hc_gallery =  ;
9145: LD_ADDR_OWVAR 33
9149: PUSH
9150: LD_STRING 
9152: ST_TO_ADDR
// hc_name =  ;
9153: LD_ADDR_OWVAR 26
9157: PUSH
9158: LD_STRING 
9160: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9161: LD_INT 0
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: LD_EXP 58
9171: PPUSH
9172: LD_EXP 59
9176: PPUSH
9177: CALL_OW 12
9181: PPUSH
9182: CALL_OW 380
// un = CreateHuman ;
9186: LD_ADDR_VAR 0 3
9190: PUSH
9191: CALL_OW 44
9195: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 13
9203: PPUSH
9204: LD_INT 0
9206: PPUSH
9207: CALL_OW 49
// ComAgressiveMove ( un , 88 , 81 ) ;
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 88
9218: PPUSH
9219: LD_INT 81
9221: PPUSH
9222: CALL_OW 114
// end ;
9226: GO 9126
9228: POP
9229: POP
// for i = 1 to 8 do
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: DOUBLE
9236: LD_INT 1
9238: DEC
9239: ST_TO_ADDR
9240: LD_INT 8
9242: PUSH
9243: FOR_TO
9244: IFFALSE 9330
// begin uc_side = 6 ;
9246: LD_ADDR_OWVAR 20
9250: PUSH
9251: LD_INT 6
9253: ST_TO_ADDR
// uc_nation = 3 ;
9254: LD_ADDR_OWVAR 21
9258: PUSH
9259: LD_INT 3
9261: ST_TO_ADDR
// hc_gallery =  ;
9262: LD_ADDR_OWVAR 33
9266: PUSH
9267: LD_STRING 
9269: ST_TO_ADDR
// hc_name =  ;
9270: LD_ADDR_OWVAR 26
9274: PUSH
9275: LD_STRING 
9277: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9278: LD_INT 0
9280: PPUSH
9281: LD_INT 2
9283: PPUSH
9284: LD_EXP 58
9288: PPUSH
9289: LD_EXP 59
9293: PPUSH
9294: CALL_OW 12
9298: PPUSH
9299: CALL_OW 380
// un = CreateHuman ;
9303: LD_ADDR_VAR 0 3
9307: PUSH
9308: CALL_OW 44
9312: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
9313: LD_VAR 0 3
9317: PPUSH
9318: LD_INT 13
9320: PPUSH
9321: LD_INT 0
9323: PPUSH
9324: CALL_OW 49
// end ;
9328: GO 9243
9330: POP
9331: POP
// for i = 1 to 6 do
9332: LD_ADDR_VAR 0 2
9336: PUSH
9337: DOUBLE
9338: LD_INT 1
9340: DEC
9341: ST_TO_ADDR
9342: LD_INT 6
9344: PUSH
9345: FOR_TO
9346: IFFALSE 9432
// begin uc_side = 6 ;
9348: LD_ADDR_OWVAR 20
9352: PUSH
9353: LD_INT 6
9355: ST_TO_ADDR
// uc_nation = 3 ;
9356: LD_ADDR_OWVAR 21
9360: PUSH
9361: LD_INT 3
9363: ST_TO_ADDR
// hc_gallery =  ;
9364: LD_ADDR_OWVAR 33
9368: PUSH
9369: LD_STRING 
9371: ST_TO_ADDR
// hc_name =  ;
9372: LD_ADDR_OWVAR 26
9376: PUSH
9377: LD_STRING 
9379: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9380: LD_INT 0
9382: PPUSH
9383: LD_INT 3
9385: PPUSH
9386: LD_EXP 58
9390: PPUSH
9391: LD_EXP 59
9395: PPUSH
9396: CALL_OW 12
9400: PPUSH
9401: CALL_OW 380
// un = CreateHuman ;
9405: LD_ADDR_VAR 0 3
9409: PUSH
9410: CALL_OW 44
9414: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
9415: LD_VAR 0 3
9419: PPUSH
9420: LD_INT 13
9422: PPUSH
9423: LD_INT 0
9425: PPUSH
9426: CALL_OW 49
// end ;
9430: GO 9345
9432: POP
9433: POP
// for i = 1 to 6 do
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: DOUBLE
9440: LD_INT 1
9442: DEC
9443: ST_TO_ADDR
9444: LD_INT 6
9446: PUSH
9447: FOR_TO
9448: IFFALSE 9534
// begin uc_side = 6 ;
9450: LD_ADDR_OWVAR 20
9454: PUSH
9455: LD_INT 6
9457: ST_TO_ADDR
// uc_nation = 3 ;
9458: LD_ADDR_OWVAR 21
9462: PUSH
9463: LD_INT 3
9465: ST_TO_ADDR
// hc_gallery =  ;
9466: LD_ADDR_OWVAR 33
9470: PUSH
9471: LD_STRING 
9473: ST_TO_ADDR
// hc_name =  ;
9474: LD_ADDR_OWVAR 26
9478: PUSH
9479: LD_STRING 
9481: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9482: LD_INT 0
9484: PPUSH
9485: LD_INT 4
9487: PPUSH
9488: LD_EXP 58
9492: PPUSH
9493: LD_EXP 59
9497: PPUSH
9498: CALL_OW 12
9502: PPUSH
9503: CALL_OW 380
// un = CreateHuman ;
9507: LD_ADDR_VAR 0 3
9511: PUSH
9512: CALL_OW 44
9516: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 13
9524: PPUSH
9525: LD_INT 0
9527: PPUSH
9528: CALL_OW 49
// end ;
9532: GO 9447
9534: POP
9535: POP
// mc_bases := Replace ( mc_bases , 2 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
9536: LD_ADDR_EXP 69
9540: PUSH
9541: LD_EXP 69
9545: PPUSH
9546: LD_INT 2
9548: PPUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 6
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 21
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: CALL_OW 1
9582: ST_TO_ADDR
// MC_Start ;
9583: CALL 62696 0 0
// end ; end_of_file
9587: LD_VAR 0 1
9591: RET
// on UnitDestroyed ( un ) do begin if un = Simone then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_EXP 36
9601: EQUAL
9602: IFFALSE 9630
// begin ExclusiveOn ;
9604: CALL_OW 4
// Wait ( 0 0$2 ) ;
9608: LD_INT 70
9610: PPUSH
9611: CALL_OW 67
// YouLost ( Simone ) ;
9615: LD_STRING Simone
9617: PPUSH
9618: CALL_OW 104
// ExclusiveOff ;
9622: CALL_OW 5
// exit ;
9626: GO 9851
// end else
9628: GO 9842
// if un = Miller then
9630: LD_VAR 0 1
9634: PUSH
9635: LD_EXP 37
9639: EQUAL
9640: IFFALSE 9668
// begin ExclusiveOn ;
9642: CALL_OW 4
// Wait ( 0 0$2 ) ;
9646: LD_INT 70
9648: PPUSH
9649: CALL_OW 67
// YouLost ( Miller ) ;
9653: LD_STRING Miller
9655: PPUSH
9656: CALL_OW 104
// ExclusiveOff ;
9660: CALL_OW 5
// exit ;
9664: GO 9851
// end else
9666: GO 9842
// if un = Esther then
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 38
9677: EQUAL
9678: IFFALSE 9706
// begin ExclusiveOn ;
9680: CALL_OW 4
// Wait ( 0 0$2 ) ;
9684: LD_INT 70
9686: PPUSH
9687: CALL_OW 67
// YouLost ( Esther ) ;
9691: LD_STRING Esther
9693: PPUSH
9694: CALL_OW 104
// ExclusiveOff ;
9698: CALL_OW 5
// exit ;
9702: GO 9851
// end else
9704: GO 9842
// if un = Bradford and not BradfordAssault then
9706: LD_VAR 0 1
9710: PUSH
9711: LD_EXP 42
9715: EQUAL
9716: PUSH
9717: LD_EXP 2
9721: NOT
9722: AND
9723: IFFALSE 9751
// begin ExclusiveOn ;
9725: CALL_OW 4
// Wait ( 0 0$2 ) ;
9729: LD_INT 70
9731: PPUSH
9732: CALL_OW 67
// YouLost ( Bradford ) ;
9736: LD_STRING Bradford
9738: PPUSH
9739: CALL_OW 104
// ExclusiveOff ;
9743: CALL_OW 5
// exit ;
9747: GO 9851
// end else
9749: GO 9842
// if un = Barnes then
9751: LD_VAR 0 1
9755: PUSH
9756: LD_EXP 43
9760: EQUAL
9761: IFFALSE 9789
// begin ExclusiveOn ;
9763: CALL_OW 4
// Wait ( 0 0$2 ) ;
9767: LD_INT 70
9769: PPUSH
9770: CALL_OW 67
// YouLost ( Barnes ) ;
9774: LD_STRING Barnes
9776: PPUSH
9777: CALL_OW 104
// ExclusiveOff ;
9781: CALL_OW 5
// exit ;
9785: GO 9851
// end else
9787: GO 9842
// if un = RU_Courier then
9789: LD_VAR 0 1
9793: PUSH
9794: LD_EXP 13
9798: EQUAL
9799: IFFALSE 9823
// begin RU_Courier_Dead := true ;
9801: LD_ADDR_EXP 17
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// Say ( Miller , D8b-Miller-1 ) ;
9809: LD_EXP 37
9813: PPUSH
9814: LD_STRING D8b-Miller-1
9816: PPUSH
9817: CALL_OW 88
// end else
9821: GO 9842
// if un = Dvalishvili then
9823: LD_VAR 0 1
9827: PUSH
9828: LD_EXP 46
9832: EQUAL
9833: IFFALSE 9842
// begin ChangeMissionObjectives ( M3b ) ;
9835: LD_STRING M3b
9837: PPUSH
9838: CALL_OW 337
// end ; MCE_UnitDestroyed ( un ) ;
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL 80622 0 1
// end ;
9851: PPOPN 1
9853: END
// on UnitGoesToRed ( un ) do begin if un = Bradford then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 42
9863: EQUAL
9864: IFFALSE 9902
// begin DoNotAttack ( 3 , Bradford ) ;
9866: LD_INT 3
9868: PPUSH
9869: LD_EXP 42
9873: PPUSH
9874: CALL_OW 471
// ForceSay ( Bradford , D5a-Bradford-3 ) ;
9878: LD_EXP 42
9882: PPUSH
9883: LD_STRING D5a-Bradford-3
9885: PPUSH
9886: CALL_OW 91
// SetLives ( Bradford , 0 ) ;
9890: LD_EXP 42
9894: PPUSH
9895: LD_INT 0
9897: PPUSH
9898: CALL_OW 234
// end ; if un = Richford then
9902: LD_VAR 0 1
9906: PUSH
9907: LD_EXP 49
9911: EQUAL
9912: IFFALSE 9950
// begin DoNotAttack ( 3 , Richford ) ;
9914: LD_INT 3
9916: PPUSH
9917: LD_EXP 49
9921: PPUSH
9922: CALL_OW 471
// ForceSay ( Richford , D5a-Richford-2 ) ;
9926: LD_EXP 49
9930: PPUSH
9931: LD_STRING D5a-Richford-2
9933: PPUSH
9934: CALL_OW 91
// SetLives ( Richford , 0 ) ;
9938: LD_EXP 49
9942: PPUSH
9943: LD_INT 0
9945: PPUSH
9946: CALL_OW 234
// end ; if un = CourierVeh then
9950: LD_VAR 0 1
9954: PUSH
9955: LD_EXP 12
9959: EQUAL
9960: IFFALSE 9977
// begin ComMoveXY ( RU_Courier , 123 , 3 ) ;
9962: LD_EXP 13
9966: PPUSH
9967: LD_INT 123
9969: PPUSH
9970: LD_INT 3
9972: PPUSH
9973: CALL_OW 111
// end ; if un = Sidorovich then
9977: LD_VAR 0 1
9981: PUSH
9982: LD_EXP 44
9986: EQUAL
9987: IFFALSE 10013
// begin ForceSay ( Sidorovich , D9a-Sidor-1 ) ;
9989: LD_EXP 44
9993: PPUSH
9994: LD_STRING D9a-Sidor-1
9996: PPUSH
9997: CALL_OW 91
// Say ( Simone , D9a-Simone-1 ) ;
10001: LD_EXP 36
10005: PPUSH
10006: LD_STRING D9a-Simone-1
10008: PPUSH
10009: CALL_OW 88
// end ; if un = Dvalishvili then
10013: LD_VAR 0 1
10017: PUSH
10018: LD_EXP 46
10022: EQUAL
10023: IFFALSE 10045
// begin DialogueOn ;
10025: CALL_OW 6
// Say ( Dvalishvili , D11a-Dvali-1 ) ;
10029: LD_EXP 46
10033: PPUSH
10034: LD_STRING D11a-Dvali-1
10036: PPUSH
10037: CALL_OW 88
// DialogueOff ;
10041: CALL_OW 7
// end ; if un = ustinov1 and not Ustinov1Captured then
10045: LD_VAR 0 1
10049: PUSH
10050: LD_INT 2
10052: EQUAL
10053: PUSH
10054: LD_EXP 31
10058: NOT
10059: AND
10060: IFFALSE 10090
// begin Ustinov1Captured := true ;
10062: LD_ADDR_EXP 31
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// SetSide ( ustinov1 , 7 ) ;
10070: LD_INT 2
10072: PPUSH
10073: LD_INT 7
10075: PPUSH
10076: CALL_OW 235
// SetLives ( ustinov1 , 400 ) ;
10080: LD_INT 2
10082: PPUSH
10083: LD_INT 400
10085: PPUSH
10086: CALL_OW 234
// end ; if un = ustinov2 and not Ustinov2Captured then
10090: LD_VAR 0 1
10094: PUSH
10095: LD_INT 3
10097: EQUAL
10098: PUSH
10099: LD_EXP 32
10103: NOT
10104: AND
10105: IFFALSE 10147
// begin Ustinov2Captured := true ;
10107: LD_ADDR_EXP 32
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// SetSide ( ustinov2 , 7 ) ;
10115: LD_INT 3
10117: PPUSH
10118: LD_INT 7
10120: PPUSH
10121: CALL_OW 235
// SetLives ( ustinov2 , 400 ) ;
10125: LD_INT 3
10127: PPUSH
10128: LD_INT 400
10130: PPUSH
10131: CALL_OW 234
// Say ( Sidorovich , D9-Sidor-1 ) ;
10135: LD_EXP 44
10139: PPUSH
10140: LD_STRING D9-Sidor-1
10142: PPUSH
10143: CALL_OW 88
// end ; end ;
10147: PPOPN 1
10149: END
// export Ustinov1Captured , Ustinov2Captured ; on Contact ( s1 , s2 ) do begin if ( s1 = 7 and s2 = 5 ) or ( s2 = 5 and s1 = 7 ) then
10150: LD_VAR 0 1
10154: PUSH
10155: LD_INT 7
10157: EQUAL
10158: PUSH
10159: LD_VAR 0 2
10163: PUSH
10164: LD_INT 5
10166: EQUAL
10167: AND
10168: PUSH
10169: LD_VAR 0 2
10173: PUSH
10174: LD_INT 5
10176: EQUAL
10177: PUSH
10178: LD_VAR 0 1
10182: PUSH
10183: LD_INT 7
10185: EQUAL
10186: AND
10187: OR
10188: IFFALSE 10264
// begin Say ( Botnicov , 9a-Botnicov-1a ) ;
10190: LD_EXP 47
10194: PPUSH
10195: LD_STRING 9a-Botnicov-1a
10197: PPUSH
10198: CALL_OW 88
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
10202: LD_INT 5
10204: PPUSH
10205: LD_INT 7
10207: PPUSH
10208: LD_INT 2
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 80
// BotnicovSpared := false ;
10218: LD_ADDR_EXP 20
10222: PUSH
10223: LD_INT 0
10225: ST_TO_ADDR
// BotnicovAntagonized := true ;
10226: LD_ADDR_EXP 21
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
10234: LD_EXP 30
10238: PPUSH
10239: LD_INT 257
10241: PPUSH
10242: LD_INT 108
10244: PPUSH
10245: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
10249: LD_EXP 47
10253: PPUSH
10254: LD_INT 257
10256: PPUSH
10257: LD_INT 108
10259: PPUSH
10260: CALL_OW 114
// end ; if ( s1 = 7 and s2 = 1 ) or ( s2 = 1 and s1 = 7 ) then
10264: LD_VAR 0 1
10268: PUSH
10269: LD_INT 7
10271: EQUAL
10272: PUSH
10273: LD_VAR 0 2
10277: PUSH
10278: LD_INT 1
10280: EQUAL
10281: AND
10282: PUSH
10283: LD_VAR 0 2
10287: PUSH
10288: LD_INT 1
10290: EQUAL
10291: PUSH
10292: LD_VAR 0 1
10296: PUSH
10297: LD_INT 7
10299: EQUAL
10300: AND
10301: OR
10302: IFFALSE 10341
// begin if IsOK ( Bradford ) then
10304: LD_EXP 42
10308: PPUSH
10309: CALL_OW 302
10313: IFFALSE 10329
// Say ( Bradford , DFriendlyFire-Bradford-1 ) else
10315: LD_EXP 42
10319: PPUSH
10320: LD_STRING DFriendlyFire-Bradford-1
10322: PPUSH
10323: CALL_OW 88
10327: GO 10341
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
10329: LD_EXP 43
10333: PPUSH
10334: LD_STRING DFriendlyFire-Barnes-1
10336: PPUSH
10337: CALL_OW 88
// end ; end ;
10341: PPOPN 2
10343: END
// export AMLab , AMFactoryExt ; on BuildingComplete ( building ) do var AM_Breastworks ;
10344: LD_INT 0
10346: PPUSH
// begin if GetSide ( building ) = 7 and GetBType ( building ) = b_depot and not Base_DepotBuilt then
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 255
10356: PUSH
10357: LD_INT 7
10359: EQUAL
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: CALL_OW 266
10370: PUSH
10371: LD_INT 0
10373: EQUAL
10374: AND
10375: PUSH
10376: LD_EXP 7
10380: NOT
10381: AND
10382: IFFALSE 10392
// Base_DepotBuilt := true ;
10384: LD_ADDR_EXP 7
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_workshop and not Base_WorkshopBuilt then
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 255
10401: PUSH
10402: LD_INT 7
10404: EQUAL
10405: PUSH
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 266
10415: PUSH
10416: LD_INT 2
10418: EQUAL
10419: AND
10420: PUSH
10421: LD_EXP 8
10425: NOT
10426: AND
10427: IFFALSE 10437
// Base_WorkshopBuilt := true ;
10429: LD_ADDR_EXP 8
10433: PUSH
10434: LD_INT 1
10436: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_lab and not Base_LabBuilt then
10437: LD_VAR 0 1
10441: PPUSH
10442: CALL_OW 255
10446: PUSH
10447: LD_INT 7
10449: EQUAL
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 266
10460: PUSH
10461: LD_INT 6
10463: EQUAL
10464: AND
10465: PUSH
10466: LD_EXP 9
10470: NOT
10471: AND
10472: IFFALSE 10482
// Base_LabBuilt := true ;
10474: LD_ADDR_EXP 9
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// if GetBType ( building ) = b_lab and GetSide ( building ) = 1 then
10482: LD_VAR 0 1
10486: PPUSH
10487: CALL_OW 266
10491: PUSH
10492: LD_INT 6
10494: EQUAL
10495: PUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 255
10505: PUSH
10506: LD_INT 1
10508: EQUAL
10509: AND
10510: IFFALSE 10742
// begin AMLab := building ;
10512: LD_ADDR_EXP 33
10516: PUSH
10517: LD_VAR 0 1
10521: ST_TO_ADDR
// ComMoveXY ( AM_Scientists [ 1 ] , 65 , 71 ) ;
10522: LD_EXP 29
10526: PUSH
10527: LD_INT 1
10529: ARRAY
10530: PPUSH
10531: LD_INT 65
10533: PPUSH
10534: LD_INT 71
10536: PPUSH
10537: CALL_OW 111
// ComMoveXY ( AM_Scientists [ 2 ] , 103 , 95 ) ;
10541: LD_EXP 29
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PPUSH
10550: LD_INT 103
10552: PPUSH
10553: LD_INT 95
10555: PPUSH
10556: CALL_OW 111
// AddComEnterUnit ( AM_Scientists , building ) ;
10560: LD_EXP 29
10564: PPUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 180
// ComResearch ( building , tech_Tech1 ) ;
10574: LD_VAR 0 1
10578: PPUSH
10579: LD_INT 48
10581: PPUSH
10582: CALL_OW 124
// AddComResearch ( building , tech_Tech2 ) ;
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_INT 49
10593: PPUSH
10594: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_weapon ) ;
10598: LD_VAR 0 1
10602: PPUSH
10603: LD_INT 10
10605: PPUSH
10606: CALL_OW 207
// AddComResearch ( building , tech_AdvMet ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_INT 34
10617: PPUSH
10618: CALL_OW 184
// AddComResearch ( building , tech_Rocket ) ;
10622: LD_VAR 0 1
10626: PPUSH
10627: LD_INT 40
10629: PPUSH
10630: CALL_OW 184
// AddComResearch ( building , tech_Weap1 ) ;
10634: LD_VAR 0 1
10638: PPUSH
10639: LD_INT 51
10641: PPUSH
10642: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_computer ) ;
10646: LD_VAR 0 1
10650: PPUSH
10651: LD_INT 12
10653: PPUSH
10654: CALL_OW 207
// AddComResearch ( building , tech_AdvAI ) ;
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_INT 27
10665: PPUSH
10666: CALL_OW 184
// AddComResearch ( building , tech_Comp1 ) ;
10670: LD_VAR 0 1
10674: PPUSH
10675: LD_INT 57
10677: PPUSH
10678: CALL_OW 184
// AddComResearch ( building , tech_Weap2 ) ;
10682: LD_VAR 0 1
10686: PPUSH
10687: LD_INT 52
10689: PPUSH
10690: CALL_OW 184
// AddComResearch ( building , tech_Comp2 ) ;
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_INT 58
10701: PPUSH
10702: CALL_OW 184
// AddComResearch ( building , tech_Tech3 ) ;
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_INT 50
10713: PPUSH
10714: CALL_OW 184
// AddComResearch ( building , tech_Weap3 ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_INT 53
10725: PPUSH
10726: CALL_OW 184
// AddComResearch ( building , tech_Comp3 ) ;
10730: LD_VAR 0 1
10734: PPUSH
10735: LD_INT 59
10737: PPUSH
10738: CALL_OW 184
// end ; if GetBType ( building ) = b_workshop and GetSide ( building ) = 1 then
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_INT 2
10754: EQUAL
10755: PUSH
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 255
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: AND
10770: IFFALSE 10823
// begin AM_Factory := building ;
10772: LD_ADDR_EXP 67
10776: PUSH
10777: LD_VAR 0 1
10781: ST_TO_ADDR
// AddComEnterUnit ( AM_Mechs , building ) ;
10782: LD_EXP 28
10786: PPUSH
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 180
// Wait ( 0 0$20 ) ;
10796: LD_INT 700
10798: PPUSH
10799: CALL_OW 67
// ComUpgrade ( building ) ;
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 146
// Wait ( 5 5$00 ) ;
10812: LD_INT 10500
10814: PPUSH
10815: CALL_OW 67
// Construct_Vehicles ;
10819: CALL 17407 0 0
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 1 then
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 266
10832: PUSH
10833: LD_INT 4
10835: EQUAL
10836: PUSH
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 255
10846: PUSH
10847: LD_INT 1
10849: EQUAL
10850: AND
10851: IFFALSE 10924
// begin ComEnterUnit ( [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] , AM_Sols [ 5 ] , AM_Sols [ 6 ] ] , building ) ;
10853: LD_EXP 26
10857: PUSH
10858: LD_INT 1
10860: ARRAY
10861: PUSH
10862: LD_EXP 26
10866: PUSH
10867: LD_INT 2
10869: ARRAY
10870: PUSH
10871: LD_EXP 26
10875: PUSH
10876: LD_INT 3
10878: ARRAY
10879: PUSH
10880: LD_EXP 26
10884: PUSH
10885: LD_INT 4
10887: ARRAY
10888: PUSH
10889: LD_EXP 26
10893: PUSH
10894: LD_INT 5
10896: ARRAY
10897: PUSH
10898: LD_EXP 26
10902: PUSH
10903: LD_INT 6
10905: ARRAY
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PPUSH
10915: LD_VAR 0 1
10919: PPUSH
10920: CALL_OW 120
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 1 then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 266
10933: PUSH
10934: LD_INT 31
10936: EQUAL
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 255
10947: PUSH
10948: LD_INT 1
10950: EQUAL
10951: AND
10952: IFFALSE 11032
// begin AM_Breastworks = AM_Breastworks + 1 ;
10954: LD_ADDR_VAR 0 2
10958: PUSH
10959: LD_VAR 0 2
10963: PUSH
10964: LD_INT 1
10966: PLUS
10967: ST_TO_ADDR
// case AM_Breastworks of 3 :
10968: LD_VAR 0 2
10972: PUSH
10973: LD_INT 3
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 11002
10981: POP
// ComEnterUnit ( AM_Sols [ 7 ] , building ) ; 4 :
10982: LD_EXP 26
10986: PUSH
10987: LD_INT 7
10989: ARRAY
10990: PPUSH
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL_OW 120
11000: GO 11032
11002: LD_INT 4
11004: DOUBLE
11005: EQUAL
11006: IFTRUE 11010
11008: GO 11031
11010: POP
// ComEnterUnit ( AM_Sols [ 8 ] , building ) ; end ;
11011: LD_EXP 26
11015: PUSH
11016: LD_INT 8
11018: ARRAY
11019: PPUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 120
11029: GO 11032
11031: POP
// end ; if ( GetBType ( building ) = b_ext_computer or GetBType ( building ) = b_ext_gun or GetBType ( building ) = b_ext_laser or GetBType ( building ) = b_ext_track or GetBType ( building ) = b_ext_rocket ) and GetSide ( building ) = 1 then
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 266
11041: PUSH
11042: LD_INT 24
11044: EQUAL
11045: PUSH
11046: LD_VAR 0 1
11050: PPUSH
11051: CALL_OW 266
11055: PUSH
11056: LD_INT 17
11058: EQUAL
11059: OR
11060: PUSH
11061: LD_VAR 0 1
11065: PPUSH
11066: CALL_OW 266
11070: PUSH
11071: LD_INT 25
11073: EQUAL
11074: OR
11075: PUSH
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL_OW 266
11085: PUSH
11086: LD_INT 16
11088: EQUAL
11089: OR
11090: PUSH
11091: LD_VAR 0 1
11095: PPUSH
11096: CALL_OW 266
11100: PUSH
11101: LD_INT 18
11103: EQUAL
11104: OR
11105: PUSH
11106: LD_VAR 0 1
11110: PPUSH
11111: CALL_OW 255
11115: PUSH
11116: LD_INT 1
11118: EQUAL
11119: AND
11120: IFFALSE 11138
// begin AMFactoryExt = AMFactoryExt ^ building ;
11122: LD_ADDR_EXP 34
11126: PUSH
11127: LD_EXP 34
11131: PUSH
11132: LD_VAR 0 1
11136: ADD
11137: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
11138: LD_VAR 0 1
11142: PPUSH
11143: CALL 81805 0 1
// end ;
11147: PPOPN 2
11149: END
// export AMVehiclesBuilt ; on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 1 then
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 255
11159: PUSH
11160: LD_INT 1
11162: EQUAL
11163: IFFALSE 11378
// begin AMVehiclesBuilt := AMVehiclesBuilt + 1 ;
11165: LD_ADDR_EXP 35
11169: PUSH
11170: LD_EXP 35
11174: PUSH
11175: LD_INT 1
11177: PLUS
11178: ST_TO_ADDR
// case AMVehiclesBuilt mod 3 of 0 :
11179: LD_EXP 35
11183: PUSH
11184: LD_INT 3
11186: MOD
11187: PUSH
11188: LD_INT 0
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 11251
11196: POP
// begin AM_SquadOne := AM_SquadOne ^ vehicle ;
11197: LD_ADDR_EXP 64
11201: PUSH
11202: LD_EXP 64
11206: PUSH
11207: LD_VAR 0 1
11211: ADD
11212: ST_TO_ADDR
// AM_SquadOne := AM_SquadOne ^ IsDrivenBy ( vehicle ) ;
11213: LD_ADDR_EXP 64
11217: PUSH
11218: LD_EXP 64
11222: PUSH
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 311
11232: ADD
11233: ST_TO_ADDR
// ComMoveXY ( vehicle , 94 , 68 ) ;
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_INT 94
11241: PPUSH
11242: LD_INT 68
11244: PPUSH
11245: CALL_OW 111
// end ; 1 :
11249: GO 11378
11251: LD_INT 1
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11314
11259: POP
// begin AM_SquadTwo := AM_SquadTwo ^ vehicle ;
11260: LD_ADDR_EXP 65
11264: PUSH
11265: LD_EXP 65
11269: PUSH
11270: LD_VAR 0 1
11274: ADD
11275: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ IsDrivenBy ( vehicle ) ;
11276: LD_ADDR_EXP 65
11280: PUSH
11281: LD_EXP 65
11285: PUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 311
11295: ADD
11296: ST_TO_ADDR
// ComMoveXY ( vehicle , 110 , 79 ) ;
11297: LD_VAR 0 1
11301: PPUSH
11302: LD_INT 110
11304: PPUSH
11305: LD_INT 79
11307: PPUSH
11308: CALL_OW 111
// end ; 2 :
11312: GO 11378
11314: LD_INT 2
11316: DOUBLE
11317: EQUAL
11318: IFTRUE 11322
11320: GO 11377
11322: POP
// begin AM_SquadThree := AM_SquadThree ^ vehicle ;
11323: LD_ADDR_EXP 66
11327: PUSH
11328: LD_EXP 66
11332: PUSH
11333: LD_VAR 0 1
11337: ADD
11338: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ IsDrivenBy ( vehicle ) ;
11339: LD_ADDR_EXP 66
11343: PUSH
11344: LD_EXP 66
11348: PUSH
11349: LD_VAR 0 1
11353: PPUSH
11354: CALL_OW 311
11358: ADD
11359: ST_TO_ADDR
// ComMoveXY ( vehicle , 120 , 101 ) ;
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 120
11367: PPUSH
11368: LD_INT 101
11370: PPUSH
11371: CALL_OW 111
// end ; end ;
11375: GO 11378
11377: POP
// end ; MCE_VehicleConstructed ( vehicle , factory ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL 79649 0 2
// end ;
11392: PPOPN 2
11394: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL 82489 0 2
// end ;
11409: PPOPN 2
11411: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL 81571 0 1
// end ;
11421: PPOPN 1
11423: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
11424: LD_VAR 0 1
11428: PPUSH
11429: LD_VAR 0 2
11433: PPUSH
11434: CALL 80334 0 2
// end ;
11438: PPOPN 2
11440: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11441: LD_VAR 0 1
11445: PPUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_VAR 0 4
11460: PPUSH
11461: LD_VAR 0 5
11465: PPUSH
11466: CALL 79961 0 5
// end ;
11470: PPOPN 5
11472: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11473: LD_VAR 0 1
11477: PPUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_VAR 0 4
11492: PPUSH
11493: CALL 79494 0 4
// end ;
11497: PPOPN 4
11499: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11500: LD_VAR 0 1
11504: PPUSH
11505: LD_VAR 0 2
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: CALL 79276 0 3
// end ;
11519: PPOPN 3
11521: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11522: LD_VAR 0 1
11526: PPUSH
11527: LD_VAR 0 2
11531: PPUSH
11532: CALL 79168 0 2
// end ;
11536: PPOPN 2
11538: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_VAR 0 2
11548: PPUSH
11549: CALL 82743 0 2
// end ;
11553: PPOPN 2
11555: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
11556: LD_VAR 0 1
11560: PPUSH
11561: LD_VAR 0 2
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_VAR 0 4
11575: PPUSH
11576: CALL 82952 0 4
// end ;
11580: PPOPN 4
11582: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
11583: LD_VAR 0 1
11587: PPUSH
11588: LD_VAR 0 2
11592: PPUSH
11593: CALL 78984 0 2
// end ; end_of_file
11597: PPOPN 2
11599: END
// export Simone , Miller , Esther , Edmonds , Pravar , AMSurvivors ; export Bradford , Barnes , Sidorovich , Kolvich , Dvalishvili , Botnicov , Mortimer , Richford , General , Randall ; export AvengerSquad , AvengerReserve , AvengerReserveCount ; export KolvichSquad ; export function CreatePersonas ; var i , un ; begin
11600: LD_INT 0
11602: PPUSH
11603: PPUSH
11604: PPUSH
// uc_side := 7 ;
11605: LD_ADDR_OWVAR 20
11609: PUSH
11610: LD_INT 7
11612: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
11613: LD_ADDR_EXP 36
11617: PUSH
11618: LD_STRING Simone
11620: PPUSH
11621: CALL_OW 34
11625: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
11626: LD_ADDR_EXP 37
11630: PUSH
11631: LD_STRING Miller
11633: PPUSH
11634: CALL_OW 34
11638: ST_TO_ADDR
// Pravar = CreateCharacter ( Pravar ) ;
11639: LD_ADDR_EXP 40
11643: PUSH
11644: LD_STRING Pravar
11646: PPUSH
11647: CALL_OW 34
11651: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM04_Survivors ) ;
11652: LD_ADDR_EXP 41
11656: PUSH
11657: LD_STRING AM04_Survivors
11659: PPUSH
11660: CALL_OW 31
11664: ST_TO_ADDR
// AvengerSquad := Simone ^ Miller ^ Pravar ^ AMSurvivors ;
11665: LD_ADDR_EXP 52
11669: PUSH
11670: LD_EXP 36
11674: PUSH
11675: LD_EXP 37
11679: ADD
11680: PUSH
11681: LD_EXP 40
11685: ADD
11686: PUSH
11687: LD_EXP 41
11691: ADD
11692: ST_TO_ADDR
// hc_name :=  ;
11693: LD_ADDR_OWVAR 26
11697: PUSH
11698: LD_STRING 
11700: ST_TO_ADDR
// hc_gallery :=  ;
11701: LD_ADDR_OWVAR 33
11705: PUSH
11706: LD_STRING 
11708: ST_TO_ADDR
// AvengerReserveCount := 16 - AvengerSquad ;
11709: LD_ADDR_EXP 54
11713: PUSH
11714: LD_INT 16
11716: PUSH
11717: LD_EXP 52
11721: MINUS
11722: ST_TO_ADDR
// for i = 1 to AvengerReserveCount do
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: DOUBLE
11729: LD_INT 1
11731: DEC
11732: ST_TO_ADDR
11733: LD_EXP 54
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11927
// begin case Rand ( 1 , 10 ) of 1 .. 3 :
11741: LD_INT 1
11743: PPUSH
11744: LD_INT 10
11746: PPUSH
11747: CALL_OW 12
11751: PUSH
11752: LD_INT 1
11754: DOUBLE
11755: GREATEREQUAL
11756: IFFALSE 11764
11758: LD_INT 3
11760: DOUBLE
11761: LESSEQUAL
11762: IFTRUE 11766
11764: GO 11795
11766: POP
// begin PrepareSoldier ( 1 , 8 ) ;
11767: LD_INT 1
11769: PPUSH
11770: LD_INT 8
11772: PPUSH
11773: CALL_OW 381
// AvengerReserve := AvengerReserve ^ CreateHuman ;
11777: LD_ADDR_EXP 53
11781: PUSH
11782: LD_EXP 53
11786: PUSH
11787: CALL_OW 44
11791: ADD
11792: ST_TO_ADDR
// end ; 4 .. 6 :
11793: GO 11925
11795: LD_INT 4
11797: DOUBLE
11798: GREATEREQUAL
11799: IFFALSE 11807
11801: LD_INT 6
11803: DOUBLE
11804: LESSEQUAL
11805: IFTRUE 11809
11807: GO 11838
11809: POP
// begin PrepareMechanic ( 1 , 8 ) ;
11810: LD_INT 1
11812: PPUSH
11813: LD_INT 8
11815: PPUSH
11816: CALL_OW 383
// AvengerReserve := AvengerReserve ^ CreateHuman ;
11820: LD_ADDR_EXP 53
11824: PUSH
11825: LD_EXP 53
11829: PUSH
11830: CALL_OW 44
11834: ADD
11835: ST_TO_ADDR
// end ; 7 .. 8 :
11836: GO 11925
11838: LD_INT 7
11840: DOUBLE
11841: GREATEREQUAL
11842: IFFALSE 11850
11844: LD_INT 8
11846: DOUBLE
11847: LESSEQUAL
11848: IFTRUE 11852
11850: GO 11881
11852: POP
// begin PrepareScientist ( 1 , 8 ) ;
11853: LD_INT 1
11855: PPUSH
11856: LD_INT 8
11858: PPUSH
11859: CALL_OW 384
// AvengerReserve := AvengerReserve ^ CreateHuman ;
11863: LD_ADDR_EXP 53
11867: PUSH
11868: LD_EXP 53
11872: PUSH
11873: CALL_OW 44
11877: ADD
11878: ST_TO_ADDR
// end ; 9 .. 10 :
11879: GO 11925
11881: LD_INT 9
11883: DOUBLE
11884: GREATEREQUAL
11885: IFFALSE 11893
11887: LD_INT 10
11889: DOUBLE
11890: LESSEQUAL
11891: IFTRUE 11895
11893: GO 11924
11895: POP
// begin PrepareEngineer ( 1 , 8 ) ;
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 8
11901: PPUSH
11902: CALL_OW 382
// AvengerReserve := AvengerReserve ^ CreateHuman ;
11906: LD_ADDR_EXP 53
11910: PUSH
11911: LD_EXP 53
11915: PUSH
11916: CALL_OW 44
11920: ADD
11921: ST_TO_ADDR
// end ; end ;
11922: GO 11925
11924: POP
// end ;
11925: GO 11738
11927: POP
11928: POP
// for i in AvengerReserve do
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_EXP 53
11938: PUSH
11939: FOR_IN
11940: IFFALSE 11971
// begin PlaceUnitXYR ( AvengerReserve [ i ] , 87 , 94 , 7 , false ) ;
11942: LD_EXP 53
11946: PUSH
11947: LD_VAR 0 2
11951: ARRAY
11952: PPUSH
11953: LD_INT 87
11955: PPUSH
11956: LD_INT 94
11958: PPUSH
11959: LD_INT 7
11961: PPUSH
11962: LD_INT 0
11964: PPUSH
11965: CALL_OW 50
// end ;
11969: GO 11939
11971: POP
11972: POP
// uc_side := 8 ;
11973: LD_ADDR_OWVAR 20
11977: PUSH
11978: LD_INT 8
11980: ST_TO_ADDR
// hc_class = class_soldier ;
11981: LD_ADDR_OWVAR 28
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// uc_nation := nation_arabian ;
11989: LD_ADDR_OWVAR 21
11993: PUSH
11994: LD_INT 2
11996: ST_TO_ADDR
// hc_sex = sex_male ;
11997: LD_ADDR_OWVAR 27
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// hc_importance = 40 ;
12005: LD_ADDR_OWVAR 32
12009: PUSH
12010: LD_INT 40
12012: ST_TO_ADDR
// hc_skills = [ 9 , 4 , 8 , 3 ] ;
12013: LD_ADDR_OWVAR 31
12017: PUSH
12018: LD_INT 9
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: LD_INT 8
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: ST_TO_ADDR
// hc_attr = [ 15 , 10 ] ;
12036: LD_ADDR_OWVAR 29
12040: PUSH
12041: LD_INT 15
12043: PUSH
12044: LD_INT 10
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: ST_TO_ADDR
// hc_name := Giorgi Dvalishvili ;
12051: LD_ADDR_OWVAR 26
12055: PUSH
12056: LD_STRING Giorgi Dvalishvili
12058: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Dvalishvili ;
12059: LD_ADDR_OWVAR 33
12063: PUSH
12064: LD_STRING ZieloneLaserki_Dvalishvili
12066: ST_TO_ADDR
// hc_face_number := 1 ;
12067: LD_ADDR_OWVAR 34
12071: PUSH
12072: LD_INT 1
12074: ST_TO_ADDR
// Dvalishvili := CreateHuman ;
12075: LD_ADDR_EXP 46
12079: PUSH
12080: CALL_OW 44
12084: ST_TO_ADDR
// uc_side := 1 ;
12085: LD_ADDR_OWVAR 20
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// Esther = CreateCharacter ( Esther ) ;
12093: LD_ADDR_EXP 38
12097: PUSH
12098: LD_STRING Esther
12100: PPUSH
12101: CALL_OW 34
12105: ST_TO_ADDR
// Edmonds = CreateCharacter ( Edmonds ) ;
12106: LD_ADDR_EXP 39
12110: PUSH
12111: LD_STRING Edmonds
12113: PPUSH
12114: CALL_OW 34
12118: ST_TO_ADDR
// hc_class = class_soldier ;
12119: LD_ADDR_OWVAR 28
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// uc_nation := nation_american ;
12127: LD_ADDR_OWVAR 21
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// hc_importance = 70 ;
12135: LD_ADDR_OWVAR 32
12139: PUSH
12140: LD_INT 70
12142: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 9
12148: PPUSH
12149: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
12153: LD_ADDR_OWVAR 29
12157: PUSH
12158: LD_INT 10
12160: PUSH
12161: LD_INT 10
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// hc_name := Bradford ;
12168: LD_ADDR_OWVAR 26
12172: PUSH
12173: LD_STRING Bradford
12175: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
12176: LD_ADDR_OWVAR 33
12180: PUSH
12181: LD_STRING ZieloneLaserki_AddtFaces2
12183: ST_TO_ADDR
// hc_face_number := 3 ;
12184: LD_ADDR_OWVAR 34
12188: PUSH
12189: LD_INT 3
12191: ST_TO_ADDR
// Bradford := CreateHuman ;
12192: LD_ADDR_EXP 42
12196: PUSH
12197: CALL_OW 44
12201: ST_TO_ADDR
// uc_nation := nation_american ;
12202: LD_ADDR_OWVAR 21
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// hc_importance = 70 ;
12210: LD_ADDR_OWVAR 32
12214: PUSH
12215: LD_INT 70
12217: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
12218: LD_INT 1
12220: PPUSH
12221: LD_INT 8
12223: PPUSH
12224: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
12228: LD_ADDR_OWVAR 29
12232: PUSH
12233: LD_INT 11
12235: PUSH
12236: LD_INT 10
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: ST_TO_ADDR
// hc_name := Mortimer ;
12243: LD_ADDR_OWVAR 26
12247: PUSH
12248: LD_STRING Mortimer
12250: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces ;
12251: LD_ADDR_OWVAR 33
12255: PUSH
12256: LD_STRING ZieloneLaserki_AddtFaces
12258: ST_TO_ADDR
// hc_face_number := 1 ;
12259: LD_ADDR_OWVAR 34
12263: PUSH
12264: LD_INT 1
12266: ST_TO_ADDR
// Mortimer := CreateHuman ;
12267: LD_ADDR_EXP 48
12271: PUSH
12272: CALL_OW 44
12276: ST_TO_ADDR
// uc_nation := nation_american ;
12277: LD_ADDR_OWVAR 21
12281: PUSH
12282: LD_INT 1
12284: ST_TO_ADDR
// hc_importance = 80 ;
12285: LD_ADDR_OWVAR 32
12289: PUSH
12290: LD_INT 80
12292: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 9
12298: PPUSH
12299: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
12303: LD_ADDR_OWVAR 29
12307: PUSH
12308: LD_INT 11
12310: PUSH
12311: LD_INT 10
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: ST_TO_ADDR
// hc_name := Richford ;
12318: LD_ADDR_OWVAR 26
12322: PUSH
12323: LD_STRING Richford
12325: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
12326: LD_ADDR_OWVAR 33
12330: PUSH
12331: LD_STRING ZieloneLaserki_AddtFaces2
12333: ST_TO_ADDR
// hc_face_number := 2 ;
12334: LD_ADDR_OWVAR 34
12338: PUSH
12339: LD_INT 2
12341: ST_TO_ADDR
// Richford := CreateHuman ;
12342: LD_ADDR_EXP 49
12346: PUSH
12347: CALL_OW 44
12351: ST_TO_ADDR
// hc_class = class_soldier ;
12352: LD_ADDR_OWVAR 28
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// uc_nation := nation_american ;
12360: LD_ADDR_OWVAR 21
12364: PUSH
12365: LD_INT 1
12367: ST_TO_ADDR
// hc_importance = 90 ;
12368: LD_ADDR_OWVAR 32
12372: PUSH
12373: LD_INT 90
12375: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 10
12381: PPUSH
12382: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
12386: LD_ADDR_OWVAR 29
12390: PUSH
12391: LD_INT 10
12393: PUSH
12394: LD_INT 10
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: ST_TO_ADDR
// hc_name := Barnes ;
12401: LD_ADDR_OWVAR 26
12405: PUSH
12406: LD_STRING Barnes
12408: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
12409: LD_ADDR_OWVAR 33
12413: PUSH
12414: LD_STRING ZieloneLaserki_Commanders
12416: ST_TO_ADDR
// hc_face_number := 2 ;
12417: LD_ADDR_OWVAR 34
12421: PUSH
12422: LD_INT 2
12424: ST_TO_ADDR
// Barnes := CreateHuman ;
12425: LD_ADDR_EXP 43
12429: PUSH
12430: CALL_OW 44
12434: ST_TO_ADDR
// uc_side := 3 ;
12435: LD_ADDR_OWVAR 20
12439: PUSH
12440: LD_INT 3
12442: ST_TO_ADDR
// hc_class = class_soldier ;
12443: LD_ADDR_OWVAR 28
12447: PUSH
12448: LD_INT 1
12450: ST_TO_ADDR
// uc_nation := nation_russian ;
12451: LD_ADDR_OWVAR 21
12455: PUSH
12456: LD_INT 3
12458: ST_TO_ADDR
// hc_importance = 90 ;
12459: LD_ADDR_OWVAR 32
12463: PUSH
12464: LD_INT 90
12466: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
12467: LD_INT 1
12469: PPUSH
12470: LD_INT 10
12472: PPUSH
12473: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
12477: LD_ADDR_OWVAR 29
12481: PUSH
12482: LD_INT 12
12484: PUSH
12485: LD_INT 10
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: ST_TO_ADDR
// hc_name := Sidorovich ;
12492: LD_ADDR_OWVAR 26
12496: PUSH
12497: LD_STRING Sidorovich
12499: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
12500: LD_ADDR_OWVAR 33
12504: PUSH
12505: LD_STRING ZieloneLaserki_Heroes
12507: ST_TO_ADDR
// hc_face_number := 8 ;
12508: LD_ADDR_OWVAR 34
12512: PUSH
12513: LD_INT 8
12515: ST_TO_ADDR
// Sidorovich := CreateHuman ;
12516: LD_ADDR_EXP 44
12520: PUSH
12521: CALL_OW 44
12525: ST_TO_ADDR
// uc_side := 6 ;
12526: LD_ADDR_OWVAR 20
12530: PUSH
12531: LD_INT 6
12533: ST_TO_ADDR
// hc_class = class_soldier ;
12534: LD_ADDR_OWVAR 28
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
// uc_nation := nation_russian ;
12542: LD_ADDR_OWVAR 21
12546: PUSH
12547: LD_INT 3
12549: ST_TO_ADDR
// hc_importance = 90 ;
12550: LD_ADDR_OWVAR 32
12554: PUSH
12555: LD_INT 90
12557: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
12558: LD_INT 1
12560: PPUSH
12561: LD_INT 10
12563: PPUSH
12564: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
12568: LD_ADDR_OWVAR 29
12572: PUSH
12573: LD_INT 12
12575: PUSH
12576: LD_INT 10
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: ST_TO_ADDR
// hc_name := Kolvich ;
12583: LD_ADDR_OWVAR 26
12587: PUSH
12588: LD_STRING Kolvich
12590: ST_TO_ADDR
// hc_gallery := RusCamp_KolvichCoterie ;
12591: LD_ADDR_OWVAR 33
12595: PUSH
12596: LD_STRING RusCamp_KolvichCoterie
12598: ST_TO_ADDR
// hc_face_number := 3 ;
12599: LD_ADDR_OWVAR 34
12603: PUSH
12604: LD_INT 3
12606: ST_TO_ADDR
// Kolvich := CreateHuman ;
12607: LD_ADDR_EXP 45
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// uc_side := 5 ;
12617: LD_ADDR_OWVAR 20
12621: PUSH
12622: LD_INT 5
12624: ST_TO_ADDR
// hc_class = class_soldier ;
12625: LD_ADDR_OWVAR 28
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// uc_nation := nation_russian ;
12633: LD_ADDR_OWVAR 21
12637: PUSH
12638: LD_INT 3
12640: ST_TO_ADDR
// hc_importance = 90 ;
12641: LD_ADDR_OWVAR 32
12645: PUSH
12646: LD_INT 90
12648: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
12649: LD_INT 1
12651: PPUSH
12652: LD_INT 9
12654: PPUSH
12655: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
12659: LD_ADDR_OWVAR 29
12663: PUSH
12664: LD_INT 11
12666: PUSH
12667: LD_INT 10
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: ST_TO_ADDR
// hc_name := Botnicov ;
12674: LD_ADDR_OWVAR 26
12678: PUSH
12679: LD_STRING Botnicov
12681: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_RusCommanders ;
12682: LD_ADDR_OWVAR 33
12686: PUSH
12687: LD_STRING ZieloneLaserki_RusCommanders
12689: ST_TO_ADDR
// hc_face_number := 1 ;
12690: LD_ADDR_OWVAR 34
12694: PUSH
12695: LD_INT 1
12697: ST_TO_ADDR
// Botnicov := CreateHuman ;
12698: LD_ADDR_EXP 47
12702: PUSH
12703: CALL_OW 44
12707: ST_TO_ADDR
// uc_side := 4 ;
12708: LD_ADDR_OWVAR 20
12712: PUSH
12713: LD_INT 4
12715: ST_TO_ADDR
// hc_class = class_soldier ;
12716: LD_ADDR_OWVAR 28
12720: PUSH
12721: LD_INT 1
12723: ST_TO_ADDR
// uc_nation := nation_american ;
12724: LD_ADDR_OWVAR 21
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// hc_importance = 90 ;
12732: LD_ADDR_OWVAR 32
12736: PUSH
12737: LD_INT 90
12739: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
12740: LD_INT 1
12742: PPUSH
12743: LD_INT 10
12745: PPUSH
12746: CALL_OW 381
// hc_attr = [ 15 , 10 ] ;
12750: LD_ADDR_OWVAR 29
12754: PUSH
12755: LD_INT 15
12757: PUSH
12758: LD_INT 10
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: ST_TO_ADDR
// hc_name := General ;
12765: LD_ADDR_OWVAR 26
12769: PUSH
12770: LD_STRING General
12772: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
12773: LD_ADDR_OWVAR 33
12777: PUSH
12778: LD_STRING ZieloneLaserki_AddtFaces2
12780: ST_TO_ADDR
// hc_face_number := 5 ;
12781: LD_ADDR_OWVAR 34
12785: PUSH
12786: LD_INT 5
12788: ST_TO_ADDR
// General := CreateHuman ;
12789: LD_ADDR_EXP 50
12793: PUSH
12794: CALL_OW 44
12798: ST_TO_ADDR
// uc_side := 1 ;
12799: LD_ADDR_OWVAR 20
12803: PUSH
12804: LD_INT 1
12806: ST_TO_ADDR
// hc_class = class_soldier ;
12807: LD_ADDR_OWVAR 28
12811: PUSH
12812: LD_INT 1
12814: ST_TO_ADDR
// uc_nation := nation_american ;
12815: LD_ADDR_OWVAR 21
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// hc_importance = 90 ;
12823: LD_ADDR_OWVAR 32
12827: PUSH
12828: LD_INT 90
12830: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
12831: LD_INT 1
12833: PPUSH
12834: LD_INT 10
12836: PPUSH
12837: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
12841: LD_ADDR_OWVAR 29
12845: PUSH
12846: LD_INT 11
12848: PUSH
12849: LD_INT 10
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: ST_TO_ADDR
// hc_name := Randall ;
12856: LD_ADDR_OWVAR 26
12860: PUSH
12861: LD_STRING Randall
12863: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
12864: LD_ADDR_OWVAR 33
12868: PUSH
12869: LD_STRING ZieloneLaserki_Commanders
12871: ST_TO_ADDR
// hc_face_number := 3 ;
12872: LD_ADDR_OWVAR 34
12876: PUSH
12877: LD_INT 3
12879: ST_TO_ADDR
// Randall := CreateHuman ;
12880: LD_ADDR_EXP 51
12884: PUSH
12885: CALL_OW 44
12889: ST_TO_ADDR
// hc_name :=  ;
12890: LD_ADDR_OWVAR 26
12894: PUSH
12895: LD_STRING 
12897: ST_TO_ADDR
// hc_gallery :=  ;
12898: LD_ADDR_OWVAR 33
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// end ;
12906: LD_VAR 0 1
12910: RET
// export function Squad_Assembly ; var Vehicles , i , p , x , veh , filter ; begin
12911: LD_INT 0
12913: PPUSH
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
// uc_side := 7 ;
12920: LD_ADDR_OWVAR 20
12924: PUSH
12925: LD_INT 7
12927: ST_TO_ADDR
// Vehicles := LoadVariable ( AM04_Vehicles , [ ] ) ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_STRING AM04_Vehicles
12935: PPUSH
12936: EMPTY
12937: PPUSH
12938: CALL_OW 30
12942: ST_TO_ADDR
// x := 1 ;
12943: LD_ADDR_VAR 0 5
12947: PUSH
12948: LD_INT 1
12950: ST_TO_ADDR
// i := 1 ;
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
// p := 1 ;
12959: LD_ADDR_VAR 0 4
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if Vehicles > 0 then
12967: LD_VAR 0 2
12971: PUSH
12972: LD_INT 0
12974: GREATER
12975: IFFALSE 13197
// while ( i <= Vehicles ) do
12977: LD_VAR 0 3
12981: PUSH
12982: LD_VAR 0 2
12986: LESSEQUAL
12987: IFFALSE 13197
// begin vc_chassis := Vehicles [ i ] ;
12989: LD_ADDR_OWVAR 37
12993: PUSH
12994: LD_VAR 0 2
12998: PUSH
12999: LD_VAR 0 3
13003: ARRAY
13004: ST_TO_ADDR
// vc_engine := Vehicles [ i + 1 ] ;
13005: LD_ADDR_OWVAR 39
13009: PUSH
13010: LD_VAR 0 2
13014: PUSH
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 1
13022: PLUS
13023: ARRAY
13024: ST_TO_ADDR
// vc_control := Vehicles [ i + 2 ] ;
13025: LD_ADDR_OWVAR 38
13029: PUSH
13030: LD_VAR 0 2
13034: PUSH
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 2
13042: PLUS
13043: ARRAY
13044: ST_TO_ADDR
// vc_weapon := Vehicles [ i + 3 ] ;
13045: LD_ADDR_OWVAR 40
13049: PUSH
13050: LD_VAR 0 2
13054: PUSH
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 3
13062: PLUS
13063: ARRAY
13064: ST_TO_ADDR
// veh := CreateVehicle ;
13065: LD_ADDR_VAR 0 6
13069: PUSH
13070: CALL_OW 45
13074: ST_TO_ADDR
// PlaceUnitXYR ( veh , 52 , 98 , 1 , false ) ;
13075: LD_VAR 0 6
13079: PPUSH
13080: LD_INT 52
13082: PPUSH
13083: LD_INT 98
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_INT 0
13091: PPUSH
13092: CALL_OW 50
// if GetControl ( veh ) = control_manual then
13096: LD_VAR 0 6
13100: PPUSH
13101: CALL_OW 263
13105: PUSH
13106: LD_INT 1
13108: EQUAL
13109: IFFALSE 13145
// begin PlaceHumanInUnit ( AvengerSquad [ x ] , veh ) ;
13111: LD_EXP 52
13115: PUSH
13116: LD_VAR 0 5
13120: ARRAY
13121: PPUSH
13122: LD_VAR 0 6
13126: PPUSH
13127: CALL_OW 52
// x := x + 1 ;
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: LD_VAR 0 5
13140: PUSH
13141: LD_INT 1
13143: PLUS
13144: ST_TO_ADDR
// end ; ComMoveXY ( veh , 70 , 90 ) ;
13145: LD_VAR 0 6
13149: PPUSH
13150: LD_INT 70
13152: PPUSH
13153: LD_INT 90
13155: PPUSH
13156: CALL_OW 111
// wait ( 0 0$03 ) ;
13160: LD_INT 105
13162: PPUSH
13163: CALL_OW 67
// p := p + 1 ;
13167: LD_ADDR_VAR 0 4
13171: PUSH
13172: LD_VAR 0 4
13176: PUSH
13177: LD_INT 1
13179: PLUS
13180: ST_TO_ADDR
// i := i + 4 ;
13181: LD_ADDR_VAR 0 3
13185: PUSH
13186: LD_VAR 0 3
13190: PUSH
13191: LD_INT 4
13193: PLUS
13194: ST_TO_ADDR
// end ;
13195: GO 12977
// while x <= AvengerSquad do
13197: LD_VAR 0 5
13201: PUSH
13202: LD_EXP 52
13206: LESSEQUAL
13207: IFFALSE 13280
// begin PlaceUnitXYR ( AvengerSquad [ x ] , 52 , 98 , 1 , false ) ;
13209: LD_EXP 52
13213: PUSH
13214: LD_VAR 0 5
13218: ARRAY
13219: PPUSH
13220: LD_INT 52
13222: PPUSH
13223: LD_INT 98
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 0
13231: PPUSH
13232: CALL_OW 50
// ComMoveXY ( AvengerSquad [ x ] , 70 , 90 ) ;
13236: LD_EXP 52
13240: PUSH
13241: LD_VAR 0 5
13245: ARRAY
13246: PPUSH
13247: LD_INT 70
13249: PPUSH
13250: LD_INT 90
13252: PPUSH
13253: CALL_OW 111
// x := x + 1 ;
13257: LD_ADDR_VAR 0 5
13261: PUSH
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: PLUS
13270: ST_TO_ADDR
// wait ( 0 0$02 ) ;
13271: LD_INT 70
13273: PPUSH
13274: CALL_OW 67
// end ;
13278: GO 13197
// end ;
13280: LD_VAR 0 1
13284: RET
// export MC_attack_group , MC_attack_group2 ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , group ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
13285: LD_INT 0
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
13291: PPUSH
13292: PPUSH
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
// amChassisTab = [ ] ;
13297: LD_ADDR_VAR 0 19
13301: PUSH
13302: EMPTY
13303: ST_TO_ADDR
// arChassisTab = [ ] ;
13304: LD_ADDR_VAR 0 18
13308: PUSH
13309: EMPTY
13310: ST_TO_ADDR
// ruChassisTab = [ ] ;
13311: LD_ADDR_VAR 0 17
13315: PUSH
13316: EMPTY
13317: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13318: LD_INT 35
13320: PPUSH
13321: CALL_OW 67
// if nation = 1 then
13325: LD_VAR 0 5
13329: PUSH
13330: LD_INT 1
13332: EQUAL
13333: IFFALSE 13892
// begin uc_side = side ;
13335: LD_ADDR_OWVAR 20
13339: PUSH
13340: LD_VAR 0 2
13344: ST_TO_ADDR
// uc_nation = nation ;
13345: LD_ADDR_OWVAR 21
13349: PUSH
13350: LD_VAR 0 5
13354: ST_TO_ADDR
// vc_engine = vehengine ;
13355: LD_ADDR_OWVAR 39
13359: PUSH
13360: LD_VAR 0 6
13364: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13365: LD_ADDR_OWVAR 38
13369: PUSH
13370: LD_VAR 0 7
13374: PUSH
13375: LD_INT 1
13377: PPUSH
13378: LD_VAR 0 7
13382: PPUSH
13383: CALL_OW 12
13387: ARRAY
13388: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13389: LD_ADDR_OWVAR 40
13393: PUSH
13394: LD_VAR 0 10
13398: PUSH
13399: LD_INT 1
13401: PPUSH
13402: LD_VAR 0 10
13406: PPUSH
13407: CALL_OW 12
13411: ARRAY
13412: ST_TO_ADDR
// for j = 1 to AMWeapon do
13413: LD_ADDR_VAR 0 14
13417: PUSH
13418: DOUBLE
13419: LD_INT 1
13421: DEC
13422: ST_TO_ADDR
13423: LD_VAR 0 10
13427: PUSH
13428: FOR_TO
13429: IFFALSE 13730
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13431: LD_VAR 0 10
13435: PUSH
13436: LD_VAR 0 14
13440: ARRAY
13441: PUSH
13442: LD_INT 2
13444: EQUAL
13445: PUSH
13446: LD_VAR 0 10
13450: PUSH
13451: LD_VAR 0 14
13455: ARRAY
13456: PUSH
13457: LD_INT 3
13459: EQUAL
13460: OR
13461: IFFALSE 13514
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13463: LD_ADDR_VAR 0 19
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: LD_INT 5
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_VAR 0 19
13499: PUSH
13500: LD_INT 1
13502: PPUSH
13503: LD_VAR 0 19
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13514: LD_VAR 0 10
13518: PUSH
13519: LD_VAR 0 14
13523: ARRAY
13524: PUSH
13525: LD_INT 4
13527: EQUAL
13528: PUSH
13529: LD_VAR 0 10
13533: PUSH
13534: LD_VAR 0 14
13538: ARRAY
13539: PUSH
13540: LD_INT 5
13542: EQUAL
13543: OR
13544: PUSH
13545: LD_VAR 0 10
13549: PUSH
13550: LD_VAR 0 14
13554: ARRAY
13555: PUSH
13556: LD_INT 9
13558: EQUAL
13559: OR
13560: PUSH
13561: LD_VAR 0 10
13565: PUSH
13566: LD_VAR 0 14
13570: ARRAY
13571: PUSH
13572: LD_INT 11
13574: EQUAL
13575: OR
13576: PUSH
13577: LD_VAR 0 10
13581: PUSH
13582: LD_VAR 0 14
13586: ARRAY
13587: PUSH
13588: LD_INT 7
13590: EQUAL
13591: OR
13592: IFFALSE 13641
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13594: LD_ADDR_VAR 0 19
13598: PUSH
13599: LD_INT 2
13601: PUSH
13602: LD_INT 3
13604: PUSH
13605: LD_INT 4
13607: PUSH
13608: LD_INT 5
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13617: LD_ADDR_OWVAR 37
13621: PUSH
13622: LD_VAR 0 19
13626: PUSH
13627: LD_INT 1
13629: PPUSH
13630: LD_VAR 0 19
13634: PPUSH
13635: CALL_OW 12
13639: ARRAY
13640: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13641: LD_VAR 0 10
13645: PUSH
13646: LD_VAR 0 14
13650: ARRAY
13651: PUSH
13652: LD_INT 8
13654: EQUAL
13655: PUSH
13656: LD_VAR 0 10
13660: PUSH
13661: LD_VAR 0 14
13665: ARRAY
13666: PUSH
13667: LD_INT 6
13669: EQUAL
13670: OR
13671: PUSH
13672: LD_VAR 0 10
13676: PUSH
13677: LD_VAR 0 14
13681: ARRAY
13682: PUSH
13683: LD_INT 10
13685: EQUAL
13686: OR
13687: IFFALSE 13728
// begin amChassisTab = [ 4 , 5 ] ;
13689: LD_ADDR_VAR 0 19
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13704: LD_ADDR_OWVAR 37
13708: PUSH
13709: LD_VAR 0 19
13713: PUSH
13714: LD_INT 1
13716: PPUSH
13717: LD_VAR 0 19
13721: PPUSH
13722: CALL_OW 12
13726: ARRAY
13727: ST_TO_ADDR
// end ; end ;
13728: GO 13428
13730: POP
13731: POP
// veh = CreateVehicle ;
13732: LD_ADDR_VAR 0 16
13736: PUSH
13737: CALL_OW 45
13741: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13742: LD_VAR 0 16
13746: PPUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: LD_INT 0
13754: PPUSH
13755: CALL_OW 49
// if vc_control = 1 then
13759: LD_OWVAR 38
13763: PUSH
13764: LD_INT 1
13766: EQUAL
13767: IFFALSE 13824
// begin hc_gallery =  ;
13769: LD_ADDR_OWVAR 33
13773: PUSH
13774: LD_STRING 
13776: ST_TO_ADDR
// hc_name =  ;
13777: LD_ADDR_OWVAR 26
13781: PUSH
13782: LD_STRING 
13784: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13785: LD_INT 0
13787: PPUSH
13788: LD_INT 3
13790: PPUSH
13791: LD_VAR 0 4
13795: PPUSH
13796: CALL_OW 380
// un = CreateHuman ;
13800: LD_ADDR_VAR 0 15
13804: PUSH
13805: CALL_OW 44
13809: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13810: LD_VAR 0 15
13814: PPUSH
13815: LD_VAR 0 16
13819: PPUSH
13820: CALL_OW 52
// end ; if group = 1 then
13824: LD_VAR 0 11
13828: PUSH
13829: LD_INT 1
13831: EQUAL
13832: IFFALSE 13852
// MC_attack_group = MC_attack_group ^ veh else
13834: LD_ADDR_EXP 56
13838: PUSH
13839: LD_EXP 56
13843: PUSH
13844: LD_VAR 0 16
13848: ADD
13849: ST_TO_ADDR
13850: GO 13878
// if group = 2 then
13852: LD_VAR 0 11
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: IFFALSE 13878
// MC_attack_group2 = MC_attack_group2 ^ veh ;
13862: LD_ADDR_EXP 57
13866: PUSH
13867: LD_EXP 57
13871: PUSH
13872: LD_VAR 0 16
13876: ADD
13877: ST_TO_ADDR
// i = i + 1 ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 13
13887: PUSH
13888: LD_INT 1
13890: PLUS
13891: ST_TO_ADDR
// end ; if nation = 2 then
13892: LD_VAR 0 5
13896: PUSH
13897: LD_INT 2
13899: EQUAL
13900: IFFALSE 14463
// begin uc_side = side ;
13902: LD_ADDR_OWVAR 20
13906: PUSH
13907: LD_VAR 0 2
13911: ST_TO_ADDR
// uc_nation = nation ;
13912: LD_ADDR_OWVAR 21
13916: PUSH
13917: LD_VAR 0 5
13921: ST_TO_ADDR
// vc_engine = vehengine ;
13922: LD_ADDR_OWVAR 39
13926: PUSH
13927: LD_VAR 0 6
13931: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13932: LD_ADDR_OWVAR 38
13936: PUSH
13937: LD_VAR 0 7
13941: PUSH
13942: LD_INT 1
13944: PPUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: CALL_OW 12
13954: ARRAY
13955: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13956: LD_ADDR_OWVAR 40
13960: PUSH
13961: LD_VAR 0 9
13965: PUSH
13966: LD_INT 1
13968: PPUSH
13969: LD_VAR 0 9
13973: PPUSH
13974: CALL_OW 12
13978: ARRAY
13979: ST_TO_ADDR
// for j = 1 to ARWeapons do
13980: LD_ADDR_VAR 0 14
13984: PUSH
13985: DOUBLE
13986: LD_INT 1
13988: DEC
13989: ST_TO_ADDR
13990: LD_VAR 0 9
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14301
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13998: LD_VAR 0 9
14002: PUSH
14003: LD_VAR 0 14
14007: ARRAY
14008: PUSH
14009: LD_INT 24
14011: EQUAL
14012: PUSH
14013: LD_VAR 0 9
14017: PUSH
14018: LD_VAR 0 14
14022: ARRAY
14023: PUSH
14024: LD_INT 22
14026: EQUAL
14027: OR
14028: PUSH
14029: LD_VAR 0 9
14033: PUSH
14034: LD_VAR 0 14
14038: ARRAY
14039: PUSH
14040: LD_INT 23
14042: EQUAL
14043: OR
14044: PUSH
14045: LD_VAR 0 9
14049: PUSH
14050: LD_VAR 0 14
14054: ARRAY
14055: PUSH
14056: LD_INT 30
14058: EQUAL
14059: OR
14060: IFFALSE 14097
// begin arChassisTab = [ 14 ] ;
14062: LD_ADDR_VAR 0 18
14066: PUSH
14067: LD_INT 14
14069: PUSH
14070: EMPTY
14071: LIST
14072: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14073: LD_ADDR_OWVAR 37
14077: PUSH
14078: LD_VAR 0 18
14082: PUSH
14083: LD_INT 1
14085: PPUSH
14086: LD_VAR 0 18
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14097: LD_VAR 0 9
14101: PUSH
14102: LD_VAR 0 14
14106: ARRAY
14107: PUSH
14108: LD_INT 29
14110: EQUAL
14111: PUSH
14112: LD_VAR 0 9
14116: PUSH
14117: LD_VAR 0 14
14121: ARRAY
14122: PUSH
14123: LD_INT 28
14125: EQUAL
14126: OR
14127: PUSH
14128: LD_VAR 0 9
14132: PUSH
14133: LD_VAR 0 14
14137: ARRAY
14138: PUSH
14139: LD_INT 27
14141: EQUAL
14142: OR
14143: PUSH
14144: LD_VAR 0 9
14148: PUSH
14149: LD_VAR 0 14
14153: ARRAY
14154: PUSH
14155: LD_INT 26
14157: EQUAL
14158: OR
14159: PUSH
14160: LD_VAR 0 9
14164: PUSH
14165: LD_VAR 0 14
14169: ARRAY
14170: PUSH
14171: LD_INT 25
14173: EQUAL
14174: OR
14175: IFFALSE 14216
// begin arChassisTab = [ 14 , 16 ] ;
14177: LD_ADDR_VAR 0 18
14181: PUSH
14182: LD_INT 14
14184: PUSH
14185: LD_INT 16
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14192: LD_ADDR_OWVAR 37
14196: PUSH
14197: LD_VAR 0 18
14201: PUSH
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 18
14209: PPUSH
14210: CALL_OW 12
14214: ARRAY
14215: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 or ARWeapons [ j ] = 71 or ARWeapons [ j ] = 73 then
14216: LD_VAR 0 9
14220: PUSH
14221: LD_VAR 0 14
14225: ARRAY
14226: PUSH
14227: LD_INT 72
14229: EQUAL
14230: PUSH
14231: LD_VAR 0 9
14235: PUSH
14236: LD_VAR 0 14
14240: ARRAY
14241: PUSH
14242: LD_INT 71
14244: EQUAL
14245: OR
14246: PUSH
14247: LD_VAR 0 9
14251: PUSH
14252: LD_VAR 0 14
14256: ARRAY
14257: PUSH
14258: LD_INT 73
14260: EQUAL
14261: OR
14262: IFFALSE 14299
// begin arChassisTab = [ 16 ] ;
14264: LD_ADDR_VAR 0 18
14268: PUSH
14269: LD_INT 16
14271: PUSH
14272: EMPTY
14273: LIST
14274: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14275: LD_ADDR_OWVAR 37
14279: PUSH
14280: LD_VAR 0 18
14284: PUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_VAR 0 18
14292: PPUSH
14293: CALL_OW 12
14297: ARRAY
14298: ST_TO_ADDR
// end ; end ;
14299: GO 13995
14301: POP
14302: POP
// veh = CreateVehicle ;
14303: LD_ADDR_VAR 0 16
14307: PUSH
14308: CALL_OW 45
14312: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14313: LD_VAR 0 16
14317: PPUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: LD_INT 0
14325: PPUSH
14326: CALL_OW 49
// if vc_control = 1 then
14330: LD_OWVAR 38
14334: PUSH
14335: LD_INT 1
14337: EQUAL
14338: IFFALSE 14395
// begin hc_gallery =  ;
14340: LD_ADDR_OWVAR 33
14344: PUSH
14345: LD_STRING 
14347: ST_TO_ADDR
// hc_name =  ;
14348: LD_ADDR_OWVAR 26
14352: PUSH
14353: LD_STRING 
14355: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14356: LD_INT 0
14358: PPUSH
14359: LD_INT 3
14361: PPUSH
14362: LD_VAR 0 4
14366: PPUSH
14367: CALL_OW 380
// un = CreateHuman ;
14371: LD_ADDR_VAR 0 15
14375: PUSH
14376: CALL_OW 44
14380: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14381: LD_VAR 0 15
14385: PPUSH
14386: LD_VAR 0 16
14390: PPUSH
14391: CALL_OW 52
// end ; if group = 1 then
14395: LD_VAR 0 11
14399: PUSH
14400: LD_INT 1
14402: EQUAL
14403: IFFALSE 14423
// MC_attack_group = MC_attack_group ^ veh else
14405: LD_ADDR_EXP 56
14409: PUSH
14410: LD_EXP 56
14414: PUSH
14415: LD_VAR 0 16
14419: ADD
14420: ST_TO_ADDR
14421: GO 14449
// if group = 2 then
14423: LD_VAR 0 11
14427: PUSH
14428: LD_INT 2
14430: EQUAL
14431: IFFALSE 14449
// MC_attack_group2 = MC_attack_group2 ^ veh ;
14433: LD_ADDR_EXP 57
14437: PUSH
14438: LD_EXP 57
14442: PUSH
14443: LD_VAR 0 16
14447: ADD
14448: ST_TO_ADDR
// i = i + 1 ;
14449: LD_ADDR_VAR 0 13
14453: PUSH
14454: LD_VAR 0 13
14458: PUSH
14459: LD_INT 1
14461: PLUS
14462: ST_TO_ADDR
// end ; if nation = 3 then
14463: LD_VAR 0 5
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: IFFALSE 14931
// begin uc_side = side ;
14473: LD_ADDR_OWVAR 20
14477: PUSH
14478: LD_VAR 0 2
14482: ST_TO_ADDR
// uc_nation = nation ;
14483: LD_ADDR_OWVAR 21
14487: PUSH
14488: LD_VAR 0 5
14492: ST_TO_ADDR
// vc_engine = vehengine ;
14493: LD_ADDR_OWVAR 39
14497: PUSH
14498: LD_VAR 0 6
14502: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14503: LD_ADDR_OWVAR 38
14507: PUSH
14508: LD_VAR 0 7
14512: PUSH
14513: LD_INT 1
14515: PPUSH
14516: LD_VAR 0 7
14520: PPUSH
14521: CALL_OW 12
14525: ARRAY
14526: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14527: LD_ADDR_OWVAR 40
14531: PUSH
14532: LD_VAR 0 8
14536: PUSH
14537: LD_INT 1
14539: PPUSH
14540: LD_VAR 0 8
14544: PPUSH
14545: CALL_OW 12
14549: ARRAY
14550: ST_TO_ADDR
// for j = 1 to RuWeapons do
14551: LD_ADDR_VAR 0 14
14555: PUSH
14556: DOUBLE
14557: LD_INT 1
14559: DEC
14560: ST_TO_ADDR
14561: LD_VAR 0 8
14565: PUSH
14566: FOR_TO
14567: IFFALSE 14769
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14569: LD_VAR 0 8
14573: PUSH
14574: LD_VAR 0 14
14578: ARRAY
14579: PUSH
14580: LD_INT 42
14582: EQUAL
14583: PUSH
14584: LD_VAR 0 8
14588: PUSH
14589: LD_VAR 0 14
14593: ARRAY
14594: PUSH
14595: LD_INT 43
14597: EQUAL
14598: OR
14599: PUSH
14600: LD_VAR 0 8
14604: PUSH
14605: LD_VAR 0 14
14609: ARRAY
14610: PUSH
14611: LD_INT 44
14613: EQUAL
14614: OR
14615: PUSH
14616: LD_VAR 0 8
14620: PUSH
14621: LD_VAR 0 14
14625: ARRAY
14626: PUSH
14627: LD_INT 45
14629: EQUAL
14630: OR
14631: PUSH
14632: LD_VAR 0 8
14636: PUSH
14637: LD_VAR 0 14
14641: ARRAY
14642: PUSH
14643: LD_INT 49
14645: EQUAL
14646: OR
14647: IFFALSE 14696
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14649: LD_ADDR_VAR 0 17
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_INT 23
14662: PUSH
14663: LD_INT 24
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14672: LD_ADDR_OWVAR 37
14676: PUSH
14677: LD_VAR 0 17
14681: PUSH
14682: LD_INT 1
14684: PPUSH
14685: LD_VAR 0 17
14689: PPUSH
14690: CALL_OW 12
14694: ARRAY
14695: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14696: LD_VAR 0 8
14700: PUSH
14701: LD_VAR 0 14
14705: ARRAY
14706: PUSH
14707: LD_INT 46
14709: EQUAL
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_VAR 0 14
14720: ARRAY
14721: PUSH
14722: LD_INT 47
14724: EQUAL
14725: OR
14726: IFFALSE 14767
// begin ruChassisTab = [ 23 , 24 ] ;
14728: LD_ADDR_VAR 0 17
14732: PUSH
14733: LD_INT 23
14735: PUSH
14736: LD_INT 24
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14743: LD_ADDR_OWVAR 37
14747: PUSH
14748: LD_VAR 0 17
14752: PUSH
14753: LD_INT 1
14755: PPUSH
14756: LD_VAR 0 17
14760: PPUSH
14761: CALL_OW 12
14765: ARRAY
14766: ST_TO_ADDR
// end ; end ;
14767: GO 14566
14769: POP
14770: POP
// veh = CreateVehicle ;
14771: LD_ADDR_VAR 0 16
14775: PUSH
14776: CALL_OW 45
14780: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14781: LD_VAR 0 16
14785: PPUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 0
14793: PPUSH
14794: CALL_OW 49
// if vc_control = 1 then
14798: LD_OWVAR 38
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: IFFALSE 14863
// begin hc_gallery =  ;
14808: LD_ADDR_OWVAR 33
14812: PUSH
14813: LD_STRING 
14815: ST_TO_ADDR
// hc_name =  ;
14816: LD_ADDR_OWVAR 26
14820: PUSH
14821: LD_STRING 
14823: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14824: LD_INT 0
14826: PPUSH
14827: LD_INT 3
14829: PPUSH
14830: LD_VAR 0 4
14834: PPUSH
14835: CALL_OW 380
// un = CreateHuman ;
14839: LD_ADDR_VAR 0 15
14843: PUSH
14844: CALL_OW 44
14848: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14849: LD_VAR 0 15
14853: PPUSH
14854: LD_VAR 0 16
14858: PPUSH
14859: CALL_OW 52
// end ; if group = 1 then
14863: LD_VAR 0 11
14867: PUSH
14868: LD_INT 1
14870: EQUAL
14871: IFFALSE 14891
// MC_attack_group = MC_attack_group ^ veh else
14873: LD_ADDR_EXP 56
14877: PUSH
14878: LD_EXP 56
14882: PUSH
14883: LD_VAR 0 16
14887: ADD
14888: ST_TO_ADDR
14889: GO 14917
// if group = 2 then
14891: LD_VAR 0 11
14895: PUSH
14896: LD_INT 2
14898: EQUAL
14899: IFFALSE 14917
// MC_attack_group2 = MC_attack_group2 ^ veh ;
14901: LD_ADDR_EXP 57
14905: PUSH
14906: LD_EXP 57
14910: PUSH
14911: LD_VAR 0 16
14915: ADD
14916: ST_TO_ADDR
// i = i + 1 ;
14917: LD_ADDR_VAR 0 13
14921: PUSH
14922: LD_VAR 0 13
14926: PUSH
14927: LD_INT 1
14929: PLUS
14930: ST_TO_ADDR
// end ; until i = vehCount ;
14931: LD_VAR 0 13
14935: PUSH
14936: LD_VAR 0 3
14940: EQUAL
14941: IFFALSE 13318
// end ;
14943: LD_VAR 0 12
14947: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , group ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
14948: LD_INT 0
14950: PPUSH
14951: PPUSH
14952: PPUSH
14953: PPUSH
14954: PPUSH
14955: PPUSH
14956: PPUSH
// for i = 1 to medicCount do
14957: LD_ADDR_VAR 0 12
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 7
14971: PUSH
14972: FOR_TO
14973: IFFALSE 15109
// begin uc_side = side ;
14975: LD_ADDR_OWVAR 20
14979: PUSH
14980: LD_VAR 0 1
14984: ST_TO_ADDR
// uc_nation = nation ;
14985: LD_ADDR_OWVAR 21
14989: PUSH
14990: LD_VAR 0 2
14994: ST_TO_ADDR
// hc_name =  ;
14995: LD_ADDR_OWVAR 26
14999: PUSH
15000: LD_STRING 
15002: ST_TO_ADDR
// hc_gallery =  ;
15003: LD_ADDR_OWVAR 33
15007: PUSH
15008: LD_STRING 
15010: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
15011: LD_INT 0
15013: PPUSH
15014: LD_INT 4
15016: PPUSH
15017: LD_VAR 0 8
15021: PPUSH
15022: CALL_OW 380
// un = CreateHuman ;
15026: LD_ADDR_VAR 0 14
15030: PUSH
15031: CALL_OW 44
15035: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15036: LD_VAR 0 14
15040: PPUSH
15041: LD_VAR 0 9
15045: PPUSH
15046: LD_INT 0
15048: PPUSH
15049: CALL_OW 49
// if group = 1 then
15053: LD_VAR 0 10
15057: PUSH
15058: LD_INT 1
15060: EQUAL
15061: IFFALSE 15081
// MC_attack_group = MC_attack_group ^ un else
15063: LD_ADDR_EXP 56
15067: PUSH
15068: LD_EXP 56
15072: PUSH
15073: LD_VAR 0 14
15077: ADD
15078: ST_TO_ADDR
15079: GO 15107
// if group = 2 then
15081: LD_VAR 0 10
15085: PUSH
15086: LD_INT 2
15088: EQUAL
15089: IFFALSE 15107
// MC_attack_group2 = MC_attack_group2 ^ un ;
15091: LD_ADDR_EXP 57
15095: PUSH
15096: LD_EXP 57
15100: PUSH
15101: LD_VAR 0 14
15105: ADD
15106: ST_TO_ADDR
// end ;
15107: GO 14972
15109: POP
15110: POP
// for i = 1 to soldierCount do
15111: LD_ADDR_VAR 0 12
15115: PUSH
15116: DOUBLE
15117: LD_INT 1
15119: DEC
15120: ST_TO_ADDR
15121: LD_VAR 0 3
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15263
// begin uc_side = side ;
15129: LD_ADDR_OWVAR 20
15133: PUSH
15134: LD_VAR 0 1
15138: ST_TO_ADDR
// uc_nation = nation ;
15139: LD_ADDR_OWVAR 21
15143: PUSH
15144: LD_VAR 0 2
15148: ST_TO_ADDR
// hc_name =  ;
15149: LD_ADDR_OWVAR 26
15153: PUSH
15154: LD_STRING 
15156: ST_TO_ADDR
// hc_gallery =  ;
15157: LD_ADDR_OWVAR 33
15161: PUSH
15162: LD_STRING 
15164: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
15165: LD_INT 0
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: LD_VAR 0 8
15175: PPUSH
15176: CALL_OW 380
// un = CreateHuman ;
15180: LD_ADDR_VAR 0 14
15184: PUSH
15185: CALL_OW 44
15189: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15190: LD_VAR 0 14
15194: PPUSH
15195: LD_VAR 0 9
15199: PPUSH
15200: LD_INT 0
15202: PPUSH
15203: CALL_OW 49
// if group = 1 then
15207: LD_VAR 0 10
15211: PUSH
15212: LD_INT 1
15214: EQUAL
15215: IFFALSE 15235
// MC_attack_group = MC_attack_group ^ un else
15217: LD_ADDR_EXP 56
15221: PUSH
15222: LD_EXP 56
15226: PUSH
15227: LD_VAR 0 14
15231: ADD
15232: ST_TO_ADDR
15233: GO 15261
// if group = 2 then
15235: LD_VAR 0 10
15239: PUSH
15240: LD_INT 2
15242: EQUAL
15243: IFFALSE 15261
// MC_attack_group2 = MC_attack_group2 ^ un ;
15245: LD_ADDR_EXP 57
15249: PUSH
15250: LD_EXP 57
15254: PUSH
15255: LD_VAR 0 14
15259: ADD
15260: ST_TO_ADDR
// end ;
15261: GO 15126
15263: POP
15264: POP
// for i = 1 to sniperCount do
15265: LD_ADDR_VAR 0 12
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_VAR 0 4
15279: PUSH
15280: FOR_TO
15281: IFFALSE 15417
// begin uc_side = side ;
15283: LD_ADDR_OWVAR 20
15287: PUSH
15288: LD_VAR 0 1
15292: ST_TO_ADDR
// uc_nation = nation ;
15293: LD_ADDR_OWVAR 21
15297: PUSH
15298: LD_VAR 0 2
15302: ST_TO_ADDR
// hc_name =  ;
15303: LD_ADDR_OWVAR 26
15307: PUSH
15308: LD_STRING 
15310: ST_TO_ADDR
// hc_gallery =  ;
15311: LD_ADDR_OWVAR 33
15315: PUSH
15316: LD_STRING 
15318: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15319: LD_INT 0
15321: PPUSH
15322: LD_INT 5
15324: PPUSH
15325: LD_VAR 0 8
15329: PPUSH
15330: CALL_OW 380
// un = CreateHuman ;
15334: LD_ADDR_VAR 0 14
15338: PUSH
15339: CALL_OW 44
15343: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15344: LD_VAR 0 14
15348: PPUSH
15349: LD_VAR 0 9
15353: PPUSH
15354: LD_INT 0
15356: PPUSH
15357: CALL_OW 49
// if group = 1 then
15361: LD_VAR 0 10
15365: PUSH
15366: LD_INT 1
15368: EQUAL
15369: IFFALSE 15389
// MC_attack_group = MC_attack_group ^ un else
15371: LD_ADDR_EXP 56
15375: PUSH
15376: LD_EXP 56
15380: PUSH
15381: LD_VAR 0 14
15385: ADD
15386: ST_TO_ADDR
15387: GO 15415
// if group = 2 then
15389: LD_VAR 0 10
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: IFFALSE 15415
// MC_attack_group2 = MC_attack_group2 ^ un ;
15399: LD_ADDR_EXP 57
15403: PUSH
15404: LD_EXP 57
15408: PUSH
15409: LD_VAR 0 14
15413: ADD
15414: ST_TO_ADDR
// end ;
15415: GO 15280
15417: POP
15418: POP
// for i = 1 to bazookCount do
15419: LD_ADDR_VAR 0 12
15423: PUSH
15424: DOUBLE
15425: LD_INT 1
15427: DEC
15428: ST_TO_ADDR
15429: LD_VAR 0 5
15433: PUSH
15434: FOR_TO
15435: IFFALSE 15571
// begin uc_side = side ;
15437: LD_ADDR_OWVAR 20
15441: PUSH
15442: LD_VAR 0 1
15446: ST_TO_ADDR
// uc_nation = nation ;
15447: LD_ADDR_OWVAR 21
15451: PUSH
15452: LD_VAR 0 2
15456: ST_TO_ADDR
// hc_name =  ;
15457: LD_ADDR_OWVAR 26
15461: PUSH
15462: LD_STRING 
15464: ST_TO_ADDR
// hc_gallery =  ;
15465: LD_ADDR_OWVAR 33
15469: PUSH
15470: LD_STRING 
15472: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15473: LD_INT 0
15475: PPUSH
15476: LD_INT 9
15478: PPUSH
15479: LD_VAR 0 8
15483: PPUSH
15484: CALL_OW 380
// un = CreateHuman ;
15488: LD_ADDR_VAR 0 14
15492: PUSH
15493: CALL_OW 44
15497: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15498: LD_VAR 0 14
15502: PPUSH
15503: LD_VAR 0 9
15507: PPUSH
15508: LD_INT 0
15510: PPUSH
15511: CALL_OW 49
// if group = 1 then
15515: LD_VAR 0 10
15519: PUSH
15520: LD_INT 1
15522: EQUAL
15523: IFFALSE 15543
// MC_attack_group = MC_attack_group ^ un else
15525: LD_ADDR_EXP 56
15529: PUSH
15530: LD_EXP 56
15534: PUSH
15535: LD_VAR 0 14
15539: ADD
15540: ST_TO_ADDR
15541: GO 15569
// if group = 2 then
15543: LD_VAR 0 10
15547: PUSH
15548: LD_INT 2
15550: EQUAL
15551: IFFALSE 15569
// MC_attack_group2 = MC_attack_group2 ^ un ;
15553: LD_ADDR_EXP 57
15557: PUSH
15558: LD_EXP 57
15562: PUSH
15563: LD_VAR 0 14
15567: ADD
15568: ST_TO_ADDR
// end ;
15569: GO 15434
15571: POP
15572: POP
// for i = 1 to mortalCount do
15573: LD_ADDR_VAR 0 12
15577: PUSH
15578: DOUBLE
15579: LD_INT 1
15581: DEC
15582: ST_TO_ADDR
15583: LD_VAR 0 6
15587: PUSH
15588: FOR_TO
15589: IFFALSE 15725
// begin uc_side = side ;
15591: LD_ADDR_OWVAR 20
15595: PUSH
15596: LD_VAR 0 1
15600: ST_TO_ADDR
// uc_nation = nation ;
15601: LD_ADDR_OWVAR 21
15605: PUSH
15606: LD_VAR 0 2
15610: ST_TO_ADDR
// hc_name =  ;
15611: LD_ADDR_OWVAR 26
15615: PUSH
15616: LD_STRING 
15618: ST_TO_ADDR
// hc_gallery =  ;
15619: LD_ADDR_OWVAR 33
15623: PUSH
15624: LD_STRING 
15626: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15627: LD_INT 0
15629: PPUSH
15630: LD_INT 8
15632: PPUSH
15633: LD_VAR 0 8
15637: PPUSH
15638: CALL_OW 380
// un = CreateHuman ;
15642: LD_ADDR_VAR 0 14
15646: PUSH
15647: CALL_OW 44
15651: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15652: LD_VAR 0 14
15656: PPUSH
15657: LD_VAR 0 9
15661: PPUSH
15662: LD_INT 0
15664: PPUSH
15665: CALL_OW 49
// if group = 1 then
15669: LD_VAR 0 10
15673: PUSH
15674: LD_INT 1
15676: EQUAL
15677: IFFALSE 15697
// MC_attack_group = MC_attack_group ^ un else
15679: LD_ADDR_EXP 56
15683: PUSH
15684: LD_EXP 56
15688: PUSH
15689: LD_VAR 0 14
15693: ADD
15694: ST_TO_ADDR
15695: GO 15723
// if group = 2 then
15697: LD_VAR 0 10
15701: PUSH
15702: LD_INT 2
15704: EQUAL
15705: IFFALSE 15723
// MC_attack_group2 = MC_attack_group2 ^ un ;
15707: LD_ADDR_EXP 57
15711: PUSH
15712: LD_EXP 57
15716: PUSH
15717: LD_VAR 0 14
15721: ADD
15722: ST_TO_ADDR
// end ;
15723: GO 15588
15725: POP
15726: POP
// end ;
15727: LD_VAR 0 11
15731: RET
// export function PrepareDvalishvili ; var DvaliVeh ; begin
15732: LD_INT 0
15734: PPUSH
15735: PPUSH
// uc_side = 8 ;
15736: LD_ADDR_OWVAR 20
15740: PUSH
15741: LD_INT 8
15743: ST_TO_ADDR
// uc_nation = 2 ;
15744: LD_ADDR_OWVAR 21
15748: PUSH
15749: LD_INT 2
15751: ST_TO_ADDR
// vc_chassis := ar_heavy_tracked ;
15752: LD_ADDR_OWVAR 37
15756: PUSH
15757: LD_EXP 111
15761: ST_TO_ADDR
// vc_engine := engine_siberite ;
15762: LD_ADDR_OWVAR 39
15766: PUSH
15767: LD_INT 3
15769: ST_TO_ADDR
// vc_control := control_manual ;
15770: LD_ADDR_OWVAR 38
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// vc_weapon := ar_heavy_gun ;
15778: LD_ADDR_OWVAR 40
15782: PUSH
15783: LD_EXP 114
15787: ST_TO_ADDR
// DvaliVeh := CreateVehicle ;
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: CALL_OW 45
15797: ST_TO_ADDR
// PlaceHumanInUnit ( Dvalishvili , DvaliVeh ) ;
15798: LD_EXP 46
15802: PPUSH
15803: LD_VAR 0 2
15807: PPUSH
15808: CALL_OW 52
// PlaceUnitInArea ( DvaliVeh , DvaliSpawn_S , false ) ;
15812: LD_VAR 0 2
15816: PPUSH
15817: LD_INT 11
15819: PPUSH
15820: LD_INT 0
15822: PPUSH
15823: CALL 60665 0 3
// MC_attack_group2 := MC_attack_group2 ^ Dvalishvili ^ DvaliVeh ;
15827: LD_ADDR_EXP 57
15831: PUSH
15832: LD_EXP 57
15836: PUSH
15837: LD_EXP 46
15841: ADD
15842: PUSH
15843: LD_VAR 0 2
15847: ADD
15848: ST_TO_ADDR
// end ; end_of_file
15849: LD_VAR 0 1
15853: RET
// export RuSolMinLevel , RuSolMaxLevel , GeoSolMaxLevel ; export RU2KolvichArrival , GEODvaliArrival , DefenseTime ; export function PrepareDifficulty ; begin
15854: LD_INT 0
15856: PPUSH
// if difficulty = 1 then
15857: LD_OWVAR 67
15861: PUSH
15862: LD_INT 1
15864: EQUAL
15865: IFFALSE 16188
// begin RuSolMinLevel = 6 ;
15867: LD_ADDR_EXP 58
15871: PUSH
15872: LD_INT 6
15874: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
15875: LD_ADDR_EXP 59
15879: PUSH
15880: LD_INT 8
15882: ST_TO_ADDR
// GeoSolMaxLevel = 9 ;
15883: LD_ADDR_EXP 60
15887: PUSH
15888: LD_INT 9
15890: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
15891: LD_INT 48
15893: PPUSH
15894: LD_INT 3
15896: PPUSH
15897: LD_INT 2
15899: PPUSH
15900: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15904: LD_INT 49
15906: PPUSH
15907: LD_INT 3
15909: PPUSH
15910: LD_INT 2
15912: PPUSH
15913: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
15917: LD_INT 51
15919: PPUSH
15920: LD_INT 3
15922: PPUSH
15923: LD_INT 2
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
15930: LD_INT 52
15932: PPUSH
15933: LD_INT 3
15935: PPUSH
15936: LD_INT 2
15938: PPUSH
15939: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
15943: LD_INT 57
15945: PPUSH
15946: LD_INT 3
15948: PPUSH
15949: LD_INT 2
15951: PPUSH
15952: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
15956: LD_INT 58
15958: PPUSH
15959: LD_INT 3
15961: PPUSH
15962: LD_INT 2
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
15969: LD_INT 30
15971: PPUSH
15972: LD_INT 3
15974: PPUSH
15975: LD_INT 2
15977: PPUSH
15978: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15982: LD_INT 48
15984: PPUSH
15985: LD_INT 6
15987: PPUSH
15988: LD_INT 2
15990: PPUSH
15991: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15995: LD_INT 49
15997: PPUSH
15998: LD_INT 6
16000: PPUSH
16001: LD_INT 2
16003: PPUSH
16004: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
16008: LD_INT 51
16010: PPUSH
16011: LD_INT 6
16013: PPUSH
16014: LD_INT 2
16016: PPUSH
16017: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
16021: LD_INT 52
16023: PPUSH
16024: LD_INT 6
16026: PPUSH
16027: LD_INT 2
16029: PPUSH
16030: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
16034: LD_INT 57
16036: PPUSH
16037: LD_INT 6
16039: PPUSH
16040: LD_INT 2
16042: PPUSH
16043: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
16047: LD_INT 58
16049: PPUSH
16050: LD_INT 6
16052: PPUSH
16053: LD_INT 2
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
16060: LD_INT 30
16062: PPUSH
16063: LD_INT 6
16065: PPUSH
16066: LD_INT 2
16068: PPUSH
16069: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
16073: LD_INT 28
16075: PPUSH
16076: LD_INT 6
16078: PPUSH
16079: LD_INT 2
16081: PPUSH
16082: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
16086: LD_INT 48
16088: PPUSH
16089: LD_INT 8
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
16099: LD_INT 49
16101: PPUSH
16102: LD_INT 8
16104: PPUSH
16105: LD_INT 2
16107: PPUSH
16108: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
16112: LD_INT 51
16114: PPUSH
16115: LD_INT 8
16117: PPUSH
16118: LD_INT 2
16120: PPUSH
16121: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
16125: LD_INT 52
16127: PPUSH
16128: LD_INT 8
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
16138: LD_INT 66
16140: PPUSH
16141: LD_INT 8
16143: PPUSH
16144: LD_INT 2
16146: PPUSH
16147: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
16151: LD_INT 67
16153: PPUSH
16154: LD_INT 8
16156: PPUSH
16157: LD_INT 2
16159: PPUSH
16160: CALL_OW 322
// RU2KolvichArrival = 60 60$00 ;
16164: LD_ADDR_EXP 61
16168: PUSH
16169: LD_INT 126000
16171: ST_TO_ADDR
// GEODvaliArrival = 8 8$00 ;
16172: LD_ADDR_EXP 62
16176: PUSH
16177: LD_INT 16800
16179: ST_TO_ADDR
// DefenseTime = 20 20$00 ;
16180: LD_ADDR_EXP 63
16184: PUSH
16185: LD_INT 42000
16187: ST_TO_ADDR
// end ; if difficulty = 2 then
16188: LD_OWVAR 67
16192: PUSH
16193: LD_INT 2
16195: EQUAL
16196: IFFALSE 16636
// begin RuSolMinLevel = 7 ;
16198: LD_ADDR_EXP 58
16202: PUSH
16203: LD_INT 7
16205: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
16206: LD_ADDR_EXP 59
16210: PUSH
16211: LD_INT 9
16213: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
16214: LD_ADDR_EXP 60
16218: PUSH
16219: LD_INT 10
16221: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
16222: LD_INT 48
16224: PPUSH
16225: LD_INT 3
16227: PPUSH
16228: LD_INT 2
16230: PPUSH
16231: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
16235: LD_INT 49
16237: PPUSH
16238: LD_INT 3
16240: PPUSH
16241: LD_INT 2
16243: PPUSH
16244: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
16248: LD_INT 49
16250: PPUSH
16251: LD_INT 3
16253: PPUSH
16254: LD_INT 2
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
16261: LD_INT 51
16263: PPUSH
16264: LD_INT 3
16266: PPUSH
16267: LD_INT 2
16269: PPUSH
16270: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
16274: LD_INT 52
16276: PPUSH
16277: LD_INT 3
16279: PPUSH
16280: LD_INT 2
16282: PPUSH
16283: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
16287: LD_INT 57
16289: PPUSH
16290: LD_INT 3
16292: PPUSH
16293: LD_INT 2
16295: PPUSH
16296: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
16300: LD_INT 58
16302: PPUSH
16303: LD_INT 3
16305: PPUSH
16306: LD_INT 2
16308: PPUSH
16309: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
16313: LD_INT 63
16315: PPUSH
16316: LD_INT 3
16318: PPUSH
16319: LD_INT 2
16321: PPUSH
16322: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
16326: LD_INT 30
16328: PPUSH
16329: LD_INT 3
16331: PPUSH
16332: LD_INT 2
16334: PPUSH
16335: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
16339: LD_INT 48
16341: PPUSH
16342: LD_INT 6
16344: PPUSH
16345: LD_INT 2
16347: PPUSH
16348: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
16352: LD_INT 49
16354: PPUSH
16355: LD_INT 6
16357: PPUSH
16358: LD_INT 2
16360: PPUSH
16361: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
16365: LD_INT 50
16367: PPUSH
16368: LD_INT 6
16370: PPUSH
16371: LD_INT 2
16373: PPUSH
16374: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
16378: LD_INT 51
16380: PPUSH
16381: LD_INT 6
16383: PPUSH
16384: LD_INT 2
16386: PPUSH
16387: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
16391: LD_INT 52
16393: PPUSH
16394: LD_INT 6
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
16404: LD_INT 53
16406: PPUSH
16407: LD_INT 6
16409: PPUSH
16410: LD_INT 2
16412: PPUSH
16413: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
16417: LD_INT 57
16419: PPUSH
16420: LD_INT 6
16422: PPUSH
16423: LD_INT 2
16425: PPUSH
16426: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
16430: LD_INT 58
16432: PPUSH
16433: LD_INT 6
16435: PPUSH
16436: LD_INT 2
16438: PPUSH
16439: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
16443: LD_INT 59
16445: PPUSH
16446: LD_INT 6
16448: PPUSH
16449: LD_INT 2
16451: PPUSH
16452: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
16456: LD_INT 63
16458: PPUSH
16459: LD_INT 6
16461: PPUSH
16462: LD_INT 2
16464: PPUSH
16465: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
16469: LD_INT 64
16471: PPUSH
16472: LD_INT 6
16474: PPUSH
16475: LD_INT 2
16477: PPUSH
16478: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
16482: LD_INT 30
16484: PPUSH
16485: LD_INT 6
16487: PPUSH
16488: LD_INT 2
16490: PPUSH
16491: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
16495: LD_INT 28
16497: PPUSH
16498: LD_INT 6
16500: PPUSH
16501: LD_INT 2
16503: PPUSH
16504: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
16508: LD_INT 48
16510: PPUSH
16511: LD_INT 8
16513: PPUSH
16514: LD_INT 2
16516: PPUSH
16517: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
16521: LD_INT 49
16523: PPUSH
16524: LD_INT 8
16526: PPUSH
16527: LD_INT 2
16529: PPUSH
16530: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
16534: LD_INT 50
16536: PPUSH
16537: LD_INT 8
16539: PPUSH
16540: LD_INT 2
16542: PPUSH
16543: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
16547: LD_INT 51
16549: PPUSH
16550: LD_INT 8
16552: PPUSH
16553: LD_INT 2
16555: PPUSH
16556: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
16560: LD_INT 52
16562: PPUSH
16563: LD_INT 8
16565: PPUSH
16566: LD_INT 2
16568: PPUSH
16569: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
16573: LD_INT 66
16575: PPUSH
16576: LD_INT 8
16578: PPUSH
16579: LD_INT 2
16581: PPUSH
16582: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
16586: LD_INT 67
16588: PPUSH
16589: LD_INT 8
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
16599: LD_INT 5
16601: PPUSH
16602: LD_INT 8
16604: PPUSH
16605: LD_INT 2
16607: PPUSH
16608: CALL_OW 322
// RU2KolvichArrival = 50 50$00 ;
16612: LD_ADDR_EXP 61
16616: PUSH
16617: LD_INT 105000
16619: ST_TO_ADDR
// GEODvaliArrival = 6 6$00 ;
16620: LD_ADDR_EXP 62
16624: PUSH
16625: LD_INT 12600
16627: ST_TO_ADDR
// DefenseTime = 25 25$00 ;
16628: LD_ADDR_EXP 63
16632: PUSH
16633: LD_INT 52500
16635: ST_TO_ADDR
// end ; if difficulty = 3 then
16636: LD_OWVAR 67
16640: PUSH
16641: LD_INT 3
16643: EQUAL
16644: IFFALSE 17175
// begin RuSolMinLevel = 9 ;
16646: LD_ADDR_EXP 58
16650: PUSH
16651: LD_INT 9
16653: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
16654: LD_ADDR_EXP 59
16658: PUSH
16659: LD_INT 10
16661: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
16662: LD_ADDR_EXP 60
16666: PUSH
16667: LD_INT 10
16669: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
16670: LD_INT 48
16672: PPUSH
16673: LD_INT 3
16675: PPUSH
16676: LD_INT 2
16678: PPUSH
16679: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
16683: LD_INT 51
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: LD_INT 2
16691: PPUSH
16692: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
16696: LD_INT 57
16698: PPUSH
16699: LD_INT 3
16701: PPUSH
16702: LD_INT 2
16704: PPUSH
16705: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
16709: LD_INT 49
16711: PPUSH
16712: LD_INT 3
16714: PPUSH
16715: LD_INT 2
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
16722: LD_INT 52
16724: PPUSH
16725: LD_INT 3
16727: PPUSH
16728: LD_INT 2
16730: PPUSH
16731: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
16735: LD_INT 58
16737: PPUSH
16738: LD_INT 3
16740: PPUSH
16741: LD_INT 2
16743: PPUSH
16744: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
16748: LD_INT 50
16750: PPUSH
16751: LD_INT 3
16753: PPUSH
16754: LD_INT 2
16756: PPUSH
16757: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
16761: LD_INT 59
16763: PPUSH
16764: LD_INT 3
16766: PPUSH
16767: LD_INT 2
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
16774: LD_INT 53
16776: PPUSH
16777: LD_INT 3
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
16787: LD_INT 63
16789: PPUSH
16790: LD_INT 3
16792: PPUSH
16793: LD_INT 2
16795: PPUSH
16796: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
16800: LD_INT 64
16802: PPUSH
16803: LD_INT 3
16805: PPUSH
16806: LD_INT 2
16808: PPUSH
16809: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
16813: LD_INT 30
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: LD_INT 2
16821: PPUSH
16822: CALL_OW 322
// SetTech ( tech_TauRad , 3 , state_researched ) ;
16826: LD_INT 28
16828: PPUSH
16829: LD_INT 3
16831: PPUSH
16832: LD_INT 2
16834: PPUSH
16835: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
16839: LD_INT 48
16841: PPUSH
16842: LD_INT 6
16844: PPUSH
16845: LD_INT 2
16847: PPUSH
16848: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
16852: LD_INT 51
16854: PPUSH
16855: LD_INT 6
16857: PPUSH
16858: LD_INT 2
16860: PPUSH
16861: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
16865: LD_INT 57
16867: PPUSH
16868: LD_INT 6
16870: PPUSH
16871: LD_INT 2
16873: PPUSH
16874: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
16878: LD_INT 49
16880: PPUSH
16881: LD_INT 6
16883: PPUSH
16884: LD_INT 2
16886: PPUSH
16887: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
16891: LD_INT 52
16893: PPUSH
16894: LD_INT 6
16896: PPUSH
16897: LD_INT 2
16899: PPUSH
16900: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
16904: LD_INT 58
16906: PPUSH
16907: LD_INT 6
16909: PPUSH
16910: LD_INT 2
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
16917: LD_INT 50
16919: PPUSH
16920: LD_INT 6
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
16930: LD_INT 53
16932: PPUSH
16933: LD_INT 6
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
16943: LD_INT 59
16945: PPUSH
16946: LD_INT 6
16948: PPUSH
16949: LD_INT 2
16951: PPUSH
16952: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
16956: LD_INT 63
16958: PPUSH
16959: LD_INT 6
16961: PPUSH
16962: LD_INT 2
16964: PPUSH
16965: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
16969: LD_INT 64
16971: PPUSH
16972: LD_INT 6
16974: PPUSH
16975: LD_INT 2
16977: PPUSH
16978: CALL_OW 322
// SetTech ( tech_ST3 , 6 , state_researched ) ;
16982: LD_INT 65
16984: PPUSH
16985: LD_INT 6
16987: PPUSH
16988: LD_INT 2
16990: PPUSH
16991: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
16995: LD_INT 30
16997: PPUSH
16998: LD_INT 6
17000: PPUSH
17001: LD_INT 2
17003: PPUSH
17004: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
17008: LD_INT 28
17010: PPUSH
17011: LD_INT 6
17013: PPUSH
17014: LD_INT 2
17016: PPUSH
17017: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
17021: LD_INT 48
17023: PPUSH
17024: LD_INT 8
17026: PPUSH
17027: LD_INT 2
17029: PPUSH
17030: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
17034: LD_INT 49
17036: PPUSH
17037: LD_INT 8
17039: PPUSH
17040: LD_INT 2
17042: PPUSH
17043: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
17047: LD_INT 50
17049: PPUSH
17050: LD_INT 8
17052: PPUSH
17053: LD_INT 2
17055: PPUSH
17056: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
17060: LD_INT 51
17062: PPUSH
17063: LD_INT 8
17065: PPUSH
17066: LD_INT 2
17068: PPUSH
17069: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
17073: LD_INT 52
17075: PPUSH
17076: LD_INT 8
17078: PPUSH
17079: LD_INT 2
17081: PPUSH
17082: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
17086: LD_INT 53
17088: PPUSH
17089: LD_INT 8
17091: PPUSH
17092: LD_INT 2
17094: PPUSH
17095: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
17099: LD_INT 66
17101: PPUSH
17102: LD_INT 8
17104: PPUSH
17105: LD_INT 2
17107: PPUSH
17108: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
17112: LD_INT 67
17114: PPUSH
17115: LD_INT 8
17117: PPUSH
17118: LD_INT 2
17120: PPUSH
17121: CALL_OW 322
// SetTech ( tech_Bio3 , 8 , state_researched ) ;
17125: LD_INT 68
17127: PPUSH
17128: LD_INT 8
17130: PPUSH
17131: LD_INT 2
17133: PPUSH
17134: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
17138: LD_INT 5
17140: PPUSH
17141: LD_INT 8
17143: PPUSH
17144: LD_INT 2
17146: PPUSH
17147: CALL_OW 322
// RU2KolvichArrival = 45 45$00 ;
17151: LD_ADDR_EXP 61
17155: PUSH
17156: LD_INT 94500
17158: ST_TO_ADDR
// GEODvaliArrival = 4 4$00 ;
17159: LD_ADDR_EXP 62
17163: PUSH
17164: LD_INT 8400
17166: ST_TO_ADDR
// DefenseTime = 30 30$00 ;
17167: LD_ADDR_EXP 63
17171: PUSH
17172: LD_INT 63000
17174: ST_TO_ADDR
// end ; end ; end_of_file
17175: LD_VAR 0 1
17179: RET
// export AM_SquadOne , AM_SquadTwo , AM_SquadThree ; every 0 0$1 trigger MissionStart do
17180: LD_EXP 1
17184: IFFALSE 17406
17186: GO 17188
17188: DISABLE
// begin Wait ( 1 1$0 ) ;
17189: LD_INT 2100
17191: PPUSH
17192: CALL_OW 67
// ComBuild ( AM_Engineers , b_oil_mine , 63 , 69 , 0 ) ;
17196: LD_EXP 27
17200: PPUSH
17201: LD_INT 29
17203: PPUSH
17204: LD_INT 63
17206: PPUSH
17207: LD_INT 69
17209: PPUSH
17210: LD_INT 0
17212: PPUSH
17213: CALL_OW 145
// AddComBuild ( AM_Engineers , b_siberite_mine , 104 , 96 , 0 ) ;
17217: LD_EXP 27
17221: PPUSH
17222: LD_INT 30
17224: PPUSH
17225: LD_INT 104
17227: PPUSH
17228: LD_INT 96
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 97 , 0 ) ;
17238: LD_EXP 27
17242: PPUSH
17243: LD_INT 26
17245: PPUSH
17246: LD_INT 90
17248: PPUSH
17249: LD_INT 97
17251: PPUSH
17252: LD_INT 0
17254: PPUSH
17255: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 94 , 0 ) ;
17259: LD_EXP 27
17263: PPUSH
17264: LD_INT 26
17266: PPUSH
17267: LD_INT 90
17269: PPUSH
17270: LD_INT 94
17272: PPUSH
17273: LD_INT 0
17275: PPUSH
17276: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 83 , 96 , 0 ) ;
17280: LD_EXP 27
17284: PPUSH
17285: LD_INT 26
17287: PPUSH
17288: LD_INT 83
17290: PPUSH
17291: LD_INT 96
17293: PPUSH
17294: LD_INT 0
17296: PPUSH
17297: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_gun , 80 , 78 , 0 ) ;
17301: LD_EXP 27
17305: PPUSH
17306: LD_INT 17
17308: PPUSH
17309: LD_INT 80
17311: PPUSH
17312: LD_INT 78
17314: PPUSH
17315: LD_INT 0
17317: PPUSH
17318: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_rocket , 76 , 71 , 2 ) ;
17322: LD_EXP 27
17326: PPUSH
17327: LD_INT 18
17329: PPUSH
17330: LD_INT 76
17332: PPUSH
17333: LD_INT 71
17335: PPUSH
17336: LD_INT 2
17338: PPUSH
17339: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_computer , 79 , 71 , 3 ) ;
17343: LD_EXP 27
17347: PPUSH
17348: LD_INT 24
17350: PPUSH
17351: LD_INT 79
17353: PPUSH
17354: LD_INT 71
17356: PPUSH
17357: LD_INT 3
17359: PPUSH
17360: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_track , 83 , 75 , 4 ) ;
17364: LD_EXP 27
17368: PPUSH
17369: LD_INT 16
17371: PPUSH
17372: LD_INT 83
17374: PPUSH
17375: LD_INT 75
17377: PPUSH
17378: LD_INT 4
17380: PPUSH
17381: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_laser , 76 , 73 , 1 ) ;
17385: LD_EXP 27
17389: PPUSH
17390: LD_INT 25
17392: PPUSH
17393: LD_INT 76
17395: PPUSH
17396: LD_INT 73
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: CALL_OW 205
// end ;
17406: END
// export AM_Factory ; export function Construct_Vehicles ; var i ; begin
17407: LD_INT 0
17409: PPUSH
17410: PPUSH
// AddResourceType ( GetBase ( AMBase ) , mat_oil , 500 ) ;
17411: LD_INT 351
17413: PPUSH
17414: CALL_OW 274
17418: PPUSH
17419: LD_INT 2
17421: PPUSH
17422: LD_INT 500
17424: PPUSH
17425: CALL_OW 276
// for i = 1 to 5 do
17429: LD_ADDR_VAR 0 2
17433: PUSH
17434: DOUBLE
17435: LD_INT 1
17437: DEC
17438: ST_TO_ADDR
17439: LD_INT 5
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17486
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
17445: LD_INT 351
17447: PPUSH
17448: CALL_OW 274
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_INT 100
17458: PPUSH
17459: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_double_gun ) ;
17463: LD_EXP 67
17467: PPUSH
17468: LD_INT 3
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 5
17479: PPUSH
17480: CALL_OW 185
// end ;
17484: GO 17442
17486: POP
17487: POP
// for i = 1 to 4 do
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: DOUBLE
17494: LD_INT 1
17496: DEC
17497: ST_TO_ADDR
17498: LD_INT 4
17500: PUSH
17501: FOR_TO
17502: IFFALSE 17545
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
17504: LD_INT 351
17506: PPUSH
17507: CALL_OW 274
17511: PPUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_INT 100
17517: PPUSH
17518: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ) ;
17522: LD_EXP 67
17526: PPUSH
17527: LD_INT 3
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 3
17535: PPUSH
17536: LD_INT 7
17538: PPUSH
17539: CALL_OW 185
// end ;
17543: GO 17501
17545: POP
17546: POP
// for i = 1 to 7 do
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: DOUBLE
17553: LD_INT 1
17555: DEC
17556: ST_TO_ADDR
17557: LD_INT 7
17559: PUSH
17560: FOR_TO
17561: IFFALSE 17604
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
17563: LD_INT 351
17565: PPUSH
17566: CALL_OW 274
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_INT 100
17576: PPUSH
17577: CALL_OW 276
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ) ;
17581: LD_EXP 67
17585: PPUSH
17586: LD_INT 4
17588: PPUSH
17589: LD_INT 1
17591: PPUSH
17592: LD_INT 3
17594: PPUSH
17595: LD_INT 6
17597: PPUSH
17598: CALL_OW 185
// end ;
17602: GO 17560
17604: POP
17605: POP
// for i = 1 to 4 do
17606: LD_ADDR_VAR 0 2
17610: PUSH
17611: DOUBLE
17612: LD_INT 1
17614: DEC
17615: ST_TO_ADDR
17616: LD_INT 4
17618: PUSH
17619: FOR_TO
17620: IFFALSE 17663
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
17622: LD_INT 351
17624: PPUSH
17625: CALL_OW 274
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: LD_INT 100
17635: PPUSH
17636: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_laser ) ;
17640: LD_EXP 67
17644: PPUSH
17645: LD_INT 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 3
17653: PPUSH
17654: LD_INT 9
17656: PPUSH
17657: CALL_OW 185
// end ;
17661: GO 17619
17663: POP
17664: POP
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
17665: LD_EXP 67
17669: PPUSH
17670: LD_INT 3
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: LD_INT 9
17681: PPUSH
17682: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
17686: LD_EXP 67
17690: PPUSH
17691: LD_INT 3
17693: PPUSH
17694: LD_INT 1
17696: PPUSH
17697: LD_INT 1
17699: PPUSH
17700: LD_INT 9
17702: PPUSH
17703: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
17707: LD_EXP 67
17711: PPUSH
17712: LD_INT 4
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 6
17723: PPUSH
17724: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
17728: LD_EXP 67
17732: PPUSH
17733: LD_INT 4
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: LD_INT 1
17741: PPUSH
17742: LD_INT 6
17744: PPUSH
17745: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
17749: LD_EXP 67
17753: PPUSH
17754: LD_INT 3
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_INT 1
17762: PPUSH
17763: LD_INT 7
17765: PPUSH
17766: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
17770: LD_EXP 67
17774: PPUSH
17775: LD_INT 3
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: LD_INT 7
17786: PPUSH
17787: CALL_OW 185
// end ;
17791: LD_VAR 0 1
17795: RET
// export function CustomInitMacro ( ) ; begin
17796: LD_INT 0
17798: PPUSH
// MC_SetScanArea ( 1 , RU_Ustinov_Area ) ;
17799: LD_INT 1
17801: PPUSH
17802: LD_INT 14
17804: PPUSH
17805: CALL 78928 0 2
// MC_SetParkingArea ( 1 , RU_Ustinov_Parking ) ;
17809: LD_INT 1
17811: PPUSH
17812: LD_INT 15
17814: PPUSH
17815: CALL 78872 0 2
// MC_SetDepositsXY ( 1 , [ [ 266 , 105 , 1 ] , ] ) ;
17819: LD_INT 1
17821: PPUSH
17822: LD_INT 266
17824: PUSH
17825: LD_INT 105
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: PUSH
17836: EMPTY
17837: LIST
17838: PPUSH
17839: CALL 77992 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_laser , ru_rocket , ru_rocket_battery , ru_radar ] ) ;
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 43
17848: PUSH
17849: LD_INT 46
17851: PUSH
17852: LD_INT 45
17854: PUSH
17855: LD_EXP 116
17859: PUSH
17860: LD_INT 47
17862: PUSH
17863: LD_EXP 117
17867: PUSH
17868: LD_EXP 119
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: PPUSH
17882: CALL 78760 0 2
// MC_SetCratesArea ( 1 , RU_Ustinov_Crates ) ;
17886: LD_INT 1
17888: PPUSH
17889: LD_INT 16
17891: PPUSH
17892: CALL 78440 0 2
// MC_SetTame ( 1 , RU_Ustinov_Crates ) ;
17896: LD_INT 1
17898: PPUSH
17899: LD_INT 16
17901: PPUSH
17902: CALL 78171 0 2
// MC_SetDefenderLimit ( 1 , 9 ) ;
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 9
17911: PPUSH
17912: CALL 77853 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 22
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 3
17927: PUSH
17928: LD_INT 43
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: LD_INT 44
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 22
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: LD_INT 3
17963: PUSH
17964: LD_INT 45
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 24
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: LD_INT 45
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 24
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: LD_INT 43
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 24
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: LD_INT 3
18017: PUSH
18018: LD_INT 46
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL 77607 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 36 , 29 , 2 ] , [ b_armoury , 51 , 45 , 5 ] , [ b_armoury , 33 , 45 , 0 ] , [ b_lab , 38 , 16 , 1 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 22 , 7 , 1 ] , [ b_siberite_mine , 7 , 6 , 1 ] , [ b_siberite_power , 15 , 24 , 1 ] , [ b_siberite_power , 20 , 26 , 2 ] , [ b_siberite_power , 26 , 27 , 5 ] , [ b_bunker , 27 , 42 , 0 ] , [ b_bunker , 42 , 47 , 5 ] , [ b_bunker , 49 , 48 , 5 ] , [ b_bunker , 53 , 43 , 5 ] , [ b_bunker , 54 , 39 , 4 ] , [ b_bunker , 55 , 36 , 5 ] , [ b_bunker , 53 , 31 , 4 ] , ] ) ;
18039: LD_INT 1
18041: PPUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 36
18047: PUSH
18048: LD_INT 29
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 4
18062: PUSH
18063: LD_INT 51
18065: PUSH
18066: LD_INT 45
18068: PUSH
18069: LD_INT 5
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 4
18080: PUSH
18081: LD_INT 33
18083: PUSH
18084: LD_INT 45
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 6
18098: PUSH
18099: LD_INT 38
18101: PUSH
18102: LD_INT 16
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 6
18116: PUSH
18117: LD_INT 46
18119: PUSH
18120: LD_INT 27
18122: PUSH
18123: LD_INT 5
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 24
18137: PUSH
18138: LD_INT 34
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 29
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 30
18170: PUSH
18171: LD_INT 7
18173: PUSH
18174: LD_INT 6
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 28
18188: PUSH
18189: LD_INT 15
18191: PUSH
18192: LD_INT 24
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 28
18206: PUSH
18207: LD_INT 20
18209: PUSH
18210: LD_INT 26
18212: PUSH
18213: LD_INT 2
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 28
18224: PUSH
18225: LD_INT 26
18227: PUSH
18228: LD_INT 27
18230: PUSH
18231: LD_INT 5
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 32
18242: PUSH
18243: LD_INT 27
18245: PUSH
18246: LD_INT 42
18248: PUSH
18249: LD_INT 0
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 32
18260: PUSH
18261: LD_INT 42
18263: PUSH
18264: LD_INT 47
18266: PUSH
18267: LD_INT 5
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 32
18278: PUSH
18279: LD_INT 49
18281: PUSH
18282: LD_INT 48
18284: PUSH
18285: LD_INT 5
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 32
18296: PUSH
18297: LD_INT 53
18299: PUSH
18300: LD_INT 43
18302: PUSH
18303: LD_INT 5
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 32
18314: PUSH
18315: LD_INT 54
18317: PUSH
18318: LD_INT 39
18320: PUSH
18321: LD_INT 4
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 32
18332: PUSH
18333: LD_INT 55
18335: PUSH
18336: LD_INT 36
18338: PUSH
18339: LD_INT 5
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 32
18350: PUSH
18351: LD_INT 53
18353: PUSH
18354: LD_INT 31
18356: PUSH
18357: LD_INT 4
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL 77480 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
18390: LD_INT 1
18392: PPUSH
18393: LD_INT 10
18395: PUSH
18396: LD_INT 12
18398: PUSH
18399: LD_INT 14
18401: PUSH
18402: LD_INT 11
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL 78347 0 2
// MC_SetFactoryExtension ( 1 , 24 , 34 , 1 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
18415: LD_INT 1
18417: PPUSH
18418: LD_INT 24
18420: PPUSH
18421: LD_INT 34
18423: PPUSH
18424: LD_INT 1
18426: PPUSH
18427: LD_INT 24
18429: PUSH
18430: LD_INT 16
18432: PUSH
18433: LD_INT 17
18435: PUSH
18436: LD_INT 18
18438: PUSH
18439: LD_INT 21
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL 78554 0 5
// MC_SetScanArea ( 2 , RU2_Kolvich_Area ) ;
18453: LD_INT 2
18455: PPUSH
18456: LD_INT 17
18458: PPUSH
18459: CALL 78928 0 2
// MC_SetParkingArea ( 2 , RU2_Kolvich_Parking ) ;
18463: LD_INT 2
18465: PPUSH
18466: LD_INT 18
18468: PPUSH
18469: CALL 78872 0 2
// MC_SetDepositsXY ( 2 , [ [ 63 , 69 , 0 ] , [ 104 , 96 , 1 ] , [ 105 , 155 , 0 ] , [ 126 , 151 , 1 ] , ] ) ;
18473: LD_INT 2
18475: PPUSH
18476: LD_INT 63
18478: PUSH
18479: LD_INT 69
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 104
18492: PUSH
18493: LD_INT 96
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 105
18506: PUSH
18507: LD_INT 155
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 126
18520: PUSH
18521: LD_INT 151
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: PPUSH
18538: CALL 77992 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_rocket_battery , ru_flame_thrower ] ) ;
18542: LD_INT 2
18544: PPUSH
18545: LD_INT 43
18547: PUSH
18548: LD_INT 46
18550: PUSH
18551: LD_INT 45
18553: PUSH
18554: LD_INT 47
18556: PUSH
18557: LD_EXP 117
18561: PUSH
18562: LD_EXP 118
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL 78760 0 2
// MC_SetCratesArea ( 2 , RU2_Kolvich_CratesApes ) ;
18579: LD_INT 2
18581: PPUSH
18582: LD_INT 19
18584: PPUSH
18585: CALL 78440 0 2
// MC_SetTame ( 2 , RU2_Kolvich_CratesApes ) ;
18589: LD_INT 2
18591: PPUSH
18592: LD_INT 19
18594: PPUSH
18595: CALL 78171 0 2
// MC_SetDefenderLimit ( 2 , 10 ) ;
18599: LD_INT 2
18601: PPUSH
18602: LD_INT 10
18604: PPUSH
18605: CALL 77853 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
18609: LD_INT 2
18611: PPUSH
18612: LD_INT 22
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: LD_INT 3
18620: PUSH
18621: LD_INT 43
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 3
18638: PUSH
18639: LD_INT 44
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 45
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 24
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: LD_INT 45
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 24
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: LD_INT 43
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: LD_INT 44
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 22
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: LD_INT 45
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 24
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: LD_INT 45
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 24
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: LD_INT 43
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 24
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: LD_INT 46
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL 77607 0 2
// MC_SetBuildingList ( 2 , [ [ b_armoury , 100 , 103 , 4 ] , [ b_lab , 70 , 90 , 0 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 63 , 69 , 1 ] , [ b_siberite_mine , 104 , 96 , 1 ] , [ b_siberite_power , 72 , 79 , 1 ] , [ b_bunker , 93 , 70 , 4 ] , [ b_bunker , 98 , 80 , 4 ] , [ b_bunker , 106 , 89 , 4 ] , [ b_bunker , 108 , 102 , 5 ] , [ b_bunker , 80 , 99 , 0 ] , ] ) ;
18808: LD_INT 2
18810: PPUSH
18811: LD_INT 4
18813: PUSH
18814: LD_INT 100
18816: PUSH
18817: LD_INT 103
18819: PUSH
18820: LD_INT 4
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 6
18831: PUSH
18832: LD_INT 70
18834: PUSH
18835: LD_INT 90
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 6
18849: PUSH
18850: LD_INT 46
18852: PUSH
18853: LD_INT 27
18855: PUSH
18856: LD_INT 5
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 24
18870: PUSH
18871: LD_INT 34
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 29
18885: PUSH
18886: LD_INT 63
18888: PUSH
18889: LD_INT 69
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 104
18906: PUSH
18907: LD_INT 96
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 28
18921: PUSH
18922: LD_INT 72
18924: PUSH
18925: LD_INT 79
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 32
18939: PUSH
18940: LD_INT 93
18942: PUSH
18943: LD_INT 70
18945: PUSH
18946: LD_INT 4
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 32
18957: PUSH
18958: LD_INT 98
18960: PUSH
18961: LD_INT 80
18963: PUSH
18964: LD_INT 4
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 32
18975: PUSH
18976: LD_INT 106
18978: PUSH
18979: LD_INT 89
18981: PUSH
18982: LD_INT 4
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 32
18993: PUSH
18994: LD_INT 108
18996: PUSH
18997: LD_INT 102
18999: PUSH
19000: LD_INT 5
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 32
19011: PUSH
19012: LD_INT 80
19014: PUSH
19015: LD_INT 99
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL 77480 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
19045: LD_INT 2
19047: PPUSH
19048: LD_INT 10
19050: PUSH
19051: LD_INT 12
19053: PUSH
19054: LD_INT 14
19056: PUSH
19057: LD_INT 11
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL 78347 0 2
// MC_SetFactoryExtension ( 2 , 80 , 75 , 2 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
19070: LD_INT 2
19072: PPUSH
19073: LD_INT 80
19075: PPUSH
19076: LD_INT 75
19078: PPUSH
19079: LD_INT 2
19081: PPUSH
19082: LD_INT 24
19084: PUSH
19085: LD_INT 16
19087: PUSH
19088: LD_INT 17
19090: PUSH
19091: LD_INT 18
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL 78554 0 5
// end ;
19108: LD_VAR 0 1
19112: RET
// every 5 5$0 trigger KolvichAttacks do
19113: LD_EXP 24
19117: IFFALSE 19617
19119: GO 19121
19121: DISABLE
// begin enable ;
19122: ENABLE
// case Rand ( 1 , 2 ) of 1 :
19123: LD_INT 1
19125: PPUSH
19126: LD_INT 2
19128: PPUSH
19129: CALL_OW 12
19133: PUSH
19134: LD_INT 1
19136: DOUBLE
19137: EQUAL
19138: IFTRUE 19142
19140: GO 19375
19142: POP
// begin RespawnAttackVehicle ( RU2_Kolvich_ArmySpawn , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , [ ] , 1 ) ;
19143: LD_INT 20
19145: PPUSH
19146: LD_INT 6
19148: PPUSH
19149: LD_INT 5
19151: PPUSH
19152: LD_INT 8
19154: PPUSH
19155: CALL_OW 12
19159: PPUSH
19160: LD_EXP 59
19164: PPUSH
19165: LD_INT 3
19167: PPUSH
19168: LD_INT 3
19170: PPUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PPUSH
19181: LD_INT 46
19183: PUSH
19184: LD_INT 43
19186: PUSH
19187: LD_INT 44
19189: PUSH
19190: LD_INT 47
19192: PUSH
19193: LD_INT 45
19195: PUSH
19196: LD_INT 74
19198: PUSH
19199: LD_INT 75
19201: PUSH
19202: LD_INT 76
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: EMPTY
19216: PPUSH
19217: EMPTY
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL 13285 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , RU2_Kolvich_ArmySpawn , 1 ) ;
19226: LD_INT 6
19228: PPUSH
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 6
19234: PPUSH
19235: LD_INT 8
19237: PPUSH
19238: CALL_OW 12
19242: PPUSH
19243: LD_INT 0
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: LD_INT 3
19251: PPUSH
19252: CALL_OW 12
19256: PPUSH
19257: LD_INT 0
19259: PPUSH
19260: LD_INT 2
19262: PPUSH
19263: LD_EXP 59
19267: PPUSH
19268: LD_INT 20
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL 14948 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 146 , 86 ] , [ 219 , 83 ] , [ 256 , 101 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
19278: LD_INT 0
19280: PUSH
19281: LD_EXP 56
19285: PUSH
19286: LD_INT 146
19288: PUSH
19289: LD_INT 86
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 219
19298: PUSH
19299: LD_INT 83
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 256
19308: PUSH
19309: LD_INT 101
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 0
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL 54644 0 1
// end ; 2 :
19373: GO 19617
19375: LD_INT 2
19377: DOUBLE
19378: EQUAL
19379: IFTRUE 19383
19381: GO 19616
19383: POP
// begin RespawnAttackVehicle ( DvaliSpawn_N , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , [ ] , 1 ) ;
19384: LD_INT 10
19386: PPUSH
19387: LD_INT 6
19389: PPUSH
19390: LD_INT 5
19392: PPUSH
19393: LD_INT 8
19395: PPUSH
19396: CALL_OW 12
19400: PPUSH
19401: LD_EXP 59
19405: PPUSH
19406: LD_INT 3
19408: PPUSH
19409: LD_INT 3
19411: PPUSH
19412: LD_INT 1
19414: PUSH
19415: LD_INT 3
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: LD_INT 46
19424: PUSH
19425: LD_INT 43
19427: PUSH
19428: LD_INT 44
19430: PUSH
19431: LD_INT 47
19433: PUSH
19434: LD_INT 45
19436: PUSH
19437: LD_INT 74
19439: PUSH
19440: LD_INT 75
19442: PUSH
19443: LD_INT 76
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PPUSH
19456: EMPTY
19457: PPUSH
19458: EMPTY
19459: PPUSH
19460: LD_INT 1
19462: PPUSH
19463: CALL 13285 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , DvaliSpawn_N , 1 ) ;
19467: LD_INT 6
19469: PPUSH
19470: LD_INT 3
19472: PPUSH
19473: LD_INT 6
19475: PPUSH
19476: LD_INT 8
19478: PPUSH
19479: CALL_OW 12
19483: PPUSH
19484: LD_INT 0
19486: PPUSH
19487: LD_INT 1
19489: PPUSH
19490: LD_INT 3
19492: PPUSH
19493: CALL_OW 12
19497: PPUSH
19498: LD_INT 0
19500: PPUSH
19501: LD_INT 2
19503: PPUSH
19504: LD_EXP 59
19508: PPUSH
19509: LD_INT 10
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL 14948 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
19519: LD_INT 0
19521: PUSH
19522: LD_EXP 56
19526: PUSH
19527: LD_INT 181
19529: PUSH
19530: LD_INT 21
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 226
19539: PUSH
19540: LD_INT 72
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 225
19549: PUSH
19550: LD_INT 103
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL 54644 0 1
// end ; end ;
19614: GO 19617
19616: POP
// end ; end_of_file
19617: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19618: LD_INT 0
19620: PPUSH
19621: PPUSH
// if exist_mode then
19622: LD_VAR 0 2
19626: IFFALSE 19651
// unit := CreateCharacter ( prefix & ident ) else
19628: LD_ADDR_VAR 0 5
19632: PUSH
19633: LD_VAR 0 3
19637: PUSH
19638: LD_VAR 0 1
19642: STR
19643: PPUSH
19644: CALL_OW 34
19648: ST_TO_ADDR
19649: GO 19666
// unit := NewCharacter ( ident ) ;
19651: LD_ADDR_VAR 0 5
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 25
19665: ST_TO_ADDR
// result := unit ;
19666: LD_ADDR_VAR 0 4
19670: PUSH
19671: LD_VAR 0 5
19675: ST_TO_ADDR
// end ;
19676: LD_VAR 0 4
19680: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
// if not side or not nation then
19685: LD_VAR 0 1
19689: NOT
19690: PUSH
19691: LD_VAR 0 2
19695: NOT
19696: OR
19697: IFFALSE 19701
// exit ;
19699: GO 20337
// case nation of nation_american :
19701: LD_VAR 0 2
19705: PUSH
19706: LD_INT 1
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19884
19714: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19715: LD_ADDR_VAR 0 4
19719: PUSH
19720: LD_INT 35
19722: PUSH
19723: LD_INT 45
19725: PUSH
19726: LD_INT 46
19728: PUSH
19729: LD_INT 47
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 6
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 16
19746: PUSH
19747: LD_INT 7
19749: PUSH
19750: LD_INT 12
19752: PUSH
19753: LD_INT 13
19755: PUSH
19756: LD_INT 10
19758: PUSH
19759: LD_INT 14
19761: PUSH
19762: LD_INT 20
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 22
19770: PUSH
19771: LD_INT 25
19773: PUSH
19774: LD_INT 32
19776: PUSH
19777: LD_INT 27
19779: PUSH
19780: LD_INT 36
19782: PUSH
19783: LD_INT 69
19785: PUSH
19786: LD_INT 39
19788: PUSH
19789: LD_INT 34
19791: PUSH
19792: LD_INT 40
19794: PUSH
19795: LD_INT 48
19797: PUSH
19798: LD_INT 49
19800: PUSH
19801: LD_INT 50
19803: PUSH
19804: LD_INT 51
19806: PUSH
19807: LD_INT 52
19809: PUSH
19810: LD_INT 53
19812: PUSH
19813: LD_INT 54
19815: PUSH
19816: LD_INT 55
19818: PUSH
19819: LD_INT 56
19821: PUSH
19822: LD_INT 57
19824: PUSH
19825: LD_INT 58
19827: PUSH
19828: LD_INT 59
19830: PUSH
19831: LD_INT 60
19833: PUSH
19834: LD_INT 61
19836: PUSH
19837: LD_INT 62
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: ST_TO_ADDR
19882: GO 20261
19884: LD_INT 2
19886: DOUBLE
19887: EQUAL
19888: IFTRUE 19892
19890: GO 20070
19892: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
19893: LD_ADDR_VAR 0 4
19897: PUSH
19898: LD_INT 35
19900: PUSH
19901: LD_INT 45
19903: PUSH
19904: LD_INT 46
19906: PUSH
19907: LD_INT 47
19909: PUSH
19910: LD_INT 70
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 11
19918: PUSH
19919: LD_INT 3
19921: PUSH
19922: LD_INT 4
19924: PUSH
19925: LD_INT 5
19927: PUSH
19928: LD_INT 6
19930: PUSH
19931: LD_INT 15
19933: PUSH
19934: LD_INT 18
19936: PUSH
19937: LD_INT 7
19939: PUSH
19940: LD_INT 17
19942: PUSH
19943: LD_INT 8
19945: PUSH
19946: LD_INT 20
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 22
19954: PUSH
19955: LD_INT 72
19957: PUSH
19958: LD_INT 26
19960: PUSH
19961: LD_INT 69
19963: PUSH
19964: LD_INT 39
19966: PUSH
19967: LD_INT 40
19969: PUSH
19970: LD_INT 41
19972: PUSH
19973: LD_INT 42
19975: PUSH
19976: LD_INT 43
19978: PUSH
19979: LD_INT 48
19981: PUSH
19982: LD_INT 49
19984: PUSH
19985: LD_INT 50
19987: PUSH
19988: LD_INT 51
19990: PUSH
19991: LD_INT 52
19993: PUSH
19994: LD_INT 53
19996: PUSH
19997: LD_INT 54
19999: PUSH
20000: LD_INT 55
20002: PUSH
20003: LD_INT 56
20005: PUSH
20006: LD_INT 60
20008: PUSH
20009: LD_INT 61
20011: PUSH
20012: LD_INT 62
20014: PUSH
20015: LD_INT 66
20017: PUSH
20018: LD_INT 67
20020: PUSH
20021: LD_INT 68
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: ST_TO_ADDR
20068: GO 20261
20070: LD_INT 3
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20260
20078: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
20079: LD_ADDR_VAR 0 4
20083: PUSH
20084: LD_INT 46
20086: PUSH
20087: LD_INT 47
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: LD_INT 11
20098: PUSH
20099: LD_INT 9
20101: PUSH
20102: LD_INT 20
20104: PUSH
20105: LD_INT 19
20107: PUSH
20108: LD_INT 21
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_INT 25
20119: PUSH
20120: LD_INT 28
20122: PUSH
20123: LD_INT 29
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 37
20134: PUSH
20135: LD_INT 38
20137: PUSH
20138: LD_INT 32
20140: PUSH
20141: LD_INT 27
20143: PUSH
20144: LD_INT 33
20146: PUSH
20147: LD_INT 69
20149: PUSH
20150: LD_INT 39
20152: PUSH
20153: LD_INT 34
20155: PUSH
20156: LD_INT 40
20158: PUSH
20159: LD_INT 71
20161: PUSH
20162: LD_INT 23
20164: PUSH
20165: LD_INT 44
20167: PUSH
20168: LD_INT 48
20170: PUSH
20171: LD_INT 49
20173: PUSH
20174: LD_INT 50
20176: PUSH
20177: LD_INT 51
20179: PUSH
20180: LD_INT 52
20182: PUSH
20183: LD_INT 53
20185: PUSH
20186: LD_INT 54
20188: PUSH
20189: LD_INT 55
20191: PUSH
20192: LD_INT 56
20194: PUSH
20195: LD_INT 57
20197: PUSH
20198: LD_INT 58
20200: PUSH
20201: LD_INT 59
20203: PUSH
20204: LD_INT 63
20206: PUSH
20207: LD_INT 64
20209: PUSH
20210: LD_INT 65
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
20258: GO 20261
20260: POP
// if state > - 1 and state < 3 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: GREATER
20270: PUSH
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 3
20278: LESS
20279: AND
20280: IFFALSE 20337
// for i in result do
20282: LD_ADDR_VAR 0 5
20286: PUSH
20287: LD_VAR 0 4
20291: PUSH
20292: FOR_IN
20293: IFFALSE 20335
// if GetTech ( i , side ) <> state then
20295: LD_VAR 0 5
20299: PPUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 321
20309: PUSH
20310: LD_VAR 0 3
20314: NONEQUAL
20315: IFFALSE 20333
// result := result diff i ;
20317: LD_ADDR_VAR 0 4
20321: PUSH
20322: LD_VAR 0 4
20326: PUSH
20327: LD_VAR 0 5
20331: DIFF
20332: ST_TO_ADDR
20333: GO 20292
20335: POP
20336: POP
// end ;
20337: LD_VAR 0 4
20341: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20342: LD_INT 0
20344: PPUSH
20345: PPUSH
20346: PPUSH
// result := true ;
20347: LD_ADDR_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20355: LD_ADDR_VAR 0 5
20359: PUSH
20360: LD_VAR 0 2
20364: PPUSH
20365: CALL_OW 480
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 5
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20428
// for i in tmp do
20379: LD_ADDR_VAR 0 4
20383: PUSH
20384: LD_VAR 0 5
20388: PUSH
20389: FOR_IN
20390: IFFALSE 20426
// if GetTech ( i , side ) <> state_researched then
20392: LD_VAR 0 4
20396: PPUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 321
20406: PUSH
20407: LD_INT 2
20409: NONEQUAL
20410: IFFALSE 20424
// begin result := false ;
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// exit ;
20420: POP
20421: POP
20422: GO 20428
// end ;
20424: GO 20389
20426: POP
20427: POP
// end ;
20428: LD_VAR 0 3
20432: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20433: LD_INT 0
20435: PPUSH
20436: PPUSH
20437: PPUSH
20438: PPUSH
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
20446: PPUSH
20447: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20448: LD_VAR 0 1
20452: NOT
20453: PUSH
20454: LD_VAR 0 1
20458: PPUSH
20459: CALL_OW 257
20463: PUSH
20464: LD_INT 9
20466: NONEQUAL
20467: OR
20468: IFFALSE 20472
// exit ;
20470: GO 21045
// side := GetSide ( unit ) ;
20472: LD_ADDR_VAR 0 9
20476: PUSH
20477: LD_VAR 0 1
20481: PPUSH
20482: CALL_OW 255
20486: ST_TO_ADDR
// tech_space := tech_spacanom ;
20487: LD_ADDR_VAR 0 12
20491: PUSH
20492: LD_INT 29
20494: ST_TO_ADDR
// tech_time := tech_taurad ;
20495: LD_ADDR_VAR 0 13
20499: PUSH
20500: LD_INT 28
20502: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20503: LD_ADDR_VAR 0 11
20507: PUSH
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 310
20517: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20518: LD_VAR 0 11
20522: PPUSH
20523: CALL_OW 247
20527: PUSH
20528: LD_INT 2
20530: EQUAL
20531: IFFALSE 20535
// exit ;
20533: GO 21045
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20535: LD_ADDR_VAR 0 8
20539: PUSH
20540: LD_INT 81
20542: PUSH
20543: LD_VAR 0 9
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PPUSH
20573: CALL_OW 69
20577: ST_TO_ADDR
// if not tmp then
20578: LD_VAR 0 8
20582: NOT
20583: IFFALSE 20587
// exit ;
20585: GO 21045
// if in_unit then
20587: LD_VAR 0 11
20591: IFFALSE 20615
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20593: LD_ADDR_VAR 0 10
20597: PUSH
20598: LD_VAR 0 8
20602: PPUSH
20603: LD_VAR 0 11
20607: PPUSH
20608: CALL_OW 74
20612: ST_TO_ADDR
20613: GO 20635
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20615: LD_ADDR_VAR 0 10
20619: PUSH
20620: LD_VAR 0 8
20624: PPUSH
20625: LD_VAR 0 1
20629: PPUSH
20630: CALL_OW 74
20634: ST_TO_ADDR
// if not enemy then
20635: LD_VAR 0 10
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 21045
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20644: LD_VAR 0 11
20648: PUSH
20649: LD_VAR 0 11
20653: PPUSH
20654: LD_VAR 0 10
20658: PPUSH
20659: CALL_OW 296
20663: PUSH
20664: LD_INT 13
20666: GREATER
20667: AND
20668: PUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: LD_VAR 0 10
20678: PPUSH
20679: CALL_OW 296
20683: PUSH
20684: LD_INT 12
20686: GREATER
20687: OR
20688: IFFALSE 20692
// exit ;
20690: GO 21045
// missile := [ 1 ] ;
20692: LD_ADDR_VAR 0 14
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20703: LD_VAR 0 9
20707: PPUSH
20708: LD_VAR 0 12
20712: PPUSH
20713: CALL_OW 325
20717: IFFALSE 20746
// missile := Insert ( missile , missile + 1 , 2 ) ;
20719: LD_ADDR_VAR 0 14
20723: PUSH
20724: LD_VAR 0 14
20728: PPUSH
20729: LD_VAR 0 14
20733: PUSH
20734: LD_INT 1
20736: PLUS
20737: PPUSH
20738: LD_INT 2
20740: PPUSH
20741: CALL_OW 2
20745: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20746: LD_VAR 0 9
20750: PPUSH
20751: LD_VAR 0 13
20755: PPUSH
20756: CALL_OW 325
20760: PUSH
20761: LD_VAR 0 10
20765: PPUSH
20766: CALL_OW 255
20770: PPUSH
20771: LD_VAR 0 13
20775: PPUSH
20776: CALL_OW 325
20780: NOT
20781: AND
20782: IFFALSE 20811
// missile := Insert ( missile , missile + 1 , 3 ) ;
20784: LD_ADDR_VAR 0 14
20788: PUSH
20789: LD_VAR 0 14
20793: PPUSH
20794: LD_VAR 0 14
20798: PUSH
20799: LD_INT 1
20801: PLUS
20802: PPUSH
20803: LD_INT 3
20805: PPUSH
20806: CALL_OW 2
20810: ST_TO_ADDR
// if missile < 2 then
20811: LD_VAR 0 14
20815: PUSH
20816: LD_INT 2
20818: LESS
20819: IFFALSE 20823
// exit ;
20821: GO 21045
// x := GetX ( enemy ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 10
20832: PPUSH
20833: CALL_OW 250
20837: ST_TO_ADDR
// y := GetY ( enemy ) ;
20838: LD_ADDR_VAR 0 5
20842: PUSH
20843: LD_VAR 0 10
20847: PPUSH
20848: CALL_OW 251
20852: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20853: LD_ADDR_VAR 0 6
20857: PUSH
20858: LD_VAR 0 4
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 12
20874: PLUS
20875: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20876: LD_ADDR_VAR 0 7
20880: PUSH
20881: LD_VAR 0 5
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PPUSH
20890: LD_INT 1
20892: PPUSH
20893: CALL_OW 12
20897: PLUS
20898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20899: LD_VAR 0 6
20903: PPUSH
20904: LD_VAR 0 7
20908: PPUSH
20909: CALL_OW 488
20913: NOT
20914: IFFALSE 20936
// begin _x := x ;
20916: LD_ADDR_VAR 0 6
20920: PUSH
20921: LD_VAR 0 4
20925: ST_TO_ADDR
// _y := y ;
20926: LD_ADDR_VAR 0 7
20930: PUSH
20931: LD_VAR 0 5
20935: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 1
20943: PPUSH
20944: LD_VAR 0 14
20948: PPUSH
20949: CALL_OW 12
20953: ST_TO_ADDR
// case i of 1 :
20954: LD_VAR 0 3
20958: PUSH
20959: LD_INT 1
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20984
20967: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20968: LD_VAR 0 1
20972: PPUSH
20973: LD_VAR 0 10
20977: PPUSH
20978: CALL_OW 115
20982: GO 21045
20984: LD_INT 2
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21014
20992: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20993: LD_VAR 0 1
20997: PPUSH
20998: LD_VAR 0 6
21002: PPUSH
21003: LD_VAR 0 7
21007: PPUSH
21008: CALL_OW 153
21012: GO 21045
21014: LD_INT 3
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21044
21022: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_VAR 0 6
21032: PPUSH
21033: LD_VAR 0 7
21037: PPUSH
21038: CALL_OW 154
21042: GO 21045
21044: POP
// end ;
21045: LD_VAR 0 2
21049: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
// if not unit or not building then
21058: LD_VAR 0 1
21062: NOT
21063: PUSH
21064: LD_VAR 0 2
21068: NOT
21069: OR
21070: IFFALSE 21074
// exit ;
21072: GO 21232
// x := GetX ( building ) ;
21074: LD_ADDR_VAR 0 5
21078: PUSH
21079: LD_VAR 0 2
21083: PPUSH
21084: CALL_OW 250
21088: ST_TO_ADDR
// y := GetY ( building ) ;
21089: LD_ADDR_VAR 0 6
21093: PUSH
21094: LD_VAR 0 2
21098: PPUSH
21099: CALL_OW 251
21103: ST_TO_ADDR
// for i = 0 to 5 do
21104: LD_ADDR_VAR 0 4
21108: PUSH
21109: DOUBLE
21110: LD_INT 0
21112: DEC
21113: ST_TO_ADDR
21114: LD_INT 5
21116: PUSH
21117: FOR_TO
21118: IFFALSE 21230
// begin _x := ShiftX ( x , i , 3 ) ;
21120: LD_ADDR_VAR 0 7
21124: PUSH
21125: LD_VAR 0 5
21129: PPUSH
21130: LD_VAR 0 4
21134: PPUSH
21135: LD_INT 3
21137: PPUSH
21138: CALL_OW 272
21142: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21143: LD_ADDR_VAR 0 8
21147: PUSH
21148: LD_VAR 0 6
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: LD_INT 3
21160: PPUSH
21161: CALL_OW 273
21165: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21166: LD_VAR 0 7
21170: PPUSH
21171: LD_VAR 0 8
21175: PPUSH
21176: CALL_OW 488
21180: NOT
21181: IFFALSE 21185
// continue ;
21183: GO 21117
// if HexInfo ( _x , _y ) = 0 then
21185: LD_VAR 0 7
21189: PPUSH
21190: LD_VAR 0 8
21194: PPUSH
21195: CALL_OW 428
21199: PUSH
21200: LD_INT 0
21202: EQUAL
21203: IFFALSE 21228
// begin ComMoveXY ( unit , _x , _y ) ;
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_VAR 0 7
21214: PPUSH
21215: LD_VAR 0 8
21219: PPUSH
21220: CALL_OW 111
// exit ;
21224: POP
21225: POP
21226: GO 21232
// end ; end ;
21228: GO 21117
21230: POP
21231: POP
// end ;
21232: LD_VAR 0 3
21236: RET
// export function ScanBase ( side , base_area ) ; begin
21237: LD_INT 0
21239: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21240: LD_ADDR_VAR 0 3
21244: PUSH
21245: LD_VAR 0 2
21249: PPUSH
21250: LD_INT 81
21252: PUSH
21253: LD_VAR 0 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PPUSH
21262: CALL_OW 70
21266: ST_TO_ADDR
// end ;
21267: LD_VAR 0 3
21271: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21272: LD_INT 0
21274: PPUSH
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21279: LD_VAR 0 1
21283: NOT
21284: PUSH
21285: LD_EXP 69
21289: PUSH
21290: LD_VAR 0 1
21294: ARRAY
21295: NOT
21296: OR
21297: PUSH
21298: LD_VAR 0 2
21302: NOT
21303: OR
21304: PUSH
21305: LD_VAR 0 3
21309: NOT
21310: OR
21311: IFFALSE 21315
// exit ;
21313: GO 21765
// side := mc_sides [ base ] ;
21315: LD_ADDR_VAR 0 6
21319: PUSH
21320: LD_EXP 95
21324: PUSH
21325: LD_VAR 0 1
21329: ARRAY
21330: ST_TO_ADDR
// if not side then
21331: LD_VAR 0 6
21335: NOT
21336: IFFALSE 21340
// exit ;
21338: GO 21765
// for i in solds do
21340: LD_ADDR_VAR 0 7
21344: PUSH
21345: LD_VAR 0 2
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21412
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21353: LD_VAR 0 7
21357: PPUSH
21358: CALL_OW 310
21362: PPUSH
21363: CALL_OW 266
21367: PUSH
21368: LD_INT 32
21370: PUSH
21371: LD_INT 31
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: IN
21378: IFFALSE 21398
// solds := solds diff i else
21380: LD_ADDR_VAR 0 2
21384: PUSH
21385: LD_VAR 0 2
21389: PUSH
21390: LD_VAR 0 7
21394: DIFF
21395: ST_TO_ADDR
21396: GO 21410
// SetTag ( i , 18 ) ;
21398: LD_VAR 0 7
21402: PPUSH
21403: LD_INT 18
21405: PPUSH
21406: CALL_OW 109
21410: GO 21350
21412: POP
21413: POP
// if not solds then
21414: LD_VAR 0 2
21418: NOT
21419: IFFALSE 21423
// exit ;
21421: GO 21765
// repeat wait ( 0 0$1 ) ;
21423: LD_INT 35
21425: PPUSH
21426: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: LD_VAR 0 6
21439: PPUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: CALL 21237 0 2
21449: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21450: LD_VAR 0 5
21454: NOT
21455: PUSH
21456: LD_VAR 0 5
21460: PUSH
21461: LD_INT 3
21463: GREATER
21464: OR
21465: PUSH
21466: LD_EXP 91
21470: PUSH
21471: LD_VAR 0 1
21475: ARRAY
21476: OR
21477: IFFALSE 21518
// begin for i in solds do
21479: LD_ADDR_VAR 0 7
21483: PUSH
21484: LD_VAR 0 2
21488: PUSH
21489: FOR_IN
21490: IFFALSE 21514
// if HasTask ( i ) then
21492: LD_VAR 0 7
21496: PPUSH
21497: CALL_OW 314
21501: IFFALSE 21512
// ComStop ( i ) ;
21503: LD_VAR 0 7
21507: PPUSH
21508: CALL_OW 141
21512: GO 21489
21514: POP
21515: POP
// break ;
21516: GO 21753
// end ; for i in solds do
21518: LD_ADDR_VAR 0 7
21522: PUSH
21523: LD_VAR 0 2
21527: PUSH
21528: FOR_IN
21529: IFFALSE 21745
// begin if IsInUnit ( i ) then
21531: LD_VAR 0 7
21535: PPUSH
21536: CALL_OW 310
21540: IFFALSE 21551
// ComExitBuilding ( i ) ;
21542: LD_VAR 0 7
21546: PPUSH
21547: CALL_OW 122
// if GetLives ( i ) > 333 then
21551: LD_VAR 0 7
21555: PPUSH
21556: CALL_OW 256
21560: PUSH
21561: LD_INT 333
21563: GREATER
21564: IFFALSE 21592
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21566: LD_VAR 0 7
21570: PPUSH
21571: LD_VAR 0 5
21575: PPUSH
21576: LD_VAR 0 7
21580: PPUSH
21581: CALL_OW 74
21585: PPUSH
21586: CALL_OW 115
21590: GO 21743
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21592: LD_ADDR_VAR 0 8
21596: PUSH
21597: LD_EXP 69
21601: PUSH
21602: LD_VAR 0 1
21606: ARRAY
21607: PPUSH
21608: LD_INT 2
21610: PUSH
21611: LD_INT 30
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 30
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 30
21633: PUSH
21634: LD_INT 6
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PPUSH
21647: CALL_OW 72
21651: PPUSH
21652: LD_VAR 0 7
21656: PPUSH
21657: CALL_OW 74
21661: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21662: LD_VAR 0 7
21666: PPUSH
21667: LD_VAR 0 8
21671: PPUSH
21672: CALL_OW 250
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: LD_INT 5
21682: PPUSH
21683: CALL_OW 272
21687: PPUSH
21688: LD_VAR 0 8
21692: PPUSH
21693: CALL_OW 251
21697: PPUSH
21698: LD_INT 3
21700: PPUSH
21701: LD_INT 5
21703: PPUSH
21704: CALL_OW 273
21708: PPUSH
21709: CALL_OW 111
// SetTag ( i , 0 ) ;
21713: LD_VAR 0 7
21717: PPUSH
21718: LD_INT 0
21720: PPUSH
21721: CALL_OW 109
// solds := solds diff i ;
21725: LD_ADDR_VAR 0 2
21729: PUSH
21730: LD_VAR 0 2
21734: PUSH
21735: LD_VAR 0 7
21739: DIFF
21740: ST_TO_ADDR
// continue ;
21741: GO 21528
// end ; end ;
21743: GO 21528
21745: POP
21746: POP
// until solds ;
21747: LD_VAR 0 2
21751: IFFALSE 21423
// MC_Reset ( base , 18 ) ;
21753: LD_VAR 0 1
21757: PPUSH
21758: LD_INT 18
21760: PPUSH
21761: CALL 64556 0 2
// end ;
21765: LD_VAR 0 4
21769: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21770: LD_INT 0
21772: PPUSH
21773: PPUSH
21774: PPUSH
21775: PPUSH
21776: PPUSH
21777: PPUSH
21778: PPUSH
21779: PPUSH
21780: PPUSH
21781: PPUSH
21782: PPUSH
21783: PPUSH
21784: PPUSH
21785: PPUSH
21786: PPUSH
21787: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21788: LD_ADDR_VAR 0 12
21792: PUSH
21793: LD_EXP 69
21797: PUSH
21798: LD_VAR 0 1
21802: ARRAY
21803: PPUSH
21804: LD_INT 25
21806: PUSH
21807: LD_INT 3
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PPUSH
21814: CALL_OW 72
21818: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21819: LD_ADDR_VAR 0 8
21823: PUSH
21824: LD_EXP 69
21828: PUSH
21829: LD_VAR 0 1
21833: ARRAY
21834: PPUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 5
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 25
21860: PUSH
21861: LD_INT 8
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 25
21870: PUSH
21871: LD_INT 9
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: PPUSH
21885: CALL_OW 72
21889: ST_TO_ADDR
// if not defenders and not solds then
21890: LD_VAR 0 2
21894: NOT
21895: PUSH
21896: LD_VAR 0 8
21900: NOT
21901: AND
21902: IFFALSE 21906
// exit ;
21904: GO 23272
// depot_under_attack := false ;
21906: LD_ADDR_VAR 0 16
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// sold_defenders := [ ] ;
21914: LD_ADDR_VAR 0 17
21918: PUSH
21919: EMPTY
21920: ST_TO_ADDR
// if mechs then
21921: LD_VAR 0 12
21925: IFFALSE 22054
// for i in defenders do
21927: LD_ADDR_VAR 0 5
21931: PUSH
21932: LD_VAR 0 2
21936: PUSH
21937: FOR_IN
21938: IFFALSE 22052
// begin SetTag ( i , 20 ) ;
21940: LD_VAR 0 5
21944: PPUSH
21945: LD_INT 20
21947: PPUSH
21948: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21952: LD_VAR 0 5
21956: PPUSH
21957: CALL_OW 263
21961: PUSH
21962: LD_INT 1
21964: EQUAL
21965: PUSH
21966: LD_VAR 0 5
21970: PPUSH
21971: CALL_OW 311
21975: NOT
21976: AND
21977: PUSH
21978: LD_VAR 0 12
21982: AND
21983: IFFALSE 22050
// begin un := mechs [ 1 ] ;
21985: LD_ADDR_VAR 0 10
21989: PUSH
21990: LD_VAR 0 12
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21999: LD_VAR 0 10
22003: PPUSH
22004: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
22008: LD_VAR 0 10
22012: PPUSH
22013: LD_VAR 0 5
22017: PPUSH
22018: CALL_OW 180
// SetTag ( un , 19 ) ;
22022: LD_VAR 0 10
22026: PPUSH
22027: LD_INT 19
22029: PPUSH
22030: CALL_OW 109
// mechs := mechs diff un ;
22034: LD_ADDR_VAR 0 12
22038: PUSH
22039: LD_VAR 0 12
22043: PUSH
22044: LD_VAR 0 10
22048: DIFF
22049: ST_TO_ADDR
// end ; end ;
22050: GO 21937
22052: POP
22053: POP
// if solds then
22054: LD_VAR 0 8
22058: IFFALSE 22117
// for i in solds do
22060: LD_ADDR_VAR 0 5
22064: PUSH
22065: LD_VAR 0 8
22069: PUSH
22070: FOR_IN
22071: IFFALSE 22115
// if not GetTag ( i ) then
22073: LD_VAR 0 5
22077: PPUSH
22078: CALL_OW 110
22082: NOT
22083: IFFALSE 22113
// begin defenders := defenders union i ;
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_VAR 0 2
22094: PUSH
22095: LD_VAR 0 5
22099: UNION
22100: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22101: LD_VAR 0 5
22105: PPUSH
22106: LD_INT 18
22108: PPUSH
22109: CALL_OW 109
// end ;
22113: GO 22070
22115: POP
22116: POP
// repeat wait ( 0 0$1 ) ;
22117: LD_INT 35
22119: PPUSH
22120: CALL_OW 67
// enemy := mc_scan [ base ] ;
22124: LD_ADDR_VAR 0 3
22128: PUSH
22129: LD_EXP 92
22133: PUSH
22134: LD_VAR 0 1
22138: ARRAY
22139: ST_TO_ADDR
// for i in defenders do
22140: LD_ADDR_VAR 0 5
22144: PUSH
22145: LD_VAR 0 2
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22836
// begin e := NearestUnitToUnit ( enemy , i ) ;
22153: LD_ADDR_VAR 0 13
22157: PUSH
22158: LD_VAR 0 3
22162: PPUSH
22163: LD_VAR 0 5
22167: PPUSH
22168: CALL_OW 74
22172: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22173: LD_ADDR_VAR 0 16
22177: PUSH
22178: LD_EXP 69
22182: PUSH
22183: LD_VAR 0 1
22187: ARRAY
22188: PPUSH
22189: LD_INT 2
22191: PUSH
22192: LD_INT 30
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 30
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: PPUSH
22217: CALL_OW 72
22221: NOT
22222: PUSH
22223: LD_EXP 69
22227: PUSH
22228: LD_VAR 0 1
22232: ARRAY
22233: PPUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 30
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 72
22266: PPUSH
22267: CALL_OW 256
22271: PUSH
22272: LD_INT 600
22274: LESS
22275: OR
22276: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22277: LD_VAR 0 5
22281: PPUSH
22282: CALL_OW 247
22286: PUSH
22287: LD_INT 2
22289: DOUBLE
22290: EQUAL
22291: IFTRUE 22295
22293: GO 22542
22295: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22296: LD_VAR 0 5
22300: PPUSH
22301: CALL_OW 256
22305: PUSH
22306: LD_INT 650
22308: GREATER
22309: PUSH
22310: LD_VAR 0 5
22314: PPUSH
22315: LD_VAR 0 13
22319: PPUSH
22320: CALL_OW 296
22324: PUSH
22325: LD_INT 40
22327: LESS
22328: AND
22329: IFFALSE 22347
// ComAttackUnit ( i , e ) else
22331: LD_VAR 0 5
22335: PPUSH
22336: LD_VAR 0 13
22340: PPUSH
22341: CALL_OW 115
22345: GO 22425
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22347: LD_VAR 0 5
22351: PPUSH
22352: LD_VAR 0 13
22356: PPUSH
22357: CALL_OW 296
22361: PUSH
22362: LD_INT 30
22364: GREATEREQUAL
22365: PUSH
22366: LD_VAR 0 5
22370: PPUSH
22371: CALL_OW 256
22375: PUSH
22376: LD_INT 650
22378: LESSEQUAL
22379: OR
22380: PUSH
22381: LD_VAR 0 5
22385: PPUSH
22386: LD_EXP 93
22390: PUSH
22391: LD_VAR 0 1
22395: ARRAY
22396: PPUSH
22397: CALL_OW 308
22401: NOT
22402: AND
22403: IFFALSE 22425
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22405: LD_VAR 0 5
22409: PPUSH
22410: LD_EXP 93
22414: PUSH
22415: LD_VAR 0 1
22419: ARRAY
22420: PPUSH
22421: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22425: LD_VAR 0 5
22429: PPUSH
22430: CALL_OW 256
22434: PUSH
22435: LD_INT 998
22437: LESS
22438: PUSH
22439: LD_VAR 0 5
22443: PPUSH
22444: CALL_OW 263
22448: PUSH
22449: LD_INT 1
22451: EQUAL
22452: AND
22453: PUSH
22454: LD_VAR 0 5
22458: PPUSH
22459: CALL_OW 311
22463: AND
22464: PUSH
22465: LD_VAR 0 5
22469: PPUSH
22470: LD_EXP 93
22474: PUSH
22475: LD_VAR 0 1
22479: ARRAY
22480: PPUSH
22481: CALL_OW 308
22485: AND
22486: IFFALSE 22540
// begin mech := IsDrivenBy ( i ) ;
22488: LD_ADDR_VAR 0 9
22492: PUSH
22493: LD_VAR 0 5
22497: PPUSH
22498: CALL_OW 311
22502: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22503: LD_VAR 0 9
22507: PPUSH
22508: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22512: LD_VAR 0 9
22516: PPUSH
22517: LD_VAR 0 5
22521: PPUSH
22522: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22526: LD_VAR 0 9
22530: PPUSH
22531: LD_VAR 0 5
22535: PPUSH
22536: CALL_OW 180
// end ; end ; unit_human :
22540: GO 22807
22542: LD_INT 1
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22806
22550: POP
// begin b := IsInUnit ( i ) ;
22551: LD_ADDR_VAR 0 18
22555: PUSH
22556: LD_VAR 0 5
22560: PPUSH
22561: CALL_OW 310
22565: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22566: LD_ADDR_VAR 0 19
22570: PUSH
22571: LD_VAR 0 18
22575: NOT
22576: PUSH
22577: LD_VAR 0 18
22581: PPUSH
22582: CALL_OW 266
22586: PUSH
22587: LD_INT 32
22589: PUSH
22590: LD_INT 31
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: IN
22597: OR
22598: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22599: LD_VAR 0 16
22603: PUSH
22604: LD_VAR 0 2
22608: PPUSH
22609: LD_INT 21
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 72
22623: PUSH
22624: LD_INT 1
22626: LESSEQUAL
22627: OR
22628: PUSH
22629: LD_VAR 0 19
22633: AND
22634: PUSH
22635: LD_VAR 0 5
22639: PUSH
22640: LD_VAR 0 17
22644: IN
22645: NOT
22646: AND
22647: IFFALSE 22740
// begin if b then
22649: LD_VAR 0 18
22653: IFFALSE 22702
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22655: LD_VAR 0 18
22659: PPUSH
22660: LD_VAR 0 3
22664: PPUSH
22665: LD_VAR 0 18
22669: PPUSH
22670: CALL_OW 74
22674: PPUSH
22675: CALL_OW 296
22679: PUSH
22680: LD_INT 10
22682: LESS
22683: PUSH
22684: LD_VAR 0 18
22688: PPUSH
22689: CALL_OW 461
22693: PUSH
22694: LD_INT 7
22696: NONEQUAL
22697: AND
22698: IFFALSE 22702
// continue ;
22700: GO 22150
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22702: LD_ADDR_VAR 0 17
22706: PUSH
22707: LD_VAR 0 17
22711: PPUSH
22712: LD_VAR 0 17
22716: PUSH
22717: LD_INT 1
22719: PLUS
22720: PPUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: CALL_OW 1
22730: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22731: LD_VAR 0 5
22735: PPUSH
22736: CALL_OW 122
// end ; if sold_defenders then
22740: LD_VAR 0 17
22744: IFFALSE 22804
// if i in sold_defenders then
22746: LD_VAR 0 5
22750: PUSH
22751: LD_VAR 0 17
22755: IN
22756: IFFALSE 22804
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22758: LD_VAR 0 5
22762: PPUSH
22763: CALL_OW 314
22767: NOT
22768: PUSH
22769: LD_VAR 0 5
22773: PPUSH
22774: LD_VAR 0 13
22778: PPUSH
22779: CALL_OW 296
22783: PUSH
22784: LD_INT 30
22786: LESS
22787: AND
22788: IFFALSE 22804
// ComAttackUnit ( i , e ) ;
22790: LD_VAR 0 5
22794: PPUSH
22795: LD_VAR 0 13
22799: PPUSH
22800: CALL_OW 115
// end ; end ; end ;
22804: GO 22807
22806: POP
// if IsDead ( i ) then
22807: LD_VAR 0 5
22811: PPUSH
22812: CALL_OW 301
22816: IFFALSE 22834
// defenders := defenders diff i ;
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: LD_VAR 0 2
22827: PUSH
22828: LD_VAR 0 5
22832: DIFF
22833: ST_TO_ADDR
// end ;
22834: GO 22150
22836: POP
22837: POP
// until not enemy or not defenders ;
22838: LD_VAR 0 3
22842: NOT
22843: PUSH
22844: LD_VAR 0 2
22848: NOT
22849: OR
22850: IFFALSE 22117
// MC_Reset ( base , 18 ) ;
22852: LD_VAR 0 1
22856: PPUSH
22857: LD_INT 18
22859: PPUSH
22860: CALL 64556 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 2
22873: PUSH
22874: LD_VAR 0 2
22878: PPUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 5
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 8
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 9
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: PPUSH
22929: CALL_OW 72
22933: DIFF
22934: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22935: LD_VAR 0 3
22939: NOT
22940: PUSH
22941: LD_VAR 0 2
22945: PPUSH
22946: LD_INT 21
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PPUSH
22956: CALL_OW 72
22960: AND
22961: IFFALSE 23223
// begin tmp := FilterByTag ( defenders , 19 ) ;
22963: LD_ADDR_VAR 0 11
22967: PUSH
22968: LD_VAR 0 2
22972: PPUSH
22973: LD_INT 19
22975: PPUSH
22976: CALL 59388 0 2
22980: ST_TO_ADDR
// if tmp then
22981: LD_VAR 0 11
22985: IFFALSE 23055
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22987: LD_ADDR_VAR 0 11
22991: PUSH
22992: LD_VAR 0 11
22996: PPUSH
22997: LD_INT 25
22999: PUSH
23000: LD_INT 3
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PPUSH
23007: CALL_OW 72
23011: ST_TO_ADDR
// if tmp then
23012: LD_VAR 0 11
23016: IFFALSE 23055
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23018: LD_ADDR_EXP 81
23022: PUSH
23023: LD_EXP 81
23027: PPUSH
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_EXP 81
23037: PUSH
23038: LD_VAR 0 1
23042: ARRAY
23043: PUSH
23044: LD_VAR 0 11
23048: UNION
23049: PPUSH
23050: CALL_OW 1
23054: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_INT 19
23062: PPUSH
23063: CALL 64556 0 2
// repeat wait ( 0 0$1 ) ;
23067: LD_INT 35
23069: PPUSH
23070: CALL_OW 67
// for i in defenders do
23074: LD_ADDR_VAR 0 5
23078: PUSH
23079: LD_VAR 0 2
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23174
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23087: LD_VAR 0 5
23091: PPUSH
23092: LD_EXP 93
23096: PUSH
23097: LD_VAR 0 1
23101: ARRAY
23102: PPUSH
23103: CALL_OW 308
23107: NOT
23108: IFFALSE 23132
// ComMoveToArea ( i , mc_parking [ base ] ) else
23110: LD_VAR 0 5
23114: PPUSH
23115: LD_EXP 93
23119: PUSH
23120: LD_VAR 0 1
23124: ARRAY
23125: PPUSH
23126: CALL_OW 113
23130: GO 23172
// if GetControl ( i ) = control_manual then
23132: LD_VAR 0 5
23136: PPUSH
23137: CALL_OW 263
23141: PUSH
23142: LD_INT 1
23144: EQUAL
23145: IFFALSE 23172
// if IsDrivenBy ( i ) then
23147: LD_VAR 0 5
23151: PPUSH
23152: CALL_OW 311
23156: IFFALSE 23172
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23158: LD_VAR 0 5
23162: PPUSH
23163: CALL_OW 311
23167: PPUSH
23168: CALL_OW 121
// end ;
23172: GO 23084
23174: POP
23175: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
23176: LD_VAR 0 2
23180: PPUSH
23181: LD_INT 95
23183: PUSH
23184: LD_EXP 93
23188: PUSH
23189: LD_VAR 0 1
23193: ARRAY
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PPUSH
23199: CALL_OW 72
23203: PUSH
23204: LD_VAR 0 2
23208: EQUAL
23209: PUSH
23210: LD_EXP 92
23214: PUSH
23215: LD_VAR 0 1
23219: ARRAY
23220: OR
23221: IFFALSE 23067
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
23223: LD_ADDR_EXP 91
23227: PUSH
23228: LD_EXP 91
23232: PPUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: LD_EXP 91
23242: PUSH
23243: LD_VAR 0 1
23247: ARRAY
23248: PUSH
23249: LD_VAR 0 2
23253: UNION
23254: PPUSH
23255: CALL_OW 1
23259: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
23260: LD_VAR 0 1
23264: PPUSH
23265: LD_INT 20
23267: PPUSH
23268: CALL 64556 0 2
// end ;
23272: LD_VAR 0 4
23276: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23277: LD_INT 0
23279: PPUSH
23280: PPUSH
23281: PPUSH
23282: PPUSH
// result := false ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 0
23290: ST_TO_ADDR
// side := GetSide ( unit ) ;
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 255
23305: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23306: LD_ADDR_VAR 0 4
23310: PUSH
23311: LD_VAR 0 1
23315: PPUSH
23316: CALL_OW 248
23320: ST_TO_ADDR
// case nat of 1 :
23321: LD_VAR 0 4
23325: PUSH
23326: LD_INT 1
23328: DOUBLE
23329: EQUAL
23330: IFTRUE 23334
23332: GO 23345
23334: POP
// tech := tech_lassight ; 2 :
23335: LD_ADDR_VAR 0 5
23339: PUSH
23340: LD_INT 12
23342: ST_TO_ADDR
23343: GO 23384
23345: LD_INT 2
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23364
23353: POP
// tech := tech_mortar ; 3 :
23354: LD_ADDR_VAR 0 5
23358: PUSH
23359: LD_INT 41
23361: ST_TO_ADDR
23362: GO 23384
23364: LD_INT 3
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23372
23370: GO 23383
23372: POP
// tech := tech_bazooka ; end ;
23373: LD_ADDR_VAR 0 5
23377: PUSH
23378: LD_INT 44
23380: ST_TO_ADDR
23381: GO 23384
23383: POP
// if Researched ( side , tech ) then
23384: LD_VAR 0 3
23388: PPUSH
23389: LD_VAR 0 5
23393: PPUSH
23394: CALL_OW 325
23398: IFFALSE 23425
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23400: LD_ADDR_VAR 0 2
23404: PUSH
23405: LD_INT 5
23407: PUSH
23408: LD_INT 8
23410: PUSH
23411: LD_INT 9
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: LD_VAR 0 4
23423: ARRAY
23424: ST_TO_ADDR
// end ;
23425: LD_VAR 0 2
23429: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
// if not mines then
23435: LD_VAR 0 2
23439: NOT
23440: IFFALSE 23444
// exit ;
23442: GO 23588
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23444: LD_ADDR_VAR 0 5
23448: PUSH
23449: LD_INT 81
23451: PUSH
23452: LD_VAR 0 1
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 3
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PPUSH
23482: CALL_OW 69
23486: ST_TO_ADDR
// for i in mines do
23487: LD_ADDR_VAR 0 4
23491: PUSH
23492: LD_VAR 0 2
23496: PUSH
23497: FOR_IN
23498: IFFALSE 23586
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23500: LD_VAR 0 4
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 4
23513: PUSH
23514: LD_INT 2
23516: ARRAY
23517: PPUSH
23518: CALL_OW 458
23522: NOT
23523: IFFALSE 23527
// continue ;
23525: GO 23497
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23527: LD_VAR 0 4
23531: PUSH
23532: LD_INT 1
23534: ARRAY
23535: PPUSH
23536: LD_VAR 0 4
23540: PUSH
23541: LD_INT 2
23543: ARRAY
23544: PPUSH
23545: CALL_OW 428
23549: PUSH
23550: LD_VAR 0 5
23554: IN
23555: IFFALSE 23584
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23557: LD_VAR 0 4
23561: PUSH
23562: LD_INT 1
23564: ARRAY
23565: PPUSH
23566: LD_VAR 0 4
23570: PUSH
23571: LD_INT 2
23573: ARRAY
23574: PPUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 456
// end ;
23584: GO 23497
23586: POP
23587: POP
// end ;
23588: LD_VAR 0 3
23592: RET
// export function Count ( array ) ; var i ; begin
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
// result := 0 ;
23597: LD_ADDR_VAR 0 2
23601: PUSH
23602: LD_INT 0
23604: ST_TO_ADDR
// for i in array do
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_VAR 0 1
23614: PUSH
23615: FOR_IN
23616: IFFALSE 23640
// if i then
23618: LD_VAR 0 3
23622: IFFALSE 23638
// result := result + 1 ;
23624: LD_ADDR_VAR 0 2
23628: PUSH
23629: LD_VAR 0 2
23633: PUSH
23634: LD_INT 1
23636: PLUS
23637: ST_TO_ADDR
23638: GO 23615
23640: POP
23641: POP
// end ;
23642: LD_VAR 0 2
23646: RET
// export function IsEmpty ( building ) ; begin
23647: LD_INT 0
23649: PPUSH
// if not building then
23650: LD_VAR 0 1
23654: NOT
23655: IFFALSE 23659
// exit ;
23657: GO 23702
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_VAR 0 1
23668: PUSH
23669: LD_INT 22
23671: PUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 255
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 58
23688: PUSH
23689: EMPTY
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 69
23700: IN
23701: ST_TO_ADDR
// end ;
23702: LD_VAR 0 2
23706: RET
// export function IsNotFull ( building ) ; begin
23707: LD_INT 0
23709: PPUSH
// if not building then
23710: LD_VAR 0 1
23714: NOT
23715: IFFALSE 23719
// exit ;
23717: GO 23738
// result := UnitsInside ( building ) < 6 ;
23719: LD_ADDR_VAR 0 2
23723: PUSH
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL_OW 313
23733: PUSH
23734: LD_INT 6
23736: LESS
23737: ST_TO_ADDR
// end ;
23738: LD_VAR 0 2
23742: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23743: LD_INT 0
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
// tmp := [ ] ;
23749: LD_ADDR_VAR 0 3
23753: PUSH
23754: EMPTY
23755: ST_TO_ADDR
// list := [ ] ;
23756: LD_ADDR_VAR 0 5
23760: PUSH
23761: EMPTY
23762: ST_TO_ADDR
// for i = 16 to 25 do
23763: LD_ADDR_VAR 0 4
23767: PUSH
23768: DOUBLE
23769: LD_INT 16
23771: DEC
23772: ST_TO_ADDR
23773: LD_INT 25
23775: PUSH
23776: FOR_TO
23777: IFFALSE 23850
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_VAR 0 3
23788: PUSH
23789: LD_INT 22
23791: PUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 255
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 91
23808: PUSH
23809: LD_VAR 0 1
23813: PUSH
23814: LD_INT 6
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 30
23824: PUSH
23825: LD_VAR 0 4
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: PUSH
23839: EMPTY
23840: LIST
23841: PPUSH
23842: CALL_OW 69
23846: ADD
23847: ST_TO_ADDR
23848: GO 23776
23850: POP
23851: POP
// for i = 1 to tmp do
23852: LD_ADDR_VAR 0 4
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_VAR 0 3
23866: PUSH
23867: FOR_TO
23868: IFFALSE 23956
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23870: LD_ADDR_VAR 0 5
23874: PUSH
23875: LD_VAR 0 5
23879: PUSH
23880: LD_VAR 0 3
23884: PUSH
23885: LD_VAR 0 4
23889: ARRAY
23890: PPUSH
23891: CALL_OW 266
23895: PUSH
23896: LD_VAR 0 3
23900: PUSH
23901: LD_VAR 0 4
23905: ARRAY
23906: PPUSH
23907: CALL_OW 250
23911: PUSH
23912: LD_VAR 0 3
23916: PUSH
23917: LD_VAR 0 4
23921: ARRAY
23922: PPUSH
23923: CALL_OW 251
23927: PUSH
23928: LD_VAR 0 3
23932: PUSH
23933: LD_VAR 0 4
23937: ARRAY
23938: PPUSH
23939: CALL_OW 254
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: ADD
23953: ST_TO_ADDR
23954: GO 23867
23956: POP
23957: POP
// result := list ;
23958: LD_ADDR_VAR 0 2
23962: PUSH
23963: LD_VAR 0 5
23967: ST_TO_ADDR
// end ;
23968: LD_VAR 0 2
23972: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
23977: PPUSH
23978: PPUSH
23979: PPUSH
23980: PPUSH
23981: PPUSH
// if not factory then
23982: LD_VAR 0 1
23986: NOT
23987: IFFALSE 23991
// exit ;
23989: GO 24516
// if control = control_apeman then
23991: LD_VAR 0 4
23995: PUSH
23996: LD_INT 5
23998: EQUAL
23999: IFFALSE 24108
// begin tmp := UnitsInside ( factory ) ;
24001: LD_ADDR_VAR 0 8
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 313
24015: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24016: LD_VAR 0 8
24020: PPUSH
24021: LD_INT 25
24023: PUSH
24024: LD_INT 12
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PPUSH
24031: CALL_OW 72
24035: NOT
24036: IFFALSE 24046
// control := control_manual ;
24038: LD_ADDR_VAR 0 4
24042: PUSH
24043: LD_INT 1
24045: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24046: LD_ADDR_VAR 0 8
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL 23743 0 1
24060: ST_TO_ADDR
// if tmp then
24061: LD_VAR 0 8
24065: IFFALSE 24108
// begin for i in tmp do
24067: LD_ADDR_VAR 0 7
24071: PUSH
24072: LD_VAR 0 8
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24106
// if i [ 1 ] = b_ext_radar then
24080: LD_VAR 0 7
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: PUSH
24089: LD_INT 20
24091: EQUAL
24092: IFFALSE 24104
// begin control := control_remote ;
24094: LD_ADDR_VAR 0 4
24098: PUSH
24099: LD_INT 2
24101: ST_TO_ADDR
// break ;
24102: GO 24106
// end ;
24104: GO 24077
24106: POP
24107: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_VAR 0 4
24127: PPUSH
24128: LD_VAR 0 5
24132: PPUSH
24133: CALL_OW 448
24137: IFFALSE 24172
// begin result := [ chassis , engine , control , weapon ] ;
24139: LD_ADDR_VAR 0 6
24143: PUSH
24144: LD_VAR 0 2
24148: PUSH
24149: LD_VAR 0 3
24153: PUSH
24154: LD_VAR 0 4
24158: PUSH
24159: LD_VAR 0 5
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: ST_TO_ADDR
// exit ;
24170: GO 24516
// end ; _chassis := AvailableChassisList ( factory ) ;
24172: LD_ADDR_VAR 0 9
24176: PUSH
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 475
24186: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24187: LD_ADDR_VAR 0 11
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 476
24201: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24202: LD_ADDR_VAR 0 12
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 477
24216: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24217: LD_ADDR_VAR 0 10
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 478
24231: ST_TO_ADDR
// if not chassis in _chassis then
24232: LD_VAR 0 2
24236: PUSH
24237: LD_VAR 0 9
24241: IN
24242: NOT
24243: IFFALSE 24269
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_VAR 0 9
24254: PUSH
24255: LD_INT 1
24257: PPUSH
24258: LD_VAR 0 9
24262: PPUSH
24263: CALL_OW 12
24267: ARRAY
24268: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24269: LD_VAR 0 2
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL 24521 0 2
24283: NOT
24284: IFFALSE 24343
// repeat engine := _engine [ 1 ] ;
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_VAR 0 11
24295: PUSH
24296: LD_INT 1
24298: ARRAY
24299: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24300: LD_ADDR_VAR 0 11
24304: PUSH
24305: LD_VAR 0 11
24309: PPUSH
24310: LD_INT 1
24312: PPUSH
24313: CALL_OW 3
24317: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24318: LD_VAR 0 2
24322: PPUSH
24323: LD_VAR 0 3
24327: PPUSH
24328: CALL 24521 0 2
24332: PUSH
24333: LD_VAR 0 11
24337: PUSH
24338: EMPTY
24339: EQUAL
24340: OR
24341: IFFALSE 24286
// if not control in _control then
24343: LD_VAR 0 4
24347: PUSH
24348: LD_VAR 0 12
24352: IN
24353: NOT
24354: IFFALSE 24380
// control := _control [ rand ( 1 , _control ) ] ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 12
24365: PUSH
24366: LD_INT 1
24368: PPUSH
24369: LD_VAR 0 12
24373: PPUSH
24374: CALL_OW 12
24378: ARRAY
24379: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24380: LD_VAR 0 2
24384: PPUSH
24385: LD_VAR 0 5
24389: PPUSH
24390: CALL 24741 0 2
24394: NOT
24395: IFFALSE 24454
// repeat weapon := _weapon [ 1 ] ;
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: LD_VAR 0 10
24406: PUSH
24407: LD_INT 1
24409: ARRAY
24410: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24411: LD_ADDR_VAR 0 10
24415: PUSH
24416: LD_VAR 0 10
24420: PPUSH
24421: LD_INT 1
24423: PPUSH
24424: CALL_OW 3
24428: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_VAR 0 5
24438: PPUSH
24439: CALL 24741 0 2
24443: PUSH
24444: LD_VAR 0 10
24448: PUSH
24449: EMPTY
24450: EQUAL
24451: OR
24452: IFFALSE 24397
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24454: LD_VAR 0 1
24458: PPUSH
24459: LD_VAR 0 2
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: LD_VAR 0 4
24473: PPUSH
24474: LD_VAR 0 5
24478: PPUSH
24479: CALL_OW 448
24483: IFFALSE 24516
// result := [ chassis , engine , control , weapon ] ;
24485: LD_ADDR_VAR 0 6
24489: PUSH
24490: LD_VAR 0 2
24494: PUSH
24495: LD_VAR 0 3
24499: PUSH
24500: LD_VAR 0 4
24504: PUSH
24505: LD_VAR 0 5
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: ST_TO_ADDR
// end ;
24516: LD_VAR 0 6
24520: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24521: LD_INT 0
24523: PPUSH
// if not chassis or not engine then
24524: LD_VAR 0 1
24528: NOT
24529: PUSH
24530: LD_VAR 0 2
24534: NOT
24535: OR
24536: IFFALSE 24540
// exit ;
24538: GO 24736
// case engine of engine_solar :
24540: LD_VAR 0 2
24544: PUSH
24545: LD_INT 2
24547: DOUBLE
24548: EQUAL
24549: IFTRUE 24553
24551: GO 24591
24553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: LD_INT 11
24561: PUSH
24562: LD_INT 12
24564: PUSH
24565: LD_INT 13
24567: PUSH
24568: LD_INT 14
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
24589: GO 24720
24591: LD_INT 1
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24661
24599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_INT 11
24607: PUSH
24608: LD_INT 12
24610: PUSH
24611: LD_INT 13
24613: PUSH
24614: LD_INT 14
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 23
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_INT 24
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: ST_TO_ADDR
24659: GO 24720
24661: LD_INT 3
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24719
24669: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24670: LD_ADDR_VAR 0 3
24674: PUSH
24675: LD_INT 13
24677: PUSH
24678: LD_INT 14
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 4
24689: PUSH
24690: LD_INT 5
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 22
24698: PUSH
24699: LD_INT 23
24701: PUSH
24702: LD_INT 24
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: ST_TO_ADDR
24717: GO 24720
24719: POP
// result := ( chassis in result ) ;
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: LD_VAR 0 1
24729: PUSH
24730: LD_VAR 0 3
24734: IN
24735: ST_TO_ADDR
// end ;
24736: LD_VAR 0 3
24740: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24741: LD_INT 0
24743: PPUSH
// if not chassis or not weapon then
24744: LD_VAR 0 1
24748: NOT
24749: PUSH
24750: LD_VAR 0 2
24754: NOT
24755: OR
24756: IFFALSE 24760
// exit ;
24758: GO 25786
// case weapon of us_machine_gun :
24760: LD_VAR 0 2
24764: PUSH
24765: LD_INT 2
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24803
24773: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: ST_TO_ADDR
24801: GO 25770
24803: LD_INT 3
24805: DOUBLE
24806: EQUAL
24807: IFTRUE 24811
24809: GO 24841
24811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: LD_INT 4
24828: PUSH
24829: LD_INT 5
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: ST_TO_ADDR
24839: GO 25770
24841: LD_INT 11
24843: DOUBLE
24844: EQUAL
24845: IFTRUE 24849
24847: GO 24879
24849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25770
24879: LD_INT 4
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24913
24887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: LD_INT 4
24901: PUSH
24902: LD_INT 5
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: ST_TO_ADDR
24911: GO 25770
24913: LD_INT 5
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24947
24921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: LD_INT 4
24935: PUSH
24936: LD_INT 5
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: ST_TO_ADDR
24945: GO 25770
24947: LD_INT 9
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 24981
24955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24956: LD_ADDR_VAR 0 3
24960: PUSH
24961: LD_INT 2
24963: PUSH
24964: LD_INT 3
24966: PUSH
24967: LD_INT 4
24969: PUSH
24970: LD_INT 5
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: ST_TO_ADDR
24979: GO 25770
24981: LD_INT 7
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25015
24989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24990: LD_ADDR_VAR 0 3
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: LD_INT 3
25000: PUSH
25001: LD_INT 4
25003: PUSH
25004: LD_INT 5
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: ST_TO_ADDR
25013: GO 25770
25015: LD_INT 12
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25049
25023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25024: LD_ADDR_VAR 0 3
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 4
25037: PUSH
25038: LD_INT 5
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: ST_TO_ADDR
25047: GO 25770
25049: LD_INT 13
25051: DOUBLE
25052: EQUAL
25053: IFTRUE 25057
25055: GO 25083
25057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: LD_INT 4
25071: PUSH
25072: LD_INT 5
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25770
25083: LD_INT 14
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25109
25091: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 4
25099: PUSH
25100: LD_INT 5
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 25770
25109: LD_INT 6
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25135
25117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_INT 4
25125: PUSH
25126: LD_INT 5
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 25770
25135: LD_INT 10
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25161
25143: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_INT 4
25151: PUSH
25152: LD_INT 5
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: ST_TO_ADDR
25159: GO 25770
25161: LD_INT 22
25163: DOUBLE
25164: EQUAL
25165: IFTRUE 25169
25167: GO 25195
25169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_INT 11
25177: PUSH
25178: LD_INT 12
25180: PUSH
25181: LD_INT 13
25183: PUSH
25184: LD_INT 14
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: ST_TO_ADDR
25193: GO 25770
25195: LD_INT 23
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25229
25203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25204: LD_ADDR_VAR 0 3
25208: PUSH
25209: LD_INT 11
25211: PUSH
25212: LD_INT 12
25214: PUSH
25215: LD_INT 13
25217: PUSH
25218: LD_INT 14
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
25227: GO 25770
25229: LD_INT 24
25231: DOUBLE
25232: EQUAL
25233: IFTRUE 25237
25235: GO 25263
25237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25238: LD_ADDR_VAR 0 3
25242: PUSH
25243: LD_INT 11
25245: PUSH
25246: LD_INT 12
25248: PUSH
25249: LD_INT 13
25251: PUSH
25252: LD_INT 14
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: ST_TO_ADDR
25261: GO 25770
25263: LD_INT 30
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25297
25271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 11
25279: PUSH
25280: LD_INT 12
25282: PUSH
25283: LD_INT 13
25285: PUSH
25286: LD_INT 14
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: ST_TO_ADDR
25295: GO 25770
25297: LD_INT 25
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25323
25305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25306: LD_ADDR_VAR 0 3
25310: PUSH
25311: LD_INT 13
25313: PUSH
25314: LD_INT 14
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: ST_TO_ADDR
25321: GO 25770
25323: LD_INT 27
25325: DOUBLE
25326: EQUAL
25327: IFTRUE 25331
25329: GO 25349
25331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: LD_INT 13
25339: PUSH
25340: LD_INT 14
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: ST_TO_ADDR
25347: GO 25770
25349: LD_INT 28
25351: DOUBLE
25352: EQUAL
25353: IFTRUE 25357
25355: GO 25375
25357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 13
25365: PUSH
25366: LD_INT 14
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: ST_TO_ADDR
25373: GO 25770
25375: LD_INT 29
25377: DOUBLE
25378: EQUAL
25379: IFTRUE 25383
25381: GO 25401
25383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_INT 13
25391: PUSH
25392: LD_INT 14
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: ST_TO_ADDR
25399: GO 25770
25401: LD_INT 31
25403: DOUBLE
25404: EQUAL
25405: IFTRUE 25409
25407: GO 25427
25409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25410: LD_ADDR_VAR 0 3
25414: PUSH
25415: LD_INT 13
25417: PUSH
25418: LD_INT 14
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: ST_TO_ADDR
25425: GO 25770
25427: LD_INT 26
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25453
25435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 13
25443: PUSH
25444: LD_INT 14
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: ST_TO_ADDR
25451: GO 25770
25453: LD_INT 42
25455: DOUBLE
25456: EQUAL
25457: IFTRUE 25461
25459: GO 25487
25461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_INT 21
25469: PUSH
25470: LD_INT 22
25472: PUSH
25473: LD_INT 23
25475: PUSH
25476: LD_INT 24
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: ST_TO_ADDR
25485: GO 25770
25487: LD_INT 43
25489: DOUBLE
25490: EQUAL
25491: IFTRUE 25495
25493: GO 25521
25495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25496: LD_ADDR_VAR 0 3
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 22
25506: PUSH
25507: LD_INT 23
25509: PUSH
25510: LD_INT 24
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: ST_TO_ADDR
25519: GO 25770
25521: LD_INT 44
25523: DOUBLE
25524: EQUAL
25525: IFTRUE 25529
25527: GO 25555
25529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25530: LD_ADDR_VAR 0 3
25534: PUSH
25535: LD_INT 21
25537: PUSH
25538: LD_INT 22
25540: PUSH
25541: LD_INT 23
25543: PUSH
25544: LD_INT 24
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
25553: GO 25770
25555: LD_INT 45
25557: DOUBLE
25558: EQUAL
25559: IFTRUE 25563
25561: GO 25589
25563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25564: LD_ADDR_VAR 0 3
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 22
25574: PUSH
25575: LD_INT 23
25577: PUSH
25578: LD_INT 24
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: ST_TO_ADDR
25587: GO 25770
25589: LD_INT 49
25591: DOUBLE
25592: EQUAL
25593: IFTRUE 25597
25595: GO 25623
25597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_INT 21
25605: PUSH
25606: LD_INT 22
25608: PUSH
25609: LD_INT 23
25611: PUSH
25612: LD_INT 24
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: ST_TO_ADDR
25621: GO 25770
25623: LD_INT 51
25625: DOUBLE
25626: EQUAL
25627: IFTRUE 25631
25629: GO 25657
25631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25632: LD_ADDR_VAR 0 3
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 22
25642: PUSH
25643: LD_INT 23
25645: PUSH
25646: LD_INT 24
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: ST_TO_ADDR
25655: GO 25770
25657: LD_INT 52
25659: DOUBLE
25660: EQUAL
25661: IFTRUE 25665
25663: GO 25691
25665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 21
25673: PUSH
25674: LD_INT 22
25676: PUSH
25677: LD_INT 23
25679: PUSH
25680: LD_INT 24
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: ST_TO_ADDR
25689: GO 25770
25691: LD_INT 53
25693: DOUBLE
25694: EQUAL
25695: IFTRUE 25699
25697: GO 25717
25699: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25700: LD_ADDR_VAR 0 3
25704: PUSH
25705: LD_INT 23
25707: PUSH
25708: LD_INT 24
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: ST_TO_ADDR
25715: GO 25770
25717: LD_INT 46
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25725
25723: GO 25743
25725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25726: LD_ADDR_VAR 0 3
25730: PUSH
25731: LD_INT 23
25733: PUSH
25734: LD_INT 24
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: ST_TO_ADDR
25741: GO 25770
25743: LD_INT 47
25745: DOUBLE
25746: EQUAL
25747: IFTRUE 25751
25749: GO 25769
25751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25752: LD_ADDR_VAR 0 3
25756: PUSH
25757: LD_INT 23
25759: PUSH
25760: LD_INT 24
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: ST_TO_ADDR
25767: GO 25770
25769: POP
// result := ( chassis in result ) ;
25770: LD_ADDR_VAR 0 3
25774: PUSH
25775: LD_VAR 0 1
25779: PUSH
25780: LD_VAR 0 3
25784: IN
25785: ST_TO_ADDR
// end ;
25786: LD_VAR 0 3
25790: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25791: LD_INT 0
25793: PPUSH
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
25799: PPUSH
// result := array ;
25800: LD_ADDR_VAR 0 5
25804: PUSH
25805: LD_VAR 0 1
25809: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25810: LD_VAR 0 1
25814: NOT
25815: PUSH
25816: LD_VAR 0 2
25820: NOT
25821: OR
25822: PUSH
25823: LD_VAR 0 3
25827: NOT
25828: OR
25829: PUSH
25830: LD_VAR 0 2
25834: PUSH
25835: LD_VAR 0 1
25839: GREATER
25840: OR
25841: PUSH
25842: LD_VAR 0 3
25846: PUSH
25847: LD_VAR 0 1
25851: GREATER
25852: OR
25853: IFFALSE 25857
// exit ;
25855: GO 26153
// if direction then
25857: LD_VAR 0 4
25861: IFFALSE 25925
// begin d := 1 ;
25863: LD_ADDR_VAR 0 9
25867: PUSH
25868: LD_INT 1
25870: ST_TO_ADDR
// if i_from > i_to then
25871: LD_VAR 0 2
25875: PUSH
25876: LD_VAR 0 3
25880: GREATER
25881: IFFALSE 25907
// length := ( array - i_from ) + i_to else
25883: LD_ADDR_VAR 0 11
25887: PUSH
25888: LD_VAR 0 1
25892: PUSH
25893: LD_VAR 0 2
25897: MINUS
25898: PUSH
25899: LD_VAR 0 3
25903: PLUS
25904: ST_TO_ADDR
25905: GO 25923
// length := i_to - i_from ;
25907: LD_ADDR_VAR 0 11
25911: PUSH
25912: LD_VAR 0 3
25916: PUSH
25917: LD_VAR 0 2
25921: MINUS
25922: ST_TO_ADDR
// end else
25923: GO 25986
// begin d := - 1 ;
25925: LD_ADDR_VAR 0 9
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: ST_TO_ADDR
// if i_from > i_to then
25934: LD_VAR 0 2
25938: PUSH
25939: LD_VAR 0 3
25943: GREATER
25944: IFFALSE 25964
// length := i_from - i_to else
25946: LD_ADDR_VAR 0 11
25950: PUSH
25951: LD_VAR 0 2
25955: PUSH
25956: LD_VAR 0 3
25960: MINUS
25961: ST_TO_ADDR
25962: GO 25986
// length := ( array - i_to ) + i_from ;
25964: LD_ADDR_VAR 0 11
25968: PUSH
25969: LD_VAR 0 1
25973: PUSH
25974: LD_VAR 0 3
25978: MINUS
25979: PUSH
25980: LD_VAR 0 2
25984: PLUS
25985: ST_TO_ADDR
// end ; if not length then
25986: LD_VAR 0 11
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26153
// tmp := array ;
25995: LD_ADDR_VAR 0 10
25999: PUSH
26000: LD_VAR 0 1
26004: ST_TO_ADDR
// for i = 1 to length do
26005: LD_ADDR_VAR 0 6
26009: PUSH
26010: DOUBLE
26011: LD_INT 1
26013: DEC
26014: ST_TO_ADDR
26015: LD_VAR 0 11
26019: PUSH
26020: FOR_TO
26021: IFFALSE 26141
// begin for j = 1 to array do
26023: LD_ADDR_VAR 0 7
26027: PUSH
26028: DOUBLE
26029: LD_INT 1
26031: DEC
26032: ST_TO_ADDR
26033: LD_VAR 0 1
26037: PUSH
26038: FOR_TO
26039: IFFALSE 26127
// begin k := j + d ;
26041: LD_ADDR_VAR 0 8
26045: PUSH
26046: LD_VAR 0 7
26050: PUSH
26051: LD_VAR 0 9
26055: PLUS
26056: ST_TO_ADDR
// if k > array then
26057: LD_VAR 0 8
26061: PUSH
26062: LD_VAR 0 1
26066: GREATER
26067: IFFALSE 26077
// k := 1 ;
26069: LD_ADDR_VAR 0 8
26073: PUSH
26074: LD_INT 1
26076: ST_TO_ADDR
// if not k then
26077: LD_VAR 0 8
26081: NOT
26082: IFFALSE 26094
// k := array ;
26084: LD_ADDR_VAR 0 8
26088: PUSH
26089: LD_VAR 0 1
26093: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26094: LD_ADDR_VAR 0 10
26098: PUSH
26099: LD_VAR 0 10
26103: PPUSH
26104: LD_VAR 0 8
26108: PPUSH
26109: LD_VAR 0 1
26113: PUSH
26114: LD_VAR 0 7
26118: ARRAY
26119: PPUSH
26120: CALL_OW 1
26124: ST_TO_ADDR
// end ;
26125: GO 26038
26127: POP
26128: POP
// array := tmp ;
26129: LD_ADDR_VAR 0 1
26133: PUSH
26134: LD_VAR 0 10
26138: ST_TO_ADDR
// end ;
26139: GO 26020
26141: POP
26142: POP
// result := array ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_VAR 0 1
26152: ST_TO_ADDR
// end ;
26153: LD_VAR 0 5
26157: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26158: LD_INT 0
26160: PPUSH
26161: PPUSH
// result := 0 ;
26162: LD_ADDR_VAR 0 3
26166: PUSH
26167: LD_INT 0
26169: ST_TO_ADDR
// if not array or not value in array then
26170: LD_VAR 0 1
26174: NOT
26175: PUSH
26176: LD_VAR 0 2
26180: PUSH
26181: LD_VAR 0 1
26185: IN
26186: NOT
26187: OR
26188: IFFALSE 26192
// exit ;
26190: GO 26246
// for i = 1 to array do
26192: LD_ADDR_VAR 0 4
26196: PUSH
26197: DOUBLE
26198: LD_INT 1
26200: DEC
26201: ST_TO_ADDR
26202: LD_VAR 0 1
26206: PUSH
26207: FOR_TO
26208: IFFALSE 26244
// if value = array [ i ] then
26210: LD_VAR 0 2
26214: PUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_VAR 0 4
26224: ARRAY
26225: EQUAL
26226: IFFALSE 26242
// begin result := i ;
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_VAR 0 4
26237: ST_TO_ADDR
// exit ;
26238: POP
26239: POP
26240: GO 26246
// end ;
26242: GO 26207
26244: POP
26245: POP
// end ;
26246: LD_VAR 0 3
26250: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26251: LD_INT 0
26253: PPUSH
// vc_chassis := chassis ;
26254: LD_ADDR_OWVAR 37
26258: PUSH
26259: LD_VAR 0 1
26263: ST_TO_ADDR
// vc_engine := engine ;
26264: LD_ADDR_OWVAR 39
26268: PUSH
26269: LD_VAR 0 2
26273: ST_TO_ADDR
// vc_control := control ;
26274: LD_ADDR_OWVAR 38
26278: PUSH
26279: LD_VAR 0 3
26283: ST_TO_ADDR
// vc_weapon := weapon ;
26284: LD_ADDR_OWVAR 40
26288: PUSH
26289: LD_VAR 0 4
26293: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26294: LD_ADDR_OWVAR 41
26298: PUSH
26299: LD_VAR 0 5
26303: ST_TO_ADDR
// end ;
26304: LD_VAR 0 6
26308: RET
// export function WantPlant ( unit ) ; var task ; begin
26309: LD_INT 0
26311: PPUSH
26312: PPUSH
// result := false ;
26313: LD_ADDR_VAR 0 2
26317: PUSH
26318: LD_INT 0
26320: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 437
26335: ST_TO_ADDR
// if task then
26336: LD_VAR 0 3
26340: IFFALSE 26368
// if task [ 1 ] [ 1 ] = p then
26342: LD_VAR 0 3
26346: PUSH
26347: LD_INT 1
26349: ARRAY
26350: PUSH
26351: LD_INT 1
26353: ARRAY
26354: PUSH
26355: LD_STRING p
26357: EQUAL
26358: IFFALSE 26368
// result := true ;
26360: LD_ADDR_VAR 0 2
26364: PUSH
26365: LD_INT 1
26367: ST_TO_ADDR
// end ;
26368: LD_VAR 0 2
26372: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26373: LD_INT 0
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
// if pos < 1 then
26379: LD_VAR 0 2
26383: PUSH
26384: LD_INT 1
26386: LESS
26387: IFFALSE 26391
// exit ;
26389: GO 26694
// if pos = 1 then
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: EQUAL
26399: IFFALSE 26432
// result := Replace ( arr , pos [ 1 ] , value ) else
26401: LD_ADDR_VAR 0 4
26405: PUSH
26406: LD_VAR 0 1
26410: PPUSH
26411: LD_VAR 0 2
26415: PUSH
26416: LD_INT 1
26418: ARRAY
26419: PPUSH
26420: LD_VAR 0 3
26424: PPUSH
26425: CALL_OW 1
26429: ST_TO_ADDR
26430: GO 26694
// begin tmp := arr ;
26432: LD_ADDR_VAR 0 6
26436: PUSH
26437: LD_VAR 0 1
26441: ST_TO_ADDR
// s_arr := [ tmp ] ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: LD_VAR 0 6
26451: PUSH
26452: EMPTY
26453: LIST
26454: ST_TO_ADDR
// for i = 1 to pos - 1 do
26455: LD_ADDR_VAR 0 5
26459: PUSH
26460: DOUBLE
26461: LD_INT 1
26463: DEC
26464: ST_TO_ADDR
26465: LD_VAR 0 2
26469: PUSH
26470: LD_INT 1
26472: MINUS
26473: PUSH
26474: FOR_TO
26475: IFFALSE 26520
// begin tmp := tmp [ pos [ i ] ] ;
26477: LD_ADDR_VAR 0 6
26481: PUSH
26482: LD_VAR 0 6
26486: PUSH
26487: LD_VAR 0 2
26491: PUSH
26492: LD_VAR 0 5
26496: ARRAY
26497: ARRAY
26498: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26499: LD_ADDR_VAR 0 7
26503: PUSH
26504: LD_VAR 0 7
26508: PUSH
26509: LD_VAR 0 6
26513: PUSH
26514: EMPTY
26515: LIST
26516: ADD
26517: ST_TO_ADDR
// end ;
26518: GO 26474
26520: POP
26521: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26522: LD_ADDR_VAR 0 6
26526: PUSH
26527: LD_VAR 0 6
26531: PPUSH
26532: LD_VAR 0 2
26536: PUSH
26537: LD_VAR 0 2
26541: ARRAY
26542: PPUSH
26543: LD_VAR 0 3
26547: PPUSH
26548: CALL_OW 1
26552: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26553: LD_ADDR_VAR 0 7
26557: PUSH
26558: LD_VAR 0 7
26562: PPUSH
26563: LD_VAR 0 7
26567: PPUSH
26568: LD_VAR 0 6
26572: PPUSH
26573: CALL_OW 1
26577: ST_TO_ADDR
// for i = s_arr downto 2 do
26578: LD_ADDR_VAR 0 5
26582: PUSH
26583: DOUBLE
26584: LD_VAR 0 7
26588: INC
26589: ST_TO_ADDR
26590: LD_INT 2
26592: PUSH
26593: FOR_DOWNTO
26594: IFFALSE 26678
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26596: LD_ADDR_VAR 0 6
26600: PUSH
26601: LD_VAR 0 7
26605: PUSH
26606: LD_VAR 0 5
26610: PUSH
26611: LD_INT 1
26613: MINUS
26614: ARRAY
26615: PPUSH
26616: LD_VAR 0 2
26620: PUSH
26621: LD_VAR 0 5
26625: PUSH
26626: LD_INT 1
26628: MINUS
26629: ARRAY
26630: PPUSH
26631: LD_VAR 0 7
26635: PUSH
26636: LD_VAR 0 5
26640: ARRAY
26641: PPUSH
26642: CALL_OW 1
26646: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26647: LD_ADDR_VAR 0 7
26651: PUSH
26652: LD_VAR 0 7
26656: PPUSH
26657: LD_VAR 0 5
26661: PUSH
26662: LD_INT 1
26664: MINUS
26665: PPUSH
26666: LD_VAR 0 6
26670: PPUSH
26671: CALL_OW 1
26675: ST_TO_ADDR
// end ;
26676: GO 26593
26678: POP
26679: POP
// result := s_arr [ 1 ] ;
26680: LD_ADDR_VAR 0 4
26684: PUSH
26685: LD_VAR 0 7
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: ST_TO_ADDR
// end ; end ;
26694: LD_VAR 0 4
26698: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26699: LD_INT 0
26701: PPUSH
26702: PPUSH
// if not list then
26703: LD_VAR 0 1
26707: NOT
26708: IFFALSE 26712
// exit ;
26710: GO 26803
// i := list [ pos1 ] ;
26712: LD_ADDR_VAR 0 5
26716: PUSH
26717: LD_VAR 0 1
26721: PUSH
26722: LD_VAR 0 2
26726: ARRAY
26727: ST_TO_ADDR
// if not i then
26728: LD_VAR 0 5
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 26803
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26737: LD_ADDR_VAR 0 1
26741: PUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_VAR 0 2
26751: PPUSH
26752: LD_VAR 0 1
26756: PUSH
26757: LD_VAR 0 3
26761: ARRAY
26762: PPUSH
26763: CALL_OW 1
26767: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26768: LD_ADDR_VAR 0 1
26772: PUSH
26773: LD_VAR 0 1
26777: PPUSH
26778: LD_VAR 0 3
26782: PPUSH
26783: LD_VAR 0 5
26787: PPUSH
26788: CALL_OW 1
26792: ST_TO_ADDR
// result := list ;
26793: LD_ADDR_VAR 0 4
26797: PUSH
26798: LD_VAR 0 1
26802: ST_TO_ADDR
// end ;
26803: LD_VAR 0 4
26807: RET
// export function Add ( list , pos , val ) ; begin
26808: LD_INT 0
26810: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
26811: LD_ADDR_VAR 0 4
26815: PUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: LD_VAR 0 2
26825: PPUSH
26826: LD_VAR 0 3
26830: PPUSH
26831: CALL 26373 0 3
26835: ST_TO_ADDR
26836: LD_VAR 0 4
26840: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26841: LD_INT 0
26843: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26844: LD_ADDR_VAR 0 5
26848: PUSH
26849: LD_VAR 0 1
26853: PPUSH
26854: CALL_OW 250
26858: PPUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 251
26868: PPUSH
26869: LD_VAR 0 2
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: LD_VAR 0 4
26883: PPUSH
26884: CALL 26894 0 5
26888: ST_TO_ADDR
// end ;
26889: LD_VAR 0 5
26893: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
// if not list then
26900: LD_VAR 0 3
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27297
// result := [ ] ;
26909: LD_ADDR_VAR 0 6
26913: PUSH
26914: EMPTY
26915: ST_TO_ADDR
// for i in list do
26916: LD_ADDR_VAR 0 7
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: FOR_IN
26927: IFFALSE 27129
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26929: LD_ADDR_VAR 0 9
26933: PUSH
26934: LD_VAR 0 7
26938: PPUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: LD_VAR 0 2
26948: PPUSH
26949: CALL_OW 297
26953: ST_TO_ADDR
// if not result then
26954: LD_VAR 0 6
26958: NOT
26959: IFFALSE 26985
// result := [ [ i , tmp ] ] else
26961: LD_ADDR_VAR 0 6
26965: PUSH
26966: LD_VAR 0 7
26970: PUSH
26971: LD_VAR 0 9
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: ST_TO_ADDR
26983: GO 27127
// begin if result [ result ] [ 2 ] < tmp then
26985: LD_VAR 0 6
26989: PUSH
26990: LD_VAR 0 6
26994: ARRAY
26995: PUSH
26996: LD_INT 2
26998: ARRAY
26999: PUSH
27000: LD_VAR 0 9
27004: LESS
27005: IFFALSE 27047
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27007: LD_ADDR_VAR 0 6
27011: PUSH
27012: LD_VAR 0 6
27016: PPUSH
27017: LD_VAR 0 6
27021: PUSH
27022: LD_INT 1
27024: PLUS
27025: PPUSH
27026: LD_VAR 0 7
27030: PUSH
27031: LD_VAR 0 9
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PPUSH
27040: CALL_OW 2
27044: ST_TO_ADDR
27045: GO 27127
// for j = 1 to result do
27047: LD_ADDR_VAR 0 8
27051: PUSH
27052: DOUBLE
27053: LD_INT 1
27055: DEC
27056: ST_TO_ADDR
27057: LD_VAR 0 6
27061: PUSH
27062: FOR_TO
27063: IFFALSE 27125
// begin if tmp < result [ j ] [ 2 ] then
27065: LD_VAR 0 9
27069: PUSH
27070: LD_VAR 0 6
27074: PUSH
27075: LD_VAR 0 8
27079: ARRAY
27080: PUSH
27081: LD_INT 2
27083: ARRAY
27084: LESS
27085: IFFALSE 27123
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27087: LD_ADDR_VAR 0 6
27091: PUSH
27092: LD_VAR 0 6
27096: PPUSH
27097: LD_VAR 0 8
27101: PPUSH
27102: LD_VAR 0 7
27106: PUSH
27107: LD_VAR 0 9
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 2
27120: ST_TO_ADDR
// break ;
27121: GO 27125
// end ; end ;
27123: GO 27062
27125: POP
27126: POP
// end ; end ;
27127: GO 26926
27129: POP
27130: POP
// if result and not asc then
27131: LD_VAR 0 6
27135: PUSH
27136: LD_VAR 0 4
27140: NOT
27141: AND
27142: IFFALSE 27217
// begin tmp := result ;
27144: LD_ADDR_VAR 0 9
27148: PUSH
27149: LD_VAR 0 6
27153: ST_TO_ADDR
// for i = tmp downto 1 do
27154: LD_ADDR_VAR 0 7
27158: PUSH
27159: DOUBLE
27160: LD_VAR 0 9
27164: INC
27165: ST_TO_ADDR
27166: LD_INT 1
27168: PUSH
27169: FOR_DOWNTO
27170: IFFALSE 27215
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27172: LD_ADDR_VAR 0 6
27176: PUSH
27177: LD_VAR 0 6
27181: PPUSH
27182: LD_VAR 0 9
27186: PUSH
27187: LD_VAR 0 7
27191: MINUS
27192: PUSH
27193: LD_INT 1
27195: PLUS
27196: PPUSH
27197: LD_VAR 0 9
27201: PUSH
27202: LD_VAR 0 7
27206: ARRAY
27207: PPUSH
27208: CALL_OW 1
27212: ST_TO_ADDR
27213: GO 27169
27215: POP
27216: POP
// end ; tmp := [ ] ;
27217: LD_ADDR_VAR 0 9
27221: PUSH
27222: EMPTY
27223: ST_TO_ADDR
// if mode then
27224: LD_VAR 0 5
27228: IFFALSE 27297
// begin for i = 1 to result do
27230: LD_ADDR_VAR 0 7
27234: PUSH
27235: DOUBLE
27236: LD_INT 1
27238: DEC
27239: ST_TO_ADDR
27240: LD_VAR 0 6
27244: PUSH
27245: FOR_TO
27246: IFFALSE 27285
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27248: LD_ADDR_VAR 0 9
27252: PUSH
27253: LD_VAR 0 9
27257: PPUSH
27258: LD_VAR 0 7
27262: PPUSH
27263: LD_VAR 0 6
27267: PUSH
27268: LD_VAR 0 7
27272: ARRAY
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: PPUSH
27278: CALL_OW 1
27282: ST_TO_ADDR
27283: GO 27245
27285: POP
27286: POP
// result := tmp ;
27287: LD_ADDR_VAR 0 6
27291: PUSH
27292: LD_VAR 0 9
27296: ST_TO_ADDR
// end ; end ;
27297: LD_VAR 0 6
27301: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27310: LD_ADDR_VAR 0 5
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// if not x or not y then
27332: LD_VAR 0 2
27336: NOT
27337: PUSH
27338: LD_VAR 0 3
27342: NOT
27343: OR
27344: IFFALSE 27348
// exit ;
27346: GO 28994
// if not range then
27348: LD_VAR 0 4
27352: NOT
27353: IFFALSE 27363
// range := 10 ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_INT 10
27362: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27363: LD_ADDR_VAR 0 8
27367: PUSH
27368: LD_INT 81
27370: PUSH
27371: LD_VAR 0 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 92
27382: PUSH
27383: LD_VAR 0 2
27387: PUSH
27388: LD_VAR 0 3
27392: PUSH
27393: LD_VAR 0 4
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 3
27406: PUSH
27407: LD_INT 21
27409: PUSH
27410: LD_INT 3
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: PPUSH
27426: CALL_OW 69
27430: ST_TO_ADDR
// if not tmp then
27431: LD_VAR 0 8
27435: NOT
27436: IFFALSE 27440
// exit ;
27438: GO 28994
// for i in tmp do
27440: LD_ADDR_VAR 0 6
27444: PUSH
27445: LD_VAR 0 8
27449: PUSH
27450: FOR_IN
27451: IFFALSE 28969
// begin points := [ 0 , 0 , 0 ] ;
27453: LD_ADDR_VAR 0 9
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// bpoints := 1 ;
27472: LD_ADDR_VAR 0 10
27476: PUSH
27477: LD_INT 1
27479: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27480: LD_VAR 0 6
27484: PPUSH
27485: CALL_OW 247
27489: PUSH
27490: LD_INT 1
27492: DOUBLE
27493: EQUAL
27494: IFTRUE 27498
27496: GO 28076
27498: POP
// begin if GetClass ( i ) = 1 then
27499: LD_VAR 0 6
27503: PPUSH
27504: CALL_OW 257
27508: PUSH
27509: LD_INT 1
27511: EQUAL
27512: IFFALSE 27533
// points := [ 10 , 5 , 3 ] ;
27514: LD_ADDR_VAR 0 9
27518: PUSH
27519: LD_INT 10
27521: PUSH
27522: LD_INT 5
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27533: LD_VAR 0 6
27537: PPUSH
27538: CALL_OW 257
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 4
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: IN
27557: IFFALSE 27578
// points := [ 3 , 2 , 1 ] ;
27559: LD_ADDR_VAR 0 9
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27578: LD_VAR 0 6
27582: PPUSH
27583: CALL_OW 257
27587: PUSH
27588: LD_INT 5
27590: EQUAL
27591: IFFALSE 27612
// points := [ 130 , 5 , 2 ] ;
27593: LD_ADDR_VAR 0 9
27597: PUSH
27598: LD_INT 130
27600: PUSH
27601: LD_INT 5
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27612: LD_VAR 0 6
27616: PPUSH
27617: CALL_OW 257
27621: PUSH
27622: LD_INT 8
27624: EQUAL
27625: IFFALSE 27646
// points := [ 35 , 35 , 30 ] ;
27627: LD_ADDR_VAR 0 9
27631: PUSH
27632: LD_INT 35
27634: PUSH
27635: LD_INT 35
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27646: LD_VAR 0 6
27650: PPUSH
27651: CALL_OW 257
27655: PUSH
27656: LD_INT 9
27658: EQUAL
27659: IFFALSE 27680
// points := [ 20 , 55 , 40 ] ;
27661: LD_ADDR_VAR 0 9
27665: PUSH
27666: LD_INT 20
27668: PUSH
27669: LD_INT 55
27671: PUSH
27672: LD_INT 40
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27680: LD_VAR 0 6
27684: PPUSH
27685: CALL_OW 257
27689: PUSH
27690: LD_INT 12
27692: PUSH
27693: LD_INT 16
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: IN
27700: IFFALSE 27721
// points := [ 5 , 3 , 2 ] ;
27702: LD_ADDR_VAR 0 9
27706: PUSH
27707: LD_INT 5
27709: PUSH
27710: LD_INT 3
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27721: LD_VAR 0 6
27725: PPUSH
27726: CALL_OW 257
27730: PUSH
27731: LD_INT 17
27733: EQUAL
27734: IFFALSE 27755
// points := [ 100 , 50 , 75 ] ;
27736: LD_ADDR_VAR 0 9
27740: PUSH
27741: LD_INT 100
27743: PUSH
27744: LD_INT 50
27746: PUSH
27747: LD_INT 75
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27755: LD_VAR 0 6
27759: PPUSH
27760: CALL_OW 257
27764: PUSH
27765: LD_INT 15
27767: EQUAL
27768: IFFALSE 27789
// points := [ 10 , 5 , 3 ] ;
27770: LD_ADDR_VAR 0 9
27774: PUSH
27775: LD_INT 10
27777: PUSH
27778: LD_INT 5
27780: PUSH
27781: LD_INT 3
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27789: LD_VAR 0 6
27793: PPUSH
27794: CALL_OW 257
27798: PUSH
27799: LD_INT 14
27801: EQUAL
27802: IFFALSE 27823
// points := [ 10 , 0 , 0 ] ;
27804: LD_ADDR_VAR 0 9
27808: PUSH
27809: LD_INT 10
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27823: LD_VAR 0 6
27827: PPUSH
27828: CALL_OW 257
27832: PUSH
27833: LD_INT 11
27835: EQUAL
27836: IFFALSE 27857
// points := [ 30 , 10 , 5 ] ;
27838: LD_ADDR_VAR 0 9
27842: PUSH
27843: LD_INT 30
27845: PUSH
27846: LD_INT 10
27848: PUSH
27849: LD_INT 5
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27857: LD_VAR 0 1
27861: PPUSH
27862: LD_INT 5
27864: PPUSH
27865: CALL_OW 321
27869: PUSH
27870: LD_INT 2
27872: EQUAL
27873: IFFALSE 27890
// bpoints := bpoints * 1.8 ;
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: LD_VAR 0 10
27884: PUSH
27885: LD_REAL  1.80000000000000E+0000
27888: MUL
27889: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27890: LD_VAR 0 6
27894: PPUSH
27895: CALL_OW 257
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 4
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: IN
27918: PUSH
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_INT 51
27926: PPUSH
27927: CALL_OW 321
27931: PUSH
27932: LD_INT 2
27934: EQUAL
27935: AND
27936: IFFALSE 27953
// bpoints := bpoints * 1.2 ;
27938: LD_ADDR_VAR 0 10
27942: PUSH
27943: LD_VAR 0 10
27947: PUSH
27948: LD_REAL  1.20000000000000E+0000
27951: MUL
27952: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27953: LD_VAR 0 6
27957: PPUSH
27958: CALL_OW 257
27962: PUSH
27963: LD_INT 5
27965: PUSH
27966: LD_INT 7
27968: PUSH
27969: LD_INT 9
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: IN
27977: PUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: LD_INT 52
27985: PPUSH
27986: CALL_OW 321
27990: PUSH
27991: LD_INT 2
27993: EQUAL
27994: AND
27995: IFFALSE 28012
// bpoints := bpoints * 1.5 ;
27997: LD_ADDR_VAR 0 10
28001: PUSH
28002: LD_VAR 0 10
28006: PUSH
28007: LD_REAL  1.50000000000000E+0000
28010: MUL
28011: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28012: LD_VAR 0 1
28016: PPUSH
28017: LD_INT 66
28019: PPUSH
28020: CALL_OW 321
28024: PUSH
28025: LD_INT 2
28027: EQUAL
28028: IFFALSE 28045
// bpoints := bpoints * 1.1 ;
28030: LD_ADDR_VAR 0 10
28034: PUSH
28035: LD_VAR 0 10
28039: PUSH
28040: LD_REAL  1.10000000000000E+0000
28043: MUL
28044: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28045: LD_ADDR_VAR 0 10
28049: PUSH
28050: LD_VAR 0 10
28054: PUSH
28055: LD_VAR 0 6
28059: PPUSH
28060: LD_INT 1
28062: PPUSH
28063: CALL_OW 259
28067: PUSH
28068: LD_REAL  1.15000000000000E+0000
28071: MUL
28072: MUL
28073: ST_TO_ADDR
// end ; unit_vehicle :
28074: GO 28898
28076: LD_INT 2
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28886
28084: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28085: LD_VAR 0 6
28089: PPUSH
28090: CALL_OW 264
28094: PUSH
28095: LD_INT 2
28097: PUSH
28098: LD_INT 42
28100: PUSH
28101: LD_INT 24
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: IN
28109: IFFALSE 28130
// points := [ 25 , 5 , 3 ] ;
28111: LD_ADDR_VAR 0 9
28115: PUSH
28116: LD_INT 25
28118: PUSH
28119: LD_INT 5
28121: PUSH
28122: LD_INT 3
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28130: LD_VAR 0 6
28134: PPUSH
28135: CALL_OW 264
28139: PUSH
28140: LD_INT 4
28142: PUSH
28143: LD_INT 43
28145: PUSH
28146: LD_INT 25
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: IN
28154: IFFALSE 28175
// points := [ 40 , 15 , 5 ] ;
28156: LD_ADDR_VAR 0 9
28160: PUSH
28161: LD_INT 40
28163: PUSH
28164: LD_INT 15
28166: PUSH
28167: LD_INT 5
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28175: LD_VAR 0 6
28179: PPUSH
28180: CALL_OW 264
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: LD_INT 23
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: IN
28195: IFFALSE 28216
// points := [ 7 , 25 , 8 ] ;
28197: LD_ADDR_VAR 0 9
28201: PUSH
28202: LD_INT 7
28204: PUSH
28205: LD_INT 25
28207: PUSH
28208: LD_INT 8
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28216: LD_VAR 0 6
28220: PPUSH
28221: CALL_OW 264
28225: PUSH
28226: LD_INT 5
28228: PUSH
28229: LD_INT 27
28231: PUSH
28232: LD_INT 44
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: IN
28240: IFFALSE 28261
// points := [ 14 , 50 , 16 ] ;
28242: LD_ADDR_VAR 0 9
28246: PUSH
28247: LD_INT 14
28249: PUSH
28250: LD_INT 50
28252: PUSH
28253: LD_INT 16
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28261: LD_VAR 0 6
28265: PPUSH
28266: CALL_OW 264
28270: PUSH
28271: LD_INT 6
28273: PUSH
28274: LD_INT 46
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: IN
28281: IFFALSE 28302
// points := [ 32 , 120 , 70 ] ;
28283: LD_ADDR_VAR 0 9
28287: PUSH
28288: LD_INT 32
28290: PUSH
28291: LD_INT 120
28293: PUSH
28294: LD_INT 70
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28302: LD_VAR 0 6
28306: PPUSH
28307: CALL_OW 264
28311: PUSH
28312: LD_INT 7
28314: PUSH
28315: LD_INT 28
28317: PUSH
28318: LD_INT 45
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: IN
28326: IFFALSE 28347
// points := [ 35 , 20 , 45 ] ;
28328: LD_ADDR_VAR 0 9
28332: PUSH
28333: LD_INT 35
28335: PUSH
28336: LD_INT 20
28338: PUSH
28339: LD_INT 45
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28347: LD_VAR 0 6
28351: PPUSH
28352: CALL_OW 264
28356: PUSH
28357: LD_INT 47
28359: PUSH
28360: EMPTY
28361: LIST
28362: IN
28363: IFFALSE 28384
// points := [ 67 , 45 , 75 ] ;
28365: LD_ADDR_VAR 0 9
28369: PUSH
28370: LD_INT 67
28372: PUSH
28373: LD_INT 45
28375: PUSH
28376: LD_INT 75
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28384: LD_VAR 0 6
28388: PPUSH
28389: CALL_OW 264
28393: PUSH
28394: LD_INT 26
28396: PUSH
28397: EMPTY
28398: LIST
28399: IN
28400: IFFALSE 28421
// points := [ 120 , 30 , 80 ] ;
28402: LD_ADDR_VAR 0 9
28406: PUSH
28407: LD_INT 120
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 80
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28421: LD_VAR 0 6
28425: PPUSH
28426: CALL_OW 264
28430: PUSH
28431: LD_INT 22
28433: PUSH
28434: EMPTY
28435: LIST
28436: IN
28437: IFFALSE 28458
// points := [ 40 , 1 , 1 ] ;
28439: LD_ADDR_VAR 0 9
28443: PUSH
28444: LD_INT 40
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28458: LD_VAR 0 6
28462: PPUSH
28463: CALL_OW 264
28467: PUSH
28468: LD_INT 29
28470: PUSH
28471: EMPTY
28472: LIST
28473: IN
28474: IFFALSE 28495
// points := [ 70 , 200 , 400 ] ;
28476: LD_ADDR_VAR 0 9
28480: PUSH
28481: LD_INT 70
28483: PUSH
28484: LD_INT 200
28486: PUSH
28487: LD_INT 400
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28495: LD_VAR 0 6
28499: PPUSH
28500: CALL_OW 264
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: LD_INT 53
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: IN
28515: IFFALSE 28536
// points := [ 40 , 10 , 20 ] ;
28517: LD_ADDR_VAR 0 9
28521: PUSH
28522: LD_INT 40
28524: PUSH
28525: LD_INT 10
28527: PUSH
28528: LD_INT 20
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: LIST
28535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28536: LD_VAR 0 6
28540: PPUSH
28541: CALL_OW 264
28545: PUSH
28546: LD_INT 9
28548: PUSH
28549: EMPTY
28550: LIST
28551: IN
28552: IFFALSE 28573
// points := [ 5 , 70 , 20 ] ;
28554: LD_ADDR_VAR 0 9
28558: PUSH
28559: LD_INT 5
28561: PUSH
28562: LD_INT 70
28564: PUSH
28565: LD_INT 20
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28573: LD_VAR 0 6
28577: PPUSH
28578: CALL_OW 264
28582: PUSH
28583: LD_INT 10
28585: PUSH
28586: EMPTY
28587: LIST
28588: IN
28589: IFFALSE 28610
// points := [ 35 , 110 , 70 ] ;
28591: LD_ADDR_VAR 0 9
28595: PUSH
28596: LD_INT 35
28598: PUSH
28599: LD_INT 110
28601: PUSH
28602: LD_INT 70
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28610: LD_VAR 0 6
28614: PPUSH
28615: CALL_OW 265
28619: PUSH
28620: LD_INT 25
28622: EQUAL
28623: IFFALSE 28644
// points := [ 80 , 65 , 100 ] ;
28625: LD_ADDR_VAR 0 9
28629: PUSH
28630: LD_INT 80
28632: PUSH
28633: LD_INT 65
28635: PUSH
28636: LD_INT 100
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28644: LD_VAR 0 6
28648: PPUSH
28649: CALL_OW 263
28653: PUSH
28654: LD_INT 1
28656: EQUAL
28657: IFFALSE 28692
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28659: LD_ADDR_VAR 0 10
28663: PUSH
28664: LD_VAR 0 10
28668: PUSH
28669: LD_VAR 0 6
28673: PPUSH
28674: CALL_OW 311
28678: PPUSH
28679: LD_INT 3
28681: PPUSH
28682: CALL_OW 259
28686: PUSH
28687: LD_INT 4
28689: MUL
28690: MUL
28691: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28692: LD_VAR 0 6
28696: PPUSH
28697: CALL_OW 263
28701: PUSH
28702: LD_INT 2
28704: EQUAL
28705: IFFALSE 28756
// begin j := IsControledBy ( i ) ;
28707: LD_ADDR_VAR 0 7
28711: PUSH
28712: LD_VAR 0 6
28716: PPUSH
28717: CALL_OW 312
28721: ST_TO_ADDR
// if j then
28722: LD_VAR 0 7
28726: IFFALSE 28756
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28728: LD_ADDR_VAR 0 10
28732: PUSH
28733: LD_VAR 0 10
28737: PUSH
28738: LD_VAR 0 7
28742: PPUSH
28743: LD_INT 3
28745: PPUSH
28746: CALL_OW 259
28750: PUSH
28751: LD_INT 3
28753: MUL
28754: MUL
28755: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28756: LD_VAR 0 6
28760: PPUSH
28761: CALL_OW 264
28765: PUSH
28766: LD_INT 5
28768: PUSH
28769: LD_INT 6
28771: PUSH
28772: LD_INT 46
28774: PUSH
28775: LD_INT 44
28777: PUSH
28778: LD_INT 47
28780: PUSH
28781: LD_INT 45
28783: PUSH
28784: LD_INT 28
28786: PUSH
28787: LD_INT 7
28789: PUSH
28790: LD_INT 27
28792: PUSH
28793: LD_INT 29
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: IN
28808: PUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_INT 52
28816: PPUSH
28817: CALL_OW 321
28821: PUSH
28822: LD_INT 2
28824: EQUAL
28825: AND
28826: IFFALSE 28843
// bpoints := bpoints * 1.2 ;
28828: LD_ADDR_VAR 0 10
28832: PUSH
28833: LD_VAR 0 10
28837: PUSH
28838: LD_REAL  1.20000000000000E+0000
28841: MUL
28842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28843: LD_VAR 0 6
28847: PPUSH
28848: CALL_OW 264
28852: PUSH
28853: LD_INT 6
28855: PUSH
28856: LD_INT 46
28858: PUSH
28859: LD_INT 47
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: IN
28867: IFFALSE 28884
// bpoints := bpoints * 1.2 ;
28869: LD_ADDR_VAR 0 10
28873: PUSH
28874: LD_VAR 0 10
28878: PUSH
28879: LD_REAL  1.20000000000000E+0000
28882: MUL
28883: ST_TO_ADDR
// end ; unit_building :
28884: GO 28898
28886: LD_INT 3
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28897
28894: POP
// ; end ;
28895: GO 28898
28897: POP
// for j = 1 to 3 do
28898: LD_ADDR_VAR 0 7
28902: PUSH
28903: DOUBLE
28904: LD_INT 1
28906: DEC
28907: ST_TO_ADDR
28908: LD_INT 3
28910: PUSH
28911: FOR_TO
28912: IFFALSE 28965
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_VAR 0 5
28923: PPUSH
28924: LD_VAR 0 7
28928: PPUSH
28929: LD_VAR 0 5
28933: PUSH
28934: LD_VAR 0 7
28938: ARRAY
28939: PUSH
28940: LD_VAR 0 9
28944: PUSH
28945: LD_VAR 0 7
28949: ARRAY
28950: PUSH
28951: LD_VAR 0 10
28955: MUL
28956: PLUS
28957: PPUSH
28958: CALL_OW 1
28962: ST_TO_ADDR
28963: GO 28911
28965: POP
28966: POP
// end ;
28967: GO 27450
28969: POP
28970: POP
// result := Replace ( result , 4 , tmp ) ;
28971: LD_ADDR_VAR 0 5
28975: PUSH
28976: LD_VAR 0 5
28980: PPUSH
28981: LD_INT 4
28983: PPUSH
28984: LD_VAR 0 8
28988: PPUSH
28989: CALL_OW 1
28993: ST_TO_ADDR
// end ;
28994: LD_VAR 0 5
28998: RET
// export function DangerAtRange ( unit , range ) ; begin
28999: LD_INT 0
29001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 255
29016: PPUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 250
29026: PPUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: CALL_OW 251
29036: PPUSH
29037: LD_VAR 0 2
29041: PPUSH
29042: CALL 27302 0 4
29046: ST_TO_ADDR
// end ;
29047: LD_VAR 0 3
29051: RET
// export function DangerInArea ( side , area ) ; begin
29052: LD_INT 0
29054: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_VAR 0 2
29064: PPUSH
29065: LD_INT 81
29067: PUSH
29068: LD_VAR 0 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 70
29081: ST_TO_ADDR
// end ;
29082: LD_VAR 0 3
29086: RET
// export function IsExtension ( b ) ; begin
29087: LD_INT 0
29089: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_VAR 0 1
29099: PUSH
29100: LD_INT 23
29102: PUSH
29103: LD_INT 20
29105: PUSH
29106: LD_INT 22
29108: PUSH
29109: LD_INT 17
29111: PUSH
29112: LD_INT 24
29114: PUSH
29115: LD_INT 21
29117: PUSH
29118: LD_INT 19
29120: PUSH
29121: LD_INT 16
29123: PUSH
29124: LD_INT 25
29126: PUSH
29127: LD_INT 18
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: IN
29142: ST_TO_ADDR
// end ;
29143: LD_VAR 0 2
29147: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
29148: LD_INT 0
29150: PPUSH
29151: PPUSH
29152: PPUSH
// result := [ ] ;
29153: LD_ADDR_VAR 0 2
29157: PUSH
29158: EMPTY
29159: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: LD_INT 21
29167: PUSH
29168: LD_INT 3
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 3
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29239
// for i in tmp do
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_VAR 0 3
29198: PUSH
29199: FOR_IN
29200: IFFALSE 29237
// if GetBase ( i ) = base then
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 274
29211: PUSH
29212: LD_VAR 0 1
29216: EQUAL
29217: IFFALSE 29235
// result := result ^ i ;
29219: LD_ADDR_VAR 0 2
29223: PUSH
29224: LD_VAR 0 2
29228: PUSH
29229: LD_VAR 0 4
29233: ADD
29234: ST_TO_ADDR
29235: GO 29199
29237: POP
29238: POP
// end ;
29239: LD_VAR 0 2
29243: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
// if BuildingStatus ( b ) = bs_build then
29248: LD_VAR 0 2
29252: PPUSH
29253: CALL_OW 461
29257: PUSH
29258: LD_INT 1
29260: EQUAL
29261: IFFALSE 29321
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: LD_STRING h
29270: PUSH
29271: LD_VAR 0 2
29275: PPUSH
29276: CALL_OW 250
29280: PUSH
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 251
29290: PUSH
29291: LD_VAR 0 2
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: PPUSH
29317: CALL_OW 446
// end ;
29321: LD_VAR 0 3
29325: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29326: LD_INT 0
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29334: LD_VAR 0 1
29338: NOT
29339: PUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 263
29349: PUSH
29350: LD_INT 2
29352: EQUAL
29353: NOT
29354: OR
29355: IFFALSE 29359
// exit ;
29357: GO 29675
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29359: LD_ADDR_VAR 0 6
29363: PUSH
29364: LD_INT 22
29366: PUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 255
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: LD_INT 30
29386: PUSH
29387: LD_INT 36
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 34
29396: PUSH
29397: LD_INT 31
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PPUSH
29413: CALL_OW 69
29417: ST_TO_ADDR
// if not tmp then
29418: LD_VAR 0 6
29422: NOT
29423: IFFALSE 29427
// exit ;
29425: GO 29675
// result := [ ] ;
29427: LD_ADDR_VAR 0 2
29431: PUSH
29432: EMPTY
29433: ST_TO_ADDR
// for i in tmp do
29434: LD_ADDR_VAR 0 3
29438: PUSH
29439: LD_VAR 0 6
29443: PUSH
29444: FOR_IN
29445: IFFALSE 29516
// begin t := UnitsInside ( i ) ;
29447: LD_ADDR_VAR 0 4
29451: PUSH
29452: LD_VAR 0 3
29456: PPUSH
29457: CALL_OW 313
29461: ST_TO_ADDR
// if t then
29462: LD_VAR 0 4
29466: IFFALSE 29514
// for j in t do
29468: LD_ADDR_VAR 0 7
29472: PUSH
29473: LD_VAR 0 4
29477: PUSH
29478: FOR_IN
29479: IFFALSE 29512
// result := Insert ( result , result + 1 , j ) ;
29481: LD_ADDR_VAR 0 2
29485: PUSH
29486: LD_VAR 0 2
29490: PPUSH
29491: LD_VAR 0 2
29495: PUSH
29496: LD_INT 1
29498: PLUS
29499: PPUSH
29500: LD_VAR 0 7
29504: PPUSH
29505: CALL_OW 2
29509: ST_TO_ADDR
29510: GO 29478
29512: POP
29513: POP
// end ;
29514: GO 29444
29516: POP
29517: POP
// if not result then
29518: LD_VAR 0 2
29522: NOT
29523: IFFALSE 29527
// exit ;
29525: GO 29675
// mech := result [ 1 ] ;
29527: LD_ADDR_VAR 0 5
29531: PUSH
29532: LD_VAR 0 2
29536: PUSH
29537: LD_INT 1
29539: ARRAY
29540: ST_TO_ADDR
// if result > 1 then
29541: LD_VAR 0 2
29545: PUSH
29546: LD_INT 1
29548: GREATER
29549: IFFALSE 29661
// for i = 2 to result do
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: DOUBLE
29557: LD_INT 2
29559: DEC
29560: ST_TO_ADDR
29561: LD_VAR 0 2
29565: PUSH
29566: FOR_TO
29567: IFFALSE 29659
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29569: LD_ADDR_VAR 0 4
29573: PUSH
29574: LD_VAR 0 2
29578: PUSH
29579: LD_VAR 0 3
29583: ARRAY
29584: PPUSH
29585: LD_INT 3
29587: PPUSH
29588: CALL_OW 259
29592: PUSH
29593: LD_VAR 0 2
29597: PUSH
29598: LD_VAR 0 3
29602: ARRAY
29603: PPUSH
29604: CALL_OW 432
29608: MINUS
29609: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29610: LD_VAR 0 4
29614: PUSH
29615: LD_VAR 0 5
29619: PPUSH
29620: LD_INT 3
29622: PPUSH
29623: CALL_OW 259
29627: PUSH
29628: LD_VAR 0 5
29632: PPUSH
29633: CALL_OW 432
29637: MINUS
29638: GREATEREQUAL
29639: IFFALSE 29657
// mech := result [ i ] ;
29641: LD_ADDR_VAR 0 5
29645: PUSH
29646: LD_VAR 0 2
29650: PUSH
29651: LD_VAR 0 3
29655: ARRAY
29656: ST_TO_ADDR
// end ;
29657: GO 29566
29659: POP
29660: POP
// ComLinkTo ( vehicle , mech ) ;
29661: LD_VAR 0 1
29665: PPUSH
29666: LD_VAR 0 5
29670: PPUSH
29671: CALL_OW 135
// end ;
29675: LD_VAR 0 2
29679: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29680: LD_INT 0
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
// result := [ ] ;
29695: LD_ADDR_VAR 0 6
29699: PUSH
29700: EMPTY
29701: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 266
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: IN
29722: NOT
29723: IFFALSE 29727
// exit ;
29725: GO 31246
// if name then
29727: LD_VAR 0 2
29731: IFFALSE 29747
// SetBName ( base_dep , name ) ;
29733: LD_VAR 0 1
29737: PPUSH
29738: LD_VAR 0 2
29742: PPUSH
29743: CALL_OW 500
// base := GetBase ( base_dep ) ;
29747: LD_ADDR_VAR 0 14
29751: PUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 274
29761: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29762: LD_ADDR_VAR 0 15
29766: PUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 255
29776: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29777: LD_ADDR_VAR 0 16
29781: PUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: CALL_OW 248
29791: ST_TO_ADDR
// if sources then
29792: LD_VAR 0 4
29796: IFFALSE 29843
// for i = 1 to 3 do
29798: LD_ADDR_VAR 0 7
29802: PUSH
29803: DOUBLE
29804: LD_INT 1
29806: DEC
29807: ST_TO_ADDR
29808: LD_INT 3
29810: PUSH
29811: FOR_TO
29812: IFFALSE 29841
// AddResourceType ( base , i , sources [ i ] ) ;
29814: LD_VAR 0 14
29818: PPUSH
29819: LD_VAR 0 7
29823: PPUSH
29824: LD_VAR 0 4
29828: PUSH
29829: LD_VAR 0 7
29833: ARRAY
29834: PPUSH
29835: CALL_OW 276
29839: GO 29811
29841: POP
29842: POP
// buildings := GetBaseBuildings ( base ) ;
29843: LD_ADDR_VAR 0 17
29847: PUSH
29848: LD_VAR 0 14
29852: PPUSH
29853: CALL 29148 0 1
29857: ST_TO_ADDR
// InitHc ;
29858: CALL_OW 19
// InitUc ;
29862: CALL_OW 18
// uc_side := side ;
29866: LD_ADDR_OWVAR 20
29870: PUSH
29871: LD_VAR 0 15
29875: ST_TO_ADDR
// uc_nation := nation ;
29876: LD_ADDR_OWVAR 21
29880: PUSH
29881: LD_VAR 0 16
29885: ST_TO_ADDR
// if buildings then
29886: LD_VAR 0 17
29890: IFFALSE 31105
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29892: LD_VAR 0 17
29896: PPUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 30
29902: PUSH
29903: LD_INT 32
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 30
29912: PUSH
29913: LD_INT 33
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 72
29929: IFFALSE 30012
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29931: LD_ADDR_VAR 0 7
29935: PUSH
29936: LD_VAR 0 17
29940: PPUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 30
29946: PUSH
29947: LD_INT 32
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 30
29956: PUSH
29957: LD_INT 33
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 72
29973: PUSH
29974: FOR_IN
29975: IFFALSE 30010
// begin if not GetBWeapon ( i ) then
29977: LD_VAR 0 7
29981: PPUSH
29982: CALL_OW 269
29986: NOT
29987: IFFALSE 30008
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
29989: LD_VAR 0 7
29993: PPUSH
29994: LD_VAR 0 7
29998: PPUSH
29999: CALL 31251 0 1
30003: PPUSH
30004: CALL_OW 431
// end ;
30008: GO 29974
30010: POP
30011: POP
// end ; for i = 1 to personel do
30012: LD_ADDR_VAR 0 7
30016: PUSH
30017: DOUBLE
30018: LD_INT 1
30020: DEC
30021: ST_TO_ADDR
30022: LD_VAR 0 5
30026: PUSH
30027: FOR_TO
30028: IFFALSE 31085
// begin if i > 4 then
30030: LD_VAR 0 7
30034: PUSH
30035: LD_INT 4
30037: GREATER
30038: IFFALSE 30042
// break ;
30040: GO 31085
// case i of 1 :
30042: LD_VAR 0 7
30046: PUSH
30047: LD_INT 1
30049: DOUBLE
30050: EQUAL
30051: IFTRUE 30055
30053: GO 30128
30055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30056: LD_ADDR_VAR 0 11
30060: PUSH
30061: LD_VAR 0 17
30065: PPUSH
30066: LD_INT 22
30068: PUSH
30069: LD_VAR 0 15
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 30
30083: PUSH
30084: LD_INT 32
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 30
30093: PUSH
30094: LD_INT 4
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 30
30103: PUSH
30104: LD_INT 5
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PPUSH
30121: CALL_OW 72
30125: ST_TO_ADDR
30126: GO 30350
30128: LD_INT 2
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30198
30136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30137: LD_ADDR_VAR 0 11
30141: PUSH
30142: LD_VAR 0 17
30146: PPUSH
30147: LD_INT 22
30149: PUSH
30150: LD_VAR 0 15
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 72
30195: ST_TO_ADDR
30196: GO 30350
30198: LD_INT 3
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30268
30206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30207: LD_ADDR_VAR 0 11
30211: PUSH
30212: LD_VAR 0 17
30216: PPUSH
30217: LD_INT 22
30219: PUSH
30220: LD_VAR 0 15
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PPUSH
30261: CALL_OW 72
30265: ST_TO_ADDR
30266: GO 30350
30268: LD_INT 4
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30349
30276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30277: LD_ADDR_VAR 0 11
30281: PUSH
30282: LD_VAR 0 17
30286: PPUSH
30287: LD_INT 22
30289: PUSH
30290: LD_VAR 0 15
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 6
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 30
30314: PUSH
30315: LD_INT 7
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 30
30324: PUSH
30325: LD_INT 8
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PPUSH
30342: CALL_OW 72
30346: ST_TO_ADDR
30347: GO 30350
30349: POP
// if i = 1 then
30350: LD_VAR 0 7
30354: PUSH
30355: LD_INT 1
30357: EQUAL
30358: IFFALSE 30469
// begin tmp := [ ] ;
30360: LD_ADDR_VAR 0 18
30364: PUSH
30365: EMPTY
30366: ST_TO_ADDR
// for j in f do
30367: LD_ADDR_VAR 0 8
30371: PUSH
30372: LD_VAR 0 11
30376: PUSH
30377: FOR_IN
30378: IFFALSE 30451
// if GetBType ( j ) = b_bunker then
30380: LD_VAR 0 8
30384: PPUSH
30385: CALL_OW 266
30389: PUSH
30390: LD_INT 32
30392: EQUAL
30393: IFFALSE 30420
// tmp := Insert ( tmp , 1 , j ) else
30395: LD_ADDR_VAR 0 18
30399: PUSH
30400: LD_VAR 0 18
30404: PPUSH
30405: LD_INT 1
30407: PPUSH
30408: LD_VAR 0 8
30412: PPUSH
30413: CALL_OW 2
30417: ST_TO_ADDR
30418: GO 30449
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30420: LD_ADDR_VAR 0 18
30424: PUSH
30425: LD_VAR 0 18
30429: PPUSH
30430: LD_VAR 0 18
30434: PUSH
30435: LD_INT 1
30437: PLUS
30438: PPUSH
30439: LD_VAR 0 8
30443: PPUSH
30444: CALL_OW 2
30448: ST_TO_ADDR
30449: GO 30377
30451: POP
30452: POP
// if tmp then
30453: LD_VAR 0 18
30457: IFFALSE 30469
// f := tmp ;
30459: LD_ADDR_VAR 0 11
30463: PUSH
30464: LD_VAR 0 18
30468: ST_TO_ADDR
// end ; x := personel [ i ] ;
30469: LD_ADDR_VAR 0 12
30473: PUSH
30474: LD_VAR 0 5
30478: PUSH
30479: LD_VAR 0 7
30483: ARRAY
30484: ST_TO_ADDR
// if x = - 1 then
30485: LD_VAR 0 12
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: EQUAL
30494: IFFALSE 30703
// begin for j in f do
30496: LD_ADDR_VAR 0 8
30500: PUSH
30501: LD_VAR 0 11
30505: PUSH
30506: FOR_IN
30507: IFFALSE 30699
// repeat InitHc ;
30509: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30513: LD_VAR 0 8
30517: PPUSH
30518: CALL_OW 266
30522: PUSH
30523: LD_INT 5
30525: EQUAL
30526: IFFALSE 30596
// begin if UnitsInside ( j ) < 3 then
30528: LD_VAR 0 8
30532: PPUSH
30533: CALL_OW 313
30537: PUSH
30538: LD_INT 3
30540: LESS
30541: IFFALSE 30577
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30543: LD_INT 0
30545: PPUSH
30546: LD_INT 5
30548: PUSH
30549: LD_INT 8
30551: PUSH
30552: LD_INT 9
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: PUSH
30560: LD_VAR 0 16
30564: ARRAY
30565: PPUSH
30566: LD_VAR 0 3
30570: PPUSH
30571: CALL_OW 380
30575: GO 30594
// PrepareHuman ( false , i , skill ) ;
30577: LD_INT 0
30579: PPUSH
30580: LD_VAR 0 7
30584: PPUSH
30585: LD_VAR 0 3
30589: PPUSH
30590: CALL_OW 380
// end else
30594: GO 30613
// PrepareHuman ( false , i , skill ) ;
30596: LD_INT 0
30598: PPUSH
30599: LD_VAR 0 7
30603: PPUSH
30604: LD_VAR 0 3
30608: PPUSH
30609: CALL_OW 380
// un := CreateHuman ;
30613: LD_ADDR_VAR 0 13
30617: PUSH
30618: CALL_OW 44
30622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30623: LD_ADDR_VAR 0 6
30627: PUSH
30628: LD_VAR 0 6
30632: PPUSH
30633: LD_INT 1
30635: PPUSH
30636: LD_VAR 0 13
30640: PPUSH
30641: CALL_OW 2
30645: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30646: LD_VAR 0 13
30650: PPUSH
30651: LD_VAR 0 8
30655: PPUSH
30656: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30660: LD_VAR 0 8
30664: PPUSH
30665: CALL_OW 313
30669: PUSH
30670: LD_INT 6
30672: EQUAL
30673: PUSH
30674: LD_VAR 0 8
30678: PPUSH
30679: CALL_OW 266
30683: PUSH
30684: LD_INT 32
30686: PUSH
30687: LD_INT 31
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: IN
30694: OR
30695: IFFALSE 30509
30697: GO 30506
30699: POP
30700: POP
// end else
30701: GO 31083
// for j = 1 to x do
30703: LD_ADDR_VAR 0 8
30707: PUSH
30708: DOUBLE
30709: LD_INT 1
30711: DEC
30712: ST_TO_ADDR
30713: LD_VAR 0 12
30717: PUSH
30718: FOR_TO
30719: IFFALSE 31081
// begin InitHc ;
30721: CALL_OW 19
// if not f then
30725: LD_VAR 0 11
30729: NOT
30730: IFFALSE 30819
// begin PrepareHuman ( false , i , skill ) ;
30732: LD_INT 0
30734: PPUSH
30735: LD_VAR 0 7
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: CALL_OW 380
// un := CreateHuman ;
30749: LD_ADDR_VAR 0 13
30753: PUSH
30754: CALL_OW 44
30758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30759: LD_ADDR_VAR 0 6
30763: PUSH
30764: LD_VAR 0 6
30768: PPUSH
30769: LD_INT 1
30771: PPUSH
30772: LD_VAR 0 13
30776: PPUSH
30777: CALL_OW 2
30781: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30782: LD_VAR 0 13
30786: PPUSH
30787: LD_VAR 0 1
30791: PPUSH
30792: CALL_OW 250
30796: PPUSH
30797: LD_VAR 0 1
30801: PPUSH
30802: CALL_OW 251
30806: PPUSH
30807: LD_INT 10
30809: PPUSH
30810: LD_INT 0
30812: PPUSH
30813: CALL_OW 50
// continue ;
30817: GO 30718
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30819: LD_VAR 0 11
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 313
30832: PUSH
30833: LD_VAR 0 11
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: CALL_OW 266
30846: PUSH
30847: LD_INT 32
30849: PUSH
30850: LD_INT 31
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: IN
30857: AND
30858: PUSH
30859: LD_VAR 0 11
30863: PUSH
30864: LD_INT 1
30866: ARRAY
30867: PPUSH
30868: CALL_OW 313
30872: PUSH
30873: LD_INT 6
30875: EQUAL
30876: OR
30877: IFFALSE 30897
// f := Delete ( f , 1 ) ;
30879: LD_ADDR_VAR 0 11
30883: PUSH
30884: LD_VAR 0 11
30888: PPUSH
30889: LD_INT 1
30891: PPUSH
30892: CALL_OW 3
30896: ST_TO_ADDR
// if not f then
30897: LD_VAR 0 11
30901: NOT
30902: IFFALSE 30920
// begin x := x + 2 ;
30904: LD_ADDR_VAR 0 12
30908: PUSH
30909: LD_VAR 0 12
30913: PUSH
30914: LD_INT 2
30916: PLUS
30917: ST_TO_ADDR
// continue ;
30918: GO 30718
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30920: LD_VAR 0 11
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PPUSH
30929: CALL_OW 266
30933: PUSH
30934: LD_INT 5
30936: EQUAL
30937: IFFALSE 31011
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30939: LD_VAR 0 11
30943: PUSH
30944: LD_INT 1
30946: ARRAY
30947: PPUSH
30948: CALL_OW 313
30952: PUSH
30953: LD_INT 3
30955: LESS
30956: IFFALSE 30992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30958: LD_INT 0
30960: PPUSH
30961: LD_INT 5
30963: PUSH
30964: LD_INT 8
30966: PUSH
30967: LD_INT 9
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: PUSH
30975: LD_VAR 0 16
30979: ARRAY
30980: PPUSH
30981: LD_VAR 0 3
30985: PPUSH
30986: CALL_OW 380
30990: GO 31009
// PrepareHuman ( false , i , skill ) ;
30992: LD_INT 0
30994: PPUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: CALL_OW 380
// end else
31009: GO 31028
// PrepareHuman ( false , i , skill ) ;
31011: LD_INT 0
31013: PPUSH
31014: LD_VAR 0 7
31018: PPUSH
31019: LD_VAR 0 3
31023: PPUSH
31024: CALL_OW 380
// un := CreateHuman ;
31028: LD_ADDR_VAR 0 13
31032: PUSH
31033: CALL_OW 44
31037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31038: LD_ADDR_VAR 0 6
31042: PUSH
31043: LD_VAR 0 6
31047: PPUSH
31048: LD_INT 1
31050: PPUSH
31051: LD_VAR 0 13
31055: PPUSH
31056: CALL_OW 2
31060: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31061: LD_VAR 0 13
31065: PPUSH
31066: LD_VAR 0 11
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: CALL_OW 52
// end ;
31079: GO 30718
31081: POP
31082: POP
// end ;
31083: GO 30027
31085: POP
31086: POP
// result := result ^ buildings ;
31087: LD_ADDR_VAR 0 6
31091: PUSH
31092: LD_VAR 0 6
31096: PUSH
31097: LD_VAR 0 17
31101: ADD
31102: ST_TO_ADDR
// end else
31103: GO 31246
// begin for i = 1 to personel do
31105: LD_ADDR_VAR 0 7
31109: PUSH
31110: DOUBLE
31111: LD_INT 1
31113: DEC
31114: ST_TO_ADDR
31115: LD_VAR 0 5
31119: PUSH
31120: FOR_TO
31121: IFFALSE 31244
// begin if i > 4 then
31123: LD_VAR 0 7
31127: PUSH
31128: LD_INT 4
31130: GREATER
31131: IFFALSE 31135
// break ;
31133: GO 31244
// x := personel [ i ] ;
31135: LD_ADDR_VAR 0 12
31139: PUSH
31140: LD_VAR 0 5
31144: PUSH
31145: LD_VAR 0 7
31149: ARRAY
31150: ST_TO_ADDR
// if x = - 1 then
31151: LD_VAR 0 12
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: EQUAL
31160: IFFALSE 31164
// continue ;
31162: GO 31120
// PrepareHuman ( false , i , skill ) ;
31164: LD_INT 0
31166: PPUSH
31167: LD_VAR 0 7
31171: PPUSH
31172: LD_VAR 0 3
31176: PPUSH
31177: CALL_OW 380
// un := CreateHuman ;
31181: LD_ADDR_VAR 0 13
31185: PUSH
31186: CALL_OW 44
31190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31191: LD_VAR 0 13
31195: PPUSH
31196: LD_VAR 0 1
31200: PPUSH
31201: CALL_OW 250
31205: PPUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: CALL_OW 251
31215: PPUSH
31216: LD_INT 10
31218: PPUSH
31219: LD_INT 0
31221: PPUSH
31222: CALL_OW 50
// result := result ^ un ;
31226: LD_ADDR_VAR 0 6
31230: PUSH
31231: LD_VAR 0 6
31235: PUSH
31236: LD_VAR 0 13
31240: ADD
31241: ST_TO_ADDR
// end ;
31242: GO 31120
31244: POP
31245: POP
// end ; end ;
31246: LD_VAR 0 6
31250: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
// result := false ;
31269: LD_ADDR_VAR 0 2
31273: PUSH
31274: LD_INT 0
31276: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31277: LD_VAR 0 1
31281: NOT
31282: PUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL_OW 266
31292: PUSH
31293: LD_INT 32
31295: PUSH
31296: LD_INT 33
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: IN
31303: NOT
31304: OR
31305: IFFALSE 31309
// exit ;
31307: GO 32440
// nat := GetNation ( tower ) ;
31309: LD_ADDR_VAR 0 11
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 248
31323: ST_TO_ADDR
// side := GetSide ( tower ) ;
31324: LD_ADDR_VAR 0 15
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 255
31338: ST_TO_ADDR
// x := GetX ( tower ) ;
31339: LD_ADDR_VAR 0 9
31343: PUSH
31344: LD_VAR 0 1
31348: PPUSH
31349: CALL_OW 250
31353: ST_TO_ADDR
// y := GetY ( tower ) ;
31354: LD_ADDR_VAR 0 10
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 251
31368: ST_TO_ADDR
// if not x or not y then
31369: LD_VAR 0 9
31373: NOT
31374: PUSH
31375: LD_VAR 0 10
31379: NOT
31380: OR
31381: IFFALSE 31385
// exit ;
31383: GO 32440
// weapon := 0 ;
31385: LD_ADDR_VAR 0 17
31389: PUSH
31390: LD_INT 0
31392: ST_TO_ADDR
// fac_list := [ ] ;
31393: LD_ADDR_VAR 0 16
31397: PUSH
31398: EMPTY
31399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
31400: LD_ADDR_VAR 0 5
31404: PUSH
31405: LD_VAR 0 1
31409: PPUSH
31410: CALL_OW 274
31414: PPUSH
31415: CALL 29148 0 1
31419: PPUSH
31420: LD_INT 30
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PPUSH
31430: CALL_OW 72
31434: ST_TO_ADDR
// if not factories then
31435: LD_VAR 0 5
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 32440
// for i in factories do
31444: LD_ADDR_VAR 0 7
31448: PUSH
31449: LD_VAR 0 5
31453: PUSH
31454: FOR_IN
31455: IFFALSE 31480
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31457: LD_ADDR_VAR 0 16
31461: PUSH
31462: LD_VAR 0 16
31466: PUSH
31467: LD_VAR 0 7
31471: PPUSH
31472: CALL_OW 478
31476: UNION
31477: ST_TO_ADDR
31478: GO 31454
31480: POP
31481: POP
// if not fac_list then
31482: LD_VAR 0 16
31486: NOT
31487: IFFALSE 31491
// exit ;
31489: GO 32440
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31491: LD_ADDR_VAR 0 4
31495: PUSH
31496: LD_INT 4
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: LD_INT 9
31504: PUSH
31505: LD_INT 10
31507: PUSH
31508: LD_INT 6
31510: PUSH
31511: LD_INT 7
31513: PUSH
31514: LD_INT 11
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 27
31528: PUSH
31529: LD_INT 28
31531: PUSH
31532: LD_INT 26
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 43
31546: PUSH
31547: LD_INT 44
31549: PUSH
31550: LD_INT 46
31552: PUSH
31553: LD_INT 45
31555: PUSH
31556: LD_INT 47
31558: PUSH
31559: LD_INT 49
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: PUSH
31575: LD_VAR 0 11
31579: ARRAY
31580: ST_TO_ADDR
// for i in list do
31581: LD_ADDR_VAR 0 7
31585: PUSH
31586: LD_VAR 0 4
31590: PUSH
31591: FOR_IN
31592: IFFALSE 31625
// if not i in fac_list then
31594: LD_VAR 0 7
31598: PUSH
31599: LD_VAR 0 16
31603: IN
31604: NOT
31605: IFFALSE 31623
// list := list diff i ;
31607: LD_ADDR_VAR 0 4
31611: PUSH
31612: LD_VAR 0 4
31616: PUSH
31617: LD_VAR 0 7
31621: DIFF
31622: ST_TO_ADDR
31623: GO 31591
31625: POP
31626: POP
// if not list then
31627: LD_VAR 0 4
31631: NOT
31632: IFFALSE 31636
// exit ;
31634: GO 32440
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31636: LD_VAR 0 11
31640: PUSH
31641: LD_INT 3
31643: EQUAL
31644: PUSH
31645: LD_INT 49
31647: PUSH
31648: LD_VAR 0 4
31652: IN
31653: AND
31654: PUSH
31655: LD_INT 31
31657: PPUSH
31658: LD_VAR 0 15
31662: PPUSH
31663: CALL_OW 321
31667: PUSH
31668: LD_INT 2
31670: EQUAL
31671: AND
31672: IFFALSE 31732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31674: LD_INT 22
31676: PUSH
31677: LD_VAR 0 15
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 35
31688: PUSH
31689: LD_INT 49
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 91
31698: PUSH
31699: LD_VAR 0 1
31703: PUSH
31704: LD_INT 10
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: PPUSH
31717: CALL_OW 69
31721: NOT
31722: IFFALSE 31732
// weapon := ru_time_lapser ;
31724: LD_ADDR_VAR 0 17
31728: PUSH
31729: LD_INT 49
31731: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31732: LD_VAR 0 11
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: IN
31747: PUSH
31748: LD_INT 11
31750: PUSH
31751: LD_VAR 0 4
31755: IN
31756: PUSH
31757: LD_INT 30
31759: PUSH
31760: LD_VAR 0 4
31764: IN
31765: OR
31766: AND
31767: PUSH
31768: LD_INT 6
31770: PPUSH
31771: LD_VAR 0 15
31775: PPUSH
31776: CALL_OW 321
31780: PUSH
31781: LD_INT 2
31783: EQUAL
31784: AND
31785: IFFALSE 31950
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31787: LD_INT 22
31789: PUSH
31790: LD_VAR 0 15
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 35
31804: PUSH
31805: LD_INT 11
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 35
31814: PUSH
31815: LD_INT 30
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 91
31829: PUSH
31830: LD_VAR 0 1
31834: PUSH
31835: LD_INT 18
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: PPUSH
31848: CALL_OW 69
31852: NOT
31853: PUSH
31854: LD_INT 22
31856: PUSH
31857: LD_VAR 0 15
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 32
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 30
31881: PUSH
31882: LD_INT 33
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 91
31896: PUSH
31897: LD_VAR 0 1
31901: PUSH
31902: LD_INT 12
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: PUSH
31915: EMPTY
31916: LIST
31917: PPUSH
31918: CALL_OW 69
31922: PUSH
31923: LD_INT 2
31925: GREATER
31926: AND
31927: IFFALSE 31950
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31929: LD_ADDR_VAR 0 17
31933: PUSH
31934: LD_INT 11
31936: PUSH
31937: LD_INT 30
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_VAR 0 11
31948: ARRAY
31949: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31950: LD_VAR 0 17
31954: NOT
31955: PUSH
31956: LD_INT 40
31958: PPUSH
31959: LD_VAR 0 15
31963: PPUSH
31964: CALL_OW 321
31968: PUSH
31969: LD_INT 2
31971: EQUAL
31972: AND
31973: PUSH
31974: LD_INT 7
31976: PUSH
31977: LD_VAR 0 4
31981: IN
31982: PUSH
31983: LD_INT 28
31985: PUSH
31986: LD_VAR 0 4
31990: IN
31991: OR
31992: PUSH
31993: LD_INT 45
31995: PUSH
31996: LD_VAR 0 4
32000: IN
32001: OR
32002: AND
32003: IFFALSE 32257
// begin hex := GetHexInfo ( x , y ) ;
32005: LD_ADDR_VAR 0 3
32009: PUSH
32010: LD_VAR 0 9
32014: PPUSH
32015: LD_VAR 0 10
32019: PPUSH
32020: CALL_OW 546
32024: ST_TO_ADDR
// if hex [ 1 ] then
32025: LD_VAR 0 3
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: IFFALSE 32037
// exit ;
32035: GO 32440
// height := hex [ 2 ] ;
32037: LD_ADDR_VAR 0 14
32041: PUSH
32042: LD_VAR 0 3
32046: PUSH
32047: LD_INT 2
32049: ARRAY
32050: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32051: LD_ADDR_VAR 0 13
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 5
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: ST_TO_ADDR
// for i in tmp do
32074: LD_ADDR_VAR 0 7
32078: PUSH
32079: LD_VAR 0 13
32083: PUSH
32084: FOR_IN
32085: IFFALSE 32255
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32087: LD_ADDR_VAR 0 8
32091: PUSH
32092: LD_VAR 0 9
32096: PPUSH
32097: LD_VAR 0 7
32101: PPUSH
32102: LD_INT 5
32104: PPUSH
32105: CALL_OW 272
32109: PUSH
32110: LD_VAR 0 10
32114: PPUSH
32115: LD_VAR 0 7
32119: PPUSH
32120: LD_INT 5
32122: PPUSH
32123: CALL_OW 273
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32132: LD_VAR 0 8
32136: PUSH
32137: LD_INT 1
32139: ARRAY
32140: PPUSH
32141: LD_VAR 0 8
32145: PUSH
32146: LD_INT 2
32148: ARRAY
32149: PPUSH
32150: CALL_OW 488
32154: IFFALSE 32253
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_VAR 0 8
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 8
32174: PUSH
32175: LD_INT 2
32177: ARRAY
32178: PPUSH
32179: CALL_OW 546
32183: ST_TO_ADDR
// if hex [ 1 ] then
32184: LD_VAR 0 3
32188: PUSH
32189: LD_INT 1
32191: ARRAY
32192: IFFALSE 32196
// continue ;
32194: GO 32084
// h := hex [ 2 ] ;
32196: LD_ADDR_VAR 0 12
32200: PUSH
32201: LD_VAR 0 3
32205: PUSH
32206: LD_INT 2
32208: ARRAY
32209: ST_TO_ADDR
// if h + 7 < height then
32210: LD_VAR 0 12
32214: PUSH
32215: LD_INT 7
32217: PLUS
32218: PUSH
32219: LD_VAR 0 14
32223: LESS
32224: IFFALSE 32253
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32226: LD_ADDR_VAR 0 17
32230: PUSH
32231: LD_INT 7
32233: PUSH
32234: LD_INT 28
32236: PUSH
32237: LD_INT 45
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: LD_VAR 0 11
32249: ARRAY
32250: ST_TO_ADDR
// break ;
32251: GO 32255
// end ; end ; end ;
32253: GO 32084
32255: POP
32256: POP
// end ; if not weapon then
32257: LD_VAR 0 17
32261: NOT
32262: IFFALSE 32322
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32264: LD_ADDR_VAR 0 4
32268: PUSH
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 11
32276: PUSH
32277: LD_INT 30
32279: PUSH
32280: LD_INT 49
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: DIFF
32288: ST_TO_ADDR
// if not list then
32289: LD_VAR 0 4
32293: NOT
32294: IFFALSE 32298
// exit ;
32296: GO 32440
// weapon := list [ rand ( 1 , list ) ] ;
32298: LD_ADDR_VAR 0 17
32302: PUSH
32303: LD_VAR 0 4
32307: PUSH
32308: LD_INT 1
32310: PPUSH
32311: LD_VAR 0 4
32315: PPUSH
32316: CALL_OW 12
32320: ARRAY
32321: ST_TO_ADDR
// end ; if weapon then
32322: LD_VAR 0 17
32326: IFFALSE 32440
// begin tmp := CostOfWeapon ( weapon ) ;
32328: LD_ADDR_VAR 0 13
32332: PUSH
32333: LD_VAR 0 17
32337: PPUSH
32338: CALL_OW 451
32342: ST_TO_ADDR
// j := GetBase ( tower ) ;
32343: LD_ADDR_VAR 0 8
32347: PUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 274
32357: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32358: LD_VAR 0 8
32362: PPUSH
32363: LD_INT 1
32365: PPUSH
32366: CALL_OW 275
32370: PUSH
32371: LD_VAR 0 13
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: GREATEREQUAL
32380: PUSH
32381: LD_VAR 0 8
32385: PPUSH
32386: LD_INT 2
32388: PPUSH
32389: CALL_OW 275
32393: PUSH
32394: LD_VAR 0 13
32398: PUSH
32399: LD_INT 2
32401: ARRAY
32402: GREATEREQUAL
32403: AND
32404: PUSH
32405: LD_VAR 0 8
32409: PPUSH
32410: LD_INT 3
32412: PPUSH
32413: CALL_OW 275
32417: PUSH
32418: LD_VAR 0 13
32422: PUSH
32423: LD_INT 3
32425: ARRAY
32426: GREATEREQUAL
32427: AND
32428: IFFALSE 32440
// result := weapon ;
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_VAR 0 17
32439: ST_TO_ADDR
// end ; end ;
32440: LD_VAR 0 2
32444: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32445: LD_INT 0
32447: PPUSH
32448: PPUSH
// result := true ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 1
32456: ST_TO_ADDR
// if array1 = array2 then
32457: LD_VAR 0 1
32461: PUSH
32462: LD_VAR 0 2
32466: EQUAL
32467: IFFALSE 32527
// begin for i = 1 to array1 do
32469: LD_ADDR_VAR 0 4
32473: PUSH
32474: DOUBLE
32475: LD_INT 1
32477: DEC
32478: ST_TO_ADDR
32479: LD_VAR 0 1
32483: PUSH
32484: FOR_TO
32485: IFFALSE 32523
// if array1 [ i ] <> array2 [ i ] then
32487: LD_VAR 0 1
32491: PUSH
32492: LD_VAR 0 4
32496: ARRAY
32497: PUSH
32498: LD_VAR 0 2
32502: PUSH
32503: LD_VAR 0 4
32507: ARRAY
32508: NONEQUAL
32509: IFFALSE 32521
// begin result := false ;
32511: LD_ADDR_VAR 0 3
32515: PUSH
32516: LD_INT 0
32518: ST_TO_ADDR
// break ;
32519: GO 32523
// end ;
32521: GO 32484
32523: POP
32524: POP
// end else
32525: GO 32535
// result := false ;
32527: LD_ADDR_VAR 0 3
32531: PUSH
32532: LD_INT 0
32534: ST_TO_ADDR
// end ;
32535: LD_VAR 0 3
32539: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32540: LD_INT 0
32542: PPUSH
32543: PPUSH
32544: PPUSH
// pom := GetBase ( fac ) ;
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 274
32559: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32560: LD_ADDR_VAR 0 4
32564: PUSH
32565: LD_VAR 0 2
32569: PUSH
32570: LD_INT 1
32572: ARRAY
32573: PPUSH
32574: LD_VAR 0 2
32578: PUSH
32579: LD_INT 2
32581: ARRAY
32582: PPUSH
32583: LD_VAR 0 2
32587: PUSH
32588: LD_INT 3
32590: ARRAY
32591: PPUSH
32592: LD_VAR 0 2
32596: PUSH
32597: LD_INT 4
32599: ARRAY
32600: PPUSH
32601: CALL_OW 449
32605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32606: LD_ADDR_VAR 0 3
32610: PUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: LD_INT 1
32618: PPUSH
32619: CALL_OW 275
32623: PUSH
32624: LD_VAR 0 4
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: GREATEREQUAL
32633: PUSH
32634: LD_VAR 0 5
32638: PPUSH
32639: LD_INT 2
32641: PPUSH
32642: CALL_OW 275
32646: PUSH
32647: LD_VAR 0 4
32651: PUSH
32652: LD_INT 2
32654: ARRAY
32655: GREATEREQUAL
32656: AND
32657: PUSH
32658: LD_VAR 0 5
32662: PPUSH
32663: LD_INT 3
32665: PPUSH
32666: CALL_OW 275
32670: PUSH
32671: LD_VAR 0 4
32675: PUSH
32676: LD_INT 3
32678: ARRAY
32679: GREATEREQUAL
32680: AND
32681: ST_TO_ADDR
// end ;
32682: LD_VAR 0 3
32686: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32687: LD_INT 0
32689: PPUSH
32690: PPUSH
32691: PPUSH
32692: PPUSH
// pom := GetBase ( building ) ;
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 274
32707: ST_TO_ADDR
// if not pom then
32708: LD_VAR 0 3
32712: NOT
32713: IFFALSE 32717
// exit ;
32715: GO 32887
// btype := GetBType ( building ) ;
32717: LD_ADDR_VAR 0 5
32721: PUSH
32722: LD_VAR 0 1
32726: PPUSH
32727: CALL_OW 266
32731: ST_TO_ADDR
// if btype = b_armoury then
32732: LD_VAR 0 5
32736: PUSH
32737: LD_INT 4
32739: EQUAL
32740: IFFALSE 32750
// btype := b_barracks ;
32742: LD_ADDR_VAR 0 5
32746: PUSH
32747: LD_INT 5
32749: ST_TO_ADDR
// if btype = b_depot then
32750: LD_VAR 0 5
32754: PUSH
32755: LD_INT 0
32757: EQUAL
32758: IFFALSE 32768
// btype := b_warehouse ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_INT 1
32767: ST_TO_ADDR
// if btype = b_workshop then
32768: LD_VAR 0 5
32772: PUSH
32773: LD_INT 2
32775: EQUAL
32776: IFFALSE 32786
// btype := b_factory ;
32778: LD_ADDR_VAR 0 5
32782: PUSH
32783: LD_INT 3
32785: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_VAR 0 5
32795: PPUSH
32796: LD_VAR 0 1
32800: PPUSH
32801: CALL_OW 248
32805: PPUSH
32806: CALL_OW 450
32810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32811: LD_ADDR_VAR 0 2
32815: PUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_INT 1
32823: PPUSH
32824: CALL_OW 275
32828: PUSH
32829: LD_VAR 0 4
32833: PUSH
32834: LD_INT 1
32836: ARRAY
32837: GREATEREQUAL
32838: PUSH
32839: LD_VAR 0 3
32843: PPUSH
32844: LD_INT 2
32846: PPUSH
32847: CALL_OW 275
32851: PUSH
32852: LD_VAR 0 4
32856: PUSH
32857: LD_INT 2
32859: ARRAY
32860: GREATEREQUAL
32861: AND
32862: PUSH
32863: LD_VAR 0 3
32867: PPUSH
32868: LD_INT 3
32870: PPUSH
32871: CALL_OW 275
32875: PUSH
32876: LD_VAR 0 4
32880: PUSH
32881: LD_INT 3
32883: ARRAY
32884: GREATEREQUAL
32885: AND
32886: ST_TO_ADDR
// end ;
32887: LD_VAR 0 2
32891: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32892: LD_INT 0
32894: PPUSH
32895: PPUSH
32896: PPUSH
// pom := GetBase ( building ) ;
32897: LD_ADDR_VAR 0 4
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 274
32911: ST_TO_ADDR
// if not pom then
32912: LD_VAR 0 4
32916: NOT
32917: IFFALSE 32921
// exit ;
32919: GO 33022
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32921: LD_ADDR_VAR 0 5
32925: PUSH
32926: LD_VAR 0 2
32930: PPUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: CALL_OW 248
32940: PPUSH
32941: CALL_OW 450
32945: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_VAR 0 4
32955: PPUSH
32956: LD_INT 1
32958: PPUSH
32959: CALL_OW 275
32963: PUSH
32964: LD_VAR 0 5
32968: PUSH
32969: LD_INT 1
32971: ARRAY
32972: GREATEREQUAL
32973: PUSH
32974: LD_VAR 0 4
32978: PPUSH
32979: LD_INT 2
32981: PPUSH
32982: CALL_OW 275
32986: PUSH
32987: LD_VAR 0 5
32991: PUSH
32992: LD_INT 2
32994: ARRAY
32995: GREATEREQUAL
32996: AND
32997: PUSH
32998: LD_VAR 0 4
33002: PPUSH
33003: LD_INT 3
33005: PPUSH
33006: CALL_OW 275
33010: PUSH
33011: LD_VAR 0 5
33015: PUSH
33016: LD_INT 3
33018: ARRAY
33019: GREATEREQUAL
33020: AND
33021: ST_TO_ADDR
// end ;
33022: LD_VAR 0 3
33026: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33027: LD_INT 0
33029: PPUSH
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
// result := false ;
33039: LD_ADDR_VAR 0 6
33043: PUSH
33044: LD_INT 0
33046: ST_TO_ADDR
// if not base or not btype or not x or not y then
33047: LD_VAR 0 1
33051: NOT
33052: PUSH
33053: LD_VAR 0 2
33057: NOT
33058: OR
33059: PUSH
33060: LD_VAR 0 3
33064: NOT
33065: OR
33066: PUSH
33067: LD_VAR 0 4
33071: NOT
33072: OR
33073: IFFALSE 33077
// exit ;
33075: GO 33591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33077: LD_ADDR_VAR 0 12
33081: PUSH
33082: LD_VAR 0 2
33086: PPUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: LD_VAR 0 4
33096: PPUSH
33097: LD_VAR 0 5
33101: PPUSH
33102: LD_VAR 0 1
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PPUSH
33111: CALL_OW 248
33115: PPUSH
33116: LD_INT 0
33118: PPUSH
33119: CALL 34420 0 6
33123: ST_TO_ADDR
// if not hexes then
33124: LD_VAR 0 12
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 33591
// for i = 1 to hexes do
33133: LD_ADDR_VAR 0 7
33137: PUSH
33138: DOUBLE
33139: LD_INT 1
33141: DEC
33142: ST_TO_ADDR
33143: LD_VAR 0 12
33147: PUSH
33148: FOR_TO
33149: IFFALSE 33589
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33151: LD_ADDR_VAR 0 11
33155: PUSH
33156: LD_VAR 0 12
33160: PUSH
33161: LD_VAR 0 7
33165: ARRAY
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: PPUSH
33171: LD_VAR 0 12
33175: PUSH
33176: LD_VAR 0 7
33180: ARRAY
33181: PUSH
33182: LD_INT 2
33184: ARRAY
33185: PPUSH
33186: CALL_OW 428
33190: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
33191: LD_VAR 0 11
33195: NOT
33196: PUSH
33197: LD_VAR 0 11
33201: PPUSH
33202: CALL_OW 247
33206: PUSH
33207: LD_INT 3
33209: EQUAL
33210: OR
33211: IFFALSE 33215
// continue ;
33213: GO 33148
// result := true ;
33215: LD_ADDR_VAR 0 6
33219: PUSH
33220: LD_INT 1
33222: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33223: LD_ADDR_VAR 0 15
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_VAR 0 11
33235: PPUSH
33236: CALL_OW 255
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 30
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 30
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PPUSH
33277: CALL_OW 69
33281: ST_TO_ADDR
// if dep then
33282: LD_VAR 0 15
33286: IFFALSE 33422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33288: LD_ADDR_VAR 0 14
33292: PUSH
33293: LD_VAR 0 15
33297: PUSH
33298: LD_INT 1
33300: ARRAY
33301: PPUSH
33302: CALL_OW 250
33306: PPUSH
33307: LD_VAR 0 15
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PPUSH
33316: CALL_OW 254
33320: PPUSH
33321: LD_INT 5
33323: PPUSH
33324: CALL_OW 272
33328: PUSH
33329: LD_VAR 0 15
33333: PUSH
33334: LD_INT 1
33336: ARRAY
33337: PPUSH
33338: CALL_OW 251
33342: PPUSH
33343: LD_VAR 0 15
33347: PUSH
33348: LD_INT 1
33350: ARRAY
33351: PPUSH
33352: CALL_OW 254
33356: PPUSH
33357: LD_INT 5
33359: PPUSH
33360: CALL_OW 273
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33369: LD_VAR 0 14
33373: PUSH
33374: LD_INT 1
33376: ARRAY
33377: PPUSH
33378: LD_VAR 0 14
33382: PUSH
33383: LD_INT 2
33385: ARRAY
33386: PPUSH
33387: CALL_OW 488
33391: IFFALSE 33422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33393: LD_VAR 0 11
33397: PPUSH
33398: LD_VAR 0 14
33402: PUSH
33403: LD_INT 1
33405: ARRAY
33406: PPUSH
33407: LD_VAR 0 14
33411: PUSH
33412: LD_INT 2
33414: ARRAY
33415: PPUSH
33416: CALL_OW 111
// continue ;
33420: GO 33148
// end ; end ; r := GetDir ( tmp ) ;
33422: LD_ADDR_VAR 0 13
33426: PUSH
33427: LD_VAR 0 11
33431: PPUSH
33432: CALL_OW 254
33436: ST_TO_ADDR
// if r = 5 then
33437: LD_VAR 0 13
33441: PUSH
33442: LD_INT 5
33444: EQUAL
33445: IFFALSE 33455
// r := 0 ;
33447: LD_ADDR_VAR 0 13
33451: PUSH
33452: LD_INT 0
33454: ST_TO_ADDR
// for j = r to 5 do
33455: LD_ADDR_VAR 0 8
33459: PUSH
33460: DOUBLE
33461: LD_VAR 0 13
33465: DEC
33466: ST_TO_ADDR
33467: LD_INT 5
33469: PUSH
33470: FOR_TO
33471: IFFALSE 33585
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33473: LD_ADDR_VAR 0 9
33477: PUSH
33478: LD_VAR 0 11
33482: PPUSH
33483: CALL_OW 250
33487: PPUSH
33488: LD_VAR 0 8
33492: PPUSH
33493: LD_INT 2
33495: PPUSH
33496: CALL_OW 272
33500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33501: LD_ADDR_VAR 0 10
33505: PUSH
33506: LD_VAR 0 11
33510: PPUSH
33511: CALL_OW 251
33515: PPUSH
33516: LD_VAR 0 8
33520: PPUSH
33521: LD_INT 2
33523: PPUSH
33524: CALL_OW 273
33528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33529: LD_VAR 0 9
33533: PPUSH
33534: LD_VAR 0 10
33538: PPUSH
33539: CALL_OW 488
33543: PUSH
33544: LD_VAR 0 9
33548: PPUSH
33549: LD_VAR 0 10
33553: PPUSH
33554: CALL_OW 428
33558: NOT
33559: AND
33560: IFFALSE 33583
// begin ComMoveXY ( tmp , _x , _y ) ;
33562: LD_VAR 0 11
33566: PPUSH
33567: LD_VAR 0 9
33571: PPUSH
33572: LD_VAR 0 10
33576: PPUSH
33577: CALL_OW 111
// break ;
33581: GO 33585
// end ; end ;
33583: GO 33470
33585: POP
33586: POP
// end ;
33587: GO 33148
33589: POP
33590: POP
// end ;
33591: LD_VAR 0 6
33595: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
33596: LD_INT 0
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
// result := false ;
33607: LD_ADDR_VAR 0 6
33611: PUSH
33612: LD_INT 0
33614: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33615: LD_VAR 0 1
33619: NOT
33620: PUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: CALL_OW 266
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: IN
33641: NOT
33642: OR
33643: PUSH
33644: LD_VAR 0 2
33648: NOT
33649: OR
33650: PUSH
33651: LD_VAR 0 5
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: LD_INT 4
33670: PUSH
33671: LD_INT 5
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: IN
33682: NOT
33683: OR
33684: PUSH
33685: LD_VAR 0 3
33689: PPUSH
33690: LD_VAR 0 4
33694: PPUSH
33695: CALL_OW 488
33699: NOT
33700: OR
33701: IFFALSE 33705
// exit ;
33703: GO 34415
// pom := GetBase ( bdepot ) ;
33705: LD_ADDR_VAR 0 9
33709: PUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 274
33719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
33720: LD_ADDR_VAR 0 10
33724: PUSH
33725: LD_VAR 0 2
33729: PPUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: CALL_OW 248
33739: PPUSH
33740: CALL_OW 450
33744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33745: LD_VAR 0 9
33749: PPUSH
33750: LD_INT 1
33752: PPUSH
33753: CALL_OW 275
33757: PUSH
33758: LD_VAR 0 10
33762: PUSH
33763: LD_INT 1
33765: ARRAY
33766: GREATEREQUAL
33767: PUSH
33768: LD_VAR 0 9
33772: PPUSH
33773: LD_INT 2
33775: PPUSH
33776: CALL_OW 275
33780: PUSH
33781: LD_VAR 0 10
33785: PUSH
33786: LD_INT 2
33788: ARRAY
33789: GREATEREQUAL
33790: AND
33791: PUSH
33792: LD_VAR 0 9
33796: PPUSH
33797: LD_INT 3
33799: PPUSH
33800: CALL_OW 275
33804: PUSH
33805: LD_VAR 0 10
33809: PUSH
33810: LD_INT 3
33812: ARRAY
33813: GREATEREQUAL
33814: AND
33815: NOT
33816: IFFALSE 33820
// exit ;
33818: GO 34415
// if GetBType ( bdepot ) = b_depot then
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 266
33829: PUSH
33830: LD_INT 0
33832: EQUAL
33833: IFFALSE 33845
// dist := 28 else
33835: LD_ADDR_VAR 0 13
33839: PUSH
33840: LD_INT 28
33842: ST_TO_ADDR
33843: GO 33853
// dist := 36 ;
33845: LD_ADDR_VAR 0 13
33849: PUSH
33850: LD_INT 36
33852: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
33853: LD_VAR 0 1
33857: PPUSH
33858: LD_VAR 0 3
33862: PPUSH
33863: LD_VAR 0 4
33867: PPUSH
33868: CALL_OW 297
33872: PUSH
33873: LD_VAR 0 13
33877: GREATER
33878: IFFALSE 33882
// exit ;
33880: GO 34415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
33882: LD_ADDR_VAR 0 11
33886: PUSH
33887: LD_VAR 0 2
33891: PPUSH
33892: LD_VAR 0 3
33896: PPUSH
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_VAR 0 5
33906: PPUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: CALL_OW 248
33916: PPUSH
33917: LD_INT 0
33919: PPUSH
33920: CALL 34420 0 6
33924: ST_TO_ADDR
// if not hexes then
33925: LD_VAR 0 11
33929: NOT
33930: IFFALSE 33934
// exit ;
33932: GO 34415
// hex := GetHexInfo ( x , y ) ;
33934: LD_ADDR_VAR 0 14
33938: PUSH
33939: LD_VAR 0 3
33943: PPUSH
33944: LD_VAR 0 4
33948: PPUSH
33949: CALL_OW 546
33953: ST_TO_ADDR
// if hex [ 1 ] then
33954: LD_VAR 0 14
33958: PUSH
33959: LD_INT 1
33961: ARRAY
33962: IFFALSE 33966
// exit ;
33964: GO 34415
// height := hex [ 2 ] ;
33966: LD_ADDR_VAR 0 12
33970: PUSH
33971: LD_VAR 0 14
33975: PUSH
33976: LD_INT 2
33978: ARRAY
33979: ST_TO_ADDR
// for i = 1 to hexes do
33980: LD_ADDR_VAR 0 7
33984: PUSH
33985: DOUBLE
33986: LD_INT 1
33988: DEC
33989: ST_TO_ADDR
33990: LD_VAR 0 11
33994: PUSH
33995: FOR_TO
33996: IFFALSE 34324
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33998: LD_VAR 0 11
34002: PUSH
34003: LD_VAR 0 7
34007: ARRAY
34008: PUSH
34009: LD_INT 1
34011: ARRAY
34012: PPUSH
34013: LD_VAR 0 11
34017: PUSH
34018: LD_VAR 0 7
34022: ARRAY
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: CALL_OW 488
34032: NOT
34033: IFFALSE 34037
// continue ;
34035: GO 33995
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34037: LD_ADDR_VAR 0 8
34041: PUSH
34042: LD_VAR 0 11
34046: PUSH
34047: LD_VAR 0 7
34051: ARRAY
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: LD_VAR 0 11
34061: PUSH
34062: LD_VAR 0 7
34066: ARRAY
34067: PUSH
34068: LD_INT 2
34070: ARRAY
34071: PPUSH
34072: CALL_OW 546
34076: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34077: LD_VAR 0 8
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: PUSH
34086: LD_VAR 0 8
34090: PUSH
34091: LD_INT 2
34093: ARRAY
34094: PUSH
34095: LD_VAR 0 12
34099: PUSH
34100: LD_INT 2
34102: PLUS
34103: GREATER
34104: OR
34105: PUSH
34106: LD_VAR 0 8
34110: PUSH
34111: LD_INT 2
34113: ARRAY
34114: PUSH
34115: LD_VAR 0 12
34119: PUSH
34120: LD_INT 2
34122: MINUS
34123: LESS
34124: OR
34125: PUSH
34126: LD_VAR 0 8
34130: PUSH
34131: LD_INT 3
34133: ARRAY
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 8
34140: PUSH
34141: LD_INT 9
34143: PUSH
34144: LD_INT 10
34146: PUSH
34147: LD_INT 11
34149: PUSH
34150: LD_INT 12
34152: PUSH
34153: LD_INT 13
34155: PUSH
34156: LD_INT 16
34158: PUSH
34159: LD_INT 17
34161: PUSH
34162: LD_INT 18
34164: PUSH
34165: LD_INT 19
34167: PUSH
34168: LD_INT 20
34170: PUSH
34171: LD_INT 21
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: IN
34189: NOT
34190: OR
34191: PUSH
34192: LD_VAR 0 8
34196: PUSH
34197: LD_INT 5
34199: ARRAY
34200: NOT
34201: OR
34202: PUSH
34203: LD_VAR 0 8
34207: PUSH
34208: LD_INT 6
34210: ARRAY
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: LD_INT 7
34220: PUSH
34221: LD_INT 9
34223: PUSH
34224: LD_INT 10
34226: PUSH
34227: LD_INT 11
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: IN
34238: NOT
34239: OR
34240: PUSH
34241: LD_VAR 0 11
34245: PUSH
34246: LD_VAR 0 7
34250: ARRAY
34251: PUSH
34252: LD_INT 1
34254: ARRAY
34255: PPUSH
34256: LD_VAR 0 11
34260: PUSH
34261: LD_VAR 0 7
34265: ARRAY
34266: PUSH
34267: LD_INT 2
34269: ARRAY
34270: PPUSH
34271: CALL_OW 428
34275: PUSH
34276: LD_INT 0
34278: GREATER
34279: OR
34280: PUSH
34281: LD_VAR 0 11
34285: PUSH
34286: LD_VAR 0 7
34290: ARRAY
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: PPUSH
34296: LD_VAR 0 11
34300: PUSH
34301: LD_VAR 0 7
34305: ARRAY
34306: PUSH
34307: LD_INT 2
34309: ARRAY
34310: PPUSH
34311: CALL_OW 351
34315: OR
34316: IFFALSE 34322
// exit ;
34318: POP
34319: POP
34320: GO 34415
// end ;
34322: GO 33995
34324: POP
34325: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
34326: LD_VAR 0 1
34330: PPUSH
34331: CALL_OW 255
34335: PPUSH
34336: LD_VAR 0 3
34340: PPUSH
34341: LD_VAR 0 4
34345: PPUSH
34346: LD_INT 20
34348: PPUSH
34349: CALL 27302 0 4
34353: PUSH
34354: LD_INT 4
34356: ARRAY
34357: IFFALSE 34361
// exit ;
34359: GO 34415
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
34361: LD_VAR 0 2
34365: PUSH
34366: LD_INT 29
34368: PUSH
34369: LD_INT 30
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: IN
34376: PUSH
34377: LD_VAR 0 3
34381: PPUSH
34382: LD_VAR 0 4
34386: PPUSH
34387: LD_VAR 0 1
34391: PPUSH
34392: CALL_OW 255
34396: PPUSH
34397: CALL_OW 440
34401: NOT
34402: AND
34403: IFFALSE 34407
// exit ;
34405: GO 34415
// result := true ;
34407: LD_ADDR_VAR 0 6
34411: PUSH
34412: LD_INT 1
34414: ST_TO_ADDR
// end ;
34415: LD_VAR 0 6
34419: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
// result = [ ] ;
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: EMPTY
34486: ST_TO_ADDR
// temp_list = [ ] ;
34487: LD_ADDR_VAR 0 9
34491: PUSH
34492: EMPTY
34493: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34494: LD_VAR 0 4
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: IN
34525: NOT
34526: PUSH
34527: LD_VAR 0 1
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: IN
34542: PUSH
34543: LD_VAR 0 5
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: IN
34562: NOT
34563: AND
34564: OR
34565: IFFALSE 34569
// exit ;
34567: GO 52954
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34569: LD_VAR 0 1
34573: PUSH
34574: LD_INT 6
34576: PUSH
34577: LD_INT 7
34579: PUSH
34580: LD_INT 8
34582: PUSH
34583: LD_INT 13
34585: PUSH
34586: LD_INT 12
34588: PUSH
34589: LD_INT 15
34591: PUSH
34592: LD_INT 11
34594: PUSH
34595: LD_INT 14
34597: PUSH
34598: LD_INT 10
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: IN
34612: IFFALSE 34622
// btype = b_lab ;
34614: LD_ADDR_VAR 0 1
34618: PUSH
34619: LD_INT 6
34621: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34622: LD_VAR 0 6
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: IN
34641: NOT
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: LD_INT 6
34662: PUSH
34663: LD_INT 36
34665: PUSH
34666: LD_INT 4
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: LD_INT 31
34674: PUSH
34675: LD_INT 32
34677: PUSH
34678: LD_INT 33
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: IN
34694: NOT
34695: PUSH
34696: LD_VAR 0 6
34700: PUSH
34701: LD_INT 1
34703: EQUAL
34704: AND
34705: OR
34706: PUSH
34707: LD_VAR 0 1
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: IN
34722: NOT
34723: PUSH
34724: LD_VAR 0 6
34728: PUSH
34729: LD_INT 2
34731: EQUAL
34732: AND
34733: OR
34734: IFFALSE 34744
// mode = 0 ;
34736: LD_ADDR_VAR 0 6
34740: PUSH
34741: LD_INT 0
34743: ST_TO_ADDR
// case mode of 0 :
34744: LD_VAR 0 6
34748: PUSH
34749: LD_INT 0
34751: DOUBLE
34752: EQUAL
34753: IFTRUE 34757
34755: GO 46210
34757: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34758: LD_ADDR_VAR 0 11
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 2
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 2
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34951: LD_ADDR_VAR 0 12
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 3
35108: NEG
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: NEG
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35147: LD_ADDR_VAR 0 13
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 3
35318: NEG
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35346: LD_ADDR_VAR 0 14
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 3
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35542: LD_ADDR_VAR 0 15
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: NEG
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35735: LD_ADDR_VAR 0 16
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35928: LD_ADDR_VAR 0 17
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: NEG
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36158: LD_ADDR_VAR 0 18
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: NEG
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36388: LD_ADDR_VAR 0 19
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: NEG
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36618: LD_ADDR_VAR 0 20
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: LD_INT 2
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36848: LD_ADDR_VAR 0 21
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37078: LD_ADDR_VAR 0 22
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 2
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37308: LD_ADDR_VAR 0 23
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: NEG
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: LD_INT 3
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37588: LD_ADDR_VAR 0 24
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37864: LD_ADDR_VAR 0 25
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38138: LD_ADDR_VAR 0 26
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38414: LD_ADDR_VAR 0 27
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 3
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38694: LD_ADDR_VAR 0 28
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38976: LD_ADDR_VAR 0 29
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39255: LD_ADDR_VAR 0 30
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39533: LD_ADDR_VAR 0 31
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: NEG
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39811: LD_ADDR_VAR 0 32
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 3
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40089: LD_ADDR_VAR 0 33
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 3
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40368: LD_ADDR_VAR 0 34
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 3
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40648: LD_ADDR_VAR 0 35
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40760: LD_ADDR_VAR 0 36
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40872: LD_ADDR_VAR 0 37
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40984: LD_ADDR_VAR 0 38
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41096: LD_ADDR_VAR 0 39
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41208: LD_ADDR_VAR 0 40
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41320: LD_ADDR_VAR 0 41
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 3
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: NEG
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41670: LD_ADDR_VAR 0 42
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 3
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: NEG
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42020: LD_ADDR_VAR 0 43
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 3
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 3
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 3
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: NEG
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42368: LD_ADDR_VAR 0 44
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 3
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 3
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 3
42677: NEG
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42718: LD_ADDR_VAR 0 45
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 3
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 3
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 3
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 3
43027: NEG
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43068: LD_ADDR_VAR 0 46
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: NEG
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43416: LD_ADDR_VAR 0 47
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43567: LD_ADDR_VAR 0 48
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43714: LD_ADDR_VAR 0 49
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43858: LD_ADDR_VAR 0 50
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44002: LD_ADDR_VAR 0 51
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44149: LD_ADDR_VAR 0 52
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44300: LD_ADDR_VAR 0 53
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44530: LD_ADDR_VAR 0 54
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44760: LD_ADDR_VAR 0 55
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44990: LD_ADDR_VAR 0 56
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45220: LD_ADDR_VAR 0 57
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45450: LD_ADDR_VAR 0 58
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45680: LD_ADDR_VAR 0 59
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45768: LD_ADDR_VAR 0 60
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45856: LD_ADDR_VAR 0 61
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45944: LD_ADDR_VAR 0 62
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46032: LD_ADDR_VAR 0 63
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46120: LD_ADDR_VAR 0 64
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// end ; 1 :
46208: GO 52105
46210: LD_INT 1
46212: DOUBLE
46213: EQUAL
46214: IFTRUE 46218
46216: GO 48841
46218: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46219: LD_ADDR_VAR 0 11
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46263: LD_ADDR_VAR 0 12
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46304: LD_ADDR_VAR 0 13
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46344: LD_ADDR_VAR 0 14
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46385: LD_ADDR_VAR 0 15
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46429: LD_ADDR_VAR 0 16
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46475: LD_ADDR_VAR 0 17
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46519: LD_ADDR_VAR 0 18
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46560: LD_ADDR_VAR 0 19
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46600: LD_ADDR_VAR 0 20
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46641: LD_ADDR_VAR 0 21
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46685: LD_ADDR_VAR 0 22
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 3
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46731: LD_ADDR_VAR 0 23
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46775: LD_ADDR_VAR 0 24
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46816: LD_ADDR_VAR 0 25
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 4
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: LD_INT 4
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46856: LD_ADDR_VAR 0 26
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 4
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46897: LD_ADDR_VAR 0 27
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 4
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46941: LD_ADDR_VAR 0 28
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: LD_INT 4
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 4
46972: NEG
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46987: LD_ADDR_VAR 0 29
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 4
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 4
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 5
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 5
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 4
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 6
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 6
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 5
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47142: LD_ADDR_VAR 0 30
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 4
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 4
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 5
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 5
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 5
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 6
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 6
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47285: LD_ADDR_VAR 0 31
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 4
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 4
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 4
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 5
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 5
47362: PUSH
47363: LD_INT 5
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: PUSH
47373: LD_INT 5
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 6
47382: PUSH
47383: LD_INT 5
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 6
47392: PUSH
47393: LD_INT 6
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: LD_INT 6
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47424: LD_ADDR_VAR 0 32
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 4
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 4
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 5
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 5
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 4
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 6
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 6
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47567: LD_ADDR_VAR 0 33
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 4
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 4
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 4
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 5
47653: NEG
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 5
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 5
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 6
47687: NEG
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 6
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47722: LD_ADDR_VAR 0 34
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: NEG
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: LD_INT 4
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 4
47777: NEG
47778: PUSH
47779: LD_INT 3
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 4
47789: NEG
47790: PUSH
47791: LD_INT 4
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 4
47801: NEG
47802: PUSH
47803: LD_INT 5
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 5
47813: NEG
47814: PUSH
47815: LD_INT 4
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 5
47825: NEG
47826: PUSH
47827: LD_INT 5
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 5
47837: NEG
47838: PUSH
47839: LD_INT 6
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 6
47849: NEG
47850: PUSH
47851: LD_INT 5
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 6
47861: NEG
47862: PUSH
47863: LD_INT 6
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47885: LD_ADDR_VAR 0 41
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47929: LD_ADDR_VAR 0 42
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47970: LD_ADDR_VAR 0 43
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48010: LD_ADDR_VAR 0 44
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48051: LD_ADDR_VAR 0 45
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 46
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48141: LD_ADDR_VAR 0 47
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48174: LD_ADDR_VAR 0 48
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48205: LD_ADDR_VAR 0 49
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48234: LD_ADDR_VAR 0 50
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48263: LD_ADDR_VAR 0 51
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48294: LD_ADDR_VAR 0 52
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48327: LD_ADDR_VAR 0 53
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48371: LD_ADDR_VAR 0 54
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 3
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48412: LD_ADDR_VAR 0 55
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48452: LD_ADDR_VAR 0 56
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48493: LD_ADDR_VAR 0 57
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48537: LD_ADDR_VAR 0 58
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48583: LD_ADDR_VAR 0 59
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48627: LD_ADDR_VAR 0 60
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48668: LD_ADDR_VAR 0 61
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48708: LD_ADDR_VAR 0 62
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48749: LD_ADDR_VAR 0 63
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48793: LD_ADDR_VAR 0 64
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// end ; 2 :
48839: GO 52105
48841: LD_INT 2
48843: DOUBLE
48844: EQUAL
48845: IFTRUE 48849
48847: GO 52104
48849: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48850: LD_ADDR_VAR 0 29
48854: PUSH
48855: LD_INT 4
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 4
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 5
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 5
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 3
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 5
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 4
48980: PUSH
48981: LD_INT 4
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 4
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 4
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 4
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 4
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 4
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 5
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 5
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 5
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 4
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 4
49235: NEG
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 4
49247: NEG
49248: PUSH
49249: LD_INT 5
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: LD_INT 4
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: NEG
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 5
49295: NEG
49296: PUSH
49297: LD_INT 4
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 5
49307: NEG
49308: PUSH
49309: LD_INT 5
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 5
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 5
49331: NEG
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49388: LD_ADDR_VAR 0 30
49392: PUSH
49393: LD_INT 4
49395: PUSH
49396: LD_INT 4
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 4
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: LD_INT 4
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 5
49425: PUSH
49426: LD_INT 5
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 4
49435: PUSH
49436: LD_INT 5
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 4
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 5
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: LD_INT 5
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 3
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 4
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 4
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 4
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 4
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 4
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 4
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 5
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 5
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 5
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: LD_INT 4
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 4
49740: NEG
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 4
49752: NEG
49753: PUSH
49754: LD_INT 4
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 4
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 4
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 5
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 4
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 4
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 5
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: LD_INT 5
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49935: LD_ADDR_VAR 0 31
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 4
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 5
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 5
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 4
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 4
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 4
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 4
50149: NEG
50150: PUSH
50151: LD_INT 5
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: LD_INT 4
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 4
50185: NEG
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 5
50197: NEG
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 5
50209: NEG
50210: PUSH
50211: LD_INT 5
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 5
50233: NEG
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 4
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 4
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 4
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 4
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 5
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 5
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 4
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 5
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50485: LD_ADDR_VAR 0 32
50489: PUSH
50490: LD_INT 4
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 5
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 5
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 5
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: LD_INT 4
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 4
50666: NEG
50667: PUSH
50668: LD_INT 4
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 4
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 4
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 5
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 4
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 4
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 5
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 5
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 4
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 4
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 4
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 5
50927: PUSH
50928: LD_INT 5
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: LD_INT 5
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: LD_INT 4
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 3
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 5
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51032: LD_ADDR_VAR 0 33
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 4
51051: NEG
51052: PUSH
51053: LD_INT 5
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: LD_INT 4
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: NEG
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 5
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 5
51111: NEG
51112: PUSH
51113: LD_INT 5
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 5
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 5
51135: NEG
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 3
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: LD_INT 4
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 4
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 5
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 5
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 4
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: LD_INT 4
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 4
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 4
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 4
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 4
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 5
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 5
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 4
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 5
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51570: LD_ADDR_VAR 0 34
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 5
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 4
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 4
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 5
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: LD_INT 5
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 4
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: LD_INT 5
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 4
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 5
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 4
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 4
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 4
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 4
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 5
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 5
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 5
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// end ; end ;
52102: GO 52105
52104: POP
// case btype of b_depot , b_warehouse :
52105: LD_VAR 0 1
52109: PUSH
52110: LD_INT 0
52112: DOUBLE
52113: EQUAL
52114: IFTRUE 52124
52116: LD_INT 1
52118: DOUBLE
52119: EQUAL
52120: IFTRUE 52124
52122: GO 52325
52124: POP
// case nation of nation_american :
52125: LD_VAR 0 5
52129: PUSH
52130: LD_INT 1
52132: DOUBLE
52133: EQUAL
52134: IFTRUE 52138
52136: GO 52194
52138: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52139: LD_ADDR_VAR 0 9
52143: PUSH
52144: LD_VAR 0 11
52148: PUSH
52149: LD_VAR 0 12
52153: PUSH
52154: LD_VAR 0 13
52158: PUSH
52159: LD_VAR 0 14
52163: PUSH
52164: LD_VAR 0 15
52168: PUSH
52169: LD_VAR 0 16
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 4
52186: PUSH
52187: LD_INT 1
52189: PLUS
52190: ARRAY
52191: ST_TO_ADDR
52192: GO 52323
52194: LD_INT 2
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52202
52200: GO 52258
52202: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52203: LD_ADDR_VAR 0 9
52207: PUSH
52208: LD_VAR 0 17
52212: PUSH
52213: LD_VAR 0 18
52217: PUSH
52218: LD_VAR 0 19
52222: PUSH
52223: LD_VAR 0 20
52227: PUSH
52228: LD_VAR 0 21
52232: PUSH
52233: LD_VAR 0 22
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: PUSH
52246: LD_VAR 0 4
52250: PUSH
52251: LD_INT 1
52253: PLUS
52254: ARRAY
52255: ST_TO_ADDR
52256: GO 52323
52258: LD_INT 3
52260: DOUBLE
52261: EQUAL
52262: IFTRUE 52266
52264: GO 52322
52266: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52267: LD_ADDR_VAR 0 9
52271: PUSH
52272: LD_VAR 0 23
52276: PUSH
52277: LD_VAR 0 24
52281: PUSH
52282: LD_VAR 0 25
52286: PUSH
52287: LD_VAR 0 26
52291: PUSH
52292: LD_VAR 0 27
52296: PUSH
52297: LD_VAR 0 28
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: PUSH
52310: LD_VAR 0 4
52314: PUSH
52315: LD_INT 1
52317: PLUS
52318: ARRAY
52319: ST_TO_ADDR
52320: GO 52323
52322: POP
52323: GO 52872
52325: LD_INT 2
52327: DOUBLE
52328: EQUAL
52329: IFTRUE 52339
52331: LD_INT 3
52333: DOUBLE
52334: EQUAL
52335: IFTRUE 52339
52337: GO 52395
52339: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52340: LD_ADDR_VAR 0 9
52344: PUSH
52345: LD_VAR 0 29
52349: PUSH
52350: LD_VAR 0 30
52354: PUSH
52355: LD_VAR 0 31
52359: PUSH
52360: LD_VAR 0 32
52364: PUSH
52365: LD_VAR 0 33
52369: PUSH
52370: LD_VAR 0 34
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: PUSH
52383: LD_VAR 0 4
52387: PUSH
52388: LD_INT 1
52390: PLUS
52391: ARRAY
52392: ST_TO_ADDR
52393: GO 52872
52395: LD_INT 16
52397: DOUBLE
52398: EQUAL
52399: IFTRUE 52451
52401: LD_INT 17
52403: DOUBLE
52404: EQUAL
52405: IFTRUE 52451
52407: LD_INT 18
52409: DOUBLE
52410: EQUAL
52411: IFTRUE 52451
52413: LD_INT 19
52415: DOUBLE
52416: EQUAL
52417: IFTRUE 52451
52419: LD_INT 20
52421: DOUBLE
52422: EQUAL
52423: IFTRUE 52451
52425: LD_INT 21
52427: DOUBLE
52428: EQUAL
52429: IFTRUE 52451
52431: LD_INT 23
52433: DOUBLE
52434: EQUAL
52435: IFTRUE 52451
52437: LD_INT 24
52439: DOUBLE
52440: EQUAL
52441: IFTRUE 52451
52443: LD_INT 25
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52451
52449: GO 52507
52451: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52452: LD_ADDR_VAR 0 9
52456: PUSH
52457: LD_VAR 0 35
52461: PUSH
52462: LD_VAR 0 36
52466: PUSH
52467: LD_VAR 0 37
52471: PUSH
52472: LD_VAR 0 38
52476: PUSH
52477: LD_VAR 0 39
52481: PUSH
52482: LD_VAR 0 40
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: PUSH
52495: LD_VAR 0 4
52499: PUSH
52500: LD_INT 1
52502: PLUS
52503: ARRAY
52504: ST_TO_ADDR
52505: GO 52872
52507: LD_INT 6
52509: DOUBLE
52510: EQUAL
52511: IFTRUE 52563
52513: LD_INT 7
52515: DOUBLE
52516: EQUAL
52517: IFTRUE 52563
52519: LD_INT 8
52521: DOUBLE
52522: EQUAL
52523: IFTRUE 52563
52525: LD_INT 13
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52563
52531: LD_INT 12
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52563
52537: LD_INT 15
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52563
52543: LD_INT 11
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52563
52549: LD_INT 14
52551: DOUBLE
52552: EQUAL
52553: IFTRUE 52563
52555: LD_INT 10
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52563
52561: GO 52619
52563: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52564: LD_ADDR_VAR 0 9
52568: PUSH
52569: LD_VAR 0 41
52573: PUSH
52574: LD_VAR 0 42
52578: PUSH
52579: LD_VAR 0 43
52583: PUSH
52584: LD_VAR 0 44
52588: PUSH
52589: LD_VAR 0 45
52593: PUSH
52594: LD_VAR 0 46
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: PUSH
52607: LD_VAR 0 4
52611: PUSH
52612: LD_INT 1
52614: PLUS
52615: ARRAY
52616: ST_TO_ADDR
52617: GO 52872
52619: LD_INT 36
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52627
52625: GO 52683
52627: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52628: LD_ADDR_VAR 0 9
52632: PUSH
52633: LD_VAR 0 47
52637: PUSH
52638: LD_VAR 0 48
52642: PUSH
52643: LD_VAR 0 49
52647: PUSH
52648: LD_VAR 0 50
52652: PUSH
52653: LD_VAR 0 51
52657: PUSH
52658: LD_VAR 0 52
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: PUSH
52671: LD_VAR 0 4
52675: PUSH
52676: LD_INT 1
52678: PLUS
52679: ARRAY
52680: ST_TO_ADDR
52681: GO 52872
52683: LD_INT 4
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52709
52689: LD_INT 5
52691: DOUBLE
52692: EQUAL
52693: IFTRUE 52709
52695: LD_INT 34
52697: DOUBLE
52698: EQUAL
52699: IFTRUE 52709
52701: LD_INT 37
52703: DOUBLE
52704: EQUAL
52705: IFTRUE 52709
52707: GO 52765
52709: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52710: LD_ADDR_VAR 0 9
52714: PUSH
52715: LD_VAR 0 53
52719: PUSH
52720: LD_VAR 0 54
52724: PUSH
52725: LD_VAR 0 55
52729: PUSH
52730: LD_VAR 0 56
52734: PUSH
52735: LD_VAR 0 57
52739: PUSH
52740: LD_VAR 0 58
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: PUSH
52753: LD_VAR 0 4
52757: PUSH
52758: LD_INT 1
52760: PLUS
52761: ARRAY
52762: ST_TO_ADDR
52763: GO 52872
52765: LD_INT 31
52767: DOUBLE
52768: EQUAL
52769: IFTRUE 52815
52771: LD_INT 32
52773: DOUBLE
52774: EQUAL
52775: IFTRUE 52815
52777: LD_INT 33
52779: DOUBLE
52780: EQUAL
52781: IFTRUE 52815
52783: LD_INT 27
52785: DOUBLE
52786: EQUAL
52787: IFTRUE 52815
52789: LD_INT 26
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52815
52795: LD_INT 28
52797: DOUBLE
52798: EQUAL
52799: IFTRUE 52815
52801: LD_INT 29
52803: DOUBLE
52804: EQUAL
52805: IFTRUE 52815
52807: LD_INT 30
52809: DOUBLE
52810: EQUAL
52811: IFTRUE 52815
52813: GO 52871
52815: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52816: LD_ADDR_VAR 0 9
52820: PUSH
52821: LD_VAR 0 59
52825: PUSH
52826: LD_VAR 0 60
52830: PUSH
52831: LD_VAR 0 61
52835: PUSH
52836: LD_VAR 0 62
52840: PUSH
52841: LD_VAR 0 63
52845: PUSH
52846: LD_VAR 0 64
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: PUSH
52859: LD_VAR 0 4
52863: PUSH
52864: LD_INT 1
52866: PLUS
52867: ARRAY
52868: ST_TO_ADDR
52869: GO 52872
52871: POP
// temp_list2 = [ ] ;
52872: LD_ADDR_VAR 0 10
52876: PUSH
52877: EMPTY
52878: ST_TO_ADDR
// for i in temp_list do
52879: LD_ADDR_VAR 0 8
52883: PUSH
52884: LD_VAR 0 9
52888: PUSH
52889: FOR_IN
52890: IFFALSE 52942
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52892: LD_ADDR_VAR 0 10
52896: PUSH
52897: LD_VAR 0 10
52901: PUSH
52902: LD_VAR 0 8
52906: PUSH
52907: LD_INT 1
52909: ARRAY
52910: PUSH
52911: LD_VAR 0 2
52915: PLUS
52916: PUSH
52917: LD_VAR 0 8
52921: PUSH
52922: LD_INT 2
52924: ARRAY
52925: PUSH
52926: LD_VAR 0 3
52930: PLUS
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: ADD
52939: ST_TO_ADDR
52940: GO 52889
52942: POP
52943: POP
// result = temp_list2 ;
52944: LD_ADDR_VAR 0 7
52948: PUSH
52949: LD_VAR 0 10
52953: ST_TO_ADDR
// end ;
52954: LD_VAR 0 7
52958: RET
// export function EnemyInRange ( unit , dist ) ; begin
52959: LD_INT 0
52961: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52962: LD_ADDR_VAR 0 3
52966: PUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 255
52976: PPUSH
52977: LD_VAR 0 1
52981: PPUSH
52982: CALL_OW 250
52986: PPUSH
52987: LD_VAR 0 1
52991: PPUSH
52992: CALL_OW 251
52996: PPUSH
52997: LD_VAR 0 2
53001: PPUSH
53002: CALL 27302 0 4
53006: PUSH
53007: LD_INT 4
53009: ARRAY
53010: ST_TO_ADDR
// end ;
53011: LD_VAR 0 3
53015: RET
// export function PlayerSeeMe ( unit ) ; begin
53016: LD_INT 0
53018: PPUSH
// result := See ( your_side , unit ) ;
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_OWVAR 2
53028: PPUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: CALL_OW 292
53038: ST_TO_ADDR
// end ;
53039: LD_VAR 0 2
53043: RET
// export function ReverseDir ( unit ) ; begin
53044: LD_INT 0
53046: PPUSH
// if not unit then
53047: LD_VAR 0 1
53051: NOT
53052: IFFALSE 53056
// exit ;
53054: GO 53102
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53056: LD_ADDR_VAR 0 2
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: LD_INT 4
53066: PUSH
53067: LD_INT 5
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: PUSH
53087: LD_VAR 0 1
53091: PPUSH
53092: CALL_OW 254
53096: PUSH
53097: LD_INT 1
53099: PLUS
53100: ARRAY
53101: ST_TO_ADDR
// end ;
53102: LD_VAR 0 2
53106: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53107: LD_INT 0
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
// if not hexes then
53114: LD_VAR 0 2
53118: NOT
53119: IFFALSE 53123
// exit ;
53121: GO 53271
// dist := 9999 ;
53123: LD_ADDR_VAR 0 5
53127: PUSH
53128: LD_INT 9999
53130: ST_TO_ADDR
// for i = 1 to hexes do
53131: LD_ADDR_VAR 0 4
53135: PUSH
53136: DOUBLE
53137: LD_INT 1
53139: DEC
53140: ST_TO_ADDR
53141: LD_VAR 0 2
53145: PUSH
53146: FOR_TO
53147: IFFALSE 53259
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53149: LD_VAR 0 1
53153: PPUSH
53154: LD_VAR 0 2
53158: PUSH
53159: LD_VAR 0 4
53163: ARRAY
53164: PUSH
53165: LD_INT 1
53167: ARRAY
53168: PPUSH
53169: LD_VAR 0 2
53173: PUSH
53174: LD_VAR 0 4
53178: ARRAY
53179: PUSH
53180: LD_INT 2
53182: ARRAY
53183: PPUSH
53184: CALL_OW 297
53188: PUSH
53189: LD_VAR 0 5
53193: LESS
53194: IFFALSE 53257
// begin hex := hexes [ i ] ;
53196: LD_ADDR_VAR 0 7
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_VAR 0 4
53210: ARRAY
53211: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53212: LD_ADDR_VAR 0 5
53216: PUSH
53217: LD_VAR 0 1
53221: PPUSH
53222: LD_VAR 0 2
53226: PUSH
53227: LD_VAR 0 4
53231: ARRAY
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PPUSH
53237: LD_VAR 0 2
53241: PUSH
53242: LD_VAR 0 4
53246: ARRAY
53247: PUSH
53248: LD_INT 2
53250: ARRAY
53251: PPUSH
53252: CALL_OW 297
53256: ST_TO_ADDR
// end ; end ;
53257: GO 53146
53259: POP
53260: POP
// result := hex ;
53261: LD_ADDR_VAR 0 3
53265: PUSH
53266: LD_VAR 0 7
53270: ST_TO_ADDR
// end ;
53271: LD_VAR 0 3
53275: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53276: LD_INT 0
53278: PPUSH
53279: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53280: LD_VAR 0 1
53284: NOT
53285: PUSH
53286: LD_VAR 0 1
53290: PUSH
53291: LD_INT 21
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 23
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PPUSH
53315: CALL_OW 69
53319: IN
53320: NOT
53321: OR
53322: IFFALSE 53326
// exit ;
53324: GO 53373
// for i = 1 to 3 do
53326: LD_ADDR_VAR 0 3
53330: PUSH
53331: DOUBLE
53332: LD_INT 1
53334: DEC
53335: ST_TO_ADDR
53336: LD_INT 3
53338: PUSH
53339: FOR_TO
53340: IFFALSE 53371
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53342: LD_VAR 0 1
53346: PPUSH
53347: CALL_OW 250
53351: PPUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 251
53361: PPUSH
53362: LD_INT 1
53364: PPUSH
53365: CALL_OW 453
53369: GO 53339
53371: POP
53372: POP
// end ;
53373: LD_VAR 0 2
53377: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53378: LD_INT 0
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
53384: PPUSH
53385: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53386: LD_VAR 0 1
53390: NOT
53391: PUSH
53392: LD_VAR 0 2
53396: NOT
53397: OR
53398: PUSH
53399: LD_VAR 0 1
53403: PPUSH
53404: CALL_OW 314
53408: OR
53409: IFFALSE 53413
// exit ;
53411: GO 53854
// x := GetX ( enemy_unit ) ;
53413: LD_ADDR_VAR 0 7
53417: PUSH
53418: LD_VAR 0 2
53422: PPUSH
53423: CALL_OW 250
53427: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53428: LD_ADDR_VAR 0 8
53432: PUSH
53433: LD_VAR 0 2
53437: PPUSH
53438: CALL_OW 251
53442: ST_TO_ADDR
// if not x or not y then
53443: LD_VAR 0 7
53447: NOT
53448: PUSH
53449: LD_VAR 0 8
53453: NOT
53454: OR
53455: IFFALSE 53459
// exit ;
53457: GO 53854
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53459: LD_ADDR_VAR 0 6
53463: PUSH
53464: LD_VAR 0 7
53468: PPUSH
53469: LD_INT 0
53471: PPUSH
53472: LD_INT 4
53474: PPUSH
53475: CALL_OW 272
53479: PUSH
53480: LD_VAR 0 8
53484: PPUSH
53485: LD_INT 0
53487: PPUSH
53488: LD_INT 4
53490: PPUSH
53491: CALL_OW 273
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_VAR 0 7
53504: PPUSH
53505: LD_INT 1
53507: PPUSH
53508: LD_INT 4
53510: PPUSH
53511: CALL_OW 272
53515: PUSH
53516: LD_VAR 0 8
53520: PPUSH
53521: LD_INT 1
53523: PPUSH
53524: LD_INT 4
53526: PPUSH
53527: CALL_OW 273
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_VAR 0 7
53540: PPUSH
53541: LD_INT 2
53543: PPUSH
53544: LD_INT 4
53546: PPUSH
53547: CALL_OW 272
53551: PUSH
53552: LD_VAR 0 8
53556: PPUSH
53557: LD_INT 2
53559: PPUSH
53560: LD_INT 4
53562: PPUSH
53563: CALL_OW 273
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_VAR 0 7
53576: PPUSH
53577: LD_INT 3
53579: PPUSH
53580: LD_INT 4
53582: PPUSH
53583: CALL_OW 272
53587: PUSH
53588: LD_VAR 0 8
53592: PPUSH
53593: LD_INT 3
53595: PPUSH
53596: LD_INT 4
53598: PPUSH
53599: CALL_OW 273
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_VAR 0 7
53612: PPUSH
53613: LD_INT 4
53615: PPUSH
53616: LD_INT 4
53618: PPUSH
53619: CALL_OW 272
53623: PUSH
53624: LD_VAR 0 8
53628: PPUSH
53629: LD_INT 4
53631: PPUSH
53632: LD_INT 4
53634: PPUSH
53635: CALL_OW 273
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_VAR 0 7
53648: PPUSH
53649: LD_INT 5
53651: PPUSH
53652: LD_INT 4
53654: PPUSH
53655: CALL_OW 272
53659: PUSH
53660: LD_VAR 0 8
53664: PPUSH
53665: LD_INT 5
53667: PPUSH
53668: LD_INT 4
53670: PPUSH
53671: CALL_OW 273
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// for i = tmp downto 1 do
53688: LD_ADDR_VAR 0 4
53692: PUSH
53693: DOUBLE
53694: LD_VAR 0 6
53698: INC
53699: ST_TO_ADDR
53700: LD_INT 1
53702: PUSH
53703: FOR_DOWNTO
53704: IFFALSE 53805
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53706: LD_VAR 0 6
53710: PUSH
53711: LD_VAR 0 4
53715: ARRAY
53716: PUSH
53717: LD_INT 1
53719: ARRAY
53720: PPUSH
53721: LD_VAR 0 6
53725: PUSH
53726: LD_VAR 0 4
53730: ARRAY
53731: PUSH
53732: LD_INT 2
53734: ARRAY
53735: PPUSH
53736: CALL_OW 488
53740: NOT
53741: PUSH
53742: LD_VAR 0 6
53746: PUSH
53747: LD_VAR 0 4
53751: ARRAY
53752: PUSH
53753: LD_INT 1
53755: ARRAY
53756: PPUSH
53757: LD_VAR 0 6
53761: PUSH
53762: LD_VAR 0 4
53766: ARRAY
53767: PUSH
53768: LD_INT 2
53770: ARRAY
53771: PPUSH
53772: CALL_OW 428
53776: PUSH
53777: LD_INT 0
53779: NONEQUAL
53780: OR
53781: IFFALSE 53803
// tmp := Delete ( tmp , i ) ;
53783: LD_ADDR_VAR 0 6
53787: PUSH
53788: LD_VAR 0 6
53792: PPUSH
53793: LD_VAR 0 4
53797: PPUSH
53798: CALL_OW 3
53802: ST_TO_ADDR
53803: GO 53703
53805: POP
53806: POP
// j := GetClosestHex ( unit , tmp ) ;
53807: LD_ADDR_VAR 0 5
53811: PUSH
53812: LD_VAR 0 1
53816: PPUSH
53817: LD_VAR 0 6
53821: PPUSH
53822: CALL 53107 0 2
53826: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53827: LD_VAR 0 1
53831: PPUSH
53832: LD_VAR 0 5
53836: PUSH
53837: LD_INT 1
53839: ARRAY
53840: PPUSH
53841: LD_VAR 0 5
53845: PUSH
53846: LD_INT 2
53848: ARRAY
53849: PPUSH
53850: CALL_OW 111
// end ;
53854: LD_VAR 0 3
53858: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53859: LD_INT 0
53861: PPUSH
53862: PPUSH
53863: PPUSH
// uc_side = 0 ;
53864: LD_ADDR_OWVAR 20
53868: PUSH
53869: LD_INT 0
53871: ST_TO_ADDR
// uc_nation = 0 ;
53872: LD_ADDR_OWVAR 21
53876: PUSH
53877: LD_INT 0
53879: ST_TO_ADDR
// InitHc ;
53880: CALL_OW 19
// InitVc ;
53884: CALL_OW 20
// if mastodonts then
53888: LD_VAR 0 6
53892: IFFALSE 53959
// for i = 1 to mastodonts do
53894: LD_ADDR_VAR 0 11
53898: PUSH
53899: DOUBLE
53900: LD_INT 1
53902: DEC
53903: ST_TO_ADDR
53904: LD_VAR 0 6
53908: PUSH
53909: FOR_TO
53910: IFFALSE 53957
// begin vc_chassis := 31 ;
53912: LD_ADDR_OWVAR 37
53916: PUSH
53917: LD_INT 31
53919: ST_TO_ADDR
// vc_control := control_rider ;
53920: LD_ADDR_OWVAR 38
53924: PUSH
53925: LD_INT 4
53927: ST_TO_ADDR
// animal := CreateVehicle ;
53928: LD_ADDR_VAR 0 12
53932: PUSH
53933: CALL_OW 45
53937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53938: LD_VAR 0 12
53942: PPUSH
53943: LD_VAR 0 8
53947: PPUSH
53948: LD_INT 0
53950: PPUSH
53951: CALL 60665 0 3
// end ;
53955: GO 53909
53957: POP
53958: POP
// if horses then
53959: LD_VAR 0 5
53963: IFFALSE 54030
// for i = 1 to horses do
53965: LD_ADDR_VAR 0 11
53969: PUSH
53970: DOUBLE
53971: LD_INT 1
53973: DEC
53974: ST_TO_ADDR
53975: LD_VAR 0 5
53979: PUSH
53980: FOR_TO
53981: IFFALSE 54028
// begin hc_class := 21 ;
53983: LD_ADDR_OWVAR 28
53987: PUSH
53988: LD_INT 21
53990: ST_TO_ADDR
// hc_gallery :=  ;
53991: LD_ADDR_OWVAR 33
53995: PUSH
53996: LD_STRING 
53998: ST_TO_ADDR
// animal := CreateHuman ;
53999: LD_ADDR_VAR 0 12
54003: PUSH
54004: CALL_OW 44
54008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54009: LD_VAR 0 12
54013: PPUSH
54014: LD_VAR 0 8
54018: PPUSH
54019: LD_INT 0
54021: PPUSH
54022: CALL 60665 0 3
// end ;
54026: GO 53980
54028: POP
54029: POP
// if birds then
54030: LD_VAR 0 1
54034: IFFALSE 54101
// for i = 1 to birds do
54036: LD_ADDR_VAR 0 11
54040: PUSH
54041: DOUBLE
54042: LD_INT 1
54044: DEC
54045: ST_TO_ADDR
54046: LD_VAR 0 1
54050: PUSH
54051: FOR_TO
54052: IFFALSE 54099
// begin hc_class = 18 ;
54054: LD_ADDR_OWVAR 28
54058: PUSH
54059: LD_INT 18
54061: ST_TO_ADDR
// hc_gallery =  ;
54062: LD_ADDR_OWVAR 33
54066: PUSH
54067: LD_STRING 
54069: ST_TO_ADDR
// animal := CreateHuman ;
54070: LD_ADDR_VAR 0 12
54074: PUSH
54075: CALL_OW 44
54079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54080: LD_VAR 0 12
54084: PPUSH
54085: LD_VAR 0 8
54089: PPUSH
54090: LD_INT 0
54092: PPUSH
54093: CALL 60665 0 3
// end ;
54097: GO 54051
54099: POP
54100: POP
// if tigers then
54101: LD_VAR 0 2
54105: IFFALSE 54189
// for i = 1 to tigers do
54107: LD_ADDR_VAR 0 11
54111: PUSH
54112: DOUBLE
54113: LD_INT 1
54115: DEC
54116: ST_TO_ADDR
54117: LD_VAR 0 2
54121: PUSH
54122: FOR_TO
54123: IFFALSE 54187
// begin hc_class = class_tiger ;
54125: LD_ADDR_OWVAR 28
54129: PUSH
54130: LD_INT 14
54132: ST_TO_ADDR
// hc_gallery =  ;
54133: LD_ADDR_OWVAR 33
54137: PUSH
54138: LD_STRING 
54140: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54141: LD_ADDR_OWVAR 35
54145: PUSH
54146: LD_INT 7
54148: NEG
54149: PPUSH
54150: LD_INT 7
54152: PPUSH
54153: CALL_OW 12
54157: ST_TO_ADDR
// animal := CreateHuman ;
54158: LD_ADDR_VAR 0 12
54162: PUSH
54163: CALL_OW 44
54167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54168: LD_VAR 0 12
54172: PPUSH
54173: LD_VAR 0 8
54177: PPUSH
54178: LD_INT 0
54180: PPUSH
54181: CALL 60665 0 3
// end ;
54185: GO 54122
54187: POP
54188: POP
// if apemans then
54189: LD_VAR 0 3
54193: IFFALSE 54316
// for i = 1 to apemans do
54195: LD_ADDR_VAR 0 11
54199: PUSH
54200: DOUBLE
54201: LD_INT 1
54203: DEC
54204: ST_TO_ADDR
54205: LD_VAR 0 3
54209: PUSH
54210: FOR_TO
54211: IFFALSE 54314
// begin hc_class = class_apeman ;
54213: LD_ADDR_OWVAR 28
54217: PUSH
54218: LD_INT 12
54220: ST_TO_ADDR
// hc_gallery =  ;
54221: LD_ADDR_OWVAR 33
54225: PUSH
54226: LD_STRING 
54228: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54229: LD_ADDR_OWVAR 35
54233: PUSH
54234: LD_INT 5
54236: NEG
54237: PPUSH
54238: LD_INT 5
54240: PPUSH
54241: CALL_OW 12
54245: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54246: LD_ADDR_OWVAR 31
54250: PUSH
54251: LD_INT 1
54253: PPUSH
54254: LD_INT 3
54256: PPUSH
54257: CALL_OW 12
54261: PUSH
54262: LD_INT 1
54264: PPUSH
54265: LD_INT 3
54267: PPUSH
54268: CALL_OW 12
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// animal := CreateHuman ;
54285: LD_ADDR_VAR 0 12
54289: PUSH
54290: CALL_OW 44
54294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54295: LD_VAR 0 12
54299: PPUSH
54300: LD_VAR 0 8
54304: PPUSH
54305: LD_INT 0
54307: PPUSH
54308: CALL 60665 0 3
// end ;
54312: GO 54210
54314: POP
54315: POP
// if enchidnas then
54316: LD_VAR 0 4
54320: IFFALSE 54387
// for i = 1 to enchidnas do
54322: LD_ADDR_VAR 0 11
54326: PUSH
54327: DOUBLE
54328: LD_INT 1
54330: DEC
54331: ST_TO_ADDR
54332: LD_VAR 0 4
54336: PUSH
54337: FOR_TO
54338: IFFALSE 54385
// begin hc_class = 13 ;
54340: LD_ADDR_OWVAR 28
54344: PUSH
54345: LD_INT 13
54347: ST_TO_ADDR
// hc_gallery =  ;
54348: LD_ADDR_OWVAR 33
54352: PUSH
54353: LD_STRING 
54355: ST_TO_ADDR
// animal := CreateHuman ;
54356: LD_ADDR_VAR 0 12
54360: PUSH
54361: CALL_OW 44
54365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54366: LD_VAR 0 12
54370: PPUSH
54371: LD_VAR 0 8
54375: PPUSH
54376: LD_INT 0
54378: PPUSH
54379: CALL 60665 0 3
// end ;
54383: GO 54337
54385: POP
54386: POP
// if fishes then
54387: LD_VAR 0 7
54391: IFFALSE 54458
// for i = 1 to fishes do
54393: LD_ADDR_VAR 0 11
54397: PUSH
54398: DOUBLE
54399: LD_INT 1
54401: DEC
54402: ST_TO_ADDR
54403: LD_VAR 0 7
54407: PUSH
54408: FOR_TO
54409: IFFALSE 54456
// begin hc_class = 20 ;
54411: LD_ADDR_OWVAR 28
54415: PUSH
54416: LD_INT 20
54418: ST_TO_ADDR
// hc_gallery =  ;
54419: LD_ADDR_OWVAR 33
54423: PUSH
54424: LD_STRING 
54426: ST_TO_ADDR
// animal := CreateHuman ;
54427: LD_ADDR_VAR 0 12
54431: PUSH
54432: CALL_OW 44
54436: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54437: LD_VAR 0 12
54441: PPUSH
54442: LD_VAR 0 9
54446: PPUSH
54447: LD_INT 0
54449: PPUSH
54450: CALL 60665 0 3
// end ;
54454: GO 54408
54456: POP
54457: POP
// end ;
54458: LD_VAR 0 10
54462: RET
// export function WantHeal ( sci , unit ) ; begin
54463: LD_INT 0
54465: PPUSH
// if GetTaskList ( sci ) > 0 then
54466: LD_VAR 0 1
54470: PPUSH
54471: CALL_OW 437
54475: PUSH
54476: LD_INT 0
54478: GREATER
54479: IFFALSE 54549
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54481: LD_VAR 0 1
54485: PPUSH
54486: CALL_OW 437
54490: PUSH
54491: LD_INT 1
54493: ARRAY
54494: PUSH
54495: LD_INT 1
54497: ARRAY
54498: PUSH
54499: LD_STRING l
54501: EQUAL
54502: PUSH
54503: LD_VAR 0 1
54507: PPUSH
54508: CALL_OW 437
54512: PUSH
54513: LD_INT 1
54515: ARRAY
54516: PUSH
54517: LD_INT 4
54519: ARRAY
54520: PUSH
54521: LD_VAR 0 2
54525: EQUAL
54526: AND
54527: IFFALSE 54539
// result := true else
54529: LD_ADDR_VAR 0 3
54533: PUSH
54534: LD_INT 1
54536: ST_TO_ADDR
54537: GO 54547
// result := false ;
54539: LD_ADDR_VAR 0 3
54543: PUSH
54544: LD_INT 0
54546: ST_TO_ADDR
// end else
54547: GO 54557
// result := false ;
54549: LD_ADDR_VAR 0 3
54553: PUSH
54554: LD_INT 0
54556: ST_TO_ADDR
// end ;
54557: LD_VAR 0 3
54561: RET
// export function HealTarget ( sci ) ; begin
54562: LD_INT 0
54564: PPUSH
// if not sci then
54565: LD_VAR 0 1
54569: NOT
54570: IFFALSE 54574
// exit ;
54572: GO 54639
// result := 0 ;
54574: LD_ADDR_VAR 0 2
54578: PUSH
54579: LD_INT 0
54581: ST_TO_ADDR
// if GetTaskList ( sci ) then
54582: LD_VAR 0 1
54586: PPUSH
54587: CALL_OW 437
54591: IFFALSE 54639
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54593: LD_VAR 0 1
54597: PPUSH
54598: CALL_OW 437
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: PUSH
54611: LD_STRING l
54613: EQUAL
54614: IFFALSE 54639
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54616: LD_ADDR_VAR 0 2
54620: PUSH
54621: LD_VAR 0 1
54625: PPUSH
54626: CALL_OW 437
54630: PUSH
54631: LD_INT 1
54633: ARRAY
54634: PUSH
54635: LD_INT 4
54637: ARRAY
54638: ST_TO_ADDR
// end ;
54639: LD_VAR 0 2
54643: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
54644: LD_INT 0
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
54661: PPUSH
54662: PPUSH
54663: PPUSH
54664: PPUSH
54665: PPUSH
54666: PPUSH
54667: PPUSH
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
54677: PPUSH
54678: PPUSH
// if not list then
54679: LD_VAR 0 1
54683: NOT
54684: IFFALSE 54688
// exit ;
54686: GO 59276
// base := list [ 1 ] ;
54688: LD_ADDR_VAR 0 3
54692: PUSH
54693: LD_VAR 0 1
54697: PUSH
54698: LD_INT 1
54700: ARRAY
54701: ST_TO_ADDR
// group := list [ 2 ] ;
54702: LD_ADDR_VAR 0 4
54706: PUSH
54707: LD_VAR 0 1
54711: PUSH
54712: LD_INT 2
54714: ARRAY
54715: ST_TO_ADDR
// path := list [ 3 ] ;
54716: LD_ADDR_VAR 0 5
54720: PUSH
54721: LD_VAR 0 1
54725: PUSH
54726: LD_INT 3
54728: ARRAY
54729: ST_TO_ADDR
// flags := list [ 4 ] ;
54730: LD_ADDR_VAR 0 6
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_INT 4
54742: ARRAY
54743: ST_TO_ADDR
// mined := [ ] ;
54744: LD_ADDR_VAR 0 27
54748: PUSH
54749: EMPTY
54750: ST_TO_ADDR
// bombed := [ ] ;
54751: LD_ADDR_VAR 0 28
54755: PUSH
54756: EMPTY
54757: ST_TO_ADDR
// healers := [ ] ;
54758: LD_ADDR_VAR 0 31
54762: PUSH
54763: EMPTY
54764: ST_TO_ADDR
// to_heal := [ ] ;
54765: LD_ADDR_VAR 0 30
54769: PUSH
54770: EMPTY
54771: ST_TO_ADDR
// repairs := [ ] ;
54772: LD_ADDR_VAR 0 33
54776: PUSH
54777: EMPTY
54778: ST_TO_ADDR
// to_repair := [ ] ;
54779: LD_ADDR_VAR 0 32
54783: PUSH
54784: EMPTY
54785: ST_TO_ADDR
// if not group or not path then
54786: LD_VAR 0 4
54790: NOT
54791: PUSH
54792: LD_VAR 0 5
54796: NOT
54797: OR
54798: IFFALSE 54802
// exit ;
54800: GO 59276
// if flags then
54802: LD_VAR 0 6
54806: IFFALSE 54950
// begin f_ignore_area := flags [ 1 ] ;
54808: LD_ADDR_VAR 0 17
54812: PUSH
54813: LD_VAR 0 6
54817: PUSH
54818: LD_INT 1
54820: ARRAY
54821: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54822: LD_ADDR_VAR 0 18
54826: PUSH
54827: LD_VAR 0 6
54831: PUSH
54832: LD_INT 2
54834: ARRAY
54835: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54836: LD_ADDR_VAR 0 19
54840: PUSH
54841: LD_VAR 0 6
54845: PUSH
54846: LD_INT 3
54848: ARRAY
54849: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54850: LD_ADDR_VAR 0 20
54854: PUSH
54855: LD_VAR 0 6
54859: PUSH
54860: LD_INT 4
54862: ARRAY
54863: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54864: LD_ADDR_VAR 0 21
54868: PUSH
54869: LD_VAR 0 6
54873: PUSH
54874: LD_INT 5
54876: ARRAY
54877: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54878: LD_ADDR_VAR 0 22
54882: PUSH
54883: LD_VAR 0 6
54887: PUSH
54888: LD_INT 6
54890: ARRAY
54891: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54892: LD_ADDR_VAR 0 23
54896: PUSH
54897: LD_VAR 0 6
54901: PUSH
54902: LD_INT 7
54904: ARRAY
54905: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54906: LD_ADDR_VAR 0 24
54910: PUSH
54911: LD_VAR 0 6
54915: PUSH
54916: LD_INT 8
54918: ARRAY
54919: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54920: LD_ADDR_VAR 0 25
54924: PUSH
54925: LD_VAR 0 6
54929: PUSH
54930: LD_INT 9
54932: ARRAY
54933: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54934: LD_ADDR_VAR 0 26
54938: PUSH
54939: LD_VAR 0 6
54943: PUSH
54944: LD_INT 10
54946: ARRAY
54947: ST_TO_ADDR
// end else
54948: GO 55030
// begin f_ignore_area := false ;
54950: LD_ADDR_VAR 0 17
54954: PUSH
54955: LD_INT 0
54957: ST_TO_ADDR
// f_capture := false ;
54958: LD_ADDR_VAR 0 18
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
// f_ignore_civ := false ;
54966: LD_ADDR_VAR 0 19
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
// f_murder := false ;
54974: LD_ADDR_VAR 0 20
54978: PUSH
54979: LD_INT 0
54981: ST_TO_ADDR
// f_mines := false ;
54982: LD_ADDR_VAR 0 21
54986: PUSH
54987: LD_INT 0
54989: ST_TO_ADDR
// f_repair := false ;
54990: LD_ADDR_VAR 0 22
54994: PUSH
54995: LD_INT 0
54997: ST_TO_ADDR
// f_heal := false ;
54998: LD_ADDR_VAR 0 23
55002: PUSH
55003: LD_INT 0
55005: ST_TO_ADDR
// f_spacetime := false ;
55006: LD_ADDR_VAR 0 24
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
// f_attack_depot := false ;
55014: LD_ADDR_VAR 0 25
55018: PUSH
55019: LD_INT 0
55021: ST_TO_ADDR
// f_crawl := false ;
55022: LD_ADDR_VAR 0 26
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// end ; if f_heal then
55030: LD_VAR 0 23
55034: IFFALSE 55061
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55036: LD_ADDR_VAR 0 31
55040: PUSH
55041: LD_VAR 0 4
55045: PPUSH
55046: LD_INT 25
55048: PUSH
55049: LD_INT 4
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PPUSH
55056: CALL_OW 72
55060: ST_TO_ADDR
// if f_repair then
55061: LD_VAR 0 22
55065: IFFALSE 55092
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55067: LD_ADDR_VAR 0 33
55071: PUSH
55072: LD_VAR 0 4
55076: PPUSH
55077: LD_INT 25
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 72
55091: ST_TO_ADDR
// units_path := [ ] ;
55092: LD_ADDR_VAR 0 16
55096: PUSH
55097: EMPTY
55098: ST_TO_ADDR
// for i = 1 to group do
55099: LD_ADDR_VAR 0 7
55103: PUSH
55104: DOUBLE
55105: LD_INT 1
55107: DEC
55108: ST_TO_ADDR
55109: LD_VAR 0 4
55113: PUSH
55114: FOR_TO
55115: IFFALSE 55144
// units_path := Replace ( units_path , i , path ) ;
55117: LD_ADDR_VAR 0 16
55121: PUSH
55122: LD_VAR 0 16
55126: PPUSH
55127: LD_VAR 0 7
55131: PPUSH
55132: LD_VAR 0 5
55136: PPUSH
55137: CALL_OW 1
55141: ST_TO_ADDR
55142: GO 55114
55144: POP
55145: POP
// repeat for i = group downto 1 do
55146: LD_ADDR_VAR 0 7
55150: PUSH
55151: DOUBLE
55152: LD_VAR 0 4
55156: INC
55157: ST_TO_ADDR
55158: LD_INT 1
55160: PUSH
55161: FOR_DOWNTO
55162: IFFALSE 59258
// begin wait ( 5 ) ;
55164: LD_INT 5
55166: PPUSH
55167: CALL_OW 67
// tmp := [ ] ;
55171: LD_ADDR_VAR 0 14
55175: PUSH
55176: EMPTY
55177: ST_TO_ADDR
// attacking := false ;
55178: LD_ADDR_VAR 0 29
55182: PUSH
55183: LD_INT 0
55185: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55186: LD_VAR 0 4
55190: PUSH
55191: LD_VAR 0 7
55195: ARRAY
55196: PPUSH
55197: CALL_OW 301
55201: PUSH
55202: LD_VAR 0 4
55206: PUSH
55207: LD_VAR 0 7
55211: ARRAY
55212: NOT
55213: OR
55214: IFFALSE 55323
// begin if GetType ( group [ i ] ) = unit_human then
55216: LD_VAR 0 4
55220: PUSH
55221: LD_VAR 0 7
55225: ARRAY
55226: PPUSH
55227: CALL_OW 247
55231: PUSH
55232: LD_INT 1
55234: EQUAL
55235: IFFALSE 55281
// begin to_heal := to_heal diff group [ i ] ;
55237: LD_ADDR_VAR 0 30
55241: PUSH
55242: LD_VAR 0 30
55246: PUSH
55247: LD_VAR 0 4
55251: PUSH
55252: LD_VAR 0 7
55256: ARRAY
55257: DIFF
55258: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55259: LD_ADDR_VAR 0 31
55263: PUSH
55264: LD_VAR 0 31
55268: PUSH
55269: LD_VAR 0 4
55273: PUSH
55274: LD_VAR 0 7
55278: ARRAY
55279: DIFF
55280: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55281: LD_ADDR_VAR 0 4
55285: PUSH
55286: LD_VAR 0 4
55290: PPUSH
55291: LD_VAR 0 7
55295: PPUSH
55296: CALL_OW 3
55300: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55301: LD_ADDR_VAR 0 16
55305: PUSH
55306: LD_VAR 0 16
55310: PPUSH
55311: LD_VAR 0 7
55315: PPUSH
55316: CALL_OW 3
55320: ST_TO_ADDR
// continue ;
55321: GO 55161
// end ; if f_repair then
55323: LD_VAR 0 22
55327: IFFALSE 55816
// begin if GetType ( group [ i ] ) = unit_vehicle then
55329: LD_VAR 0 4
55333: PUSH
55334: LD_VAR 0 7
55338: ARRAY
55339: PPUSH
55340: CALL_OW 247
55344: PUSH
55345: LD_INT 2
55347: EQUAL
55348: IFFALSE 55538
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55350: LD_VAR 0 4
55354: PUSH
55355: LD_VAR 0 7
55359: ARRAY
55360: PPUSH
55361: CALL_OW 256
55365: PUSH
55366: LD_INT 700
55368: LESS
55369: PUSH
55370: LD_VAR 0 4
55374: PUSH
55375: LD_VAR 0 7
55379: ARRAY
55380: PUSH
55381: LD_VAR 0 32
55385: IN
55386: NOT
55387: AND
55388: IFFALSE 55412
// to_repair := to_repair union group [ i ] ;
55390: LD_ADDR_VAR 0 32
55394: PUSH
55395: LD_VAR 0 32
55399: PUSH
55400: LD_VAR 0 4
55404: PUSH
55405: LD_VAR 0 7
55409: ARRAY
55410: UNION
55411: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55412: LD_VAR 0 4
55416: PUSH
55417: LD_VAR 0 7
55421: ARRAY
55422: PPUSH
55423: CALL_OW 256
55427: PUSH
55428: LD_INT 1000
55430: EQUAL
55431: PUSH
55432: LD_VAR 0 4
55436: PUSH
55437: LD_VAR 0 7
55441: ARRAY
55442: PUSH
55443: LD_VAR 0 32
55447: IN
55448: AND
55449: IFFALSE 55473
// to_repair := to_repair diff group [ i ] ;
55451: LD_ADDR_VAR 0 32
55455: PUSH
55456: LD_VAR 0 32
55460: PUSH
55461: LD_VAR 0 4
55465: PUSH
55466: LD_VAR 0 7
55470: ARRAY
55471: DIFF
55472: ST_TO_ADDR
// if group [ i ] in to_repair then
55473: LD_VAR 0 4
55477: PUSH
55478: LD_VAR 0 7
55482: ARRAY
55483: PUSH
55484: LD_VAR 0 32
55488: IN
55489: IFFALSE 55536
// begin if not IsInArea ( group [ i ] , f_repair ) then
55491: LD_VAR 0 4
55495: PUSH
55496: LD_VAR 0 7
55500: ARRAY
55501: PPUSH
55502: LD_VAR 0 22
55506: PPUSH
55507: CALL_OW 308
55511: NOT
55512: IFFALSE 55534
// ComMoveToArea ( group [ i ] , f_repair ) ;
55514: LD_VAR 0 4
55518: PUSH
55519: LD_VAR 0 7
55523: ARRAY
55524: PPUSH
55525: LD_VAR 0 22
55529: PPUSH
55530: CALL_OW 113
// continue ;
55534: GO 55161
// end ; end else
55536: GO 55816
// if group [ i ] in repairs then
55538: LD_VAR 0 4
55542: PUSH
55543: LD_VAR 0 7
55547: ARRAY
55548: PUSH
55549: LD_VAR 0 33
55553: IN
55554: IFFALSE 55816
// begin if IsInUnit ( group [ i ] ) then
55556: LD_VAR 0 4
55560: PUSH
55561: LD_VAR 0 7
55565: ARRAY
55566: PPUSH
55567: CALL_OW 310
55571: IFFALSE 55639
// begin z := IsInUnit ( group [ i ] ) ;
55573: LD_ADDR_VAR 0 13
55577: PUSH
55578: LD_VAR 0 4
55582: PUSH
55583: LD_VAR 0 7
55587: ARRAY
55588: PPUSH
55589: CALL_OW 310
55593: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55594: LD_VAR 0 13
55598: PUSH
55599: LD_VAR 0 32
55603: IN
55604: PUSH
55605: LD_VAR 0 13
55609: PPUSH
55610: LD_VAR 0 22
55614: PPUSH
55615: CALL_OW 308
55619: AND
55620: IFFALSE 55637
// ComExitVehicle ( group [ i ] ) ;
55622: LD_VAR 0 4
55626: PUSH
55627: LD_VAR 0 7
55631: ARRAY
55632: PPUSH
55633: CALL_OW 121
// end else
55637: GO 55816
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55639: LD_ADDR_VAR 0 13
55643: PUSH
55644: LD_VAR 0 4
55648: PPUSH
55649: LD_INT 95
55651: PUSH
55652: LD_VAR 0 22
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 58
55663: PUSH
55664: EMPTY
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PPUSH
55671: CALL_OW 72
55675: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55676: LD_VAR 0 4
55680: PUSH
55681: LD_VAR 0 7
55685: ARRAY
55686: PPUSH
55687: CALL_OW 314
55691: NOT
55692: IFFALSE 55814
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55694: LD_ADDR_VAR 0 10
55698: PUSH
55699: LD_VAR 0 13
55703: PPUSH
55704: LD_VAR 0 4
55708: PUSH
55709: LD_VAR 0 7
55713: ARRAY
55714: PPUSH
55715: CALL_OW 74
55719: ST_TO_ADDR
// if not x then
55720: LD_VAR 0 10
55724: NOT
55725: IFFALSE 55729
// continue ;
55727: GO 55161
// if GetLives ( x ) < 1000 then
55729: LD_VAR 0 10
55733: PPUSH
55734: CALL_OW 256
55738: PUSH
55739: LD_INT 1000
55741: LESS
55742: IFFALSE 55766
// ComRepairVehicle ( group [ i ] , x ) else
55744: LD_VAR 0 4
55748: PUSH
55749: LD_VAR 0 7
55753: ARRAY
55754: PPUSH
55755: LD_VAR 0 10
55759: PPUSH
55760: CALL_OW 129
55764: GO 55814
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55766: LD_VAR 0 23
55770: PUSH
55771: LD_VAR 0 4
55775: PUSH
55776: LD_VAR 0 7
55780: ARRAY
55781: PPUSH
55782: CALL_OW 256
55786: PUSH
55787: LD_INT 1000
55789: LESS
55790: AND
55791: NOT
55792: IFFALSE 55814
// ComEnterUnit ( group [ i ] , x ) ;
55794: LD_VAR 0 4
55798: PUSH
55799: LD_VAR 0 7
55803: ARRAY
55804: PPUSH
55805: LD_VAR 0 10
55809: PPUSH
55810: CALL_OW 120
// end ; continue ;
55814: GO 55161
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55816: LD_VAR 0 23
55820: PUSH
55821: LD_VAR 0 4
55825: PUSH
55826: LD_VAR 0 7
55830: ARRAY
55831: PPUSH
55832: CALL_OW 247
55836: PUSH
55837: LD_INT 1
55839: EQUAL
55840: AND
55841: IFFALSE 56319
// begin if group [ i ] in healers then
55843: LD_VAR 0 4
55847: PUSH
55848: LD_VAR 0 7
55852: ARRAY
55853: PUSH
55854: LD_VAR 0 31
55858: IN
55859: IFFALSE 56132
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55861: LD_VAR 0 4
55865: PUSH
55866: LD_VAR 0 7
55870: ARRAY
55871: PPUSH
55872: LD_VAR 0 23
55876: PPUSH
55877: CALL_OW 308
55881: NOT
55882: PUSH
55883: LD_VAR 0 4
55887: PUSH
55888: LD_VAR 0 7
55892: ARRAY
55893: PPUSH
55894: CALL_OW 314
55898: NOT
55899: AND
55900: IFFALSE 55924
// ComMoveToArea ( group [ i ] , f_heal ) else
55902: LD_VAR 0 4
55906: PUSH
55907: LD_VAR 0 7
55911: ARRAY
55912: PPUSH
55913: LD_VAR 0 23
55917: PPUSH
55918: CALL_OW 113
55922: GO 56130
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55924: LD_VAR 0 4
55928: PUSH
55929: LD_VAR 0 7
55933: ARRAY
55934: PPUSH
55935: CALL 54562 0 1
55939: PPUSH
55940: CALL_OW 256
55944: PUSH
55945: LD_INT 1000
55947: EQUAL
55948: IFFALSE 55967
// ComStop ( group [ i ] ) else
55950: LD_VAR 0 4
55954: PUSH
55955: LD_VAR 0 7
55959: ARRAY
55960: PPUSH
55961: CALL_OW 141
55965: GO 56130
// if not HasTask ( group [ i ] ) and to_heal then
55967: LD_VAR 0 4
55971: PUSH
55972: LD_VAR 0 7
55976: ARRAY
55977: PPUSH
55978: CALL_OW 314
55982: NOT
55983: PUSH
55984: LD_VAR 0 30
55988: AND
55989: IFFALSE 56130
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55991: LD_ADDR_VAR 0 13
55995: PUSH
55996: LD_VAR 0 30
56000: PPUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 54
56006: PUSH
56007: EMPTY
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PPUSH
56014: CALL_OW 72
56018: PPUSH
56019: LD_VAR 0 4
56023: PUSH
56024: LD_VAR 0 7
56028: ARRAY
56029: PPUSH
56030: CALL_OW 74
56034: ST_TO_ADDR
// if z then
56035: LD_VAR 0 13
56039: IFFALSE 56130
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56041: LD_INT 91
56043: PUSH
56044: LD_VAR 0 13
56048: PUSH
56049: LD_INT 10
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 81
56059: PUSH
56060: LD_VAR 0 13
56064: PPUSH
56065: CALL_OW 255
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PPUSH
56078: CALL_OW 69
56082: PUSH
56083: LD_INT 0
56085: EQUAL
56086: IFFALSE 56110
// ComHeal ( group [ i ] , z ) else
56088: LD_VAR 0 4
56092: PUSH
56093: LD_VAR 0 7
56097: ARRAY
56098: PPUSH
56099: LD_VAR 0 13
56103: PPUSH
56104: CALL_OW 128
56108: GO 56130
// ComMoveToArea ( group [ i ] , f_heal ) ;
56110: LD_VAR 0 4
56114: PUSH
56115: LD_VAR 0 7
56119: ARRAY
56120: PPUSH
56121: LD_VAR 0 23
56125: PPUSH
56126: CALL_OW 113
// end ; continue ;
56130: GO 55161
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56132: LD_VAR 0 4
56136: PUSH
56137: LD_VAR 0 7
56141: ARRAY
56142: PPUSH
56143: CALL_OW 256
56147: PUSH
56148: LD_INT 700
56150: LESS
56151: PUSH
56152: LD_VAR 0 4
56156: PUSH
56157: LD_VAR 0 7
56161: ARRAY
56162: PUSH
56163: LD_VAR 0 30
56167: IN
56168: NOT
56169: AND
56170: IFFALSE 56194
// to_heal := to_heal union group [ i ] ;
56172: LD_ADDR_VAR 0 30
56176: PUSH
56177: LD_VAR 0 30
56181: PUSH
56182: LD_VAR 0 4
56186: PUSH
56187: LD_VAR 0 7
56191: ARRAY
56192: UNION
56193: ST_TO_ADDR
// if group [ i ] in to_heal then
56194: LD_VAR 0 4
56198: PUSH
56199: LD_VAR 0 7
56203: ARRAY
56204: PUSH
56205: LD_VAR 0 30
56209: IN
56210: IFFALSE 56319
// begin if GetLives ( group [ i ] ) = 1000 then
56212: LD_VAR 0 4
56216: PUSH
56217: LD_VAR 0 7
56221: ARRAY
56222: PPUSH
56223: CALL_OW 256
56227: PUSH
56228: LD_INT 1000
56230: EQUAL
56231: IFFALSE 56257
// to_heal := to_heal diff group [ i ] else
56233: LD_ADDR_VAR 0 30
56237: PUSH
56238: LD_VAR 0 30
56242: PUSH
56243: LD_VAR 0 4
56247: PUSH
56248: LD_VAR 0 7
56252: ARRAY
56253: DIFF
56254: ST_TO_ADDR
56255: GO 56319
// begin if not IsInArea ( group [ i ] , to_heal ) then
56257: LD_VAR 0 4
56261: PUSH
56262: LD_VAR 0 7
56266: ARRAY
56267: PPUSH
56268: LD_VAR 0 30
56272: PPUSH
56273: CALL_OW 308
56277: NOT
56278: IFFALSE 56302
// ComMoveToArea ( group [ i ] , f_heal ) else
56280: LD_VAR 0 4
56284: PUSH
56285: LD_VAR 0 7
56289: ARRAY
56290: PPUSH
56291: LD_VAR 0 23
56295: PPUSH
56296: CALL_OW 113
56300: GO 56317
// ComHold ( group [ i ] ) ;
56302: LD_VAR 0 4
56306: PUSH
56307: LD_VAR 0 7
56311: ARRAY
56312: PPUSH
56313: CALL_OW 140
// continue ;
56317: GO 55161
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56319: LD_VAR 0 4
56323: PUSH
56324: LD_VAR 0 7
56328: ARRAY
56329: PPUSH
56330: LD_INT 10
56332: PPUSH
56333: CALL 52959 0 2
56337: NOT
56338: PUSH
56339: LD_VAR 0 16
56343: PUSH
56344: LD_VAR 0 7
56348: ARRAY
56349: PUSH
56350: EMPTY
56351: EQUAL
56352: NOT
56353: AND
56354: IFFALSE 56620
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56356: LD_VAR 0 4
56360: PUSH
56361: LD_VAR 0 7
56365: ARRAY
56366: PPUSH
56367: CALL_OW 262
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: IN
56382: IFFALSE 56423
// if GetFuel ( group [ i ] ) < 10 then
56384: LD_VAR 0 4
56388: PUSH
56389: LD_VAR 0 7
56393: ARRAY
56394: PPUSH
56395: CALL_OW 261
56399: PUSH
56400: LD_INT 10
56402: LESS
56403: IFFALSE 56423
// SetFuel ( group [ i ] , 12 ) ;
56405: LD_VAR 0 4
56409: PUSH
56410: LD_VAR 0 7
56414: ARRAY
56415: PPUSH
56416: LD_INT 12
56418: PPUSH
56419: CALL_OW 240
// if units_path [ i ] then
56423: LD_VAR 0 16
56427: PUSH
56428: LD_VAR 0 7
56432: ARRAY
56433: IFFALSE 56618
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56435: LD_VAR 0 4
56439: PUSH
56440: LD_VAR 0 7
56444: ARRAY
56445: PPUSH
56446: LD_VAR 0 16
56450: PUSH
56451: LD_VAR 0 7
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PUSH
56461: LD_INT 1
56463: ARRAY
56464: PPUSH
56465: LD_VAR 0 16
56469: PUSH
56470: LD_VAR 0 7
56474: ARRAY
56475: PUSH
56476: LD_INT 1
56478: ARRAY
56479: PUSH
56480: LD_INT 2
56482: ARRAY
56483: PPUSH
56484: CALL_OW 297
56488: PUSH
56489: LD_INT 6
56491: GREATER
56492: IFFALSE 56567
// begin if not HasTask ( group [ i ] ) then
56494: LD_VAR 0 4
56498: PUSH
56499: LD_VAR 0 7
56503: ARRAY
56504: PPUSH
56505: CALL_OW 314
56509: NOT
56510: IFFALSE 56565
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56512: LD_VAR 0 4
56516: PUSH
56517: LD_VAR 0 7
56521: ARRAY
56522: PPUSH
56523: LD_VAR 0 16
56527: PUSH
56528: LD_VAR 0 7
56532: ARRAY
56533: PUSH
56534: LD_INT 1
56536: ARRAY
56537: PUSH
56538: LD_INT 1
56540: ARRAY
56541: PPUSH
56542: LD_VAR 0 16
56546: PUSH
56547: LD_VAR 0 7
56551: ARRAY
56552: PUSH
56553: LD_INT 1
56555: ARRAY
56556: PUSH
56557: LD_INT 2
56559: ARRAY
56560: PPUSH
56561: CALL_OW 114
// end else
56565: GO 56618
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56567: LD_ADDR_VAR 0 15
56571: PUSH
56572: LD_VAR 0 16
56576: PUSH
56577: LD_VAR 0 7
56581: ARRAY
56582: PPUSH
56583: LD_INT 1
56585: PPUSH
56586: CALL_OW 3
56590: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56591: LD_ADDR_VAR 0 16
56595: PUSH
56596: LD_VAR 0 16
56600: PPUSH
56601: LD_VAR 0 7
56605: PPUSH
56606: LD_VAR 0 15
56610: PPUSH
56611: CALL_OW 1
56615: ST_TO_ADDR
// continue ;
56616: GO 55161
// end ; end ; end else
56618: GO 59256
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56620: LD_ADDR_VAR 0 14
56624: PUSH
56625: LD_INT 81
56627: PUSH
56628: LD_VAR 0 4
56632: PUSH
56633: LD_VAR 0 7
56637: ARRAY
56638: PPUSH
56639: CALL_OW 255
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PPUSH
56648: CALL_OW 69
56652: ST_TO_ADDR
// if not tmp then
56653: LD_VAR 0 14
56657: NOT
56658: IFFALSE 56662
// continue ;
56660: GO 55161
// if f_ignore_area then
56662: LD_VAR 0 17
56666: IFFALSE 56754
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56668: LD_ADDR_VAR 0 15
56672: PUSH
56673: LD_VAR 0 14
56677: PPUSH
56678: LD_INT 3
56680: PUSH
56681: LD_INT 92
56683: PUSH
56684: LD_VAR 0 17
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PUSH
56693: LD_VAR 0 17
56697: PUSH
56698: LD_INT 2
56700: ARRAY
56701: PUSH
56702: LD_VAR 0 17
56706: PUSH
56707: LD_INT 3
56709: ARRAY
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PPUSH
56721: CALL_OW 72
56725: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56726: LD_VAR 0 14
56730: PUSH
56731: LD_VAR 0 15
56735: DIFF
56736: IFFALSE 56754
// tmp := tmp diff tmp2 ;
56738: LD_ADDR_VAR 0 14
56742: PUSH
56743: LD_VAR 0 14
56747: PUSH
56748: LD_VAR 0 15
56752: DIFF
56753: ST_TO_ADDR
// end ; if not f_murder then
56754: LD_VAR 0 20
56758: NOT
56759: IFFALSE 56817
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56761: LD_ADDR_VAR 0 15
56765: PUSH
56766: LD_VAR 0 14
56770: PPUSH
56771: LD_INT 3
56773: PUSH
56774: LD_INT 50
56776: PUSH
56777: EMPTY
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PPUSH
56784: CALL_OW 72
56788: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56789: LD_VAR 0 14
56793: PUSH
56794: LD_VAR 0 15
56798: DIFF
56799: IFFALSE 56817
// tmp := tmp diff tmp2 ;
56801: LD_ADDR_VAR 0 14
56805: PUSH
56806: LD_VAR 0 14
56810: PUSH
56811: LD_VAR 0 15
56815: DIFF
56816: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56817: LD_ADDR_VAR 0 14
56821: PUSH
56822: LD_VAR 0 4
56826: PUSH
56827: LD_VAR 0 7
56831: ARRAY
56832: PPUSH
56833: LD_VAR 0 14
56837: PPUSH
56838: LD_INT 1
56840: PPUSH
56841: LD_INT 1
56843: PPUSH
56844: CALL 26841 0 4
56848: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56849: LD_VAR 0 4
56853: PUSH
56854: LD_VAR 0 7
56858: ARRAY
56859: PPUSH
56860: CALL_OW 257
56864: PUSH
56865: LD_INT 1
56867: EQUAL
56868: IFFALSE 57316
// begin if WantPlant ( group [ i ] ) then
56870: LD_VAR 0 4
56874: PUSH
56875: LD_VAR 0 7
56879: ARRAY
56880: PPUSH
56881: CALL 26309 0 1
56885: IFFALSE 56889
// continue ;
56887: GO 55161
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56889: LD_VAR 0 18
56893: PUSH
56894: LD_VAR 0 4
56898: PUSH
56899: LD_VAR 0 7
56903: ARRAY
56904: PPUSH
56905: CALL_OW 310
56909: NOT
56910: AND
56911: PUSH
56912: LD_VAR 0 14
56916: PUSH
56917: LD_INT 1
56919: ARRAY
56920: PUSH
56921: LD_VAR 0 14
56925: PPUSH
56926: LD_INT 21
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 58
56938: PUSH
56939: EMPTY
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PPUSH
56946: CALL_OW 72
56950: IN
56951: AND
56952: IFFALSE 56988
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56954: LD_VAR 0 4
56958: PUSH
56959: LD_VAR 0 7
56963: ARRAY
56964: PPUSH
56965: LD_VAR 0 14
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PPUSH
56974: CALL_OW 120
// attacking := true ;
56978: LD_ADDR_VAR 0 29
56982: PUSH
56983: LD_INT 1
56985: ST_TO_ADDR
// continue ;
56986: GO 55161
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56988: LD_VAR 0 26
56992: PUSH
56993: LD_VAR 0 4
56997: PUSH
56998: LD_VAR 0 7
57002: ARRAY
57003: PPUSH
57004: CALL_OW 257
57008: PUSH
57009: LD_INT 1
57011: EQUAL
57012: AND
57013: PUSH
57014: LD_VAR 0 4
57018: PUSH
57019: LD_VAR 0 7
57023: ARRAY
57024: PPUSH
57025: CALL_OW 256
57029: PUSH
57030: LD_INT 800
57032: LESS
57033: AND
57034: PUSH
57035: LD_VAR 0 4
57039: PUSH
57040: LD_VAR 0 7
57044: ARRAY
57045: PPUSH
57046: CALL_OW 318
57050: NOT
57051: AND
57052: IFFALSE 57069
// ComCrawl ( group [ i ] ) ;
57054: LD_VAR 0 4
57058: PUSH
57059: LD_VAR 0 7
57063: ARRAY
57064: PPUSH
57065: CALL_OW 137
// if f_mines then
57069: LD_VAR 0 21
57073: IFFALSE 57316
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57075: LD_VAR 0 14
57079: PUSH
57080: LD_INT 1
57082: ARRAY
57083: PPUSH
57084: CALL_OW 247
57088: PUSH
57089: LD_INT 3
57091: EQUAL
57092: PUSH
57093: LD_VAR 0 14
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: PUSH
57102: LD_VAR 0 27
57106: IN
57107: NOT
57108: AND
57109: IFFALSE 57316
// begin x := GetX ( tmp [ 1 ] ) ;
57111: LD_ADDR_VAR 0 10
57115: PUSH
57116: LD_VAR 0 14
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: PPUSH
57125: CALL_OW 250
57129: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57130: LD_ADDR_VAR 0 11
57134: PUSH
57135: LD_VAR 0 14
57139: PUSH
57140: LD_INT 1
57142: ARRAY
57143: PPUSH
57144: CALL_OW 251
57148: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57149: LD_ADDR_VAR 0 12
57153: PUSH
57154: LD_VAR 0 4
57158: PUSH
57159: LD_VAR 0 7
57163: ARRAY
57164: PPUSH
57165: CALL 53044 0 1
57169: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57170: LD_VAR 0 4
57174: PUSH
57175: LD_VAR 0 7
57179: ARRAY
57180: PPUSH
57181: LD_VAR 0 10
57185: PPUSH
57186: LD_VAR 0 11
57190: PPUSH
57191: LD_VAR 0 14
57195: PUSH
57196: LD_INT 1
57198: ARRAY
57199: PPUSH
57200: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57204: LD_VAR 0 4
57208: PUSH
57209: LD_VAR 0 7
57213: ARRAY
57214: PPUSH
57215: LD_VAR 0 10
57219: PPUSH
57220: LD_VAR 0 12
57224: PPUSH
57225: LD_INT 7
57227: PPUSH
57228: CALL_OW 272
57232: PPUSH
57233: LD_VAR 0 11
57237: PPUSH
57238: LD_VAR 0 12
57242: PPUSH
57243: LD_INT 7
57245: PPUSH
57246: CALL_OW 273
57250: PPUSH
57251: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57255: LD_VAR 0 4
57259: PUSH
57260: LD_VAR 0 7
57264: ARRAY
57265: PPUSH
57266: LD_INT 71
57268: PPUSH
57269: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57273: LD_ADDR_VAR 0 27
57277: PUSH
57278: LD_VAR 0 27
57282: PPUSH
57283: LD_VAR 0 27
57287: PUSH
57288: LD_INT 1
57290: PLUS
57291: PPUSH
57292: LD_VAR 0 14
57296: PUSH
57297: LD_INT 1
57299: ARRAY
57300: PPUSH
57301: CALL_OW 1
57305: ST_TO_ADDR
// attacking := true ;
57306: LD_ADDR_VAR 0 29
57310: PUSH
57311: LD_INT 1
57313: ST_TO_ADDR
// continue ;
57314: GO 55161
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57316: LD_VAR 0 4
57320: PUSH
57321: LD_VAR 0 7
57325: ARRAY
57326: PPUSH
57327: CALL_OW 257
57331: PUSH
57332: LD_INT 17
57334: EQUAL
57335: PUSH
57336: LD_VAR 0 4
57340: PUSH
57341: LD_VAR 0 7
57345: ARRAY
57346: PPUSH
57347: CALL_OW 110
57351: PUSH
57352: LD_INT 71
57354: EQUAL
57355: NOT
57356: AND
57357: IFFALSE 57503
// begin attacking := false ;
57359: LD_ADDR_VAR 0 29
57363: PUSH
57364: LD_INT 0
57366: ST_TO_ADDR
// k := 5 ;
57367: LD_ADDR_VAR 0 9
57371: PUSH
57372: LD_INT 5
57374: ST_TO_ADDR
// if tmp < k then
57375: LD_VAR 0 14
57379: PUSH
57380: LD_VAR 0 9
57384: LESS
57385: IFFALSE 57397
// k := tmp ;
57387: LD_ADDR_VAR 0 9
57391: PUSH
57392: LD_VAR 0 14
57396: ST_TO_ADDR
// for j = 1 to k do
57397: LD_ADDR_VAR 0 8
57401: PUSH
57402: DOUBLE
57403: LD_INT 1
57405: DEC
57406: ST_TO_ADDR
57407: LD_VAR 0 9
57411: PUSH
57412: FOR_TO
57413: IFFALSE 57501
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57415: LD_VAR 0 14
57419: PUSH
57420: LD_VAR 0 8
57424: ARRAY
57425: PUSH
57426: LD_VAR 0 14
57430: PPUSH
57431: LD_INT 58
57433: PUSH
57434: EMPTY
57435: LIST
57436: PPUSH
57437: CALL_OW 72
57441: IN
57442: NOT
57443: IFFALSE 57499
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57445: LD_VAR 0 4
57449: PUSH
57450: LD_VAR 0 7
57454: ARRAY
57455: PPUSH
57456: LD_VAR 0 14
57460: PUSH
57461: LD_VAR 0 8
57465: ARRAY
57466: PPUSH
57467: CALL_OW 115
// attacking := true ;
57471: LD_ADDR_VAR 0 29
57475: PUSH
57476: LD_INT 1
57478: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57479: LD_VAR 0 4
57483: PUSH
57484: LD_VAR 0 7
57488: ARRAY
57489: PPUSH
57490: LD_INT 71
57492: PPUSH
57493: CALL_OW 109
// continue ;
57497: GO 57412
// end ; end ;
57499: GO 57412
57501: POP
57502: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57503: LD_VAR 0 4
57507: PUSH
57508: LD_VAR 0 7
57512: ARRAY
57513: PPUSH
57514: CALL_OW 257
57518: PUSH
57519: LD_INT 8
57521: EQUAL
57522: PUSH
57523: LD_VAR 0 4
57527: PUSH
57528: LD_VAR 0 7
57532: ARRAY
57533: PPUSH
57534: CALL_OW 264
57538: PUSH
57539: LD_INT 28
57541: PUSH
57542: LD_INT 45
57544: PUSH
57545: LD_INT 7
57547: PUSH
57548: LD_INT 47
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: IN
57557: OR
57558: IFFALSE 57788
// begin attacking := false ;
57560: LD_ADDR_VAR 0 29
57564: PUSH
57565: LD_INT 0
57567: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57568: LD_VAR 0 14
57572: PUSH
57573: LD_INT 1
57575: ARRAY
57576: PPUSH
57577: CALL_OW 266
57581: PUSH
57582: LD_INT 32
57584: PUSH
57585: LD_INT 31
57587: PUSH
57588: LD_INT 33
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: IN
57604: IFFALSE 57788
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57606: LD_ADDR_VAR 0 9
57610: PUSH
57611: LD_VAR 0 14
57615: PUSH
57616: LD_INT 1
57618: ARRAY
57619: PPUSH
57620: CALL_OW 266
57624: PPUSH
57625: LD_VAR 0 14
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: PPUSH
57634: CALL_OW 250
57638: PPUSH
57639: LD_VAR 0 14
57643: PUSH
57644: LD_INT 1
57646: ARRAY
57647: PPUSH
57648: CALL_OW 251
57652: PPUSH
57653: LD_VAR 0 14
57657: PUSH
57658: LD_INT 1
57660: ARRAY
57661: PPUSH
57662: CALL_OW 254
57666: PPUSH
57667: LD_VAR 0 14
57671: PUSH
57672: LD_INT 1
57674: ARRAY
57675: PPUSH
57676: CALL_OW 248
57680: PPUSH
57681: LD_INT 0
57683: PPUSH
57684: CALL 34420 0 6
57688: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57689: LD_ADDR_VAR 0 8
57693: PUSH
57694: LD_VAR 0 4
57698: PUSH
57699: LD_VAR 0 7
57703: ARRAY
57704: PPUSH
57705: LD_VAR 0 9
57709: PPUSH
57710: CALL 53107 0 2
57714: ST_TO_ADDR
// if j then
57715: LD_VAR 0 8
57719: IFFALSE 57788
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57721: LD_VAR 0 8
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PPUSH
57730: LD_VAR 0 8
57734: PUSH
57735: LD_INT 2
57737: ARRAY
57738: PPUSH
57739: CALL_OW 488
57743: IFFALSE 57788
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57745: LD_VAR 0 4
57749: PUSH
57750: LD_VAR 0 7
57754: ARRAY
57755: PPUSH
57756: LD_VAR 0 8
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: PPUSH
57765: LD_VAR 0 8
57769: PUSH
57770: LD_INT 2
57772: ARRAY
57773: PPUSH
57774: CALL_OW 116
// attacking := true ;
57778: LD_ADDR_VAR 0 29
57782: PUSH
57783: LD_INT 1
57785: ST_TO_ADDR
// continue ;
57786: GO 55161
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57788: LD_VAR 0 4
57792: PUSH
57793: LD_VAR 0 7
57797: ARRAY
57798: PPUSH
57799: CALL_OW 265
57803: PUSH
57804: LD_INT 11
57806: EQUAL
57807: IFFALSE 58085
// begin k := 10 ;
57809: LD_ADDR_VAR 0 9
57813: PUSH
57814: LD_INT 10
57816: ST_TO_ADDR
// x := 0 ;
57817: LD_ADDR_VAR 0 10
57821: PUSH
57822: LD_INT 0
57824: ST_TO_ADDR
// if tmp < k then
57825: LD_VAR 0 14
57829: PUSH
57830: LD_VAR 0 9
57834: LESS
57835: IFFALSE 57847
// k := tmp ;
57837: LD_ADDR_VAR 0 9
57841: PUSH
57842: LD_VAR 0 14
57846: ST_TO_ADDR
// for j = k downto 1 do
57847: LD_ADDR_VAR 0 8
57851: PUSH
57852: DOUBLE
57853: LD_VAR 0 9
57857: INC
57858: ST_TO_ADDR
57859: LD_INT 1
57861: PUSH
57862: FOR_DOWNTO
57863: IFFALSE 57938
// begin if GetType ( tmp [ j ] ) = unit_human then
57865: LD_VAR 0 14
57869: PUSH
57870: LD_VAR 0 8
57874: ARRAY
57875: PPUSH
57876: CALL_OW 247
57880: PUSH
57881: LD_INT 1
57883: EQUAL
57884: IFFALSE 57936
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57886: LD_VAR 0 4
57890: PUSH
57891: LD_VAR 0 7
57895: ARRAY
57896: PPUSH
57897: LD_VAR 0 14
57901: PUSH
57902: LD_VAR 0 8
57906: ARRAY
57907: PPUSH
57908: CALL 53378 0 2
// x := tmp [ j ] ;
57912: LD_ADDR_VAR 0 10
57916: PUSH
57917: LD_VAR 0 14
57921: PUSH
57922: LD_VAR 0 8
57926: ARRAY
57927: ST_TO_ADDR
// attacking := true ;
57928: LD_ADDR_VAR 0 29
57932: PUSH
57933: LD_INT 1
57935: ST_TO_ADDR
// end ; end ;
57936: GO 57862
57938: POP
57939: POP
// if not x then
57940: LD_VAR 0 10
57944: NOT
57945: IFFALSE 58085
// begin attacking := true ;
57947: LD_ADDR_VAR 0 29
57951: PUSH
57952: LD_INT 1
57954: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57955: LD_VAR 0 4
57959: PUSH
57960: LD_VAR 0 7
57964: ARRAY
57965: PPUSH
57966: CALL_OW 250
57970: PPUSH
57971: LD_VAR 0 4
57975: PUSH
57976: LD_VAR 0 7
57980: ARRAY
57981: PPUSH
57982: CALL_OW 251
57986: PPUSH
57987: CALL_OW 546
57991: PUSH
57992: LD_INT 2
57994: ARRAY
57995: PUSH
57996: LD_VAR 0 14
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PPUSH
58005: CALL_OW 250
58009: PPUSH
58010: LD_VAR 0 14
58014: PUSH
58015: LD_INT 1
58017: ARRAY
58018: PPUSH
58019: CALL_OW 251
58023: PPUSH
58024: CALL_OW 546
58028: PUSH
58029: LD_INT 2
58031: ARRAY
58032: EQUAL
58033: IFFALSE 58061
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58035: LD_VAR 0 4
58039: PUSH
58040: LD_VAR 0 7
58044: ARRAY
58045: PPUSH
58046: LD_VAR 0 14
58050: PUSH
58051: LD_INT 1
58053: ARRAY
58054: PPUSH
58055: CALL 53378 0 2
58059: GO 58085
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58061: LD_VAR 0 4
58065: PUSH
58066: LD_VAR 0 7
58070: ARRAY
58071: PPUSH
58072: LD_VAR 0 14
58076: PUSH
58077: LD_INT 1
58079: ARRAY
58080: PPUSH
58081: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58085: LD_VAR 0 4
58089: PUSH
58090: LD_VAR 0 7
58094: ARRAY
58095: PPUSH
58096: CALL_OW 264
58100: PUSH
58101: LD_INT 29
58103: EQUAL
58104: IFFALSE 58470
// begin if WantsToAttack ( group [ i ] ) in bombed then
58106: LD_VAR 0 4
58110: PUSH
58111: LD_VAR 0 7
58115: ARRAY
58116: PPUSH
58117: CALL_OW 319
58121: PUSH
58122: LD_VAR 0 28
58126: IN
58127: IFFALSE 58131
// continue ;
58129: GO 55161
// k := 8 ;
58131: LD_ADDR_VAR 0 9
58135: PUSH
58136: LD_INT 8
58138: ST_TO_ADDR
// x := 0 ;
58139: LD_ADDR_VAR 0 10
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// if tmp < k then
58147: LD_VAR 0 14
58151: PUSH
58152: LD_VAR 0 9
58156: LESS
58157: IFFALSE 58169
// k := tmp ;
58159: LD_ADDR_VAR 0 9
58163: PUSH
58164: LD_VAR 0 14
58168: ST_TO_ADDR
// for j = 1 to k do
58169: LD_ADDR_VAR 0 8
58173: PUSH
58174: DOUBLE
58175: LD_INT 1
58177: DEC
58178: ST_TO_ADDR
58179: LD_VAR 0 9
58183: PUSH
58184: FOR_TO
58185: IFFALSE 58317
// begin if GetType ( tmp [ j ] ) = unit_building then
58187: LD_VAR 0 14
58191: PUSH
58192: LD_VAR 0 8
58196: ARRAY
58197: PPUSH
58198: CALL_OW 247
58202: PUSH
58203: LD_INT 3
58205: EQUAL
58206: IFFALSE 58315
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58208: LD_VAR 0 14
58212: PUSH
58213: LD_VAR 0 8
58217: ARRAY
58218: PUSH
58219: LD_VAR 0 28
58223: IN
58224: NOT
58225: PUSH
58226: LD_VAR 0 14
58230: PUSH
58231: LD_VAR 0 8
58235: ARRAY
58236: PPUSH
58237: CALL_OW 313
58241: AND
58242: IFFALSE 58315
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58244: LD_VAR 0 4
58248: PUSH
58249: LD_VAR 0 7
58253: ARRAY
58254: PPUSH
58255: LD_VAR 0 14
58259: PUSH
58260: LD_VAR 0 8
58264: ARRAY
58265: PPUSH
58266: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58270: LD_ADDR_VAR 0 28
58274: PUSH
58275: LD_VAR 0 28
58279: PPUSH
58280: LD_VAR 0 28
58284: PUSH
58285: LD_INT 1
58287: PLUS
58288: PPUSH
58289: LD_VAR 0 14
58293: PUSH
58294: LD_VAR 0 8
58298: ARRAY
58299: PPUSH
58300: CALL_OW 1
58304: ST_TO_ADDR
// attacking := true ;
58305: LD_ADDR_VAR 0 29
58309: PUSH
58310: LD_INT 1
58312: ST_TO_ADDR
// break ;
58313: GO 58317
// end ; end ;
58315: GO 58184
58317: POP
58318: POP
// if not attacking and f_attack_depot then
58319: LD_VAR 0 29
58323: NOT
58324: PUSH
58325: LD_VAR 0 25
58329: AND
58330: IFFALSE 58425
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58332: LD_ADDR_VAR 0 13
58336: PUSH
58337: LD_VAR 0 14
58341: PPUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 30
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 30
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: PPUSH
58370: CALL_OW 72
58374: ST_TO_ADDR
// if z then
58375: LD_VAR 0 13
58379: IFFALSE 58425
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58381: LD_VAR 0 4
58385: PUSH
58386: LD_VAR 0 7
58390: ARRAY
58391: PPUSH
58392: LD_VAR 0 13
58396: PPUSH
58397: LD_VAR 0 4
58401: PUSH
58402: LD_VAR 0 7
58406: ARRAY
58407: PPUSH
58408: CALL_OW 74
58412: PPUSH
58413: CALL_OW 115
// attacking := true ;
58417: LD_ADDR_VAR 0 29
58421: PUSH
58422: LD_INT 1
58424: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58425: LD_VAR 0 4
58429: PUSH
58430: LD_VAR 0 7
58434: ARRAY
58435: PPUSH
58436: CALL_OW 256
58440: PUSH
58441: LD_INT 500
58443: LESS
58444: IFFALSE 58470
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58446: LD_VAR 0 4
58450: PUSH
58451: LD_VAR 0 7
58455: ARRAY
58456: PPUSH
58457: LD_VAR 0 14
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: PPUSH
58466: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58470: LD_VAR 0 4
58474: PUSH
58475: LD_VAR 0 7
58479: ARRAY
58480: PPUSH
58481: CALL_OW 264
58485: PUSH
58486: LD_INT 49
58488: EQUAL
58489: IFFALSE 58610
// begin if not HasTask ( group [ i ] ) then
58491: LD_VAR 0 4
58495: PUSH
58496: LD_VAR 0 7
58500: ARRAY
58501: PPUSH
58502: CALL_OW 314
58506: NOT
58507: IFFALSE 58610
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58509: LD_ADDR_VAR 0 9
58513: PUSH
58514: LD_INT 81
58516: PUSH
58517: LD_VAR 0 4
58521: PUSH
58522: LD_VAR 0 7
58526: ARRAY
58527: PPUSH
58528: CALL_OW 255
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PPUSH
58537: CALL_OW 69
58541: PPUSH
58542: LD_VAR 0 4
58546: PUSH
58547: LD_VAR 0 7
58551: ARRAY
58552: PPUSH
58553: CALL_OW 74
58557: ST_TO_ADDR
// if k then
58558: LD_VAR 0 9
58562: IFFALSE 58610
// if GetDistUnits ( group [ i ] , k ) > 10 then
58564: LD_VAR 0 4
58568: PUSH
58569: LD_VAR 0 7
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 9
58579: PPUSH
58580: CALL_OW 296
58584: PUSH
58585: LD_INT 10
58587: GREATER
58588: IFFALSE 58610
// ComMoveUnit ( group [ i ] , k ) ;
58590: LD_VAR 0 4
58594: PUSH
58595: LD_VAR 0 7
58599: ARRAY
58600: PPUSH
58601: LD_VAR 0 9
58605: PPUSH
58606: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58610: LD_VAR 0 4
58614: PUSH
58615: LD_VAR 0 7
58619: ARRAY
58620: PPUSH
58621: CALL_OW 256
58625: PUSH
58626: LD_INT 250
58628: LESS
58629: PUSH
58630: LD_VAR 0 4
58634: PUSH
58635: LD_VAR 0 7
58639: ARRAY
58640: PUSH
58641: LD_INT 21
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 23
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PPUSH
58665: CALL_OW 69
58669: IN
58670: AND
58671: IFFALSE 58796
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58673: LD_ADDR_VAR 0 9
58677: PUSH
58678: LD_OWVAR 3
58682: PUSH
58683: LD_VAR 0 4
58687: PUSH
58688: LD_VAR 0 7
58692: ARRAY
58693: DIFF
58694: PPUSH
58695: LD_VAR 0 4
58699: PUSH
58700: LD_VAR 0 7
58704: ARRAY
58705: PPUSH
58706: CALL_OW 74
58710: ST_TO_ADDR
// if not k then
58711: LD_VAR 0 9
58715: NOT
58716: IFFALSE 58720
// continue ;
58718: GO 55161
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58720: LD_VAR 0 9
58724: PUSH
58725: LD_INT 81
58727: PUSH
58728: LD_VAR 0 4
58732: PUSH
58733: LD_VAR 0 7
58737: ARRAY
58738: PPUSH
58739: CALL_OW 255
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PPUSH
58748: CALL_OW 69
58752: IN
58753: PUSH
58754: LD_VAR 0 9
58758: PPUSH
58759: LD_VAR 0 4
58763: PUSH
58764: LD_VAR 0 7
58768: ARRAY
58769: PPUSH
58770: CALL_OW 296
58774: PUSH
58775: LD_INT 5
58777: LESS
58778: AND
58779: IFFALSE 58796
// ComAutodestruct ( group [ i ] ) ;
58781: LD_VAR 0 4
58785: PUSH
58786: LD_VAR 0 7
58790: ARRAY
58791: PPUSH
58792: CALL 53276 0 1
// end ; if f_attack_depot then
58796: LD_VAR 0 25
58800: IFFALSE 58912
// begin k := 6 ;
58802: LD_ADDR_VAR 0 9
58806: PUSH
58807: LD_INT 6
58809: ST_TO_ADDR
// if tmp < k then
58810: LD_VAR 0 14
58814: PUSH
58815: LD_VAR 0 9
58819: LESS
58820: IFFALSE 58832
// k := tmp ;
58822: LD_ADDR_VAR 0 9
58826: PUSH
58827: LD_VAR 0 14
58831: ST_TO_ADDR
// for j = 1 to k do
58832: LD_ADDR_VAR 0 8
58836: PUSH
58837: DOUBLE
58838: LD_INT 1
58840: DEC
58841: ST_TO_ADDR
58842: LD_VAR 0 9
58846: PUSH
58847: FOR_TO
58848: IFFALSE 58910
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58850: LD_VAR 0 8
58854: PPUSH
58855: CALL_OW 266
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: IN
58870: IFFALSE 58908
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58872: LD_VAR 0 4
58876: PUSH
58877: LD_VAR 0 7
58881: ARRAY
58882: PPUSH
58883: LD_VAR 0 14
58887: PUSH
58888: LD_VAR 0 8
58892: ARRAY
58893: PPUSH
58894: CALL_OW 115
// attacking := true ;
58898: LD_ADDR_VAR 0 29
58902: PUSH
58903: LD_INT 1
58905: ST_TO_ADDR
// break ;
58906: GO 58910
// end ;
58908: GO 58847
58910: POP
58911: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58912: LD_VAR 0 4
58916: PUSH
58917: LD_VAR 0 7
58921: ARRAY
58922: PPUSH
58923: CALL_OW 302
58927: PUSH
58928: LD_VAR 0 29
58932: NOT
58933: AND
58934: IFFALSE 59256
// begin if GetTag ( group [ i ] ) = 71 then
58936: LD_VAR 0 4
58940: PUSH
58941: LD_VAR 0 7
58945: ARRAY
58946: PPUSH
58947: CALL_OW 110
58951: PUSH
58952: LD_INT 71
58954: EQUAL
58955: IFFALSE 58996
// begin if HasTask ( group [ i ] ) then
58957: LD_VAR 0 4
58961: PUSH
58962: LD_VAR 0 7
58966: ARRAY
58967: PPUSH
58968: CALL_OW 314
58972: IFFALSE 58978
// continue else
58974: GO 55161
58976: GO 58996
// SetTag ( group [ i ] , 0 ) ;
58978: LD_VAR 0 4
58982: PUSH
58983: LD_VAR 0 7
58987: ARRAY
58988: PPUSH
58989: LD_INT 0
58991: PPUSH
58992: CALL_OW 109
// end ; k := 8 ;
58996: LD_ADDR_VAR 0 9
59000: PUSH
59001: LD_INT 8
59003: ST_TO_ADDR
// x := 0 ;
59004: LD_ADDR_VAR 0 10
59008: PUSH
59009: LD_INT 0
59011: ST_TO_ADDR
// if tmp < k then
59012: LD_VAR 0 14
59016: PUSH
59017: LD_VAR 0 9
59021: LESS
59022: IFFALSE 59034
// k := tmp ;
59024: LD_ADDR_VAR 0 9
59028: PUSH
59029: LD_VAR 0 14
59033: ST_TO_ADDR
// for j = 1 to k do
59034: LD_ADDR_VAR 0 8
59038: PUSH
59039: DOUBLE
59040: LD_INT 1
59042: DEC
59043: ST_TO_ADDR
59044: LD_VAR 0 9
59048: PUSH
59049: FOR_TO
59050: IFFALSE 59148
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59052: LD_VAR 0 14
59056: PUSH
59057: LD_VAR 0 8
59061: ARRAY
59062: PPUSH
59063: CALL_OW 247
59067: PUSH
59068: LD_INT 1
59070: EQUAL
59071: PUSH
59072: LD_VAR 0 14
59076: PUSH
59077: LD_VAR 0 8
59081: ARRAY
59082: PPUSH
59083: CALL_OW 256
59087: PUSH
59088: LD_INT 250
59090: LESS
59091: PUSH
59092: LD_VAR 0 20
59096: AND
59097: PUSH
59098: LD_VAR 0 20
59102: NOT
59103: PUSH
59104: LD_VAR 0 14
59108: PUSH
59109: LD_VAR 0 8
59113: ARRAY
59114: PPUSH
59115: CALL_OW 256
59119: PUSH
59120: LD_INT 250
59122: GREATEREQUAL
59123: AND
59124: OR
59125: AND
59126: IFFALSE 59146
// begin x := tmp [ j ] ;
59128: LD_ADDR_VAR 0 10
59132: PUSH
59133: LD_VAR 0 14
59137: PUSH
59138: LD_VAR 0 8
59142: ARRAY
59143: ST_TO_ADDR
// break ;
59144: GO 59148
// end ;
59146: GO 59049
59148: POP
59149: POP
// if x then
59150: LD_VAR 0 10
59154: IFFALSE 59178
// ComAttackUnit ( group [ i ] , x ) else
59156: LD_VAR 0 4
59160: PUSH
59161: LD_VAR 0 7
59165: ARRAY
59166: PPUSH
59167: LD_VAR 0 10
59171: PPUSH
59172: CALL_OW 115
59176: GO 59202
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59178: LD_VAR 0 4
59182: PUSH
59183: LD_VAR 0 7
59187: ARRAY
59188: PPUSH
59189: LD_VAR 0 14
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PPUSH
59198: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59202: LD_VAR 0 4
59206: PUSH
59207: LD_VAR 0 7
59211: ARRAY
59212: PPUSH
59213: CALL_OW 314
59217: NOT
59218: IFFALSE 59256
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59220: LD_VAR 0 4
59224: PUSH
59225: LD_VAR 0 7
59229: ARRAY
59230: PPUSH
59231: LD_VAR 0 14
59235: PPUSH
59236: LD_VAR 0 4
59240: PUSH
59241: LD_VAR 0 7
59245: ARRAY
59246: PPUSH
59247: CALL_OW 74
59251: PPUSH
59252: CALL_OW 115
// end ; end ; end ;
59256: GO 55161
59258: POP
59259: POP
// wait ( 0 0$1 ) ;
59260: LD_INT 35
59262: PPUSH
59263: CALL_OW 67
// until group = [ ] ;
59267: LD_VAR 0 4
59271: PUSH
59272: EMPTY
59273: EQUAL
59274: IFFALSE 55146
// end ;
59276: LD_VAR 0 2
59280: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59281: LD_INT 0
59283: PPUSH
59284: PPUSH
59285: PPUSH
59286: PPUSH
// if not base_units then
59287: LD_VAR 0 1
59291: NOT
59292: IFFALSE 59296
// exit ;
59294: GO 59383
// result := false ;
59296: LD_ADDR_VAR 0 2
59300: PUSH
59301: LD_INT 0
59303: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59304: LD_ADDR_VAR 0 5
59308: PUSH
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_INT 21
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PPUSH
59324: CALL_OW 72
59328: ST_TO_ADDR
// if not tmp then
59329: LD_VAR 0 5
59333: NOT
59334: IFFALSE 59338
// exit ;
59336: GO 59383
// for i in tmp do
59338: LD_ADDR_VAR 0 3
59342: PUSH
59343: LD_VAR 0 5
59347: PUSH
59348: FOR_IN
59349: IFFALSE 59381
// begin result := EnemyInRange ( i , 22 ) ;
59351: LD_ADDR_VAR 0 2
59355: PUSH
59356: LD_VAR 0 3
59360: PPUSH
59361: LD_INT 22
59363: PPUSH
59364: CALL 52959 0 2
59368: ST_TO_ADDR
// if result then
59369: LD_VAR 0 2
59373: IFFALSE 59379
// exit ;
59375: POP
59376: POP
59377: GO 59383
// end ;
59379: GO 59348
59381: POP
59382: POP
// end ;
59383: LD_VAR 0 2
59387: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59388: LD_INT 0
59390: PPUSH
59391: PPUSH
// if not units then
59392: LD_VAR 0 1
59396: NOT
59397: IFFALSE 59401
// exit ;
59399: GO 59471
// result := [ ] ;
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: EMPTY
59407: ST_TO_ADDR
// for i in units do
59408: LD_ADDR_VAR 0 4
59412: PUSH
59413: LD_VAR 0 1
59417: PUSH
59418: FOR_IN
59419: IFFALSE 59469
// if GetTag ( i ) = tag then
59421: LD_VAR 0 4
59425: PPUSH
59426: CALL_OW 110
59430: PUSH
59431: LD_VAR 0 2
59435: EQUAL
59436: IFFALSE 59467
// result := Insert ( result , result + 1 , i ) ;
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_VAR 0 3
59447: PPUSH
59448: LD_VAR 0 3
59452: PUSH
59453: LD_INT 1
59455: PLUS
59456: PPUSH
59457: LD_VAR 0 4
59461: PPUSH
59462: CALL_OW 2
59466: ST_TO_ADDR
59467: GO 59418
59469: POP
59470: POP
// end ;
59471: LD_VAR 0 3
59475: RET
// export function IsDriver ( un ) ; begin
59476: LD_INT 0
59478: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: LD_VAR 0 1
59488: PUSH
59489: LD_INT 55
59491: PUSH
59492: EMPTY
59493: LIST
59494: PPUSH
59495: CALL_OW 69
59499: IN
59500: ST_TO_ADDR
// end ;
59501: LD_VAR 0 2
59505: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59506: LD_INT 0
59508: PPUSH
59509: PPUSH
// list := [ ] ;
59510: LD_ADDR_VAR 0 5
59514: PUSH
59515: EMPTY
59516: ST_TO_ADDR
// case d of 0 :
59517: LD_VAR 0 3
59521: PUSH
59522: LD_INT 0
59524: DOUBLE
59525: EQUAL
59526: IFTRUE 59530
59528: GO 59663
59530: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59531: LD_ADDR_VAR 0 5
59535: PUSH
59536: LD_VAR 0 1
59540: PUSH
59541: LD_INT 4
59543: MINUS
59544: PUSH
59545: LD_VAR 0 2
59549: PUSH
59550: LD_INT 4
59552: MINUS
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: PUSH
59562: LD_VAR 0 1
59566: PUSH
59567: LD_INT 3
59569: MINUS
59570: PUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: PUSH
59584: LD_VAR 0 1
59588: PUSH
59589: LD_INT 4
59591: PLUS
59592: PUSH
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: PUSH
59606: LD_VAR 0 1
59610: PUSH
59611: LD_INT 3
59613: PLUS
59614: PUSH
59615: LD_VAR 0 2
59619: PUSH
59620: LD_INT 3
59622: PLUS
59623: PUSH
59624: LD_INT 5
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: PUSH
59632: LD_VAR 0 1
59636: PUSH
59637: LD_VAR 0 2
59641: PUSH
59642: LD_INT 4
59644: PLUS
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// end ; 1 :
59661: GO 60361
59663: LD_INT 1
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59671
59669: GO 59804
59671: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59672: LD_ADDR_VAR 0 5
59676: PUSH
59677: LD_VAR 0 1
59681: PUSH
59682: LD_VAR 0 2
59686: PUSH
59687: LD_INT 4
59689: MINUS
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: PUSH
59699: LD_VAR 0 1
59703: PUSH
59704: LD_INT 3
59706: MINUS
59707: PUSH
59708: LD_VAR 0 2
59712: PUSH
59713: LD_INT 3
59715: MINUS
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 4
59732: MINUS
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_VAR 0 1
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_INT 3
59759: PLUS
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: PUSH
59769: LD_VAR 0 1
59773: PUSH
59774: LD_INT 4
59776: PLUS
59777: PUSH
59778: LD_VAR 0 2
59782: PUSH
59783: LD_INT 4
59785: PLUS
59786: PUSH
59787: LD_INT 5
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: ST_TO_ADDR
// end ; 2 :
59802: GO 60361
59804: LD_INT 2
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59941
59812: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59813: LD_ADDR_VAR 0 5
59817: PUSH
59818: LD_VAR 0 1
59822: PUSH
59823: LD_VAR 0 2
59827: PUSH
59828: LD_INT 3
59830: MINUS
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: PUSH
59840: LD_VAR 0 1
59844: PUSH
59845: LD_INT 4
59847: PLUS
59848: PUSH
59849: LD_VAR 0 2
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: PUSH
59862: LD_VAR 0 1
59866: PUSH
59867: LD_VAR 0 2
59871: PUSH
59872: LD_INT 4
59874: PLUS
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: LIST
59883: PUSH
59884: LD_VAR 0 1
59888: PUSH
59889: LD_INT 3
59891: MINUS
59892: PUSH
59893: LD_VAR 0 2
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: PUSH
59906: LD_VAR 0 1
59910: PUSH
59911: LD_INT 4
59913: MINUS
59914: PUSH
59915: LD_VAR 0 2
59919: PUSH
59920: LD_INT 4
59922: MINUS
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// end ; 3 :
59939: GO 60361
59941: LD_INT 3
59943: DOUBLE
59944: EQUAL
59945: IFTRUE 59949
59947: GO 60082
59949: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59950: LD_ADDR_VAR 0 5
59954: PUSH
59955: LD_VAR 0 1
59959: PUSH
59960: LD_INT 3
59962: PLUS
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: PUSH
59977: LD_VAR 0 1
59981: PUSH
59982: LD_INT 4
59984: PLUS
59985: PUSH
59986: LD_VAR 0 2
59990: PUSH
59991: LD_INT 4
59993: PLUS
59994: PUSH
59995: LD_INT 5
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 1
60007: PUSH
60008: LD_INT 4
60010: MINUS
60011: PUSH
60012: LD_VAR 0 2
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: PUSH
60025: LD_VAR 0 1
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_INT 4
60037: MINUS
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: PUSH
60047: LD_VAR 0 1
60051: PUSH
60052: LD_INT 3
60054: MINUS
60055: PUSH
60056: LD_VAR 0 2
60060: PUSH
60061: LD_INT 3
60063: MINUS
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: ST_TO_ADDR
// end ; 4 :
60080: GO 60361
60082: LD_INT 4
60084: DOUBLE
60085: EQUAL
60086: IFTRUE 60090
60088: GO 60223
60090: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60091: LD_ADDR_VAR 0 5
60095: PUSH
60096: LD_VAR 0 1
60100: PUSH
60101: LD_VAR 0 2
60105: PUSH
60106: LD_INT 4
60108: PLUS
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: PUSH
60118: LD_VAR 0 1
60122: PUSH
60123: LD_INT 3
60125: PLUS
60126: PUSH
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 3
60134: PLUS
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: PUSH
60144: LD_VAR 0 1
60148: PUSH
60149: LD_INT 4
60151: PLUS
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: LD_VAR 0 1
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_INT 3
60178: MINUS
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: PUSH
60188: LD_VAR 0 1
60192: PUSH
60193: LD_INT 4
60195: MINUS
60196: PUSH
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 4
60204: MINUS
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: ST_TO_ADDR
// end ; 5 :
60221: GO 60361
60223: LD_INT 5
60225: DOUBLE
60226: EQUAL
60227: IFTRUE 60231
60229: GO 60360
60231: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60232: LD_ADDR_VAR 0 5
60236: PUSH
60237: LD_VAR 0 1
60241: PUSH
60242: LD_INT 4
60244: MINUS
60245: PUSH
60246: LD_VAR 0 2
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: PUSH
60259: LD_VAR 0 1
60263: PUSH
60264: LD_VAR 0 2
60268: PUSH
60269: LD_INT 4
60271: MINUS
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: PUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_INT 4
60288: PLUS
60289: PUSH
60290: LD_VAR 0 2
60294: PUSH
60295: LD_INT 4
60297: PLUS
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: PUSH
60307: LD_VAR 0 1
60311: PUSH
60312: LD_INT 3
60314: PLUS
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 4
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: PUSH
60329: LD_VAR 0 1
60333: PUSH
60334: LD_VAR 0 2
60338: PUSH
60339: LD_INT 3
60341: PLUS
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// end ; end ;
60358: GO 60361
60360: POP
// result := list ;
60361: LD_ADDR_VAR 0 4
60365: PUSH
60366: LD_VAR 0 5
60370: ST_TO_ADDR
// end ;
60371: LD_VAR 0 4
60375: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60376: LD_INT 0
60378: PPUSH
60379: PPUSH
60380: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60381: LD_VAR 0 1
60385: NOT
60386: PUSH
60387: LD_VAR 0 2
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: LD_INT 4
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: IN
60410: NOT
60411: OR
60412: IFFALSE 60416
// exit ;
60414: GO 60508
// tmp := [ ] ;
60416: LD_ADDR_VAR 0 5
60420: PUSH
60421: EMPTY
60422: ST_TO_ADDR
// for i in units do
60423: LD_ADDR_VAR 0 4
60427: PUSH
60428: LD_VAR 0 1
60432: PUSH
60433: FOR_IN
60434: IFFALSE 60477
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60436: LD_ADDR_VAR 0 5
60440: PUSH
60441: LD_VAR 0 5
60445: PPUSH
60446: LD_VAR 0 5
60450: PUSH
60451: LD_INT 1
60453: PLUS
60454: PPUSH
60455: LD_VAR 0 4
60459: PPUSH
60460: LD_VAR 0 2
60464: PPUSH
60465: CALL_OW 259
60469: PPUSH
60470: CALL_OW 2
60474: ST_TO_ADDR
60475: GO 60433
60477: POP
60478: POP
// if not tmp then
60479: LD_VAR 0 5
60483: NOT
60484: IFFALSE 60488
// exit ;
60486: GO 60508
// result := SortListByListDesc ( units , tmp ) ;
60488: LD_ADDR_VAR 0 3
60492: PUSH
60493: LD_VAR 0 1
60497: PPUSH
60498: LD_VAR 0 5
60502: PPUSH
60503: CALL_OW 77
60507: ST_TO_ADDR
// end ;
60508: LD_VAR 0 3
60512: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60513: LD_INT 0
60515: PPUSH
60516: PPUSH
60517: PPUSH
// x := GetX ( building ) ;
60518: LD_ADDR_VAR 0 4
60522: PUSH
60523: LD_VAR 0 2
60527: PPUSH
60528: CALL_OW 250
60532: ST_TO_ADDR
// y := GetY ( building ) ;
60533: LD_ADDR_VAR 0 5
60537: PUSH
60538: LD_VAR 0 2
60542: PPUSH
60543: CALL_OW 251
60547: ST_TO_ADDR
// if GetTaskList ( unit ) then
60548: LD_VAR 0 1
60552: PPUSH
60553: CALL_OW 437
60557: IFFALSE 60652
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60559: LD_STRING e
60561: PUSH
60562: LD_VAR 0 1
60566: PPUSH
60567: CALL_OW 437
60571: PUSH
60572: LD_INT 1
60574: ARRAY
60575: PUSH
60576: LD_INT 1
60578: ARRAY
60579: EQUAL
60580: PUSH
60581: LD_VAR 0 4
60585: PUSH
60586: LD_VAR 0 1
60590: PPUSH
60591: CALL_OW 437
60595: PUSH
60596: LD_INT 1
60598: ARRAY
60599: PUSH
60600: LD_INT 2
60602: ARRAY
60603: EQUAL
60604: AND
60605: PUSH
60606: LD_VAR 0 5
60610: PUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL_OW 437
60620: PUSH
60621: LD_INT 1
60623: ARRAY
60624: PUSH
60625: LD_INT 3
60627: ARRAY
60628: EQUAL
60629: AND
60630: IFFALSE 60642
// result := true else
60632: LD_ADDR_VAR 0 3
60636: PUSH
60637: LD_INT 1
60639: ST_TO_ADDR
60640: GO 60650
// result := false ;
60642: LD_ADDR_VAR 0 3
60646: PUSH
60647: LD_INT 0
60649: ST_TO_ADDR
// end else
60650: GO 60660
// result := false ;
60652: LD_ADDR_VAR 0 3
60656: PUSH
60657: LD_INT 0
60659: ST_TO_ADDR
// end ;
60660: LD_VAR 0 3
60664: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60665: LD_INT 0
60667: PPUSH
60668: PPUSH
60669: PPUSH
60670: PPUSH
// if not unit or not area then
60671: LD_VAR 0 1
60675: NOT
60676: PUSH
60677: LD_VAR 0 2
60681: NOT
60682: OR
60683: IFFALSE 60687
// exit ;
60685: GO 60852
// tmp := AreaToList ( area , i ) ;
60687: LD_ADDR_VAR 0 6
60691: PUSH
60692: LD_VAR 0 2
60696: PPUSH
60697: LD_VAR 0 5
60701: PPUSH
60702: CALL_OW 517
60706: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60707: LD_ADDR_VAR 0 5
60711: PUSH
60712: DOUBLE
60713: LD_INT 1
60715: DEC
60716: ST_TO_ADDR
60717: LD_VAR 0 6
60721: PUSH
60722: LD_INT 1
60724: ARRAY
60725: PUSH
60726: FOR_TO
60727: IFFALSE 60842
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60729: LD_ADDR_VAR 0 7
60733: PUSH
60734: LD_VAR 0 6
60738: PUSH
60739: LD_INT 1
60741: ARRAY
60742: PUSH
60743: LD_VAR 0 5
60747: ARRAY
60748: PUSH
60749: LD_VAR 0 6
60753: PUSH
60754: LD_INT 2
60756: ARRAY
60757: PUSH
60758: LD_VAR 0 5
60762: ARRAY
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60768: LD_VAR 0 7
60772: PUSH
60773: LD_INT 1
60775: ARRAY
60776: PPUSH
60777: LD_VAR 0 7
60781: PUSH
60782: LD_INT 2
60784: ARRAY
60785: PPUSH
60786: CALL_OW 428
60790: PUSH
60791: LD_INT 0
60793: EQUAL
60794: IFFALSE 60840
// begin result := true ;
60796: LD_ADDR_VAR 0 4
60800: PUSH
60801: LD_INT 1
60803: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60804: LD_VAR 0 1
60808: PPUSH
60809: LD_VAR 0 7
60813: PUSH
60814: LD_INT 1
60816: ARRAY
60817: PPUSH
60818: LD_VAR 0 7
60822: PUSH
60823: LD_INT 2
60825: ARRAY
60826: PPUSH
60827: LD_VAR 0 3
60831: PPUSH
60832: CALL_OW 48
// exit ;
60836: POP
60837: POP
60838: GO 60852
// end ; end ;
60840: GO 60726
60842: POP
60843: POP
// result := false ;
60844: LD_ADDR_VAR 0 4
60848: PUSH
60849: LD_INT 0
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 4
60856: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
60861: PPUSH
// if not side or side > 8 then
60862: LD_VAR 0 1
60866: NOT
60867: PUSH
60868: LD_VAR 0 1
60872: PUSH
60873: LD_INT 8
60875: GREATER
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 61068
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60881: LD_ADDR_VAR 0 4
60885: PUSH
60886: LD_INT 22
60888: PUSH
60889: LD_VAR 0 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 21
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PPUSH
60912: CALL_OW 69
60916: ST_TO_ADDR
// if not tmp then
60917: LD_VAR 0 4
60921: NOT
60922: IFFALSE 60926
// exit ;
60924: GO 61068
// enable_addtolog := true ;
60926: LD_ADDR_OWVAR 81
60930: PUSH
60931: LD_INT 1
60933: ST_TO_ADDR
// AddToLog ( [ ) ;
60934: LD_STRING [
60936: PPUSH
60937: CALL_OW 561
// for i in tmp do
60941: LD_ADDR_VAR 0 3
60945: PUSH
60946: LD_VAR 0 4
60950: PUSH
60951: FOR_IN
60952: IFFALSE 61059
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60954: LD_STRING [
60956: PUSH
60957: LD_VAR 0 3
60961: PPUSH
60962: CALL_OW 266
60966: STR
60967: PUSH
60968: LD_STRING , 
60970: STR
60971: PUSH
60972: LD_VAR 0 3
60976: PPUSH
60977: CALL_OW 250
60981: STR
60982: PUSH
60983: LD_STRING , 
60985: STR
60986: PUSH
60987: LD_VAR 0 3
60991: PPUSH
60992: CALL_OW 251
60996: STR
60997: PUSH
60998: LD_STRING , 
61000: STR
61001: PUSH
61002: LD_VAR 0 3
61006: PPUSH
61007: CALL_OW 254
61011: STR
61012: PUSH
61013: LD_STRING , 
61015: STR
61016: PUSH
61017: LD_VAR 0 3
61021: PPUSH
61022: LD_INT 1
61024: PPUSH
61025: CALL_OW 268
61029: STR
61030: PUSH
61031: LD_STRING , 
61033: STR
61034: PUSH
61035: LD_VAR 0 3
61039: PPUSH
61040: LD_INT 2
61042: PPUSH
61043: CALL_OW 268
61047: STR
61048: PUSH
61049: LD_STRING ],
61051: STR
61052: PPUSH
61053: CALL_OW 561
// end ;
61057: GO 60951
61059: POP
61060: POP
// AddToLog ( ]; ) ;
61061: LD_STRING ];
61063: PPUSH
61064: CALL_OW 561
// end ;
61068: LD_VAR 0 2
61072: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61073: LD_INT 0
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
// if not area or not rate or not max then
61080: LD_VAR 0 1
61084: NOT
61085: PUSH
61086: LD_VAR 0 2
61090: NOT
61091: OR
61092: PUSH
61093: LD_VAR 0 4
61097: NOT
61098: OR
61099: IFFALSE 61103
// exit ;
61101: GO 61295
// while 1 do
61103: LD_INT 1
61105: IFFALSE 61295
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61107: LD_ADDR_VAR 0 9
61111: PUSH
61112: LD_VAR 0 1
61116: PPUSH
61117: LD_INT 1
61119: PPUSH
61120: CALL_OW 287
61124: PUSH
61125: LD_INT 10
61127: MUL
61128: ST_TO_ADDR
// r := rate / 10 ;
61129: LD_ADDR_VAR 0 7
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 10
61141: DIVREAL
61142: ST_TO_ADDR
// time := 1 1$00 ;
61143: LD_ADDR_VAR 0 8
61147: PUSH
61148: LD_INT 2100
61150: ST_TO_ADDR
// if amount < min then
61151: LD_VAR 0 9
61155: PUSH
61156: LD_VAR 0 3
61160: LESS
61161: IFFALSE 61179
// r := r * 2 else
61163: LD_ADDR_VAR 0 7
61167: PUSH
61168: LD_VAR 0 7
61172: PUSH
61173: LD_INT 2
61175: MUL
61176: ST_TO_ADDR
61177: GO 61205
// if amount > max then
61179: LD_VAR 0 9
61183: PUSH
61184: LD_VAR 0 4
61188: GREATER
61189: IFFALSE 61205
// r := r / 2 ;
61191: LD_ADDR_VAR 0 7
61195: PUSH
61196: LD_VAR 0 7
61200: PUSH
61201: LD_INT 2
61203: DIVREAL
61204: ST_TO_ADDR
// time := time / r ;
61205: LD_ADDR_VAR 0 8
61209: PUSH
61210: LD_VAR 0 8
61214: PUSH
61215: LD_VAR 0 7
61219: DIVREAL
61220: ST_TO_ADDR
// if time < 0 then
61221: LD_VAR 0 8
61225: PUSH
61226: LD_INT 0
61228: LESS
61229: IFFALSE 61246
// time := time * - 1 ;
61231: LD_ADDR_VAR 0 8
61235: PUSH
61236: LD_VAR 0 8
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: MUL
61245: ST_TO_ADDR
// wait ( time ) ;
61246: LD_VAR 0 8
61250: PPUSH
61251: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61255: LD_INT 35
61257: PPUSH
61258: LD_INT 875
61260: PPUSH
61261: CALL_OW 12
61265: PPUSH
61266: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61270: LD_INT 1
61272: PPUSH
61273: LD_INT 5
61275: PPUSH
61276: CALL_OW 12
61280: PPUSH
61281: LD_VAR 0 1
61285: PPUSH
61286: LD_INT 1
61288: PPUSH
61289: CALL_OW 55
// end ;
61293: GO 61103
// end ;
61295: LD_VAR 0 5
61299: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
61306: PPUSH
61307: PPUSH
61308: PPUSH
61309: PPUSH
// if not turrets or not factories then
61310: LD_VAR 0 1
61314: NOT
61315: PUSH
61316: LD_VAR 0 2
61320: NOT
61321: OR
61322: IFFALSE 61326
// exit ;
61324: GO 61633
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61326: LD_ADDR_VAR 0 10
61330: PUSH
61331: LD_INT 5
61333: PUSH
61334: LD_INT 6
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 5
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 24
61368: PUSH
61369: LD_INT 25
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 23
61378: PUSH
61379: LD_INT 27
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 42
61392: PUSH
61393: LD_INT 43
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 44
61402: PUSH
61403: LD_INT 46
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 45
61412: PUSH
61413: LD_INT 47
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// result := [ ] ;
61430: LD_ADDR_VAR 0 3
61434: PUSH
61435: EMPTY
61436: ST_TO_ADDR
// for i in turrets do
61437: LD_ADDR_VAR 0 4
61441: PUSH
61442: LD_VAR 0 1
61446: PUSH
61447: FOR_IN
61448: IFFALSE 61631
// begin nat := GetNation ( i ) ;
61450: LD_ADDR_VAR 0 7
61454: PUSH
61455: LD_VAR 0 4
61459: PPUSH
61460: CALL_OW 248
61464: ST_TO_ADDR
// weapon := 0 ;
61465: LD_ADDR_VAR 0 8
61469: PUSH
61470: LD_INT 0
61472: ST_TO_ADDR
// if not nat then
61473: LD_VAR 0 7
61477: NOT
61478: IFFALSE 61482
// continue ;
61480: GO 61447
// for j in list [ nat ] do
61482: LD_ADDR_VAR 0 5
61486: PUSH
61487: LD_VAR 0 10
61491: PUSH
61492: LD_VAR 0 7
61496: ARRAY
61497: PUSH
61498: FOR_IN
61499: IFFALSE 61540
// if GetBWeapon ( i ) = j [ 1 ] then
61501: LD_VAR 0 4
61505: PPUSH
61506: CALL_OW 269
61510: PUSH
61511: LD_VAR 0 5
61515: PUSH
61516: LD_INT 1
61518: ARRAY
61519: EQUAL
61520: IFFALSE 61538
// begin weapon := j [ 2 ] ;
61522: LD_ADDR_VAR 0 8
61526: PUSH
61527: LD_VAR 0 5
61531: PUSH
61532: LD_INT 2
61534: ARRAY
61535: ST_TO_ADDR
// break ;
61536: GO 61540
// end ;
61538: GO 61498
61540: POP
61541: POP
// if not weapon then
61542: LD_VAR 0 8
61546: NOT
61547: IFFALSE 61551
// continue ;
61549: GO 61447
// for k in factories do
61551: LD_ADDR_VAR 0 6
61555: PUSH
61556: LD_VAR 0 2
61560: PUSH
61561: FOR_IN
61562: IFFALSE 61627
// begin weapons := AvailableWeaponList ( k ) ;
61564: LD_ADDR_VAR 0 9
61568: PUSH
61569: LD_VAR 0 6
61573: PPUSH
61574: CALL_OW 478
61578: ST_TO_ADDR
// if not weapons then
61579: LD_VAR 0 9
61583: NOT
61584: IFFALSE 61588
// continue ;
61586: GO 61561
// if weapon in weapons then
61588: LD_VAR 0 8
61592: PUSH
61593: LD_VAR 0 9
61597: IN
61598: IFFALSE 61625
// begin result := [ i , weapon ] ;
61600: LD_ADDR_VAR 0 3
61604: PUSH
61605: LD_VAR 0 4
61609: PUSH
61610: LD_VAR 0 8
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// exit ;
61619: POP
61620: POP
61621: POP
61622: POP
61623: GO 61633
// end ; end ;
61625: GO 61561
61627: POP
61628: POP
// end ;
61629: GO 61447
61631: POP
61632: POP
// end ; end_of_file
61633: LD_VAR 0 3
61637: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
61638: LD_INT 0
61640: PPUSH
61641: PPUSH
// skirmish := false ;
61642: LD_ADDR_EXP 68
61646: PUSH
61647: LD_INT 0
61649: ST_TO_ADDR
// mc_bases := [ ] ;
61650: LD_ADDR_EXP 69
61654: PUSH
61655: EMPTY
61656: ST_TO_ADDR
// mc_sides := [ ] ;
61657: LD_ADDR_EXP 95
61661: PUSH
61662: EMPTY
61663: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
61664: LD_ADDR_EXP 70
61668: PUSH
61669: EMPTY
61670: ST_TO_ADDR
// mc_building_repairs := [ ] ;
61671: LD_ADDR_EXP 71
61675: PUSH
61676: EMPTY
61677: ST_TO_ADDR
// mc_need_heal := [ ] ;
61678: LD_ADDR_EXP 72
61682: PUSH
61683: EMPTY
61684: ST_TO_ADDR
// mc_healers := [ ] ;
61685: LD_ADDR_EXP 73
61689: PUSH
61690: EMPTY
61691: ST_TO_ADDR
// mc_build_list := [ ] ;
61692: LD_ADDR_EXP 74
61696: PUSH
61697: EMPTY
61698: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
61699: LD_ADDR_EXP 101
61703: PUSH
61704: EMPTY
61705: ST_TO_ADDR
// mc_builders := [ ] ;
61706: LD_ADDR_EXP 75
61710: PUSH
61711: EMPTY
61712: ST_TO_ADDR
// mc_construct_list := [ ] ;
61713: LD_ADDR_EXP 76
61717: PUSH
61718: EMPTY
61719: ST_TO_ADDR
// mc_turret_list := [ ] ;
61720: LD_ADDR_EXP 77
61724: PUSH
61725: EMPTY
61726: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
61727: LD_ADDR_EXP 78
61731: PUSH
61732: EMPTY
61733: ST_TO_ADDR
// mc_miners := [ ] ;
61734: LD_ADDR_EXP 83
61738: PUSH
61739: EMPTY
61740: ST_TO_ADDR
// mc_mines := [ ] ;
61741: LD_ADDR_EXP 82
61745: PUSH
61746: EMPTY
61747: ST_TO_ADDR
// mc_minefields := [ ] ;
61748: LD_ADDR_EXP 84
61752: PUSH
61753: EMPTY
61754: ST_TO_ADDR
// mc_crates := [ ] ;
61755: LD_ADDR_EXP 85
61759: PUSH
61760: EMPTY
61761: ST_TO_ADDR
// mc_crates_collector := [ ] ;
61762: LD_ADDR_EXP 86
61766: PUSH
61767: EMPTY
61768: ST_TO_ADDR
// mc_crates_area := [ ] ;
61769: LD_ADDR_EXP 87
61773: PUSH
61774: EMPTY
61775: ST_TO_ADDR
// mc_vehicles := [ ] ;
61776: LD_ADDR_EXP 88
61780: PUSH
61781: EMPTY
61782: ST_TO_ADDR
// mc_attack := [ ] ;
61783: LD_ADDR_EXP 89
61787: PUSH
61788: EMPTY
61789: ST_TO_ADDR
// mc_produce := [ ] ;
61790: LD_ADDR_EXP 90
61794: PUSH
61795: EMPTY
61796: ST_TO_ADDR
// mc_defender := [ ] ;
61797: LD_ADDR_EXP 91
61801: PUSH
61802: EMPTY
61803: ST_TO_ADDR
// mc_parking := [ ] ;
61804: LD_ADDR_EXP 93
61808: PUSH
61809: EMPTY
61810: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
61811: LD_ADDR_EXP 79
61815: PUSH
61816: EMPTY
61817: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
61818: LD_ADDR_EXP 81
61822: PUSH
61823: EMPTY
61824: ST_TO_ADDR
// mc_scan := [ ] ;
61825: LD_ADDR_EXP 92
61829: PUSH
61830: EMPTY
61831: ST_TO_ADDR
// mc_scan_area := [ ] ;
61832: LD_ADDR_EXP 94
61836: PUSH
61837: EMPTY
61838: ST_TO_ADDR
// mc_tech := [ ] ;
61839: LD_ADDR_EXP 96
61843: PUSH
61844: EMPTY
61845: ST_TO_ADDR
// end ;
61846: LD_VAR 0 1
61850: RET
// export function MC_Kill ( base ) ; begin
61851: LD_INT 0
61853: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
61854: LD_ADDR_EXP 69
61858: PUSH
61859: LD_EXP 69
61863: PPUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: EMPTY
61870: PPUSH
61871: CALL_OW 1
61875: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
61876: LD_ADDR_EXP 70
61880: PUSH
61881: LD_EXP 70
61885: PPUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: EMPTY
61892: PPUSH
61893: CALL_OW 1
61897: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
61898: LD_ADDR_EXP 71
61902: PUSH
61903: LD_EXP 71
61907: PPUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: EMPTY
61914: PPUSH
61915: CALL_OW 1
61919: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
61920: LD_ADDR_EXP 72
61924: PUSH
61925: LD_EXP 72
61929: PPUSH
61930: LD_VAR 0 1
61934: PPUSH
61935: EMPTY
61936: PPUSH
61937: CALL_OW 1
61941: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
61942: LD_ADDR_EXP 73
61946: PUSH
61947: LD_EXP 73
61951: PPUSH
61952: LD_VAR 0 1
61956: PPUSH
61957: EMPTY
61958: PPUSH
61959: CALL_OW 1
61963: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
61964: LD_ADDR_EXP 74
61968: PUSH
61969: LD_EXP 74
61973: PPUSH
61974: LD_VAR 0 1
61978: PPUSH
61979: EMPTY
61980: PPUSH
61981: CALL_OW 1
61985: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
61986: LD_ADDR_EXP 75
61990: PUSH
61991: LD_EXP 75
61995: PPUSH
61996: LD_VAR 0 1
62000: PPUSH
62001: EMPTY
62002: PPUSH
62003: CALL_OW 1
62007: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62008: LD_ADDR_EXP 76
62012: PUSH
62013: LD_EXP 76
62017: PPUSH
62018: LD_VAR 0 1
62022: PPUSH
62023: EMPTY
62024: PPUSH
62025: CALL_OW 1
62029: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62030: LD_ADDR_EXP 77
62034: PUSH
62035: LD_EXP 77
62039: PPUSH
62040: LD_VAR 0 1
62044: PPUSH
62045: EMPTY
62046: PPUSH
62047: CALL_OW 1
62051: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62052: LD_ADDR_EXP 78
62056: PUSH
62057: LD_EXP 78
62061: PPUSH
62062: LD_VAR 0 1
62066: PPUSH
62067: EMPTY
62068: PPUSH
62069: CALL_OW 1
62073: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62074: LD_ADDR_EXP 79
62078: PUSH
62079: LD_EXP 79
62083: PPUSH
62084: LD_VAR 0 1
62088: PPUSH
62089: EMPTY
62090: PPUSH
62091: CALL_OW 1
62095: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62096: LD_ADDR_EXP 80
62100: PUSH
62101: LD_EXP 80
62105: PPUSH
62106: LD_VAR 0 1
62110: PPUSH
62111: LD_INT 0
62113: PPUSH
62114: CALL_OW 1
62118: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62119: LD_ADDR_EXP 81
62123: PUSH
62124: LD_EXP 81
62128: PPUSH
62129: LD_VAR 0 1
62133: PPUSH
62134: EMPTY
62135: PPUSH
62136: CALL_OW 1
62140: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62141: LD_ADDR_EXP 82
62145: PUSH
62146: LD_EXP 82
62150: PPUSH
62151: LD_VAR 0 1
62155: PPUSH
62156: EMPTY
62157: PPUSH
62158: CALL_OW 1
62162: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62163: LD_ADDR_EXP 83
62167: PUSH
62168: LD_EXP 83
62172: PPUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: EMPTY
62179: PPUSH
62180: CALL_OW 1
62184: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62185: LD_ADDR_EXP 84
62189: PUSH
62190: LD_EXP 84
62194: PPUSH
62195: LD_VAR 0 1
62199: PPUSH
62200: EMPTY
62201: PPUSH
62202: CALL_OW 1
62206: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62207: LD_ADDR_EXP 85
62211: PUSH
62212: LD_EXP 85
62216: PPUSH
62217: LD_VAR 0 1
62221: PPUSH
62222: EMPTY
62223: PPUSH
62224: CALL_OW 1
62228: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62229: LD_ADDR_EXP 86
62233: PUSH
62234: LD_EXP 86
62238: PPUSH
62239: LD_VAR 0 1
62243: PPUSH
62244: EMPTY
62245: PPUSH
62246: CALL_OW 1
62250: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62251: LD_ADDR_EXP 87
62255: PUSH
62256: LD_EXP 87
62260: PPUSH
62261: LD_VAR 0 1
62265: PPUSH
62266: EMPTY
62267: PPUSH
62268: CALL_OW 1
62272: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62273: LD_ADDR_EXP 88
62277: PUSH
62278: LD_EXP 88
62282: PPUSH
62283: LD_VAR 0 1
62287: PPUSH
62288: EMPTY
62289: PPUSH
62290: CALL_OW 1
62294: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62295: LD_ADDR_EXP 89
62299: PUSH
62300: LD_EXP 89
62304: PPUSH
62305: LD_VAR 0 1
62309: PPUSH
62310: EMPTY
62311: PPUSH
62312: CALL_OW 1
62316: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62317: LD_ADDR_EXP 90
62321: PUSH
62322: LD_EXP 90
62326: PPUSH
62327: LD_VAR 0 1
62331: PPUSH
62332: EMPTY
62333: PPUSH
62334: CALL_OW 1
62338: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62339: LD_ADDR_EXP 91
62343: PUSH
62344: LD_EXP 91
62348: PPUSH
62349: LD_VAR 0 1
62353: PPUSH
62354: EMPTY
62355: PPUSH
62356: CALL_OW 1
62360: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62361: LD_ADDR_EXP 92
62365: PUSH
62366: LD_EXP 92
62370: PPUSH
62371: LD_VAR 0 1
62375: PPUSH
62376: EMPTY
62377: PPUSH
62378: CALL_OW 1
62382: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62383: LD_ADDR_EXP 93
62387: PUSH
62388: LD_EXP 93
62392: PPUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: EMPTY
62399: PPUSH
62400: CALL_OW 1
62404: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62405: LD_ADDR_EXP 94
62409: PUSH
62410: LD_EXP 94
62414: PPUSH
62415: LD_VAR 0 1
62419: PPUSH
62420: EMPTY
62421: PPUSH
62422: CALL_OW 1
62426: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62427: LD_ADDR_EXP 96
62431: PUSH
62432: LD_EXP 96
62436: PPUSH
62437: LD_VAR 0 1
62441: PPUSH
62442: EMPTY
62443: PPUSH
62444: CALL_OW 1
62448: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62449: LD_ADDR_EXP 98
62453: PUSH
62454: LD_EXP 98
62458: PPUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: EMPTY
62465: PPUSH
62466: CALL_OW 1
62470: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62471: LD_ADDR_EXP 99
62475: PUSH
62476: LD_EXP 99
62480: PPUSH
62481: LD_VAR 0 1
62485: PPUSH
62486: EMPTY
62487: PPUSH
62488: CALL_OW 1
62492: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62493: LD_ADDR_EXP 100
62497: PUSH
62498: LD_EXP 100
62502: PPUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: EMPTY
62509: PPUSH
62510: CALL_OW 1
62514: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62515: LD_ADDR_EXP 101
62519: PUSH
62520: LD_EXP 101
62524: PPUSH
62525: LD_VAR 0 1
62529: PPUSH
62530: EMPTY
62531: PPUSH
62532: CALL_OW 1
62536: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
62537: LD_ADDR_EXP 102
62541: PUSH
62542: LD_EXP 102
62546: PPUSH
62547: LD_VAR 0 1
62551: PPUSH
62552: EMPTY
62553: PPUSH
62554: CALL_OW 1
62558: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62559: LD_ADDR_EXP 103
62563: PUSH
62564: LD_EXP 103
62568: PPUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: EMPTY
62575: PPUSH
62576: CALL_OW 1
62580: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62581: LD_ADDR_EXP 104
62585: PUSH
62586: LD_EXP 104
62590: PPUSH
62591: LD_VAR 0 1
62595: PPUSH
62596: EMPTY
62597: PPUSH
62598: CALL_OW 1
62602: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62603: LD_ADDR_EXP 105
62607: PUSH
62608: LD_EXP 105
62612: PPUSH
62613: LD_VAR 0 1
62617: PPUSH
62618: EMPTY
62619: PPUSH
62620: CALL_OW 1
62624: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62625: LD_ADDR_EXP 106
62629: PUSH
62630: LD_EXP 106
62634: PPUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: EMPTY
62641: PPUSH
62642: CALL_OW 1
62646: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62647: LD_ADDR_EXP 107
62651: PUSH
62652: LD_EXP 107
62656: PPUSH
62657: LD_VAR 0 1
62661: PPUSH
62662: EMPTY
62663: PPUSH
62664: CALL_OW 1
62668: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
62669: LD_ADDR_EXP 108
62673: PUSH
62674: LD_EXP 108
62678: PPUSH
62679: LD_VAR 0 1
62683: PPUSH
62684: EMPTY
62685: PPUSH
62686: CALL_OW 1
62690: ST_TO_ADDR
// end ;
62691: LD_VAR 0 2
62695: RET
// export function MC_Start ( ) ; var i ; begin
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
// for i = 1 to mc_bases do
62700: LD_ADDR_VAR 0 2
62704: PUSH
62705: DOUBLE
62706: LD_INT 1
62708: DEC
62709: ST_TO_ADDR
62710: LD_EXP 69
62714: PUSH
62715: FOR_TO
62716: IFFALSE 63649
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
62718: LD_ADDR_EXP 70
62722: PUSH
62723: LD_EXP 70
62727: PPUSH
62728: LD_VAR 0 2
62732: PPUSH
62733: EMPTY
62734: PPUSH
62735: CALL_OW 1
62739: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62740: LD_ADDR_EXP 71
62744: PUSH
62745: LD_EXP 71
62749: PPUSH
62750: LD_VAR 0 2
62754: PPUSH
62755: EMPTY
62756: PPUSH
62757: CALL_OW 1
62761: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
62762: LD_ADDR_EXP 72
62766: PUSH
62767: LD_EXP 72
62771: PPUSH
62772: LD_VAR 0 2
62776: PPUSH
62777: EMPTY
62778: PPUSH
62779: CALL_OW 1
62783: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
62784: LD_ADDR_EXP 73
62788: PUSH
62789: LD_EXP 73
62793: PPUSH
62794: LD_VAR 0 2
62798: PPUSH
62799: EMPTY
62800: PUSH
62801: EMPTY
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
62812: LD_ADDR_EXP 74
62816: PUSH
62817: LD_EXP 74
62821: PPUSH
62822: LD_VAR 0 2
62826: PPUSH
62827: EMPTY
62828: PPUSH
62829: CALL_OW 1
62833: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
62834: LD_ADDR_EXP 101
62838: PUSH
62839: LD_EXP 101
62843: PPUSH
62844: LD_VAR 0 2
62848: PPUSH
62849: EMPTY
62850: PPUSH
62851: CALL_OW 1
62855: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
62856: LD_ADDR_EXP 75
62860: PUSH
62861: LD_EXP 75
62865: PPUSH
62866: LD_VAR 0 2
62870: PPUSH
62871: EMPTY
62872: PPUSH
62873: CALL_OW 1
62877: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
62878: LD_ADDR_EXP 76
62882: PUSH
62883: LD_EXP 76
62887: PPUSH
62888: LD_VAR 0 2
62892: PPUSH
62893: EMPTY
62894: PPUSH
62895: CALL_OW 1
62899: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
62900: LD_ADDR_EXP 77
62904: PUSH
62905: LD_EXP 77
62909: PPUSH
62910: LD_VAR 0 2
62914: PPUSH
62915: EMPTY
62916: PPUSH
62917: CALL_OW 1
62921: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
62922: LD_ADDR_EXP 78
62926: PUSH
62927: LD_EXP 78
62931: PPUSH
62932: LD_VAR 0 2
62936: PPUSH
62937: LD_EXP 69
62941: PUSH
62942: LD_VAR 0 2
62946: ARRAY
62947: PPUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 30
62953: PUSH
62954: LD_INT 32
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 30
62963: PUSH
62964: LD_INT 31
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 58
62978: PUSH
62979: EMPTY
62980: LIST
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PPUSH
62986: CALL_OW 72
62990: PPUSH
62991: CALL_OW 1
62995: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
62996: LD_ADDR_EXP 79
63000: PUSH
63001: LD_EXP 79
63005: PPUSH
63006: LD_VAR 0 2
63010: PPUSH
63011: EMPTY
63012: PPUSH
63013: CALL_OW 1
63017: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
63018: LD_ADDR_EXP 83
63022: PUSH
63023: LD_EXP 83
63027: PPUSH
63028: LD_VAR 0 2
63032: PPUSH
63033: EMPTY
63034: PPUSH
63035: CALL_OW 1
63039: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
63040: LD_ADDR_EXP 82
63044: PUSH
63045: LD_EXP 82
63049: PPUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: EMPTY
63056: PPUSH
63057: CALL_OW 1
63061: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
63062: LD_ADDR_EXP 84
63066: PUSH
63067: LD_EXP 84
63071: PPUSH
63072: LD_VAR 0 2
63076: PPUSH
63077: EMPTY
63078: PPUSH
63079: CALL_OW 1
63083: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
63084: LD_ADDR_EXP 85
63088: PUSH
63089: LD_EXP 85
63093: PPUSH
63094: LD_VAR 0 2
63098: PPUSH
63099: EMPTY
63100: PPUSH
63101: CALL_OW 1
63105: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63106: LD_ADDR_EXP 86
63110: PUSH
63111: LD_EXP 86
63115: PPUSH
63116: LD_VAR 0 2
63120: PPUSH
63121: EMPTY
63122: PPUSH
63123: CALL_OW 1
63127: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
63128: LD_ADDR_EXP 87
63132: PUSH
63133: LD_EXP 87
63137: PPUSH
63138: LD_VAR 0 2
63142: PPUSH
63143: EMPTY
63144: PPUSH
63145: CALL_OW 1
63149: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
63150: LD_ADDR_EXP 88
63154: PUSH
63155: LD_EXP 88
63159: PPUSH
63160: LD_VAR 0 2
63164: PPUSH
63165: EMPTY
63166: PPUSH
63167: CALL_OW 1
63171: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
63172: LD_ADDR_EXP 89
63176: PUSH
63177: LD_EXP 89
63181: PPUSH
63182: LD_VAR 0 2
63186: PPUSH
63187: EMPTY
63188: PPUSH
63189: CALL_OW 1
63193: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
63194: LD_ADDR_EXP 90
63198: PUSH
63199: LD_EXP 90
63203: PPUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: EMPTY
63210: PPUSH
63211: CALL_OW 1
63215: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
63216: LD_ADDR_EXP 91
63220: PUSH
63221: LD_EXP 91
63225: PPUSH
63226: LD_VAR 0 2
63230: PPUSH
63231: EMPTY
63232: PPUSH
63233: CALL_OW 1
63237: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
63238: LD_ADDR_EXP 80
63242: PUSH
63243: LD_EXP 80
63247: PPUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: LD_INT 0
63255: PPUSH
63256: CALL_OW 1
63260: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
63261: LD_ADDR_EXP 93
63265: PUSH
63266: LD_EXP 93
63270: PPUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: LD_INT 0
63278: PPUSH
63279: CALL_OW 1
63283: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63284: LD_ADDR_EXP 81
63288: PUSH
63289: LD_EXP 81
63293: PPUSH
63294: LD_VAR 0 2
63298: PPUSH
63299: EMPTY
63300: PPUSH
63301: CALL_OW 1
63305: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
63306: LD_ADDR_EXP 92
63310: PUSH
63311: LD_EXP 92
63315: PPUSH
63316: LD_VAR 0 2
63320: PPUSH
63321: LD_INT 0
63323: PPUSH
63324: CALL_OW 1
63328: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
63329: LD_ADDR_EXP 94
63333: PUSH
63334: LD_EXP 94
63338: PPUSH
63339: LD_VAR 0 2
63343: PPUSH
63344: EMPTY
63345: PPUSH
63346: CALL_OW 1
63350: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
63351: LD_ADDR_EXP 97
63355: PUSH
63356: LD_EXP 97
63360: PPUSH
63361: LD_VAR 0 2
63365: PPUSH
63366: LD_INT 0
63368: PPUSH
63369: CALL_OW 1
63373: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
63374: LD_ADDR_EXP 98
63378: PUSH
63379: LD_EXP 98
63383: PPUSH
63384: LD_VAR 0 2
63388: PPUSH
63389: EMPTY
63390: PPUSH
63391: CALL_OW 1
63395: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
63396: LD_ADDR_EXP 99
63400: PUSH
63401: LD_EXP 99
63405: PPUSH
63406: LD_VAR 0 2
63410: PPUSH
63411: EMPTY
63412: PPUSH
63413: CALL_OW 1
63417: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
63418: LD_ADDR_EXP 100
63422: PUSH
63423: LD_EXP 100
63427: PPUSH
63428: LD_VAR 0 2
63432: PPUSH
63433: EMPTY
63434: PPUSH
63435: CALL_OW 1
63439: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
63440: LD_ADDR_EXP 102
63444: PUSH
63445: LD_EXP 102
63449: PPUSH
63450: LD_VAR 0 2
63454: PPUSH
63455: LD_EXP 69
63459: PUSH
63460: LD_VAR 0 2
63464: ARRAY
63465: PPUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 30
63471: PUSH
63472: LD_INT 6
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 30
63481: PUSH
63482: LD_INT 7
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 30
63491: PUSH
63492: LD_INT 8
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: PPUSH
63505: CALL_OW 72
63509: PPUSH
63510: CALL_OW 1
63514: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
63515: LD_ADDR_EXP 103
63519: PUSH
63520: LD_EXP 103
63524: PPUSH
63525: LD_VAR 0 2
63529: PPUSH
63530: EMPTY
63531: PPUSH
63532: CALL_OW 1
63536: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
63537: LD_ADDR_EXP 104
63541: PUSH
63542: LD_EXP 104
63546: PPUSH
63547: LD_VAR 0 2
63551: PPUSH
63552: EMPTY
63553: PPUSH
63554: CALL_OW 1
63558: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
63559: LD_ADDR_EXP 105
63563: PUSH
63564: LD_EXP 105
63568: PPUSH
63569: LD_VAR 0 2
63573: PPUSH
63574: EMPTY
63575: PPUSH
63576: CALL_OW 1
63580: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
63581: LD_ADDR_EXP 106
63585: PUSH
63586: LD_EXP 106
63590: PPUSH
63591: LD_VAR 0 2
63595: PPUSH
63596: EMPTY
63597: PPUSH
63598: CALL_OW 1
63602: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
63603: LD_ADDR_EXP 107
63607: PUSH
63608: LD_EXP 107
63612: PPUSH
63613: LD_VAR 0 2
63617: PPUSH
63618: EMPTY
63619: PPUSH
63620: CALL_OW 1
63624: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
63625: LD_ADDR_EXP 108
63629: PUSH
63630: LD_EXP 108
63634: PPUSH
63635: LD_VAR 0 2
63639: PPUSH
63640: EMPTY
63641: PPUSH
63642: CALL_OW 1
63646: ST_TO_ADDR
// end ;
63647: GO 62715
63649: POP
63650: POP
// MC_InitSides ( ) ;
63651: CALL 63937 0 0
// MC_InitResearch ( ) ;
63655: CALL 63676 0 0
// CustomInitMacro ( ) ;
63659: CALL 17796 0 0
// skirmish := true ;
63663: LD_ADDR_EXP 68
63667: PUSH
63668: LD_INT 1
63670: ST_TO_ADDR
// end ;
63671: LD_VAR 0 1
63675: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
63676: LD_INT 0
63678: PPUSH
63679: PPUSH
63680: PPUSH
63681: PPUSH
63682: PPUSH
63683: PPUSH
// if not mc_bases then
63684: LD_EXP 69
63688: NOT
63689: IFFALSE 63693
// exit ;
63691: GO 63932
// for i = 1 to 8 do
63693: LD_ADDR_VAR 0 2
63697: PUSH
63698: DOUBLE
63699: LD_INT 1
63701: DEC
63702: ST_TO_ADDR
63703: LD_INT 8
63705: PUSH
63706: FOR_TO
63707: IFFALSE 63733
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
63709: LD_ADDR_EXP 96
63713: PUSH
63714: LD_EXP 96
63718: PPUSH
63719: LD_VAR 0 2
63723: PPUSH
63724: EMPTY
63725: PPUSH
63726: CALL_OW 1
63730: ST_TO_ADDR
63731: GO 63706
63733: POP
63734: POP
// tmp := [ ] ;
63735: LD_ADDR_VAR 0 5
63739: PUSH
63740: EMPTY
63741: ST_TO_ADDR
// for i = 1 to mc_sides do
63742: LD_ADDR_VAR 0 2
63746: PUSH
63747: DOUBLE
63748: LD_INT 1
63750: DEC
63751: ST_TO_ADDR
63752: LD_EXP 95
63756: PUSH
63757: FOR_TO
63758: IFFALSE 63816
// if not mc_sides [ i ] in tmp then
63760: LD_EXP 95
63764: PUSH
63765: LD_VAR 0 2
63769: ARRAY
63770: PUSH
63771: LD_VAR 0 5
63775: IN
63776: NOT
63777: IFFALSE 63814
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
63779: LD_ADDR_VAR 0 5
63783: PUSH
63784: LD_VAR 0 5
63788: PPUSH
63789: LD_VAR 0 5
63793: PUSH
63794: LD_INT 1
63796: PLUS
63797: PPUSH
63798: LD_EXP 95
63802: PUSH
63803: LD_VAR 0 2
63807: ARRAY
63808: PPUSH
63809: CALL_OW 2
63813: ST_TO_ADDR
63814: GO 63757
63816: POP
63817: POP
// if not tmp then
63818: LD_VAR 0 5
63822: NOT
63823: IFFALSE 63827
// exit ;
63825: GO 63932
// for j in tmp do
63827: LD_ADDR_VAR 0 3
63831: PUSH
63832: LD_VAR 0 5
63836: PUSH
63837: FOR_IN
63838: IFFALSE 63930
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
63840: LD_ADDR_VAR 0 6
63844: PUSH
63845: LD_INT 22
63847: PUSH
63848: LD_VAR 0 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PPUSH
63857: CALL_OW 69
63861: ST_TO_ADDR
// if not un then
63862: LD_VAR 0 6
63866: NOT
63867: IFFALSE 63871
// continue ;
63869: GO 63837
// nation := GetNation ( un [ 1 ] ) ;
63871: LD_ADDR_VAR 0 4
63875: PUSH
63876: LD_VAR 0 6
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PPUSH
63885: CALL_OW 248
63889: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
63890: LD_ADDR_EXP 96
63894: PUSH
63895: LD_EXP 96
63899: PPUSH
63900: LD_VAR 0 3
63904: PPUSH
63905: LD_VAR 0 3
63909: PPUSH
63910: LD_VAR 0 4
63914: PPUSH
63915: LD_INT 1
63917: PPUSH
63918: CALL 19681 0 3
63922: PPUSH
63923: CALL_OW 1
63927: ST_TO_ADDR
// end ;
63928: GO 63837
63930: POP
63931: POP
// end ;
63932: LD_VAR 0 1
63936: RET
// export function MC_InitSides ( ) ; var i ; begin
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
// if not mc_bases then
63941: LD_EXP 69
63945: NOT
63946: IFFALSE 63950
// exit ;
63948: GO 64024
// for i = 1 to mc_bases do
63950: LD_ADDR_VAR 0 2
63954: PUSH
63955: DOUBLE
63956: LD_INT 1
63958: DEC
63959: ST_TO_ADDR
63960: LD_EXP 69
63964: PUSH
63965: FOR_TO
63966: IFFALSE 64022
// if mc_bases [ i ] then
63968: LD_EXP 69
63972: PUSH
63973: LD_VAR 0 2
63977: ARRAY
63978: IFFALSE 64020
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
63980: LD_ADDR_EXP 95
63984: PUSH
63985: LD_EXP 95
63989: PPUSH
63990: LD_VAR 0 2
63994: PPUSH
63995: LD_EXP 69
63999: PUSH
64000: LD_VAR 0 2
64004: ARRAY
64005: PUSH
64006: LD_INT 1
64008: ARRAY
64009: PPUSH
64010: CALL_OW 255
64014: PPUSH
64015: CALL_OW 1
64019: ST_TO_ADDR
64020: GO 63965
64022: POP
64023: POP
// end ;
64024: LD_VAR 0 1
64028: RET
// every 0 0$01 trigger skirmish do
64029: LD_EXP 68
64033: IFFALSE 64166
64035: GO 64037
64037: DISABLE
// begin enable ;
64038: ENABLE
// MC_CheckBuildings ( ) ;
64039: CALL 64651 0 0
// MC_CheckPeopleLife ( ) ;
64043: CALL 64776 0 0
// RaiseSailEvent ( 103 ) ;
64047: LD_INT 103
64049: PPUSH
64050: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
64054: LD_INT 104
64056: PPUSH
64057: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
64061: LD_INT 105
64063: PPUSH
64064: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
64068: LD_INT 106
64070: PPUSH
64071: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
64075: LD_INT 107
64077: PPUSH
64078: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
64082: LD_INT 108
64084: PPUSH
64085: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
64089: LD_INT 109
64091: PPUSH
64092: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
64096: LD_INT 110
64098: PPUSH
64099: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
64103: LD_INT 111
64105: PPUSH
64106: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
64110: LD_INT 112
64112: PPUSH
64113: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
64117: LD_INT 120
64119: PPUSH
64120: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
64124: LD_INT 121
64126: PPUSH
64127: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
64131: LD_INT 122
64133: PPUSH
64134: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
64138: LD_INT 123
64140: PPUSH
64141: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
64145: LD_INT 125
64147: PPUSH
64148: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
64152: LD_INT 126
64154: PPUSH
64155: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
64159: LD_INT 200
64161: PPUSH
64162: CALL_OW 427
// end ;
64166: END
// every 10 trigger skirmish do var i ;
64167: LD_EXP 68
64171: IFFALSE 64270
64173: GO 64175
64175: DISABLE
64176: LD_INT 0
64178: PPUSH
// begin enable ;
64179: ENABLE
// if not mc_bases then
64180: LD_EXP 69
64184: NOT
64185: IFFALSE 64189
// exit ;
64187: GO 64270
// for i = 1 to mc_bases do
64189: LD_ADDR_VAR 0 1
64193: PUSH
64194: DOUBLE
64195: LD_INT 1
64197: DEC
64198: ST_TO_ADDR
64199: LD_EXP 69
64203: PUSH
64204: FOR_TO
64205: IFFALSE 64268
// if mc_mines [ i ] and mc_miners [ i ] then
64207: LD_EXP 82
64211: PUSH
64212: LD_VAR 0 1
64216: ARRAY
64217: PUSH
64218: LD_EXP 83
64222: PUSH
64223: LD_VAR 0 1
64227: ARRAY
64228: AND
64229: IFFALSE 64266
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
64231: LD_EXP 83
64235: PUSH
64236: LD_VAR 0 1
64240: ARRAY
64241: PUSH
64242: LD_INT 1
64244: ARRAY
64245: PPUSH
64246: CALL_OW 255
64250: PPUSH
64251: LD_EXP 82
64255: PUSH
64256: LD_VAR 0 1
64260: ARRAY
64261: PPUSH
64262: CALL 23430 0 2
64266: GO 64204
64268: POP
64269: POP
// end ;
64270: PPOPN 1
64272: END
// on SailEvent ( event ) do begin if event = 101 then
64273: LD_VAR 0 1
64277: PUSH
64278: LD_INT 101
64280: EQUAL
64281: IFFALSE 64287
// MC_RepairBuildings ( ) ;
64283: CALL 65334 0 0
// if event = 102 then
64287: LD_VAR 0 1
64291: PUSH
64292: LD_INT 102
64294: EQUAL
64295: IFFALSE 64301
// MC_Heal ( ) ;
64297: CALL 65740 0 0
// if event = 103 then
64301: LD_VAR 0 1
64305: PUSH
64306: LD_INT 103
64308: EQUAL
64309: IFFALSE 64315
// MC_Build ( ) ;
64311: CALL 66162 0 0
// if event = 104 then
64315: LD_VAR 0 1
64319: PUSH
64320: LD_INT 104
64322: EQUAL
64323: IFFALSE 64329
// MC_TurretWeapon ( ) ;
64325: CALL 67601 0 0
// if event = 105 then
64329: LD_VAR 0 1
64333: PUSH
64334: LD_INT 105
64336: EQUAL
64337: IFFALSE 64343
// MC_BuildUpgrade ( ) ;
64339: CALL 67152 0 0
// if event = 106 then
64343: LD_VAR 0 1
64347: PUSH
64348: LD_INT 106
64350: EQUAL
64351: IFFALSE 64357
// MC_PlantMines ( ) ;
64353: CALL 67953 0 0
// if event = 107 then
64357: LD_VAR 0 1
64361: PUSH
64362: LD_INT 107
64364: EQUAL
64365: IFFALSE 64371
// MC_CollectCrates ( ) ;
64367: CALL 68960 0 0
// if event = 108 then
64371: LD_VAR 0 1
64375: PUSH
64376: LD_INT 108
64378: EQUAL
64379: IFFALSE 64385
// MC_LinkRemoteControl ( ) ;
64381: CALL 70464 0 0
// if event = 109 then
64385: LD_VAR 0 1
64389: PUSH
64390: LD_INT 109
64392: EQUAL
64393: IFFALSE 64399
// MC_ProduceVehicle ( ) ;
64395: CALL 70645 0 0
// if event = 110 then
64399: LD_VAR 0 1
64403: PUSH
64404: LD_INT 110
64406: EQUAL
64407: IFFALSE 64413
// MC_SendAttack ( ) ;
64409: CALL 71126 0 0
// if event = 111 then
64413: LD_VAR 0 1
64417: PUSH
64418: LD_INT 111
64420: EQUAL
64421: IFFALSE 64427
// MC_Defend ( ) ;
64423: CALL 71234 0 0
// if event = 112 then
64427: LD_VAR 0 1
64431: PUSH
64432: LD_INT 112
64434: EQUAL
64435: IFFALSE 64441
// MC_Research ( ) ;
64437: CALL 71632 0 0
// if event = 120 then
64441: LD_VAR 0 1
64445: PUSH
64446: LD_INT 120
64448: EQUAL
64449: IFFALSE 64455
// MC_RepairVehicle ( ) ;
64451: CALL 72601 0 0
// if event = 121 then
64455: LD_VAR 0 1
64459: PUSH
64460: LD_INT 121
64462: EQUAL
64463: IFFALSE 64469
// MC_TameApe ( ) ;
64465: CALL 73290 0 0
// if event = 122 then
64469: LD_VAR 0 1
64473: PUSH
64474: LD_INT 122
64476: EQUAL
64477: IFFALSE 64483
// MC_ChangeApeClass ( ) ;
64479: CALL 74053 0 0
// if event = 123 then
64483: LD_VAR 0 1
64487: PUSH
64488: LD_INT 123
64490: EQUAL
64491: IFFALSE 64497
// MC_Bazooka ( ) ;
64493: CALL 74687 0 0
// if event = 124 then
64497: LD_VAR 0 1
64501: PUSH
64502: LD_INT 124
64504: EQUAL
64505: IFFALSE 64511
// MC_TeleportExit ( ) ;
64507: CALL 74885 0 0
// if event = 125 then
64511: LD_VAR 0 1
64515: PUSH
64516: LD_INT 125
64518: EQUAL
64519: IFFALSE 64525
// MC_Deposits ( ) ;
64521: CALL 74927 0 0
// if event = 126 then
64525: LD_VAR 0 1
64529: PUSH
64530: LD_INT 126
64532: EQUAL
64533: IFFALSE 64539
// MC_RemoteDriver ( ) ;
64535: CALL 75506 0 0
// if event = 200 then
64539: LD_VAR 0 1
64543: PUSH
64544: LD_INT 200
64546: EQUAL
64547: IFFALSE 64553
// MC_Idle ( ) ;
64549: CALL 77011 0 0
// end ;
64553: PPOPN 1
64555: END
// export function MC_Reset ( base , tag ) ; var i ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
// if not mc_bases [ base ] or not tag then
64560: LD_EXP 69
64564: PUSH
64565: LD_VAR 0 1
64569: ARRAY
64570: NOT
64571: PUSH
64572: LD_VAR 0 2
64576: NOT
64577: OR
64578: IFFALSE 64582
// exit ;
64580: GO 64646
// for i in mc_bases [ base ] union mc_ape [ base ] do
64582: LD_ADDR_VAR 0 4
64586: PUSH
64587: LD_EXP 69
64591: PUSH
64592: LD_VAR 0 1
64596: ARRAY
64597: PUSH
64598: LD_EXP 98
64602: PUSH
64603: LD_VAR 0 1
64607: ARRAY
64608: UNION
64609: PUSH
64610: FOR_IN
64611: IFFALSE 64644
// if GetTag ( i ) = tag then
64613: LD_VAR 0 4
64617: PPUSH
64618: CALL_OW 110
64622: PUSH
64623: LD_VAR 0 2
64627: EQUAL
64628: IFFALSE 64642
// SetTag ( i , 0 ) ;
64630: LD_VAR 0 4
64634: PPUSH
64635: LD_INT 0
64637: PPUSH
64638: CALL_OW 109
64642: GO 64610
64644: POP
64645: POP
// end ;
64646: LD_VAR 0 3
64650: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64651: LD_INT 0
64653: PPUSH
64654: PPUSH
64655: PPUSH
// if not mc_bases then
64656: LD_EXP 69
64660: NOT
64661: IFFALSE 64665
// exit ;
64663: GO 64771
// for i = 1 to mc_bases do
64665: LD_ADDR_VAR 0 2
64669: PUSH
64670: DOUBLE
64671: LD_INT 1
64673: DEC
64674: ST_TO_ADDR
64675: LD_EXP 69
64679: PUSH
64680: FOR_TO
64681: IFFALSE 64762
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64683: LD_ADDR_VAR 0 3
64687: PUSH
64688: LD_EXP 69
64692: PUSH
64693: LD_VAR 0 2
64697: ARRAY
64698: PPUSH
64699: LD_INT 21
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: PUSH
64712: LD_INT 24
64714: PUSH
64715: LD_INT 1000
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PPUSH
64730: CALL_OW 72
64734: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64735: LD_ADDR_EXP 70
64739: PUSH
64740: LD_EXP 70
64744: PPUSH
64745: LD_VAR 0 2
64749: PPUSH
64750: LD_VAR 0 3
64754: PPUSH
64755: CALL_OW 1
64759: ST_TO_ADDR
// end ;
64760: GO 64680
64762: POP
64763: POP
// RaiseSailEvent ( 101 ) ;
64764: LD_INT 101
64766: PPUSH
64767: CALL_OW 427
// end ;
64771: LD_VAR 0 1
64775: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64776: LD_INT 0
64778: PPUSH
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
64783: PPUSH
64784: PPUSH
// if not mc_bases then
64785: LD_EXP 69
64789: NOT
64790: IFFALSE 64794
// exit ;
64792: GO 65329
// for i = 1 to mc_bases do
64794: LD_ADDR_VAR 0 2
64798: PUSH
64799: DOUBLE
64800: LD_INT 1
64802: DEC
64803: ST_TO_ADDR
64804: LD_EXP 69
64808: PUSH
64809: FOR_TO
64810: IFFALSE 65320
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
64812: LD_ADDR_VAR 0 5
64816: PUSH
64817: LD_EXP 69
64821: PUSH
64822: LD_VAR 0 2
64826: ARRAY
64827: PUSH
64828: LD_EXP 98
64832: PUSH
64833: LD_VAR 0 2
64837: ARRAY
64838: UNION
64839: PPUSH
64840: LD_INT 21
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: LD_INT 54
64858: PUSH
64859: EMPTY
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 24
64871: PUSH
64872: LD_INT 700
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PPUSH
64892: CALL_OW 72
64896: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64897: LD_ADDR_VAR 0 6
64901: PUSH
64902: LD_EXP 69
64906: PUSH
64907: LD_VAR 0 2
64911: ARRAY
64912: PPUSH
64913: LD_INT 21
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 54
64931: PUSH
64932: EMPTY
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 3
64941: PUSH
64942: LD_INT 24
64944: PUSH
64945: LD_INT 250
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PPUSH
64965: CALL_OW 72
64969: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64970: LD_ADDR_VAR 0 7
64974: PUSH
64975: LD_VAR 0 5
64979: PUSH
64980: LD_VAR 0 6
64984: DIFF
64985: ST_TO_ADDR
// if not need_heal_1 then
64986: LD_VAR 0 6
64990: NOT
64991: IFFALSE 65024
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
64993: LD_ADDR_EXP 72
64997: PUSH
64998: LD_EXP 72
65002: PPUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PPUSH
65015: EMPTY
65016: PPUSH
65017: CALL 26808 0 3
65021: ST_TO_ADDR
65022: GO 65056
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
65024: LD_ADDR_EXP 72
65028: PUSH
65029: LD_EXP 72
65033: PPUSH
65034: LD_VAR 0 2
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PPUSH
65046: LD_VAR 0 6
65050: PPUSH
65051: CALL 26808 0 3
65055: ST_TO_ADDR
// if not need_heal_2 then
65056: LD_VAR 0 7
65060: NOT
65061: IFFALSE 65094
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
65063: LD_ADDR_EXP 72
65067: PUSH
65068: LD_EXP 72
65072: PPUSH
65073: LD_VAR 0 2
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PPUSH
65085: EMPTY
65086: PPUSH
65087: CALL 26808 0 3
65091: ST_TO_ADDR
65092: GO 65126
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
65094: LD_ADDR_EXP 72
65098: PUSH
65099: LD_EXP 72
65103: PPUSH
65104: LD_VAR 0 2
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PPUSH
65116: LD_VAR 0 7
65120: PPUSH
65121: CALL 26808 0 3
65125: ST_TO_ADDR
// if need_heal_2 then
65126: LD_VAR 0 7
65130: IFFALSE 65302
// for j in need_heal_2 do
65132: LD_ADDR_VAR 0 3
65136: PUSH
65137: LD_VAR 0 7
65141: PUSH
65142: FOR_IN
65143: IFFALSE 65300
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
65145: LD_ADDR_VAR 0 5
65149: PUSH
65150: LD_EXP 69
65154: PUSH
65155: LD_VAR 0 2
65159: ARRAY
65160: PPUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 30
65166: PUSH
65167: LD_INT 6
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 30
65176: PUSH
65177: LD_INT 7
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 30
65186: PUSH
65187: LD_INT 8
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 30
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 30
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 25
65216: PUSH
65217: LD_INT 4
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: PPUSH
65233: CALL_OW 72
65237: ST_TO_ADDR
// if tmp then
65238: LD_VAR 0 5
65242: IFFALSE 65298
// begin k := NearestUnitToUnit ( tmp , j ) ;
65244: LD_ADDR_VAR 0 4
65248: PUSH
65249: LD_VAR 0 5
65253: PPUSH
65254: LD_VAR 0 3
65258: PPUSH
65259: CALL_OW 74
65263: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
65264: LD_VAR 0 3
65268: PPUSH
65269: LD_VAR 0 4
65273: PPUSH
65274: CALL_OW 296
65278: PUSH
65279: LD_INT 7
65281: GREATER
65282: IFFALSE 65298
// ComMoveUnit ( j , k ) ;
65284: LD_VAR 0 3
65288: PPUSH
65289: LD_VAR 0 4
65293: PPUSH
65294: CALL_OW 112
// end ; end ;
65298: GO 65142
65300: POP
65301: POP
// if not need_heal_1 and not need_heal_2 then
65302: LD_VAR 0 6
65306: NOT
65307: PUSH
65308: LD_VAR 0 7
65312: NOT
65313: AND
65314: IFFALSE 65318
// continue ;
65316: GO 64809
// end ;
65318: GO 64809
65320: POP
65321: POP
// RaiseSailEvent ( 102 ) ;
65322: LD_INT 102
65324: PPUSH
65325: CALL_OW 427
// end ;
65329: LD_VAR 0 1
65333: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
65334: LD_INT 0
65336: PPUSH
65337: PPUSH
65338: PPUSH
65339: PPUSH
65340: PPUSH
// if not mc_bases then
65341: LD_EXP 69
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65735
// for i = 1 to mc_bases do
65350: LD_ADDR_VAR 0 2
65354: PUSH
65355: DOUBLE
65356: LD_INT 1
65358: DEC
65359: ST_TO_ADDR
65360: LD_EXP 69
65364: PUSH
65365: FOR_TO
65366: IFFALSE 65733
// begin if not mc_building_need_repair [ i ] then
65368: LD_EXP 70
65372: PUSH
65373: LD_VAR 0 2
65377: ARRAY
65378: NOT
65379: IFFALSE 65417
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
65381: LD_ADDR_EXP 71
65385: PUSH
65386: LD_EXP 71
65390: PPUSH
65391: LD_VAR 0 2
65395: PPUSH
65396: EMPTY
65397: PPUSH
65398: CALL_OW 1
65402: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
65403: LD_VAR 0 2
65407: PPUSH
65408: LD_INT 101
65410: PPUSH
65411: CALL 64556 0 2
// continue ;
65415: GO 65365
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
65417: LD_ADDR_EXP 75
65421: PUSH
65422: LD_EXP 75
65426: PPUSH
65427: LD_VAR 0 2
65431: PPUSH
65432: EMPTY
65433: PPUSH
65434: CALL_OW 1
65438: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65439: LD_VAR 0 2
65443: PPUSH
65444: LD_INT 103
65446: PPUSH
65447: CALL 64556 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: LD_EXP 69
65460: PUSH
65461: LD_VAR 0 2
65465: ARRAY
65466: PUSH
65467: LD_EXP 98
65471: PUSH
65472: LD_VAR 0 2
65476: ARRAY
65477: UNION
65478: PPUSH
65479: LD_INT 2
65481: PUSH
65482: LD_INT 25
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 25
65494: PUSH
65495: LD_INT 16
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: PPUSH
65510: CALL_OW 72
65514: ST_TO_ADDR
// if not tmp then
65515: LD_VAR 0 5
65519: NOT
65520: IFFALSE 65524
// continue ;
65522: GO 65365
// for j in tmp do
65524: LD_ADDR_VAR 0 3
65528: PUSH
65529: LD_VAR 0 5
65533: PUSH
65534: FOR_IN
65535: IFFALSE 65729
// begin if mc_need_heal [ i ] then
65537: LD_EXP 72
65541: PUSH
65542: LD_VAR 0 2
65546: ARRAY
65547: IFFALSE 65595
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
65549: LD_VAR 0 3
65553: PUSH
65554: LD_EXP 72
65558: PUSH
65559: LD_VAR 0 2
65563: ARRAY
65564: PUSH
65565: LD_INT 1
65567: ARRAY
65568: IN
65569: PUSH
65570: LD_VAR 0 3
65574: PUSH
65575: LD_EXP 72
65579: PUSH
65580: LD_VAR 0 2
65584: ARRAY
65585: PUSH
65586: LD_INT 2
65588: ARRAY
65589: IN
65590: OR
65591: IFFALSE 65595
// continue ;
65593: GO 65534
// if IsInUnit ( j ) then
65595: LD_VAR 0 3
65599: PPUSH
65600: CALL_OW 310
65604: IFFALSE 65615
// ComExitBuilding ( j ) ;
65606: LD_VAR 0 3
65610: PPUSH
65611: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65615: LD_VAR 0 3
65619: PUSH
65620: LD_EXP 71
65624: PUSH
65625: LD_VAR 0 2
65629: ARRAY
65630: IN
65631: NOT
65632: IFFALSE 65690
// begin SetTag ( j , 101 ) ;
65634: LD_VAR 0 3
65638: PPUSH
65639: LD_INT 101
65641: PPUSH
65642: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65646: LD_ADDR_EXP 71
65650: PUSH
65651: LD_EXP 71
65655: PPUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_EXP 71
65665: PUSH
65666: LD_VAR 0 2
65670: ARRAY
65671: PUSH
65672: LD_INT 1
65674: PLUS
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PPUSH
65680: LD_VAR 0 3
65684: PPUSH
65685: CALL 26808 0 3
65689: ST_TO_ADDR
// end ; Wait ( 3 ) ;
65690: LD_INT 3
65692: PPUSH
65693: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
65697: LD_VAR 0 3
65701: PPUSH
65702: LD_EXP 70
65706: PUSH
65707: LD_VAR 0 2
65711: ARRAY
65712: PPUSH
65713: LD_VAR 0 3
65717: PPUSH
65718: CALL_OW 74
65722: PPUSH
65723: CALL_OW 130
// end ;
65727: GO 65534
65729: POP
65730: POP
// end ;
65731: GO 65365
65733: POP
65734: POP
// end ;
65735: LD_VAR 0 1
65739: RET
// export function MC_Heal ; var i , j , tmp ; begin
65740: LD_INT 0
65742: PPUSH
65743: PPUSH
65744: PPUSH
65745: PPUSH
// if not mc_bases then
65746: LD_EXP 69
65750: NOT
65751: IFFALSE 65755
// exit ;
65753: GO 66157
// for i = 1 to mc_bases do
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: DOUBLE
65761: LD_INT 1
65763: DEC
65764: ST_TO_ADDR
65765: LD_EXP 69
65769: PUSH
65770: FOR_TO
65771: IFFALSE 66155
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65773: LD_EXP 72
65777: PUSH
65778: LD_VAR 0 2
65782: ARRAY
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: NOT
65788: PUSH
65789: LD_EXP 72
65793: PUSH
65794: LD_VAR 0 2
65798: ARRAY
65799: PUSH
65800: LD_INT 2
65802: ARRAY
65803: NOT
65804: AND
65805: IFFALSE 65843
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65807: LD_ADDR_EXP 73
65811: PUSH
65812: LD_EXP 73
65816: PPUSH
65817: LD_VAR 0 2
65821: PPUSH
65822: EMPTY
65823: PPUSH
65824: CALL_OW 1
65828: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65829: LD_VAR 0 2
65833: PPUSH
65834: LD_INT 102
65836: PPUSH
65837: CALL 64556 0 2
// continue ;
65841: GO 65770
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65843: LD_ADDR_VAR 0 4
65847: PUSH
65848: LD_EXP 69
65852: PUSH
65853: LD_VAR 0 2
65857: ARRAY
65858: PPUSH
65859: LD_INT 25
65861: PUSH
65862: LD_INT 4
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PPUSH
65869: CALL_OW 72
65873: ST_TO_ADDR
// if not tmp then
65874: LD_VAR 0 4
65878: NOT
65879: IFFALSE 65883
// continue ;
65881: GO 65770
// if mc_taming [ i ] then
65883: LD_EXP 100
65887: PUSH
65888: LD_VAR 0 2
65892: ARRAY
65893: IFFALSE 65917
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65895: LD_ADDR_EXP 100
65899: PUSH
65900: LD_EXP 100
65904: PPUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: EMPTY
65911: PPUSH
65912: CALL_OW 1
65916: ST_TO_ADDR
// for j in tmp do
65917: LD_ADDR_VAR 0 3
65921: PUSH
65922: LD_VAR 0 4
65926: PUSH
65927: FOR_IN
65928: IFFALSE 66151
// begin if IsInUnit ( j ) then
65930: LD_VAR 0 3
65934: PPUSH
65935: CALL_OW 310
65939: IFFALSE 65950
// ComExitBuilding ( j ) ;
65941: LD_VAR 0 3
65945: PPUSH
65946: CALL_OW 122
// if not j in mc_healers [ i ] then
65950: LD_VAR 0 3
65954: PUSH
65955: LD_EXP 73
65959: PUSH
65960: LD_VAR 0 2
65964: ARRAY
65965: IN
65966: NOT
65967: IFFALSE 66013
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65969: LD_ADDR_EXP 73
65973: PUSH
65974: LD_EXP 73
65978: PPUSH
65979: LD_VAR 0 2
65983: PUSH
65984: LD_EXP 73
65988: PUSH
65989: LD_VAR 0 2
65993: ARRAY
65994: PUSH
65995: LD_INT 1
65997: PLUS
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PPUSH
66003: LD_VAR 0 3
66007: PPUSH
66008: CALL 26808 0 3
66012: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
66013: LD_VAR 0 3
66017: PPUSH
66018: CALL_OW 110
66022: PUSH
66023: LD_INT 102
66025: NONEQUAL
66026: IFFALSE 66040
// SetTag ( j , 102 ) ;
66028: LD_VAR 0 3
66032: PPUSH
66033: LD_INT 102
66035: PPUSH
66036: CALL_OW 109
// Wait ( 3 ) ;
66040: LD_INT 3
66042: PPUSH
66043: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
66047: LD_EXP 72
66051: PUSH
66052: LD_VAR 0 2
66056: ARRAY
66057: PUSH
66058: LD_INT 1
66060: ARRAY
66061: IFFALSE 66093
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
66063: LD_VAR 0 3
66067: PPUSH
66068: LD_EXP 72
66072: PUSH
66073: LD_VAR 0 2
66077: ARRAY
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: CALL_OW 128
66091: GO 66149
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
66093: LD_VAR 0 3
66097: PPUSH
66098: CALL_OW 314
66102: NOT
66103: PUSH
66104: LD_EXP 72
66108: PUSH
66109: LD_VAR 0 2
66113: ARRAY
66114: PUSH
66115: LD_INT 2
66117: ARRAY
66118: AND
66119: IFFALSE 66149
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66121: LD_VAR 0 3
66125: PPUSH
66126: LD_EXP 72
66130: PUSH
66131: LD_VAR 0 2
66135: ARRAY
66136: PUSH
66137: LD_INT 2
66139: ARRAY
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: PPUSH
66145: CALL_OW 128
// end ;
66149: GO 65927
66151: POP
66152: POP
// end ;
66153: GO 65770
66155: POP
66156: POP
// end ;
66157: LD_VAR 0 1
66161: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66162: LD_INT 0
66164: PPUSH
66165: PPUSH
66166: PPUSH
66167: PPUSH
66168: PPUSH
// if not mc_bases then
66169: LD_EXP 69
66173: NOT
66174: IFFALSE 66178
// exit ;
66176: GO 67147
// for i = 1 to mc_bases do
66178: LD_ADDR_VAR 0 2
66182: PUSH
66183: DOUBLE
66184: LD_INT 1
66186: DEC
66187: ST_TO_ADDR
66188: LD_EXP 69
66192: PUSH
66193: FOR_TO
66194: IFFALSE 67145
// begin if mc_scan [ i ] then
66196: LD_EXP 92
66200: PUSH
66201: LD_VAR 0 2
66205: ARRAY
66206: IFFALSE 66210
// continue ;
66208: GO 66193
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66210: LD_EXP 74
66214: PUSH
66215: LD_VAR 0 2
66219: ARRAY
66220: NOT
66221: PUSH
66222: LD_EXP 76
66226: PUSH
66227: LD_VAR 0 2
66231: ARRAY
66232: NOT
66233: AND
66234: PUSH
66235: LD_EXP 75
66239: PUSH
66240: LD_VAR 0 2
66244: ARRAY
66245: AND
66246: IFFALSE 66284
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66248: LD_ADDR_EXP 75
66252: PUSH
66253: LD_EXP 75
66257: PPUSH
66258: LD_VAR 0 2
66262: PPUSH
66263: EMPTY
66264: PPUSH
66265: CALL_OW 1
66269: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66270: LD_VAR 0 2
66274: PPUSH
66275: LD_INT 103
66277: PPUSH
66278: CALL 64556 0 2
// continue ;
66282: GO 66193
// end ; if mc_construct_list [ i ] then
66284: LD_EXP 76
66288: PUSH
66289: LD_VAR 0 2
66293: ARRAY
66294: IFFALSE 66514
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66296: LD_ADDR_VAR 0 4
66300: PUSH
66301: LD_EXP 69
66305: PUSH
66306: LD_VAR 0 2
66310: ARRAY
66311: PPUSH
66312: LD_INT 25
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PPUSH
66322: CALL_OW 72
66326: PUSH
66327: LD_EXP 71
66331: PUSH
66332: LD_VAR 0 2
66336: ARRAY
66337: DIFF
66338: ST_TO_ADDR
// if not tmp then
66339: LD_VAR 0 4
66343: NOT
66344: IFFALSE 66348
// continue ;
66346: GO 66193
// for j in tmp do
66348: LD_ADDR_VAR 0 3
66352: PUSH
66353: LD_VAR 0 4
66357: PUSH
66358: FOR_IN
66359: IFFALSE 66510
// begin if not mc_builders [ i ] then
66361: LD_EXP 75
66365: PUSH
66366: LD_VAR 0 2
66370: ARRAY
66371: NOT
66372: IFFALSE 66430
// begin SetTag ( j , 103 ) ;
66374: LD_VAR 0 3
66378: PPUSH
66379: LD_INT 103
66381: PPUSH
66382: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66386: LD_ADDR_EXP 75
66390: PUSH
66391: LD_EXP 75
66395: PPUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_EXP 75
66405: PUSH
66406: LD_VAR 0 2
66410: ARRAY
66411: PUSH
66412: LD_INT 1
66414: PLUS
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PPUSH
66420: LD_VAR 0 3
66424: PPUSH
66425: CALL 26808 0 3
66429: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66430: LD_VAR 0 3
66434: PPUSH
66435: CALL_OW 310
66439: IFFALSE 66450
// ComExitBuilding ( j ) ;
66441: LD_VAR 0 3
66445: PPUSH
66446: CALL_OW 122
// wait ( 3 ) ;
66450: LD_INT 3
66452: PPUSH
66453: CALL_OW 67
// if not mc_construct_list [ i ] then
66457: LD_EXP 76
66461: PUSH
66462: LD_VAR 0 2
66466: ARRAY
66467: NOT
66468: IFFALSE 66472
// break ;
66470: GO 66510
// if not HasTask ( j ) then
66472: LD_VAR 0 3
66476: PPUSH
66477: CALL_OW 314
66481: NOT
66482: IFFALSE 66508
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66484: LD_VAR 0 3
66488: PPUSH
66489: LD_EXP 76
66493: PUSH
66494: LD_VAR 0 2
66498: ARRAY
66499: PUSH
66500: LD_INT 1
66502: ARRAY
66503: PPUSH
66504: CALL 29244 0 2
// end ;
66508: GO 66358
66510: POP
66511: POP
// end else
66512: GO 67143
// if mc_build_list [ i ] then
66514: LD_EXP 74
66518: PUSH
66519: LD_VAR 0 2
66523: ARRAY
66524: IFFALSE 67143
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66526: LD_ADDR_VAR 0 5
66530: PUSH
66531: LD_EXP 69
66535: PUSH
66536: LD_VAR 0 2
66540: ARRAY
66541: PPUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 30
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 30
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: PPUSH
66570: CALL_OW 72
66574: ST_TO_ADDR
// if depot then
66575: LD_VAR 0 5
66579: IFFALSE 66597
// depot := depot [ 1 ] else
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_VAR 0 5
66590: PUSH
66591: LD_INT 1
66593: ARRAY
66594: ST_TO_ADDR
66595: GO 66605
// depot := 0 ;
66597: LD_ADDR_VAR 0 5
66601: PUSH
66602: LD_INT 0
66604: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66605: LD_EXP 74
66609: PUSH
66610: LD_VAR 0 2
66614: ARRAY
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PUSH
66620: LD_INT 1
66622: ARRAY
66623: PUSH
66624: LD_INT 0
66626: EQUAL
66627: PUSH
66628: LD_VAR 0 5
66632: PUSH
66633: LD_VAR 0 5
66637: PPUSH
66638: LD_EXP 74
66642: PUSH
66643: LD_VAR 0 2
66647: ARRAY
66648: PUSH
66649: LD_INT 1
66651: ARRAY
66652: PUSH
66653: LD_INT 1
66655: ARRAY
66656: PPUSH
66657: LD_EXP 74
66661: PUSH
66662: LD_VAR 0 2
66666: ARRAY
66667: PUSH
66668: LD_INT 1
66670: ARRAY
66671: PUSH
66672: LD_INT 2
66674: ARRAY
66675: PPUSH
66676: LD_EXP 74
66680: PUSH
66681: LD_VAR 0 2
66685: ARRAY
66686: PUSH
66687: LD_INT 1
66689: ARRAY
66690: PUSH
66691: LD_INT 3
66693: ARRAY
66694: PPUSH
66695: LD_EXP 74
66699: PUSH
66700: LD_VAR 0 2
66704: ARRAY
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PUSH
66710: LD_INT 4
66712: ARRAY
66713: PPUSH
66714: CALL 33596 0 5
66718: AND
66719: OR
66720: IFFALSE 67001
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66722: LD_ADDR_VAR 0 4
66726: PUSH
66727: LD_EXP 69
66731: PUSH
66732: LD_VAR 0 2
66736: ARRAY
66737: PPUSH
66738: LD_INT 25
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PPUSH
66748: CALL_OW 72
66752: PUSH
66753: LD_EXP 71
66757: PUSH
66758: LD_VAR 0 2
66762: ARRAY
66763: DIFF
66764: ST_TO_ADDR
// if not tmp then
66765: LD_VAR 0 4
66769: NOT
66770: IFFALSE 66774
// continue ;
66772: GO 66193
// for j in tmp do
66774: LD_ADDR_VAR 0 3
66778: PUSH
66779: LD_VAR 0 4
66783: PUSH
66784: FOR_IN
66785: IFFALSE 66997
// begin if not mc_builders [ i ] then
66787: LD_EXP 75
66791: PUSH
66792: LD_VAR 0 2
66796: ARRAY
66797: NOT
66798: IFFALSE 66856
// begin SetTag ( j , 103 ) ;
66800: LD_VAR 0 3
66804: PPUSH
66805: LD_INT 103
66807: PPUSH
66808: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66812: LD_ADDR_EXP 75
66816: PUSH
66817: LD_EXP 75
66821: PPUSH
66822: LD_VAR 0 2
66826: PUSH
66827: LD_EXP 75
66831: PUSH
66832: LD_VAR 0 2
66836: ARRAY
66837: PUSH
66838: LD_INT 1
66840: PLUS
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PPUSH
66846: LD_VAR 0 3
66850: PPUSH
66851: CALL 26808 0 3
66855: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66856: LD_VAR 0 3
66860: PPUSH
66861: CALL_OW 310
66865: IFFALSE 66876
// ComExitBuilding ( j ) ;
66867: LD_VAR 0 3
66871: PPUSH
66872: CALL_OW 122
// wait ( 3 ) ;
66876: LD_INT 3
66878: PPUSH
66879: CALL_OW 67
// if not mc_build_list [ i ] then
66883: LD_EXP 74
66887: PUSH
66888: LD_VAR 0 2
66892: ARRAY
66893: NOT
66894: IFFALSE 66898
// break ;
66896: GO 66997
// if not HasTask ( j ) then
66898: LD_VAR 0 3
66902: PPUSH
66903: CALL_OW 314
66907: NOT
66908: IFFALSE 66995
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66910: LD_VAR 0 3
66914: PPUSH
66915: LD_EXP 74
66919: PUSH
66920: LD_VAR 0 2
66924: ARRAY
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PUSH
66930: LD_INT 1
66932: ARRAY
66933: PPUSH
66934: LD_EXP 74
66938: PUSH
66939: LD_VAR 0 2
66943: ARRAY
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PUSH
66949: LD_INT 2
66951: ARRAY
66952: PPUSH
66953: LD_EXP 74
66957: PUSH
66958: LD_VAR 0 2
66962: ARRAY
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_INT 3
66970: ARRAY
66971: PPUSH
66972: LD_EXP 74
66976: PUSH
66977: LD_VAR 0 2
66981: ARRAY
66982: PUSH
66983: LD_INT 1
66985: ARRAY
66986: PUSH
66987: LD_INT 4
66989: ARRAY
66990: PPUSH
66991: CALL_OW 145
// end ;
66995: GO 66784
66997: POP
66998: POP
// end else
66999: GO 67143
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67001: LD_EXP 69
67005: PUSH
67006: LD_VAR 0 2
67010: ARRAY
67011: PPUSH
67012: LD_EXP 74
67016: PUSH
67017: LD_VAR 0 2
67021: ARRAY
67022: PUSH
67023: LD_INT 1
67025: ARRAY
67026: PUSH
67027: LD_INT 1
67029: ARRAY
67030: PPUSH
67031: LD_EXP 74
67035: PUSH
67036: LD_VAR 0 2
67040: ARRAY
67041: PUSH
67042: LD_INT 1
67044: ARRAY
67045: PUSH
67046: LD_INT 2
67048: ARRAY
67049: PPUSH
67050: LD_EXP 74
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PUSH
67065: LD_INT 3
67067: ARRAY
67068: PPUSH
67069: LD_EXP 74
67073: PUSH
67074: LD_VAR 0 2
67078: ARRAY
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PUSH
67084: LD_INT 4
67086: ARRAY
67087: PPUSH
67088: CALL 33027 0 5
67092: NOT
67093: IFFALSE 67143
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67095: LD_ADDR_EXP 74
67099: PUSH
67100: LD_EXP 74
67104: PPUSH
67105: LD_VAR 0 2
67109: PPUSH
67110: LD_EXP 74
67114: PUSH
67115: LD_VAR 0 2
67119: ARRAY
67120: PPUSH
67121: LD_INT 1
67123: PPUSH
67124: LD_INT 1
67126: NEG
67127: PPUSH
67128: LD_INT 0
67130: PPUSH
67131: CALL 25791 0 4
67135: PPUSH
67136: CALL_OW 1
67140: ST_TO_ADDR
// continue ;
67141: GO 66193
// end ; end ; end ;
67143: GO 66193
67145: POP
67146: POP
// end ;
67147: LD_VAR 0 1
67151: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67152: LD_INT 0
67154: PPUSH
67155: PPUSH
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
// if not mc_bases then
67160: LD_EXP 69
67164: NOT
67165: IFFALSE 67169
// exit ;
67167: GO 67596
// for i = 1 to mc_bases do
67169: LD_ADDR_VAR 0 2
67173: PUSH
67174: DOUBLE
67175: LD_INT 1
67177: DEC
67178: ST_TO_ADDR
67179: LD_EXP 69
67183: PUSH
67184: FOR_TO
67185: IFFALSE 67594
// begin tmp := mc_build_upgrade [ i ] ;
67187: LD_ADDR_VAR 0 4
67191: PUSH
67192: LD_EXP 101
67196: PUSH
67197: LD_VAR 0 2
67201: ARRAY
67202: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67203: LD_ADDR_VAR 0 6
67207: PUSH
67208: LD_EXP 102
67212: PUSH
67213: LD_VAR 0 2
67217: ARRAY
67218: PPUSH
67219: LD_INT 2
67221: PUSH
67222: LD_INT 30
67224: PUSH
67225: LD_INT 6
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 30
67234: PUSH
67235: LD_INT 7
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: PPUSH
67247: CALL_OW 72
67251: ST_TO_ADDR
// if not tmp and not lab then
67252: LD_VAR 0 4
67256: NOT
67257: PUSH
67258: LD_VAR 0 6
67262: NOT
67263: AND
67264: IFFALSE 67268
// continue ;
67266: GO 67184
// if tmp then
67268: LD_VAR 0 4
67272: IFFALSE 67392
// for j in tmp do
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 4
67283: PUSH
67284: FOR_IN
67285: IFFALSE 67390
// begin if UpgradeCost ( j ) then
67287: LD_VAR 0 3
67291: PPUSH
67292: CALL 32687 0 1
67296: IFFALSE 67388
// begin ComUpgrade ( j ) ;
67298: LD_VAR 0 3
67302: PPUSH
67303: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67307: LD_ADDR_EXP 101
67311: PUSH
67312: LD_EXP 101
67316: PPUSH
67317: LD_VAR 0 2
67321: PPUSH
67322: LD_EXP 101
67326: PUSH
67327: LD_VAR 0 2
67331: ARRAY
67332: PUSH
67333: LD_VAR 0 3
67337: DIFF
67338: PPUSH
67339: CALL_OW 1
67343: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67344: LD_ADDR_EXP 76
67348: PUSH
67349: LD_EXP 76
67353: PPUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_EXP 76
67363: PUSH
67364: LD_VAR 0 2
67368: ARRAY
67369: PUSH
67370: LD_INT 1
67372: PLUS
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PPUSH
67378: LD_VAR 0 3
67382: PPUSH
67383: CALL 26808 0 3
67387: ST_TO_ADDR
// end ; end ;
67388: GO 67284
67390: POP
67391: POP
// if not lab or not mc_lab_upgrade [ i ] then
67392: LD_VAR 0 6
67396: NOT
67397: PUSH
67398: LD_EXP 103
67402: PUSH
67403: LD_VAR 0 2
67407: ARRAY
67408: NOT
67409: OR
67410: IFFALSE 67414
// continue ;
67412: GO 67184
// for j in lab do
67414: LD_ADDR_VAR 0 3
67418: PUSH
67419: LD_VAR 0 6
67423: PUSH
67424: FOR_IN
67425: IFFALSE 67590
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67427: LD_VAR 0 3
67431: PPUSH
67432: CALL_OW 266
67436: PUSH
67437: LD_INT 6
67439: PUSH
67440: LD_INT 7
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: IN
67447: PUSH
67448: LD_VAR 0 3
67452: PPUSH
67453: CALL_OW 461
67457: PUSH
67458: LD_INT 1
67460: NONEQUAL
67461: AND
67462: IFFALSE 67588
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67464: LD_VAR 0 3
67468: PPUSH
67469: LD_EXP 103
67473: PUSH
67474: LD_VAR 0 2
67478: ARRAY
67479: PUSH
67480: LD_INT 1
67482: ARRAY
67483: PPUSH
67484: CALL 32892 0 2
67488: IFFALSE 67588
// begin ComCancel ( j ) ;
67490: LD_VAR 0 3
67494: PPUSH
67495: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67499: LD_VAR 0 3
67503: PPUSH
67504: LD_EXP 103
67508: PUSH
67509: LD_VAR 0 2
67513: ARRAY
67514: PUSH
67515: LD_INT 1
67517: ARRAY
67518: PPUSH
67519: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67523: LD_VAR 0 3
67527: PUSH
67528: LD_EXP 76
67532: PUSH
67533: LD_VAR 0 2
67537: ARRAY
67538: IN
67539: NOT
67540: IFFALSE 67586
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67542: LD_ADDR_EXP 76
67546: PUSH
67547: LD_EXP 76
67551: PPUSH
67552: LD_VAR 0 2
67556: PUSH
67557: LD_EXP 76
67561: PUSH
67562: LD_VAR 0 2
67566: ARRAY
67567: PUSH
67568: LD_INT 1
67570: PLUS
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PPUSH
67576: LD_VAR 0 3
67580: PPUSH
67581: CALL 26808 0 3
67585: ST_TO_ADDR
// break ;
67586: GO 67590
// end ; end ; end ;
67588: GO 67424
67590: POP
67591: POP
// end ;
67592: GO 67184
67594: POP
67595: POP
// end ;
67596: LD_VAR 0 1
67600: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
67601: LD_INT 0
67603: PPUSH
67604: PPUSH
67605: PPUSH
67606: PPUSH
67607: PPUSH
67608: PPUSH
67609: PPUSH
// if not mc_bases then
67610: LD_EXP 69
67614: NOT
67615: IFFALSE 67619
// exit ;
67617: GO 67948
// for i = 1 to mc_bases do
67619: LD_ADDR_VAR 0 2
67623: PUSH
67624: DOUBLE
67625: LD_INT 1
67627: DEC
67628: ST_TO_ADDR
67629: LD_EXP 69
67633: PUSH
67634: FOR_TO
67635: IFFALSE 67946
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67637: LD_EXP 77
67641: PUSH
67642: LD_VAR 0 2
67646: ARRAY
67647: NOT
67648: PUSH
67649: LD_EXP 69
67653: PUSH
67654: LD_VAR 0 2
67658: ARRAY
67659: PPUSH
67660: LD_INT 30
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PPUSH
67670: CALL_OW 72
67674: NOT
67675: OR
67676: IFFALSE 67680
// continue ;
67678: GO 67634
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
67680: LD_EXP 77
67684: PUSH
67685: LD_VAR 0 2
67689: ARRAY
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PPUSH
67695: CALL_OW 269
67699: IFFALSE 67765
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
67701: LD_ADDR_VAR 0 4
67705: PUSH
67706: LD_EXP 77
67710: PUSH
67711: LD_VAR 0 2
67715: ARRAY
67716: PPUSH
67717: LD_INT 1
67719: PPUSH
67720: CALL_OW 3
67724: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
67725: LD_ADDR_EXP 77
67729: PUSH
67730: LD_EXP 77
67734: PPUSH
67735: LD_VAR 0 2
67739: PPUSH
67740: LD_VAR 0 4
67744: PPUSH
67745: CALL_OW 1
67749: ST_TO_ADDR
// if not mc_turret_list [ i ] then
67750: LD_EXP 77
67754: PUSH
67755: LD_VAR 0 2
67759: ARRAY
67760: NOT
67761: IFFALSE 67765
// continue ;
67763: GO 67634
// end ; busy := false ;
67765: LD_ADDR_VAR 0 6
67769: PUSH
67770: LD_INT 0
67772: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67773: LD_ADDR_VAR 0 4
67777: PUSH
67778: LD_EXP 69
67782: PUSH
67783: LD_VAR 0 2
67787: ARRAY
67788: PPUSH
67789: LD_INT 30
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PPUSH
67799: CALL_OW 72
67803: ST_TO_ADDR
// for j in tmp do
67804: LD_ADDR_VAR 0 3
67808: PUSH
67809: LD_VAR 0 4
67813: PUSH
67814: FOR_IN
67815: IFFALSE 67843
// if not BuildingStatus ( j ) = bs_idle then
67817: LD_VAR 0 3
67821: PPUSH
67822: CALL_OW 461
67826: PUSH
67827: LD_INT 2
67829: EQUAL
67830: NOT
67831: IFFALSE 67841
// busy := true ;
67833: LD_ADDR_VAR 0 6
67837: PUSH
67838: LD_INT 1
67840: ST_TO_ADDR
67841: GO 67814
67843: POP
67844: POP
// if busy then
67845: LD_VAR 0 6
67849: IFFALSE 67853
// continue ;
67851: GO 67634
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
67853: LD_ADDR_VAR 0 7
67857: PUSH
67858: LD_EXP 77
67862: PUSH
67863: LD_VAR 0 2
67867: ARRAY
67868: PUSH
67869: LD_INT 1
67871: ARRAY
67872: PPUSH
67873: CALL 31251 0 1
67877: ST_TO_ADDR
// if not weapon then
67878: LD_VAR 0 7
67882: NOT
67883: IFFALSE 67887
// continue ;
67885: GO 67634
// if mc_allowed_tower_weapons [ i ] then
67887: LD_EXP 107
67891: PUSH
67892: LD_VAR 0 2
67896: ARRAY
67897: IFFALSE 67920
// if not weapon in mc_allowed_tower_weapons [ i ] then
67899: LD_VAR 0 7
67903: PUSH
67904: LD_EXP 107
67908: PUSH
67909: LD_VAR 0 2
67913: ARRAY
67914: IN
67915: NOT
67916: IFFALSE 67920
// continue ;
67918: GO 67634
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
67920: LD_EXP 77
67924: PUSH
67925: LD_VAR 0 2
67929: ARRAY
67930: PUSH
67931: LD_INT 1
67933: ARRAY
67934: PPUSH
67935: LD_VAR 0 7
67939: PPUSH
67940: CALL_OW 148
// end ;
67944: GO 67634
67946: POP
67947: POP
// end ;
67948: LD_VAR 0 1
67952: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
67953: LD_INT 0
67955: PPUSH
67956: PPUSH
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
// if not mc_bases then
67961: LD_EXP 69
67965: NOT
67966: IFFALSE 67970
// exit ;
67968: GO 68955
// for i = 1 to mc_bases do
67970: LD_ADDR_VAR 0 2
67974: PUSH
67975: DOUBLE
67976: LD_INT 1
67978: DEC
67979: ST_TO_ADDR
67980: LD_EXP 69
67984: PUSH
67985: FOR_TO
67986: IFFALSE 68953
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
67988: LD_EXP 82
67992: PUSH
67993: LD_VAR 0 2
67997: ARRAY
67998: NOT
67999: PUSH
68000: LD_EXP 82
68004: PUSH
68005: LD_VAR 0 2
68009: ARRAY
68010: PUSH
68011: LD_EXP 83
68015: PUSH
68016: LD_VAR 0 2
68020: ARRAY
68021: EQUAL
68022: OR
68023: IFFALSE 68027
// continue ;
68025: GO 67985
// if mc_miners [ i ] then
68027: LD_EXP 83
68031: PUSH
68032: LD_VAR 0 2
68036: ARRAY
68037: IFFALSE 68640
// begin k := 1 ;
68039: LD_ADDR_VAR 0 4
68043: PUSH
68044: LD_INT 1
68046: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
68047: LD_ADDR_VAR 0 3
68051: PUSH
68052: DOUBLE
68053: LD_EXP 83
68057: PUSH
68058: LD_VAR 0 2
68062: ARRAY
68063: INC
68064: ST_TO_ADDR
68065: LD_INT 1
68067: PUSH
68068: FOR_DOWNTO
68069: IFFALSE 68638
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
68071: LD_EXP 83
68075: PUSH
68076: LD_VAR 0 2
68080: ARRAY
68081: PUSH
68082: LD_VAR 0 3
68086: ARRAY
68087: PPUSH
68088: CALL_OW 301
68092: IFFALSE 68155
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68094: LD_ADDR_VAR 0 5
68098: PUSH
68099: LD_EXP 83
68103: PUSH
68104: LD_VAR 0 2
68108: ARRAY
68109: PUSH
68110: LD_EXP 83
68114: PUSH
68115: LD_VAR 0 2
68119: ARRAY
68120: PUSH
68121: LD_VAR 0 3
68125: ARRAY
68126: DIFF
68127: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68128: LD_ADDR_EXP 83
68132: PUSH
68133: LD_EXP 83
68137: PPUSH
68138: LD_VAR 0 2
68142: PPUSH
68143: LD_VAR 0 5
68147: PPUSH
68148: CALL_OW 1
68152: ST_TO_ADDR
// continue ;
68153: GO 68068
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
68155: LD_EXP 83
68159: PUSH
68160: LD_VAR 0 2
68164: ARRAY
68165: PUSH
68166: LD_VAR 0 3
68170: ARRAY
68171: PPUSH
68172: CALL 26309 0 1
68176: PUSH
68177: LD_EXP 83
68181: PUSH
68182: LD_VAR 0 2
68186: ARRAY
68187: PUSH
68188: LD_VAR 0 3
68192: ARRAY
68193: PPUSH
68194: CALL_OW 255
68198: PPUSH
68199: LD_EXP 82
68203: PUSH
68204: LD_VAR 0 2
68208: ARRAY
68209: PUSH
68210: LD_VAR 0 4
68214: ARRAY
68215: PUSH
68216: LD_INT 1
68218: ARRAY
68219: PPUSH
68220: LD_EXP 82
68224: PUSH
68225: LD_VAR 0 2
68229: ARRAY
68230: PUSH
68231: LD_VAR 0 4
68235: ARRAY
68236: PUSH
68237: LD_INT 2
68239: ARRAY
68240: PPUSH
68241: LD_INT 15
68243: PPUSH
68244: CALL 27302 0 4
68248: PUSH
68249: LD_INT 4
68251: ARRAY
68252: PUSH
68253: LD_EXP 83
68257: PUSH
68258: LD_VAR 0 2
68262: ARRAY
68263: PUSH
68264: LD_VAR 0 3
68268: ARRAY
68269: PPUSH
68270: LD_INT 10
68272: PPUSH
68273: CALL 28999 0 2
68277: PUSH
68278: LD_INT 4
68280: ARRAY
68281: OR
68282: AND
68283: IFFALSE 68306
// ComStop ( mc_miners [ i ] [ j ] ) ;
68285: LD_EXP 83
68289: PUSH
68290: LD_VAR 0 2
68294: ARRAY
68295: PUSH
68296: LD_VAR 0 3
68300: ARRAY
68301: PPUSH
68302: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
68306: LD_EXP 83
68310: PUSH
68311: LD_VAR 0 2
68315: ARRAY
68316: PUSH
68317: LD_VAR 0 3
68321: ARRAY
68322: PPUSH
68323: CALL_OW 257
68327: PUSH
68328: LD_INT 1
68330: EQUAL
68331: PUSH
68332: LD_EXP 83
68336: PUSH
68337: LD_VAR 0 2
68341: ARRAY
68342: PUSH
68343: LD_VAR 0 3
68347: ARRAY
68348: PPUSH
68349: CALL_OW 459
68353: NOT
68354: AND
68355: PUSH
68356: LD_EXP 83
68360: PUSH
68361: LD_VAR 0 2
68365: ARRAY
68366: PUSH
68367: LD_VAR 0 3
68371: ARRAY
68372: PPUSH
68373: CALL_OW 255
68377: PPUSH
68378: LD_EXP 82
68382: PUSH
68383: LD_VAR 0 2
68387: ARRAY
68388: PUSH
68389: LD_VAR 0 4
68393: ARRAY
68394: PUSH
68395: LD_INT 1
68397: ARRAY
68398: PPUSH
68399: LD_EXP 82
68403: PUSH
68404: LD_VAR 0 2
68408: ARRAY
68409: PUSH
68410: LD_VAR 0 4
68414: ARRAY
68415: PUSH
68416: LD_INT 2
68418: ARRAY
68419: PPUSH
68420: LD_INT 15
68422: PPUSH
68423: CALL 27302 0 4
68427: PUSH
68428: LD_INT 4
68430: ARRAY
68431: PUSH
68432: LD_INT 0
68434: EQUAL
68435: AND
68436: PUSH
68437: LD_EXP 83
68441: PUSH
68442: LD_VAR 0 2
68446: ARRAY
68447: PUSH
68448: LD_VAR 0 3
68452: ARRAY
68453: PPUSH
68454: CALL_OW 314
68458: NOT
68459: AND
68460: IFFALSE 68636
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68462: LD_EXP 83
68466: PUSH
68467: LD_VAR 0 2
68471: ARRAY
68472: PUSH
68473: LD_VAR 0 3
68477: ARRAY
68478: PPUSH
68479: CALL_OW 310
68483: IFFALSE 68506
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68485: LD_EXP 83
68489: PUSH
68490: LD_VAR 0 2
68494: ARRAY
68495: PUSH
68496: LD_VAR 0 3
68500: ARRAY
68501: PPUSH
68502: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68506: LD_EXP 83
68510: PUSH
68511: LD_VAR 0 2
68515: ARRAY
68516: PUSH
68517: LD_VAR 0 3
68521: ARRAY
68522: PPUSH
68523: CALL_OW 314
68527: NOT
68528: IFFALSE 68596
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
68530: LD_EXP 83
68534: PUSH
68535: LD_VAR 0 2
68539: ARRAY
68540: PUSH
68541: LD_VAR 0 3
68545: ARRAY
68546: PPUSH
68547: LD_EXP 82
68551: PUSH
68552: LD_VAR 0 2
68556: ARRAY
68557: PUSH
68558: LD_VAR 0 4
68562: ARRAY
68563: PUSH
68564: LD_INT 1
68566: ARRAY
68567: PPUSH
68568: LD_EXP 82
68572: PUSH
68573: LD_VAR 0 2
68577: ARRAY
68578: PUSH
68579: LD_VAR 0 4
68583: ARRAY
68584: PUSH
68585: LD_INT 2
68587: ARRAY
68588: PPUSH
68589: LD_INT 0
68591: PPUSH
68592: CALL_OW 193
// k := k + 1 ;
68596: LD_ADDR_VAR 0 4
68600: PUSH
68601: LD_VAR 0 4
68605: PUSH
68606: LD_INT 1
68608: PLUS
68609: ST_TO_ADDR
// if k > mc_mines [ i ] then
68610: LD_VAR 0 4
68614: PUSH
68615: LD_EXP 82
68619: PUSH
68620: LD_VAR 0 2
68624: ARRAY
68625: GREATER
68626: IFFALSE 68636
// k := 1 ;
68628: LD_ADDR_VAR 0 4
68632: PUSH
68633: LD_INT 1
68635: ST_TO_ADDR
// end ; end ;
68636: GO 68068
68638: POP
68639: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68640: LD_ADDR_VAR 0 5
68644: PUSH
68645: LD_EXP 69
68649: PUSH
68650: LD_VAR 0 2
68654: ARRAY
68655: PPUSH
68656: LD_INT 2
68658: PUSH
68659: LD_INT 30
68661: PUSH
68662: LD_INT 4
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 30
68671: PUSH
68672: LD_INT 5
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 30
68681: PUSH
68682: LD_INT 32
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: PPUSH
68695: CALL_OW 72
68699: ST_TO_ADDR
// if not tmp then
68700: LD_VAR 0 5
68704: NOT
68705: IFFALSE 68709
// continue ;
68707: GO 67985
// list := [ ] ;
68709: LD_ADDR_VAR 0 6
68713: PUSH
68714: EMPTY
68715: ST_TO_ADDR
// for j in tmp do
68716: LD_ADDR_VAR 0 3
68720: PUSH
68721: LD_VAR 0 5
68725: PUSH
68726: FOR_IN
68727: IFFALSE 68796
// begin for k in UnitsInside ( j ) do
68729: LD_ADDR_VAR 0 4
68733: PUSH
68734: LD_VAR 0 3
68738: PPUSH
68739: CALL_OW 313
68743: PUSH
68744: FOR_IN
68745: IFFALSE 68792
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68747: LD_VAR 0 4
68751: PPUSH
68752: CALL_OW 257
68756: PUSH
68757: LD_INT 1
68759: EQUAL
68760: PUSH
68761: LD_VAR 0 4
68765: PPUSH
68766: CALL_OW 459
68770: NOT
68771: AND
68772: IFFALSE 68790
// list := list ^ k ;
68774: LD_ADDR_VAR 0 6
68778: PUSH
68779: LD_VAR 0 6
68783: PUSH
68784: LD_VAR 0 4
68788: ADD
68789: ST_TO_ADDR
68790: GO 68744
68792: POP
68793: POP
// end ;
68794: GO 68726
68796: POP
68797: POP
// list := list diff mc_miners [ i ] ;
68798: LD_ADDR_VAR 0 6
68802: PUSH
68803: LD_VAR 0 6
68807: PUSH
68808: LD_EXP 83
68812: PUSH
68813: LD_VAR 0 2
68817: ARRAY
68818: DIFF
68819: ST_TO_ADDR
// if not list then
68820: LD_VAR 0 6
68824: NOT
68825: IFFALSE 68829
// continue ;
68827: GO 67985
// k := mc_mines [ i ] - mc_miners [ i ] ;
68829: LD_ADDR_VAR 0 4
68833: PUSH
68834: LD_EXP 82
68838: PUSH
68839: LD_VAR 0 2
68843: ARRAY
68844: PUSH
68845: LD_EXP 83
68849: PUSH
68850: LD_VAR 0 2
68854: ARRAY
68855: MINUS
68856: ST_TO_ADDR
// if k > list then
68857: LD_VAR 0 4
68861: PUSH
68862: LD_VAR 0 6
68866: GREATER
68867: IFFALSE 68879
// k := list ;
68869: LD_ADDR_VAR 0 4
68873: PUSH
68874: LD_VAR 0 6
68878: ST_TO_ADDR
// for j = 1 to k do
68879: LD_ADDR_VAR 0 3
68883: PUSH
68884: DOUBLE
68885: LD_INT 1
68887: DEC
68888: ST_TO_ADDR
68889: LD_VAR 0 4
68893: PUSH
68894: FOR_TO
68895: IFFALSE 68949
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68897: LD_ADDR_EXP 83
68901: PUSH
68902: LD_EXP 83
68906: PPUSH
68907: LD_VAR 0 2
68911: PUSH
68912: LD_EXP 83
68916: PUSH
68917: LD_VAR 0 2
68921: ARRAY
68922: PUSH
68923: LD_INT 1
68925: PLUS
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PPUSH
68931: LD_VAR 0 6
68935: PUSH
68936: LD_VAR 0 3
68940: ARRAY
68941: PPUSH
68942: CALL 26808 0 3
68946: ST_TO_ADDR
68947: GO 68894
68949: POP
68950: POP
// end ;
68951: GO 67985
68953: POP
68954: POP
// end ;
68955: LD_VAR 0 1
68959: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
68960: LD_INT 0
68962: PPUSH
68963: PPUSH
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
68969: PPUSH
68970: PPUSH
// if not mc_bases then
68971: LD_EXP 69
68975: NOT
68976: IFFALSE 68980
// exit ;
68978: GO 70459
// for i = 1 to mc_bases do
68980: LD_ADDR_VAR 0 2
68984: PUSH
68985: DOUBLE
68986: LD_INT 1
68988: DEC
68989: ST_TO_ADDR
68990: LD_EXP 69
68994: PUSH
68995: FOR_TO
68996: IFFALSE 70457
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68998: LD_EXP 69
69002: PUSH
69003: LD_VAR 0 2
69007: ARRAY
69008: NOT
69009: PUSH
69010: LD_EXP 76
69014: PUSH
69015: LD_VAR 0 2
69019: ARRAY
69020: OR
69021: IFFALSE 69025
// continue ;
69023: GO 68995
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
69025: LD_EXP 85
69029: PUSH
69030: LD_VAR 0 2
69034: ARRAY
69035: NOT
69036: PUSH
69037: LD_EXP 86
69041: PUSH
69042: LD_VAR 0 2
69046: ARRAY
69047: AND
69048: IFFALSE 69086
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
69050: LD_ADDR_EXP 86
69054: PUSH
69055: LD_EXP 86
69059: PPUSH
69060: LD_VAR 0 2
69064: PPUSH
69065: EMPTY
69066: PPUSH
69067: CALL_OW 1
69071: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69072: LD_VAR 0 2
69076: PPUSH
69077: LD_INT 107
69079: PPUSH
69080: CALL 64556 0 2
// continue ;
69084: GO 68995
// end ; target := [ ] ;
69086: LD_ADDR_VAR 0 5
69090: PUSH
69091: EMPTY
69092: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69093: LD_ADDR_VAR 0 3
69097: PUSH
69098: DOUBLE
69099: LD_EXP 85
69103: PUSH
69104: LD_VAR 0 2
69108: ARRAY
69109: INC
69110: ST_TO_ADDR
69111: LD_INT 1
69113: PUSH
69114: FOR_DOWNTO
69115: IFFALSE 69375
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69117: LD_EXP 85
69121: PUSH
69122: LD_VAR 0 2
69126: ARRAY
69127: PUSH
69128: LD_VAR 0 3
69132: ARRAY
69133: PUSH
69134: LD_INT 2
69136: ARRAY
69137: PPUSH
69138: LD_EXP 85
69142: PUSH
69143: LD_VAR 0 2
69147: ARRAY
69148: PUSH
69149: LD_VAR 0 3
69153: ARRAY
69154: PUSH
69155: LD_INT 3
69157: ARRAY
69158: PPUSH
69159: CALL_OW 488
69163: PUSH
69164: LD_EXP 85
69168: PUSH
69169: LD_VAR 0 2
69173: ARRAY
69174: PUSH
69175: LD_VAR 0 3
69179: ARRAY
69180: PUSH
69181: LD_INT 2
69183: ARRAY
69184: PPUSH
69185: LD_EXP 85
69189: PUSH
69190: LD_VAR 0 2
69194: ARRAY
69195: PUSH
69196: LD_VAR 0 3
69200: ARRAY
69201: PUSH
69202: LD_INT 3
69204: ARRAY
69205: PPUSH
69206: CALL_OW 284
69210: PUSH
69211: LD_INT 0
69213: EQUAL
69214: AND
69215: IFFALSE 69270
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69217: LD_ADDR_VAR 0 4
69221: PUSH
69222: LD_EXP 85
69226: PUSH
69227: LD_VAR 0 2
69231: ARRAY
69232: PPUSH
69233: LD_VAR 0 3
69237: PPUSH
69238: CALL_OW 3
69242: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69243: LD_ADDR_EXP 85
69247: PUSH
69248: LD_EXP 85
69252: PPUSH
69253: LD_VAR 0 2
69257: PPUSH
69258: LD_VAR 0 4
69262: PPUSH
69263: CALL_OW 1
69267: ST_TO_ADDR
// continue ;
69268: GO 69114
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
69270: LD_EXP 69
69274: PUSH
69275: LD_VAR 0 2
69279: ARRAY
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PPUSH
69285: CALL_OW 255
69289: PPUSH
69290: LD_EXP 85
69294: PUSH
69295: LD_VAR 0 2
69299: ARRAY
69300: PUSH
69301: LD_VAR 0 3
69305: ARRAY
69306: PUSH
69307: LD_INT 2
69309: ARRAY
69310: PPUSH
69311: LD_EXP 85
69315: PUSH
69316: LD_VAR 0 2
69320: ARRAY
69321: PUSH
69322: LD_VAR 0 3
69326: ARRAY
69327: PUSH
69328: LD_INT 3
69330: ARRAY
69331: PPUSH
69332: LD_INT 20
69334: PPUSH
69335: CALL 27302 0 4
69339: PUSH
69340: LD_INT 4
69342: ARRAY
69343: PUSH
69344: LD_INT 0
69346: EQUAL
69347: IFFALSE 69373
// begin target := mc_crates [ i ] [ j ] ;
69349: LD_ADDR_VAR 0 5
69353: PUSH
69354: LD_EXP 85
69358: PUSH
69359: LD_VAR 0 2
69363: ARRAY
69364: PUSH
69365: LD_VAR 0 3
69369: ARRAY
69370: ST_TO_ADDR
// break ;
69371: GO 69375
// end ; end ;
69373: GO 69114
69375: POP
69376: POP
// if not target then
69377: LD_VAR 0 5
69381: NOT
69382: IFFALSE 69386
// continue ;
69384: GO 68995
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69386: LD_ADDR_VAR 0 6
69390: PUSH
69391: LD_EXP 88
69395: PUSH
69396: LD_VAR 0 2
69400: ARRAY
69401: PPUSH
69402: LD_INT 2
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: LD_INT 58
69410: PUSH
69411: EMPTY
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 61
69420: PUSH
69421: EMPTY
69422: LIST
69423: PUSH
69424: LD_INT 33
69426: PUSH
69427: LD_INT 5
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 33
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 34
69456: PUSH
69457: LD_INT 32
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 34
69466: PUSH
69467: LD_INT 51
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 34
69476: PUSH
69477: LD_INT 12
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PPUSH
69494: CALL_OW 72
69498: ST_TO_ADDR
// if not cargo then
69499: LD_VAR 0 6
69503: NOT
69504: IFFALSE 69992
// begin if mc_crates_collector [ i ] < 5 then
69506: LD_EXP 86
69510: PUSH
69511: LD_VAR 0 2
69515: ARRAY
69516: PUSH
69517: LD_INT 5
69519: LESS
69520: IFFALSE 69806
// begin if mc_ape [ i ] then
69522: LD_EXP 98
69526: PUSH
69527: LD_VAR 0 2
69531: ARRAY
69532: IFFALSE 69579
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69534: LD_ADDR_VAR 0 4
69538: PUSH
69539: LD_EXP 98
69543: PUSH
69544: LD_VAR 0 2
69548: ARRAY
69549: PPUSH
69550: LD_INT 25
69552: PUSH
69553: LD_INT 16
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 24
69562: PUSH
69563: LD_INT 750
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PPUSH
69574: CALL_OW 72
69578: ST_TO_ADDR
// if not tmp then
69579: LD_VAR 0 4
69583: NOT
69584: IFFALSE 69633
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
69586: LD_ADDR_VAR 0 4
69590: PUSH
69591: LD_EXP 69
69595: PUSH
69596: LD_VAR 0 2
69600: ARRAY
69601: PPUSH
69602: LD_INT 25
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 24
69614: PUSH
69615: LD_INT 750
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PPUSH
69626: CALL_OW 72
69630: ST_TO_ADDR
69631: GO 69694
// if tmp < 5 then
69633: LD_VAR 0 4
69637: PUSH
69638: LD_INT 5
69640: LESS
69641: IFFALSE 69694
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69643: LD_ADDR_VAR 0 4
69647: PUSH
69648: LD_VAR 0 4
69652: PUSH
69653: LD_EXP 69
69657: PUSH
69658: LD_VAR 0 2
69662: ARRAY
69663: PPUSH
69664: LD_INT 25
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 24
69676: PUSH
69677: LD_INT 750
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PPUSH
69688: CALL_OW 72
69692: UNION
69693: ST_TO_ADDR
// if not tmp then
69694: LD_VAR 0 4
69698: NOT
69699: IFFALSE 69703
// continue ;
69701: GO 68995
// for j in tmp do
69703: LD_ADDR_VAR 0 3
69707: PUSH
69708: LD_VAR 0 4
69712: PUSH
69713: FOR_IN
69714: IFFALSE 69804
// if not GetTag ( j ) then
69716: LD_VAR 0 3
69720: PPUSH
69721: CALL_OW 110
69725: NOT
69726: IFFALSE 69802
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69728: LD_ADDR_EXP 86
69732: PUSH
69733: LD_EXP 86
69737: PPUSH
69738: LD_VAR 0 2
69742: PUSH
69743: LD_EXP 86
69747: PUSH
69748: LD_VAR 0 2
69752: ARRAY
69753: PUSH
69754: LD_INT 1
69756: PLUS
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PPUSH
69762: LD_VAR 0 3
69766: PPUSH
69767: CALL 26808 0 3
69771: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69772: LD_VAR 0 3
69776: PPUSH
69777: LD_INT 107
69779: PPUSH
69780: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69784: LD_EXP 86
69788: PUSH
69789: LD_VAR 0 2
69793: ARRAY
69794: PUSH
69795: LD_INT 5
69797: GREATEREQUAL
69798: IFFALSE 69802
// break ;
69800: GO 69804
// end ;
69802: GO 69713
69804: POP
69805: POP
// end ; if mc_crates_collector [ i ] and target then
69806: LD_EXP 86
69810: PUSH
69811: LD_VAR 0 2
69815: ARRAY
69816: PUSH
69817: LD_VAR 0 5
69821: AND
69822: IFFALSE 69990
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69824: LD_EXP 86
69828: PUSH
69829: LD_VAR 0 2
69833: ARRAY
69834: PUSH
69835: LD_VAR 0 5
69839: PUSH
69840: LD_INT 1
69842: ARRAY
69843: LESS
69844: IFFALSE 69864
// tmp := mc_crates_collector [ i ] else
69846: LD_ADDR_VAR 0 4
69850: PUSH
69851: LD_EXP 86
69855: PUSH
69856: LD_VAR 0 2
69860: ARRAY
69861: ST_TO_ADDR
69862: GO 69878
// tmp := target [ 1 ] ;
69864: LD_ADDR_VAR 0 4
69868: PUSH
69869: LD_VAR 0 5
69873: PUSH
69874: LD_INT 1
69876: ARRAY
69877: ST_TO_ADDR
// for j = 1 to tmp do
69878: LD_ADDR_VAR 0 3
69882: PUSH
69883: DOUBLE
69884: LD_INT 1
69886: DEC
69887: ST_TO_ADDR
69888: LD_VAR 0 4
69892: PUSH
69893: FOR_TO
69894: IFFALSE 69988
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
69896: LD_EXP 86
69900: PUSH
69901: LD_VAR 0 2
69905: ARRAY
69906: PUSH
69907: LD_VAR 0 3
69911: ARRAY
69912: PPUSH
69913: CALL_OW 310
69917: IFFALSE 69940
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
69919: LD_EXP 86
69923: PUSH
69924: LD_VAR 0 2
69928: ARRAY
69929: PUSH
69930: LD_VAR 0 3
69934: ARRAY
69935: PPUSH
69936: CALL_OW 122
// wait ( 3 ) ;
69940: LD_INT 3
69942: PPUSH
69943: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
69947: LD_EXP 86
69951: PUSH
69952: LD_VAR 0 2
69956: ARRAY
69957: PUSH
69958: LD_VAR 0 3
69962: ARRAY
69963: PPUSH
69964: LD_VAR 0 5
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: PPUSH
69973: LD_VAR 0 5
69977: PUSH
69978: LD_INT 3
69980: ARRAY
69981: PPUSH
69982: CALL_OW 117
// end ;
69986: GO 69893
69988: POP
69989: POP
// end ; end else
69990: GO 70455
// begin for j in cargo do
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: LD_VAR 0 6
70001: PUSH
70002: FOR_IN
70003: IFFALSE 70453
// begin if GetTag ( j ) <> 0 then
70005: LD_VAR 0 3
70009: PPUSH
70010: CALL_OW 110
70014: PUSH
70015: LD_INT 0
70017: NONEQUAL
70018: IFFALSE 70022
// continue ;
70020: GO 70002
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70022: LD_VAR 0 3
70026: PPUSH
70027: CALL_OW 262
70031: PUSH
70032: LD_INT 2
70034: EQUAL
70035: PUSH
70036: LD_VAR 0 3
70040: PPUSH
70041: CALL_OW 261
70045: PUSH
70046: LD_INT 15
70048: LESS
70049: AND
70050: IFFALSE 70054
// continue ;
70052: GO 70002
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70054: LD_VAR 0 3
70058: PPUSH
70059: CALL_OW 262
70063: PUSH
70064: LD_INT 1
70066: EQUAL
70067: PUSH
70068: LD_VAR 0 3
70072: PPUSH
70073: CALL_OW 261
70077: PUSH
70078: LD_INT 10
70080: LESS
70081: AND
70082: IFFALSE 70392
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70084: LD_ADDR_VAR 0 7
70088: PUSH
70089: LD_EXP 69
70093: PUSH
70094: LD_VAR 0 2
70098: ARRAY
70099: PPUSH
70100: LD_INT 2
70102: PUSH
70103: LD_INT 30
70105: PUSH
70106: LD_INT 0
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 30
70115: PUSH
70116: LD_INT 1
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: PPUSH
70128: CALL_OW 72
70132: ST_TO_ADDR
// if not depot then
70133: LD_VAR 0 7
70137: NOT
70138: IFFALSE 70142
// continue ;
70140: GO 70002
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70142: LD_VAR 0 3
70146: PPUSH
70147: LD_VAR 0 7
70151: PPUSH
70152: LD_VAR 0 3
70156: PPUSH
70157: CALL_OW 74
70161: PPUSH
70162: CALL_OW 296
70166: PUSH
70167: LD_INT 6
70169: LESS
70170: IFFALSE 70186
// SetFuel ( j , 100 ) else
70172: LD_VAR 0 3
70176: PPUSH
70177: LD_INT 100
70179: PPUSH
70180: CALL_OW 240
70184: GO 70392
// if GetFuel ( j ) = 0 then
70186: LD_VAR 0 3
70190: PPUSH
70191: CALL_OW 261
70195: PUSH
70196: LD_INT 0
70198: EQUAL
70199: IFFALSE 70392
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70201: LD_ADDR_EXP 88
70205: PUSH
70206: LD_EXP 88
70210: PPUSH
70211: LD_VAR 0 2
70215: PPUSH
70216: LD_EXP 88
70220: PUSH
70221: LD_VAR 0 2
70225: ARRAY
70226: PUSH
70227: LD_VAR 0 3
70231: DIFF
70232: PPUSH
70233: CALL_OW 1
70237: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70238: LD_VAR 0 3
70242: PPUSH
70243: CALL_OW 263
70247: PUSH
70248: LD_INT 1
70250: EQUAL
70251: IFFALSE 70267
// ComExitVehicle ( IsInUnit ( j ) ) ;
70253: LD_VAR 0 3
70257: PPUSH
70258: CALL_OW 310
70262: PPUSH
70263: CALL_OW 121
// if GetControl ( j ) = control_remote then
70267: LD_VAR 0 3
70271: PPUSH
70272: CALL_OW 263
70276: PUSH
70277: LD_INT 2
70279: EQUAL
70280: IFFALSE 70291
// ComUnlink ( j ) ;
70282: LD_VAR 0 3
70286: PPUSH
70287: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
70291: LD_ADDR_VAR 0 8
70295: PUSH
70296: LD_VAR 0 2
70300: PPUSH
70301: LD_INT 3
70303: PPUSH
70304: CALL 78088 0 2
70308: ST_TO_ADDR
// if fac then
70309: LD_VAR 0 8
70313: IFFALSE 70390
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70315: LD_ADDR_VAR 0 9
70319: PUSH
70320: LD_VAR 0 8
70324: PPUSH
70325: LD_VAR 0 3
70329: PPUSH
70330: CALL_OW 265
70334: PPUSH
70335: LD_VAR 0 3
70339: PPUSH
70340: CALL_OW 262
70344: PPUSH
70345: LD_VAR 0 3
70349: PPUSH
70350: CALL_OW 263
70354: PPUSH
70355: LD_VAR 0 3
70359: PPUSH
70360: CALL_OW 264
70364: PPUSH
70365: CALL 23973 0 5
70369: ST_TO_ADDR
// if components then
70370: LD_VAR 0 9
70374: IFFALSE 70390
// MC_InsertProduceList ( i , components ) ;
70376: LD_VAR 0 2
70380: PPUSH
70381: LD_VAR 0 9
70385: PPUSH
70386: CALL 77655 0 2
// end ; continue ;
70390: GO 70002
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70392: LD_VAR 0 3
70396: PPUSH
70397: LD_INT 1
70399: PPUSH
70400: CALL_OW 289
70404: PUSH
70405: LD_INT 100
70407: LESS
70408: PUSH
70409: LD_VAR 0 3
70413: PPUSH
70414: CALL_OW 314
70418: NOT
70419: AND
70420: IFFALSE 70449
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70422: LD_VAR 0 3
70426: PPUSH
70427: LD_VAR 0 5
70431: PUSH
70432: LD_INT 2
70434: ARRAY
70435: PPUSH
70436: LD_VAR 0 5
70440: PUSH
70441: LD_INT 3
70443: ARRAY
70444: PPUSH
70445: CALL_OW 117
// break ;
70449: GO 70453
// end ;
70451: GO 70002
70453: POP
70454: POP
// end ; end ;
70455: GO 68995
70457: POP
70458: POP
// end ;
70459: LD_VAR 0 1
70463: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70464: LD_INT 0
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
// if not mc_bases then
70470: LD_EXP 69
70474: NOT
70475: IFFALSE 70479
// exit ;
70477: GO 70640
// for i = 1 to mc_bases do
70479: LD_ADDR_VAR 0 2
70483: PUSH
70484: DOUBLE
70485: LD_INT 1
70487: DEC
70488: ST_TO_ADDR
70489: LD_EXP 69
70493: PUSH
70494: FOR_TO
70495: IFFALSE 70638
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
70497: LD_ADDR_VAR 0 4
70501: PUSH
70502: LD_EXP 88
70506: PUSH
70507: LD_VAR 0 2
70511: ARRAY
70512: PUSH
70513: LD_EXP 91
70517: PUSH
70518: LD_VAR 0 2
70522: ARRAY
70523: ADD
70524: PPUSH
70525: LD_INT 33
70527: PUSH
70528: LD_INT 2
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PPUSH
70535: CALL_OW 72
70539: ST_TO_ADDR
// if tmp then
70540: LD_VAR 0 4
70544: IFFALSE 70636
// for j in tmp do
70546: LD_ADDR_VAR 0 3
70550: PUSH
70551: LD_VAR 0 4
70555: PUSH
70556: FOR_IN
70557: IFFALSE 70634
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70559: LD_VAR 0 3
70563: PPUSH
70564: CALL_OW 312
70568: NOT
70569: PUSH
70570: LD_VAR 0 3
70574: PPUSH
70575: CALL_OW 256
70579: PUSH
70580: LD_INT 250
70582: GREATEREQUAL
70583: AND
70584: IFFALSE 70597
// Connect ( j ) else
70586: LD_VAR 0 3
70590: PPUSH
70591: CALL 29326 0 1
70595: GO 70632
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70597: LD_VAR 0 3
70601: PPUSH
70602: CALL_OW 256
70606: PUSH
70607: LD_INT 250
70609: LESS
70610: PUSH
70611: LD_VAR 0 3
70615: PPUSH
70616: CALL_OW 312
70620: AND
70621: IFFALSE 70632
// ComUnlink ( j ) ;
70623: LD_VAR 0 3
70627: PPUSH
70628: CALL_OW 136
70632: GO 70556
70634: POP
70635: POP
// end ;
70636: GO 70494
70638: POP
70639: POP
// end ;
70640: LD_VAR 0 1
70644: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70645: LD_INT 0
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
70651: PPUSH
// if not mc_bases then
70652: LD_EXP 69
70656: NOT
70657: IFFALSE 70661
// exit ;
70659: GO 71121
// for i = 1 to mc_bases do
70661: LD_ADDR_VAR 0 2
70665: PUSH
70666: DOUBLE
70667: LD_INT 1
70669: DEC
70670: ST_TO_ADDR
70671: LD_EXP 69
70675: PUSH
70676: FOR_TO
70677: IFFALSE 71119
// begin if not mc_produce [ i ] then
70679: LD_EXP 90
70683: PUSH
70684: LD_VAR 0 2
70688: ARRAY
70689: NOT
70690: IFFALSE 70694
// continue ;
70692: GO 70676
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70694: LD_ADDR_VAR 0 5
70698: PUSH
70699: LD_EXP 69
70703: PUSH
70704: LD_VAR 0 2
70708: ARRAY
70709: PPUSH
70710: LD_INT 30
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PPUSH
70720: CALL_OW 72
70724: ST_TO_ADDR
// if not fac then
70725: LD_VAR 0 5
70729: NOT
70730: IFFALSE 70734
// continue ;
70732: GO 70676
// for j in fac do
70734: LD_ADDR_VAR 0 3
70738: PUSH
70739: LD_VAR 0 5
70743: PUSH
70744: FOR_IN
70745: IFFALSE 71115
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
70747: LD_VAR 0 3
70751: PPUSH
70752: CALL_OW 461
70756: PUSH
70757: LD_INT 2
70759: NONEQUAL
70760: PUSH
70761: LD_VAR 0 3
70765: PPUSH
70766: LD_INT 15
70768: PPUSH
70769: CALL 28999 0 2
70773: PUSH
70774: LD_INT 4
70776: ARRAY
70777: OR
70778: PUSH
70779: LD_VAR 0 3
70783: PPUSH
70784: CALL_OW 313
70788: PUSH
70789: LD_INT 0
70791: EQUAL
70792: OR
70793: IFFALSE 70797
// continue ;
70795: GO 70744
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
70797: LD_VAR 0 3
70801: PPUSH
70802: LD_EXP 90
70806: PUSH
70807: LD_VAR 0 2
70811: ARRAY
70812: PUSH
70813: LD_INT 1
70815: ARRAY
70816: PUSH
70817: LD_INT 1
70819: ARRAY
70820: PPUSH
70821: LD_EXP 90
70825: PUSH
70826: LD_VAR 0 2
70830: ARRAY
70831: PUSH
70832: LD_INT 1
70834: ARRAY
70835: PUSH
70836: LD_INT 2
70838: ARRAY
70839: PPUSH
70840: LD_EXP 90
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: PUSH
70851: LD_INT 1
70853: ARRAY
70854: PUSH
70855: LD_INT 3
70857: ARRAY
70858: PPUSH
70859: LD_EXP 90
70863: PUSH
70864: LD_VAR 0 2
70868: ARRAY
70869: PUSH
70870: LD_INT 1
70872: ARRAY
70873: PUSH
70874: LD_INT 4
70876: ARRAY
70877: PPUSH
70878: CALL_OW 448
70882: PUSH
70883: LD_VAR 0 3
70887: PPUSH
70888: LD_EXP 90
70892: PUSH
70893: LD_VAR 0 2
70897: ARRAY
70898: PUSH
70899: LD_INT 1
70901: ARRAY
70902: PUSH
70903: LD_INT 1
70905: ARRAY
70906: PUSH
70907: LD_EXP 90
70911: PUSH
70912: LD_VAR 0 2
70916: ARRAY
70917: PUSH
70918: LD_INT 1
70920: ARRAY
70921: PUSH
70922: LD_INT 2
70924: ARRAY
70925: PUSH
70926: LD_EXP 90
70930: PUSH
70931: LD_VAR 0 2
70935: ARRAY
70936: PUSH
70937: LD_INT 1
70939: ARRAY
70940: PUSH
70941: LD_INT 3
70943: ARRAY
70944: PUSH
70945: LD_EXP 90
70949: PUSH
70950: LD_VAR 0 2
70954: ARRAY
70955: PUSH
70956: LD_INT 1
70958: ARRAY
70959: PUSH
70960: LD_INT 4
70962: ARRAY
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: PPUSH
70970: CALL 32540 0 2
70974: AND
70975: IFFALSE 71113
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
70977: LD_VAR 0 3
70981: PPUSH
70982: LD_EXP 90
70986: PUSH
70987: LD_VAR 0 2
70991: ARRAY
70992: PUSH
70993: LD_INT 1
70995: ARRAY
70996: PUSH
70997: LD_INT 1
70999: ARRAY
71000: PPUSH
71001: LD_EXP 90
71005: PUSH
71006: LD_VAR 0 2
71010: ARRAY
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PUSH
71016: LD_INT 2
71018: ARRAY
71019: PPUSH
71020: LD_EXP 90
71024: PUSH
71025: LD_VAR 0 2
71029: ARRAY
71030: PUSH
71031: LD_INT 1
71033: ARRAY
71034: PUSH
71035: LD_INT 3
71037: ARRAY
71038: PPUSH
71039: LD_EXP 90
71043: PUSH
71044: LD_VAR 0 2
71048: ARRAY
71049: PUSH
71050: LD_INT 1
71052: ARRAY
71053: PUSH
71054: LD_INT 4
71056: ARRAY
71057: PPUSH
71058: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_EXP 90
71071: PUSH
71072: LD_VAR 0 2
71076: ARRAY
71077: PPUSH
71078: LD_INT 1
71080: PPUSH
71081: CALL_OW 3
71085: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71086: LD_ADDR_EXP 90
71090: PUSH
71091: LD_EXP 90
71095: PPUSH
71096: LD_VAR 0 2
71100: PPUSH
71101: LD_VAR 0 4
71105: PPUSH
71106: CALL_OW 1
71110: ST_TO_ADDR
// break ;
71111: GO 71115
// end ; end ;
71113: GO 70744
71115: POP
71116: POP
// end ;
71117: GO 70676
71119: POP
71120: POP
// end ;
71121: LD_VAR 0 1
71125: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71126: LD_INT 0
71128: PPUSH
71129: PPUSH
71130: PPUSH
// if not mc_bases then
71131: LD_EXP 69
71135: NOT
71136: IFFALSE 71140
// exit ;
71138: GO 71229
// for i = 1 to mc_bases do
71140: LD_ADDR_VAR 0 2
71144: PUSH
71145: DOUBLE
71146: LD_INT 1
71148: DEC
71149: ST_TO_ADDR
71150: LD_EXP 69
71154: PUSH
71155: FOR_TO
71156: IFFALSE 71227
// begin if mc_attack [ i ] then
71158: LD_EXP 89
71162: PUSH
71163: LD_VAR 0 2
71167: ARRAY
71168: IFFALSE 71225
// begin tmp := mc_attack [ i ] [ 1 ] ;
71170: LD_ADDR_VAR 0 3
71174: PUSH
71175: LD_EXP 89
71179: PUSH
71180: LD_VAR 0 2
71184: ARRAY
71185: PUSH
71186: LD_INT 1
71188: ARRAY
71189: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71190: LD_ADDR_EXP 89
71194: PUSH
71195: LD_EXP 89
71199: PPUSH
71200: LD_VAR 0 2
71204: PPUSH
71205: EMPTY
71206: PPUSH
71207: CALL_OW 1
71211: ST_TO_ADDR
// Attack ( tmp ) ;
71212: LD_VAR 0 3
71216: PPUSH
71217: CALL 54644 0 1
// exit ;
71221: POP
71222: POP
71223: GO 71229
// end ; end ;
71225: GO 71155
71227: POP
71228: POP
// end ;
71229: LD_VAR 0 1
71233: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71234: LD_INT 0
71236: PPUSH
71237: PPUSH
71238: PPUSH
71239: PPUSH
71240: PPUSH
71241: PPUSH
71242: PPUSH
// if not mc_bases then
71243: LD_EXP 69
71247: NOT
71248: IFFALSE 71252
// exit ;
71250: GO 71627
// for i = 1 to mc_bases do
71252: LD_ADDR_VAR 0 2
71256: PUSH
71257: DOUBLE
71258: LD_INT 1
71260: DEC
71261: ST_TO_ADDR
71262: LD_EXP 69
71266: PUSH
71267: FOR_TO
71268: IFFALSE 71625
// begin if not mc_bases [ i ] then
71270: LD_EXP 69
71274: PUSH
71275: LD_VAR 0 2
71279: ARRAY
71280: NOT
71281: IFFALSE 71285
// continue ;
71283: GO 71267
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71285: LD_ADDR_VAR 0 7
71289: PUSH
71290: LD_EXP 69
71294: PUSH
71295: LD_VAR 0 2
71299: ARRAY
71300: PUSH
71301: LD_INT 1
71303: ARRAY
71304: PPUSH
71305: CALL 23277 0 1
71309: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71310: LD_ADDR_EXP 92
71314: PUSH
71315: LD_EXP 92
71319: PPUSH
71320: LD_VAR 0 2
71324: PPUSH
71325: LD_EXP 69
71329: PUSH
71330: LD_VAR 0 2
71334: ARRAY
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PPUSH
71340: CALL_OW 255
71344: PPUSH
71345: LD_EXP 94
71349: PUSH
71350: LD_VAR 0 2
71354: ARRAY
71355: PPUSH
71356: CALL 21237 0 2
71360: PPUSH
71361: CALL_OW 1
71365: ST_TO_ADDR
// if not mc_scan [ i ] then
71366: LD_EXP 92
71370: PUSH
71371: LD_VAR 0 2
71375: ARRAY
71376: NOT
71377: IFFALSE 71532
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71379: LD_ADDR_VAR 0 4
71383: PUSH
71384: LD_EXP 69
71388: PUSH
71389: LD_VAR 0 2
71393: ARRAY
71394: PPUSH
71395: LD_INT 2
71397: PUSH
71398: LD_INT 25
71400: PUSH
71401: LD_INT 5
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 25
71410: PUSH
71411: LD_INT 8
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 25
71420: PUSH
71421: LD_INT 9
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: PPUSH
71434: CALL_OW 72
71438: ST_TO_ADDR
// if not tmp then
71439: LD_VAR 0 4
71443: NOT
71444: IFFALSE 71448
// continue ;
71446: GO 71267
// for j in tmp do
71448: LD_ADDR_VAR 0 3
71452: PUSH
71453: LD_VAR 0 4
71457: PUSH
71458: FOR_IN
71459: IFFALSE 71530
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71461: LD_VAR 0 3
71465: PPUSH
71466: CALL_OW 310
71470: PPUSH
71471: CALL_OW 266
71475: PUSH
71476: LD_INT 5
71478: EQUAL
71479: PUSH
71480: LD_VAR 0 3
71484: PPUSH
71485: CALL_OW 257
71489: PUSH
71490: LD_INT 1
71492: EQUAL
71493: AND
71494: PUSH
71495: LD_VAR 0 3
71499: PPUSH
71500: CALL_OW 459
71504: NOT
71505: AND
71506: PUSH
71507: LD_VAR 0 7
71511: AND
71512: IFFALSE 71528
// ComChangeProfession ( j , class ) ;
71514: LD_VAR 0 3
71518: PPUSH
71519: LD_VAR 0 7
71523: PPUSH
71524: CALL_OW 123
71528: GO 71458
71530: POP
71531: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
71532: LD_EXP 92
71536: PUSH
71537: LD_VAR 0 2
71541: ARRAY
71542: PUSH
71543: LD_EXP 91
71547: PUSH
71548: LD_VAR 0 2
71552: ARRAY
71553: AND
71554: IFFALSE 71623
// begin tmp := mc_defender [ i ] ;
71556: LD_ADDR_VAR 0 4
71560: PUSH
71561: LD_EXP 91
71565: PUSH
71566: LD_VAR 0 2
71570: ARRAY
71571: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
71572: LD_ADDR_EXP 91
71576: PUSH
71577: LD_EXP 91
71581: PPUSH
71582: LD_VAR 0 2
71586: PPUSH
71587: EMPTY
71588: PPUSH
71589: CALL_OW 1
71593: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
71594: LD_VAR 0 2
71598: PPUSH
71599: LD_VAR 0 4
71603: PPUSH
71604: LD_EXP 92
71608: PUSH
71609: LD_VAR 0 2
71613: ARRAY
71614: PPUSH
71615: CALL 21770 0 3
// exit ;
71619: POP
71620: POP
71621: GO 71627
// end ; end ;
71623: GO 71267
71625: POP
71626: POP
// end ;
71627: LD_VAR 0 1
71631: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
71636: PPUSH
71637: PPUSH
71638: PPUSH
71639: PPUSH
71640: PPUSH
71641: PPUSH
71642: PPUSH
// if not mc_bases then
71643: LD_EXP 69
71647: NOT
71648: IFFALSE 71652
// exit ;
71650: GO 72596
// for i = 1 to mc_bases do
71652: LD_ADDR_VAR 0 2
71656: PUSH
71657: DOUBLE
71658: LD_INT 1
71660: DEC
71661: ST_TO_ADDR
71662: LD_EXP 69
71666: PUSH
71667: FOR_TO
71668: IFFALSE 72594
// begin tmp := mc_lab [ i ] ;
71670: LD_ADDR_VAR 0 6
71674: PUSH
71675: LD_EXP 102
71679: PUSH
71680: LD_VAR 0 2
71684: ARRAY
71685: ST_TO_ADDR
// if not tmp then
71686: LD_VAR 0 6
71690: NOT
71691: IFFALSE 71695
// continue ;
71693: GO 71667
// for j in tmp do
71695: LD_ADDR_VAR 0 3
71699: PUSH
71700: LD_VAR 0 6
71704: PUSH
71705: FOR_IN
71706: IFFALSE 72590
// begin side := GetSide ( j ) ;
71708: LD_ADDR_VAR 0 4
71712: PUSH
71713: LD_VAR 0 3
71717: PPUSH
71718: CALL_OW 255
71722: ST_TO_ADDR
// if not mc_tech [ side ] then
71723: LD_EXP 96
71727: PUSH
71728: LD_VAR 0 4
71732: ARRAY
71733: NOT
71734: IFFALSE 71738
// continue ;
71736: GO 71705
// if BuildingStatus ( j ) = bs_idle then
71738: LD_VAR 0 3
71742: PPUSH
71743: CALL_OW 461
71747: PUSH
71748: LD_INT 2
71750: EQUAL
71751: IFFALSE 71824
// for t in mc_tech [ side ] do
71753: LD_ADDR_VAR 0 5
71757: PUSH
71758: LD_EXP 96
71762: PUSH
71763: LD_VAR 0 4
71767: ARRAY
71768: PUSH
71769: FOR_IN
71770: IFFALSE 71822
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
71772: LD_VAR 0 3
71776: PPUSH
71777: LD_VAR 0 5
71781: PPUSH
71782: CALL_OW 430
71786: PUSH
71787: LD_VAR 0 4
71791: PPUSH
71792: LD_VAR 0 5
71796: PPUSH
71797: CALL 20342 0 2
71801: AND
71802: IFFALSE 71820
// begin ComResearch ( j , t ) ;
71804: LD_VAR 0 3
71808: PPUSH
71809: LD_VAR 0 5
71813: PPUSH
71814: CALL_OW 124
// break ;
71818: GO 71822
// end ;
71820: GO 71769
71822: POP
71823: POP
// if BuildingStatus ( j ) = bs_need_ape then
71824: LD_VAR 0 3
71828: PPUSH
71829: CALL_OW 461
71833: PUSH
71834: LD_INT 10
71836: EQUAL
71837: IFFALSE 72425
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
71839: LD_EXP 98
71843: PUSH
71844: LD_VAR 0 2
71848: ARRAY
71849: NOT
71850: PUSH
71851: LD_EXP 99
71855: PUSH
71856: LD_VAR 0 2
71860: ARRAY
71861: NOT
71862: AND
71863: PUSH
71864: LD_EXP 96
71868: PUSH
71869: LD_VAR 0 4
71873: ARRAY
71874: PUSH
71875: LD_INT 1
71877: GREATER
71878: AND
71879: IFFALSE 72010
// begin ComCancel ( j ) ;
71881: LD_VAR 0 3
71885: PPUSH
71886: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
71890: LD_ADDR_EXP 96
71894: PUSH
71895: LD_EXP 96
71899: PPUSH
71900: LD_VAR 0 4
71904: PPUSH
71905: LD_EXP 96
71909: PUSH
71910: LD_VAR 0 4
71914: ARRAY
71915: PPUSH
71916: LD_EXP 96
71920: PUSH
71921: LD_VAR 0 4
71925: ARRAY
71926: PUSH
71927: LD_INT 1
71929: MINUS
71930: PPUSH
71931: LD_EXP 96
71935: PUSH
71936: LD_VAR 0 4
71940: ARRAY
71941: PPUSH
71942: LD_INT 0
71944: PPUSH
71945: CALL 25791 0 4
71949: PPUSH
71950: CALL_OW 1
71954: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
71955: LD_ADDR_EXP 96
71959: PUSH
71960: LD_EXP 96
71964: PPUSH
71965: LD_VAR 0 4
71969: PPUSH
71970: LD_EXP 96
71974: PUSH
71975: LD_VAR 0 4
71979: ARRAY
71980: PPUSH
71981: LD_EXP 96
71985: PUSH
71986: LD_VAR 0 4
71990: ARRAY
71991: PPUSH
71992: LD_INT 1
71994: PPUSH
71995: LD_INT 0
71997: PPUSH
71998: CALL 25791 0 4
72002: PPUSH
72003: CALL_OW 1
72007: ST_TO_ADDR
// continue ;
72008: GO 71705
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72010: LD_EXP 98
72014: PUSH
72015: LD_VAR 0 2
72019: ARRAY
72020: PUSH
72021: LD_EXP 99
72025: PUSH
72026: LD_VAR 0 2
72030: ARRAY
72031: NOT
72032: AND
72033: IFFALSE 72160
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72035: LD_ADDR_EXP 99
72039: PUSH
72040: LD_EXP 99
72044: PPUSH
72045: LD_VAR 0 2
72049: PUSH
72050: LD_EXP 99
72054: PUSH
72055: LD_VAR 0 2
72059: ARRAY
72060: PUSH
72061: LD_INT 1
72063: PLUS
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PPUSH
72069: LD_EXP 98
72073: PUSH
72074: LD_VAR 0 2
72078: ARRAY
72079: PUSH
72080: LD_INT 1
72082: ARRAY
72083: PPUSH
72084: CALL 26808 0 3
72088: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72089: LD_EXP 98
72093: PUSH
72094: LD_VAR 0 2
72098: ARRAY
72099: PUSH
72100: LD_INT 1
72102: ARRAY
72103: PPUSH
72104: LD_INT 112
72106: PPUSH
72107: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72111: LD_ADDR_VAR 0 9
72115: PUSH
72116: LD_EXP 98
72120: PUSH
72121: LD_VAR 0 2
72125: ARRAY
72126: PPUSH
72127: LD_INT 1
72129: PPUSH
72130: CALL_OW 3
72134: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72135: LD_ADDR_EXP 98
72139: PUSH
72140: LD_EXP 98
72144: PPUSH
72145: LD_VAR 0 2
72149: PPUSH
72150: LD_VAR 0 9
72154: PPUSH
72155: CALL_OW 1
72159: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72160: LD_EXP 98
72164: PUSH
72165: LD_VAR 0 2
72169: ARRAY
72170: PUSH
72171: LD_EXP 99
72175: PUSH
72176: LD_VAR 0 2
72180: ARRAY
72181: AND
72182: PUSH
72183: LD_EXP 99
72187: PUSH
72188: LD_VAR 0 2
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: PPUSH
72198: CALL_OW 310
72202: NOT
72203: AND
72204: PUSH
72205: LD_VAR 0 3
72209: PPUSH
72210: CALL_OW 313
72214: PUSH
72215: LD_INT 6
72217: EQUAL
72218: AND
72219: IFFALSE 72275
// begin tmp2 := UnitsInside ( j ) ;
72221: LD_ADDR_VAR 0 9
72225: PUSH
72226: LD_VAR 0 3
72230: PPUSH
72231: CALL_OW 313
72235: ST_TO_ADDR
// if tmp2 = 6 then
72236: LD_VAR 0 9
72240: PUSH
72241: LD_INT 6
72243: EQUAL
72244: IFFALSE 72275
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72246: LD_VAR 0 9
72250: PUSH
72251: LD_INT 1
72253: ARRAY
72254: PPUSH
72255: LD_INT 112
72257: PPUSH
72258: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72262: LD_VAR 0 9
72266: PUSH
72267: LD_INT 1
72269: ARRAY
72270: PPUSH
72271: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72275: LD_EXP 99
72279: PUSH
72280: LD_VAR 0 2
72284: ARRAY
72285: PUSH
72286: LD_EXP 99
72290: PUSH
72291: LD_VAR 0 2
72295: ARRAY
72296: PUSH
72297: LD_INT 1
72299: ARRAY
72300: PPUSH
72301: CALL_OW 314
72305: NOT
72306: AND
72307: PUSH
72308: LD_EXP 99
72312: PUSH
72313: LD_VAR 0 2
72317: ARRAY
72318: PUSH
72319: LD_INT 1
72321: ARRAY
72322: PPUSH
72323: CALL_OW 310
72327: NOT
72328: AND
72329: IFFALSE 72355
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72331: LD_EXP 99
72335: PUSH
72336: LD_VAR 0 2
72340: ARRAY
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PPUSH
72346: LD_VAR 0 3
72350: PPUSH
72351: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72355: LD_EXP 99
72359: PUSH
72360: LD_VAR 0 2
72364: ARRAY
72365: PUSH
72366: LD_INT 1
72368: ARRAY
72369: PPUSH
72370: CALL_OW 310
72374: PUSH
72375: LD_EXP 99
72379: PUSH
72380: LD_VAR 0 2
72384: ARRAY
72385: PUSH
72386: LD_INT 1
72388: ARRAY
72389: PPUSH
72390: CALL_OW 310
72394: PPUSH
72395: CALL_OW 461
72399: PUSH
72400: LD_INT 3
72402: NONEQUAL
72403: AND
72404: IFFALSE 72425
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72406: LD_EXP 99
72410: PUSH
72411: LD_VAR 0 2
72415: ARRAY
72416: PUSH
72417: LD_INT 1
72419: ARRAY
72420: PPUSH
72421: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72425: LD_VAR 0 3
72429: PPUSH
72430: CALL_OW 461
72434: PUSH
72435: LD_INT 6
72437: EQUAL
72438: PUSH
72439: LD_VAR 0 6
72443: PUSH
72444: LD_INT 1
72446: GREATER
72447: AND
72448: IFFALSE 72588
// begin sci := [ ] ;
72450: LD_ADDR_VAR 0 8
72454: PUSH
72455: EMPTY
72456: ST_TO_ADDR
// for x in tmp diff j do
72457: LD_ADDR_VAR 0 7
72461: PUSH
72462: LD_VAR 0 6
72466: PUSH
72467: LD_VAR 0 3
72471: DIFF
72472: PUSH
72473: FOR_IN
72474: IFFALSE 72514
// begin if BuildingStatus ( x ) = bs_idle then
72476: LD_VAR 0 7
72480: PPUSH
72481: CALL_OW 461
72485: PUSH
72486: LD_INT 2
72488: EQUAL
72489: IFFALSE 72512
// sci := sci ^ UnitsInside ( x ) ;
72491: LD_ADDR_VAR 0 8
72495: PUSH
72496: LD_VAR 0 8
72500: PUSH
72501: LD_VAR 0 7
72505: PPUSH
72506: CALL_OW 313
72510: ADD
72511: ST_TO_ADDR
// end ;
72512: GO 72473
72514: POP
72515: POP
// if not sci then
72516: LD_VAR 0 8
72520: NOT
72521: IFFALSE 72525
// continue ;
72523: GO 71705
// for x in sci do
72525: LD_ADDR_VAR 0 7
72529: PUSH
72530: LD_VAR 0 8
72534: PUSH
72535: FOR_IN
72536: IFFALSE 72586
// if IsInUnit ( x ) and not HasTask ( x ) then
72538: LD_VAR 0 7
72542: PPUSH
72543: CALL_OW 310
72547: PUSH
72548: LD_VAR 0 7
72552: PPUSH
72553: CALL_OW 314
72557: NOT
72558: AND
72559: IFFALSE 72584
// begin ComExitBuilding ( x ) ;
72561: LD_VAR 0 7
72565: PPUSH
72566: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72570: LD_VAR 0 7
72574: PPUSH
72575: LD_VAR 0 3
72579: PPUSH
72580: CALL_OW 180
// end ;
72584: GO 72535
72586: POP
72587: POP
// end ; end ;
72588: GO 71705
72590: POP
72591: POP
// end ;
72592: GO 71667
72594: POP
72595: POP
// end ;
72596: LD_VAR 0 1
72600: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
72601: LD_INT 0
72603: PPUSH
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
72609: PPUSH
72610: PPUSH
// if not mc_bases or not mc_parking then
72611: LD_EXP 69
72615: NOT
72616: PUSH
72617: LD_EXP 93
72621: NOT
72622: OR
72623: IFFALSE 72627
// exit ;
72625: GO 73285
// for i = 1 to mc_bases do
72627: LD_ADDR_VAR 0 2
72631: PUSH
72632: DOUBLE
72633: LD_INT 1
72635: DEC
72636: ST_TO_ADDR
72637: LD_EXP 69
72641: PUSH
72642: FOR_TO
72643: IFFALSE 73283
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
72645: LD_EXP 69
72649: PUSH
72650: LD_VAR 0 2
72654: ARRAY
72655: NOT
72656: PUSH
72657: LD_EXP 93
72661: PUSH
72662: LD_VAR 0 2
72666: ARRAY
72667: NOT
72668: OR
72669: IFFALSE 72673
// continue ;
72671: GO 72642
// if mc_scan [ i ] then
72673: LD_EXP 92
72677: PUSH
72678: LD_VAR 0 2
72682: ARRAY
72683: IFFALSE 72709
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72685: LD_ADDR_EXP 81
72689: PUSH
72690: LD_EXP 81
72694: PPUSH
72695: LD_VAR 0 2
72699: PPUSH
72700: EMPTY
72701: PPUSH
72702: CALL_OW 1
72706: ST_TO_ADDR
// continue ;
72707: GO 72642
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
72709: LD_ADDR_VAR 0 5
72713: PUSH
72714: LD_EXP 69
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: PUSH
72725: LD_INT 1
72727: ARRAY
72728: PPUSH
72729: CALL_OW 255
72733: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72734: LD_ADDR_VAR 0 6
72738: PUSH
72739: LD_EXP 69
72743: PUSH
72744: LD_VAR 0 2
72748: ARRAY
72749: PPUSH
72750: LD_INT 30
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PPUSH
72760: CALL_OW 72
72764: ST_TO_ADDR
// if not fac then
72765: LD_VAR 0 6
72769: NOT
72770: IFFALSE 72821
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72772: LD_ADDR_VAR 0 6
72776: PUSH
72777: LD_EXP 69
72781: PUSH
72782: LD_VAR 0 2
72786: ARRAY
72787: PPUSH
72788: LD_INT 2
72790: PUSH
72791: LD_INT 30
72793: PUSH
72794: LD_INT 0
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 30
72803: PUSH
72804: LD_INT 1
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: LIST
72815: PPUSH
72816: CALL_OW 72
72820: ST_TO_ADDR
// if not fac then
72821: LD_VAR 0 6
72825: NOT
72826: IFFALSE 72830
// continue ;
72828: GO 72642
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72830: LD_ADDR_VAR 0 7
72834: PUSH
72835: LD_EXP 93
72839: PUSH
72840: LD_VAR 0 2
72844: ARRAY
72845: PPUSH
72846: LD_INT 22
72848: PUSH
72849: LD_VAR 0 5
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 21
72860: PUSH
72861: LD_INT 2
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 3
72870: PUSH
72871: LD_INT 24
72873: PUSH
72874: LD_INT 1000
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: LIST
72889: PPUSH
72890: CALL_OW 70
72894: PUSH
72895: LD_INT 22
72897: PUSH
72898: LD_VAR 0 5
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 91
72909: PUSH
72910: LD_VAR 0 6
72914: PUSH
72915: LD_INT 1
72917: ARRAY
72918: PUSH
72919: LD_INT 25
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 21
72929: PUSH
72930: LD_INT 2
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 3
72939: PUSH
72940: LD_INT 24
72942: PUSH
72943: LD_INT 1000
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: PPUSH
72960: CALL_OW 69
72964: UNION
72965: ST_TO_ADDR
// if not vehs then
72966: LD_VAR 0 7
72970: NOT
72971: IFFALSE 72997
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72973: LD_ADDR_EXP 81
72977: PUSH
72978: LD_EXP 81
72982: PPUSH
72983: LD_VAR 0 2
72987: PPUSH
72988: EMPTY
72989: PPUSH
72990: CALL_OW 1
72994: ST_TO_ADDR
// continue ;
72995: GO 72642
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72997: LD_ADDR_VAR 0 8
73001: PUSH
73002: LD_EXP 69
73006: PUSH
73007: LD_VAR 0 2
73011: ARRAY
73012: PPUSH
73013: LD_INT 30
73015: PUSH
73016: LD_INT 3
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PPUSH
73023: CALL_OW 72
73027: ST_TO_ADDR
// if tmp then
73028: LD_VAR 0 8
73032: IFFALSE 73135
// begin for j in tmp do
73034: LD_ADDR_VAR 0 3
73038: PUSH
73039: LD_VAR 0 8
73043: PUSH
73044: FOR_IN
73045: IFFALSE 73133
// for k in UnitsInside ( j ) do
73047: LD_ADDR_VAR 0 4
73051: PUSH
73052: LD_VAR 0 3
73056: PPUSH
73057: CALL_OW 313
73061: PUSH
73062: FOR_IN
73063: IFFALSE 73129
// if k then
73065: LD_VAR 0 4
73069: IFFALSE 73127
// if not k in mc_repair_vehicle [ i ] then
73071: LD_VAR 0 4
73075: PUSH
73076: LD_EXP 81
73080: PUSH
73081: LD_VAR 0 2
73085: ARRAY
73086: IN
73087: NOT
73088: IFFALSE 73127
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73090: LD_ADDR_EXP 81
73094: PUSH
73095: LD_EXP 81
73099: PPUSH
73100: LD_VAR 0 2
73104: PPUSH
73105: LD_EXP 81
73109: PUSH
73110: LD_VAR 0 2
73114: ARRAY
73115: PUSH
73116: LD_VAR 0 4
73120: UNION
73121: PPUSH
73122: CALL_OW 1
73126: ST_TO_ADDR
73127: GO 73062
73129: POP
73130: POP
73131: GO 73044
73133: POP
73134: POP
// end ; if not mc_repair_vehicle [ i ] then
73135: LD_EXP 81
73139: PUSH
73140: LD_VAR 0 2
73144: ARRAY
73145: NOT
73146: IFFALSE 73150
// continue ;
73148: GO 72642
// for j in mc_repair_vehicle [ i ] do
73150: LD_ADDR_VAR 0 3
73154: PUSH
73155: LD_EXP 81
73159: PUSH
73160: LD_VAR 0 2
73164: ARRAY
73165: PUSH
73166: FOR_IN
73167: IFFALSE 73279
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73169: LD_VAR 0 3
73173: PPUSH
73174: CALL_OW 311
73178: NOT
73179: PUSH
73180: LD_VAR 0 3
73184: PUSH
73185: LD_EXP 72
73189: PUSH
73190: LD_VAR 0 2
73194: ARRAY
73195: PUSH
73196: LD_INT 1
73198: ARRAY
73199: IN
73200: NOT
73201: AND
73202: PUSH
73203: LD_VAR 0 3
73207: PUSH
73208: LD_EXP 72
73212: PUSH
73213: LD_VAR 0 2
73217: ARRAY
73218: PUSH
73219: LD_INT 2
73221: ARRAY
73222: IN
73223: NOT
73224: AND
73225: IFFALSE 73277
// begin if IsInUnit ( j ) then
73227: LD_VAR 0 3
73231: PPUSH
73232: CALL_OW 310
73236: IFFALSE 73247
// ComExitBuilding ( j ) ;
73238: LD_VAR 0 3
73242: PPUSH
73243: CALL_OW 122
// if not HasTask ( j ) then
73247: LD_VAR 0 3
73251: PPUSH
73252: CALL_OW 314
73256: NOT
73257: IFFALSE 73277
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73259: LD_VAR 0 3
73263: PPUSH
73264: LD_VAR 0 7
73268: PUSH
73269: LD_INT 1
73271: ARRAY
73272: PPUSH
73273: CALL_OW 189
// end ; end ;
73277: GO 73166
73279: POP
73280: POP
// end ;
73281: GO 72642
73283: POP
73284: POP
// end ;
73285: LD_VAR 0 1
73289: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73290: LD_INT 0
73292: PPUSH
73293: PPUSH
73294: PPUSH
73295: PPUSH
73296: PPUSH
73297: PPUSH
73298: PPUSH
73299: PPUSH
73300: PPUSH
73301: PPUSH
73302: PPUSH
// if not mc_bases then
73303: LD_EXP 69
73307: NOT
73308: IFFALSE 73312
// exit ;
73310: GO 74048
// for i = 1 to mc_bases do
73312: LD_ADDR_VAR 0 2
73316: PUSH
73317: DOUBLE
73318: LD_INT 1
73320: DEC
73321: ST_TO_ADDR
73322: LD_EXP 69
73326: PUSH
73327: FOR_TO
73328: IFFALSE 74046
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
73330: LD_EXP 97
73334: PUSH
73335: LD_VAR 0 2
73339: ARRAY
73340: NOT
73341: PUSH
73342: LD_EXP 72
73346: PUSH
73347: LD_VAR 0 2
73351: ARRAY
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: OR
73357: PUSH
73358: LD_EXP 72
73362: PUSH
73363: LD_VAR 0 2
73367: ARRAY
73368: PUSH
73369: LD_INT 2
73371: ARRAY
73372: OR
73373: PUSH
73374: LD_EXP 95
73378: PUSH
73379: LD_VAR 0 2
73383: ARRAY
73384: PPUSH
73385: LD_INT 1
73387: PPUSH
73388: CALL_OW 325
73392: NOT
73393: OR
73394: PUSH
73395: LD_EXP 92
73399: PUSH
73400: LD_VAR 0 2
73404: ARRAY
73405: OR
73406: IFFALSE 73410
// continue ;
73408: GO 73327
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
73410: LD_ADDR_VAR 0 8
73414: PUSH
73415: LD_EXP 69
73419: PUSH
73420: LD_VAR 0 2
73424: ARRAY
73425: PPUSH
73426: LD_INT 25
73428: PUSH
73429: LD_INT 4
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 50
73438: PUSH
73439: EMPTY
73440: LIST
73441: PUSH
73442: LD_INT 3
73444: PUSH
73445: LD_INT 60
73447: PUSH
73448: EMPTY
73449: LIST
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: LIST
73459: PPUSH
73460: CALL_OW 72
73464: PUSH
73465: LD_EXP 73
73469: PUSH
73470: LD_VAR 0 2
73474: ARRAY
73475: DIFF
73476: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73477: LD_ADDR_VAR 0 9
73481: PUSH
73482: LD_EXP 69
73486: PUSH
73487: LD_VAR 0 2
73491: ARRAY
73492: PPUSH
73493: LD_INT 2
73495: PUSH
73496: LD_INT 30
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 30
73508: PUSH
73509: LD_INT 1
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PPUSH
73521: CALL_OW 72
73525: ST_TO_ADDR
// if not tmp or not dep then
73526: LD_VAR 0 8
73530: NOT
73531: PUSH
73532: LD_VAR 0 9
73536: NOT
73537: OR
73538: IFFALSE 73542
// continue ;
73540: GO 73327
// side := GetSide ( tmp [ 1 ] ) ;
73542: LD_ADDR_VAR 0 11
73546: PUSH
73547: LD_VAR 0 8
73551: PUSH
73552: LD_INT 1
73554: ARRAY
73555: PPUSH
73556: CALL_OW 255
73560: ST_TO_ADDR
// dep := dep [ 1 ] ;
73561: LD_ADDR_VAR 0 9
73565: PUSH
73566: LD_VAR 0 9
73570: PUSH
73571: LD_INT 1
73573: ARRAY
73574: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
73575: LD_ADDR_VAR 0 7
73579: PUSH
73580: LD_EXP 97
73584: PUSH
73585: LD_VAR 0 2
73589: ARRAY
73590: PPUSH
73591: LD_INT 22
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 25
73603: PUSH
73604: LD_INT 12
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PPUSH
73615: CALL_OW 70
73619: PUSH
73620: LD_INT 22
73622: PUSH
73623: LD_INT 0
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_INT 25
73632: PUSH
73633: LD_INT 12
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 91
73642: PUSH
73643: LD_VAR 0 9
73647: PUSH
73648: LD_INT 20
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: LIST
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: LIST
73660: PPUSH
73661: CALL_OW 69
73665: UNION
73666: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
73667: LD_ADDR_VAR 0 10
73671: PUSH
73672: LD_EXP 97
73676: PUSH
73677: LD_VAR 0 2
73681: ARRAY
73682: PPUSH
73683: LD_INT 81
73685: PUSH
73686: LD_VAR 0 11
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PPUSH
73695: CALL_OW 70
73699: ST_TO_ADDR
// if not apes or danger_at_area then
73700: LD_VAR 0 7
73704: NOT
73705: PUSH
73706: LD_VAR 0 10
73710: OR
73711: IFFALSE 73761
// begin if mc_taming [ i ] then
73713: LD_EXP 100
73717: PUSH
73718: LD_VAR 0 2
73722: ARRAY
73723: IFFALSE 73759
// begin MC_Reset ( i , 121 ) ;
73725: LD_VAR 0 2
73729: PPUSH
73730: LD_INT 121
73732: PPUSH
73733: CALL 64556 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
73737: LD_ADDR_EXP 100
73741: PUSH
73742: LD_EXP 100
73746: PPUSH
73747: LD_VAR 0 2
73751: PPUSH
73752: EMPTY
73753: PPUSH
73754: CALL_OW 1
73758: ST_TO_ADDR
// end ; continue ;
73759: GO 73327
// end ; for j in tmp do
73761: LD_ADDR_VAR 0 3
73765: PUSH
73766: LD_VAR 0 8
73770: PUSH
73771: FOR_IN
73772: IFFALSE 74042
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
73774: LD_VAR 0 3
73778: PUSH
73779: LD_EXP 100
73783: PUSH
73784: LD_VAR 0 2
73788: ARRAY
73789: IN
73790: NOT
73791: PUSH
73792: LD_EXP 100
73796: PUSH
73797: LD_VAR 0 2
73801: ARRAY
73802: PUSH
73803: LD_INT 3
73805: LESS
73806: AND
73807: IFFALSE 73865
// begin SetTag ( j , 121 ) ;
73809: LD_VAR 0 3
73813: PPUSH
73814: LD_INT 121
73816: PPUSH
73817: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
73821: LD_ADDR_EXP 100
73825: PUSH
73826: LD_EXP 100
73830: PPUSH
73831: LD_VAR 0 2
73835: PUSH
73836: LD_EXP 100
73840: PUSH
73841: LD_VAR 0 2
73845: ARRAY
73846: PUSH
73847: LD_INT 1
73849: PLUS
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PPUSH
73855: LD_VAR 0 3
73859: PPUSH
73860: CALL 26808 0 3
73864: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
73865: LD_VAR 0 3
73869: PUSH
73870: LD_EXP 100
73874: PUSH
73875: LD_VAR 0 2
73879: ARRAY
73880: IN
73881: IFFALSE 74040
// begin if IsInUnit ( j ) then
73883: LD_VAR 0 3
73887: PPUSH
73888: CALL_OW 310
73892: IFFALSE 73903
// ComExitBuilding ( j ) ;
73894: LD_VAR 0 3
73898: PPUSH
73899: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73903: LD_ADDR_VAR 0 6
73907: PUSH
73908: LD_VAR 0 7
73912: PPUSH
73913: LD_VAR 0 3
73917: PPUSH
73918: CALL_OW 74
73922: ST_TO_ADDR
// if not ape then
73923: LD_VAR 0 6
73927: NOT
73928: IFFALSE 73932
// break ;
73930: GO 74042
// x := GetX ( ape ) ;
73932: LD_ADDR_VAR 0 4
73936: PUSH
73937: LD_VAR 0 6
73941: PPUSH
73942: CALL_OW 250
73946: ST_TO_ADDR
// y := GetY ( ape ) ;
73947: LD_ADDR_VAR 0 5
73951: PUSH
73952: LD_VAR 0 6
73956: PPUSH
73957: CALL_OW 251
73961: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73962: LD_VAR 0 4
73966: PPUSH
73967: LD_VAR 0 5
73971: PPUSH
73972: CALL_OW 488
73976: NOT
73977: PUSH
73978: LD_VAR 0 11
73982: PPUSH
73983: LD_VAR 0 4
73987: PPUSH
73988: LD_VAR 0 5
73992: PPUSH
73993: LD_INT 20
73995: PPUSH
73996: CALL 27302 0 4
74000: PUSH
74001: LD_INT 4
74003: ARRAY
74004: OR
74005: IFFALSE 74009
// break ;
74007: GO 74042
// if not HasTask ( j ) then
74009: LD_VAR 0 3
74013: PPUSH
74014: CALL_OW 314
74018: NOT
74019: IFFALSE 74040
// ComTameXY ( j , x , y ) ;
74021: LD_VAR 0 3
74025: PPUSH
74026: LD_VAR 0 4
74030: PPUSH
74031: LD_VAR 0 5
74035: PPUSH
74036: CALL_OW 131
// end ; end ;
74040: GO 73771
74042: POP
74043: POP
// end ;
74044: GO 73327
74046: POP
74047: POP
// end ;
74048: LD_VAR 0 1
74052: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74053: LD_INT 0
74055: PPUSH
74056: PPUSH
74057: PPUSH
74058: PPUSH
74059: PPUSH
74060: PPUSH
74061: PPUSH
74062: PPUSH
// if not mc_bases then
74063: LD_EXP 69
74067: NOT
74068: IFFALSE 74072
// exit ;
74070: GO 74682
// for i = 1 to mc_bases do
74072: LD_ADDR_VAR 0 2
74076: PUSH
74077: DOUBLE
74078: LD_INT 1
74080: DEC
74081: ST_TO_ADDR
74082: LD_EXP 69
74086: PUSH
74087: FOR_TO
74088: IFFALSE 74680
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74090: LD_EXP 98
74094: PUSH
74095: LD_VAR 0 2
74099: ARRAY
74100: NOT
74101: PUSH
74102: LD_EXP 98
74106: PUSH
74107: LD_VAR 0 2
74111: ARRAY
74112: PPUSH
74113: LD_INT 25
74115: PUSH
74116: LD_INT 12
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PPUSH
74123: CALL_OW 72
74127: NOT
74128: OR
74129: IFFALSE 74133
// continue ;
74131: GO 74087
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74133: LD_ADDR_VAR 0 5
74137: PUSH
74138: LD_EXP 98
74142: PUSH
74143: LD_VAR 0 2
74147: ARRAY
74148: PUSH
74149: LD_INT 1
74151: ARRAY
74152: PPUSH
74153: CALL_OW 255
74157: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74158: LD_VAR 0 5
74162: PPUSH
74163: LD_INT 2
74165: PPUSH
74166: CALL_OW 325
74170: IFFALSE 74415
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74172: LD_ADDR_VAR 0 4
74176: PUSH
74177: LD_EXP 98
74181: PUSH
74182: LD_VAR 0 2
74186: ARRAY
74187: PPUSH
74188: LD_INT 25
74190: PUSH
74191: LD_INT 16
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PPUSH
74198: CALL_OW 72
74202: ST_TO_ADDR
// if tmp < 6 then
74203: LD_VAR 0 4
74207: PUSH
74208: LD_INT 6
74210: LESS
74211: IFFALSE 74415
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74213: LD_ADDR_VAR 0 6
74217: PUSH
74218: LD_EXP 69
74222: PUSH
74223: LD_VAR 0 2
74227: ARRAY
74228: PPUSH
74229: LD_INT 2
74231: PUSH
74232: LD_INT 30
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 30
74244: PUSH
74245: LD_INT 1
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: LIST
74256: PPUSH
74257: CALL_OW 72
74261: ST_TO_ADDR
// if depot then
74262: LD_VAR 0 6
74266: IFFALSE 74415
// begin for j in depot do
74268: LD_ADDR_VAR 0 3
74272: PUSH
74273: LD_VAR 0 6
74277: PUSH
74278: FOR_IN
74279: IFFALSE 74310
// begin if UnitsInside ( j ) < 6 then
74281: LD_VAR 0 3
74285: PPUSH
74286: CALL_OW 313
74290: PUSH
74291: LD_INT 6
74293: LESS
74294: IFFALSE 74308
// begin selected := j ;
74296: LD_ADDR_VAR 0 7
74300: PUSH
74301: LD_VAR 0 3
74305: ST_TO_ADDR
// break ;
74306: GO 74310
// end ; end ;
74308: GO 74278
74310: POP
74311: POP
// if selected then
74312: LD_VAR 0 7
74316: IFFALSE 74415
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
74318: LD_ADDR_VAR 0 3
74322: PUSH
74323: LD_EXP 98
74327: PUSH
74328: LD_VAR 0 2
74332: ARRAY
74333: PPUSH
74334: LD_INT 25
74336: PUSH
74337: LD_INT 12
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PPUSH
74344: CALL_OW 72
74348: PUSH
74349: FOR_IN
74350: IFFALSE 74413
// if not HasTask ( j ) then
74352: LD_VAR 0 3
74356: PPUSH
74357: CALL_OW 314
74361: NOT
74362: IFFALSE 74411
// begin if not IsInUnit ( j ) then
74364: LD_VAR 0 3
74368: PPUSH
74369: CALL_OW 310
74373: NOT
74374: IFFALSE 74390
// ComEnterUnit ( j , selected ) ;
74376: LD_VAR 0 3
74380: PPUSH
74381: LD_VAR 0 7
74385: PPUSH
74386: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
74390: LD_VAR 0 3
74394: PPUSH
74395: LD_INT 16
74397: PPUSH
74398: CALL_OW 183
// AddComExitBuilding ( j ) ;
74402: LD_VAR 0 3
74406: PPUSH
74407: CALL_OW 182
// end ;
74411: GO 74349
74413: POP
74414: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
74415: LD_VAR 0 5
74419: PPUSH
74420: LD_INT 11
74422: PPUSH
74423: CALL_OW 325
74427: IFFALSE 74678
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74429: LD_ADDR_VAR 0 4
74433: PUSH
74434: LD_EXP 98
74438: PUSH
74439: LD_VAR 0 2
74443: ARRAY
74444: PPUSH
74445: LD_INT 25
74447: PUSH
74448: LD_INT 16
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PPUSH
74455: CALL_OW 72
74459: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
74460: LD_VAR 0 4
74464: PUSH
74465: LD_INT 6
74467: GREATEREQUAL
74468: PUSH
74469: LD_VAR 0 5
74473: PPUSH
74474: LD_INT 2
74476: PPUSH
74477: CALL_OW 325
74481: NOT
74482: OR
74483: IFFALSE 74678
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
74485: LD_ADDR_VAR 0 8
74489: PUSH
74490: LD_EXP 69
74494: PUSH
74495: LD_VAR 0 2
74499: ARRAY
74500: PPUSH
74501: LD_INT 2
74503: PUSH
74504: LD_INT 30
74506: PUSH
74507: LD_INT 4
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 30
74516: PUSH
74517: LD_INT 5
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: LIST
74528: PPUSH
74529: CALL_OW 72
74533: ST_TO_ADDR
// if barracks then
74534: LD_VAR 0 8
74538: IFFALSE 74678
// begin for j in barracks do
74540: LD_ADDR_VAR 0 3
74544: PUSH
74545: LD_VAR 0 8
74549: PUSH
74550: FOR_IN
74551: IFFALSE 74582
// begin if UnitsInside ( j ) < 6 then
74553: LD_VAR 0 3
74557: PPUSH
74558: CALL_OW 313
74562: PUSH
74563: LD_INT 6
74565: LESS
74566: IFFALSE 74580
// begin selected := j ;
74568: LD_ADDR_VAR 0 7
74572: PUSH
74573: LD_VAR 0 3
74577: ST_TO_ADDR
// break ;
74578: GO 74582
// end ; end ;
74580: GO 74550
74582: POP
74583: POP
// if selected then
74584: LD_VAR 0 7
74588: IFFALSE 74678
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: LD_EXP 98
74599: PUSH
74600: LD_VAR 0 2
74604: ARRAY
74605: PPUSH
74606: LD_INT 25
74608: PUSH
74609: LD_INT 12
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PPUSH
74616: CALL_OW 72
74620: PUSH
74621: FOR_IN
74622: IFFALSE 74676
// if not IsInUnit ( j ) and not HasTask ( j ) then
74624: LD_VAR 0 3
74628: PPUSH
74629: CALL_OW 310
74633: NOT
74634: PUSH
74635: LD_VAR 0 3
74639: PPUSH
74640: CALL_OW 314
74644: NOT
74645: AND
74646: IFFALSE 74674
// begin ComEnterUnit ( j , selected ) ;
74648: LD_VAR 0 3
74652: PPUSH
74653: LD_VAR 0 7
74657: PPUSH
74658: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
74662: LD_VAR 0 3
74666: PPUSH
74667: LD_INT 15
74669: PPUSH
74670: CALL_OW 183
// end ;
74674: GO 74621
74676: POP
74677: POP
// end ; end ; end ; end ; end ;
74678: GO 74087
74680: POP
74681: POP
// end ;
74682: LD_VAR 0 1
74686: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
74687: LD_INT 0
74689: PPUSH
74690: PPUSH
74691: PPUSH
74692: PPUSH
// if not mc_bases then
74693: LD_EXP 69
74697: NOT
74698: IFFALSE 74702
// exit ;
74700: GO 74880
// for i = 1 to mc_bases do
74702: LD_ADDR_VAR 0 2
74706: PUSH
74707: DOUBLE
74708: LD_INT 1
74710: DEC
74711: ST_TO_ADDR
74712: LD_EXP 69
74716: PUSH
74717: FOR_TO
74718: IFFALSE 74878
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
74720: LD_ADDR_VAR 0 4
74724: PUSH
74725: LD_EXP 69
74729: PUSH
74730: LD_VAR 0 2
74734: ARRAY
74735: PPUSH
74736: LD_INT 25
74738: PUSH
74739: LD_INT 9
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PPUSH
74746: CALL_OW 72
74750: ST_TO_ADDR
// if not tmp then
74751: LD_VAR 0 4
74755: NOT
74756: IFFALSE 74760
// continue ;
74758: GO 74717
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
74760: LD_EXP 95
74764: PUSH
74765: LD_VAR 0 2
74769: ARRAY
74770: PPUSH
74771: LD_INT 29
74773: PPUSH
74774: CALL_OW 325
74778: NOT
74779: PUSH
74780: LD_EXP 95
74784: PUSH
74785: LD_VAR 0 2
74789: ARRAY
74790: PPUSH
74791: LD_INT 28
74793: PPUSH
74794: CALL_OW 325
74798: NOT
74799: AND
74800: IFFALSE 74804
// continue ;
74802: GO 74717
// for j in tmp do
74804: LD_ADDR_VAR 0 3
74808: PUSH
74809: LD_VAR 0 4
74813: PUSH
74814: FOR_IN
74815: IFFALSE 74874
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74817: LD_VAR 0 3
74821: PUSH
74822: LD_EXP 72
74826: PUSH
74827: LD_VAR 0 2
74831: ARRAY
74832: PUSH
74833: LD_INT 1
74835: ARRAY
74836: IN
74837: NOT
74838: PUSH
74839: LD_VAR 0 3
74843: PUSH
74844: LD_EXP 72
74848: PUSH
74849: LD_VAR 0 2
74853: ARRAY
74854: PUSH
74855: LD_INT 2
74857: ARRAY
74858: IN
74859: NOT
74860: AND
74861: IFFALSE 74872
// ComSpaceTimeShoot ( j ) ;
74863: LD_VAR 0 3
74867: PPUSH
74868: CALL 20433 0 1
74872: GO 74814
74874: POP
74875: POP
// end ;
74876: GO 74717
74878: POP
74879: POP
// end ;
74880: LD_VAR 0 1
74884: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
74885: LD_INT 0
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
// if not mc_bases then
74891: LD_EXP 69
74895: NOT
74896: IFFALSE 74900
// exit ;
74898: GO 74922
// for i = 1 to mc_bases do
74900: LD_ADDR_VAR 0 2
74904: PUSH
74905: DOUBLE
74906: LD_INT 1
74908: DEC
74909: ST_TO_ADDR
74910: LD_EXP 69
74914: PUSH
74915: FOR_TO
74916: IFFALSE 74920
// begin end ;
74918: GO 74915
74920: POP
74921: POP
// end ;
74922: LD_VAR 0 1
74926: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74927: LD_INT 0
74929: PPUSH
74930: PPUSH
74931: PPUSH
// if not mc_bases then
74932: LD_EXP 69
74936: NOT
74937: IFFALSE 74941
// exit ;
74939: GO 75501
// for i = 1 to mc_bases do
74941: LD_ADDR_VAR 0 2
74945: PUSH
74946: DOUBLE
74947: LD_INT 1
74949: DEC
74950: ST_TO_ADDR
74951: LD_EXP 69
74955: PUSH
74956: FOR_TO
74957: IFFALSE 75499
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74959: LD_ADDR_VAR 0 3
74963: PUSH
74964: LD_EXP 69
74968: PUSH
74969: LD_VAR 0 2
74973: ARRAY
74974: PPUSH
74975: LD_INT 25
74977: PUSH
74978: LD_INT 4
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PPUSH
74985: CALL_OW 72
74989: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
74990: LD_VAR 0 3
74994: NOT
74995: PUSH
74996: LD_EXP 105
75000: PUSH
75001: LD_VAR 0 2
75005: ARRAY
75006: NOT
75007: OR
75008: IFFALSE 75058
// begin if mc_deposits_finder [ i ] then
75010: LD_EXP 106
75014: PUSH
75015: LD_VAR 0 2
75019: ARRAY
75020: IFFALSE 75056
// begin MC_Reset ( i , 125 ) ;
75022: LD_VAR 0 2
75026: PPUSH
75027: LD_INT 125
75029: PPUSH
75030: CALL 64556 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75034: LD_ADDR_EXP 106
75038: PUSH
75039: LD_EXP 106
75043: PPUSH
75044: LD_VAR 0 2
75048: PPUSH
75049: EMPTY
75050: PPUSH
75051: CALL_OW 1
75055: ST_TO_ADDR
// end ; continue ;
75056: GO 74956
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
75058: LD_EXP 105
75062: PUSH
75063: LD_VAR 0 2
75067: ARRAY
75068: PUSH
75069: LD_INT 1
75071: ARRAY
75072: PUSH
75073: LD_INT 3
75075: ARRAY
75076: PUSH
75077: LD_INT 1
75079: EQUAL
75080: PUSH
75081: LD_INT 20
75083: PPUSH
75084: LD_EXP 95
75088: PUSH
75089: LD_VAR 0 2
75093: ARRAY
75094: PPUSH
75095: CALL_OW 321
75099: PUSH
75100: LD_INT 2
75102: NONEQUAL
75103: AND
75104: IFFALSE 75154
// begin if mc_deposits_finder [ i ] then
75106: LD_EXP 106
75110: PUSH
75111: LD_VAR 0 2
75115: ARRAY
75116: IFFALSE 75152
// begin MC_Reset ( i , 125 ) ;
75118: LD_VAR 0 2
75122: PPUSH
75123: LD_INT 125
75125: PPUSH
75126: CALL 64556 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75130: LD_ADDR_EXP 106
75134: PUSH
75135: LD_EXP 106
75139: PPUSH
75140: LD_VAR 0 2
75144: PPUSH
75145: EMPTY
75146: PPUSH
75147: CALL_OW 1
75151: ST_TO_ADDR
// end ; continue ;
75152: GO 74956
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75154: LD_EXP 105
75158: PUSH
75159: LD_VAR 0 2
75163: ARRAY
75164: PUSH
75165: LD_INT 1
75167: ARRAY
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: PPUSH
75173: LD_EXP 105
75177: PUSH
75178: LD_VAR 0 2
75182: ARRAY
75183: PUSH
75184: LD_INT 1
75186: ARRAY
75187: PUSH
75188: LD_INT 2
75190: ARRAY
75191: PPUSH
75192: LD_EXP 95
75196: PUSH
75197: LD_VAR 0 2
75201: ARRAY
75202: PPUSH
75203: CALL_OW 440
75207: IFFALSE 75250
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75209: LD_ADDR_EXP 105
75213: PUSH
75214: LD_EXP 105
75218: PPUSH
75219: LD_VAR 0 2
75223: PPUSH
75224: LD_EXP 105
75228: PUSH
75229: LD_VAR 0 2
75233: ARRAY
75234: PPUSH
75235: LD_INT 1
75237: PPUSH
75238: CALL_OW 3
75242: PPUSH
75243: CALL_OW 1
75247: ST_TO_ADDR
75248: GO 75497
// begin if not mc_deposits_finder [ i ] then
75250: LD_EXP 106
75254: PUSH
75255: LD_VAR 0 2
75259: ARRAY
75260: NOT
75261: IFFALSE 75313
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75263: LD_ADDR_EXP 106
75267: PUSH
75268: LD_EXP 106
75272: PPUSH
75273: LD_VAR 0 2
75277: PPUSH
75278: LD_VAR 0 3
75282: PUSH
75283: LD_INT 1
75285: ARRAY
75286: PUSH
75287: EMPTY
75288: LIST
75289: PPUSH
75290: CALL_OW 1
75294: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75295: LD_VAR 0 3
75299: PUSH
75300: LD_INT 1
75302: ARRAY
75303: PPUSH
75304: LD_INT 125
75306: PPUSH
75307: CALL_OW 109
// end else
75311: GO 75497
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75313: LD_EXP 106
75317: PUSH
75318: LD_VAR 0 2
75322: ARRAY
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: PPUSH
75328: CALL_OW 310
75332: IFFALSE 75355
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75334: LD_EXP 106
75338: PUSH
75339: LD_VAR 0 2
75343: ARRAY
75344: PUSH
75345: LD_INT 1
75347: ARRAY
75348: PPUSH
75349: CALL_OW 122
75353: GO 75497
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75355: LD_EXP 106
75359: PUSH
75360: LD_VAR 0 2
75364: ARRAY
75365: PUSH
75366: LD_INT 1
75368: ARRAY
75369: PPUSH
75370: CALL_OW 314
75374: NOT
75375: PUSH
75376: LD_EXP 106
75380: PUSH
75381: LD_VAR 0 2
75385: ARRAY
75386: PUSH
75387: LD_INT 1
75389: ARRAY
75390: PPUSH
75391: LD_EXP 105
75395: PUSH
75396: LD_VAR 0 2
75400: ARRAY
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: PUSH
75406: LD_INT 1
75408: ARRAY
75409: PPUSH
75410: LD_EXP 105
75414: PUSH
75415: LD_VAR 0 2
75419: ARRAY
75420: PUSH
75421: LD_INT 1
75423: ARRAY
75424: PUSH
75425: LD_INT 2
75427: ARRAY
75428: PPUSH
75429: CALL_OW 297
75433: PUSH
75434: LD_INT 6
75436: GREATER
75437: AND
75438: IFFALSE 75497
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75440: LD_EXP 106
75444: PUSH
75445: LD_VAR 0 2
75449: ARRAY
75450: PUSH
75451: LD_INT 1
75453: ARRAY
75454: PPUSH
75455: LD_EXP 105
75459: PUSH
75460: LD_VAR 0 2
75464: ARRAY
75465: PUSH
75466: LD_INT 1
75468: ARRAY
75469: PUSH
75470: LD_INT 1
75472: ARRAY
75473: PPUSH
75474: LD_EXP 105
75478: PUSH
75479: LD_VAR 0 2
75483: ARRAY
75484: PUSH
75485: LD_INT 1
75487: ARRAY
75488: PUSH
75489: LD_INT 2
75491: ARRAY
75492: PPUSH
75493: CALL_OW 111
// end ; end ; end ;
75497: GO 74956
75499: POP
75500: POP
// end ;
75501: LD_VAR 0 1
75505: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
75506: LD_INT 0
75508: PPUSH
75509: PPUSH
75510: PPUSH
75511: PPUSH
75512: PPUSH
75513: PPUSH
75514: PPUSH
75515: PPUSH
75516: PPUSH
// if not mc_bases then
75517: LD_EXP 69
75521: NOT
75522: IFFALSE 75526
// exit ;
75524: GO 76024
// for i = 1 to mc_bases do
75526: LD_ADDR_VAR 0 2
75530: PUSH
75531: DOUBLE
75532: LD_INT 1
75534: DEC
75535: ST_TO_ADDR
75536: LD_EXP 69
75540: PUSH
75541: FOR_TO
75542: IFFALSE 76022
// begin if not mc_bases [ i ] then
75544: LD_EXP 69
75548: PUSH
75549: LD_VAR 0 2
75553: ARRAY
75554: NOT
75555: IFFALSE 75559
// continue ;
75557: GO 75541
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75559: LD_ADDR_VAR 0 7
75563: PUSH
75564: LD_EXP 69
75568: PUSH
75569: LD_VAR 0 2
75573: ARRAY
75574: PUSH
75575: LD_INT 1
75577: ARRAY
75578: PPUSH
75579: CALL_OW 248
75583: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
75584: LD_VAR 0 7
75588: PUSH
75589: LD_INT 1
75591: NONEQUAL
75592: PUSH
75593: LD_EXP 88
75597: PUSH
75598: LD_VAR 0 2
75602: ARRAY
75603: PUSH
75604: LD_EXP 91
75608: PUSH
75609: LD_VAR 0 2
75613: ARRAY
75614: UNION
75615: PPUSH
75616: LD_INT 33
75618: PUSH
75619: LD_INT 2
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PPUSH
75626: CALL_OW 72
75630: NOT
75631: OR
75632: IFFALSE 75636
// continue ;
75634: GO 75541
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75636: LD_ADDR_VAR 0 9
75640: PUSH
75641: LD_EXP 69
75645: PUSH
75646: LD_VAR 0 2
75650: ARRAY
75651: PPUSH
75652: LD_INT 30
75654: PUSH
75655: LD_INT 36
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PPUSH
75662: CALL_OW 72
75666: ST_TO_ADDR
// if not cts then
75667: LD_VAR 0 9
75671: NOT
75672: IFFALSE 75676
// continue ;
75674: GO 75541
// if mc_remote_driver [ i ] then
75676: LD_EXP 108
75680: PUSH
75681: LD_VAR 0 2
75685: ARRAY
75686: IFFALSE 75835
// for j in mc_remote_driver [ i ] do
75688: LD_ADDR_VAR 0 3
75692: PUSH
75693: LD_EXP 108
75697: PUSH
75698: LD_VAR 0 2
75702: ARRAY
75703: PUSH
75704: FOR_IN
75705: IFFALSE 75833
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
75707: LD_VAR 0 3
75711: PPUSH
75712: CALL_OW 310
75716: NOT
75717: PUSH
75718: LD_VAR 0 3
75722: PPUSH
75723: CALL_OW 310
75727: PPUSH
75728: CALL_OW 266
75732: PUSH
75733: LD_INT 36
75735: NONEQUAL
75736: OR
75737: IFFALSE 75831
// begin if IsInUnit ( j ) then
75739: LD_VAR 0 3
75743: PPUSH
75744: CALL_OW 310
75748: IFFALSE 75759
// ComExitBuilding ( j ) ;
75750: LD_VAR 0 3
75754: PPUSH
75755: CALL_OW 122
// ct := 0 ;
75759: LD_ADDR_VAR 0 8
75763: PUSH
75764: LD_INT 0
75766: ST_TO_ADDR
// for k in cts do
75767: LD_ADDR_VAR 0 4
75771: PUSH
75772: LD_VAR 0 9
75776: PUSH
75777: FOR_IN
75778: IFFALSE 75809
// if UnitsInside ( k ) < 3 then
75780: LD_VAR 0 4
75784: PPUSH
75785: CALL_OW 313
75789: PUSH
75790: LD_INT 3
75792: LESS
75793: IFFALSE 75807
// begin ct := k ;
75795: LD_ADDR_VAR 0 8
75799: PUSH
75800: LD_VAR 0 4
75804: ST_TO_ADDR
// break ;
75805: GO 75809
// end ;
75807: GO 75777
75809: POP
75810: POP
// if ct then
75811: LD_VAR 0 8
75815: IFFALSE 75831
// AddComEnterUnit ( j , ct ) ;
75817: LD_VAR 0 3
75821: PPUSH
75822: LD_VAR 0 8
75826: PPUSH
75827: CALL_OW 180
// end ;
75831: GO 75704
75833: POP
75834: POP
// places := 0 ;
75835: LD_ADDR_VAR 0 5
75839: PUSH
75840: LD_INT 0
75842: ST_TO_ADDR
// for j = 1 to cts do
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: DOUBLE
75849: LD_INT 1
75851: DEC
75852: ST_TO_ADDR
75853: LD_VAR 0 9
75857: PUSH
75858: FOR_TO
75859: IFFALSE 75877
// places := places + 3 ;
75861: LD_ADDR_VAR 0 5
75865: PUSH
75866: LD_VAR 0 5
75870: PUSH
75871: LD_INT 3
75873: PLUS
75874: ST_TO_ADDR
75875: GO 75858
75877: POP
75878: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
75879: LD_ADDR_VAR 0 6
75883: PUSH
75884: LD_EXP 69
75888: PUSH
75889: LD_VAR 0 2
75893: ARRAY
75894: PPUSH
75895: LD_INT 25
75897: PUSH
75898: LD_INT 3
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PPUSH
75905: CALL_OW 72
75909: PUSH
75910: LD_EXP 108
75914: PUSH
75915: LD_VAR 0 2
75919: ARRAY
75920: DIFF
75921: ST_TO_ADDR
// if not tmp then
75922: LD_VAR 0 6
75926: NOT
75927: IFFALSE 75931
// continue ;
75929: GO 75541
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
75931: LD_ADDR_VAR 0 5
75935: PUSH
75936: LD_VAR 0 5
75940: PUSH
75941: LD_EXP 108
75945: PUSH
75946: LD_VAR 0 2
75950: ARRAY
75951: PUSH
75952: LD_INT 1
75954: PLUS
75955: MINUS
75956: ST_TO_ADDR
// if places then
75957: LD_VAR 0 5
75961: IFFALSE 76020
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
75963: LD_ADDR_EXP 108
75967: PUSH
75968: LD_EXP 108
75972: PPUSH
75973: LD_VAR 0 2
75977: PPUSH
75978: LD_EXP 108
75982: PUSH
75983: LD_VAR 0 2
75987: ARRAY
75988: PUSH
75989: LD_VAR 0 6
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: UNION
75998: PPUSH
75999: CALL_OW 1
76003: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76004: LD_VAR 0 6
76008: PUSH
76009: LD_INT 1
76011: ARRAY
76012: PPUSH
76013: LD_INT 126
76015: PPUSH
76016: CALL_OW 109
// end ; end ;
76020: GO 75541
76022: POP
76023: POP
// end ;
76024: LD_VAR 0 1
76028: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76029: LD_INT 0
76031: PPUSH
76032: PPUSH
76033: PPUSH
76034: PPUSH
76035: PPUSH
76036: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76037: LD_VAR 0 1
76041: NOT
76042: PUSH
76043: LD_VAR 0 2
76047: NOT
76048: OR
76049: PUSH
76050: LD_VAR 0 3
76054: NOT
76055: OR
76056: PUSH
76057: LD_VAR 0 4
76061: PUSH
76062: LD_INT 1
76064: PUSH
76065: LD_INT 2
76067: PUSH
76068: LD_INT 3
76070: PUSH
76071: LD_INT 4
76073: PUSH
76074: LD_INT 5
76076: PUSH
76077: LD_INT 8
76079: PUSH
76080: LD_INT 9
76082: PUSH
76083: LD_INT 15
76085: PUSH
76086: LD_INT 16
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: IN
76100: NOT
76101: OR
76102: IFFALSE 76106
// exit ;
76104: GO 77006
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76106: LD_ADDR_VAR 0 2
76110: PUSH
76111: LD_VAR 0 2
76115: PPUSH
76116: LD_INT 21
76118: PUSH
76119: LD_INT 3
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 24
76128: PUSH
76129: LD_INT 250
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PPUSH
76140: CALL_OW 72
76144: ST_TO_ADDR
// case class of 1 , 15 :
76145: LD_VAR 0 4
76149: PUSH
76150: LD_INT 1
76152: DOUBLE
76153: EQUAL
76154: IFTRUE 76164
76156: LD_INT 15
76158: DOUBLE
76159: EQUAL
76160: IFTRUE 76164
76162: GO 76249
76164: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76165: LD_ADDR_VAR 0 8
76169: PUSH
76170: LD_VAR 0 2
76174: PPUSH
76175: LD_INT 2
76177: PUSH
76178: LD_INT 30
76180: PUSH
76181: LD_INT 32
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 30
76190: PUSH
76191: LD_INT 31
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: LIST
76202: PPUSH
76203: CALL_OW 72
76207: PUSH
76208: LD_VAR 0 2
76212: PPUSH
76213: LD_INT 2
76215: PUSH
76216: LD_INT 30
76218: PUSH
76219: LD_INT 4
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PUSH
76226: LD_INT 30
76228: PUSH
76229: LD_INT 5
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: LIST
76240: PPUSH
76241: CALL_OW 72
76245: ADD
76246: ST_TO_ADDR
76247: GO 76495
76249: LD_INT 2
76251: DOUBLE
76252: EQUAL
76253: IFTRUE 76263
76255: LD_INT 16
76257: DOUBLE
76258: EQUAL
76259: IFTRUE 76263
76261: GO 76309
76263: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76264: LD_ADDR_VAR 0 8
76268: PUSH
76269: LD_VAR 0 2
76273: PPUSH
76274: LD_INT 2
76276: PUSH
76277: LD_INT 30
76279: PUSH
76280: LD_INT 0
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 30
76289: PUSH
76290: LD_INT 1
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: LIST
76301: PPUSH
76302: CALL_OW 72
76306: ST_TO_ADDR
76307: GO 76495
76309: LD_INT 3
76311: DOUBLE
76312: EQUAL
76313: IFTRUE 76317
76315: GO 76363
76317: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76318: LD_ADDR_VAR 0 8
76322: PUSH
76323: LD_VAR 0 2
76327: PPUSH
76328: LD_INT 2
76330: PUSH
76331: LD_INT 30
76333: PUSH
76334: LD_INT 2
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 30
76343: PUSH
76344: LD_INT 3
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: LIST
76355: PPUSH
76356: CALL_OW 72
76360: ST_TO_ADDR
76361: GO 76495
76363: LD_INT 4
76365: DOUBLE
76366: EQUAL
76367: IFTRUE 76371
76369: GO 76428
76371: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76372: LD_ADDR_VAR 0 8
76376: PUSH
76377: LD_VAR 0 2
76381: PPUSH
76382: LD_INT 2
76384: PUSH
76385: LD_INT 30
76387: PUSH
76388: LD_INT 6
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: PUSH
76395: LD_INT 30
76397: PUSH
76398: LD_INT 7
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: PUSH
76405: LD_INT 30
76407: PUSH
76408: LD_INT 8
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: PPUSH
76421: CALL_OW 72
76425: ST_TO_ADDR
76426: GO 76495
76428: LD_INT 5
76430: DOUBLE
76431: EQUAL
76432: IFTRUE 76448
76434: LD_INT 8
76436: DOUBLE
76437: EQUAL
76438: IFTRUE 76448
76440: LD_INT 9
76442: DOUBLE
76443: EQUAL
76444: IFTRUE 76448
76446: GO 76494
76448: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76449: LD_ADDR_VAR 0 8
76453: PUSH
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_INT 2
76461: PUSH
76462: LD_INT 30
76464: PUSH
76465: LD_INT 4
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 30
76474: PUSH
76475: LD_INT 5
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: LIST
76486: PPUSH
76487: CALL_OW 72
76491: ST_TO_ADDR
76492: GO 76495
76494: POP
// if not tmp then
76495: LD_VAR 0 8
76499: NOT
76500: IFFALSE 76504
// exit ;
76502: GO 77006
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76504: LD_VAR 0 4
76508: PUSH
76509: LD_INT 1
76511: PUSH
76512: LD_INT 15
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: IN
76519: PUSH
76520: LD_EXP 78
76524: PUSH
76525: LD_VAR 0 1
76529: ARRAY
76530: AND
76531: IFFALSE 76687
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
76533: LD_ADDR_VAR 0 9
76537: PUSH
76538: LD_EXP 78
76542: PUSH
76543: LD_VAR 0 1
76547: ARRAY
76548: PUSH
76549: LD_INT 1
76551: ARRAY
76552: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
76553: LD_VAR 0 9
76557: PUSH
76558: LD_EXP 79
76562: PUSH
76563: LD_VAR 0 1
76567: ARRAY
76568: IN
76569: NOT
76570: IFFALSE 76685
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
76572: LD_ADDR_EXP 79
76576: PUSH
76577: LD_EXP 79
76581: PPUSH
76582: LD_VAR 0 1
76586: PUSH
76587: LD_EXP 79
76591: PUSH
76592: LD_VAR 0 1
76596: ARRAY
76597: PUSH
76598: LD_INT 1
76600: PLUS
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PPUSH
76606: LD_VAR 0 9
76610: PPUSH
76611: CALL 26808 0 3
76615: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
76616: LD_ADDR_EXP 78
76620: PUSH
76621: LD_EXP 78
76625: PPUSH
76626: LD_VAR 0 1
76630: PPUSH
76631: LD_EXP 78
76635: PUSH
76636: LD_VAR 0 1
76640: ARRAY
76641: PUSH
76642: LD_VAR 0 9
76646: DIFF
76647: PPUSH
76648: CALL_OW 1
76652: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
76653: LD_VAR 0 3
76657: PPUSH
76658: LD_EXP 79
76662: PUSH
76663: LD_VAR 0 1
76667: ARRAY
76668: PUSH
76669: LD_EXP 79
76673: PUSH
76674: LD_VAR 0 1
76678: ARRAY
76679: ARRAY
76680: PPUSH
76681: CALL_OW 120
// end ; exit ;
76685: GO 77006
// end ; if tmp > 1 then
76687: LD_VAR 0 8
76691: PUSH
76692: LD_INT 1
76694: GREATER
76695: IFFALSE 76799
// for i = 2 to tmp do
76697: LD_ADDR_VAR 0 6
76701: PUSH
76702: DOUBLE
76703: LD_INT 2
76705: DEC
76706: ST_TO_ADDR
76707: LD_VAR 0 8
76711: PUSH
76712: FOR_TO
76713: IFFALSE 76797
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
76715: LD_VAR 0 8
76719: PUSH
76720: LD_VAR 0 6
76724: ARRAY
76725: PPUSH
76726: CALL_OW 461
76730: PUSH
76731: LD_INT 6
76733: EQUAL
76734: IFFALSE 76795
// begin x := tmp [ i ] ;
76736: LD_ADDR_VAR 0 9
76740: PUSH
76741: LD_VAR 0 8
76745: PUSH
76746: LD_VAR 0 6
76750: ARRAY
76751: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
76752: LD_ADDR_VAR 0 8
76756: PUSH
76757: LD_VAR 0 8
76761: PPUSH
76762: LD_VAR 0 6
76766: PPUSH
76767: CALL_OW 3
76771: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
76772: LD_ADDR_VAR 0 8
76776: PUSH
76777: LD_VAR 0 8
76781: PPUSH
76782: LD_INT 1
76784: PPUSH
76785: LD_VAR 0 9
76789: PPUSH
76790: CALL_OW 2
76794: ST_TO_ADDR
// end ;
76795: GO 76712
76797: POP
76798: POP
// for i in tmp do
76799: LD_ADDR_VAR 0 6
76803: PUSH
76804: LD_VAR 0 8
76808: PUSH
76809: FOR_IN
76810: IFFALSE 76879
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
76812: LD_VAR 0 6
76816: PPUSH
76817: CALL_OW 313
76821: PUSH
76822: LD_INT 6
76824: LESS
76825: PUSH
76826: LD_VAR 0 6
76830: PPUSH
76831: CALL_OW 266
76835: PUSH
76836: LD_INT 31
76838: PUSH
76839: LD_INT 32
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: IN
76846: NOT
76847: AND
76848: PUSH
76849: LD_VAR 0 6
76853: PPUSH
76854: CALL_OW 313
76858: PUSH
76859: LD_INT 0
76861: EQUAL
76862: OR
76863: IFFALSE 76877
// begin j := i ;
76865: LD_ADDR_VAR 0 7
76869: PUSH
76870: LD_VAR 0 6
76874: ST_TO_ADDR
// break ;
76875: GO 76879
// end ; end ;
76877: GO 76809
76879: POP
76880: POP
// if j then
76881: LD_VAR 0 7
76885: IFFALSE 76903
// ComEnterUnit ( unit , j ) else
76887: LD_VAR 0 3
76891: PPUSH
76892: LD_VAR 0 7
76896: PPUSH
76897: CALL_OW 120
76901: GO 77006
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76903: LD_ADDR_VAR 0 10
76907: PUSH
76908: LD_VAR 0 2
76912: PPUSH
76913: LD_INT 2
76915: PUSH
76916: LD_INT 30
76918: PUSH
76919: LD_INT 0
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 30
76928: PUSH
76929: LD_INT 1
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: PPUSH
76941: CALL_OW 72
76945: ST_TO_ADDR
// if depot then
76946: LD_VAR 0 10
76950: IFFALSE 77006
// begin depot := NearestUnitToUnit ( depot , unit ) ;
76952: LD_ADDR_VAR 0 10
76956: PUSH
76957: LD_VAR 0 10
76961: PPUSH
76962: LD_VAR 0 3
76966: PPUSH
76967: CALL_OW 74
76971: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
76972: LD_VAR 0 3
76976: PPUSH
76977: LD_VAR 0 10
76981: PPUSH
76982: CALL_OW 296
76986: PUSH
76987: LD_INT 10
76989: GREATER
76990: IFFALSE 77006
// ComStandNearbyBuilding ( unit , depot ) ;
76992: LD_VAR 0 3
76996: PPUSH
76997: LD_VAR 0 10
77001: PPUSH
77002: CALL 21050 0 2
// end ; end ; end ;
77006: LD_VAR 0 5
77010: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77011: LD_INT 0
77013: PPUSH
77014: PPUSH
77015: PPUSH
77016: PPUSH
// if not mc_bases then
77017: LD_EXP 69
77021: NOT
77022: IFFALSE 77026
// exit ;
77024: GO 77265
// for i = 1 to mc_bases do
77026: LD_ADDR_VAR 0 2
77030: PUSH
77031: DOUBLE
77032: LD_INT 1
77034: DEC
77035: ST_TO_ADDR
77036: LD_EXP 69
77040: PUSH
77041: FOR_TO
77042: IFFALSE 77263
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77044: LD_ADDR_VAR 0 4
77048: PUSH
77049: LD_EXP 69
77053: PUSH
77054: LD_VAR 0 2
77058: ARRAY
77059: PPUSH
77060: LD_INT 21
77062: PUSH
77063: LD_INT 1
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PPUSH
77070: CALL_OW 72
77074: PUSH
77075: LD_EXP 98
77079: PUSH
77080: LD_VAR 0 2
77084: ARRAY
77085: UNION
77086: ST_TO_ADDR
// if not tmp then
77087: LD_VAR 0 4
77091: NOT
77092: IFFALSE 77096
// continue ;
77094: GO 77041
// for j in tmp do
77096: LD_ADDR_VAR 0 3
77100: PUSH
77101: LD_VAR 0 4
77105: PUSH
77106: FOR_IN
77107: IFFALSE 77259
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77109: LD_VAR 0 3
77113: PPUSH
77114: CALL_OW 110
77118: NOT
77119: PUSH
77120: LD_VAR 0 3
77124: PPUSH
77125: CALL_OW 314
77129: NOT
77130: AND
77131: PUSH
77132: LD_VAR 0 3
77136: PPUSH
77137: CALL_OW 311
77141: NOT
77142: AND
77143: PUSH
77144: LD_VAR 0 3
77148: PPUSH
77149: CALL_OW 310
77153: NOT
77154: AND
77155: PUSH
77156: LD_VAR 0 3
77160: PUSH
77161: LD_EXP 72
77165: PUSH
77166: LD_VAR 0 2
77170: ARRAY
77171: PUSH
77172: LD_INT 1
77174: ARRAY
77175: IN
77176: NOT
77177: AND
77178: PUSH
77179: LD_VAR 0 3
77183: PUSH
77184: LD_EXP 72
77188: PUSH
77189: LD_VAR 0 2
77193: ARRAY
77194: PUSH
77195: LD_INT 2
77197: ARRAY
77198: IN
77199: NOT
77200: AND
77201: PUSH
77202: LD_VAR 0 3
77206: PUSH
77207: LD_EXP 81
77211: PUSH
77212: LD_VAR 0 2
77216: ARRAY
77217: IN
77218: NOT
77219: AND
77220: IFFALSE 77257
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77222: LD_VAR 0 2
77226: PPUSH
77227: LD_EXP 69
77231: PUSH
77232: LD_VAR 0 2
77236: ARRAY
77237: PPUSH
77238: LD_VAR 0 3
77242: PPUSH
77243: LD_VAR 0 3
77247: PPUSH
77248: CALL_OW 257
77252: PPUSH
77253: CALL 76029 0 4
// end ;
77257: GO 77106
77259: POP
77260: POP
// end ;
77261: GO 77041
77263: POP
77264: POP
// end ;
77265: LD_VAR 0 1
77269: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77270: LD_INT 0
77272: PPUSH
77273: PPUSH
77274: PPUSH
77275: PPUSH
77276: PPUSH
77277: PPUSH
// if not mc_bases [ base ] then
77278: LD_EXP 69
77282: PUSH
77283: LD_VAR 0 1
77287: ARRAY
77288: NOT
77289: IFFALSE 77293
// exit ;
77291: GO 77475
// tmp := [ ] ;
77293: LD_ADDR_VAR 0 6
77297: PUSH
77298: EMPTY
77299: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77300: LD_ADDR_VAR 0 7
77304: PUSH
77305: LD_VAR 0 3
77309: PPUSH
77310: LD_INT 0
77312: PPUSH
77313: CALL_OW 517
77317: ST_TO_ADDR
// if not list then
77318: LD_VAR 0 7
77322: NOT
77323: IFFALSE 77327
// exit ;
77325: GO 77475
// for i = 1 to amount do
77327: LD_ADDR_VAR 0 5
77331: PUSH
77332: DOUBLE
77333: LD_INT 1
77335: DEC
77336: ST_TO_ADDR
77337: LD_VAR 0 2
77341: PUSH
77342: FOR_TO
77343: IFFALSE 77423
// begin x := rand ( 1 , list [ 1 ] ) ;
77345: LD_ADDR_VAR 0 8
77349: PUSH
77350: LD_INT 1
77352: PPUSH
77353: LD_VAR 0 7
77357: PUSH
77358: LD_INT 1
77360: ARRAY
77361: PPUSH
77362: CALL_OW 12
77366: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77367: LD_ADDR_VAR 0 6
77371: PUSH
77372: LD_VAR 0 6
77376: PPUSH
77377: LD_VAR 0 5
77381: PPUSH
77382: LD_VAR 0 7
77386: PUSH
77387: LD_INT 1
77389: ARRAY
77390: PUSH
77391: LD_VAR 0 8
77395: ARRAY
77396: PUSH
77397: LD_VAR 0 7
77401: PUSH
77402: LD_INT 2
77404: ARRAY
77405: PUSH
77406: LD_VAR 0 8
77410: ARRAY
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PPUSH
77416: CALL_OW 1
77420: ST_TO_ADDR
// end ;
77421: GO 77342
77423: POP
77424: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77425: LD_ADDR_EXP 82
77429: PUSH
77430: LD_EXP 82
77434: PPUSH
77435: LD_VAR 0 1
77439: PPUSH
77440: LD_VAR 0 6
77444: PPUSH
77445: CALL_OW 1
77449: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77450: LD_ADDR_EXP 84
77454: PUSH
77455: LD_EXP 84
77459: PPUSH
77460: LD_VAR 0 1
77464: PPUSH
77465: LD_VAR 0 3
77469: PPUSH
77470: CALL_OW 1
77474: ST_TO_ADDR
// end ;
77475: LD_VAR 0 4
77479: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77480: LD_INT 0
77482: PPUSH
// if not mc_bases [ base ] then
77483: LD_EXP 69
77487: PUSH
77488: LD_VAR 0 1
77492: ARRAY
77493: NOT
77494: IFFALSE 77498
// exit ;
77496: GO 77523
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77498: LD_ADDR_EXP 74
77502: PUSH
77503: LD_EXP 74
77507: PPUSH
77508: LD_VAR 0 1
77512: PPUSH
77513: LD_VAR 0 2
77517: PPUSH
77518: CALL_OW 1
77522: ST_TO_ADDR
// end ;
77523: LD_VAR 0 3
77527: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
77528: LD_INT 0
77530: PPUSH
// if not mc_bases [ base ] then
77531: LD_EXP 69
77535: PUSH
77536: LD_VAR 0 1
77540: ARRAY
77541: NOT
77542: IFFALSE 77546
// exit ;
77544: GO 77602
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
77546: LD_ADDR_EXP 74
77550: PUSH
77551: LD_EXP 74
77555: PPUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: LD_EXP 74
77565: PUSH
77566: LD_VAR 0 1
77570: ARRAY
77571: PPUSH
77572: LD_EXP 74
77576: PUSH
77577: LD_VAR 0 1
77581: ARRAY
77582: PUSH
77583: LD_INT 1
77585: PLUS
77586: PPUSH
77587: LD_VAR 0 2
77591: PPUSH
77592: CALL_OW 2
77596: PPUSH
77597: CALL_OW 1
77601: ST_TO_ADDR
// end ;
77602: LD_VAR 0 3
77606: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
77607: LD_INT 0
77609: PPUSH
// if not mc_bases [ base ] then
77610: LD_EXP 69
77614: PUSH
77615: LD_VAR 0 1
77619: ARRAY
77620: NOT
77621: IFFALSE 77625
// exit ;
77623: GO 77650
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
77625: LD_ADDR_EXP 90
77629: PUSH
77630: LD_EXP 90
77634: PPUSH
77635: LD_VAR 0 1
77639: PPUSH
77640: LD_VAR 0 2
77644: PPUSH
77645: CALL_OW 1
77649: ST_TO_ADDR
// end ;
77650: LD_VAR 0 3
77654: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
77655: LD_INT 0
77657: PPUSH
// if not mc_bases [ base ] then
77658: LD_EXP 69
77662: PUSH
77663: LD_VAR 0 1
77667: ARRAY
77668: NOT
77669: IFFALSE 77673
// exit ;
77671: GO 77713
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
77673: LD_ADDR_EXP 90
77677: PUSH
77678: LD_EXP 90
77682: PPUSH
77683: LD_VAR 0 1
77687: PPUSH
77688: LD_EXP 90
77692: PUSH
77693: LD_VAR 0 1
77697: ARRAY
77698: PUSH
77699: LD_VAR 0 2
77703: PUSH
77704: EMPTY
77705: LIST
77706: ADD
77707: PPUSH
77708: CALL_OW 1
77712: ST_TO_ADDR
// end ;
77713: LD_VAR 0 3
77717: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
77718: LD_INT 0
77720: PPUSH
// if not mc_bases [ base ] then
77721: LD_EXP 69
77725: PUSH
77726: LD_VAR 0 1
77730: ARRAY
77731: NOT
77732: IFFALSE 77736
// exit ;
77734: GO 77848
// mc_defender := Replace ( mc_defender , base , deflist ) ;
77736: LD_ADDR_EXP 91
77740: PUSH
77741: LD_EXP 91
77745: PPUSH
77746: LD_VAR 0 1
77750: PPUSH
77751: LD_VAR 0 2
77755: PPUSH
77756: CALL_OW 1
77760: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
77761: LD_ADDR_EXP 80
77765: PUSH
77766: LD_EXP 80
77770: PPUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_VAR 0 2
77780: PUSH
77781: LD_INT 0
77783: PLUS
77784: PPUSH
77785: CALL_OW 1
77789: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
77790: LD_ADDR_EXP 88
77794: PUSH
77795: LD_EXP 88
77799: PPUSH
77800: LD_VAR 0 1
77804: PPUSH
77805: LD_EXP 88
77809: PUSH
77810: LD_VAR 0 1
77814: ARRAY
77815: PUSH
77816: LD_EXP 91
77820: PUSH
77821: LD_VAR 0 1
77825: ARRAY
77826: PPUSH
77827: LD_INT 21
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 72
77841: UNION
77842: PPUSH
77843: CALL_OW 1
77847: ST_TO_ADDR
// end ;
77848: LD_VAR 0 3
77852: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
77853: LD_INT 0
77855: PPUSH
// if not mc_bases [ base ] then
77856: LD_EXP 69
77860: PUSH
77861: LD_VAR 0 1
77865: ARRAY
77866: NOT
77867: IFFALSE 77871
// exit ;
77869: GO 77896
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
77871: LD_ADDR_EXP 80
77875: PUSH
77876: LD_EXP 80
77880: PPUSH
77881: LD_VAR 0 1
77885: PPUSH
77886: LD_VAR 0 2
77890: PPUSH
77891: CALL_OW 1
77895: ST_TO_ADDR
// end ;
77896: LD_VAR 0 3
77900: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
77901: LD_INT 0
77903: PPUSH
77904: PPUSH
77905: PPUSH
77906: PPUSH
// if not mc_bases [ base ] then
77907: LD_EXP 69
77911: PUSH
77912: LD_VAR 0 1
77916: ARRAY
77917: NOT
77918: IFFALSE 77922
// exit ;
77920: GO 77987
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
77922: LD_ADDR_EXP 89
77926: PUSH
77927: LD_EXP 89
77931: PPUSH
77932: LD_VAR 0 1
77936: PUSH
77937: LD_EXP 89
77941: PUSH
77942: LD_VAR 0 1
77946: ARRAY
77947: PUSH
77948: LD_INT 1
77950: PLUS
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PPUSH
77956: LD_VAR 0 1
77960: PUSH
77961: LD_VAR 0 2
77965: PUSH
77966: LD_VAR 0 3
77970: PUSH
77971: LD_VAR 0 4
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: PPUSH
77982: CALL 26808 0 3
77986: ST_TO_ADDR
// end ;
77987: LD_VAR 0 5
77991: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
77992: LD_INT 0
77994: PPUSH
// if not mc_bases [ base ] then
77995: LD_EXP 69
77999: PUSH
78000: LD_VAR 0 1
78004: ARRAY
78005: NOT
78006: IFFALSE 78010
// exit ;
78008: GO 78035
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78010: LD_ADDR_EXP 105
78014: PUSH
78015: LD_EXP 105
78019: PPUSH
78020: LD_VAR 0 1
78024: PPUSH
78025: LD_VAR 0 2
78029: PPUSH
78030: CALL_OW 1
78034: ST_TO_ADDR
// end ;
78035: LD_VAR 0 3
78039: RET
// export function MC_GetMinesField ( base ) ; begin
78040: LD_INT 0
78042: PPUSH
// result := mc_mines [ base ] ;
78043: LD_ADDR_VAR 0 2
78047: PUSH
78048: LD_EXP 82
78052: PUSH
78053: LD_VAR 0 1
78057: ARRAY
78058: ST_TO_ADDR
// end ;
78059: LD_VAR 0 2
78063: RET
// export function MC_GetProduceList ( base ) ; begin
78064: LD_INT 0
78066: PPUSH
// result := mc_produce [ base ] ;
78067: LD_ADDR_VAR 0 2
78071: PUSH
78072: LD_EXP 90
78076: PUSH
78077: LD_VAR 0 1
78081: ARRAY
78082: ST_TO_ADDR
// end ;
78083: LD_VAR 0 2
78087: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78088: LD_INT 0
78090: PPUSH
78091: PPUSH
// if not mc_bases then
78092: LD_EXP 69
78096: NOT
78097: IFFALSE 78101
// exit ;
78099: GO 78166
// if mc_bases [ base ] then
78101: LD_EXP 69
78105: PUSH
78106: LD_VAR 0 1
78110: ARRAY
78111: IFFALSE 78166
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78113: LD_ADDR_VAR 0 3
78117: PUSH
78118: LD_EXP 69
78122: PUSH
78123: LD_VAR 0 1
78127: ARRAY
78128: PPUSH
78129: LD_INT 30
78131: PUSH
78132: LD_VAR 0 2
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PPUSH
78141: CALL_OW 72
78145: ST_TO_ADDR
// if result then
78146: LD_VAR 0 3
78150: IFFALSE 78166
// result := result [ 1 ] ;
78152: LD_ADDR_VAR 0 3
78156: PUSH
78157: LD_VAR 0 3
78161: PUSH
78162: LD_INT 1
78164: ARRAY
78165: ST_TO_ADDR
// end ; end ;
78166: LD_VAR 0 3
78170: RET
// export function MC_SetTame ( base , area ) ; begin
78171: LD_INT 0
78173: PPUSH
// if not mc_bases or not base then
78174: LD_EXP 69
78178: NOT
78179: PUSH
78180: LD_VAR 0 1
78184: NOT
78185: OR
78186: IFFALSE 78190
// exit ;
78188: GO 78215
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78190: LD_ADDR_EXP 97
78194: PUSH
78195: LD_EXP 97
78199: PPUSH
78200: LD_VAR 0 1
78204: PPUSH
78205: LD_VAR 0 2
78209: PPUSH
78210: CALL_OW 1
78214: ST_TO_ADDR
// end ;
78215: LD_VAR 0 3
78219: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78220: LD_INT 0
78222: PPUSH
78223: PPUSH
// if not mc_bases or not base then
78224: LD_EXP 69
78228: NOT
78229: PUSH
78230: LD_VAR 0 1
78234: NOT
78235: OR
78236: IFFALSE 78240
// exit ;
78238: GO 78342
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78240: LD_ADDR_VAR 0 4
78244: PUSH
78245: LD_EXP 69
78249: PUSH
78250: LD_VAR 0 1
78254: ARRAY
78255: PPUSH
78256: LD_INT 30
78258: PUSH
78259: LD_VAR 0 2
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PPUSH
78268: CALL_OW 72
78272: ST_TO_ADDR
// if not tmp then
78273: LD_VAR 0 4
78277: NOT
78278: IFFALSE 78282
// exit ;
78280: GO 78342
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78282: LD_ADDR_EXP 101
78286: PUSH
78287: LD_EXP 101
78291: PPUSH
78292: LD_VAR 0 1
78296: PPUSH
78297: LD_EXP 101
78301: PUSH
78302: LD_VAR 0 1
78306: ARRAY
78307: PPUSH
78308: LD_EXP 101
78312: PUSH
78313: LD_VAR 0 1
78317: ARRAY
78318: PUSH
78319: LD_INT 1
78321: PLUS
78322: PPUSH
78323: LD_VAR 0 4
78327: PUSH
78328: LD_INT 1
78330: ARRAY
78331: PPUSH
78332: CALL_OW 2
78336: PPUSH
78337: CALL_OW 1
78341: ST_TO_ADDR
// end ;
78342: LD_VAR 0 3
78346: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78347: LD_INT 0
78349: PPUSH
78350: PPUSH
// if not mc_bases or not base or not kinds then
78351: LD_EXP 69
78355: NOT
78356: PUSH
78357: LD_VAR 0 1
78361: NOT
78362: OR
78363: PUSH
78364: LD_VAR 0 2
78368: NOT
78369: OR
78370: IFFALSE 78374
// exit ;
78372: GO 78435
// for i in kinds do
78374: LD_ADDR_VAR 0 4
78378: PUSH
78379: LD_VAR 0 2
78383: PUSH
78384: FOR_IN
78385: IFFALSE 78433
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78387: LD_ADDR_EXP 103
78391: PUSH
78392: LD_EXP 103
78396: PPUSH
78397: LD_VAR 0 1
78401: PUSH
78402: LD_EXP 103
78406: PUSH
78407: LD_VAR 0 1
78411: ARRAY
78412: PUSH
78413: LD_INT 1
78415: PLUS
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PPUSH
78421: LD_VAR 0 4
78425: PPUSH
78426: CALL 26808 0 3
78430: ST_TO_ADDR
78431: GO 78384
78433: POP
78434: POP
// end ;
78435: LD_VAR 0 3
78439: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78440: LD_INT 0
78442: PPUSH
// if not mc_bases or not base or not areas then
78443: LD_EXP 69
78447: NOT
78448: PUSH
78449: LD_VAR 0 1
78453: NOT
78454: OR
78455: PUSH
78456: LD_VAR 0 2
78460: NOT
78461: OR
78462: IFFALSE 78466
// exit ;
78464: GO 78491
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78466: LD_ADDR_EXP 87
78470: PUSH
78471: LD_EXP 87
78475: PPUSH
78476: LD_VAR 0 1
78480: PPUSH
78481: LD_VAR 0 2
78485: PPUSH
78486: CALL_OW 1
78490: ST_TO_ADDR
// end ;
78491: LD_VAR 0 3
78495: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
78496: LD_INT 0
78498: PPUSH
// if not mc_bases or not base then
78499: LD_EXP 69
78503: NOT
78504: PUSH
78505: LD_VAR 0 1
78509: NOT
78510: OR
78511: IFFALSE 78515
// exit ;
78513: GO 78549
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
78515: LD_ADDR_EXP 104
78519: PUSH
78520: LD_EXP 104
78524: PPUSH
78525: LD_VAR 0 1
78529: PPUSH
78530: LD_VAR 0 2
78534: PUSH
78535: LD_VAR 0 3
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PPUSH
78544: CALL_OW 1
78548: ST_TO_ADDR
// end ;
78549: LD_VAR 0 4
78553: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
78554: LD_INT 0
78556: PPUSH
78557: PPUSH
78558: PPUSH
// if not mc_bases or not base or not ext_list then
78559: LD_EXP 69
78563: NOT
78564: PUSH
78565: LD_VAR 0 1
78569: NOT
78570: OR
78571: PUSH
78572: LD_VAR 0 5
78576: NOT
78577: OR
78578: IFFALSE 78582
// exit ;
78580: GO 78755
// tmp := GetFacExtXYD ( x , y , d ) ;
78582: LD_ADDR_VAR 0 8
78586: PUSH
78587: LD_VAR 0 2
78591: PPUSH
78592: LD_VAR 0 3
78596: PPUSH
78597: LD_VAR 0 4
78601: PPUSH
78602: CALL 59506 0 3
78606: ST_TO_ADDR
// if not tmp then
78607: LD_VAR 0 8
78611: NOT
78612: IFFALSE 78616
// exit ;
78614: GO 78755
// for i in tmp do
78616: LD_ADDR_VAR 0 7
78620: PUSH
78621: LD_VAR 0 8
78625: PUSH
78626: FOR_IN
78627: IFFALSE 78753
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
78629: LD_ADDR_EXP 74
78633: PUSH
78634: LD_EXP 74
78638: PPUSH
78639: LD_VAR 0 1
78643: PPUSH
78644: LD_EXP 74
78648: PUSH
78649: LD_VAR 0 1
78653: ARRAY
78654: PPUSH
78655: LD_EXP 74
78659: PUSH
78660: LD_VAR 0 1
78664: ARRAY
78665: PUSH
78666: LD_INT 1
78668: PLUS
78669: PPUSH
78670: LD_VAR 0 5
78674: PUSH
78675: LD_INT 1
78677: ARRAY
78678: PUSH
78679: LD_VAR 0 7
78683: PUSH
78684: LD_INT 1
78686: ARRAY
78687: PUSH
78688: LD_VAR 0 7
78692: PUSH
78693: LD_INT 2
78695: ARRAY
78696: PUSH
78697: LD_VAR 0 7
78701: PUSH
78702: LD_INT 3
78704: ARRAY
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: PPUSH
78712: CALL_OW 2
78716: PPUSH
78717: CALL_OW 1
78721: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
78722: LD_ADDR_VAR 0 5
78726: PUSH
78727: LD_VAR 0 5
78731: PPUSH
78732: LD_INT 1
78734: PPUSH
78735: CALL_OW 3
78739: ST_TO_ADDR
// if not ext_list then
78740: LD_VAR 0 5
78744: NOT
78745: IFFALSE 78751
// exit ;
78747: POP
78748: POP
78749: GO 78755
// end ;
78751: GO 78626
78753: POP
78754: POP
// end ;
78755: LD_VAR 0 6
78759: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
78760: LD_INT 0
78762: PPUSH
// if not mc_bases or not base or not weapon_list then
78763: LD_EXP 69
78767: NOT
78768: PUSH
78769: LD_VAR 0 1
78773: NOT
78774: OR
78775: PUSH
78776: LD_VAR 0 2
78780: NOT
78781: OR
78782: IFFALSE 78786
// exit ;
78784: GO 78811
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
78786: LD_ADDR_EXP 107
78790: PUSH
78791: LD_EXP 107
78795: PPUSH
78796: LD_VAR 0 1
78800: PPUSH
78801: LD_VAR 0 2
78805: PPUSH
78806: CALL_OW 1
78810: ST_TO_ADDR
// end ;
78811: LD_VAR 0 3
78815: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
78816: LD_INT 0
78818: PPUSH
// if not mc_bases or not base or not tech_list then
78819: LD_EXP 69
78823: NOT
78824: PUSH
78825: LD_VAR 0 1
78829: NOT
78830: OR
78831: PUSH
78832: LD_VAR 0 2
78836: NOT
78837: OR
78838: IFFALSE 78842
// exit ;
78840: GO 78867
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
78842: LD_ADDR_EXP 96
78846: PUSH
78847: LD_EXP 96
78851: PPUSH
78852: LD_VAR 0 1
78856: PPUSH
78857: LD_VAR 0 2
78861: PPUSH
78862: CALL_OW 1
78866: ST_TO_ADDR
// end ;
78867: LD_VAR 0 3
78871: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
78872: LD_INT 0
78874: PPUSH
// if not mc_bases or not parking_area or not base then
78875: LD_EXP 69
78879: NOT
78880: PUSH
78881: LD_VAR 0 2
78885: NOT
78886: OR
78887: PUSH
78888: LD_VAR 0 1
78892: NOT
78893: OR
78894: IFFALSE 78898
// exit ;
78896: GO 78923
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
78898: LD_ADDR_EXP 93
78902: PUSH
78903: LD_EXP 93
78907: PPUSH
78908: LD_VAR 0 1
78912: PPUSH
78913: LD_VAR 0 2
78917: PPUSH
78918: CALL_OW 1
78922: ST_TO_ADDR
// end ;
78923: LD_VAR 0 3
78927: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
78928: LD_INT 0
78930: PPUSH
// if not mc_bases or not base or not scan_area then
78931: LD_EXP 69
78935: NOT
78936: PUSH
78937: LD_VAR 0 1
78941: NOT
78942: OR
78943: PUSH
78944: LD_VAR 0 2
78948: NOT
78949: OR
78950: IFFALSE 78954
// exit ;
78952: GO 78979
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
78954: LD_ADDR_EXP 94
78958: PUSH
78959: LD_EXP 94
78963: PPUSH
78964: LD_VAR 0 1
78968: PPUSH
78969: LD_VAR 0 2
78973: PPUSH
78974: CALL_OW 1
78978: ST_TO_ADDR
// end ; end_of_file
78979: LD_VAR 0 3
78983: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78984: LD_INT 0
78986: PPUSH
78987: PPUSH
78988: PPUSH
// if not mc_bases then
78989: LD_EXP 69
78993: NOT
78994: IFFALSE 78998
// exit ;
78996: GO 79163
// for i = 1 to mc_bases do
78998: LD_ADDR_VAR 0 4
79002: PUSH
79003: DOUBLE
79004: LD_INT 1
79006: DEC
79007: ST_TO_ADDR
79008: LD_EXP 69
79012: PUSH
79013: FOR_TO
79014: IFFALSE 79161
// begin if sci in mc_bases [ i ] then
79016: LD_VAR 0 2
79020: PUSH
79021: LD_EXP 69
79025: PUSH
79026: LD_VAR 0 4
79030: ARRAY
79031: IN
79032: IFFALSE 79159
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79034: LD_ADDR_EXP 98
79038: PUSH
79039: LD_EXP 98
79043: PPUSH
79044: LD_VAR 0 4
79048: PUSH
79049: LD_EXP 98
79053: PUSH
79054: LD_VAR 0 4
79058: ARRAY
79059: PUSH
79060: LD_INT 1
79062: PLUS
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PPUSH
79068: LD_VAR 0 1
79072: PPUSH
79073: CALL 26808 0 3
79077: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79078: LD_ADDR_VAR 0 5
79082: PUSH
79083: LD_EXP 69
79087: PUSH
79088: LD_VAR 0 4
79092: ARRAY
79093: PPUSH
79094: LD_INT 2
79096: PUSH
79097: LD_INT 30
79099: PUSH
79100: LD_INT 0
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PUSH
79107: LD_INT 30
79109: PUSH
79110: LD_INT 1
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: LIST
79121: PPUSH
79122: CALL_OW 72
79126: PPUSH
79127: LD_VAR 0 1
79131: PPUSH
79132: CALL_OW 74
79136: ST_TO_ADDR
// if tmp then
79137: LD_VAR 0 5
79141: IFFALSE 79157
// ComStandNearbyBuilding ( ape , tmp ) ;
79143: LD_VAR 0 1
79147: PPUSH
79148: LD_VAR 0 5
79152: PPUSH
79153: CALL 21050 0 2
// break ;
79157: GO 79161
// end ; end ;
79159: GO 79013
79161: POP
79162: POP
// end ;
79163: LD_VAR 0 3
79167: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79168: LD_INT 0
79170: PPUSH
79171: PPUSH
79172: PPUSH
// if not mc_bases then
79173: LD_EXP 69
79177: NOT
79178: IFFALSE 79182
// exit ;
79180: GO 79271
// for i = 1 to mc_bases do
79182: LD_ADDR_VAR 0 4
79186: PUSH
79187: DOUBLE
79188: LD_INT 1
79190: DEC
79191: ST_TO_ADDR
79192: LD_EXP 69
79196: PUSH
79197: FOR_TO
79198: IFFALSE 79269
// begin if building in mc_busy_turret_list [ i ] then
79200: LD_VAR 0 1
79204: PUSH
79205: LD_EXP 79
79209: PUSH
79210: LD_VAR 0 4
79214: ARRAY
79215: IN
79216: IFFALSE 79267
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79218: LD_ADDR_VAR 0 5
79222: PUSH
79223: LD_EXP 79
79227: PUSH
79228: LD_VAR 0 4
79232: ARRAY
79233: PUSH
79234: LD_VAR 0 1
79238: DIFF
79239: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79240: LD_ADDR_EXP 79
79244: PUSH
79245: LD_EXP 79
79249: PPUSH
79250: LD_VAR 0 4
79254: PPUSH
79255: LD_VAR 0 5
79259: PPUSH
79260: CALL_OW 1
79264: ST_TO_ADDR
// break ;
79265: GO 79269
// end ; end ;
79267: GO 79197
79269: POP
79270: POP
// end ;
79271: LD_VAR 0 3
79275: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
79276: LD_INT 0
79278: PPUSH
79279: PPUSH
79280: PPUSH
// if not mc_bases then
79281: LD_EXP 69
79285: NOT
79286: IFFALSE 79290
// exit ;
79288: GO 79489
// for i = 1 to mc_bases do
79290: LD_ADDR_VAR 0 5
79294: PUSH
79295: DOUBLE
79296: LD_INT 1
79298: DEC
79299: ST_TO_ADDR
79300: LD_EXP 69
79304: PUSH
79305: FOR_TO
79306: IFFALSE 79487
// if building in mc_bases [ i ] then
79308: LD_VAR 0 1
79312: PUSH
79313: LD_EXP 69
79317: PUSH
79318: LD_VAR 0 5
79322: ARRAY
79323: IN
79324: IFFALSE 79485
// begin tmp := mc_bases [ i ] diff building ;
79326: LD_ADDR_VAR 0 6
79330: PUSH
79331: LD_EXP 69
79335: PUSH
79336: LD_VAR 0 5
79340: ARRAY
79341: PUSH
79342: LD_VAR 0 1
79346: DIFF
79347: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
79348: LD_ADDR_EXP 69
79352: PUSH
79353: LD_EXP 69
79357: PPUSH
79358: LD_VAR 0 5
79362: PPUSH
79363: LD_VAR 0 6
79367: PPUSH
79368: CALL_OW 1
79372: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
79373: LD_VAR 0 1
79377: PUSH
79378: LD_EXP 77
79382: PUSH
79383: LD_VAR 0 5
79387: ARRAY
79388: IN
79389: IFFALSE 79428
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
79391: LD_ADDR_EXP 77
79395: PUSH
79396: LD_EXP 77
79400: PPUSH
79401: LD_VAR 0 5
79405: PPUSH
79406: LD_EXP 77
79410: PUSH
79411: LD_VAR 0 5
79415: ARRAY
79416: PUSH
79417: LD_VAR 0 1
79421: DIFF
79422: PPUSH
79423: CALL_OW 1
79427: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
79428: LD_VAR 0 1
79432: PUSH
79433: LD_EXP 78
79437: PUSH
79438: LD_VAR 0 5
79442: ARRAY
79443: IN
79444: IFFALSE 79483
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
79446: LD_ADDR_EXP 78
79450: PUSH
79451: LD_EXP 78
79455: PPUSH
79456: LD_VAR 0 5
79460: PPUSH
79461: LD_EXP 78
79465: PUSH
79466: LD_VAR 0 5
79470: ARRAY
79471: PUSH
79472: LD_VAR 0 1
79476: DIFF
79477: PPUSH
79478: CALL_OW 1
79482: ST_TO_ADDR
// break ;
79483: GO 79487
// end ;
79485: GO 79305
79487: POP
79488: POP
// end ;
79489: LD_VAR 0 4
79493: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
79498: PPUSH
// if not mc_bases or not side in mc_sides then
79499: LD_EXP 69
79503: NOT
79504: PUSH
79505: LD_VAR 0 3
79509: PUSH
79510: LD_EXP 95
79514: IN
79515: NOT
79516: OR
79517: IFFALSE 79521
// exit ;
79519: GO 79644
// for i = 1 to mc_vehicles do
79521: LD_ADDR_VAR 0 6
79525: PUSH
79526: DOUBLE
79527: LD_INT 1
79529: DEC
79530: ST_TO_ADDR
79531: LD_EXP 88
79535: PUSH
79536: FOR_TO
79537: IFFALSE 79642
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
79539: LD_VAR 0 2
79543: PUSH
79544: LD_EXP 88
79548: PUSH
79549: LD_VAR 0 6
79553: ARRAY
79554: IN
79555: PUSH
79556: LD_VAR 0 1
79560: PUSH
79561: LD_EXP 88
79565: PUSH
79566: LD_VAR 0 6
79570: ARRAY
79571: IN
79572: OR
79573: IFFALSE 79640
// begin tmp := mc_vehicles [ i ] diff old ;
79575: LD_ADDR_VAR 0 7
79579: PUSH
79580: LD_EXP 88
79584: PUSH
79585: LD_VAR 0 6
79589: ARRAY
79590: PUSH
79591: LD_VAR 0 2
79595: DIFF
79596: ST_TO_ADDR
// tmp := tmp diff new ;
79597: LD_ADDR_VAR 0 7
79601: PUSH
79602: LD_VAR 0 7
79606: PUSH
79607: LD_VAR 0 1
79611: DIFF
79612: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
79613: LD_ADDR_EXP 88
79617: PUSH
79618: LD_EXP 88
79622: PPUSH
79623: LD_VAR 0 6
79627: PPUSH
79628: LD_VAR 0 7
79632: PPUSH
79633: CALL_OW 1
79637: ST_TO_ADDR
// break ;
79638: GO 79642
// end ;
79640: GO 79536
79642: POP
79643: POP
// end ;
79644: LD_VAR 0 5
79648: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
79649: LD_INT 0
79651: PPUSH
79652: PPUSH
79653: PPUSH
79654: PPUSH
// if not mc_bases then
79655: LD_EXP 69
79659: NOT
79660: IFFALSE 79664
// exit ;
79662: GO 79956
// side := GetSide ( vehicle ) ;
79664: LD_ADDR_VAR 0 5
79668: PUSH
79669: LD_VAR 0 1
79673: PPUSH
79674: CALL_OW 255
79678: ST_TO_ADDR
// for i = 1 to mc_bases do
79679: LD_ADDR_VAR 0 4
79683: PUSH
79684: DOUBLE
79685: LD_INT 1
79687: DEC
79688: ST_TO_ADDR
79689: LD_EXP 69
79693: PUSH
79694: FOR_TO
79695: IFFALSE 79954
// begin if factory in mc_bases [ i ] then
79697: LD_VAR 0 2
79701: PUSH
79702: LD_EXP 69
79706: PUSH
79707: LD_VAR 0 4
79711: ARRAY
79712: IN
79713: IFFALSE 79952
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
79715: LD_EXP 91
79719: PUSH
79720: LD_VAR 0 4
79724: ARRAY
79725: PUSH
79726: LD_EXP 80
79730: PUSH
79731: LD_VAR 0 4
79735: ARRAY
79736: LESS
79737: IFFALSE 79908
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
79739: LD_ADDR_EXP 91
79743: PUSH
79744: LD_EXP 91
79748: PPUSH
79749: LD_VAR 0 4
79753: PPUSH
79754: LD_EXP 91
79758: PUSH
79759: LD_VAR 0 4
79763: ARRAY
79764: PUSH
79765: LD_VAR 0 1
79769: ADD
79770: PPUSH
79771: CALL_OW 1
79775: ST_TO_ADDR
// if not mc_scan [ i ] then
79776: LD_EXP 92
79780: PUSH
79781: LD_VAR 0 4
79785: ARRAY
79786: NOT
79787: IFFALSE 79906
// begin if GetControl ( vehicle ) = control_remote then
79789: LD_VAR 0 1
79793: PPUSH
79794: CALL_OW 263
79798: PUSH
79799: LD_INT 2
79801: EQUAL
79802: IFFALSE 79822
// repeat wait ( 0 0$1 ) ;
79804: LD_INT 35
79806: PPUSH
79807: CALL_OW 67
// until IsControledBy ( vehicle ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: CALL_OW 312
79820: IFFALSE 79804
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79822: LD_VAR 0 1
79826: PPUSH
79827: LD_EXP 93
79831: PUSH
79832: LD_VAR 0 4
79836: ARRAY
79837: PPUSH
79838: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
79842: LD_VAR 0 1
79846: PPUSH
79847: CALL_OW 263
79851: PUSH
79852: LD_INT 1
79854: NONEQUAL
79855: IFFALSE 79859
// break ;
79857: GO 79954
// repeat wait ( 0 0$1 ) ;
79859: LD_INT 35
79861: PPUSH
79862: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79866: LD_VAR 0 1
79870: PPUSH
79871: LD_EXP 93
79875: PUSH
79876: LD_VAR 0 4
79880: ARRAY
79881: PPUSH
79882: CALL_OW 308
79886: IFFALSE 79859
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79888: LD_VAR 0 1
79892: PPUSH
79893: CALL_OW 311
79897: PPUSH
79898: CALL_OW 121
// exit ;
79902: POP
79903: POP
79904: GO 79956
// end ; end else
79906: GO 79952
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79908: LD_ADDR_EXP 88
79912: PUSH
79913: LD_EXP 88
79917: PPUSH
79918: LD_VAR 0 4
79922: PUSH
79923: LD_EXP 88
79927: PUSH
79928: LD_VAR 0 4
79932: ARRAY
79933: PUSH
79934: LD_INT 1
79936: PLUS
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: PPUSH
79942: LD_VAR 0 1
79946: PPUSH
79947: CALL 26808 0 3
79951: ST_TO_ADDR
// end ; end ;
79952: GO 79694
79954: POP
79955: POP
// end ;
79956: LD_VAR 0 3
79960: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79961: LD_INT 0
79963: PPUSH
79964: PPUSH
79965: PPUSH
79966: PPUSH
// if not mc_bases then
79967: LD_EXP 69
79971: NOT
79972: IFFALSE 79976
// exit ;
79974: GO 80329
// repeat wait ( 0 0$1 ) ;
79976: LD_INT 35
79978: PPUSH
79979: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79983: LD_VAR 0 2
79987: PPUSH
79988: LD_VAR 0 3
79992: PPUSH
79993: CALL_OW 284
79997: IFFALSE 79976
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79999: LD_VAR 0 2
80003: PPUSH
80004: LD_VAR 0 3
80008: PPUSH
80009: CALL_OW 283
80013: PUSH
80014: LD_INT 4
80016: EQUAL
80017: IFFALSE 80021
// exit ;
80019: GO 80329
// for i = 1 to mc_bases do
80021: LD_ADDR_VAR 0 7
80025: PUSH
80026: DOUBLE
80027: LD_INT 1
80029: DEC
80030: ST_TO_ADDR
80031: LD_EXP 69
80035: PUSH
80036: FOR_TO
80037: IFFALSE 80327
// begin if mc_crates_area [ i ] then
80039: LD_EXP 87
80043: PUSH
80044: LD_VAR 0 7
80048: ARRAY
80049: IFFALSE 80160
// for j in mc_crates_area [ i ] do
80051: LD_ADDR_VAR 0 8
80055: PUSH
80056: LD_EXP 87
80060: PUSH
80061: LD_VAR 0 7
80065: ARRAY
80066: PUSH
80067: FOR_IN
80068: IFFALSE 80158
// if InArea ( x , y , j ) then
80070: LD_VAR 0 2
80074: PPUSH
80075: LD_VAR 0 3
80079: PPUSH
80080: LD_VAR 0 8
80084: PPUSH
80085: CALL_OW 309
80089: IFFALSE 80156
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80091: LD_ADDR_EXP 85
80095: PUSH
80096: LD_EXP 85
80100: PPUSH
80101: LD_VAR 0 7
80105: PUSH
80106: LD_EXP 85
80110: PUSH
80111: LD_VAR 0 7
80115: ARRAY
80116: PUSH
80117: LD_INT 1
80119: PLUS
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PPUSH
80125: LD_VAR 0 4
80129: PUSH
80130: LD_VAR 0 2
80134: PUSH
80135: LD_VAR 0 3
80139: PUSH
80140: EMPTY
80141: LIST
80142: LIST
80143: LIST
80144: PPUSH
80145: CALL 26808 0 3
80149: ST_TO_ADDR
// exit ;
80150: POP
80151: POP
80152: POP
80153: POP
80154: GO 80329
// end ;
80156: GO 80067
80158: POP
80159: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80160: LD_ADDR_VAR 0 9
80164: PUSH
80165: LD_EXP 69
80169: PUSH
80170: LD_VAR 0 7
80174: ARRAY
80175: PPUSH
80176: LD_INT 2
80178: PUSH
80179: LD_INT 30
80181: PUSH
80182: LD_INT 0
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 30
80191: PUSH
80192: LD_INT 1
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: LIST
80203: PPUSH
80204: CALL_OW 72
80208: ST_TO_ADDR
// if not depot then
80209: LD_VAR 0 9
80213: NOT
80214: IFFALSE 80218
// continue ;
80216: GO 80036
// for j in depot do
80218: LD_ADDR_VAR 0 8
80222: PUSH
80223: LD_VAR 0 9
80227: PUSH
80228: FOR_IN
80229: IFFALSE 80323
// if GetDistUnitXY ( j , x , y ) < 30 then
80231: LD_VAR 0 8
80235: PPUSH
80236: LD_VAR 0 2
80240: PPUSH
80241: LD_VAR 0 3
80245: PPUSH
80246: CALL_OW 297
80250: PUSH
80251: LD_INT 30
80253: LESS
80254: IFFALSE 80321
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80256: LD_ADDR_EXP 85
80260: PUSH
80261: LD_EXP 85
80265: PPUSH
80266: LD_VAR 0 7
80270: PUSH
80271: LD_EXP 85
80275: PUSH
80276: LD_VAR 0 7
80280: ARRAY
80281: PUSH
80282: LD_INT 1
80284: PLUS
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PPUSH
80290: LD_VAR 0 4
80294: PUSH
80295: LD_VAR 0 2
80299: PUSH
80300: LD_VAR 0 3
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: LIST
80309: PPUSH
80310: CALL 26808 0 3
80314: ST_TO_ADDR
// exit ;
80315: POP
80316: POP
80317: POP
80318: POP
80319: GO 80329
// end ;
80321: GO 80228
80323: POP
80324: POP
// end ;
80325: GO 80036
80327: POP
80328: POP
// end ;
80329: LD_VAR 0 6
80333: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
80334: LD_INT 0
80336: PPUSH
80337: PPUSH
80338: PPUSH
80339: PPUSH
// side := GetSide ( lab ) ;
80340: LD_ADDR_VAR 0 4
80344: PUSH
80345: LD_VAR 0 2
80349: PPUSH
80350: CALL_OW 255
80354: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
80355: LD_VAR 0 4
80359: PUSH
80360: LD_EXP 95
80364: IN
80365: NOT
80366: PUSH
80367: LD_EXP 96
80371: NOT
80372: OR
80373: PUSH
80374: LD_EXP 69
80378: NOT
80379: OR
80380: IFFALSE 80384
// exit ;
80382: GO 80617
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
80384: LD_ADDR_EXP 96
80388: PUSH
80389: LD_EXP 96
80393: PPUSH
80394: LD_VAR 0 4
80398: PPUSH
80399: LD_EXP 96
80403: PUSH
80404: LD_VAR 0 4
80408: ARRAY
80409: PUSH
80410: LD_VAR 0 1
80414: DIFF
80415: PPUSH
80416: CALL_OW 1
80420: ST_TO_ADDR
// for i = 1 to mc_bases do
80421: LD_ADDR_VAR 0 5
80425: PUSH
80426: DOUBLE
80427: LD_INT 1
80429: DEC
80430: ST_TO_ADDR
80431: LD_EXP 69
80435: PUSH
80436: FOR_TO
80437: IFFALSE 80615
// begin if lab in mc_bases [ i ] then
80439: LD_VAR 0 2
80443: PUSH
80444: LD_EXP 69
80448: PUSH
80449: LD_VAR 0 5
80453: ARRAY
80454: IN
80455: IFFALSE 80613
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
80457: LD_VAR 0 1
80461: PUSH
80462: LD_INT 11
80464: PUSH
80465: LD_INT 4
80467: PUSH
80468: LD_INT 3
80470: PUSH
80471: LD_INT 2
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: LIST
80478: LIST
80479: IN
80480: PUSH
80481: LD_EXP 99
80485: PUSH
80486: LD_VAR 0 5
80490: ARRAY
80491: AND
80492: IFFALSE 80613
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
80494: LD_ADDR_VAR 0 6
80498: PUSH
80499: LD_EXP 99
80503: PUSH
80504: LD_VAR 0 5
80508: ARRAY
80509: PUSH
80510: LD_INT 1
80512: ARRAY
80513: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80514: LD_ADDR_EXP 99
80518: PUSH
80519: LD_EXP 99
80523: PPUSH
80524: LD_VAR 0 5
80528: PPUSH
80529: EMPTY
80530: PPUSH
80531: CALL_OW 1
80535: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
80536: LD_VAR 0 6
80540: PPUSH
80541: LD_INT 0
80543: PPUSH
80544: CALL_OW 109
// ComExitBuilding ( tmp ) ;
80548: LD_VAR 0 6
80552: PPUSH
80553: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
80557: LD_ADDR_EXP 98
80561: PUSH
80562: LD_EXP 98
80566: PPUSH
80567: LD_VAR 0 5
80571: PPUSH
80572: LD_EXP 98
80576: PUSH
80577: LD_VAR 0 5
80581: ARRAY
80582: PPUSH
80583: LD_INT 1
80585: PPUSH
80586: LD_VAR 0 6
80590: PPUSH
80591: CALL_OW 2
80595: PPUSH
80596: CALL_OW 1
80600: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
80601: LD_VAR 0 5
80605: PPUSH
80606: LD_INT 112
80608: PPUSH
80609: CALL 64556 0 2
// end ; end ; end ;
80613: GO 80436
80615: POP
80616: POP
// end ;
80617: LD_VAR 0 3
80621: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
80622: LD_INT 0
80624: PPUSH
80625: PPUSH
80626: PPUSH
80627: PPUSH
80628: PPUSH
80629: PPUSH
80630: PPUSH
80631: PPUSH
// if not mc_bases then
80632: LD_EXP 69
80636: NOT
80637: IFFALSE 80641
// exit ;
80639: GO 81566
// for i = 1 to mc_bases do
80641: LD_ADDR_VAR 0 3
80645: PUSH
80646: DOUBLE
80647: LD_INT 1
80649: DEC
80650: ST_TO_ADDR
80651: LD_EXP 69
80655: PUSH
80656: FOR_TO
80657: IFFALSE 81564
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
80659: LD_VAR 0 1
80663: PUSH
80664: LD_EXP 69
80668: PUSH
80669: LD_VAR 0 3
80673: ARRAY
80674: IN
80675: PUSH
80676: LD_VAR 0 1
80680: PUSH
80681: LD_EXP 76
80685: PUSH
80686: LD_VAR 0 3
80690: ARRAY
80691: IN
80692: OR
80693: PUSH
80694: LD_VAR 0 1
80698: PUSH
80699: LD_EXP 88
80703: PUSH
80704: LD_VAR 0 3
80708: ARRAY
80709: IN
80710: OR
80711: PUSH
80712: LD_VAR 0 1
80716: PUSH
80717: LD_EXP 98
80721: PUSH
80722: LD_VAR 0 3
80726: ARRAY
80727: IN
80728: OR
80729: PUSH
80730: LD_VAR 0 1
80734: PUSH
80735: LD_EXP 99
80739: PUSH
80740: LD_VAR 0 3
80744: ARRAY
80745: IN
80746: OR
80747: IFFALSE 81562
// begin if un in mc_ape [ i ] then
80749: LD_VAR 0 1
80753: PUSH
80754: LD_EXP 98
80758: PUSH
80759: LD_VAR 0 3
80763: ARRAY
80764: IN
80765: IFFALSE 80804
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80767: LD_ADDR_EXP 98
80771: PUSH
80772: LD_EXP 98
80776: PPUSH
80777: LD_VAR 0 3
80781: PPUSH
80782: LD_EXP 98
80786: PUSH
80787: LD_VAR 0 3
80791: ARRAY
80792: PUSH
80793: LD_VAR 0 1
80797: DIFF
80798: PPUSH
80799: CALL_OW 1
80803: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80804: LD_VAR 0 1
80808: PUSH
80809: LD_EXP 99
80813: PUSH
80814: LD_VAR 0 3
80818: ARRAY
80819: IN
80820: IFFALSE 80844
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80822: LD_ADDR_EXP 99
80826: PUSH
80827: LD_EXP 99
80831: PPUSH
80832: LD_VAR 0 3
80836: PPUSH
80837: EMPTY
80838: PPUSH
80839: CALL_OW 1
80843: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
80844: LD_VAR 0 1
80848: PPUSH
80849: CALL_OW 247
80853: PUSH
80854: LD_INT 2
80856: EQUAL
80857: PUSH
80858: LD_VAR 0 1
80862: PPUSH
80863: CALL_OW 110
80867: PUSH
80868: LD_INT 20
80870: EQUAL
80871: AND
80872: IFFALSE 80975
// begin fac := MC_GetBuilding ( i , b_factory ) ;
80874: LD_ADDR_VAR 0 8
80878: PUSH
80879: LD_VAR 0 3
80883: PPUSH
80884: LD_INT 3
80886: PPUSH
80887: CALL 78088 0 2
80891: ST_TO_ADDR
// if fac then
80892: LD_VAR 0 8
80896: IFFALSE 80975
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80898: LD_ADDR_VAR 0 9
80902: PUSH
80903: LD_VAR 0 8
80907: PPUSH
80908: LD_VAR 0 1
80912: PPUSH
80913: CALL_OW 265
80917: PPUSH
80918: LD_VAR 0 1
80922: PPUSH
80923: CALL_OW 262
80927: PPUSH
80928: LD_VAR 0 1
80932: PPUSH
80933: CALL_OW 263
80937: PPUSH
80938: LD_VAR 0 1
80942: PPUSH
80943: CALL_OW 264
80947: PPUSH
80948: CALL 23973 0 5
80952: ST_TO_ADDR
// if components then
80953: LD_VAR 0 9
80957: IFFALSE 80973
// MC_InsertProduceList ( i , components ) ;
80959: LD_VAR 0 3
80963: PPUSH
80964: LD_VAR 0 9
80968: PPUSH
80969: CALL 77655 0 2
// break ;
80973: GO 81564
// end ; end ; if GetType ( un ) = unit_building then
80975: LD_VAR 0 1
80979: PPUSH
80980: CALL_OW 247
80984: PUSH
80985: LD_INT 3
80987: EQUAL
80988: IFFALSE 81285
// begin btype := GetBType ( un ) ;
80990: LD_ADDR_VAR 0 5
80994: PUSH
80995: LD_VAR 0 1
80999: PPUSH
81000: CALL_OW 266
81004: ST_TO_ADDR
// if btype = b_warehouse then
81005: LD_VAR 0 5
81009: PUSH
81010: LD_INT 1
81012: EQUAL
81013: IFFALSE 81031
// begin btype := b_depot ;
81015: LD_ADDR_VAR 0 5
81019: PUSH
81020: LD_INT 0
81022: ST_TO_ADDR
// pos := 1 ;
81023: LD_ADDR_VAR 0 6
81027: PUSH
81028: LD_INT 1
81030: ST_TO_ADDR
// end ; if btype = b_factory then
81031: LD_VAR 0 5
81035: PUSH
81036: LD_INT 3
81038: EQUAL
81039: IFFALSE 81057
// begin btype := b_workshop ;
81041: LD_ADDR_VAR 0 5
81045: PUSH
81046: LD_INT 2
81048: ST_TO_ADDR
// pos := 1 ;
81049: LD_ADDR_VAR 0 6
81053: PUSH
81054: LD_INT 1
81056: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
81057: LD_VAR 0 5
81061: PUSH
81062: LD_INT 7
81064: PUSH
81065: LD_INT 8
81067: PUSH
81068: EMPTY
81069: LIST
81070: LIST
81071: IN
81072: IFFALSE 81082
// btype := b_lab ;
81074: LD_ADDR_VAR 0 5
81078: PUSH
81079: LD_INT 6
81081: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
81082: LD_ADDR_EXP 74
81086: PUSH
81087: LD_EXP 74
81091: PPUSH
81092: LD_VAR 0 3
81096: PUSH
81097: LD_EXP 74
81101: PUSH
81102: LD_VAR 0 3
81106: ARRAY
81107: PUSH
81108: LD_INT 1
81110: PLUS
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PPUSH
81116: LD_VAR 0 5
81120: PUSH
81121: LD_VAR 0 1
81125: PPUSH
81126: CALL_OW 250
81130: PUSH
81131: LD_VAR 0 1
81135: PPUSH
81136: CALL_OW 251
81140: PUSH
81141: LD_VAR 0 1
81145: PPUSH
81146: CALL_OW 254
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: PPUSH
81157: CALL 26808 0 3
81161: ST_TO_ADDR
// if pos = 1 then
81162: LD_VAR 0 6
81166: PUSH
81167: LD_INT 1
81169: EQUAL
81170: IFFALSE 81285
// begin tmp := mc_build_list [ i ] ;
81172: LD_ADDR_VAR 0 7
81176: PUSH
81177: LD_EXP 74
81181: PUSH
81182: LD_VAR 0 3
81186: ARRAY
81187: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81188: LD_VAR 0 7
81192: PPUSH
81193: LD_INT 2
81195: PUSH
81196: LD_INT 30
81198: PUSH
81199: LD_INT 0
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: PUSH
81206: LD_INT 30
81208: PUSH
81209: LD_INT 1
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: LIST
81220: PPUSH
81221: CALL_OW 72
81225: IFFALSE 81235
// pos := 2 ;
81227: LD_ADDR_VAR 0 6
81231: PUSH
81232: LD_INT 2
81234: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
81235: LD_ADDR_VAR 0 7
81239: PUSH
81240: LD_VAR 0 7
81244: PPUSH
81245: LD_VAR 0 6
81249: PPUSH
81250: LD_VAR 0 7
81254: PPUSH
81255: CALL 26699 0 3
81259: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
81260: LD_ADDR_EXP 74
81264: PUSH
81265: LD_EXP 74
81269: PPUSH
81270: LD_VAR 0 3
81274: PPUSH
81275: LD_VAR 0 7
81279: PPUSH
81280: CALL_OW 1
81284: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
81285: LD_VAR 0 1
81289: PUSH
81290: LD_EXP 69
81294: PUSH
81295: LD_VAR 0 3
81299: ARRAY
81300: IN
81301: IFFALSE 81340
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
81303: LD_ADDR_EXP 69
81307: PUSH
81308: LD_EXP 69
81312: PPUSH
81313: LD_VAR 0 3
81317: PPUSH
81318: LD_EXP 69
81322: PUSH
81323: LD_VAR 0 3
81327: ARRAY
81328: PUSH
81329: LD_VAR 0 1
81333: DIFF
81334: PPUSH
81335: CALL_OW 1
81339: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
81340: LD_VAR 0 1
81344: PUSH
81345: LD_EXP 76
81349: PUSH
81350: LD_VAR 0 3
81354: ARRAY
81355: IN
81356: IFFALSE 81395
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
81358: LD_ADDR_EXP 76
81362: PUSH
81363: LD_EXP 76
81367: PPUSH
81368: LD_VAR 0 3
81372: PPUSH
81373: LD_EXP 76
81377: PUSH
81378: LD_VAR 0 3
81382: ARRAY
81383: PUSH
81384: LD_VAR 0 1
81388: DIFF
81389: PPUSH
81390: CALL_OW 1
81394: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
81395: LD_VAR 0 1
81399: PUSH
81400: LD_EXP 88
81404: PUSH
81405: LD_VAR 0 3
81409: ARRAY
81410: IN
81411: IFFALSE 81450
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
81413: LD_ADDR_EXP 88
81417: PUSH
81418: LD_EXP 88
81422: PPUSH
81423: LD_VAR 0 3
81427: PPUSH
81428: LD_EXP 88
81432: PUSH
81433: LD_VAR 0 3
81437: ARRAY
81438: PUSH
81439: LD_VAR 0 1
81443: DIFF
81444: PPUSH
81445: CALL_OW 1
81449: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
81450: LD_VAR 0 1
81454: PUSH
81455: LD_EXP 78
81459: PUSH
81460: LD_VAR 0 3
81464: ARRAY
81465: IN
81466: IFFALSE 81505
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
81468: LD_ADDR_EXP 78
81472: PUSH
81473: LD_EXP 78
81477: PPUSH
81478: LD_VAR 0 3
81482: PPUSH
81483: LD_EXP 78
81487: PUSH
81488: LD_VAR 0 3
81492: ARRAY
81493: PUSH
81494: LD_VAR 0 1
81498: DIFF
81499: PPUSH
81500: CALL_OW 1
81504: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
81505: LD_VAR 0 1
81509: PUSH
81510: LD_EXP 77
81514: PUSH
81515: LD_VAR 0 3
81519: ARRAY
81520: IN
81521: IFFALSE 81560
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
81523: LD_ADDR_EXP 77
81527: PUSH
81528: LD_EXP 77
81532: PPUSH
81533: LD_VAR 0 3
81537: PPUSH
81538: LD_EXP 77
81542: PUSH
81543: LD_VAR 0 3
81547: ARRAY
81548: PUSH
81549: LD_VAR 0 1
81553: DIFF
81554: PPUSH
81555: CALL_OW 1
81559: ST_TO_ADDR
// end ; break ;
81560: GO 81564
// end ;
81562: GO 80656
81564: POP
81565: POP
// end ;
81566: LD_VAR 0 2
81570: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
81571: LD_INT 0
81573: PPUSH
81574: PPUSH
81575: PPUSH
// if not mc_bases then
81576: LD_EXP 69
81580: NOT
81581: IFFALSE 81585
// exit ;
81583: GO 81800
// for i = 1 to mc_bases do
81585: LD_ADDR_VAR 0 3
81589: PUSH
81590: DOUBLE
81591: LD_INT 1
81593: DEC
81594: ST_TO_ADDR
81595: LD_EXP 69
81599: PUSH
81600: FOR_TO
81601: IFFALSE 81798
// begin if building in mc_construct_list [ i ] then
81603: LD_VAR 0 1
81607: PUSH
81608: LD_EXP 76
81612: PUSH
81613: LD_VAR 0 3
81617: ARRAY
81618: IN
81619: IFFALSE 81796
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81621: LD_ADDR_EXP 76
81625: PUSH
81626: LD_EXP 76
81630: PPUSH
81631: LD_VAR 0 3
81635: PPUSH
81636: LD_EXP 76
81640: PUSH
81641: LD_VAR 0 3
81645: ARRAY
81646: PUSH
81647: LD_VAR 0 1
81651: DIFF
81652: PPUSH
81653: CALL_OW 1
81657: ST_TO_ADDR
// if building in mc_lab [ i ] then
81658: LD_VAR 0 1
81662: PUSH
81663: LD_EXP 102
81667: PUSH
81668: LD_VAR 0 3
81672: ARRAY
81673: IN
81674: IFFALSE 81729
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81676: LD_ADDR_EXP 103
81680: PUSH
81681: LD_EXP 103
81685: PPUSH
81686: LD_VAR 0 3
81690: PPUSH
81691: LD_EXP 103
81695: PUSH
81696: LD_VAR 0 3
81700: ARRAY
81701: PPUSH
81702: LD_INT 1
81704: PPUSH
81705: LD_EXP 103
81709: PUSH
81710: LD_VAR 0 3
81714: ARRAY
81715: PPUSH
81716: LD_INT 0
81718: PPUSH
81719: CALL 25791 0 4
81723: PPUSH
81724: CALL_OW 1
81728: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81729: LD_VAR 0 1
81733: PUSH
81734: LD_EXP 69
81738: PUSH
81739: LD_VAR 0 3
81743: ARRAY
81744: IN
81745: NOT
81746: IFFALSE 81792
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81748: LD_ADDR_EXP 69
81752: PUSH
81753: LD_EXP 69
81757: PPUSH
81758: LD_VAR 0 3
81762: PUSH
81763: LD_EXP 69
81767: PUSH
81768: LD_VAR 0 3
81772: ARRAY
81773: PUSH
81774: LD_INT 1
81776: PLUS
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PPUSH
81782: LD_VAR 0 1
81786: PPUSH
81787: CALL 26808 0 3
81791: ST_TO_ADDR
// exit ;
81792: POP
81793: POP
81794: GO 81800
// end ; end ;
81796: GO 81600
81798: POP
81799: POP
// end ;
81800: LD_VAR 0 2
81804: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81805: LD_INT 0
81807: PPUSH
81808: PPUSH
81809: PPUSH
81810: PPUSH
81811: PPUSH
81812: PPUSH
81813: PPUSH
// if not mc_bases then
81814: LD_EXP 69
81818: NOT
81819: IFFALSE 81823
// exit ;
81821: GO 82484
// for i = 1 to mc_bases do
81823: LD_ADDR_VAR 0 3
81827: PUSH
81828: DOUBLE
81829: LD_INT 1
81831: DEC
81832: ST_TO_ADDR
81833: LD_EXP 69
81837: PUSH
81838: FOR_TO
81839: IFFALSE 82482
// begin if building in mc_construct_list [ i ] then
81841: LD_VAR 0 1
81845: PUSH
81846: LD_EXP 76
81850: PUSH
81851: LD_VAR 0 3
81855: ARRAY
81856: IN
81857: IFFALSE 82480
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81859: LD_ADDR_EXP 76
81863: PUSH
81864: LD_EXP 76
81868: PPUSH
81869: LD_VAR 0 3
81873: PPUSH
81874: LD_EXP 76
81878: PUSH
81879: LD_VAR 0 3
81883: ARRAY
81884: PUSH
81885: LD_VAR 0 1
81889: DIFF
81890: PPUSH
81891: CALL_OW 1
81895: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81896: LD_ADDR_EXP 69
81900: PUSH
81901: LD_EXP 69
81905: PPUSH
81906: LD_VAR 0 3
81910: PUSH
81911: LD_EXP 69
81915: PUSH
81916: LD_VAR 0 3
81920: ARRAY
81921: PUSH
81922: LD_INT 1
81924: PLUS
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: PPUSH
81930: LD_VAR 0 1
81934: PPUSH
81935: CALL 26808 0 3
81939: ST_TO_ADDR
// btype := GetBType ( building ) ;
81940: LD_ADDR_VAR 0 5
81944: PUSH
81945: LD_VAR 0 1
81949: PPUSH
81950: CALL_OW 266
81954: ST_TO_ADDR
// side := GetSide ( building ) ;
81955: LD_ADDR_VAR 0 8
81959: PUSH
81960: LD_VAR 0 1
81964: PPUSH
81965: CALL_OW 255
81969: ST_TO_ADDR
// if btype = b_lab then
81970: LD_VAR 0 5
81974: PUSH
81975: LD_INT 6
81977: EQUAL
81978: IFFALSE 82028
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81980: LD_ADDR_EXP 102
81984: PUSH
81985: LD_EXP 102
81989: PPUSH
81990: LD_VAR 0 3
81994: PUSH
81995: LD_EXP 102
81999: PUSH
82000: LD_VAR 0 3
82004: ARRAY
82005: PUSH
82006: LD_INT 1
82008: PLUS
82009: PUSH
82010: EMPTY
82011: LIST
82012: LIST
82013: PPUSH
82014: LD_VAR 0 1
82018: PPUSH
82019: CALL 26808 0 3
82023: ST_TO_ADDR
// exit ;
82024: POP
82025: POP
82026: GO 82484
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
82028: LD_VAR 0 5
82032: PUSH
82033: LD_INT 0
82035: PUSH
82036: LD_INT 2
82038: PUSH
82039: LD_INT 4
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: LIST
82046: IN
82047: IFFALSE 82171
// begin if btype = b_armoury then
82049: LD_VAR 0 5
82053: PUSH
82054: LD_INT 4
82056: EQUAL
82057: IFFALSE 82067
// btype := b_barracks ;
82059: LD_ADDR_VAR 0 5
82063: PUSH
82064: LD_INT 5
82066: ST_TO_ADDR
// if btype = b_depot then
82067: LD_VAR 0 5
82071: PUSH
82072: LD_INT 0
82074: EQUAL
82075: IFFALSE 82085
// btype := b_warehouse ;
82077: LD_ADDR_VAR 0 5
82081: PUSH
82082: LD_INT 1
82084: ST_TO_ADDR
// if btype = b_workshop then
82085: LD_VAR 0 5
82089: PUSH
82090: LD_INT 2
82092: EQUAL
82093: IFFALSE 82103
// btype := b_factory ;
82095: LD_ADDR_VAR 0 5
82099: PUSH
82100: LD_INT 3
82102: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
82103: LD_VAR 0 5
82107: PPUSH
82108: LD_VAR 0 8
82112: PPUSH
82113: CALL_OW 323
82117: PUSH
82118: LD_INT 1
82120: EQUAL
82121: IFFALSE 82167
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
82123: LD_ADDR_EXP 101
82127: PUSH
82128: LD_EXP 101
82132: PPUSH
82133: LD_VAR 0 3
82137: PUSH
82138: LD_EXP 101
82142: PUSH
82143: LD_VAR 0 3
82147: ARRAY
82148: PUSH
82149: LD_INT 1
82151: PLUS
82152: PUSH
82153: EMPTY
82154: LIST
82155: LIST
82156: PPUSH
82157: LD_VAR 0 1
82161: PPUSH
82162: CALL 26808 0 3
82166: ST_TO_ADDR
// exit ;
82167: POP
82168: POP
82169: GO 82484
// end ; if btype in [ b_bunker , b_turret ] then
82171: LD_VAR 0 5
82175: PUSH
82176: LD_INT 32
82178: PUSH
82179: LD_INT 33
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: IN
82186: IFFALSE 82476
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
82188: LD_ADDR_EXP 77
82192: PUSH
82193: LD_EXP 77
82197: PPUSH
82198: LD_VAR 0 3
82202: PUSH
82203: LD_EXP 77
82207: PUSH
82208: LD_VAR 0 3
82212: ARRAY
82213: PUSH
82214: LD_INT 1
82216: PLUS
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: PPUSH
82222: LD_VAR 0 1
82226: PPUSH
82227: CALL 26808 0 3
82231: ST_TO_ADDR
// if btype = b_bunker then
82232: LD_VAR 0 5
82236: PUSH
82237: LD_INT 32
82239: EQUAL
82240: IFFALSE 82476
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82242: LD_ADDR_EXP 78
82246: PUSH
82247: LD_EXP 78
82251: PPUSH
82252: LD_VAR 0 3
82256: PUSH
82257: LD_EXP 78
82261: PUSH
82262: LD_VAR 0 3
82266: ARRAY
82267: PUSH
82268: LD_INT 1
82270: PLUS
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: PPUSH
82276: LD_VAR 0 1
82280: PPUSH
82281: CALL 26808 0 3
82285: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
82286: LD_ADDR_VAR 0 6
82290: PUSH
82291: LD_EXP 69
82295: PUSH
82296: LD_VAR 0 3
82300: ARRAY
82301: PPUSH
82302: LD_INT 25
82304: PUSH
82305: LD_INT 1
82307: PUSH
82308: EMPTY
82309: LIST
82310: LIST
82311: PUSH
82312: LD_INT 3
82314: PUSH
82315: LD_INT 54
82317: PUSH
82318: EMPTY
82319: LIST
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PPUSH
82329: CALL_OW 72
82333: ST_TO_ADDR
// if tmp then
82334: LD_VAR 0 6
82338: IFFALSE 82344
// exit ;
82340: POP
82341: POP
82342: GO 82484
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82344: LD_ADDR_VAR 0 6
82348: PUSH
82349: LD_EXP 69
82353: PUSH
82354: LD_VAR 0 3
82358: ARRAY
82359: PPUSH
82360: LD_INT 2
82362: PUSH
82363: LD_INT 30
82365: PUSH
82366: LD_INT 4
82368: PUSH
82369: EMPTY
82370: LIST
82371: LIST
82372: PUSH
82373: LD_INT 30
82375: PUSH
82376: LD_INT 5
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: PUSH
82383: EMPTY
82384: LIST
82385: LIST
82386: LIST
82387: PPUSH
82388: CALL_OW 72
82392: ST_TO_ADDR
// if not tmp then
82393: LD_VAR 0 6
82397: NOT
82398: IFFALSE 82404
// exit ;
82400: POP
82401: POP
82402: GO 82484
// for j in tmp do
82404: LD_ADDR_VAR 0 4
82408: PUSH
82409: LD_VAR 0 6
82413: PUSH
82414: FOR_IN
82415: IFFALSE 82474
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
82417: LD_ADDR_VAR 0 7
82421: PUSH
82422: LD_VAR 0 4
82426: PPUSH
82427: CALL_OW 313
82431: PPUSH
82432: LD_INT 25
82434: PUSH
82435: LD_INT 1
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PPUSH
82442: CALL_OW 72
82446: ST_TO_ADDR
// if units then
82447: LD_VAR 0 7
82451: IFFALSE 82472
// begin ComExitBuilding ( units [ 1 ] ) ;
82453: LD_VAR 0 7
82457: PUSH
82458: LD_INT 1
82460: ARRAY
82461: PPUSH
82462: CALL_OW 122
// exit ;
82466: POP
82467: POP
82468: POP
82469: POP
82470: GO 82484
// end ; end ;
82472: GO 82414
82474: POP
82475: POP
// end ; end ; exit ;
82476: POP
82477: POP
82478: GO 82484
// end ; end ;
82480: GO 81838
82482: POP
82483: POP
// end ;
82484: LD_VAR 0 2
82488: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
82489: LD_INT 0
82491: PPUSH
82492: PPUSH
82493: PPUSH
82494: PPUSH
82495: PPUSH
82496: PPUSH
82497: PPUSH
// if not mc_bases then
82498: LD_EXP 69
82502: NOT
82503: IFFALSE 82507
// exit ;
82505: GO 82738
// btype := GetBType ( building ) ;
82507: LD_ADDR_VAR 0 6
82511: PUSH
82512: LD_VAR 0 1
82516: PPUSH
82517: CALL_OW 266
82521: ST_TO_ADDR
// x := GetX ( building ) ;
82522: LD_ADDR_VAR 0 7
82526: PUSH
82527: LD_VAR 0 1
82531: PPUSH
82532: CALL_OW 250
82536: ST_TO_ADDR
// y := GetY ( building ) ;
82537: LD_ADDR_VAR 0 8
82541: PUSH
82542: LD_VAR 0 1
82546: PPUSH
82547: CALL_OW 251
82551: ST_TO_ADDR
// d := GetDir ( building ) ;
82552: LD_ADDR_VAR 0 9
82556: PUSH
82557: LD_VAR 0 1
82561: PPUSH
82562: CALL_OW 254
82566: ST_TO_ADDR
// for i = 1 to mc_bases do
82567: LD_ADDR_VAR 0 4
82571: PUSH
82572: DOUBLE
82573: LD_INT 1
82575: DEC
82576: ST_TO_ADDR
82577: LD_EXP 69
82581: PUSH
82582: FOR_TO
82583: IFFALSE 82736
// begin if not mc_build_list [ i ] then
82585: LD_EXP 74
82589: PUSH
82590: LD_VAR 0 4
82594: ARRAY
82595: NOT
82596: IFFALSE 82600
// continue ;
82598: GO 82582
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82600: LD_VAR 0 6
82604: PUSH
82605: LD_VAR 0 7
82609: PUSH
82610: LD_VAR 0 8
82614: PUSH
82615: LD_VAR 0 9
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: LIST
82624: LIST
82625: PPUSH
82626: LD_EXP 74
82630: PUSH
82631: LD_VAR 0 4
82635: ARRAY
82636: PUSH
82637: LD_INT 1
82639: ARRAY
82640: PPUSH
82641: CALL 32445 0 2
82645: IFFALSE 82734
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82647: LD_ADDR_EXP 74
82651: PUSH
82652: LD_EXP 74
82656: PPUSH
82657: LD_VAR 0 4
82661: PPUSH
82662: LD_EXP 74
82666: PUSH
82667: LD_VAR 0 4
82671: ARRAY
82672: PPUSH
82673: LD_INT 1
82675: PPUSH
82676: CALL_OW 3
82680: PPUSH
82681: CALL_OW 1
82685: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82686: LD_ADDR_EXP 76
82690: PUSH
82691: LD_EXP 76
82695: PPUSH
82696: LD_VAR 0 4
82700: PUSH
82701: LD_EXP 76
82705: PUSH
82706: LD_VAR 0 4
82710: ARRAY
82711: PUSH
82712: LD_INT 1
82714: PLUS
82715: PUSH
82716: EMPTY
82717: LIST
82718: LIST
82719: PPUSH
82720: LD_VAR 0 1
82724: PPUSH
82725: CALL 26808 0 3
82729: ST_TO_ADDR
// exit ;
82730: POP
82731: POP
82732: GO 82738
// end ; end ;
82734: GO 82582
82736: POP
82737: POP
// end ;
82738: LD_VAR 0 3
82742: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82743: LD_INT 0
82745: PPUSH
82746: PPUSH
82747: PPUSH
// if not mc_bases then
82748: LD_EXP 69
82752: NOT
82753: IFFALSE 82757
// exit ;
82755: GO 82947
// for i = 1 to mc_bases do
82757: LD_ADDR_VAR 0 4
82761: PUSH
82762: DOUBLE
82763: LD_INT 1
82765: DEC
82766: ST_TO_ADDR
82767: LD_EXP 69
82771: PUSH
82772: FOR_TO
82773: IFFALSE 82860
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82775: LD_VAR 0 1
82779: PUSH
82780: LD_EXP 77
82784: PUSH
82785: LD_VAR 0 4
82789: ARRAY
82790: IN
82791: PUSH
82792: LD_VAR 0 1
82796: PUSH
82797: LD_EXP 78
82801: PUSH
82802: LD_VAR 0 4
82806: ARRAY
82807: IN
82808: NOT
82809: AND
82810: IFFALSE 82858
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82812: LD_ADDR_EXP 78
82816: PUSH
82817: LD_EXP 78
82821: PPUSH
82822: LD_VAR 0 4
82826: PUSH
82827: LD_EXP 78
82831: PUSH
82832: LD_VAR 0 4
82836: ARRAY
82837: PUSH
82838: LD_INT 1
82840: PLUS
82841: PUSH
82842: EMPTY
82843: LIST
82844: LIST
82845: PPUSH
82846: LD_VAR 0 1
82850: PPUSH
82851: CALL 26808 0 3
82855: ST_TO_ADDR
// break ;
82856: GO 82860
// end ; end ;
82858: GO 82772
82860: POP
82861: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82862: LD_VAR 0 1
82866: PPUSH
82867: CALL_OW 257
82871: PUSH
82872: LD_EXP 95
82876: IN
82877: PUSH
82878: LD_VAR 0 1
82882: PPUSH
82883: CALL_OW 266
82887: PUSH
82888: LD_INT 5
82890: EQUAL
82891: AND
82892: PUSH
82893: LD_VAR 0 2
82897: PPUSH
82898: CALL_OW 110
82902: PUSH
82903: LD_INT 18
82905: NONEQUAL
82906: AND
82907: IFFALSE 82947
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82909: LD_VAR 0 2
82913: PPUSH
82914: CALL_OW 257
82918: PUSH
82919: LD_INT 5
82921: PUSH
82922: LD_INT 8
82924: PUSH
82925: LD_INT 9
82927: PUSH
82928: EMPTY
82929: LIST
82930: LIST
82931: LIST
82932: IN
82933: IFFALSE 82947
// SetClass ( unit , 1 ) ;
82935: LD_VAR 0 2
82939: PPUSH
82940: LD_INT 1
82942: PPUSH
82943: CALL_OW 336
// end ;
82947: LD_VAR 0 3
82951: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82952: LD_INT 0
82954: PPUSH
82955: PPUSH
// if not mc_bases then
82956: LD_EXP 69
82960: NOT
82961: IFFALSE 82965
// exit ;
82963: GO 83081
// if GetLives ( abandoned_vehicle ) > 250 then
82965: LD_VAR 0 2
82969: PPUSH
82970: CALL_OW 256
82974: PUSH
82975: LD_INT 250
82977: GREATER
82978: IFFALSE 82982
// exit ;
82980: GO 83081
// for i = 1 to mc_bases do
82982: LD_ADDR_VAR 0 6
82986: PUSH
82987: DOUBLE
82988: LD_INT 1
82990: DEC
82991: ST_TO_ADDR
82992: LD_EXP 69
82996: PUSH
82997: FOR_TO
82998: IFFALSE 83079
// begin if driver in mc_bases [ i ] then
83000: LD_VAR 0 1
83004: PUSH
83005: LD_EXP 69
83009: PUSH
83010: LD_VAR 0 6
83014: ARRAY
83015: IN
83016: IFFALSE 83077
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
83018: LD_VAR 0 1
83022: PPUSH
83023: LD_EXP 69
83027: PUSH
83028: LD_VAR 0 6
83032: ARRAY
83033: PPUSH
83034: LD_INT 2
83036: PUSH
83037: LD_INT 30
83039: PUSH
83040: LD_INT 0
83042: PUSH
83043: EMPTY
83044: LIST
83045: LIST
83046: PUSH
83047: LD_INT 30
83049: PUSH
83050: LD_INT 1
83052: PUSH
83053: EMPTY
83054: LIST
83055: LIST
83056: PUSH
83057: EMPTY
83058: LIST
83059: LIST
83060: LIST
83061: PPUSH
83062: CALL_OW 72
83066: PUSH
83067: LD_INT 1
83069: ARRAY
83070: PPUSH
83071: CALL_OW 112
// break ;
83075: GO 83079
// end ; end ;
83077: GO 82997
83079: POP
83080: POP
// end ; end_of_file
83081: LD_VAR 0 5
83085: RET
// export SuperChassisContructed , AM7Losses ; export function EndMission ; var player_units , filter ; begin
83086: LD_INT 0
83088: PPUSH
83089: PPUSH
83090: PPUSH
// Wait ( 0 0$1 ) ;
83091: LD_INT 35
83093: PPUSH
83094: CALL_OW 67
// player_units := UnitFilter ( player_units , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) ;
83098: LD_ADDR_VAR 0 2
83102: PUSH
83103: LD_VAR 0 2
83107: PPUSH
83108: LD_INT 3
83110: PUSH
83111: LD_INT 2
83113: PUSH
83114: LD_INT 25
83116: PUSH
83117: LD_INT 16
83119: PUSH
83120: EMPTY
83121: LIST
83122: LIST
83123: PUSH
83124: LD_INT 25
83126: PUSH
83127: LD_INT 15
83129: PUSH
83130: EMPTY
83131: LIST
83132: LIST
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: LIST
83138: PUSH
83139: EMPTY
83140: LIST
83141: LIST
83142: PPUSH
83143: CALL_OW 72
83147: ST_TO_ADDR
// if RUCourierEscaped then
83148: LD_EXP 16
83152: IFFALSE 83166
// AddMedal ( Plans , 1 ) else
83154: LD_STRING Plans
83156: PPUSH
83157: LD_INT 1
83159: PPUSH
83160: CALL_OW 101
83164: GO 83177
// AddMedal ( Plans , - 1 ) ;
83166: LD_STRING Plans
83168: PPUSH
83169: LD_INT 1
83171: NEG
83172: PPUSH
83173: CALL_OW 101
// SaveVariable ( RUCourierEscaped , AM05_CourierEscaped ) ;
83177: LD_EXP 16
83181: PPUSH
83182: LD_STRING AM05_CourierEscaped
83184: PPUSH
83185: CALL_OW 39
// if SuperChassisContructed then
83189: LD_EXP 109
83193: IFFALSE 83207
// AddMedal ( UberPanzer , 1 ) else
83195: LD_STRING UberPanzer
83197: PPUSH
83198: LD_INT 1
83200: PPUSH
83201: CALL_OW 101
83205: GO 83218
// AddMedal ( UberPanzer , - 1 ) ;
83207: LD_STRING UberPanzer
83209: PPUSH
83210: LD_INT 1
83212: NEG
83213: PPUSH
83214: CALL_OW 101
// SaveVariable ( SuperChassisContructed , AM05_SuperChassisContructed ) ;
83218: LD_EXP 109
83222: PPUSH
83223: LD_STRING AM05_SuperChassisContructed
83225: PPUSH
83226: CALL_OW 39
// if AM7Losses > 5 then
83230: LD_EXP 110
83234: PUSH
83235: LD_INT 5
83237: GREATER
83238: IFFALSE 83253
// AddMedal ( Losses , - 1 ) else
83240: LD_STRING Losses
83242: PPUSH
83243: LD_INT 1
83245: NEG
83246: PPUSH
83247: CALL_OW 101
83251: GO 83263
// AddMedal ( Losses , 1 ) ;
83253: LD_STRING Losses
83255: PPUSH
83256: LD_INT 1
83258: PPUSH
83259: CALL_OW 101
// SaveVariable ( AM7Losses , AM05_SufferedLosses ) ;
83263: LD_EXP 110
83267: PPUSH
83268: LD_STRING AM05_SufferedLosses
83270: PPUSH
83271: CALL_OW 39
// GiveMedals ( Main ) ;
83275: LD_STRING Main
83277: PPUSH
83278: CALL_OW 102
// RewardPeople ( player_units ) ;
83282: LD_VAR 0 2
83286: PPUSH
83287: CALL_OW 43
// SaveCharacters ( Simone , Simone ) ;
83291: LD_EXP 36
83295: PPUSH
83296: LD_STRING Simone
83298: PPUSH
83299: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
83303: LD_EXP 37
83307: PPUSH
83308: LD_STRING Miller
83310: PPUSH
83311: CALL_OW 38
// SaveCharacters ( Esther , Esther ) ;
83315: LD_EXP 38
83319: PPUSH
83320: LD_STRING Esther
83322: PPUSH
83323: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
83327: LD_EXP 39
83331: PPUSH
83332: LD_STRING Edmonds
83334: PPUSH
83335: CALL_OW 38
// SaveCharacters ( Pravar , Pravar ) ;
83339: LD_EXP 40
83343: PPUSH
83344: LD_STRING Pravar
83346: PPUSH
83347: CALL_OW 38
// SaveCharacters ( Mortimer , Mortimer ) ;
83351: LD_EXP 48
83355: PPUSH
83356: LD_STRING Mortimer
83358: PPUSH
83359: CALL_OW 38
// SaveCharacters ( player_units diff [ Simone , Miller , Esther , Edmonds , Pravar , Mortimer ] , AM05_Survivors ) ;
83363: LD_VAR 0 2
83367: PUSH
83368: LD_EXP 36
83372: PUSH
83373: LD_EXP 37
83377: PUSH
83378: LD_EXP 38
83382: PUSH
83383: LD_EXP 39
83387: PUSH
83388: LD_EXP 40
83392: PUSH
83393: LD_EXP 48
83397: PUSH
83398: EMPTY
83399: LIST
83400: LIST
83401: LIST
83402: LIST
83403: LIST
83404: LIST
83405: DIFF
83406: PPUSH
83407: LD_STRING AM05_Survivors
83409: PPUSH
83410: CALL_OW 38
// YouWin ;
83414: CALL_OW 103
// exit ;
83418: GO 83420
// end ; end_of_file
83420: LD_VAR 0 1
83424: RET
// export ar_heavy_tracked , us_tesla_coil , ar_liquid_siberite , ar_heavy_gun , ar_mobile_mortar , ru_laser , ru_rocket_battery , ru_flame_thrower , ru_radar , Tech_Tesla ; export function InitiateConstants ; begin
83425: LD_INT 0
83427: PPUSH
// ar_heavy_tracked := 16 ;
83428: LD_ADDR_EXP 111
83432: PUSH
83433: LD_INT 16
83435: ST_TO_ADDR
// us_tesla_coil := 70 ;
83436: LD_ADDR_EXP 112
83440: PUSH
83441: LD_INT 70
83443: ST_TO_ADDR
// ar_liquid_siberite := 71 ;
83444: LD_ADDR_EXP 113
83448: PUSH
83449: LD_INT 71
83451: ST_TO_ADDR
// ar_heavy_gun := 72 ;
83452: LD_ADDR_EXP 114
83456: PUSH
83457: LD_INT 72
83459: ST_TO_ADDR
// ar_mobile_mortar := 73 ;
83460: LD_ADDR_EXP 115
83464: PUSH
83465: LD_INT 73
83467: ST_TO_ADDR
// ru_laser := 74 ;
83468: LD_ADDR_EXP 116
83472: PUSH
83473: LD_INT 74
83475: ST_TO_ADDR
// ru_rocket_battery := 75 ;
83476: LD_ADDR_EXP 117
83480: PUSH
83481: LD_INT 75
83483: ST_TO_ADDR
// ru_flame_thrower := 76 ;
83484: LD_ADDR_EXP 118
83488: PUSH
83489: LD_INT 76
83491: ST_TO_ADDR
// ru_radar := 77 ;
83492: LD_ADDR_EXP 119
83496: PUSH
83497: LD_INT 77
83499: ST_TO_ADDR
// Tech_Tesla := 73 ;
83500: LD_ADDR_EXP 120
83504: PUSH
83505: LD_INT 73
83507: ST_TO_ADDR
// end ; end_of_file
83508: LD_VAR 0 1
83512: RET
// every 0 0$1 trigger MissionStart do
83513: LD_EXP 1
83517: IFFALSE 83559
83519: GO 83521
83521: DISABLE
// begin wait ( Rand ( 0 0$50 , 1 1$20 ) ) ;
83522: LD_INT 1750
83524: PPUSH
83525: LD_INT 2800
83527: PPUSH
83528: CALL_OW 12
83532: PPUSH
83533: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
83537: LD_INT 2
83539: PPUSH
83540: LD_INT 5
83542: PPUSH
83543: CALL_OW 12
83547: PPUSH
83548: LD_INT 21
83550: PPUSH
83551: LD_INT 1
83553: PPUSH
83554: CALL_OW 55
// enable ;
83558: ENABLE
// end ;
83559: END
