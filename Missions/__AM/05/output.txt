// export MissionStart , BradfordAssault , AfterBradfordAssault ; export Squad_Assembly_Start ; export PlansCourierEscape , KolvichEnRoute ; starting begin RandomizeAll ;
   0: CALL_OW 11
// PrepareDifficulty ;
   4: CALL 14874 0 0
// Garrison_Buildings ( 3 , 3 , 2 , 4 , 2 , 3 , 2 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
   8: LD_INT 3
  10: PPUSH
  11: LD_INT 3
  13: PPUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 2
  22: PPUSH
  23: LD_INT 3
  25: PPUSH
  26: LD_INT 2
  28: PPUSH
  29: LD_EXP 58
  33: PPUSH
  34: LD_EXP 59
  38: PPUSH
  39: CALL_OW 12
  43: PPUSH
  44: CALL 6188 0 8
// Fill_Turrets ( 3 ) ;
  48: LD_INT 3
  50: PPUSH
  51: CALL 7195 0 1
// SetBName ( ustinov1 , ustinova ) ;
  55: LD_INT 2
  57: PPUSH
  58: LD_STRING ustinova
  60: PPUSH
  61: CALL_OW 500
// SetBName ( ustinov2 , ustinovb ) ;
  65: LD_INT 3
  67: PPUSH
  68: LD_STRING ustinovb
  70: PPUSH
  71: CALL_OW 500
// Prepare_AMBase ;
  75: CALL 4951 0 0
// CreatePersonas ;
  79: CALL 10620 0 0
// PlaceUnitXY ( Bradford , 90 , 80 , false ) ;
  83: LD_EXP 42
  87: PPUSH
  88: LD_INT 90
  90: PPUSH
  91: LD_INT 80
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 48
// PlaceUnitXY ( Richford , 91 , 81 , false ) ;
 101: LD_EXP 49
 105: PPUSH
 106: LD_INT 91
 108: PPUSH
 109: LD_INT 81
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: CALL_OW 48
// PlaceUnitXY ( Esther , 82 , 84 , false ) ;
 119: LD_EXP 38
 123: PPUSH
 124: LD_INT 82
 126: PPUSH
 127: LD_INT 84
 129: PPUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 48
// PlaceUnitXY ( Edmonds , 84 , 91 , false ) ;
 137: LD_EXP 39
 141: PPUSH
 142: LD_INT 84
 144: PPUSH
 145: LD_INT 91
 147: PPUSH
 148: LD_INT 0
 150: PPUSH
 151: CALL_OW 48
// PlaceUnitXY ( Barnes , 88 , 83 , false ) ;
 155: LD_EXP 43
 159: PPUSH
 160: LD_INT 88
 162: PPUSH
 163: LD_INT 83
 165: PPUSH
 166: LD_INT 0
 168: PPUSH
 169: CALL_OW 48
// ComTurnUnit ( Bradford , Richford ) ;
 173: LD_EXP 42
 177: PPUSH
 178: LD_EXP 49
 182: PPUSH
 183: CALL_OW 119
// ComTurnUnit ( Richford , Bradford ) ;
 187: LD_EXP 49
 191: PPUSH
 192: LD_EXP 42
 196: PPUSH
 197: CALL_OW 119
// PlaceHumanInUnit ( Sidorovich , ustinov2 ) ;
 201: LD_EXP 44
 205: PPUSH
 206: LD_INT 3
 208: PPUSH
 209: CALL_OW 52
// ingame_video = true ;
 213: LD_ADDR_OWVAR 52
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// interface_hidden = true ;
 221: LD_ADDR_OWVAR 54
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// CenterNowOnUnits ( Bradford ) ;
 229: LD_EXP 42
 233: PPUSH
 234: CALL_OW 87
// Squad_Assembly_Start := true ;
 238: LD_ADDR_EXP 4
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// wait ( 0 0$2 ) ;
 246: LD_INT 70
 248: PPUSH
 249: CALL_OW 67
// Say ( Bradford , D1-Bradford-1 ) ;
 253: LD_EXP 42
 257: PPUSH
 258: LD_STRING D1-Bradford-1
 260: PPUSH
 261: CALL_OW 88
// Say ( Richford , D1-Sol-1 ) ;
 265: LD_EXP 49
 269: PPUSH
 270: LD_STRING D1-Sol-1
 272: PPUSH
 273: CALL_OW 88
// ComMoveXY ( Richford , 102 , 88 ) ;
 277: LD_EXP 49
 281: PPUSH
 282: LD_INT 102
 284: PPUSH
 285: LD_INT 88
 287: PPUSH
 288: CALL_OW 111
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 292: LD_EXP 36
 296: PPUSH
 297: CALL_OW 310
 301: PPUSH
 302: CALL_OW 85
// ComMoveXY ( IsInUnit ( Simone ) , 88 , 94 ) ;
 306: LD_EXP 36
 310: PPUSH
 311: CALL_OW 310
 315: PPUSH
 316: LD_INT 88
 318: PPUSH
 319: LD_INT 94
 321: PPUSH
 322: CALL_OW 111
// wait ( 0 0$5 ) ;
 326: LD_INT 175
 328: PPUSH
 329: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 333: LD_EXP 36
 337: PPUSH
 338: CALL_OW 310
 342: PPUSH
 343: CALL_OW 85
// wait ( 0 0$2 ) ;
 347: LD_INT 70
 349: PPUSH
 350: CALL_OW 67
// ComExitVehicle ( IsInUnit ( Simone ) ) ;
 354: LD_EXP 36
 358: PPUSH
 359: CALL_OW 310
 363: PPUSH
 364: CALL_OW 121
// CenterOnUnits ( Simone ) ;
 368: LD_EXP 36
 372: PPUSH
 373: CALL_OW 85
// wait ( 0 0$0.5 ) ;
 377: LD_INT 18
 379: PPUSH
 380: CALL_OW 67
// AddComMoveXY ( Simone , 90 , 81 ) ;
 384: LD_EXP 36
 388: PPUSH
 389: LD_INT 90
 391: PPUSH
 392: LD_INT 81
 394: PPUSH
 395: CALL_OW 171
// wait ( 0 0$5 ) ;
 399: LD_INT 175
 401: PPUSH
 402: CALL_OW 67
// Say ( Simone , D1-Simone-1 ) ;
 406: LD_EXP 36
 410: PPUSH
 411: LD_STRING D1-Simone-1
 413: PPUSH
 414: CALL_OW 88
// Say ( Bradford , D1-Bradford-2 ) ;
 418: LD_EXP 42
 422: PPUSH
 423: LD_STRING D1-Bradford-2
 425: PPUSH
 426: CALL_OW 88
// Say ( Bradford , D1-Bradford-2a ) ;
 430: LD_EXP 42
 434: PPUSH
 435: LD_STRING D1-Bradford-2a
 437: PPUSH
 438: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 442: LD_EXP 36
 446: PPUSH
 447: LD_STRING D1-Simone-2
 449: PPUSH
 450: CALL_OW 88
// Say ( Bradford , D1-Bradford-3 ) ;
 454: LD_EXP 42
 458: PPUSH
 459: LD_STRING D1-Bradford-3
 461: PPUSH
 462: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 466: LD_EXP 36
 470: PPUSH
 471: LD_STRING D1-Simone-4
 473: PPUSH
 474: CALL_OW 88
// Say ( Bradford , D1-Bradford-4 ) ;
 478: LD_EXP 42
 482: PPUSH
 483: LD_STRING D1-Bradford-4
 485: PPUSH
 486: CALL_OW 88
// Say ( Bradford , D1-Bradford-5 ) ;
 490: LD_EXP 42
 494: PPUSH
 495: LD_STRING D1-Bradford-5
 497: PPUSH
 498: CALL_OW 88
// ingame_video = false ;
 502: LD_ADDR_OWVAR 52
 506: PUSH
 507: LD_INT 0
 509: ST_TO_ADDR
// interface_hidden = false ;
 510: LD_ADDR_OWVAR 54
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// SetSide ( Esther , 7 ) ;
 518: LD_EXP 38
 522: PPUSH
 523: LD_INT 7
 525: PPUSH
 526: CALL_OW 235
// SetSide ( Edmonds , 7 ) ;
 530: LD_EXP 39
 534: PPUSH
 535: LD_INT 7
 537: PPUSH
 538: CALL_OW 235
// MissionStart := true ;
 542: LD_ADDR_EXP 1
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// AlliedReinforcement ;
 550: CALL 5879 0 0
// ChangeMissionObjectives ( M1 ) ;
 554: LD_STRING M1
 556: PPUSH
 557: CALL_OW 337
// SaveForQuickRestart ;
 561: CALL_OW 22
// Wait ( 0 0$5 ) ;
 565: LD_INT 175
 567: PPUSH
 568: CALL_OW 67
// Say ( Barnes , D1a-Barnes-1 ) ;
 572: LD_EXP 43
 576: PPUSH
 577: LD_STRING D1a-Barnes-1
 579: PPUSH
 580: CALL_OW 88
// Say ( Simone , D1a-Simone-1 ) ;
 584: LD_EXP 36
 588: PPUSH
 589: LD_STRING D1a-Simone-1
 591: PPUSH
 592: CALL_OW 88
// Say ( Barnes , D1a-Barnes-2 ) ;
 596: LD_EXP 43
 600: PPUSH
 601: LD_STRING D1a-Barnes-2
 603: PPUSH
 604: CALL_OW 88
// Say ( Simone , D1a-Simone-2 ) ;
 608: LD_EXP 36
 612: PPUSH
 613: LD_STRING D1a-Simone-2
 615: PPUSH
 616: CALL_OW 88
// Say ( Barnes , D1a-Barnes-3 ) ;
 620: LD_EXP 43
 624: PPUSH
 625: LD_STRING D1a-Barnes-3
 627: PPUSH
 628: CALL_OW 88
// Wait ( 1 1$0 ) ;
 632: LD_INT 2100
 634: PPUSH
 635: CALL_OW 67
// Say ( Esther , D1b-Esther-1 ) ;
 639: LD_EXP 38
 643: PPUSH
 644: LD_STRING D1b-Esther-1
 646: PPUSH
 647: CALL_OW 88
// Say ( Simone , D1b-Simone-1 ) ;
 651: LD_EXP 36
 655: PPUSH
 656: LD_STRING D1b-Simone-1
 658: PPUSH
 659: CALL_OW 88
// Say ( Esther , D1b-Esther-2 ) ;
 663: LD_EXP 38
 667: PPUSH
 668: LD_STRING D1b-Esther-2
 670: PPUSH
 671: CALL_OW 88
// Say ( Simone , D1b-Simone-2 ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_STRING D1b-Simone-2
 682: PPUSH
 683: CALL_OW 88
// Say ( Esther , D1b-Esther-3 ) ;
 687: LD_EXP 38
 691: PPUSH
 692: LD_STRING D1b-Esther-3
 694: PPUSH
 695: CALL_OW 88
// end ;
 699: END
// every 0 0$1 trigger Squad_Assembly_Start do
 700: LD_EXP 4
 704: IFFALSE 713
 706: GO 708
 708: DISABLE
// begin Squad_Assembly ;
 709: CALL 11931 0 0
// end ;
 713: END
// export Base_DepotBuilt , Base_WorkshopBuilt , Base_LabBuilt ; export Base_WholeBuilt , Base_TooLate ; every 0 0$1 trigger Base_DepotBuilt and Base_WorkshopBuilt and Base_LabBuilt and not Base_TooLate do
 714: LD_EXP 7
 718: PUSH
 719: LD_EXP 8
 723: AND
 724: PUSH
 725: LD_EXP 9
 729: AND
 730: PUSH
 731: LD_EXP 11
 735: NOT
 736: AND
 737: IFFALSE 786
 739: GO 741
 741: DISABLE
// begin Say ( Simone , D2-Simone-1 ) ;
 742: LD_EXP 36
 746: PPUSH
 747: LD_STRING D2-Simone-1
 749: PPUSH
 750: CALL_OW 88
// Say ( Bradford , D2-Bradford-1 ) ;
 754: LD_EXP 42
 758: PPUSH
 759: LD_STRING D2-Bradford-1
 761: PPUSH
 762: CALL_OW 88
// Say ( Simone , D2-Simone-2 ) ;
 766: LD_EXP 36
 770: PPUSH
 771: LD_STRING D2-Simone-2
 773: PPUSH
 774: CALL_OW 88
// Base_WholeBuilt := true ;
 778: LD_ADDR_EXP 10
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// end ;
 786: END
// every 0 0$1 trigger MissionStart do
 787: LD_EXP 1
 791: IFFALSE 886
 793: GO 795
 795: DISABLE
// begin wait ( 5 5$0 ) ;
 796: LD_INT 10500
 798: PPUSH
 799: CALL_OW 67
// if not Base_WholeBuilt then
 803: LD_EXP 10
 807: NOT
 808: IFFALSE 886
// begin Base_TooLate := true ;
 810: LD_ADDR_EXP 11
 814: PUSH
 815: LD_INT 1
 817: ST_TO_ADDR
// Say ( Bradford , D2a-Bradford-1 ) ;
 818: LD_EXP 42
 822: PPUSH
 823: LD_STRING D2a-Bradford-1
 825: PPUSH
 826: CALL_OW 88
// Say ( Simone , D2a-Simone-1 ) ;
 830: LD_EXP 36
 834: PPUSH
 835: LD_STRING D2a-Simone-1
 837: PPUSH
 838: CALL_OW 88
// Say ( Bradford , D2a-Bradford-2 ) ;
 842: LD_EXP 42
 846: PPUSH
 847: LD_STRING D2a-Bradford-2
 849: PPUSH
 850: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 854: LD_EXP 36
 858: PPUSH
 859: LD_STRING D2a-Simone-2
 861: PPUSH
 862: CALL_OW 88
// Say ( Bradford , D2a-Bradford-3 ) ;
 866: LD_EXP 42
 870: PPUSH
 871: LD_STRING D2a-Bradford-3
 873: PPUSH
 874: CALL_OW 88
// Base_WholeBuilt := true ;
 878: LD_ADDR_EXP 10
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// end ; end ;
 886: END
// every 0 0$1 trigger Base_WholeBuilt do var WholeSquad , LabSpeaker ;
 887: LD_EXP 10
 891: IFFALSE 1174
 893: GO 895
 895: DISABLE
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
// begin wait ( Rand ( 3 3$0 , 5 5$0 ) ) ;
 900: LD_INT 6300
 902: PPUSH
 903: LD_INT 10500
 905: PPUSH
 906: CALL_OW 12
 910: PPUSH
 911: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds , Pravar ] ;
 915: LD_ADDR_VAR 0 1
 919: PUSH
 920: LD_INT 22
 922: PUSH
 923: LD_INT 7
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PUSH
 930: LD_INT 21
 932: PUSH
 933: LD_INT 1
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_EXP 36
 953: PUSH
 954: LD_EXP 37
 958: PUSH
 959: LD_EXP 38
 963: PUSH
 964: LD_EXP 39
 968: PUSH
 969: LD_EXP 40
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: DIFF
 981: ST_TO_ADDR
// LabSpeaker := SortBySkill ( WholeSquad , 4 ) ;
 982: LD_ADDR_VAR 0 2
 986: PUSH
 987: LD_VAR 0 1
 991: PPUSH
 992: LD_INT 4
 994: PPUSH
 995: CALL 59434 0 2
 999: ST_TO_ADDR
// if not IsDead ( Edmonds ) then
1000: LD_EXP 39
1004: PPUSH
1005: CALL_OW 301
1009: NOT
1010: IFFALSE 1098
// begin Say ( Simone , D3-Simone-1 ) ;
1012: LD_EXP 36
1016: PPUSH
1017: LD_STRING D3-Simone-1
1019: PPUSH
1020: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
1024: LD_EXP 39
1028: PPUSH
1029: LD_STRING D3-Edmonds-1
1031: PPUSH
1032: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
1036: LD_EXP 39
1040: PPUSH
1041: LD_STRING D3-Edmonds-2
1043: PPUSH
1044: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
1048: LD_EXP 36
1052: PPUSH
1053: LD_STRING D3-Simone-2
1055: PPUSH
1056: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-3 ) ;
1060: LD_EXP 39
1064: PPUSH
1065: LD_STRING D3-Edmonds-3
1067: PPUSH
1068: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-4 ) ;
1072: LD_EXP 39
1076: PPUSH
1077: LD_STRING D3-Edmonds-4
1079: PPUSH
1080: CALL_OW 88
// Say ( Simone , D3-Simone-3 ) ;
1084: LD_EXP 36
1088: PPUSH
1089: LD_STRING D3-Simone-3
1091: PPUSH
1092: CALL_OW 88
// end else
1096: GO 1167
// begin SaySex ( LabSpeaker [ 1 ] , D4-Sci-1 , D4-FemSci-1 ) ;
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 1
1105: ARRAY
1106: PPUSH
1107: LD_STRING D4-Sci-1
1109: PPUSH
1110: LD_STRING D4-FemSci-1
1112: PPUSH
1113: CALL 8148 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-2 , D4-FemSci-2 ) ;
1117: LD_VAR 0 2
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PPUSH
1126: LD_STRING D4-Sci-2
1128: PPUSH
1129: LD_STRING D4-FemSci-2
1131: PPUSH
1132: CALL 8148 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-3 , D4-FemSci-3 ) ;
1136: LD_VAR 0 2
1140: PUSH
1141: LD_INT 1
1143: ARRAY
1144: PPUSH
1145: LD_STRING D4-Sci-3
1147: PPUSH
1148: LD_STRING D4-FemSci-3
1150: PPUSH
1151: CALL 8148 0 3
// Say ( Simone , D3-Simone-3 ) ;
1155: LD_EXP 36
1159: PPUSH
1160: LD_STRING D3-Simone-3
1162: PPUSH
1163: CALL_OW 88
// end ; ChangeMissionObjectives ( M1a ) ;
1167: LD_STRING M1a
1169: PPUSH
1170: CALL_OW 337
// end ;
1174: PPOPN 2
1176: END
// every 0 0$1 trigger Base_WholeBuilt do
1177: LD_EXP 10
1181: IFFALSE 1261
1183: GO 1185
1185: DISABLE
// begin wait ( Rand ( 11 11$0 , 14 14$0 ) ) ;
1186: LD_INT 23100
1188: PPUSH
1189: LD_INT 29400
1191: PPUSH
1192: CALL_OW 12
1196: PPUSH
1197: CALL_OW 67
// Say ( Barnes , D4a-Barnes-1 ) ;
1201: LD_EXP 43
1205: PPUSH
1206: LD_STRING D4a-Barnes-1
1208: PPUSH
1209: CALL_OW 88
// Say ( Bradford , D4a-Bradford-1 ) ;
1213: LD_EXP 42
1217: PPUSH
1218: LD_STRING D4a-Bradford-1
1220: PPUSH
1221: CALL_OW 88
// Say ( Barnes , D4a-Barnes-2 ) ;
1225: LD_EXP 43
1229: PPUSH
1230: LD_STRING D4a-Barnes-2
1232: PPUSH
1233: CALL_OW 88
// Say ( Bradford , D4a-Bradford-2 ) ;
1237: LD_EXP 42
1241: PPUSH
1242: LD_STRING D4a-Bradford-2
1244: PPUSH
1245: CALL_OW 88
// Say ( Bradford , D4a-Bradford-3 ) ;
1249: LD_EXP 42
1253: PPUSH
1254: LD_STRING D4a-Bradford-3
1256: PPUSH
1257: CALL_OW 88
// end ;
1261: END
// every 0 0$1 trigger Base_WholeBuilt do
1262: LD_EXP 10
1266: IFFALSE 1599
1268: GO 1270
1270: DISABLE
// begin wait ( 30 30$00 ) ;
1271: LD_INT 63000
1273: PPUSH
1274: CALL_OW 67
// InGameOn ;
1278: CALL_OW 8
// CenterOnUnits ( Bradford ) ;
1282: LD_EXP 42
1286: PPUSH
1287: CALL_OW 85
// AM_SquadOne := AM_SquadOne ^ [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] ] ;
1291: LD_ADDR_EXP 64
1295: PUSH
1296: LD_EXP 64
1300: PUSH
1301: LD_EXP 26
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PUSH
1310: LD_EXP 26
1314: PUSH
1315: LD_INT 2
1317: ARRAY
1318: PUSH
1319: LD_EXP 26
1323: PUSH
1324: LD_INT 3
1326: ARRAY
1327: PUSH
1328: LD_EXP 26
1332: PUSH
1333: LD_INT 4
1335: ARRAY
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: ADD
1343: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ [ AM_Sols [ 5 ] , AM_Sols [ 6 ] , AM_Sols [ 7 ] ] ;
1344: LD_ADDR_EXP 65
1348: PUSH
1349: LD_EXP 65
1353: PUSH
1354: LD_EXP 26
1358: PUSH
1359: LD_INT 5
1361: ARRAY
1362: PUSH
1363: LD_EXP 26
1367: PUSH
1368: LD_INT 6
1370: ARRAY
1371: PUSH
1372: LD_EXP 26
1376: PUSH
1377: LD_INT 7
1379: ARRAY
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: ADD
1386: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ [ AM_Sols [ 8 ] , AM_Sols [ 9 ] , AM_Sols [ 10 ] ] ;
1387: LD_ADDR_EXP 66
1391: PUSH
1392: LD_EXP 66
1396: PUSH
1397: LD_EXP 26
1401: PUSH
1402: LD_INT 8
1404: ARRAY
1405: PUSH
1406: LD_EXP 26
1410: PUSH
1411: LD_INT 9
1413: ARRAY
1414: PUSH
1415: LD_EXP 26
1419: PUSH
1420: LD_INT 10
1422: ARRAY
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: LIST
1428: ADD
1429: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ Bradford ;
1430: LD_ADDR_EXP 65
1434: PUSH
1435: LD_EXP 65
1439: PUSH
1440: LD_EXP 42
1444: ADD
1445: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ Richford ;
1446: LD_ADDR_EXP 66
1450: PUSH
1451: LD_EXP 66
1455: PUSH
1456: LD_EXP 49
1460: ADD
1461: ST_TO_ADDR
// ComMoveXY ( AM_Sols , 93 , 84 ) ;
1462: LD_EXP 26
1466: PPUSH
1467: LD_INT 93
1469: PPUSH
1470: LD_INT 84
1472: PPUSH
1473: CALL_OW 111
// Say ( Bradford , D5-Bradford-1 ) ;
1477: LD_EXP 42
1481: PPUSH
1482: LD_STRING D5-Bradford-1
1484: PPUSH
1485: CALL_OW 88
// Say ( Bradford , D5-Bradford-2 ) ;
1489: LD_EXP 42
1493: PPUSH
1494: LD_STRING D5-Bradford-2
1496: PPUSH
1497: CALL_OW 88
// Say ( Bradford , D5-Bradford-3 ) ;
1501: LD_EXP 42
1505: PPUSH
1506: LD_STRING D5-Bradford-3
1508: PPUSH
1509: CALL_OW 88
// ComMoveXY ( AM_SquadOne , 130 , 56 ) ;
1513: LD_EXP 64
1517: PPUSH
1518: LD_INT 130
1520: PPUSH
1521: LD_INT 56
1523: PPUSH
1524: CALL_OW 111
// ComMoveXY ( AM_SquadTwo , 143 , 95 ) ;
1528: LD_EXP 65
1532: PPUSH
1533: LD_INT 143
1535: PPUSH
1536: LD_INT 95
1538: PPUSH
1539: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 169 , 147 ) ;
1543: LD_EXP 66
1547: PPUSH
1548: LD_INT 169
1550: PPUSH
1551: LD_INT 147
1553: PPUSH
1554: CALL_OW 111
// ComMoveXY ( Mortimer , 130 , 56 ) ;
1558: LD_EXP 48
1562: PPUSH
1563: LD_INT 130
1565: PPUSH
1566: LD_INT 56
1568: PPUSH
1569: CALL_OW 111
// Wait ( 0 0$5 ) ;
1573: LD_INT 175
1575: PPUSH
1576: CALL_OW 67
// InGameOff ;
1580: CALL_OW 9
// BradfordAssault := true ;
1584: LD_ADDR_EXP 2
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
1592: LD_STRING M2
1594: PPUSH
1595: CALL_OW 337
// end ;
1599: END
// every 0 0$1 trigger BradfordAssault do
1600: LD_EXP 2
1604: IFFALSE 1907
1606: GO 1608
1608: DISABLE
// begin Wait ( 0 0$35 ) ;
1609: LD_INT 1225
1611: PPUSH
1612: CALL_OW 67
// ComAgressiveMove ( AM_SquadOne , 176 , 58 ) ;
1616: LD_EXP 64
1620: PPUSH
1621: LD_INT 176
1623: PPUSH
1624: LD_INT 58
1626: PPUSH
1627: CALL_OW 114
// ComAgressiveMove ( AM_SquadTwo , 206 , 94 ) ;
1631: LD_EXP 65
1635: PPUSH
1636: LD_INT 206
1638: PPUSH
1639: LD_INT 94
1641: PPUSH
1642: CALL_OW 114
// ComAgressiveMove ( AM_SquadThree , 220 , 142 ) ;
1646: LD_EXP 66
1650: PPUSH
1651: LD_INT 220
1653: PPUSH
1654: LD_INT 142
1656: PPUSH
1657: CALL_OW 114
// Say ( Bradford , D5a-Bradford-1 ) ;
1661: LD_EXP 42
1665: PPUSH
1666: LD_STRING D5a-Bradford-1
1668: PPUSH
1669: CALL_OW 88
// Wait ( 0 0$15 ) ;
1673: LD_INT 525
1675: PPUSH
1676: CALL_OW 67
// Say ( Mortimer , D5a-Doherty-1 ) ;
1680: LD_EXP 48
1684: PPUSH
1685: LD_STRING D5a-Doherty-1
1687: PPUSH
1688: CALL_OW 88
// Say ( Richford , D5a-Richford-1 ) ;
1692: LD_EXP 49
1696: PPUSH
1697: LD_STRING D5a-Richford-1
1699: PPUSH
1700: CALL_OW 88
// PriorityAttack ( 3 , Bradford ) ;
1704: LD_INT 3
1706: PPUSH
1707: LD_EXP 42
1711: PPUSH
1712: CALL_OW 470
// PriorityAttack ( 3 , Richford ) ;
1716: LD_INT 3
1718: PPUSH
1719: LD_EXP 49
1723: PPUSH
1724: CALL_OW 470
// Wait ( 0 0$45 ) ;
1728: LD_INT 1575
1730: PPUSH
1731: CALL_OW 67
// SayRadio ( Barnes , D5a-Barnes-1 ) ;
1735: LD_EXP 43
1739: PPUSH
1740: LD_STRING D5a-Barnes-1
1742: PPUSH
1743: CALL_OW 94
// ComMoveXY ( AM_SquadOne , 95 , 83 ) ;
1747: LD_EXP 64
1751: PPUSH
1752: LD_INT 95
1754: PPUSH
1755: LD_INT 83
1757: PPUSH
1758: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 95 , 83 ) ;
1762: LD_EXP 66
1766: PPUSH
1767: LD_INT 95
1769: PPUSH
1770: LD_INT 83
1772: PPUSH
1773: CALL_OW 111
// ComMoveXY ( Mortimer , 95 , 83 ) ;
1777: LD_EXP 48
1781: PPUSH
1782: LD_INT 95
1784: PPUSH
1785: LD_INT 83
1787: PPUSH
1788: CALL_OW 111
// SayRadio ( Barnes , D5a-Barnes-2 ) ;
1792: LD_EXP 43
1796: PPUSH
1797: LD_STRING D5a-Barnes-2
1799: PPUSH
1800: CALL_OW 94
// Wait ( 0 0$40 ) ;
1804: LD_INT 1400
1806: PPUSH
1807: CALL_OW 67
// InGameOn ;
1811: CALL_OW 8
// DialogueOn ;
1815: CALL_OW 6
// Say ( Barnes , D5b-Barnes-1 ) ;
1819: LD_EXP 43
1823: PPUSH
1824: LD_STRING D5b-Barnes-1
1826: PPUSH
1827: CALL_OW 88
// Say ( Simone , D5b-Simone-1 ) ;
1831: LD_EXP 36
1835: PPUSH
1836: LD_STRING D5b-Simone-1
1838: PPUSH
1839: CALL_OW 88
// Say ( Barnes , D5b-Barnes-2 ) ;
1843: LD_EXP 43
1847: PPUSH
1848: LD_STRING D5b-Barnes-2
1850: PPUSH
1851: CALL_OW 88
// SetSide ( AM_SquadOne , 7 ) ;
1855: LD_EXP 64
1859: PPUSH
1860: LD_INT 7
1862: PPUSH
1863: CALL_OW 235
// SetSide ( AM_SquadThree , 7 ) ;
1867: LD_EXP 66
1871: PPUSH
1872: LD_INT 7
1874: PPUSH
1875: CALL_OW 235
// SetSide ( Mortimer , 7 ) ;
1879: LD_EXP 48
1883: PPUSH
1884: LD_INT 7
1886: PPUSH
1887: CALL_OW 235
// DialogueOff ;
1891: CALL_OW 7
// InGameOff ;
1895: CALL_OW 9
// AfterBradfordAssault := true ;
1899: LD_ADDR_EXP 3
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// end ;
1907: END
// every 0 0$1 trigger AfterBradfordAssault do
1908: LD_EXP 3
1912: IFFALSE 1972
1914: GO 1916
1916: DISABLE
// begin Wait ( 3 3$40 ) ;
1917: LD_INT 7700
1919: PPUSH
1920: CALL_OW 67
// SayRadio ( Sidorovich , D6-Sidor-1 ) ;
1924: LD_EXP 44
1928: PPUSH
1929: LD_STRING D6-Sidor-1
1931: PPUSH
1932: CALL_OW 94
// Say ( Simone , D6-Simone-1 ) ;
1936: LD_EXP 36
1940: PPUSH
1941: LD_STRING D6-Simone-1
1943: PPUSH
1944: CALL_OW 88
// SayRadio ( Sidorovich , D6-Sidor-2 ) ;
1948: LD_EXP 44
1952: PPUSH
1953: LD_STRING D6-Sidor-2
1955: PPUSH
1956: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
1960: LD_EXP 36
1964: PPUSH
1965: LD_STRING D6-Simone-2
1967: PPUSH
1968: CALL_OW 88
// end ;
1972: END
// every 0 0$1 trigger AfterBradfordAssault do
1973: LD_EXP 3
1977: IFFALSE 2201
1979: GO 1981
1981: DISABLE
// begin Wait ( 7 7$20 ) ;
1982: LD_INT 15400
1984: PPUSH
1985: CALL_OW 67
// SayRadio ( Botnicov , D6a-Botnicov-1 ) ;
1989: LD_EXP 47
1993: PPUSH
1994: LD_STRING D6a-Botnicov-1
1996: PPUSH
1997: CALL_OW 94
// Say ( Simone , D6a-Simone-1 ) ;
2001: LD_EXP 36
2005: PPUSH
2006: LD_STRING D6a-Simone-1
2008: PPUSH
2009: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-2 ) ;
2013: LD_EXP 47
2017: PPUSH
2018: LD_STRING D6a-Botnicov-2
2020: PPUSH
2021: CALL_OW 94
// Say ( Simone , D6a-Simone-2 ) ;
2025: LD_EXP 36
2029: PPUSH
2030: LD_STRING D6a-Simone-2
2032: PPUSH
2033: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-3 ) ;
2037: LD_EXP 47
2041: PPUSH
2042: LD_STRING D6a-Botnicov-3
2044: PPUSH
2045: CALL_OW 94
// Say ( Simone , D6a-Simone-3 ) ;
2049: LD_EXP 36
2053: PPUSH
2054: LD_STRING D6a-Simone-3
2056: PPUSH
2057: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-4 ) ;
2061: LD_EXP 47
2065: PPUSH
2066: LD_STRING D6a-Botnicov-4
2068: PPUSH
2069: CALL_OW 94
// Say ( Simone , D6a-Simone-4 ) ;
2073: LD_EXP 36
2077: PPUSH
2078: LD_STRING D6a-Simone-4
2080: PPUSH
2081: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-5 ) ;
2085: LD_EXP 47
2089: PPUSH
2090: LD_STRING D6a-Botnicov-5
2092: PPUSH
2093: CALL_OW 94
// Say ( Simone , D6a-Simone-5 ) ;
2097: LD_EXP 36
2101: PPUSH
2102: LD_STRING D6a-Simone-5
2104: PPUSH
2105: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-6 ) ;
2109: LD_EXP 47
2113: PPUSH
2114: LD_STRING D6a-Botnicov-6
2116: PPUSH
2117: CALL_OW 94
// KolvichEnRoute := true ;
2121: LD_ADDR_EXP 6
2125: PUSH
2126: LD_INT 1
2128: ST_TO_ADDR
// SayRadio ( Botnicov , D6a-Botnicov-7 ) ;
2129: LD_EXP 47
2133: PPUSH
2134: LD_STRING D6a-Botnicov-7
2136: PPUSH
2137: CALL_OW 94
// Say ( Esther , D6a-Esther-1 ) ;
2141: LD_EXP 38
2145: PPUSH
2146: LD_STRING D6a-Esther-1
2148: PPUSH
2149: CALL_OW 88
// Say ( Simone , D6a-Simone-6 ) ;
2153: LD_EXP 36
2157: PPUSH
2158: LD_STRING D6a-Simone-6
2160: PPUSH
2161: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-8 ) ;
2165: LD_EXP 47
2169: PPUSH
2170: LD_STRING D6a-Botnicov-8
2172: PPUSH
2173: CALL_OW 94
// SayRadio ( Botnicov , D6a-Botnicov-9 ) ;
2177: LD_EXP 47
2181: PPUSH
2182: LD_STRING D6a-Botnicov-9
2184: PPUSH
2185: CALL_OW 94
// Say ( Simone , D6a-Simone-7 ) ;
2189: LD_EXP 36
2193: PPUSH
2194: LD_STRING D6a-Simone-7
2196: PPUSH
2197: CALL_OW 88
// end ;
2201: END
// every 0 0$1 trigger AfterBradfordAssault do
2202: LD_EXP 3
2206: IFFALSE 2266
2208: GO 2210
2210: DISABLE
// begin Wait ( 16 16$30 ) ;
2211: LD_INT 34650
2213: PPUSH
2214: CALL_OW 67
// SayRadio ( Sidorovich , D7-Sidor-1 ) ;
2218: LD_EXP 44
2222: PPUSH
2223: LD_STRING D7-Sidor-1
2225: PPUSH
2226: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
2230: LD_EXP 36
2234: PPUSH
2235: LD_STRING D7-Simone-1
2237: PPUSH
2238: CALL_OW 88
// SayRadio ( Sidorovich , D7-Sidor-2 ) ;
2242: LD_EXP 44
2246: PPUSH
2247: LD_STRING D7-Sidor-2
2249: PPUSH
2250: CALL_OW 94
// Say ( Simone , D7-Simone-2 ) ;
2254: LD_EXP 36
2258: PPUSH
2259: LD_STRING D7-Simone-2
2261: PPUSH
2262: CALL_OW 88
// end ;
2266: END
// every 0 0$1 trigger AfterBradfordAssault do var WholeSquad , SolSpeaker ;
2267: LD_EXP 3
2271: IFFALSE 2467
2273: GO 2275
2275: DISABLE
2276: LD_INT 0
2278: PPUSH
2279: PPUSH
// begin Wait ( 23 23$20 ) ;
2280: LD_INT 49000
2282: PPUSH
2283: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds ] ;
2287: LD_ADDR_VAR 0 1
2291: PUSH
2292: LD_INT 22
2294: PUSH
2295: LD_INT 7
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: LD_INT 21
2304: PUSH
2305: LD_INT 1
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PPUSH
2316: CALL_OW 69
2320: PUSH
2321: LD_EXP 36
2325: PUSH
2326: LD_EXP 37
2330: PUSH
2331: LD_EXP 38
2335: PUSH
2336: LD_EXP 39
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: DIFF
2347: ST_TO_ADDR
// SolSpeaker := WholeSquad [ Rand ( 1 , WholeSquad ) ] ;
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: LD_VAR 0 1
2357: PUSH
2358: LD_INT 1
2360: PPUSH
2361: LD_VAR 0 1
2365: PPUSH
2366: CALL_OW 12
2370: ARRAY
2371: ST_TO_ADDR
// if GetSex ( SolSpeaker ) = sex_male then
2372: LD_VAR 0 2
2376: PPUSH
2377: CALL_OW 258
2381: PUSH
2382: LD_INT 1
2384: EQUAL
2385: IFFALSE 2401
// Say ( SolSpeaker , D8-Sol-1 ) else
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_STRING D8-Sol-1
2394: PPUSH
2395: CALL_OW 88
2399: GO 2428
// if GetSex ( SolSpeaker ) = sex_female then
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 258
2410: PUSH
2411: LD_INT 2
2413: EQUAL
2414: IFFALSE 2428
// Say ( SolSpeaker , D8-FemSol-1 ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_STRING D8-FemSol-1
2423: PPUSH
2424: CALL_OW 88
// SayRadio ( Sidorovich , D8-Sidor-1 ) ;
2428: LD_EXP 44
2432: PPUSH
2433: LD_STRING D8-Sidor-1
2435: PPUSH
2436: CALL_OW 94
// Say ( Simone , D8-Simone-1 ) ;
2440: LD_EXP 36
2444: PPUSH
2445: LD_STRING D8-Simone-1
2447: PPUSH
2448: CALL_OW 88
// ChangeMissionObjectives ( MPlans ) ;
2452: LD_STRING MPlans
2454: PPUSH
2455: CALL_OW 337
// PlansCourierEscape := true ;
2459: LD_ADDR_EXP 5
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// end ;
2467: PPOPN 2
2469: END
// export CourierVeh , RU_Courier , RUVeh1 , RUVeh2 ; every 0 0$1 trigger PlansCourierEscape do
2470: LD_EXP 5
2474: IFFALSE 2802
2476: GO 2478
2478: DISABLE
// begin uc_side := 6 ;
2479: LD_ADDR_OWVAR 20
2483: PUSH
2484: LD_INT 6
2486: ST_TO_ADDR
// uc_nation := nation_russian ;
2487: LD_ADDR_OWVAR 21
2491: PUSH
2492: LD_INT 3
2494: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
2495: LD_ADDR_OWVAR 37
2499: PUSH
2500: LD_INT 22
2502: ST_TO_ADDR
// vc_engine := engine_siberite ;
2503: LD_ADDR_OWVAR 39
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_control := control_manual ;
2511: LD_ADDR_OWVAR 38
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// vc_weapon := ru_gun ;
2519: LD_ADDR_OWVAR 40
2523: PUSH
2524: LD_INT 44
2526: ST_TO_ADDR
// CourierVeh := CreateVehicle ;
2527: LD_ADDR_EXP 12
2531: PUSH
2532: CALL_OW 45
2536: ST_TO_ADDR
// vc_control := control_computer ;
2537: LD_ADDR_OWVAR 38
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// RUVeh1 := CreateVehicle ;
2545: LD_ADDR_EXP 14
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
2555: LD_ADDR_OWVAR 40
2559: PUSH
2560: LD_INT 43
2562: ST_TO_ADDR
// RUVeh2 := CreateVehicle ;
2563: LD_ADDR_EXP 15
2567: PUSH
2568: CALL_OW 45
2572: ST_TO_ADDR
// hc_class = class_mechanic ;
2573: LD_ADDR_OWVAR 28
2577: PUSH
2578: LD_INT 3
2580: ST_TO_ADDR
// hc_sex = sex_male ;
2581: LD_ADDR_OWVAR 27
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// hc_importance = 40 ;
2589: LD_ADDR_OWVAR 32
2593: PUSH
2594: LD_INT 40
2596: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 7 ] ;
2597: LD_ADDR_OWVAR 31
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: LD_INT 4
2607: PUSH
2608: LD_INT 10
2610: PUSH
2611: LD_INT 7
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
2620: LD_ADDR_OWVAR 29
2624: PUSH
2625: LD_INT 11
2627: PUSH
2628: LD_INT 10
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: ST_TO_ADDR
// hc_name := Jovan Radovcic ;
2635: LD_ADDR_OWVAR 26
2639: PUSH
2640: LD_STRING Jovan Radovcic
2642: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
2643: LD_ADDR_OWVAR 33
2647: PUSH
2648: LD_STRING ZieloneLaserki_Commanders
2650: ST_TO_ADDR
// hc_face_number := 7 ;
2651: LD_ADDR_OWVAR 34
2655: PUSH
2656: LD_INT 7
2658: ST_TO_ADDR
// RU_Courier := CreateHuman ;
2659: LD_ADDR_EXP 13
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// hc_name :=  ;
2669: LD_ADDR_OWVAR 26
2673: PUSH
2674: LD_STRING 
2676: ST_TO_ADDR
// hc_gallery :=  ;
2677: LD_ADDR_OWVAR 33
2681: PUSH
2682: LD_STRING 
2684: ST_TO_ADDR
// PlaceUnitArea ( CourierVeh , CourierVehsArea , false ) ;
2685: LD_EXP 12
2689: PPUSH
2690: LD_INT 6
2692: PPUSH
2693: LD_INT 0
2695: PPUSH
2696: CALL_OW 49
// PlaceUnitArea ( RUVeh1 , CourierVehsArea , false ) ;
2700: LD_EXP 14
2704: PPUSH
2705: LD_INT 6
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 49
// PlaceUnitArea ( RUVeh2 , CourierVehsArea , false ) ;
2715: LD_EXP 15
2719: PPUSH
2720: LD_INT 6
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PlaceHumanInUnit ( RU_Courier , ustinov2 ) ;
2730: LD_EXP 13
2734: PPUSH
2735: LD_INT 3
2737: PPUSH
2738: CALL_OW 52
// ComEnterUnit ( RU_Courier , CourierVeh ) ;
2742: LD_EXP 13
2746: PPUSH
2747: LD_EXP 12
2751: PPUSH
2752: CALL_OW 120
// wait ( 1 1$0 ) ;
2756: LD_INT 2100
2758: PPUSH
2759: CALL_OW 67
// ComMoveXY ( CourierVeh , 123 , 3 ) ;
2763: LD_EXP 12
2767: PPUSH
2768: LD_INT 123
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: CALL_OW 111
// ComAgressiveMove ( [ RUVeh1 , RUVeh2 ] , 123 , 3 ) ;
2778: LD_EXP 14
2782: PUSH
2783: LD_EXP 15
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: LD_INT 123
2794: PPUSH
2795: LD_INT 3
2797: PPUSH
2798: CALL_OW 114
// end ;
2802: END
// export RUCourierEscaped , RU_Courier_Dead ; every 0 0$1 trigger ( IsInArea ( CourierVeh , RUCourierEvac ) or IsInArea ( RU_Courier , RUCourierEvac ) ) and IsOK ( RU_Courier ) do
2803: LD_EXP 12
2807: PPUSH
2808: LD_INT 5
2810: PPUSH
2811: CALL_OW 308
2815: PUSH
2816: LD_EXP 13
2820: PPUSH
2821: LD_INT 5
2823: PPUSH
2824: CALL_OW 308
2828: OR
2829: PUSH
2830: LD_EXP 13
2834: PPUSH
2835: CALL_OW 302
2839: AND
2840: IFFALSE 2895
2842: GO 2844
2844: DISABLE
// begin if not IsDead ( CourierVeh ) then
2845: LD_EXP 12
2849: PPUSH
2850: CALL_OW 301
2854: NOT
2855: IFFALSE 2866
// RemoveUnit ( CourierVeh ) ;
2857: LD_EXP 12
2861: PPUSH
2862: CALL_OW 64
// RemoveUnit ( RU_Courier ) ;
2866: LD_EXP 13
2870: PPUSH
2871: CALL_OW 64
// Say ( Miller , D8c-Miller-1 ) ;
2875: LD_EXP 37
2879: PPUSH
2880: LD_STRING D8c-Miller-1
2882: PPUSH
2883: CALL_OW 88
// RUCourierEscaped := true ;
2887: LD_ADDR_EXP 16
2891: PUSH
2892: LD_INT 1
2894: ST_TO_ADDR
// end ;
2895: END
// every 0 0$1 trigger IsInArea ( RUVeh1 , RUCourierEvac ) and IsOK ( RUVeh1 ) and RUCourierEscaped do
2896: LD_EXP 14
2900: PPUSH
2901: LD_INT 5
2903: PPUSH
2904: CALL_OW 308
2908: PUSH
2909: LD_EXP 14
2913: PPUSH
2914: CALL_OW 302
2918: AND
2919: PUSH
2920: LD_EXP 16
2924: AND
2925: IFFALSE 2939
2927: GO 2929
2929: DISABLE
// RemoveUnit ( RUVeh1 ) ;
2930: LD_EXP 14
2934: PPUSH
2935: CALL_OW 64
2939: END
// every 0 0$1 trigger IsInArea ( RUVeh2 , RUCourierEvac ) and IsOK ( RUVeh2 ) and RUCourierEscaped do
2940: LD_EXP 15
2944: PPUSH
2945: LD_INT 5
2947: PPUSH
2948: CALL_OW 308
2952: PUSH
2953: LD_EXP 15
2957: PPUSH
2958: CALL_OW 302
2962: AND
2963: PUSH
2964: LD_EXP 16
2968: AND
2969: IFFALSE 2983
2971: GO 2973
2973: DISABLE
// RemoveUnit ( RUVeh2 ) ;
2974: LD_EXP 15
2978: PPUSH
2979: CALL_OW 64
2983: END
// export Endgame ; export RU1Evacuation , BotnicovSpared , BotnicovAntagonized ; every 0 0$1 trigger IsDead ( Sidorovich ) and ( GetSide ( ustinov1 ) = 7 or IsDead ( ustinov1 ) ) or ( GetSide ( ustinov2 ) = 7 or IsDead ( ustinov2 ) ) do
2984: LD_EXP 44
2988: PPUSH
2989: CALL_OW 301
2993: PUSH
2994: LD_INT 2
2996: PPUSH
2997: CALL_OW 255
3001: PUSH
3002: LD_INT 7
3004: EQUAL
3005: PUSH
3006: LD_INT 2
3008: PPUSH
3009: CALL_OW 301
3013: OR
3014: AND
3015: PUSH
3016: LD_INT 3
3018: PPUSH
3019: CALL_OW 255
3023: PUSH
3024: LD_INT 7
3026: EQUAL
3027: PUSH
3028: LD_INT 3
3030: PPUSH
3031: CALL_OW 301
3035: OR
3036: OR
3037: IFFALSE 3306
3039: GO 3041
3041: DISABLE
// begin KolvichEnRoute := true ;
3042: LD_ADDR_EXP 6
3046: PUSH
3047: LD_INT 1
3049: ST_TO_ADDR
// wait ( 0 0$10 ) ;
3050: LD_INT 350
3052: PPUSH
3053: CALL_OW 67
// RU1Evacuation := true ;
3057: LD_ADDR_EXP 19
3061: PUSH
3062: LD_INT 1
3064: ST_TO_ADDR
// Prepare_Escapees ;
3065: CALL 7310 0 0
// wait ( 0 0$4 ) ;
3069: LD_INT 140
3071: PPUSH
3072: CALL_OW 67
// CenterOnUnits ( Botnicov ) ;
3076: LD_EXP 47
3080: PPUSH
3081: CALL_OW 85
// DialogueOn ;
3085: CALL_OW 6
// Say ( Miller , D9a-Miller-2 ) ;
3089: LD_EXP 37
3093: PPUSH
3094: LD_STRING D9a-Miller-2
3096: PPUSH
3097: CALL_OW 88
// if not GetAttitude ( 5 , 7 ) = att_enemy then
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 7
3106: PPUSH
3107: CALL_OW 81
3111: PUSH
3112: LD_INT 2
3114: EQUAL
3115: NOT
3116: IFFALSE 3283
// case Query ( QRussians ) of 1 :
3118: LD_STRING QRussians
3120: PPUSH
3121: CALL_OW 97
3125: PUSH
3126: LD_INT 1
3128: DOUBLE
3129: EQUAL
3130: IFTRUE 3134
3132: GO 3193
3134: POP
// begin Say ( Simone , D9a-Simone-2 ) ;
3135: LD_EXP 36
3139: PPUSH
3140: LD_STRING D9a-Simone-2
3142: PPUSH
3143: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1 ) ;
3147: LD_EXP 47
3151: PPUSH
3152: LD_STRING D9a-Botnicov-1
3154: PPUSH
3155: CALL_OW 88
// BotnicovSpared := true ;
3159: LD_ADDR_EXP 20
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// ComMoveToArea ( Botnicov_Sols , RUEvacZone ) ;
3167: LD_EXP 30
3171: PPUSH
3172: LD_INT 9
3174: PPUSH
3175: CALL_OW 113
// ComMoveToArea ( Botnicov , RUEvacZone ) ;
3179: LD_EXP 47
3183: PPUSH
3184: LD_INT 9
3186: PPUSH
3187: CALL_OW 113
// end ; 2 :
3191: GO 3283
3193: LD_INT 2
3195: DOUBLE
3196: EQUAL
3197: IFTRUE 3201
3199: GO 3282
3201: POP
// begin Say ( Simone , D9a-Simone-2a ) ;
3202: LD_EXP 36
3206: PPUSH
3207: LD_STRING D9a-Simone-2a
3209: PPUSH
3210: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1a ) ;
3214: LD_EXP 47
3218: PPUSH
3219: LD_STRING D9a-Botnicov-1a
3221: PPUSH
3222: CALL_OW 88
// BotnicovAntagonized := true ;
3226: LD_ADDR_EXP 21
3230: PUSH
3231: LD_INT 1
3233: ST_TO_ADDR
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
3234: LD_INT 5
3236: PPUSH
3237: LD_INT 7
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: CALL_OW 80
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
3250: LD_EXP 30
3254: PPUSH
3255: LD_INT 257
3257: PPUSH
3258: LD_INT 108
3260: PPUSH
3261: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
3265: LD_EXP 47
3269: PPUSH
3270: LD_INT 257
3272: PPUSH
3273: LD_INT 108
3275: PPUSH
3276: CALL_OW 114
// end ; end ;
3280: GO 3283
3282: POP
// DialogueOff ;
3283: CALL_OW 7
// wait ( 0 0$40 ) ;
3287: LD_INT 1400
3289: PPUSH
3290: CALL_OW 67
// Dialogue_Barnes_General ;
3294: CALL 7683 0 0
// Endgame := true ;
3298: LD_ADDR_EXP 18
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// end ;
3306: END
// export DvaliAttack ; every 0 0$1 trigger Endgame do
3307: LD_EXP 18
3311: IFFALSE 3408
3313: GO 3315
3315: DISABLE
// begin wait ( GEODvaliArrival ) ;
3316: LD_EXP 62
3320: PPUSH
3321: CALL_OW 67
// DialogueOn ;
3325: CALL_OW 6
// SayRadio ( Dvalishvili , D11-Dvali-1 ) ;
3329: LD_EXP 46
3333: PPUSH
3334: LD_STRING D11-Dvali-1
3336: PPUSH
3337: CALL_OW 94
// Say ( Simone , D11-Simone-1 ) ;
3341: LD_EXP 36
3345: PPUSH
3346: LD_STRING D11-Simone-1
3348: PPUSH
3349: CALL_OW 88
// SayRadio ( Dvalishvili , D11-Dvali-2 ) ;
3353: LD_EXP 46
3357: PPUSH
3358: LD_STRING D11-Dvali-2
3360: PPUSH
3361: CALL_OW 94
// SayRadio ( Dvalishvili , D11-Dvali-3 ) ;
3365: LD_EXP 46
3369: PPUSH
3370: LD_STRING D11-Dvali-3
3372: PPUSH
3373: CALL_OW 94
// Say ( Simone , D11-Simone-2 ) ;
3377: LD_EXP 36
3381: PPUSH
3382: LD_STRING D11-Simone-2
3384: PPUSH
3385: CALL_OW 88
// DialogueOff ;
3389: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
3393: LD_STRING M3a
3395: PPUSH
3396: CALL_OW 337
// DvaliAttack := true ;
3400: LD_ADDR_EXP 22
3404: PUSH
3405: LD_INT 1
3407: ST_TO_ADDR
// end ;
3408: END
// every 0 0$1 trigger DvaliAttack do
3409: LD_EXP 22
3413: IFFALSE 3629
3415: GO 3417
3417: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_N , 8 , Rand ( 6 , 8 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 1 ) ;
3418: LD_INT 10
3420: PPUSH
3421: LD_INT 8
3423: PPUSH
3424: LD_INT 6
3426: PPUSH
3427: LD_INT 8
3429: PPUSH
3430: CALL_OW 12
3434: PPUSH
3435: LD_EXP 60
3439: PPUSH
3440: LD_INT 2
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: LD_INT 1
3448: PPUSH
3449: EMPTY
3450: PPUSH
3451: LD_INT 25
3453: PUSH
3454: LD_INT 26
3456: PUSH
3457: LD_INT 27
3459: PUSH
3460: LD_INT 28
3462: PUSH
3463: LD_INT 71
3465: PUSH
3466: LD_INT 72
3468: PUSH
3469: LD_INT 73
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: PPUSH
3481: EMPTY
3482: PPUSH
3483: LD_INT 1
3485: PPUSH
3486: CALL 12305 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 8 , 11 ) , 0 , 0 , 3 , 2 , GeoSolMaxLevel , DvaliSpawn_N , 1 ) ;
3490: LD_INT 8
3492: PPUSH
3493: LD_INT 2
3495: PPUSH
3496: LD_INT 8
3498: PPUSH
3499: LD_INT 11
3501: PPUSH
3502: CALL_OW 12
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 3
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: LD_EXP 60
3523: PPUSH
3524: LD_INT 10
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL 13968 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
3534: LD_INT 0
3536: PUSH
3537: LD_EXP 56
3541: PUSH
3542: LD_INT 181
3544: PUSH
3545: LD_INT 21
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 226
3554: PUSH
3555: LD_INT 72
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 225
3564: PUSH
3565: LD_INT 103
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: LD_INT 1
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: LD_INT 0
3594: PUSH
3595: LD_INT 0
3597: PUSH
3598: LD_INT 0
3600: PUSH
3601: LD_INT 1
3603: PUSH
3604: LD_INT 1
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PPUSH
3625: CALL 53702 0 1
// end ;
3629: END
// every 0 0$1 trigger DvaliAttack do
3630: LD_EXP 22
3634: IFFALSE 3854
3636: GO 3638
3638: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_S , 8 , Rand ( 6 , 9 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 2 ) ;
3639: LD_INT 11
3641: PPUSH
3642: LD_INT 8
3644: PPUSH
3645: LD_INT 6
3647: PPUSH
3648: LD_INT 9
3650: PPUSH
3651: CALL_OW 12
3655: PPUSH
3656: LD_EXP 60
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: EMPTY
3671: PPUSH
3672: LD_INT 25
3674: PUSH
3675: LD_INT 26
3677: PUSH
3678: LD_INT 27
3680: PUSH
3681: LD_INT 28
3683: PUSH
3684: LD_INT 71
3686: PUSH
3687: LD_INT 72
3689: PUSH
3690: LD_INT 73
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: PPUSH
3702: EMPTY
3703: PPUSH
3704: LD_INT 2
3706: PPUSH
3707: CALL 12305 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 7 , 10 ) , 0 , 0 , 2 , 2 , GeoSolMaxLevel , DvaliSpawn_S , 1 ) ;
3711: LD_INT 8
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: LD_INT 7
3719: PPUSH
3720: LD_INT 10
3722: PPUSH
3723: CALL_OW 12
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: LD_INT 2
3739: PPUSH
3740: LD_EXP 60
3744: PPUSH
3745: LD_INT 11
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: CALL 13968 0 10
// PrepareDvalishvili ;
3755: CALL 14752 0 0
// Attack ( [ 0 , MC_attack_group2 , [ [ 211 , 145 ] , [ 242 , 126 ] , [ 254 , 104 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
3759: LD_INT 0
3761: PUSH
3762: LD_EXP 57
3766: PUSH
3767: LD_INT 211
3769: PUSH
3770: LD_INT 145
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 242
3779: PUSH
3780: LD_INT 126
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 254
3789: PUSH
3790: LD_INT 104
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 0
3804: PUSH
3805: LD_INT 1
3807: PUSH
3808: LD_INT 0
3810: PUSH
3811: LD_INT 1
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: LD_INT 0
3819: PUSH
3820: LD_INT 0
3822: PUSH
3823: LD_INT 0
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL 53702 0 1
// end ;
3854: END
// export KolvichArrival , KolvichAttacks ; every 0 0$1 trigger Endgame do var i ;
3855: LD_EXP 18
3859: IFFALSE 4155
3861: GO 3863
3863: DISABLE
3864: LD_INT 0
3866: PPUSH
// begin wait ( GEODvaliArrival + 15 15$00 ) ;
3867: LD_EXP 62
3871: PUSH
3872: LD_INT 31500
3874: PLUS
3875: PPUSH
3876: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-1 ) ;
3880: LD_EXP 45
3884: PPUSH
3885: LD_STRING D12-Kolvich-1
3887: PPUSH
3888: CALL_OW 94
// wait ( 0 0$05 ) ;
3892: LD_INT 175
3894: PPUSH
3895: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-2 ) ;
3899: LD_EXP 45
3903: PPUSH
3904: LD_STRING D12-Kolvich-2
3906: PPUSH
3907: CALL_OW 94
// wait ( 0 0$05 ) ;
3911: LD_INT 175
3913: PPUSH
3914: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-3 ) ;
3918: LD_EXP 45
3922: PPUSH
3923: LD_STRING D12-Kolvich-3
3925: PPUSH
3926: CALL_OW 94
// wait ( 0 0$02 ) ;
3930: LD_INT 70
3932: PPUSH
3933: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-4 ) ;
3937: LD_EXP 45
3941: PPUSH
3942: LD_STRING D12-Kolvich-4
3944: PPUSH
3945: CALL_OW 94
// InGameOn ;
3949: CALL_OW 8
// SayRadio ( Kolvich , D12-Kolvich-5 ) ;
3953: LD_EXP 45
3957: PPUSH
3958: LD_STRING D12-Kolvich-5
3960: PPUSH
3961: CALL_OW 94
// Say ( Simone , D12-Simone-1 ) ;
3965: LD_EXP 36
3969: PPUSH
3970: LD_STRING D12-Simone-1
3972: PPUSH
3973: CALL_OW 88
// SayRadio ( Kolvich , D12a-Kolvich-1 ) ;
3977: LD_EXP 45
3981: PPUSH
3982: LD_STRING D12a-Kolvich-1
3984: PPUSH
3985: CALL_OW 94
// InGameOff ;
3989: CALL_OW 9
// KolvichArrival := true ;
3993: LD_ADDR_EXP 23
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// SetSide ( AMBase , 6 ) ;
4001: LD_INT 351
4003: PPUSH
4004: LD_INT 6
4006: PPUSH
4007: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) , 6 ) ;
4011: LD_INT 22
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 30
4023: PUSH
4024: LD_INT 4
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 69
4039: PPUSH
4040: LD_INT 6
4042: PPUSH
4043: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) , 6 ) ;
4047: LD_INT 22
4049: PUSH
4050: LD_INT 1
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 31
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PPUSH
4076: LD_INT 6
4078: PPUSH
4079: CALL_OW 235
// Prepare_RU2 ;
4083: CALL 8199 0 0
// PriorityAttack ( 6 , AMLab ) ;
4087: LD_INT 6
4089: PPUSH
4090: LD_EXP 33
4094: PPUSH
4095: CALL_OW 470
// PriorityAttack ( 6 , AM_Factory ) ;
4099: LD_INT 6
4101: PPUSH
4102: LD_EXP 67
4106: PPUSH
4107: CALL_OW 470
// for i in AMFactoryExt do
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_EXP 34
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4138
// PriorityAttack ( 6 , i ) ;
4124: LD_INT 6
4126: PPUSH
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL_OW 470
4136: GO 4121
4138: POP
4139: POP
// Wait ( 2 2$0 ) ;
4140: LD_INT 4200
4142: PPUSH
4143: CALL_OW 67
// KolvichAttacks := true ;
4147: LD_ADDR_EXP 24
4151: PUSH
4152: LD_INT 1
4154: ST_TO_ADDR
// end ;
4155: PPOPN 1
4157: END
// export RandallAwaiting ; every 0 0$1 trigger KolvichArrival do
4158: LD_EXP 23
4162: IFFALSE 4436
4164: GO 4166
4166: DISABLE
// begin wait ( DefenseTime ) ;
4167: LD_EXP 63
4171: PPUSH
4172: CALL_OW 67
// KolvichAttacks = false ;
4176: LD_ADDR_EXP 24
4180: PUSH
4181: LD_INT 0
4183: ST_TO_ADDR
// RespawnAttackVehicle ( AM1_ReinforceArrival , 1 , 20 , 10 , 1 , engine_siberite , control_manual , [ ] , [ ] , [ 4 , 6 , 9 , 7 ] , 2 ) ;
4184: LD_INT 12
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_INT 20
4192: PPUSH
4193: LD_INT 10
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: EMPTY
4206: PPUSH
4207: EMPTY
4208: PPUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: LD_INT 9
4217: PUSH
4218: LD_INT 7
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL 12305 0 11
// Attack ( [ 0 , MC_attack_group2 , [ [ 93 , 55 ] , [ 100 , 72 ] , [ 88 , 82 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
4234: LD_INT 0
4236: PUSH
4237: LD_EXP 57
4241: PUSH
4242: LD_INT 93
4244: PUSH
4245: LD_INT 55
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 100
4254: PUSH
4255: LD_INT 72
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PUSH
4262: LD_INT 88
4264: PUSH
4265: LD_INT 82
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PUSH
4277: LD_INT 0
4279: PUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 0
4285: PUSH
4286: LD_INT 1
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 0
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL 53702 0 1
// wait ( 0 0$5 ) ;
4329: LD_INT 175
4331: PPUSH
4332: CALL_OW 67
// Say ( Simone , D13-Simone-1 ) ;
4336: LD_EXP 36
4340: PPUSH
4341: LD_STRING D13-Simone-1
4343: PPUSH
4344: CALL_OW 88
// SayRadio ( Kolvich , D13a-Kolvich-1 ) ;
4348: LD_EXP 45
4352: PPUSH
4353: LD_STRING D13a-Kolvich-1
4355: PPUSH
4356: CALL_OW 94
// wait ( 0 0$45 ) ;
4360: LD_INT 1575
4362: PPUSH
4363: CALL_OW 67
// PlaceUnitXY ( Randall , 217 , 1 , false ) ;
4367: LD_EXP 51
4371: PPUSH
4372: LD_INT 217
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 48
// ComMoveXY ( Randall , 277 , 135 ) ;
4385: LD_EXP 51
4389: PPUSH
4390: LD_INT 277
4392: PPUSH
4393: LD_INT 135
4395: PPUSH
4396: CALL_OW 111
// AddComTurnUnit ( Randall , Simone ) ;
4400: LD_EXP 51
4404: PPUSH
4405: LD_EXP 36
4409: PPUSH
4410: CALL_OW 179
// wait ( 0 0$25 ) ;
4414: LD_INT 875
4416: PPUSH
4417: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
4421: LD_STRING M4
4423: PPUSH
4424: CALL_OW 337
// RandallAwaiting := true ;
4428: LD_ADDR_EXP 25
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// end ;
4436: END
// every 0 0$1 trigger RandallAwaiting and GetDistUnits ( Simone , Randall ) < 3 do
4437: LD_EXP 25
4441: PUSH
4442: LD_EXP 36
4446: PPUSH
4447: LD_EXP 51
4451: PPUSH
4452: CALL_OW 296
4456: PUSH
4457: LD_INT 3
4459: LESS
4460: AND
4461: IFFALSE 4950
4463: GO 4465
4465: DISABLE
// begin InGameOn ;
4466: CALL_OW 8
// ComExitVehicle ( [ Esther , Miller , Edmonds ] ) ;
4470: LD_EXP 38
4474: PUSH
4475: LD_EXP 37
4479: PUSH
4480: LD_EXP 39
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 121
// ComMoveXY ( [ Esther , Miller , Edmonds ] , 276 , 137 ) ;
4494: LD_EXP 38
4498: PUSH
4499: LD_EXP 37
4503: PUSH
4504: LD_EXP 39
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: PPUSH
4514: LD_INT 276
4516: PPUSH
4517: LD_INT 137
4519: PPUSH
4520: CALL_OW 111
// ComMoveXY ( Simone , 278 , 136 ) ;
4524: LD_EXP 36
4528: PPUSH
4529: LD_INT 278
4531: PPUSH
4532: LD_INT 136
4534: PPUSH
4535: CALL_OW 111
// AddComTurnUnit ( Simone , Randall ) ;
4539: LD_EXP 36
4543: PPUSH
4544: LD_EXP 51
4548: PPUSH
4549: CALL_OW 179
// CenterOnUnits ( Randall ) ;
4553: LD_EXP 51
4557: PPUSH
4558: CALL_OW 85
// Say ( Randall , D14-Randall-1 ) ;
4562: LD_EXP 51
4566: PPUSH
4567: LD_STRING D14-Randall-1
4569: PPUSH
4570: CALL_OW 88
// Say ( Simone , D14-Simone-1 ) ;
4574: LD_EXP 36
4578: PPUSH
4579: LD_STRING D14-Simone-1
4581: PPUSH
4582: CALL_OW 88
// Say ( Randall , D14-Randall-2 ) ;
4586: LD_EXP 51
4590: PPUSH
4591: LD_STRING D14-Randall-2
4593: PPUSH
4594: CALL_OW 88
// Say ( Simone , D14-Simone-2 ) ;
4598: LD_EXP 36
4602: PPUSH
4603: LD_STRING D14-Simone-2
4605: PPUSH
4606: CALL_OW 88
// Say ( Randall , D14-Randall-2a ) ;
4610: LD_EXP 51
4614: PPUSH
4615: LD_STRING D14-Randall-2a
4617: PPUSH
4618: CALL_OW 88
// Say ( Simone , D14-Simone-2a ) ;
4622: LD_EXP 36
4626: PPUSH
4627: LD_STRING D14-Simone-2a
4629: PPUSH
4630: CALL_OW 88
// Say ( Randall , D14-Randall-3 ) ;
4634: LD_EXP 51
4638: PPUSH
4639: LD_STRING D14-Randall-3
4641: PPUSH
4642: CALL_OW 88
// Say ( Simone , D14-Simone-2b ) ;
4646: LD_EXP 36
4650: PPUSH
4651: LD_STRING D14-Simone-2b
4653: PPUSH
4654: CALL_OW 88
// Say ( Randall , D14-Randall-4 ) ;
4658: LD_EXP 51
4662: PPUSH
4663: LD_STRING D14-Randall-4
4665: PPUSH
4666: CALL_OW 88
// Say ( Simone , D14-Simone-3 ) ;
4670: LD_EXP 36
4674: PPUSH
4675: LD_STRING D14-Simone-3
4677: PPUSH
4678: CALL_OW 88
// Say ( Randall , D14-Randall-5 ) ;
4682: LD_EXP 51
4686: PPUSH
4687: LD_STRING D14-Randall-5
4689: PPUSH
4690: CALL_OW 88
// Say ( Randall , D14-Randall-6 ) ;
4694: LD_EXP 51
4698: PPUSH
4699: LD_STRING D14-Randall-6
4701: PPUSH
4702: CALL_OW 88
// Say ( Randall , D14-Randall-7 ) ;
4706: LD_EXP 51
4710: PPUSH
4711: LD_STRING D14-Randall-7
4713: PPUSH
4714: CALL_OW 88
// if not IsDead ( Edmonds ) then
4718: LD_EXP 39
4722: PPUSH
4723: CALL_OW 301
4727: NOT
4728: IFFALSE 4771
// begin Say ( Randall , D14-Edmonds-1 ) ;
4730: LD_EXP 51
4734: PPUSH
4735: LD_STRING D14-Edmonds-1
4737: PPUSH
4738: CALL_OW 88
// Say ( Randall , D14-Randall-8a ) ;
4742: LD_EXP 51
4746: PPUSH
4747: LD_STRING D14-Randall-8a
4749: PPUSH
4750: CALL_OW 88
// ComMoveXY ( Edmonds , 277 , 135 ) ;
4754: LD_EXP 39
4758: PPUSH
4759: LD_INT 277
4761: PPUSH
4762: LD_INT 135
4764: PPUSH
4765: CALL_OW 111
// end else
4769: GO 4783
// Say ( Randall , D14-Randall-8 ) ;
4771: LD_EXP 51
4775: PPUSH
4776: LD_STRING D14-Randall-8
4778: PPUSH
4779: CALL_OW 88
// wait ( 0 0$5 ) ;
4783: LD_INT 175
4785: PPUSH
4786: CALL_OW 67
// Say ( Randall , D14-Randall-9 ) ;
4790: LD_EXP 51
4794: PPUSH
4795: LD_STRING D14-Randall-9
4797: PPUSH
4798: CALL_OW 88
// ComMoveXY ( Randall , 277 , 135 ) ;
4802: LD_EXP 51
4806: PPUSH
4807: LD_INT 277
4809: PPUSH
4810: LD_INT 135
4812: PPUSH
4813: CALL_OW 111
// wait ( 0 0$2 ) ;
4817: LD_INT 70
4819: PPUSH
4820: CALL_OW 67
// Say ( Esther , D15-Esther-1 ) ;
4824: LD_EXP 38
4828: PPUSH
4829: LD_STRING D15-Esther-1
4831: PPUSH
4832: CALL_OW 88
// Say ( Simone , D15-Simone-1 ) ;
4836: LD_EXP 36
4840: PPUSH
4841: LD_STRING D15-Simone-1
4843: PPUSH
4844: CALL_OW 88
// Say ( Esther , D15-Esther-2 ) ;
4848: LD_EXP 38
4852: PPUSH
4853: LD_STRING D15-Esther-2
4855: PPUSH
4856: CALL_OW 88
// Say ( Simone , D15-Simone-2 ) ;
4860: LD_EXP 36
4864: PPUSH
4865: LD_STRING D15-Simone-2
4867: PPUSH
4868: CALL_OW 88
// Say ( Esther , D15-Esther-3 ) ;
4872: LD_EXP 38
4876: PPUSH
4877: LD_STRING D15-Esther-3
4879: PPUSH
4880: CALL_OW 88
// ComMoveXY ( Esther , 277 , 135 ) ;
4884: LD_EXP 38
4888: PPUSH
4889: LD_INT 277
4891: PPUSH
4892: LD_INT 135
4894: PPUSH
4895: CALL_OW 111
// Say ( Simone , D15-Simone-3 ) ;
4899: LD_EXP 36
4903: PPUSH
4904: LD_STRING D15-Simone-3
4906: PPUSH
4907: CALL_OW 88
// wait ( 0 0$2 ) ;
4911: LD_INT 70
4913: PPUSH
4914: CALL_OW 67
// Say ( Miller , D15-Miller-1 ) ;
4918: LD_EXP 37
4922: PPUSH
4923: LD_STRING D15-Miller-1
4925: PPUSH
4926: CALL_OW 88
// Say ( Simone , D15-Simone-4 ) ;
4930: LD_EXP 36
4934: PPUSH
4935: LD_STRING D15-Simone-4
4937: PPUSH
4938: CALL_OW 88
// InGameOff ;
4942: CALL_OW 9
// EndMission ;
4946: CALL 82144 0 0
// end ; end_of_file
4950: END
// export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function Prepare_AMBase ; var i , un ; begin
4951: LD_INT 0
4953: PPUSH
4954: PPUSH
4955: PPUSH
// for i = 1 to 10 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_INT 1
4964: DEC
4965: ST_TO_ADDR
4966: LD_INT 10
4968: PUSH
4969: FOR_TO
4970: IFFALSE 5060
// begin uc_side = 1 ;
4972: LD_ADDR_OWVAR 20
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// uc_nation = 1 ;
4980: LD_ADDR_OWVAR 21
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// hc_name =  ;
4988: LD_ADDR_OWVAR 26
4992: PUSH
4993: LD_STRING 
4995: ST_TO_ADDR
// hc_gallery =  ;
4996: LD_ADDR_OWVAR 33
5000: PUSH
5001: LD_STRING 
5003: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
5004: LD_INT 0
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: LD_INT 9
5012: PPUSH
5013: CALL_OW 380
// un = CreateHuman ;
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: CALL_OW 44
5026: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: LD_INT 0
5037: PPUSH
5038: CALL_OW 49
// AM_Sols = AM_Sols ^ un ;
5042: LD_ADDR_EXP 26
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: LD_VAR 0 3
5056: ADD
5057: ST_TO_ADDR
// end ;
5058: GO 4969
5060: POP
5061: POP
// for i = 1 to 4 do
5062: LD_ADDR_VAR 0 2
5066: PUSH
5067: DOUBLE
5068: LD_INT 1
5070: DEC
5071: ST_TO_ADDR
5072: LD_INT 4
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5166
// begin uc_side = 1 ;
5078: LD_ADDR_OWVAR 20
5082: PUSH
5083: LD_INT 1
5085: ST_TO_ADDR
// uc_nation = 1 ;
5086: LD_ADDR_OWVAR 21
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// hc_name =  ;
5094: LD_ADDR_OWVAR 26
5098: PUSH
5099: LD_STRING 
5101: ST_TO_ADDR
// hc_gallery =  ;
5102: LD_ADDR_OWVAR 33
5106: PUSH
5107: LD_STRING 
5109: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
5110: LD_INT 1
5112: PPUSH
5113: LD_INT 2
5115: PPUSH
5116: LD_INT 9
5118: PPUSH
5119: CALL_OW 380
// un = CreateHuman ;
5123: LD_ADDR_VAR 0 3
5127: PUSH
5128: CALL_OW 44
5132: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
5133: LD_VAR 0 3
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 0
5143: PPUSH
5144: CALL_OW 49
// AM_Engineers = AM_Engineers ^ un ;
5148: LD_ADDR_EXP 27
5152: PUSH
5153: LD_EXP 27
5157: PUSH
5158: LD_VAR 0 3
5162: ADD
5163: ST_TO_ADDR
// end ;
5164: GO 5075
5166: POP
5167: POP
// for i = 1 to 6 do
5168: LD_ADDR_VAR 0 2
5172: PUSH
5173: DOUBLE
5174: LD_INT 1
5176: DEC
5177: ST_TO_ADDR
5178: LD_INT 6
5180: PUSH
5181: FOR_TO
5182: IFFALSE 5272
// begin uc_side = 1 ;
5184: LD_ADDR_OWVAR 20
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// uc_nation = 1 ;
5192: LD_ADDR_OWVAR 21
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// hc_name =  ;
5200: LD_ADDR_OWVAR 26
5204: PUSH
5205: LD_STRING 
5207: ST_TO_ADDR
// hc_gallery =  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
5216: LD_INT 0
5218: PPUSH
5219: LD_INT 3
5221: PPUSH
5222: LD_INT 9
5224: PPUSH
5225: CALL_OW 380
// un = CreateHuman ;
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: CALL_OW 44
5238: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
5239: LD_VAR 0 3
5243: PPUSH
5244: LD_INT 2
5246: PPUSH
5247: LD_INT 0
5249: PPUSH
5250: CALL_OW 49
// AM_Mechs = AM_Mechs ^ un ;
5254: LD_ADDR_EXP 28
5258: PUSH
5259: LD_EXP 28
5263: PUSH
5264: LD_VAR 0 3
5268: ADD
5269: ST_TO_ADDR
// end ;
5270: GO 5181
5272: POP
5273: POP
// for i = 1 to 4 do
5274: LD_ADDR_VAR 0 2
5278: PUSH
5279: DOUBLE
5280: LD_INT 1
5282: DEC
5283: ST_TO_ADDR
5284: LD_INT 4
5286: PUSH
5287: FOR_TO
5288: IFFALSE 5378
// begin uc_side = 1 ;
5290: LD_ADDR_OWVAR 20
5294: PUSH
5295: LD_INT 1
5297: ST_TO_ADDR
// uc_nation = 1 ;
5298: LD_ADDR_OWVAR 21
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// hc_name =  ;
5306: LD_ADDR_OWVAR 26
5310: PUSH
5311: LD_STRING 
5313: ST_TO_ADDR
// hc_gallery =  ;
5314: LD_ADDR_OWVAR 33
5318: PUSH
5319: LD_STRING 
5321: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
5322: LD_INT 0
5324: PPUSH
5325: LD_INT 4
5327: PPUSH
5328: LD_INT 10
5330: PPUSH
5331: CALL_OW 380
// un = CreateHuman ;
5335: LD_ADDR_VAR 0 3
5339: PUSH
5340: CALL_OW 44
5344: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
5345: LD_VAR 0 3
5349: PPUSH
5350: LD_INT 4
5352: PPUSH
5353: LD_INT 0
5355: PPUSH
5356: CALL_OW 49
// AM_Scientists = AM_Scientists ^ un ;
5360: LD_ADDR_EXP 29
5364: PUSH
5365: LD_EXP 29
5369: PUSH
5370: LD_VAR 0 3
5374: ADD
5375: ST_TO_ADDR
// end ;
5376: GO 5287
5378: POP
5379: POP
// end ;
5380: LD_VAR 0 1
5384: RET
// export function Prepare_AMBase_LateVersion ; var i , un ; begin
5385: LD_INT 0
5387: PPUSH
5388: PPUSH
5389: PPUSH
// for i = 1 to 10 do
5390: LD_ADDR_VAR 0 2
5394: PUSH
5395: DOUBLE
5396: LD_INT 1
5398: DEC
5399: ST_TO_ADDR
5400: LD_INT 10
5402: PUSH
5403: FOR_TO
5404: IFFALSE 5509
// begin uc_side = 1 ;
5406: LD_ADDR_OWVAR 20
5410: PUSH
5411: LD_INT 1
5413: ST_TO_ADDR
// uc_nation = 1 ;
5414: LD_ADDR_OWVAR 21
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// hc_name =  ;
5422: LD_ADDR_OWVAR 26
5426: PUSH
5427: LD_STRING 
5429: ST_TO_ADDR
// hc_gallery =  ;
5430: LD_ADDR_OWVAR 33
5434: PUSH
5435: LD_STRING 
5437: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 9
5446: PPUSH
5447: CALL_OW 380
// un = CreateHuman ;
5451: LD_ADDR_VAR 0 3
5455: PUSH
5456: CALL_OW 44
5460: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
5461: LD_VAR 0 3
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: LD_INT 0
5471: PPUSH
5472: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5476: LD_VAR 0 3
5480: PPUSH
5481: LD_INT 121
5483: PPUSH
5484: LD_INT 163
5486: PPUSH
5487: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
5491: LD_ADDR_EXP 26
5495: PUSH
5496: LD_EXP 26
5500: PUSH
5501: LD_VAR 0 3
5505: ADD
5506: ST_TO_ADDR
// end ;
5507: GO 5403
5509: POP
5510: POP
// for i = 1 to 4 do
5511: LD_ADDR_VAR 0 2
5515: PUSH
5516: DOUBLE
5517: LD_INT 1
5519: DEC
5520: ST_TO_ADDR
5521: LD_INT 4
5523: PUSH
5524: FOR_TO
5525: IFFALSE 5630
// begin uc_side = 1 ;
5527: LD_ADDR_OWVAR 20
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// uc_nation = 1 ;
5535: LD_ADDR_OWVAR 21
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// hc_name =  ;
5543: LD_ADDR_OWVAR 26
5547: PUSH
5548: LD_STRING 
5550: ST_TO_ADDR
// hc_gallery =  ;
5551: LD_ADDR_OWVAR 33
5555: PUSH
5556: LD_STRING 
5558: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
5559: LD_INT 1
5561: PPUSH
5562: LD_INT 2
5564: PPUSH
5565: LD_INT 9
5567: PPUSH
5568: CALL_OW 380
// un = CreateHuman ;
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: CALL_OW 44
5581: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
5582: LD_VAR 0 3
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: LD_INT 0
5592: PPUSH
5593: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 121
5604: PPUSH
5605: LD_INT 163
5607: PPUSH
5608: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
5612: LD_ADDR_EXP 27
5616: PUSH
5617: LD_EXP 27
5621: PUSH
5622: LD_VAR 0 3
5626: ADD
5627: ST_TO_ADDR
// end ;
5628: GO 5524
5630: POP
5631: POP
// for i = 1 to 6 do
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: DOUBLE
5638: LD_INT 1
5640: DEC
5641: ST_TO_ADDR
5642: LD_INT 6
5644: PUSH
5645: FOR_TO
5646: IFFALSE 5751
// begin uc_side = 1 ;
5648: LD_ADDR_OWVAR 20
5652: PUSH
5653: LD_INT 1
5655: ST_TO_ADDR
// uc_nation = 1 ;
5656: LD_ADDR_OWVAR 21
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// hc_name =  ;
5664: LD_ADDR_OWVAR 26
5668: PUSH
5669: LD_STRING 
5671: ST_TO_ADDR
// hc_gallery =  ;
5672: LD_ADDR_OWVAR 33
5676: PUSH
5677: LD_STRING 
5679: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 3
5685: PPUSH
5686: LD_INT 9
5688: PPUSH
5689: CALL_OW 380
// un = CreateHuman ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: CALL_OW 44
5702: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
5703: LD_VAR 0 3
5707: PPUSH
5708: LD_INT 2
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5718: LD_VAR 0 3
5722: PPUSH
5723: LD_INT 121
5725: PPUSH
5726: LD_INT 163
5728: PPUSH
5729: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
5733: LD_ADDR_EXP 28
5737: PUSH
5738: LD_EXP 28
5742: PUSH
5743: LD_VAR 0 3
5747: ADD
5748: ST_TO_ADDR
// end ;
5749: GO 5645
5751: POP
5752: POP
// for i = 1 to 4 do
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: DOUBLE
5759: LD_INT 1
5761: DEC
5762: ST_TO_ADDR
5763: LD_INT 4
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5872
// begin uc_side = 1 ;
5769: LD_ADDR_OWVAR 20
5773: PUSH
5774: LD_INT 1
5776: ST_TO_ADDR
// uc_nation = 1 ;
5777: LD_ADDR_OWVAR 21
5781: PUSH
5782: LD_INT 1
5784: ST_TO_ADDR
// hc_name =  ;
5785: LD_ADDR_OWVAR 26
5789: PUSH
5790: LD_STRING 
5792: ST_TO_ADDR
// hc_gallery =  ;
5793: LD_ADDR_OWVAR 33
5797: PUSH
5798: LD_STRING 
5800: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
5801: LD_INT 0
5803: PPUSH
5804: LD_INT 4
5806: PPUSH
5807: LD_INT 5
5809: PPUSH
5810: CALL_OW 380
// un = CreateHuman ;
5814: LD_ADDR_VAR 0 3
5818: PUSH
5819: CALL_OW 44
5823: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
5824: LD_VAR 0 3
5828: PPUSH
5829: LD_INT 4
5831: PPUSH
5832: LD_INT 0
5834: PPUSH
5835: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5839: LD_VAR 0 3
5843: PPUSH
5844: LD_INT 121
5846: PPUSH
5847: LD_INT 163
5849: PPUSH
5850: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
5854: LD_ADDR_EXP 29
5858: PUSH
5859: LD_EXP 29
5863: PUSH
5864: LD_VAR 0 3
5868: ADD
5869: ST_TO_ADDR
// end ;
5870: GO 5766
5872: POP
5873: POP
// end ;
5874: LD_VAR 0 1
5878: RET
// export function AlliedReinforcement ; var RVeh1 , RVeh2 , RVeh3 , RVeh4 , RVeh5 ; begin
5879: LD_INT 0
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
// hc_name :=  ;
5887: LD_ADDR_OWVAR 26
5891: PUSH
5892: LD_STRING 
5894: ST_TO_ADDR
// hc_gallery :=  ;
5895: LD_ADDR_OWVAR 33
5899: PUSH
5900: LD_STRING 
5902: ST_TO_ADDR
// uc_side := 7 ;
5903: LD_ADDR_OWVAR 20
5907: PUSH
5908: LD_INT 7
5910: ST_TO_ADDR
// uc_nation := nation_american ;
5911: LD_ADDR_OWVAR 21
5915: PUSH
5916: LD_INT 1
5918: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
5919: LD_ADDR_OWVAR 37
5923: PUSH
5924: LD_INT 4
5926: ST_TO_ADDR
// vc_engine := engine_siberite ;
5927: LD_ADDR_OWVAR 39
5931: PUSH
5932: LD_INT 3
5934: ST_TO_ADDR
// vc_control := control_computer ;
5935: LD_ADDR_OWVAR 38
5939: PUSH
5940: LD_INT 3
5942: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
5943: LD_ADDR_OWVAR 40
5947: PUSH
5948: LD_INT 14
5950: ST_TO_ADDR
// RVeh1 := CreateVehicle ;
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: CALL_OW 45
5960: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
5961: LD_ADDR_OWVAR 37
5965: PUSH
5966: LD_INT 2
5968: ST_TO_ADDR
// vc_control := control_computer ;
5969: LD_ADDR_OWVAR 38
5973: PUSH
5974: LD_INT 3
5976: ST_TO_ADDR
// vc_weapon := us_crane ;
5977: LD_ADDR_OWVAR 40
5981: PUSH
5982: LD_INT 13
5984: ST_TO_ADDR
// RVeh2 := CreateVehicle ;
5985: LD_ADDR_VAR 0 3
5989: PUSH
5990: CALL_OW 45
5994: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
5995: LD_ADDR_OWVAR 40
5999: PUSH
6000: LD_INT 12
6002: ST_TO_ADDR
// RVeh3 := CreateVehicle ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: CALL_OW 45
6012: ST_TO_ADDR
// RVeh4 := CreateVehicle ;
6013: LD_ADDR_VAR 0 5
6017: PUSH
6018: CALL_OW 45
6022: ST_TO_ADDR
// RVeh5 := CreateVehicle ;
6023: LD_ADDR_VAR 0 6
6027: PUSH
6028: CALL_OW 45
6032: ST_TO_ADDR
// AddCargo ( RVeh3 , mat_cans , 100 ) ;
6033: LD_VAR 0 4
6037: PPUSH
6038: LD_INT 1
6040: PPUSH
6041: LD_INT 100
6043: PPUSH
6044: CALL_OW 291
// AddCargo ( RVeh4 , mat_cans , 100 ) ;
6048: LD_VAR 0 5
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: LD_INT 100
6058: PPUSH
6059: CALL_OW 291
// AddCargo ( RVeh5 , mat_cans , 100 ) ;
6063: LD_VAR 0 6
6067: PPUSH
6068: LD_INT 1
6070: PPUSH
6071: LD_INT 100
6073: PPUSH
6074: CALL_OW 291
// PlaceUnitXYR ( RVeh1 , 53 , 100 , 4 , false ) ;
6078: LD_VAR 0 2
6082: PPUSH
6083: LD_INT 53
6085: PPUSH
6086: LD_INT 100
6088: PPUSH
6089: LD_INT 4
6091: PPUSH
6092: LD_INT 0
6094: PPUSH
6095: CALL_OW 50
// PlaceUnitXYR ( RVeh2 , 52 , 97 , 4 , false ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: LD_INT 52
6106: PPUSH
6107: LD_INT 97
6109: PPUSH
6110: LD_INT 4
6112: PPUSH
6113: LD_INT 0
6115: PPUSH
6116: CALL_OW 50
// PlaceUnitXYR ( RVeh3 , 46 , 87 , 4 , false ) ;
6120: LD_VAR 0 4
6124: PPUSH
6125: LD_INT 46
6127: PPUSH
6128: LD_INT 87
6130: PPUSH
6131: LD_INT 4
6133: PPUSH
6134: LD_INT 0
6136: PPUSH
6137: CALL_OW 50
// PlaceUnitXYR ( RVeh4 , 54 , 95 , 4 , false ) ;
6141: LD_VAR 0 5
6145: PPUSH
6146: LD_INT 54
6148: PPUSH
6149: LD_INT 95
6151: PPUSH
6152: LD_INT 4
6154: PPUSH
6155: LD_INT 0
6157: PPUSH
6158: CALL_OW 50
// PlaceUnitXYR ( RVeh5 , 56 , 98 , 4 , false ) ;
6162: LD_VAR 0 6
6166: PPUSH
6167: LD_INT 56
6169: PPUSH
6170: LD_INT 98
6172: PPUSH
6173: LD_INT 4
6175: PPUSH
6176: LD_INT 0
6178: PPUSH
6179: CALL_OW 50
// end ;
6183: LD_VAR 0 1
6187: RET
// export function Garrison_Buildings ( side , nation , min_pers , max_pers , min_sols , max_sols , max_spec_class , lvl ) ; var i , j , buildings , un_count , sol_count , spec_count , un , filter ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// buildings := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
6199: LD_ADDR_VAR 0 12
6203: PUSH
6204: LD_INT 22
6206: PUSH
6207: LD_VAR 0 1
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 21
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PPUSH
6230: CALL_OW 69
6234: PUSH
6235: LD_INT 22
6237: PUSH
6238: LD_VAR 0 1
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 32
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: DIFF
6266: ST_TO_ADDR
// case nation of 1 :
6267: LD_VAR 0 2
6271: PUSH
6272: LD_INT 1
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6291
6280: POP
// uc_nation = nation_american ; 2 :
6281: LD_ADDR_OWVAR 21
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
6289: GO 6330
6291: LD_INT 2
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6299
6297: GO 6310
6299: POP
// uc_nation = nation_arabian ; 3 :
6300: LD_ADDR_OWVAR 21
6304: PUSH
6305: LD_INT 2
6307: ST_TO_ADDR
6308: GO 6330
6310: LD_INT 3
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// uc_nation = nation_russian ; end ;
6319: LD_ADDR_OWVAR 21
6323: PUSH
6324: LD_INT 3
6326: ST_TO_ADDR
6327: GO 6330
6329: POP
// for i = 1 to buildings do
6330: LD_ADDR_VAR 0 10
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_VAR 0 12
6344: PUSH
6345: FOR_TO
6346: IFFALSE 6925
// begin if IsInUnit ( buildings [ i ] ) = 0 then
6348: LD_VAR 0 12
6352: PUSH
6353: LD_VAR 0 10
6357: ARRAY
6358: PPUSH
6359: CALL_OW 310
6363: PUSH
6364: LD_INT 0
6366: EQUAL
6367: IFFALSE 6923
// begin uc_side = side ;
6369: LD_ADDR_OWVAR 20
6373: PUSH
6374: LD_VAR 0 1
6378: ST_TO_ADDR
// if GetBType ( buildings [ i ] ) = b_armoury or GetBType ( buildings [ i ] ) = b_barracks then
6379: LD_VAR 0 12
6383: PUSH
6384: LD_VAR 0 10
6388: ARRAY
6389: PPUSH
6390: CALL_OW 266
6394: PUSH
6395: LD_INT 4
6397: EQUAL
6398: PUSH
6399: LD_VAR 0 12
6403: PUSH
6404: LD_VAR 0 10
6408: ARRAY
6409: PPUSH
6410: CALL_OW 266
6414: PUSH
6415: LD_INT 5
6417: EQUAL
6418: OR
6419: IFFALSE 6673
// begin sol_count = Rand ( min_sols , max_sols ) ;
6421: LD_ADDR_VAR 0 14
6425: PUSH
6426: LD_VAR 0 5
6430: PPUSH
6431: LD_VAR 0 6
6435: PPUSH
6436: CALL_OW 12
6440: ST_TO_ADDR
// for j = 1 to sol_count do
6441: LD_ADDR_VAR 0 11
6445: PUSH
6446: DOUBLE
6447: LD_INT 1
6449: DEC
6450: ST_TO_ADDR
6451: LD_VAR 0 14
6455: PUSH
6456: FOR_TO
6457: IFFALSE 6503
// begin PrepareSoldier ( 0 , lvl ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_VAR 0 8
6466: PPUSH
6467: CALL_OW 381
// un = CreateHuman ;
6471: LD_ADDR_VAR 0 16
6475: PUSH
6476: CALL_OW 44
6480: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6481: LD_VAR 0 16
6485: PPUSH
6486: LD_VAR 0 12
6490: PUSH
6491: LD_VAR 0 10
6495: ARRAY
6496: PPUSH
6497: CALL_OW 52
// end ;
6501: GO 6456
6503: POP
6504: POP
// if GetBType ( buildings [ i ] ) = b_barracks then
6505: LD_VAR 0 12
6509: PUSH
6510: LD_VAR 0 10
6514: ARRAY
6515: PPUSH
6516: CALL_OW 266
6520: PUSH
6521: LD_INT 5
6523: EQUAL
6524: IFFALSE 6671
// begin spec_count = Rand ( 0 , max_spec_class ) ;
6526: LD_ADDR_VAR 0 15
6530: PUSH
6531: LD_INT 0
6533: PPUSH
6534: LD_VAR 0 7
6538: PPUSH
6539: CALL_OW 12
6543: ST_TO_ADDR
// for j = 1 to sol_count do
6544: LD_ADDR_VAR 0 11
6548: PUSH
6549: DOUBLE
6550: LD_INT 1
6552: DEC
6553: ST_TO_ADDR
6554: LD_VAR 0 14
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6669
// begin PrepareSoldier ( 0 , lvl ) ;
6562: LD_INT 0
6564: PPUSH
6565: LD_VAR 0 8
6569: PPUSH
6570: CALL_OW 381
// case nation of 1 :
6574: LD_VAR 0 2
6578: PUSH
6579: LD_INT 1
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6598
6587: POP
// hc_class = class_sniper ; 2 :
6588: LD_ADDR_OWVAR 28
6592: PUSH
6593: LD_INT 5
6595: ST_TO_ADDR
6596: GO 6637
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6617
6606: POP
// hc_class = class_mortar ; 3 :
6607: LD_ADDR_OWVAR 28
6611: PUSH
6612: LD_INT 8
6614: ST_TO_ADDR
6615: GO 6637
6617: LD_INT 3
6619: DOUBLE
6620: EQUAL
6621: IFTRUE 6625
6623: GO 6636
6625: POP
// hc_class = class_bazooker ; end ;
6626: LD_ADDR_OWVAR 28
6630: PUSH
6631: LD_INT 9
6633: ST_TO_ADDR
6634: GO 6637
6636: POP
// un = CreateHuman ;
6637: LD_ADDR_VAR 0 16
6641: PUSH
6642: CALL_OW 44
6646: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6647: LD_VAR 0 16
6651: PPUSH
6652: LD_VAR 0 12
6656: PUSH
6657: LD_VAR 0 10
6661: ARRAY
6662: PPUSH
6663: CALL_OW 52
// end ;
6667: GO 6559
6669: POP
6670: POP
// end ; end else
6671: GO 6693
// un_count = Rand ( min_pers , max_pers ) ;
6673: LD_ADDR_VAR 0 13
6677: PUSH
6678: LD_VAR 0 3
6682: PPUSH
6683: LD_VAR 0 4
6687: PPUSH
6688: CALL_OW 12
6692: ST_TO_ADDR
// for j = 1 to un_count do
6693: LD_ADDR_VAR 0 11
6697: PUSH
6698: DOUBLE
6699: LD_INT 1
6701: DEC
6702: ST_TO_ADDR
6703: LD_VAR 0 13
6707: PUSH
6708: FOR_TO
6709: IFFALSE 6921
// begin case GetBType ( buildings [ i ] ) of b_depot :
6711: LD_VAR 0 12
6715: PUSH
6716: LD_VAR 0 10
6720: ARRAY
6721: PPUSH
6722: CALL_OW 266
6726: PUSH
6727: LD_INT 0
6729: DOUBLE
6730: EQUAL
6731: IFTRUE 6735
6733: GO 6750
6735: POP
// PrepareEngineer ( 0 , lvl ) ; b_warehouse :
6736: LD_INT 0
6738: PPUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: CALL_OW 382
6748: GO 6889
6750: LD_INT 1
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6773
6758: POP
// PrepareEngineer ( 0 , lvl ) ; b_workshop :
6759: LD_INT 0
6761: PPUSH
6762: LD_VAR 0 8
6766: PPUSH
6767: CALL_OW 382
6771: GO 6889
6773: LD_INT 2
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6796
6781: POP
// PrepareMechanic ( 0 , lvl ) ; b_factory :
6782: LD_INT 0
6784: PPUSH
6785: LD_VAR 0 8
6789: PPUSH
6790: CALL_OW 383
6794: GO 6889
6796: LD_INT 3
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6819
6804: POP
// PrepareMechanic ( 0 , lvl ) ; b_lab :
6805: LD_INT 0
6807: PPUSH
6808: LD_VAR 0 8
6812: PPUSH
6813: CALL_OW 383
6817: GO 6889
6819: LD_INT 6
6821: DOUBLE
6822: EQUAL
6823: IFTRUE 6827
6825: GO 6842
6827: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_half :
6828: LD_INT 0
6830: PPUSH
6831: LD_VAR 0 8
6835: PPUSH
6836: CALL_OW 384
6840: GO 6889
6842: LD_INT 7
6844: DOUBLE
6845: EQUAL
6846: IFTRUE 6850
6848: GO 6865
6850: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_full :
6851: LD_INT 0
6853: PPUSH
6854: LD_VAR 0 8
6858: PPUSH
6859: CALL_OW 384
6863: GO 6889
6865: LD_INT 8
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 6888
6873: POP
// PrepareScientist ( 0 , lvl ) ; end ;
6874: LD_INT 0
6876: PPUSH
6877: LD_VAR 0 8
6881: PPUSH
6882: CALL_OW 384
6886: GO 6889
6888: POP
// un = CreateHuman ;
6889: LD_ADDR_VAR 0 16
6893: PUSH
6894: CALL_OW 44
6898: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6899: LD_VAR 0 16
6903: PPUSH
6904: LD_VAR 0 12
6908: PUSH
6909: LD_VAR 0 10
6913: ARRAY
6914: PPUSH
6915: CALL_OW 52
// end ;
6919: GO 6708
6921: POP
6922: POP
// end ; end ;
6923: GO 6345
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 9
6931: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// dir := GetDir ( b ) ;
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: CALL_OW 254
6950: ST_TO_ADDR
// if dir < 3 then
6951: LD_VAR 0 4
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6977
// dir := dir + 3 else
6961: LD_ADDR_VAR 0 4
6965: PUSH
6966: LD_VAR 0 4
6970: PUSH
6971: LD_INT 3
6973: PLUS
6974: ST_TO_ADDR
6975: GO 6991
// dir := dir - 3 ;
6977: LD_ADDR_VAR 0 4
6981: PUSH
6982: LD_VAR 0 4
6986: PUSH
6987: LD_INT 3
6989: MINUS
6990: ST_TO_ADDR
// SetDir ( un , dir ) ;
6991: LD_VAR 0 1
6995: PPUSH
6996: LD_VAR 0 4
7000: PPUSH
7001: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_VAR 0 2
7014: PPUSH
7015: CALL_OW 52
// end ;
7019: LD_VAR 0 3
7023: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
7024: LD_INT 0
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
7030: LD_ADDR_VAR 0 4
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_VAR 0 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 23
7049: PUSH
7050: LD_INT 3
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 30
7059: PUSH
7060: LD_INT 31
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 69
7076: ST_TO_ADDR
// for i = 1 to filter do
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_VAR 0 4
7091: PUSH
7092: FOR_TO
7093: IFFALSE 7188
// if IsInUnit ( filter [ i ] ) = 0 then
7095: LD_VAR 0 4
7099: PUSH
7100: LD_VAR 0 3
7104: ARRAY
7105: PPUSH
7106: CALL_OW 310
7110: PUSH
7111: LD_INT 0
7113: EQUAL
7114: IFFALSE 7186
// begin uc_nation = nation_russian ;
7116: LD_ADDR_OWVAR 21
7120: PUSH
7121: LD_INT 3
7123: ST_TO_ADDR
// uc_side = side ;
7124: LD_ADDR_OWVAR 20
7128: PUSH
7129: LD_VAR 0 1
7133: ST_TO_ADDR
// PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7134: LD_INT 1
7136: PPUSH
7137: LD_EXP 58
7141: PPUSH
7142: LD_EXP 59
7146: PPUSH
7147: CALL_OW 12
7151: PPUSH
7152: CALL_OW 381
// un := CreateHuman ;
7156: LD_ADDR_VAR 0 5
7160: PUSH
7161: CALL_OW 44
7165: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
7166: LD_VAR 0 5
7170: PPUSH
7171: LD_VAR 0 4
7175: PUSH
7176: LD_VAR 0 3
7180: ARRAY
7181: PPUSH
7182: CALL 6932 0 2
// end ;
7186: GO 7092
7188: POP
7189: POP
// end ;
7190: LD_VAR 0 2
7194: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
7195: LD_INT 0
7197: PPUSH
7198: PPUSH
7199: PPUSH
7200: PPUSH
// uc_side := side ;
7201: LD_ADDR_OWVAR 20
7205: PUSH
7206: LD_VAR 0 1
7210: ST_TO_ADDR
// uc_nation := 3 ;
7211: LD_ADDR_OWVAR 21
7215: PUSH
7216: LD_INT 3
7218: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
7219: LD_ADDR_VAR 0 3
7223: PUSH
7224: LD_INT 22
7226: PUSH
7227: LD_VAR 0 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 30
7238: PUSH
7239: LD_INT 32
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 58
7248: PUSH
7249: EMPTY
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: PUSH
7262: FOR_IN
7263: IFFALSE 7303
// begin PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7265: LD_INT 1
7267: PPUSH
7268: LD_EXP 58
7272: PPUSH
7273: LD_EXP 59
7277: PPUSH
7278: CALL_OW 12
7282: PPUSH
7283: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
7287: CALL_OW 44
7291: PPUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 52
// end ;
7301: GO 7262
7303: POP
7304: POP
// end ;
7305: LD_VAR 0 2
7309: RET
// export Botnicov_Sols ; export function Prepare_Escapees ; var i , un ; begin
7310: LD_INT 0
7312: PPUSH
7313: PPUSH
7314: PPUSH
// for i = 1 to 7 do
7315: LD_ADDR_VAR 0 2
7319: PUSH
7320: DOUBLE
7321: LD_INT 1
7323: DEC
7324: ST_TO_ADDR
7325: LD_INT 7
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7419
// begin uc_side = 5 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 5
7338: ST_TO_ADDR
// uc_nation = 3 ;
7339: LD_ADDR_OWVAR 21
7343: PUSH
7344: LD_INT 3
7346: ST_TO_ADDR
// hc_name =  ;
7347: LD_ADDR_OWVAR 26
7351: PUSH
7352: LD_STRING 
7354: ST_TO_ADDR
// hc_gallery =  ;
7355: LD_ADDR_OWVAR 33
7359: PUSH
7360: LD_STRING 
7362: ST_TO_ADDR
// PrepareHuman ( false , 1 , 8 ) ;
7363: LD_INT 0
7365: PPUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_INT 8
7371: PPUSH
7372: CALL_OW 380
// un = CreateHuman ;
7376: LD_ADDR_VAR 0 3
7380: PUSH
7381: CALL_OW 44
7385: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: LD_INT 8
7393: PPUSH
7394: LD_INT 0
7396: PPUSH
7397: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7401: LD_ADDR_EXP 30
7405: PUSH
7406: LD_EXP 30
7410: PUSH
7411: LD_VAR 0 3
7415: ADD
7416: ST_TO_ADDR
// end ;
7417: GO 7328
7419: POP
7420: POP
// for i = 1 to 2 do
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: DOUBLE
7427: LD_INT 1
7429: DEC
7430: ST_TO_ADDR
7431: LD_INT 2
7433: PUSH
7434: FOR_TO
7435: IFFALSE 7525
// begin uc_side = 5 ;
7437: LD_ADDR_OWVAR 20
7441: PUSH
7442: LD_INT 5
7444: ST_TO_ADDR
// uc_nation = 3 ;
7445: LD_ADDR_OWVAR 21
7449: PUSH
7450: LD_INT 3
7452: ST_TO_ADDR
// hc_name =  ;
7453: LD_ADDR_OWVAR 26
7457: PUSH
7458: LD_STRING 
7460: ST_TO_ADDR
// hc_gallery =  ;
7461: LD_ADDR_OWVAR 33
7465: PUSH
7466: LD_STRING 
7468: ST_TO_ADDR
// PrepareHuman ( false , 2 , 8 ) ;
7469: LD_INT 0
7471: PPUSH
7472: LD_INT 2
7474: PPUSH
7475: LD_INT 8
7477: PPUSH
7478: CALL_OW 380
// un = CreateHuman ;
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: CALL_OW 44
7491: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7492: LD_VAR 0 3
7496: PPUSH
7497: LD_INT 8
7499: PPUSH
7500: LD_INT 0
7502: PPUSH
7503: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7507: LD_ADDR_EXP 30
7511: PUSH
7512: LD_EXP 30
7516: PUSH
7517: LD_VAR 0 3
7521: ADD
7522: ST_TO_ADDR
// end ;
7523: GO 7434
7525: POP
7526: POP
// for i = 1 to 3 do
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: DOUBLE
7533: LD_INT 1
7535: DEC
7536: ST_TO_ADDR
7537: LD_INT 3
7539: PUSH
7540: FOR_TO
7541: IFFALSE 7631
// begin uc_side = 5 ;
7543: LD_ADDR_OWVAR 20
7547: PUSH
7548: LD_INT 5
7550: ST_TO_ADDR
// uc_nation = 3 ;
7551: LD_ADDR_OWVAR 21
7555: PUSH
7556: LD_INT 3
7558: ST_TO_ADDR
// hc_name =  ;
7559: LD_ADDR_OWVAR 26
7563: PUSH
7564: LD_STRING 
7566: ST_TO_ADDR
// hc_gallery =  ;
7567: LD_ADDR_OWVAR 33
7571: PUSH
7572: LD_STRING 
7574: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
7575: LD_INT 0
7577: PPUSH
7578: LD_INT 4
7580: PPUSH
7581: LD_INT 10
7583: PPUSH
7584: CALL_OW 380
// un = CreateHuman ;
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: CALL_OW 44
7597: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7598: LD_VAR 0 3
7602: PPUSH
7603: LD_INT 8
7605: PPUSH
7606: LD_INT 0
7608: PPUSH
7609: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7613: LD_ADDR_EXP 30
7617: PUSH
7618: LD_EXP 30
7622: PUSH
7623: LD_VAR 0 3
7627: ADD
7628: ST_TO_ADDR
// end ;
7629: GO 7540
7631: POP
7632: POP
// PlaceUnitArea ( Botnicov , BotnicovSoldiersSpawn , false ) ;
7633: LD_EXP 47
7637: PPUSH
7638: LD_INT 8
7640: PPUSH
7641: LD_INT 0
7643: PPUSH
7644: CALL_OW 49
// ComMoveXY ( Botnicov_Sols , 245 , 84 ) ;
7648: LD_EXP 30
7652: PPUSH
7653: LD_INT 245
7655: PPUSH
7656: LD_INT 84
7658: PPUSH
7659: CALL_OW 111
// ComMoveXY ( Botnicov , 245 , 84 ) ;
7663: LD_EXP 47
7667: PPUSH
7668: LD_INT 245
7670: PPUSH
7671: LD_INT 84
7673: PPUSH
7674: CALL_OW 111
// end ;
7678: LD_VAR 0 1
7682: RET
// export function Dialogue_Barnes_General ; var i ; begin
7683: LD_INT 0
7685: PPUSH
7686: PPUSH
// InGameOn ;
7687: CALL_OW 8
// CenterOnUnits ( Barnes ) ;
7691: LD_EXP 43
7695: PPUSH
7696: CALL_OW 85
// Wait ( 0 0$2 ) ;
7700: LD_INT 70
7702: PPUSH
7703: CALL_OW 67
// SayRadio ( General , D9b-Unknown-1 ) ;
7707: LD_EXP 50
7711: PPUSH
7712: LD_STRING D9b-Unknown-1
7714: PPUSH
7715: CALL_OW 94
// Say ( Barnes , D9b-Barnes-1 ) ;
7719: LD_EXP 43
7723: PPUSH
7724: LD_STRING D9b-Barnes-1
7726: PPUSH
7727: CALL_OW 88
// SayRadio ( General , D9b-Unknown-2 ) ;
7731: LD_EXP 50
7735: PPUSH
7736: LD_STRING D9b-Unknown-2
7738: PPUSH
7739: CALL_OW 94
// Say ( Barnes , D9b-Barnes-2 ) ;
7743: LD_EXP 43
7747: PPUSH
7748: LD_STRING D9b-Barnes-2
7750: PPUSH
7751: CALL_OW 88
// SayRadio ( General , D9b-Unknown-3 ) ;
7755: LD_EXP 50
7759: PPUSH
7760: LD_STRING D9b-Unknown-3
7762: PPUSH
7763: CALL_OW 94
// Say ( Barnes , D9b-Barnes-3 ) ;
7767: LD_EXP 43
7771: PPUSH
7772: LD_STRING D9b-Barnes-3
7774: PPUSH
7775: CALL_OW 88
// SayRadio ( General , D9b-Unknown-4 ) ;
7779: LD_EXP 50
7783: PPUSH
7784: LD_STRING D9b-Unknown-4
7786: PPUSH
7787: CALL_OW 94
// Say ( Barnes , D9b-Barnes-4 ) ;
7791: LD_EXP 43
7795: PPUSH
7796: LD_STRING D9b-Barnes-4
7798: PPUSH
7799: CALL_OW 88
// SayRadio ( General , D9b-Unknown-5 ) ;
7803: LD_EXP 50
7807: PPUSH
7808: LD_STRING D9b-Unknown-5
7810: PPUSH
7811: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5 ) ;
7815: LD_EXP 43
7819: PPUSH
7820: LD_STRING D9b-Barnes-5
7822: PPUSH
7823: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6 ) ;
7827: LD_EXP 50
7831: PPUSH
7832: LD_STRING D9b-Unknown-6
7834: PPUSH
7835: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5a ) ;
7839: LD_EXP 43
7843: PPUSH
7844: LD_STRING D9b-Barnes-5a
7846: PPUSH
7847: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6a ) ;
7851: LD_EXP 50
7855: PPUSH
7856: LD_STRING D9b-Unknown-6a
7858: PPUSH
7859: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5b ) ;
7863: LD_EXP 43
7867: PPUSH
7868: LD_STRING D9b-Barnes-5b
7870: PPUSH
7871: CALL_OW 88
// SayRadio ( General , D9b-Unknown-7 ) ;
7875: LD_EXP 50
7879: PPUSH
7880: LD_STRING D9b-Unknown-7
7882: PPUSH
7883: CALL_OW 94
// Say ( Barnes , D9b-Barnes-6 ) ;
7887: LD_EXP 43
7891: PPUSH
7892: LD_STRING D9b-Barnes-6
7894: PPUSH
7895: CALL_OW 88
// Say ( Barnes , D9b-Barnes-7 ) ;
7899: LD_EXP 43
7903: PPUSH
7904: LD_STRING D9b-Barnes-7
7906: PPUSH
7907: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 50 , 95 ) ;
7911: LD_INT 22
7913: PUSH
7914: LD_INT 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PPUSH
7921: CALL_OW 69
7925: PPUSH
7926: LD_INT 50
7928: PPUSH
7929: LD_INT 95
7931: PPUSH
7932: CALL_OW 111
// DWait ( 0 0$5 ) ;
7936: LD_INT 175
7938: PPUSH
7939: CALL_OW 68
// CenterOnXY ( 264 , 105 ) ;
7943: LD_INT 264
7945: PPUSH
7946: LD_INT 105
7948: PPUSH
7949: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
7953: LD_ADDR_VAR 0 2
7957: PUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PPUSH
7982: CALL_OW 69
7986: PUSH
7987: FOR_IN
7988: IFFALSE 8001
// RemoveUnit ( i ) ;
7990: LD_VAR 0 2
7994: PPUSH
7995: CALL_OW 64
7999: GO 7987
8001: POP
8002: POP
// Say ( Simone , D9b-Simone-1 ) ;
8003: LD_EXP 36
8007: PPUSH
8008: LD_STRING D9b-Simone-1
8010: PPUSH
8011: CALL_OW 88
// DWait ( 0 0$2 ) ;
8015: LD_INT 70
8017: PPUSH
8018: CALL_OW 68
// Say ( Simone , D9b-Simone-2 ) ;
8022: LD_EXP 36
8026: PPUSH
8027: LD_STRING D9b-Simone-2
8029: PPUSH
8030: CALL_OW 88
// DWait ( 0 0$2 ) ;
8034: LD_INT 70
8036: PPUSH
8037: CALL_OW 68
// Say ( Miller , D9b-Miller-1 ) ;
8041: LD_EXP 37
8045: PPUSH
8046: LD_STRING D9b-Miller-1
8048: PPUSH
8049: CALL_OW 88
// Say ( Simone , D9b-Simone-3 ) ;
8053: LD_EXP 36
8057: PPUSH
8058: LD_STRING D9b-Simone-3
8060: PPUSH
8061: CALL_OW 88
// DWait ( 0 0$1 ) ;
8065: LD_INT 35
8067: PPUSH
8068: CALL_OW 68
// InGameOff ;
8072: CALL_OW 9
// Say ( Simone , D10-Simone-1 ) ;
8076: LD_EXP 36
8080: PPUSH
8081: LD_STRING D10-Simone-1
8083: PPUSH
8084: CALL_OW 88
// Say ( Miller , D10-Miller-1 ) ;
8088: LD_EXP 37
8092: PPUSH
8093: LD_STRING D10-Miller-1
8095: PPUSH
8096: CALL_OW 88
// Say ( Miller , D10-Miller-2 ) ;
8100: LD_EXP 37
8104: PPUSH
8105: LD_STRING D10-Miller-2
8107: PPUSH
8108: CALL_OW 88
// Say ( Simone , D10-Simone-2 ) ;
8112: LD_EXP 36
8116: PPUSH
8117: LD_STRING D10-Simone-2
8119: PPUSH
8120: CALL_OW 88
// Say ( Miller , D10-Miller-3 ) ;
8124: LD_EXP 37
8128: PPUSH
8129: LD_STRING D10-Miller-3
8131: PPUSH
8132: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8136: LD_STRING M3
8138: PPUSH
8139: CALL_OW 337
// end ;
8143: LD_VAR 0 1
8147: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
8148: LD_INT 0
8150: PPUSH
// if not unit then
8151: LD_VAR 0 1
8155: NOT
8156: IFFALSE 8160
// exit ;
8158: GO 8194
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
8160: LD_VAR 0 1
8164: PPUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_VAR 0 3
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_VAR 0 1
8183: PPUSH
8184: CALL_OW 258
8188: ARRAY
8189: PPUSH
8190: CALL_OW 88
// end ;
8194: LD_VAR 0 4
8198: RET
// export function Prepare_RU2 ; var i , un ; begin
8199: LD_INT 0
8201: PPUSH
8202: PPUSH
8203: PPUSH
// uc_side = 6 ;
8204: LD_ADDR_OWVAR 20
8208: PUSH
8209: LD_INT 6
8211: ST_TO_ADDR
// uc_nation = 3 ;
8212: LD_ADDR_OWVAR 21
8216: PUSH
8217: LD_INT 3
8219: ST_TO_ADDR
// for i = 1 to 24 do
8220: LD_ADDR_VAR 0 2
8224: PUSH
8225: DOUBLE
8226: LD_INT 1
8228: DEC
8229: ST_TO_ADDR
8230: LD_INT 24
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8335
// begin uc_side = 6 ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_INT 6
8243: ST_TO_ADDR
// uc_nation = 3 ;
8244: LD_ADDR_OWVAR 21
8248: PUSH
8249: LD_INT 3
8251: ST_TO_ADDR
// hc_gallery =  ;
8252: LD_ADDR_OWVAR 33
8256: PUSH
8257: LD_STRING 
8259: ST_TO_ADDR
// hc_name =  ;
8260: LD_ADDR_OWVAR 26
8264: PUSH
8265: LD_STRING 
8267: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8268: LD_INT 0
8270: PPUSH
8271: LD_INT 1
8273: PPUSH
8274: LD_EXP 58
8278: PPUSH
8279: LD_EXP 59
8283: PPUSH
8284: CALL_OW 12
8288: PPUSH
8289: CALL_OW 380
// un = CreateHuman ;
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: CALL_OW 44
8302: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8303: LD_VAR 0 3
8307: PPUSH
8308: LD_INT 13
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 49
// ComAgressiveMove ( un , 88 , 81 ) ;
8318: LD_VAR 0 3
8322: PPUSH
8323: LD_INT 88
8325: PPUSH
8326: LD_INT 81
8328: PPUSH
8329: CALL_OW 114
// end ;
8333: GO 8233
8335: POP
8336: POP
// for i = 1 to 8 do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: DOUBLE
8343: LD_INT 1
8345: DEC
8346: ST_TO_ADDR
8347: LD_INT 8
8349: PUSH
8350: FOR_TO
8351: IFFALSE 8437
// begin uc_side = 6 ;
8353: LD_ADDR_OWVAR 20
8357: PUSH
8358: LD_INT 6
8360: ST_TO_ADDR
// uc_nation = 3 ;
8361: LD_ADDR_OWVAR 21
8365: PUSH
8366: LD_INT 3
8368: ST_TO_ADDR
// hc_gallery =  ;
8369: LD_ADDR_OWVAR 33
8373: PUSH
8374: LD_STRING 
8376: ST_TO_ADDR
// hc_name =  ;
8377: LD_ADDR_OWVAR 26
8381: PUSH
8382: LD_STRING 
8384: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8385: LD_INT 0
8387: PPUSH
8388: LD_INT 2
8390: PPUSH
8391: LD_EXP 58
8395: PPUSH
8396: LD_EXP 59
8400: PPUSH
8401: CALL_OW 12
8405: PPUSH
8406: CALL_OW 380
// un = CreateHuman ;
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: CALL_OW 44
8419: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8420: LD_VAR 0 3
8424: PPUSH
8425: LD_INT 13
8427: PPUSH
8428: LD_INT 0
8430: PPUSH
8431: CALL_OW 49
// end ;
8435: GO 8350
8437: POP
8438: POP
// for i = 1 to 6 do
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: DOUBLE
8445: LD_INT 1
8447: DEC
8448: ST_TO_ADDR
8449: LD_INT 6
8451: PUSH
8452: FOR_TO
8453: IFFALSE 8539
// begin uc_side = 6 ;
8455: LD_ADDR_OWVAR 20
8459: PUSH
8460: LD_INT 6
8462: ST_TO_ADDR
// uc_nation = 3 ;
8463: LD_ADDR_OWVAR 21
8467: PUSH
8468: LD_INT 3
8470: ST_TO_ADDR
// hc_gallery =  ;
8471: LD_ADDR_OWVAR 33
8475: PUSH
8476: LD_STRING 
8478: ST_TO_ADDR
// hc_name =  ;
8479: LD_ADDR_OWVAR 26
8483: PUSH
8484: LD_STRING 
8486: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8487: LD_INT 0
8489: PPUSH
8490: LD_INT 3
8492: PPUSH
8493: LD_EXP 58
8497: PPUSH
8498: LD_EXP 59
8502: PPUSH
8503: CALL_OW 12
8507: PPUSH
8508: CALL_OW 380
// un = CreateHuman ;
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: CALL_OW 44
8521: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8522: LD_VAR 0 3
8526: PPUSH
8527: LD_INT 13
8529: PPUSH
8530: LD_INT 0
8532: PPUSH
8533: CALL_OW 49
// end ;
8537: GO 8452
8539: POP
8540: POP
// for i = 1 to 6 do
8541: LD_ADDR_VAR 0 2
8545: PUSH
8546: DOUBLE
8547: LD_INT 1
8549: DEC
8550: ST_TO_ADDR
8551: LD_INT 6
8553: PUSH
8554: FOR_TO
8555: IFFALSE 8641
// begin uc_side = 6 ;
8557: LD_ADDR_OWVAR 20
8561: PUSH
8562: LD_INT 6
8564: ST_TO_ADDR
// uc_nation = 3 ;
8565: LD_ADDR_OWVAR 21
8569: PUSH
8570: LD_INT 3
8572: ST_TO_ADDR
// hc_gallery =  ;
8573: LD_ADDR_OWVAR 33
8577: PUSH
8578: LD_STRING 
8580: ST_TO_ADDR
// hc_name =  ;
8581: LD_ADDR_OWVAR 26
8585: PUSH
8586: LD_STRING 
8588: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8589: LD_INT 0
8591: PPUSH
8592: LD_INT 4
8594: PPUSH
8595: LD_EXP 58
8599: PPUSH
8600: LD_EXP 59
8604: PPUSH
8605: CALL_OW 12
8609: PPUSH
8610: CALL_OW 380
// un = CreateHuman ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: CALL_OW 44
8623: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8624: LD_VAR 0 3
8628: PPUSH
8629: LD_INT 13
8631: PPUSH
8632: LD_INT 0
8634: PPUSH
8635: CALL_OW 49
// end ;
8639: GO 8554
8641: POP
8642: POP
// mc_bases := Replace ( mc_bases , 2 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
8643: LD_ADDR_EXP 69
8647: PUSH
8648: LD_EXP 69
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: LD_INT 22
8658: PUSH
8659: LD_INT 6
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 21
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: PPUSH
8685: CALL_OW 1
8689: ST_TO_ADDR
// MC_Start ;
8690: CALL 61754 0 0
// end ; end_of_file
8694: LD_VAR 0 1
8698: RET
// on UnitDestroyed ( un ) do begin if un = Simone then
8699: LD_VAR 0 1
8703: PUSH
8704: LD_EXP 36
8708: EQUAL
8709: IFFALSE 8737
// begin ExclusiveOn ;
8711: CALL_OW 4
// Wait ( 0 0$2 ) ;
8715: LD_INT 70
8717: PPUSH
8718: CALL_OW 67
// YouLost ( Simone ) ;
8722: LD_STRING Simone
8724: PPUSH
8725: CALL_OW 104
// ExclusiveOff ;
8729: CALL_OW 5
// exit ;
8733: GO 8958
// end else
8735: GO 8949
// if un = Miller then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_EXP 37
8746: EQUAL
8747: IFFALSE 8775
// begin ExclusiveOn ;
8749: CALL_OW 4
// Wait ( 0 0$2 ) ;
8753: LD_INT 70
8755: PPUSH
8756: CALL_OW 67
// YouLost ( Miller ) ;
8760: LD_STRING Miller
8762: PPUSH
8763: CALL_OW 104
// ExclusiveOff ;
8767: CALL_OW 5
// exit ;
8771: GO 8958
// end else
8773: GO 8949
// if un = Esther then
8775: LD_VAR 0 1
8779: PUSH
8780: LD_EXP 38
8784: EQUAL
8785: IFFALSE 8813
// begin ExclusiveOn ;
8787: CALL_OW 4
// Wait ( 0 0$2 ) ;
8791: LD_INT 70
8793: PPUSH
8794: CALL_OW 67
// YouLost ( Esther ) ;
8798: LD_STRING Esther
8800: PPUSH
8801: CALL_OW 104
// ExclusiveOff ;
8805: CALL_OW 5
// exit ;
8809: GO 8958
// end else
8811: GO 8949
// if un = Bradford and not BradfordAssault then
8813: LD_VAR 0 1
8817: PUSH
8818: LD_EXP 42
8822: EQUAL
8823: PUSH
8824: LD_EXP 2
8828: NOT
8829: AND
8830: IFFALSE 8858
// begin ExclusiveOn ;
8832: CALL_OW 4
// Wait ( 0 0$2 ) ;
8836: LD_INT 70
8838: PPUSH
8839: CALL_OW 67
// YouLost ( Bradford ) ;
8843: LD_STRING Bradford
8845: PPUSH
8846: CALL_OW 104
// ExclusiveOff ;
8850: CALL_OW 5
// exit ;
8854: GO 8958
// end else
8856: GO 8949
// if un = Barnes then
8858: LD_VAR 0 1
8862: PUSH
8863: LD_EXP 43
8867: EQUAL
8868: IFFALSE 8896
// begin ExclusiveOn ;
8870: CALL_OW 4
// Wait ( 0 0$2 ) ;
8874: LD_INT 70
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Barnes ) ;
8881: LD_STRING Barnes
8883: PPUSH
8884: CALL_OW 104
// ExclusiveOff ;
8888: CALL_OW 5
// exit ;
8892: GO 8958
// end else
8894: GO 8949
// if un = RU_Courier then
8896: LD_VAR 0 1
8900: PUSH
8901: LD_EXP 13
8905: EQUAL
8906: IFFALSE 8930
// begin RU_Courier_Dead := true ;
8908: LD_ADDR_EXP 17
8912: PUSH
8913: LD_INT 1
8915: ST_TO_ADDR
// Say ( Miller , D8b-Miller-1 ) ;
8916: LD_EXP 37
8920: PPUSH
8921: LD_STRING D8b-Miller-1
8923: PPUSH
8924: CALL_OW 88
// end else
8928: GO 8949
// if un = Dvalishvili then
8930: LD_VAR 0 1
8934: PUSH
8935: LD_EXP 46
8939: EQUAL
8940: IFFALSE 8949
// begin ChangeMissionObjectives ( M3b ) ;
8942: LD_STRING M3b
8944: PPUSH
8945: CALL_OW 337
// end ; MCE_UnitDestroyed ( un ) ;
8949: LD_VAR 0 1
8953: PPUSH
8954: CALL 79680 0 1
// end ;
8958: PPOPN 1
8960: END
// on UnitGoesToRed ( un ) do begin if un = Bradford then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_EXP 42
8970: EQUAL
8971: IFFALSE 8997
// begin DoNotAttack ( 3 , Bradford ) ;
8973: LD_INT 3
8975: PPUSH
8976: LD_EXP 42
8980: PPUSH
8981: CALL_OW 471
// ForceSay ( Bradford , D5a-Bradford-3 ) ;
8985: LD_EXP 42
8989: PPUSH
8990: LD_STRING D5a-Bradford-3
8992: PPUSH
8993: CALL_OW 91
// end ; if un = Richford then
8997: LD_VAR 0 1
9001: PUSH
9002: LD_EXP 49
9006: EQUAL
9007: IFFALSE 9033
// begin DoNotAttack ( 3 , Richford ) ;
9009: LD_INT 3
9011: PPUSH
9012: LD_EXP 49
9016: PPUSH
9017: CALL_OW 471
// ForceSay ( Richford , D5a-Richford-2 ) ;
9021: LD_EXP 49
9025: PPUSH
9026: LD_STRING D5a-Richford-2
9028: PPUSH
9029: CALL_OW 91
// end ; if un = CourierVeh then
9033: LD_VAR 0 1
9037: PUSH
9038: LD_EXP 12
9042: EQUAL
9043: IFFALSE 9060
// begin ComMoveXY ( RU_Courier , 123 , 3 ) ;
9045: LD_EXP 13
9049: PPUSH
9050: LD_INT 123
9052: PPUSH
9053: LD_INT 3
9055: PPUSH
9056: CALL_OW 111
// end ; if un = Sidorovich then
9060: LD_VAR 0 1
9064: PUSH
9065: LD_EXP 44
9069: EQUAL
9070: IFFALSE 9096
// begin ForceSay ( Sidorovich , D9a-Sidor-1 ) ;
9072: LD_EXP 44
9076: PPUSH
9077: LD_STRING D9a-Sidor-1
9079: PPUSH
9080: CALL_OW 91
// Say ( Simone , D9a-Simone-1 ) ;
9084: LD_EXP 36
9088: PPUSH
9089: LD_STRING D9a-Simone-1
9091: PPUSH
9092: CALL_OW 88
// end ; if un = Dvalishvili then
9096: LD_VAR 0 1
9100: PUSH
9101: LD_EXP 46
9105: EQUAL
9106: IFFALSE 9128
// begin DialogueOn ;
9108: CALL_OW 6
// Say ( Dvalishvili , D11a-Dvali-1 ) ;
9112: LD_EXP 46
9116: PPUSH
9117: LD_STRING D11a-Dvali-1
9119: PPUSH
9120: CALL_OW 88
// DialogueOff ;
9124: CALL_OW 7
// end ; if un = ustinov1 and not Ustinov1Captured then
9128: LD_VAR 0 1
9132: PUSH
9133: LD_INT 2
9135: EQUAL
9136: PUSH
9137: LD_EXP 31
9141: NOT
9142: AND
9143: IFFALSE 9173
// begin Ustinov1Captured := true ;
9145: LD_ADDR_EXP 31
9149: PUSH
9150: LD_INT 1
9152: ST_TO_ADDR
// SetSide ( ustinov1 , 7 ) ;
9153: LD_INT 2
9155: PPUSH
9156: LD_INT 7
9158: PPUSH
9159: CALL_OW 235
// SetLives ( ustinov1 , 400 ) ;
9163: LD_INT 2
9165: PPUSH
9166: LD_INT 400
9168: PPUSH
9169: CALL_OW 234
// end ; if un = ustinov2 and not Ustinov2Captured then
9173: LD_VAR 0 1
9177: PUSH
9178: LD_INT 3
9180: EQUAL
9181: PUSH
9182: LD_EXP 32
9186: NOT
9187: AND
9188: IFFALSE 9230
// begin Ustinov2Captured := true ;
9190: LD_ADDR_EXP 32
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// SetSide ( ustinov2 , 7 ) ;
9198: LD_INT 3
9200: PPUSH
9201: LD_INT 7
9203: PPUSH
9204: CALL_OW 235
// SetLives ( ustinov2 , 400 ) ;
9208: LD_INT 3
9210: PPUSH
9211: LD_INT 400
9213: PPUSH
9214: CALL_OW 234
// Say ( Sidorovich , D9-Sidor-1 ) ;
9218: LD_EXP 44
9222: PPUSH
9223: LD_STRING D9-Sidor-1
9225: PPUSH
9226: CALL_OW 88
// end ; end ;
9230: PPOPN 1
9232: END
// export Ustinov1Captured , Ustinov2Captured ; on Contact ( s1 , s2 ) do begin if ( s1 = 7 and s2 = 5 ) or ( s2 = 5 and s1 = 7 ) then
9233: LD_VAR 0 1
9237: PUSH
9238: LD_INT 7
9240: EQUAL
9241: PUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_INT 5
9249: EQUAL
9250: AND
9251: PUSH
9252: LD_VAR 0 2
9256: PUSH
9257: LD_INT 5
9259: EQUAL
9260: PUSH
9261: LD_VAR 0 1
9265: PUSH
9266: LD_INT 7
9268: EQUAL
9269: AND
9270: OR
9271: IFFALSE 9347
// begin Say ( Botnicov , 9a-Botnicov-1a ) ;
9273: LD_EXP 47
9277: PPUSH
9278: LD_STRING 9a-Botnicov-1a
9280: PPUSH
9281: CALL_OW 88
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
9285: LD_INT 5
9287: PPUSH
9288: LD_INT 7
9290: PPUSH
9291: LD_INT 2
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 80
// BotnicovSpared := false ;
9301: LD_ADDR_EXP 20
9305: PUSH
9306: LD_INT 0
9308: ST_TO_ADDR
// BotnicovAntagonized := true ;
9309: LD_ADDR_EXP 21
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
9317: LD_EXP 30
9321: PPUSH
9322: LD_INT 257
9324: PPUSH
9325: LD_INT 108
9327: PPUSH
9328: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
9332: LD_EXP 47
9336: PPUSH
9337: LD_INT 257
9339: PPUSH
9340: LD_INT 108
9342: PPUSH
9343: CALL_OW 114
// end ; if ( s1 = 7 and s2 = 1 ) or ( s2 = 1 and s1 = 7 ) then
9347: LD_VAR 0 1
9351: PUSH
9352: LD_INT 7
9354: EQUAL
9355: PUSH
9356: LD_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: EQUAL
9364: AND
9365: PUSH
9366: LD_VAR 0 2
9370: PUSH
9371: LD_INT 1
9373: EQUAL
9374: PUSH
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 7
9382: EQUAL
9383: AND
9384: OR
9385: IFFALSE 9424
// begin if IsOK ( Bradford ) then
9387: LD_EXP 42
9391: PPUSH
9392: CALL_OW 302
9396: IFFALSE 9412
// Say ( Bradford , DFriendlyFire-Bradford-1 ) else
9398: LD_EXP 42
9402: PPUSH
9403: LD_STRING DFriendlyFire-Bradford-1
9405: PPUSH
9406: CALL_OW 88
9410: GO 9424
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
9412: LD_EXP 43
9416: PPUSH
9417: LD_STRING DFriendlyFire-Barnes-1
9419: PPUSH
9420: CALL_OW 88
// end ; end ;
9424: PPOPN 2
9426: END
// export AMLab , AMFactoryExt ; on BuildingComplete ( building ) do var AM_Breastworks ;
9427: LD_INT 0
9429: PPUSH
// begin if GetSide ( building ) = 7 and GetBType ( building ) = b_depot and not Base_DepotBuilt then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 255
9439: PUSH
9440: LD_INT 7
9442: EQUAL
9443: PUSH
9444: LD_VAR 0 1
9448: PPUSH
9449: CALL_OW 266
9453: PUSH
9454: LD_INT 0
9456: EQUAL
9457: AND
9458: PUSH
9459: LD_EXP 7
9463: NOT
9464: AND
9465: IFFALSE 9475
// Base_DepotBuilt := true ;
9467: LD_ADDR_EXP 7
9471: PUSH
9472: LD_INT 1
9474: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_workshop and not Base_WorkshopBuilt then
9475: LD_VAR 0 1
9479: PPUSH
9480: CALL_OW 255
9484: PUSH
9485: LD_INT 7
9487: EQUAL
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: CALL_OW 266
9498: PUSH
9499: LD_INT 2
9501: EQUAL
9502: AND
9503: PUSH
9504: LD_EXP 8
9508: NOT
9509: AND
9510: IFFALSE 9520
// Base_WorkshopBuilt := true ;
9512: LD_ADDR_EXP 8
9516: PUSH
9517: LD_INT 1
9519: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_lab and not Base_LabBuilt then
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL_OW 255
9529: PUSH
9530: LD_INT 7
9532: EQUAL
9533: PUSH
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 266
9543: PUSH
9544: LD_INT 6
9546: EQUAL
9547: AND
9548: PUSH
9549: LD_EXP 9
9553: NOT
9554: AND
9555: IFFALSE 9565
// Base_LabBuilt := true ;
9557: LD_ADDR_EXP 9
9561: PUSH
9562: LD_INT 1
9564: ST_TO_ADDR
// if GetBType ( building ) = b_lab and GetSide ( building ) = 1 then
9565: LD_VAR 0 1
9569: PPUSH
9570: CALL_OW 266
9574: PUSH
9575: LD_INT 6
9577: EQUAL
9578: PUSH
9579: LD_VAR 0 1
9583: PPUSH
9584: CALL_OW 255
9588: PUSH
9589: LD_INT 1
9591: EQUAL
9592: AND
9593: IFFALSE 9825
// begin AMLab := building ;
9595: LD_ADDR_EXP 33
9599: PUSH
9600: LD_VAR 0 1
9604: ST_TO_ADDR
// ComMoveXY ( AM_Scientists [ 1 ] , 65 , 71 ) ;
9605: LD_EXP 29
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: LD_INT 65
9616: PPUSH
9617: LD_INT 71
9619: PPUSH
9620: CALL_OW 111
// ComMoveXY ( AM_Scientists [ 2 ] , 103 , 95 ) ;
9624: LD_EXP 29
9628: PUSH
9629: LD_INT 2
9631: ARRAY
9632: PPUSH
9633: LD_INT 103
9635: PPUSH
9636: LD_INT 95
9638: PPUSH
9639: CALL_OW 111
// AddComEnterUnit ( AM_Scientists , building ) ;
9643: LD_EXP 29
9647: PPUSH
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 180
// ComResearch ( building , tech_Tech1 ) ;
9657: LD_VAR 0 1
9661: PPUSH
9662: LD_INT 48
9664: PPUSH
9665: CALL_OW 124
// AddComResearch ( building , tech_Tech2 ) ;
9669: LD_VAR 0 1
9673: PPUSH
9674: LD_INT 49
9676: PPUSH
9677: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_weapon ) ;
9681: LD_VAR 0 1
9685: PPUSH
9686: LD_INT 10
9688: PPUSH
9689: CALL_OW 207
// AddComResearch ( building , tech_AdvMet ) ;
9693: LD_VAR 0 1
9697: PPUSH
9698: LD_INT 34
9700: PPUSH
9701: CALL_OW 184
// AddComResearch ( building , tech_Rocket ) ;
9705: LD_VAR 0 1
9709: PPUSH
9710: LD_INT 40
9712: PPUSH
9713: CALL_OW 184
// AddComResearch ( building , tech_Weap1 ) ;
9717: LD_VAR 0 1
9721: PPUSH
9722: LD_INT 51
9724: PPUSH
9725: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_computer ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_INT 12
9736: PPUSH
9737: CALL_OW 207
// AddComResearch ( building , tech_AdvAI ) ;
9741: LD_VAR 0 1
9745: PPUSH
9746: LD_INT 27
9748: PPUSH
9749: CALL_OW 184
// AddComResearch ( building , tech_Comp1 ) ;
9753: LD_VAR 0 1
9757: PPUSH
9758: LD_INT 57
9760: PPUSH
9761: CALL_OW 184
// AddComResearch ( building , tech_Weap2 ) ;
9765: LD_VAR 0 1
9769: PPUSH
9770: LD_INT 52
9772: PPUSH
9773: CALL_OW 184
// AddComResearch ( building , tech_Comp2 ) ;
9777: LD_VAR 0 1
9781: PPUSH
9782: LD_INT 58
9784: PPUSH
9785: CALL_OW 184
// AddComResearch ( building , tech_Tech3 ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_INT 50
9796: PPUSH
9797: CALL_OW 184
// AddComResearch ( building , tech_Weap3 ) ;
9801: LD_VAR 0 1
9805: PPUSH
9806: LD_INT 53
9808: PPUSH
9809: CALL_OW 184
// AddComResearch ( building , tech_Comp3 ) ;
9813: LD_VAR 0 1
9817: PPUSH
9818: LD_INT 59
9820: PPUSH
9821: CALL_OW 184
// end ; if GetBType ( building ) = b_workshop and GetSide ( building ) = 1 then
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 266
9834: PUSH
9835: LD_INT 2
9837: EQUAL
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: CALL_OW 255
9848: PUSH
9849: LD_INT 1
9851: EQUAL
9852: AND
9853: IFFALSE 9906
// begin AM_Factory := building ;
9855: LD_ADDR_EXP 67
9859: PUSH
9860: LD_VAR 0 1
9864: ST_TO_ADDR
// AddComEnterUnit ( AM_Mechs , building ) ;
9865: LD_EXP 28
9869: PPUSH
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 180
// Wait ( 0 0$20 ) ;
9879: LD_INT 700
9881: PPUSH
9882: CALL_OW 67
// ComUpgrade ( building ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 146
// Wait ( 5 5$00 ) ;
9895: LD_INT 10500
9897: PPUSH
9898: CALL_OW 67
// Construct_Vehicles ;
9902: CALL 16427 0 0
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 1 then
9906: LD_VAR 0 1
9910: PPUSH
9911: CALL_OW 266
9915: PUSH
9916: LD_INT 4
9918: EQUAL
9919: PUSH
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 255
9929: PUSH
9930: LD_INT 1
9932: EQUAL
9933: AND
9934: IFFALSE 10007
// begin ComEnterUnit ( [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] , AM_Sols [ 5 ] , AM_Sols [ 6 ] ] , building ) ;
9936: LD_EXP 26
9940: PUSH
9941: LD_INT 1
9943: ARRAY
9944: PUSH
9945: LD_EXP 26
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_EXP 26
9958: PUSH
9959: LD_INT 3
9961: ARRAY
9962: PUSH
9963: LD_EXP 26
9967: PUSH
9968: LD_INT 4
9970: ARRAY
9971: PUSH
9972: LD_EXP 26
9976: PUSH
9977: LD_INT 5
9979: ARRAY
9980: PUSH
9981: LD_EXP 26
9985: PUSH
9986: LD_INT 6
9988: ARRAY
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PPUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 120
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 1 then
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 266
10016: PUSH
10017: LD_INT 31
10019: EQUAL
10020: PUSH
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 255
10030: PUSH
10031: LD_INT 1
10033: EQUAL
10034: AND
10035: IFFALSE 10115
// begin AM_Breastworks = AM_Breastworks + 1 ;
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: LD_VAR 0 2
10046: PUSH
10047: LD_INT 1
10049: PLUS
10050: ST_TO_ADDR
// case AM_Breastworks of 3 :
10051: LD_VAR 0 2
10055: PUSH
10056: LD_INT 3
10058: DOUBLE
10059: EQUAL
10060: IFTRUE 10064
10062: GO 10085
10064: POP
// ComEnterUnit ( AM_Sols [ 7 ] , building ) ; 4 :
10065: LD_EXP 26
10069: PUSH
10070: LD_INT 7
10072: ARRAY
10073: PPUSH
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL_OW 120
10083: GO 10115
10085: LD_INT 4
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10114
10093: POP
// ComEnterUnit ( AM_Sols [ 8 ] , building ) ; end ;
10094: LD_EXP 26
10098: PUSH
10099: LD_INT 8
10101: ARRAY
10102: PPUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 120
10112: GO 10115
10114: POP
// end ; if ( GetBType ( building ) = b_ext_computer or GetBType ( building ) = b_ext_gun or GetBType ( building ) = b_ext_laser or GetBType ( building ) = b_ext_track or GetBType ( building ) = b_ext_rocket ) and GetSide ( building ) = 1 then
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL_OW 266
10124: PUSH
10125: LD_INT 24
10127: EQUAL
10128: PUSH
10129: LD_VAR 0 1
10133: PPUSH
10134: CALL_OW 266
10138: PUSH
10139: LD_INT 17
10141: EQUAL
10142: OR
10143: PUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: CALL_OW 266
10153: PUSH
10154: LD_INT 25
10156: EQUAL
10157: OR
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 266
10168: PUSH
10169: LD_INT 16
10171: EQUAL
10172: OR
10173: PUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 266
10183: PUSH
10184: LD_INT 18
10186: EQUAL
10187: OR
10188: PUSH
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 255
10198: PUSH
10199: LD_INT 1
10201: EQUAL
10202: AND
10203: IFFALSE 10221
// begin AMFactoryExt = AMFactoryExt ^ building ;
10205: LD_ADDR_EXP 34
10209: PUSH
10210: LD_EXP 34
10214: PUSH
10215: LD_VAR 0 1
10219: ADD
10220: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL 80863 0 1
// end ;
10230: PPOPN 2
10232: END
// export AMVehiclesBuilt ; on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 1 then
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 255
10242: PUSH
10243: LD_INT 1
10245: EQUAL
10246: IFFALSE 10398
// begin AMVehiclesBuilt := AMVehiclesBuilt + 1 ;
10248: LD_ADDR_EXP 35
10252: PUSH
10253: LD_EXP 35
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: ST_TO_ADDR
// case AMVehiclesBuilt mod 3 of 0 :
10262: LD_EXP 35
10266: PUSH
10267: LD_INT 3
10269: MOD
10270: PUSH
10271: LD_INT 0
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10313
10279: POP
// begin AM_SquadOne := AM_SquadOne ^ vehicle ;
10280: LD_ADDR_EXP 64
10284: PUSH
10285: LD_EXP 64
10289: PUSH
10290: LD_VAR 0 1
10294: ADD
10295: ST_TO_ADDR
// ComMoveXY ( vehicle , 94 , 68 ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: LD_INT 94
10303: PPUSH
10304: LD_INT 68
10306: PPUSH
10307: CALL_OW 111
// end ; 1 :
10311: GO 10398
10313: LD_INT 1
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10355
10321: POP
// begin AM_SquadTwo := AM_SquadTwo ^ vehicle ;
10322: LD_ADDR_EXP 65
10326: PUSH
10327: LD_EXP 65
10331: PUSH
10332: LD_VAR 0 1
10336: ADD
10337: ST_TO_ADDR
// ComMoveXY ( vehicle , 110 , 79 ) ;
10338: LD_VAR 0 1
10342: PPUSH
10343: LD_INT 110
10345: PPUSH
10346: LD_INT 79
10348: PPUSH
10349: CALL_OW 111
// end ; 2 :
10353: GO 10398
10355: LD_INT 2
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10397
10363: POP
// begin AM_SquadThree := AM_SquadThree ^ vehicle ;
10364: LD_ADDR_EXP 66
10368: PUSH
10369: LD_EXP 66
10373: PUSH
10374: LD_VAR 0 1
10378: ADD
10379: ST_TO_ADDR
// ComMoveXY ( vehicle , 120 , 101 ) ;
10380: LD_VAR 0 1
10384: PPUSH
10385: LD_INT 120
10387: PPUSH
10388: LD_INT 101
10390: PPUSH
10391: CALL_OW 111
// end ; end ;
10395: GO 10398
10397: POP
// end ; MCE_VehicleConstructed ( vehicle , factory ) ;
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL 78707 0 2
// end ;
10412: PPOPN 2
10414: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10415: LD_VAR 0 1
10419: PPUSH
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL 81547 0 2
// end ;
10429: PPOPN 2
10431: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL 80629 0 1
// end ;
10441: PPOPN 1
10443: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10444: LD_VAR 0 1
10448: PPUSH
10449: LD_VAR 0 2
10453: PPUSH
10454: CALL 79392 0 2
// end ;
10458: PPOPN 2
10460: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_VAR 0 2
10470: PPUSH
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_VAR 0 4
10480: PPUSH
10481: LD_VAR 0 5
10485: PPUSH
10486: CALL 79019 0 5
// end ;
10490: PPOPN 5
10492: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_VAR 0 2
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_VAR 0 4
10512: PPUSH
10513: CALL 78552 0 4
// end ;
10517: PPOPN 4
10519: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 2
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: CALL 78334 0 3
// end ;
10539: PPOPN 3
10541: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_VAR 0 2
10551: PPUSH
10552: CALL 78226 0 2
// end ;
10556: PPOPN 2
10558: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10559: LD_VAR 0 1
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 81801 0 2
// end ;
10573: PPOPN 2
10575: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_VAR 0 2
10585: PPUSH
10586: LD_VAR 0 3
10590: PPUSH
10591: LD_VAR 0 4
10595: PPUSH
10596: CALL 82010 0 4
// end ;
10600: PPOPN 4
10602: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_VAR 0 2
10612: PPUSH
10613: CALL 78042 0 2
// end ; end_of_file
10617: PPOPN 2
10619: END
// export Simone , Miller , Esther , Edmonds , Pravar , AMSurvivors ; export Bradford , Barnes , Sidorovich , Kolvich , Dvalishvili , Botnicov , Mortimer , Richford , General , Randall ; export AvengerSquad , AvengerReserve , AvengerReserveCount ; export KolvichSquad ; export function CreatePersonas ; var i , un ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
// uc_side := 7 ;
10625: LD_ADDR_OWVAR 20
10629: PUSH
10630: LD_INT 7
10632: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
10633: LD_ADDR_EXP 36
10637: PUSH
10638: LD_STRING Simone
10640: PPUSH
10641: CALL_OW 34
10645: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
10646: LD_ADDR_EXP 37
10650: PUSH
10651: LD_STRING Miller
10653: PPUSH
10654: CALL_OW 34
10658: ST_TO_ADDR
// Pravar = CreateCharacter ( Pravar ) ;
10659: LD_ADDR_EXP 40
10663: PUSH
10664: LD_STRING Pravar
10666: PPUSH
10667: CALL_OW 34
10671: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM04_Survivors ) ;
10672: LD_ADDR_EXP 41
10676: PUSH
10677: LD_STRING AM04_Survivors
10679: PPUSH
10680: CALL_OW 31
10684: ST_TO_ADDR
// AvengerSquad := Simone ^ Miller ^ Pravar ^ AMSurvivors ;
10685: LD_ADDR_EXP 52
10689: PUSH
10690: LD_EXP 36
10694: PUSH
10695: LD_EXP 37
10699: ADD
10700: PUSH
10701: LD_EXP 40
10705: ADD
10706: PUSH
10707: LD_EXP 41
10711: ADD
10712: ST_TO_ADDR
// hc_name :=  ;
10713: LD_ADDR_OWVAR 26
10717: PUSH
10718: LD_STRING 
10720: ST_TO_ADDR
// hc_gallery :=  ;
10721: LD_ADDR_OWVAR 33
10725: PUSH
10726: LD_STRING 
10728: ST_TO_ADDR
// AvengerReserveCount := 16 - AvengerSquad ;
10729: LD_ADDR_EXP 54
10733: PUSH
10734: LD_INT 16
10736: PUSH
10737: LD_EXP 52
10741: MINUS
10742: ST_TO_ADDR
// for i = 1 to AvengerReserveCount do
10743: LD_ADDR_VAR 0 2
10747: PUSH
10748: DOUBLE
10749: LD_INT 1
10751: DEC
10752: ST_TO_ADDR
10753: LD_EXP 54
10757: PUSH
10758: FOR_TO
10759: IFFALSE 10947
// begin case Rand ( 1 , 10 ) of 1 .. 3 :
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 10
10766: PPUSH
10767: CALL_OW 12
10771: PUSH
10772: LD_INT 1
10774: DOUBLE
10775: GREATEREQUAL
10776: IFFALSE 10784
10778: LD_INT 3
10780: DOUBLE
10781: LESSEQUAL
10782: IFTRUE 10786
10784: GO 10815
10786: POP
// begin PrepareSoldier ( 1 , 8 ) ;
10787: LD_INT 1
10789: PPUSH
10790: LD_INT 8
10792: PPUSH
10793: CALL_OW 381
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10797: LD_ADDR_EXP 53
10801: PUSH
10802: LD_EXP 53
10806: PUSH
10807: CALL_OW 44
10811: ADD
10812: ST_TO_ADDR
// end ; 4 .. 6 :
10813: GO 10945
10815: LD_INT 4
10817: DOUBLE
10818: GREATEREQUAL
10819: IFFALSE 10827
10821: LD_INT 6
10823: DOUBLE
10824: LESSEQUAL
10825: IFTRUE 10829
10827: GO 10858
10829: POP
// begin PrepareMechanic ( 1 , 8 ) ;
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 8
10835: PPUSH
10836: CALL_OW 383
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10840: LD_ADDR_EXP 53
10844: PUSH
10845: LD_EXP 53
10849: PUSH
10850: CALL_OW 44
10854: ADD
10855: ST_TO_ADDR
// end ; 7 .. 8 :
10856: GO 10945
10858: LD_INT 7
10860: DOUBLE
10861: GREATEREQUAL
10862: IFFALSE 10870
10864: LD_INT 8
10866: DOUBLE
10867: LESSEQUAL
10868: IFTRUE 10872
10870: GO 10901
10872: POP
// begin PrepareScientist ( 1 , 8 ) ;
10873: LD_INT 1
10875: PPUSH
10876: LD_INT 8
10878: PPUSH
10879: CALL_OW 384
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10883: LD_ADDR_EXP 53
10887: PUSH
10888: LD_EXP 53
10892: PUSH
10893: CALL_OW 44
10897: ADD
10898: ST_TO_ADDR
// end ; 9 .. 10 :
10899: GO 10945
10901: LD_INT 9
10903: DOUBLE
10904: GREATEREQUAL
10905: IFFALSE 10913
10907: LD_INT 10
10909: DOUBLE
10910: LESSEQUAL
10911: IFTRUE 10915
10913: GO 10944
10915: POP
// begin PrepareEngineer ( 1 , 8 ) ;
10916: LD_INT 1
10918: PPUSH
10919: LD_INT 8
10921: PPUSH
10922: CALL_OW 382
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10926: LD_ADDR_EXP 53
10930: PUSH
10931: LD_EXP 53
10935: PUSH
10936: CALL_OW 44
10940: ADD
10941: ST_TO_ADDR
// end ; end ;
10942: GO 10945
10944: POP
// end ;
10945: GO 10758
10947: POP
10948: POP
// for i in AvengerReserve do
10949: LD_ADDR_VAR 0 2
10953: PUSH
10954: LD_EXP 53
10958: PUSH
10959: FOR_IN
10960: IFFALSE 10991
// begin PlaceUnitXYR ( AvengerReserve [ i ] , 87 , 94 , 7 , false ) ;
10962: LD_EXP 53
10966: PUSH
10967: LD_VAR 0 2
10971: ARRAY
10972: PPUSH
10973: LD_INT 87
10975: PPUSH
10976: LD_INT 94
10978: PPUSH
10979: LD_INT 7
10981: PPUSH
10982: LD_INT 0
10984: PPUSH
10985: CALL_OW 50
// end ;
10989: GO 10959
10991: POP
10992: POP
// uc_side := 8 ;
10993: LD_ADDR_OWVAR 20
10997: PUSH
10998: LD_INT 8
11000: ST_TO_ADDR
// hc_class = class_soldier ;
11001: LD_ADDR_OWVAR 28
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// uc_nation := nation_arabian ;
11009: LD_ADDR_OWVAR 21
11013: PUSH
11014: LD_INT 2
11016: ST_TO_ADDR
// hc_sex = sex_male ;
11017: LD_ADDR_OWVAR 27
11021: PUSH
11022: LD_INT 1
11024: ST_TO_ADDR
// hc_importance = 40 ;
11025: LD_ADDR_OWVAR 32
11029: PUSH
11030: LD_INT 40
11032: ST_TO_ADDR
// hc_skills = [ 9 , 4 , 8 , 3 ] ;
11033: LD_ADDR_OWVAR 31
11037: PUSH
11038: LD_INT 9
11040: PUSH
11041: LD_INT 4
11043: PUSH
11044: LD_INT 8
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: ST_TO_ADDR
// hc_attr = [ 15 , 10 ] ;
11056: LD_ADDR_OWVAR 29
11060: PUSH
11061: LD_INT 15
11063: PUSH
11064: LD_INT 10
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// hc_name := Giorgi Dvalishvili ;
11071: LD_ADDR_OWVAR 26
11075: PUSH
11076: LD_STRING Giorgi Dvalishvili
11078: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Dvalishvili ;
11079: LD_ADDR_OWVAR 33
11083: PUSH
11084: LD_STRING ZieloneLaserki_Dvalishvili
11086: ST_TO_ADDR
// hc_face_number := 1 ;
11087: LD_ADDR_OWVAR 34
11091: PUSH
11092: LD_INT 1
11094: ST_TO_ADDR
// Dvalishvili := CreateHuman ;
11095: LD_ADDR_EXP 46
11099: PUSH
11100: CALL_OW 44
11104: ST_TO_ADDR
// uc_side := 1 ;
11105: LD_ADDR_OWVAR 20
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// Esther = CreateCharacter ( Esther ) ;
11113: LD_ADDR_EXP 38
11117: PUSH
11118: LD_STRING Esther
11120: PPUSH
11121: CALL_OW 34
11125: ST_TO_ADDR
// Edmonds = CreateCharacter ( Edmonds ) ;
11126: LD_ADDR_EXP 39
11130: PUSH
11131: LD_STRING Edmonds
11133: PPUSH
11134: CALL_OW 34
11138: ST_TO_ADDR
// hc_class = class_soldier ;
11139: LD_ADDR_OWVAR 28
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// uc_nation := nation_american ;
11147: LD_ADDR_OWVAR 21
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// hc_importance = 70 ;
11155: LD_ADDR_OWVAR 32
11159: PUSH
11160: LD_INT 70
11162: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11163: LD_INT 1
11165: PPUSH
11166: LD_INT 9
11168: PPUSH
11169: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
11173: LD_ADDR_OWVAR 29
11177: PUSH
11178: LD_INT 10
11180: PUSH
11181: LD_INT 10
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: ST_TO_ADDR
// hc_name := Bradford ;
11188: LD_ADDR_OWVAR 26
11192: PUSH
11193: LD_STRING Bradford
11195: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11196: LD_ADDR_OWVAR 33
11200: PUSH
11201: LD_STRING ZieloneLaserki_AddtFaces2
11203: ST_TO_ADDR
// hc_face_number := 3 ;
11204: LD_ADDR_OWVAR 34
11208: PUSH
11209: LD_INT 3
11211: ST_TO_ADDR
// Bradford := CreateHuman ;
11212: LD_ADDR_EXP 42
11216: PUSH
11217: CALL_OW 44
11221: ST_TO_ADDR
// uc_nation := nation_american ;
11222: LD_ADDR_OWVAR 21
11226: PUSH
11227: LD_INT 1
11229: ST_TO_ADDR
// hc_importance = 70 ;
11230: LD_ADDR_OWVAR 32
11234: PUSH
11235: LD_INT 70
11237: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
11238: LD_INT 1
11240: PPUSH
11241: LD_INT 8
11243: PPUSH
11244: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11248: LD_ADDR_OWVAR 29
11252: PUSH
11253: LD_INT 11
11255: PUSH
11256: LD_INT 10
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: ST_TO_ADDR
// hc_name := Mortimer ;
11263: LD_ADDR_OWVAR 26
11267: PUSH
11268: LD_STRING Mortimer
11270: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces ;
11271: LD_ADDR_OWVAR 33
11275: PUSH
11276: LD_STRING ZieloneLaserki_AddtFaces
11278: ST_TO_ADDR
// hc_face_number := 1 ;
11279: LD_ADDR_OWVAR 34
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// Mortimer := CreateHuman ;
11287: LD_ADDR_EXP 48
11291: PUSH
11292: CALL_OW 44
11296: ST_TO_ADDR
// uc_nation := nation_american ;
11297: LD_ADDR_OWVAR 21
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// hc_importance = 80 ;
11305: LD_ADDR_OWVAR 32
11309: PUSH
11310: LD_INT 80
11312: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 9
11318: PPUSH
11319: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11323: LD_ADDR_OWVAR 29
11327: PUSH
11328: LD_INT 11
11330: PUSH
11331: LD_INT 10
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: ST_TO_ADDR
// hc_name := Richford ;
11338: LD_ADDR_OWVAR 26
11342: PUSH
11343: LD_STRING Richford
11345: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11346: LD_ADDR_OWVAR 33
11350: PUSH
11351: LD_STRING ZieloneLaserki_AddtFaces2
11353: ST_TO_ADDR
// hc_face_number := 2 ;
11354: LD_ADDR_OWVAR 34
11358: PUSH
11359: LD_INT 2
11361: ST_TO_ADDR
// Richford := CreateHuman ;
11362: LD_ADDR_EXP 49
11366: PUSH
11367: CALL_OW 44
11371: ST_TO_ADDR
// hc_class = class_soldier ;
11372: LD_ADDR_OWVAR 28
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// uc_nation := nation_american ;
11380: LD_ADDR_OWVAR 21
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// hc_importance = 90 ;
11388: LD_ADDR_OWVAR 32
11392: PUSH
11393: LD_INT 90
11395: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11396: LD_INT 1
11398: PPUSH
11399: LD_INT 10
11401: PPUSH
11402: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
11406: LD_ADDR_OWVAR 29
11410: PUSH
11411: LD_INT 10
11413: PUSH
11414: LD_INT 10
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: ST_TO_ADDR
// hc_name := Barnes ;
11421: LD_ADDR_OWVAR 26
11425: PUSH
11426: LD_STRING Barnes
11428: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
11429: LD_ADDR_OWVAR 33
11433: PUSH
11434: LD_STRING ZieloneLaserki_Commanders
11436: ST_TO_ADDR
// hc_face_number := 2 ;
11437: LD_ADDR_OWVAR 34
11441: PUSH
11442: LD_INT 2
11444: ST_TO_ADDR
// Barnes := CreateHuman ;
11445: LD_ADDR_EXP 43
11449: PUSH
11450: CALL_OW 44
11454: ST_TO_ADDR
// uc_side := 3 ;
11455: LD_ADDR_OWVAR 20
11459: PUSH
11460: LD_INT 3
11462: ST_TO_ADDR
// hc_class = class_soldier ;
11463: LD_ADDR_OWVAR 28
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// uc_nation := nation_russian ;
11471: LD_ADDR_OWVAR 21
11475: PUSH
11476: LD_INT 3
11478: ST_TO_ADDR
// hc_importance = 90 ;
11479: LD_ADDR_OWVAR 32
11483: PUSH
11484: LD_INT 90
11486: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11487: LD_INT 1
11489: PPUSH
11490: LD_INT 10
11492: PPUSH
11493: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
11497: LD_ADDR_OWVAR 29
11501: PUSH
11502: LD_INT 12
11504: PUSH
11505: LD_INT 10
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: ST_TO_ADDR
// hc_name := Sidorovich ;
11512: LD_ADDR_OWVAR 26
11516: PUSH
11517: LD_STRING Sidorovich
11519: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
11520: LD_ADDR_OWVAR 33
11524: PUSH
11525: LD_STRING ZieloneLaserki_Heroes
11527: ST_TO_ADDR
// hc_face_number := 8 ;
11528: LD_ADDR_OWVAR 34
11532: PUSH
11533: LD_INT 8
11535: ST_TO_ADDR
// Sidorovich := CreateHuman ;
11536: LD_ADDR_EXP 44
11540: PUSH
11541: CALL_OW 44
11545: ST_TO_ADDR
// uc_side := 6 ;
11546: LD_ADDR_OWVAR 20
11550: PUSH
11551: LD_INT 6
11553: ST_TO_ADDR
// hc_class = class_soldier ;
11554: LD_ADDR_OWVAR 28
11558: PUSH
11559: LD_INT 1
11561: ST_TO_ADDR
// uc_nation := nation_russian ;
11562: LD_ADDR_OWVAR 21
11566: PUSH
11567: LD_INT 3
11569: ST_TO_ADDR
// hc_importance = 90 ;
11570: LD_ADDR_OWVAR 32
11574: PUSH
11575: LD_INT 90
11577: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11578: LD_INT 1
11580: PPUSH
11581: LD_INT 10
11583: PPUSH
11584: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
11588: LD_ADDR_OWVAR 29
11592: PUSH
11593: LD_INT 12
11595: PUSH
11596: LD_INT 10
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: ST_TO_ADDR
// hc_name := Kolvich ;
11603: LD_ADDR_OWVAR 26
11607: PUSH
11608: LD_STRING Kolvich
11610: ST_TO_ADDR
// hc_gallery := RusCamp_KolvichCoterie ;
11611: LD_ADDR_OWVAR 33
11615: PUSH
11616: LD_STRING RusCamp_KolvichCoterie
11618: ST_TO_ADDR
// hc_face_number := 3 ;
11619: LD_ADDR_OWVAR 34
11623: PUSH
11624: LD_INT 3
11626: ST_TO_ADDR
// Kolvich := CreateHuman ;
11627: LD_ADDR_EXP 45
11631: PUSH
11632: CALL_OW 44
11636: ST_TO_ADDR
// uc_side := 5 ;
11637: LD_ADDR_OWVAR 20
11641: PUSH
11642: LD_INT 5
11644: ST_TO_ADDR
// hc_class = class_soldier ;
11645: LD_ADDR_OWVAR 28
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// uc_nation := nation_russian ;
11653: LD_ADDR_OWVAR 21
11657: PUSH
11658: LD_INT 3
11660: ST_TO_ADDR
// hc_importance = 90 ;
11661: LD_ADDR_OWVAR 32
11665: PUSH
11666: LD_INT 90
11668: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11669: LD_INT 1
11671: PPUSH
11672: LD_INT 9
11674: PPUSH
11675: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11679: LD_ADDR_OWVAR 29
11683: PUSH
11684: LD_INT 11
11686: PUSH
11687: LD_INT 10
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: ST_TO_ADDR
// hc_name := Botnicov ;
11694: LD_ADDR_OWVAR 26
11698: PUSH
11699: LD_STRING Botnicov
11701: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_RusCommanders ;
11702: LD_ADDR_OWVAR 33
11706: PUSH
11707: LD_STRING ZieloneLaserki_RusCommanders
11709: ST_TO_ADDR
// hc_face_number := 1 ;
11710: LD_ADDR_OWVAR 34
11714: PUSH
11715: LD_INT 1
11717: ST_TO_ADDR
// Botnicov := CreateHuman ;
11718: LD_ADDR_EXP 47
11722: PUSH
11723: CALL_OW 44
11727: ST_TO_ADDR
// uc_side := 4 ;
11728: LD_ADDR_OWVAR 20
11732: PUSH
11733: LD_INT 4
11735: ST_TO_ADDR
// hc_class = class_soldier ;
11736: LD_ADDR_OWVAR 28
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// uc_nation := nation_american ;
11744: LD_ADDR_OWVAR 21
11748: PUSH
11749: LD_INT 1
11751: ST_TO_ADDR
// hc_importance = 90 ;
11752: LD_ADDR_OWVAR 32
11756: PUSH
11757: LD_INT 90
11759: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11760: LD_INT 1
11762: PPUSH
11763: LD_INT 10
11765: PPUSH
11766: CALL_OW 381
// hc_attr = [ 15 , 10 ] ;
11770: LD_ADDR_OWVAR 29
11774: PUSH
11775: LD_INT 15
11777: PUSH
11778: LD_INT 10
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: ST_TO_ADDR
// hc_name := General ;
11785: LD_ADDR_OWVAR 26
11789: PUSH
11790: LD_STRING General
11792: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11793: LD_ADDR_OWVAR 33
11797: PUSH
11798: LD_STRING ZieloneLaserki_AddtFaces2
11800: ST_TO_ADDR
// hc_face_number := 5 ;
11801: LD_ADDR_OWVAR 34
11805: PUSH
11806: LD_INT 5
11808: ST_TO_ADDR
// General := CreateHuman ;
11809: LD_ADDR_EXP 50
11813: PUSH
11814: CALL_OW 44
11818: ST_TO_ADDR
// uc_side := 1 ;
11819: LD_ADDR_OWVAR 20
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// hc_class = class_soldier ;
11827: LD_ADDR_OWVAR 28
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// uc_nation := nation_american ;
11835: LD_ADDR_OWVAR 21
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// hc_importance = 90 ;
11843: LD_ADDR_OWVAR 32
11847: PUSH
11848: LD_INT 90
11850: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 10
11856: PPUSH
11857: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11861: LD_ADDR_OWVAR 29
11865: PUSH
11866: LD_INT 11
11868: PUSH
11869: LD_INT 10
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: ST_TO_ADDR
// hc_name := Randall ;
11876: LD_ADDR_OWVAR 26
11880: PUSH
11881: LD_STRING Randall
11883: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
11884: LD_ADDR_OWVAR 33
11888: PUSH
11889: LD_STRING ZieloneLaserki_Commanders
11891: ST_TO_ADDR
// hc_face_number := 3 ;
11892: LD_ADDR_OWVAR 34
11896: PUSH
11897: LD_INT 3
11899: ST_TO_ADDR
// Randall := CreateHuman ;
11900: LD_ADDR_EXP 51
11904: PUSH
11905: CALL_OW 44
11909: ST_TO_ADDR
// hc_name :=  ;
11910: LD_ADDR_OWVAR 26
11914: PUSH
11915: LD_STRING 
11917: ST_TO_ADDR
// hc_gallery :=  ;
11918: LD_ADDR_OWVAR 33
11922: PUSH
11923: LD_STRING 
11925: ST_TO_ADDR
// end ;
11926: LD_VAR 0 1
11930: RET
// export function Squad_Assembly ; var Vehicles , i , p , x , veh , filter ; begin
11931: LD_INT 0
11933: PPUSH
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
// uc_side := 7 ;
11940: LD_ADDR_OWVAR 20
11944: PUSH
11945: LD_INT 7
11947: ST_TO_ADDR
// Vehicles := LoadVariable ( AM04_Vehicles , [ ] ) ;
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: LD_STRING AM04_Vehicles
11955: PPUSH
11956: EMPTY
11957: PPUSH
11958: CALL_OW 30
11962: ST_TO_ADDR
// x := 1 ;
11963: LD_ADDR_VAR 0 5
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// i := 1 ;
11971: LD_ADDR_VAR 0 3
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
// p := 1 ;
11979: LD_ADDR_VAR 0 4
11983: PUSH
11984: LD_INT 1
11986: ST_TO_ADDR
// if Vehicles > 0 then
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: IFFALSE 12217
// while ( i <= Vehicles ) do
11997: LD_VAR 0 3
12001: PUSH
12002: LD_VAR 0 2
12006: LESSEQUAL
12007: IFFALSE 12217
// begin vc_chassis := Vehicles [ i ] ;
12009: LD_ADDR_OWVAR 37
12013: PUSH
12014: LD_VAR 0 2
12018: PUSH
12019: LD_VAR 0 3
12023: ARRAY
12024: ST_TO_ADDR
// vc_engine := Vehicles [ i + 1 ] ;
12025: LD_ADDR_OWVAR 39
12029: PUSH
12030: LD_VAR 0 2
12034: PUSH
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 1
12042: PLUS
12043: ARRAY
12044: ST_TO_ADDR
// vc_control := Vehicles [ i + 2 ] ;
12045: LD_ADDR_OWVAR 38
12049: PUSH
12050: LD_VAR 0 2
12054: PUSH
12055: LD_VAR 0 3
12059: PUSH
12060: LD_INT 2
12062: PLUS
12063: ARRAY
12064: ST_TO_ADDR
// vc_weapon := Vehicles [ i + 3 ] ;
12065: LD_ADDR_OWVAR 40
12069: PUSH
12070: LD_VAR 0 2
12074: PUSH
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 3
12082: PLUS
12083: ARRAY
12084: ST_TO_ADDR
// veh := CreateVehicle ;
12085: LD_ADDR_VAR 0 6
12089: PUSH
12090: CALL_OW 45
12094: ST_TO_ADDR
// PlaceUnitXYR ( veh , 52 , 98 , 1 , false ) ;
12095: LD_VAR 0 6
12099: PPUSH
12100: LD_INT 52
12102: PPUSH
12103: LD_INT 98
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 50
// if GetControl ( veh ) = control_manual then
12116: LD_VAR 0 6
12120: PPUSH
12121: CALL_OW 263
12125: PUSH
12126: LD_INT 1
12128: EQUAL
12129: IFFALSE 12165
// begin PlaceHumanInUnit ( AvengerSquad [ x ] , veh ) ;
12131: LD_EXP 52
12135: PUSH
12136: LD_VAR 0 5
12140: ARRAY
12141: PPUSH
12142: LD_VAR 0 6
12146: PPUSH
12147: CALL_OW 52
// x := x + 1 ;
12151: LD_ADDR_VAR 0 5
12155: PUSH
12156: LD_VAR 0 5
12160: PUSH
12161: LD_INT 1
12163: PLUS
12164: ST_TO_ADDR
// end ; ComMoveXY ( veh , 70 , 90 ) ;
12165: LD_VAR 0 6
12169: PPUSH
12170: LD_INT 70
12172: PPUSH
12173: LD_INT 90
12175: PPUSH
12176: CALL_OW 111
// wait ( 0 0$03 ) ;
12180: LD_INT 105
12182: PPUSH
12183: CALL_OW 67
// p := p + 1 ;
12187: LD_ADDR_VAR 0 4
12191: PUSH
12192: LD_VAR 0 4
12196: PUSH
12197: LD_INT 1
12199: PLUS
12200: ST_TO_ADDR
// i := i + 4 ;
12201: LD_ADDR_VAR 0 3
12205: PUSH
12206: LD_VAR 0 3
12210: PUSH
12211: LD_INT 4
12213: PLUS
12214: ST_TO_ADDR
// end ;
12215: GO 11997
// while x <= AvengerSquad do
12217: LD_VAR 0 5
12221: PUSH
12222: LD_EXP 52
12226: LESSEQUAL
12227: IFFALSE 12300
// begin PlaceUnitXYR ( AvengerSquad [ x ] , 52 , 98 , 1 , false ) ;
12229: LD_EXP 52
12233: PUSH
12234: LD_VAR 0 5
12238: ARRAY
12239: PPUSH
12240: LD_INT 52
12242: PPUSH
12243: LD_INT 98
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: LD_INT 0
12251: PPUSH
12252: CALL_OW 50
// ComMoveXY ( AvengerSquad [ x ] , 70 , 90 ) ;
12256: LD_EXP 52
12260: PUSH
12261: LD_VAR 0 5
12265: ARRAY
12266: PPUSH
12267: LD_INT 70
12269: PPUSH
12270: LD_INT 90
12272: PPUSH
12273: CALL_OW 111
// x := x + 1 ;
12277: LD_ADDR_VAR 0 5
12281: PUSH
12282: LD_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: PLUS
12290: ST_TO_ADDR
// wait ( 0 0$02 ) ;
12291: LD_INT 70
12293: PPUSH
12294: CALL_OW 67
// end ;
12298: GO 12217
// end ;
12300: LD_VAR 0 1
12304: RET
// export MC_attack_group , MC_attack_group2 ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , group ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
// amChassisTab = [ ] ;
12317: LD_ADDR_VAR 0 19
12321: PUSH
12322: EMPTY
12323: ST_TO_ADDR
// arChassisTab = [ ] ;
12324: LD_ADDR_VAR 0 18
12328: PUSH
12329: EMPTY
12330: ST_TO_ADDR
// ruChassisTab = [ ] ;
12331: LD_ADDR_VAR 0 17
12335: PUSH
12336: EMPTY
12337: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12338: LD_INT 35
12340: PPUSH
12341: CALL_OW 67
// if nation = 1 then
12345: LD_VAR 0 5
12349: PUSH
12350: LD_INT 1
12352: EQUAL
12353: IFFALSE 12912
// begin uc_side = side ;
12355: LD_ADDR_OWVAR 20
12359: PUSH
12360: LD_VAR 0 2
12364: ST_TO_ADDR
// uc_nation = nation ;
12365: LD_ADDR_OWVAR 21
12369: PUSH
12370: LD_VAR 0 5
12374: ST_TO_ADDR
// vc_engine = vehengine ;
12375: LD_ADDR_OWVAR 39
12379: PUSH
12380: LD_VAR 0 6
12384: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12385: LD_ADDR_OWVAR 38
12389: PUSH
12390: LD_VAR 0 7
12394: PUSH
12395: LD_INT 1
12397: PPUSH
12398: LD_VAR 0 7
12402: PPUSH
12403: CALL_OW 12
12407: ARRAY
12408: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12409: LD_ADDR_OWVAR 40
12413: PUSH
12414: LD_VAR 0 10
12418: PUSH
12419: LD_INT 1
12421: PPUSH
12422: LD_VAR 0 10
12426: PPUSH
12427: CALL_OW 12
12431: ARRAY
12432: ST_TO_ADDR
// for j = 1 to AMWeapon do
12433: LD_ADDR_VAR 0 14
12437: PUSH
12438: DOUBLE
12439: LD_INT 1
12441: DEC
12442: ST_TO_ADDR
12443: LD_VAR 0 10
12447: PUSH
12448: FOR_TO
12449: IFFALSE 12750
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12451: LD_VAR 0 10
12455: PUSH
12456: LD_VAR 0 14
12460: ARRAY
12461: PUSH
12462: LD_INT 2
12464: EQUAL
12465: PUSH
12466: LD_VAR 0 10
12470: PUSH
12471: LD_VAR 0 14
12475: ARRAY
12476: PUSH
12477: LD_INT 3
12479: EQUAL
12480: OR
12481: IFFALSE 12534
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12483: LD_ADDR_VAR 0 19
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 3
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: LD_INT 5
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12510: LD_ADDR_OWVAR 37
12514: PUSH
12515: LD_VAR 0 19
12519: PUSH
12520: LD_INT 1
12522: PPUSH
12523: LD_VAR 0 19
12527: PPUSH
12528: CALL_OW 12
12532: ARRAY
12533: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12534: LD_VAR 0 10
12538: PUSH
12539: LD_VAR 0 14
12543: ARRAY
12544: PUSH
12545: LD_INT 4
12547: EQUAL
12548: PUSH
12549: LD_VAR 0 10
12553: PUSH
12554: LD_VAR 0 14
12558: ARRAY
12559: PUSH
12560: LD_INT 5
12562: EQUAL
12563: OR
12564: PUSH
12565: LD_VAR 0 10
12569: PUSH
12570: LD_VAR 0 14
12574: ARRAY
12575: PUSH
12576: LD_INT 9
12578: EQUAL
12579: OR
12580: PUSH
12581: LD_VAR 0 10
12585: PUSH
12586: LD_VAR 0 14
12590: ARRAY
12591: PUSH
12592: LD_INT 11
12594: EQUAL
12595: OR
12596: PUSH
12597: LD_VAR 0 10
12601: PUSH
12602: LD_VAR 0 14
12606: ARRAY
12607: PUSH
12608: LD_INT 7
12610: EQUAL
12611: OR
12612: IFFALSE 12661
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12614: LD_ADDR_VAR 0 19
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: LD_INT 5
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12637: LD_ADDR_OWVAR 37
12641: PUSH
12642: LD_VAR 0 19
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 19
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12661: LD_VAR 0 10
12665: PUSH
12666: LD_VAR 0 14
12670: ARRAY
12671: PUSH
12672: LD_INT 8
12674: EQUAL
12675: PUSH
12676: LD_VAR 0 10
12680: PUSH
12681: LD_VAR 0 14
12685: ARRAY
12686: PUSH
12687: LD_INT 6
12689: EQUAL
12690: OR
12691: PUSH
12692: LD_VAR 0 10
12696: PUSH
12697: LD_VAR 0 14
12701: ARRAY
12702: PUSH
12703: LD_INT 10
12705: EQUAL
12706: OR
12707: IFFALSE 12748
// begin amChassisTab = [ 4 , 5 ] ;
12709: LD_ADDR_VAR 0 19
12713: PUSH
12714: LD_INT 4
12716: PUSH
12717: LD_INT 5
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12724: LD_ADDR_OWVAR 37
12728: PUSH
12729: LD_VAR 0 19
12733: PUSH
12734: LD_INT 1
12736: PPUSH
12737: LD_VAR 0 19
12741: PPUSH
12742: CALL_OW 12
12746: ARRAY
12747: ST_TO_ADDR
// end ; end ;
12748: GO 12448
12750: POP
12751: POP
// veh = CreateVehicle ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: CALL_OW 45
12761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12762: LD_VAR 0 16
12766: PPUSH
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 49
// if vc_control = 1 then
12779: LD_OWVAR 38
12783: PUSH
12784: LD_INT 1
12786: EQUAL
12787: IFFALSE 12844
// begin hc_gallery =  ;
12789: LD_ADDR_OWVAR 33
12793: PUSH
12794: LD_STRING 
12796: ST_TO_ADDR
// hc_name =  ;
12797: LD_ADDR_OWVAR 26
12801: PUSH
12802: LD_STRING 
12804: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12805: LD_INT 0
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: LD_VAR 0 4
12815: PPUSH
12816: CALL_OW 380
// un = CreateHuman ;
12820: LD_ADDR_VAR 0 15
12824: PUSH
12825: CALL_OW 44
12829: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12830: LD_VAR 0 15
12834: PPUSH
12835: LD_VAR 0 16
12839: PPUSH
12840: CALL_OW 52
// end ; if group = 1 then
12844: LD_VAR 0 11
12848: PUSH
12849: LD_INT 1
12851: EQUAL
12852: IFFALSE 12872
// MC_attack_group = MC_attack_group ^ veh else
12854: LD_ADDR_EXP 56
12858: PUSH
12859: LD_EXP 56
12863: PUSH
12864: LD_VAR 0 16
12868: ADD
12869: ST_TO_ADDR
12870: GO 12898
// if group = 2 then
12872: LD_VAR 0 11
12876: PUSH
12877: LD_INT 2
12879: EQUAL
12880: IFFALSE 12898
// MC_attack_group2 = MC_attack_group2 ^ veh ;
12882: LD_ADDR_EXP 57
12886: PUSH
12887: LD_EXP 57
12891: PUSH
12892: LD_VAR 0 16
12896: ADD
12897: ST_TO_ADDR
// i = i + 1 ;
12898: LD_ADDR_VAR 0 13
12902: PUSH
12903: LD_VAR 0 13
12907: PUSH
12908: LD_INT 1
12910: PLUS
12911: ST_TO_ADDR
// end ; if nation = 2 then
12912: LD_VAR 0 5
12916: PUSH
12917: LD_INT 2
12919: EQUAL
12920: IFFALSE 13483
// begin uc_side = side ;
12922: LD_ADDR_OWVAR 20
12926: PUSH
12927: LD_VAR 0 2
12931: ST_TO_ADDR
// uc_nation = nation ;
12932: LD_ADDR_OWVAR 21
12936: PUSH
12937: LD_VAR 0 5
12941: ST_TO_ADDR
// vc_engine = vehengine ;
12942: LD_ADDR_OWVAR 39
12946: PUSH
12947: LD_VAR 0 6
12951: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12952: LD_ADDR_OWVAR 38
12956: PUSH
12957: LD_VAR 0 7
12961: PUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_VAR 0 7
12969: PPUSH
12970: CALL_OW 12
12974: ARRAY
12975: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12976: LD_ADDR_OWVAR 40
12980: PUSH
12981: LD_VAR 0 9
12985: PUSH
12986: LD_INT 1
12988: PPUSH
12989: LD_VAR 0 9
12993: PPUSH
12994: CALL_OW 12
12998: ARRAY
12999: ST_TO_ADDR
// for j = 1 to ARWeapons do
13000: LD_ADDR_VAR 0 14
13004: PUSH
13005: DOUBLE
13006: LD_INT 1
13008: DEC
13009: ST_TO_ADDR
13010: LD_VAR 0 9
13014: PUSH
13015: FOR_TO
13016: IFFALSE 13321
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13018: LD_VAR 0 9
13022: PUSH
13023: LD_VAR 0 14
13027: ARRAY
13028: PUSH
13029: LD_INT 24
13031: EQUAL
13032: PUSH
13033: LD_VAR 0 9
13037: PUSH
13038: LD_VAR 0 14
13042: ARRAY
13043: PUSH
13044: LD_INT 22
13046: EQUAL
13047: OR
13048: PUSH
13049: LD_VAR 0 9
13053: PUSH
13054: LD_VAR 0 14
13058: ARRAY
13059: PUSH
13060: LD_INT 23
13062: EQUAL
13063: OR
13064: PUSH
13065: LD_VAR 0 9
13069: PUSH
13070: LD_VAR 0 14
13074: ARRAY
13075: PUSH
13076: LD_INT 30
13078: EQUAL
13079: OR
13080: IFFALSE 13117
// begin arChassisTab = [ 14 ] ;
13082: LD_ADDR_VAR 0 18
13086: PUSH
13087: LD_INT 14
13089: PUSH
13090: EMPTY
13091: LIST
13092: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13093: LD_ADDR_OWVAR 37
13097: PUSH
13098: LD_VAR 0 18
13102: PUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_VAR 0 18
13110: PPUSH
13111: CALL_OW 12
13115: ARRAY
13116: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13117: LD_VAR 0 9
13121: PUSH
13122: LD_VAR 0 14
13126: ARRAY
13127: PUSH
13128: LD_INT 29
13130: EQUAL
13131: PUSH
13132: LD_VAR 0 9
13136: PUSH
13137: LD_VAR 0 14
13141: ARRAY
13142: PUSH
13143: LD_INT 28
13145: EQUAL
13146: OR
13147: PUSH
13148: LD_VAR 0 9
13152: PUSH
13153: LD_VAR 0 14
13157: ARRAY
13158: PUSH
13159: LD_INT 27
13161: EQUAL
13162: OR
13163: PUSH
13164: LD_VAR 0 9
13168: PUSH
13169: LD_VAR 0 14
13173: ARRAY
13174: PUSH
13175: LD_INT 26
13177: EQUAL
13178: OR
13179: PUSH
13180: LD_VAR 0 9
13184: PUSH
13185: LD_VAR 0 14
13189: ARRAY
13190: PUSH
13191: LD_INT 25
13193: EQUAL
13194: OR
13195: IFFALSE 13236
// begin arChassisTab = [ 14 , 16 ] ;
13197: LD_ADDR_VAR 0 18
13201: PUSH
13202: LD_INT 14
13204: PUSH
13205: LD_INT 16
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13212: LD_ADDR_OWVAR 37
13216: PUSH
13217: LD_VAR 0 18
13221: PUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_VAR 0 18
13229: PPUSH
13230: CALL_OW 12
13234: ARRAY
13235: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 or ARWeapons [ j ] = 71 or ARWeapons [ j ] = 73 then
13236: LD_VAR 0 9
13240: PUSH
13241: LD_VAR 0 14
13245: ARRAY
13246: PUSH
13247: LD_INT 72
13249: EQUAL
13250: PUSH
13251: LD_VAR 0 9
13255: PUSH
13256: LD_VAR 0 14
13260: ARRAY
13261: PUSH
13262: LD_INT 71
13264: EQUAL
13265: OR
13266: PUSH
13267: LD_VAR 0 9
13271: PUSH
13272: LD_VAR 0 14
13276: ARRAY
13277: PUSH
13278: LD_INT 73
13280: EQUAL
13281: OR
13282: IFFALSE 13319
// begin arChassisTab = [ 16 ] ;
13284: LD_ADDR_VAR 0 18
13288: PUSH
13289: LD_INT 16
13291: PUSH
13292: EMPTY
13293: LIST
13294: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13295: LD_ADDR_OWVAR 37
13299: PUSH
13300: LD_VAR 0 18
13304: PUSH
13305: LD_INT 1
13307: PPUSH
13308: LD_VAR 0 18
13312: PPUSH
13313: CALL_OW 12
13317: ARRAY
13318: ST_TO_ADDR
// end ; end ;
13319: GO 13015
13321: POP
13322: POP
// veh = CreateVehicle ;
13323: LD_ADDR_VAR 0 16
13327: PUSH
13328: CALL_OW 45
13332: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13333: LD_VAR 0 16
13337: PPUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 0
13345: PPUSH
13346: CALL_OW 49
// if vc_control = 1 then
13350: LD_OWVAR 38
13354: PUSH
13355: LD_INT 1
13357: EQUAL
13358: IFFALSE 13415
// begin hc_gallery =  ;
13360: LD_ADDR_OWVAR 33
13364: PUSH
13365: LD_STRING 
13367: ST_TO_ADDR
// hc_name =  ;
13368: LD_ADDR_OWVAR 26
13372: PUSH
13373: LD_STRING 
13375: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13376: LD_INT 0
13378: PPUSH
13379: LD_INT 3
13381: PPUSH
13382: LD_VAR 0 4
13386: PPUSH
13387: CALL_OW 380
// un = CreateHuman ;
13391: LD_ADDR_VAR 0 15
13395: PUSH
13396: CALL_OW 44
13400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13401: LD_VAR 0 15
13405: PPUSH
13406: LD_VAR 0 16
13410: PPUSH
13411: CALL_OW 52
// end ; if group = 1 then
13415: LD_VAR 0 11
13419: PUSH
13420: LD_INT 1
13422: EQUAL
13423: IFFALSE 13443
// MC_attack_group = MC_attack_group ^ veh else
13425: LD_ADDR_EXP 56
13429: PUSH
13430: LD_EXP 56
13434: PUSH
13435: LD_VAR 0 16
13439: ADD
13440: ST_TO_ADDR
13441: GO 13469
// if group = 2 then
13443: LD_VAR 0 11
13447: PUSH
13448: LD_INT 2
13450: EQUAL
13451: IFFALSE 13469
// MC_attack_group2 = MC_attack_group2 ^ veh ;
13453: LD_ADDR_EXP 57
13457: PUSH
13458: LD_EXP 57
13462: PUSH
13463: LD_VAR 0 16
13467: ADD
13468: ST_TO_ADDR
// i = i + 1 ;
13469: LD_ADDR_VAR 0 13
13473: PUSH
13474: LD_VAR 0 13
13478: PUSH
13479: LD_INT 1
13481: PLUS
13482: ST_TO_ADDR
// end ; if nation = 3 then
13483: LD_VAR 0 5
13487: PUSH
13488: LD_INT 3
13490: EQUAL
13491: IFFALSE 13951
// begin uc_side = side ;
13493: LD_ADDR_OWVAR 20
13497: PUSH
13498: LD_VAR 0 2
13502: ST_TO_ADDR
// uc_nation = nation ;
13503: LD_ADDR_OWVAR 21
13507: PUSH
13508: LD_VAR 0 5
13512: ST_TO_ADDR
// vc_engine = vehengine ;
13513: LD_ADDR_OWVAR 39
13517: PUSH
13518: LD_VAR 0 6
13522: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13523: LD_ADDR_OWVAR 38
13527: PUSH
13528: LD_VAR 0 7
13532: PUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_VAR 0 7
13540: PPUSH
13541: CALL_OW 12
13545: ARRAY
13546: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13547: LD_ADDR_OWVAR 40
13551: PUSH
13552: LD_VAR 0 8
13556: PUSH
13557: LD_INT 1
13559: PPUSH
13560: LD_VAR 0 8
13564: PPUSH
13565: CALL_OW 12
13569: ARRAY
13570: ST_TO_ADDR
// for j = 1 to RuWeapons do
13571: LD_ADDR_VAR 0 14
13575: PUSH
13576: DOUBLE
13577: LD_INT 1
13579: DEC
13580: ST_TO_ADDR
13581: LD_VAR 0 8
13585: PUSH
13586: FOR_TO
13587: IFFALSE 13789
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13589: LD_VAR 0 8
13593: PUSH
13594: LD_VAR 0 14
13598: ARRAY
13599: PUSH
13600: LD_INT 42
13602: EQUAL
13603: PUSH
13604: LD_VAR 0 8
13608: PUSH
13609: LD_VAR 0 14
13613: ARRAY
13614: PUSH
13615: LD_INT 43
13617: EQUAL
13618: OR
13619: PUSH
13620: LD_VAR 0 8
13624: PUSH
13625: LD_VAR 0 14
13629: ARRAY
13630: PUSH
13631: LD_INT 44
13633: EQUAL
13634: OR
13635: PUSH
13636: LD_VAR 0 8
13640: PUSH
13641: LD_VAR 0 14
13645: ARRAY
13646: PUSH
13647: LD_INT 45
13649: EQUAL
13650: OR
13651: PUSH
13652: LD_VAR 0 8
13656: PUSH
13657: LD_VAR 0 14
13661: ARRAY
13662: PUSH
13663: LD_INT 49
13665: EQUAL
13666: OR
13667: IFFALSE 13716
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13669: LD_ADDR_VAR 0 17
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 22
13679: PUSH
13680: LD_INT 23
13682: PUSH
13683: LD_INT 24
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13692: LD_ADDR_OWVAR 37
13696: PUSH
13697: LD_VAR 0 17
13701: PUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_VAR 0 17
13709: PPUSH
13710: CALL_OW 12
13714: ARRAY
13715: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13716: LD_VAR 0 8
13720: PUSH
13721: LD_VAR 0 14
13725: ARRAY
13726: PUSH
13727: LD_INT 46
13729: EQUAL
13730: PUSH
13731: LD_VAR 0 8
13735: PUSH
13736: LD_VAR 0 14
13740: ARRAY
13741: PUSH
13742: LD_INT 47
13744: EQUAL
13745: OR
13746: IFFALSE 13787
// begin ruChassisTab = [ 23 , 24 ] ;
13748: LD_ADDR_VAR 0 17
13752: PUSH
13753: LD_INT 23
13755: PUSH
13756: LD_INT 24
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13763: LD_ADDR_OWVAR 37
13767: PUSH
13768: LD_VAR 0 17
13772: PUSH
13773: LD_INT 1
13775: PPUSH
13776: LD_VAR 0 17
13780: PPUSH
13781: CALL_OW 12
13785: ARRAY
13786: ST_TO_ADDR
// end ; end ;
13787: GO 13586
13789: POP
13790: POP
// veh = CreateVehicle ;
13791: LD_ADDR_VAR 0 16
13795: PUSH
13796: CALL_OW 45
13800: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13801: LD_VAR 0 16
13805: PPUSH
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 0
13813: PPUSH
13814: CALL_OW 49
// if vc_control = 1 then
13818: LD_OWVAR 38
13822: PUSH
13823: LD_INT 1
13825: EQUAL
13826: IFFALSE 13883
// begin hc_gallery =  ;
13828: LD_ADDR_OWVAR 33
13832: PUSH
13833: LD_STRING 
13835: ST_TO_ADDR
// hc_name =  ;
13836: LD_ADDR_OWVAR 26
13840: PUSH
13841: LD_STRING 
13843: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13844: LD_INT 0
13846: PPUSH
13847: LD_INT 3
13849: PPUSH
13850: LD_VAR 0 4
13854: PPUSH
13855: CALL_OW 380
// un = CreateHuman ;
13859: LD_ADDR_VAR 0 15
13863: PUSH
13864: CALL_OW 44
13868: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13869: LD_VAR 0 15
13873: PPUSH
13874: LD_VAR 0 16
13878: PPUSH
13879: CALL_OW 52
// end ; if group = 1 then
13883: LD_VAR 0 11
13887: PUSH
13888: LD_INT 1
13890: EQUAL
13891: IFFALSE 13911
// MC_attack_group = MC_attack_group ^ veh else
13893: LD_ADDR_EXP 56
13897: PUSH
13898: LD_EXP 56
13902: PUSH
13903: LD_VAR 0 16
13907: ADD
13908: ST_TO_ADDR
13909: GO 13937
// if group = 2 then
13911: LD_VAR 0 11
13915: PUSH
13916: LD_INT 2
13918: EQUAL
13919: IFFALSE 13937
// MC_attack_group2 = MC_attack_group2 ^ veh ;
13921: LD_ADDR_EXP 57
13925: PUSH
13926: LD_EXP 57
13930: PUSH
13931: LD_VAR 0 16
13935: ADD
13936: ST_TO_ADDR
// i = i + 1 ;
13937: LD_ADDR_VAR 0 13
13941: PUSH
13942: LD_VAR 0 13
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: ST_TO_ADDR
// end ; until i = vehCount ;
13951: LD_VAR 0 13
13955: PUSH
13956: LD_VAR 0 3
13960: EQUAL
13961: IFFALSE 12338
// end ;
13963: LD_VAR 0 12
13967: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , group ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
13968: LD_INT 0
13970: PPUSH
13971: PPUSH
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
// for i = 1 to medicCount do
13977: LD_ADDR_VAR 0 12
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 7
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14129
// begin uc_side = side ;
13995: LD_ADDR_OWVAR 20
13999: PUSH
14000: LD_VAR 0 1
14004: ST_TO_ADDR
// uc_nation = nation ;
14005: LD_ADDR_OWVAR 21
14009: PUSH
14010: LD_VAR 0 2
14014: ST_TO_ADDR
// hc_name =  ;
14015: LD_ADDR_OWVAR 26
14019: PUSH
14020: LD_STRING 
14022: ST_TO_ADDR
// hc_gallery =  ;
14023: LD_ADDR_OWVAR 33
14027: PUSH
14028: LD_STRING 
14030: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
14031: LD_INT 0
14033: PPUSH
14034: LD_INT 4
14036: PPUSH
14037: LD_VAR 0 8
14041: PPUSH
14042: CALL_OW 380
// un = CreateHuman ;
14046: LD_ADDR_VAR 0 14
14050: PUSH
14051: CALL_OW 44
14055: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14056: LD_VAR 0 14
14060: PPUSH
14061: LD_VAR 0 9
14065: PPUSH
14066: LD_INT 0
14068: PPUSH
14069: CALL_OW 49
// if group = 1 then
14073: LD_VAR 0 10
14077: PUSH
14078: LD_INT 1
14080: EQUAL
14081: IFFALSE 14101
// MC_attack_group = MC_attack_group ^ un else
14083: LD_ADDR_EXP 56
14087: PUSH
14088: LD_EXP 56
14092: PUSH
14093: LD_VAR 0 14
14097: ADD
14098: ST_TO_ADDR
14099: GO 14127
// if group = 2 then
14101: LD_VAR 0 10
14105: PUSH
14106: LD_INT 2
14108: EQUAL
14109: IFFALSE 14127
// MC_attack_group2 = MC_attack_group2 ^ un ;
14111: LD_ADDR_EXP 57
14115: PUSH
14116: LD_EXP 57
14120: PUSH
14121: LD_VAR 0 14
14125: ADD
14126: ST_TO_ADDR
// end ;
14127: GO 13992
14129: POP
14130: POP
// for i = 1 to soldierCount do
14131: LD_ADDR_VAR 0 12
14135: PUSH
14136: DOUBLE
14137: LD_INT 1
14139: DEC
14140: ST_TO_ADDR
14141: LD_VAR 0 3
14145: PUSH
14146: FOR_TO
14147: IFFALSE 14283
// begin uc_side = side ;
14149: LD_ADDR_OWVAR 20
14153: PUSH
14154: LD_VAR 0 1
14158: ST_TO_ADDR
// uc_nation = nation ;
14159: LD_ADDR_OWVAR 21
14163: PUSH
14164: LD_VAR 0 2
14168: ST_TO_ADDR
// hc_name =  ;
14169: LD_ADDR_OWVAR 26
14173: PUSH
14174: LD_STRING 
14176: ST_TO_ADDR
// hc_gallery =  ;
14177: LD_ADDR_OWVAR 33
14181: PUSH
14182: LD_STRING 
14184: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14185: LD_INT 0
14187: PPUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 8
14195: PPUSH
14196: CALL_OW 380
// un = CreateHuman ;
14200: LD_ADDR_VAR 0 14
14204: PUSH
14205: CALL_OW 44
14209: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14210: LD_VAR 0 14
14214: PPUSH
14215: LD_VAR 0 9
14219: PPUSH
14220: LD_INT 0
14222: PPUSH
14223: CALL_OW 49
// if group = 1 then
14227: LD_VAR 0 10
14231: PUSH
14232: LD_INT 1
14234: EQUAL
14235: IFFALSE 14255
// MC_attack_group = MC_attack_group ^ un else
14237: LD_ADDR_EXP 56
14241: PUSH
14242: LD_EXP 56
14246: PUSH
14247: LD_VAR 0 14
14251: ADD
14252: ST_TO_ADDR
14253: GO 14281
// if group = 2 then
14255: LD_VAR 0 10
14259: PUSH
14260: LD_INT 2
14262: EQUAL
14263: IFFALSE 14281
// MC_attack_group2 = MC_attack_group2 ^ un ;
14265: LD_ADDR_EXP 57
14269: PUSH
14270: LD_EXP 57
14274: PUSH
14275: LD_VAR 0 14
14279: ADD
14280: ST_TO_ADDR
// end ;
14281: GO 14146
14283: POP
14284: POP
// for i = 1 to sniperCount do
14285: LD_ADDR_VAR 0 12
14289: PUSH
14290: DOUBLE
14291: LD_INT 1
14293: DEC
14294: ST_TO_ADDR
14295: LD_VAR 0 4
14299: PUSH
14300: FOR_TO
14301: IFFALSE 14437
// begin uc_side = side ;
14303: LD_ADDR_OWVAR 20
14307: PUSH
14308: LD_VAR 0 1
14312: ST_TO_ADDR
// uc_nation = nation ;
14313: LD_ADDR_OWVAR 21
14317: PUSH
14318: LD_VAR 0 2
14322: ST_TO_ADDR
// hc_name =  ;
14323: LD_ADDR_OWVAR 26
14327: PUSH
14328: LD_STRING 
14330: ST_TO_ADDR
// hc_gallery =  ;
14331: LD_ADDR_OWVAR 33
14335: PUSH
14336: LD_STRING 
14338: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
14339: LD_INT 0
14341: PPUSH
14342: LD_INT 5
14344: PPUSH
14345: LD_VAR 0 8
14349: PPUSH
14350: CALL_OW 380
// un = CreateHuman ;
14354: LD_ADDR_VAR 0 14
14358: PUSH
14359: CALL_OW 44
14363: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14364: LD_VAR 0 14
14368: PPUSH
14369: LD_VAR 0 9
14373: PPUSH
14374: LD_INT 0
14376: PPUSH
14377: CALL_OW 49
// if group = 1 then
14381: LD_VAR 0 10
14385: PUSH
14386: LD_INT 1
14388: EQUAL
14389: IFFALSE 14409
// MC_attack_group = MC_attack_group ^ un else
14391: LD_ADDR_EXP 56
14395: PUSH
14396: LD_EXP 56
14400: PUSH
14401: LD_VAR 0 14
14405: ADD
14406: ST_TO_ADDR
14407: GO 14435
// if group = 2 then
14409: LD_VAR 0 10
14413: PUSH
14414: LD_INT 2
14416: EQUAL
14417: IFFALSE 14435
// MC_attack_group2 = MC_attack_group2 ^ un ;
14419: LD_ADDR_EXP 57
14423: PUSH
14424: LD_EXP 57
14428: PUSH
14429: LD_VAR 0 14
14433: ADD
14434: ST_TO_ADDR
// end ;
14435: GO 14300
14437: POP
14438: POP
// for i = 1 to bazookCount do
14439: LD_ADDR_VAR 0 12
14443: PUSH
14444: DOUBLE
14445: LD_INT 1
14447: DEC
14448: ST_TO_ADDR
14449: LD_VAR 0 5
14453: PUSH
14454: FOR_TO
14455: IFFALSE 14591
// begin uc_side = side ;
14457: LD_ADDR_OWVAR 20
14461: PUSH
14462: LD_VAR 0 1
14466: ST_TO_ADDR
// uc_nation = nation ;
14467: LD_ADDR_OWVAR 21
14471: PUSH
14472: LD_VAR 0 2
14476: ST_TO_ADDR
// hc_name =  ;
14477: LD_ADDR_OWVAR 26
14481: PUSH
14482: LD_STRING 
14484: ST_TO_ADDR
// hc_gallery =  ;
14485: LD_ADDR_OWVAR 33
14489: PUSH
14490: LD_STRING 
14492: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
14493: LD_INT 0
14495: PPUSH
14496: LD_INT 9
14498: PPUSH
14499: LD_VAR 0 8
14503: PPUSH
14504: CALL_OW 380
// un = CreateHuman ;
14508: LD_ADDR_VAR 0 14
14512: PUSH
14513: CALL_OW 44
14517: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14518: LD_VAR 0 14
14522: PPUSH
14523: LD_VAR 0 9
14527: PPUSH
14528: LD_INT 0
14530: PPUSH
14531: CALL_OW 49
// if group = 1 then
14535: LD_VAR 0 10
14539: PUSH
14540: LD_INT 1
14542: EQUAL
14543: IFFALSE 14563
// MC_attack_group = MC_attack_group ^ un else
14545: LD_ADDR_EXP 56
14549: PUSH
14550: LD_EXP 56
14554: PUSH
14555: LD_VAR 0 14
14559: ADD
14560: ST_TO_ADDR
14561: GO 14589
// if group = 2 then
14563: LD_VAR 0 10
14567: PUSH
14568: LD_INT 2
14570: EQUAL
14571: IFFALSE 14589
// MC_attack_group2 = MC_attack_group2 ^ un ;
14573: LD_ADDR_EXP 57
14577: PUSH
14578: LD_EXP 57
14582: PUSH
14583: LD_VAR 0 14
14587: ADD
14588: ST_TO_ADDR
// end ;
14589: GO 14454
14591: POP
14592: POP
// for i = 1 to mortalCount do
14593: LD_ADDR_VAR 0 12
14597: PUSH
14598: DOUBLE
14599: LD_INT 1
14601: DEC
14602: ST_TO_ADDR
14603: LD_VAR 0 6
14607: PUSH
14608: FOR_TO
14609: IFFALSE 14745
// begin uc_side = side ;
14611: LD_ADDR_OWVAR 20
14615: PUSH
14616: LD_VAR 0 1
14620: ST_TO_ADDR
// uc_nation = nation ;
14621: LD_ADDR_OWVAR 21
14625: PUSH
14626: LD_VAR 0 2
14630: ST_TO_ADDR
// hc_name =  ;
14631: LD_ADDR_OWVAR 26
14635: PUSH
14636: LD_STRING 
14638: ST_TO_ADDR
// hc_gallery =  ;
14639: LD_ADDR_OWVAR 33
14643: PUSH
14644: LD_STRING 
14646: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
14647: LD_INT 0
14649: PPUSH
14650: LD_INT 8
14652: PPUSH
14653: LD_VAR 0 8
14657: PPUSH
14658: CALL_OW 380
// un = CreateHuman ;
14662: LD_ADDR_VAR 0 14
14666: PUSH
14667: CALL_OW 44
14671: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14672: LD_VAR 0 14
14676: PPUSH
14677: LD_VAR 0 9
14681: PPUSH
14682: LD_INT 0
14684: PPUSH
14685: CALL_OW 49
// if group = 1 then
14689: LD_VAR 0 10
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14717
// MC_attack_group = MC_attack_group ^ un else
14699: LD_ADDR_EXP 56
14703: PUSH
14704: LD_EXP 56
14708: PUSH
14709: LD_VAR 0 14
14713: ADD
14714: ST_TO_ADDR
14715: GO 14743
// if group = 2 then
14717: LD_VAR 0 10
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: IFFALSE 14743
// MC_attack_group2 = MC_attack_group2 ^ un ;
14727: LD_ADDR_EXP 57
14731: PUSH
14732: LD_EXP 57
14736: PUSH
14737: LD_VAR 0 14
14741: ADD
14742: ST_TO_ADDR
// end ;
14743: GO 14608
14745: POP
14746: POP
// end ;
14747: LD_VAR 0 11
14751: RET
// export function PrepareDvalishvili ; var DvaliVeh ; begin
14752: LD_INT 0
14754: PPUSH
14755: PPUSH
// uc_side = 8 ;
14756: LD_ADDR_OWVAR 20
14760: PUSH
14761: LD_INT 8
14763: ST_TO_ADDR
// uc_nation = 2 ;
14764: LD_ADDR_OWVAR 21
14768: PUSH
14769: LD_INT 2
14771: ST_TO_ADDR
// vc_chassis := ar_heavy_tracked ;
14772: LD_ADDR_OWVAR 37
14776: PUSH
14777: LD_EXP 111
14781: ST_TO_ADDR
// vc_engine := engine_siberite ;
14782: LD_ADDR_OWVAR 39
14786: PUSH
14787: LD_INT 3
14789: ST_TO_ADDR
// vc_control := control_manual ;
14790: LD_ADDR_OWVAR 38
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// vc_weapon := ar_heavy_gun ;
14798: LD_ADDR_OWVAR 40
14802: PUSH
14803: LD_EXP 114
14807: ST_TO_ADDR
// DvaliVeh := CreateVehicle ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: CALL_OW 45
14817: ST_TO_ADDR
// PlaceHumanInUnit ( Dvalishvili , DvaliVeh ) ;
14818: LD_EXP 46
14822: PPUSH
14823: LD_VAR 0 2
14827: PPUSH
14828: CALL_OW 52
// PlaceUnitInArea ( DvaliVeh , DvaliSpawn_S , false ) ;
14832: LD_VAR 0 2
14836: PPUSH
14837: LD_INT 11
14839: PPUSH
14840: LD_INT 0
14842: PPUSH
14843: CALL 59723 0 3
// MC_attack_group2 := MC_attack_group2 ^ Dvalishvili ^ DvaliVeh ;
14847: LD_ADDR_EXP 57
14851: PUSH
14852: LD_EXP 57
14856: PUSH
14857: LD_EXP 46
14861: ADD
14862: PUSH
14863: LD_VAR 0 2
14867: ADD
14868: ST_TO_ADDR
// end ; end_of_file
14869: LD_VAR 0 1
14873: RET
// export RuSolMinLevel , RuSolMaxLevel , GeoSolMaxLevel ; export RU2KolvichArrival , GEODvaliArrival , DefenseTime ; export function PrepareDifficulty ; begin
14874: LD_INT 0
14876: PPUSH
// if difficulty = 1 then
14877: LD_OWVAR 67
14881: PUSH
14882: LD_INT 1
14884: EQUAL
14885: IFFALSE 15208
// begin RuSolMinLevel = 6 ;
14887: LD_ADDR_EXP 58
14891: PUSH
14892: LD_INT 6
14894: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
14895: LD_ADDR_EXP 59
14899: PUSH
14900: LD_INT 8
14902: ST_TO_ADDR
// GeoSolMaxLevel = 9 ;
14903: LD_ADDR_EXP 60
14907: PUSH
14908: LD_INT 9
14910: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
14911: LD_INT 48
14913: PPUSH
14914: LD_INT 3
14916: PPUSH
14917: LD_INT 2
14919: PPUSH
14920: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
14924: LD_INT 49
14926: PPUSH
14927: LD_INT 3
14929: PPUSH
14930: LD_INT 2
14932: PPUSH
14933: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
14937: LD_INT 51
14939: PPUSH
14940: LD_INT 3
14942: PPUSH
14943: LD_INT 2
14945: PPUSH
14946: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
14950: LD_INT 52
14952: PPUSH
14953: LD_INT 3
14955: PPUSH
14956: LD_INT 2
14958: PPUSH
14959: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
14963: LD_INT 57
14965: PPUSH
14966: LD_INT 3
14968: PPUSH
14969: LD_INT 2
14971: PPUSH
14972: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
14976: LD_INT 58
14978: PPUSH
14979: LD_INT 3
14981: PPUSH
14982: LD_INT 2
14984: PPUSH
14985: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
14989: LD_INT 30
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: LD_INT 2
14997: PPUSH
14998: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15002: LD_INT 48
15004: PPUSH
15005: LD_INT 6
15007: PPUSH
15008: LD_INT 2
15010: PPUSH
15011: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15015: LD_INT 49
15017: PPUSH
15018: LD_INT 6
15020: PPUSH
15021: LD_INT 2
15023: PPUSH
15024: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
15028: LD_INT 51
15030: PPUSH
15031: LD_INT 6
15033: PPUSH
15034: LD_INT 2
15036: PPUSH
15037: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
15041: LD_INT 52
15043: PPUSH
15044: LD_INT 6
15046: PPUSH
15047: LD_INT 2
15049: PPUSH
15050: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
15054: LD_INT 57
15056: PPUSH
15057: LD_INT 6
15059: PPUSH
15060: LD_INT 2
15062: PPUSH
15063: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
15067: LD_INT 58
15069: PPUSH
15070: LD_INT 6
15072: PPUSH
15073: LD_INT 2
15075: PPUSH
15076: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
15080: LD_INT 30
15082: PPUSH
15083: LD_INT 6
15085: PPUSH
15086: LD_INT 2
15088: PPUSH
15089: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
15093: LD_INT 28
15095: PPUSH
15096: LD_INT 6
15098: PPUSH
15099: LD_INT 2
15101: PPUSH
15102: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
15106: LD_INT 48
15108: PPUSH
15109: LD_INT 8
15111: PPUSH
15112: LD_INT 2
15114: PPUSH
15115: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
15119: LD_INT 49
15121: PPUSH
15122: LD_INT 8
15124: PPUSH
15125: LD_INT 2
15127: PPUSH
15128: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
15132: LD_INT 51
15134: PPUSH
15135: LD_INT 8
15137: PPUSH
15138: LD_INT 2
15140: PPUSH
15141: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
15145: LD_INT 52
15147: PPUSH
15148: LD_INT 8
15150: PPUSH
15151: LD_INT 2
15153: PPUSH
15154: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
15158: LD_INT 66
15160: PPUSH
15161: LD_INT 8
15163: PPUSH
15164: LD_INT 2
15166: PPUSH
15167: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
15171: LD_INT 67
15173: PPUSH
15174: LD_INT 8
15176: PPUSH
15177: LD_INT 2
15179: PPUSH
15180: CALL_OW 322
// RU2KolvichArrival = 60 60$00 ;
15184: LD_ADDR_EXP 61
15188: PUSH
15189: LD_INT 126000
15191: ST_TO_ADDR
// GEODvaliArrival = 8 8$00 ;
15192: LD_ADDR_EXP 62
15196: PUSH
15197: LD_INT 16800
15199: ST_TO_ADDR
// DefenseTime = 20 20$00 ;
15200: LD_ADDR_EXP 63
15204: PUSH
15205: LD_INT 42000
15207: ST_TO_ADDR
// end ; if difficulty = 2 then
15208: LD_OWVAR 67
15212: PUSH
15213: LD_INT 2
15215: EQUAL
15216: IFFALSE 15656
// begin RuSolMinLevel = 7 ;
15218: LD_ADDR_EXP 58
15222: PUSH
15223: LD_INT 7
15225: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
15226: LD_ADDR_EXP 59
15230: PUSH
15231: LD_INT 9
15233: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
15234: LD_ADDR_EXP 60
15238: PUSH
15239: LD_INT 10
15241: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
15242: LD_INT 48
15244: PPUSH
15245: LD_INT 3
15247: PPUSH
15248: LD_INT 2
15250: PPUSH
15251: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15255: LD_INT 49
15257: PPUSH
15258: LD_INT 3
15260: PPUSH
15261: LD_INT 2
15263: PPUSH
15264: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15268: LD_INT 49
15270: PPUSH
15271: LD_INT 3
15273: PPUSH
15274: LD_INT 2
15276: PPUSH
15277: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
15281: LD_INT 51
15283: PPUSH
15284: LD_INT 3
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
15294: LD_INT 52
15296: PPUSH
15297: LD_INT 3
15299: PPUSH
15300: LD_INT 2
15302: PPUSH
15303: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
15307: LD_INT 57
15309: PPUSH
15310: LD_INT 3
15312: PPUSH
15313: LD_INT 2
15315: PPUSH
15316: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
15320: LD_INT 58
15322: PPUSH
15323: LD_INT 3
15325: PPUSH
15326: LD_INT 2
15328: PPUSH
15329: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
15333: LD_INT 63
15335: PPUSH
15336: LD_INT 3
15338: PPUSH
15339: LD_INT 2
15341: PPUSH
15342: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
15346: LD_INT 30
15348: PPUSH
15349: LD_INT 3
15351: PPUSH
15352: LD_INT 2
15354: PPUSH
15355: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15359: LD_INT 48
15361: PPUSH
15362: LD_INT 6
15364: PPUSH
15365: LD_INT 2
15367: PPUSH
15368: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15372: LD_INT 49
15374: PPUSH
15375: LD_INT 6
15377: PPUSH
15378: LD_INT 2
15380: PPUSH
15381: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
15385: LD_INT 50
15387: PPUSH
15388: LD_INT 6
15390: PPUSH
15391: LD_INT 2
15393: PPUSH
15394: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
15398: LD_INT 51
15400: PPUSH
15401: LD_INT 6
15403: PPUSH
15404: LD_INT 2
15406: PPUSH
15407: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
15411: LD_INT 52
15413: PPUSH
15414: LD_INT 6
15416: PPUSH
15417: LD_INT 2
15419: PPUSH
15420: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
15424: LD_INT 53
15426: PPUSH
15427: LD_INT 6
15429: PPUSH
15430: LD_INT 2
15432: PPUSH
15433: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
15437: LD_INT 57
15439: PPUSH
15440: LD_INT 6
15442: PPUSH
15443: LD_INT 2
15445: PPUSH
15446: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
15450: LD_INT 58
15452: PPUSH
15453: LD_INT 6
15455: PPUSH
15456: LD_INT 2
15458: PPUSH
15459: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
15463: LD_INT 59
15465: PPUSH
15466: LD_INT 6
15468: PPUSH
15469: LD_INT 2
15471: PPUSH
15472: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
15476: LD_INT 63
15478: PPUSH
15479: LD_INT 6
15481: PPUSH
15482: LD_INT 2
15484: PPUSH
15485: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
15489: LD_INT 64
15491: PPUSH
15492: LD_INT 6
15494: PPUSH
15495: LD_INT 2
15497: PPUSH
15498: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
15502: LD_INT 30
15504: PPUSH
15505: LD_INT 6
15507: PPUSH
15508: LD_INT 2
15510: PPUSH
15511: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
15515: LD_INT 28
15517: PPUSH
15518: LD_INT 6
15520: PPUSH
15521: LD_INT 2
15523: PPUSH
15524: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
15528: LD_INT 48
15530: PPUSH
15531: LD_INT 8
15533: PPUSH
15534: LD_INT 2
15536: PPUSH
15537: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
15541: LD_INT 49
15543: PPUSH
15544: LD_INT 8
15546: PPUSH
15547: LD_INT 2
15549: PPUSH
15550: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
15554: LD_INT 50
15556: PPUSH
15557: LD_INT 8
15559: PPUSH
15560: LD_INT 2
15562: PPUSH
15563: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
15567: LD_INT 51
15569: PPUSH
15570: LD_INT 8
15572: PPUSH
15573: LD_INT 2
15575: PPUSH
15576: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
15580: LD_INT 52
15582: PPUSH
15583: LD_INT 8
15585: PPUSH
15586: LD_INT 2
15588: PPUSH
15589: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
15593: LD_INT 66
15595: PPUSH
15596: LD_INT 8
15598: PPUSH
15599: LD_INT 2
15601: PPUSH
15602: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
15606: LD_INT 67
15608: PPUSH
15609: LD_INT 8
15611: PPUSH
15612: LD_INT 2
15614: PPUSH
15615: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
15619: LD_INT 5
15621: PPUSH
15622: LD_INT 8
15624: PPUSH
15625: LD_INT 2
15627: PPUSH
15628: CALL_OW 322
// RU2KolvichArrival = 50 50$00 ;
15632: LD_ADDR_EXP 61
15636: PUSH
15637: LD_INT 105000
15639: ST_TO_ADDR
// GEODvaliArrival = 6 6$00 ;
15640: LD_ADDR_EXP 62
15644: PUSH
15645: LD_INT 12600
15647: ST_TO_ADDR
// DefenseTime = 30 30$00 ;
15648: LD_ADDR_EXP 63
15652: PUSH
15653: LD_INT 63000
15655: ST_TO_ADDR
// end ; if difficulty = 3 then
15656: LD_OWVAR 67
15660: PUSH
15661: LD_INT 3
15663: EQUAL
15664: IFFALSE 16195
// begin RuSolMinLevel = 9 ;
15666: LD_ADDR_EXP 58
15670: PUSH
15671: LD_INT 9
15673: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
15674: LD_ADDR_EXP 59
15678: PUSH
15679: LD_INT 10
15681: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
15682: LD_ADDR_EXP 60
15686: PUSH
15687: LD_INT 10
15689: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
15690: LD_INT 48
15692: PPUSH
15693: LD_INT 3
15695: PPUSH
15696: LD_INT 2
15698: PPUSH
15699: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
15703: LD_INT 51
15705: PPUSH
15706: LD_INT 3
15708: PPUSH
15709: LD_INT 2
15711: PPUSH
15712: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
15716: LD_INT 57
15718: PPUSH
15719: LD_INT 3
15721: PPUSH
15722: LD_INT 2
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15729: LD_INT 49
15731: PPUSH
15732: LD_INT 3
15734: PPUSH
15735: LD_INT 2
15737: PPUSH
15738: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
15742: LD_INT 52
15744: PPUSH
15745: LD_INT 3
15747: PPUSH
15748: LD_INT 2
15750: PPUSH
15751: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
15755: LD_INT 58
15757: PPUSH
15758: LD_INT 3
15760: PPUSH
15761: LD_INT 2
15763: PPUSH
15764: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
15768: LD_INT 50
15770: PPUSH
15771: LD_INT 3
15773: PPUSH
15774: LD_INT 2
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
15781: LD_INT 59
15783: PPUSH
15784: LD_INT 3
15786: PPUSH
15787: LD_INT 2
15789: PPUSH
15790: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
15794: LD_INT 53
15796: PPUSH
15797: LD_INT 3
15799: PPUSH
15800: LD_INT 2
15802: PPUSH
15803: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
15807: LD_INT 63
15809: PPUSH
15810: LD_INT 3
15812: PPUSH
15813: LD_INT 2
15815: PPUSH
15816: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
15820: LD_INT 64
15822: PPUSH
15823: LD_INT 3
15825: PPUSH
15826: LD_INT 2
15828: PPUSH
15829: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
15833: LD_INT 30
15835: PPUSH
15836: LD_INT 3
15838: PPUSH
15839: LD_INT 2
15841: PPUSH
15842: CALL_OW 322
// SetTech ( tech_TauRad , 3 , state_researched ) ;
15846: LD_INT 28
15848: PPUSH
15849: LD_INT 3
15851: PPUSH
15852: LD_INT 2
15854: PPUSH
15855: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15859: LD_INT 48
15861: PPUSH
15862: LD_INT 6
15864: PPUSH
15865: LD_INT 2
15867: PPUSH
15868: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
15872: LD_INT 51
15874: PPUSH
15875: LD_INT 6
15877: PPUSH
15878: LD_INT 2
15880: PPUSH
15881: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
15885: LD_INT 57
15887: PPUSH
15888: LD_INT 6
15890: PPUSH
15891: LD_INT 2
15893: PPUSH
15894: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15898: LD_INT 49
15900: PPUSH
15901: LD_INT 6
15903: PPUSH
15904: LD_INT 2
15906: PPUSH
15907: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
15911: LD_INT 52
15913: PPUSH
15914: LD_INT 6
15916: PPUSH
15917: LD_INT 2
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
15924: LD_INT 58
15926: PPUSH
15927: LD_INT 6
15929: PPUSH
15930: LD_INT 2
15932: PPUSH
15933: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
15937: LD_INT 50
15939: PPUSH
15940: LD_INT 6
15942: PPUSH
15943: LD_INT 2
15945: PPUSH
15946: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
15950: LD_INT 53
15952: PPUSH
15953: LD_INT 6
15955: PPUSH
15956: LD_INT 2
15958: PPUSH
15959: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
15963: LD_INT 59
15965: PPUSH
15966: LD_INT 6
15968: PPUSH
15969: LD_INT 2
15971: PPUSH
15972: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
15976: LD_INT 63
15978: PPUSH
15979: LD_INT 6
15981: PPUSH
15982: LD_INT 2
15984: PPUSH
15985: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
15989: LD_INT 64
15991: PPUSH
15992: LD_INT 6
15994: PPUSH
15995: LD_INT 2
15997: PPUSH
15998: CALL_OW 322
// SetTech ( tech_ST3 , 6 , state_researched ) ;
16002: LD_INT 65
16004: PPUSH
16005: LD_INT 6
16007: PPUSH
16008: LD_INT 2
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
16015: LD_INT 30
16017: PPUSH
16018: LD_INT 6
16020: PPUSH
16021: LD_INT 2
16023: PPUSH
16024: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
16028: LD_INT 28
16030: PPUSH
16031: LD_INT 6
16033: PPUSH
16034: LD_INT 2
16036: PPUSH
16037: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
16041: LD_INT 48
16043: PPUSH
16044: LD_INT 8
16046: PPUSH
16047: LD_INT 2
16049: PPUSH
16050: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
16054: LD_INT 49
16056: PPUSH
16057: LD_INT 8
16059: PPUSH
16060: LD_INT 2
16062: PPUSH
16063: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
16067: LD_INT 50
16069: PPUSH
16070: LD_INT 8
16072: PPUSH
16073: LD_INT 2
16075: PPUSH
16076: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
16080: LD_INT 51
16082: PPUSH
16083: LD_INT 8
16085: PPUSH
16086: LD_INT 2
16088: PPUSH
16089: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
16093: LD_INT 52
16095: PPUSH
16096: LD_INT 8
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
16106: LD_INT 53
16108: PPUSH
16109: LD_INT 8
16111: PPUSH
16112: LD_INT 2
16114: PPUSH
16115: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
16119: LD_INT 66
16121: PPUSH
16122: LD_INT 8
16124: PPUSH
16125: LD_INT 2
16127: PPUSH
16128: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
16132: LD_INT 67
16134: PPUSH
16135: LD_INT 8
16137: PPUSH
16138: LD_INT 2
16140: PPUSH
16141: CALL_OW 322
// SetTech ( tech_Bio3 , 8 , state_researched ) ;
16145: LD_INT 68
16147: PPUSH
16148: LD_INT 8
16150: PPUSH
16151: LD_INT 2
16153: PPUSH
16154: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
16158: LD_INT 5
16160: PPUSH
16161: LD_INT 8
16163: PPUSH
16164: LD_INT 2
16166: PPUSH
16167: CALL_OW 322
// RU2KolvichArrival = 45 45$00 ;
16171: LD_ADDR_EXP 61
16175: PUSH
16176: LD_INT 94500
16178: ST_TO_ADDR
// GEODvaliArrival = 4 4$00 ;
16179: LD_ADDR_EXP 62
16183: PUSH
16184: LD_INT 8400
16186: ST_TO_ADDR
// DefenseTime = 40 40$00 ;
16187: LD_ADDR_EXP 63
16191: PUSH
16192: LD_INT 84000
16194: ST_TO_ADDR
// end ; end ; end_of_file
16195: LD_VAR 0 1
16199: RET
// export AM_SquadOne , AM_SquadTwo , AM_SquadThree ; every 0 0$1 trigger MissionStart do
16200: LD_EXP 1
16204: IFFALSE 16426
16206: GO 16208
16208: DISABLE
// begin Wait ( 1 1$0 ) ;
16209: LD_INT 2100
16211: PPUSH
16212: CALL_OW 67
// ComBuild ( AM_Engineers , b_oil_mine , 63 , 69 , 0 ) ;
16216: LD_EXP 27
16220: PPUSH
16221: LD_INT 29
16223: PPUSH
16224: LD_INT 63
16226: PPUSH
16227: LD_INT 69
16229: PPUSH
16230: LD_INT 0
16232: PPUSH
16233: CALL_OW 145
// AddComBuild ( AM_Engineers , b_siberite_mine , 104 , 96 , 0 ) ;
16237: LD_EXP 27
16241: PPUSH
16242: LD_INT 30
16244: PPUSH
16245: LD_INT 104
16247: PPUSH
16248: LD_INT 96
16250: PPUSH
16251: LD_INT 0
16253: PPUSH
16254: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 97 , 0 ) ;
16258: LD_EXP 27
16262: PPUSH
16263: LD_INT 26
16265: PPUSH
16266: LD_INT 90
16268: PPUSH
16269: LD_INT 97
16271: PPUSH
16272: LD_INT 0
16274: PPUSH
16275: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 94 , 0 ) ;
16279: LD_EXP 27
16283: PPUSH
16284: LD_INT 26
16286: PPUSH
16287: LD_INT 90
16289: PPUSH
16290: LD_INT 94
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 83 , 96 , 0 ) ;
16300: LD_EXP 27
16304: PPUSH
16305: LD_INT 26
16307: PPUSH
16308: LD_INT 83
16310: PPUSH
16311: LD_INT 96
16313: PPUSH
16314: LD_INT 0
16316: PPUSH
16317: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_gun , 80 , 78 , 0 ) ;
16321: LD_EXP 27
16325: PPUSH
16326: LD_INT 17
16328: PPUSH
16329: LD_INT 80
16331: PPUSH
16332: LD_INT 78
16334: PPUSH
16335: LD_INT 0
16337: PPUSH
16338: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_rocket , 76 , 71 , 2 ) ;
16342: LD_EXP 27
16346: PPUSH
16347: LD_INT 18
16349: PPUSH
16350: LD_INT 76
16352: PPUSH
16353: LD_INT 71
16355: PPUSH
16356: LD_INT 2
16358: PPUSH
16359: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_computer , 79 , 71 , 3 ) ;
16363: LD_EXP 27
16367: PPUSH
16368: LD_INT 24
16370: PPUSH
16371: LD_INT 79
16373: PPUSH
16374: LD_INT 71
16376: PPUSH
16377: LD_INT 3
16379: PPUSH
16380: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_track , 83 , 75 , 4 ) ;
16384: LD_EXP 27
16388: PPUSH
16389: LD_INT 16
16391: PPUSH
16392: LD_INT 83
16394: PPUSH
16395: LD_INT 75
16397: PPUSH
16398: LD_INT 4
16400: PPUSH
16401: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_laser , 76 , 73 , 1 ) ;
16405: LD_EXP 27
16409: PPUSH
16410: LD_INT 25
16412: PPUSH
16413: LD_INT 76
16415: PPUSH
16416: LD_INT 73
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 205
// end ;
16426: END
// export AM_Factory ; export function Construct_Vehicles ; var i ; begin
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
// AddResourceType ( GetBase ( AMBase ) , mat_oil , 500 ) ;
16431: LD_INT 351
16433: PPUSH
16434: CALL_OW 274
16438: PPUSH
16439: LD_INT 2
16441: PPUSH
16442: LD_INT 500
16444: PPUSH
16445: CALL_OW 276
// for i = 1 to 5 do
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: DOUBLE
16455: LD_INT 1
16457: DEC
16458: ST_TO_ADDR
16459: LD_INT 5
16461: PUSH
16462: FOR_TO
16463: IFFALSE 16506
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16465: LD_INT 351
16467: PPUSH
16468: CALL_OW 274
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: LD_INT 100
16478: PPUSH
16479: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_double_gun ) ;
16483: LD_EXP 67
16487: PPUSH
16488: LD_INT 3
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: LD_INT 3
16496: PPUSH
16497: LD_INT 5
16499: PPUSH
16500: CALL_OW 185
// end ;
16504: GO 16462
16506: POP
16507: POP
// for i = 1 to 4 do
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: DOUBLE
16514: LD_INT 1
16516: DEC
16517: ST_TO_ADDR
16518: LD_INT 4
16520: PUSH
16521: FOR_TO
16522: IFFALSE 16565
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16524: LD_INT 351
16526: PPUSH
16527: CALL_OW 274
16531: PPUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 100
16537: PPUSH
16538: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ) ;
16542: LD_EXP 67
16546: PPUSH
16547: LD_INT 3
16549: PPUSH
16550: LD_INT 1
16552: PPUSH
16553: LD_INT 3
16555: PPUSH
16556: LD_INT 7
16558: PPUSH
16559: CALL_OW 185
// end ;
16563: GO 16521
16565: POP
16566: POP
// for i = 1 to 7 do
16567: LD_ADDR_VAR 0 2
16571: PUSH
16572: DOUBLE
16573: LD_INT 1
16575: DEC
16576: ST_TO_ADDR
16577: LD_INT 7
16579: PUSH
16580: FOR_TO
16581: IFFALSE 16624
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16583: LD_INT 351
16585: PPUSH
16586: CALL_OW 274
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 100
16596: PPUSH
16597: CALL_OW 276
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ) ;
16601: LD_EXP 67
16605: PPUSH
16606: LD_INT 4
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: LD_INT 3
16614: PPUSH
16615: LD_INT 6
16617: PPUSH
16618: CALL_OW 185
// end ;
16622: GO 16580
16624: POP
16625: POP
// for i = 1 to 4 do
16626: LD_ADDR_VAR 0 2
16630: PUSH
16631: DOUBLE
16632: LD_INT 1
16634: DEC
16635: ST_TO_ADDR
16636: LD_INT 4
16638: PUSH
16639: FOR_TO
16640: IFFALSE 16683
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16642: LD_INT 351
16644: PPUSH
16645: CALL_OW 274
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_INT 100
16655: PPUSH
16656: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_laser ) ;
16660: LD_EXP 67
16664: PPUSH
16665: LD_INT 3
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: LD_INT 3
16673: PPUSH
16674: LD_INT 9
16676: PPUSH
16677: CALL_OW 185
// end ;
16681: GO 16639
16683: POP
16684: POP
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
16685: LD_EXP 67
16689: PPUSH
16690: LD_INT 3
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_INT 9
16701: PPUSH
16702: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
16706: LD_EXP 67
16710: PPUSH
16711: LD_INT 3
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: LD_INT 9
16722: PPUSH
16723: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
16727: LD_EXP 67
16731: PPUSH
16732: LD_INT 4
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: LD_INT 1
16740: PPUSH
16741: LD_INT 6
16743: PPUSH
16744: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
16748: LD_EXP 67
16752: PPUSH
16753: LD_INT 4
16755: PPUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_INT 1
16761: PPUSH
16762: LD_INT 6
16764: PPUSH
16765: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
16769: LD_EXP 67
16773: PPUSH
16774: LD_INT 3
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: LD_INT 7
16785: PPUSH
16786: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
16790: LD_EXP 67
16794: PPUSH
16795: LD_INT 3
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: LD_INT 1
16803: PPUSH
16804: LD_INT 7
16806: PPUSH
16807: CALL_OW 185
// end ;
16811: LD_VAR 0 1
16815: RET
// export function CustomInitMacro ( ) ; begin
16816: LD_INT 0
16818: PPUSH
// MC_SetScanArea ( 1 , RU_Ustinov_Area ) ;
16819: LD_INT 1
16821: PPUSH
16822: LD_INT 14
16824: PPUSH
16825: CALL 77986 0 2
// MC_SetParkingArea ( 1 , RU_Ustinov_Parking ) ;
16829: LD_INT 1
16831: PPUSH
16832: LD_INT 15
16834: PPUSH
16835: CALL 77930 0 2
// MC_SetDepositsXY ( 1 , [ [ 266 , 105 , 1 ] , ] ) ;
16839: LD_INT 1
16841: PPUSH
16842: LD_INT 266
16844: PUSH
16845: LD_INT 105
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: PPUSH
16859: CALL 77050 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_laser , ru_rocket , ru_rocket_battery , ru_radar ] ) ;
16863: LD_INT 1
16865: PPUSH
16866: LD_INT 43
16868: PUSH
16869: LD_INT 46
16871: PUSH
16872: LD_INT 45
16874: PUSH
16875: LD_EXP 116
16879: PUSH
16880: LD_INT 47
16882: PUSH
16883: LD_EXP 117
16887: PUSH
16888: LD_EXP 119
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL 77818 0 2
// MC_SetCratesArea ( 1 , RU_Ustinov_Crates ) ;
16906: LD_INT 1
16908: PPUSH
16909: LD_INT 16
16911: PPUSH
16912: CALL 77498 0 2
// MC_SetTame ( 1 , RU_Ustinov_Crates ) ;
16916: LD_INT 1
16918: PPUSH
16919: LD_INT 16
16921: PPUSH
16922: CALL 77229 0 2
// MC_SetDefenderLimit ( 1 , 9 ) ;
16926: LD_INT 1
16928: PPUSH
16929: LD_INT 9
16931: PPUSH
16932: CALL 76911 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
16936: LD_INT 1
16938: PPUSH
16939: LD_INT 22
16941: PUSH
16942: LD_INT 1
16944: PUSH
16945: LD_INT 3
16947: PUSH
16948: LD_INT 43
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 22
16959: PUSH
16960: LD_INT 1
16962: PUSH
16963: LD_INT 3
16965: PUSH
16966: LD_INT 44
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 22
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: LD_INT 3
16983: PUSH
16984: LD_INT 45
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 24
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: LD_INT 45
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 24
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: LD_INT 43
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 24
17031: PUSH
17032: LD_INT 1
17034: PUSH
17035: LD_INT 3
17037: PUSH
17038: LD_INT 46
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PPUSH
17055: CALL 76665 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 36 , 29 , 2 ] , [ b_armoury , 51 , 45 , 5 ] , [ b_armoury , 33 , 45 , 0 ] , [ b_lab , 38 , 16 , 1 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 22 , 7 , 1 ] , [ b_siberite_mine , 7 , 6 , 1 ] , [ b_siberite_power , 15 , 24 , 1 ] , [ b_siberite_power , 20 , 26 , 2 ] , [ b_siberite_power , 26 , 27 , 5 ] , [ b_bunker , 27 , 42 , 0 ] , [ b_bunker , 42 , 47 , 5 ] , [ b_bunker , 49 , 48 , 5 ] , [ b_bunker , 53 , 43 , 5 ] , [ b_bunker , 54 , 39 , 4 ] , [ b_bunker , 55 , 36 , 5 ] , [ b_bunker , 53 , 31 , 4 ] , ] ) ;
17059: LD_INT 1
17061: PPUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 36
17067: PUSH
17068: LD_INT 29
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 4
17082: PUSH
17083: LD_INT 51
17085: PUSH
17086: LD_INT 45
17088: PUSH
17089: LD_INT 5
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 4
17100: PUSH
17101: LD_INT 33
17103: PUSH
17104: LD_INT 45
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 6
17118: PUSH
17119: LD_INT 38
17121: PUSH
17122: LD_INT 16
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 6
17136: PUSH
17137: LD_INT 46
17139: PUSH
17140: LD_INT 27
17142: PUSH
17143: LD_INT 5
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 24
17157: PUSH
17158: LD_INT 34
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 29
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_INT 7
17178: PUSH
17179: LD_INT 1
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 30
17190: PUSH
17191: LD_INT 7
17193: PUSH
17194: LD_INT 6
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 28
17208: PUSH
17209: LD_INT 15
17211: PUSH
17212: LD_INT 24
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 28
17226: PUSH
17227: LD_INT 20
17229: PUSH
17230: LD_INT 26
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 28
17244: PUSH
17245: LD_INT 26
17247: PUSH
17248: LD_INT 27
17250: PUSH
17251: LD_INT 5
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 32
17262: PUSH
17263: LD_INT 27
17265: PUSH
17266: LD_INT 42
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 32
17280: PUSH
17281: LD_INT 42
17283: PUSH
17284: LD_INT 47
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 32
17298: PUSH
17299: LD_INT 49
17301: PUSH
17302: LD_INT 48
17304: PUSH
17305: LD_INT 5
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 32
17316: PUSH
17317: LD_INT 53
17319: PUSH
17320: LD_INT 43
17322: PUSH
17323: LD_INT 5
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 32
17334: PUSH
17335: LD_INT 54
17337: PUSH
17338: LD_INT 39
17340: PUSH
17341: LD_INT 4
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 32
17352: PUSH
17353: LD_INT 55
17355: PUSH
17356: LD_INT 36
17358: PUSH
17359: LD_INT 5
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 32
17370: PUSH
17371: LD_INT 53
17373: PUSH
17374: LD_INT 31
17376: PUSH
17377: LD_INT 4
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL 76538 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 10
17415: PUSH
17416: LD_INT 12
17418: PUSH
17419: LD_INT 14
17421: PUSH
17422: LD_INT 11
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PPUSH
17431: CALL 77405 0 2
// MC_SetFactoryExtension ( 1 , 24 , 34 , 1 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
17435: LD_INT 1
17437: PPUSH
17438: LD_INT 24
17440: PPUSH
17441: LD_INT 34
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 16
17452: PUSH
17453: LD_INT 17
17455: PUSH
17456: LD_INT 18
17458: PUSH
17459: LD_INT 21
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PPUSH
17469: CALL 77612 0 5
// MC_SetScanArea ( 2 , RU2_Kolvich_Area ) ;
17473: LD_INT 2
17475: PPUSH
17476: LD_INT 17
17478: PPUSH
17479: CALL 77986 0 2
// MC_SetParkingArea ( 2 , RU2_Kolvich_Parking ) ;
17483: LD_INT 2
17485: PPUSH
17486: LD_INT 18
17488: PPUSH
17489: CALL 77930 0 2
// MC_SetDepositsXY ( 2 , [ [ 63 , 69 , 0 ] , [ 104 , 96 , 1 ] , [ 105 , 155 , 0 ] , [ 126 , 151 , 1 ] , ] ) ;
17493: LD_INT 2
17495: PPUSH
17496: LD_INT 63
17498: PUSH
17499: LD_INT 69
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 104
17512: PUSH
17513: LD_INT 96
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 105
17526: PUSH
17527: LD_INT 155
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 126
17540: PUSH
17541: LD_INT 151
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: PPUSH
17558: CALL 77050 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_rocket_battery , ru_flame_thrower ] ) ;
17562: LD_INT 2
17564: PPUSH
17565: LD_INT 43
17567: PUSH
17568: LD_INT 46
17570: PUSH
17571: LD_INT 45
17573: PUSH
17574: LD_INT 47
17576: PUSH
17577: LD_EXP 117
17581: PUSH
17582: LD_EXP 118
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL 77818 0 2
// MC_SetCratesArea ( 2 , RU2_Kolvich_CratesApes ) ;
17599: LD_INT 2
17601: PPUSH
17602: LD_INT 19
17604: PPUSH
17605: CALL 77498 0 2
// MC_SetTame ( 2 , RU2_Kolvich_CratesApes ) ;
17609: LD_INT 2
17611: PPUSH
17612: LD_INT 19
17614: PPUSH
17615: CALL 77229 0 2
// MC_SetDefenderLimit ( 2 , 10 ) ;
17619: LD_INT 2
17621: PPUSH
17622: LD_INT 10
17624: PPUSH
17625: CALL 76911 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
17629: LD_INT 2
17631: PPUSH
17632: LD_INT 22
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 3
17640: PUSH
17641: LD_INT 43
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 22
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: LD_INT 44
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: LD_INT 45
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 24
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: LD_INT 45
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 24
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 43
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 22
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 3
17730: PUSH
17731: LD_INT 44
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 22
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: LD_INT 3
17748: PUSH
17749: LD_INT 45
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 24
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: LD_INT 45
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 24
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: LD_INT 3
17784: PUSH
17785: LD_INT 43
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 24
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 3
17802: PUSH
17803: LD_INT 46
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL 76665 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 90 , 88 , 5 ] , [ b_armoury , 102 , 85 , 4 ] , [ b_armoury , 100 , 103 , 4 ] , [ b_lab , 70 , 90 , 0 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 63 , 69 , 1 ] , [ b_siberite_mine , 104 , 96 , 1 ] , [ b_siberite_power , 72 , 79 , 1 ] , [ b_bunker , 93 , 70 , 4 ] , [ b_bunker , 98 , 80 , 4 ] , [ b_bunker , 106 , 89 , 4 ] , [ b_bunker , 108 , 102 , 5 ] , [ b_bunker , 80 , 99 , 0 ] , ] ) ;
17828: LD_INT 2
17830: PPUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 90
17836: PUSH
17837: LD_INT 88
17839: PUSH
17840: LD_INT 5
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 4
17851: PUSH
17852: LD_INT 102
17854: PUSH
17855: LD_INT 85
17857: PUSH
17858: LD_INT 4
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 4
17869: PUSH
17870: LD_INT 100
17872: PUSH
17873: LD_INT 103
17875: PUSH
17876: LD_INT 4
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 6
17887: PUSH
17888: LD_INT 70
17890: PUSH
17891: LD_INT 90
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 6
17905: PUSH
17906: LD_INT 46
17908: PUSH
17909: LD_INT 27
17911: PUSH
17912: LD_INT 5
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 24
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 29
17941: PUSH
17942: LD_INT 63
17944: PUSH
17945: LD_INT 69
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 30
17959: PUSH
17960: LD_INT 104
17962: PUSH
17963: LD_INT 96
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 28
17977: PUSH
17978: LD_INT 72
17980: PUSH
17981: LD_INT 79
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 32
17995: PUSH
17996: LD_INT 93
17998: PUSH
17999: LD_INT 70
18001: PUSH
18002: LD_INT 4
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 32
18013: PUSH
18014: LD_INT 98
18016: PUSH
18017: LD_INT 80
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 32
18031: PUSH
18032: LD_INT 106
18034: PUSH
18035: LD_INT 89
18037: PUSH
18038: LD_INT 4
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 32
18049: PUSH
18050: LD_INT 108
18052: PUSH
18053: LD_INT 102
18055: PUSH
18056: LD_INT 5
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 32
18067: PUSH
18068: LD_INT 80
18070: PUSH
18071: LD_INT 99
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: PPUSH
18099: CALL 76538 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
18103: LD_INT 2
18105: PPUSH
18106: LD_INT 10
18108: PUSH
18109: LD_INT 12
18111: PUSH
18112: LD_INT 14
18114: PUSH
18115: LD_INT 11
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL 77405 0 2
// MC_SetFactoryExtension ( 2 , 80 , 75 , 2 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
18128: LD_INT 2
18130: PPUSH
18131: LD_INT 80
18133: PPUSH
18134: LD_INT 75
18136: PPUSH
18137: LD_INT 2
18139: PPUSH
18140: LD_INT 24
18142: PUSH
18143: LD_INT 16
18145: PUSH
18146: LD_INT 17
18148: PUSH
18149: LD_INT 18
18151: PUSH
18152: LD_INT 21
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL 77612 0 5
// end ;
18166: LD_VAR 0 1
18170: RET
// every 5 5$0 trigger KolvichAttacks do
18171: LD_EXP 24
18175: IFFALSE 18675
18177: GO 18179
18179: DISABLE
// begin enable ;
18180: ENABLE
// case Rand ( 1 , 3 ) of 1 :
18181: LD_INT 1
18183: PPUSH
18184: LD_INT 3
18186: PPUSH
18187: CALL_OW 12
18191: PUSH
18192: LD_INT 1
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18433
18200: POP
// begin RespawnAttackVehicle ( RU2_Kolvich_ArmySpawn , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , 1 ) ;
18201: LD_INT 20
18203: PPUSH
18204: LD_INT 6
18206: PPUSH
18207: LD_INT 5
18209: PPUSH
18210: LD_INT 8
18212: PPUSH
18213: CALL_OW 12
18217: PPUSH
18218: LD_EXP 59
18222: PPUSH
18223: LD_INT 3
18225: PPUSH
18226: LD_INT 3
18228: PPUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 3
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: EMPTY
18240: PPUSH
18241: LD_INT 46
18243: PUSH
18244: LD_INT 43
18246: PUSH
18247: LD_INT 44
18249: PUSH
18250: LD_INT 47
18252: PUSH
18253: LD_INT 45
18255: PUSH
18256: LD_INT 74
18258: PUSH
18259: LD_INT 75
18261: PUSH
18262: LD_INT 76
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PPUSH
18275: EMPTY
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: CALL 12305 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , RU2_Kolvich_ArmySpawn , 1 ) ;
18284: LD_INT 6
18286: PPUSH
18287: LD_INT 3
18289: PPUSH
18290: LD_INT 6
18292: PPUSH
18293: LD_INT 8
18295: PPUSH
18296: CALL_OW 12
18300: PPUSH
18301: LD_INT 0
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_INT 3
18309: PPUSH
18310: CALL_OW 12
18314: PPUSH
18315: LD_INT 0
18317: PPUSH
18318: LD_INT 2
18320: PPUSH
18321: LD_EXP 59
18325: PPUSH
18326: LD_INT 20
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL 13968 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 146 , 86 ] , [ 219 , 83 ] , [ 256 , 101 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
18336: LD_INT 0
18338: PUSH
18339: LD_EXP 56
18343: PUSH
18344: LD_INT 146
18346: PUSH
18347: LD_INT 86
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 219
18356: PUSH
18357: LD_INT 83
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 256
18366: PUSH
18367: LD_INT 101
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL 53702 0 1
// end ; 2 :
18431: GO 18675
18433: LD_INT 2
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18674
18441: POP
// begin RespawnAttackVehicle ( DvaliSpawn_N , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , 1 ) ;
18442: LD_INT 10
18444: PPUSH
18445: LD_INT 6
18447: PPUSH
18448: LD_INT 5
18450: PPUSH
18451: LD_INT 8
18453: PPUSH
18454: CALL_OW 12
18458: PPUSH
18459: LD_EXP 59
18463: PPUSH
18464: LD_INT 3
18466: PPUSH
18467: LD_INT 3
18469: PPUSH
18470: LD_INT 1
18472: PUSH
18473: LD_INT 3
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PPUSH
18480: EMPTY
18481: PPUSH
18482: LD_INT 46
18484: PUSH
18485: LD_INT 43
18487: PUSH
18488: LD_INT 44
18490: PUSH
18491: LD_INT 47
18493: PUSH
18494: LD_INT 45
18496: PUSH
18497: LD_INT 74
18499: PUSH
18500: LD_INT 75
18502: PUSH
18503: LD_INT 76
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: PPUSH
18516: EMPTY
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL 12305 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , DvaliSpawn_N , 1 ) ;
18525: LD_INT 6
18527: PPUSH
18528: LD_INT 3
18530: PPUSH
18531: LD_INT 6
18533: PPUSH
18534: LD_INT 8
18536: PPUSH
18537: CALL_OW 12
18541: PPUSH
18542: LD_INT 0
18544: PPUSH
18545: LD_INT 1
18547: PPUSH
18548: LD_INT 3
18550: PPUSH
18551: CALL_OW 12
18555: PPUSH
18556: LD_INT 0
18558: PPUSH
18559: LD_INT 2
18561: PPUSH
18562: LD_EXP 59
18566: PPUSH
18567: LD_INT 10
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: CALL 13968 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
18577: LD_INT 0
18579: PUSH
18580: LD_EXP 56
18584: PUSH
18585: LD_INT 181
18587: PUSH
18588: LD_INT 21
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 226
18597: PUSH
18598: LD_INT 72
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 225
18607: PUSH
18608: LD_INT 103
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 0
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL 53702 0 1
// end ; end ;
18672: GO 18675
18674: POP
// end ; end_of_file
18675: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18676: LD_INT 0
18678: PPUSH
18679: PPUSH
// if exist_mode then
18680: LD_VAR 0 2
18684: IFFALSE 18709
// unit := CreateCharacter ( prefix & ident ) else
18686: LD_ADDR_VAR 0 5
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_VAR 0 1
18700: STR
18701: PPUSH
18702: CALL_OW 34
18706: ST_TO_ADDR
18707: GO 18724
// unit := NewCharacter ( ident ) ;
18709: LD_ADDR_VAR 0 5
18713: PUSH
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 25
18723: ST_TO_ADDR
// result := unit ;
18724: LD_ADDR_VAR 0 4
18728: PUSH
18729: LD_VAR 0 5
18733: ST_TO_ADDR
// end ;
18734: LD_VAR 0 4
18738: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18739: LD_INT 0
18741: PPUSH
18742: PPUSH
// if not side or not nation then
18743: LD_VAR 0 1
18747: NOT
18748: PUSH
18749: LD_VAR 0 2
18753: NOT
18754: OR
18755: IFFALSE 18759
// exit ;
18757: GO 19395
// case nation of nation_american :
18759: LD_VAR 0 2
18763: PUSH
18764: LD_INT 1
18766: DOUBLE
18767: EQUAL
18768: IFTRUE 18772
18770: GO 18942
18772: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
18773: LD_ADDR_VAR 0 4
18777: PUSH
18778: LD_INT 35
18780: PUSH
18781: LD_INT 45
18783: PUSH
18784: LD_INT 46
18786: PUSH
18787: LD_INT 47
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 6
18798: PUSH
18799: LD_INT 15
18801: PUSH
18802: LD_INT 16
18804: PUSH
18805: LD_INT 7
18807: PUSH
18808: LD_INT 12
18810: PUSH
18811: LD_INT 13
18813: PUSH
18814: LD_INT 10
18816: PUSH
18817: LD_INT 14
18819: PUSH
18820: LD_INT 20
18822: PUSH
18823: LD_INT 21
18825: PUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 25
18831: PUSH
18832: LD_INT 32
18834: PUSH
18835: LD_INT 27
18837: PUSH
18838: LD_INT 36
18840: PUSH
18841: LD_INT 69
18843: PUSH
18844: LD_INT 39
18846: PUSH
18847: LD_INT 34
18849: PUSH
18850: LD_INT 40
18852: PUSH
18853: LD_INT 48
18855: PUSH
18856: LD_INT 49
18858: PUSH
18859: LD_INT 50
18861: PUSH
18862: LD_INT 51
18864: PUSH
18865: LD_INT 52
18867: PUSH
18868: LD_INT 53
18870: PUSH
18871: LD_INT 54
18873: PUSH
18874: LD_INT 55
18876: PUSH
18877: LD_INT 56
18879: PUSH
18880: LD_INT 57
18882: PUSH
18883: LD_INT 58
18885: PUSH
18886: LD_INT 59
18888: PUSH
18889: LD_INT 60
18891: PUSH
18892: LD_INT 61
18894: PUSH
18895: LD_INT 62
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: ST_TO_ADDR
18940: GO 19319
18942: LD_INT 2
18944: DOUBLE
18945: EQUAL
18946: IFTRUE 18950
18948: GO 19128
18950: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
18951: LD_ADDR_VAR 0 4
18955: PUSH
18956: LD_INT 35
18958: PUSH
18959: LD_INT 45
18961: PUSH
18962: LD_INT 46
18964: PUSH
18965: LD_INT 47
18967: PUSH
18968: LD_INT 70
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: LD_INT 11
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: LD_INT 4
18982: PUSH
18983: LD_INT 5
18985: PUSH
18986: LD_INT 6
18988: PUSH
18989: LD_INT 15
18991: PUSH
18992: LD_INT 18
18994: PUSH
18995: LD_INT 7
18997: PUSH
18998: LD_INT 17
19000: PUSH
19001: LD_INT 8
19003: PUSH
19004: LD_INT 20
19006: PUSH
19007: LD_INT 21
19009: PUSH
19010: LD_INT 22
19012: PUSH
19013: LD_INT 72
19015: PUSH
19016: LD_INT 26
19018: PUSH
19019: LD_INT 69
19021: PUSH
19022: LD_INT 39
19024: PUSH
19025: LD_INT 40
19027: PUSH
19028: LD_INT 41
19030: PUSH
19031: LD_INT 42
19033: PUSH
19034: LD_INT 43
19036: PUSH
19037: LD_INT 48
19039: PUSH
19040: LD_INT 49
19042: PUSH
19043: LD_INT 50
19045: PUSH
19046: LD_INT 51
19048: PUSH
19049: LD_INT 52
19051: PUSH
19052: LD_INT 53
19054: PUSH
19055: LD_INT 54
19057: PUSH
19058: LD_INT 55
19060: PUSH
19061: LD_INT 56
19063: PUSH
19064: LD_INT 60
19066: PUSH
19067: LD_INT 61
19069: PUSH
19070: LD_INT 62
19072: PUSH
19073: LD_INT 66
19075: PUSH
19076: LD_INT 67
19078: PUSH
19079: LD_INT 68
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
19126: GO 19319
19128: LD_INT 3
19130: DOUBLE
19131: EQUAL
19132: IFTRUE 19136
19134: GO 19318
19136: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19137: LD_ADDR_VAR 0 4
19141: PUSH
19142: LD_INT 46
19144: PUSH
19145: LD_INT 47
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 11
19156: PUSH
19157: LD_INT 9
19159: PUSH
19160: LD_INT 20
19162: PUSH
19163: LD_INT 19
19165: PUSH
19166: LD_INT 21
19168: PUSH
19169: LD_INT 24
19171: PUSH
19172: LD_INT 22
19174: PUSH
19175: LD_INT 25
19177: PUSH
19178: LD_INT 28
19180: PUSH
19181: LD_INT 29
19183: PUSH
19184: LD_INT 30
19186: PUSH
19187: LD_INT 31
19189: PUSH
19190: LD_INT 37
19192: PUSH
19193: LD_INT 38
19195: PUSH
19196: LD_INT 32
19198: PUSH
19199: LD_INT 27
19201: PUSH
19202: LD_INT 33
19204: PUSH
19205: LD_INT 69
19207: PUSH
19208: LD_INT 39
19210: PUSH
19211: LD_INT 34
19213: PUSH
19214: LD_INT 40
19216: PUSH
19217: LD_INT 71
19219: PUSH
19220: LD_INT 23
19222: PUSH
19223: LD_INT 44
19225: PUSH
19226: LD_INT 48
19228: PUSH
19229: LD_INT 49
19231: PUSH
19232: LD_INT 50
19234: PUSH
19235: LD_INT 51
19237: PUSH
19238: LD_INT 52
19240: PUSH
19241: LD_INT 53
19243: PUSH
19244: LD_INT 54
19246: PUSH
19247: LD_INT 55
19249: PUSH
19250: LD_INT 56
19252: PUSH
19253: LD_INT 57
19255: PUSH
19256: LD_INT 58
19258: PUSH
19259: LD_INT 59
19261: PUSH
19262: LD_INT 63
19264: PUSH
19265: LD_INT 64
19267: PUSH
19268: LD_INT 65
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: ST_TO_ADDR
19316: GO 19319
19318: POP
// if state > - 1 and state < 3 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: GREATER
19328: PUSH
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 3
19336: LESS
19337: AND
19338: IFFALSE 19395
// for i in result do
19340: LD_ADDR_VAR 0 5
19344: PUSH
19345: LD_VAR 0 4
19349: PUSH
19350: FOR_IN
19351: IFFALSE 19393
// if GetTech ( i , side ) <> state then
19353: LD_VAR 0 5
19357: PPUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 321
19367: PUSH
19368: LD_VAR 0 3
19372: NONEQUAL
19373: IFFALSE 19391
// result := result diff i ;
19375: LD_ADDR_VAR 0 4
19379: PUSH
19380: LD_VAR 0 4
19384: PUSH
19385: LD_VAR 0 5
19389: DIFF
19390: ST_TO_ADDR
19391: GO 19350
19393: POP
19394: POP
// end ;
19395: LD_VAR 0 4
19399: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19400: LD_INT 0
19402: PPUSH
19403: PPUSH
19404: PPUSH
// result := true ;
19405: LD_ADDR_VAR 0 3
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19413: LD_ADDR_VAR 0 5
19417: PUSH
19418: LD_VAR 0 2
19422: PPUSH
19423: CALL_OW 480
19427: ST_TO_ADDR
// if not tmp then
19428: LD_VAR 0 5
19432: NOT
19433: IFFALSE 19437
// exit ;
19435: GO 19486
// for i in tmp do
19437: LD_ADDR_VAR 0 4
19441: PUSH
19442: LD_VAR 0 5
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19484
// if GetTech ( i , side ) <> state_researched then
19450: LD_VAR 0 4
19454: PPUSH
19455: LD_VAR 0 1
19459: PPUSH
19460: CALL_OW 321
19464: PUSH
19465: LD_INT 2
19467: NONEQUAL
19468: IFFALSE 19482
// begin result := false ;
19470: LD_ADDR_VAR 0 3
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// exit ;
19478: POP
19479: POP
19480: GO 19486
// end ;
19482: GO 19447
19484: POP
19485: POP
// end ;
19486: LD_VAR 0 3
19490: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
19501: PPUSH
19502: PPUSH
19503: PPUSH
19504: PPUSH
19505: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19506: LD_VAR 0 1
19510: NOT
19511: PUSH
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 257
19521: PUSH
19522: LD_INT 9
19524: NONEQUAL
19525: OR
19526: IFFALSE 19530
// exit ;
19528: GO 20103
// side := GetSide ( unit ) ;
19530: LD_ADDR_VAR 0 9
19534: PUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 255
19544: ST_TO_ADDR
// tech_space := tech_spacanom ;
19545: LD_ADDR_VAR 0 12
19549: PUSH
19550: LD_INT 29
19552: ST_TO_ADDR
// tech_time := tech_taurad ;
19553: LD_ADDR_VAR 0 13
19557: PUSH
19558: LD_INT 28
19560: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19561: LD_ADDR_VAR 0 11
19565: PUSH
19566: LD_VAR 0 1
19570: PPUSH
19571: CALL_OW 310
19575: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19576: LD_VAR 0 11
19580: PPUSH
19581: CALL_OW 247
19585: PUSH
19586: LD_INT 2
19588: EQUAL
19589: IFFALSE 19593
// exit ;
19591: GO 20103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19593: LD_ADDR_VAR 0 8
19597: PUSH
19598: LD_INT 81
19600: PUSH
19601: LD_VAR 0 9
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 3
19612: PUSH
19613: LD_INT 21
19615: PUSH
19616: LD_INT 3
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PPUSH
19631: CALL_OW 69
19635: ST_TO_ADDR
// if not tmp then
19636: LD_VAR 0 8
19640: NOT
19641: IFFALSE 19645
// exit ;
19643: GO 20103
// if in_unit then
19645: LD_VAR 0 11
19649: IFFALSE 19673
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19651: LD_ADDR_VAR 0 10
19655: PUSH
19656: LD_VAR 0 8
19660: PPUSH
19661: LD_VAR 0 11
19665: PPUSH
19666: CALL_OW 74
19670: ST_TO_ADDR
19671: GO 19693
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19673: LD_ADDR_VAR 0 10
19677: PUSH
19678: LD_VAR 0 8
19682: PPUSH
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 74
19692: ST_TO_ADDR
// if not enemy then
19693: LD_VAR 0 10
19697: NOT
19698: IFFALSE 19702
// exit ;
19700: GO 20103
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19702: LD_VAR 0 11
19706: PUSH
19707: LD_VAR 0 11
19711: PPUSH
19712: LD_VAR 0 10
19716: PPUSH
19717: CALL_OW 296
19721: PUSH
19722: LD_INT 13
19724: GREATER
19725: AND
19726: PUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: LD_VAR 0 10
19736: PPUSH
19737: CALL_OW 296
19741: PUSH
19742: LD_INT 12
19744: GREATER
19745: OR
19746: IFFALSE 19750
// exit ;
19748: GO 20103
// missile := [ 1 ] ;
19750: LD_ADDR_VAR 0 14
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19761: LD_VAR 0 9
19765: PPUSH
19766: LD_VAR 0 12
19770: PPUSH
19771: CALL_OW 325
19775: IFFALSE 19804
// missile := Insert ( missile , missile + 1 , 2 ) ;
19777: LD_ADDR_VAR 0 14
19781: PUSH
19782: LD_VAR 0 14
19786: PPUSH
19787: LD_VAR 0 14
19791: PUSH
19792: LD_INT 1
19794: PLUS
19795: PPUSH
19796: LD_INT 2
19798: PPUSH
19799: CALL_OW 2
19803: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19804: LD_VAR 0 9
19808: PPUSH
19809: LD_VAR 0 13
19813: PPUSH
19814: CALL_OW 325
19818: PUSH
19819: LD_VAR 0 10
19823: PPUSH
19824: CALL_OW 255
19828: PPUSH
19829: LD_VAR 0 13
19833: PPUSH
19834: CALL_OW 325
19838: NOT
19839: AND
19840: IFFALSE 19869
// missile := Insert ( missile , missile + 1 , 3 ) ;
19842: LD_ADDR_VAR 0 14
19846: PUSH
19847: LD_VAR 0 14
19851: PPUSH
19852: LD_VAR 0 14
19856: PUSH
19857: LD_INT 1
19859: PLUS
19860: PPUSH
19861: LD_INT 3
19863: PPUSH
19864: CALL_OW 2
19868: ST_TO_ADDR
// if missile < 2 then
19869: LD_VAR 0 14
19873: PUSH
19874: LD_INT 2
19876: LESS
19877: IFFALSE 19881
// exit ;
19879: GO 20103
// x := GetX ( enemy ) ;
19881: LD_ADDR_VAR 0 4
19885: PUSH
19886: LD_VAR 0 10
19890: PPUSH
19891: CALL_OW 250
19895: ST_TO_ADDR
// y := GetY ( enemy ) ;
19896: LD_ADDR_VAR 0 5
19900: PUSH
19901: LD_VAR 0 10
19905: PPUSH
19906: CALL_OW 251
19910: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19911: LD_ADDR_VAR 0 6
19915: PUSH
19916: LD_VAR 0 4
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 12
19932: PLUS
19933: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19934: LD_ADDR_VAR 0 7
19938: PUSH
19939: LD_VAR 0 5
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PPUSH
19948: LD_INT 1
19950: PPUSH
19951: CALL_OW 12
19955: PLUS
19956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19957: LD_VAR 0 6
19961: PPUSH
19962: LD_VAR 0 7
19966: PPUSH
19967: CALL_OW 488
19971: NOT
19972: IFFALSE 19994
// begin _x := x ;
19974: LD_ADDR_VAR 0 6
19978: PUSH
19979: LD_VAR 0 4
19983: ST_TO_ADDR
// _y := y ;
19984: LD_ADDR_VAR 0 7
19988: PUSH
19989: LD_VAR 0 5
19993: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19994: LD_ADDR_VAR 0 3
19998: PUSH
19999: LD_INT 1
20001: PPUSH
20002: LD_VAR 0 14
20006: PPUSH
20007: CALL_OW 12
20011: ST_TO_ADDR
// case i of 1 :
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 1
20019: DOUBLE
20020: EQUAL
20021: IFTRUE 20025
20023: GO 20042
20025: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20026: LD_VAR 0 1
20030: PPUSH
20031: LD_VAR 0 10
20035: PPUSH
20036: CALL_OW 115
20040: GO 20103
20042: LD_INT 2
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20072
20050: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_VAR 0 6
20060: PPUSH
20061: LD_VAR 0 7
20065: PPUSH
20066: CALL_OW 153
20070: GO 20103
20072: LD_INT 3
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20102
20080: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20081: LD_VAR 0 1
20085: PPUSH
20086: LD_VAR 0 6
20090: PPUSH
20091: LD_VAR 0 7
20095: PPUSH
20096: CALL_OW 154
20100: GO 20103
20102: POP
// end ;
20103: LD_VAR 0 2
20107: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20108: LD_INT 0
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
// if not unit or not building then
20116: LD_VAR 0 1
20120: NOT
20121: PUSH
20122: LD_VAR 0 2
20126: NOT
20127: OR
20128: IFFALSE 20132
// exit ;
20130: GO 20290
// x := GetX ( building ) ;
20132: LD_ADDR_VAR 0 5
20136: PUSH
20137: LD_VAR 0 2
20141: PPUSH
20142: CALL_OW 250
20146: ST_TO_ADDR
// y := GetY ( building ) ;
20147: LD_ADDR_VAR 0 6
20151: PUSH
20152: LD_VAR 0 2
20156: PPUSH
20157: CALL_OW 251
20161: ST_TO_ADDR
// for i = 0 to 5 do
20162: LD_ADDR_VAR 0 4
20166: PUSH
20167: DOUBLE
20168: LD_INT 0
20170: DEC
20171: ST_TO_ADDR
20172: LD_INT 5
20174: PUSH
20175: FOR_TO
20176: IFFALSE 20288
// begin _x := ShiftX ( x , i , 3 ) ;
20178: LD_ADDR_VAR 0 7
20182: PUSH
20183: LD_VAR 0 5
20187: PPUSH
20188: LD_VAR 0 4
20192: PPUSH
20193: LD_INT 3
20195: PPUSH
20196: CALL_OW 272
20200: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20201: LD_ADDR_VAR 0 8
20205: PUSH
20206: LD_VAR 0 6
20210: PPUSH
20211: LD_VAR 0 4
20215: PPUSH
20216: LD_INT 3
20218: PPUSH
20219: CALL_OW 273
20223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20224: LD_VAR 0 7
20228: PPUSH
20229: LD_VAR 0 8
20233: PPUSH
20234: CALL_OW 488
20238: NOT
20239: IFFALSE 20243
// continue ;
20241: GO 20175
// if HexInfo ( _x , _y ) = 0 then
20243: LD_VAR 0 7
20247: PPUSH
20248: LD_VAR 0 8
20252: PPUSH
20253: CALL_OW 428
20257: PUSH
20258: LD_INT 0
20260: EQUAL
20261: IFFALSE 20286
// begin ComMoveXY ( unit , _x , _y ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_VAR 0 7
20272: PPUSH
20273: LD_VAR 0 8
20277: PPUSH
20278: CALL_OW 111
// exit ;
20282: POP
20283: POP
20284: GO 20290
// end ; end ;
20286: GO 20175
20288: POP
20289: POP
// end ;
20290: LD_VAR 0 3
20294: RET
// export function ScanBase ( side , base_area ) ; begin
20295: LD_INT 0
20297: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20298: LD_ADDR_VAR 0 3
20302: PUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: LD_INT 81
20310: PUSH
20311: LD_VAR 0 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 70
20324: ST_TO_ADDR
// end ;
20325: LD_VAR 0 3
20329: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20330: LD_INT 0
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20337: LD_VAR 0 1
20341: NOT
20342: PUSH
20343: LD_EXP 69
20347: PUSH
20348: LD_VAR 0 1
20352: ARRAY
20353: NOT
20354: OR
20355: PUSH
20356: LD_VAR 0 2
20360: NOT
20361: OR
20362: PUSH
20363: LD_VAR 0 3
20367: NOT
20368: OR
20369: IFFALSE 20373
// exit ;
20371: GO 20823
// side := mc_sides [ base ] ;
20373: LD_ADDR_VAR 0 6
20377: PUSH
20378: LD_EXP 95
20382: PUSH
20383: LD_VAR 0 1
20387: ARRAY
20388: ST_TO_ADDR
// if not side then
20389: LD_VAR 0 6
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20823
// for i in solds do
20398: LD_ADDR_VAR 0 7
20402: PUSH
20403: LD_VAR 0 2
20407: PUSH
20408: FOR_IN
20409: IFFALSE 20470
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
20411: LD_VAR 0 7
20415: PPUSH
20416: CALL_OW 310
20420: PPUSH
20421: CALL_OW 266
20425: PUSH
20426: LD_INT 32
20428: PUSH
20429: LD_INT 31
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: IN
20436: IFFALSE 20456
// solds := solds diff i else
20438: LD_ADDR_VAR 0 2
20442: PUSH
20443: LD_VAR 0 2
20447: PUSH
20448: LD_VAR 0 7
20452: DIFF
20453: ST_TO_ADDR
20454: GO 20468
// SetTag ( i , 18 ) ;
20456: LD_VAR 0 7
20460: PPUSH
20461: LD_INT 18
20463: PPUSH
20464: CALL_OW 109
20468: GO 20408
20470: POP
20471: POP
// if not solds then
20472: LD_VAR 0 2
20476: NOT
20477: IFFALSE 20481
// exit ;
20479: GO 20823
// repeat wait ( 0 0$1 ) ;
20481: LD_INT 35
20483: PPUSH
20484: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
20488: LD_ADDR_VAR 0 5
20492: PUSH
20493: LD_VAR 0 6
20497: PPUSH
20498: LD_VAR 0 3
20502: PPUSH
20503: CALL 20295 0 2
20507: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
20508: LD_VAR 0 5
20512: NOT
20513: PUSH
20514: LD_VAR 0 5
20518: PUSH
20519: LD_INT 3
20521: GREATER
20522: OR
20523: PUSH
20524: LD_EXP 91
20528: PUSH
20529: LD_VAR 0 1
20533: ARRAY
20534: OR
20535: IFFALSE 20576
// begin for i in solds do
20537: LD_ADDR_VAR 0 7
20541: PUSH
20542: LD_VAR 0 2
20546: PUSH
20547: FOR_IN
20548: IFFALSE 20572
// if HasTask ( i ) then
20550: LD_VAR 0 7
20554: PPUSH
20555: CALL_OW 314
20559: IFFALSE 20570
// ComStop ( i ) ;
20561: LD_VAR 0 7
20565: PPUSH
20566: CALL_OW 141
20570: GO 20547
20572: POP
20573: POP
// break ;
20574: GO 20811
// end ; for i in solds do
20576: LD_ADDR_VAR 0 7
20580: PUSH
20581: LD_VAR 0 2
20585: PUSH
20586: FOR_IN
20587: IFFALSE 20803
// begin if IsInUnit ( i ) then
20589: LD_VAR 0 7
20593: PPUSH
20594: CALL_OW 310
20598: IFFALSE 20609
// ComExitBuilding ( i ) ;
20600: LD_VAR 0 7
20604: PPUSH
20605: CALL_OW 122
// if GetLives ( i ) > 333 then
20609: LD_VAR 0 7
20613: PPUSH
20614: CALL_OW 256
20618: PUSH
20619: LD_INT 333
20621: GREATER
20622: IFFALSE 20650
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20624: LD_VAR 0 7
20628: PPUSH
20629: LD_VAR 0 5
20633: PPUSH
20634: LD_VAR 0 7
20638: PPUSH
20639: CALL_OW 74
20643: PPUSH
20644: CALL_OW 115
20648: GO 20801
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
20650: LD_ADDR_VAR 0 8
20654: PUSH
20655: LD_EXP 69
20659: PUSH
20660: LD_VAR 0 1
20664: ARRAY
20665: PPUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 30
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 30
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 30
20691: PUSH
20692: LD_INT 6
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: PPUSH
20705: CALL_OW 72
20709: PPUSH
20710: LD_VAR 0 7
20714: PPUSH
20715: CALL_OW 74
20719: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
20720: LD_VAR 0 7
20724: PPUSH
20725: LD_VAR 0 8
20729: PPUSH
20730: CALL_OW 250
20734: PPUSH
20735: LD_INT 3
20737: PPUSH
20738: LD_INT 5
20740: PPUSH
20741: CALL_OW 272
20745: PPUSH
20746: LD_VAR 0 8
20750: PPUSH
20751: CALL_OW 251
20755: PPUSH
20756: LD_INT 3
20758: PPUSH
20759: LD_INT 5
20761: PPUSH
20762: CALL_OW 273
20766: PPUSH
20767: CALL_OW 111
// SetTag ( i , 0 ) ;
20771: LD_VAR 0 7
20775: PPUSH
20776: LD_INT 0
20778: PPUSH
20779: CALL_OW 109
// solds := solds diff i ;
20783: LD_ADDR_VAR 0 2
20787: PUSH
20788: LD_VAR 0 2
20792: PUSH
20793: LD_VAR 0 7
20797: DIFF
20798: ST_TO_ADDR
// continue ;
20799: GO 20586
// end ; end ;
20801: GO 20586
20803: POP
20804: POP
// until solds ;
20805: LD_VAR 0 2
20809: IFFALSE 20481
// MC_Reset ( base , 18 ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_INT 18
20818: PPUSH
20819: CALL 63614 0 2
// end ;
20823: LD_VAR 0 4
20827: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
20835: PPUSH
20836: PPUSH
20837: PPUSH
20838: PPUSH
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20846: LD_ADDR_VAR 0 12
20850: PUSH
20851: LD_EXP 69
20855: PUSH
20856: LD_VAR 0 1
20860: ARRAY
20861: PPUSH
20862: LD_INT 25
20864: PUSH
20865: LD_INT 3
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PPUSH
20872: CALL_OW 72
20876: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20877: LD_ADDR_VAR 0 8
20881: PUSH
20882: LD_EXP 69
20886: PUSH
20887: LD_VAR 0 1
20891: ARRAY
20892: PPUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 25
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 25
20908: PUSH
20909: LD_INT 5
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 25
20918: PUSH
20919: LD_INT 8
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 25
20928: PUSH
20929: LD_INT 9
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 72
20947: ST_TO_ADDR
// if not defenders and not solds then
20948: LD_VAR 0 2
20952: NOT
20953: PUSH
20954: LD_VAR 0 8
20958: NOT
20959: AND
20960: IFFALSE 20964
// exit ;
20962: GO 22330
// depot_under_attack := false ;
20964: LD_ADDR_VAR 0 16
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sold_defenders := [ ] ;
20972: LD_ADDR_VAR 0 17
20976: PUSH
20977: EMPTY
20978: ST_TO_ADDR
// if mechs then
20979: LD_VAR 0 12
20983: IFFALSE 21112
// for i in defenders do
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_VAR 0 2
20994: PUSH
20995: FOR_IN
20996: IFFALSE 21110
// begin SetTag ( i , 20 ) ;
20998: LD_VAR 0 5
21002: PPUSH
21003: LD_INT 20
21005: PPUSH
21006: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21010: LD_VAR 0 5
21014: PPUSH
21015: CALL_OW 263
21019: PUSH
21020: LD_INT 1
21022: EQUAL
21023: PUSH
21024: LD_VAR 0 5
21028: PPUSH
21029: CALL_OW 311
21033: NOT
21034: AND
21035: PUSH
21036: LD_VAR 0 12
21040: AND
21041: IFFALSE 21108
// begin un := mechs [ 1 ] ;
21043: LD_ADDR_VAR 0 10
21047: PUSH
21048: LD_VAR 0 12
21052: PUSH
21053: LD_INT 1
21055: ARRAY
21056: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21057: LD_VAR 0 10
21061: PPUSH
21062: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21066: LD_VAR 0 10
21070: PPUSH
21071: LD_VAR 0 5
21075: PPUSH
21076: CALL_OW 180
// SetTag ( un , 19 ) ;
21080: LD_VAR 0 10
21084: PPUSH
21085: LD_INT 19
21087: PPUSH
21088: CALL_OW 109
// mechs := mechs diff un ;
21092: LD_ADDR_VAR 0 12
21096: PUSH
21097: LD_VAR 0 12
21101: PUSH
21102: LD_VAR 0 10
21106: DIFF
21107: ST_TO_ADDR
// end ; end ;
21108: GO 20995
21110: POP
21111: POP
// if solds then
21112: LD_VAR 0 8
21116: IFFALSE 21175
// for i in solds do
21118: LD_ADDR_VAR 0 5
21122: PUSH
21123: LD_VAR 0 8
21127: PUSH
21128: FOR_IN
21129: IFFALSE 21173
// if not GetTag ( i ) then
21131: LD_VAR 0 5
21135: PPUSH
21136: CALL_OW 110
21140: NOT
21141: IFFALSE 21171
// begin defenders := defenders union i ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_VAR 0 2
21152: PUSH
21153: LD_VAR 0 5
21157: UNION
21158: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21159: LD_VAR 0 5
21163: PPUSH
21164: LD_INT 18
21166: PPUSH
21167: CALL_OW 109
// end ;
21171: GO 21128
21173: POP
21174: POP
// repeat wait ( 0 0$1 ) ;
21175: LD_INT 35
21177: PPUSH
21178: CALL_OW 67
// enemy := mc_scan [ base ] ;
21182: LD_ADDR_VAR 0 3
21186: PUSH
21187: LD_EXP 92
21191: PUSH
21192: LD_VAR 0 1
21196: ARRAY
21197: ST_TO_ADDR
// for i in defenders do
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: LD_VAR 0 2
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21894
// begin e := NearestUnitToUnit ( enemy , i ) ;
21211: LD_ADDR_VAR 0 13
21215: PUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_VAR 0 5
21225: PPUSH
21226: CALL_OW 74
21230: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21231: LD_ADDR_VAR 0 16
21235: PUSH
21236: LD_EXP 69
21240: PUSH
21241: LD_VAR 0 1
21245: ARRAY
21246: PPUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 30
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: PPUSH
21275: CALL_OW 72
21279: NOT
21280: PUSH
21281: LD_EXP 69
21285: PUSH
21286: LD_VAR 0 1
21290: ARRAY
21291: PPUSH
21292: LD_INT 2
21294: PUSH
21295: LD_INT 30
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 72
21324: PPUSH
21325: CALL_OW 256
21329: PUSH
21330: LD_INT 600
21332: LESS
21333: OR
21334: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21335: LD_VAR 0 5
21339: PPUSH
21340: CALL_OW 247
21344: PUSH
21345: LD_INT 2
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21600
21353: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
21354: LD_VAR 0 5
21358: PPUSH
21359: CALL_OW 256
21363: PUSH
21364: LD_INT 650
21366: GREATER
21367: PUSH
21368: LD_VAR 0 5
21372: PPUSH
21373: LD_VAR 0 13
21377: PPUSH
21378: CALL_OW 296
21382: PUSH
21383: LD_INT 40
21385: LESS
21386: AND
21387: IFFALSE 21405
// ComAttackUnit ( i , e ) else
21389: LD_VAR 0 5
21393: PPUSH
21394: LD_VAR 0 13
21398: PPUSH
21399: CALL_OW 115
21403: GO 21483
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
21405: LD_VAR 0 5
21409: PPUSH
21410: LD_VAR 0 13
21414: PPUSH
21415: CALL_OW 296
21419: PUSH
21420: LD_INT 30
21422: GREATEREQUAL
21423: PUSH
21424: LD_VAR 0 5
21428: PPUSH
21429: CALL_OW 256
21433: PUSH
21434: LD_INT 650
21436: LESSEQUAL
21437: OR
21438: PUSH
21439: LD_VAR 0 5
21443: PPUSH
21444: LD_EXP 93
21448: PUSH
21449: LD_VAR 0 1
21453: ARRAY
21454: PPUSH
21455: CALL_OW 308
21459: NOT
21460: AND
21461: IFFALSE 21483
// ComMoveToArea ( i , mc_parking [ base ] ) ;
21463: LD_VAR 0 5
21467: PPUSH
21468: LD_EXP 93
21472: PUSH
21473: LD_VAR 0 1
21477: ARRAY
21478: PPUSH
21479: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
21483: LD_VAR 0 5
21487: PPUSH
21488: CALL_OW 256
21492: PUSH
21493: LD_INT 998
21495: LESS
21496: PUSH
21497: LD_VAR 0 5
21501: PPUSH
21502: CALL_OW 263
21506: PUSH
21507: LD_INT 1
21509: EQUAL
21510: AND
21511: PUSH
21512: LD_VAR 0 5
21516: PPUSH
21517: CALL_OW 311
21521: AND
21522: PUSH
21523: LD_VAR 0 5
21527: PPUSH
21528: LD_EXP 93
21532: PUSH
21533: LD_VAR 0 1
21537: ARRAY
21538: PPUSH
21539: CALL_OW 308
21543: AND
21544: IFFALSE 21598
// begin mech := IsDrivenBy ( i ) ;
21546: LD_ADDR_VAR 0 9
21550: PUSH
21551: LD_VAR 0 5
21555: PPUSH
21556: CALL_OW 311
21560: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21561: LD_VAR 0 9
21565: PPUSH
21566: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21570: LD_VAR 0 9
21574: PPUSH
21575: LD_VAR 0 5
21579: PPUSH
21580: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
21584: LD_VAR 0 9
21588: PPUSH
21589: LD_VAR 0 5
21593: PPUSH
21594: CALL_OW 180
// end ; end ; unit_human :
21598: GO 21865
21600: LD_INT 1
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21864
21608: POP
// begin b := IsInUnit ( i ) ;
21609: LD_ADDR_VAR 0 18
21613: PUSH
21614: LD_VAR 0 5
21618: PPUSH
21619: CALL_OW 310
21623: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
21624: LD_ADDR_VAR 0 19
21628: PUSH
21629: LD_VAR 0 18
21633: NOT
21634: PUSH
21635: LD_VAR 0 18
21639: PPUSH
21640: CALL_OW 266
21644: PUSH
21645: LD_INT 32
21647: PUSH
21648: LD_INT 31
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: IN
21655: OR
21656: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
21657: LD_VAR 0 16
21661: PUSH
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_INT 21
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 72
21681: PUSH
21682: LD_INT 1
21684: LESSEQUAL
21685: OR
21686: PUSH
21687: LD_VAR 0 19
21691: AND
21692: PUSH
21693: LD_VAR 0 5
21697: PUSH
21698: LD_VAR 0 17
21702: IN
21703: NOT
21704: AND
21705: IFFALSE 21798
// begin if b then
21707: LD_VAR 0 18
21711: IFFALSE 21760
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
21713: LD_VAR 0 18
21717: PPUSH
21718: LD_VAR 0 3
21722: PPUSH
21723: LD_VAR 0 18
21727: PPUSH
21728: CALL_OW 74
21732: PPUSH
21733: CALL_OW 296
21737: PUSH
21738: LD_INT 10
21740: LESS
21741: PUSH
21742: LD_VAR 0 18
21746: PPUSH
21747: CALL_OW 461
21751: PUSH
21752: LD_INT 7
21754: NONEQUAL
21755: AND
21756: IFFALSE 21760
// continue ;
21758: GO 21208
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
21760: LD_ADDR_VAR 0 17
21764: PUSH
21765: LD_VAR 0 17
21769: PPUSH
21770: LD_VAR 0 17
21774: PUSH
21775: LD_INT 1
21777: PLUS
21778: PPUSH
21779: LD_VAR 0 5
21783: PPUSH
21784: CALL_OW 1
21788: ST_TO_ADDR
// ComExitBuilding ( i ) ;
21789: LD_VAR 0 5
21793: PPUSH
21794: CALL_OW 122
// end ; if sold_defenders then
21798: LD_VAR 0 17
21802: IFFALSE 21862
// if i in sold_defenders then
21804: LD_VAR 0 5
21808: PUSH
21809: LD_VAR 0 17
21813: IN
21814: IFFALSE 21862
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
21816: LD_VAR 0 5
21820: PPUSH
21821: CALL_OW 314
21825: NOT
21826: PUSH
21827: LD_VAR 0 5
21831: PPUSH
21832: LD_VAR 0 13
21836: PPUSH
21837: CALL_OW 296
21841: PUSH
21842: LD_INT 30
21844: LESS
21845: AND
21846: IFFALSE 21862
// ComAttackUnit ( i , e ) ;
21848: LD_VAR 0 5
21852: PPUSH
21853: LD_VAR 0 13
21857: PPUSH
21858: CALL_OW 115
// end ; end ; end ;
21862: GO 21865
21864: POP
// if IsDead ( i ) then
21865: LD_VAR 0 5
21869: PPUSH
21870: CALL_OW 301
21874: IFFALSE 21892
// defenders := defenders diff i ;
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_VAR 0 2
21885: PUSH
21886: LD_VAR 0 5
21890: DIFF
21891: ST_TO_ADDR
// end ;
21892: GO 21208
21894: POP
21895: POP
// until not enemy or not defenders ;
21896: LD_VAR 0 3
21900: NOT
21901: PUSH
21902: LD_VAR 0 2
21906: NOT
21907: OR
21908: IFFALSE 21175
// MC_Reset ( base , 18 ) ;
21910: LD_VAR 0 1
21914: PPUSH
21915: LD_INT 18
21917: PPUSH
21918: CALL 63614 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_VAR 0 2
21931: PUSH
21932: LD_VAR 0 2
21936: PPUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 25
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 25
21952: PUSH
21953: LD_INT 5
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 8
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 9
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 72
21991: DIFF
21992: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
21993: LD_VAR 0 3
21997: NOT
21998: PUSH
21999: LD_VAR 0 2
22003: PPUSH
22004: LD_INT 21
22006: PUSH
22007: LD_INT 2
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 72
22018: AND
22019: IFFALSE 22281
// begin tmp := FilterByTag ( defenders , 19 ) ;
22021: LD_ADDR_VAR 0 11
22025: PUSH
22026: LD_VAR 0 2
22030: PPUSH
22031: LD_INT 19
22033: PPUSH
22034: CALL 58446 0 2
22038: ST_TO_ADDR
// if tmp then
22039: LD_VAR 0 11
22043: IFFALSE 22113
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22045: LD_ADDR_VAR 0 11
22049: PUSH
22050: LD_VAR 0 11
22054: PPUSH
22055: LD_INT 25
22057: PUSH
22058: LD_INT 3
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PPUSH
22065: CALL_OW 72
22069: ST_TO_ADDR
// if tmp then
22070: LD_VAR 0 11
22074: IFFALSE 22113
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22076: LD_ADDR_EXP 81
22080: PUSH
22081: LD_EXP 81
22085: PPUSH
22086: LD_VAR 0 1
22090: PPUSH
22091: LD_EXP 81
22095: PUSH
22096: LD_VAR 0 1
22100: ARRAY
22101: PUSH
22102: LD_VAR 0 11
22106: UNION
22107: PPUSH
22108: CALL_OW 1
22112: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22113: LD_VAR 0 1
22117: PPUSH
22118: LD_INT 19
22120: PPUSH
22121: CALL 63614 0 2
// repeat wait ( 0 0$1 ) ;
22125: LD_INT 35
22127: PPUSH
22128: CALL_OW 67
// for i in defenders do
22132: LD_ADDR_VAR 0 5
22136: PUSH
22137: LD_VAR 0 2
22141: PUSH
22142: FOR_IN
22143: IFFALSE 22232
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22145: LD_VAR 0 5
22149: PPUSH
22150: LD_EXP 93
22154: PUSH
22155: LD_VAR 0 1
22159: ARRAY
22160: PPUSH
22161: CALL_OW 308
22165: NOT
22166: IFFALSE 22190
// ComMoveToArea ( i , mc_parking [ base ] ) else
22168: LD_VAR 0 5
22172: PPUSH
22173: LD_EXP 93
22177: PUSH
22178: LD_VAR 0 1
22182: ARRAY
22183: PPUSH
22184: CALL_OW 113
22188: GO 22230
// if GetControl ( i ) = control_manual then
22190: LD_VAR 0 5
22194: PPUSH
22195: CALL_OW 263
22199: PUSH
22200: LD_INT 1
22202: EQUAL
22203: IFFALSE 22230
// if IsDrivenBy ( i ) then
22205: LD_VAR 0 5
22209: PPUSH
22210: CALL_OW 311
22214: IFFALSE 22230
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22216: LD_VAR 0 5
22220: PPUSH
22221: CALL_OW 311
22225: PPUSH
22226: CALL_OW 121
// end ;
22230: GO 22142
22232: POP
22233: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22234: LD_VAR 0 2
22238: PPUSH
22239: LD_INT 95
22241: PUSH
22242: LD_EXP 93
22246: PUSH
22247: LD_VAR 0 1
22251: ARRAY
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 72
22261: PUSH
22262: LD_VAR 0 2
22266: EQUAL
22267: PUSH
22268: LD_EXP 92
22272: PUSH
22273: LD_VAR 0 1
22277: ARRAY
22278: OR
22279: IFFALSE 22125
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
22281: LD_ADDR_EXP 91
22285: PUSH
22286: LD_EXP 91
22290: PPUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: LD_EXP 91
22300: PUSH
22301: LD_VAR 0 1
22305: ARRAY
22306: PUSH
22307: LD_VAR 0 2
22311: UNION
22312: PPUSH
22313: CALL_OW 1
22317: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_INT 20
22325: PPUSH
22326: CALL 63614 0 2
// end ;
22330: LD_VAR 0 4
22334: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22335: LD_INT 0
22337: PPUSH
22338: PPUSH
22339: PPUSH
22340: PPUSH
// result := false ;
22341: LD_ADDR_VAR 0 2
22345: PUSH
22346: LD_INT 0
22348: ST_TO_ADDR
// side := GetSide ( unit ) ;
22349: LD_ADDR_VAR 0 3
22353: PUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: CALL_OW 255
22363: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 248
22378: ST_TO_ADDR
// case nat of 1 :
22379: LD_VAR 0 4
22383: PUSH
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22403
22392: POP
// tech := tech_lassight ; 2 :
22393: LD_ADDR_VAR 0 5
22397: PUSH
22398: LD_INT 12
22400: ST_TO_ADDR
22401: GO 22442
22403: LD_INT 2
22405: DOUBLE
22406: EQUAL
22407: IFTRUE 22411
22409: GO 22422
22411: POP
// tech := tech_mortar ; 3 :
22412: LD_ADDR_VAR 0 5
22416: PUSH
22417: LD_INT 41
22419: ST_TO_ADDR
22420: GO 22442
22422: LD_INT 3
22424: DOUBLE
22425: EQUAL
22426: IFTRUE 22430
22428: GO 22441
22430: POP
// tech := tech_bazooka ; end ;
22431: LD_ADDR_VAR 0 5
22435: PUSH
22436: LD_INT 44
22438: ST_TO_ADDR
22439: GO 22442
22441: POP
// if Researched ( side , tech ) then
22442: LD_VAR 0 3
22446: PPUSH
22447: LD_VAR 0 5
22451: PPUSH
22452: CALL_OW 325
22456: IFFALSE 22483
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22458: LD_ADDR_VAR 0 2
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 8
22468: PUSH
22469: LD_INT 9
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_VAR 0 4
22481: ARRAY
22482: ST_TO_ADDR
// end ;
22483: LD_VAR 0 2
22487: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
22492: PPUSH
// if not mines then
22493: LD_VAR 0 2
22497: NOT
22498: IFFALSE 22502
// exit ;
22500: GO 22646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22502: LD_ADDR_VAR 0 5
22506: PUSH
22507: LD_INT 81
22509: PUSH
22510: LD_VAR 0 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: LD_INT 21
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PPUSH
22540: CALL_OW 69
22544: ST_TO_ADDR
// for i in mines do
22545: LD_ADDR_VAR 0 4
22549: PUSH
22550: LD_VAR 0 2
22554: PUSH
22555: FOR_IN
22556: IFFALSE 22644
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22558: LD_VAR 0 4
22562: PUSH
22563: LD_INT 1
22565: ARRAY
22566: PPUSH
22567: LD_VAR 0 4
22571: PUSH
22572: LD_INT 2
22574: ARRAY
22575: PPUSH
22576: CALL_OW 458
22580: NOT
22581: IFFALSE 22585
// continue ;
22583: GO 22555
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22585: LD_VAR 0 4
22589: PUSH
22590: LD_INT 1
22592: ARRAY
22593: PPUSH
22594: LD_VAR 0 4
22598: PUSH
22599: LD_INT 2
22601: ARRAY
22602: PPUSH
22603: CALL_OW 428
22607: PUSH
22608: LD_VAR 0 5
22612: IN
22613: IFFALSE 22642
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22615: LD_VAR 0 4
22619: PUSH
22620: LD_INT 1
22622: ARRAY
22623: PPUSH
22624: LD_VAR 0 4
22628: PUSH
22629: LD_INT 2
22631: ARRAY
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 456
// end ;
22642: GO 22555
22644: POP
22645: POP
// end ;
22646: LD_VAR 0 3
22650: RET
// export function Count ( array ) ; var i ; begin
22651: LD_INT 0
22653: PPUSH
22654: PPUSH
// result := 0 ;
22655: LD_ADDR_VAR 0 2
22659: PUSH
22660: LD_INT 0
22662: ST_TO_ADDR
// for i in array do
22663: LD_ADDR_VAR 0 3
22667: PUSH
22668: LD_VAR 0 1
22672: PUSH
22673: FOR_IN
22674: IFFALSE 22698
// if i then
22676: LD_VAR 0 3
22680: IFFALSE 22696
// result := result + 1 ;
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: LD_INT 1
22694: PLUS
22695: ST_TO_ADDR
22696: GO 22673
22698: POP
22699: POP
// end ;
22700: LD_VAR 0 2
22704: RET
// export function IsEmpty ( building ) ; begin
22705: LD_INT 0
22707: PPUSH
// if not building then
22708: LD_VAR 0 1
22712: NOT
22713: IFFALSE 22717
// exit ;
22715: GO 22760
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22717: LD_ADDR_VAR 0 2
22721: PUSH
22722: LD_VAR 0 1
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 255
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 58
22746: PUSH
22747: EMPTY
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PPUSH
22754: CALL_OW 69
22758: IN
22759: ST_TO_ADDR
// end ;
22760: LD_VAR 0 2
22764: RET
// export function IsNotFull ( building ) ; begin
22765: LD_INT 0
22767: PPUSH
// if not building then
22768: LD_VAR 0 1
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 22796
// result := UnitsInside ( building ) < 6 ;
22777: LD_ADDR_VAR 0 2
22781: PUSH
22782: LD_VAR 0 1
22786: PPUSH
22787: CALL_OW 313
22791: PUSH
22792: LD_INT 6
22794: LESS
22795: ST_TO_ADDR
// end ;
22796: LD_VAR 0 2
22800: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22801: LD_INT 0
22803: PPUSH
22804: PPUSH
22805: PPUSH
22806: PPUSH
// tmp := [ ] ;
22807: LD_ADDR_VAR 0 3
22811: PUSH
22812: EMPTY
22813: ST_TO_ADDR
// list := [ ] ;
22814: LD_ADDR_VAR 0 5
22818: PUSH
22819: EMPTY
22820: ST_TO_ADDR
// for i = 16 to 25 do
22821: LD_ADDR_VAR 0 4
22825: PUSH
22826: DOUBLE
22827: LD_INT 16
22829: DEC
22830: ST_TO_ADDR
22831: LD_INT 25
22833: PUSH
22834: FOR_TO
22835: IFFALSE 22908
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_VAR 0 3
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 255
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 91
22866: PUSH
22867: LD_VAR 0 1
22871: PUSH
22872: LD_INT 6
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 30
22882: PUSH
22883: LD_VAR 0 4
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: PPUSH
22900: CALL_OW 69
22904: ADD
22905: ST_TO_ADDR
22906: GO 22834
22908: POP
22909: POP
// for i = 1 to tmp do
22910: LD_ADDR_VAR 0 4
22914: PUSH
22915: DOUBLE
22916: LD_INT 1
22918: DEC
22919: ST_TO_ADDR
22920: LD_VAR 0 3
22924: PUSH
22925: FOR_TO
22926: IFFALSE 23014
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22928: LD_ADDR_VAR 0 5
22932: PUSH
22933: LD_VAR 0 5
22937: PUSH
22938: LD_VAR 0 3
22942: PUSH
22943: LD_VAR 0 4
22947: ARRAY
22948: PPUSH
22949: CALL_OW 266
22953: PUSH
22954: LD_VAR 0 3
22958: PUSH
22959: LD_VAR 0 4
22963: ARRAY
22964: PPUSH
22965: CALL_OW 250
22969: PUSH
22970: LD_VAR 0 3
22974: PUSH
22975: LD_VAR 0 4
22979: ARRAY
22980: PPUSH
22981: CALL_OW 251
22985: PUSH
22986: LD_VAR 0 3
22990: PUSH
22991: LD_VAR 0 4
22995: ARRAY
22996: PPUSH
22997: CALL_OW 254
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: ADD
23011: ST_TO_ADDR
23012: GO 22925
23014: POP
23015: POP
// result := list ;
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_VAR 0 5
23025: ST_TO_ADDR
// end ;
23026: LD_VAR 0 2
23030: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
// if not factory then
23040: LD_VAR 0 1
23044: NOT
23045: IFFALSE 23049
// exit ;
23047: GO 23574
// if control = control_apeman then
23049: LD_VAR 0 4
23053: PUSH
23054: LD_INT 5
23056: EQUAL
23057: IFFALSE 23166
// begin tmp := UnitsInside ( factory ) ;
23059: LD_ADDR_VAR 0 8
23063: PUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 313
23073: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23074: LD_VAR 0 8
23078: PPUSH
23079: LD_INT 25
23081: PUSH
23082: LD_INT 12
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PPUSH
23089: CALL_OW 72
23093: NOT
23094: IFFALSE 23104
// control := control_manual ;
23096: LD_ADDR_VAR 0 4
23100: PUSH
23101: LD_INT 1
23103: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23104: LD_ADDR_VAR 0 8
23108: PUSH
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL 22801 0 1
23118: ST_TO_ADDR
// if tmp then
23119: LD_VAR 0 8
23123: IFFALSE 23166
// begin for i in tmp do
23125: LD_ADDR_VAR 0 7
23129: PUSH
23130: LD_VAR 0 8
23134: PUSH
23135: FOR_IN
23136: IFFALSE 23164
// if i [ 1 ] = b_ext_radar then
23138: LD_VAR 0 7
23142: PUSH
23143: LD_INT 1
23145: ARRAY
23146: PUSH
23147: LD_INT 20
23149: EQUAL
23150: IFFALSE 23162
// begin control := control_remote ;
23152: LD_ADDR_VAR 0 4
23156: PUSH
23157: LD_INT 2
23159: ST_TO_ADDR
// break ;
23160: GO 23164
// end ;
23162: GO 23135
23164: POP
23165: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_VAR 0 2
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: LD_VAR 0 4
23185: PPUSH
23186: LD_VAR 0 5
23190: PPUSH
23191: CALL_OW 448
23195: IFFALSE 23230
// begin result := [ chassis , engine , control , weapon ] ;
23197: LD_ADDR_VAR 0 6
23201: PUSH
23202: LD_VAR 0 2
23206: PUSH
23207: LD_VAR 0 3
23211: PUSH
23212: LD_VAR 0 4
23216: PUSH
23217: LD_VAR 0 5
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: ST_TO_ADDR
// exit ;
23228: GO 23574
// end ; _chassis := AvailableChassisList ( factory ) ;
23230: LD_ADDR_VAR 0 9
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 475
23244: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23245: LD_ADDR_VAR 0 11
23249: PUSH
23250: LD_VAR 0 1
23254: PPUSH
23255: CALL_OW 476
23259: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23260: LD_ADDR_VAR 0 12
23264: PUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 477
23274: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23275: LD_ADDR_VAR 0 10
23279: PUSH
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 478
23289: ST_TO_ADDR
// if not chassis in _chassis then
23290: LD_VAR 0 2
23294: PUSH
23295: LD_VAR 0 9
23299: IN
23300: NOT
23301: IFFALSE 23327
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: LD_VAR 0 9
23312: PUSH
23313: LD_INT 1
23315: PPUSH
23316: LD_VAR 0 9
23320: PPUSH
23321: CALL_OW 12
23325: ARRAY
23326: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23327: LD_VAR 0 2
23331: PPUSH
23332: LD_VAR 0 3
23336: PPUSH
23337: CALL 23579 0 2
23341: NOT
23342: IFFALSE 23401
// repeat engine := _engine [ 1 ] ;
23344: LD_ADDR_VAR 0 3
23348: PUSH
23349: LD_VAR 0 11
23353: PUSH
23354: LD_INT 1
23356: ARRAY
23357: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23358: LD_ADDR_VAR 0 11
23362: PUSH
23363: LD_VAR 0 11
23367: PPUSH
23368: LD_INT 1
23370: PPUSH
23371: CALL_OW 3
23375: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: CALL 23579 0 2
23390: PUSH
23391: LD_VAR 0 11
23395: PUSH
23396: EMPTY
23397: EQUAL
23398: OR
23399: IFFALSE 23344
// if not control in _control then
23401: LD_VAR 0 4
23405: PUSH
23406: LD_VAR 0 12
23410: IN
23411: NOT
23412: IFFALSE 23438
// control := _control [ rand ( 1 , _control ) ] ;
23414: LD_ADDR_VAR 0 4
23418: PUSH
23419: LD_VAR 0 12
23423: PUSH
23424: LD_INT 1
23426: PPUSH
23427: LD_VAR 0 12
23431: PPUSH
23432: CALL_OW 12
23436: ARRAY
23437: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23438: LD_VAR 0 2
23442: PPUSH
23443: LD_VAR 0 5
23447: PPUSH
23448: CALL 23799 0 2
23452: NOT
23453: IFFALSE 23512
// repeat weapon := _weapon [ 1 ] ;
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: LD_VAR 0 10
23464: PUSH
23465: LD_INT 1
23467: ARRAY
23468: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23469: LD_ADDR_VAR 0 10
23473: PUSH
23474: LD_VAR 0 10
23478: PPUSH
23479: LD_INT 1
23481: PPUSH
23482: CALL_OW 3
23486: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23487: LD_VAR 0 2
23491: PPUSH
23492: LD_VAR 0 5
23496: PPUSH
23497: CALL 23799 0 2
23501: PUSH
23502: LD_VAR 0 10
23506: PUSH
23507: EMPTY
23508: EQUAL
23509: OR
23510: IFFALSE 23455
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23512: LD_VAR 0 1
23516: PPUSH
23517: LD_VAR 0 2
23521: PPUSH
23522: LD_VAR 0 3
23526: PPUSH
23527: LD_VAR 0 4
23531: PPUSH
23532: LD_VAR 0 5
23536: PPUSH
23537: CALL_OW 448
23541: IFFALSE 23574
// result := [ chassis , engine , control , weapon ] ;
23543: LD_ADDR_VAR 0 6
23547: PUSH
23548: LD_VAR 0 2
23552: PUSH
23553: LD_VAR 0 3
23557: PUSH
23558: LD_VAR 0 4
23562: PUSH
23563: LD_VAR 0 5
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
// end ;
23574: LD_VAR 0 6
23578: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23579: LD_INT 0
23581: PPUSH
// if not chassis or not engine then
23582: LD_VAR 0 1
23586: NOT
23587: PUSH
23588: LD_VAR 0 2
23592: NOT
23593: OR
23594: IFFALSE 23598
// exit ;
23596: GO 23794
// case engine of engine_solar :
23598: LD_VAR 0 2
23602: PUSH
23603: LD_INT 2
23605: DOUBLE
23606: EQUAL
23607: IFTRUE 23611
23609: GO 23649
23611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: LD_INT 11
23619: PUSH
23620: LD_INT 12
23622: PUSH
23623: LD_INT 13
23625: PUSH
23626: LD_INT 14
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: ST_TO_ADDR
23647: GO 23778
23649: LD_INT 1
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23657
23655: GO 23719
23657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23658: LD_ADDR_VAR 0 3
23662: PUSH
23663: LD_INT 11
23665: PUSH
23666: LD_INT 12
23668: PUSH
23669: LD_INT 13
23671: PUSH
23672: LD_INT 14
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 3
23683: PUSH
23684: LD_INT 4
23686: PUSH
23687: LD_INT 5
23689: PUSH
23690: LD_INT 21
23692: PUSH
23693: LD_INT 23
23695: PUSH
23696: LD_INT 22
23698: PUSH
23699: LD_INT 24
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: ST_TO_ADDR
23717: GO 23778
23719: LD_INT 3
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23777
23727: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23728: LD_ADDR_VAR 0 3
23732: PUSH
23733: LD_INT 13
23735: PUSH
23736: LD_INT 14
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: LD_INT 3
23744: PUSH
23745: LD_INT 4
23747: PUSH
23748: LD_INT 5
23750: PUSH
23751: LD_INT 21
23753: PUSH
23754: LD_INT 22
23756: PUSH
23757: LD_INT 23
23759: PUSH
23760: LD_INT 24
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: ST_TO_ADDR
23775: GO 23778
23777: POP
// result := ( chassis in result ) ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_VAR 0 1
23787: PUSH
23788: LD_VAR 0 3
23792: IN
23793: ST_TO_ADDR
// end ;
23794: LD_VAR 0 3
23798: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23799: LD_INT 0
23801: PPUSH
// if not chassis or not weapon then
23802: LD_VAR 0 1
23806: NOT
23807: PUSH
23808: LD_VAR 0 2
23812: NOT
23813: OR
23814: IFFALSE 23818
// exit ;
23816: GO 24844
// case weapon of us_machine_gun :
23818: LD_VAR 0 2
23822: PUSH
23823: LD_INT 2
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23861
23831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 4
23848: PUSH
23849: LD_INT 5
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: ST_TO_ADDR
23859: GO 24828
23861: LD_INT 3
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23899
23869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23870: LD_ADDR_VAR 0 3
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 3
23883: PUSH
23884: LD_INT 4
23886: PUSH
23887: LD_INT 5
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
23897: GO 24828
23899: LD_INT 11
23901: DOUBLE
23902: EQUAL
23903: IFTRUE 23907
23905: GO 23937
23907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: LD_INT 3
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: LD_INT 5
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: ST_TO_ADDR
23935: GO 24828
23937: LD_INT 4
23939: DOUBLE
23940: EQUAL
23941: IFTRUE 23945
23943: GO 23971
23945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23946: LD_ADDR_VAR 0 3
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: LD_INT 4
23959: PUSH
23960: LD_INT 5
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: ST_TO_ADDR
23969: GO 24828
23971: LD_INT 5
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24005
23979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: LD_INT 3
23990: PUSH
23991: LD_INT 4
23993: PUSH
23994: LD_INT 5
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: ST_TO_ADDR
24003: GO 24828
24005: LD_INT 9
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24039
24013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 3
24024: PUSH
24025: LD_INT 4
24027: PUSH
24028: LD_INT 5
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
24037: GO 24828
24039: LD_INT 7
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24073
24047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24048: LD_ADDR_VAR 0 3
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: LD_INT 4
24061: PUSH
24062: LD_INT 5
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: ST_TO_ADDR
24071: GO 24828
24073: LD_INT 12
24075: DOUBLE
24076: EQUAL
24077: IFTRUE 24081
24079: GO 24107
24081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24082: LD_ADDR_VAR 0 3
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: LD_INT 3
24092: PUSH
24093: LD_INT 4
24095: PUSH
24096: LD_INT 5
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24828
24107: LD_INT 13
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24141
24115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 4
24129: PUSH
24130: LD_INT 5
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
24139: GO 24828
24141: LD_INT 14
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24167
24149: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24150: LD_ADDR_VAR 0 3
24154: PUSH
24155: LD_INT 4
24157: PUSH
24158: LD_INT 5
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: ST_TO_ADDR
24165: GO 24828
24167: LD_INT 6
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24193
24175: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24176: LD_ADDR_VAR 0 3
24180: PUSH
24181: LD_INT 4
24183: PUSH
24184: LD_INT 5
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: ST_TO_ADDR
24191: GO 24828
24193: LD_INT 10
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24219
24201: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: LD_INT 4
24209: PUSH
24210: LD_INT 5
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: ST_TO_ADDR
24217: GO 24828
24219: LD_INT 22
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24253
24227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_INT 11
24235: PUSH
24236: LD_INT 12
24238: PUSH
24239: LD_INT 13
24241: PUSH
24242: LD_INT 14
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: ST_TO_ADDR
24251: GO 24828
24253: LD_INT 23
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24287
24261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_INT 11
24269: PUSH
24270: LD_INT 12
24272: PUSH
24273: LD_INT 13
24275: PUSH
24276: LD_INT 14
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 24828
24287: LD_INT 24
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24321
24295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_INT 11
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 13
24309: PUSH
24310: LD_INT 14
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
24319: GO 24828
24321: LD_INT 30
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24355
24329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: LD_INT 11
24337: PUSH
24338: LD_INT 12
24340: PUSH
24341: LD_INT 13
24343: PUSH
24344: LD_INT 14
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
24353: GO 24828
24355: LD_INT 25
24357: DOUBLE
24358: EQUAL
24359: IFTRUE 24363
24361: GO 24381
24363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_INT 13
24371: PUSH
24372: LD_INT 14
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: ST_TO_ADDR
24379: GO 24828
24381: LD_INT 27
24383: DOUBLE
24384: EQUAL
24385: IFTRUE 24389
24387: GO 24407
24389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24390: LD_ADDR_VAR 0 3
24394: PUSH
24395: LD_INT 13
24397: PUSH
24398: LD_INT 14
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: ST_TO_ADDR
24405: GO 24828
24407: LD_INT 28
24409: DOUBLE
24410: EQUAL
24411: IFTRUE 24415
24413: GO 24433
24415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_INT 13
24423: PUSH
24424: LD_INT 14
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: ST_TO_ADDR
24431: GO 24828
24433: LD_INT 29
24435: DOUBLE
24436: EQUAL
24437: IFTRUE 24441
24439: GO 24459
24441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24442: LD_ADDR_VAR 0 3
24446: PUSH
24447: LD_INT 13
24449: PUSH
24450: LD_INT 14
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: ST_TO_ADDR
24457: GO 24828
24459: LD_INT 31
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24485
24467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24468: LD_ADDR_VAR 0 3
24472: PUSH
24473: LD_INT 13
24475: PUSH
24476: LD_INT 14
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: ST_TO_ADDR
24483: GO 24828
24485: LD_INT 26
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24511
24493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24494: LD_ADDR_VAR 0 3
24498: PUSH
24499: LD_INT 13
24501: PUSH
24502: LD_INT 14
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: ST_TO_ADDR
24509: GO 24828
24511: LD_INT 42
24513: DOUBLE
24514: EQUAL
24515: IFTRUE 24519
24517: GO 24545
24519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24520: LD_ADDR_VAR 0 3
24524: PUSH
24525: LD_INT 21
24527: PUSH
24528: LD_INT 22
24530: PUSH
24531: LD_INT 23
24533: PUSH
24534: LD_INT 24
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
24543: GO 24828
24545: LD_INT 43
24547: DOUBLE
24548: EQUAL
24549: IFTRUE 24553
24551: GO 24579
24553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: LD_INT 21
24561: PUSH
24562: LD_INT 22
24564: PUSH
24565: LD_INT 23
24567: PUSH
24568: LD_INT 24
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 24828
24579: LD_INT 44
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24613
24587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_INT 21
24595: PUSH
24596: LD_INT 22
24598: PUSH
24599: LD_INT 23
24601: PUSH
24602: LD_INT 24
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: ST_TO_ADDR
24611: GO 24828
24613: LD_INT 45
24615: DOUBLE
24616: EQUAL
24617: IFTRUE 24621
24619: GO 24647
24621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24622: LD_ADDR_VAR 0 3
24626: PUSH
24627: LD_INT 21
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_INT 23
24635: PUSH
24636: LD_INT 24
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: ST_TO_ADDR
24645: GO 24828
24647: LD_INT 49
24649: DOUBLE
24650: EQUAL
24651: IFTRUE 24655
24653: GO 24681
24655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24656: LD_ADDR_VAR 0 3
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 24
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: ST_TO_ADDR
24679: GO 24828
24681: LD_INT 51
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24715
24689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_INT 21
24697: PUSH
24698: LD_INT 22
24700: PUSH
24701: LD_INT 23
24703: PUSH
24704: LD_INT 24
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 24828
24715: LD_INT 52
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24749
24723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 22
24734: PUSH
24735: LD_INT 23
24737: PUSH
24738: LD_INT 24
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: ST_TO_ADDR
24747: GO 24828
24749: LD_INT 53
24751: DOUBLE
24752: EQUAL
24753: IFTRUE 24757
24755: GO 24775
24757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24758: LD_ADDR_VAR 0 3
24762: PUSH
24763: LD_INT 23
24765: PUSH
24766: LD_INT 24
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: ST_TO_ADDR
24773: GO 24828
24775: LD_INT 46
24777: DOUBLE
24778: EQUAL
24779: IFTRUE 24783
24781: GO 24801
24783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_INT 23
24791: PUSH
24792: LD_INT 24
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 24828
24801: LD_INT 47
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24827
24809: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_INT 23
24817: PUSH
24818: LD_INT 24
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: ST_TO_ADDR
24825: GO 24828
24827: POP
// result := ( chassis in result ) ;
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_VAR 0 1
24837: PUSH
24838: LD_VAR 0 3
24842: IN
24843: ST_TO_ADDR
// end ;
24844: LD_VAR 0 3
24848: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24849: LD_INT 0
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
// result := array ;
24858: LD_ADDR_VAR 0 5
24862: PUSH
24863: LD_VAR 0 1
24867: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24868: LD_VAR 0 1
24872: NOT
24873: PUSH
24874: LD_VAR 0 2
24878: NOT
24879: OR
24880: PUSH
24881: LD_VAR 0 3
24885: NOT
24886: OR
24887: PUSH
24888: LD_VAR 0 2
24892: PUSH
24893: LD_VAR 0 1
24897: GREATER
24898: OR
24899: PUSH
24900: LD_VAR 0 3
24904: PUSH
24905: LD_VAR 0 1
24909: GREATER
24910: OR
24911: IFFALSE 24915
// exit ;
24913: GO 25211
// if direction then
24915: LD_VAR 0 4
24919: IFFALSE 24983
// begin d := 1 ;
24921: LD_ADDR_VAR 0 9
24925: PUSH
24926: LD_INT 1
24928: ST_TO_ADDR
// if i_from > i_to then
24929: LD_VAR 0 2
24933: PUSH
24934: LD_VAR 0 3
24938: GREATER
24939: IFFALSE 24965
// length := ( array - i_from ) + i_to else
24941: LD_ADDR_VAR 0 11
24945: PUSH
24946: LD_VAR 0 1
24950: PUSH
24951: LD_VAR 0 2
24955: MINUS
24956: PUSH
24957: LD_VAR 0 3
24961: PLUS
24962: ST_TO_ADDR
24963: GO 24981
// length := i_to - i_from ;
24965: LD_ADDR_VAR 0 11
24969: PUSH
24970: LD_VAR 0 3
24974: PUSH
24975: LD_VAR 0 2
24979: MINUS
24980: ST_TO_ADDR
// end else
24981: GO 25044
// begin d := - 1 ;
24983: LD_ADDR_VAR 0 9
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: ST_TO_ADDR
// if i_from > i_to then
24992: LD_VAR 0 2
24996: PUSH
24997: LD_VAR 0 3
25001: GREATER
25002: IFFALSE 25022
// length := i_from - i_to else
25004: LD_ADDR_VAR 0 11
25008: PUSH
25009: LD_VAR 0 2
25013: PUSH
25014: LD_VAR 0 3
25018: MINUS
25019: ST_TO_ADDR
25020: GO 25044
// length := ( array - i_to ) + i_from ;
25022: LD_ADDR_VAR 0 11
25026: PUSH
25027: LD_VAR 0 1
25031: PUSH
25032: LD_VAR 0 3
25036: MINUS
25037: PUSH
25038: LD_VAR 0 2
25042: PLUS
25043: ST_TO_ADDR
// end ; if not length then
25044: LD_VAR 0 11
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25211
// tmp := array ;
25053: LD_ADDR_VAR 0 10
25057: PUSH
25058: LD_VAR 0 1
25062: ST_TO_ADDR
// for i = 1 to length do
25063: LD_ADDR_VAR 0 6
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_VAR 0 11
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25199
// begin for j = 1 to array do
25081: LD_ADDR_VAR 0 7
25085: PUSH
25086: DOUBLE
25087: LD_INT 1
25089: DEC
25090: ST_TO_ADDR
25091: LD_VAR 0 1
25095: PUSH
25096: FOR_TO
25097: IFFALSE 25185
// begin k := j + d ;
25099: LD_ADDR_VAR 0 8
25103: PUSH
25104: LD_VAR 0 7
25108: PUSH
25109: LD_VAR 0 9
25113: PLUS
25114: ST_TO_ADDR
// if k > array then
25115: LD_VAR 0 8
25119: PUSH
25120: LD_VAR 0 1
25124: GREATER
25125: IFFALSE 25135
// k := 1 ;
25127: LD_ADDR_VAR 0 8
25131: PUSH
25132: LD_INT 1
25134: ST_TO_ADDR
// if not k then
25135: LD_VAR 0 8
25139: NOT
25140: IFFALSE 25152
// k := array ;
25142: LD_ADDR_VAR 0 8
25146: PUSH
25147: LD_VAR 0 1
25151: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25152: LD_ADDR_VAR 0 10
25156: PUSH
25157: LD_VAR 0 10
25161: PPUSH
25162: LD_VAR 0 8
25166: PPUSH
25167: LD_VAR 0 1
25171: PUSH
25172: LD_VAR 0 7
25176: ARRAY
25177: PPUSH
25178: CALL_OW 1
25182: ST_TO_ADDR
// end ;
25183: GO 25096
25185: POP
25186: POP
// array := tmp ;
25187: LD_ADDR_VAR 0 1
25191: PUSH
25192: LD_VAR 0 10
25196: ST_TO_ADDR
// end ;
25197: GO 25078
25199: POP
25200: POP
// result := array ;
25201: LD_ADDR_VAR 0 5
25205: PUSH
25206: LD_VAR 0 1
25210: ST_TO_ADDR
// end ;
25211: LD_VAR 0 5
25215: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
// result := 0 ;
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 0
25227: ST_TO_ADDR
// if not array or not value in array then
25228: LD_VAR 0 1
25232: NOT
25233: PUSH
25234: LD_VAR 0 2
25238: PUSH
25239: LD_VAR 0 1
25243: IN
25244: NOT
25245: OR
25246: IFFALSE 25250
// exit ;
25248: GO 25304
// for i = 1 to array do
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: DOUBLE
25256: LD_INT 1
25258: DEC
25259: ST_TO_ADDR
25260: LD_VAR 0 1
25264: PUSH
25265: FOR_TO
25266: IFFALSE 25302
// if value = array [ i ] then
25268: LD_VAR 0 2
25272: PUSH
25273: LD_VAR 0 1
25277: PUSH
25278: LD_VAR 0 4
25282: ARRAY
25283: EQUAL
25284: IFFALSE 25300
// begin result := i ;
25286: LD_ADDR_VAR 0 3
25290: PUSH
25291: LD_VAR 0 4
25295: ST_TO_ADDR
// exit ;
25296: POP
25297: POP
25298: GO 25304
// end ;
25300: GO 25265
25302: POP
25303: POP
// end ;
25304: LD_VAR 0 3
25308: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25309: LD_INT 0
25311: PPUSH
// vc_chassis := chassis ;
25312: LD_ADDR_OWVAR 37
25316: PUSH
25317: LD_VAR 0 1
25321: ST_TO_ADDR
// vc_engine := engine ;
25322: LD_ADDR_OWVAR 39
25326: PUSH
25327: LD_VAR 0 2
25331: ST_TO_ADDR
// vc_control := control ;
25332: LD_ADDR_OWVAR 38
25336: PUSH
25337: LD_VAR 0 3
25341: ST_TO_ADDR
// vc_weapon := weapon ;
25342: LD_ADDR_OWVAR 40
25346: PUSH
25347: LD_VAR 0 4
25351: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25352: LD_ADDR_OWVAR 41
25356: PUSH
25357: LD_VAR 0 5
25361: ST_TO_ADDR
// end ;
25362: LD_VAR 0 6
25366: RET
// export function WantPlant ( unit ) ; var task ; begin
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
// result := false ;
25371: LD_ADDR_VAR 0 2
25375: PUSH
25376: LD_INT 0
25378: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25379: LD_ADDR_VAR 0 3
25383: PUSH
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL_OW 437
25393: ST_TO_ADDR
// if task then
25394: LD_VAR 0 3
25398: IFFALSE 25426
// if task [ 1 ] [ 1 ] = p then
25400: LD_VAR 0 3
25404: PUSH
25405: LD_INT 1
25407: ARRAY
25408: PUSH
25409: LD_INT 1
25411: ARRAY
25412: PUSH
25413: LD_STRING p
25415: EQUAL
25416: IFFALSE 25426
// result := true ;
25418: LD_ADDR_VAR 0 2
25422: PUSH
25423: LD_INT 1
25425: ST_TO_ADDR
// end ;
25426: LD_VAR 0 2
25430: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
25435: PPUSH
25436: PPUSH
// if pos < 1 then
25437: LD_VAR 0 2
25441: PUSH
25442: LD_INT 1
25444: LESS
25445: IFFALSE 25449
// exit ;
25447: GO 25752
// if pos = 1 then
25449: LD_VAR 0 2
25453: PUSH
25454: LD_INT 1
25456: EQUAL
25457: IFFALSE 25490
// result := Replace ( arr , pos [ 1 ] , value ) else
25459: LD_ADDR_VAR 0 4
25463: PUSH
25464: LD_VAR 0 1
25468: PPUSH
25469: LD_VAR 0 2
25473: PUSH
25474: LD_INT 1
25476: ARRAY
25477: PPUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: CALL_OW 1
25487: ST_TO_ADDR
25488: GO 25752
// begin tmp := arr ;
25490: LD_ADDR_VAR 0 6
25494: PUSH
25495: LD_VAR 0 1
25499: ST_TO_ADDR
// s_arr := [ tmp ] ;
25500: LD_ADDR_VAR 0 7
25504: PUSH
25505: LD_VAR 0 6
25509: PUSH
25510: EMPTY
25511: LIST
25512: ST_TO_ADDR
// for i = 1 to pos - 1 do
25513: LD_ADDR_VAR 0 5
25517: PUSH
25518: DOUBLE
25519: LD_INT 1
25521: DEC
25522: ST_TO_ADDR
25523: LD_VAR 0 2
25527: PUSH
25528: LD_INT 1
25530: MINUS
25531: PUSH
25532: FOR_TO
25533: IFFALSE 25578
// begin tmp := tmp [ pos [ i ] ] ;
25535: LD_ADDR_VAR 0 6
25539: PUSH
25540: LD_VAR 0 6
25544: PUSH
25545: LD_VAR 0 2
25549: PUSH
25550: LD_VAR 0 5
25554: ARRAY
25555: ARRAY
25556: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25557: LD_ADDR_VAR 0 7
25561: PUSH
25562: LD_VAR 0 7
25566: PUSH
25567: LD_VAR 0 6
25571: PUSH
25572: EMPTY
25573: LIST
25574: ADD
25575: ST_TO_ADDR
// end ;
25576: GO 25532
25578: POP
25579: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25580: LD_ADDR_VAR 0 6
25584: PUSH
25585: LD_VAR 0 6
25589: PPUSH
25590: LD_VAR 0 2
25594: PUSH
25595: LD_VAR 0 2
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: CALL_OW 1
25610: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25611: LD_ADDR_VAR 0 7
25615: PUSH
25616: LD_VAR 0 7
25620: PPUSH
25621: LD_VAR 0 7
25625: PPUSH
25626: LD_VAR 0 6
25630: PPUSH
25631: CALL_OW 1
25635: ST_TO_ADDR
// for i = s_arr downto 2 do
25636: LD_ADDR_VAR 0 5
25640: PUSH
25641: DOUBLE
25642: LD_VAR 0 7
25646: INC
25647: ST_TO_ADDR
25648: LD_INT 2
25650: PUSH
25651: FOR_DOWNTO
25652: IFFALSE 25736
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25654: LD_ADDR_VAR 0 6
25658: PUSH
25659: LD_VAR 0 7
25663: PUSH
25664: LD_VAR 0 5
25668: PUSH
25669: LD_INT 1
25671: MINUS
25672: ARRAY
25673: PPUSH
25674: LD_VAR 0 2
25678: PUSH
25679: LD_VAR 0 5
25683: PUSH
25684: LD_INT 1
25686: MINUS
25687: ARRAY
25688: PPUSH
25689: LD_VAR 0 7
25693: PUSH
25694: LD_VAR 0 5
25698: ARRAY
25699: PPUSH
25700: CALL_OW 1
25704: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25705: LD_ADDR_VAR 0 7
25709: PUSH
25710: LD_VAR 0 7
25714: PPUSH
25715: LD_VAR 0 5
25719: PUSH
25720: LD_INT 1
25722: MINUS
25723: PPUSH
25724: LD_VAR 0 6
25728: PPUSH
25729: CALL_OW 1
25733: ST_TO_ADDR
// end ;
25734: GO 25651
25736: POP
25737: POP
// result := s_arr [ 1 ] ;
25738: LD_ADDR_VAR 0 4
25742: PUSH
25743: LD_VAR 0 7
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: ST_TO_ADDR
// end ; end ;
25752: LD_VAR 0 4
25756: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
// if not list then
25761: LD_VAR 0 1
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 25861
// i := list [ pos1 ] ;
25770: LD_ADDR_VAR 0 5
25774: PUSH
25775: LD_VAR 0 1
25779: PUSH
25780: LD_VAR 0 2
25784: ARRAY
25785: ST_TO_ADDR
// if not i then
25786: LD_VAR 0 5
25790: NOT
25791: IFFALSE 25795
// exit ;
25793: GO 25861
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25795: LD_ADDR_VAR 0 1
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_VAR 0 1
25814: PUSH
25815: LD_VAR 0 3
25819: ARRAY
25820: PPUSH
25821: CALL_OW 1
25825: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25826: LD_ADDR_VAR 0 1
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_VAR 0 5
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
// result := list ;
25851: LD_ADDR_VAR 0 4
25855: PUSH
25856: LD_VAR 0 1
25860: ST_TO_ADDR
// end ;
25861: LD_VAR 0 4
25865: RET
// export function Add ( list , pos , val ) ; begin
25866: LD_INT 0
25868: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
25869: LD_ADDR_VAR 0 4
25873: PUSH
25874: LD_VAR 0 1
25878: PPUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: LD_VAR 0 3
25888: PPUSH
25889: CALL 25431 0 3
25893: ST_TO_ADDR
25894: LD_VAR 0 4
25898: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25899: LD_INT 0
25901: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25902: LD_ADDR_VAR 0 5
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 250
25916: PPUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL_OW 251
25926: PPUSH
25927: LD_VAR 0 2
25931: PPUSH
25932: LD_VAR 0 3
25936: PPUSH
25937: LD_VAR 0 4
25941: PPUSH
25942: CALL 25952 0 5
25946: ST_TO_ADDR
// end ;
25947: LD_VAR 0 5
25951: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
// if not list then
25958: LD_VAR 0 3
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26355
// result := [ ] ;
25967: LD_ADDR_VAR 0 6
25971: PUSH
25972: EMPTY
25973: ST_TO_ADDR
// for i in list do
25974: LD_ADDR_VAR 0 7
25978: PUSH
25979: LD_VAR 0 3
25983: PUSH
25984: FOR_IN
25985: IFFALSE 26187
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25987: LD_ADDR_VAR 0 9
25991: PUSH
25992: LD_VAR 0 7
25996: PPUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: LD_VAR 0 2
26006: PPUSH
26007: CALL_OW 297
26011: ST_TO_ADDR
// if not result then
26012: LD_VAR 0 6
26016: NOT
26017: IFFALSE 26043
// result := [ [ i , tmp ] ] else
26019: LD_ADDR_VAR 0 6
26023: PUSH
26024: LD_VAR 0 7
26028: PUSH
26029: LD_VAR 0 9
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: EMPTY
26039: LIST
26040: ST_TO_ADDR
26041: GO 26185
// begin if result [ result ] [ 2 ] < tmp then
26043: LD_VAR 0 6
26047: PUSH
26048: LD_VAR 0 6
26052: ARRAY
26053: PUSH
26054: LD_INT 2
26056: ARRAY
26057: PUSH
26058: LD_VAR 0 9
26062: LESS
26063: IFFALSE 26105
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26065: LD_ADDR_VAR 0 6
26069: PUSH
26070: LD_VAR 0 6
26074: PPUSH
26075: LD_VAR 0 6
26079: PUSH
26080: LD_INT 1
26082: PLUS
26083: PPUSH
26084: LD_VAR 0 7
26088: PUSH
26089: LD_VAR 0 9
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PPUSH
26098: CALL_OW 2
26102: ST_TO_ADDR
26103: GO 26185
// for j = 1 to result do
26105: LD_ADDR_VAR 0 8
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_VAR 0 6
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26183
// begin if tmp < result [ j ] [ 2 ] then
26123: LD_VAR 0 9
26127: PUSH
26128: LD_VAR 0 6
26132: PUSH
26133: LD_VAR 0 8
26137: ARRAY
26138: PUSH
26139: LD_INT 2
26141: ARRAY
26142: LESS
26143: IFFALSE 26181
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26145: LD_ADDR_VAR 0 6
26149: PUSH
26150: LD_VAR 0 6
26154: PPUSH
26155: LD_VAR 0 8
26159: PPUSH
26160: LD_VAR 0 7
26164: PUSH
26165: LD_VAR 0 9
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PPUSH
26174: CALL_OW 2
26178: ST_TO_ADDR
// break ;
26179: GO 26183
// end ; end ;
26181: GO 26120
26183: POP
26184: POP
// end ; end ;
26185: GO 25984
26187: POP
26188: POP
// if result and not asc then
26189: LD_VAR 0 6
26193: PUSH
26194: LD_VAR 0 4
26198: NOT
26199: AND
26200: IFFALSE 26275
// begin tmp := result ;
26202: LD_ADDR_VAR 0 9
26206: PUSH
26207: LD_VAR 0 6
26211: ST_TO_ADDR
// for i = tmp downto 1 do
26212: LD_ADDR_VAR 0 7
26216: PUSH
26217: DOUBLE
26218: LD_VAR 0 9
26222: INC
26223: ST_TO_ADDR
26224: LD_INT 1
26226: PUSH
26227: FOR_DOWNTO
26228: IFFALSE 26273
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26230: LD_ADDR_VAR 0 6
26234: PUSH
26235: LD_VAR 0 6
26239: PPUSH
26240: LD_VAR 0 9
26244: PUSH
26245: LD_VAR 0 7
26249: MINUS
26250: PUSH
26251: LD_INT 1
26253: PLUS
26254: PPUSH
26255: LD_VAR 0 9
26259: PUSH
26260: LD_VAR 0 7
26264: ARRAY
26265: PPUSH
26266: CALL_OW 1
26270: ST_TO_ADDR
26271: GO 26227
26273: POP
26274: POP
// end ; tmp := [ ] ;
26275: LD_ADDR_VAR 0 9
26279: PUSH
26280: EMPTY
26281: ST_TO_ADDR
// if mode then
26282: LD_VAR 0 5
26286: IFFALSE 26355
// begin for i = 1 to result do
26288: LD_ADDR_VAR 0 7
26292: PUSH
26293: DOUBLE
26294: LD_INT 1
26296: DEC
26297: ST_TO_ADDR
26298: LD_VAR 0 6
26302: PUSH
26303: FOR_TO
26304: IFFALSE 26343
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26306: LD_ADDR_VAR 0 9
26310: PUSH
26311: LD_VAR 0 9
26315: PPUSH
26316: LD_VAR 0 7
26320: PPUSH
26321: LD_VAR 0 6
26325: PUSH
26326: LD_VAR 0 7
26330: ARRAY
26331: PUSH
26332: LD_INT 1
26334: ARRAY
26335: PPUSH
26336: CALL_OW 1
26340: ST_TO_ADDR
26341: GO 26303
26343: POP
26344: POP
// result := tmp ;
26345: LD_ADDR_VAR 0 6
26349: PUSH
26350: LD_VAR 0 9
26354: ST_TO_ADDR
// end ; end ;
26355: LD_VAR 0 6
26359: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26368: LD_ADDR_VAR 0 5
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// if not x or not y then
26390: LD_VAR 0 2
26394: NOT
26395: PUSH
26396: LD_VAR 0 3
26400: NOT
26401: OR
26402: IFFALSE 26406
// exit ;
26404: GO 28052
// if not range then
26406: LD_VAR 0 4
26410: NOT
26411: IFFALSE 26421
// range := 10 ;
26413: LD_ADDR_VAR 0 4
26417: PUSH
26418: LD_INT 10
26420: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26421: LD_ADDR_VAR 0 8
26425: PUSH
26426: LD_INT 81
26428: PUSH
26429: LD_VAR 0 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 92
26440: PUSH
26441: LD_VAR 0 2
26445: PUSH
26446: LD_VAR 0 3
26450: PUSH
26451: LD_VAR 0 4
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 3
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: ST_TO_ADDR
// if not tmp then
26489: LD_VAR 0 8
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 28052
// for i in tmp do
26498: LD_ADDR_VAR 0 6
26502: PUSH
26503: LD_VAR 0 8
26507: PUSH
26508: FOR_IN
26509: IFFALSE 28027
// begin points := [ 0 , 0 , 0 ] ;
26511: LD_ADDR_VAR 0 9
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// bpoints := 1 ;
26530: LD_ADDR_VAR 0 10
26534: PUSH
26535: LD_INT 1
26537: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26538: LD_VAR 0 6
26542: PPUSH
26543: CALL_OW 247
26547: PUSH
26548: LD_INT 1
26550: DOUBLE
26551: EQUAL
26552: IFTRUE 26556
26554: GO 27134
26556: POP
// begin if GetClass ( i ) = 1 then
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 257
26566: PUSH
26567: LD_INT 1
26569: EQUAL
26570: IFFALSE 26591
// points := [ 10 , 5 , 3 ] ;
26572: LD_ADDR_VAR 0 9
26576: PUSH
26577: LD_INT 10
26579: PUSH
26580: LD_INT 5
26582: PUSH
26583: LD_INT 3
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26591: LD_VAR 0 6
26595: PPUSH
26596: CALL_OW 257
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: LD_INT 4
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: IN
26615: IFFALSE 26636
// points := [ 3 , 2 , 1 ] ;
26617: LD_ADDR_VAR 0 9
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26636: LD_VAR 0 6
26640: PPUSH
26641: CALL_OW 257
26645: PUSH
26646: LD_INT 5
26648: EQUAL
26649: IFFALSE 26670
// points := [ 130 , 5 , 2 ] ;
26651: LD_ADDR_VAR 0 9
26655: PUSH
26656: LD_INT 130
26658: PUSH
26659: LD_INT 5
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26670: LD_VAR 0 6
26674: PPUSH
26675: CALL_OW 257
26679: PUSH
26680: LD_INT 8
26682: EQUAL
26683: IFFALSE 26704
// points := [ 35 , 35 , 30 ] ;
26685: LD_ADDR_VAR 0 9
26689: PUSH
26690: LD_INT 35
26692: PUSH
26693: LD_INT 35
26695: PUSH
26696: LD_INT 30
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26704: LD_VAR 0 6
26708: PPUSH
26709: CALL_OW 257
26713: PUSH
26714: LD_INT 9
26716: EQUAL
26717: IFFALSE 26738
// points := [ 20 , 55 , 40 ] ;
26719: LD_ADDR_VAR 0 9
26723: PUSH
26724: LD_INT 20
26726: PUSH
26727: LD_INT 55
26729: PUSH
26730: LD_INT 40
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26738: LD_VAR 0 6
26742: PPUSH
26743: CALL_OW 257
26747: PUSH
26748: LD_INT 12
26750: PUSH
26751: LD_INT 16
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: IN
26758: IFFALSE 26779
// points := [ 5 , 3 , 2 ] ;
26760: LD_ADDR_VAR 0 9
26764: PUSH
26765: LD_INT 5
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26779: LD_VAR 0 6
26783: PPUSH
26784: CALL_OW 257
26788: PUSH
26789: LD_INT 17
26791: EQUAL
26792: IFFALSE 26813
// points := [ 100 , 50 , 75 ] ;
26794: LD_ADDR_VAR 0 9
26798: PUSH
26799: LD_INT 100
26801: PUSH
26802: LD_INT 50
26804: PUSH
26805: LD_INT 75
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26813: LD_VAR 0 6
26817: PPUSH
26818: CALL_OW 257
26822: PUSH
26823: LD_INT 15
26825: EQUAL
26826: IFFALSE 26847
// points := [ 10 , 5 , 3 ] ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_INT 10
26835: PUSH
26836: LD_INT 5
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26847: LD_VAR 0 6
26851: PPUSH
26852: CALL_OW 257
26856: PUSH
26857: LD_INT 14
26859: EQUAL
26860: IFFALSE 26881
// points := [ 10 , 0 , 0 ] ;
26862: LD_ADDR_VAR 0 9
26866: PUSH
26867: LD_INT 10
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26881: LD_VAR 0 6
26885: PPUSH
26886: CALL_OW 257
26890: PUSH
26891: LD_INT 11
26893: EQUAL
26894: IFFALSE 26915
// points := [ 30 , 10 , 5 ] ;
26896: LD_ADDR_VAR 0 9
26900: PUSH
26901: LD_INT 30
26903: PUSH
26904: LD_INT 10
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_INT 5
26922: PPUSH
26923: CALL_OW 321
26927: PUSH
26928: LD_INT 2
26930: EQUAL
26931: IFFALSE 26948
// bpoints := bpoints * 1.8 ;
26933: LD_ADDR_VAR 0 10
26937: PUSH
26938: LD_VAR 0 10
26942: PUSH
26943: LD_REAL  1.80000000000000E+0000
26946: MUL
26947: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26948: LD_VAR 0 6
26952: PPUSH
26953: CALL_OW 257
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 3
26966: PUSH
26967: LD_INT 4
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: IN
26976: PUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_INT 51
26984: PPUSH
26985: CALL_OW 321
26989: PUSH
26990: LD_INT 2
26992: EQUAL
26993: AND
26994: IFFALSE 27011
// bpoints := bpoints * 1.2 ;
26996: LD_ADDR_VAR 0 10
27000: PUSH
27001: LD_VAR 0 10
27005: PUSH
27006: LD_REAL  1.20000000000000E+0000
27009: MUL
27010: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27011: LD_VAR 0 6
27015: PPUSH
27016: CALL_OW 257
27020: PUSH
27021: LD_INT 5
27023: PUSH
27024: LD_INT 7
27026: PUSH
27027: LD_INT 9
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: IN
27035: PUSH
27036: LD_VAR 0 1
27040: PPUSH
27041: LD_INT 52
27043: PPUSH
27044: CALL_OW 321
27048: PUSH
27049: LD_INT 2
27051: EQUAL
27052: AND
27053: IFFALSE 27070
// bpoints := bpoints * 1.5 ;
27055: LD_ADDR_VAR 0 10
27059: PUSH
27060: LD_VAR 0 10
27064: PUSH
27065: LD_REAL  1.50000000000000E+0000
27068: MUL
27069: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27070: LD_VAR 0 1
27074: PPUSH
27075: LD_INT 66
27077: PPUSH
27078: CALL_OW 321
27082: PUSH
27083: LD_INT 2
27085: EQUAL
27086: IFFALSE 27103
// bpoints := bpoints * 1.1 ;
27088: LD_ADDR_VAR 0 10
27092: PUSH
27093: LD_VAR 0 10
27097: PUSH
27098: LD_REAL  1.10000000000000E+0000
27101: MUL
27102: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27103: LD_ADDR_VAR 0 10
27107: PUSH
27108: LD_VAR 0 10
27112: PUSH
27113: LD_VAR 0 6
27117: PPUSH
27118: LD_INT 1
27120: PPUSH
27121: CALL_OW 259
27125: PUSH
27126: LD_REAL  1.15000000000000E+0000
27129: MUL
27130: MUL
27131: ST_TO_ADDR
// end ; unit_vehicle :
27132: GO 27956
27134: LD_INT 2
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27142
27140: GO 27944
27142: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27143: LD_VAR 0 6
27147: PPUSH
27148: CALL_OW 264
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 42
27158: PUSH
27159: LD_INT 24
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: LIST
27166: IN
27167: IFFALSE 27188
// points := [ 25 , 5 , 3 ] ;
27169: LD_ADDR_VAR 0 9
27173: PUSH
27174: LD_INT 25
27176: PUSH
27177: LD_INT 5
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27188: LD_VAR 0 6
27192: PPUSH
27193: CALL_OW 264
27197: PUSH
27198: LD_INT 4
27200: PUSH
27201: LD_INT 43
27203: PUSH
27204: LD_INT 25
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: IN
27212: IFFALSE 27233
// points := [ 40 , 15 , 5 ] ;
27214: LD_ADDR_VAR 0 9
27218: PUSH
27219: LD_INT 40
27221: PUSH
27222: LD_INT 15
27224: PUSH
27225: LD_INT 5
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: LIST
27232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27233: LD_VAR 0 6
27237: PPUSH
27238: CALL_OW 264
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: LD_INT 23
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: IN
27253: IFFALSE 27274
// points := [ 7 , 25 , 8 ] ;
27255: LD_ADDR_VAR 0 9
27259: PUSH
27260: LD_INT 7
27262: PUSH
27263: LD_INT 25
27265: PUSH
27266: LD_INT 8
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27274: LD_VAR 0 6
27278: PPUSH
27279: CALL_OW 264
27283: PUSH
27284: LD_INT 5
27286: PUSH
27287: LD_INT 27
27289: PUSH
27290: LD_INT 44
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: IN
27298: IFFALSE 27319
// points := [ 14 , 50 , 16 ] ;
27300: LD_ADDR_VAR 0 9
27304: PUSH
27305: LD_INT 14
27307: PUSH
27308: LD_INT 50
27310: PUSH
27311: LD_INT 16
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27319: LD_VAR 0 6
27323: PPUSH
27324: CALL_OW 264
27328: PUSH
27329: LD_INT 6
27331: PUSH
27332: LD_INT 46
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: IN
27339: IFFALSE 27360
// points := [ 32 , 120 , 70 ] ;
27341: LD_ADDR_VAR 0 9
27345: PUSH
27346: LD_INT 32
27348: PUSH
27349: LD_INT 120
27351: PUSH
27352: LD_INT 70
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27360: LD_VAR 0 6
27364: PPUSH
27365: CALL_OW 264
27369: PUSH
27370: LD_INT 7
27372: PUSH
27373: LD_INT 28
27375: PUSH
27376: LD_INT 45
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: IN
27384: IFFALSE 27405
// points := [ 35 , 20 , 45 ] ;
27386: LD_ADDR_VAR 0 9
27390: PUSH
27391: LD_INT 35
27393: PUSH
27394: LD_INT 20
27396: PUSH
27397: LD_INT 45
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27405: LD_VAR 0 6
27409: PPUSH
27410: CALL_OW 264
27414: PUSH
27415: LD_INT 47
27417: PUSH
27418: EMPTY
27419: LIST
27420: IN
27421: IFFALSE 27442
// points := [ 67 , 45 , 75 ] ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_INT 67
27430: PUSH
27431: LD_INT 45
27433: PUSH
27434: LD_INT 75
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27442: LD_VAR 0 6
27446: PPUSH
27447: CALL_OW 264
27451: PUSH
27452: LD_INT 26
27454: PUSH
27455: EMPTY
27456: LIST
27457: IN
27458: IFFALSE 27479
// points := [ 120 , 30 , 80 ] ;
27460: LD_ADDR_VAR 0 9
27464: PUSH
27465: LD_INT 120
27467: PUSH
27468: LD_INT 30
27470: PUSH
27471: LD_INT 80
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27479: LD_VAR 0 6
27483: PPUSH
27484: CALL_OW 264
27488: PUSH
27489: LD_INT 22
27491: PUSH
27492: EMPTY
27493: LIST
27494: IN
27495: IFFALSE 27516
// points := [ 40 , 1 , 1 ] ;
27497: LD_ADDR_VAR 0 9
27501: PUSH
27502: LD_INT 40
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 264
27525: PUSH
27526: LD_INT 29
27528: PUSH
27529: EMPTY
27530: LIST
27531: IN
27532: IFFALSE 27553
// points := [ 70 , 200 , 400 ] ;
27534: LD_ADDR_VAR 0 9
27538: PUSH
27539: LD_INT 70
27541: PUSH
27542: LD_INT 200
27544: PUSH
27545: LD_INT 400
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27553: LD_VAR 0 6
27557: PPUSH
27558: CALL_OW 264
27562: PUSH
27563: LD_INT 14
27565: PUSH
27566: LD_INT 53
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: IN
27573: IFFALSE 27594
// points := [ 40 , 10 , 20 ] ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_INT 40
27582: PUSH
27583: LD_INT 10
27585: PUSH
27586: LD_INT 20
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27594: LD_VAR 0 6
27598: PPUSH
27599: CALL_OW 264
27603: PUSH
27604: LD_INT 9
27606: PUSH
27607: EMPTY
27608: LIST
27609: IN
27610: IFFALSE 27631
// points := [ 5 , 70 , 20 ] ;
27612: LD_ADDR_VAR 0 9
27616: PUSH
27617: LD_INT 5
27619: PUSH
27620: LD_INT 70
27622: PUSH
27623: LD_INT 20
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27631: LD_VAR 0 6
27635: PPUSH
27636: CALL_OW 264
27640: PUSH
27641: LD_INT 10
27643: PUSH
27644: EMPTY
27645: LIST
27646: IN
27647: IFFALSE 27668
// points := [ 35 , 110 , 70 ] ;
27649: LD_ADDR_VAR 0 9
27653: PUSH
27654: LD_INT 35
27656: PUSH
27657: LD_INT 110
27659: PUSH
27660: LD_INT 70
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27668: LD_VAR 0 6
27672: PPUSH
27673: CALL_OW 265
27677: PUSH
27678: LD_INT 25
27680: EQUAL
27681: IFFALSE 27702
// points := [ 80 , 65 , 100 ] ;
27683: LD_ADDR_VAR 0 9
27687: PUSH
27688: LD_INT 80
27690: PUSH
27691: LD_INT 65
27693: PUSH
27694: LD_INT 100
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27702: LD_VAR 0 6
27706: PPUSH
27707: CALL_OW 263
27711: PUSH
27712: LD_INT 1
27714: EQUAL
27715: IFFALSE 27750
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27717: LD_ADDR_VAR 0 10
27721: PUSH
27722: LD_VAR 0 10
27726: PUSH
27727: LD_VAR 0 6
27731: PPUSH
27732: CALL_OW 311
27736: PPUSH
27737: LD_INT 3
27739: PPUSH
27740: CALL_OW 259
27744: PUSH
27745: LD_INT 4
27747: MUL
27748: MUL
27749: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 263
27759: PUSH
27760: LD_INT 2
27762: EQUAL
27763: IFFALSE 27814
// begin j := IsControledBy ( i ) ;
27765: LD_ADDR_VAR 0 7
27769: PUSH
27770: LD_VAR 0 6
27774: PPUSH
27775: CALL_OW 312
27779: ST_TO_ADDR
// if j then
27780: LD_VAR 0 7
27784: IFFALSE 27814
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27786: LD_ADDR_VAR 0 10
27790: PUSH
27791: LD_VAR 0 10
27795: PUSH
27796: LD_VAR 0 7
27800: PPUSH
27801: LD_INT 3
27803: PPUSH
27804: CALL_OW 259
27808: PUSH
27809: LD_INT 3
27811: MUL
27812: MUL
27813: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27814: LD_VAR 0 6
27818: PPUSH
27819: CALL_OW 264
27823: PUSH
27824: LD_INT 5
27826: PUSH
27827: LD_INT 6
27829: PUSH
27830: LD_INT 46
27832: PUSH
27833: LD_INT 44
27835: PUSH
27836: LD_INT 47
27838: PUSH
27839: LD_INT 45
27841: PUSH
27842: LD_INT 28
27844: PUSH
27845: LD_INT 7
27847: PUSH
27848: LD_INT 27
27850: PUSH
27851: LD_INT 29
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: IN
27866: PUSH
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_INT 52
27874: PPUSH
27875: CALL_OW 321
27879: PUSH
27880: LD_INT 2
27882: EQUAL
27883: AND
27884: IFFALSE 27901
// bpoints := bpoints * 1.2 ;
27886: LD_ADDR_VAR 0 10
27890: PUSH
27891: LD_VAR 0 10
27895: PUSH
27896: LD_REAL  1.20000000000000E+0000
27899: MUL
27900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27901: LD_VAR 0 6
27905: PPUSH
27906: CALL_OW 264
27910: PUSH
27911: LD_INT 6
27913: PUSH
27914: LD_INT 46
27916: PUSH
27917: LD_INT 47
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: IN
27925: IFFALSE 27942
// bpoints := bpoints * 1.2 ;
27927: LD_ADDR_VAR 0 10
27931: PUSH
27932: LD_VAR 0 10
27936: PUSH
27937: LD_REAL  1.20000000000000E+0000
27940: MUL
27941: ST_TO_ADDR
// end ; unit_building :
27942: GO 27956
27944: LD_INT 3
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 27955
27952: POP
// ; end ;
27953: GO 27956
27955: POP
// for j = 1 to 3 do
27956: LD_ADDR_VAR 0 7
27960: PUSH
27961: DOUBLE
27962: LD_INT 1
27964: DEC
27965: ST_TO_ADDR
27966: LD_INT 3
27968: PUSH
27969: FOR_TO
27970: IFFALSE 28023
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27972: LD_ADDR_VAR 0 5
27976: PUSH
27977: LD_VAR 0 5
27981: PPUSH
27982: LD_VAR 0 7
27986: PPUSH
27987: LD_VAR 0 5
27991: PUSH
27992: LD_VAR 0 7
27996: ARRAY
27997: PUSH
27998: LD_VAR 0 9
28002: PUSH
28003: LD_VAR 0 7
28007: ARRAY
28008: PUSH
28009: LD_VAR 0 10
28013: MUL
28014: PLUS
28015: PPUSH
28016: CALL_OW 1
28020: ST_TO_ADDR
28021: GO 27969
28023: POP
28024: POP
// end ;
28025: GO 26508
28027: POP
28028: POP
// result := Replace ( result , 4 , tmp ) ;
28029: LD_ADDR_VAR 0 5
28033: PUSH
28034: LD_VAR 0 5
28038: PPUSH
28039: LD_INT 4
28041: PPUSH
28042: LD_VAR 0 8
28046: PPUSH
28047: CALL_OW 1
28051: ST_TO_ADDR
// end ;
28052: LD_VAR 0 5
28056: RET
// export function DangerAtRange ( unit , range ) ; begin
28057: LD_INT 0
28059: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: CALL_OW 255
28074: PPUSH
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 250
28084: PPUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 251
28094: PPUSH
28095: LD_VAR 0 2
28099: PPUSH
28100: CALL 26360 0 4
28104: ST_TO_ADDR
// end ;
28105: LD_VAR 0 3
28109: RET
// export function DangerInArea ( side , area ) ; begin
28110: LD_INT 0
28112: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 2
28122: PPUSH
28123: LD_INT 81
28125: PUSH
28126: LD_VAR 0 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL_OW 70
28139: ST_TO_ADDR
// end ;
28140: LD_VAR 0 3
28144: RET
// export function IsExtension ( b ) ; begin
28145: LD_INT 0
28147: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28148: LD_ADDR_VAR 0 2
28152: PUSH
28153: LD_VAR 0 1
28157: PUSH
28158: LD_INT 23
28160: PUSH
28161: LD_INT 20
28163: PUSH
28164: LD_INT 22
28166: PUSH
28167: LD_INT 17
28169: PUSH
28170: LD_INT 24
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 19
28178: PUSH
28179: LD_INT 16
28181: PUSH
28182: LD_INT 25
28184: PUSH
28185: LD_INT 18
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: IN
28200: ST_TO_ADDR
// end ;
28201: LD_VAR 0 2
28205: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
28206: LD_INT 0
28208: PPUSH
28209: PPUSH
28210: PPUSH
// result := [ ] ;
28211: LD_ADDR_VAR 0 2
28215: PUSH
28216: EMPTY
28217: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_INT 21
28225: PUSH
28226: LD_INT 3
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PPUSH
28233: CALL_OW 69
28237: ST_TO_ADDR
// if not tmp then
28238: LD_VAR 0 3
28242: NOT
28243: IFFALSE 28247
// exit ;
28245: GO 28297
// for i in tmp do
28247: LD_ADDR_VAR 0 4
28251: PUSH
28252: LD_VAR 0 3
28256: PUSH
28257: FOR_IN
28258: IFFALSE 28295
// if GetBase ( i ) = base then
28260: LD_VAR 0 4
28264: PPUSH
28265: CALL_OW 274
28269: PUSH
28270: LD_VAR 0 1
28274: EQUAL
28275: IFFALSE 28293
// result := result ^ i ;
28277: LD_ADDR_VAR 0 2
28281: PUSH
28282: LD_VAR 0 2
28286: PUSH
28287: LD_VAR 0 4
28291: ADD
28292: ST_TO_ADDR
28293: GO 28257
28295: POP
28296: POP
// end ;
28297: LD_VAR 0 2
28301: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28302: LD_INT 0
28304: PPUSH
28305: PPUSH
// if BuildingStatus ( b ) = bs_build then
28306: LD_VAR 0 2
28310: PPUSH
28311: CALL_OW 461
28315: PUSH
28316: LD_INT 1
28318: EQUAL
28319: IFFALSE 28379
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_STRING h
28328: PUSH
28329: LD_VAR 0 2
28333: PPUSH
28334: CALL_OW 250
28338: PUSH
28339: LD_VAR 0 2
28343: PPUSH
28344: CALL_OW 251
28348: PUSH
28349: LD_VAR 0 2
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: PPUSH
28375: CALL_OW 446
// end ;
28379: LD_VAR 0 3
28383: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28392: LD_VAR 0 1
28396: NOT
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 263
28407: PUSH
28408: LD_INT 2
28410: EQUAL
28411: NOT
28412: OR
28413: IFFALSE 28417
// exit ;
28415: GO 28733
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28417: LD_ADDR_VAR 0 6
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 255
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 30
28444: PUSH
28445: LD_INT 36
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 34
28454: PUSH
28455: LD_INT 31
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PPUSH
28471: CALL_OW 69
28475: ST_TO_ADDR
// if not tmp then
28476: LD_VAR 0 6
28480: NOT
28481: IFFALSE 28485
// exit ;
28483: GO 28733
// result := [ ] ;
28485: LD_ADDR_VAR 0 2
28489: PUSH
28490: EMPTY
28491: ST_TO_ADDR
// for i in tmp do
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_VAR 0 6
28501: PUSH
28502: FOR_IN
28503: IFFALSE 28574
// begin t := UnitsInside ( i ) ;
28505: LD_ADDR_VAR 0 4
28509: PUSH
28510: LD_VAR 0 3
28514: PPUSH
28515: CALL_OW 313
28519: ST_TO_ADDR
// if t then
28520: LD_VAR 0 4
28524: IFFALSE 28572
// for j in t do
28526: LD_ADDR_VAR 0 7
28530: PUSH
28531: LD_VAR 0 4
28535: PUSH
28536: FOR_IN
28537: IFFALSE 28570
// result := Insert ( result , result + 1 , j ) ;
28539: LD_ADDR_VAR 0 2
28543: PUSH
28544: LD_VAR 0 2
28548: PPUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_INT 1
28556: PLUS
28557: PPUSH
28558: LD_VAR 0 7
28562: PPUSH
28563: CALL_OW 2
28567: ST_TO_ADDR
28568: GO 28536
28570: POP
28571: POP
// end ;
28572: GO 28502
28574: POP
28575: POP
// if not result then
28576: LD_VAR 0 2
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28733
// mech := result [ 1 ] ;
28585: LD_ADDR_VAR 0 5
28589: PUSH
28590: LD_VAR 0 2
28594: PUSH
28595: LD_INT 1
28597: ARRAY
28598: ST_TO_ADDR
// if result > 1 then
28599: LD_VAR 0 2
28603: PUSH
28604: LD_INT 1
28606: GREATER
28607: IFFALSE 28719
// for i = 2 to result do
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: DOUBLE
28615: LD_INT 2
28617: DEC
28618: ST_TO_ADDR
28619: LD_VAR 0 2
28623: PUSH
28624: FOR_TO
28625: IFFALSE 28717
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28627: LD_ADDR_VAR 0 4
28631: PUSH
28632: LD_VAR 0 2
28636: PUSH
28637: LD_VAR 0 3
28641: ARRAY
28642: PPUSH
28643: LD_INT 3
28645: PPUSH
28646: CALL_OW 259
28650: PUSH
28651: LD_VAR 0 2
28655: PUSH
28656: LD_VAR 0 3
28660: ARRAY
28661: PPUSH
28662: CALL_OW 432
28666: MINUS
28667: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28668: LD_VAR 0 4
28672: PUSH
28673: LD_VAR 0 5
28677: PPUSH
28678: LD_INT 3
28680: PPUSH
28681: CALL_OW 259
28685: PUSH
28686: LD_VAR 0 5
28690: PPUSH
28691: CALL_OW 432
28695: MINUS
28696: GREATEREQUAL
28697: IFFALSE 28715
// mech := result [ i ] ;
28699: LD_ADDR_VAR 0 5
28703: PUSH
28704: LD_VAR 0 2
28708: PUSH
28709: LD_VAR 0 3
28713: ARRAY
28714: ST_TO_ADDR
// end ;
28715: GO 28624
28717: POP
28718: POP
// ComLinkTo ( vehicle , mech ) ;
28719: LD_VAR 0 1
28723: PPUSH
28724: LD_VAR 0 5
28728: PPUSH
28729: CALL_OW 135
// end ;
28733: LD_VAR 0 2
28737: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28738: LD_INT 0
28740: PPUSH
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
28749: PPUSH
28750: PPUSH
28751: PPUSH
28752: PPUSH
// result := [ ] ;
28753: LD_ADDR_VAR 0 6
28757: PUSH
28758: EMPTY
28759: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28760: LD_VAR 0 1
28764: PPUSH
28765: CALL_OW 266
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: IN
28780: NOT
28781: IFFALSE 28785
// exit ;
28783: GO 30304
// if name then
28785: LD_VAR 0 2
28789: IFFALSE 28805
// SetBName ( base_dep , name ) ;
28791: LD_VAR 0 1
28795: PPUSH
28796: LD_VAR 0 2
28800: PPUSH
28801: CALL_OW 500
// base := GetBase ( base_dep ) ;
28805: LD_ADDR_VAR 0 14
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 274
28819: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28820: LD_ADDR_VAR 0 15
28824: PUSH
28825: LD_VAR 0 1
28829: PPUSH
28830: CALL_OW 255
28834: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28835: LD_ADDR_VAR 0 16
28839: PUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 248
28849: ST_TO_ADDR
// if sources then
28850: LD_VAR 0 4
28854: IFFALSE 28901
// for i = 1 to 3 do
28856: LD_ADDR_VAR 0 7
28860: PUSH
28861: DOUBLE
28862: LD_INT 1
28864: DEC
28865: ST_TO_ADDR
28866: LD_INT 3
28868: PUSH
28869: FOR_TO
28870: IFFALSE 28899
// AddResourceType ( base , i , sources [ i ] ) ;
28872: LD_VAR 0 14
28876: PPUSH
28877: LD_VAR 0 7
28881: PPUSH
28882: LD_VAR 0 4
28886: PUSH
28887: LD_VAR 0 7
28891: ARRAY
28892: PPUSH
28893: CALL_OW 276
28897: GO 28869
28899: POP
28900: POP
// buildings := GetBaseBuildings ( base ) ;
28901: LD_ADDR_VAR 0 17
28905: PUSH
28906: LD_VAR 0 14
28910: PPUSH
28911: CALL 28206 0 1
28915: ST_TO_ADDR
// InitHc ;
28916: CALL_OW 19
// InitUc ;
28920: CALL_OW 18
// uc_side := side ;
28924: LD_ADDR_OWVAR 20
28928: PUSH
28929: LD_VAR 0 15
28933: ST_TO_ADDR
// uc_nation := nation ;
28934: LD_ADDR_OWVAR 21
28938: PUSH
28939: LD_VAR 0 16
28943: ST_TO_ADDR
// if buildings then
28944: LD_VAR 0 17
28948: IFFALSE 30163
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28950: LD_VAR 0 17
28954: PPUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 30
28960: PUSH
28961: LD_INT 32
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 30
28970: PUSH
28971: LD_INT 33
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: PPUSH
28983: CALL_OW 72
28987: IFFALSE 29070
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28989: LD_ADDR_VAR 0 7
28993: PUSH
28994: LD_VAR 0 17
28998: PPUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 30
29004: PUSH
29005: LD_INT 32
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 30
29014: PUSH
29015: LD_INT 33
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: PPUSH
29027: CALL_OW 72
29031: PUSH
29032: FOR_IN
29033: IFFALSE 29068
// begin if not GetBWeapon ( i ) then
29035: LD_VAR 0 7
29039: PPUSH
29040: CALL_OW 269
29044: NOT
29045: IFFALSE 29066
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
29047: LD_VAR 0 7
29051: PPUSH
29052: LD_VAR 0 7
29056: PPUSH
29057: CALL 30309 0 1
29061: PPUSH
29062: CALL_OW 431
// end ;
29066: GO 29032
29068: POP
29069: POP
// end ; for i = 1 to personel do
29070: LD_ADDR_VAR 0 7
29074: PUSH
29075: DOUBLE
29076: LD_INT 1
29078: DEC
29079: ST_TO_ADDR
29080: LD_VAR 0 5
29084: PUSH
29085: FOR_TO
29086: IFFALSE 30143
// begin if i > 4 then
29088: LD_VAR 0 7
29092: PUSH
29093: LD_INT 4
29095: GREATER
29096: IFFALSE 29100
// break ;
29098: GO 30143
// case i of 1 :
29100: LD_VAR 0 7
29104: PUSH
29105: LD_INT 1
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29186
29113: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29114: LD_ADDR_VAR 0 11
29118: PUSH
29119: LD_VAR 0 17
29123: PPUSH
29124: LD_INT 22
29126: PUSH
29127: LD_VAR 0 15
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: LD_INT 30
29141: PUSH
29142: LD_INT 32
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 30
29151: PUSH
29152: LD_INT 4
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 30
29161: PUSH
29162: LD_INT 5
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 72
29183: ST_TO_ADDR
29184: GO 29408
29186: LD_INT 2
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29256
29194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29195: LD_ADDR_VAR 0 11
29199: PUSH
29200: LD_VAR 0 17
29204: PPUSH
29205: LD_INT 22
29207: PUSH
29208: LD_VAR 0 15
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: LD_INT 30
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 30
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PPUSH
29249: CALL_OW 72
29253: ST_TO_ADDR
29254: GO 29408
29256: LD_INT 3
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29326
29264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29265: LD_ADDR_VAR 0 11
29269: PUSH
29270: LD_VAR 0 17
29274: PPUSH
29275: LD_INT 22
29277: PUSH
29278: LD_VAR 0 15
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 30
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 30
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 72
29323: ST_TO_ADDR
29324: GO 29408
29326: LD_INT 4
29328: DOUBLE
29329: EQUAL
29330: IFTRUE 29334
29332: GO 29407
29334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29335: LD_ADDR_VAR 0 11
29339: PUSH
29340: LD_VAR 0 17
29344: PPUSH
29345: LD_INT 22
29347: PUSH
29348: LD_VAR 0 15
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 30
29362: PUSH
29363: LD_INT 6
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 30
29372: PUSH
29373: LD_INT 7
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 30
29382: PUSH
29383: LD_INT 8
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PPUSH
29400: CALL_OW 72
29404: ST_TO_ADDR
29405: GO 29408
29407: POP
// if i = 1 then
29408: LD_VAR 0 7
29412: PUSH
29413: LD_INT 1
29415: EQUAL
29416: IFFALSE 29527
// begin tmp := [ ] ;
29418: LD_ADDR_VAR 0 18
29422: PUSH
29423: EMPTY
29424: ST_TO_ADDR
// for j in f do
29425: LD_ADDR_VAR 0 8
29429: PUSH
29430: LD_VAR 0 11
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29509
// if GetBType ( j ) = b_bunker then
29438: LD_VAR 0 8
29442: PPUSH
29443: CALL_OW 266
29447: PUSH
29448: LD_INT 32
29450: EQUAL
29451: IFFALSE 29478
// tmp := Insert ( tmp , 1 , j ) else
29453: LD_ADDR_VAR 0 18
29457: PUSH
29458: LD_VAR 0 18
29462: PPUSH
29463: LD_INT 1
29465: PPUSH
29466: LD_VAR 0 8
29470: PPUSH
29471: CALL_OW 2
29475: ST_TO_ADDR
29476: GO 29507
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29478: LD_ADDR_VAR 0 18
29482: PUSH
29483: LD_VAR 0 18
29487: PPUSH
29488: LD_VAR 0 18
29492: PUSH
29493: LD_INT 1
29495: PLUS
29496: PPUSH
29497: LD_VAR 0 8
29501: PPUSH
29502: CALL_OW 2
29506: ST_TO_ADDR
29507: GO 29435
29509: POP
29510: POP
// if tmp then
29511: LD_VAR 0 18
29515: IFFALSE 29527
// f := tmp ;
29517: LD_ADDR_VAR 0 11
29521: PUSH
29522: LD_VAR 0 18
29526: ST_TO_ADDR
// end ; x := personel [ i ] ;
29527: LD_ADDR_VAR 0 12
29531: PUSH
29532: LD_VAR 0 5
29536: PUSH
29537: LD_VAR 0 7
29541: ARRAY
29542: ST_TO_ADDR
// if x = - 1 then
29543: LD_VAR 0 12
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: EQUAL
29552: IFFALSE 29761
// begin for j in f do
29554: LD_ADDR_VAR 0 8
29558: PUSH
29559: LD_VAR 0 11
29563: PUSH
29564: FOR_IN
29565: IFFALSE 29757
// repeat InitHc ;
29567: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29571: LD_VAR 0 8
29575: PPUSH
29576: CALL_OW 266
29580: PUSH
29581: LD_INT 5
29583: EQUAL
29584: IFFALSE 29654
// begin if UnitsInside ( j ) < 3 then
29586: LD_VAR 0 8
29590: PPUSH
29591: CALL_OW 313
29595: PUSH
29596: LD_INT 3
29598: LESS
29599: IFFALSE 29635
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29601: LD_INT 0
29603: PPUSH
29604: LD_INT 5
29606: PUSH
29607: LD_INT 8
29609: PUSH
29610: LD_INT 9
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: PUSH
29618: LD_VAR 0 16
29622: ARRAY
29623: PPUSH
29624: LD_VAR 0 3
29628: PPUSH
29629: CALL_OW 380
29633: GO 29652
// PrepareHuman ( false , i , skill ) ;
29635: LD_INT 0
29637: PPUSH
29638: LD_VAR 0 7
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: CALL_OW 380
// end else
29652: GO 29671
// PrepareHuman ( false , i , skill ) ;
29654: LD_INT 0
29656: PPUSH
29657: LD_VAR 0 7
29661: PPUSH
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL_OW 380
// un := CreateHuman ;
29671: LD_ADDR_VAR 0 13
29675: PUSH
29676: CALL_OW 44
29680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29681: LD_ADDR_VAR 0 6
29685: PUSH
29686: LD_VAR 0 6
29690: PPUSH
29691: LD_INT 1
29693: PPUSH
29694: LD_VAR 0 13
29698: PPUSH
29699: CALL_OW 2
29703: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29704: LD_VAR 0 13
29708: PPUSH
29709: LD_VAR 0 8
29713: PPUSH
29714: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29718: LD_VAR 0 8
29722: PPUSH
29723: CALL_OW 313
29727: PUSH
29728: LD_INT 6
29730: EQUAL
29731: PUSH
29732: LD_VAR 0 8
29736: PPUSH
29737: CALL_OW 266
29741: PUSH
29742: LD_INT 32
29744: PUSH
29745: LD_INT 31
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: IN
29752: OR
29753: IFFALSE 29567
29755: GO 29564
29757: POP
29758: POP
// end else
29759: GO 30141
// for j = 1 to x do
29761: LD_ADDR_VAR 0 8
29765: PUSH
29766: DOUBLE
29767: LD_INT 1
29769: DEC
29770: ST_TO_ADDR
29771: LD_VAR 0 12
29775: PUSH
29776: FOR_TO
29777: IFFALSE 30139
// begin InitHc ;
29779: CALL_OW 19
// if not f then
29783: LD_VAR 0 11
29787: NOT
29788: IFFALSE 29877
// begin PrepareHuman ( false , i , skill ) ;
29790: LD_INT 0
29792: PPUSH
29793: LD_VAR 0 7
29797: PPUSH
29798: LD_VAR 0 3
29802: PPUSH
29803: CALL_OW 380
// un := CreateHuman ;
29807: LD_ADDR_VAR 0 13
29811: PUSH
29812: CALL_OW 44
29816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29817: LD_ADDR_VAR 0 6
29821: PUSH
29822: LD_VAR 0 6
29826: PPUSH
29827: LD_INT 1
29829: PPUSH
29830: LD_VAR 0 13
29834: PPUSH
29835: CALL_OW 2
29839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29840: LD_VAR 0 13
29844: PPUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 250
29854: PPUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: CALL_OW 251
29864: PPUSH
29865: LD_INT 10
29867: PPUSH
29868: LD_INT 0
29870: PPUSH
29871: CALL_OW 50
// continue ;
29875: GO 29776
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29877: LD_VAR 0 11
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: PPUSH
29886: CALL_OW 313
29890: PUSH
29891: LD_VAR 0 11
29895: PUSH
29896: LD_INT 1
29898: ARRAY
29899: PPUSH
29900: CALL_OW 266
29904: PUSH
29905: LD_INT 32
29907: PUSH
29908: LD_INT 31
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: IN
29915: AND
29916: PUSH
29917: LD_VAR 0 11
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: PPUSH
29926: CALL_OW 313
29930: PUSH
29931: LD_INT 6
29933: EQUAL
29934: OR
29935: IFFALSE 29955
// f := Delete ( f , 1 ) ;
29937: LD_ADDR_VAR 0 11
29941: PUSH
29942: LD_VAR 0 11
29946: PPUSH
29947: LD_INT 1
29949: PPUSH
29950: CALL_OW 3
29954: ST_TO_ADDR
// if not f then
29955: LD_VAR 0 11
29959: NOT
29960: IFFALSE 29978
// begin x := x + 2 ;
29962: LD_ADDR_VAR 0 12
29966: PUSH
29967: LD_VAR 0 12
29971: PUSH
29972: LD_INT 2
29974: PLUS
29975: ST_TO_ADDR
// continue ;
29976: GO 29776
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29978: LD_VAR 0 11
29982: PUSH
29983: LD_INT 1
29985: ARRAY
29986: PPUSH
29987: CALL_OW 266
29991: PUSH
29992: LD_INT 5
29994: EQUAL
29995: IFFALSE 30069
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29997: LD_VAR 0 11
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: PPUSH
30006: CALL_OW 313
30010: PUSH
30011: LD_INT 3
30013: LESS
30014: IFFALSE 30050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30016: LD_INT 0
30018: PPUSH
30019: LD_INT 5
30021: PUSH
30022: LD_INT 8
30024: PUSH
30025: LD_INT 9
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: PUSH
30033: LD_VAR 0 16
30037: ARRAY
30038: PPUSH
30039: LD_VAR 0 3
30043: PPUSH
30044: CALL_OW 380
30048: GO 30067
// PrepareHuman ( false , i , skill ) ;
30050: LD_INT 0
30052: PPUSH
30053: LD_VAR 0 7
30057: PPUSH
30058: LD_VAR 0 3
30062: PPUSH
30063: CALL_OW 380
// end else
30067: GO 30086
// PrepareHuman ( false , i , skill ) ;
30069: LD_INT 0
30071: PPUSH
30072: LD_VAR 0 7
30076: PPUSH
30077: LD_VAR 0 3
30081: PPUSH
30082: CALL_OW 380
// un := CreateHuman ;
30086: LD_ADDR_VAR 0 13
30090: PUSH
30091: CALL_OW 44
30095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30096: LD_ADDR_VAR 0 6
30100: PUSH
30101: LD_VAR 0 6
30105: PPUSH
30106: LD_INT 1
30108: PPUSH
30109: LD_VAR 0 13
30113: PPUSH
30114: CALL_OW 2
30118: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30119: LD_VAR 0 13
30123: PPUSH
30124: LD_VAR 0 11
30128: PUSH
30129: LD_INT 1
30131: ARRAY
30132: PPUSH
30133: CALL_OW 52
// end ;
30137: GO 29776
30139: POP
30140: POP
// end ;
30141: GO 29085
30143: POP
30144: POP
// result := result ^ buildings ;
30145: LD_ADDR_VAR 0 6
30149: PUSH
30150: LD_VAR 0 6
30154: PUSH
30155: LD_VAR 0 17
30159: ADD
30160: ST_TO_ADDR
// end else
30161: GO 30304
// begin for i = 1 to personel do
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: DOUBLE
30169: LD_INT 1
30171: DEC
30172: ST_TO_ADDR
30173: LD_VAR 0 5
30177: PUSH
30178: FOR_TO
30179: IFFALSE 30302
// begin if i > 4 then
30181: LD_VAR 0 7
30185: PUSH
30186: LD_INT 4
30188: GREATER
30189: IFFALSE 30193
// break ;
30191: GO 30302
// x := personel [ i ] ;
30193: LD_ADDR_VAR 0 12
30197: PUSH
30198: LD_VAR 0 5
30202: PUSH
30203: LD_VAR 0 7
30207: ARRAY
30208: ST_TO_ADDR
// if x = - 1 then
30209: LD_VAR 0 12
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: EQUAL
30218: IFFALSE 30222
// continue ;
30220: GO 30178
// PrepareHuman ( false , i , skill ) ;
30222: LD_INT 0
30224: PPUSH
30225: LD_VAR 0 7
30229: PPUSH
30230: LD_VAR 0 3
30234: PPUSH
30235: CALL_OW 380
// un := CreateHuman ;
30239: LD_ADDR_VAR 0 13
30243: PUSH
30244: CALL_OW 44
30248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30249: LD_VAR 0 13
30253: PPUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 250
30263: PPUSH
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL_OW 251
30273: PPUSH
30274: LD_INT 10
30276: PPUSH
30277: LD_INT 0
30279: PPUSH
30280: CALL_OW 50
// result := result ^ un ;
30284: LD_ADDR_VAR 0 6
30288: PUSH
30289: LD_VAR 0 6
30293: PUSH
30294: LD_VAR 0 13
30298: ADD
30299: ST_TO_ADDR
// end ;
30300: GO 30178
30302: POP
30303: POP
// end ; end ;
30304: LD_VAR 0 6
30308: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
// result := false ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_INT 0
30334: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30335: LD_VAR 0 1
30339: NOT
30340: PUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: CALL_OW 266
30350: PUSH
30351: LD_INT 32
30353: PUSH
30354: LD_INT 33
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: IN
30361: NOT
30362: OR
30363: IFFALSE 30367
// exit ;
30365: GO 31498
// nat := GetNation ( tower ) ;
30367: LD_ADDR_VAR 0 11
30371: PUSH
30372: LD_VAR 0 1
30376: PPUSH
30377: CALL_OW 248
30381: ST_TO_ADDR
// side := GetSide ( tower ) ;
30382: LD_ADDR_VAR 0 15
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 255
30396: ST_TO_ADDR
// x := GetX ( tower ) ;
30397: LD_ADDR_VAR 0 9
30401: PUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 250
30411: ST_TO_ADDR
// y := GetY ( tower ) ;
30412: LD_ADDR_VAR 0 10
30416: PUSH
30417: LD_VAR 0 1
30421: PPUSH
30422: CALL_OW 251
30426: ST_TO_ADDR
// if not x or not y then
30427: LD_VAR 0 9
30431: NOT
30432: PUSH
30433: LD_VAR 0 10
30437: NOT
30438: OR
30439: IFFALSE 30443
// exit ;
30441: GO 31498
// weapon := 0 ;
30443: LD_ADDR_VAR 0 17
30447: PUSH
30448: LD_INT 0
30450: ST_TO_ADDR
// fac_list := [ ] ;
30451: LD_ADDR_VAR 0 16
30455: PUSH
30456: EMPTY
30457: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
30458: LD_ADDR_VAR 0 5
30462: PUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 274
30472: PPUSH
30473: CALL 28206 0 1
30477: PPUSH
30478: LD_INT 30
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PPUSH
30488: CALL_OW 72
30492: ST_TO_ADDR
// if not factories then
30493: LD_VAR 0 5
30497: NOT
30498: IFFALSE 30502
// exit ;
30500: GO 31498
// for i in factories do
30502: LD_ADDR_VAR 0 7
30506: PUSH
30507: LD_VAR 0 5
30511: PUSH
30512: FOR_IN
30513: IFFALSE 30538
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30515: LD_ADDR_VAR 0 16
30519: PUSH
30520: LD_VAR 0 16
30524: PUSH
30525: LD_VAR 0 7
30529: PPUSH
30530: CALL_OW 478
30534: UNION
30535: ST_TO_ADDR
30536: GO 30512
30538: POP
30539: POP
// if not fac_list then
30540: LD_VAR 0 16
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 31498
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30549: LD_ADDR_VAR 0 4
30553: PUSH
30554: LD_INT 4
30556: PUSH
30557: LD_INT 5
30559: PUSH
30560: LD_INT 9
30562: PUSH
30563: LD_INT 10
30565: PUSH
30566: LD_INT 6
30568: PUSH
30569: LD_INT 7
30571: PUSH
30572: LD_INT 11
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 27
30586: PUSH
30587: LD_INT 28
30589: PUSH
30590: LD_INT 26
30592: PUSH
30593: LD_INT 30
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 43
30604: PUSH
30605: LD_INT 44
30607: PUSH
30608: LD_INT 46
30610: PUSH
30611: LD_INT 45
30613: PUSH
30614: LD_INT 47
30616: PUSH
30617: LD_INT 49
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: PUSH
30633: LD_VAR 0 11
30637: ARRAY
30638: ST_TO_ADDR
// for i in list do
30639: LD_ADDR_VAR 0 7
30643: PUSH
30644: LD_VAR 0 4
30648: PUSH
30649: FOR_IN
30650: IFFALSE 30683
// if not i in fac_list then
30652: LD_VAR 0 7
30656: PUSH
30657: LD_VAR 0 16
30661: IN
30662: NOT
30663: IFFALSE 30681
// list := list diff i ;
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: LD_VAR 0 4
30674: PUSH
30675: LD_VAR 0 7
30679: DIFF
30680: ST_TO_ADDR
30681: GO 30649
30683: POP
30684: POP
// if not list then
30685: LD_VAR 0 4
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 31498
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30694: LD_VAR 0 11
30698: PUSH
30699: LD_INT 3
30701: EQUAL
30702: PUSH
30703: LD_INT 49
30705: PUSH
30706: LD_VAR 0 4
30710: IN
30711: AND
30712: PUSH
30713: LD_INT 31
30715: PPUSH
30716: LD_VAR 0 15
30720: PPUSH
30721: CALL_OW 321
30725: PUSH
30726: LD_INT 2
30728: EQUAL
30729: AND
30730: IFFALSE 30790
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30732: LD_INT 22
30734: PUSH
30735: LD_VAR 0 15
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 35
30746: PUSH
30747: LD_INT 49
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 91
30756: PUSH
30757: LD_VAR 0 1
30761: PUSH
30762: LD_INT 10
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: NOT
30780: IFFALSE 30790
// weapon := ru_time_lapser ;
30782: LD_ADDR_VAR 0 17
30786: PUSH
30787: LD_INT 49
30789: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30790: LD_VAR 0 11
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: IN
30805: PUSH
30806: LD_INT 11
30808: PUSH
30809: LD_VAR 0 4
30813: IN
30814: PUSH
30815: LD_INT 30
30817: PUSH
30818: LD_VAR 0 4
30822: IN
30823: OR
30824: AND
30825: PUSH
30826: LD_INT 6
30828: PPUSH
30829: LD_VAR 0 15
30833: PPUSH
30834: CALL_OW 321
30838: PUSH
30839: LD_INT 2
30841: EQUAL
30842: AND
30843: IFFALSE 31008
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30845: LD_INT 22
30847: PUSH
30848: LD_VAR 0 15
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 35
30862: PUSH
30863: LD_INT 11
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 35
30872: PUSH
30873: LD_INT 30
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 91
30887: PUSH
30888: LD_VAR 0 1
30892: PUSH
30893: LD_INT 18
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PPUSH
30906: CALL_OW 69
30910: NOT
30911: PUSH
30912: LD_INT 22
30914: PUSH
30915: LD_VAR 0 15
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 30
30929: PUSH
30930: LD_INT 32
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 91
30954: PUSH
30955: LD_VAR 0 1
30959: PUSH
30960: LD_INT 12
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: PPUSH
30976: CALL_OW 69
30980: PUSH
30981: LD_INT 2
30983: GREATER
30984: AND
30985: IFFALSE 31008
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30987: LD_ADDR_VAR 0 17
30991: PUSH
30992: LD_INT 11
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_VAR 0 11
31006: ARRAY
31007: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31008: LD_VAR 0 17
31012: NOT
31013: PUSH
31014: LD_INT 40
31016: PPUSH
31017: LD_VAR 0 15
31021: PPUSH
31022: CALL_OW 321
31026: PUSH
31027: LD_INT 2
31029: EQUAL
31030: AND
31031: PUSH
31032: LD_INT 7
31034: PUSH
31035: LD_VAR 0 4
31039: IN
31040: PUSH
31041: LD_INT 28
31043: PUSH
31044: LD_VAR 0 4
31048: IN
31049: OR
31050: PUSH
31051: LD_INT 45
31053: PUSH
31054: LD_VAR 0 4
31058: IN
31059: OR
31060: AND
31061: IFFALSE 31315
// begin hex := GetHexInfo ( x , y ) ;
31063: LD_ADDR_VAR 0 3
31067: PUSH
31068: LD_VAR 0 9
31072: PPUSH
31073: LD_VAR 0 10
31077: PPUSH
31078: CALL_OW 546
31082: ST_TO_ADDR
// if hex [ 1 ] then
31083: LD_VAR 0 3
31087: PUSH
31088: LD_INT 1
31090: ARRAY
31091: IFFALSE 31095
// exit ;
31093: GO 31498
// height := hex [ 2 ] ;
31095: LD_ADDR_VAR 0 14
31099: PUSH
31100: LD_VAR 0 3
31104: PUSH
31105: LD_INT 2
31107: ARRAY
31108: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31109: LD_ADDR_VAR 0 13
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 3
31122: PUSH
31123: LD_INT 5
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// for i in tmp do
31132: LD_ADDR_VAR 0 7
31136: PUSH
31137: LD_VAR 0 13
31141: PUSH
31142: FOR_IN
31143: IFFALSE 31313
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31145: LD_ADDR_VAR 0 8
31149: PUSH
31150: LD_VAR 0 9
31154: PPUSH
31155: LD_VAR 0 7
31159: PPUSH
31160: LD_INT 5
31162: PPUSH
31163: CALL_OW 272
31167: PUSH
31168: LD_VAR 0 10
31172: PPUSH
31173: LD_VAR 0 7
31177: PPUSH
31178: LD_INT 5
31180: PPUSH
31181: CALL_OW 273
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31190: LD_VAR 0 8
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PPUSH
31199: LD_VAR 0 8
31203: PUSH
31204: LD_INT 2
31206: ARRAY
31207: PPUSH
31208: CALL_OW 488
31212: IFFALSE 31311
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_VAR 0 8
31223: PUSH
31224: LD_INT 1
31226: ARRAY
31227: PPUSH
31228: LD_VAR 0 8
31232: PUSH
31233: LD_INT 2
31235: ARRAY
31236: PPUSH
31237: CALL_OW 546
31241: ST_TO_ADDR
// if hex [ 1 ] then
31242: LD_VAR 0 3
31246: PUSH
31247: LD_INT 1
31249: ARRAY
31250: IFFALSE 31254
// continue ;
31252: GO 31142
// h := hex [ 2 ] ;
31254: LD_ADDR_VAR 0 12
31258: PUSH
31259: LD_VAR 0 3
31263: PUSH
31264: LD_INT 2
31266: ARRAY
31267: ST_TO_ADDR
// if h + 7 < height then
31268: LD_VAR 0 12
31272: PUSH
31273: LD_INT 7
31275: PLUS
31276: PUSH
31277: LD_VAR 0 14
31281: LESS
31282: IFFALSE 31311
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31284: LD_ADDR_VAR 0 17
31288: PUSH
31289: LD_INT 7
31291: PUSH
31292: LD_INT 28
31294: PUSH
31295: LD_INT 45
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: PUSH
31303: LD_VAR 0 11
31307: ARRAY
31308: ST_TO_ADDR
// break ;
31309: GO 31313
// end ; end ; end ;
31311: GO 31142
31313: POP
31314: POP
// end ; if not weapon then
31315: LD_VAR 0 17
31319: NOT
31320: IFFALSE 31380
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31322: LD_ADDR_VAR 0 4
31326: PUSH
31327: LD_VAR 0 4
31331: PUSH
31332: LD_INT 11
31334: PUSH
31335: LD_INT 30
31337: PUSH
31338: LD_INT 49
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: DIFF
31346: ST_TO_ADDR
// if not list then
31347: LD_VAR 0 4
31351: NOT
31352: IFFALSE 31356
// exit ;
31354: GO 31498
// weapon := list [ rand ( 1 , list ) ] ;
31356: LD_ADDR_VAR 0 17
31360: PUSH
31361: LD_VAR 0 4
31365: PUSH
31366: LD_INT 1
31368: PPUSH
31369: LD_VAR 0 4
31373: PPUSH
31374: CALL_OW 12
31378: ARRAY
31379: ST_TO_ADDR
// end ; if weapon then
31380: LD_VAR 0 17
31384: IFFALSE 31498
// begin tmp := CostOfWeapon ( weapon ) ;
31386: LD_ADDR_VAR 0 13
31390: PUSH
31391: LD_VAR 0 17
31395: PPUSH
31396: CALL_OW 451
31400: ST_TO_ADDR
// j := GetBase ( tower ) ;
31401: LD_ADDR_VAR 0 8
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 274
31415: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31416: LD_VAR 0 8
31420: PPUSH
31421: LD_INT 1
31423: PPUSH
31424: CALL_OW 275
31428: PUSH
31429: LD_VAR 0 13
31433: PUSH
31434: LD_INT 1
31436: ARRAY
31437: GREATEREQUAL
31438: PUSH
31439: LD_VAR 0 8
31443: PPUSH
31444: LD_INT 2
31446: PPUSH
31447: CALL_OW 275
31451: PUSH
31452: LD_VAR 0 13
31456: PUSH
31457: LD_INT 2
31459: ARRAY
31460: GREATEREQUAL
31461: AND
31462: PUSH
31463: LD_VAR 0 8
31467: PPUSH
31468: LD_INT 3
31470: PPUSH
31471: CALL_OW 275
31475: PUSH
31476: LD_VAR 0 13
31480: PUSH
31481: LD_INT 3
31483: ARRAY
31484: GREATEREQUAL
31485: AND
31486: IFFALSE 31498
// result := weapon ;
31488: LD_ADDR_VAR 0 2
31492: PUSH
31493: LD_VAR 0 17
31497: ST_TO_ADDR
// end ; end ;
31498: LD_VAR 0 2
31502: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31503: LD_INT 0
31505: PPUSH
31506: PPUSH
// result := true ;
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 1
31514: ST_TO_ADDR
// if array1 = array2 then
31515: LD_VAR 0 1
31519: PUSH
31520: LD_VAR 0 2
31524: EQUAL
31525: IFFALSE 31585
// begin for i = 1 to array1 do
31527: LD_ADDR_VAR 0 4
31531: PUSH
31532: DOUBLE
31533: LD_INT 1
31535: DEC
31536: ST_TO_ADDR
31537: LD_VAR 0 1
31541: PUSH
31542: FOR_TO
31543: IFFALSE 31581
// if array1 [ i ] <> array2 [ i ] then
31545: LD_VAR 0 1
31549: PUSH
31550: LD_VAR 0 4
31554: ARRAY
31555: PUSH
31556: LD_VAR 0 2
31560: PUSH
31561: LD_VAR 0 4
31565: ARRAY
31566: NONEQUAL
31567: IFFALSE 31579
// begin result := false ;
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 0
31576: ST_TO_ADDR
// break ;
31577: GO 31581
// end ;
31579: GO 31542
31581: POP
31582: POP
// end else
31583: GO 31593
// result := false ;
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 0
31592: ST_TO_ADDR
// end ;
31593: LD_VAR 0 3
31597: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31598: LD_INT 0
31600: PPUSH
31601: PPUSH
31602: PPUSH
// pom := GetBase ( fac ) ;
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 274
31617: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31618: LD_ADDR_VAR 0 4
31622: PUSH
31623: LD_VAR 0 2
31627: PUSH
31628: LD_INT 1
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 2
31639: ARRAY
31640: PPUSH
31641: LD_VAR 0 2
31645: PUSH
31646: LD_INT 3
31648: ARRAY
31649: PPUSH
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 4
31657: ARRAY
31658: PPUSH
31659: CALL_OW 449
31663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31664: LD_ADDR_VAR 0 3
31668: PUSH
31669: LD_VAR 0 5
31673: PPUSH
31674: LD_INT 1
31676: PPUSH
31677: CALL_OW 275
31681: PUSH
31682: LD_VAR 0 4
31686: PUSH
31687: LD_INT 1
31689: ARRAY
31690: GREATEREQUAL
31691: PUSH
31692: LD_VAR 0 5
31696: PPUSH
31697: LD_INT 2
31699: PPUSH
31700: CALL_OW 275
31704: PUSH
31705: LD_VAR 0 4
31709: PUSH
31710: LD_INT 2
31712: ARRAY
31713: GREATEREQUAL
31714: AND
31715: PUSH
31716: LD_VAR 0 5
31720: PPUSH
31721: LD_INT 3
31723: PPUSH
31724: CALL_OW 275
31728: PUSH
31729: LD_VAR 0 4
31733: PUSH
31734: LD_INT 3
31736: ARRAY
31737: GREATEREQUAL
31738: AND
31739: ST_TO_ADDR
// end ;
31740: LD_VAR 0 3
31744: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
// pom := GetBase ( building ) ;
31751: LD_ADDR_VAR 0 3
31755: PUSH
31756: LD_VAR 0 1
31760: PPUSH
31761: CALL_OW 274
31765: ST_TO_ADDR
// if not pom then
31766: LD_VAR 0 3
31770: NOT
31771: IFFALSE 31775
// exit ;
31773: GO 31945
// btype := GetBType ( building ) ;
31775: LD_ADDR_VAR 0 5
31779: PUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 266
31789: ST_TO_ADDR
// if btype = b_armoury then
31790: LD_VAR 0 5
31794: PUSH
31795: LD_INT 4
31797: EQUAL
31798: IFFALSE 31808
// btype := b_barracks ;
31800: LD_ADDR_VAR 0 5
31804: PUSH
31805: LD_INT 5
31807: ST_TO_ADDR
// if btype = b_depot then
31808: LD_VAR 0 5
31812: PUSH
31813: LD_INT 0
31815: EQUAL
31816: IFFALSE 31826
// btype := b_warehouse ;
31818: LD_ADDR_VAR 0 5
31822: PUSH
31823: LD_INT 1
31825: ST_TO_ADDR
// if btype = b_workshop then
31826: LD_VAR 0 5
31830: PUSH
31831: LD_INT 2
31833: EQUAL
31834: IFFALSE 31844
// btype := b_factory ;
31836: LD_ADDR_VAR 0 5
31840: PUSH
31841: LD_INT 3
31843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31844: LD_ADDR_VAR 0 4
31848: PUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: LD_VAR 0 1
31858: PPUSH
31859: CALL_OW 248
31863: PPUSH
31864: CALL_OW 450
31868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31869: LD_ADDR_VAR 0 2
31873: PUSH
31874: LD_VAR 0 3
31878: PPUSH
31879: LD_INT 1
31881: PPUSH
31882: CALL_OW 275
31886: PUSH
31887: LD_VAR 0 4
31891: PUSH
31892: LD_INT 1
31894: ARRAY
31895: GREATEREQUAL
31896: PUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: LD_INT 2
31904: PPUSH
31905: CALL_OW 275
31909: PUSH
31910: LD_VAR 0 4
31914: PUSH
31915: LD_INT 2
31917: ARRAY
31918: GREATEREQUAL
31919: AND
31920: PUSH
31921: LD_VAR 0 3
31925: PPUSH
31926: LD_INT 3
31928: PPUSH
31929: CALL_OW 275
31933: PUSH
31934: LD_VAR 0 4
31938: PUSH
31939: LD_INT 3
31941: ARRAY
31942: GREATEREQUAL
31943: AND
31944: ST_TO_ADDR
// end ;
31945: LD_VAR 0 2
31949: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
// pom := GetBase ( building ) ;
31955: LD_ADDR_VAR 0 4
31959: PUSH
31960: LD_VAR 0 1
31964: PPUSH
31965: CALL_OW 274
31969: ST_TO_ADDR
// if not pom then
31970: LD_VAR 0 4
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 32080
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31979: LD_ADDR_VAR 0 5
31983: PUSH
31984: LD_VAR 0 2
31988: PPUSH
31989: LD_VAR 0 1
31993: PPUSH
31994: CALL_OW 248
31998: PPUSH
31999: CALL_OW 450
32003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32004: LD_ADDR_VAR 0 3
32008: PUSH
32009: LD_VAR 0 4
32013: PPUSH
32014: LD_INT 1
32016: PPUSH
32017: CALL_OW 275
32021: PUSH
32022: LD_VAR 0 5
32026: PUSH
32027: LD_INT 1
32029: ARRAY
32030: GREATEREQUAL
32031: PUSH
32032: LD_VAR 0 4
32036: PPUSH
32037: LD_INT 2
32039: PPUSH
32040: CALL_OW 275
32044: PUSH
32045: LD_VAR 0 5
32049: PUSH
32050: LD_INT 2
32052: ARRAY
32053: GREATEREQUAL
32054: AND
32055: PUSH
32056: LD_VAR 0 4
32060: PPUSH
32061: LD_INT 3
32063: PPUSH
32064: CALL_OW 275
32068: PUSH
32069: LD_VAR 0 5
32073: PUSH
32074: LD_INT 3
32076: ARRAY
32077: GREATEREQUAL
32078: AND
32079: ST_TO_ADDR
// end ;
32080: LD_VAR 0 3
32084: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
32094: PPUSH
32095: PPUSH
32096: PPUSH
// result := false ;
32097: LD_ADDR_VAR 0 6
32101: PUSH
32102: LD_INT 0
32104: ST_TO_ADDR
// if not base or not btype or not x or not y then
32105: LD_VAR 0 1
32109: NOT
32110: PUSH
32111: LD_VAR 0 2
32115: NOT
32116: OR
32117: PUSH
32118: LD_VAR 0 3
32122: NOT
32123: OR
32124: PUSH
32125: LD_VAR 0 4
32129: NOT
32130: OR
32131: IFFALSE 32135
// exit ;
32133: GO 32649
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32135: LD_ADDR_VAR 0 12
32139: PUSH
32140: LD_VAR 0 2
32144: PPUSH
32145: LD_VAR 0 3
32149: PPUSH
32150: LD_VAR 0 4
32154: PPUSH
32155: LD_VAR 0 5
32159: PPUSH
32160: LD_VAR 0 1
32164: PUSH
32165: LD_INT 1
32167: ARRAY
32168: PPUSH
32169: CALL_OW 248
32173: PPUSH
32174: LD_INT 0
32176: PPUSH
32177: CALL 33478 0 6
32181: ST_TO_ADDR
// if not hexes then
32182: LD_VAR 0 12
32186: NOT
32187: IFFALSE 32191
// exit ;
32189: GO 32649
// for i = 1 to hexes do
32191: LD_ADDR_VAR 0 7
32195: PUSH
32196: DOUBLE
32197: LD_INT 1
32199: DEC
32200: ST_TO_ADDR
32201: LD_VAR 0 12
32205: PUSH
32206: FOR_TO
32207: IFFALSE 32647
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32209: LD_ADDR_VAR 0 11
32213: PUSH
32214: LD_VAR 0 12
32218: PUSH
32219: LD_VAR 0 7
32223: ARRAY
32224: PUSH
32225: LD_INT 1
32227: ARRAY
32228: PPUSH
32229: LD_VAR 0 12
32233: PUSH
32234: LD_VAR 0 7
32238: ARRAY
32239: PUSH
32240: LD_INT 2
32242: ARRAY
32243: PPUSH
32244: CALL_OW 428
32248: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
32249: LD_VAR 0 11
32253: NOT
32254: PUSH
32255: LD_VAR 0 11
32259: PPUSH
32260: CALL_OW 247
32264: PUSH
32265: LD_INT 3
32267: EQUAL
32268: OR
32269: IFFALSE 32273
// continue ;
32271: GO 32206
// result := true ;
32273: LD_ADDR_VAR 0 6
32277: PUSH
32278: LD_INT 1
32280: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32281: LD_ADDR_VAR 0 15
32285: PUSH
32286: LD_INT 22
32288: PUSH
32289: LD_VAR 0 11
32293: PPUSH
32294: CALL_OW 255
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 30
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 30
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PPUSH
32335: CALL_OW 69
32339: ST_TO_ADDR
// if dep then
32340: LD_VAR 0 15
32344: IFFALSE 32480
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32346: LD_ADDR_VAR 0 14
32350: PUSH
32351: LD_VAR 0 15
32355: PUSH
32356: LD_INT 1
32358: ARRAY
32359: PPUSH
32360: CALL_OW 250
32364: PPUSH
32365: LD_VAR 0 15
32369: PUSH
32370: LD_INT 1
32372: ARRAY
32373: PPUSH
32374: CALL_OW 254
32378: PPUSH
32379: LD_INT 5
32381: PPUSH
32382: CALL_OW 272
32386: PUSH
32387: LD_VAR 0 15
32391: PUSH
32392: LD_INT 1
32394: ARRAY
32395: PPUSH
32396: CALL_OW 251
32400: PPUSH
32401: LD_VAR 0 15
32405: PUSH
32406: LD_INT 1
32408: ARRAY
32409: PPUSH
32410: CALL_OW 254
32414: PPUSH
32415: LD_INT 5
32417: PPUSH
32418: CALL_OW 273
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32427: LD_VAR 0 14
32431: PUSH
32432: LD_INT 1
32434: ARRAY
32435: PPUSH
32436: LD_VAR 0 14
32440: PUSH
32441: LD_INT 2
32443: ARRAY
32444: PPUSH
32445: CALL_OW 488
32449: IFFALSE 32480
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32451: LD_VAR 0 11
32455: PPUSH
32456: LD_VAR 0 14
32460: PUSH
32461: LD_INT 1
32463: ARRAY
32464: PPUSH
32465: LD_VAR 0 14
32469: PUSH
32470: LD_INT 2
32472: ARRAY
32473: PPUSH
32474: CALL_OW 111
// continue ;
32478: GO 32206
// end ; end ; r := GetDir ( tmp ) ;
32480: LD_ADDR_VAR 0 13
32484: PUSH
32485: LD_VAR 0 11
32489: PPUSH
32490: CALL_OW 254
32494: ST_TO_ADDR
// if r = 5 then
32495: LD_VAR 0 13
32499: PUSH
32500: LD_INT 5
32502: EQUAL
32503: IFFALSE 32513
// r := 0 ;
32505: LD_ADDR_VAR 0 13
32509: PUSH
32510: LD_INT 0
32512: ST_TO_ADDR
// for j = r to 5 do
32513: LD_ADDR_VAR 0 8
32517: PUSH
32518: DOUBLE
32519: LD_VAR 0 13
32523: DEC
32524: ST_TO_ADDR
32525: LD_INT 5
32527: PUSH
32528: FOR_TO
32529: IFFALSE 32643
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32531: LD_ADDR_VAR 0 9
32535: PUSH
32536: LD_VAR 0 11
32540: PPUSH
32541: CALL_OW 250
32545: PPUSH
32546: LD_VAR 0 8
32550: PPUSH
32551: LD_INT 2
32553: PPUSH
32554: CALL_OW 272
32558: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32559: LD_ADDR_VAR 0 10
32563: PUSH
32564: LD_VAR 0 11
32568: PPUSH
32569: CALL_OW 251
32573: PPUSH
32574: LD_VAR 0 8
32578: PPUSH
32579: LD_INT 2
32581: PPUSH
32582: CALL_OW 273
32586: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32587: LD_VAR 0 9
32591: PPUSH
32592: LD_VAR 0 10
32596: PPUSH
32597: CALL_OW 488
32601: PUSH
32602: LD_VAR 0 9
32606: PPUSH
32607: LD_VAR 0 10
32611: PPUSH
32612: CALL_OW 428
32616: NOT
32617: AND
32618: IFFALSE 32641
// begin ComMoveXY ( tmp , _x , _y ) ;
32620: LD_VAR 0 11
32624: PPUSH
32625: LD_VAR 0 9
32629: PPUSH
32630: LD_VAR 0 10
32634: PPUSH
32635: CALL_OW 111
// break ;
32639: GO 32643
// end ; end ;
32641: GO 32528
32643: POP
32644: POP
// end ;
32645: GO 32206
32647: POP
32648: POP
// end ;
32649: LD_VAR 0 6
32653: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
// result := false ;
32665: LD_ADDR_VAR 0 6
32669: PUSH
32670: LD_INT 0
32672: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32673: LD_VAR 0 1
32677: NOT
32678: PUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 266
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: IN
32699: NOT
32700: OR
32701: PUSH
32702: LD_VAR 0 2
32706: NOT
32707: OR
32708: PUSH
32709: LD_VAR 0 5
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: LD_INT 5
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: IN
32740: NOT
32741: OR
32742: PUSH
32743: LD_VAR 0 3
32747: PPUSH
32748: LD_VAR 0 4
32752: PPUSH
32753: CALL_OW 488
32757: NOT
32758: OR
32759: IFFALSE 32763
// exit ;
32761: GO 33473
// pom := GetBase ( bdepot ) ;
32763: LD_ADDR_VAR 0 9
32767: PUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: CALL_OW 274
32777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
32778: LD_ADDR_VAR 0 10
32782: PUSH
32783: LD_VAR 0 2
32787: PPUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 248
32797: PPUSH
32798: CALL_OW 450
32802: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32803: LD_VAR 0 9
32807: PPUSH
32808: LD_INT 1
32810: PPUSH
32811: CALL_OW 275
32815: PUSH
32816: LD_VAR 0 10
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: GREATEREQUAL
32825: PUSH
32826: LD_VAR 0 9
32830: PPUSH
32831: LD_INT 2
32833: PPUSH
32834: CALL_OW 275
32838: PUSH
32839: LD_VAR 0 10
32843: PUSH
32844: LD_INT 2
32846: ARRAY
32847: GREATEREQUAL
32848: AND
32849: PUSH
32850: LD_VAR 0 9
32854: PPUSH
32855: LD_INT 3
32857: PPUSH
32858: CALL_OW 275
32862: PUSH
32863: LD_VAR 0 10
32867: PUSH
32868: LD_INT 3
32870: ARRAY
32871: GREATEREQUAL
32872: AND
32873: NOT
32874: IFFALSE 32878
// exit ;
32876: GO 33473
// if GetBType ( bdepot ) = b_depot then
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL_OW 266
32887: PUSH
32888: LD_INT 0
32890: EQUAL
32891: IFFALSE 32903
// dist := 28 else
32893: LD_ADDR_VAR 0 13
32897: PUSH
32898: LD_INT 28
32900: ST_TO_ADDR
32901: GO 32911
// dist := 36 ;
32903: LD_ADDR_VAR 0 13
32907: PUSH
32908: LD_INT 36
32910: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
32911: LD_VAR 0 1
32915: PPUSH
32916: LD_VAR 0 3
32920: PPUSH
32921: LD_VAR 0 4
32925: PPUSH
32926: CALL_OW 297
32930: PUSH
32931: LD_VAR 0 13
32935: GREATER
32936: IFFALSE 32940
// exit ;
32938: GO 33473
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
32940: LD_ADDR_VAR 0 11
32944: PUSH
32945: LD_VAR 0 2
32949: PPUSH
32950: LD_VAR 0 3
32954: PPUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: LD_VAR 0 1
32969: PPUSH
32970: CALL_OW 248
32974: PPUSH
32975: LD_INT 0
32977: PPUSH
32978: CALL 33478 0 6
32982: ST_TO_ADDR
// if not hexes then
32983: LD_VAR 0 11
32987: NOT
32988: IFFALSE 32992
// exit ;
32990: GO 33473
// hex := GetHexInfo ( x , y ) ;
32992: LD_ADDR_VAR 0 14
32996: PUSH
32997: LD_VAR 0 3
33001: PPUSH
33002: LD_VAR 0 4
33006: PPUSH
33007: CALL_OW 546
33011: ST_TO_ADDR
// if hex [ 1 ] then
33012: LD_VAR 0 14
33016: PUSH
33017: LD_INT 1
33019: ARRAY
33020: IFFALSE 33024
// exit ;
33022: GO 33473
// height := hex [ 2 ] ;
33024: LD_ADDR_VAR 0 12
33028: PUSH
33029: LD_VAR 0 14
33033: PUSH
33034: LD_INT 2
33036: ARRAY
33037: ST_TO_ADDR
// for i = 1 to hexes do
33038: LD_ADDR_VAR 0 7
33042: PUSH
33043: DOUBLE
33044: LD_INT 1
33046: DEC
33047: ST_TO_ADDR
33048: LD_VAR 0 11
33052: PUSH
33053: FOR_TO
33054: IFFALSE 33382
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33056: LD_VAR 0 11
33060: PUSH
33061: LD_VAR 0 7
33065: ARRAY
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: PPUSH
33071: LD_VAR 0 11
33075: PUSH
33076: LD_VAR 0 7
33080: ARRAY
33081: PUSH
33082: LD_INT 2
33084: ARRAY
33085: PPUSH
33086: CALL_OW 488
33090: NOT
33091: IFFALSE 33095
// continue ;
33093: GO 33053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33095: LD_ADDR_VAR 0 8
33099: PUSH
33100: LD_VAR 0 11
33104: PUSH
33105: LD_VAR 0 7
33109: ARRAY
33110: PUSH
33111: LD_INT 1
33113: ARRAY
33114: PPUSH
33115: LD_VAR 0 11
33119: PUSH
33120: LD_VAR 0 7
33124: ARRAY
33125: PUSH
33126: LD_INT 2
33128: ARRAY
33129: PPUSH
33130: CALL_OW 546
33134: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33135: LD_VAR 0 8
33139: PUSH
33140: LD_INT 1
33142: ARRAY
33143: PUSH
33144: LD_VAR 0 8
33148: PUSH
33149: LD_INT 2
33151: ARRAY
33152: PUSH
33153: LD_VAR 0 12
33157: PUSH
33158: LD_INT 2
33160: PLUS
33161: GREATER
33162: OR
33163: PUSH
33164: LD_VAR 0 8
33168: PUSH
33169: LD_INT 2
33171: ARRAY
33172: PUSH
33173: LD_VAR 0 12
33177: PUSH
33178: LD_INT 2
33180: MINUS
33181: LESS
33182: OR
33183: PUSH
33184: LD_VAR 0 8
33188: PUSH
33189: LD_INT 3
33191: ARRAY
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 8
33198: PUSH
33199: LD_INT 9
33201: PUSH
33202: LD_INT 10
33204: PUSH
33205: LD_INT 11
33207: PUSH
33208: LD_INT 12
33210: PUSH
33211: LD_INT 13
33213: PUSH
33214: LD_INT 16
33216: PUSH
33217: LD_INT 17
33219: PUSH
33220: LD_INT 18
33222: PUSH
33223: LD_INT 19
33225: PUSH
33226: LD_INT 20
33228: PUSH
33229: LD_INT 21
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: IN
33247: NOT
33248: OR
33249: PUSH
33250: LD_VAR 0 8
33254: PUSH
33255: LD_INT 5
33257: ARRAY
33258: NOT
33259: OR
33260: PUSH
33261: LD_VAR 0 8
33265: PUSH
33266: LD_INT 6
33268: ARRAY
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 7
33278: PUSH
33279: LD_INT 9
33281: PUSH
33282: LD_INT 10
33284: PUSH
33285: LD_INT 11
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: IN
33296: NOT
33297: OR
33298: PUSH
33299: LD_VAR 0 11
33303: PUSH
33304: LD_VAR 0 7
33308: ARRAY
33309: PUSH
33310: LD_INT 1
33312: ARRAY
33313: PPUSH
33314: LD_VAR 0 11
33318: PUSH
33319: LD_VAR 0 7
33323: ARRAY
33324: PUSH
33325: LD_INT 2
33327: ARRAY
33328: PPUSH
33329: CALL_OW 428
33333: PUSH
33334: LD_INT 0
33336: GREATER
33337: OR
33338: PUSH
33339: LD_VAR 0 11
33343: PUSH
33344: LD_VAR 0 7
33348: ARRAY
33349: PUSH
33350: LD_INT 1
33352: ARRAY
33353: PPUSH
33354: LD_VAR 0 11
33358: PUSH
33359: LD_VAR 0 7
33363: ARRAY
33364: PUSH
33365: LD_INT 2
33367: ARRAY
33368: PPUSH
33369: CALL_OW 351
33373: OR
33374: IFFALSE 33380
// exit ;
33376: POP
33377: POP
33378: GO 33473
// end ;
33380: GO 33053
33382: POP
33383: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
33384: LD_VAR 0 1
33388: PPUSH
33389: CALL_OW 255
33393: PPUSH
33394: LD_VAR 0 3
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: LD_INT 20
33406: PPUSH
33407: CALL 26360 0 4
33411: PUSH
33412: LD_INT 4
33414: ARRAY
33415: IFFALSE 33419
// exit ;
33417: GO 33473
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
33419: LD_VAR 0 2
33423: PUSH
33424: LD_INT 29
33426: PUSH
33427: LD_INT 30
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: IN
33434: PUSH
33435: LD_VAR 0 3
33439: PPUSH
33440: LD_VAR 0 4
33444: PPUSH
33445: LD_VAR 0 1
33449: PPUSH
33450: CALL_OW 255
33454: PPUSH
33455: CALL_OW 440
33459: NOT
33460: AND
33461: IFFALSE 33465
// exit ;
33463: GO 33473
// result := true ;
33465: LD_ADDR_VAR 0 6
33469: PUSH
33470: LD_INT 1
33472: ST_TO_ADDR
// end ;
33473: LD_VAR 0 6
33477: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33478: LD_INT 0
33480: PPUSH
33481: PPUSH
33482: PPUSH
33483: PPUSH
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
33503: PPUSH
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
33537: PPUSH
// result = [ ] ;
33538: LD_ADDR_VAR 0 7
33542: PUSH
33543: EMPTY
33544: ST_TO_ADDR
// temp_list = [ ] ;
33545: LD_ADDR_VAR 0 9
33549: PUSH
33550: EMPTY
33551: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33552: LD_VAR 0 4
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: LD_INT 4
33571: PUSH
33572: LD_INT 5
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: IN
33583: NOT
33584: PUSH
33585: LD_VAR 0 1
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: IN
33600: PUSH
33601: LD_VAR 0 5
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 3
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: IN
33620: NOT
33621: AND
33622: OR
33623: IFFALSE 33627
// exit ;
33625: GO 52012
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33627: LD_VAR 0 1
33631: PUSH
33632: LD_INT 6
33634: PUSH
33635: LD_INT 7
33637: PUSH
33638: LD_INT 8
33640: PUSH
33641: LD_INT 13
33643: PUSH
33644: LD_INT 12
33646: PUSH
33647: LD_INT 15
33649: PUSH
33650: LD_INT 11
33652: PUSH
33653: LD_INT 14
33655: PUSH
33656: LD_INT 10
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: IFFALSE 33680
// btype = b_lab ;
33672: LD_ADDR_VAR 0 1
33676: PUSH
33677: LD_INT 6
33679: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33680: LD_VAR 0 6
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: IN
33699: NOT
33700: PUSH
33701: LD_VAR 0 1
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 6
33720: PUSH
33721: LD_INT 36
33723: PUSH
33724: LD_INT 4
33726: PUSH
33727: LD_INT 5
33729: PUSH
33730: LD_INT 31
33732: PUSH
33733: LD_INT 32
33735: PUSH
33736: LD_INT 33
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: IN
33752: NOT
33753: PUSH
33754: LD_VAR 0 6
33758: PUSH
33759: LD_INT 1
33761: EQUAL
33762: AND
33763: OR
33764: PUSH
33765: LD_VAR 0 1
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 3
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: IN
33780: NOT
33781: PUSH
33782: LD_VAR 0 6
33786: PUSH
33787: LD_INT 2
33789: EQUAL
33790: AND
33791: OR
33792: IFFALSE 33802
// mode = 0 ;
33794: LD_ADDR_VAR 0 6
33798: PUSH
33799: LD_INT 0
33801: ST_TO_ADDR
// case mode of 0 :
33802: LD_VAR 0 6
33806: PUSH
33807: LD_INT 0
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 45268
33815: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33816: LD_ADDR_VAR 0 11
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: LD_INT 3
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34009: LD_ADDR_VAR 0 12
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: NEG
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34205: LD_ADDR_VAR 0 13
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 3
34364: NEG
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: LD_INT 3
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34404: LD_ADDR_VAR 0 14
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 3
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 3
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34600: LD_ADDR_VAR 0 15
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34793: LD_ADDR_VAR 0 16
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: LD_INT 2
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34986: LD_ADDR_VAR 0 17
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: LD_INT 2
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35216: LD_ADDR_VAR 0 18
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: LD_INT 2
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35446: LD_ADDR_VAR 0 19
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35676: LD_ADDR_VAR 0 20
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35906: LD_ADDR_VAR 0 21
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: LD_INT 2
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36136: LD_ADDR_VAR 0 22
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: NEG
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36366: LD_ADDR_VAR 0 23
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: LD_INT 2
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: NEG
36578: PUSH
36579: LD_INT 3
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 3
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36646: LD_ADDR_VAR 0 24
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 2
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 2
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 3
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36922: LD_ADDR_VAR 0 25
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 3
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37196: LD_ADDR_VAR 0 26
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 2
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: NEG
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 2
37395: NEG
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 3
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37472: LD_ADDR_VAR 0 27
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: NEG
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 3
37717: NEG
37718: PUSH
37719: LD_INT 2
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37752: LD_ADDR_VAR 0 28
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 3
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 3
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 3
37999: NEG
38000: PUSH
38001: LD_INT 2
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38034: LD_ADDR_VAR 0 29
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: LD_INT 3
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 3
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38313: LD_ADDR_VAR 0 30
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: NEG
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38591: LD_ADDR_VAR 0 31
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: LD_INT 3
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: LD_INT 2
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38869: LD_ADDR_VAR 0 32
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 3
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39147: LD_ADDR_VAR 0 33
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 3
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 3
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39426: LD_ADDR_VAR 0 34
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 3
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39706: LD_ADDR_VAR 0 35
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39818: LD_ADDR_VAR 0 36
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39930: LD_ADDR_VAR 0 37
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40042: LD_ADDR_VAR 0 38
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40154: LD_ADDR_VAR 0 39
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40266: LD_ADDR_VAR 0 40
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40378: LD_ADDR_VAR 0 41
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 3
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 3
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 3
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: LD_INT 3
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40728: LD_ADDR_VAR 0 42
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 3
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 3
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: LD_INT 3
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 3
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41078: LD_ADDR_VAR 0 43
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 3
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 3
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: NEG
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 3
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41426: LD_ADDR_VAR 0 44
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 3
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 3
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 3
41735: NEG
41736: PUSH
41737: LD_INT 3
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41776: LD_ADDR_VAR 0 45
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 2
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 3
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 3
42073: NEG
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: NEG
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42126: LD_ADDR_VAR 0 46
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42474: LD_ADDR_VAR 0 47
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42625: LD_ADDR_VAR 0 48
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42772: LD_ADDR_VAR 0 49
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42916: LD_ADDR_VAR 0 50
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43060: LD_ADDR_VAR 0 51
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43207: LD_ADDR_VAR 0 52
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43358: LD_ADDR_VAR 0 53
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43588: LD_ADDR_VAR 0 54
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43818: LD_ADDR_VAR 0 55
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44048: LD_ADDR_VAR 0 56
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44278: LD_ADDR_VAR 0 57
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44508: LD_ADDR_VAR 0 58
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44738: LD_ADDR_VAR 0 59
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44826: LD_ADDR_VAR 0 60
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44914: LD_ADDR_VAR 0 61
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45002: LD_ADDR_VAR 0 62
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45090: LD_ADDR_VAR 0 63
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45178: LD_ADDR_VAR 0 64
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// end ; 1 :
45266: GO 51163
45268: LD_INT 1
45270: DOUBLE
45271: EQUAL
45272: IFTRUE 45276
45274: GO 47899
45276: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45277: LD_ADDR_VAR 0 11
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 3
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45321: LD_ADDR_VAR 0 12
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45362: LD_ADDR_VAR 0 13
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45402: LD_ADDR_VAR 0 14
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45443: LD_ADDR_VAR 0 15
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 3
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45487: LD_ADDR_VAR 0 16
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: LD_INT 3
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45533: LD_ADDR_VAR 0 17
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45577: LD_ADDR_VAR 0 18
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45618: LD_ADDR_VAR 0 19
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45658: LD_ADDR_VAR 0 20
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45699: LD_ADDR_VAR 0 21
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45743: LD_ADDR_VAR 0 22
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 3
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45789: LD_ADDR_VAR 0 23
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 4
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45833: LD_ADDR_VAR 0 24
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45874: LD_ADDR_VAR 0 25
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 4
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: LD_INT 4
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45914: LD_ADDR_VAR 0 26
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 4
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45955: LD_ADDR_VAR 0 27
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45999: LD_ADDR_VAR 0 28
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 4
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46045: LD_ADDR_VAR 0 29
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 4
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 4
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 5
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 5
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 4
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 6
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 6
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 5
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46200: LD_ADDR_VAR 0 30
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 4
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 5
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 5
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 6
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 6
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46343: LD_ADDR_VAR 0 31
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 4
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 4
46390: PUSH
46391: LD_INT 4
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 5
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 5
46420: PUSH
46421: LD_INT 5
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 4
46430: PUSH
46431: LD_INT 5
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 6
46440: PUSH
46441: LD_INT 5
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 6
46450: PUSH
46451: LD_INT 6
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 5
46460: PUSH
46461: LD_INT 6
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46482: LD_ADDR_VAR 0 32
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 4
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 5
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 5
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 4
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 6
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 6
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 5
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46625: LD_ADDR_VAR 0 33
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 4
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 4
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 5
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 5
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 5
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 6
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 6
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46780: LD_ADDR_VAR 0 34
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: LD_INT 4
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 4
46835: NEG
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: LD_INT 4
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: LD_INT 5
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 5
46871: NEG
46872: PUSH
46873: LD_INT 4
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 5
46883: NEG
46884: PUSH
46885: LD_INT 5
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 5
46895: NEG
46896: PUSH
46897: LD_INT 6
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 6
46907: NEG
46908: PUSH
46909: LD_INT 5
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 6
46919: NEG
46920: PUSH
46921: LD_INT 6
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46943: LD_ADDR_VAR 0 41
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46987: LD_ADDR_VAR 0 42
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47028: LD_ADDR_VAR 0 43
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47068: LD_ADDR_VAR 0 44
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47109: LD_ADDR_VAR 0 45
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47153: LD_ADDR_VAR 0 46
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47199: LD_ADDR_VAR 0 47
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47232: LD_ADDR_VAR 0 48
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47263: LD_ADDR_VAR 0 49
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47292: LD_ADDR_VAR 0 50
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47321: LD_ADDR_VAR 0 51
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47352: LD_ADDR_VAR 0 52
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47385: LD_ADDR_VAR 0 53
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47429: LD_ADDR_VAR 0 54
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47470: LD_ADDR_VAR 0 55
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47510: LD_ADDR_VAR 0 56
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47551: LD_ADDR_VAR 0 57
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47595: LD_ADDR_VAR 0 58
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47641: LD_ADDR_VAR 0 59
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47685: LD_ADDR_VAR 0 60
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47726: LD_ADDR_VAR 0 61
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47766: LD_ADDR_VAR 0 62
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47807: LD_ADDR_VAR 0 63
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47851: LD_ADDR_VAR 0 64
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: ST_TO_ADDR
// end ; 2 :
47897: GO 51163
47899: LD_INT 2
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47907
47905: GO 51162
47907: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47908: LD_ADDR_VAR 0 29
47912: PUSH
47913: LD_INT 4
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 4
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 5
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 5
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 4
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 5
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 4
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 4
48038: PUSH
48039: LD_INT 4
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: LD_INT 4
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 4
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 4
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 4
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 5
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 4
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 5
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 4
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 4
48293: NEG
48294: PUSH
48295: LD_INT 4
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 4
48305: NEG
48306: PUSH
48307: LD_INT 5
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 4
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 4
48341: NEG
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 5
48353: NEG
48354: PUSH
48355: LD_INT 4
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 5
48365: NEG
48366: PUSH
48367: LD_INT 5
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: LD_INT 5
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 5
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48446: LD_ADDR_VAR 0 30
48450: PUSH
48451: LD_INT 4
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 4
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 4
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 5
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 4
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 4
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 5
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: LD_INT 5
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 3
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 4
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 4
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 4
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 4
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 5
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 5
48715: NEG
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: LD_INT 4
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 4
48834: NEG
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 4
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 5
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 4
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 4
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 5
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 5
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48993: LD_ADDR_VAR 0 31
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 4
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 4
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 5
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 5
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 5
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 4
49149: NEG
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 4
49160: NEG
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 4
49207: NEG
49208: PUSH
49209: LD_INT 5
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 4
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 4
49243: NEG
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 5
49255: NEG
49256: PUSH
49257: LD_INT 4
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 5
49267: NEG
49268: PUSH
49269: LD_INT 5
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: LD_INT 5
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 5
49291: NEG
49292: PUSH
49293: LD_INT 3
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 4
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 4
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 4
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 4
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 4
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 5
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 5
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 4
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 5
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49543: LD_ADDR_VAR 0 32
49547: PUSH
49548: LD_INT 4
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 4
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 5
49606: NEG
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 5
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 5
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 4
49724: NEG
49725: PUSH
49726: LD_INT 4
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 4
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 4
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 5
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 4
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 3
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 4
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 5
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 4
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 4
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 5
49975: PUSH
49976: LD_INT 4
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 5
49985: PUSH
49986: LD_INT 5
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 4
49995: PUSH
49996: LD_INT 5
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: LD_INT 4
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 5
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_INT 5
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50090: LD_ADDR_VAR 0 33
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: NEG
50110: PUSH
50111: LD_INT 5
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 4
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: LD_INT 3
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: LD_INT 4
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 5
50169: NEG
50170: PUSH
50171: LD_INT 5
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: LD_INT 5
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 5
50193: NEG
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 4
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 4
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 4
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 5
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 5
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 4
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 5
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 4
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 4
50430: PUSH
50431: LD_INT 4
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: LD_INT 4
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 4
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 4
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 4
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 4
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 5
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 5
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 5
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50628: LD_ADDR_VAR 0 34
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 4
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 4
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 4
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 5
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 5
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 4
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 4
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 4
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: PUSH
50831: LD_INT 4
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 4
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 5
50850: PUSH
50851: LD_INT 4
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 5
50860: PUSH
50861: LD_INT 5
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: PUSH
50871: LD_INT 5
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: LD_INT 4
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 5
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 4
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 4
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 4
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 4
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 4
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 4
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 5
51069: NEG
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 5
51080: NEG
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 5
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// end ; end ;
51160: GO 51163
51162: POP
// case btype of b_depot , b_warehouse :
51163: LD_VAR 0 1
51167: PUSH
51168: LD_INT 0
51170: DOUBLE
51171: EQUAL
51172: IFTRUE 51182
51174: LD_INT 1
51176: DOUBLE
51177: EQUAL
51178: IFTRUE 51182
51180: GO 51383
51182: POP
// case nation of nation_american :
51183: LD_VAR 0 5
51187: PUSH
51188: LD_INT 1
51190: DOUBLE
51191: EQUAL
51192: IFTRUE 51196
51194: GO 51252
51196: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51197: LD_ADDR_VAR 0 9
51201: PUSH
51202: LD_VAR 0 11
51206: PUSH
51207: LD_VAR 0 12
51211: PUSH
51212: LD_VAR 0 13
51216: PUSH
51217: LD_VAR 0 14
51221: PUSH
51222: LD_VAR 0 15
51226: PUSH
51227: LD_VAR 0 16
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: PUSH
51240: LD_VAR 0 4
51244: PUSH
51245: LD_INT 1
51247: PLUS
51248: ARRAY
51249: ST_TO_ADDR
51250: GO 51381
51252: LD_INT 2
51254: DOUBLE
51255: EQUAL
51256: IFTRUE 51260
51258: GO 51316
51260: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51261: LD_ADDR_VAR 0 9
51265: PUSH
51266: LD_VAR 0 17
51270: PUSH
51271: LD_VAR 0 18
51275: PUSH
51276: LD_VAR 0 19
51280: PUSH
51281: LD_VAR 0 20
51285: PUSH
51286: LD_VAR 0 21
51290: PUSH
51291: LD_VAR 0 22
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_VAR 0 4
51308: PUSH
51309: LD_INT 1
51311: PLUS
51312: ARRAY
51313: ST_TO_ADDR
51314: GO 51381
51316: LD_INT 3
51318: DOUBLE
51319: EQUAL
51320: IFTRUE 51324
51322: GO 51380
51324: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51325: LD_ADDR_VAR 0 9
51329: PUSH
51330: LD_VAR 0 23
51334: PUSH
51335: LD_VAR 0 24
51339: PUSH
51340: LD_VAR 0 25
51344: PUSH
51345: LD_VAR 0 26
51349: PUSH
51350: LD_VAR 0 27
51354: PUSH
51355: LD_VAR 0 28
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: LD_VAR 0 4
51372: PUSH
51373: LD_INT 1
51375: PLUS
51376: ARRAY
51377: ST_TO_ADDR
51378: GO 51381
51380: POP
51381: GO 51930
51383: LD_INT 2
51385: DOUBLE
51386: EQUAL
51387: IFTRUE 51397
51389: LD_INT 3
51391: DOUBLE
51392: EQUAL
51393: IFTRUE 51397
51395: GO 51453
51397: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51398: LD_ADDR_VAR 0 9
51402: PUSH
51403: LD_VAR 0 29
51407: PUSH
51408: LD_VAR 0 30
51412: PUSH
51413: LD_VAR 0 31
51417: PUSH
51418: LD_VAR 0 32
51422: PUSH
51423: LD_VAR 0 33
51427: PUSH
51428: LD_VAR 0 34
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: PUSH
51441: LD_VAR 0 4
51445: PUSH
51446: LD_INT 1
51448: PLUS
51449: ARRAY
51450: ST_TO_ADDR
51451: GO 51930
51453: LD_INT 16
51455: DOUBLE
51456: EQUAL
51457: IFTRUE 51509
51459: LD_INT 17
51461: DOUBLE
51462: EQUAL
51463: IFTRUE 51509
51465: LD_INT 18
51467: DOUBLE
51468: EQUAL
51469: IFTRUE 51509
51471: LD_INT 19
51473: DOUBLE
51474: EQUAL
51475: IFTRUE 51509
51477: LD_INT 20
51479: DOUBLE
51480: EQUAL
51481: IFTRUE 51509
51483: LD_INT 21
51485: DOUBLE
51486: EQUAL
51487: IFTRUE 51509
51489: LD_INT 23
51491: DOUBLE
51492: EQUAL
51493: IFTRUE 51509
51495: LD_INT 24
51497: DOUBLE
51498: EQUAL
51499: IFTRUE 51509
51501: LD_INT 25
51503: DOUBLE
51504: EQUAL
51505: IFTRUE 51509
51507: GO 51565
51509: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51510: LD_ADDR_VAR 0 9
51514: PUSH
51515: LD_VAR 0 35
51519: PUSH
51520: LD_VAR 0 36
51524: PUSH
51525: LD_VAR 0 37
51529: PUSH
51530: LD_VAR 0 38
51534: PUSH
51535: LD_VAR 0 39
51539: PUSH
51540: LD_VAR 0 40
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: PUSH
51553: LD_VAR 0 4
51557: PUSH
51558: LD_INT 1
51560: PLUS
51561: ARRAY
51562: ST_TO_ADDR
51563: GO 51930
51565: LD_INT 6
51567: DOUBLE
51568: EQUAL
51569: IFTRUE 51621
51571: LD_INT 7
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51621
51577: LD_INT 8
51579: DOUBLE
51580: EQUAL
51581: IFTRUE 51621
51583: LD_INT 13
51585: DOUBLE
51586: EQUAL
51587: IFTRUE 51621
51589: LD_INT 12
51591: DOUBLE
51592: EQUAL
51593: IFTRUE 51621
51595: LD_INT 15
51597: DOUBLE
51598: EQUAL
51599: IFTRUE 51621
51601: LD_INT 11
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51621
51607: LD_INT 14
51609: DOUBLE
51610: EQUAL
51611: IFTRUE 51621
51613: LD_INT 10
51615: DOUBLE
51616: EQUAL
51617: IFTRUE 51621
51619: GO 51677
51621: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51622: LD_ADDR_VAR 0 9
51626: PUSH
51627: LD_VAR 0 41
51631: PUSH
51632: LD_VAR 0 42
51636: PUSH
51637: LD_VAR 0 43
51641: PUSH
51642: LD_VAR 0 44
51646: PUSH
51647: LD_VAR 0 45
51651: PUSH
51652: LD_VAR 0 46
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: PUSH
51665: LD_VAR 0 4
51669: PUSH
51670: LD_INT 1
51672: PLUS
51673: ARRAY
51674: ST_TO_ADDR
51675: GO 51930
51677: LD_INT 36
51679: DOUBLE
51680: EQUAL
51681: IFTRUE 51685
51683: GO 51741
51685: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51686: LD_ADDR_VAR 0 9
51690: PUSH
51691: LD_VAR 0 47
51695: PUSH
51696: LD_VAR 0 48
51700: PUSH
51701: LD_VAR 0 49
51705: PUSH
51706: LD_VAR 0 50
51710: PUSH
51711: LD_VAR 0 51
51715: PUSH
51716: LD_VAR 0 52
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: LD_VAR 0 4
51733: PUSH
51734: LD_INT 1
51736: PLUS
51737: ARRAY
51738: ST_TO_ADDR
51739: GO 51930
51741: LD_INT 4
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51767
51747: LD_INT 5
51749: DOUBLE
51750: EQUAL
51751: IFTRUE 51767
51753: LD_INT 34
51755: DOUBLE
51756: EQUAL
51757: IFTRUE 51767
51759: LD_INT 37
51761: DOUBLE
51762: EQUAL
51763: IFTRUE 51767
51765: GO 51823
51767: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51768: LD_ADDR_VAR 0 9
51772: PUSH
51773: LD_VAR 0 53
51777: PUSH
51778: LD_VAR 0 54
51782: PUSH
51783: LD_VAR 0 55
51787: PUSH
51788: LD_VAR 0 56
51792: PUSH
51793: LD_VAR 0 57
51797: PUSH
51798: LD_VAR 0 58
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: PUSH
51811: LD_VAR 0 4
51815: PUSH
51816: LD_INT 1
51818: PLUS
51819: ARRAY
51820: ST_TO_ADDR
51821: GO 51930
51823: LD_INT 31
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51873
51829: LD_INT 32
51831: DOUBLE
51832: EQUAL
51833: IFTRUE 51873
51835: LD_INT 33
51837: DOUBLE
51838: EQUAL
51839: IFTRUE 51873
51841: LD_INT 27
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51873
51847: LD_INT 26
51849: DOUBLE
51850: EQUAL
51851: IFTRUE 51873
51853: LD_INT 28
51855: DOUBLE
51856: EQUAL
51857: IFTRUE 51873
51859: LD_INT 29
51861: DOUBLE
51862: EQUAL
51863: IFTRUE 51873
51865: LD_INT 30
51867: DOUBLE
51868: EQUAL
51869: IFTRUE 51873
51871: GO 51929
51873: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51874: LD_ADDR_VAR 0 9
51878: PUSH
51879: LD_VAR 0 59
51883: PUSH
51884: LD_VAR 0 60
51888: PUSH
51889: LD_VAR 0 61
51893: PUSH
51894: LD_VAR 0 62
51898: PUSH
51899: LD_VAR 0 63
51903: PUSH
51904: LD_VAR 0 64
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: LD_VAR 0 4
51921: PUSH
51922: LD_INT 1
51924: PLUS
51925: ARRAY
51926: ST_TO_ADDR
51927: GO 51930
51929: POP
// temp_list2 = [ ] ;
51930: LD_ADDR_VAR 0 10
51934: PUSH
51935: EMPTY
51936: ST_TO_ADDR
// for i in temp_list do
51937: LD_ADDR_VAR 0 8
51941: PUSH
51942: LD_VAR 0 9
51946: PUSH
51947: FOR_IN
51948: IFFALSE 52000
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51950: LD_ADDR_VAR 0 10
51954: PUSH
51955: LD_VAR 0 10
51959: PUSH
51960: LD_VAR 0 8
51964: PUSH
51965: LD_INT 1
51967: ARRAY
51968: PUSH
51969: LD_VAR 0 2
51973: PLUS
51974: PUSH
51975: LD_VAR 0 8
51979: PUSH
51980: LD_INT 2
51982: ARRAY
51983: PUSH
51984: LD_VAR 0 3
51988: PLUS
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: ADD
51997: ST_TO_ADDR
51998: GO 51947
52000: POP
52001: POP
// result = temp_list2 ;
52002: LD_ADDR_VAR 0 7
52006: PUSH
52007: LD_VAR 0 10
52011: ST_TO_ADDR
// end ;
52012: LD_VAR 0 7
52016: RET
// export function EnemyInRange ( unit , dist ) ; begin
52017: LD_INT 0
52019: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52020: LD_ADDR_VAR 0 3
52024: PUSH
52025: LD_VAR 0 1
52029: PPUSH
52030: CALL_OW 255
52034: PPUSH
52035: LD_VAR 0 1
52039: PPUSH
52040: CALL_OW 250
52044: PPUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 251
52054: PPUSH
52055: LD_VAR 0 2
52059: PPUSH
52060: CALL 26360 0 4
52064: PUSH
52065: LD_INT 4
52067: ARRAY
52068: ST_TO_ADDR
// end ;
52069: LD_VAR 0 3
52073: RET
// export function PlayerSeeMe ( unit ) ; begin
52074: LD_INT 0
52076: PPUSH
// result := See ( your_side , unit ) ;
52077: LD_ADDR_VAR 0 2
52081: PUSH
52082: LD_OWVAR 2
52086: PPUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: CALL_OW 292
52096: ST_TO_ADDR
// end ;
52097: LD_VAR 0 2
52101: RET
// export function ReverseDir ( unit ) ; begin
52102: LD_INT 0
52104: PPUSH
// if not unit then
52105: LD_VAR 0 1
52109: NOT
52110: IFFALSE 52114
// exit ;
52112: GO 52160
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
52114: LD_ADDR_VAR 0 2
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 5
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: CALL_OW 254
52154: PUSH
52155: LD_INT 1
52157: PLUS
52158: ARRAY
52159: ST_TO_ADDR
// end ;
52160: LD_VAR 0 2
52164: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52165: LD_INT 0
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
// if not hexes then
52172: LD_VAR 0 2
52176: NOT
52177: IFFALSE 52181
// exit ;
52179: GO 52329
// dist := 9999 ;
52181: LD_ADDR_VAR 0 5
52185: PUSH
52186: LD_INT 9999
52188: ST_TO_ADDR
// for i = 1 to hexes do
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: DOUBLE
52195: LD_INT 1
52197: DEC
52198: ST_TO_ADDR
52199: LD_VAR 0 2
52203: PUSH
52204: FOR_TO
52205: IFFALSE 52317
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52207: LD_VAR 0 1
52211: PPUSH
52212: LD_VAR 0 2
52216: PUSH
52217: LD_VAR 0 4
52221: ARRAY
52222: PUSH
52223: LD_INT 1
52225: ARRAY
52226: PPUSH
52227: LD_VAR 0 2
52231: PUSH
52232: LD_VAR 0 4
52236: ARRAY
52237: PUSH
52238: LD_INT 2
52240: ARRAY
52241: PPUSH
52242: CALL_OW 297
52246: PUSH
52247: LD_VAR 0 5
52251: LESS
52252: IFFALSE 52315
// begin hex := hexes [ i ] ;
52254: LD_ADDR_VAR 0 7
52258: PUSH
52259: LD_VAR 0 2
52263: PUSH
52264: LD_VAR 0 4
52268: ARRAY
52269: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52270: LD_ADDR_VAR 0 5
52274: PUSH
52275: LD_VAR 0 1
52279: PPUSH
52280: LD_VAR 0 2
52284: PUSH
52285: LD_VAR 0 4
52289: ARRAY
52290: PUSH
52291: LD_INT 1
52293: ARRAY
52294: PPUSH
52295: LD_VAR 0 2
52299: PUSH
52300: LD_VAR 0 4
52304: ARRAY
52305: PUSH
52306: LD_INT 2
52308: ARRAY
52309: PPUSH
52310: CALL_OW 297
52314: ST_TO_ADDR
// end ; end ;
52315: GO 52204
52317: POP
52318: POP
// result := hex ;
52319: LD_ADDR_VAR 0 3
52323: PUSH
52324: LD_VAR 0 7
52328: ST_TO_ADDR
// end ;
52329: LD_VAR 0 3
52333: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52334: LD_INT 0
52336: PPUSH
52337: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52338: LD_VAR 0 1
52342: NOT
52343: PUSH
52344: LD_VAR 0 1
52348: PUSH
52349: LD_INT 21
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 23
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PPUSH
52373: CALL_OW 69
52377: IN
52378: NOT
52379: OR
52380: IFFALSE 52384
// exit ;
52382: GO 52431
// for i = 1 to 3 do
52384: LD_ADDR_VAR 0 3
52388: PUSH
52389: DOUBLE
52390: LD_INT 1
52392: DEC
52393: ST_TO_ADDR
52394: LD_INT 3
52396: PUSH
52397: FOR_TO
52398: IFFALSE 52429
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52400: LD_VAR 0 1
52404: PPUSH
52405: CALL_OW 250
52409: PPUSH
52410: LD_VAR 0 1
52414: PPUSH
52415: CALL_OW 251
52419: PPUSH
52420: LD_INT 1
52422: PPUSH
52423: CALL_OW 453
52427: GO 52397
52429: POP
52430: POP
// end ;
52431: LD_VAR 0 2
52435: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52436: LD_INT 0
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52444: LD_VAR 0 1
52448: NOT
52449: PUSH
52450: LD_VAR 0 2
52454: NOT
52455: OR
52456: PUSH
52457: LD_VAR 0 1
52461: PPUSH
52462: CALL_OW 314
52466: OR
52467: IFFALSE 52471
// exit ;
52469: GO 52912
// x := GetX ( enemy_unit ) ;
52471: LD_ADDR_VAR 0 7
52475: PUSH
52476: LD_VAR 0 2
52480: PPUSH
52481: CALL_OW 250
52485: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52486: LD_ADDR_VAR 0 8
52490: PUSH
52491: LD_VAR 0 2
52495: PPUSH
52496: CALL_OW 251
52500: ST_TO_ADDR
// if not x or not y then
52501: LD_VAR 0 7
52505: NOT
52506: PUSH
52507: LD_VAR 0 8
52511: NOT
52512: OR
52513: IFFALSE 52517
// exit ;
52515: GO 52912
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52517: LD_ADDR_VAR 0 6
52521: PUSH
52522: LD_VAR 0 7
52526: PPUSH
52527: LD_INT 0
52529: PPUSH
52530: LD_INT 4
52532: PPUSH
52533: CALL_OW 272
52537: PUSH
52538: LD_VAR 0 8
52542: PPUSH
52543: LD_INT 0
52545: PPUSH
52546: LD_INT 4
52548: PPUSH
52549: CALL_OW 273
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_VAR 0 7
52562: PPUSH
52563: LD_INT 1
52565: PPUSH
52566: LD_INT 4
52568: PPUSH
52569: CALL_OW 272
52573: PUSH
52574: LD_VAR 0 8
52578: PPUSH
52579: LD_INT 1
52581: PPUSH
52582: LD_INT 4
52584: PPUSH
52585: CALL_OW 273
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_VAR 0 7
52598: PPUSH
52599: LD_INT 2
52601: PPUSH
52602: LD_INT 4
52604: PPUSH
52605: CALL_OW 272
52609: PUSH
52610: LD_VAR 0 8
52614: PPUSH
52615: LD_INT 2
52617: PPUSH
52618: LD_INT 4
52620: PPUSH
52621: CALL_OW 273
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_VAR 0 7
52634: PPUSH
52635: LD_INT 3
52637: PPUSH
52638: LD_INT 4
52640: PPUSH
52641: CALL_OW 272
52645: PUSH
52646: LD_VAR 0 8
52650: PPUSH
52651: LD_INT 3
52653: PPUSH
52654: LD_INT 4
52656: PPUSH
52657: CALL_OW 273
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_VAR 0 7
52670: PPUSH
52671: LD_INT 4
52673: PPUSH
52674: LD_INT 4
52676: PPUSH
52677: CALL_OW 272
52681: PUSH
52682: LD_VAR 0 8
52686: PPUSH
52687: LD_INT 4
52689: PPUSH
52690: LD_INT 4
52692: PPUSH
52693: CALL_OW 273
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_VAR 0 7
52706: PPUSH
52707: LD_INT 5
52709: PPUSH
52710: LD_INT 4
52712: PPUSH
52713: CALL_OW 272
52717: PUSH
52718: LD_VAR 0 8
52722: PPUSH
52723: LD_INT 5
52725: PPUSH
52726: LD_INT 4
52728: PPUSH
52729: CALL_OW 273
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// for i = tmp downto 1 do
52746: LD_ADDR_VAR 0 4
52750: PUSH
52751: DOUBLE
52752: LD_VAR 0 6
52756: INC
52757: ST_TO_ADDR
52758: LD_INT 1
52760: PUSH
52761: FOR_DOWNTO
52762: IFFALSE 52863
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52764: LD_VAR 0 6
52768: PUSH
52769: LD_VAR 0 4
52773: ARRAY
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PPUSH
52779: LD_VAR 0 6
52783: PUSH
52784: LD_VAR 0 4
52788: ARRAY
52789: PUSH
52790: LD_INT 2
52792: ARRAY
52793: PPUSH
52794: CALL_OW 488
52798: NOT
52799: PUSH
52800: LD_VAR 0 6
52804: PUSH
52805: LD_VAR 0 4
52809: ARRAY
52810: PUSH
52811: LD_INT 1
52813: ARRAY
52814: PPUSH
52815: LD_VAR 0 6
52819: PUSH
52820: LD_VAR 0 4
52824: ARRAY
52825: PUSH
52826: LD_INT 2
52828: ARRAY
52829: PPUSH
52830: CALL_OW 428
52834: PUSH
52835: LD_INT 0
52837: NONEQUAL
52838: OR
52839: IFFALSE 52861
// tmp := Delete ( tmp , i ) ;
52841: LD_ADDR_VAR 0 6
52845: PUSH
52846: LD_VAR 0 6
52850: PPUSH
52851: LD_VAR 0 4
52855: PPUSH
52856: CALL_OW 3
52860: ST_TO_ADDR
52861: GO 52761
52863: POP
52864: POP
// j := GetClosestHex ( unit , tmp ) ;
52865: LD_ADDR_VAR 0 5
52869: PUSH
52870: LD_VAR 0 1
52874: PPUSH
52875: LD_VAR 0 6
52879: PPUSH
52880: CALL 52165 0 2
52884: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52885: LD_VAR 0 1
52889: PPUSH
52890: LD_VAR 0 5
52894: PUSH
52895: LD_INT 1
52897: ARRAY
52898: PPUSH
52899: LD_VAR 0 5
52903: PUSH
52904: LD_INT 2
52906: ARRAY
52907: PPUSH
52908: CALL_OW 111
// end ;
52912: LD_VAR 0 3
52916: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
52921: PPUSH
// uc_side = 0 ;
52922: LD_ADDR_OWVAR 20
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
// uc_nation = 0 ;
52930: LD_ADDR_OWVAR 21
52934: PUSH
52935: LD_INT 0
52937: ST_TO_ADDR
// InitHc ;
52938: CALL_OW 19
// InitVc ;
52942: CALL_OW 20
// if mastodonts then
52946: LD_VAR 0 6
52950: IFFALSE 53017
// for i = 1 to mastodonts do
52952: LD_ADDR_VAR 0 11
52956: PUSH
52957: DOUBLE
52958: LD_INT 1
52960: DEC
52961: ST_TO_ADDR
52962: LD_VAR 0 6
52966: PUSH
52967: FOR_TO
52968: IFFALSE 53015
// begin vc_chassis := 31 ;
52970: LD_ADDR_OWVAR 37
52974: PUSH
52975: LD_INT 31
52977: ST_TO_ADDR
// vc_control := control_rider ;
52978: LD_ADDR_OWVAR 38
52982: PUSH
52983: LD_INT 4
52985: ST_TO_ADDR
// animal := CreateVehicle ;
52986: LD_ADDR_VAR 0 12
52990: PUSH
52991: CALL_OW 45
52995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52996: LD_VAR 0 12
53000: PPUSH
53001: LD_VAR 0 8
53005: PPUSH
53006: LD_INT 0
53008: PPUSH
53009: CALL 59723 0 3
// end ;
53013: GO 52967
53015: POP
53016: POP
// if horses then
53017: LD_VAR 0 5
53021: IFFALSE 53088
// for i = 1 to horses do
53023: LD_ADDR_VAR 0 11
53027: PUSH
53028: DOUBLE
53029: LD_INT 1
53031: DEC
53032: ST_TO_ADDR
53033: LD_VAR 0 5
53037: PUSH
53038: FOR_TO
53039: IFFALSE 53086
// begin hc_class := 21 ;
53041: LD_ADDR_OWVAR 28
53045: PUSH
53046: LD_INT 21
53048: ST_TO_ADDR
// hc_gallery :=  ;
53049: LD_ADDR_OWVAR 33
53053: PUSH
53054: LD_STRING 
53056: ST_TO_ADDR
// animal := CreateHuman ;
53057: LD_ADDR_VAR 0 12
53061: PUSH
53062: CALL_OW 44
53066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53067: LD_VAR 0 12
53071: PPUSH
53072: LD_VAR 0 8
53076: PPUSH
53077: LD_INT 0
53079: PPUSH
53080: CALL 59723 0 3
// end ;
53084: GO 53038
53086: POP
53087: POP
// if birds then
53088: LD_VAR 0 1
53092: IFFALSE 53159
// for i = 1 to birds do
53094: LD_ADDR_VAR 0 11
53098: PUSH
53099: DOUBLE
53100: LD_INT 1
53102: DEC
53103: ST_TO_ADDR
53104: LD_VAR 0 1
53108: PUSH
53109: FOR_TO
53110: IFFALSE 53157
// begin hc_class = 18 ;
53112: LD_ADDR_OWVAR 28
53116: PUSH
53117: LD_INT 18
53119: ST_TO_ADDR
// hc_gallery =  ;
53120: LD_ADDR_OWVAR 33
53124: PUSH
53125: LD_STRING 
53127: ST_TO_ADDR
// animal := CreateHuman ;
53128: LD_ADDR_VAR 0 12
53132: PUSH
53133: CALL_OW 44
53137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53138: LD_VAR 0 12
53142: PPUSH
53143: LD_VAR 0 8
53147: PPUSH
53148: LD_INT 0
53150: PPUSH
53151: CALL 59723 0 3
// end ;
53155: GO 53109
53157: POP
53158: POP
// if tigers then
53159: LD_VAR 0 2
53163: IFFALSE 53247
// for i = 1 to tigers do
53165: LD_ADDR_VAR 0 11
53169: PUSH
53170: DOUBLE
53171: LD_INT 1
53173: DEC
53174: ST_TO_ADDR
53175: LD_VAR 0 2
53179: PUSH
53180: FOR_TO
53181: IFFALSE 53245
// begin hc_class = class_tiger ;
53183: LD_ADDR_OWVAR 28
53187: PUSH
53188: LD_INT 14
53190: ST_TO_ADDR
// hc_gallery =  ;
53191: LD_ADDR_OWVAR 33
53195: PUSH
53196: LD_STRING 
53198: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53199: LD_ADDR_OWVAR 35
53203: PUSH
53204: LD_INT 7
53206: NEG
53207: PPUSH
53208: LD_INT 7
53210: PPUSH
53211: CALL_OW 12
53215: ST_TO_ADDR
// animal := CreateHuman ;
53216: LD_ADDR_VAR 0 12
53220: PUSH
53221: CALL_OW 44
53225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53226: LD_VAR 0 12
53230: PPUSH
53231: LD_VAR 0 8
53235: PPUSH
53236: LD_INT 0
53238: PPUSH
53239: CALL 59723 0 3
// end ;
53243: GO 53180
53245: POP
53246: POP
// if apemans then
53247: LD_VAR 0 3
53251: IFFALSE 53374
// for i = 1 to apemans do
53253: LD_ADDR_VAR 0 11
53257: PUSH
53258: DOUBLE
53259: LD_INT 1
53261: DEC
53262: ST_TO_ADDR
53263: LD_VAR 0 3
53267: PUSH
53268: FOR_TO
53269: IFFALSE 53372
// begin hc_class = class_apeman ;
53271: LD_ADDR_OWVAR 28
53275: PUSH
53276: LD_INT 12
53278: ST_TO_ADDR
// hc_gallery =  ;
53279: LD_ADDR_OWVAR 33
53283: PUSH
53284: LD_STRING 
53286: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53287: LD_ADDR_OWVAR 35
53291: PUSH
53292: LD_INT 5
53294: NEG
53295: PPUSH
53296: LD_INT 5
53298: PPUSH
53299: CALL_OW 12
53303: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53304: LD_ADDR_OWVAR 31
53308: PUSH
53309: LD_INT 1
53311: PPUSH
53312: LD_INT 3
53314: PPUSH
53315: CALL_OW 12
53319: PUSH
53320: LD_INT 1
53322: PPUSH
53323: LD_INT 3
53325: PPUSH
53326: CALL_OW 12
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: ST_TO_ADDR
// animal := CreateHuman ;
53343: LD_ADDR_VAR 0 12
53347: PUSH
53348: CALL_OW 44
53352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53353: LD_VAR 0 12
53357: PPUSH
53358: LD_VAR 0 8
53362: PPUSH
53363: LD_INT 0
53365: PPUSH
53366: CALL 59723 0 3
// end ;
53370: GO 53268
53372: POP
53373: POP
// if enchidnas then
53374: LD_VAR 0 4
53378: IFFALSE 53445
// for i = 1 to enchidnas do
53380: LD_ADDR_VAR 0 11
53384: PUSH
53385: DOUBLE
53386: LD_INT 1
53388: DEC
53389: ST_TO_ADDR
53390: LD_VAR 0 4
53394: PUSH
53395: FOR_TO
53396: IFFALSE 53443
// begin hc_class = 13 ;
53398: LD_ADDR_OWVAR 28
53402: PUSH
53403: LD_INT 13
53405: ST_TO_ADDR
// hc_gallery =  ;
53406: LD_ADDR_OWVAR 33
53410: PUSH
53411: LD_STRING 
53413: ST_TO_ADDR
// animal := CreateHuman ;
53414: LD_ADDR_VAR 0 12
53418: PUSH
53419: CALL_OW 44
53423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53424: LD_VAR 0 12
53428: PPUSH
53429: LD_VAR 0 8
53433: PPUSH
53434: LD_INT 0
53436: PPUSH
53437: CALL 59723 0 3
// end ;
53441: GO 53395
53443: POP
53444: POP
// if fishes then
53445: LD_VAR 0 7
53449: IFFALSE 53516
// for i = 1 to fishes do
53451: LD_ADDR_VAR 0 11
53455: PUSH
53456: DOUBLE
53457: LD_INT 1
53459: DEC
53460: ST_TO_ADDR
53461: LD_VAR 0 7
53465: PUSH
53466: FOR_TO
53467: IFFALSE 53514
// begin hc_class = 20 ;
53469: LD_ADDR_OWVAR 28
53473: PUSH
53474: LD_INT 20
53476: ST_TO_ADDR
// hc_gallery =  ;
53477: LD_ADDR_OWVAR 33
53481: PUSH
53482: LD_STRING 
53484: ST_TO_ADDR
// animal := CreateHuman ;
53485: LD_ADDR_VAR 0 12
53489: PUSH
53490: CALL_OW 44
53494: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53495: LD_VAR 0 12
53499: PPUSH
53500: LD_VAR 0 9
53504: PPUSH
53505: LD_INT 0
53507: PPUSH
53508: CALL 59723 0 3
// end ;
53512: GO 53466
53514: POP
53515: POP
// end ;
53516: LD_VAR 0 10
53520: RET
// export function WantHeal ( sci , unit ) ; begin
53521: LD_INT 0
53523: PPUSH
// if GetTaskList ( sci ) > 0 then
53524: LD_VAR 0 1
53528: PPUSH
53529: CALL_OW 437
53533: PUSH
53534: LD_INT 0
53536: GREATER
53537: IFFALSE 53607
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53539: LD_VAR 0 1
53543: PPUSH
53544: CALL_OW 437
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: PUSH
53557: LD_STRING l
53559: EQUAL
53560: PUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: CALL_OW 437
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PUSH
53575: LD_INT 4
53577: ARRAY
53578: PUSH
53579: LD_VAR 0 2
53583: EQUAL
53584: AND
53585: IFFALSE 53597
// result := true else
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_INT 1
53594: ST_TO_ADDR
53595: GO 53605
// result := false ;
53597: LD_ADDR_VAR 0 3
53601: PUSH
53602: LD_INT 0
53604: ST_TO_ADDR
// end else
53605: GO 53615
// result := false ;
53607: LD_ADDR_VAR 0 3
53611: PUSH
53612: LD_INT 0
53614: ST_TO_ADDR
// end ;
53615: LD_VAR 0 3
53619: RET
// export function HealTarget ( sci ) ; begin
53620: LD_INT 0
53622: PPUSH
// if not sci then
53623: LD_VAR 0 1
53627: NOT
53628: IFFALSE 53632
// exit ;
53630: GO 53697
// result := 0 ;
53632: LD_ADDR_VAR 0 2
53636: PUSH
53637: LD_INT 0
53639: ST_TO_ADDR
// if GetTaskList ( sci ) then
53640: LD_VAR 0 1
53644: PPUSH
53645: CALL_OW 437
53649: IFFALSE 53697
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53651: LD_VAR 0 1
53655: PPUSH
53656: CALL_OW 437
53660: PUSH
53661: LD_INT 1
53663: ARRAY
53664: PUSH
53665: LD_INT 1
53667: ARRAY
53668: PUSH
53669: LD_STRING l
53671: EQUAL
53672: IFFALSE 53697
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53674: LD_ADDR_VAR 0 2
53678: PUSH
53679: LD_VAR 0 1
53683: PPUSH
53684: CALL_OW 437
53688: PUSH
53689: LD_INT 1
53691: ARRAY
53692: PUSH
53693: LD_INT 4
53695: ARRAY
53696: ST_TO_ADDR
// end ;
53697: LD_VAR 0 2
53701: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
53702: LD_INT 0
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
// if not list then
53737: LD_VAR 0 1
53741: NOT
53742: IFFALSE 53746
// exit ;
53744: GO 58334
// base := list [ 1 ] ;
53746: LD_ADDR_VAR 0 3
53750: PUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 1
53758: ARRAY
53759: ST_TO_ADDR
// group := list [ 2 ] ;
53760: LD_ADDR_VAR 0 4
53764: PUSH
53765: LD_VAR 0 1
53769: PUSH
53770: LD_INT 2
53772: ARRAY
53773: ST_TO_ADDR
// path := list [ 3 ] ;
53774: LD_ADDR_VAR 0 5
53778: PUSH
53779: LD_VAR 0 1
53783: PUSH
53784: LD_INT 3
53786: ARRAY
53787: ST_TO_ADDR
// flags := list [ 4 ] ;
53788: LD_ADDR_VAR 0 6
53792: PUSH
53793: LD_VAR 0 1
53797: PUSH
53798: LD_INT 4
53800: ARRAY
53801: ST_TO_ADDR
// mined := [ ] ;
53802: LD_ADDR_VAR 0 27
53806: PUSH
53807: EMPTY
53808: ST_TO_ADDR
// bombed := [ ] ;
53809: LD_ADDR_VAR 0 28
53813: PUSH
53814: EMPTY
53815: ST_TO_ADDR
// healers := [ ] ;
53816: LD_ADDR_VAR 0 31
53820: PUSH
53821: EMPTY
53822: ST_TO_ADDR
// to_heal := [ ] ;
53823: LD_ADDR_VAR 0 30
53827: PUSH
53828: EMPTY
53829: ST_TO_ADDR
// repairs := [ ] ;
53830: LD_ADDR_VAR 0 33
53834: PUSH
53835: EMPTY
53836: ST_TO_ADDR
// to_repair := [ ] ;
53837: LD_ADDR_VAR 0 32
53841: PUSH
53842: EMPTY
53843: ST_TO_ADDR
// if not group or not path then
53844: LD_VAR 0 4
53848: NOT
53849: PUSH
53850: LD_VAR 0 5
53854: NOT
53855: OR
53856: IFFALSE 53860
// exit ;
53858: GO 58334
// if flags then
53860: LD_VAR 0 6
53864: IFFALSE 54008
// begin f_ignore_area := flags [ 1 ] ;
53866: LD_ADDR_VAR 0 17
53870: PUSH
53871: LD_VAR 0 6
53875: PUSH
53876: LD_INT 1
53878: ARRAY
53879: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
53880: LD_ADDR_VAR 0 18
53884: PUSH
53885: LD_VAR 0 6
53889: PUSH
53890: LD_INT 2
53892: ARRAY
53893: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
53894: LD_ADDR_VAR 0 19
53898: PUSH
53899: LD_VAR 0 6
53903: PUSH
53904: LD_INT 3
53906: ARRAY
53907: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
53908: LD_ADDR_VAR 0 20
53912: PUSH
53913: LD_VAR 0 6
53917: PUSH
53918: LD_INT 4
53920: ARRAY
53921: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
53922: LD_ADDR_VAR 0 21
53926: PUSH
53927: LD_VAR 0 6
53931: PUSH
53932: LD_INT 5
53934: ARRAY
53935: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
53936: LD_ADDR_VAR 0 22
53940: PUSH
53941: LD_VAR 0 6
53945: PUSH
53946: LD_INT 6
53948: ARRAY
53949: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
53950: LD_ADDR_VAR 0 23
53954: PUSH
53955: LD_VAR 0 6
53959: PUSH
53960: LD_INT 7
53962: ARRAY
53963: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
53964: LD_ADDR_VAR 0 24
53968: PUSH
53969: LD_VAR 0 6
53973: PUSH
53974: LD_INT 8
53976: ARRAY
53977: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
53978: LD_ADDR_VAR 0 25
53982: PUSH
53983: LD_VAR 0 6
53987: PUSH
53988: LD_INT 9
53990: ARRAY
53991: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
53992: LD_ADDR_VAR 0 26
53996: PUSH
53997: LD_VAR 0 6
54001: PUSH
54002: LD_INT 10
54004: ARRAY
54005: ST_TO_ADDR
// end else
54006: GO 54088
// begin f_ignore_area := false ;
54008: LD_ADDR_VAR 0 17
54012: PUSH
54013: LD_INT 0
54015: ST_TO_ADDR
// f_capture := false ;
54016: LD_ADDR_VAR 0 18
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// f_ignore_civ := false ;
54024: LD_ADDR_VAR 0 19
54028: PUSH
54029: LD_INT 0
54031: ST_TO_ADDR
// f_murder := false ;
54032: LD_ADDR_VAR 0 20
54036: PUSH
54037: LD_INT 0
54039: ST_TO_ADDR
// f_mines := false ;
54040: LD_ADDR_VAR 0 21
54044: PUSH
54045: LD_INT 0
54047: ST_TO_ADDR
// f_repair := false ;
54048: LD_ADDR_VAR 0 22
54052: PUSH
54053: LD_INT 0
54055: ST_TO_ADDR
// f_heal := false ;
54056: LD_ADDR_VAR 0 23
54060: PUSH
54061: LD_INT 0
54063: ST_TO_ADDR
// f_spacetime := false ;
54064: LD_ADDR_VAR 0 24
54068: PUSH
54069: LD_INT 0
54071: ST_TO_ADDR
// f_attack_depot := false ;
54072: LD_ADDR_VAR 0 25
54076: PUSH
54077: LD_INT 0
54079: ST_TO_ADDR
// f_crawl := false ;
54080: LD_ADDR_VAR 0 26
54084: PUSH
54085: LD_INT 0
54087: ST_TO_ADDR
// end ; if f_heal then
54088: LD_VAR 0 23
54092: IFFALSE 54119
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
54094: LD_ADDR_VAR 0 31
54098: PUSH
54099: LD_VAR 0 4
54103: PPUSH
54104: LD_INT 25
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PPUSH
54114: CALL_OW 72
54118: ST_TO_ADDR
// if f_repair then
54119: LD_VAR 0 22
54123: IFFALSE 54150
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
54125: LD_ADDR_VAR 0 33
54129: PUSH
54130: LD_VAR 0 4
54134: PPUSH
54135: LD_INT 25
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PPUSH
54145: CALL_OW 72
54149: ST_TO_ADDR
// units_path := [ ] ;
54150: LD_ADDR_VAR 0 16
54154: PUSH
54155: EMPTY
54156: ST_TO_ADDR
// for i = 1 to group do
54157: LD_ADDR_VAR 0 7
54161: PUSH
54162: DOUBLE
54163: LD_INT 1
54165: DEC
54166: ST_TO_ADDR
54167: LD_VAR 0 4
54171: PUSH
54172: FOR_TO
54173: IFFALSE 54202
// units_path := Replace ( units_path , i , path ) ;
54175: LD_ADDR_VAR 0 16
54179: PUSH
54180: LD_VAR 0 16
54184: PPUSH
54185: LD_VAR 0 7
54189: PPUSH
54190: LD_VAR 0 5
54194: PPUSH
54195: CALL_OW 1
54199: ST_TO_ADDR
54200: GO 54172
54202: POP
54203: POP
// repeat for i = group downto 1 do
54204: LD_ADDR_VAR 0 7
54208: PUSH
54209: DOUBLE
54210: LD_VAR 0 4
54214: INC
54215: ST_TO_ADDR
54216: LD_INT 1
54218: PUSH
54219: FOR_DOWNTO
54220: IFFALSE 58316
// begin wait ( 5 ) ;
54222: LD_INT 5
54224: PPUSH
54225: CALL_OW 67
// tmp := [ ] ;
54229: LD_ADDR_VAR 0 14
54233: PUSH
54234: EMPTY
54235: ST_TO_ADDR
// attacking := false ;
54236: LD_ADDR_VAR 0 29
54240: PUSH
54241: LD_INT 0
54243: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
54244: LD_VAR 0 4
54248: PUSH
54249: LD_VAR 0 7
54253: ARRAY
54254: PPUSH
54255: CALL_OW 301
54259: PUSH
54260: LD_VAR 0 4
54264: PUSH
54265: LD_VAR 0 7
54269: ARRAY
54270: NOT
54271: OR
54272: IFFALSE 54381
// begin if GetType ( group [ i ] ) = unit_human then
54274: LD_VAR 0 4
54278: PUSH
54279: LD_VAR 0 7
54283: ARRAY
54284: PPUSH
54285: CALL_OW 247
54289: PUSH
54290: LD_INT 1
54292: EQUAL
54293: IFFALSE 54339
// begin to_heal := to_heal diff group [ i ] ;
54295: LD_ADDR_VAR 0 30
54299: PUSH
54300: LD_VAR 0 30
54304: PUSH
54305: LD_VAR 0 4
54309: PUSH
54310: LD_VAR 0 7
54314: ARRAY
54315: DIFF
54316: ST_TO_ADDR
// healers := healers diff group [ i ] ;
54317: LD_ADDR_VAR 0 31
54321: PUSH
54322: LD_VAR 0 31
54326: PUSH
54327: LD_VAR 0 4
54331: PUSH
54332: LD_VAR 0 7
54336: ARRAY
54337: DIFF
54338: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
54339: LD_ADDR_VAR 0 4
54343: PUSH
54344: LD_VAR 0 4
54348: PPUSH
54349: LD_VAR 0 7
54353: PPUSH
54354: CALL_OW 3
54358: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
54359: LD_ADDR_VAR 0 16
54363: PUSH
54364: LD_VAR 0 16
54368: PPUSH
54369: LD_VAR 0 7
54373: PPUSH
54374: CALL_OW 3
54378: ST_TO_ADDR
// continue ;
54379: GO 54219
// end ; if f_repair then
54381: LD_VAR 0 22
54385: IFFALSE 54874
// begin if GetType ( group [ i ] ) = unit_vehicle then
54387: LD_VAR 0 4
54391: PUSH
54392: LD_VAR 0 7
54396: ARRAY
54397: PPUSH
54398: CALL_OW 247
54402: PUSH
54403: LD_INT 2
54405: EQUAL
54406: IFFALSE 54596
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
54408: LD_VAR 0 4
54412: PUSH
54413: LD_VAR 0 7
54417: ARRAY
54418: PPUSH
54419: CALL_OW 256
54423: PUSH
54424: LD_INT 700
54426: LESS
54427: PUSH
54428: LD_VAR 0 4
54432: PUSH
54433: LD_VAR 0 7
54437: ARRAY
54438: PUSH
54439: LD_VAR 0 32
54443: IN
54444: NOT
54445: AND
54446: IFFALSE 54470
// to_repair := to_repair union group [ i ] ;
54448: LD_ADDR_VAR 0 32
54452: PUSH
54453: LD_VAR 0 32
54457: PUSH
54458: LD_VAR 0 4
54462: PUSH
54463: LD_VAR 0 7
54467: ARRAY
54468: UNION
54469: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
54470: LD_VAR 0 4
54474: PUSH
54475: LD_VAR 0 7
54479: ARRAY
54480: PPUSH
54481: CALL_OW 256
54485: PUSH
54486: LD_INT 1000
54488: EQUAL
54489: PUSH
54490: LD_VAR 0 4
54494: PUSH
54495: LD_VAR 0 7
54499: ARRAY
54500: PUSH
54501: LD_VAR 0 32
54505: IN
54506: AND
54507: IFFALSE 54531
// to_repair := to_repair diff group [ i ] ;
54509: LD_ADDR_VAR 0 32
54513: PUSH
54514: LD_VAR 0 32
54518: PUSH
54519: LD_VAR 0 4
54523: PUSH
54524: LD_VAR 0 7
54528: ARRAY
54529: DIFF
54530: ST_TO_ADDR
// if group [ i ] in to_repair then
54531: LD_VAR 0 4
54535: PUSH
54536: LD_VAR 0 7
54540: ARRAY
54541: PUSH
54542: LD_VAR 0 32
54546: IN
54547: IFFALSE 54594
// begin if not IsInArea ( group [ i ] , f_repair ) then
54549: LD_VAR 0 4
54553: PUSH
54554: LD_VAR 0 7
54558: ARRAY
54559: PPUSH
54560: LD_VAR 0 22
54564: PPUSH
54565: CALL_OW 308
54569: NOT
54570: IFFALSE 54592
// ComMoveToArea ( group [ i ] , f_repair ) ;
54572: LD_VAR 0 4
54576: PUSH
54577: LD_VAR 0 7
54581: ARRAY
54582: PPUSH
54583: LD_VAR 0 22
54587: PPUSH
54588: CALL_OW 113
// continue ;
54592: GO 54219
// end ; end else
54594: GO 54874
// if group [ i ] in repairs then
54596: LD_VAR 0 4
54600: PUSH
54601: LD_VAR 0 7
54605: ARRAY
54606: PUSH
54607: LD_VAR 0 33
54611: IN
54612: IFFALSE 54874
// begin if IsInUnit ( group [ i ] ) then
54614: LD_VAR 0 4
54618: PUSH
54619: LD_VAR 0 7
54623: ARRAY
54624: PPUSH
54625: CALL_OW 310
54629: IFFALSE 54697
// begin z := IsInUnit ( group [ i ] ) ;
54631: LD_ADDR_VAR 0 13
54635: PUSH
54636: LD_VAR 0 4
54640: PUSH
54641: LD_VAR 0 7
54645: ARRAY
54646: PPUSH
54647: CALL_OW 310
54651: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
54652: LD_VAR 0 13
54656: PUSH
54657: LD_VAR 0 32
54661: IN
54662: PUSH
54663: LD_VAR 0 13
54667: PPUSH
54668: LD_VAR 0 22
54672: PPUSH
54673: CALL_OW 308
54677: AND
54678: IFFALSE 54695
// ComExitVehicle ( group [ i ] ) ;
54680: LD_VAR 0 4
54684: PUSH
54685: LD_VAR 0 7
54689: ARRAY
54690: PPUSH
54691: CALL_OW 121
// end else
54695: GO 54874
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
54697: LD_ADDR_VAR 0 13
54701: PUSH
54702: LD_VAR 0 4
54706: PPUSH
54707: LD_INT 95
54709: PUSH
54710: LD_VAR 0 22
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 58
54721: PUSH
54722: EMPTY
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PPUSH
54729: CALL_OW 72
54733: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
54734: LD_VAR 0 4
54738: PUSH
54739: LD_VAR 0 7
54743: ARRAY
54744: PPUSH
54745: CALL_OW 314
54749: NOT
54750: IFFALSE 54872
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
54752: LD_ADDR_VAR 0 10
54756: PUSH
54757: LD_VAR 0 13
54761: PPUSH
54762: LD_VAR 0 4
54766: PUSH
54767: LD_VAR 0 7
54771: ARRAY
54772: PPUSH
54773: CALL_OW 74
54777: ST_TO_ADDR
// if not x then
54778: LD_VAR 0 10
54782: NOT
54783: IFFALSE 54787
// continue ;
54785: GO 54219
// if GetLives ( x ) < 1000 then
54787: LD_VAR 0 10
54791: PPUSH
54792: CALL_OW 256
54796: PUSH
54797: LD_INT 1000
54799: LESS
54800: IFFALSE 54824
// ComRepairVehicle ( group [ i ] , x ) else
54802: LD_VAR 0 4
54806: PUSH
54807: LD_VAR 0 7
54811: ARRAY
54812: PPUSH
54813: LD_VAR 0 10
54817: PPUSH
54818: CALL_OW 129
54822: GO 54872
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
54824: LD_VAR 0 23
54828: PUSH
54829: LD_VAR 0 4
54833: PUSH
54834: LD_VAR 0 7
54838: ARRAY
54839: PPUSH
54840: CALL_OW 256
54844: PUSH
54845: LD_INT 1000
54847: LESS
54848: AND
54849: NOT
54850: IFFALSE 54872
// ComEnterUnit ( group [ i ] , x ) ;
54852: LD_VAR 0 4
54856: PUSH
54857: LD_VAR 0 7
54861: ARRAY
54862: PPUSH
54863: LD_VAR 0 10
54867: PPUSH
54868: CALL_OW 120
// end ; continue ;
54872: GO 54219
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
54874: LD_VAR 0 23
54878: PUSH
54879: LD_VAR 0 4
54883: PUSH
54884: LD_VAR 0 7
54888: ARRAY
54889: PPUSH
54890: CALL_OW 247
54894: PUSH
54895: LD_INT 1
54897: EQUAL
54898: AND
54899: IFFALSE 55377
// begin if group [ i ] in healers then
54901: LD_VAR 0 4
54905: PUSH
54906: LD_VAR 0 7
54910: ARRAY
54911: PUSH
54912: LD_VAR 0 31
54916: IN
54917: IFFALSE 55190
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
54919: LD_VAR 0 4
54923: PUSH
54924: LD_VAR 0 7
54928: ARRAY
54929: PPUSH
54930: LD_VAR 0 23
54934: PPUSH
54935: CALL_OW 308
54939: NOT
54940: PUSH
54941: LD_VAR 0 4
54945: PUSH
54946: LD_VAR 0 7
54950: ARRAY
54951: PPUSH
54952: CALL_OW 314
54956: NOT
54957: AND
54958: IFFALSE 54982
// ComMoveToArea ( group [ i ] , f_heal ) else
54960: LD_VAR 0 4
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PPUSH
54971: LD_VAR 0 23
54975: PPUSH
54976: CALL_OW 113
54980: GO 55188
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
54982: LD_VAR 0 4
54986: PUSH
54987: LD_VAR 0 7
54991: ARRAY
54992: PPUSH
54993: CALL 53620 0 1
54997: PPUSH
54998: CALL_OW 256
55002: PUSH
55003: LD_INT 1000
55005: EQUAL
55006: IFFALSE 55025
// ComStop ( group [ i ] ) else
55008: LD_VAR 0 4
55012: PUSH
55013: LD_VAR 0 7
55017: ARRAY
55018: PPUSH
55019: CALL_OW 141
55023: GO 55188
// if not HasTask ( group [ i ] ) and to_heal then
55025: LD_VAR 0 4
55029: PUSH
55030: LD_VAR 0 7
55034: ARRAY
55035: PPUSH
55036: CALL_OW 314
55040: NOT
55041: PUSH
55042: LD_VAR 0 30
55046: AND
55047: IFFALSE 55188
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
55049: LD_ADDR_VAR 0 13
55053: PUSH
55054: LD_VAR 0 30
55058: PPUSH
55059: LD_INT 3
55061: PUSH
55062: LD_INT 54
55064: PUSH
55065: EMPTY
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PPUSH
55072: CALL_OW 72
55076: PPUSH
55077: LD_VAR 0 4
55081: PUSH
55082: LD_VAR 0 7
55086: ARRAY
55087: PPUSH
55088: CALL_OW 74
55092: ST_TO_ADDR
// if z then
55093: LD_VAR 0 13
55097: IFFALSE 55188
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
55099: LD_INT 91
55101: PUSH
55102: LD_VAR 0 13
55106: PUSH
55107: LD_INT 10
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 81
55117: PUSH
55118: LD_VAR 0 13
55122: PPUSH
55123: CALL_OW 255
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PPUSH
55136: CALL_OW 69
55140: PUSH
55141: LD_INT 0
55143: EQUAL
55144: IFFALSE 55168
// ComHeal ( group [ i ] , z ) else
55146: LD_VAR 0 4
55150: PUSH
55151: LD_VAR 0 7
55155: ARRAY
55156: PPUSH
55157: LD_VAR 0 13
55161: PPUSH
55162: CALL_OW 128
55166: GO 55188
// ComMoveToArea ( group [ i ] , f_heal ) ;
55168: LD_VAR 0 4
55172: PUSH
55173: LD_VAR 0 7
55177: ARRAY
55178: PPUSH
55179: LD_VAR 0 23
55183: PPUSH
55184: CALL_OW 113
// end ; continue ;
55188: GO 54219
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
55190: LD_VAR 0 4
55194: PUSH
55195: LD_VAR 0 7
55199: ARRAY
55200: PPUSH
55201: CALL_OW 256
55205: PUSH
55206: LD_INT 700
55208: LESS
55209: PUSH
55210: LD_VAR 0 4
55214: PUSH
55215: LD_VAR 0 7
55219: ARRAY
55220: PUSH
55221: LD_VAR 0 30
55225: IN
55226: NOT
55227: AND
55228: IFFALSE 55252
// to_heal := to_heal union group [ i ] ;
55230: LD_ADDR_VAR 0 30
55234: PUSH
55235: LD_VAR 0 30
55239: PUSH
55240: LD_VAR 0 4
55244: PUSH
55245: LD_VAR 0 7
55249: ARRAY
55250: UNION
55251: ST_TO_ADDR
// if group [ i ] in to_heal then
55252: LD_VAR 0 4
55256: PUSH
55257: LD_VAR 0 7
55261: ARRAY
55262: PUSH
55263: LD_VAR 0 30
55267: IN
55268: IFFALSE 55377
// begin if GetLives ( group [ i ] ) = 1000 then
55270: LD_VAR 0 4
55274: PUSH
55275: LD_VAR 0 7
55279: ARRAY
55280: PPUSH
55281: CALL_OW 256
55285: PUSH
55286: LD_INT 1000
55288: EQUAL
55289: IFFALSE 55315
// to_heal := to_heal diff group [ i ] else
55291: LD_ADDR_VAR 0 30
55295: PUSH
55296: LD_VAR 0 30
55300: PUSH
55301: LD_VAR 0 4
55305: PUSH
55306: LD_VAR 0 7
55310: ARRAY
55311: DIFF
55312: ST_TO_ADDR
55313: GO 55377
// begin if not IsInArea ( group [ i ] , to_heal ) then
55315: LD_VAR 0 4
55319: PUSH
55320: LD_VAR 0 7
55324: ARRAY
55325: PPUSH
55326: LD_VAR 0 30
55330: PPUSH
55331: CALL_OW 308
55335: NOT
55336: IFFALSE 55360
// ComMoveToArea ( group [ i ] , f_heal ) else
55338: LD_VAR 0 4
55342: PUSH
55343: LD_VAR 0 7
55347: ARRAY
55348: PPUSH
55349: LD_VAR 0 23
55353: PPUSH
55354: CALL_OW 113
55358: GO 55375
// ComHold ( group [ i ] ) ;
55360: LD_VAR 0 4
55364: PUSH
55365: LD_VAR 0 7
55369: ARRAY
55370: PPUSH
55371: CALL_OW 140
// continue ;
55375: GO 54219
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
55377: LD_VAR 0 4
55381: PUSH
55382: LD_VAR 0 7
55386: ARRAY
55387: PPUSH
55388: LD_INT 10
55390: PPUSH
55391: CALL 52017 0 2
55395: NOT
55396: PUSH
55397: LD_VAR 0 16
55401: PUSH
55402: LD_VAR 0 7
55406: ARRAY
55407: PUSH
55408: EMPTY
55409: EQUAL
55410: NOT
55411: AND
55412: IFFALSE 55678
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
55414: LD_VAR 0 4
55418: PUSH
55419: LD_VAR 0 7
55423: ARRAY
55424: PPUSH
55425: CALL_OW 262
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: IN
55440: IFFALSE 55481
// if GetFuel ( group [ i ] ) < 10 then
55442: LD_VAR 0 4
55446: PUSH
55447: LD_VAR 0 7
55451: ARRAY
55452: PPUSH
55453: CALL_OW 261
55457: PUSH
55458: LD_INT 10
55460: LESS
55461: IFFALSE 55481
// SetFuel ( group [ i ] , 12 ) ;
55463: LD_VAR 0 4
55467: PUSH
55468: LD_VAR 0 7
55472: ARRAY
55473: PPUSH
55474: LD_INT 12
55476: PPUSH
55477: CALL_OW 240
// if units_path [ i ] then
55481: LD_VAR 0 16
55485: PUSH
55486: LD_VAR 0 7
55490: ARRAY
55491: IFFALSE 55676
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
55493: LD_VAR 0 4
55497: PUSH
55498: LD_VAR 0 7
55502: ARRAY
55503: PPUSH
55504: LD_VAR 0 16
55508: PUSH
55509: LD_VAR 0 7
55513: ARRAY
55514: PUSH
55515: LD_INT 1
55517: ARRAY
55518: PUSH
55519: LD_INT 1
55521: ARRAY
55522: PPUSH
55523: LD_VAR 0 16
55527: PUSH
55528: LD_VAR 0 7
55532: ARRAY
55533: PUSH
55534: LD_INT 1
55536: ARRAY
55537: PUSH
55538: LD_INT 2
55540: ARRAY
55541: PPUSH
55542: CALL_OW 297
55546: PUSH
55547: LD_INT 6
55549: GREATER
55550: IFFALSE 55625
// begin if not HasTask ( group [ i ] ) then
55552: LD_VAR 0 4
55556: PUSH
55557: LD_VAR 0 7
55561: ARRAY
55562: PPUSH
55563: CALL_OW 314
55567: NOT
55568: IFFALSE 55623
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
55570: LD_VAR 0 4
55574: PUSH
55575: LD_VAR 0 7
55579: ARRAY
55580: PPUSH
55581: LD_VAR 0 16
55585: PUSH
55586: LD_VAR 0 7
55590: ARRAY
55591: PUSH
55592: LD_INT 1
55594: ARRAY
55595: PUSH
55596: LD_INT 1
55598: ARRAY
55599: PPUSH
55600: LD_VAR 0 16
55604: PUSH
55605: LD_VAR 0 7
55609: ARRAY
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PUSH
55615: LD_INT 2
55617: ARRAY
55618: PPUSH
55619: CALL_OW 114
// end else
55623: GO 55676
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
55625: LD_ADDR_VAR 0 15
55629: PUSH
55630: LD_VAR 0 16
55634: PUSH
55635: LD_VAR 0 7
55639: ARRAY
55640: PPUSH
55641: LD_INT 1
55643: PPUSH
55644: CALL_OW 3
55648: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
55649: LD_ADDR_VAR 0 16
55653: PUSH
55654: LD_VAR 0 16
55658: PPUSH
55659: LD_VAR 0 7
55663: PPUSH
55664: LD_VAR 0 15
55668: PPUSH
55669: CALL_OW 1
55673: ST_TO_ADDR
// continue ;
55674: GO 54219
// end ; end ; end else
55676: GO 58314
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
55678: LD_ADDR_VAR 0 14
55682: PUSH
55683: LD_INT 81
55685: PUSH
55686: LD_VAR 0 4
55690: PUSH
55691: LD_VAR 0 7
55695: ARRAY
55696: PPUSH
55697: CALL_OW 255
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PPUSH
55706: CALL_OW 69
55710: ST_TO_ADDR
// if not tmp then
55711: LD_VAR 0 14
55715: NOT
55716: IFFALSE 55720
// continue ;
55718: GO 54219
// if f_ignore_area then
55720: LD_VAR 0 17
55724: IFFALSE 55812
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
55726: LD_ADDR_VAR 0 15
55730: PUSH
55731: LD_VAR 0 14
55735: PPUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 92
55741: PUSH
55742: LD_VAR 0 17
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: PUSH
55751: LD_VAR 0 17
55755: PUSH
55756: LD_INT 2
55758: ARRAY
55759: PUSH
55760: LD_VAR 0 17
55764: PUSH
55765: LD_INT 3
55767: ARRAY
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PPUSH
55779: CALL_OW 72
55783: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
55784: LD_VAR 0 14
55788: PUSH
55789: LD_VAR 0 15
55793: DIFF
55794: IFFALSE 55812
// tmp := tmp diff tmp2 ;
55796: LD_ADDR_VAR 0 14
55800: PUSH
55801: LD_VAR 0 14
55805: PUSH
55806: LD_VAR 0 15
55810: DIFF
55811: ST_TO_ADDR
// end ; if not f_murder then
55812: LD_VAR 0 20
55816: NOT
55817: IFFALSE 55875
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
55819: LD_ADDR_VAR 0 15
55823: PUSH
55824: LD_VAR 0 14
55828: PPUSH
55829: LD_INT 3
55831: PUSH
55832: LD_INT 50
55834: PUSH
55835: EMPTY
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PPUSH
55842: CALL_OW 72
55846: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
55847: LD_VAR 0 14
55851: PUSH
55852: LD_VAR 0 15
55856: DIFF
55857: IFFALSE 55875
// tmp := tmp diff tmp2 ;
55859: LD_ADDR_VAR 0 14
55863: PUSH
55864: LD_VAR 0 14
55868: PUSH
55869: LD_VAR 0 15
55873: DIFF
55874: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
55875: LD_ADDR_VAR 0 14
55879: PUSH
55880: LD_VAR 0 4
55884: PUSH
55885: LD_VAR 0 7
55889: ARRAY
55890: PPUSH
55891: LD_VAR 0 14
55895: PPUSH
55896: LD_INT 1
55898: PPUSH
55899: LD_INT 1
55901: PPUSH
55902: CALL 25899 0 4
55906: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
55907: LD_VAR 0 4
55911: PUSH
55912: LD_VAR 0 7
55916: ARRAY
55917: PPUSH
55918: CALL_OW 257
55922: PUSH
55923: LD_INT 1
55925: EQUAL
55926: IFFALSE 56374
// begin if WantPlant ( group [ i ] ) then
55928: LD_VAR 0 4
55932: PUSH
55933: LD_VAR 0 7
55937: ARRAY
55938: PPUSH
55939: CALL 25367 0 1
55943: IFFALSE 55947
// continue ;
55945: GO 54219
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
55947: LD_VAR 0 18
55951: PUSH
55952: LD_VAR 0 4
55956: PUSH
55957: LD_VAR 0 7
55961: ARRAY
55962: PPUSH
55963: CALL_OW 310
55967: NOT
55968: AND
55969: PUSH
55970: LD_VAR 0 14
55974: PUSH
55975: LD_INT 1
55977: ARRAY
55978: PUSH
55979: LD_VAR 0 14
55983: PPUSH
55984: LD_INT 21
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 58
55996: PUSH
55997: EMPTY
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PPUSH
56004: CALL_OW 72
56008: IN
56009: AND
56010: IFFALSE 56046
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
56012: LD_VAR 0 4
56016: PUSH
56017: LD_VAR 0 7
56021: ARRAY
56022: PPUSH
56023: LD_VAR 0 14
56027: PUSH
56028: LD_INT 1
56030: ARRAY
56031: PPUSH
56032: CALL_OW 120
// attacking := true ;
56036: LD_ADDR_VAR 0 29
56040: PUSH
56041: LD_INT 1
56043: ST_TO_ADDR
// continue ;
56044: GO 54219
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
56046: LD_VAR 0 26
56050: PUSH
56051: LD_VAR 0 4
56055: PUSH
56056: LD_VAR 0 7
56060: ARRAY
56061: PPUSH
56062: CALL_OW 257
56066: PUSH
56067: LD_INT 1
56069: EQUAL
56070: AND
56071: PUSH
56072: LD_VAR 0 4
56076: PUSH
56077: LD_VAR 0 7
56081: ARRAY
56082: PPUSH
56083: CALL_OW 256
56087: PUSH
56088: LD_INT 800
56090: LESS
56091: AND
56092: PUSH
56093: LD_VAR 0 4
56097: PUSH
56098: LD_VAR 0 7
56102: ARRAY
56103: PPUSH
56104: CALL_OW 318
56108: NOT
56109: AND
56110: IFFALSE 56127
// ComCrawl ( group [ i ] ) ;
56112: LD_VAR 0 4
56116: PUSH
56117: LD_VAR 0 7
56121: ARRAY
56122: PPUSH
56123: CALL_OW 137
// if f_mines then
56127: LD_VAR 0 21
56131: IFFALSE 56374
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
56133: LD_VAR 0 14
56137: PUSH
56138: LD_INT 1
56140: ARRAY
56141: PPUSH
56142: CALL_OW 247
56146: PUSH
56147: LD_INT 3
56149: EQUAL
56150: PUSH
56151: LD_VAR 0 14
56155: PUSH
56156: LD_INT 1
56158: ARRAY
56159: PUSH
56160: LD_VAR 0 27
56164: IN
56165: NOT
56166: AND
56167: IFFALSE 56374
// begin x := GetX ( tmp [ 1 ] ) ;
56169: LD_ADDR_VAR 0 10
56173: PUSH
56174: LD_VAR 0 14
56178: PUSH
56179: LD_INT 1
56181: ARRAY
56182: PPUSH
56183: CALL_OW 250
56187: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
56188: LD_ADDR_VAR 0 11
56192: PUSH
56193: LD_VAR 0 14
56197: PUSH
56198: LD_INT 1
56200: ARRAY
56201: PPUSH
56202: CALL_OW 251
56206: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
56207: LD_ADDR_VAR 0 12
56211: PUSH
56212: LD_VAR 0 4
56216: PUSH
56217: LD_VAR 0 7
56221: ARRAY
56222: PPUSH
56223: CALL 52102 0 1
56227: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
56228: LD_VAR 0 4
56232: PUSH
56233: LD_VAR 0 7
56237: ARRAY
56238: PPUSH
56239: LD_VAR 0 10
56243: PPUSH
56244: LD_VAR 0 11
56248: PPUSH
56249: LD_VAR 0 14
56253: PUSH
56254: LD_INT 1
56256: ARRAY
56257: PPUSH
56258: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
56262: LD_VAR 0 4
56266: PUSH
56267: LD_VAR 0 7
56271: ARRAY
56272: PPUSH
56273: LD_VAR 0 10
56277: PPUSH
56278: LD_VAR 0 12
56282: PPUSH
56283: LD_INT 7
56285: PPUSH
56286: CALL_OW 272
56290: PPUSH
56291: LD_VAR 0 11
56295: PPUSH
56296: LD_VAR 0 12
56300: PPUSH
56301: LD_INT 7
56303: PPUSH
56304: CALL_OW 273
56308: PPUSH
56309: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
56313: LD_VAR 0 4
56317: PUSH
56318: LD_VAR 0 7
56322: ARRAY
56323: PPUSH
56324: LD_INT 71
56326: PPUSH
56327: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
56331: LD_ADDR_VAR 0 27
56335: PUSH
56336: LD_VAR 0 27
56340: PPUSH
56341: LD_VAR 0 27
56345: PUSH
56346: LD_INT 1
56348: PLUS
56349: PPUSH
56350: LD_VAR 0 14
56354: PUSH
56355: LD_INT 1
56357: ARRAY
56358: PPUSH
56359: CALL_OW 1
56363: ST_TO_ADDR
// attacking := true ;
56364: LD_ADDR_VAR 0 29
56368: PUSH
56369: LD_INT 1
56371: ST_TO_ADDR
// continue ;
56372: GO 54219
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
56374: LD_VAR 0 4
56378: PUSH
56379: LD_VAR 0 7
56383: ARRAY
56384: PPUSH
56385: CALL_OW 257
56389: PUSH
56390: LD_INT 17
56392: EQUAL
56393: PUSH
56394: LD_VAR 0 4
56398: PUSH
56399: LD_VAR 0 7
56403: ARRAY
56404: PPUSH
56405: CALL_OW 110
56409: PUSH
56410: LD_INT 71
56412: EQUAL
56413: NOT
56414: AND
56415: IFFALSE 56561
// begin attacking := false ;
56417: LD_ADDR_VAR 0 29
56421: PUSH
56422: LD_INT 0
56424: ST_TO_ADDR
// k := 5 ;
56425: LD_ADDR_VAR 0 9
56429: PUSH
56430: LD_INT 5
56432: ST_TO_ADDR
// if tmp < k then
56433: LD_VAR 0 14
56437: PUSH
56438: LD_VAR 0 9
56442: LESS
56443: IFFALSE 56455
// k := tmp ;
56445: LD_ADDR_VAR 0 9
56449: PUSH
56450: LD_VAR 0 14
56454: ST_TO_ADDR
// for j = 1 to k do
56455: LD_ADDR_VAR 0 8
56459: PUSH
56460: DOUBLE
56461: LD_INT 1
56463: DEC
56464: ST_TO_ADDR
56465: LD_VAR 0 9
56469: PUSH
56470: FOR_TO
56471: IFFALSE 56559
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
56473: LD_VAR 0 14
56477: PUSH
56478: LD_VAR 0 8
56482: ARRAY
56483: PUSH
56484: LD_VAR 0 14
56488: PPUSH
56489: LD_INT 58
56491: PUSH
56492: EMPTY
56493: LIST
56494: PPUSH
56495: CALL_OW 72
56499: IN
56500: NOT
56501: IFFALSE 56557
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
56503: LD_VAR 0 4
56507: PUSH
56508: LD_VAR 0 7
56512: ARRAY
56513: PPUSH
56514: LD_VAR 0 14
56518: PUSH
56519: LD_VAR 0 8
56523: ARRAY
56524: PPUSH
56525: CALL_OW 115
// attacking := true ;
56529: LD_ADDR_VAR 0 29
56533: PUSH
56534: LD_INT 1
56536: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
56537: LD_VAR 0 4
56541: PUSH
56542: LD_VAR 0 7
56546: ARRAY
56547: PPUSH
56548: LD_INT 71
56550: PPUSH
56551: CALL_OW 109
// continue ;
56555: GO 56470
// end ; end ;
56557: GO 56470
56559: POP
56560: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
56561: LD_VAR 0 4
56565: PUSH
56566: LD_VAR 0 7
56570: ARRAY
56571: PPUSH
56572: CALL_OW 257
56576: PUSH
56577: LD_INT 8
56579: EQUAL
56580: PUSH
56581: LD_VAR 0 4
56585: PUSH
56586: LD_VAR 0 7
56590: ARRAY
56591: PPUSH
56592: CALL_OW 264
56596: PUSH
56597: LD_INT 28
56599: PUSH
56600: LD_INT 45
56602: PUSH
56603: LD_INT 7
56605: PUSH
56606: LD_INT 47
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: IN
56615: OR
56616: IFFALSE 56846
// begin attacking := false ;
56618: LD_ADDR_VAR 0 29
56622: PUSH
56623: LD_INT 0
56625: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
56626: LD_VAR 0 14
56630: PUSH
56631: LD_INT 1
56633: ARRAY
56634: PPUSH
56635: CALL_OW 266
56639: PUSH
56640: LD_INT 32
56642: PUSH
56643: LD_INT 31
56645: PUSH
56646: LD_INT 33
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: LD_INT 5
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: IN
56662: IFFALSE 56846
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
56664: LD_ADDR_VAR 0 9
56668: PUSH
56669: LD_VAR 0 14
56673: PUSH
56674: LD_INT 1
56676: ARRAY
56677: PPUSH
56678: CALL_OW 266
56682: PPUSH
56683: LD_VAR 0 14
56687: PUSH
56688: LD_INT 1
56690: ARRAY
56691: PPUSH
56692: CALL_OW 250
56696: PPUSH
56697: LD_VAR 0 14
56701: PUSH
56702: LD_INT 1
56704: ARRAY
56705: PPUSH
56706: CALL_OW 251
56710: PPUSH
56711: LD_VAR 0 14
56715: PUSH
56716: LD_INT 1
56718: ARRAY
56719: PPUSH
56720: CALL_OW 254
56724: PPUSH
56725: LD_VAR 0 14
56729: PUSH
56730: LD_INT 1
56732: ARRAY
56733: PPUSH
56734: CALL_OW 248
56738: PPUSH
56739: LD_INT 0
56741: PPUSH
56742: CALL 33478 0 6
56746: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
56747: LD_ADDR_VAR 0 8
56751: PUSH
56752: LD_VAR 0 4
56756: PUSH
56757: LD_VAR 0 7
56761: ARRAY
56762: PPUSH
56763: LD_VAR 0 9
56767: PPUSH
56768: CALL 52165 0 2
56772: ST_TO_ADDR
// if j then
56773: LD_VAR 0 8
56777: IFFALSE 56846
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56779: LD_VAR 0 8
56783: PUSH
56784: LD_INT 1
56786: ARRAY
56787: PPUSH
56788: LD_VAR 0 8
56792: PUSH
56793: LD_INT 2
56795: ARRAY
56796: PPUSH
56797: CALL_OW 488
56801: IFFALSE 56846
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
56803: LD_VAR 0 4
56807: PUSH
56808: LD_VAR 0 7
56812: ARRAY
56813: PPUSH
56814: LD_VAR 0 8
56818: PUSH
56819: LD_INT 1
56821: ARRAY
56822: PPUSH
56823: LD_VAR 0 8
56827: PUSH
56828: LD_INT 2
56830: ARRAY
56831: PPUSH
56832: CALL_OW 116
// attacking := true ;
56836: LD_ADDR_VAR 0 29
56840: PUSH
56841: LD_INT 1
56843: ST_TO_ADDR
// continue ;
56844: GO 54219
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
56846: LD_VAR 0 4
56850: PUSH
56851: LD_VAR 0 7
56855: ARRAY
56856: PPUSH
56857: CALL_OW 265
56861: PUSH
56862: LD_INT 11
56864: EQUAL
56865: IFFALSE 57143
// begin k := 10 ;
56867: LD_ADDR_VAR 0 9
56871: PUSH
56872: LD_INT 10
56874: ST_TO_ADDR
// x := 0 ;
56875: LD_ADDR_VAR 0 10
56879: PUSH
56880: LD_INT 0
56882: ST_TO_ADDR
// if tmp < k then
56883: LD_VAR 0 14
56887: PUSH
56888: LD_VAR 0 9
56892: LESS
56893: IFFALSE 56905
// k := tmp ;
56895: LD_ADDR_VAR 0 9
56899: PUSH
56900: LD_VAR 0 14
56904: ST_TO_ADDR
// for j = k downto 1 do
56905: LD_ADDR_VAR 0 8
56909: PUSH
56910: DOUBLE
56911: LD_VAR 0 9
56915: INC
56916: ST_TO_ADDR
56917: LD_INT 1
56919: PUSH
56920: FOR_DOWNTO
56921: IFFALSE 56996
// begin if GetType ( tmp [ j ] ) = unit_human then
56923: LD_VAR 0 14
56927: PUSH
56928: LD_VAR 0 8
56932: ARRAY
56933: PPUSH
56934: CALL_OW 247
56938: PUSH
56939: LD_INT 1
56941: EQUAL
56942: IFFALSE 56994
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
56944: LD_VAR 0 4
56948: PUSH
56949: LD_VAR 0 7
56953: ARRAY
56954: PPUSH
56955: LD_VAR 0 14
56959: PUSH
56960: LD_VAR 0 8
56964: ARRAY
56965: PPUSH
56966: CALL 52436 0 2
// x := tmp [ j ] ;
56970: LD_ADDR_VAR 0 10
56974: PUSH
56975: LD_VAR 0 14
56979: PUSH
56980: LD_VAR 0 8
56984: ARRAY
56985: ST_TO_ADDR
// attacking := true ;
56986: LD_ADDR_VAR 0 29
56990: PUSH
56991: LD_INT 1
56993: ST_TO_ADDR
// end ; end ;
56994: GO 56920
56996: POP
56997: POP
// if not x then
56998: LD_VAR 0 10
57002: NOT
57003: IFFALSE 57143
// begin attacking := true ;
57005: LD_ADDR_VAR 0 29
57009: PUSH
57010: LD_INT 1
57012: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
57013: LD_VAR 0 4
57017: PUSH
57018: LD_VAR 0 7
57022: ARRAY
57023: PPUSH
57024: CALL_OW 250
57028: PPUSH
57029: LD_VAR 0 4
57033: PUSH
57034: LD_VAR 0 7
57038: ARRAY
57039: PPUSH
57040: CALL_OW 251
57044: PPUSH
57045: CALL_OW 546
57049: PUSH
57050: LD_INT 2
57052: ARRAY
57053: PUSH
57054: LD_VAR 0 14
57058: PUSH
57059: LD_INT 1
57061: ARRAY
57062: PPUSH
57063: CALL_OW 250
57067: PPUSH
57068: LD_VAR 0 14
57072: PUSH
57073: LD_INT 1
57075: ARRAY
57076: PPUSH
57077: CALL_OW 251
57081: PPUSH
57082: CALL_OW 546
57086: PUSH
57087: LD_INT 2
57089: ARRAY
57090: EQUAL
57091: IFFALSE 57119
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
57093: LD_VAR 0 4
57097: PUSH
57098: LD_VAR 0 7
57102: ARRAY
57103: PPUSH
57104: LD_VAR 0 14
57108: PUSH
57109: LD_INT 1
57111: ARRAY
57112: PPUSH
57113: CALL 52436 0 2
57117: GO 57143
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57119: LD_VAR 0 4
57123: PUSH
57124: LD_VAR 0 7
57128: ARRAY
57129: PPUSH
57130: LD_VAR 0 14
57134: PUSH
57135: LD_INT 1
57137: ARRAY
57138: PPUSH
57139: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
57143: LD_VAR 0 4
57147: PUSH
57148: LD_VAR 0 7
57152: ARRAY
57153: PPUSH
57154: CALL_OW 264
57158: PUSH
57159: LD_INT 29
57161: EQUAL
57162: IFFALSE 57528
// begin if WantsToAttack ( group [ i ] ) in bombed then
57164: LD_VAR 0 4
57168: PUSH
57169: LD_VAR 0 7
57173: ARRAY
57174: PPUSH
57175: CALL_OW 319
57179: PUSH
57180: LD_VAR 0 28
57184: IN
57185: IFFALSE 57189
// continue ;
57187: GO 54219
// k := 8 ;
57189: LD_ADDR_VAR 0 9
57193: PUSH
57194: LD_INT 8
57196: ST_TO_ADDR
// x := 0 ;
57197: LD_ADDR_VAR 0 10
57201: PUSH
57202: LD_INT 0
57204: ST_TO_ADDR
// if tmp < k then
57205: LD_VAR 0 14
57209: PUSH
57210: LD_VAR 0 9
57214: LESS
57215: IFFALSE 57227
// k := tmp ;
57217: LD_ADDR_VAR 0 9
57221: PUSH
57222: LD_VAR 0 14
57226: ST_TO_ADDR
// for j = 1 to k do
57227: LD_ADDR_VAR 0 8
57231: PUSH
57232: DOUBLE
57233: LD_INT 1
57235: DEC
57236: ST_TO_ADDR
57237: LD_VAR 0 9
57241: PUSH
57242: FOR_TO
57243: IFFALSE 57375
// begin if GetType ( tmp [ j ] ) = unit_building then
57245: LD_VAR 0 14
57249: PUSH
57250: LD_VAR 0 8
57254: ARRAY
57255: PPUSH
57256: CALL_OW 247
57260: PUSH
57261: LD_INT 3
57263: EQUAL
57264: IFFALSE 57373
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
57266: LD_VAR 0 14
57270: PUSH
57271: LD_VAR 0 8
57275: ARRAY
57276: PUSH
57277: LD_VAR 0 28
57281: IN
57282: NOT
57283: PUSH
57284: LD_VAR 0 14
57288: PUSH
57289: LD_VAR 0 8
57293: ARRAY
57294: PPUSH
57295: CALL_OW 313
57299: AND
57300: IFFALSE 57373
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57302: LD_VAR 0 4
57306: PUSH
57307: LD_VAR 0 7
57311: ARRAY
57312: PPUSH
57313: LD_VAR 0 14
57317: PUSH
57318: LD_VAR 0 8
57322: ARRAY
57323: PPUSH
57324: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
57328: LD_ADDR_VAR 0 28
57332: PUSH
57333: LD_VAR 0 28
57337: PPUSH
57338: LD_VAR 0 28
57342: PUSH
57343: LD_INT 1
57345: PLUS
57346: PPUSH
57347: LD_VAR 0 14
57351: PUSH
57352: LD_VAR 0 8
57356: ARRAY
57357: PPUSH
57358: CALL_OW 1
57362: ST_TO_ADDR
// attacking := true ;
57363: LD_ADDR_VAR 0 29
57367: PUSH
57368: LD_INT 1
57370: ST_TO_ADDR
// break ;
57371: GO 57375
// end ; end ;
57373: GO 57242
57375: POP
57376: POP
// if not attacking and f_attack_depot then
57377: LD_VAR 0 29
57381: NOT
57382: PUSH
57383: LD_VAR 0 25
57387: AND
57388: IFFALSE 57483
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57390: LD_ADDR_VAR 0 13
57394: PUSH
57395: LD_VAR 0 14
57399: PPUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 30
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 30
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: PPUSH
57428: CALL_OW 72
57432: ST_TO_ADDR
// if z then
57433: LD_VAR 0 13
57437: IFFALSE 57483
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
57439: LD_VAR 0 4
57443: PUSH
57444: LD_VAR 0 7
57448: ARRAY
57449: PPUSH
57450: LD_VAR 0 13
57454: PPUSH
57455: LD_VAR 0 4
57459: PUSH
57460: LD_VAR 0 7
57464: ARRAY
57465: PPUSH
57466: CALL_OW 74
57470: PPUSH
57471: CALL_OW 115
// attacking := true ;
57475: LD_ADDR_VAR 0 29
57479: PUSH
57480: LD_INT 1
57482: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
57483: LD_VAR 0 4
57487: PUSH
57488: LD_VAR 0 7
57492: ARRAY
57493: PPUSH
57494: CALL_OW 256
57498: PUSH
57499: LD_INT 500
57501: LESS
57502: IFFALSE 57528
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57504: LD_VAR 0 4
57508: PUSH
57509: LD_VAR 0 7
57513: ARRAY
57514: PPUSH
57515: LD_VAR 0 14
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: PPUSH
57524: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
57528: LD_VAR 0 4
57532: PUSH
57533: LD_VAR 0 7
57537: ARRAY
57538: PPUSH
57539: CALL_OW 264
57543: PUSH
57544: LD_INT 49
57546: EQUAL
57547: IFFALSE 57668
// begin if not HasTask ( group [ i ] ) then
57549: LD_VAR 0 4
57553: PUSH
57554: LD_VAR 0 7
57558: ARRAY
57559: PPUSH
57560: CALL_OW 314
57564: NOT
57565: IFFALSE 57668
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
57567: LD_ADDR_VAR 0 9
57571: PUSH
57572: LD_INT 81
57574: PUSH
57575: LD_VAR 0 4
57579: PUSH
57580: LD_VAR 0 7
57584: ARRAY
57585: PPUSH
57586: CALL_OW 255
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PPUSH
57595: CALL_OW 69
57599: PPUSH
57600: LD_VAR 0 4
57604: PUSH
57605: LD_VAR 0 7
57609: ARRAY
57610: PPUSH
57611: CALL_OW 74
57615: ST_TO_ADDR
// if k then
57616: LD_VAR 0 9
57620: IFFALSE 57668
// if GetDistUnits ( group [ i ] , k ) > 10 then
57622: LD_VAR 0 4
57626: PUSH
57627: LD_VAR 0 7
57631: ARRAY
57632: PPUSH
57633: LD_VAR 0 9
57637: PPUSH
57638: CALL_OW 296
57642: PUSH
57643: LD_INT 10
57645: GREATER
57646: IFFALSE 57668
// ComMoveUnit ( group [ i ] , k ) ;
57648: LD_VAR 0 4
57652: PUSH
57653: LD_VAR 0 7
57657: ARRAY
57658: PPUSH
57659: LD_VAR 0 9
57663: PPUSH
57664: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57668: LD_VAR 0 4
57672: PUSH
57673: LD_VAR 0 7
57677: ARRAY
57678: PPUSH
57679: CALL_OW 256
57683: PUSH
57684: LD_INT 250
57686: LESS
57687: PUSH
57688: LD_VAR 0 4
57692: PUSH
57693: LD_VAR 0 7
57697: ARRAY
57698: PUSH
57699: LD_INT 21
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 23
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PPUSH
57723: CALL_OW 69
57727: IN
57728: AND
57729: IFFALSE 57854
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
57731: LD_ADDR_VAR 0 9
57735: PUSH
57736: LD_OWVAR 3
57740: PUSH
57741: LD_VAR 0 4
57745: PUSH
57746: LD_VAR 0 7
57750: ARRAY
57751: DIFF
57752: PPUSH
57753: LD_VAR 0 4
57757: PUSH
57758: LD_VAR 0 7
57762: ARRAY
57763: PPUSH
57764: CALL_OW 74
57768: ST_TO_ADDR
// if not k then
57769: LD_VAR 0 9
57773: NOT
57774: IFFALSE 57778
// continue ;
57776: GO 54219
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
57778: LD_VAR 0 9
57782: PUSH
57783: LD_INT 81
57785: PUSH
57786: LD_VAR 0 4
57790: PUSH
57791: LD_VAR 0 7
57795: ARRAY
57796: PPUSH
57797: CALL_OW 255
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PPUSH
57806: CALL_OW 69
57810: IN
57811: PUSH
57812: LD_VAR 0 9
57816: PPUSH
57817: LD_VAR 0 4
57821: PUSH
57822: LD_VAR 0 7
57826: ARRAY
57827: PPUSH
57828: CALL_OW 296
57832: PUSH
57833: LD_INT 5
57835: LESS
57836: AND
57837: IFFALSE 57854
// ComAutodestruct ( group [ i ] ) ;
57839: LD_VAR 0 4
57843: PUSH
57844: LD_VAR 0 7
57848: ARRAY
57849: PPUSH
57850: CALL 52334 0 1
// end ; if f_attack_depot then
57854: LD_VAR 0 25
57858: IFFALSE 57970
// begin k := 6 ;
57860: LD_ADDR_VAR 0 9
57864: PUSH
57865: LD_INT 6
57867: ST_TO_ADDR
// if tmp < k then
57868: LD_VAR 0 14
57872: PUSH
57873: LD_VAR 0 9
57877: LESS
57878: IFFALSE 57890
// k := tmp ;
57880: LD_ADDR_VAR 0 9
57884: PUSH
57885: LD_VAR 0 14
57889: ST_TO_ADDR
// for j = 1 to k do
57890: LD_ADDR_VAR 0 8
57894: PUSH
57895: DOUBLE
57896: LD_INT 1
57898: DEC
57899: ST_TO_ADDR
57900: LD_VAR 0 9
57904: PUSH
57905: FOR_TO
57906: IFFALSE 57968
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
57908: LD_VAR 0 8
57912: PPUSH
57913: CALL_OW 266
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: IN
57928: IFFALSE 57966
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57930: LD_VAR 0 4
57934: PUSH
57935: LD_VAR 0 7
57939: ARRAY
57940: PPUSH
57941: LD_VAR 0 14
57945: PUSH
57946: LD_VAR 0 8
57950: ARRAY
57951: PPUSH
57952: CALL_OW 115
// attacking := true ;
57956: LD_ADDR_VAR 0 29
57960: PUSH
57961: LD_INT 1
57963: ST_TO_ADDR
// break ;
57964: GO 57968
// end ;
57966: GO 57905
57968: POP
57969: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
57970: LD_VAR 0 4
57974: PUSH
57975: LD_VAR 0 7
57979: ARRAY
57980: PPUSH
57981: CALL_OW 302
57985: PUSH
57986: LD_VAR 0 29
57990: NOT
57991: AND
57992: IFFALSE 58314
// begin if GetTag ( group [ i ] ) = 71 then
57994: LD_VAR 0 4
57998: PUSH
57999: LD_VAR 0 7
58003: ARRAY
58004: PPUSH
58005: CALL_OW 110
58009: PUSH
58010: LD_INT 71
58012: EQUAL
58013: IFFALSE 58054
// begin if HasTask ( group [ i ] ) then
58015: LD_VAR 0 4
58019: PUSH
58020: LD_VAR 0 7
58024: ARRAY
58025: PPUSH
58026: CALL_OW 314
58030: IFFALSE 58036
// continue else
58032: GO 54219
58034: GO 58054
// SetTag ( group [ i ] , 0 ) ;
58036: LD_VAR 0 4
58040: PUSH
58041: LD_VAR 0 7
58045: ARRAY
58046: PPUSH
58047: LD_INT 0
58049: PPUSH
58050: CALL_OW 109
// end ; k := 8 ;
58054: LD_ADDR_VAR 0 9
58058: PUSH
58059: LD_INT 8
58061: ST_TO_ADDR
// x := 0 ;
58062: LD_ADDR_VAR 0 10
58066: PUSH
58067: LD_INT 0
58069: ST_TO_ADDR
// if tmp < k then
58070: LD_VAR 0 14
58074: PUSH
58075: LD_VAR 0 9
58079: LESS
58080: IFFALSE 58092
// k := tmp ;
58082: LD_ADDR_VAR 0 9
58086: PUSH
58087: LD_VAR 0 14
58091: ST_TO_ADDR
// for j = 1 to k do
58092: LD_ADDR_VAR 0 8
58096: PUSH
58097: DOUBLE
58098: LD_INT 1
58100: DEC
58101: ST_TO_ADDR
58102: LD_VAR 0 9
58106: PUSH
58107: FOR_TO
58108: IFFALSE 58206
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
58110: LD_VAR 0 14
58114: PUSH
58115: LD_VAR 0 8
58119: ARRAY
58120: PPUSH
58121: CALL_OW 247
58125: PUSH
58126: LD_INT 1
58128: EQUAL
58129: PUSH
58130: LD_VAR 0 14
58134: PUSH
58135: LD_VAR 0 8
58139: ARRAY
58140: PPUSH
58141: CALL_OW 256
58145: PUSH
58146: LD_INT 250
58148: LESS
58149: PUSH
58150: LD_VAR 0 20
58154: AND
58155: PUSH
58156: LD_VAR 0 20
58160: NOT
58161: PUSH
58162: LD_VAR 0 14
58166: PUSH
58167: LD_VAR 0 8
58171: ARRAY
58172: PPUSH
58173: CALL_OW 256
58177: PUSH
58178: LD_INT 250
58180: GREATEREQUAL
58181: AND
58182: OR
58183: AND
58184: IFFALSE 58204
// begin x := tmp [ j ] ;
58186: LD_ADDR_VAR 0 10
58190: PUSH
58191: LD_VAR 0 14
58195: PUSH
58196: LD_VAR 0 8
58200: ARRAY
58201: ST_TO_ADDR
// break ;
58202: GO 58206
// end ;
58204: GO 58107
58206: POP
58207: POP
// if x then
58208: LD_VAR 0 10
58212: IFFALSE 58236
// ComAttackUnit ( group [ i ] , x ) else
58214: LD_VAR 0 4
58218: PUSH
58219: LD_VAR 0 7
58223: ARRAY
58224: PPUSH
58225: LD_VAR 0 10
58229: PPUSH
58230: CALL_OW 115
58234: GO 58260
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58236: LD_VAR 0 4
58240: PUSH
58241: LD_VAR 0 7
58245: ARRAY
58246: PPUSH
58247: LD_VAR 0 14
58251: PUSH
58252: LD_INT 1
58254: ARRAY
58255: PPUSH
58256: CALL_OW 115
// if not HasTask ( group [ i ] ) then
58260: LD_VAR 0 4
58264: PUSH
58265: LD_VAR 0 7
58269: ARRAY
58270: PPUSH
58271: CALL_OW 314
58275: NOT
58276: IFFALSE 58314
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
58278: LD_VAR 0 4
58282: PUSH
58283: LD_VAR 0 7
58287: ARRAY
58288: PPUSH
58289: LD_VAR 0 14
58293: PPUSH
58294: LD_VAR 0 4
58298: PUSH
58299: LD_VAR 0 7
58303: ARRAY
58304: PPUSH
58305: CALL_OW 74
58309: PPUSH
58310: CALL_OW 115
// end ; end ; end ;
58314: GO 54219
58316: POP
58317: POP
// wait ( 0 0$1 ) ;
58318: LD_INT 35
58320: PPUSH
58321: CALL_OW 67
// until group = [ ] ;
58325: LD_VAR 0 4
58329: PUSH
58330: EMPTY
58331: EQUAL
58332: IFFALSE 54204
// end ;
58334: LD_VAR 0 2
58338: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58339: LD_INT 0
58341: PPUSH
58342: PPUSH
58343: PPUSH
58344: PPUSH
// if not base_units then
58345: LD_VAR 0 1
58349: NOT
58350: IFFALSE 58354
// exit ;
58352: GO 58441
// result := false ;
58354: LD_ADDR_VAR 0 2
58358: PUSH
58359: LD_INT 0
58361: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58362: LD_ADDR_VAR 0 5
58366: PUSH
58367: LD_VAR 0 1
58371: PPUSH
58372: LD_INT 21
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PPUSH
58382: CALL_OW 72
58386: ST_TO_ADDR
// if not tmp then
58387: LD_VAR 0 5
58391: NOT
58392: IFFALSE 58396
// exit ;
58394: GO 58441
// for i in tmp do
58396: LD_ADDR_VAR 0 3
58400: PUSH
58401: LD_VAR 0 5
58405: PUSH
58406: FOR_IN
58407: IFFALSE 58439
// begin result := EnemyInRange ( i , 22 ) ;
58409: LD_ADDR_VAR 0 2
58413: PUSH
58414: LD_VAR 0 3
58418: PPUSH
58419: LD_INT 22
58421: PPUSH
58422: CALL 52017 0 2
58426: ST_TO_ADDR
// if result then
58427: LD_VAR 0 2
58431: IFFALSE 58437
// exit ;
58433: POP
58434: POP
58435: GO 58441
// end ;
58437: GO 58406
58439: POP
58440: POP
// end ;
58441: LD_VAR 0 2
58445: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58446: LD_INT 0
58448: PPUSH
58449: PPUSH
// if not units then
58450: LD_VAR 0 1
58454: NOT
58455: IFFALSE 58459
// exit ;
58457: GO 58529
// result := [ ] ;
58459: LD_ADDR_VAR 0 3
58463: PUSH
58464: EMPTY
58465: ST_TO_ADDR
// for i in units do
58466: LD_ADDR_VAR 0 4
58470: PUSH
58471: LD_VAR 0 1
58475: PUSH
58476: FOR_IN
58477: IFFALSE 58527
// if GetTag ( i ) = tag then
58479: LD_VAR 0 4
58483: PPUSH
58484: CALL_OW 110
58488: PUSH
58489: LD_VAR 0 2
58493: EQUAL
58494: IFFALSE 58525
// result := Insert ( result , result + 1 , i ) ;
58496: LD_ADDR_VAR 0 3
58500: PUSH
58501: LD_VAR 0 3
58505: PPUSH
58506: LD_VAR 0 3
58510: PUSH
58511: LD_INT 1
58513: PLUS
58514: PPUSH
58515: LD_VAR 0 4
58519: PPUSH
58520: CALL_OW 2
58524: ST_TO_ADDR
58525: GO 58476
58527: POP
58528: POP
// end ;
58529: LD_VAR 0 3
58533: RET
// export function IsDriver ( un ) ; begin
58534: LD_INT 0
58536: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58537: LD_ADDR_VAR 0 2
58541: PUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_INT 55
58549: PUSH
58550: EMPTY
58551: LIST
58552: PPUSH
58553: CALL_OW 69
58557: IN
58558: ST_TO_ADDR
// end ;
58559: LD_VAR 0 2
58563: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58564: LD_INT 0
58566: PPUSH
58567: PPUSH
// list := [ ] ;
58568: LD_ADDR_VAR 0 5
58572: PUSH
58573: EMPTY
58574: ST_TO_ADDR
// case d of 0 :
58575: LD_VAR 0 3
58579: PUSH
58580: LD_INT 0
58582: DOUBLE
58583: EQUAL
58584: IFTRUE 58588
58586: GO 58721
58588: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58589: LD_ADDR_VAR 0 5
58593: PUSH
58594: LD_VAR 0 1
58598: PUSH
58599: LD_INT 4
58601: MINUS
58602: PUSH
58603: LD_VAR 0 2
58607: PUSH
58608: LD_INT 4
58610: MINUS
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: PUSH
58620: LD_VAR 0 1
58624: PUSH
58625: LD_INT 3
58627: MINUS
58628: PUSH
58629: LD_VAR 0 2
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: PUSH
58642: LD_VAR 0 1
58646: PUSH
58647: LD_INT 4
58649: PLUS
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: LIST
58663: PUSH
58664: LD_VAR 0 1
58668: PUSH
58669: LD_INT 3
58671: PLUS
58672: PUSH
58673: LD_VAR 0 2
58677: PUSH
58678: LD_INT 3
58680: PLUS
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: PUSH
58690: LD_VAR 0 1
58694: PUSH
58695: LD_VAR 0 2
58699: PUSH
58700: LD_INT 4
58702: PLUS
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// end ; 1 :
58719: GO 59419
58721: LD_INT 1
58723: DOUBLE
58724: EQUAL
58725: IFTRUE 58729
58727: GO 58862
58729: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58730: LD_ADDR_VAR 0 5
58734: PUSH
58735: LD_VAR 0 1
58739: PUSH
58740: LD_VAR 0 2
58744: PUSH
58745: LD_INT 4
58747: MINUS
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: PUSH
58757: LD_VAR 0 1
58761: PUSH
58762: LD_INT 3
58764: MINUS
58765: PUSH
58766: LD_VAR 0 2
58770: PUSH
58771: LD_INT 3
58773: MINUS
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_VAR 0 1
58787: PUSH
58788: LD_INT 4
58790: MINUS
58791: PUSH
58792: LD_VAR 0 2
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: PUSH
58805: LD_VAR 0 1
58809: PUSH
58810: LD_VAR 0 2
58814: PUSH
58815: LD_INT 3
58817: PLUS
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: LD_VAR 0 1
58831: PUSH
58832: LD_INT 4
58834: PLUS
58835: PUSH
58836: LD_VAR 0 2
58840: PUSH
58841: LD_INT 4
58843: PLUS
58844: PUSH
58845: LD_INT 5
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: ST_TO_ADDR
// end ; 2 :
58860: GO 59419
58862: LD_INT 2
58864: DOUBLE
58865: EQUAL
58866: IFTRUE 58870
58868: GO 58999
58870: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58871: LD_ADDR_VAR 0 5
58875: PUSH
58876: LD_VAR 0 1
58880: PUSH
58881: LD_VAR 0 2
58885: PUSH
58886: LD_INT 3
58888: MINUS
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: PUSH
58898: LD_VAR 0 1
58902: PUSH
58903: LD_INT 4
58905: PLUS
58906: PUSH
58907: LD_VAR 0 2
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: LD_VAR 0 1
58924: PUSH
58925: LD_VAR 0 2
58929: PUSH
58930: LD_INT 4
58932: PLUS
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: PUSH
58942: LD_VAR 0 1
58946: PUSH
58947: LD_INT 3
58949: MINUS
58950: PUSH
58951: LD_VAR 0 2
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: PUSH
58964: LD_VAR 0 1
58968: PUSH
58969: LD_INT 4
58971: MINUS
58972: PUSH
58973: LD_VAR 0 2
58977: PUSH
58978: LD_INT 4
58980: MINUS
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// end ; 3 :
58997: GO 59419
58999: LD_INT 3
59001: DOUBLE
59002: EQUAL
59003: IFTRUE 59007
59005: GO 59140
59007: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59008: LD_ADDR_VAR 0 5
59012: PUSH
59013: LD_VAR 0 1
59017: PUSH
59018: LD_INT 3
59020: PLUS
59021: PUSH
59022: LD_VAR 0 2
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: PUSH
59035: LD_VAR 0 1
59039: PUSH
59040: LD_INT 4
59042: PLUS
59043: PUSH
59044: LD_VAR 0 2
59048: PUSH
59049: LD_INT 4
59051: PLUS
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: PUSH
59061: LD_VAR 0 1
59065: PUSH
59066: LD_INT 4
59068: MINUS
59069: PUSH
59070: LD_VAR 0 2
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: PUSH
59083: LD_VAR 0 1
59087: PUSH
59088: LD_VAR 0 2
59092: PUSH
59093: LD_INT 4
59095: MINUS
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: PUSH
59105: LD_VAR 0 1
59109: PUSH
59110: LD_INT 3
59112: MINUS
59113: PUSH
59114: LD_VAR 0 2
59118: PUSH
59119: LD_INT 3
59121: MINUS
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// end ; 4 :
59138: GO 59419
59140: LD_INT 4
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59148
59146: GO 59281
59148: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59149: LD_ADDR_VAR 0 5
59153: PUSH
59154: LD_VAR 0 1
59158: PUSH
59159: LD_VAR 0 2
59163: PUSH
59164: LD_INT 4
59166: PLUS
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: PUSH
59176: LD_VAR 0 1
59180: PUSH
59181: LD_INT 3
59183: PLUS
59184: PUSH
59185: LD_VAR 0 2
59189: PUSH
59190: LD_INT 3
59192: PLUS
59193: PUSH
59194: LD_INT 5
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: LD_VAR 0 1
59206: PUSH
59207: LD_INT 4
59209: PLUS
59210: PUSH
59211: LD_VAR 0 2
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: PUSH
59224: LD_VAR 0 1
59228: PUSH
59229: LD_VAR 0 2
59233: PUSH
59234: LD_INT 3
59236: MINUS
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: PUSH
59246: LD_VAR 0 1
59250: PUSH
59251: LD_INT 4
59253: MINUS
59254: PUSH
59255: LD_VAR 0 2
59259: PUSH
59260: LD_INT 4
59262: MINUS
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// end ; 5 :
59279: GO 59419
59281: LD_INT 5
59283: DOUBLE
59284: EQUAL
59285: IFTRUE 59289
59287: GO 59418
59289: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59290: LD_ADDR_VAR 0 5
59294: PUSH
59295: LD_VAR 0 1
59299: PUSH
59300: LD_INT 4
59302: MINUS
59303: PUSH
59304: LD_VAR 0 2
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: PUSH
59317: LD_VAR 0 1
59321: PUSH
59322: LD_VAR 0 2
59326: PUSH
59327: LD_INT 4
59329: MINUS
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: PUSH
59339: LD_VAR 0 1
59343: PUSH
59344: LD_INT 4
59346: PLUS
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 4
59355: PLUS
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: PUSH
59365: LD_VAR 0 1
59369: PUSH
59370: LD_INT 3
59372: PLUS
59373: PUSH
59374: LD_VAR 0 2
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: PUSH
59387: LD_VAR 0 1
59391: PUSH
59392: LD_VAR 0 2
59396: PUSH
59397: LD_INT 3
59399: PLUS
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: ST_TO_ADDR
// end ; end ;
59416: GO 59419
59418: POP
// result := list ;
59419: LD_ADDR_VAR 0 4
59423: PUSH
59424: LD_VAR 0 5
59428: ST_TO_ADDR
// end ;
59429: LD_VAR 0 4
59433: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59439: LD_VAR 0 1
59443: NOT
59444: PUSH
59445: LD_VAR 0 2
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: IN
59468: NOT
59469: OR
59470: IFFALSE 59474
// exit ;
59472: GO 59566
// tmp := [ ] ;
59474: LD_ADDR_VAR 0 5
59478: PUSH
59479: EMPTY
59480: ST_TO_ADDR
// for i in units do
59481: LD_ADDR_VAR 0 4
59485: PUSH
59486: LD_VAR 0 1
59490: PUSH
59491: FOR_IN
59492: IFFALSE 59535
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59494: LD_ADDR_VAR 0 5
59498: PUSH
59499: LD_VAR 0 5
59503: PPUSH
59504: LD_VAR 0 5
59508: PUSH
59509: LD_INT 1
59511: PLUS
59512: PPUSH
59513: LD_VAR 0 4
59517: PPUSH
59518: LD_VAR 0 2
59522: PPUSH
59523: CALL_OW 259
59527: PPUSH
59528: CALL_OW 2
59532: ST_TO_ADDR
59533: GO 59491
59535: POP
59536: POP
// if not tmp then
59537: LD_VAR 0 5
59541: NOT
59542: IFFALSE 59546
// exit ;
59544: GO 59566
// result := SortListByListDesc ( units , tmp ) ;
59546: LD_ADDR_VAR 0 3
59550: PUSH
59551: LD_VAR 0 1
59555: PPUSH
59556: LD_VAR 0 5
59560: PPUSH
59561: CALL_OW 77
59565: ST_TO_ADDR
// end ;
59566: LD_VAR 0 3
59570: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59571: LD_INT 0
59573: PPUSH
59574: PPUSH
59575: PPUSH
// x := GetX ( building ) ;
59576: LD_ADDR_VAR 0 4
59580: PUSH
59581: LD_VAR 0 2
59585: PPUSH
59586: CALL_OW 250
59590: ST_TO_ADDR
// y := GetY ( building ) ;
59591: LD_ADDR_VAR 0 5
59595: PUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: CALL_OW 251
59605: ST_TO_ADDR
// if GetTaskList ( unit ) then
59606: LD_VAR 0 1
59610: PPUSH
59611: CALL_OW 437
59615: IFFALSE 59710
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59617: LD_STRING e
59619: PUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL_OW 437
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: EQUAL
59638: PUSH
59639: LD_VAR 0 4
59643: PUSH
59644: LD_VAR 0 1
59648: PPUSH
59649: CALL_OW 437
59653: PUSH
59654: LD_INT 1
59656: ARRAY
59657: PUSH
59658: LD_INT 2
59660: ARRAY
59661: EQUAL
59662: AND
59663: PUSH
59664: LD_VAR 0 5
59668: PUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: CALL_OW 437
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: LD_INT 3
59685: ARRAY
59686: EQUAL
59687: AND
59688: IFFALSE 59700
// result := true else
59690: LD_ADDR_VAR 0 3
59694: PUSH
59695: LD_INT 1
59697: ST_TO_ADDR
59698: GO 59708
// result := false ;
59700: LD_ADDR_VAR 0 3
59704: PUSH
59705: LD_INT 0
59707: ST_TO_ADDR
// end else
59708: GO 59718
// result := false ;
59710: LD_ADDR_VAR 0 3
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// end ;
59718: LD_VAR 0 3
59722: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59723: LD_INT 0
59725: PPUSH
59726: PPUSH
59727: PPUSH
59728: PPUSH
// if not unit or not area then
59729: LD_VAR 0 1
59733: NOT
59734: PUSH
59735: LD_VAR 0 2
59739: NOT
59740: OR
59741: IFFALSE 59745
// exit ;
59743: GO 59910
// tmp := AreaToList ( area , i ) ;
59745: LD_ADDR_VAR 0 6
59749: PUSH
59750: LD_VAR 0 2
59754: PPUSH
59755: LD_VAR 0 5
59759: PPUSH
59760: CALL_OW 517
59764: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59765: LD_ADDR_VAR 0 5
59769: PUSH
59770: DOUBLE
59771: LD_INT 1
59773: DEC
59774: ST_TO_ADDR
59775: LD_VAR 0 6
59779: PUSH
59780: LD_INT 1
59782: ARRAY
59783: PUSH
59784: FOR_TO
59785: IFFALSE 59900
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59787: LD_ADDR_VAR 0 7
59791: PUSH
59792: LD_VAR 0 6
59796: PUSH
59797: LD_INT 1
59799: ARRAY
59800: PUSH
59801: LD_VAR 0 5
59805: ARRAY
59806: PUSH
59807: LD_VAR 0 6
59811: PUSH
59812: LD_INT 2
59814: ARRAY
59815: PUSH
59816: LD_VAR 0 5
59820: ARRAY
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59826: LD_VAR 0 7
59830: PUSH
59831: LD_INT 1
59833: ARRAY
59834: PPUSH
59835: LD_VAR 0 7
59839: PUSH
59840: LD_INT 2
59842: ARRAY
59843: PPUSH
59844: CALL_OW 428
59848: PUSH
59849: LD_INT 0
59851: EQUAL
59852: IFFALSE 59898
// begin result := true ;
59854: LD_ADDR_VAR 0 4
59858: PUSH
59859: LD_INT 1
59861: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59862: LD_VAR 0 1
59866: PPUSH
59867: LD_VAR 0 7
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PPUSH
59876: LD_VAR 0 7
59880: PUSH
59881: LD_INT 2
59883: ARRAY
59884: PPUSH
59885: LD_VAR 0 3
59889: PPUSH
59890: CALL_OW 48
// exit ;
59894: POP
59895: POP
59896: GO 59910
// end ; end ;
59898: GO 59784
59900: POP
59901: POP
// result := false ;
59902: LD_ADDR_VAR 0 4
59906: PUSH
59907: LD_INT 0
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 4
59914: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59915: LD_INT 0
59917: PPUSH
59918: PPUSH
59919: PPUSH
// if not side or side > 8 then
59920: LD_VAR 0 1
59924: NOT
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: LD_INT 8
59933: GREATER
59934: OR
59935: IFFALSE 59939
// exit ;
59937: GO 60126
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59939: LD_ADDR_VAR 0 4
59943: PUSH
59944: LD_INT 22
59946: PUSH
59947: LD_VAR 0 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 21
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PPUSH
59970: CALL_OW 69
59974: ST_TO_ADDR
// if not tmp then
59975: LD_VAR 0 4
59979: NOT
59980: IFFALSE 59984
// exit ;
59982: GO 60126
// enable_addtolog := true ;
59984: LD_ADDR_OWVAR 81
59988: PUSH
59989: LD_INT 1
59991: ST_TO_ADDR
// AddToLog ( [ ) ;
59992: LD_STRING [
59994: PPUSH
59995: CALL_OW 561
// for i in tmp do
59999: LD_ADDR_VAR 0 3
60003: PUSH
60004: LD_VAR 0 4
60008: PUSH
60009: FOR_IN
60010: IFFALSE 60117
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60012: LD_STRING [
60014: PUSH
60015: LD_VAR 0 3
60019: PPUSH
60020: CALL_OW 266
60024: STR
60025: PUSH
60026: LD_STRING , 
60028: STR
60029: PUSH
60030: LD_VAR 0 3
60034: PPUSH
60035: CALL_OW 250
60039: STR
60040: PUSH
60041: LD_STRING , 
60043: STR
60044: PUSH
60045: LD_VAR 0 3
60049: PPUSH
60050: CALL_OW 251
60054: STR
60055: PUSH
60056: LD_STRING , 
60058: STR
60059: PUSH
60060: LD_VAR 0 3
60064: PPUSH
60065: CALL_OW 254
60069: STR
60070: PUSH
60071: LD_STRING , 
60073: STR
60074: PUSH
60075: LD_VAR 0 3
60079: PPUSH
60080: LD_INT 1
60082: PPUSH
60083: CALL_OW 268
60087: STR
60088: PUSH
60089: LD_STRING , 
60091: STR
60092: PUSH
60093: LD_VAR 0 3
60097: PPUSH
60098: LD_INT 2
60100: PPUSH
60101: CALL_OW 268
60105: STR
60106: PUSH
60107: LD_STRING ],
60109: STR
60110: PPUSH
60111: CALL_OW 561
// end ;
60115: GO 60009
60117: POP
60118: POP
// AddToLog ( ]; ) ;
60119: LD_STRING ];
60121: PPUSH
60122: CALL_OW 561
// end ;
60126: LD_VAR 0 2
60130: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60131: LD_INT 0
60133: PPUSH
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
// if not area or not rate or not max then
60138: LD_VAR 0 1
60142: NOT
60143: PUSH
60144: LD_VAR 0 2
60148: NOT
60149: OR
60150: PUSH
60151: LD_VAR 0 4
60155: NOT
60156: OR
60157: IFFALSE 60161
// exit ;
60159: GO 60353
// while 1 do
60161: LD_INT 1
60163: IFFALSE 60353
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60165: LD_ADDR_VAR 0 9
60169: PUSH
60170: LD_VAR 0 1
60174: PPUSH
60175: LD_INT 1
60177: PPUSH
60178: CALL_OW 287
60182: PUSH
60183: LD_INT 10
60185: MUL
60186: ST_TO_ADDR
// r := rate / 10 ;
60187: LD_ADDR_VAR 0 7
60191: PUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_INT 10
60199: DIVREAL
60200: ST_TO_ADDR
// time := 1 1$00 ;
60201: LD_ADDR_VAR 0 8
60205: PUSH
60206: LD_INT 2100
60208: ST_TO_ADDR
// if amount < min then
60209: LD_VAR 0 9
60213: PUSH
60214: LD_VAR 0 3
60218: LESS
60219: IFFALSE 60237
// r := r * 2 else
60221: LD_ADDR_VAR 0 7
60225: PUSH
60226: LD_VAR 0 7
60230: PUSH
60231: LD_INT 2
60233: MUL
60234: ST_TO_ADDR
60235: GO 60263
// if amount > max then
60237: LD_VAR 0 9
60241: PUSH
60242: LD_VAR 0 4
60246: GREATER
60247: IFFALSE 60263
// r := r / 2 ;
60249: LD_ADDR_VAR 0 7
60253: PUSH
60254: LD_VAR 0 7
60258: PUSH
60259: LD_INT 2
60261: DIVREAL
60262: ST_TO_ADDR
// time := time / r ;
60263: LD_ADDR_VAR 0 8
60267: PUSH
60268: LD_VAR 0 8
60272: PUSH
60273: LD_VAR 0 7
60277: DIVREAL
60278: ST_TO_ADDR
// if time < 0 then
60279: LD_VAR 0 8
60283: PUSH
60284: LD_INT 0
60286: LESS
60287: IFFALSE 60304
// time := time * - 1 ;
60289: LD_ADDR_VAR 0 8
60293: PUSH
60294: LD_VAR 0 8
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: MUL
60303: ST_TO_ADDR
// wait ( time ) ;
60304: LD_VAR 0 8
60308: PPUSH
60309: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60313: LD_INT 35
60315: PPUSH
60316: LD_INT 875
60318: PPUSH
60319: CALL_OW 12
60323: PPUSH
60324: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60328: LD_INT 1
60330: PPUSH
60331: LD_INT 5
60333: PPUSH
60334: CALL_OW 12
60338: PPUSH
60339: LD_VAR 0 1
60343: PPUSH
60344: LD_INT 1
60346: PPUSH
60347: CALL_OW 55
// end ;
60351: GO 60161
// end ;
60353: LD_VAR 0 5
60357: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60358: LD_INT 0
60360: PPUSH
60361: PPUSH
60362: PPUSH
60363: PPUSH
60364: PPUSH
60365: PPUSH
60366: PPUSH
60367: PPUSH
// if not turrets or not factories then
60368: LD_VAR 0 1
60372: NOT
60373: PUSH
60374: LD_VAR 0 2
60378: NOT
60379: OR
60380: IFFALSE 60384
// exit ;
60382: GO 60691
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60384: LD_ADDR_VAR 0 10
60388: PUSH
60389: LD_INT 5
60391: PUSH
60392: LD_INT 6
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 5
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 24
60426: PUSH
60427: LD_INT 25
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 23
60436: PUSH
60437: LD_INT 27
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 42
60450: PUSH
60451: LD_INT 43
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 44
60460: PUSH
60461: LD_INT 46
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 45
60470: PUSH
60471: LD_INT 47
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// result := [ ] ;
60488: LD_ADDR_VAR 0 3
60492: PUSH
60493: EMPTY
60494: ST_TO_ADDR
// for i in turrets do
60495: LD_ADDR_VAR 0 4
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: FOR_IN
60506: IFFALSE 60689
// begin nat := GetNation ( i ) ;
60508: LD_ADDR_VAR 0 7
60512: PUSH
60513: LD_VAR 0 4
60517: PPUSH
60518: CALL_OW 248
60522: ST_TO_ADDR
// weapon := 0 ;
60523: LD_ADDR_VAR 0 8
60527: PUSH
60528: LD_INT 0
60530: ST_TO_ADDR
// if not nat then
60531: LD_VAR 0 7
60535: NOT
60536: IFFALSE 60540
// continue ;
60538: GO 60505
// for j in list [ nat ] do
60540: LD_ADDR_VAR 0 5
60544: PUSH
60545: LD_VAR 0 10
60549: PUSH
60550: LD_VAR 0 7
60554: ARRAY
60555: PUSH
60556: FOR_IN
60557: IFFALSE 60598
// if GetBWeapon ( i ) = j [ 1 ] then
60559: LD_VAR 0 4
60563: PPUSH
60564: CALL_OW 269
60568: PUSH
60569: LD_VAR 0 5
60573: PUSH
60574: LD_INT 1
60576: ARRAY
60577: EQUAL
60578: IFFALSE 60596
// begin weapon := j [ 2 ] ;
60580: LD_ADDR_VAR 0 8
60584: PUSH
60585: LD_VAR 0 5
60589: PUSH
60590: LD_INT 2
60592: ARRAY
60593: ST_TO_ADDR
// break ;
60594: GO 60598
// end ;
60596: GO 60556
60598: POP
60599: POP
// if not weapon then
60600: LD_VAR 0 8
60604: NOT
60605: IFFALSE 60609
// continue ;
60607: GO 60505
// for k in factories do
60609: LD_ADDR_VAR 0 6
60613: PUSH
60614: LD_VAR 0 2
60618: PUSH
60619: FOR_IN
60620: IFFALSE 60685
// begin weapons := AvailableWeaponList ( k ) ;
60622: LD_ADDR_VAR 0 9
60626: PUSH
60627: LD_VAR 0 6
60631: PPUSH
60632: CALL_OW 478
60636: ST_TO_ADDR
// if not weapons then
60637: LD_VAR 0 9
60641: NOT
60642: IFFALSE 60646
// continue ;
60644: GO 60619
// if weapon in weapons then
60646: LD_VAR 0 8
60650: PUSH
60651: LD_VAR 0 9
60655: IN
60656: IFFALSE 60683
// begin result := [ i , weapon ] ;
60658: LD_ADDR_VAR 0 3
60662: PUSH
60663: LD_VAR 0 4
60667: PUSH
60668: LD_VAR 0 8
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: ST_TO_ADDR
// exit ;
60677: POP
60678: POP
60679: POP
60680: POP
60681: GO 60691
// end ; end ;
60683: GO 60619
60685: POP
60686: POP
// end ;
60687: GO 60505
60689: POP
60690: POP
// end ; end_of_file
60691: LD_VAR 0 3
60695: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
60696: LD_INT 0
60698: PPUSH
60699: PPUSH
// skirmish := false ;
60700: LD_ADDR_EXP 68
60704: PUSH
60705: LD_INT 0
60707: ST_TO_ADDR
// mc_bases := [ ] ;
60708: LD_ADDR_EXP 69
60712: PUSH
60713: EMPTY
60714: ST_TO_ADDR
// mc_sides := [ ] ;
60715: LD_ADDR_EXP 95
60719: PUSH
60720: EMPTY
60721: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
60722: LD_ADDR_EXP 70
60726: PUSH
60727: EMPTY
60728: ST_TO_ADDR
// mc_building_repairs := [ ] ;
60729: LD_ADDR_EXP 71
60733: PUSH
60734: EMPTY
60735: ST_TO_ADDR
// mc_need_heal := [ ] ;
60736: LD_ADDR_EXP 72
60740: PUSH
60741: EMPTY
60742: ST_TO_ADDR
// mc_healers := [ ] ;
60743: LD_ADDR_EXP 73
60747: PUSH
60748: EMPTY
60749: ST_TO_ADDR
// mc_build_list := [ ] ;
60750: LD_ADDR_EXP 74
60754: PUSH
60755: EMPTY
60756: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
60757: LD_ADDR_EXP 101
60761: PUSH
60762: EMPTY
60763: ST_TO_ADDR
// mc_builders := [ ] ;
60764: LD_ADDR_EXP 75
60768: PUSH
60769: EMPTY
60770: ST_TO_ADDR
// mc_construct_list := [ ] ;
60771: LD_ADDR_EXP 76
60775: PUSH
60776: EMPTY
60777: ST_TO_ADDR
// mc_turret_list := [ ] ;
60778: LD_ADDR_EXP 77
60782: PUSH
60783: EMPTY
60784: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
60785: LD_ADDR_EXP 78
60789: PUSH
60790: EMPTY
60791: ST_TO_ADDR
// mc_miners := [ ] ;
60792: LD_ADDR_EXP 83
60796: PUSH
60797: EMPTY
60798: ST_TO_ADDR
// mc_mines := [ ] ;
60799: LD_ADDR_EXP 82
60803: PUSH
60804: EMPTY
60805: ST_TO_ADDR
// mc_minefields := [ ] ;
60806: LD_ADDR_EXP 84
60810: PUSH
60811: EMPTY
60812: ST_TO_ADDR
// mc_crates := [ ] ;
60813: LD_ADDR_EXP 85
60817: PUSH
60818: EMPTY
60819: ST_TO_ADDR
// mc_crates_collector := [ ] ;
60820: LD_ADDR_EXP 86
60824: PUSH
60825: EMPTY
60826: ST_TO_ADDR
// mc_crates_area := [ ] ;
60827: LD_ADDR_EXP 87
60831: PUSH
60832: EMPTY
60833: ST_TO_ADDR
// mc_vehicles := [ ] ;
60834: LD_ADDR_EXP 88
60838: PUSH
60839: EMPTY
60840: ST_TO_ADDR
// mc_attack := [ ] ;
60841: LD_ADDR_EXP 89
60845: PUSH
60846: EMPTY
60847: ST_TO_ADDR
// mc_produce := [ ] ;
60848: LD_ADDR_EXP 90
60852: PUSH
60853: EMPTY
60854: ST_TO_ADDR
// mc_defender := [ ] ;
60855: LD_ADDR_EXP 91
60859: PUSH
60860: EMPTY
60861: ST_TO_ADDR
// mc_parking := [ ] ;
60862: LD_ADDR_EXP 93
60866: PUSH
60867: EMPTY
60868: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
60869: LD_ADDR_EXP 79
60873: PUSH
60874: EMPTY
60875: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
60876: LD_ADDR_EXP 81
60880: PUSH
60881: EMPTY
60882: ST_TO_ADDR
// mc_scan := [ ] ;
60883: LD_ADDR_EXP 92
60887: PUSH
60888: EMPTY
60889: ST_TO_ADDR
// mc_scan_area := [ ] ;
60890: LD_ADDR_EXP 94
60894: PUSH
60895: EMPTY
60896: ST_TO_ADDR
// mc_tech := [ ] ;
60897: LD_ADDR_EXP 96
60901: PUSH
60902: EMPTY
60903: ST_TO_ADDR
// end ;
60904: LD_VAR 0 1
60908: RET
// export function MC_Kill ( base ) ; begin
60909: LD_INT 0
60911: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
60912: LD_ADDR_EXP 69
60916: PUSH
60917: LD_EXP 69
60921: PPUSH
60922: LD_VAR 0 1
60926: PPUSH
60927: EMPTY
60928: PPUSH
60929: CALL_OW 1
60933: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
60934: LD_ADDR_EXP 70
60938: PUSH
60939: LD_EXP 70
60943: PPUSH
60944: LD_VAR 0 1
60948: PPUSH
60949: EMPTY
60950: PPUSH
60951: CALL_OW 1
60955: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60956: LD_ADDR_EXP 71
60960: PUSH
60961: LD_EXP 71
60965: PPUSH
60966: LD_VAR 0 1
60970: PPUSH
60971: EMPTY
60972: PPUSH
60973: CALL_OW 1
60977: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60978: LD_ADDR_EXP 72
60982: PUSH
60983: LD_EXP 72
60987: PPUSH
60988: LD_VAR 0 1
60992: PPUSH
60993: EMPTY
60994: PPUSH
60995: CALL_OW 1
60999: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
61000: LD_ADDR_EXP 73
61004: PUSH
61005: LD_EXP 73
61009: PPUSH
61010: LD_VAR 0 1
61014: PPUSH
61015: EMPTY
61016: PPUSH
61017: CALL_OW 1
61021: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
61022: LD_ADDR_EXP 74
61026: PUSH
61027: LD_EXP 74
61031: PPUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: EMPTY
61038: PPUSH
61039: CALL_OW 1
61043: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
61044: LD_ADDR_EXP 75
61048: PUSH
61049: LD_EXP 75
61053: PPUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: EMPTY
61060: PPUSH
61061: CALL_OW 1
61065: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
61066: LD_ADDR_EXP 76
61070: PUSH
61071: LD_EXP 76
61075: PPUSH
61076: LD_VAR 0 1
61080: PPUSH
61081: EMPTY
61082: PPUSH
61083: CALL_OW 1
61087: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
61088: LD_ADDR_EXP 77
61092: PUSH
61093: LD_EXP 77
61097: PPUSH
61098: LD_VAR 0 1
61102: PPUSH
61103: EMPTY
61104: PPUSH
61105: CALL_OW 1
61109: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
61110: LD_ADDR_EXP 78
61114: PUSH
61115: LD_EXP 78
61119: PPUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: EMPTY
61126: PPUSH
61127: CALL_OW 1
61131: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
61132: LD_ADDR_EXP 79
61136: PUSH
61137: LD_EXP 79
61141: PPUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: EMPTY
61148: PPUSH
61149: CALL_OW 1
61153: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
61154: LD_ADDR_EXP 80
61158: PUSH
61159: LD_EXP 80
61163: PPUSH
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_INT 0
61171: PPUSH
61172: CALL_OW 1
61176: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
61177: LD_ADDR_EXP 81
61181: PUSH
61182: LD_EXP 81
61186: PPUSH
61187: LD_VAR 0 1
61191: PPUSH
61192: EMPTY
61193: PPUSH
61194: CALL_OW 1
61198: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
61199: LD_ADDR_EXP 82
61203: PUSH
61204: LD_EXP 82
61208: PPUSH
61209: LD_VAR 0 1
61213: PPUSH
61214: EMPTY
61215: PPUSH
61216: CALL_OW 1
61220: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
61221: LD_ADDR_EXP 83
61225: PUSH
61226: LD_EXP 83
61230: PPUSH
61231: LD_VAR 0 1
61235: PPUSH
61236: EMPTY
61237: PPUSH
61238: CALL_OW 1
61242: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
61243: LD_ADDR_EXP 84
61247: PUSH
61248: LD_EXP 84
61252: PPUSH
61253: LD_VAR 0 1
61257: PPUSH
61258: EMPTY
61259: PPUSH
61260: CALL_OW 1
61264: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
61265: LD_ADDR_EXP 85
61269: PUSH
61270: LD_EXP 85
61274: PPUSH
61275: LD_VAR 0 1
61279: PPUSH
61280: EMPTY
61281: PPUSH
61282: CALL_OW 1
61286: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
61287: LD_ADDR_EXP 86
61291: PUSH
61292: LD_EXP 86
61296: PPUSH
61297: LD_VAR 0 1
61301: PPUSH
61302: EMPTY
61303: PPUSH
61304: CALL_OW 1
61308: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
61309: LD_ADDR_EXP 87
61313: PUSH
61314: LD_EXP 87
61318: PPUSH
61319: LD_VAR 0 1
61323: PPUSH
61324: EMPTY
61325: PPUSH
61326: CALL_OW 1
61330: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
61331: LD_ADDR_EXP 88
61335: PUSH
61336: LD_EXP 88
61340: PPUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: EMPTY
61347: PPUSH
61348: CALL_OW 1
61352: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
61353: LD_ADDR_EXP 89
61357: PUSH
61358: LD_EXP 89
61362: PPUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: EMPTY
61369: PPUSH
61370: CALL_OW 1
61374: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
61375: LD_ADDR_EXP 90
61379: PUSH
61380: LD_EXP 90
61384: PPUSH
61385: LD_VAR 0 1
61389: PPUSH
61390: EMPTY
61391: PPUSH
61392: CALL_OW 1
61396: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
61397: LD_ADDR_EXP 91
61401: PUSH
61402: LD_EXP 91
61406: PPUSH
61407: LD_VAR 0 1
61411: PPUSH
61412: EMPTY
61413: PPUSH
61414: CALL_OW 1
61418: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
61419: LD_ADDR_EXP 92
61423: PUSH
61424: LD_EXP 92
61428: PPUSH
61429: LD_VAR 0 1
61433: PPUSH
61434: EMPTY
61435: PPUSH
61436: CALL_OW 1
61440: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
61441: LD_ADDR_EXP 93
61445: PUSH
61446: LD_EXP 93
61450: PPUSH
61451: LD_VAR 0 1
61455: PPUSH
61456: EMPTY
61457: PPUSH
61458: CALL_OW 1
61462: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
61463: LD_ADDR_EXP 94
61467: PUSH
61468: LD_EXP 94
61472: PPUSH
61473: LD_VAR 0 1
61477: PPUSH
61478: EMPTY
61479: PPUSH
61480: CALL_OW 1
61484: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
61485: LD_ADDR_EXP 96
61489: PUSH
61490: LD_EXP 96
61494: PPUSH
61495: LD_VAR 0 1
61499: PPUSH
61500: EMPTY
61501: PPUSH
61502: CALL_OW 1
61506: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
61507: LD_ADDR_EXP 98
61511: PUSH
61512: LD_EXP 98
61516: PPUSH
61517: LD_VAR 0 1
61521: PPUSH
61522: EMPTY
61523: PPUSH
61524: CALL_OW 1
61528: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
61529: LD_ADDR_EXP 99
61533: PUSH
61534: LD_EXP 99
61538: PPUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: EMPTY
61545: PPUSH
61546: CALL_OW 1
61550: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
61551: LD_ADDR_EXP 100
61555: PUSH
61556: LD_EXP 100
61560: PPUSH
61561: LD_VAR 0 1
61565: PPUSH
61566: EMPTY
61567: PPUSH
61568: CALL_OW 1
61572: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
61573: LD_ADDR_EXP 101
61577: PUSH
61578: LD_EXP 101
61582: PPUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: EMPTY
61589: PPUSH
61590: CALL_OW 1
61594: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
61595: LD_ADDR_EXP 102
61599: PUSH
61600: LD_EXP 102
61604: PPUSH
61605: LD_VAR 0 1
61609: PPUSH
61610: EMPTY
61611: PPUSH
61612: CALL_OW 1
61616: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
61617: LD_ADDR_EXP 103
61621: PUSH
61622: LD_EXP 103
61626: PPUSH
61627: LD_VAR 0 1
61631: PPUSH
61632: EMPTY
61633: PPUSH
61634: CALL_OW 1
61638: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
61639: LD_ADDR_EXP 104
61643: PUSH
61644: LD_EXP 104
61648: PPUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: EMPTY
61655: PPUSH
61656: CALL_OW 1
61660: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
61661: LD_ADDR_EXP 105
61665: PUSH
61666: LD_EXP 105
61670: PPUSH
61671: LD_VAR 0 1
61675: PPUSH
61676: EMPTY
61677: PPUSH
61678: CALL_OW 1
61682: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
61683: LD_ADDR_EXP 106
61687: PUSH
61688: LD_EXP 106
61692: PPUSH
61693: LD_VAR 0 1
61697: PPUSH
61698: EMPTY
61699: PPUSH
61700: CALL_OW 1
61704: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
61705: LD_ADDR_EXP 107
61709: PUSH
61710: LD_EXP 107
61714: PPUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: EMPTY
61721: PPUSH
61722: CALL_OW 1
61726: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
61727: LD_ADDR_EXP 108
61731: PUSH
61732: LD_EXP 108
61736: PPUSH
61737: LD_VAR 0 1
61741: PPUSH
61742: EMPTY
61743: PPUSH
61744: CALL_OW 1
61748: ST_TO_ADDR
// end ;
61749: LD_VAR 0 2
61753: RET
// export function MC_Start ( ) ; var i ; begin
61754: LD_INT 0
61756: PPUSH
61757: PPUSH
// for i = 1 to mc_bases do
61758: LD_ADDR_VAR 0 2
61762: PUSH
61763: DOUBLE
61764: LD_INT 1
61766: DEC
61767: ST_TO_ADDR
61768: LD_EXP 69
61772: PUSH
61773: FOR_TO
61774: IFFALSE 62707
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
61776: LD_ADDR_EXP 70
61780: PUSH
61781: LD_EXP 70
61785: PPUSH
61786: LD_VAR 0 2
61790: PPUSH
61791: EMPTY
61792: PPUSH
61793: CALL_OW 1
61797: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61798: LD_ADDR_EXP 71
61802: PUSH
61803: LD_EXP 71
61807: PPUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: EMPTY
61814: PPUSH
61815: CALL_OW 1
61819: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
61820: LD_ADDR_EXP 72
61824: PUSH
61825: LD_EXP 72
61829: PPUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: EMPTY
61836: PPUSH
61837: CALL_OW 1
61841: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
61842: LD_ADDR_EXP 73
61846: PUSH
61847: LD_EXP 73
61851: PPUSH
61852: LD_VAR 0 2
61856: PPUSH
61857: EMPTY
61858: PUSH
61859: EMPTY
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PPUSH
61865: CALL_OW 1
61869: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
61870: LD_ADDR_EXP 74
61874: PUSH
61875: LD_EXP 74
61879: PPUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: EMPTY
61886: PPUSH
61887: CALL_OW 1
61891: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
61892: LD_ADDR_EXP 101
61896: PUSH
61897: LD_EXP 101
61901: PPUSH
61902: LD_VAR 0 2
61906: PPUSH
61907: EMPTY
61908: PPUSH
61909: CALL_OW 1
61913: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
61914: LD_ADDR_EXP 75
61918: PUSH
61919: LD_EXP 75
61923: PPUSH
61924: LD_VAR 0 2
61928: PPUSH
61929: EMPTY
61930: PPUSH
61931: CALL_OW 1
61935: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
61936: LD_ADDR_EXP 76
61940: PUSH
61941: LD_EXP 76
61945: PPUSH
61946: LD_VAR 0 2
61950: PPUSH
61951: EMPTY
61952: PPUSH
61953: CALL_OW 1
61957: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
61958: LD_ADDR_EXP 77
61962: PUSH
61963: LD_EXP 77
61967: PPUSH
61968: LD_VAR 0 2
61972: PPUSH
61973: EMPTY
61974: PPUSH
61975: CALL_OW 1
61979: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
61980: LD_ADDR_EXP 78
61984: PUSH
61985: LD_EXP 78
61989: PPUSH
61990: LD_VAR 0 2
61994: PPUSH
61995: LD_EXP 69
61999: PUSH
62000: LD_VAR 0 2
62004: ARRAY
62005: PPUSH
62006: LD_INT 2
62008: PUSH
62009: LD_INT 30
62011: PUSH
62012: LD_INT 32
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 30
62021: PUSH
62022: LD_INT 31
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 58
62036: PUSH
62037: EMPTY
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PPUSH
62044: CALL_OW 72
62048: PPUSH
62049: CALL_OW 1
62053: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
62054: LD_ADDR_EXP 79
62058: PUSH
62059: LD_EXP 79
62063: PPUSH
62064: LD_VAR 0 2
62068: PPUSH
62069: EMPTY
62070: PPUSH
62071: CALL_OW 1
62075: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
62076: LD_ADDR_EXP 83
62080: PUSH
62081: LD_EXP 83
62085: PPUSH
62086: LD_VAR 0 2
62090: PPUSH
62091: EMPTY
62092: PPUSH
62093: CALL_OW 1
62097: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
62098: LD_ADDR_EXP 82
62102: PUSH
62103: LD_EXP 82
62107: PPUSH
62108: LD_VAR 0 2
62112: PPUSH
62113: EMPTY
62114: PPUSH
62115: CALL_OW 1
62119: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
62120: LD_ADDR_EXP 84
62124: PUSH
62125: LD_EXP 84
62129: PPUSH
62130: LD_VAR 0 2
62134: PPUSH
62135: EMPTY
62136: PPUSH
62137: CALL_OW 1
62141: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
62142: LD_ADDR_EXP 85
62146: PUSH
62147: LD_EXP 85
62151: PPUSH
62152: LD_VAR 0 2
62156: PPUSH
62157: EMPTY
62158: PPUSH
62159: CALL_OW 1
62163: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
62164: LD_ADDR_EXP 86
62168: PUSH
62169: LD_EXP 86
62173: PPUSH
62174: LD_VAR 0 2
62178: PPUSH
62179: EMPTY
62180: PPUSH
62181: CALL_OW 1
62185: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
62186: LD_ADDR_EXP 87
62190: PUSH
62191: LD_EXP 87
62195: PPUSH
62196: LD_VAR 0 2
62200: PPUSH
62201: EMPTY
62202: PPUSH
62203: CALL_OW 1
62207: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
62208: LD_ADDR_EXP 88
62212: PUSH
62213: LD_EXP 88
62217: PPUSH
62218: LD_VAR 0 2
62222: PPUSH
62223: EMPTY
62224: PPUSH
62225: CALL_OW 1
62229: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
62230: LD_ADDR_EXP 89
62234: PUSH
62235: LD_EXP 89
62239: PPUSH
62240: LD_VAR 0 2
62244: PPUSH
62245: EMPTY
62246: PPUSH
62247: CALL_OW 1
62251: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
62252: LD_ADDR_EXP 90
62256: PUSH
62257: LD_EXP 90
62261: PPUSH
62262: LD_VAR 0 2
62266: PPUSH
62267: EMPTY
62268: PPUSH
62269: CALL_OW 1
62273: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
62274: LD_ADDR_EXP 91
62278: PUSH
62279: LD_EXP 91
62283: PPUSH
62284: LD_VAR 0 2
62288: PPUSH
62289: EMPTY
62290: PPUSH
62291: CALL_OW 1
62295: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
62296: LD_ADDR_EXP 80
62300: PUSH
62301: LD_EXP 80
62305: PPUSH
62306: LD_VAR 0 2
62310: PPUSH
62311: LD_INT 0
62313: PPUSH
62314: CALL_OW 1
62318: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
62319: LD_ADDR_EXP 93
62323: PUSH
62324: LD_EXP 93
62328: PPUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: LD_INT 0
62336: PPUSH
62337: CALL_OW 1
62341: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
62342: LD_ADDR_EXP 81
62346: PUSH
62347: LD_EXP 81
62351: PPUSH
62352: LD_VAR 0 2
62356: PPUSH
62357: EMPTY
62358: PPUSH
62359: CALL_OW 1
62363: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
62364: LD_ADDR_EXP 92
62368: PUSH
62369: LD_EXP 92
62373: PPUSH
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_INT 0
62381: PPUSH
62382: CALL_OW 1
62386: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
62387: LD_ADDR_EXP 94
62391: PUSH
62392: LD_EXP 94
62396: PPUSH
62397: LD_VAR 0 2
62401: PPUSH
62402: EMPTY
62403: PPUSH
62404: CALL_OW 1
62408: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
62409: LD_ADDR_EXP 97
62413: PUSH
62414: LD_EXP 97
62418: PPUSH
62419: LD_VAR 0 2
62423: PPUSH
62424: LD_INT 0
62426: PPUSH
62427: CALL_OW 1
62431: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
62432: LD_ADDR_EXP 98
62436: PUSH
62437: LD_EXP 98
62441: PPUSH
62442: LD_VAR 0 2
62446: PPUSH
62447: EMPTY
62448: PPUSH
62449: CALL_OW 1
62453: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
62454: LD_ADDR_EXP 99
62458: PUSH
62459: LD_EXP 99
62463: PPUSH
62464: LD_VAR 0 2
62468: PPUSH
62469: EMPTY
62470: PPUSH
62471: CALL_OW 1
62475: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62476: LD_ADDR_EXP 100
62480: PUSH
62481: LD_EXP 100
62485: PPUSH
62486: LD_VAR 0 2
62490: PPUSH
62491: EMPTY
62492: PPUSH
62493: CALL_OW 1
62497: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
62498: LD_ADDR_EXP 102
62502: PUSH
62503: LD_EXP 102
62507: PPUSH
62508: LD_VAR 0 2
62512: PPUSH
62513: LD_EXP 69
62517: PUSH
62518: LD_VAR 0 2
62522: ARRAY
62523: PPUSH
62524: LD_INT 2
62526: PUSH
62527: LD_INT 30
62529: PUSH
62530: LD_INT 6
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 30
62539: PUSH
62540: LD_INT 7
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 30
62549: PUSH
62550: LD_INT 8
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: PPUSH
62563: CALL_OW 72
62567: PPUSH
62568: CALL_OW 1
62572: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
62573: LD_ADDR_EXP 103
62577: PUSH
62578: LD_EXP 103
62582: PPUSH
62583: LD_VAR 0 2
62587: PPUSH
62588: EMPTY
62589: PPUSH
62590: CALL_OW 1
62594: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
62595: LD_ADDR_EXP 104
62599: PUSH
62600: LD_EXP 104
62604: PPUSH
62605: LD_VAR 0 2
62609: PPUSH
62610: EMPTY
62611: PPUSH
62612: CALL_OW 1
62616: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
62617: LD_ADDR_EXP 105
62621: PUSH
62622: LD_EXP 105
62626: PPUSH
62627: LD_VAR 0 2
62631: PPUSH
62632: EMPTY
62633: PPUSH
62634: CALL_OW 1
62638: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
62639: LD_ADDR_EXP 106
62643: PUSH
62644: LD_EXP 106
62648: PPUSH
62649: LD_VAR 0 2
62653: PPUSH
62654: EMPTY
62655: PPUSH
62656: CALL_OW 1
62660: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
62661: LD_ADDR_EXP 107
62665: PUSH
62666: LD_EXP 107
62670: PPUSH
62671: LD_VAR 0 2
62675: PPUSH
62676: EMPTY
62677: PPUSH
62678: CALL_OW 1
62682: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
62683: LD_ADDR_EXP 108
62687: PUSH
62688: LD_EXP 108
62692: PPUSH
62693: LD_VAR 0 2
62697: PPUSH
62698: EMPTY
62699: PPUSH
62700: CALL_OW 1
62704: ST_TO_ADDR
// end ;
62705: GO 61773
62707: POP
62708: POP
// MC_InitSides ( ) ;
62709: CALL 62995 0 0
// MC_InitResearch ( ) ;
62713: CALL 62734 0 0
// CustomInitMacro ( ) ;
62717: CALL 16816 0 0
// skirmish := true ;
62721: LD_ADDR_EXP 68
62725: PUSH
62726: LD_INT 1
62728: ST_TO_ADDR
// end ;
62729: LD_VAR 0 1
62733: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
62734: LD_INT 0
62736: PPUSH
62737: PPUSH
62738: PPUSH
62739: PPUSH
62740: PPUSH
62741: PPUSH
// if not mc_bases then
62742: LD_EXP 69
62746: NOT
62747: IFFALSE 62751
// exit ;
62749: GO 62990
// for i = 1 to 8 do
62751: LD_ADDR_VAR 0 2
62755: PUSH
62756: DOUBLE
62757: LD_INT 1
62759: DEC
62760: ST_TO_ADDR
62761: LD_INT 8
62763: PUSH
62764: FOR_TO
62765: IFFALSE 62791
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
62767: LD_ADDR_EXP 96
62771: PUSH
62772: LD_EXP 96
62776: PPUSH
62777: LD_VAR 0 2
62781: PPUSH
62782: EMPTY
62783: PPUSH
62784: CALL_OW 1
62788: ST_TO_ADDR
62789: GO 62764
62791: POP
62792: POP
// tmp := [ ] ;
62793: LD_ADDR_VAR 0 5
62797: PUSH
62798: EMPTY
62799: ST_TO_ADDR
// for i = 1 to mc_sides do
62800: LD_ADDR_VAR 0 2
62804: PUSH
62805: DOUBLE
62806: LD_INT 1
62808: DEC
62809: ST_TO_ADDR
62810: LD_EXP 95
62814: PUSH
62815: FOR_TO
62816: IFFALSE 62874
// if not mc_sides [ i ] in tmp then
62818: LD_EXP 95
62822: PUSH
62823: LD_VAR 0 2
62827: ARRAY
62828: PUSH
62829: LD_VAR 0 5
62833: IN
62834: NOT
62835: IFFALSE 62872
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_VAR 0 5
62846: PPUSH
62847: LD_VAR 0 5
62851: PUSH
62852: LD_INT 1
62854: PLUS
62855: PPUSH
62856: LD_EXP 95
62860: PUSH
62861: LD_VAR 0 2
62865: ARRAY
62866: PPUSH
62867: CALL_OW 2
62871: ST_TO_ADDR
62872: GO 62815
62874: POP
62875: POP
// if not tmp then
62876: LD_VAR 0 5
62880: NOT
62881: IFFALSE 62885
// exit ;
62883: GO 62990
// for j in tmp do
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: LD_VAR 0 5
62894: PUSH
62895: FOR_IN
62896: IFFALSE 62988
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
62898: LD_ADDR_VAR 0 6
62902: PUSH
62903: LD_INT 22
62905: PUSH
62906: LD_VAR 0 3
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PPUSH
62915: CALL_OW 69
62919: ST_TO_ADDR
// if not un then
62920: LD_VAR 0 6
62924: NOT
62925: IFFALSE 62929
// continue ;
62927: GO 62895
// nation := GetNation ( un [ 1 ] ) ;
62929: LD_ADDR_VAR 0 4
62933: PUSH
62934: LD_VAR 0 6
62938: PUSH
62939: LD_INT 1
62941: ARRAY
62942: PPUSH
62943: CALL_OW 248
62947: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
62948: LD_ADDR_EXP 96
62952: PUSH
62953: LD_EXP 96
62957: PPUSH
62958: LD_VAR 0 3
62962: PPUSH
62963: LD_VAR 0 3
62967: PPUSH
62968: LD_VAR 0 4
62972: PPUSH
62973: LD_INT 1
62975: PPUSH
62976: CALL 18739 0 3
62980: PPUSH
62981: CALL_OW 1
62985: ST_TO_ADDR
// end ;
62986: GO 62895
62988: POP
62989: POP
// end ;
62990: LD_VAR 0 1
62994: RET
// export function MC_InitSides ( ) ; var i ; begin
62995: LD_INT 0
62997: PPUSH
62998: PPUSH
// if not mc_bases then
62999: LD_EXP 69
63003: NOT
63004: IFFALSE 63008
// exit ;
63006: GO 63082
// for i = 1 to mc_bases do
63008: LD_ADDR_VAR 0 2
63012: PUSH
63013: DOUBLE
63014: LD_INT 1
63016: DEC
63017: ST_TO_ADDR
63018: LD_EXP 69
63022: PUSH
63023: FOR_TO
63024: IFFALSE 63080
// if mc_bases [ i ] then
63026: LD_EXP 69
63030: PUSH
63031: LD_VAR 0 2
63035: ARRAY
63036: IFFALSE 63078
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
63038: LD_ADDR_EXP 95
63042: PUSH
63043: LD_EXP 95
63047: PPUSH
63048: LD_VAR 0 2
63052: PPUSH
63053: LD_EXP 69
63057: PUSH
63058: LD_VAR 0 2
63062: ARRAY
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: PPUSH
63068: CALL_OW 255
63072: PPUSH
63073: CALL_OW 1
63077: ST_TO_ADDR
63078: GO 63023
63080: POP
63081: POP
// end ;
63082: LD_VAR 0 1
63086: RET
// every 0 0$01 trigger skirmish do
63087: LD_EXP 68
63091: IFFALSE 63224
63093: GO 63095
63095: DISABLE
// begin enable ;
63096: ENABLE
// MC_CheckBuildings ( ) ;
63097: CALL 63709 0 0
// MC_CheckPeopleLife ( ) ;
63101: CALL 63834 0 0
// RaiseSailEvent ( 103 ) ;
63105: LD_INT 103
63107: PPUSH
63108: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
63112: LD_INT 104
63114: PPUSH
63115: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
63119: LD_INT 105
63121: PPUSH
63122: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
63126: LD_INT 106
63128: PPUSH
63129: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
63133: LD_INT 107
63135: PPUSH
63136: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
63140: LD_INT 108
63142: PPUSH
63143: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
63147: LD_INT 109
63149: PPUSH
63150: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
63154: LD_INT 110
63156: PPUSH
63157: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
63161: LD_INT 111
63163: PPUSH
63164: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
63168: LD_INT 112
63170: PPUSH
63171: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
63175: LD_INT 120
63177: PPUSH
63178: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
63182: LD_INT 121
63184: PPUSH
63185: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
63189: LD_INT 122
63191: PPUSH
63192: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
63196: LD_INT 123
63198: PPUSH
63199: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
63203: LD_INT 125
63205: PPUSH
63206: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
63210: LD_INT 126
63212: PPUSH
63213: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
63217: LD_INT 200
63219: PPUSH
63220: CALL_OW 427
// end ;
63224: END
// every 10 trigger skirmish do var i ;
63225: LD_EXP 68
63229: IFFALSE 63328
63231: GO 63233
63233: DISABLE
63234: LD_INT 0
63236: PPUSH
// begin enable ;
63237: ENABLE
// if not mc_bases then
63238: LD_EXP 69
63242: NOT
63243: IFFALSE 63247
// exit ;
63245: GO 63328
// for i = 1 to mc_bases do
63247: LD_ADDR_VAR 0 1
63251: PUSH
63252: DOUBLE
63253: LD_INT 1
63255: DEC
63256: ST_TO_ADDR
63257: LD_EXP 69
63261: PUSH
63262: FOR_TO
63263: IFFALSE 63326
// if mc_mines [ i ] and mc_miners [ i ] then
63265: LD_EXP 82
63269: PUSH
63270: LD_VAR 0 1
63274: ARRAY
63275: PUSH
63276: LD_EXP 83
63280: PUSH
63281: LD_VAR 0 1
63285: ARRAY
63286: AND
63287: IFFALSE 63324
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
63289: LD_EXP 83
63293: PUSH
63294: LD_VAR 0 1
63298: ARRAY
63299: PUSH
63300: LD_INT 1
63302: ARRAY
63303: PPUSH
63304: CALL_OW 255
63308: PPUSH
63309: LD_EXP 82
63313: PUSH
63314: LD_VAR 0 1
63318: ARRAY
63319: PPUSH
63320: CALL 22488 0 2
63324: GO 63262
63326: POP
63327: POP
// end ;
63328: PPOPN 1
63330: END
// on SailEvent ( event ) do begin if event = 101 then
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 101
63338: EQUAL
63339: IFFALSE 63345
// MC_RepairBuildings ( ) ;
63341: CALL 64392 0 0
// if event = 102 then
63345: LD_VAR 0 1
63349: PUSH
63350: LD_INT 102
63352: EQUAL
63353: IFFALSE 63359
// MC_Heal ( ) ;
63355: CALL 64798 0 0
// if event = 103 then
63359: LD_VAR 0 1
63363: PUSH
63364: LD_INT 103
63366: EQUAL
63367: IFFALSE 63373
// MC_Build ( ) ;
63369: CALL 65220 0 0
// if event = 104 then
63373: LD_VAR 0 1
63377: PUSH
63378: LD_INT 104
63380: EQUAL
63381: IFFALSE 63387
// MC_TurretWeapon ( ) ;
63383: CALL 66659 0 0
// if event = 105 then
63387: LD_VAR 0 1
63391: PUSH
63392: LD_INT 105
63394: EQUAL
63395: IFFALSE 63401
// MC_BuildUpgrade ( ) ;
63397: CALL 66210 0 0
// if event = 106 then
63401: LD_VAR 0 1
63405: PUSH
63406: LD_INT 106
63408: EQUAL
63409: IFFALSE 63415
// MC_PlantMines ( ) ;
63411: CALL 67011 0 0
// if event = 107 then
63415: LD_VAR 0 1
63419: PUSH
63420: LD_INT 107
63422: EQUAL
63423: IFFALSE 63429
// MC_CollectCrates ( ) ;
63425: CALL 68018 0 0
// if event = 108 then
63429: LD_VAR 0 1
63433: PUSH
63434: LD_INT 108
63436: EQUAL
63437: IFFALSE 63443
// MC_LinkRemoteControl ( ) ;
63439: CALL 69522 0 0
// if event = 109 then
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 109
63450: EQUAL
63451: IFFALSE 63457
// MC_ProduceVehicle ( ) ;
63453: CALL 69703 0 0
// if event = 110 then
63457: LD_VAR 0 1
63461: PUSH
63462: LD_INT 110
63464: EQUAL
63465: IFFALSE 63471
// MC_SendAttack ( ) ;
63467: CALL 70184 0 0
// if event = 111 then
63471: LD_VAR 0 1
63475: PUSH
63476: LD_INT 111
63478: EQUAL
63479: IFFALSE 63485
// MC_Defend ( ) ;
63481: CALL 70292 0 0
// if event = 112 then
63485: LD_VAR 0 1
63489: PUSH
63490: LD_INT 112
63492: EQUAL
63493: IFFALSE 63499
// MC_Research ( ) ;
63495: CALL 70690 0 0
// if event = 120 then
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 120
63506: EQUAL
63507: IFFALSE 63513
// MC_RepairVehicle ( ) ;
63509: CALL 71659 0 0
// if event = 121 then
63513: LD_VAR 0 1
63517: PUSH
63518: LD_INT 121
63520: EQUAL
63521: IFFALSE 63527
// MC_TameApe ( ) ;
63523: CALL 72348 0 0
// if event = 122 then
63527: LD_VAR 0 1
63531: PUSH
63532: LD_INT 122
63534: EQUAL
63535: IFFALSE 63541
// MC_ChangeApeClass ( ) ;
63537: CALL 73111 0 0
// if event = 123 then
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 123
63548: EQUAL
63549: IFFALSE 63555
// MC_Bazooka ( ) ;
63551: CALL 73745 0 0
// if event = 124 then
63555: LD_VAR 0 1
63559: PUSH
63560: LD_INT 124
63562: EQUAL
63563: IFFALSE 63569
// MC_TeleportExit ( ) ;
63565: CALL 73943 0 0
// if event = 125 then
63569: LD_VAR 0 1
63573: PUSH
63574: LD_INT 125
63576: EQUAL
63577: IFFALSE 63583
// MC_Deposits ( ) ;
63579: CALL 73985 0 0
// if event = 126 then
63583: LD_VAR 0 1
63587: PUSH
63588: LD_INT 126
63590: EQUAL
63591: IFFALSE 63597
// MC_RemoteDriver ( ) ;
63593: CALL 74564 0 0
// if event = 200 then
63597: LD_VAR 0 1
63601: PUSH
63602: LD_INT 200
63604: EQUAL
63605: IFFALSE 63611
// MC_Idle ( ) ;
63607: CALL 76069 0 0
// end ;
63611: PPOPN 1
63613: END
// export function MC_Reset ( base , tag ) ; var i ; begin
63614: LD_INT 0
63616: PPUSH
63617: PPUSH
// if not mc_bases [ base ] or not tag then
63618: LD_EXP 69
63622: PUSH
63623: LD_VAR 0 1
63627: ARRAY
63628: NOT
63629: PUSH
63630: LD_VAR 0 2
63634: NOT
63635: OR
63636: IFFALSE 63640
// exit ;
63638: GO 63704
// for i in mc_bases [ base ] union mc_ape [ base ] do
63640: LD_ADDR_VAR 0 4
63644: PUSH
63645: LD_EXP 69
63649: PUSH
63650: LD_VAR 0 1
63654: ARRAY
63655: PUSH
63656: LD_EXP 98
63660: PUSH
63661: LD_VAR 0 1
63665: ARRAY
63666: UNION
63667: PUSH
63668: FOR_IN
63669: IFFALSE 63702
// if GetTag ( i ) = tag then
63671: LD_VAR 0 4
63675: PPUSH
63676: CALL_OW 110
63680: PUSH
63681: LD_VAR 0 2
63685: EQUAL
63686: IFFALSE 63700
// SetTag ( i , 0 ) ;
63688: LD_VAR 0 4
63692: PPUSH
63693: LD_INT 0
63695: PPUSH
63696: CALL_OW 109
63700: GO 63668
63702: POP
63703: POP
// end ;
63704: LD_VAR 0 3
63708: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
63709: LD_INT 0
63711: PPUSH
63712: PPUSH
63713: PPUSH
// if not mc_bases then
63714: LD_EXP 69
63718: NOT
63719: IFFALSE 63723
// exit ;
63721: GO 63829
// for i = 1 to mc_bases do
63723: LD_ADDR_VAR 0 2
63727: PUSH
63728: DOUBLE
63729: LD_INT 1
63731: DEC
63732: ST_TO_ADDR
63733: LD_EXP 69
63737: PUSH
63738: FOR_TO
63739: IFFALSE 63820
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63741: LD_ADDR_VAR 0 3
63745: PUSH
63746: LD_EXP 69
63750: PUSH
63751: LD_VAR 0 2
63755: ARRAY
63756: PPUSH
63757: LD_INT 21
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 24
63772: PUSH
63773: LD_INT 1000
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PPUSH
63788: CALL_OW 72
63792: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
63793: LD_ADDR_EXP 70
63797: PUSH
63798: LD_EXP 70
63802: PPUSH
63803: LD_VAR 0 2
63807: PPUSH
63808: LD_VAR 0 3
63812: PPUSH
63813: CALL_OW 1
63817: ST_TO_ADDR
// end ;
63818: GO 63738
63820: POP
63821: POP
// RaiseSailEvent ( 101 ) ;
63822: LD_INT 101
63824: PPUSH
63825: CALL_OW 427
// end ;
63829: LD_VAR 0 1
63833: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
63834: LD_INT 0
63836: PPUSH
63837: PPUSH
63838: PPUSH
63839: PPUSH
63840: PPUSH
63841: PPUSH
63842: PPUSH
// if not mc_bases then
63843: LD_EXP 69
63847: NOT
63848: IFFALSE 63852
// exit ;
63850: GO 64387
// for i = 1 to mc_bases do
63852: LD_ADDR_VAR 0 2
63856: PUSH
63857: DOUBLE
63858: LD_INT 1
63860: DEC
63861: ST_TO_ADDR
63862: LD_EXP 69
63866: PUSH
63867: FOR_TO
63868: IFFALSE 64378
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
63870: LD_ADDR_VAR 0 5
63874: PUSH
63875: LD_EXP 69
63879: PUSH
63880: LD_VAR 0 2
63884: ARRAY
63885: PUSH
63886: LD_EXP 98
63890: PUSH
63891: LD_VAR 0 2
63895: ARRAY
63896: UNION
63897: PPUSH
63898: LD_INT 21
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: LD_INT 54
63916: PUSH
63917: EMPTY
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: PUSH
63927: LD_INT 24
63929: PUSH
63930: LD_INT 700
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PPUSH
63950: CALL_OW 72
63954: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
63955: LD_ADDR_VAR 0 6
63959: PUSH
63960: LD_EXP 69
63964: PUSH
63965: LD_VAR 0 2
63969: ARRAY
63970: PPUSH
63971: LD_INT 21
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 54
63989: PUSH
63990: EMPTY
63991: LIST
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: LD_INT 24
64002: PUSH
64003: LD_INT 250
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PPUSH
64023: CALL_OW 72
64027: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64028: LD_ADDR_VAR 0 7
64032: PUSH
64033: LD_VAR 0 5
64037: PUSH
64038: LD_VAR 0 6
64042: DIFF
64043: ST_TO_ADDR
// if not need_heal_1 then
64044: LD_VAR 0 6
64048: NOT
64049: IFFALSE 64082
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
64051: LD_ADDR_EXP 72
64055: PUSH
64056: LD_EXP 72
64060: PPUSH
64061: LD_VAR 0 2
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PPUSH
64073: EMPTY
64074: PPUSH
64075: CALL 25866 0 3
64079: ST_TO_ADDR
64080: GO 64114
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
64082: LD_ADDR_EXP 72
64086: PUSH
64087: LD_EXP 72
64091: PPUSH
64092: LD_VAR 0 2
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PPUSH
64104: LD_VAR 0 6
64108: PPUSH
64109: CALL 25866 0 3
64113: ST_TO_ADDR
// if not need_heal_2 then
64114: LD_VAR 0 7
64118: NOT
64119: IFFALSE 64152
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
64121: LD_ADDR_EXP 72
64125: PUSH
64126: LD_EXP 72
64130: PPUSH
64131: LD_VAR 0 2
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PPUSH
64143: EMPTY
64144: PPUSH
64145: CALL 25866 0 3
64149: ST_TO_ADDR
64150: GO 64184
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64152: LD_ADDR_EXP 72
64156: PUSH
64157: LD_EXP 72
64161: PPUSH
64162: LD_VAR 0 2
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PPUSH
64174: LD_VAR 0 7
64178: PPUSH
64179: CALL 25866 0 3
64183: ST_TO_ADDR
// if need_heal_2 then
64184: LD_VAR 0 7
64188: IFFALSE 64360
// for j in need_heal_2 do
64190: LD_ADDR_VAR 0 3
64194: PUSH
64195: LD_VAR 0 7
64199: PUSH
64200: FOR_IN
64201: IFFALSE 64358
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
64203: LD_ADDR_VAR 0 5
64207: PUSH
64208: LD_EXP 69
64212: PUSH
64213: LD_VAR 0 2
64217: ARRAY
64218: PPUSH
64219: LD_INT 2
64221: PUSH
64222: LD_INT 30
64224: PUSH
64225: LD_INT 6
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 30
64234: PUSH
64235: LD_INT 7
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 30
64244: PUSH
64245: LD_INT 8
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 30
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 30
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 25
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: PPUSH
64291: CALL_OW 72
64295: ST_TO_ADDR
// if tmp then
64296: LD_VAR 0 5
64300: IFFALSE 64356
// begin k := NearestUnitToUnit ( tmp , j ) ;
64302: LD_ADDR_VAR 0 4
64306: PUSH
64307: LD_VAR 0 5
64311: PPUSH
64312: LD_VAR 0 3
64316: PPUSH
64317: CALL_OW 74
64321: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
64322: LD_VAR 0 3
64326: PPUSH
64327: LD_VAR 0 4
64331: PPUSH
64332: CALL_OW 296
64336: PUSH
64337: LD_INT 7
64339: GREATER
64340: IFFALSE 64356
// ComMoveUnit ( j , k ) ;
64342: LD_VAR 0 3
64346: PPUSH
64347: LD_VAR 0 4
64351: PPUSH
64352: CALL_OW 112
// end ; end ;
64356: GO 64200
64358: POP
64359: POP
// if not need_heal_1 and not need_heal_2 then
64360: LD_VAR 0 6
64364: NOT
64365: PUSH
64366: LD_VAR 0 7
64370: NOT
64371: AND
64372: IFFALSE 64376
// continue ;
64374: GO 63867
// end ;
64376: GO 63867
64378: POP
64379: POP
// RaiseSailEvent ( 102 ) ;
64380: LD_INT 102
64382: PPUSH
64383: CALL_OW 427
// end ;
64387: LD_VAR 0 1
64391: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
64392: LD_INT 0
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
// if not mc_bases then
64399: LD_EXP 69
64403: NOT
64404: IFFALSE 64408
// exit ;
64406: GO 64793
// for i = 1 to mc_bases do
64408: LD_ADDR_VAR 0 2
64412: PUSH
64413: DOUBLE
64414: LD_INT 1
64416: DEC
64417: ST_TO_ADDR
64418: LD_EXP 69
64422: PUSH
64423: FOR_TO
64424: IFFALSE 64791
// begin if not mc_building_need_repair [ i ] then
64426: LD_EXP 70
64430: PUSH
64431: LD_VAR 0 2
64435: ARRAY
64436: NOT
64437: IFFALSE 64475
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64439: LD_ADDR_EXP 71
64443: PUSH
64444: LD_EXP 71
64448: PPUSH
64449: LD_VAR 0 2
64453: PPUSH
64454: EMPTY
64455: PPUSH
64456: CALL_OW 1
64460: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64461: LD_VAR 0 2
64465: PPUSH
64466: LD_INT 101
64468: PPUSH
64469: CALL 63614 0 2
// continue ;
64473: GO 64423
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
64475: LD_ADDR_EXP 75
64479: PUSH
64480: LD_EXP 75
64484: PPUSH
64485: LD_VAR 0 2
64489: PPUSH
64490: EMPTY
64491: PPUSH
64492: CALL_OW 1
64496: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64497: LD_VAR 0 2
64501: PPUSH
64502: LD_INT 103
64504: PPUSH
64505: CALL 63614 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
64509: LD_ADDR_VAR 0 5
64513: PUSH
64514: LD_EXP 69
64518: PUSH
64519: LD_VAR 0 2
64523: ARRAY
64524: PUSH
64525: LD_EXP 98
64529: PUSH
64530: LD_VAR 0 2
64534: ARRAY
64535: UNION
64536: PPUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 25
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 25
64552: PUSH
64553: LD_INT 16
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: PPUSH
64568: CALL_OW 72
64572: ST_TO_ADDR
// if not tmp then
64573: LD_VAR 0 5
64577: NOT
64578: IFFALSE 64582
// continue ;
64580: GO 64423
// for j in tmp do
64582: LD_ADDR_VAR 0 3
64586: PUSH
64587: LD_VAR 0 5
64591: PUSH
64592: FOR_IN
64593: IFFALSE 64787
// begin if mc_need_heal [ i ] then
64595: LD_EXP 72
64599: PUSH
64600: LD_VAR 0 2
64604: ARRAY
64605: IFFALSE 64653
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
64607: LD_VAR 0 3
64611: PUSH
64612: LD_EXP 72
64616: PUSH
64617: LD_VAR 0 2
64621: ARRAY
64622: PUSH
64623: LD_INT 1
64625: ARRAY
64626: IN
64627: PUSH
64628: LD_VAR 0 3
64632: PUSH
64633: LD_EXP 72
64637: PUSH
64638: LD_VAR 0 2
64642: ARRAY
64643: PUSH
64644: LD_INT 2
64646: ARRAY
64647: IN
64648: OR
64649: IFFALSE 64653
// continue ;
64651: GO 64592
// if IsInUnit ( j ) then
64653: LD_VAR 0 3
64657: PPUSH
64658: CALL_OW 310
64662: IFFALSE 64673
// ComExitBuilding ( j ) ;
64664: LD_VAR 0 3
64668: PPUSH
64669: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
64673: LD_VAR 0 3
64677: PUSH
64678: LD_EXP 71
64682: PUSH
64683: LD_VAR 0 2
64687: ARRAY
64688: IN
64689: NOT
64690: IFFALSE 64748
// begin SetTag ( j , 101 ) ;
64692: LD_VAR 0 3
64696: PPUSH
64697: LD_INT 101
64699: PPUSH
64700: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
64704: LD_ADDR_EXP 71
64708: PUSH
64709: LD_EXP 71
64713: PPUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_EXP 71
64723: PUSH
64724: LD_VAR 0 2
64728: ARRAY
64729: PUSH
64730: LD_INT 1
64732: PLUS
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PPUSH
64738: LD_VAR 0 3
64742: PPUSH
64743: CALL 25866 0 3
64747: ST_TO_ADDR
// end ; Wait ( 3 ) ;
64748: LD_INT 3
64750: PPUSH
64751: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
64755: LD_VAR 0 3
64759: PPUSH
64760: LD_EXP 70
64764: PUSH
64765: LD_VAR 0 2
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 3
64775: PPUSH
64776: CALL_OW 74
64780: PPUSH
64781: CALL_OW 130
// end ;
64785: GO 64592
64787: POP
64788: POP
// end ;
64789: GO 64423
64791: POP
64792: POP
// end ;
64793: LD_VAR 0 1
64797: RET
// export function MC_Heal ; var i , j , tmp ; begin
64798: LD_INT 0
64800: PPUSH
64801: PPUSH
64802: PPUSH
64803: PPUSH
// if not mc_bases then
64804: LD_EXP 69
64808: NOT
64809: IFFALSE 64813
// exit ;
64811: GO 65215
// for i = 1 to mc_bases do
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_EXP 69
64827: PUSH
64828: FOR_TO
64829: IFFALSE 65213
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
64831: LD_EXP 72
64835: PUSH
64836: LD_VAR 0 2
64840: ARRAY
64841: PUSH
64842: LD_INT 1
64844: ARRAY
64845: NOT
64846: PUSH
64847: LD_EXP 72
64851: PUSH
64852: LD_VAR 0 2
64856: ARRAY
64857: PUSH
64858: LD_INT 2
64860: ARRAY
64861: NOT
64862: AND
64863: IFFALSE 64901
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
64865: LD_ADDR_EXP 73
64869: PUSH
64870: LD_EXP 73
64874: PPUSH
64875: LD_VAR 0 2
64879: PPUSH
64880: EMPTY
64881: PPUSH
64882: CALL_OW 1
64886: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
64887: LD_VAR 0 2
64891: PPUSH
64892: LD_INT 102
64894: PPUSH
64895: CALL 63614 0 2
// continue ;
64899: GO 64828
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
64901: LD_ADDR_VAR 0 4
64905: PUSH
64906: LD_EXP 69
64910: PUSH
64911: LD_VAR 0 2
64915: ARRAY
64916: PPUSH
64917: LD_INT 25
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PPUSH
64927: CALL_OW 72
64931: ST_TO_ADDR
// if not tmp then
64932: LD_VAR 0 4
64936: NOT
64937: IFFALSE 64941
// continue ;
64939: GO 64828
// if mc_taming [ i ] then
64941: LD_EXP 100
64945: PUSH
64946: LD_VAR 0 2
64950: ARRAY
64951: IFFALSE 64975
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64953: LD_ADDR_EXP 100
64957: PUSH
64958: LD_EXP 100
64962: PPUSH
64963: LD_VAR 0 2
64967: PPUSH
64968: EMPTY
64969: PPUSH
64970: CALL_OW 1
64974: ST_TO_ADDR
// for j in tmp do
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: LD_VAR 0 4
64984: PUSH
64985: FOR_IN
64986: IFFALSE 65209
// begin if IsInUnit ( j ) then
64988: LD_VAR 0 3
64992: PPUSH
64993: CALL_OW 310
64997: IFFALSE 65008
// ComExitBuilding ( j ) ;
64999: LD_VAR 0 3
65003: PPUSH
65004: CALL_OW 122
// if not j in mc_healers [ i ] then
65008: LD_VAR 0 3
65012: PUSH
65013: LD_EXP 73
65017: PUSH
65018: LD_VAR 0 2
65022: ARRAY
65023: IN
65024: NOT
65025: IFFALSE 65071
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65027: LD_ADDR_EXP 73
65031: PUSH
65032: LD_EXP 73
65036: PPUSH
65037: LD_VAR 0 2
65041: PUSH
65042: LD_EXP 73
65046: PUSH
65047: LD_VAR 0 2
65051: ARRAY
65052: PUSH
65053: LD_INT 1
65055: PLUS
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PPUSH
65061: LD_VAR 0 3
65065: PPUSH
65066: CALL 25866 0 3
65070: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65071: LD_VAR 0 3
65075: PPUSH
65076: CALL_OW 110
65080: PUSH
65081: LD_INT 102
65083: NONEQUAL
65084: IFFALSE 65098
// SetTag ( j , 102 ) ;
65086: LD_VAR 0 3
65090: PPUSH
65091: LD_INT 102
65093: PPUSH
65094: CALL_OW 109
// Wait ( 3 ) ;
65098: LD_INT 3
65100: PPUSH
65101: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65105: LD_EXP 72
65109: PUSH
65110: LD_VAR 0 2
65114: ARRAY
65115: PUSH
65116: LD_INT 1
65118: ARRAY
65119: IFFALSE 65151
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65121: LD_VAR 0 3
65125: PPUSH
65126: LD_EXP 72
65130: PUSH
65131: LD_VAR 0 2
65135: ARRAY
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PUSH
65141: LD_INT 1
65143: ARRAY
65144: PPUSH
65145: CALL_OW 128
65149: GO 65207
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
65151: LD_VAR 0 3
65155: PPUSH
65156: CALL_OW 314
65160: NOT
65161: PUSH
65162: LD_EXP 72
65166: PUSH
65167: LD_VAR 0 2
65171: ARRAY
65172: PUSH
65173: LD_INT 2
65175: ARRAY
65176: AND
65177: IFFALSE 65207
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
65179: LD_VAR 0 3
65183: PPUSH
65184: LD_EXP 72
65188: PUSH
65189: LD_VAR 0 2
65193: ARRAY
65194: PUSH
65195: LD_INT 2
65197: ARRAY
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: PPUSH
65203: CALL_OW 128
// end ;
65207: GO 64985
65209: POP
65210: POP
// end ;
65211: GO 64828
65213: POP
65214: POP
// end ;
65215: LD_VAR 0 1
65219: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
65220: LD_INT 0
65222: PPUSH
65223: PPUSH
65224: PPUSH
65225: PPUSH
65226: PPUSH
// if not mc_bases then
65227: LD_EXP 69
65231: NOT
65232: IFFALSE 65236
// exit ;
65234: GO 66205
// for i = 1 to mc_bases do
65236: LD_ADDR_VAR 0 2
65240: PUSH
65241: DOUBLE
65242: LD_INT 1
65244: DEC
65245: ST_TO_ADDR
65246: LD_EXP 69
65250: PUSH
65251: FOR_TO
65252: IFFALSE 66203
// begin if mc_scan [ i ] then
65254: LD_EXP 92
65258: PUSH
65259: LD_VAR 0 2
65263: ARRAY
65264: IFFALSE 65268
// continue ;
65266: GO 65251
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
65268: LD_EXP 74
65272: PUSH
65273: LD_VAR 0 2
65277: ARRAY
65278: NOT
65279: PUSH
65280: LD_EXP 76
65284: PUSH
65285: LD_VAR 0 2
65289: ARRAY
65290: NOT
65291: AND
65292: PUSH
65293: LD_EXP 75
65297: PUSH
65298: LD_VAR 0 2
65302: ARRAY
65303: AND
65304: IFFALSE 65342
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
65306: LD_ADDR_EXP 75
65310: PUSH
65311: LD_EXP 75
65315: PPUSH
65316: LD_VAR 0 2
65320: PPUSH
65321: EMPTY
65322: PPUSH
65323: CALL_OW 1
65327: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65328: LD_VAR 0 2
65332: PPUSH
65333: LD_INT 103
65335: PPUSH
65336: CALL 63614 0 2
// continue ;
65340: GO 65251
// end ; if mc_construct_list [ i ] then
65342: LD_EXP 76
65346: PUSH
65347: LD_VAR 0 2
65351: ARRAY
65352: IFFALSE 65572
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65354: LD_ADDR_VAR 0 4
65358: PUSH
65359: LD_EXP 69
65363: PUSH
65364: LD_VAR 0 2
65368: ARRAY
65369: PPUSH
65370: LD_INT 25
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PPUSH
65380: CALL_OW 72
65384: PUSH
65385: LD_EXP 71
65389: PUSH
65390: LD_VAR 0 2
65394: ARRAY
65395: DIFF
65396: ST_TO_ADDR
// if not tmp then
65397: LD_VAR 0 4
65401: NOT
65402: IFFALSE 65406
// continue ;
65404: GO 65251
// for j in tmp do
65406: LD_ADDR_VAR 0 3
65410: PUSH
65411: LD_VAR 0 4
65415: PUSH
65416: FOR_IN
65417: IFFALSE 65568
// begin if not mc_builders [ i ] then
65419: LD_EXP 75
65423: PUSH
65424: LD_VAR 0 2
65428: ARRAY
65429: NOT
65430: IFFALSE 65488
// begin SetTag ( j , 103 ) ;
65432: LD_VAR 0 3
65436: PPUSH
65437: LD_INT 103
65439: PPUSH
65440: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65444: LD_ADDR_EXP 75
65448: PUSH
65449: LD_EXP 75
65453: PPUSH
65454: LD_VAR 0 2
65458: PUSH
65459: LD_EXP 75
65463: PUSH
65464: LD_VAR 0 2
65468: ARRAY
65469: PUSH
65470: LD_INT 1
65472: PLUS
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PPUSH
65478: LD_VAR 0 3
65482: PPUSH
65483: CALL 25866 0 3
65487: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65488: LD_VAR 0 3
65492: PPUSH
65493: CALL_OW 310
65497: IFFALSE 65508
// ComExitBuilding ( j ) ;
65499: LD_VAR 0 3
65503: PPUSH
65504: CALL_OW 122
// wait ( 3 ) ;
65508: LD_INT 3
65510: PPUSH
65511: CALL_OW 67
// if not mc_construct_list [ i ] then
65515: LD_EXP 76
65519: PUSH
65520: LD_VAR 0 2
65524: ARRAY
65525: NOT
65526: IFFALSE 65530
// break ;
65528: GO 65568
// if not HasTask ( j ) then
65530: LD_VAR 0 3
65534: PPUSH
65535: CALL_OW 314
65539: NOT
65540: IFFALSE 65566
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
65542: LD_VAR 0 3
65546: PPUSH
65547: LD_EXP 76
65551: PUSH
65552: LD_VAR 0 2
65556: ARRAY
65557: PUSH
65558: LD_INT 1
65560: ARRAY
65561: PPUSH
65562: CALL 28302 0 2
// end ;
65566: GO 65416
65568: POP
65569: POP
// end else
65570: GO 66201
// if mc_build_list [ i ] then
65572: LD_EXP 74
65576: PUSH
65577: LD_VAR 0 2
65581: ARRAY
65582: IFFALSE 66201
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65584: LD_ADDR_VAR 0 5
65588: PUSH
65589: LD_EXP 69
65593: PUSH
65594: LD_VAR 0 2
65598: ARRAY
65599: PPUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 30
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 30
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: PPUSH
65628: CALL_OW 72
65632: ST_TO_ADDR
// if depot then
65633: LD_VAR 0 5
65637: IFFALSE 65655
// depot := depot [ 1 ] else
65639: LD_ADDR_VAR 0 5
65643: PUSH
65644: LD_VAR 0 5
65648: PUSH
65649: LD_INT 1
65651: ARRAY
65652: ST_TO_ADDR
65653: GO 65663
// depot := 0 ;
65655: LD_ADDR_VAR 0 5
65659: PUSH
65660: LD_INT 0
65662: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
65663: LD_EXP 74
65667: PUSH
65668: LD_VAR 0 2
65672: ARRAY
65673: PUSH
65674: LD_INT 1
65676: ARRAY
65677: PUSH
65678: LD_INT 1
65680: ARRAY
65681: PUSH
65682: LD_INT 0
65684: EQUAL
65685: PUSH
65686: LD_VAR 0 5
65690: PUSH
65691: LD_VAR 0 5
65695: PPUSH
65696: LD_EXP 74
65700: PUSH
65701: LD_VAR 0 2
65705: ARRAY
65706: PUSH
65707: LD_INT 1
65709: ARRAY
65710: PUSH
65711: LD_INT 1
65713: ARRAY
65714: PPUSH
65715: LD_EXP 74
65719: PUSH
65720: LD_VAR 0 2
65724: ARRAY
65725: PUSH
65726: LD_INT 1
65728: ARRAY
65729: PUSH
65730: LD_INT 2
65732: ARRAY
65733: PPUSH
65734: LD_EXP 74
65738: PUSH
65739: LD_VAR 0 2
65743: ARRAY
65744: PUSH
65745: LD_INT 1
65747: ARRAY
65748: PUSH
65749: LD_INT 3
65751: ARRAY
65752: PPUSH
65753: LD_EXP 74
65757: PUSH
65758: LD_VAR 0 2
65762: ARRAY
65763: PUSH
65764: LD_INT 1
65766: ARRAY
65767: PUSH
65768: LD_INT 4
65770: ARRAY
65771: PPUSH
65772: CALL 32654 0 5
65776: AND
65777: OR
65778: IFFALSE 66059
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65780: LD_ADDR_VAR 0 4
65784: PUSH
65785: LD_EXP 69
65789: PUSH
65790: LD_VAR 0 2
65794: ARRAY
65795: PPUSH
65796: LD_INT 25
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PPUSH
65806: CALL_OW 72
65810: PUSH
65811: LD_EXP 71
65815: PUSH
65816: LD_VAR 0 2
65820: ARRAY
65821: DIFF
65822: ST_TO_ADDR
// if not tmp then
65823: LD_VAR 0 4
65827: NOT
65828: IFFALSE 65832
// continue ;
65830: GO 65251
// for j in tmp do
65832: LD_ADDR_VAR 0 3
65836: PUSH
65837: LD_VAR 0 4
65841: PUSH
65842: FOR_IN
65843: IFFALSE 66055
// begin if not mc_builders [ i ] then
65845: LD_EXP 75
65849: PUSH
65850: LD_VAR 0 2
65854: ARRAY
65855: NOT
65856: IFFALSE 65914
// begin SetTag ( j , 103 ) ;
65858: LD_VAR 0 3
65862: PPUSH
65863: LD_INT 103
65865: PPUSH
65866: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65870: LD_ADDR_EXP 75
65874: PUSH
65875: LD_EXP 75
65879: PPUSH
65880: LD_VAR 0 2
65884: PUSH
65885: LD_EXP 75
65889: PUSH
65890: LD_VAR 0 2
65894: ARRAY
65895: PUSH
65896: LD_INT 1
65898: PLUS
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PPUSH
65904: LD_VAR 0 3
65908: PPUSH
65909: CALL 25866 0 3
65913: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65914: LD_VAR 0 3
65918: PPUSH
65919: CALL_OW 310
65923: IFFALSE 65934
// ComExitBuilding ( j ) ;
65925: LD_VAR 0 3
65929: PPUSH
65930: CALL_OW 122
// wait ( 3 ) ;
65934: LD_INT 3
65936: PPUSH
65937: CALL_OW 67
// if not mc_build_list [ i ] then
65941: LD_EXP 74
65945: PUSH
65946: LD_VAR 0 2
65950: ARRAY
65951: NOT
65952: IFFALSE 65956
// break ;
65954: GO 66055
// if not HasTask ( j ) then
65956: LD_VAR 0 3
65960: PPUSH
65961: CALL_OW 314
65965: NOT
65966: IFFALSE 66053
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65968: LD_VAR 0 3
65972: PPUSH
65973: LD_EXP 74
65977: PUSH
65978: LD_VAR 0 2
65982: ARRAY
65983: PUSH
65984: LD_INT 1
65986: ARRAY
65987: PUSH
65988: LD_INT 1
65990: ARRAY
65991: PPUSH
65992: LD_EXP 74
65996: PUSH
65997: LD_VAR 0 2
66001: ARRAY
66002: PUSH
66003: LD_INT 1
66005: ARRAY
66006: PUSH
66007: LD_INT 2
66009: ARRAY
66010: PPUSH
66011: LD_EXP 74
66015: PUSH
66016: LD_VAR 0 2
66020: ARRAY
66021: PUSH
66022: LD_INT 1
66024: ARRAY
66025: PUSH
66026: LD_INT 3
66028: ARRAY
66029: PPUSH
66030: LD_EXP 74
66034: PUSH
66035: LD_VAR 0 2
66039: ARRAY
66040: PUSH
66041: LD_INT 1
66043: ARRAY
66044: PUSH
66045: LD_INT 4
66047: ARRAY
66048: PPUSH
66049: CALL_OW 145
// end ;
66053: GO 65842
66055: POP
66056: POP
// end else
66057: GO 66201
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
66059: LD_EXP 69
66063: PUSH
66064: LD_VAR 0 2
66068: ARRAY
66069: PPUSH
66070: LD_EXP 74
66074: PUSH
66075: LD_VAR 0 2
66079: ARRAY
66080: PUSH
66081: LD_INT 1
66083: ARRAY
66084: PUSH
66085: LD_INT 1
66087: ARRAY
66088: PPUSH
66089: LD_EXP 74
66093: PUSH
66094: LD_VAR 0 2
66098: ARRAY
66099: PUSH
66100: LD_INT 1
66102: ARRAY
66103: PUSH
66104: LD_INT 2
66106: ARRAY
66107: PPUSH
66108: LD_EXP 74
66112: PUSH
66113: LD_VAR 0 2
66117: ARRAY
66118: PUSH
66119: LD_INT 1
66121: ARRAY
66122: PUSH
66123: LD_INT 3
66125: ARRAY
66126: PPUSH
66127: LD_EXP 74
66131: PUSH
66132: LD_VAR 0 2
66136: ARRAY
66137: PUSH
66138: LD_INT 1
66140: ARRAY
66141: PUSH
66142: LD_INT 4
66144: ARRAY
66145: PPUSH
66146: CALL 32085 0 5
66150: NOT
66151: IFFALSE 66201
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
66153: LD_ADDR_EXP 74
66157: PUSH
66158: LD_EXP 74
66162: PPUSH
66163: LD_VAR 0 2
66167: PPUSH
66168: LD_EXP 74
66172: PUSH
66173: LD_VAR 0 2
66177: ARRAY
66178: PPUSH
66179: LD_INT 1
66181: PPUSH
66182: LD_INT 1
66184: NEG
66185: PPUSH
66186: LD_INT 0
66188: PPUSH
66189: CALL 24849 0 4
66193: PPUSH
66194: CALL_OW 1
66198: ST_TO_ADDR
// continue ;
66199: GO 65251
// end ; end ; end ;
66201: GO 65251
66203: POP
66204: POP
// end ;
66205: LD_VAR 0 1
66209: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
66215: PPUSH
66216: PPUSH
66217: PPUSH
// if not mc_bases then
66218: LD_EXP 69
66222: NOT
66223: IFFALSE 66227
// exit ;
66225: GO 66654
// for i = 1 to mc_bases do
66227: LD_ADDR_VAR 0 2
66231: PUSH
66232: DOUBLE
66233: LD_INT 1
66235: DEC
66236: ST_TO_ADDR
66237: LD_EXP 69
66241: PUSH
66242: FOR_TO
66243: IFFALSE 66652
// begin tmp := mc_build_upgrade [ i ] ;
66245: LD_ADDR_VAR 0 4
66249: PUSH
66250: LD_EXP 101
66254: PUSH
66255: LD_VAR 0 2
66259: ARRAY
66260: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
66261: LD_ADDR_VAR 0 6
66265: PUSH
66266: LD_EXP 102
66270: PUSH
66271: LD_VAR 0 2
66275: ARRAY
66276: PPUSH
66277: LD_INT 2
66279: PUSH
66280: LD_INT 30
66282: PUSH
66283: LD_INT 6
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 30
66292: PUSH
66293: LD_INT 7
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: PPUSH
66305: CALL_OW 72
66309: ST_TO_ADDR
// if not tmp and not lab then
66310: LD_VAR 0 4
66314: NOT
66315: PUSH
66316: LD_VAR 0 6
66320: NOT
66321: AND
66322: IFFALSE 66326
// continue ;
66324: GO 66242
// if tmp then
66326: LD_VAR 0 4
66330: IFFALSE 66450
// for j in tmp do
66332: LD_ADDR_VAR 0 3
66336: PUSH
66337: LD_VAR 0 4
66341: PUSH
66342: FOR_IN
66343: IFFALSE 66448
// begin if UpgradeCost ( j ) then
66345: LD_VAR 0 3
66349: PPUSH
66350: CALL 31745 0 1
66354: IFFALSE 66446
// begin ComUpgrade ( j ) ;
66356: LD_VAR 0 3
66360: PPUSH
66361: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
66365: LD_ADDR_EXP 101
66369: PUSH
66370: LD_EXP 101
66374: PPUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: LD_EXP 101
66384: PUSH
66385: LD_VAR 0 2
66389: ARRAY
66390: PUSH
66391: LD_VAR 0 3
66395: DIFF
66396: PPUSH
66397: CALL_OW 1
66401: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66402: LD_ADDR_EXP 76
66406: PUSH
66407: LD_EXP 76
66411: PPUSH
66412: LD_VAR 0 2
66416: PUSH
66417: LD_EXP 76
66421: PUSH
66422: LD_VAR 0 2
66426: ARRAY
66427: PUSH
66428: LD_INT 1
66430: PLUS
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PPUSH
66436: LD_VAR 0 3
66440: PPUSH
66441: CALL 25866 0 3
66445: ST_TO_ADDR
// end ; end ;
66446: GO 66342
66448: POP
66449: POP
// if not lab or not mc_lab_upgrade [ i ] then
66450: LD_VAR 0 6
66454: NOT
66455: PUSH
66456: LD_EXP 103
66460: PUSH
66461: LD_VAR 0 2
66465: ARRAY
66466: NOT
66467: OR
66468: IFFALSE 66472
// continue ;
66470: GO 66242
// for j in lab do
66472: LD_ADDR_VAR 0 3
66476: PUSH
66477: LD_VAR 0 6
66481: PUSH
66482: FOR_IN
66483: IFFALSE 66648
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
66485: LD_VAR 0 3
66489: PPUSH
66490: CALL_OW 266
66494: PUSH
66495: LD_INT 6
66497: PUSH
66498: LD_INT 7
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: IN
66505: PUSH
66506: LD_VAR 0 3
66510: PPUSH
66511: CALL_OW 461
66515: PUSH
66516: LD_INT 1
66518: NONEQUAL
66519: AND
66520: IFFALSE 66646
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
66522: LD_VAR 0 3
66526: PPUSH
66527: LD_EXP 103
66531: PUSH
66532: LD_VAR 0 2
66536: ARRAY
66537: PUSH
66538: LD_INT 1
66540: ARRAY
66541: PPUSH
66542: CALL 31950 0 2
66546: IFFALSE 66646
// begin ComCancel ( j ) ;
66548: LD_VAR 0 3
66552: PPUSH
66553: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
66557: LD_VAR 0 3
66561: PPUSH
66562: LD_EXP 103
66566: PUSH
66567: LD_VAR 0 2
66571: ARRAY
66572: PUSH
66573: LD_INT 1
66575: ARRAY
66576: PPUSH
66577: CALL_OW 207
// if not j in mc_construct_list [ i ] then
66581: LD_VAR 0 3
66585: PUSH
66586: LD_EXP 76
66590: PUSH
66591: LD_VAR 0 2
66595: ARRAY
66596: IN
66597: NOT
66598: IFFALSE 66644
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66600: LD_ADDR_EXP 76
66604: PUSH
66605: LD_EXP 76
66609: PPUSH
66610: LD_VAR 0 2
66614: PUSH
66615: LD_EXP 76
66619: PUSH
66620: LD_VAR 0 2
66624: ARRAY
66625: PUSH
66626: LD_INT 1
66628: PLUS
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PPUSH
66634: LD_VAR 0 3
66638: PPUSH
66639: CALL 25866 0 3
66643: ST_TO_ADDR
// break ;
66644: GO 66648
// end ; end ; end ;
66646: GO 66482
66648: POP
66649: POP
// end ;
66650: GO 66242
66652: POP
66653: POP
// end ;
66654: LD_VAR 0 1
66658: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
66659: LD_INT 0
66661: PPUSH
66662: PPUSH
66663: PPUSH
66664: PPUSH
66665: PPUSH
66666: PPUSH
66667: PPUSH
// if not mc_bases then
66668: LD_EXP 69
66672: NOT
66673: IFFALSE 66677
// exit ;
66675: GO 67006
// for i = 1 to mc_bases do
66677: LD_ADDR_VAR 0 2
66681: PUSH
66682: DOUBLE
66683: LD_INT 1
66685: DEC
66686: ST_TO_ADDR
66687: LD_EXP 69
66691: PUSH
66692: FOR_TO
66693: IFFALSE 67004
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
66695: LD_EXP 77
66699: PUSH
66700: LD_VAR 0 2
66704: ARRAY
66705: NOT
66706: PUSH
66707: LD_EXP 69
66711: PUSH
66712: LD_VAR 0 2
66716: ARRAY
66717: PPUSH
66718: LD_INT 30
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PPUSH
66728: CALL_OW 72
66732: NOT
66733: OR
66734: IFFALSE 66738
// continue ;
66736: GO 66692
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
66738: LD_EXP 77
66742: PUSH
66743: LD_VAR 0 2
66747: ARRAY
66748: PUSH
66749: LD_INT 1
66751: ARRAY
66752: PPUSH
66753: CALL_OW 269
66757: IFFALSE 66823
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
66759: LD_ADDR_VAR 0 4
66763: PUSH
66764: LD_EXP 77
66768: PUSH
66769: LD_VAR 0 2
66773: ARRAY
66774: PPUSH
66775: LD_INT 1
66777: PPUSH
66778: CALL_OW 3
66782: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
66783: LD_ADDR_EXP 77
66787: PUSH
66788: LD_EXP 77
66792: PPUSH
66793: LD_VAR 0 2
66797: PPUSH
66798: LD_VAR 0 4
66802: PPUSH
66803: CALL_OW 1
66807: ST_TO_ADDR
// if not mc_turret_list [ i ] then
66808: LD_EXP 77
66812: PUSH
66813: LD_VAR 0 2
66817: ARRAY
66818: NOT
66819: IFFALSE 66823
// continue ;
66821: GO 66692
// end ; busy := false ;
66823: LD_ADDR_VAR 0 6
66827: PUSH
66828: LD_INT 0
66830: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66831: LD_ADDR_VAR 0 4
66835: PUSH
66836: LD_EXP 69
66840: PUSH
66841: LD_VAR 0 2
66845: ARRAY
66846: PPUSH
66847: LD_INT 30
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PPUSH
66857: CALL_OW 72
66861: ST_TO_ADDR
// for j in tmp do
66862: LD_ADDR_VAR 0 3
66866: PUSH
66867: LD_VAR 0 4
66871: PUSH
66872: FOR_IN
66873: IFFALSE 66901
// if not BuildingStatus ( j ) = bs_idle then
66875: LD_VAR 0 3
66879: PPUSH
66880: CALL_OW 461
66884: PUSH
66885: LD_INT 2
66887: EQUAL
66888: NOT
66889: IFFALSE 66899
// busy := true ;
66891: LD_ADDR_VAR 0 6
66895: PUSH
66896: LD_INT 1
66898: ST_TO_ADDR
66899: GO 66872
66901: POP
66902: POP
// if busy then
66903: LD_VAR 0 6
66907: IFFALSE 66911
// continue ;
66909: GO 66692
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
66911: LD_ADDR_VAR 0 7
66915: PUSH
66916: LD_EXP 77
66920: PUSH
66921: LD_VAR 0 2
66925: ARRAY
66926: PUSH
66927: LD_INT 1
66929: ARRAY
66930: PPUSH
66931: CALL 30309 0 1
66935: ST_TO_ADDR
// if not weapon then
66936: LD_VAR 0 7
66940: NOT
66941: IFFALSE 66945
// continue ;
66943: GO 66692
// if mc_allowed_tower_weapons [ i ] then
66945: LD_EXP 107
66949: PUSH
66950: LD_VAR 0 2
66954: ARRAY
66955: IFFALSE 66978
// if not weapon in mc_allowed_tower_weapons [ i ] then
66957: LD_VAR 0 7
66961: PUSH
66962: LD_EXP 107
66966: PUSH
66967: LD_VAR 0 2
66971: ARRAY
66972: IN
66973: NOT
66974: IFFALSE 66978
// continue ;
66976: GO 66692
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
66978: LD_EXP 77
66982: PUSH
66983: LD_VAR 0 2
66987: ARRAY
66988: PUSH
66989: LD_INT 1
66991: ARRAY
66992: PPUSH
66993: LD_VAR 0 7
66997: PPUSH
66998: CALL_OW 148
// end ;
67002: GO 66692
67004: POP
67005: POP
// end ;
67006: LD_VAR 0 1
67010: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
67011: LD_INT 0
67013: PPUSH
67014: PPUSH
67015: PPUSH
67016: PPUSH
67017: PPUSH
67018: PPUSH
// if not mc_bases then
67019: LD_EXP 69
67023: NOT
67024: IFFALSE 67028
// exit ;
67026: GO 68013
// for i = 1 to mc_bases do
67028: LD_ADDR_VAR 0 2
67032: PUSH
67033: DOUBLE
67034: LD_INT 1
67036: DEC
67037: ST_TO_ADDR
67038: LD_EXP 69
67042: PUSH
67043: FOR_TO
67044: IFFALSE 68011
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
67046: LD_EXP 82
67050: PUSH
67051: LD_VAR 0 2
67055: ARRAY
67056: NOT
67057: PUSH
67058: LD_EXP 82
67062: PUSH
67063: LD_VAR 0 2
67067: ARRAY
67068: PUSH
67069: LD_EXP 83
67073: PUSH
67074: LD_VAR 0 2
67078: ARRAY
67079: EQUAL
67080: OR
67081: IFFALSE 67085
// continue ;
67083: GO 67043
// if mc_miners [ i ] then
67085: LD_EXP 83
67089: PUSH
67090: LD_VAR 0 2
67094: ARRAY
67095: IFFALSE 67698
// begin k := 1 ;
67097: LD_ADDR_VAR 0 4
67101: PUSH
67102: LD_INT 1
67104: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
67105: LD_ADDR_VAR 0 3
67109: PUSH
67110: DOUBLE
67111: LD_EXP 83
67115: PUSH
67116: LD_VAR 0 2
67120: ARRAY
67121: INC
67122: ST_TO_ADDR
67123: LD_INT 1
67125: PUSH
67126: FOR_DOWNTO
67127: IFFALSE 67696
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
67129: LD_EXP 83
67133: PUSH
67134: LD_VAR 0 2
67138: ARRAY
67139: PUSH
67140: LD_VAR 0 3
67144: ARRAY
67145: PPUSH
67146: CALL_OW 301
67150: IFFALSE 67213
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
67152: LD_ADDR_VAR 0 5
67156: PUSH
67157: LD_EXP 83
67161: PUSH
67162: LD_VAR 0 2
67166: ARRAY
67167: PUSH
67168: LD_EXP 83
67172: PUSH
67173: LD_VAR 0 2
67177: ARRAY
67178: PUSH
67179: LD_VAR 0 3
67183: ARRAY
67184: DIFF
67185: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
67186: LD_ADDR_EXP 83
67190: PUSH
67191: LD_EXP 83
67195: PPUSH
67196: LD_VAR 0 2
67200: PPUSH
67201: LD_VAR 0 5
67205: PPUSH
67206: CALL_OW 1
67210: ST_TO_ADDR
// continue ;
67211: GO 67126
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
67213: LD_EXP 83
67217: PUSH
67218: LD_VAR 0 2
67222: ARRAY
67223: PUSH
67224: LD_VAR 0 3
67228: ARRAY
67229: PPUSH
67230: CALL 25367 0 1
67234: PUSH
67235: LD_EXP 83
67239: PUSH
67240: LD_VAR 0 2
67244: ARRAY
67245: PUSH
67246: LD_VAR 0 3
67250: ARRAY
67251: PPUSH
67252: CALL_OW 255
67256: PPUSH
67257: LD_EXP 82
67261: PUSH
67262: LD_VAR 0 2
67266: ARRAY
67267: PUSH
67268: LD_VAR 0 4
67272: ARRAY
67273: PUSH
67274: LD_INT 1
67276: ARRAY
67277: PPUSH
67278: LD_EXP 82
67282: PUSH
67283: LD_VAR 0 2
67287: ARRAY
67288: PUSH
67289: LD_VAR 0 4
67293: ARRAY
67294: PUSH
67295: LD_INT 2
67297: ARRAY
67298: PPUSH
67299: LD_INT 15
67301: PPUSH
67302: CALL 26360 0 4
67306: PUSH
67307: LD_INT 4
67309: ARRAY
67310: PUSH
67311: LD_EXP 83
67315: PUSH
67316: LD_VAR 0 2
67320: ARRAY
67321: PUSH
67322: LD_VAR 0 3
67326: ARRAY
67327: PPUSH
67328: LD_INT 10
67330: PPUSH
67331: CALL 28057 0 2
67335: PUSH
67336: LD_INT 4
67338: ARRAY
67339: OR
67340: AND
67341: IFFALSE 67364
// ComStop ( mc_miners [ i ] [ j ] ) ;
67343: LD_EXP 83
67347: PUSH
67348: LD_VAR 0 2
67352: ARRAY
67353: PUSH
67354: LD_VAR 0 3
67358: ARRAY
67359: PPUSH
67360: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
67364: LD_EXP 83
67368: PUSH
67369: LD_VAR 0 2
67373: ARRAY
67374: PUSH
67375: LD_VAR 0 3
67379: ARRAY
67380: PPUSH
67381: CALL_OW 257
67385: PUSH
67386: LD_INT 1
67388: EQUAL
67389: PUSH
67390: LD_EXP 83
67394: PUSH
67395: LD_VAR 0 2
67399: ARRAY
67400: PUSH
67401: LD_VAR 0 3
67405: ARRAY
67406: PPUSH
67407: CALL_OW 459
67411: NOT
67412: AND
67413: PUSH
67414: LD_EXP 83
67418: PUSH
67419: LD_VAR 0 2
67423: ARRAY
67424: PUSH
67425: LD_VAR 0 3
67429: ARRAY
67430: PPUSH
67431: CALL_OW 255
67435: PPUSH
67436: LD_EXP 82
67440: PUSH
67441: LD_VAR 0 2
67445: ARRAY
67446: PUSH
67447: LD_VAR 0 4
67451: ARRAY
67452: PUSH
67453: LD_INT 1
67455: ARRAY
67456: PPUSH
67457: LD_EXP 82
67461: PUSH
67462: LD_VAR 0 2
67466: ARRAY
67467: PUSH
67468: LD_VAR 0 4
67472: ARRAY
67473: PUSH
67474: LD_INT 2
67476: ARRAY
67477: PPUSH
67478: LD_INT 15
67480: PPUSH
67481: CALL 26360 0 4
67485: PUSH
67486: LD_INT 4
67488: ARRAY
67489: PUSH
67490: LD_INT 0
67492: EQUAL
67493: AND
67494: PUSH
67495: LD_EXP 83
67499: PUSH
67500: LD_VAR 0 2
67504: ARRAY
67505: PUSH
67506: LD_VAR 0 3
67510: ARRAY
67511: PPUSH
67512: CALL_OW 314
67516: NOT
67517: AND
67518: IFFALSE 67694
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
67520: LD_EXP 83
67524: PUSH
67525: LD_VAR 0 2
67529: ARRAY
67530: PUSH
67531: LD_VAR 0 3
67535: ARRAY
67536: PPUSH
67537: CALL_OW 310
67541: IFFALSE 67564
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
67543: LD_EXP 83
67547: PUSH
67548: LD_VAR 0 2
67552: ARRAY
67553: PUSH
67554: LD_VAR 0 3
67558: ARRAY
67559: PPUSH
67560: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
67564: LD_EXP 83
67568: PUSH
67569: LD_VAR 0 2
67573: ARRAY
67574: PUSH
67575: LD_VAR 0 3
67579: ARRAY
67580: PPUSH
67581: CALL_OW 314
67585: NOT
67586: IFFALSE 67654
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
67588: LD_EXP 83
67592: PUSH
67593: LD_VAR 0 2
67597: ARRAY
67598: PUSH
67599: LD_VAR 0 3
67603: ARRAY
67604: PPUSH
67605: LD_EXP 82
67609: PUSH
67610: LD_VAR 0 2
67614: ARRAY
67615: PUSH
67616: LD_VAR 0 4
67620: ARRAY
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PPUSH
67626: LD_EXP 82
67630: PUSH
67631: LD_VAR 0 2
67635: ARRAY
67636: PUSH
67637: LD_VAR 0 4
67641: ARRAY
67642: PUSH
67643: LD_INT 2
67645: ARRAY
67646: PPUSH
67647: LD_INT 0
67649: PPUSH
67650: CALL_OW 193
// k := k + 1 ;
67654: LD_ADDR_VAR 0 4
67658: PUSH
67659: LD_VAR 0 4
67663: PUSH
67664: LD_INT 1
67666: PLUS
67667: ST_TO_ADDR
// if k > mc_mines [ i ] then
67668: LD_VAR 0 4
67672: PUSH
67673: LD_EXP 82
67677: PUSH
67678: LD_VAR 0 2
67682: ARRAY
67683: GREATER
67684: IFFALSE 67694
// k := 1 ;
67686: LD_ADDR_VAR 0 4
67690: PUSH
67691: LD_INT 1
67693: ST_TO_ADDR
// end ; end ;
67694: GO 67126
67696: POP
67697: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67698: LD_ADDR_VAR 0 5
67702: PUSH
67703: LD_EXP 69
67707: PUSH
67708: LD_VAR 0 2
67712: ARRAY
67713: PPUSH
67714: LD_INT 2
67716: PUSH
67717: LD_INT 30
67719: PUSH
67720: LD_INT 4
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 30
67729: PUSH
67730: LD_INT 5
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 30
67739: PUSH
67740: LD_INT 32
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: PPUSH
67753: CALL_OW 72
67757: ST_TO_ADDR
// if not tmp then
67758: LD_VAR 0 5
67762: NOT
67763: IFFALSE 67767
// continue ;
67765: GO 67043
// list := [ ] ;
67767: LD_ADDR_VAR 0 6
67771: PUSH
67772: EMPTY
67773: ST_TO_ADDR
// for j in tmp do
67774: LD_ADDR_VAR 0 3
67778: PUSH
67779: LD_VAR 0 5
67783: PUSH
67784: FOR_IN
67785: IFFALSE 67854
// begin for k in UnitsInside ( j ) do
67787: LD_ADDR_VAR 0 4
67791: PUSH
67792: LD_VAR 0 3
67796: PPUSH
67797: CALL_OW 313
67801: PUSH
67802: FOR_IN
67803: IFFALSE 67850
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67805: LD_VAR 0 4
67809: PPUSH
67810: CALL_OW 257
67814: PUSH
67815: LD_INT 1
67817: EQUAL
67818: PUSH
67819: LD_VAR 0 4
67823: PPUSH
67824: CALL_OW 459
67828: NOT
67829: AND
67830: IFFALSE 67848
// list := list ^ k ;
67832: LD_ADDR_VAR 0 6
67836: PUSH
67837: LD_VAR 0 6
67841: PUSH
67842: LD_VAR 0 4
67846: ADD
67847: ST_TO_ADDR
67848: GO 67802
67850: POP
67851: POP
// end ;
67852: GO 67784
67854: POP
67855: POP
// list := list diff mc_miners [ i ] ;
67856: LD_ADDR_VAR 0 6
67860: PUSH
67861: LD_VAR 0 6
67865: PUSH
67866: LD_EXP 83
67870: PUSH
67871: LD_VAR 0 2
67875: ARRAY
67876: DIFF
67877: ST_TO_ADDR
// if not list then
67878: LD_VAR 0 6
67882: NOT
67883: IFFALSE 67887
// continue ;
67885: GO 67043
// k := mc_mines [ i ] - mc_miners [ i ] ;
67887: LD_ADDR_VAR 0 4
67891: PUSH
67892: LD_EXP 82
67896: PUSH
67897: LD_VAR 0 2
67901: ARRAY
67902: PUSH
67903: LD_EXP 83
67907: PUSH
67908: LD_VAR 0 2
67912: ARRAY
67913: MINUS
67914: ST_TO_ADDR
// if k > list then
67915: LD_VAR 0 4
67919: PUSH
67920: LD_VAR 0 6
67924: GREATER
67925: IFFALSE 67937
// k := list ;
67927: LD_ADDR_VAR 0 4
67931: PUSH
67932: LD_VAR 0 6
67936: ST_TO_ADDR
// for j = 1 to k do
67937: LD_ADDR_VAR 0 3
67941: PUSH
67942: DOUBLE
67943: LD_INT 1
67945: DEC
67946: ST_TO_ADDR
67947: LD_VAR 0 4
67951: PUSH
67952: FOR_TO
67953: IFFALSE 68007
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67955: LD_ADDR_EXP 83
67959: PUSH
67960: LD_EXP 83
67964: PPUSH
67965: LD_VAR 0 2
67969: PUSH
67970: LD_EXP 83
67974: PUSH
67975: LD_VAR 0 2
67979: ARRAY
67980: PUSH
67981: LD_INT 1
67983: PLUS
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PPUSH
67989: LD_VAR 0 6
67993: PUSH
67994: LD_VAR 0 3
67998: ARRAY
67999: PPUSH
68000: CALL 25866 0 3
68004: ST_TO_ADDR
68005: GO 67952
68007: POP
68008: POP
// end ;
68009: GO 67043
68011: POP
68012: POP
// end ;
68013: LD_VAR 0 1
68017: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
68018: LD_INT 0
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
68024: PPUSH
68025: PPUSH
68026: PPUSH
68027: PPUSH
68028: PPUSH
// if not mc_bases then
68029: LD_EXP 69
68033: NOT
68034: IFFALSE 68038
// exit ;
68036: GO 69517
// for i = 1 to mc_bases do
68038: LD_ADDR_VAR 0 2
68042: PUSH
68043: DOUBLE
68044: LD_INT 1
68046: DEC
68047: ST_TO_ADDR
68048: LD_EXP 69
68052: PUSH
68053: FOR_TO
68054: IFFALSE 69515
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68056: LD_EXP 69
68060: PUSH
68061: LD_VAR 0 2
68065: ARRAY
68066: NOT
68067: PUSH
68068: LD_EXP 76
68072: PUSH
68073: LD_VAR 0 2
68077: ARRAY
68078: OR
68079: IFFALSE 68083
// continue ;
68081: GO 68053
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68083: LD_EXP 85
68087: PUSH
68088: LD_VAR 0 2
68092: ARRAY
68093: NOT
68094: PUSH
68095: LD_EXP 86
68099: PUSH
68100: LD_VAR 0 2
68104: ARRAY
68105: AND
68106: IFFALSE 68144
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
68108: LD_ADDR_EXP 86
68112: PUSH
68113: LD_EXP 86
68117: PPUSH
68118: LD_VAR 0 2
68122: PPUSH
68123: EMPTY
68124: PPUSH
68125: CALL_OW 1
68129: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
68130: LD_VAR 0 2
68134: PPUSH
68135: LD_INT 107
68137: PPUSH
68138: CALL 63614 0 2
// continue ;
68142: GO 68053
// end ; target := [ ] ;
68144: LD_ADDR_VAR 0 5
68148: PUSH
68149: EMPTY
68150: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
68151: LD_ADDR_VAR 0 3
68155: PUSH
68156: DOUBLE
68157: LD_EXP 85
68161: PUSH
68162: LD_VAR 0 2
68166: ARRAY
68167: INC
68168: ST_TO_ADDR
68169: LD_INT 1
68171: PUSH
68172: FOR_DOWNTO
68173: IFFALSE 68433
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
68175: LD_EXP 85
68179: PUSH
68180: LD_VAR 0 2
68184: ARRAY
68185: PUSH
68186: LD_VAR 0 3
68190: ARRAY
68191: PUSH
68192: LD_INT 2
68194: ARRAY
68195: PPUSH
68196: LD_EXP 85
68200: PUSH
68201: LD_VAR 0 2
68205: ARRAY
68206: PUSH
68207: LD_VAR 0 3
68211: ARRAY
68212: PUSH
68213: LD_INT 3
68215: ARRAY
68216: PPUSH
68217: CALL_OW 488
68221: PUSH
68222: LD_EXP 85
68226: PUSH
68227: LD_VAR 0 2
68231: ARRAY
68232: PUSH
68233: LD_VAR 0 3
68237: ARRAY
68238: PUSH
68239: LD_INT 2
68241: ARRAY
68242: PPUSH
68243: LD_EXP 85
68247: PUSH
68248: LD_VAR 0 2
68252: ARRAY
68253: PUSH
68254: LD_VAR 0 3
68258: ARRAY
68259: PUSH
68260: LD_INT 3
68262: ARRAY
68263: PPUSH
68264: CALL_OW 284
68268: PUSH
68269: LD_INT 0
68271: EQUAL
68272: AND
68273: IFFALSE 68328
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
68275: LD_ADDR_VAR 0 4
68279: PUSH
68280: LD_EXP 85
68284: PUSH
68285: LD_VAR 0 2
68289: ARRAY
68290: PPUSH
68291: LD_VAR 0 3
68295: PPUSH
68296: CALL_OW 3
68300: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
68301: LD_ADDR_EXP 85
68305: PUSH
68306: LD_EXP 85
68310: PPUSH
68311: LD_VAR 0 2
68315: PPUSH
68316: LD_VAR 0 4
68320: PPUSH
68321: CALL_OW 1
68325: ST_TO_ADDR
// continue ;
68326: GO 68172
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
68328: LD_EXP 69
68332: PUSH
68333: LD_VAR 0 2
68337: ARRAY
68338: PUSH
68339: LD_INT 1
68341: ARRAY
68342: PPUSH
68343: CALL_OW 255
68347: PPUSH
68348: LD_EXP 85
68352: PUSH
68353: LD_VAR 0 2
68357: ARRAY
68358: PUSH
68359: LD_VAR 0 3
68363: ARRAY
68364: PUSH
68365: LD_INT 2
68367: ARRAY
68368: PPUSH
68369: LD_EXP 85
68373: PUSH
68374: LD_VAR 0 2
68378: ARRAY
68379: PUSH
68380: LD_VAR 0 3
68384: ARRAY
68385: PUSH
68386: LD_INT 3
68388: ARRAY
68389: PPUSH
68390: LD_INT 20
68392: PPUSH
68393: CALL 26360 0 4
68397: PUSH
68398: LD_INT 4
68400: ARRAY
68401: PUSH
68402: LD_INT 0
68404: EQUAL
68405: IFFALSE 68431
// begin target := mc_crates [ i ] [ j ] ;
68407: LD_ADDR_VAR 0 5
68411: PUSH
68412: LD_EXP 85
68416: PUSH
68417: LD_VAR 0 2
68421: ARRAY
68422: PUSH
68423: LD_VAR 0 3
68427: ARRAY
68428: ST_TO_ADDR
// break ;
68429: GO 68433
// end ; end ;
68431: GO 68172
68433: POP
68434: POP
// if not target then
68435: LD_VAR 0 5
68439: NOT
68440: IFFALSE 68444
// continue ;
68442: GO 68053
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
68444: LD_ADDR_VAR 0 6
68448: PUSH
68449: LD_EXP 88
68453: PUSH
68454: LD_VAR 0 2
68458: ARRAY
68459: PPUSH
68460: LD_INT 2
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: LD_INT 58
68468: PUSH
68469: EMPTY
68470: LIST
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 61
68478: PUSH
68479: EMPTY
68480: LIST
68481: PUSH
68482: LD_INT 33
68484: PUSH
68485: LD_INT 5
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 33
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 34
68514: PUSH
68515: LD_INT 32
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 34
68524: PUSH
68525: LD_INT 51
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 34
68534: PUSH
68535: LD_INT 12
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PPUSH
68552: CALL_OW 72
68556: ST_TO_ADDR
// if not cargo then
68557: LD_VAR 0 6
68561: NOT
68562: IFFALSE 69050
// begin if mc_crates_collector [ i ] < 5 then
68564: LD_EXP 86
68568: PUSH
68569: LD_VAR 0 2
68573: ARRAY
68574: PUSH
68575: LD_INT 5
68577: LESS
68578: IFFALSE 68864
// begin if mc_ape [ i ] then
68580: LD_EXP 98
68584: PUSH
68585: LD_VAR 0 2
68589: ARRAY
68590: IFFALSE 68637
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
68592: LD_ADDR_VAR 0 4
68596: PUSH
68597: LD_EXP 98
68601: PUSH
68602: LD_VAR 0 2
68606: ARRAY
68607: PPUSH
68608: LD_INT 25
68610: PUSH
68611: LD_INT 16
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 24
68620: PUSH
68621: LD_INT 750
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PPUSH
68632: CALL_OW 72
68636: ST_TO_ADDR
// if not tmp then
68637: LD_VAR 0 4
68641: NOT
68642: IFFALSE 68691
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
68644: LD_ADDR_VAR 0 4
68648: PUSH
68649: LD_EXP 69
68653: PUSH
68654: LD_VAR 0 2
68658: ARRAY
68659: PPUSH
68660: LD_INT 25
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 24
68672: PUSH
68673: LD_INT 750
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PPUSH
68684: CALL_OW 72
68688: ST_TO_ADDR
68689: GO 68752
// if tmp < 5 then
68691: LD_VAR 0 4
68695: PUSH
68696: LD_INT 5
68698: LESS
68699: IFFALSE 68752
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
68701: LD_ADDR_VAR 0 4
68705: PUSH
68706: LD_VAR 0 4
68710: PUSH
68711: LD_EXP 69
68715: PUSH
68716: LD_VAR 0 2
68720: ARRAY
68721: PPUSH
68722: LD_INT 25
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 24
68734: PUSH
68735: LD_INT 750
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 72
68750: UNION
68751: ST_TO_ADDR
// if not tmp then
68752: LD_VAR 0 4
68756: NOT
68757: IFFALSE 68761
// continue ;
68759: GO 68053
// for j in tmp do
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_VAR 0 4
68770: PUSH
68771: FOR_IN
68772: IFFALSE 68862
// if not GetTag ( j ) then
68774: LD_VAR 0 3
68778: PPUSH
68779: CALL_OW 110
68783: NOT
68784: IFFALSE 68860
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68786: LD_ADDR_EXP 86
68790: PUSH
68791: LD_EXP 86
68795: PPUSH
68796: LD_VAR 0 2
68800: PUSH
68801: LD_EXP 86
68805: PUSH
68806: LD_VAR 0 2
68810: ARRAY
68811: PUSH
68812: LD_INT 1
68814: PLUS
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PPUSH
68820: LD_VAR 0 3
68824: PPUSH
68825: CALL 25866 0 3
68829: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68830: LD_VAR 0 3
68834: PPUSH
68835: LD_INT 107
68837: PPUSH
68838: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68842: LD_EXP 86
68846: PUSH
68847: LD_VAR 0 2
68851: ARRAY
68852: PUSH
68853: LD_INT 5
68855: GREATEREQUAL
68856: IFFALSE 68860
// break ;
68858: GO 68862
// end ;
68860: GO 68771
68862: POP
68863: POP
// end ; if mc_crates_collector [ i ] and target then
68864: LD_EXP 86
68868: PUSH
68869: LD_VAR 0 2
68873: ARRAY
68874: PUSH
68875: LD_VAR 0 5
68879: AND
68880: IFFALSE 69048
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68882: LD_EXP 86
68886: PUSH
68887: LD_VAR 0 2
68891: ARRAY
68892: PUSH
68893: LD_VAR 0 5
68897: PUSH
68898: LD_INT 1
68900: ARRAY
68901: LESS
68902: IFFALSE 68922
// tmp := mc_crates_collector [ i ] else
68904: LD_ADDR_VAR 0 4
68908: PUSH
68909: LD_EXP 86
68913: PUSH
68914: LD_VAR 0 2
68918: ARRAY
68919: ST_TO_ADDR
68920: GO 68936
// tmp := target [ 1 ] ;
68922: LD_ADDR_VAR 0 4
68926: PUSH
68927: LD_VAR 0 5
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: ST_TO_ADDR
// for j = 1 to tmp do
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: DOUBLE
68942: LD_INT 1
68944: DEC
68945: ST_TO_ADDR
68946: LD_VAR 0 4
68950: PUSH
68951: FOR_TO
68952: IFFALSE 69046
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
68954: LD_EXP 86
68958: PUSH
68959: LD_VAR 0 2
68963: ARRAY
68964: PUSH
68965: LD_VAR 0 3
68969: ARRAY
68970: PPUSH
68971: CALL_OW 310
68975: IFFALSE 68998
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
68977: LD_EXP 86
68981: PUSH
68982: LD_VAR 0 2
68986: ARRAY
68987: PUSH
68988: LD_VAR 0 3
68992: ARRAY
68993: PPUSH
68994: CALL_OW 122
// wait ( 3 ) ;
68998: LD_INT 3
69000: PPUSH
69001: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
69005: LD_EXP 86
69009: PUSH
69010: LD_VAR 0 2
69014: ARRAY
69015: PUSH
69016: LD_VAR 0 3
69020: ARRAY
69021: PPUSH
69022: LD_VAR 0 5
69026: PUSH
69027: LD_INT 2
69029: ARRAY
69030: PPUSH
69031: LD_VAR 0 5
69035: PUSH
69036: LD_INT 3
69038: ARRAY
69039: PPUSH
69040: CALL_OW 117
// end ;
69044: GO 68951
69046: POP
69047: POP
// end ; end else
69048: GO 69513
// begin for j in cargo do
69050: LD_ADDR_VAR 0 3
69054: PUSH
69055: LD_VAR 0 6
69059: PUSH
69060: FOR_IN
69061: IFFALSE 69511
// begin if GetTag ( j ) <> 0 then
69063: LD_VAR 0 3
69067: PPUSH
69068: CALL_OW 110
69072: PUSH
69073: LD_INT 0
69075: NONEQUAL
69076: IFFALSE 69080
// continue ;
69078: GO 69060
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
69080: LD_VAR 0 3
69084: PPUSH
69085: CALL_OW 262
69089: PUSH
69090: LD_INT 2
69092: EQUAL
69093: PUSH
69094: LD_VAR 0 3
69098: PPUSH
69099: CALL_OW 261
69103: PUSH
69104: LD_INT 15
69106: LESS
69107: AND
69108: IFFALSE 69112
// continue ;
69110: GO 69060
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
69112: LD_VAR 0 3
69116: PPUSH
69117: CALL_OW 262
69121: PUSH
69122: LD_INT 1
69124: EQUAL
69125: PUSH
69126: LD_VAR 0 3
69130: PPUSH
69131: CALL_OW 261
69135: PUSH
69136: LD_INT 10
69138: LESS
69139: AND
69140: IFFALSE 69450
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69142: LD_ADDR_VAR 0 7
69146: PUSH
69147: LD_EXP 69
69151: PUSH
69152: LD_VAR 0 2
69156: ARRAY
69157: PPUSH
69158: LD_INT 2
69160: PUSH
69161: LD_INT 30
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 30
69173: PUSH
69174: LD_INT 1
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: PPUSH
69186: CALL_OW 72
69190: ST_TO_ADDR
// if not depot then
69191: LD_VAR 0 7
69195: NOT
69196: IFFALSE 69200
// continue ;
69198: GO 69060
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
69200: LD_VAR 0 3
69204: PPUSH
69205: LD_VAR 0 7
69209: PPUSH
69210: LD_VAR 0 3
69214: PPUSH
69215: CALL_OW 74
69219: PPUSH
69220: CALL_OW 296
69224: PUSH
69225: LD_INT 6
69227: LESS
69228: IFFALSE 69244
// SetFuel ( j , 100 ) else
69230: LD_VAR 0 3
69234: PPUSH
69235: LD_INT 100
69237: PPUSH
69238: CALL_OW 240
69242: GO 69450
// if GetFuel ( j ) = 0 then
69244: LD_VAR 0 3
69248: PPUSH
69249: CALL_OW 261
69253: PUSH
69254: LD_INT 0
69256: EQUAL
69257: IFFALSE 69450
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
69259: LD_ADDR_EXP 88
69263: PUSH
69264: LD_EXP 88
69268: PPUSH
69269: LD_VAR 0 2
69273: PPUSH
69274: LD_EXP 88
69278: PUSH
69279: LD_VAR 0 2
69283: ARRAY
69284: PUSH
69285: LD_VAR 0 3
69289: DIFF
69290: PPUSH
69291: CALL_OW 1
69295: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
69296: LD_VAR 0 3
69300: PPUSH
69301: CALL_OW 263
69305: PUSH
69306: LD_INT 1
69308: EQUAL
69309: IFFALSE 69325
// ComExitVehicle ( IsInUnit ( j ) ) ;
69311: LD_VAR 0 3
69315: PPUSH
69316: CALL_OW 310
69320: PPUSH
69321: CALL_OW 121
// if GetControl ( j ) = control_remote then
69325: LD_VAR 0 3
69329: PPUSH
69330: CALL_OW 263
69334: PUSH
69335: LD_INT 2
69337: EQUAL
69338: IFFALSE 69349
// ComUnlink ( j ) ;
69340: LD_VAR 0 3
69344: PPUSH
69345: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
69349: LD_ADDR_VAR 0 8
69353: PUSH
69354: LD_VAR 0 2
69358: PPUSH
69359: LD_INT 3
69361: PPUSH
69362: CALL 77146 0 2
69366: ST_TO_ADDR
// if fac then
69367: LD_VAR 0 8
69371: IFFALSE 69448
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
69373: LD_ADDR_VAR 0 9
69377: PUSH
69378: LD_VAR 0 8
69382: PPUSH
69383: LD_VAR 0 3
69387: PPUSH
69388: CALL_OW 265
69392: PPUSH
69393: LD_VAR 0 3
69397: PPUSH
69398: CALL_OW 262
69402: PPUSH
69403: LD_VAR 0 3
69407: PPUSH
69408: CALL_OW 263
69412: PPUSH
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 264
69422: PPUSH
69423: CALL 23031 0 5
69427: ST_TO_ADDR
// if components then
69428: LD_VAR 0 9
69432: IFFALSE 69448
// MC_InsertProduceList ( i , components ) ;
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 9
69443: PPUSH
69444: CALL 76713 0 2
// end ; continue ;
69448: GO 69060
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69450: LD_VAR 0 3
69454: PPUSH
69455: LD_INT 1
69457: PPUSH
69458: CALL_OW 289
69462: PUSH
69463: LD_INT 100
69465: LESS
69466: PUSH
69467: LD_VAR 0 3
69471: PPUSH
69472: CALL_OW 314
69476: NOT
69477: AND
69478: IFFALSE 69507
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69480: LD_VAR 0 3
69484: PPUSH
69485: LD_VAR 0 5
69489: PUSH
69490: LD_INT 2
69492: ARRAY
69493: PPUSH
69494: LD_VAR 0 5
69498: PUSH
69499: LD_INT 3
69501: ARRAY
69502: PPUSH
69503: CALL_OW 117
// break ;
69507: GO 69511
// end ;
69509: GO 69060
69511: POP
69512: POP
// end ; end ;
69513: GO 68053
69515: POP
69516: POP
// end ;
69517: LD_VAR 0 1
69521: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69522: LD_INT 0
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
// if not mc_bases then
69528: LD_EXP 69
69532: NOT
69533: IFFALSE 69537
// exit ;
69535: GO 69698
// for i = 1 to mc_bases do
69537: LD_ADDR_VAR 0 2
69541: PUSH
69542: DOUBLE
69543: LD_INT 1
69545: DEC
69546: ST_TO_ADDR
69547: LD_EXP 69
69551: PUSH
69552: FOR_TO
69553: IFFALSE 69696
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
69555: LD_ADDR_VAR 0 4
69559: PUSH
69560: LD_EXP 88
69564: PUSH
69565: LD_VAR 0 2
69569: ARRAY
69570: PUSH
69571: LD_EXP 91
69575: PUSH
69576: LD_VAR 0 2
69580: ARRAY
69581: ADD
69582: PPUSH
69583: LD_INT 33
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PPUSH
69593: CALL_OW 72
69597: ST_TO_ADDR
// if tmp then
69598: LD_VAR 0 4
69602: IFFALSE 69694
// for j in tmp do
69604: LD_ADDR_VAR 0 3
69608: PUSH
69609: LD_VAR 0 4
69613: PUSH
69614: FOR_IN
69615: IFFALSE 69692
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69617: LD_VAR 0 3
69621: PPUSH
69622: CALL_OW 312
69626: NOT
69627: PUSH
69628: LD_VAR 0 3
69632: PPUSH
69633: CALL_OW 256
69637: PUSH
69638: LD_INT 250
69640: GREATEREQUAL
69641: AND
69642: IFFALSE 69655
// Connect ( j ) else
69644: LD_VAR 0 3
69648: PPUSH
69649: CALL 28384 0 1
69653: GO 69690
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69655: LD_VAR 0 3
69659: PPUSH
69660: CALL_OW 256
69664: PUSH
69665: LD_INT 250
69667: LESS
69668: PUSH
69669: LD_VAR 0 3
69673: PPUSH
69674: CALL_OW 312
69678: AND
69679: IFFALSE 69690
// ComUnlink ( j ) ;
69681: LD_VAR 0 3
69685: PPUSH
69686: CALL_OW 136
69690: GO 69614
69692: POP
69693: POP
// end ;
69694: GO 69552
69696: POP
69697: POP
// end ;
69698: LD_VAR 0 1
69702: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69703: LD_INT 0
69705: PPUSH
69706: PPUSH
69707: PPUSH
69708: PPUSH
69709: PPUSH
// if not mc_bases then
69710: LD_EXP 69
69714: NOT
69715: IFFALSE 69719
// exit ;
69717: GO 70179
// for i = 1 to mc_bases do
69719: LD_ADDR_VAR 0 2
69723: PUSH
69724: DOUBLE
69725: LD_INT 1
69727: DEC
69728: ST_TO_ADDR
69729: LD_EXP 69
69733: PUSH
69734: FOR_TO
69735: IFFALSE 70177
// begin if not mc_produce [ i ] then
69737: LD_EXP 90
69741: PUSH
69742: LD_VAR 0 2
69746: ARRAY
69747: NOT
69748: IFFALSE 69752
// continue ;
69750: GO 69734
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69752: LD_ADDR_VAR 0 5
69756: PUSH
69757: LD_EXP 69
69761: PUSH
69762: LD_VAR 0 2
69766: ARRAY
69767: PPUSH
69768: LD_INT 30
69770: PUSH
69771: LD_INT 3
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PPUSH
69778: CALL_OW 72
69782: ST_TO_ADDR
// if not fac then
69783: LD_VAR 0 5
69787: NOT
69788: IFFALSE 69792
// continue ;
69790: GO 69734
// for j in fac do
69792: LD_ADDR_VAR 0 3
69796: PUSH
69797: LD_VAR 0 5
69801: PUSH
69802: FOR_IN
69803: IFFALSE 70173
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
69805: LD_VAR 0 3
69809: PPUSH
69810: CALL_OW 461
69814: PUSH
69815: LD_INT 2
69817: NONEQUAL
69818: PUSH
69819: LD_VAR 0 3
69823: PPUSH
69824: LD_INT 15
69826: PPUSH
69827: CALL 28057 0 2
69831: PUSH
69832: LD_INT 4
69834: ARRAY
69835: OR
69836: PUSH
69837: LD_VAR 0 3
69841: PPUSH
69842: CALL_OW 313
69846: PUSH
69847: LD_INT 0
69849: EQUAL
69850: OR
69851: IFFALSE 69855
// continue ;
69853: GO 69802
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69855: LD_VAR 0 3
69859: PPUSH
69860: LD_EXP 90
69864: PUSH
69865: LD_VAR 0 2
69869: ARRAY
69870: PUSH
69871: LD_INT 1
69873: ARRAY
69874: PUSH
69875: LD_INT 1
69877: ARRAY
69878: PPUSH
69879: LD_EXP 90
69883: PUSH
69884: LD_VAR 0 2
69888: ARRAY
69889: PUSH
69890: LD_INT 1
69892: ARRAY
69893: PUSH
69894: LD_INT 2
69896: ARRAY
69897: PPUSH
69898: LD_EXP 90
69902: PUSH
69903: LD_VAR 0 2
69907: ARRAY
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: LD_INT 3
69915: ARRAY
69916: PPUSH
69917: LD_EXP 90
69921: PUSH
69922: LD_VAR 0 2
69926: ARRAY
69927: PUSH
69928: LD_INT 1
69930: ARRAY
69931: PUSH
69932: LD_INT 4
69934: ARRAY
69935: PPUSH
69936: CALL_OW 448
69940: PUSH
69941: LD_VAR 0 3
69945: PPUSH
69946: LD_EXP 90
69950: PUSH
69951: LD_VAR 0 2
69955: ARRAY
69956: PUSH
69957: LD_INT 1
69959: ARRAY
69960: PUSH
69961: LD_INT 1
69963: ARRAY
69964: PUSH
69965: LD_EXP 90
69969: PUSH
69970: LD_VAR 0 2
69974: ARRAY
69975: PUSH
69976: LD_INT 1
69978: ARRAY
69979: PUSH
69980: LD_INT 2
69982: ARRAY
69983: PUSH
69984: LD_EXP 90
69988: PUSH
69989: LD_VAR 0 2
69993: ARRAY
69994: PUSH
69995: LD_INT 1
69997: ARRAY
69998: PUSH
69999: LD_INT 3
70001: ARRAY
70002: PUSH
70003: LD_EXP 90
70007: PUSH
70008: LD_VAR 0 2
70012: ARRAY
70013: PUSH
70014: LD_INT 1
70016: ARRAY
70017: PUSH
70018: LD_INT 4
70020: ARRAY
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: PPUSH
70028: CALL 31598 0 2
70032: AND
70033: IFFALSE 70171
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
70035: LD_VAR 0 3
70039: PPUSH
70040: LD_EXP 90
70044: PUSH
70045: LD_VAR 0 2
70049: ARRAY
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PUSH
70055: LD_INT 1
70057: ARRAY
70058: PPUSH
70059: LD_EXP 90
70063: PUSH
70064: LD_VAR 0 2
70068: ARRAY
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PUSH
70074: LD_INT 2
70076: ARRAY
70077: PPUSH
70078: LD_EXP 90
70082: PUSH
70083: LD_VAR 0 2
70087: ARRAY
70088: PUSH
70089: LD_INT 1
70091: ARRAY
70092: PUSH
70093: LD_INT 3
70095: ARRAY
70096: PPUSH
70097: LD_EXP 90
70101: PUSH
70102: LD_VAR 0 2
70106: ARRAY
70107: PUSH
70108: LD_INT 1
70110: ARRAY
70111: PUSH
70112: LD_INT 4
70114: ARRAY
70115: PPUSH
70116: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
70120: LD_ADDR_VAR 0 4
70124: PUSH
70125: LD_EXP 90
70129: PUSH
70130: LD_VAR 0 2
70134: ARRAY
70135: PPUSH
70136: LD_INT 1
70138: PPUSH
70139: CALL_OW 3
70143: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
70144: LD_ADDR_EXP 90
70148: PUSH
70149: LD_EXP 90
70153: PPUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: LD_VAR 0 4
70163: PPUSH
70164: CALL_OW 1
70168: ST_TO_ADDR
// break ;
70169: GO 70173
// end ; end ;
70171: GO 69802
70173: POP
70174: POP
// end ;
70175: GO 69734
70177: POP
70178: POP
// end ;
70179: LD_VAR 0 1
70183: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
70184: LD_INT 0
70186: PPUSH
70187: PPUSH
70188: PPUSH
// if not mc_bases then
70189: LD_EXP 69
70193: NOT
70194: IFFALSE 70198
// exit ;
70196: GO 70287
// for i = 1 to mc_bases do
70198: LD_ADDR_VAR 0 2
70202: PUSH
70203: DOUBLE
70204: LD_INT 1
70206: DEC
70207: ST_TO_ADDR
70208: LD_EXP 69
70212: PUSH
70213: FOR_TO
70214: IFFALSE 70285
// begin if mc_attack [ i ] then
70216: LD_EXP 89
70220: PUSH
70221: LD_VAR 0 2
70225: ARRAY
70226: IFFALSE 70283
// begin tmp := mc_attack [ i ] [ 1 ] ;
70228: LD_ADDR_VAR 0 3
70232: PUSH
70233: LD_EXP 89
70237: PUSH
70238: LD_VAR 0 2
70242: ARRAY
70243: PUSH
70244: LD_INT 1
70246: ARRAY
70247: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
70248: LD_ADDR_EXP 89
70252: PUSH
70253: LD_EXP 89
70257: PPUSH
70258: LD_VAR 0 2
70262: PPUSH
70263: EMPTY
70264: PPUSH
70265: CALL_OW 1
70269: ST_TO_ADDR
// Attack ( tmp ) ;
70270: LD_VAR 0 3
70274: PPUSH
70275: CALL 53702 0 1
// exit ;
70279: POP
70280: POP
70281: GO 70287
// end ; end ;
70283: GO 70213
70285: POP
70286: POP
// end ;
70287: LD_VAR 0 1
70291: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
70292: LD_INT 0
70294: PPUSH
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
// if not mc_bases then
70301: LD_EXP 69
70305: NOT
70306: IFFALSE 70310
// exit ;
70308: GO 70685
// for i = 1 to mc_bases do
70310: LD_ADDR_VAR 0 2
70314: PUSH
70315: DOUBLE
70316: LD_INT 1
70318: DEC
70319: ST_TO_ADDR
70320: LD_EXP 69
70324: PUSH
70325: FOR_TO
70326: IFFALSE 70683
// begin if not mc_bases [ i ] then
70328: LD_EXP 69
70332: PUSH
70333: LD_VAR 0 2
70337: ARRAY
70338: NOT
70339: IFFALSE 70343
// continue ;
70341: GO 70325
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
70343: LD_ADDR_VAR 0 7
70347: PUSH
70348: LD_EXP 69
70352: PUSH
70353: LD_VAR 0 2
70357: ARRAY
70358: PUSH
70359: LD_INT 1
70361: ARRAY
70362: PPUSH
70363: CALL 22335 0 1
70367: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
70368: LD_ADDR_EXP 92
70372: PUSH
70373: LD_EXP 92
70377: PPUSH
70378: LD_VAR 0 2
70382: PPUSH
70383: LD_EXP 69
70387: PUSH
70388: LD_VAR 0 2
70392: ARRAY
70393: PUSH
70394: LD_INT 1
70396: ARRAY
70397: PPUSH
70398: CALL_OW 255
70402: PPUSH
70403: LD_EXP 94
70407: PUSH
70408: LD_VAR 0 2
70412: ARRAY
70413: PPUSH
70414: CALL 20295 0 2
70418: PPUSH
70419: CALL_OW 1
70423: ST_TO_ADDR
// if not mc_scan [ i ] then
70424: LD_EXP 92
70428: PUSH
70429: LD_VAR 0 2
70433: ARRAY
70434: NOT
70435: IFFALSE 70590
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70437: LD_ADDR_VAR 0 4
70441: PUSH
70442: LD_EXP 69
70446: PUSH
70447: LD_VAR 0 2
70451: ARRAY
70452: PPUSH
70453: LD_INT 2
70455: PUSH
70456: LD_INT 25
70458: PUSH
70459: LD_INT 5
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 25
70468: PUSH
70469: LD_INT 8
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 25
70478: PUSH
70479: LD_INT 9
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: PPUSH
70492: CALL_OW 72
70496: ST_TO_ADDR
// if not tmp then
70497: LD_VAR 0 4
70501: NOT
70502: IFFALSE 70506
// continue ;
70504: GO 70325
// for j in tmp do
70506: LD_ADDR_VAR 0 3
70510: PUSH
70511: LD_VAR 0 4
70515: PUSH
70516: FOR_IN
70517: IFFALSE 70588
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70519: LD_VAR 0 3
70523: PPUSH
70524: CALL_OW 310
70528: PPUSH
70529: CALL_OW 266
70533: PUSH
70534: LD_INT 5
70536: EQUAL
70537: PUSH
70538: LD_VAR 0 3
70542: PPUSH
70543: CALL_OW 257
70547: PUSH
70548: LD_INT 1
70550: EQUAL
70551: AND
70552: PUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: CALL_OW 459
70562: NOT
70563: AND
70564: PUSH
70565: LD_VAR 0 7
70569: AND
70570: IFFALSE 70586
// ComChangeProfession ( j , class ) ;
70572: LD_VAR 0 3
70576: PPUSH
70577: LD_VAR 0 7
70581: PPUSH
70582: CALL_OW 123
70586: GO 70516
70588: POP
70589: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
70590: LD_EXP 92
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PUSH
70601: LD_EXP 91
70605: PUSH
70606: LD_VAR 0 2
70610: ARRAY
70611: AND
70612: IFFALSE 70681
// begin tmp := mc_defender [ i ] ;
70614: LD_ADDR_VAR 0 4
70618: PUSH
70619: LD_EXP 91
70623: PUSH
70624: LD_VAR 0 2
70628: ARRAY
70629: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
70630: LD_ADDR_EXP 91
70634: PUSH
70635: LD_EXP 91
70639: PPUSH
70640: LD_VAR 0 2
70644: PPUSH
70645: EMPTY
70646: PPUSH
70647: CALL_OW 1
70651: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70652: LD_VAR 0 2
70656: PPUSH
70657: LD_VAR 0 4
70661: PPUSH
70662: LD_EXP 92
70666: PUSH
70667: LD_VAR 0 2
70671: ARRAY
70672: PPUSH
70673: CALL 20828 0 3
// exit ;
70677: POP
70678: POP
70679: GO 70685
// end ; end ;
70681: GO 70325
70683: POP
70684: POP
// end ;
70685: LD_VAR 0 1
70689: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
70690: LD_INT 0
70692: PPUSH
70693: PPUSH
70694: PPUSH
70695: PPUSH
70696: PPUSH
70697: PPUSH
70698: PPUSH
70699: PPUSH
70700: PPUSH
// if not mc_bases then
70701: LD_EXP 69
70705: NOT
70706: IFFALSE 70710
// exit ;
70708: GO 71654
// for i = 1 to mc_bases do
70710: LD_ADDR_VAR 0 2
70714: PUSH
70715: DOUBLE
70716: LD_INT 1
70718: DEC
70719: ST_TO_ADDR
70720: LD_EXP 69
70724: PUSH
70725: FOR_TO
70726: IFFALSE 71652
// begin tmp := mc_lab [ i ] ;
70728: LD_ADDR_VAR 0 6
70732: PUSH
70733: LD_EXP 102
70737: PUSH
70738: LD_VAR 0 2
70742: ARRAY
70743: ST_TO_ADDR
// if not tmp then
70744: LD_VAR 0 6
70748: NOT
70749: IFFALSE 70753
// continue ;
70751: GO 70725
// for j in tmp do
70753: LD_ADDR_VAR 0 3
70757: PUSH
70758: LD_VAR 0 6
70762: PUSH
70763: FOR_IN
70764: IFFALSE 71648
// begin side := GetSide ( j ) ;
70766: LD_ADDR_VAR 0 4
70770: PUSH
70771: LD_VAR 0 3
70775: PPUSH
70776: CALL_OW 255
70780: ST_TO_ADDR
// if not mc_tech [ side ] then
70781: LD_EXP 96
70785: PUSH
70786: LD_VAR 0 4
70790: ARRAY
70791: NOT
70792: IFFALSE 70796
// continue ;
70794: GO 70763
// if BuildingStatus ( j ) = bs_idle then
70796: LD_VAR 0 3
70800: PPUSH
70801: CALL_OW 461
70805: PUSH
70806: LD_INT 2
70808: EQUAL
70809: IFFALSE 70882
// for t in mc_tech [ side ] do
70811: LD_ADDR_VAR 0 5
70815: PUSH
70816: LD_EXP 96
70820: PUSH
70821: LD_VAR 0 4
70825: ARRAY
70826: PUSH
70827: FOR_IN
70828: IFFALSE 70880
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70830: LD_VAR 0 3
70834: PPUSH
70835: LD_VAR 0 5
70839: PPUSH
70840: CALL_OW 430
70844: PUSH
70845: LD_VAR 0 4
70849: PPUSH
70850: LD_VAR 0 5
70854: PPUSH
70855: CALL 19400 0 2
70859: AND
70860: IFFALSE 70878
// begin ComResearch ( j , t ) ;
70862: LD_VAR 0 3
70866: PPUSH
70867: LD_VAR 0 5
70871: PPUSH
70872: CALL_OW 124
// break ;
70876: GO 70880
// end ;
70878: GO 70827
70880: POP
70881: POP
// if BuildingStatus ( j ) = bs_need_ape then
70882: LD_VAR 0 3
70886: PPUSH
70887: CALL_OW 461
70891: PUSH
70892: LD_INT 10
70894: EQUAL
70895: IFFALSE 71483
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70897: LD_EXP 98
70901: PUSH
70902: LD_VAR 0 2
70906: ARRAY
70907: NOT
70908: PUSH
70909: LD_EXP 99
70913: PUSH
70914: LD_VAR 0 2
70918: ARRAY
70919: NOT
70920: AND
70921: PUSH
70922: LD_EXP 96
70926: PUSH
70927: LD_VAR 0 4
70931: ARRAY
70932: PUSH
70933: LD_INT 1
70935: GREATER
70936: AND
70937: IFFALSE 71068
// begin ComCancel ( j ) ;
70939: LD_VAR 0 3
70943: PPUSH
70944: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70948: LD_ADDR_EXP 96
70952: PUSH
70953: LD_EXP 96
70957: PPUSH
70958: LD_VAR 0 4
70962: PPUSH
70963: LD_EXP 96
70967: PUSH
70968: LD_VAR 0 4
70972: ARRAY
70973: PPUSH
70974: LD_EXP 96
70978: PUSH
70979: LD_VAR 0 4
70983: ARRAY
70984: PUSH
70985: LD_INT 1
70987: MINUS
70988: PPUSH
70989: LD_EXP 96
70993: PUSH
70994: LD_VAR 0 4
70998: ARRAY
70999: PPUSH
71000: LD_INT 0
71002: PPUSH
71003: CALL 24849 0 4
71007: PPUSH
71008: CALL_OW 1
71012: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
71013: LD_ADDR_EXP 96
71017: PUSH
71018: LD_EXP 96
71022: PPUSH
71023: LD_VAR 0 4
71027: PPUSH
71028: LD_EXP 96
71032: PUSH
71033: LD_VAR 0 4
71037: ARRAY
71038: PPUSH
71039: LD_EXP 96
71043: PUSH
71044: LD_VAR 0 4
71048: ARRAY
71049: PPUSH
71050: LD_INT 1
71052: PPUSH
71053: LD_INT 0
71055: PPUSH
71056: CALL 24849 0 4
71060: PPUSH
71061: CALL_OW 1
71065: ST_TO_ADDR
// continue ;
71066: GO 70763
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
71068: LD_EXP 98
71072: PUSH
71073: LD_VAR 0 2
71077: ARRAY
71078: PUSH
71079: LD_EXP 99
71083: PUSH
71084: LD_VAR 0 2
71088: ARRAY
71089: NOT
71090: AND
71091: IFFALSE 71218
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71093: LD_ADDR_EXP 99
71097: PUSH
71098: LD_EXP 99
71102: PPUSH
71103: LD_VAR 0 2
71107: PUSH
71108: LD_EXP 99
71112: PUSH
71113: LD_VAR 0 2
71117: ARRAY
71118: PUSH
71119: LD_INT 1
71121: PLUS
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PPUSH
71127: LD_EXP 98
71131: PUSH
71132: LD_VAR 0 2
71136: ARRAY
71137: PUSH
71138: LD_INT 1
71140: ARRAY
71141: PPUSH
71142: CALL 25866 0 3
71146: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71147: LD_EXP 98
71151: PUSH
71152: LD_VAR 0 2
71156: ARRAY
71157: PUSH
71158: LD_INT 1
71160: ARRAY
71161: PPUSH
71162: LD_INT 112
71164: PPUSH
71165: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71169: LD_ADDR_VAR 0 9
71173: PUSH
71174: LD_EXP 98
71178: PUSH
71179: LD_VAR 0 2
71183: ARRAY
71184: PPUSH
71185: LD_INT 1
71187: PPUSH
71188: CALL_OW 3
71192: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71193: LD_ADDR_EXP 98
71197: PUSH
71198: LD_EXP 98
71202: PPUSH
71203: LD_VAR 0 2
71207: PPUSH
71208: LD_VAR 0 9
71212: PPUSH
71213: CALL_OW 1
71217: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71218: LD_EXP 98
71222: PUSH
71223: LD_VAR 0 2
71227: ARRAY
71228: PUSH
71229: LD_EXP 99
71233: PUSH
71234: LD_VAR 0 2
71238: ARRAY
71239: AND
71240: PUSH
71241: LD_EXP 99
71245: PUSH
71246: LD_VAR 0 2
71250: ARRAY
71251: PUSH
71252: LD_INT 1
71254: ARRAY
71255: PPUSH
71256: CALL_OW 310
71260: NOT
71261: AND
71262: PUSH
71263: LD_VAR 0 3
71267: PPUSH
71268: CALL_OW 313
71272: PUSH
71273: LD_INT 6
71275: EQUAL
71276: AND
71277: IFFALSE 71333
// begin tmp2 := UnitsInside ( j ) ;
71279: LD_ADDR_VAR 0 9
71283: PUSH
71284: LD_VAR 0 3
71288: PPUSH
71289: CALL_OW 313
71293: ST_TO_ADDR
// if tmp2 = 6 then
71294: LD_VAR 0 9
71298: PUSH
71299: LD_INT 6
71301: EQUAL
71302: IFFALSE 71333
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71304: LD_VAR 0 9
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PPUSH
71313: LD_INT 112
71315: PPUSH
71316: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71320: LD_VAR 0 9
71324: PUSH
71325: LD_INT 1
71327: ARRAY
71328: PPUSH
71329: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71333: LD_EXP 99
71337: PUSH
71338: LD_VAR 0 2
71342: ARRAY
71343: PUSH
71344: LD_EXP 99
71348: PUSH
71349: LD_VAR 0 2
71353: ARRAY
71354: PUSH
71355: LD_INT 1
71357: ARRAY
71358: PPUSH
71359: CALL_OW 314
71363: NOT
71364: AND
71365: PUSH
71366: LD_EXP 99
71370: PUSH
71371: LD_VAR 0 2
71375: ARRAY
71376: PUSH
71377: LD_INT 1
71379: ARRAY
71380: PPUSH
71381: CALL_OW 310
71385: NOT
71386: AND
71387: IFFALSE 71413
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71389: LD_EXP 99
71393: PUSH
71394: LD_VAR 0 2
71398: ARRAY
71399: PUSH
71400: LD_INT 1
71402: ARRAY
71403: PPUSH
71404: LD_VAR 0 3
71408: PPUSH
71409: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71413: LD_EXP 99
71417: PUSH
71418: LD_VAR 0 2
71422: ARRAY
71423: PUSH
71424: LD_INT 1
71426: ARRAY
71427: PPUSH
71428: CALL_OW 310
71432: PUSH
71433: LD_EXP 99
71437: PUSH
71438: LD_VAR 0 2
71442: ARRAY
71443: PUSH
71444: LD_INT 1
71446: ARRAY
71447: PPUSH
71448: CALL_OW 310
71452: PPUSH
71453: CALL_OW 461
71457: PUSH
71458: LD_INT 3
71460: NONEQUAL
71461: AND
71462: IFFALSE 71483
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71464: LD_EXP 99
71468: PUSH
71469: LD_VAR 0 2
71473: ARRAY
71474: PUSH
71475: LD_INT 1
71477: ARRAY
71478: PPUSH
71479: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71483: LD_VAR 0 3
71487: PPUSH
71488: CALL_OW 461
71492: PUSH
71493: LD_INT 6
71495: EQUAL
71496: PUSH
71497: LD_VAR 0 6
71501: PUSH
71502: LD_INT 1
71504: GREATER
71505: AND
71506: IFFALSE 71646
// begin sci := [ ] ;
71508: LD_ADDR_VAR 0 8
71512: PUSH
71513: EMPTY
71514: ST_TO_ADDR
// for x in tmp diff j do
71515: LD_ADDR_VAR 0 7
71519: PUSH
71520: LD_VAR 0 6
71524: PUSH
71525: LD_VAR 0 3
71529: DIFF
71530: PUSH
71531: FOR_IN
71532: IFFALSE 71572
// begin if BuildingStatus ( x ) = bs_idle then
71534: LD_VAR 0 7
71538: PPUSH
71539: CALL_OW 461
71543: PUSH
71544: LD_INT 2
71546: EQUAL
71547: IFFALSE 71570
// sci := sci ^ UnitsInside ( x ) ;
71549: LD_ADDR_VAR 0 8
71553: PUSH
71554: LD_VAR 0 8
71558: PUSH
71559: LD_VAR 0 7
71563: PPUSH
71564: CALL_OW 313
71568: ADD
71569: ST_TO_ADDR
// end ;
71570: GO 71531
71572: POP
71573: POP
// if not sci then
71574: LD_VAR 0 8
71578: NOT
71579: IFFALSE 71583
// continue ;
71581: GO 70763
// for x in sci do
71583: LD_ADDR_VAR 0 7
71587: PUSH
71588: LD_VAR 0 8
71592: PUSH
71593: FOR_IN
71594: IFFALSE 71644
// if IsInUnit ( x ) and not HasTask ( x ) then
71596: LD_VAR 0 7
71600: PPUSH
71601: CALL_OW 310
71605: PUSH
71606: LD_VAR 0 7
71610: PPUSH
71611: CALL_OW 314
71615: NOT
71616: AND
71617: IFFALSE 71642
// begin ComExitBuilding ( x ) ;
71619: LD_VAR 0 7
71623: PPUSH
71624: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71628: LD_VAR 0 7
71632: PPUSH
71633: LD_VAR 0 3
71637: PPUSH
71638: CALL_OW 180
// end ;
71642: GO 71593
71644: POP
71645: POP
// end ; end ;
71646: GO 70763
71648: POP
71649: POP
// end ;
71650: GO 70725
71652: POP
71653: POP
// end ;
71654: LD_VAR 0 1
71658: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71659: LD_INT 0
71661: PPUSH
71662: PPUSH
71663: PPUSH
71664: PPUSH
71665: PPUSH
71666: PPUSH
71667: PPUSH
71668: PPUSH
// if not mc_bases or not mc_parking then
71669: LD_EXP 69
71673: NOT
71674: PUSH
71675: LD_EXP 93
71679: NOT
71680: OR
71681: IFFALSE 71685
// exit ;
71683: GO 72343
// for i = 1 to mc_bases do
71685: LD_ADDR_VAR 0 2
71689: PUSH
71690: DOUBLE
71691: LD_INT 1
71693: DEC
71694: ST_TO_ADDR
71695: LD_EXP 69
71699: PUSH
71700: FOR_TO
71701: IFFALSE 72341
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71703: LD_EXP 69
71707: PUSH
71708: LD_VAR 0 2
71712: ARRAY
71713: NOT
71714: PUSH
71715: LD_EXP 93
71719: PUSH
71720: LD_VAR 0 2
71724: ARRAY
71725: NOT
71726: OR
71727: IFFALSE 71731
// continue ;
71729: GO 71700
// if mc_scan [ i ] then
71731: LD_EXP 92
71735: PUSH
71736: LD_VAR 0 2
71740: ARRAY
71741: IFFALSE 71767
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
71743: LD_ADDR_EXP 81
71747: PUSH
71748: LD_EXP 81
71752: PPUSH
71753: LD_VAR 0 2
71757: PPUSH
71758: EMPTY
71759: PPUSH
71760: CALL_OW 1
71764: ST_TO_ADDR
// continue ;
71765: GO 71700
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71767: LD_ADDR_VAR 0 5
71771: PUSH
71772: LD_EXP 69
71776: PUSH
71777: LD_VAR 0 2
71781: ARRAY
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PPUSH
71787: CALL_OW 255
71791: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71792: LD_ADDR_VAR 0 6
71796: PUSH
71797: LD_EXP 69
71801: PUSH
71802: LD_VAR 0 2
71806: ARRAY
71807: PPUSH
71808: LD_INT 30
71810: PUSH
71811: LD_INT 3
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PPUSH
71818: CALL_OW 72
71822: ST_TO_ADDR
// if not fac then
71823: LD_VAR 0 6
71827: NOT
71828: IFFALSE 71879
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71830: LD_ADDR_VAR 0 6
71834: PUSH
71835: LD_EXP 69
71839: PUSH
71840: LD_VAR 0 2
71844: ARRAY
71845: PPUSH
71846: LD_INT 2
71848: PUSH
71849: LD_INT 30
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 30
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: PPUSH
71874: CALL_OW 72
71878: ST_TO_ADDR
// if not fac then
71879: LD_VAR 0 6
71883: NOT
71884: IFFALSE 71888
// continue ;
71886: GO 71700
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71888: LD_ADDR_VAR 0 7
71892: PUSH
71893: LD_EXP 93
71897: PUSH
71898: LD_VAR 0 2
71902: ARRAY
71903: PPUSH
71904: LD_INT 22
71906: PUSH
71907: LD_VAR 0 5
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 21
71918: PUSH
71919: LD_INT 2
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 3
71928: PUSH
71929: LD_INT 24
71931: PUSH
71932: LD_INT 1000
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: LIST
71947: PPUSH
71948: CALL_OW 70
71952: PUSH
71953: LD_INT 22
71955: PUSH
71956: LD_VAR 0 5
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 91
71967: PUSH
71968: LD_VAR 0 6
71972: PUSH
71973: LD_INT 1
71975: ARRAY
71976: PUSH
71977: LD_INT 25
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 21
71987: PUSH
71988: LD_INT 2
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 24
72000: PUSH
72001: LD_INT 1000
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: PPUSH
72018: CALL_OW 69
72022: UNION
72023: ST_TO_ADDR
// if not vehs then
72024: LD_VAR 0 7
72028: NOT
72029: IFFALSE 72055
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72031: LD_ADDR_EXP 81
72035: PUSH
72036: LD_EXP 81
72040: PPUSH
72041: LD_VAR 0 2
72045: PPUSH
72046: EMPTY
72047: PPUSH
72048: CALL_OW 1
72052: ST_TO_ADDR
// continue ;
72053: GO 71700
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72055: LD_ADDR_VAR 0 8
72059: PUSH
72060: LD_EXP 69
72064: PUSH
72065: LD_VAR 0 2
72069: ARRAY
72070: PPUSH
72071: LD_INT 30
72073: PUSH
72074: LD_INT 3
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PPUSH
72081: CALL_OW 72
72085: ST_TO_ADDR
// if tmp then
72086: LD_VAR 0 8
72090: IFFALSE 72193
// begin for j in tmp do
72092: LD_ADDR_VAR 0 3
72096: PUSH
72097: LD_VAR 0 8
72101: PUSH
72102: FOR_IN
72103: IFFALSE 72191
// for k in UnitsInside ( j ) do
72105: LD_ADDR_VAR 0 4
72109: PUSH
72110: LD_VAR 0 3
72114: PPUSH
72115: CALL_OW 313
72119: PUSH
72120: FOR_IN
72121: IFFALSE 72187
// if k then
72123: LD_VAR 0 4
72127: IFFALSE 72185
// if not k in mc_repair_vehicle [ i ] then
72129: LD_VAR 0 4
72133: PUSH
72134: LD_EXP 81
72138: PUSH
72139: LD_VAR 0 2
72143: ARRAY
72144: IN
72145: NOT
72146: IFFALSE 72185
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72148: LD_ADDR_EXP 81
72152: PUSH
72153: LD_EXP 81
72157: PPUSH
72158: LD_VAR 0 2
72162: PPUSH
72163: LD_EXP 81
72167: PUSH
72168: LD_VAR 0 2
72172: ARRAY
72173: PUSH
72174: LD_VAR 0 4
72178: UNION
72179: PPUSH
72180: CALL_OW 1
72184: ST_TO_ADDR
72185: GO 72120
72187: POP
72188: POP
72189: GO 72102
72191: POP
72192: POP
// end ; if not mc_repair_vehicle [ i ] then
72193: LD_EXP 81
72197: PUSH
72198: LD_VAR 0 2
72202: ARRAY
72203: NOT
72204: IFFALSE 72208
// continue ;
72206: GO 71700
// for j in mc_repair_vehicle [ i ] do
72208: LD_ADDR_VAR 0 3
72212: PUSH
72213: LD_EXP 81
72217: PUSH
72218: LD_VAR 0 2
72222: ARRAY
72223: PUSH
72224: FOR_IN
72225: IFFALSE 72337
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72227: LD_VAR 0 3
72231: PPUSH
72232: CALL_OW 311
72236: NOT
72237: PUSH
72238: LD_VAR 0 3
72242: PUSH
72243: LD_EXP 72
72247: PUSH
72248: LD_VAR 0 2
72252: ARRAY
72253: PUSH
72254: LD_INT 1
72256: ARRAY
72257: IN
72258: NOT
72259: AND
72260: PUSH
72261: LD_VAR 0 3
72265: PUSH
72266: LD_EXP 72
72270: PUSH
72271: LD_VAR 0 2
72275: ARRAY
72276: PUSH
72277: LD_INT 2
72279: ARRAY
72280: IN
72281: NOT
72282: AND
72283: IFFALSE 72335
// begin if IsInUnit ( j ) then
72285: LD_VAR 0 3
72289: PPUSH
72290: CALL_OW 310
72294: IFFALSE 72305
// ComExitBuilding ( j ) ;
72296: LD_VAR 0 3
72300: PPUSH
72301: CALL_OW 122
// if not HasTask ( j ) then
72305: LD_VAR 0 3
72309: PPUSH
72310: CALL_OW 314
72314: NOT
72315: IFFALSE 72335
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72317: LD_VAR 0 3
72321: PPUSH
72322: LD_VAR 0 7
72326: PUSH
72327: LD_INT 1
72329: ARRAY
72330: PPUSH
72331: CALL_OW 189
// end ; end ;
72335: GO 72224
72337: POP
72338: POP
// end ;
72339: GO 71700
72341: POP
72342: POP
// end ;
72343: LD_VAR 0 1
72347: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
72352: PPUSH
72353: PPUSH
72354: PPUSH
72355: PPUSH
72356: PPUSH
72357: PPUSH
72358: PPUSH
72359: PPUSH
72360: PPUSH
// if not mc_bases then
72361: LD_EXP 69
72365: NOT
72366: IFFALSE 72370
// exit ;
72368: GO 73106
// for i = 1 to mc_bases do
72370: LD_ADDR_VAR 0 2
72374: PUSH
72375: DOUBLE
72376: LD_INT 1
72378: DEC
72379: ST_TO_ADDR
72380: LD_EXP 69
72384: PUSH
72385: FOR_TO
72386: IFFALSE 73104
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72388: LD_EXP 97
72392: PUSH
72393: LD_VAR 0 2
72397: ARRAY
72398: NOT
72399: PUSH
72400: LD_EXP 72
72404: PUSH
72405: LD_VAR 0 2
72409: ARRAY
72410: PUSH
72411: LD_INT 1
72413: ARRAY
72414: OR
72415: PUSH
72416: LD_EXP 72
72420: PUSH
72421: LD_VAR 0 2
72425: ARRAY
72426: PUSH
72427: LD_INT 2
72429: ARRAY
72430: OR
72431: PUSH
72432: LD_EXP 95
72436: PUSH
72437: LD_VAR 0 2
72441: ARRAY
72442: PPUSH
72443: LD_INT 1
72445: PPUSH
72446: CALL_OW 325
72450: NOT
72451: OR
72452: PUSH
72453: LD_EXP 92
72457: PUSH
72458: LD_VAR 0 2
72462: ARRAY
72463: OR
72464: IFFALSE 72468
// continue ;
72466: GO 72385
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72468: LD_ADDR_VAR 0 8
72472: PUSH
72473: LD_EXP 69
72477: PUSH
72478: LD_VAR 0 2
72482: ARRAY
72483: PPUSH
72484: LD_INT 25
72486: PUSH
72487: LD_INT 4
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 50
72496: PUSH
72497: EMPTY
72498: LIST
72499: PUSH
72500: LD_INT 3
72502: PUSH
72503: LD_INT 60
72505: PUSH
72506: EMPTY
72507: LIST
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: LIST
72517: PPUSH
72518: CALL_OW 72
72522: PUSH
72523: LD_EXP 73
72527: PUSH
72528: LD_VAR 0 2
72532: ARRAY
72533: DIFF
72534: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72535: LD_ADDR_VAR 0 9
72539: PUSH
72540: LD_EXP 69
72544: PUSH
72545: LD_VAR 0 2
72549: ARRAY
72550: PPUSH
72551: LD_INT 2
72553: PUSH
72554: LD_INT 30
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 30
72566: PUSH
72567: LD_INT 1
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: PPUSH
72579: CALL_OW 72
72583: ST_TO_ADDR
// if not tmp or not dep then
72584: LD_VAR 0 8
72588: NOT
72589: PUSH
72590: LD_VAR 0 9
72594: NOT
72595: OR
72596: IFFALSE 72600
// continue ;
72598: GO 72385
// side := GetSide ( tmp [ 1 ] ) ;
72600: LD_ADDR_VAR 0 11
72604: PUSH
72605: LD_VAR 0 8
72609: PUSH
72610: LD_INT 1
72612: ARRAY
72613: PPUSH
72614: CALL_OW 255
72618: ST_TO_ADDR
// dep := dep [ 1 ] ;
72619: LD_ADDR_VAR 0 9
72623: PUSH
72624: LD_VAR 0 9
72628: PUSH
72629: LD_INT 1
72631: ARRAY
72632: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72633: LD_ADDR_VAR 0 7
72637: PUSH
72638: LD_EXP 97
72642: PUSH
72643: LD_VAR 0 2
72647: ARRAY
72648: PPUSH
72649: LD_INT 22
72651: PUSH
72652: LD_INT 0
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 25
72661: PUSH
72662: LD_INT 12
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PPUSH
72673: CALL_OW 70
72677: PUSH
72678: LD_INT 22
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 25
72690: PUSH
72691: LD_INT 12
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 91
72700: PUSH
72701: LD_VAR 0 9
72705: PUSH
72706: LD_INT 20
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: LIST
72718: PPUSH
72719: CALL_OW 69
72723: UNION
72724: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72725: LD_ADDR_VAR 0 10
72729: PUSH
72730: LD_EXP 97
72734: PUSH
72735: LD_VAR 0 2
72739: ARRAY
72740: PPUSH
72741: LD_INT 81
72743: PUSH
72744: LD_VAR 0 11
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PPUSH
72753: CALL_OW 70
72757: ST_TO_ADDR
// if not apes or danger_at_area then
72758: LD_VAR 0 7
72762: NOT
72763: PUSH
72764: LD_VAR 0 10
72768: OR
72769: IFFALSE 72819
// begin if mc_taming [ i ] then
72771: LD_EXP 100
72775: PUSH
72776: LD_VAR 0 2
72780: ARRAY
72781: IFFALSE 72817
// begin MC_Reset ( i , 121 ) ;
72783: LD_VAR 0 2
72787: PPUSH
72788: LD_INT 121
72790: PPUSH
72791: CALL 63614 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72795: LD_ADDR_EXP 100
72799: PUSH
72800: LD_EXP 100
72804: PPUSH
72805: LD_VAR 0 2
72809: PPUSH
72810: EMPTY
72811: PPUSH
72812: CALL_OW 1
72816: ST_TO_ADDR
// end ; continue ;
72817: GO 72385
// end ; for j in tmp do
72819: LD_ADDR_VAR 0 3
72823: PUSH
72824: LD_VAR 0 8
72828: PUSH
72829: FOR_IN
72830: IFFALSE 73100
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72832: LD_VAR 0 3
72836: PUSH
72837: LD_EXP 100
72841: PUSH
72842: LD_VAR 0 2
72846: ARRAY
72847: IN
72848: NOT
72849: PUSH
72850: LD_EXP 100
72854: PUSH
72855: LD_VAR 0 2
72859: ARRAY
72860: PUSH
72861: LD_INT 3
72863: LESS
72864: AND
72865: IFFALSE 72923
// begin SetTag ( j , 121 ) ;
72867: LD_VAR 0 3
72871: PPUSH
72872: LD_INT 121
72874: PPUSH
72875: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
72879: LD_ADDR_EXP 100
72883: PUSH
72884: LD_EXP 100
72888: PPUSH
72889: LD_VAR 0 2
72893: PUSH
72894: LD_EXP 100
72898: PUSH
72899: LD_VAR 0 2
72903: ARRAY
72904: PUSH
72905: LD_INT 1
72907: PLUS
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PPUSH
72913: LD_VAR 0 3
72917: PPUSH
72918: CALL 25866 0 3
72922: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
72923: LD_VAR 0 3
72927: PUSH
72928: LD_EXP 100
72932: PUSH
72933: LD_VAR 0 2
72937: ARRAY
72938: IN
72939: IFFALSE 73098
// begin if IsInUnit ( j ) then
72941: LD_VAR 0 3
72945: PPUSH
72946: CALL_OW 310
72950: IFFALSE 72961
// ComExitBuilding ( j ) ;
72952: LD_VAR 0 3
72956: PPUSH
72957: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
72961: LD_ADDR_VAR 0 6
72965: PUSH
72966: LD_VAR 0 7
72970: PPUSH
72971: LD_VAR 0 3
72975: PPUSH
72976: CALL_OW 74
72980: ST_TO_ADDR
// if not ape then
72981: LD_VAR 0 6
72985: NOT
72986: IFFALSE 72990
// break ;
72988: GO 73100
// x := GetX ( ape ) ;
72990: LD_ADDR_VAR 0 4
72994: PUSH
72995: LD_VAR 0 6
72999: PPUSH
73000: CALL_OW 250
73004: ST_TO_ADDR
// y := GetY ( ape ) ;
73005: LD_ADDR_VAR 0 5
73009: PUSH
73010: LD_VAR 0 6
73014: PPUSH
73015: CALL_OW 251
73019: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73020: LD_VAR 0 4
73024: PPUSH
73025: LD_VAR 0 5
73029: PPUSH
73030: CALL_OW 488
73034: NOT
73035: PUSH
73036: LD_VAR 0 11
73040: PPUSH
73041: LD_VAR 0 4
73045: PPUSH
73046: LD_VAR 0 5
73050: PPUSH
73051: LD_INT 20
73053: PPUSH
73054: CALL 26360 0 4
73058: PUSH
73059: LD_INT 4
73061: ARRAY
73062: OR
73063: IFFALSE 73067
// break ;
73065: GO 73100
// if not HasTask ( j ) then
73067: LD_VAR 0 3
73071: PPUSH
73072: CALL_OW 314
73076: NOT
73077: IFFALSE 73098
// ComTameXY ( j , x , y ) ;
73079: LD_VAR 0 3
73083: PPUSH
73084: LD_VAR 0 4
73088: PPUSH
73089: LD_VAR 0 5
73093: PPUSH
73094: CALL_OW 131
// end ; end ;
73098: GO 72829
73100: POP
73101: POP
// end ;
73102: GO 72385
73104: POP
73105: POP
// end ;
73106: LD_VAR 0 1
73110: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73111: LD_INT 0
73113: PPUSH
73114: PPUSH
73115: PPUSH
73116: PPUSH
73117: PPUSH
73118: PPUSH
73119: PPUSH
73120: PPUSH
// if not mc_bases then
73121: LD_EXP 69
73125: NOT
73126: IFFALSE 73130
// exit ;
73128: GO 73740
// for i = 1 to mc_bases do
73130: LD_ADDR_VAR 0 2
73134: PUSH
73135: DOUBLE
73136: LD_INT 1
73138: DEC
73139: ST_TO_ADDR
73140: LD_EXP 69
73144: PUSH
73145: FOR_TO
73146: IFFALSE 73738
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73148: LD_EXP 98
73152: PUSH
73153: LD_VAR 0 2
73157: ARRAY
73158: NOT
73159: PUSH
73160: LD_EXP 98
73164: PUSH
73165: LD_VAR 0 2
73169: ARRAY
73170: PPUSH
73171: LD_INT 25
73173: PUSH
73174: LD_INT 12
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PPUSH
73181: CALL_OW 72
73185: NOT
73186: OR
73187: IFFALSE 73191
// continue ;
73189: GO 73145
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73191: LD_ADDR_VAR 0 5
73195: PUSH
73196: LD_EXP 98
73200: PUSH
73201: LD_VAR 0 2
73205: ARRAY
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PPUSH
73211: CALL_OW 255
73215: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73216: LD_VAR 0 5
73220: PPUSH
73221: LD_INT 2
73223: PPUSH
73224: CALL_OW 325
73228: IFFALSE 73473
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73230: LD_ADDR_VAR 0 4
73234: PUSH
73235: LD_EXP 98
73239: PUSH
73240: LD_VAR 0 2
73244: ARRAY
73245: PPUSH
73246: LD_INT 25
73248: PUSH
73249: LD_INT 16
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PPUSH
73256: CALL_OW 72
73260: ST_TO_ADDR
// if tmp < 6 then
73261: LD_VAR 0 4
73265: PUSH
73266: LD_INT 6
73268: LESS
73269: IFFALSE 73473
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73271: LD_ADDR_VAR 0 6
73275: PUSH
73276: LD_EXP 69
73280: PUSH
73281: LD_VAR 0 2
73285: ARRAY
73286: PPUSH
73287: LD_INT 2
73289: PUSH
73290: LD_INT 30
73292: PUSH
73293: LD_INT 0
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 30
73302: PUSH
73303: LD_INT 1
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL_OW 72
73319: ST_TO_ADDR
// if depot then
73320: LD_VAR 0 6
73324: IFFALSE 73473
// begin for j in depot do
73326: LD_ADDR_VAR 0 3
73330: PUSH
73331: LD_VAR 0 6
73335: PUSH
73336: FOR_IN
73337: IFFALSE 73368
// begin if UnitsInside ( j ) < 6 then
73339: LD_VAR 0 3
73343: PPUSH
73344: CALL_OW 313
73348: PUSH
73349: LD_INT 6
73351: LESS
73352: IFFALSE 73366
// begin selected := j ;
73354: LD_ADDR_VAR 0 7
73358: PUSH
73359: LD_VAR 0 3
73363: ST_TO_ADDR
// break ;
73364: GO 73368
// end ; end ;
73366: GO 73336
73368: POP
73369: POP
// if selected then
73370: LD_VAR 0 7
73374: IFFALSE 73473
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73376: LD_ADDR_VAR 0 3
73380: PUSH
73381: LD_EXP 98
73385: PUSH
73386: LD_VAR 0 2
73390: ARRAY
73391: PPUSH
73392: LD_INT 25
73394: PUSH
73395: LD_INT 12
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PPUSH
73402: CALL_OW 72
73406: PUSH
73407: FOR_IN
73408: IFFALSE 73471
// if not HasTask ( j ) then
73410: LD_VAR 0 3
73414: PPUSH
73415: CALL_OW 314
73419: NOT
73420: IFFALSE 73469
// begin if not IsInUnit ( j ) then
73422: LD_VAR 0 3
73426: PPUSH
73427: CALL_OW 310
73431: NOT
73432: IFFALSE 73448
// ComEnterUnit ( j , selected ) ;
73434: LD_VAR 0 3
73438: PPUSH
73439: LD_VAR 0 7
73443: PPUSH
73444: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73448: LD_VAR 0 3
73452: PPUSH
73453: LD_INT 16
73455: PPUSH
73456: CALL_OW 183
// AddComExitBuilding ( j ) ;
73460: LD_VAR 0 3
73464: PPUSH
73465: CALL_OW 182
// end ;
73469: GO 73407
73471: POP
73472: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73473: LD_VAR 0 5
73477: PPUSH
73478: LD_INT 11
73480: PPUSH
73481: CALL_OW 325
73485: IFFALSE 73736
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73487: LD_ADDR_VAR 0 4
73491: PUSH
73492: LD_EXP 98
73496: PUSH
73497: LD_VAR 0 2
73501: ARRAY
73502: PPUSH
73503: LD_INT 25
73505: PUSH
73506: LD_INT 16
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PPUSH
73513: CALL_OW 72
73517: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73518: LD_VAR 0 4
73522: PUSH
73523: LD_INT 6
73525: GREATEREQUAL
73526: PUSH
73527: LD_VAR 0 5
73531: PPUSH
73532: LD_INT 2
73534: PPUSH
73535: CALL_OW 325
73539: NOT
73540: OR
73541: IFFALSE 73736
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73543: LD_ADDR_VAR 0 8
73547: PUSH
73548: LD_EXP 69
73552: PUSH
73553: LD_VAR 0 2
73557: ARRAY
73558: PPUSH
73559: LD_INT 2
73561: PUSH
73562: LD_INT 30
73564: PUSH
73565: LD_INT 4
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 30
73574: PUSH
73575: LD_INT 5
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: LIST
73586: PPUSH
73587: CALL_OW 72
73591: ST_TO_ADDR
// if barracks then
73592: LD_VAR 0 8
73596: IFFALSE 73736
// begin for j in barracks do
73598: LD_ADDR_VAR 0 3
73602: PUSH
73603: LD_VAR 0 8
73607: PUSH
73608: FOR_IN
73609: IFFALSE 73640
// begin if UnitsInside ( j ) < 6 then
73611: LD_VAR 0 3
73615: PPUSH
73616: CALL_OW 313
73620: PUSH
73621: LD_INT 6
73623: LESS
73624: IFFALSE 73638
// begin selected := j ;
73626: LD_ADDR_VAR 0 7
73630: PUSH
73631: LD_VAR 0 3
73635: ST_TO_ADDR
// break ;
73636: GO 73640
// end ; end ;
73638: GO 73608
73640: POP
73641: POP
// if selected then
73642: LD_VAR 0 7
73646: IFFALSE 73736
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73648: LD_ADDR_VAR 0 3
73652: PUSH
73653: LD_EXP 98
73657: PUSH
73658: LD_VAR 0 2
73662: ARRAY
73663: PPUSH
73664: LD_INT 25
73666: PUSH
73667: LD_INT 12
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PPUSH
73674: CALL_OW 72
73678: PUSH
73679: FOR_IN
73680: IFFALSE 73734
// if not IsInUnit ( j ) and not HasTask ( j ) then
73682: LD_VAR 0 3
73686: PPUSH
73687: CALL_OW 310
73691: NOT
73692: PUSH
73693: LD_VAR 0 3
73697: PPUSH
73698: CALL_OW 314
73702: NOT
73703: AND
73704: IFFALSE 73732
// begin ComEnterUnit ( j , selected ) ;
73706: LD_VAR 0 3
73710: PPUSH
73711: LD_VAR 0 7
73715: PPUSH
73716: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73720: LD_VAR 0 3
73724: PPUSH
73725: LD_INT 15
73727: PPUSH
73728: CALL_OW 183
// end ;
73732: GO 73679
73734: POP
73735: POP
// end ; end ; end ; end ; end ;
73736: GO 73145
73738: POP
73739: POP
// end ;
73740: LD_VAR 0 1
73744: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73745: LD_INT 0
73747: PPUSH
73748: PPUSH
73749: PPUSH
73750: PPUSH
// if not mc_bases then
73751: LD_EXP 69
73755: NOT
73756: IFFALSE 73760
// exit ;
73758: GO 73938
// for i = 1 to mc_bases do
73760: LD_ADDR_VAR 0 2
73764: PUSH
73765: DOUBLE
73766: LD_INT 1
73768: DEC
73769: ST_TO_ADDR
73770: LD_EXP 69
73774: PUSH
73775: FOR_TO
73776: IFFALSE 73936
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: LD_EXP 69
73787: PUSH
73788: LD_VAR 0 2
73792: ARRAY
73793: PPUSH
73794: LD_INT 25
73796: PUSH
73797: LD_INT 9
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PPUSH
73804: CALL_OW 72
73808: ST_TO_ADDR
// if not tmp then
73809: LD_VAR 0 4
73813: NOT
73814: IFFALSE 73818
// continue ;
73816: GO 73775
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
73818: LD_EXP 95
73822: PUSH
73823: LD_VAR 0 2
73827: ARRAY
73828: PPUSH
73829: LD_INT 29
73831: PPUSH
73832: CALL_OW 325
73836: NOT
73837: PUSH
73838: LD_EXP 95
73842: PUSH
73843: LD_VAR 0 2
73847: ARRAY
73848: PPUSH
73849: LD_INT 28
73851: PPUSH
73852: CALL_OW 325
73856: NOT
73857: AND
73858: IFFALSE 73862
// continue ;
73860: GO 73775
// for j in tmp do
73862: LD_ADDR_VAR 0 3
73866: PUSH
73867: LD_VAR 0 4
73871: PUSH
73872: FOR_IN
73873: IFFALSE 73932
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73875: LD_VAR 0 3
73879: PUSH
73880: LD_EXP 72
73884: PUSH
73885: LD_VAR 0 2
73889: ARRAY
73890: PUSH
73891: LD_INT 1
73893: ARRAY
73894: IN
73895: NOT
73896: PUSH
73897: LD_VAR 0 3
73901: PUSH
73902: LD_EXP 72
73906: PUSH
73907: LD_VAR 0 2
73911: ARRAY
73912: PUSH
73913: LD_INT 2
73915: ARRAY
73916: IN
73917: NOT
73918: AND
73919: IFFALSE 73930
// ComSpaceTimeShoot ( j ) ;
73921: LD_VAR 0 3
73925: PPUSH
73926: CALL 19491 0 1
73930: GO 73872
73932: POP
73933: POP
// end ;
73934: GO 73775
73936: POP
73937: POP
// end ;
73938: LD_VAR 0 1
73942: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
73943: LD_INT 0
73945: PPUSH
73946: PPUSH
73947: PPUSH
73948: PPUSH
// if not mc_bases then
73949: LD_EXP 69
73953: NOT
73954: IFFALSE 73958
// exit ;
73956: GO 73980
// for i = 1 to mc_bases do
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: DOUBLE
73964: LD_INT 1
73966: DEC
73967: ST_TO_ADDR
73968: LD_EXP 69
73972: PUSH
73973: FOR_TO
73974: IFFALSE 73978
// begin end ;
73976: GO 73973
73978: POP
73979: POP
// end ;
73980: LD_VAR 0 1
73984: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73985: LD_INT 0
73987: PPUSH
73988: PPUSH
73989: PPUSH
// if not mc_bases then
73990: LD_EXP 69
73994: NOT
73995: IFFALSE 73999
// exit ;
73997: GO 74559
// for i = 1 to mc_bases do
73999: LD_ADDR_VAR 0 2
74003: PUSH
74004: DOUBLE
74005: LD_INT 1
74007: DEC
74008: ST_TO_ADDR
74009: LD_EXP 69
74013: PUSH
74014: FOR_TO
74015: IFFALSE 74557
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74017: LD_ADDR_VAR 0 3
74021: PUSH
74022: LD_EXP 69
74026: PUSH
74027: LD_VAR 0 2
74031: ARRAY
74032: PPUSH
74033: LD_INT 25
74035: PUSH
74036: LD_INT 4
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PPUSH
74043: CALL_OW 72
74047: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
74048: LD_VAR 0 3
74052: NOT
74053: PUSH
74054: LD_EXP 105
74058: PUSH
74059: LD_VAR 0 2
74063: ARRAY
74064: NOT
74065: OR
74066: IFFALSE 74116
// begin if mc_deposits_finder [ i ] then
74068: LD_EXP 106
74072: PUSH
74073: LD_VAR 0 2
74077: ARRAY
74078: IFFALSE 74114
// begin MC_Reset ( i , 125 ) ;
74080: LD_VAR 0 2
74084: PPUSH
74085: LD_INT 125
74087: PPUSH
74088: CALL 63614 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74092: LD_ADDR_EXP 106
74096: PUSH
74097: LD_EXP 106
74101: PPUSH
74102: LD_VAR 0 2
74106: PPUSH
74107: EMPTY
74108: PPUSH
74109: CALL_OW 1
74113: ST_TO_ADDR
// end ; continue ;
74114: GO 74014
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
74116: LD_EXP 105
74120: PUSH
74121: LD_VAR 0 2
74125: ARRAY
74126: PUSH
74127: LD_INT 1
74129: ARRAY
74130: PUSH
74131: LD_INT 3
74133: ARRAY
74134: PUSH
74135: LD_INT 1
74137: EQUAL
74138: PUSH
74139: LD_INT 20
74141: PPUSH
74142: LD_EXP 95
74146: PUSH
74147: LD_VAR 0 2
74151: ARRAY
74152: PPUSH
74153: CALL_OW 321
74157: PUSH
74158: LD_INT 2
74160: NONEQUAL
74161: AND
74162: IFFALSE 74212
// begin if mc_deposits_finder [ i ] then
74164: LD_EXP 106
74168: PUSH
74169: LD_VAR 0 2
74173: ARRAY
74174: IFFALSE 74210
// begin MC_Reset ( i , 125 ) ;
74176: LD_VAR 0 2
74180: PPUSH
74181: LD_INT 125
74183: PPUSH
74184: CALL 63614 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74188: LD_ADDR_EXP 106
74192: PUSH
74193: LD_EXP 106
74197: PPUSH
74198: LD_VAR 0 2
74202: PPUSH
74203: EMPTY
74204: PPUSH
74205: CALL_OW 1
74209: ST_TO_ADDR
// end ; continue ;
74210: GO 74014
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
74212: LD_EXP 105
74216: PUSH
74217: LD_VAR 0 2
74221: ARRAY
74222: PUSH
74223: LD_INT 1
74225: ARRAY
74226: PUSH
74227: LD_INT 1
74229: ARRAY
74230: PPUSH
74231: LD_EXP 105
74235: PUSH
74236: LD_VAR 0 2
74240: ARRAY
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 2
74248: ARRAY
74249: PPUSH
74250: LD_EXP 95
74254: PUSH
74255: LD_VAR 0 2
74259: ARRAY
74260: PPUSH
74261: CALL_OW 440
74265: IFFALSE 74308
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
74267: LD_ADDR_EXP 105
74271: PUSH
74272: LD_EXP 105
74276: PPUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: LD_EXP 105
74286: PUSH
74287: LD_VAR 0 2
74291: ARRAY
74292: PPUSH
74293: LD_INT 1
74295: PPUSH
74296: CALL_OW 3
74300: PPUSH
74301: CALL_OW 1
74305: ST_TO_ADDR
74306: GO 74555
// begin if not mc_deposits_finder [ i ] then
74308: LD_EXP 106
74312: PUSH
74313: LD_VAR 0 2
74317: ARRAY
74318: NOT
74319: IFFALSE 74371
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
74321: LD_ADDR_EXP 106
74325: PUSH
74326: LD_EXP 106
74330: PPUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: LD_VAR 0 3
74340: PUSH
74341: LD_INT 1
74343: ARRAY
74344: PUSH
74345: EMPTY
74346: LIST
74347: PPUSH
74348: CALL_OW 1
74352: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
74353: LD_VAR 0 3
74357: PUSH
74358: LD_INT 1
74360: ARRAY
74361: PPUSH
74362: LD_INT 125
74364: PPUSH
74365: CALL_OW 109
// end else
74369: GO 74555
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
74371: LD_EXP 106
74375: PUSH
74376: LD_VAR 0 2
74380: ARRAY
74381: PUSH
74382: LD_INT 1
74384: ARRAY
74385: PPUSH
74386: CALL_OW 310
74390: IFFALSE 74413
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
74392: LD_EXP 106
74396: PUSH
74397: LD_VAR 0 2
74401: ARRAY
74402: PUSH
74403: LD_INT 1
74405: ARRAY
74406: PPUSH
74407: CALL_OW 122
74411: GO 74555
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74413: LD_EXP 106
74417: PUSH
74418: LD_VAR 0 2
74422: ARRAY
74423: PUSH
74424: LD_INT 1
74426: ARRAY
74427: PPUSH
74428: CALL_OW 314
74432: NOT
74433: PUSH
74434: LD_EXP 106
74438: PUSH
74439: LD_VAR 0 2
74443: ARRAY
74444: PUSH
74445: LD_INT 1
74447: ARRAY
74448: PPUSH
74449: LD_EXP 105
74453: PUSH
74454: LD_VAR 0 2
74458: ARRAY
74459: PUSH
74460: LD_INT 1
74462: ARRAY
74463: PUSH
74464: LD_INT 1
74466: ARRAY
74467: PPUSH
74468: LD_EXP 105
74472: PUSH
74473: LD_VAR 0 2
74477: ARRAY
74478: PUSH
74479: LD_INT 1
74481: ARRAY
74482: PUSH
74483: LD_INT 2
74485: ARRAY
74486: PPUSH
74487: CALL_OW 297
74491: PUSH
74492: LD_INT 6
74494: GREATER
74495: AND
74496: IFFALSE 74555
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74498: LD_EXP 106
74502: PUSH
74503: LD_VAR 0 2
74507: ARRAY
74508: PUSH
74509: LD_INT 1
74511: ARRAY
74512: PPUSH
74513: LD_EXP 105
74517: PUSH
74518: LD_VAR 0 2
74522: ARRAY
74523: PUSH
74524: LD_INT 1
74526: ARRAY
74527: PUSH
74528: LD_INT 1
74530: ARRAY
74531: PPUSH
74532: LD_EXP 105
74536: PUSH
74537: LD_VAR 0 2
74541: ARRAY
74542: PUSH
74543: LD_INT 1
74545: ARRAY
74546: PUSH
74547: LD_INT 2
74549: ARRAY
74550: PPUSH
74551: CALL_OW 111
// end ; end ; end ;
74555: GO 74014
74557: POP
74558: POP
// end ;
74559: LD_VAR 0 1
74563: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
74564: LD_INT 0
74566: PPUSH
74567: PPUSH
74568: PPUSH
74569: PPUSH
74570: PPUSH
74571: PPUSH
74572: PPUSH
74573: PPUSH
74574: PPUSH
// if not mc_bases then
74575: LD_EXP 69
74579: NOT
74580: IFFALSE 74584
// exit ;
74582: GO 75082
// for i = 1 to mc_bases do
74584: LD_ADDR_VAR 0 2
74588: PUSH
74589: DOUBLE
74590: LD_INT 1
74592: DEC
74593: ST_TO_ADDR
74594: LD_EXP 69
74598: PUSH
74599: FOR_TO
74600: IFFALSE 75080
// begin if not mc_bases [ i ] then
74602: LD_EXP 69
74606: PUSH
74607: LD_VAR 0 2
74611: ARRAY
74612: NOT
74613: IFFALSE 74617
// continue ;
74615: GO 74599
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74617: LD_ADDR_VAR 0 7
74621: PUSH
74622: LD_EXP 69
74626: PUSH
74627: LD_VAR 0 2
74631: ARRAY
74632: PUSH
74633: LD_INT 1
74635: ARRAY
74636: PPUSH
74637: CALL_OW 248
74641: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
74642: LD_VAR 0 7
74646: PUSH
74647: LD_INT 1
74649: NONEQUAL
74650: PUSH
74651: LD_EXP 88
74655: PUSH
74656: LD_VAR 0 2
74660: ARRAY
74661: PUSH
74662: LD_EXP 91
74666: PUSH
74667: LD_VAR 0 2
74671: ARRAY
74672: UNION
74673: PPUSH
74674: LD_INT 33
74676: PUSH
74677: LD_INT 2
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PPUSH
74684: CALL_OW 72
74688: NOT
74689: OR
74690: IFFALSE 74694
// continue ;
74692: GO 74599
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74694: LD_ADDR_VAR 0 9
74698: PUSH
74699: LD_EXP 69
74703: PUSH
74704: LD_VAR 0 2
74708: ARRAY
74709: PPUSH
74710: LD_INT 30
74712: PUSH
74713: LD_INT 36
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PPUSH
74720: CALL_OW 72
74724: ST_TO_ADDR
// if not cts then
74725: LD_VAR 0 9
74729: NOT
74730: IFFALSE 74734
// continue ;
74732: GO 74599
// if mc_remote_driver [ i ] then
74734: LD_EXP 108
74738: PUSH
74739: LD_VAR 0 2
74743: ARRAY
74744: IFFALSE 74893
// for j in mc_remote_driver [ i ] do
74746: LD_ADDR_VAR 0 3
74750: PUSH
74751: LD_EXP 108
74755: PUSH
74756: LD_VAR 0 2
74760: ARRAY
74761: PUSH
74762: FOR_IN
74763: IFFALSE 74891
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
74765: LD_VAR 0 3
74769: PPUSH
74770: CALL_OW 310
74774: NOT
74775: PUSH
74776: LD_VAR 0 3
74780: PPUSH
74781: CALL_OW 310
74785: PPUSH
74786: CALL_OW 266
74790: PUSH
74791: LD_INT 36
74793: NONEQUAL
74794: OR
74795: IFFALSE 74889
// begin if IsInUnit ( j ) then
74797: LD_VAR 0 3
74801: PPUSH
74802: CALL_OW 310
74806: IFFALSE 74817
// ComExitBuilding ( j ) ;
74808: LD_VAR 0 3
74812: PPUSH
74813: CALL_OW 122
// ct := 0 ;
74817: LD_ADDR_VAR 0 8
74821: PUSH
74822: LD_INT 0
74824: ST_TO_ADDR
// for k in cts do
74825: LD_ADDR_VAR 0 4
74829: PUSH
74830: LD_VAR 0 9
74834: PUSH
74835: FOR_IN
74836: IFFALSE 74867
// if UnitsInside ( k ) < 3 then
74838: LD_VAR 0 4
74842: PPUSH
74843: CALL_OW 313
74847: PUSH
74848: LD_INT 3
74850: LESS
74851: IFFALSE 74865
// begin ct := k ;
74853: LD_ADDR_VAR 0 8
74857: PUSH
74858: LD_VAR 0 4
74862: ST_TO_ADDR
// break ;
74863: GO 74867
// end ;
74865: GO 74835
74867: POP
74868: POP
// if ct then
74869: LD_VAR 0 8
74873: IFFALSE 74889
// AddComEnterUnit ( j , ct ) ;
74875: LD_VAR 0 3
74879: PPUSH
74880: LD_VAR 0 8
74884: PPUSH
74885: CALL_OW 180
// end ;
74889: GO 74762
74891: POP
74892: POP
// places := 0 ;
74893: LD_ADDR_VAR 0 5
74897: PUSH
74898: LD_INT 0
74900: ST_TO_ADDR
// for j = 1 to cts do
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: DOUBLE
74907: LD_INT 1
74909: DEC
74910: ST_TO_ADDR
74911: LD_VAR 0 9
74915: PUSH
74916: FOR_TO
74917: IFFALSE 74935
// places := places + 3 ;
74919: LD_ADDR_VAR 0 5
74923: PUSH
74924: LD_VAR 0 5
74928: PUSH
74929: LD_INT 3
74931: PLUS
74932: ST_TO_ADDR
74933: GO 74916
74935: POP
74936: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
74937: LD_ADDR_VAR 0 6
74941: PUSH
74942: LD_EXP 69
74946: PUSH
74947: LD_VAR 0 2
74951: ARRAY
74952: PPUSH
74953: LD_INT 25
74955: PUSH
74956: LD_INT 3
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PPUSH
74963: CALL_OW 72
74967: PUSH
74968: LD_EXP 108
74972: PUSH
74973: LD_VAR 0 2
74977: ARRAY
74978: DIFF
74979: ST_TO_ADDR
// if not tmp then
74980: LD_VAR 0 6
74984: NOT
74985: IFFALSE 74989
// continue ;
74987: GO 74599
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: LD_VAR 0 5
74998: PUSH
74999: LD_EXP 108
75003: PUSH
75004: LD_VAR 0 2
75008: ARRAY
75009: PUSH
75010: LD_INT 1
75012: PLUS
75013: MINUS
75014: ST_TO_ADDR
// if places then
75015: LD_VAR 0 5
75019: IFFALSE 75078
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
75021: LD_ADDR_EXP 108
75025: PUSH
75026: LD_EXP 108
75030: PPUSH
75031: LD_VAR 0 2
75035: PPUSH
75036: LD_EXP 108
75040: PUSH
75041: LD_VAR 0 2
75045: ARRAY
75046: PUSH
75047: LD_VAR 0 6
75051: PUSH
75052: LD_INT 1
75054: ARRAY
75055: UNION
75056: PPUSH
75057: CALL_OW 1
75061: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
75062: LD_VAR 0 6
75066: PUSH
75067: LD_INT 1
75069: ARRAY
75070: PPUSH
75071: LD_INT 126
75073: PPUSH
75074: CALL_OW 109
// end ; end ;
75078: GO 74599
75080: POP
75081: POP
// end ;
75082: LD_VAR 0 1
75086: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
75087: LD_INT 0
75089: PPUSH
75090: PPUSH
75091: PPUSH
75092: PPUSH
75093: PPUSH
75094: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
75095: LD_VAR 0 1
75099: NOT
75100: PUSH
75101: LD_VAR 0 2
75105: NOT
75106: OR
75107: PUSH
75108: LD_VAR 0 3
75112: NOT
75113: OR
75114: PUSH
75115: LD_VAR 0 4
75119: PUSH
75120: LD_INT 1
75122: PUSH
75123: LD_INT 2
75125: PUSH
75126: LD_INT 3
75128: PUSH
75129: LD_INT 4
75131: PUSH
75132: LD_INT 5
75134: PUSH
75135: LD_INT 8
75137: PUSH
75138: LD_INT 9
75140: PUSH
75141: LD_INT 15
75143: PUSH
75144: LD_INT 16
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: IN
75158: NOT
75159: OR
75160: IFFALSE 75164
// exit ;
75162: GO 76064
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
75164: LD_ADDR_VAR 0 2
75168: PUSH
75169: LD_VAR 0 2
75173: PPUSH
75174: LD_INT 21
75176: PUSH
75177: LD_INT 3
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 24
75186: PUSH
75187: LD_INT 250
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PPUSH
75198: CALL_OW 72
75202: ST_TO_ADDR
// case class of 1 , 15 :
75203: LD_VAR 0 4
75207: PUSH
75208: LD_INT 1
75210: DOUBLE
75211: EQUAL
75212: IFTRUE 75222
75214: LD_INT 15
75216: DOUBLE
75217: EQUAL
75218: IFTRUE 75222
75220: GO 75307
75222: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75223: LD_ADDR_VAR 0 8
75227: PUSH
75228: LD_VAR 0 2
75232: PPUSH
75233: LD_INT 2
75235: PUSH
75236: LD_INT 30
75238: PUSH
75239: LD_INT 32
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 30
75248: PUSH
75249: LD_INT 31
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: PPUSH
75261: CALL_OW 72
75265: PUSH
75266: LD_VAR 0 2
75270: PPUSH
75271: LD_INT 2
75273: PUSH
75274: LD_INT 30
75276: PUSH
75277: LD_INT 4
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 30
75286: PUSH
75287: LD_INT 5
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: LIST
75298: PPUSH
75299: CALL_OW 72
75303: ADD
75304: ST_TO_ADDR
75305: GO 75553
75307: LD_INT 2
75309: DOUBLE
75310: EQUAL
75311: IFTRUE 75321
75313: LD_INT 16
75315: DOUBLE
75316: EQUAL
75317: IFTRUE 75321
75319: GO 75367
75321: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75322: LD_ADDR_VAR 0 8
75326: PUSH
75327: LD_VAR 0 2
75331: PPUSH
75332: LD_INT 2
75334: PUSH
75335: LD_INT 30
75337: PUSH
75338: LD_INT 0
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: LD_INT 30
75347: PUSH
75348: LD_INT 1
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: LIST
75359: PPUSH
75360: CALL_OW 72
75364: ST_TO_ADDR
75365: GO 75553
75367: LD_INT 3
75369: DOUBLE
75370: EQUAL
75371: IFTRUE 75375
75373: GO 75421
75375: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75376: LD_ADDR_VAR 0 8
75380: PUSH
75381: LD_VAR 0 2
75385: PPUSH
75386: LD_INT 2
75388: PUSH
75389: LD_INT 30
75391: PUSH
75392: LD_INT 2
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 30
75401: PUSH
75402: LD_INT 3
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: LIST
75413: PPUSH
75414: CALL_OW 72
75418: ST_TO_ADDR
75419: GO 75553
75421: LD_INT 4
75423: DOUBLE
75424: EQUAL
75425: IFTRUE 75429
75427: GO 75486
75429: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75430: LD_ADDR_VAR 0 8
75434: PUSH
75435: LD_VAR 0 2
75439: PPUSH
75440: LD_INT 2
75442: PUSH
75443: LD_INT 30
75445: PUSH
75446: LD_INT 6
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: LD_INT 30
75455: PUSH
75456: LD_INT 7
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 30
75465: PUSH
75466: LD_INT 8
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: PPUSH
75479: CALL_OW 72
75483: ST_TO_ADDR
75484: GO 75553
75486: LD_INT 5
75488: DOUBLE
75489: EQUAL
75490: IFTRUE 75506
75492: LD_INT 8
75494: DOUBLE
75495: EQUAL
75496: IFTRUE 75506
75498: LD_INT 9
75500: DOUBLE
75501: EQUAL
75502: IFTRUE 75506
75504: GO 75552
75506: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75507: LD_ADDR_VAR 0 8
75511: PUSH
75512: LD_VAR 0 2
75516: PPUSH
75517: LD_INT 2
75519: PUSH
75520: LD_INT 30
75522: PUSH
75523: LD_INT 4
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 30
75532: PUSH
75533: LD_INT 5
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: PPUSH
75545: CALL_OW 72
75549: ST_TO_ADDR
75550: GO 75553
75552: POP
// if not tmp then
75553: LD_VAR 0 8
75557: NOT
75558: IFFALSE 75562
// exit ;
75560: GO 76064
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75562: LD_VAR 0 4
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: LD_INT 15
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: IN
75577: PUSH
75578: LD_EXP 78
75582: PUSH
75583: LD_VAR 0 1
75587: ARRAY
75588: AND
75589: IFFALSE 75745
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75591: LD_ADDR_VAR 0 9
75595: PUSH
75596: LD_EXP 78
75600: PUSH
75601: LD_VAR 0 1
75605: ARRAY
75606: PUSH
75607: LD_INT 1
75609: ARRAY
75610: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75611: LD_VAR 0 9
75615: PUSH
75616: LD_EXP 79
75620: PUSH
75621: LD_VAR 0 1
75625: ARRAY
75626: IN
75627: NOT
75628: IFFALSE 75743
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75630: LD_ADDR_EXP 79
75634: PUSH
75635: LD_EXP 79
75639: PPUSH
75640: LD_VAR 0 1
75644: PUSH
75645: LD_EXP 79
75649: PUSH
75650: LD_VAR 0 1
75654: ARRAY
75655: PUSH
75656: LD_INT 1
75658: PLUS
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PPUSH
75664: LD_VAR 0 9
75668: PPUSH
75669: CALL 25866 0 3
75673: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75674: LD_ADDR_EXP 78
75678: PUSH
75679: LD_EXP 78
75683: PPUSH
75684: LD_VAR 0 1
75688: PPUSH
75689: LD_EXP 78
75693: PUSH
75694: LD_VAR 0 1
75698: ARRAY
75699: PUSH
75700: LD_VAR 0 9
75704: DIFF
75705: PPUSH
75706: CALL_OW 1
75710: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75711: LD_VAR 0 3
75715: PPUSH
75716: LD_EXP 79
75720: PUSH
75721: LD_VAR 0 1
75725: ARRAY
75726: PUSH
75727: LD_EXP 79
75731: PUSH
75732: LD_VAR 0 1
75736: ARRAY
75737: ARRAY
75738: PPUSH
75739: CALL_OW 120
// end ; exit ;
75743: GO 76064
// end ; if tmp > 1 then
75745: LD_VAR 0 8
75749: PUSH
75750: LD_INT 1
75752: GREATER
75753: IFFALSE 75857
// for i = 2 to tmp do
75755: LD_ADDR_VAR 0 6
75759: PUSH
75760: DOUBLE
75761: LD_INT 2
75763: DEC
75764: ST_TO_ADDR
75765: LD_VAR 0 8
75769: PUSH
75770: FOR_TO
75771: IFFALSE 75855
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75773: LD_VAR 0 8
75777: PUSH
75778: LD_VAR 0 6
75782: ARRAY
75783: PPUSH
75784: CALL_OW 461
75788: PUSH
75789: LD_INT 6
75791: EQUAL
75792: IFFALSE 75853
// begin x := tmp [ i ] ;
75794: LD_ADDR_VAR 0 9
75798: PUSH
75799: LD_VAR 0 8
75803: PUSH
75804: LD_VAR 0 6
75808: ARRAY
75809: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75810: LD_ADDR_VAR 0 8
75814: PUSH
75815: LD_VAR 0 8
75819: PPUSH
75820: LD_VAR 0 6
75824: PPUSH
75825: CALL_OW 3
75829: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75830: LD_ADDR_VAR 0 8
75834: PUSH
75835: LD_VAR 0 8
75839: PPUSH
75840: LD_INT 1
75842: PPUSH
75843: LD_VAR 0 9
75847: PPUSH
75848: CALL_OW 2
75852: ST_TO_ADDR
// end ;
75853: GO 75770
75855: POP
75856: POP
// for i in tmp do
75857: LD_ADDR_VAR 0 6
75861: PUSH
75862: LD_VAR 0 8
75866: PUSH
75867: FOR_IN
75868: IFFALSE 75937
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75870: LD_VAR 0 6
75874: PPUSH
75875: CALL_OW 313
75879: PUSH
75880: LD_INT 6
75882: LESS
75883: PUSH
75884: LD_VAR 0 6
75888: PPUSH
75889: CALL_OW 266
75893: PUSH
75894: LD_INT 31
75896: PUSH
75897: LD_INT 32
75899: PUSH
75900: EMPTY
75901: LIST
75902: LIST
75903: IN
75904: NOT
75905: AND
75906: PUSH
75907: LD_VAR 0 6
75911: PPUSH
75912: CALL_OW 313
75916: PUSH
75917: LD_INT 0
75919: EQUAL
75920: OR
75921: IFFALSE 75935
// begin j := i ;
75923: LD_ADDR_VAR 0 7
75927: PUSH
75928: LD_VAR 0 6
75932: ST_TO_ADDR
// break ;
75933: GO 75937
// end ; end ;
75935: GO 75867
75937: POP
75938: POP
// if j then
75939: LD_VAR 0 7
75943: IFFALSE 75961
// ComEnterUnit ( unit , j ) else
75945: LD_VAR 0 3
75949: PPUSH
75950: LD_VAR 0 7
75954: PPUSH
75955: CALL_OW 120
75959: GO 76064
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75961: LD_ADDR_VAR 0 10
75965: PUSH
75966: LD_VAR 0 2
75970: PPUSH
75971: LD_INT 2
75973: PUSH
75974: LD_INT 30
75976: PUSH
75977: LD_INT 0
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 30
75986: PUSH
75987: LD_INT 1
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: LIST
75998: PPUSH
75999: CALL_OW 72
76003: ST_TO_ADDR
// if depot then
76004: LD_VAR 0 10
76008: IFFALSE 76064
// begin depot := NearestUnitToUnit ( depot , unit ) ;
76010: LD_ADDR_VAR 0 10
76014: PUSH
76015: LD_VAR 0 10
76019: PPUSH
76020: LD_VAR 0 3
76024: PPUSH
76025: CALL_OW 74
76029: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
76030: LD_VAR 0 3
76034: PPUSH
76035: LD_VAR 0 10
76039: PPUSH
76040: CALL_OW 296
76044: PUSH
76045: LD_INT 10
76047: GREATER
76048: IFFALSE 76064
// ComStandNearbyBuilding ( unit , depot ) ;
76050: LD_VAR 0 3
76054: PPUSH
76055: LD_VAR 0 10
76059: PPUSH
76060: CALL 20108 0 2
// end ; end ; end ;
76064: LD_VAR 0 5
76068: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
76069: LD_INT 0
76071: PPUSH
76072: PPUSH
76073: PPUSH
76074: PPUSH
// if not mc_bases then
76075: LD_EXP 69
76079: NOT
76080: IFFALSE 76084
// exit ;
76082: GO 76323
// for i = 1 to mc_bases do
76084: LD_ADDR_VAR 0 2
76088: PUSH
76089: DOUBLE
76090: LD_INT 1
76092: DEC
76093: ST_TO_ADDR
76094: LD_EXP 69
76098: PUSH
76099: FOR_TO
76100: IFFALSE 76321
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
76102: LD_ADDR_VAR 0 4
76106: PUSH
76107: LD_EXP 69
76111: PUSH
76112: LD_VAR 0 2
76116: ARRAY
76117: PPUSH
76118: LD_INT 21
76120: PUSH
76121: LD_INT 1
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PPUSH
76128: CALL_OW 72
76132: PUSH
76133: LD_EXP 98
76137: PUSH
76138: LD_VAR 0 2
76142: ARRAY
76143: UNION
76144: ST_TO_ADDR
// if not tmp then
76145: LD_VAR 0 4
76149: NOT
76150: IFFALSE 76154
// continue ;
76152: GO 76099
// for j in tmp do
76154: LD_ADDR_VAR 0 3
76158: PUSH
76159: LD_VAR 0 4
76163: PUSH
76164: FOR_IN
76165: IFFALSE 76317
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76167: LD_VAR 0 3
76171: PPUSH
76172: CALL_OW 110
76176: NOT
76177: PUSH
76178: LD_VAR 0 3
76182: PPUSH
76183: CALL_OW 314
76187: NOT
76188: AND
76189: PUSH
76190: LD_VAR 0 3
76194: PPUSH
76195: CALL_OW 311
76199: NOT
76200: AND
76201: PUSH
76202: LD_VAR 0 3
76206: PPUSH
76207: CALL_OW 310
76211: NOT
76212: AND
76213: PUSH
76214: LD_VAR 0 3
76218: PUSH
76219: LD_EXP 72
76223: PUSH
76224: LD_VAR 0 2
76228: ARRAY
76229: PUSH
76230: LD_INT 1
76232: ARRAY
76233: IN
76234: NOT
76235: AND
76236: PUSH
76237: LD_VAR 0 3
76241: PUSH
76242: LD_EXP 72
76246: PUSH
76247: LD_VAR 0 2
76251: ARRAY
76252: PUSH
76253: LD_INT 2
76255: ARRAY
76256: IN
76257: NOT
76258: AND
76259: PUSH
76260: LD_VAR 0 3
76264: PUSH
76265: LD_EXP 81
76269: PUSH
76270: LD_VAR 0 2
76274: ARRAY
76275: IN
76276: NOT
76277: AND
76278: IFFALSE 76315
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76280: LD_VAR 0 2
76284: PPUSH
76285: LD_EXP 69
76289: PUSH
76290: LD_VAR 0 2
76294: ARRAY
76295: PPUSH
76296: LD_VAR 0 3
76300: PPUSH
76301: LD_VAR 0 3
76305: PPUSH
76306: CALL_OW 257
76310: PPUSH
76311: CALL 75087 0 4
// end ;
76315: GO 76164
76317: POP
76318: POP
// end ;
76319: GO 76099
76321: POP
76322: POP
// end ;
76323: LD_VAR 0 1
76327: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76328: LD_INT 0
76330: PPUSH
76331: PPUSH
76332: PPUSH
76333: PPUSH
76334: PPUSH
76335: PPUSH
// if not mc_bases [ base ] then
76336: LD_EXP 69
76340: PUSH
76341: LD_VAR 0 1
76345: ARRAY
76346: NOT
76347: IFFALSE 76351
// exit ;
76349: GO 76533
// tmp := [ ] ;
76351: LD_ADDR_VAR 0 6
76355: PUSH
76356: EMPTY
76357: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76358: LD_ADDR_VAR 0 7
76362: PUSH
76363: LD_VAR 0 3
76367: PPUSH
76368: LD_INT 0
76370: PPUSH
76371: CALL_OW 517
76375: ST_TO_ADDR
// if not list then
76376: LD_VAR 0 7
76380: NOT
76381: IFFALSE 76385
// exit ;
76383: GO 76533
// for i = 1 to amount do
76385: LD_ADDR_VAR 0 5
76389: PUSH
76390: DOUBLE
76391: LD_INT 1
76393: DEC
76394: ST_TO_ADDR
76395: LD_VAR 0 2
76399: PUSH
76400: FOR_TO
76401: IFFALSE 76481
// begin x := rand ( 1 , list [ 1 ] ) ;
76403: LD_ADDR_VAR 0 8
76407: PUSH
76408: LD_INT 1
76410: PPUSH
76411: LD_VAR 0 7
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PPUSH
76420: CALL_OW 12
76424: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76425: LD_ADDR_VAR 0 6
76429: PUSH
76430: LD_VAR 0 6
76434: PPUSH
76435: LD_VAR 0 5
76439: PPUSH
76440: LD_VAR 0 7
76444: PUSH
76445: LD_INT 1
76447: ARRAY
76448: PUSH
76449: LD_VAR 0 8
76453: ARRAY
76454: PUSH
76455: LD_VAR 0 7
76459: PUSH
76460: LD_INT 2
76462: ARRAY
76463: PUSH
76464: LD_VAR 0 8
76468: ARRAY
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PPUSH
76474: CALL_OW 1
76478: ST_TO_ADDR
// end ;
76479: GO 76400
76481: POP
76482: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76483: LD_ADDR_EXP 82
76487: PUSH
76488: LD_EXP 82
76492: PPUSH
76493: LD_VAR 0 1
76497: PPUSH
76498: LD_VAR 0 6
76502: PPUSH
76503: CALL_OW 1
76507: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76508: LD_ADDR_EXP 84
76512: PUSH
76513: LD_EXP 84
76517: PPUSH
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_VAR 0 3
76527: PPUSH
76528: CALL_OW 1
76532: ST_TO_ADDR
// end ;
76533: LD_VAR 0 4
76537: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76538: LD_INT 0
76540: PPUSH
// if not mc_bases [ base ] then
76541: LD_EXP 69
76545: PUSH
76546: LD_VAR 0 1
76550: ARRAY
76551: NOT
76552: IFFALSE 76556
// exit ;
76554: GO 76581
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76556: LD_ADDR_EXP 74
76560: PUSH
76561: LD_EXP 74
76565: PPUSH
76566: LD_VAR 0 1
76570: PPUSH
76571: LD_VAR 0 2
76575: PPUSH
76576: CALL_OW 1
76580: ST_TO_ADDR
// end ;
76581: LD_VAR 0 3
76585: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76586: LD_INT 0
76588: PPUSH
// if not mc_bases [ base ] then
76589: LD_EXP 69
76593: PUSH
76594: LD_VAR 0 1
76598: ARRAY
76599: NOT
76600: IFFALSE 76604
// exit ;
76602: GO 76660
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
76604: LD_ADDR_EXP 74
76608: PUSH
76609: LD_EXP 74
76613: PPUSH
76614: LD_VAR 0 1
76618: PPUSH
76619: LD_EXP 74
76623: PUSH
76624: LD_VAR 0 1
76628: ARRAY
76629: PPUSH
76630: LD_EXP 74
76634: PUSH
76635: LD_VAR 0 1
76639: ARRAY
76640: PUSH
76641: LD_INT 1
76643: PLUS
76644: PPUSH
76645: LD_VAR 0 2
76649: PPUSH
76650: CALL_OW 2
76654: PPUSH
76655: CALL_OW 1
76659: ST_TO_ADDR
// end ;
76660: LD_VAR 0 3
76664: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76665: LD_INT 0
76667: PPUSH
// if not mc_bases [ base ] then
76668: LD_EXP 69
76672: PUSH
76673: LD_VAR 0 1
76677: ARRAY
76678: NOT
76679: IFFALSE 76683
// exit ;
76681: GO 76708
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76683: LD_ADDR_EXP 90
76687: PUSH
76688: LD_EXP 90
76692: PPUSH
76693: LD_VAR 0 1
76697: PPUSH
76698: LD_VAR 0 2
76702: PPUSH
76703: CALL_OW 1
76707: ST_TO_ADDR
// end ;
76708: LD_VAR 0 3
76712: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
76713: LD_INT 0
76715: PPUSH
// if not mc_bases [ base ] then
76716: LD_EXP 69
76720: PUSH
76721: LD_VAR 0 1
76725: ARRAY
76726: NOT
76727: IFFALSE 76731
// exit ;
76729: GO 76771
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
76731: LD_ADDR_EXP 90
76735: PUSH
76736: LD_EXP 90
76740: PPUSH
76741: LD_VAR 0 1
76745: PPUSH
76746: LD_EXP 90
76750: PUSH
76751: LD_VAR 0 1
76755: ARRAY
76756: PUSH
76757: LD_VAR 0 2
76761: PUSH
76762: EMPTY
76763: LIST
76764: ADD
76765: PPUSH
76766: CALL_OW 1
76770: ST_TO_ADDR
// end ;
76771: LD_VAR 0 3
76775: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76776: LD_INT 0
76778: PPUSH
// if not mc_bases [ base ] then
76779: LD_EXP 69
76783: PUSH
76784: LD_VAR 0 1
76788: ARRAY
76789: NOT
76790: IFFALSE 76794
// exit ;
76792: GO 76906
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76794: LD_ADDR_EXP 91
76798: PUSH
76799: LD_EXP 91
76803: PPUSH
76804: LD_VAR 0 1
76808: PPUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: CALL_OW 1
76818: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76819: LD_ADDR_EXP 80
76823: PUSH
76824: LD_EXP 80
76828: PPUSH
76829: LD_VAR 0 1
76833: PPUSH
76834: LD_VAR 0 2
76838: PUSH
76839: LD_INT 0
76841: PLUS
76842: PPUSH
76843: CALL_OW 1
76847: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
76848: LD_ADDR_EXP 88
76852: PUSH
76853: LD_EXP 88
76857: PPUSH
76858: LD_VAR 0 1
76862: PPUSH
76863: LD_EXP 88
76867: PUSH
76868: LD_VAR 0 1
76872: ARRAY
76873: PUSH
76874: LD_EXP 91
76878: PUSH
76879: LD_VAR 0 1
76883: ARRAY
76884: PPUSH
76885: LD_INT 21
76887: PUSH
76888: LD_INT 2
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PPUSH
76895: CALL_OW 72
76899: UNION
76900: PPUSH
76901: CALL_OW 1
76905: ST_TO_ADDR
// end ;
76906: LD_VAR 0 3
76910: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76911: LD_INT 0
76913: PPUSH
// if not mc_bases [ base ] then
76914: LD_EXP 69
76918: PUSH
76919: LD_VAR 0 1
76923: ARRAY
76924: NOT
76925: IFFALSE 76929
// exit ;
76927: GO 76954
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76929: LD_ADDR_EXP 80
76933: PUSH
76934: LD_EXP 80
76938: PPUSH
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_VAR 0 2
76948: PPUSH
76949: CALL_OW 1
76953: ST_TO_ADDR
// end ;
76954: LD_VAR 0 3
76958: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76959: LD_INT 0
76961: PPUSH
76962: PPUSH
76963: PPUSH
76964: PPUSH
// if not mc_bases [ base ] then
76965: LD_EXP 69
76969: PUSH
76970: LD_VAR 0 1
76974: ARRAY
76975: NOT
76976: IFFALSE 76980
// exit ;
76978: GO 77045
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76980: LD_ADDR_EXP 89
76984: PUSH
76985: LD_EXP 89
76989: PPUSH
76990: LD_VAR 0 1
76994: PUSH
76995: LD_EXP 89
76999: PUSH
77000: LD_VAR 0 1
77004: ARRAY
77005: PUSH
77006: LD_INT 1
77008: PLUS
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PPUSH
77014: LD_VAR 0 1
77018: PUSH
77019: LD_VAR 0 2
77023: PUSH
77024: LD_VAR 0 3
77028: PUSH
77029: LD_VAR 0 4
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: PPUSH
77040: CALL 25866 0 3
77044: ST_TO_ADDR
// end ;
77045: LD_VAR 0 5
77049: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
77050: LD_INT 0
77052: PPUSH
// if not mc_bases [ base ] then
77053: LD_EXP 69
77057: PUSH
77058: LD_VAR 0 1
77062: ARRAY
77063: NOT
77064: IFFALSE 77068
// exit ;
77066: GO 77093
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
77068: LD_ADDR_EXP 105
77072: PUSH
77073: LD_EXP 105
77077: PPUSH
77078: LD_VAR 0 1
77082: PPUSH
77083: LD_VAR 0 2
77087: PPUSH
77088: CALL_OW 1
77092: ST_TO_ADDR
// end ;
77093: LD_VAR 0 3
77097: RET
// export function MC_GetMinesField ( base ) ; begin
77098: LD_INT 0
77100: PPUSH
// result := mc_mines [ base ] ;
77101: LD_ADDR_VAR 0 2
77105: PUSH
77106: LD_EXP 82
77110: PUSH
77111: LD_VAR 0 1
77115: ARRAY
77116: ST_TO_ADDR
// end ;
77117: LD_VAR 0 2
77121: RET
// export function MC_GetProduceList ( base ) ; begin
77122: LD_INT 0
77124: PPUSH
// result := mc_produce [ base ] ;
77125: LD_ADDR_VAR 0 2
77129: PUSH
77130: LD_EXP 90
77134: PUSH
77135: LD_VAR 0 1
77139: ARRAY
77140: ST_TO_ADDR
// end ;
77141: LD_VAR 0 2
77145: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
77146: LD_INT 0
77148: PPUSH
77149: PPUSH
// if not mc_bases then
77150: LD_EXP 69
77154: NOT
77155: IFFALSE 77159
// exit ;
77157: GO 77224
// if mc_bases [ base ] then
77159: LD_EXP 69
77163: PUSH
77164: LD_VAR 0 1
77168: ARRAY
77169: IFFALSE 77224
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77171: LD_ADDR_VAR 0 3
77175: PUSH
77176: LD_EXP 69
77180: PUSH
77181: LD_VAR 0 1
77185: ARRAY
77186: PPUSH
77187: LD_INT 30
77189: PUSH
77190: LD_VAR 0 2
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PPUSH
77199: CALL_OW 72
77203: ST_TO_ADDR
// if result then
77204: LD_VAR 0 3
77208: IFFALSE 77224
// result := result [ 1 ] ;
77210: LD_ADDR_VAR 0 3
77214: PUSH
77215: LD_VAR 0 3
77219: PUSH
77220: LD_INT 1
77222: ARRAY
77223: ST_TO_ADDR
// end ; end ;
77224: LD_VAR 0 3
77228: RET
// export function MC_SetTame ( base , area ) ; begin
77229: LD_INT 0
77231: PPUSH
// if not mc_bases or not base then
77232: LD_EXP 69
77236: NOT
77237: PUSH
77238: LD_VAR 0 1
77242: NOT
77243: OR
77244: IFFALSE 77248
// exit ;
77246: GO 77273
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77248: LD_ADDR_EXP 97
77252: PUSH
77253: LD_EXP 97
77257: PPUSH
77258: LD_VAR 0 1
77262: PPUSH
77263: LD_VAR 0 2
77267: PPUSH
77268: CALL_OW 1
77272: ST_TO_ADDR
// end ;
77273: LD_VAR 0 3
77277: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77278: LD_INT 0
77280: PPUSH
77281: PPUSH
// if not mc_bases or not base then
77282: LD_EXP 69
77286: NOT
77287: PUSH
77288: LD_VAR 0 1
77292: NOT
77293: OR
77294: IFFALSE 77298
// exit ;
77296: GO 77400
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77298: LD_ADDR_VAR 0 4
77302: PUSH
77303: LD_EXP 69
77307: PUSH
77308: LD_VAR 0 1
77312: ARRAY
77313: PPUSH
77314: LD_INT 30
77316: PUSH
77317: LD_VAR 0 2
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PPUSH
77326: CALL_OW 72
77330: ST_TO_ADDR
// if not tmp then
77331: LD_VAR 0 4
77335: NOT
77336: IFFALSE 77340
// exit ;
77338: GO 77400
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77340: LD_ADDR_EXP 101
77344: PUSH
77345: LD_EXP 101
77349: PPUSH
77350: LD_VAR 0 1
77354: PPUSH
77355: LD_EXP 101
77359: PUSH
77360: LD_VAR 0 1
77364: ARRAY
77365: PPUSH
77366: LD_EXP 101
77370: PUSH
77371: LD_VAR 0 1
77375: ARRAY
77376: PUSH
77377: LD_INT 1
77379: PLUS
77380: PPUSH
77381: LD_VAR 0 4
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PPUSH
77390: CALL_OW 2
77394: PPUSH
77395: CALL_OW 1
77399: ST_TO_ADDR
// end ;
77400: LD_VAR 0 3
77404: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77405: LD_INT 0
77407: PPUSH
77408: PPUSH
// if not mc_bases or not base or not kinds then
77409: LD_EXP 69
77413: NOT
77414: PUSH
77415: LD_VAR 0 1
77419: NOT
77420: OR
77421: PUSH
77422: LD_VAR 0 2
77426: NOT
77427: OR
77428: IFFALSE 77432
// exit ;
77430: GO 77493
// for i in kinds do
77432: LD_ADDR_VAR 0 4
77436: PUSH
77437: LD_VAR 0 2
77441: PUSH
77442: FOR_IN
77443: IFFALSE 77491
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77445: LD_ADDR_EXP 103
77449: PUSH
77450: LD_EXP 103
77454: PPUSH
77455: LD_VAR 0 1
77459: PUSH
77460: LD_EXP 103
77464: PUSH
77465: LD_VAR 0 1
77469: ARRAY
77470: PUSH
77471: LD_INT 1
77473: PLUS
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PPUSH
77479: LD_VAR 0 4
77483: PPUSH
77484: CALL 25866 0 3
77488: ST_TO_ADDR
77489: GO 77442
77491: POP
77492: POP
// end ;
77493: LD_VAR 0 3
77497: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77498: LD_INT 0
77500: PPUSH
// if not mc_bases or not base or not areas then
77501: LD_EXP 69
77505: NOT
77506: PUSH
77507: LD_VAR 0 1
77511: NOT
77512: OR
77513: PUSH
77514: LD_VAR 0 2
77518: NOT
77519: OR
77520: IFFALSE 77524
// exit ;
77522: GO 77549
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77524: LD_ADDR_EXP 87
77528: PUSH
77529: LD_EXP 87
77533: PPUSH
77534: LD_VAR 0 1
77538: PPUSH
77539: LD_VAR 0 2
77543: PPUSH
77544: CALL_OW 1
77548: ST_TO_ADDR
// end ;
77549: LD_VAR 0 3
77553: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
77554: LD_INT 0
77556: PPUSH
// if not mc_bases or not base then
77557: LD_EXP 69
77561: NOT
77562: PUSH
77563: LD_VAR 0 1
77567: NOT
77568: OR
77569: IFFALSE 77573
// exit ;
77571: GO 77607
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
77573: LD_ADDR_EXP 104
77577: PUSH
77578: LD_EXP 104
77582: PPUSH
77583: LD_VAR 0 1
77587: PPUSH
77588: LD_VAR 0 2
77592: PUSH
77593: LD_VAR 0 3
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PPUSH
77602: CALL_OW 1
77606: ST_TO_ADDR
// end ;
77607: LD_VAR 0 4
77611: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77612: LD_INT 0
77614: PPUSH
77615: PPUSH
77616: PPUSH
// if not mc_bases or not base or not ext_list then
77617: LD_EXP 69
77621: NOT
77622: PUSH
77623: LD_VAR 0 1
77627: NOT
77628: OR
77629: PUSH
77630: LD_VAR 0 5
77634: NOT
77635: OR
77636: IFFALSE 77640
// exit ;
77638: GO 77813
// tmp := GetFacExtXYD ( x , y , d ) ;
77640: LD_ADDR_VAR 0 8
77644: PUSH
77645: LD_VAR 0 2
77649: PPUSH
77650: LD_VAR 0 3
77654: PPUSH
77655: LD_VAR 0 4
77659: PPUSH
77660: CALL 58564 0 3
77664: ST_TO_ADDR
// if not tmp then
77665: LD_VAR 0 8
77669: NOT
77670: IFFALSE 77674
// exit ;
77672: GO 77813
// for i in tmp do
77674: LD_ADDR_VAR 0 7
77678: PUSH
77679: LD_VAR 0 8
77683: PUSH
77684: FOR_IN
77685: IFFALSE 77811
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77687: LD_ADDR_EXP 74
77691: PUSH
77692: LD_EXP 74
77696: PPUSH
77697: LD_VAR 0 1
77701: PPUSH
77702: LD_EXP 74
77706: PUSH
77707: LD_VAR 0 1
77711: ARRAY
77712: PPUSH
77713: LD_EXP 74
77717: PUSH
77718: LD_VAR 0 1
77722: ARRAY
77723: PUSH
77724: LD_INT 1
77726: PLUS
77727: PPUSH
77728: LD_VAR 0 5
77732: PUSH
77733: LD_INT 1
77735: ARRAY
77736: PUSH
77737: LD_VAR 0 7
77741: PUSH
77742: LD_INT 1
77744: ARRAY
77745: PUSH
77746: LD_VAR 0 7
77750: PUSH
77751: LD_INT 2
77753: ARRAY
77754: PUSH
77755: LD_VAR 0 7
77759: PUSH
77760: LD_INT 3
77762: ARRAY
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: LIST
77768: LIST
77769: PPUSH
77770: CALL_OW 2
77774: PPUSH
77775: CALL_OW 1
77779: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77780: LD_ADDR_VAR 0 5
77784: PUSH
77785: LD_VAR 0 5
77789: PPUSH
77790: LD_INT 1
77792: PPUSH
77793: CALL_OW 3
77797: ST_TO_ADDR
// if not ext_list then
77798: LD_VAR 0 5
77802: NOT
77803: IFFALSE 77809
// exit ;
77805: POP
77806: POP
77807: GO 77813
// end ;
77809: GO 77684
77811: POP
77812: POP
// end ;
77813: LD_VAR 0 6
77817: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77818: LD_INT 0
77820: PPUSH
// if not mc_bases or not base or not weapon_list then
77821: LD_EXP 69
77825: NOT
77826: PUSH
77827: LD_VAR 0 1
77831: NOT
77832: OR
77833: PUSH
77834: LD_VAR 0 2
77838: NOT
77839: OR
77840: IFFALSE 77844
// exit ;
77842: GO 77869
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77844: LD_ADDR_EXP 107
77848: PUSH
77849: LD_EXP 107
77853: PPUSH
77854: LD_VAR 0 1
77858: PPUSH
77859: LD_VAR 0 2
77863: PPUSH
77864: CALL_OW 1
77868: ST_TO_ADDR
// end ;
77869: LD_VAR 0 3
77873: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77874: LD_INT 0
77876: PPUSH
// if not mc_bases or not base or not tech_list then
77877: LD_EXP 69
77881: NOT
77882: PUSH
77883: LD_VAR 0 1
77887: NOT
77888: OR
77889: PUSH
77890: LD_VAR 0 2
77894: NOT
77895: OR
77896: IFFALSE 77900
// exit ;
77898: GO 77925
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77900: LD_ADDR_EXP 96
77904: PUSH
77905: LD_EXP 96
77909: PPUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: LD_VAR 0 2
77919: PPUSH
77920: CALL_OW 1
77924: ST_TO_ADDR
// end ;
77925: LD_VAR 0 3
77929: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77930: LD_INT 0
77932: PPUSH
// if not mc_bases or not parking_area or not base then
77933: LD_EXP 69
77937: NOT
77938: PUSH
77939: LD_VAR 0 2
77943: NOT
77944: OR
77945: PUSH
77946: LD_VAR 0 1
77950: NOT
77951: OR
77952: IFFALSE 77956
// exit ;
77954: GO 77981
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77956: LD_ADDR_EXP 93
77960: PUSH
77961: LD_EXP 93
77965: PPUSH
77966: LD_VAR 0 1
77970: PPUSH
77971: LD_VAR 0 2
77975: PPUSH
77976: CALL_OW 1
77980: ST_TO_ADDR
// end ;
77981: LD_VAR 0 3
77985: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77986: LD_INT 0
77988: PPUSH
// if not mc_bases or not base or not scan_area then
77989: LD_EXP 69
77993: NOT
77994: PUSH
77995: LD_VAR 0 1
77999: NOT
78000: OR
78001: PUSH
78002: LD_VAR 0 2
78006: NOT
78007: OR
78008: IFFALSE 78012
// exit ;
78010: GO 78037
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
78012: LD_ADDR_EXP 94
78016: PUSH
78017: LD_EXP 94
78021: PPUSH
78022: LD_VAR 0 1
78026: PPUSH
78027: LD_VAR 0 2
78031: PPUSH
78032: CALL_OW 1
78036: ST_TO_ADDR
// end ; end_of_file
78037: LD_VAR 0 3
78041: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78042: LD_INT 0
78044: PPUSH
78045: PPUSH
78046: PPUSH
// if not mc_bases then
78047: LD_EXP 69
78051: NOT
78052: IFFALSE 78056
// exit ;
78054: GO 78221
// for i = 1 to mc_bases do
78056: LD_ADDR_VAR 0 4
78060: PUSH
78061: DOUBLE
78062: LD_INT 1
78064: DEC
78065: ST_TO_ADDR
78066: LD_EXP 69
78070: PUSH
78071: FOR_TO
78072: IFFALSE 78219
// begin if sci in mc_bases [ i ] then
78074: LD_VAR 0 2
78078: PUSH
78079: LD_EXP 69
78083: PUSH
78084: LD_VAR 0 4
78088: ARRAY
78089: IN
78090: IFFALSE 78217
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78092: LD_ADDR_EXP 98
78096: PUSH
78097: LD_EXP 98
78101: PPUSH
78102: LD_VAR 0 4
78106: PUSH
78107: LD_EXP 98
78111: PUSH
78112: LD_VAR 0 4
78116: ARRAY
78117: PUSH
78118: LD_INT 1
78120: PLUS
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PPUSH
78126: LD_VAR 0 1
78130: PPUSH
78131: CALL 25866 0 3
78135: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78136: LD_ADDR_VAR 0 5
78140: PUSH
78141: LD_EXP 69
78145: PUSH
78146: LD_VAR 0 4
78150: ARRAY
78151: PPUSH
78152: LD_INT 2
78154: PUSH
78155: LD_INT 30
78157: PUSH
78158: LD_INT 0
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 30
78167: PUSH
78168: LD_INT 1
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: LIST
78179: PPUSH
78180: CALL_OW 72
78184: PPUSH
78185: LD_VAR 0 1
78189: PPUSH
78190: CALL_OW 74
78194: ST_TO_ADDR
// if tmp then
78195: LD_VAR 0 5
78199: IFFALSE 78215
// ComStandNearbyBuilding ( ape , tmp ) ;
78201: LD_VAR 0 1
78205: PPUSH
78206: LD_VAR 0 5
78210: PPUSH
78211: CALL 20108 0 2
// break ;
78215: GO 78219
// end ; end ;
78217: GO 78071
78219: POP
78220: POP
// end ;
78221: LD_VAR 0 3
78225: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78226: LD_INT 0
78228: PPUSH
78229: PPUSH
78230: PPUSH
// if not mc_bases then
78231: LD_EXP 69
78235: NOT
78236: IFFALSE 78240
// exit ;
78238: GO 78329
// for i = 1 to mc_bases do
78240: LD_ADDR_VAR 0 4
78244: PUSH
78245: DOUBLE
78246: LD_INT 1
78248: DEC
78249: ST_TO_ADDR
78250: LD_EXP 69
78254: PUSH
78255: FOR_TO
78256: IFFALSE 78327
// begin if building in mc_busy_turret_list [ i ] then
78258: LD_VAR 0 1
78262: PUSH
78263: LD_EXP 79
78267: PUSH
78268: LD_VAR 0 4
78272: ARRAY
78273: IN
78274: IFFALSE 78325
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78276: LD_ADDR_VAR 0 5
78280: PUSH
78281: LD_EXP 79
78285: PUSH
78286: LD_VAR 0 4
78290: ARRAY
78291: PUSH
78292: LD_VAR 0 1
78296: DIFF
78297: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78298: LD_ADDR_EXP 79
78302: PUSH
78303: LD_EXP 79
78307: PPUSH
78308: LD_VAR 0 4
78312: PPUSH
78313: LD_VAR 0 5
78317: PPUSH
78318: CALL_OW 1
78322: ST_TO_ADDR
// break ;
78323: GO 78327
// end ; end ;
78325: GO 78255
78327: POP
78328: POP
// end ;
78329: LD_VAR 0 3
78333: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78334: LD_INT 0
78336: PPUSH
78337: PPUSH
78338: PPUSH
// if not mc_bases then
78339: LD_EXP 69
78343: NOT
78344: IFFALSE 78348
// exit ;
78346: GO 78547
// for i = 1 to mc_bases do
78348: LD_ADDR_VAR 0 5
78352: PUSH
78353: DOUBLE
78354: LD_INT 1
78356: DEC
78357: ST_TO_ADDR
78358: LD_EXP 69
78362: PUSH
78363: FOR_TO
78364: IFFALSE 78545
// if building in mc_bases [ i ] then
78366: LD_VAR 0 1
78370: PUSH
78371: LD_EXP 69
78375: PUSH
78376: LD_VAR 0 5
78380: ARRAY
78381: IN
78382: IFFALSE 78543
// begin tmp := mc_bases [ i ] diff building ;
78384: LD_ADDR_VAR 0 6
78388: PUSH
78389: LD_EXP 69
78393: PUSH
78394: LD_VAR 0 5
78398: ARRAY
78399: PUSH
78400: LD_VAR 0 1
78404: DIFF
78405: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78406: LD_ADDR_EXP 69
78410: PUSH
78411: LD_EXP 69
78415: PPUSH
78416: LD_VAR 0 5
78420: PPUSH
78421: LD_VAR 0 6
78425: PPUSH
78426: CALL_OW 1
78430: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78431: LD_VAR 0 1
78435: PUSH
78436: LD_EXP 77
78440: PUSH
78441: LD_VAR 0 5
78445: ARRAY
78446: IN
78447: IFFALSE 78486
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78449: LD_ADDR_EXP 77
78453: PUSH
78454: LD_EXP 77
78458: PPUSH
78459: LD_VAR 0 5
78463: PPUSH
78464: LD_EXP 77
78468: PUSH
78469: LD_VAR 0 5
78473: ARRAY
78474: PUSH
78475: LD_VAR 0 1
78479: DIFF
78480: PPUSH
78481: CALL_OW 1
78485: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78486: LD_VAR 0 1
78490: PUSH
78491: LD_EXP 78
78495: PUSH
78496: LD_VAR 0 5
78500: ARRAY
78501: IN
78502: IFFALSE 78541
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78504: LD_ADDR_EXP 78
78508: PUSH
78509: LD_EXP 78
78513: PPUSH
78514: LD_VAR 0 5
78518: PPUSH
78519: LD_EXP 78
78523: PUSH
78524: LD_VAR 0 5
78528: ARRAY
78529: PUSH
78530: LD_VAR 0 1
78534: DIFF
78535: PPUSH
78536: CALL_OW 1
78540: ST_TO_ADDR
// break ;
78541: GO 78545
// end ;
78543: GO 78363
78545: POP
78546: POP
// end ;
78547: LD_VAR 0 4
78551: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78552: LD_INT 0
78554: PPUSH
78555: PPUSH
78556: PPUSH
// if not mc_bases or not side in mc_sides then
78557: LD_EXP 69
78561: NOT
78562: PUSH
78563: LD_VAR 0 3
78567: PUSH
78568: LD_EXP 95
78572: IN
78573: NOT
78574: OR
78575: IFFALSE 78579
// exit ;
78577: GO 78702
// for i = 1 to mc_vehicles do
78579: LD_ADDR_VAR 0 6
78583: PUSH
78584: DOUBLE
78585: LD_INT 1
78587: DEC
78588: ST_TO_ADDR
78589: LD_EXP 88
78593: PUSH
78594: FOR_TO
78595: IFFALSE 78700
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78597: LD_VAR 0 2
78601: PUSH
78602: LD_EXP 88
78606: PUSH
78607: LD_VAR 0 6
78611: ARRAY
78612: IN
78613: PUSH
78614: LD_VAR 0 1
78618: PUSH
78619: LD_EXP 88
78623: PUSH
78624: LD_VAR 0 6
78628: ARRAY
78629: IN
78630: OR
78631: IFFALSE 78698
// begin tmp := mc_vehicles [ i ] diff old ;
78633: LD_ADDR_VAR 0 7
78637: PUSH
78638: LD_EXP 88
78642: PUSH
78643: LD_VAR 0 6
78647: ARRAY
78648: PUSH
78649: LD_VAR 0 2
78653: DIFF
78654: ST_TO_ADDR
// tmp := tmp diff new ;
78655: LD_ADDR_VAR 0 7
78659: PUSH
78660: LD_VAR 0 7
78664: PUSH
78665: LD_VAR 0 1
78669: DIFF
78670: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78671: LD_ADDR_EXP 88
78675: PUSH
78676: LD_EXP 88
78680: PPUSH
78681: LD_VAR 0 6
78685: PPUSH
78686: LD_VAR 0 7
78690: PPUSH
78691: CALL_OW 1
78695: ST_TO_ADDR
// break ;
78696: GO 78700
// end ;
78698: GO 78594
78700: POP
78701: POP
// end ;
78702: LD_VAR 0 5
78706: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78707: LD_INT 0
78709: PPUSH
78710: PPUSH
78711: PPUSH
78712: PPUSH
// if not mc_bases then
78713: LD_EXP 69
78717: NOT
78718: IFFALSE 78722
// exit ;
78720: GO 79014
// side := GetSide ( vehicle ) ;
78722: LD_ADDR_VAR 0 5
78726: PUSH
78727: LD_VAR 0 1
78731: PPUSH
78732: CALL_OW 255
78736: ST_TO_ADDR
// for i = 1 to mc_bases do
78737: LD_ADDR_VAR 0 4
78741: PUSH
78742: DOUBLE
78743: LD_INT 1
78745: DEC
78746: ST_TO_ADDR
78747: LD_EXP 69
78751: PUSH
78752: FOR_TO
78753: IFFALSE 79012
// begin if factory in mc_bases [ i ] then
78755: LD_VAR 0 2
78759: PUSH
78760: LD_EXP 69
78764: PUSH
78765: LD_VAR 0 4
78769: ARRAY
78770: IN
78771: IFFALSE 79010
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
78773: LD_EXP 91
78777: PUSH
78778: LD_VAR 0 4
78782: ARRAY
78783: PUSH
78784: LD_EXP 80
78788: PUSH
78789: LD_VAR 0 4
78793: ARRAY
78794: LESS
78795: IFFALSE 78966
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
78797: LD_ADDR_EXP 91
78801: PUSH
78802: LD_EXP 91
78806: PPUSH
78807: LD_VAR 0 4
78811: PPUSH
78812: LD_EXP 91
78816: PUSH
78817: LD_VAR 0 4
78821: ARRAY
78822: PUSH
78823: LD_VAR 0 1
78827: ADD
78828: PPUSH
78829: CALL_OW 1
78833: ST_TO_ADDR
// if not mc_scan [ i ] then
78834: LD_EXP 92
78838: PUSH
78839: LD_VAR 0 4
78843: ARRAY
78844: NOT
78845: IFFALSE 78964
// begin if GetControl ( vehicle ) = control_remote then
78847: LD_VAR 0 1
78851: PPUSH
78852: CALL_OW 263
78856: PUSH
78857: LD_INT 2
78859: EQUAL
78860: IFFALSE 78880
// repeat wait ( 0 0$1 ) ;
78862: LD_INT 35
78864: PPUSH
78865: CALL_OW 67
// until IsControledBy ( vehicle ) ;
78869: LD_VAR 0 1
78873: PPUSH
78874: CALL_OW 312
78878: IFFALSE 78862
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
78880: LD_VAR 0 1
78884: PPUSH
78885: LD_EXP 93
78889: PUSH
78890: LD_VAR 0 4
78894: ARRAY
78895: PPUSH
78896: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
78900: LD_VAR 0 1
78904: PPUSH
78905: CALL_OW 263
78909: PUSH
78910: LD_INT 1
78912: NONEQUAL
78913: IFFALSE 78917
// break ;
78915: GO 79012
// repeat wait ( 0 0$1 ) ;
78917: LD_INT 35
78919: PPUSH
78920: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
78924: LD_VAR 0 1
78928: PPUSH
78929: LD_EXP 93
78933: PUSH
78934: LD_VAR 0 4
78938: ARRAY
78939: PPUSH
78940: CALL_OW 308
78944: IFFALSE 78917
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
78946: LD_VAR 0 1
78950: PPUSH
78951: CALL_OW 311
78955: PPUSH
78956: CALL_OW 121
// exit ;
78960: POP
78961: POP
78962: GO 79014
// end ; end else
78964: GO 79010
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
78966: LD_ADDR_EXP 88
78970: PUSH
78971: LD_EXP 88
78975: PPUSH
78976: LD_VAR 0 4
78980: PUSH
78981: LD_EXP 88
78985: PUSH
78986: LD_VAR 0 4
78990: ARRAY
78991: PUSH
78992: LD_INT 1
78994: PLUS
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PPUSH
79000: LD_VAR 0 1
79004: PPUSH
79005: CALL 25866 0 3
79009: ST_TO_ADDR
// end ; end ;
79010: GO 78752
79012: POP
79013: POP
// end ;
79014: LD_VAR 0 3
79018: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79019: LD_INT 0
79021: PPUSH
79022: PPUSH
79023: PPUSH
79024: PPUSH
// if not mc_bases then
79025: LD_EXP 69
79029: NOT
79030: IFFALSE 79034
// exit ;
79032: GO 79387
// repeat wait ( 0 0$1 ) ;
79034: LD_INT 35
79036: PPUSH
79037: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79041: LD_VAR 0 2
79045: PPUSH
79046: LD_VAR 0 3
79050: PPUSH
79051: CALL_OW 284
79055: IFFALSE 79034
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79057: LD_VAR 0 2
79061: PPUSH
79062: LD_VAR 0 3
79066: PPUSH
79067: CALL_OW 283
79071: PUSH
79072: LD_INT 4
79074: EQUAL
79075: IFFALSE 79079
// exit ;
79077: GO 79387
// for i = 1 to mc_bases do
79079: LD_ADDR_VAR 0 7
79083: PUSH
79084: DOUBLE
79085: LD_INT 1
79087: DEC
79088: ST_TO_ADDR
79089: LD_EXP 69
79093: PUSH
79094: FOR_TO
79095: IFFALSE 79385
// begin if mc_crates_area [ i ] then
79097: LD_EXP 87
79101: PUSH
79102: LD_VAR 0 7
79106: ARRAY
79107: IFFALSE 79218
// for j in mc_crates_area [ i ] do
79109: LD_ADDR_VAR 0 8
79113: PUSH
79114: LD_EXP 87
79118: PUSH
79119: LD_VAR 0 7
79123: ARRAY
79124: PUSH
79125: FOR_IN
79126: IFFALSE 79216
// if InArea ( x , y , j ) then
79128: LD_VAR 0 2
79132: PPUSH
79133: LD_VAR 0 3
79137: PPUSH
79138: LD_VAR 0 8
79142: PPUSH
79143: CALL_OW 309
79147: IFFALSE 79214
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79149: LD_ADDR_EXP 85
79153: PUSH
79154: LD_EXP 85
79158: PPUSH
79159: LD_VAR 0 7
79163: PUSH
79164: LD_EXP 85
79168: PUSH
79169: LD_VAR 0 7
79173: ARRAY
79174: PUSH
79175: LD_INT 1
79177: PLUS
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PPUSH
79183: LD_VAR 0 4
79187: PUSH
79188: LD_VAR 0 2
79192: PUSH
79193: LD_VAR 0 3
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: LIST
79202: PPUSH
79203: CALL 25866 0 3
79207: ST_TO_ADDR
// exit ;
79208: POP
79209: POP
79210: POP
79211: POP
79212: GO 79387
// end ;
79214: GO 79125
79216: POP
79217: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79218: LD_ADDR_VAR 0 9
79222: PUSH
79223: LD_EXP 69
79227: PUSH
79228: LD_VAR 0 7
79232: ARRAY
79233: PPUSH
79234: LD_INT 2
79236: PUSH
79237: LD_INT 30
79239: PUSH
79240: LD_INT 0
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 30
79249: PUSH
79250: LD_INT 1
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: LIST
79261: PPUSH
79262: CALL_OW 72
79266: ST_TO_ADDR
// if not depot then
79267: LD_VAR 0 9
79271: NOT
79272: IFFALSE 79276
// continue ;
79274: GO 79094
// for j in depot do
79276: LD_ADDR_VAR 0 8
79280: PUSH
79281: LD_VAR 0 9
79285: PUSH
79286: FOR_IN
79287: IFFALSE 79381
// if GetDistUnitXY ( j , x , y ) < 30 then
79289: LD_VAR 0 8
79293: PPUSH
79294: LD_VAR 0 2
79298: PPUSH
79299: LD_VAR 0 3
79303: PPUSH
79304: CALL_OW 297
79308: PUSH
79309: LD_INT 30
79311: LESS
79312: IFFALSE 79379
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79314: LD_ADDR_EXP 85
79318: PUSH
79319: LD_EXP 85
79323: PPUSH
79324: LD_VAR 0 7
79328: PUSH
79329: LD_EXP 85
79333: PUSH
79334: LD_VAR 0 7
79338: ARRAY
79339: PUSH
79340: LD_INT 1
79342: PLUS
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PPUSH
79348: LD_VAR 0 4
79352: PUSH
79353: LD_VAR 0 2
79357: PUSH
79358: LD_VAR 0 3
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: LIST
79367: PPUSH
79368: CALL 25866 0 3
79372: ST_TO_ADDR
// exit ;
79373: POP
79374: POP
79375: POP
79376: POP
79377: GO 79387
// end ;
79379: GO 79286
79381: POP
79382: POP
// end ;
79383: GO 79094
79385: POP
79386: POP
// end ;
79387: LD_VAR 0 6
79391: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79392: LD_INT 0
79394: PPUSH
79395: PPUSH
79396: PPUSH
79397: PPUSH
// side := GetSide ( lab ) ;
79398: LD_ADDR_VAR 0 4
79402: PUSH
79403: LD_VAR 0 2
79407: PPUSH
79408: CALL_OW 255
79412: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79413: LD_VAR 0 4
79417: PUSH
79418: LD_EXP 95
79422: IN
79423: NOT
79424: PUSH
79425: LD_EXP 96
79429: NOT
79430: OR
79431: PUSH
79432: LD_EXP 69
79436: NOT
79437: OR
79438: IFFALSE 79442
// exit ;
79440: GO 79675
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79442: LD_ADDR_EXP 96
79446: PUSH
79447: LD_EXP 96
79451: PPUSH
79452: LD_VAR 0 4
79456: PPUSH
79457: LD_EXP 96
79461: PUSH
79462: LD_VAR 0 4
79466: ARRAY
79467: PUSH
79468: LD_VAR 0 1
79472: DIFF
79473: PPUSH
79474: CALL_OW 1
79478: ST_TO_ADDR
// for i = 1 to mc_bases do
79479: LD_ADDR_VAR 0 5
79483: PUSH
79484: DOUBLE
79485: LD_INT 1
79487: DEC
79488: ST_TO_ADDR
79489: LD_EXP 69
79493: PUSH
79494: FOR_TO
79495: IFFALSE 79673
// begin if lab in mc_bases [ i ] then
79497: LD_VAR 0 2
79501: PUSH
79502: LD_EXP 69
79506: PUSH
79507: LD_VAR 0 5
79511: ARRAY
79512: IN
79513: IFFALSE 79671
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79515: LD_VAR 0 1
79519: PUSH
79520: LD_INT 11
79522: PUSH
79523: LD_INT 4
79525: PUSH
79526: LD_INT 3
79528: PUSH
79529: LD_INT 2
79531: PUSH
79532: EMPTY
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: IN
79538: PUSH
79539: LD_EXP 99
79543: PUSH
79544: LD_VAR 0 5
79548: ARRAY
79549: AND
79550: IFFALSE 79671
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79552: LD_ADDR_VAR 0 6
79556: PUSH
79557: LD_EXP 99
79561: PUSH
79562: LD_VAR 0 5
79566: ARRAY
79567: PUSH
79568: LD_INT 1
79570: ARRAY
79571: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79572: LD_ADDR_EXP 99
79576: PUSH
79577: LD_EXP 99
79581: PPUSH
79582: LD_VAR 0 5
79586: PPUSH
79587: EMPTY
79588: PPUSH
79589: CALL_OW 1
79593: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79594: LD_VAR 0 6
79598: PPUSH
79599: LD_INT 0
79601: PPUSH
79602: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79606: LD_VAR 0 6
79610: PPUSH
79611: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79615: LD_ADDR_EXP 98
79619: PUSH
79620: LD_EXP 98
79624: PPUSH
79625: LD_VAR 0 5
79629: PPUSH
79630: LD_EXP 98
79634: PUSH
79635: LD_VAR 0 5
79639: ARRAY
79640: PPUSH
79641: LD_INT 1
79643: PPUSH
79644: LD_VAR 0 6
79648: PPUSH
79649: CALL_OW 2
79653: PPUSH
79654: CALL_OW 1
79658: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79659: LD_VAR 0 5
79663: PPUSH
79664: LD_INT 112
79666: PPUSH
79667: CALL 63614 0 2
// end ; end ; end ;
79671: GO 79494
79673: POP
79674: POP
// end ;
79675: LD_VAR 0 3
79679: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79680: LD_INT 0
79682: PPUSH
79683: PPUSH
79684: PPUSH
79685: PPUSH
79686: PPUSH
79687: PPUSH
79688: PPUSH
79689: PPUSH
// if not mc_bases then
79690: LD_EXP 69
79694: NOT
79695: IFFALSE 79699
// exit ;
79697: GO 80624
// for i = 1 to mc_bases do
79699: LD_ADDR_VAR 0 3
79703: PUSH
79704: DOUBLE
79705: LD_INT 1
79707: DEC
79708: ST_TO_ADDR
79709: LD_EXP 69
79713: PUSH
79714: FOR_TO
79715: IFFALSE 80622
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79717: LD_VAR 0 1
79721: PUSH
79722: LD_EXP 69
79726: PUSH
79727: LD_VAR 0 3
79731: ARRAY
79732: IN
79733: PUSH
79734: LD_VAR 0 1
79738: PUSH
79739: LD_EXP 76
79743: PUSH
79744: LD_VAR 0 3
79748: ARRAY
79749: IN
79750: OR
79751: PUSH
79752: LD_VAR 0 1
79756: PUSH
79757: LD_EXP 88
79761: PUSH
79762: LD_VAR 0 3
79766: ARRAY
79767: IN
79768: OR
79769: PUSH
79770: LD_VAR 0 1
79774: PUSH
79775: LD_EXP 98
79779: PUSH
79780: LD_VAR 0 3
79784: ARRAY
79785: IN
79786: OR
79787: PUSH
79788: LD_VAR 0 1
79792: PUSH
79793: LD_EXP 99
79797: PUSH
79798: LD_VAR 0 3
79802: ARRAY
79803: IN
79804: OR
79805: IFFALSE 80620
// begin if un in mc_ape [ i ] then
79807: LD_VAR 0 1
79811: PUSH
79812: LD_EXP 98
79816: PUSH
79817: LD_VAR 0 3
79821: ARRAY
79822: IN
79823: IFFALSE 79862
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
79825: LD_ADDR_EXP 98
79829: PUSH
79830: LD_EXP 98
79834: PPUSH
79835: LD_VAR 0 3
79839: PPUSH
79840: LD_EXP 98
79844: PUSH
79845: LD_VAR 0 3
79849: ARRAY
79850: PUSH
79851: LD_VAR 0 1
79855: DIFF
79856: PPUSH
79857: CALL_OW 1
79861: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
79862: LD_VAR 0 1
79866: PUSH
79867: LD_EXP 99
79871: PUSH
79872: LD_VAR 0 3
79876: ARRAY
79877: IN
79878: IFFALSE 79902
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79880: LD_ADDR_EXP 99
79884: PUSH
79885: LD_EXP 99
79889: PPUSH
79890: LD_VAR 0 3
79894: PPUSH
79895: EMPTY
79896: PPUSH
79897: CALL_OW 1
79901: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
79902: LD_VAR 0 1
79906: PPUSH
79907: CALL_OW 247
79911: PUSH
79912: LD_INT 2
79914: EQUAL
79915: PUSH
79916: LD_VAR 0 1
79920: PPUSH
79921: CALL_OW 110
79925: PUSH
79926: LD_INT 20
79928: EQUAL
79929: AND
79930: IFFALSE 80033
// begin fac := MC_GetBuilding ( i , b_factory ) ;
79932: LD_ADDR_VAR 0 8
79936: PUSH
79937: LD_VAR 0 3
79941: PPUSH
79942: LD_INT 3
79944: PPUSH
79945: CALL 77146 0 2
79949: ST_TO_ADDR
// if fac then
79950: LD_VAR 0 8
79954: IFFALSE 80033
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
79956: LD_ADDR_VAR 0 9
79960: PUSH
79961: LD_VAR 0 8
79965: PPUSH
79966: LD_VAR 0 1
79970: PPUSH
79971: CALL_OW 265
79975: PPUSH
79976: LD_VAR 0 1
79980: PPUSH
79981: CALL_OW 262
79985: PPUSH
79986: LD_VAR 0 1
79990: PPUSH
79991: CALL_OW 263
79995: PPUSH
79996: LD_VAR 0 1
80000: PPUSH
80001: CALL_OW 264
80005: PPUSH
80006: CALL 23031 0 5
80010: ST_TO_ADDR
// if components then
80011: LD_VAR 0 9
80015: IFFALSE 80031
// MC_InsertProduceList ( i , components ) ;
80017: LD_VAR 0 3
80021: PPUSH
80022: LD_VAR 0 9
80026: PPUSH
80027: CALL 76713 0 2
// break ;
80031: GO 80622
// end ; end ; if GetType ( un ) = unit_building then
80033: LD_VAR 0 1
80037: PPUSH
80038: CALL_OW 247
80042: PUSH
80043: LD_INT 3
80045: EQUAL
80046: IFFALSE 80343
// begin btype := GetBType ( un ) ;
80048: LD_ADDR_VAR 0 5
80052: PUSH
80053: LD_VAR 0 1
80057: PPUSH
80058: CALL_OW 266
80062: ST_TO_ADDR
// if btype = b_warehouse then
80063: LD_VAR 0 5
80067: PUSH
80068: LD_INT 1
80070: EQUAL
80071: IFFALSE 80089
// begin btype := b_depot ;
80073: LD_ADDR_VAR 0 5
80077: PUSH
80078: LD_INT 0
80080: ST_TO_ADDR
// pos := 1 ;
80081: LD_ADDR_VAR 0 6
80085: PUSH
80086: LD_INT 1
80088: ST_TO_ADDR
// end ; if btype = b_factory then
80089: LD_VAR 0 5
80093: PUSH
80094: LD_INT 3
80096: EQUAL
80097: IFFALSE 80115
// begin btype := b_workshop ;
80099: LD_ADDR_VAR 0 5
80103: PUSH
80104: LD_INT 2
80106: ST_TO_ADDR
// pos := 1 ;
80107: LD_ADDR_VAR 0 6
80111: PUSH
80112: LD_INT 1
80114: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
80115: LD_VAR 0 5
80119: PUSH
80120: LD_INT 7
80122: PUSH
80123: LD_INT 8
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: IN
80130: IFFALSE 80140
// btype := b_lab ;
80132: LD_ADDR_VAR 0 5
80136: PUSH
80137: LD_INT 6
80139: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80140: LD_ADDR_EXP 74
80144: PUSH
80145: LD_EXP 74
80149: PPUSH
80150: LD_VAR 0 3
80154: PUSH
80155: LD_EXP 74
80159: PUSH
80160: LD_VAR 0 3
80164: ARRAY
80165: PUSH
80166: LD_INT 1
80168: PLUS
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: PPUSH
80174: LD_VAR 0 5
80178: PUSH
80179: LD_VAR 0 1
80183: PPUSH
80184: CALL_OW 250
80188: PUSH
80189: LD_VAR 0 1
80193: PPUSH
80194: CALL_OW 251
80198: PUSH
80199: LD_VAR 0 1
80203: PPUSH
80204: CALL_OW 254
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: PPUSH
80215: CALL 25866 0 3
80219: ST_TO_ADDR
// if pos = 1 then
80220: LD_VAR 0 6
80224: PUSH
80225: LD_INT 1
80227: EQUAL
80228: IFFALSE 80343
// begin tmp := mc_build_list [ i ] ;
80230: LD_ADDR_VAR 0 7
80234: PUSH
80235: LD_EXP 74
80239: PUSH
80240: LD_VAR 0 3
80244: ARRAY
80245: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80246: LD_VAR 0 7
80250: PPUSH
80251: LD_INT 2
80253: PUSH
80254: LD_INT 30
80256: PUSH
80257: LD_INT 0
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: LD_INT 30
80266: PUSH
80267: LD_INT 1
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: LIST
80278: PPUSH
80279: CALL_OW 72
80283: IFFALSE 80293
// pos := 2 ;
80285: LD_ADDR_VAR 0 6
80289: PUSH
80290: LD_INT 2
80292: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80293: LD_ADDR_VAR 0 7
80297: PUSH
80298: LD_VAR 0 7
80302: PPUSH
80303: LD_VAR 0 6
80307: PPUSH
80308: LD_VAR 0 7
80312: PPUSH
80313: CALL 25757 0 3
80317: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80318: LD_ADDR_EXP 74
80322: PUSH
80323: LD_EXP 74
80327: PPUSH
80328: LD_VAR 0 3
80332: PPUSH
80333: LD_VAR 0 7
80337: PPUSH
80338: CALL_OW 1
80342: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80343: LD_VAR 0 1
80347: PUSH
80348: LD_EXP 69
80352: PUSH
80353: LD_VAR 0 3
80357: ARRAY
80358: IN
80359: IFFALSE 80398
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80361: LD_ADDR_EXP 69
80365: PUSH
80366: LD_EXP 69
80370: PPUSH
80371: LD_VAR 0 3
80375: PPUSH
80376: LD_EXP 69
80380: PUSH
80381: LD_VAR 0 3
80385: ARRAY
80386: PUSH
80387: LD_VAR 0 1
80391: DIFF
80392: PPUSH
80393: CALL_OW 1
80397: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80398: LD_VAR 0 1
80402: PUSH
80403: LD_EXP 76
80407: PUSH
80408: LD_VAR 0 3
80412: ARRAY
80413: IN
80414: IFFALSE 80453
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80416: LD_ADDR_EXP 76
80420: PUSH
80421: LD_EXP 76
80425: PPUSH
80426: LD_VAR 0 3
80430: PPUSH
80431: LD_EXP 76
80435: PUSH
80436: LD_VAR 0 3
80440: ARRAY
80441: PUSH
80442: LD_VAR 0 1
80446: DIFF
80447: PPUSH
80448: CALL_OW 1
80452: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80453: LD_VAR 0 1
80457: PUSH
80458: LD_EXP 88
80462: PUSH
80463: LD_VAR 0 3
80467: ARRAY
80468: IN
80469: IFFALSE 80508
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80471: LD_ADDR_EXP 88
80475: PUSH
80476: LD_EXP 88
80480: PPUSH
80481: LD_VAR 0 3
80485: PPUSH
80486: LD_EXP 88
80490: PUSH
80491: LD_VAR 0 3
80495: ARRAY
80496: PUSH
80497: LD_VAR 0 1
80501: DIFF
80502: PPUSH
80503: CALL_OW 1
80507: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80508: LD_VAR 0 1
80512: PUSH
80513: LD_EXP 78
80517: PUSH
80518: LD_VAR 0 3
80522: ARRAY
80523: IN
80524: IFFALSE 80563
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80526: LD_ADDR_EXP 78
80530: PUSH
80531: LD_EXP 78
80535: PPUSH
80536: LD_VAR 0 3
80540: PPUSH
80541: LD_EXP 78
80545: PUSH
80546: LD_VAR 0 3
80550: ARRAY
80551: PUSH
80552: LD_VAR 0 1
80556: DIFF
80557: PPUSH
80558: CALL_OW 1
80562: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80563: LD_VAR 0 1
80567: PUSH
80568: LD_EXP 77
80572: PUSH
80573: LD_VAR 0 3
80577: ARRAY
80578: IN
80579: IFFALSE 80618
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80581: LD_ADDR_EXP 77
80585: PUSH
80586: LD_EXP 77
80590: PPUSH
80591: LD_VAR 0 3
80595: PPUSH
80596: LD_EXP 77
80600: PUSH
80601: LD_VAR 0 3
80605: ARRAY
80606: PUSH
80607: LD_VAR 0 1
80611: DIFF
80612: PPUSH
80613: CALL_OW 1
80617: ST_TO_ADDR
// end ; break ;
80618: GO 80622
// end ;
80620: GO 79714
80622: POP
80623: POP
// end ;
80624: LD_VAR 0 2
80628: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80629: LD_INT 0
80631: PPUSH
80632: PPUSH
80633: PPUSH
// if not mc_bases then
80634: LD_EXP 69
80638: NOT
80639: IFFALSE 80643
// exit ;
80641: GO 80858
// for i = 1 to mc_bases do
80643: LD_ADDR_VAR 0 3
80647: PUSH
80648: DOUBLE
80649: LD_INT 1
80651: DEC
80652: ST_TO_ADDR
80653: LD_EXP 69
80657: PUSH
80658: FOR_TO
80659: IFFALSE 80856
// begin if building in mc_construct_list [ i ] then
80661: LD_VAR 0 1
80665: PUSH
80666: LD_EXP 76
80670: PUSH
80671: LD_VAR 0 3
80675: ARRAY
80676: IN
80677: IFFALSE 80854
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80679: LD_ADDR_EXP 76
80683: PUSH
80684: LD_EXP 76
80688: PPUSH
80689: LD_VAR 0 3
80693: PPUSH
80694: LD_EXP 76
80698: PUSH
80699: LD_VAR 0 3
80703: ARRAY
80704: PUSH
80705: LD_VAR 0 1
80709: DIFF
80710: PPUSH
80711: CALL_OW 1
80715: ST_TO_ADDR
// if building in mc_lab [ i ] then
80716: LD_VAR 0 1
80720: PUSH
80721: LD_EXP 102
80725: PUSH
80726: LD_VAR 0 3
80730: ARRAY
80731: IN
80732: IFFALSE 80787
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
80734: LD_ADDR_EXP 103
80738: PUSH
80739: LD_EXP 103
80743: PPUSH
80744: LD_VAR 0 3
80748: PPUSH
80749: LD_EXP 103
80753: PUSH
80754: LD_VAR 0 3
80758: ARRAY
80759: PPUSH
80760: LD_INT 1
80762: PPUSH
80763: LD_EXP 103
80767: PUSH
80768: LD_VAR 0 3
80772: ARRAY
80773: PPUSH
80774: LD_INT 0
80776: PPUSH
80777: CALL 24849 0 4
80781: PPUSH
80782: CALL_OW 1
80786: ST_TO_ADDR
// if not building in mc_bases [ i ] then
80787: LD_VAR 0 1
80791: PUSH
80792: LD_EXP 69
80796: PUSH
80797: LD_VAR 0 3
80801: ARRAY
80802: IN
80803: NOT
80804: IFFALSE 80850
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80806: LD_ADDR_EXP 69
80810: PUSH
80811: LD_EXP 69
80815: PPUSH
80816: LD_VAR 0 3
80820: PUSH
80821: LD_EXP 69
80825: PUSH
80826: LD_VAR 0 3
80830: ARRAY
80831: PUSH
80832: LD_INT 1
80834: PLUS
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PPUSH
80840: LD_VAR 0 1
80844: PPUSH
80845: CALL 25866 0 3
80849: ST_TO_ADDR
// exit ;
80850: POP
80851: POP
80852: GO 80858
// end ; end ;
80854: GO 80658
80856: POP
80857: POP
// end ;
80858: LD_VAR 0 2
80862: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
80863: LD_INT 0
80865: PPUSH
80866: PPUSH
80867: PPUSH
80868: PPUSH
80869: PPUSH
80870: PPUSH
80871: PPUSH
// if not mc_bases then
80872: LD_EXP 69
80876: NOT
80877: IFFALSE 80881
// exit ;
80879: GO 81542
// for i = 1 to mc_bases do
80881: LD_ADDR_VAR 0 3
80885: PUSH
80886: DOUBLE
80887: LD_INT 1
80889: DEC
80890: ST_TO_ADDR
80891: LD_EXP 69
80895: PUSH
80896: FOR_TO
80897: IFFALSE 81540
// begin if building in mc_construct_list [ i ] then
80899: LD_VAR 0 1
80903: PUSH
80904: LD_EXP 76
80908: PUSH
80909: LD_VAR 0 3
80913: ARRAY
80914: IN
80915: IFFALSE 81538
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80917: LD_ADDR_EXP 76
80921: PUSH
80922: LD_EXP 76
80926: PPUSH
80927: LD_VAR 0 3
80931: PPUSH
80932: LD_EXP 76
80936: PUSH
80937: LD_VAR 0 3
80941: ARRAY
80942: PUSH
80943: LD_VAR 0 1
80947: DIFF
80948: PPUSH
80949: CALL_OW 1
80953: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80954: LD_ADDR_EXP 69
80958: PUSH
80959: LD_EXP 69
80963: PPUSH
80964: LD_VAR 0 3
80968: PUSH
80969: LD_EXP 69
80973: PUSH
80974: LD_VAR 0 3
80978: ARRAY
80979: PUSH
80980: LD_INT 1
80982: PLUS
80983: PUSH
80984: EMPTY
80985: LIST
80986: LIST
80987: PPUSH
80988: LD_VAR 0 1
80992: PPUSH
80993: CALL 25866 0 3
80997: ST_TO_ADDR
// btype := GetBType ( building ) ;
80998: LD_ADDR_VAR 0 5
81002: PUSH
81003: LD_VAR 0 1
81007: PPUSH
81008: CALL_OW 266
81012: ST_TO_ADDR
// side := GetSide ( building ) ;
81013: LD_ADDR_VAR 0 8
81017: PUSH
81018: LD_VAR 0 1
81022: PPUSH
81023: CALL_OW 255
81027: ST_TO_ADDR
// if btype = b_lab then
81028: LD_VAR 0 5
81032: PUSH
81033: LD_INT 6
81035: EQUAL
81036: IFFALSE 81086
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81038: LD_ADDR_EXP 102
81042: PUSH
81043: LD_EXP 102
81047: PPUSH
81048: LD_VAR 0 3
81052: PUSH
81053: LD_EXP 102
81057: PUSH
81058: LD_VAR 0 3
81062: ARRAY
81063: PUSH
81064: LD_INT 1
81066: PLUS
81067: PUSH
81068: EMPTY
81069: LIST
81070: LIST
81071: PPUSH
81072: LD_VAR 0 1
81076: PPUSH
81077: CALL 25866 0 3
81081: ST_TO_ADDR
// exit ;
81082: POP
81083: POP
81084: GO 81542
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81086: LD_VAR 0 5
81090: PUSH
81091: LD_INT 0
81093: PUSH
81094: LD_INT 2
81096: PUSH
81097: LD_INT 4
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: LIST
81104: IN
81105: IFFALSE 81229
// begin if btype = b_armoury then
81107: LD_VAR 0 5
81111: PUSH
81112: LD_INT 4
81114: EQUAL
81115: IFFALSE 81125
// btype := b_barracks ;
81117: LD_ADDR_VAR 0 5
81121: PUSH
81122: LD_INT 5
81124: ST_TO_ADDR
// if btype = b_depot then
81125: LD_VAR 0 5
81129: PUSH
81130: LD_INT 0
81132: EQUAL
81133: IFFALSE 81143
// btype := b_warehouse ;
81135: LD_ADDR_VAR 0 5
81139: PUSH
81140: LD_INT 1
81142: ST_TO_ADDR
// if btype = b_workshop then
81143: LD_VAR 0 5
81147: PUSH
81148: LD_INT 2
81150: EQUAL
81151: IFFALSE 81161
// btype := b_factory ;
81153: LD_ADDR_VAR 0 5
81157: PUSH
81158: LD_INT 3
81160: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81161: LD_VAR 0 5
81165: PPUSH
81166: LD_VAR 0 8
81170: PPUSH
81171: CALL_OW 323
81175: PUSH
81176: LD_INT 1
81178: EQUAL
81179: IFFALSE 81225
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81181: LD_ADDR_EXP 101
81185: PUSH
81186: LD_EXP 101
81190: PPUSH
81191: LD_VAR 0 3
81195: PUSH
81196: LD_EXP 101
81200: PUSH
81201: LD_VAR 0 3
81205: ARRAY
81206: PUSH
81207: LD_INT 1
81209: PLUS
81210: PUSH
81211: EMPTY
81212: LIST
81213: LIST
81214: PPUSH
81215: LD_VAR 0 1
81219: PPUSH
81220: CALL 25866 0 3
81224: ST_TO_ADDR
// exit ;
81225: POP
81226: POP
81227: GO 81542
// end ; if btype in [ b_bunker , b_turret ] then
81229: LD_VAR 0 5
81233: PUSH
81234: LD_INT 32
81236: PUSH
81237: LD_INT 33
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: IN
81244: IFFALSE 81534
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81246: LD_ADDR_EXP 77
81250: PUSH
81251: LD_EXP 77
81255: PPUSH
81256: LD_VAR 0 3
81260: PUSH
81261: LD_EXP 77
81265: PUSH
81266: LD_VAR 0 3
81270: ARRAY
81271: PUSH
81272: LD_INT 1
81274: PLUS
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PPUSH
81280: LD_VAR 0 1
81284: PPUSH
81285: CALL 25866 0 3
81289: ST_TO_ADDR
// if btype = b_bunker then
81290: LD_VAR 0 5
81294: PUSH
81295: LD_INT 32
81297: EQUAL
81298: IFFALSE 81534
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81300: LD_ADDR_EXP 78
81304: PUSH
81305: LD_EXP 78
81309: PPUSH
81310: LD_VAR 0 3
81314: PUSH
81315: LD_EXP 78
81319: PUSH
81320: LD_VAR 0 3
81324: ARRAY
81325: PUSH
81326: LD_INT 1
81328: PLUS
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PPUSH
81334: LD_VAR 0 1
81338: PPUSH
81339: CALL 25866 0 3
81343: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81344: LD_ADDR_VAR 0 6
81348: PUSH
81349: LD_EXP 69
81353: PUSH
81354: LD_VAR 0 3
81358: ARRAY
81359: PPUSH
81360: LD_INT 25
81362: PUSH
81363: LD_INT 1
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: PUSH
81370: LD_INT 3
81372: PUSH
81373: LD_INT 54
81375: PUSH
81376: EMPTY
81377: LIST
81378: PUSH
81379: EMPTY
81380: LIST
81381: LIST
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: PPUSH
81387: CALL_OW 72
81391: ST_TO_ADDR
// if tmp then
81392: LD_VAR 0 6
81396: IFFALSE 81402
// exit ;
81398: POP
81399: POP
81400: GO 81542
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81402: LD_ADDR_VAR 0 6
81406: PUSH
81407: LD_EXP 69
81411: PUSH
81412: LD_VAR 0 3
81416: ARRAY
81417: PPUSH
81418: LD_INT 2
81420: PUSH
81421: LD_INT 30
81423: PUSH
81424: LD_INT 4
81426: PUSH
81427: EMPTY
81428: LIST
81429: LIST
81430: PUSH
81431: LD_INT 30
81433: PUSH
81434: LD_INT 5
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: PUSH
81441: EMPTY
81442: LIST
81443: LIST
81444: LIST
81445: PPUSH
81446: CALL_OW 72
81450: ST_TO_ADDR
// if not tmp then
81451: LD_VAR 0 6
81455: NOT
81456: IFFALSE 81462
// exit ;
81458: POP
81459: POP
81460: GO 81542
// for j in tmp do
81462: LD_ADDR_VAR 0 4
81466: PUSH
81467: LD_VAR 0 6
81471: PUSH
81472: FOR_IN
81473: IFFALSE 81532
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81475: LD_ADDR_VAR 0 7
81479: PUSH
81480: LD_VAR 0 4
81484: PPUSH
81485: CALL_OW 313
81489: PPUSH
81490: LD_INT 25
81492: PUSH
81493: LD_INT 1
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: PPUSH
81500: CALL_OW 72
81504: ST_TO_ADDR
// if units then
81505: LD_VAR 0 7
81509: IFFALSE 81530
// begin ComExitBuilding ( units [ 1 ] ) ;
81511: LD_VAR 0 7
81515: PUSH
81516: LD_INT 1
81518: ARRAY
81519: PPUSH
81520: CALL_OW 122
// exit ;
81524: POP
81525: POP
81526: POP
81527: POP
81528: GO 81542
// end ; end ;
81530: GO 81472
81532: POP
81533: POP
// end ; end ; exit ;
81534: POP
81535: POP
81536: GO 81542
// end ; end ;
81538: GO 80896
81540: POP
81541: POP
// end ;
81542: LD_VAR 0 2
81546: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81547: LD_INT 0
81549: PPUSH
81550: PPUSH
81551: PPUSH
81552: PPUSH
81553: PPUSH
81554: PPUSH
81555: PPUSH
// if not mc_bases then
81556: LD_EXP 69
81560: NOT
81561: IFFALSE 81565
// exit ;
81563: GO 81796
// btype := GetBType ( building ) ;
81565: LD_ADDR_VAR 0 6
81569: PUSH
81570: LD_VAR 0 1
81574: PPUSH
81575: CALL_OW 266
81579: ST_TO_ADDR
// x := GetX ( building ) ;
81580: LD_ADDR_VAR 0 7
81584: PUSH
81585: LD_VAR 0 1
81589: PPUSH
81590: CALL_OW 250
81594: ST_TO_ADDR
// y := GetY ( building ) ;
81595: LD_ADDR_VAR 0 8
81599: PUSH
81600: LD_VAR 0 1
81604: PPUSH
81605: CALL_OW 251
81609: ST_TO_ADDR
// d := GetDir ( building ) ;
81610: LD_ADDR_VAR 0 9
81614: PUSH
81615: LD_VAR 0 1
81619: PPUSH
81620: CALL_OW 254
81624: ST_TO_ADDR
// for i = 1 to mc_bases do
81625: LD_ADDR_VAR 0 4
81629: PUSH
81630: DOUBLE
81631: LD_INT 1
81633: DEC
81634: ST_TO_ADDR
81635: LD_EXP 69
81639: PUSH
81640: FOR_TO
81641: IFFALSE 81794
// begin if not mc_build_list [ i ] then
81643: LD_EXP 74
81647: PUSH
81648: LD_VAR 0 4
81652: ARRAY
81653: NOT
81654: IFFALSE 81658
// continue ;
81656: GO 81640
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
81658: LD_VAR 0 6
81662: PUSH
81663: LD_VAR 0 7
81667: PUSH
81668: LD_VAR 0 8
81672: PUSH
81673: LD_VAR 0 9
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: PPUSH
81684: LD_EXP 74
81688: PUSH
81689: LD_VAR 0 4
81693: ARRAY
81694: PUSH
81695: LD_INT 1
81697: ARRAY
81698: PPUSH
81699: CALL 31503 0 2
81703: IFFALSE 81792
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
81705: LD_ADDR_EXP 74
81709: PUSH
81710: LD_EXP 74
81714: PPUSH
81715: LD_VAR 0 4
81719: PPUSH
81720: LD_EXP 74
81724: PUSH
81725: LD_VAR 0 4
81729: ARRAY
81730: PPUSH
81731: LD_INT 1
81733: PPUSH
81734: CALL_OW 3
81738: PPUSH
81739: CALL_OW 1
81743: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
81744: LD_ADDR_EXP 76
81748: PUSH
81749: LD_EXP 76
81753: PPUSH
81754: LD_VAR 0 4
81758: PUSH
81759: LD_EXP 76
81763: PUSH
81764: LD_VAR 0 4
81768: ARRAY
81769: PUSH
81770: LD_INT 1
81772: PLUS
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: PPUSH
81778: LD_VAR 0 1
81782: PPUSH
81783: CALL 25866 0 3
81787: ST_TO_ADDR
// exit ;
81788: POP
81789: POP
81790: GO 81796
// end ; end ;
81792: GO 81640
81794: POP
81795: POP
// end ;
81796: LD_VAR 0 3
81800: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
81801: LD_INT 0
81803: PPUSH
81804: PPUSH
81805: PPUSH
// if not mc_bases then
81806: LD_EXP 69
81810: NOT
81811: IFFALSE 81815
// exit ;
81813: GO 82005
// for i = 1 to mc_bases do
81815: LD_ADDR_VAR 0 4
81819: PUSH
81820: DOUBLE
81821: LD_INT 1
81823: DEC
81824: ST_TO_ADDR
81825: LD_EXP 69
81829: PUSH
81830: FOR_TO
81831: IFFALSE 81918
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
81833: LD_VAR 0 1
81837: PUSH
81838: LD_EXP 77
81842: PUSH
81843: LD_VAR 0 4
81847: ARRAY
81848: IN
81849: PUSH
81850: LD_VAR 0 1
81854: PUSH
81855: LD_EXP 78
81859: PUSH
81860: LD_VAR 0 4
81864: ARRAY
81865: IN
81866: NOT
81867: AND
81868: IFFALSE 81916
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81870: LD_ADDR_EXP 78
81874: PUSH
81875: LD_EXP 78
81879: PPUSH
81880: LD_VAR 0 4
81884: PUSH
81885: LD_EXP 78
81889: PUSH
81890: LD_VAR 0 4
81894: ARRAY
81895: PUSH
81896: LD_INT 1
81898: PLUS
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PPUSH
81904: LD_VAR 0 1
81908: PPUSH
81909: CALL 25866 0 3
81913: ST_TO_ADDR
// break ;
81914: GO 81918
// end ; end ;
81916: GO 81830
81918: POP
81919: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
81920: LD_VAR 0 1
81924: PPUSH
81925: CALL_OW 257
81929: PUSH
81930: LD_EXP 95
81934: IN
81935: PUSH
81936: LD_VAR 0 1
81940: PPUSH
81941: CALL_OW 266
81945: PUSH
81946: LD_INT 5
81948: EQUAL
81949: AND
81950: PUSH
81951: LD_VAR 0 2
81955: PPUSH
81956: CALL_OW 110
81960: PUSH
81961: LD_INT 18
81963: NONEQUAL
81964: AND
81965: IFFALSE 82005
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
81967: LD_VAR 0 2
81971: PPUSH
81972: CALL_OW 257
81976: PUSH
81977: LD_INT 5
81979: PUSH
81980: LD_INT 8
81982: PUSH
81983: LD_INT 9
81985: PUSH
81986: EMPTY
81987: LIST
81988: LIST
81989: LIST
81990: IN
81991: IFFALSE 82005
// SetClass ( unit , 1 ) ;
81993: LD_VAR 0 2
81997: PPUSH
81998: LD_INT 1
82000: PPUSH
82001: CALL_OW 336
// end ;
82005: LD_VAR 0 3
82009: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82010: LD_INT 0
82012: PPUSH
82013: PPUSH
// if not mc_bases then
82014: LD_EXP 69
82018: NOT
82019: IFFALSE 82023
// exit ;
82021: GO 82139
// if GetLives ( abandoned_vehicle ) > 250 then
82023: LD_VAR 0 2
82027: PPUSH
82028: CALL_OW 256
82032: PUSH
82033: LD_INT 250
82035: GREATER
82036: IFFALSE 82040
// exit ;
82038: GO 82139
// for i = 1 to mc_bases do
82040: LD_ADDR_VAR 0 6
82044: PUSH
82045: DOUBLE
82046: LD_INT 1
82048: DEC
82049: ST_TO_ADDR
82050: LD_EXP 69
82054: PUSH
82055: FOR_TO
82056: IFFALSE 82137
// begin if driver in mc_bases [ i ] then
82058: LD_VAR 0 1
82062: PUSH
82063: LD_EXP 69
82067: PUSH
82068: LD_VAR 0 6
82072: ARRAY
82073: IN
82074: IFFALSE 82135
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82076: LD_VAR 0 1
82080: PPUSH
82081: LD_EXP 69
82085: PUSH
82086: LD_VAR 0 6
82090: ARRAY
82091: PPUSH
82092: LD_INT 2
82094: PUSH
82095: LD_INT 30
82097: PUSH
82098: LD_INT 0
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PUSH
82105: LD_INT 30
82107: PUSH
82108: LD_INT 1
82110: PUSH
82111: EMPTY
82112: LIST
82113: LIST
82114: PUSH
82115: EMPTY
82116: LIST
82117: LIST
82118: LIST
82119: PPUSH
82120: CALL_OW 72
82124: PUSH
82125: LD_INT 1
82127: ARRAY
82128: PPUSH
82129: CALL_OW 112
// break ;
82133: GO 82137
// end ; end ;
82135: GO 82055
82137: POP
82138: POP
// end ; end_of_file
82139: LD_VAR 0 5
82143: RET
// export SuperChassisContructed , AM7Losses ; export function EndMission ; var player_units , filter ; begin
82144: LD_INT 0
82146: PPUSH
82147: PPUSH
82148: PPUSH
// Wait ( 0 0$1 ) ;
82149: LD_INT 35
82151: PPUSH
82152: CALL_OW 67
// player_units := UnitFilter ( player_units , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) ;
82156: LD_ADDR_VAR 0 2
82160: PUSH
82161: LD_VAR 0 2
82165: PPUSH
82166: LD_INT 3
82168: PUSH
82169: LD_INT 2
82171: PUSH
82172: LD_INT 25
82174: PUSH
82175: LD_INT 16
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: PUSH
82182: LD_INT 25
82184: PUSH
82185: LD_INT 15
82187: PUSH
82188: EMPTY
82189: LIST
82190: LIST
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: LIST
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: PPUSH
82201: CALL_OW 72
82205: ST_TO_ADDR
// if RUCourierEscaped then
82206: LD_EXP 16
82210: IFFALSE 82224
// AddMedal ( Plans , 1 ) else
82212: LD_STRING Plans
82214: PPUSH
82215: LD_INT 1
82217: PPUSH
82218: CALL_OW 101
82222: GO 82235
// AddMedal ( Plans , - 1 ) ;
82224: LD_STRING Plans
82226: PPUSH
82227: LD_INT 1
82229: NEG
82230: PPUSH
82231: CALL_OW 101
// SaveVariable ( RUCourierEscaped , AM05_CourierEscaped ) ;
82235: LD_EXP 16
82239: PPUSH
82240: LD_STRING AM05_CourierEscaped
82242: PPUSH
82243: CALL_OW 39
// if SuperChassisContructed then
82247: LD_EXP 109
82251: IFFALSE 82265
// AddMedal ( UberPanzer , 1 ) else
82253: LD_STRING UberPanzer
82255: PPUSH
82256: LD_INT 1
82258: PPUSH
82259: CALL_OW 101
82263: GO 82276
// AddMedal ( UberPanzer , - 1 ) ;
82265: LD_STRING UberPanzer
82267: PPUSH
82268: LD_INT 1
82270: NEG
82271: PPUSH
82272: CALL_OW 101
// SaveVariable ( SuperChassisContructed , AM05_SuperChassisContructed ) ;
82276: LD_EXP 109
82280: PPUSH
82281: LD_STRING AM05_SuperChassisContructed
82283: PPUSH
82284: CALL_OW 39
// if AM7Losses > 5 then
82288: LD_EXP 110
82292: PUSH
82293: LD_INT 5
82295: GREATER
82296: IFFALSE 82311
// AddMedal ( Losses , - 1 ) else
82298: LD_STRING Losses
82300: PPUSH
82301: LD_INT 1
82303: NEG
82304: PPUSH
82305: CALL_OW 101
82309: GO 82321
// AddMedal ( Losses , 1 ) ;
82311: LD_STRING Losses
82313: PPUSH
82314: LD_INT 1
82316: PPUSH
82317: CALL_OW 101
// SaveVariable ( AM7Losses , AM05_SufferedLosses ) ;
82321: LD_EXP 110
82325: PPUSH
82326: LD_STRING AM05_SufferedLosses
82328: PPUSH
82329: CALL_OW 39
// GiveMedals ( Main ) ;
82333: LD_STRING Main
82335: PPUSH
82336: CALL_OW 102
// RewardPeople ( player_units ) ;
82340: LD_VAR 0 2
82344: PPUSH
82345: CALL_OW 43
// SaveCharacters ( Simone , Simone ) ;
82349: LD_EXP 36
82353: PPUSH
82354: LD_STRING Simone
82356: PPUSH
82357: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
82361: LD_EXP 37
82365: PPUSH
82366: LD_STRING Miller
82368: PPUSH
82369: CALL_OW 38
// SaveCharacters ( Esther , Esther ) ;
82373: LD_EXP 38
82377: PPUSH
82378: LD_STRING Esther
82380: PPUSH
82381: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
82385: LD_EXP 39
82389: PPUSH
82390: LD_STRING Edmonds
82392: PPUSH
82393: CALL_OW 38
// SaveCharacters ( Pravar , Pravar ) ;
82397: LD_EXP 40
82401: PPUSH
82402: LD_STRING Pravar
82404: PPUSH
82405: CALL_OW 38
// SaveCharacters ( Mortimer , Mortimer ) ;
82409: LD_EXP 48
82413: PPUSH
82414: LD_STRING Mortimer
82416: PPUSH
82417: CALL_OW 38
// SaveCharacters ( player_units diff [ Simone , Miller , Esther , Edmonds , Pravar , Mortimer ] , AM05_Survivors ) ;
82421: LD_VAR 0 2
82425: PUSH
82426: LD_EXP 36
82430: PUSH
82431: LD_EXP 37
82435: PUSH
82436: LD_EXP 38
82440: PUSH
82441: LD_EXP 39
82445: PUSH
82446: LD_EXP 40
82450: PUSH
82451: LD_EXP 48
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: DIFF
82464: PPUSH
82465: LD_STRING AM05_Survivors
82467: PPUSH
82468: CALL_OW 38
// YouWin ;
82472: CALL_OW 103
// exit ;
82476: GO 82478
// end ; end_of_file
82478: LD_VAR 0 1
82482: RET
// export ar_heavy_tracked , us_tesla_coil , ar_liquid_siberite , ar_heavy_gun , ar_mobile_mortar , ru_laser , ru_rocket_battery , ru_flame_thrower , ru_radar , Tech_Tesla ; export function InitiateConstants ; begin
82483: LD_INT 0
82485: PPUSH
// ar_heavy_tracked := 16 ;
82486: LD_ADDR_EXP 111
82490: PUSH
82491: LD_INT 16
82493: ST_TO_ADDR
// us_tesla_coil := 70 ;
82494: LD_ADDR_EXP 112
82498: PUSH
82499: LD_INT 70
82501: ST_TO_ADDR
// ar_liquid_siberite := 71 ;
82502: LD_ADDR_EXP 113
82506: PUSH
82507: LD_INT 71
82509: ST_TO_ADDR
// ar_heavy_gun := 72 ;
82510: LD_ADDR_EXP 114
82514: PUSH
82515: LD_INT 72
82517: ST_TO_ADDR
// ar_mobile_mortar := 73 ;
82518: LD_ADDR_EXP 115
82522: PUSH
82523: LD_INT 73
82525: ST_TO_ADDR
// ru_laser := 74 ;
82526: LD_ADDR_EXP 116
82530: PUSH
82531: LD_INT 74
82533: ST_TO_ADDR
// ru_rocket_battery := 75 ;
82534: LD_ADDR_EXP 117
82538: PUSH
82539: LD_INT 75
82541: ST_TO_ADDR
// ru_flame_thrower := 76 ;
82542: LD_ADDR_EXP 118
82546: PUSH
82547: LD_INT 76
82549: ST_TO_ADDR
// ru_radar := 77 ;
82550: LD_ADDR_EXP 119
82554: PUSH
82555: LD_INT 77
82557: ST_TO_ADDR
// Tech_Tesla := 73 ;
82558: LD_ADDR_EXP 120
82562: PUSH
82563: LD_INT 73
82565: ST_TO_ADDR
// end ; end_of_file
82566: LD_VAR 0 1
82570: RET
// every 0 0$1 trigger MissionStart do
82571: LD_EXP 1
82575: IFFALSE 82617
82577: GO 82579
82579: DISABLE
// begin wait ( Rand ( 0 0$50 , 1 1$20 ) ) ;
82580: LD_INT 1750
82582: PPUSH
82583: LD_INT 2800
82585: PPUSH
82586: CALL_OW 12
82590: PPUSH
82591: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
82595: LD_INT 2
82597: PPUSH
82598: LD_INT 5
82600: PPUSH
82601: CALL_OW 12
82605: PPUSH
82606: LD_INT 21
82608: PPUSH
82609: LD_INT 1
82611: PPUSH
82612: CALL_OW 55
// enable ;
82616: ENABLE
// end ;
82617: END
