// export MissionStart , BradfordAssault , AfterBradfordAssault ; export Squad_Assembly_Start ; export PlansCourierEscape , KolvichEnRoute ; starting begin RandomizeAll ;
   0: CALL_OW 11
// PrepareDifficulty ;
   4: CALL 14646 0 0
// Garrison_Buildings ( 3 , 3 , 2 , 4 , 2 , 3 , 2 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
   8: LD_INT 3
  10: PPUSH
  11: LD_INT 3
  13: PPUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 2
  22: PPUSH
  23: LD_INT 3
  25: PPUSH
  26: LD_INT 2
  28: PPUSH
  29: LD_EXP 56
  33: PPUSH
  34: LD_EXP 57
  38: PPUSH
  39: CALL_OW 12
  43: PPUSH
  44: CALL 6165 0 8
// Fill_Turrets ( 3 ) ;
  48: LD_INT 3
  50: PPUSH
  51: CALL 7140 0 1
// SetBName ( ustinov1 , ustinova ) ;
  55: LD_INT 2
  57: PPUSH
  58: LD_STRING ustinova
  60: PPUSH
  61: CALL_OW 500
// SetBName ( ustinov2 , ustinovb ) ;
  65: LD_INT 3
  67: PPUSH
  68: LD_STRING ustinovb
  70: PPUSH
  71: CALL_OW 500
// Prepare_AMBase ;
  75: CALL 4928 0 0
// CreatePersonas ;
  79: CALL 10514 0 0
// PlaceUnitXY ( Bradford , 90 , 80 , false ) ;
  83: LD_EXP 40
  87: PPUSH
  88: LD_INT 90
  90: PPUSH
  91: LD_INT 80
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 48
// PlaceUnitXY ( Richford , 91 , 81 , false ) ;
 101: LD_EXP 47
 105: PPUSH
 106: LD_INT 91
 108: PPUSH
 109: LD_INT 81
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: CALL_OW 48
// PlaceUnitXY ( Esther , 82 , 84 , false ) ;
 119: LD_EXP 36
 123: PPUSH
 124: LD_INT 82
 126: PPUSH
 127: LD_INT 84
 129: PPUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 48
// PlaceUnitXY ( Edmonds , 84 , 91 , false ) ;
 137: LD_EXP 37
 141: PPUSH
 142: LD_INT 84
 144: PPUSH
 145: LD_INT 91
 147: PPUSH
 148: LD_INT 0
 150: PPUSH
 151: CALL_OW 48
// PlaceUnitXY ( Barnes , 88 , 83 , false ) ;
 155: LD_EXP 41
 159: PPUSH
 160: LD_INT 88
 162: PPUSH
 163: LD_INT 83
 165: PPUSH
 166: LD_INT 0
 168: PPUSH
 169: CALL_OW 48
// ComTurnUnit ( Bradford , Richford ) ;
 173: LD_EXP 40
 177: PPUSH
 178: LD_EXP 47
 182: PPUSH
 183: CALL_OW 119
// ComTurnUnit ( Richford , Bradford ) ;
 187: LD_EXP 47
 191: PPUSH
 192: LD_EXP 40
 196: PPUSH
 197: CALL_OW 119
// ingame_video = true ;
 201: LD_ADDR_OWVAR 52
 205: PUSH
 206: LD_INT 1
 208: ST_TO_ADDR
// interface_hidden = true ;
 209: LD_ADDR_OWVAR 54
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// CenterNowOnUnits ( Bradford ) ;
 217: LD_EXP 40
 221: PPUSH
 222: CALL_OW 87
// Squad_Assembly_Start := true ;
 226: LD_ADDR_EXP 4
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// wait ( 0 0$2 ) ;
 234: LD_INT 70
 236: PPUSH
 237: CALL_OW 67
// Say ( Bradford , D1-Bradford-1 ) ;
 241: LD_EXP 40
 245: PPUSH
 246: LD_STRING D1-Bradford-1
 248: PPUSH
 249: CALL_OW 88
// Say ( Richford , D1-Sol-1 ) ;
 253: LD_EXP 47
 257: PPUSH
 258: LD_STRING D1-Sol-1
 260: PPUSH
 261: CALL_OW 88
// ComMoveXY ( Richford , 102 , 88 ) ;
 265: LD_EXP 47
 269: PPUSH
 270: LD_INT 102
 272: PPUSH
 273: LD_INT 88
 275: PPUSH
 276: CALL_OW 111
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 280: LD_EXP 34
 284: PPUSH
 285: CALL_OW 310
 289: PPUSH
 290: CALL_OW 85
// ComMoveXY ( IsInUnit ( Simone ) , 88 , 94 ) ;
 294: LD_EXP 34
 298: PPUSH
 299: CALL_OW 310
 303: PPUSH
 304: LD_INT 88
 306: PPUSH
 307: LD_INT 94
 309: PPUSH
 310: CALL_OW 111
// wait ( 0 0$5 ) ;
 314: LD_INT 175
 316: PPUSH
 317: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Simone ) ) ;
 321: LD_EXP 34
 325: PPUSH
 326: CALL_OW 310
 330: PPUSH
 331: CALL_OW 85
// wait ( 0 0$2 ) ;
 335: LD_INT 70
 337: PPUSH
 338: CALL_OW 67
// ComExitVehicle ( IsInUnit ( Simone ) ) ;
 342: LD_EXP 34
 346: PPUSH
 347: CALL_OW 310
 351: PPUSH
 352: CALL_OW 121
// CenterOnUnits ( Simone ) ;
 356: LD_EXP 34
 360: PPUSH
 361: CALL_OW 85
// wait ( 0 0$0.5 ) ;
 365: LD_INT 18
 367: PPUSH
 368: CALL_OW 67
// AddComMoveXY ( Simone , 90 , 81 ) ;
 372: LD_EXP 34
 376: PPUSH
 377: LD_INT 90
 379: PPUSH
 380: LD_INT 81
 382: PPUSH
 383: CALL_OW 171
// wait ( 0 0$5 ) ;
 387: LD_INT 175
 389: PPUSH
 390: CALL_OW 67
// Say ( Simone , D1-Simone-1 ) ;
 394: LD_EXP 34
 398: PPUSH
 399: LD_STRING D1-Simone-1
 401: PPUSH
 402: CALL_OW 88
// Say ( Bradford , D1-Bradford-2 ) ;
 406: LD_EXP 40
 410: PPUSH
 411: LD_STRING D1-Bradford-2
 413: PPUSH
 414: CALL_OW 88
// Say ( Bradford , D1-Bradford-2a ) ;
 418: LD_EXP 40
 422: PPUSH
 423: LD_STRING D1-Bradford-2a
 425: PPUSH
 426: CALL_OW 88
// Say ( Simone , D1-Simone-2 ) ;
 430: LD_EXP 34
 434: PPUSH
 435: LD_STRING D1-Simone-2
 437: PPUSH
 438: CALL_OW 88
// Say ( Bradford , D1-Bradford-3 ) ;
 442: LD_EXP 40
 446: PPUSH
 447: LD_STRING D1-Bradford-3
 449: PPUSH
 450: CALL_OW 88
// Say ( Simone , D1-Simone-4 ) ;
 454: LD_EXP 34
 458: PPUSH
 459: LD_STRING D1-Simone-4
 461: PPUSH
 462: CALL_OW 88
// Say ( Bradford , D1-Bradford-4 ) ;
 466: LD_EXP 40
 470: PPUSH
 471: LD_STRING D1-Bradford-4
 473: PPUSH
 474: CALL_OW 88
// Say ( Bradford , D1-Bradford-5 ) ;
 478: LD_EXP 40
 482: PPUSH
 483: LD_STRING D1-Bradford-5
 485: PPUSH
 486: CALL_OW 88
// ingame_video = false ;
 490: LD_ADDR_OWVAR 52
 494: PUSH
 495: LD_INT 0
 497: ST_TO_ADDR
// interface_hidden = false ;
 498: LD_ADDR_OWVAR 54
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// SetSide ( Esther , 7 ) ;
 506: LD_EXP 36
 510: PPUSH
 511: LD_INT 7
 513: PPUSH
 514: CALL_OW 235
// SetSide ( Edmonds , 7 ) ;
 518: LD_EXP 37
 522: PPUSH
 523: LD_INT 7
 525: PPUSH
 526: CALL_OW 235
// MissionStart := true ;
 530: LD_ADDR_EXP 1
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// AlliedReinforcement ;
 538: CALL 5856 0 0
// ChangeMissionObjectives ( M1 ) ;
 542: LD_STRING M1
 544: PPUSH
 545: CALL_OW 337
// SaveForQuickRestart ;
 549: CALL_OW 22
// Wait ( 0 0$5 ) ;
 553: LD_INT 175
 555: PPUSH
 556: CALL_OW 67
// Say ( Barnes , D1a-Barnes-1 ) ;
 560: LD_EXP 41
 564: PPUSH
 565: LD_STRING D1a-Barnes-1
 567: PPUSH
 568: CALL_OW 88
// Say ( Simone , D1a-Simone-1 ) ;
 572: LD_EXP 34
 576: PPUSH
 577: LD_STRING D1a-Simone-1
 579: PPUSH
 580: CALL_OW 88
// Say ( Barnes , D1a-Barnes-2 ) ;
 584: LD_EXP 41
 588: PPUSH
 589: LD_STRING D1a-Barnes-2
 591: PPUSH
 592: CALL_OW 88
// Say ( Simone , D1a-Simone-2 ) ;
 596: LD_EXP 34
 600: PPUSH
 601: LD_STRING D1a-Simone-2
 603: PPUSH
 604: CALL_OW 88
// Say ( Barnes , D1a-Barnes-3 ) ;
 608: LD_EXP 41
 612: PPUSH
 613: LD_STRING D1a-Barnes-3
 615: PPUSH
 616: CALL_OW 88
// Wait ( 1 1$0 ) ;
 620: LD_INT 2100
 622: PPUSH
 623: CALL_OW 67
// Say ( Esther , D1b-Esther-1 ) ;
 627: LD_EXP 36
 631: PPUSH
 632: LD_STRING D1b-Esther-1
 634: PPUSH
 635: CALL_OW 88
// Say ( Simone , D1b-Simone-1 ) ;
 639: LD_EXP 34
 643: PPUSH
 644: LD_STRING D1b-Simone-1
 646: PPUSH
 647: CALL_OW 88
// Say ( Esther , D1b-Esther-2 ) ;
 651: LD_EXP 36
 655: PPUSH
 656: LD_STRING D1b-Esther-2
 658: PPUSH
 659: CALL_OW 88
// Say ( Simone , D1b-Simone-2 ) ;
 663: LD_EXP 34
 667: PPUSH
 668: LD_STRING D1b-Simone-2
 670: PPUSH
 671: CALL_OW 88
// Say ( Esther , D1b-Esther-3 ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_STRING D1b-Esther-3
 682: PPUSH
 683: CALL_OW 88
// end ;
 687: END
// every 0 0$1 trigger Squad_Assembly_Start do
 688: LD_EXP 4
 692: IFFALSE 701
 694: GO 696
 696: DISABLE
// begin Squad_Assembly ;
 697: CALL 11825 0 0
// end ;
 701: END
// export Base_DepotBuilt , Base_WorkshopBuilt , Base_LabBuilt ; export Base_WholeBuilt , Base_TooLate ; every 0 0$1 trigger Base_DepotBuilt and Base_WorkshopBuilt and Base_LabBuilt and not Base_TooLate do
 702: LD_EXP 7
 706: PUSH
 707: LD_EXP 8
 711: AND
 712: PUSH
 713: LD_EXP 9
 717: AND
 718: PUSH
 719: LD_EXP 11
 723: NOT
 724: AND
 725: IFFALSE 774
 727: GO 729
 729: DISABLE
// begin Say ( Simone , D2-Simone-1 ) ;
 730: LD_EXP 34
 734: PPUSH
 735: LD_STRING D2-Simone-1
 737: PPUSH
 738: CALL_OW 88
// Say ( Bradford , D2-Bradford-1 ) ;
 742: LD_EXP 40
 746: PPUSH
 747: LD_STRING D2-Bradford-1
 749: PPUSH
 750: CALL_OW 88
// Say ( Simone , D2-Simone-2 ) ;
 754: LD_EXP 34
 758: PPUSH
 759: LD_STRING D2-Simone-2
 761: PPUSH
 762: CALL_OW 88
// Base_WholeBuilt := true ;
 766: LD_ADDR_EXP 10
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// end ;
 774: END
// every 0 0$1 trigger MissionStart do
 775: LD_EXP 1
 779: IFFALSE 874
 781: GO 783
 783: DISABLE
// begin wait ( 5 5$0 ) ;
 784: LD_INT 10500
 786: PPUSH
 787: CALL_OW 67
// if not Base_WholeBuilt then
 791: LD_EXP 10
 795: NOT
 796: IFFALSE 874
// begin Base_TooLate := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// Say ( Bradford , D2a-Bradford-1 ) ;
 806: LD_EXP 40
 810: PPUSH
 811: LD_STRING D2a-Bradford-1
 813: PPUSH
 814: CALL_OW 88
// Say ( Simone , D2a-Simone-1 ) ;
 818: LD_EXP 34
 822: PPUSH
 823: LD_STRING D2a-Simone-1
 825: PPUSH
 826: CALL_OW 88
// Say ( Bradford , D2a-Bradford-2 ) ;
 830: LD_EXP 40
 834: PPUSH
 835: LD_STRING D2a-Bradford-2
 837: PPUSH
 838: CALL_OW 88
// Say ( Simone , D2a-Simone-2 ) ;
 842: LD_EXP 34
 846: PPUSH
 847: LD_STRING D2a-Simone-2
 849: PPUSH
 850: CALL_OW 88
// Say ( Bradford , D2a-Bradford-3 ) ;
 854: LD_EXP 40
 858: PPUSH
 859: LD_STRING D2a-Bradford-3
 861: PPUSH
 862: CALL_OW 88
// Base_WholeBuilt := true ;
 866: LD_ADDR_EXP 10
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// end ; end ;
 874: END
// every 0 0$1 trigger Base_WholeBuilt do var WholeSquad , LabSpeaker ;
 875: LD_EXP 10
 879: IFFALSE 1162
 881: GO 883
 883: DISABLE
 884: LD_INT 0
 886: PPUSH
 887: PPUSH
// begin wait ( Rand ( 3 3$0 , 5 5$0 ) ) ;
 888: LD_INT 6300
 890: PPUSH
 891: LD_INT 10500
 893: PPUSH
 894: CALL_OW 12
 898: PPUSH
 899: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds , Pravar ] ;
 903: LD_ADDR_VAR 0 1
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 7
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 21
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: PUSH
 937: LD_EXP 34
 941: PUSH
 942: LD_EXP 35
 946: PUSH
 947: LD_EXP 36
 951: PUSH
 952: LD_EXP 37
 956: PUSH
 957: LD_EXP 38
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: LIST
 968: DIFF
 969: ST_TO_ADDR
// LabSpeaker := SortBySkill ( WholeSquad , 4 ) ;
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: LD_VAR 0 1
 979: PPUSH
 980: LD_INT 4
 982: PPUSH
 983: CALL 59206 0 2
 987: ST_TO_ADDR
// if not IsDead ( Edmonds ) then
 988: LD_EXP 37
 992: PPUSH
 993: CALL_OW 301
 997: NOT
 998: IFFALSE 1086
// begin Say ( Simone , D3-Simone-1 ) ;
1000: LD_EXP 34
1004: PPUSH
1005: LD_STRING D3-Simone-1
1007: PPUSH
1008: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-1 ) ;
1012: LD_EXP 37
1016: PPUSH
1017: LD_STRING D3-Edmonds-1
1019: PPUSH
1020: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-2 ) ;
1024: LD_EXP 37
1028: PPUSH
1029: LD_STRING D3-Edmonds-2
1031: PPUSH
1032: CALL_OW 88
// Say ( Simone , D3-Simone-2 ) ;
1036: LD_EXP 34
1040: PPUSH
1041: LD_STRING D3-Simone-2
1043: PPUSH
1044: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-3 ) ;
1048: LD_EXP 37
1052: PPUSH
1053: LD_STRING D3-Edmonds-3
1055: PPUSH
1056: CALL_OW 88
// Say ( Edmonds , D3-Edmonds-4 ) ;
1060: LD_EXP 37
1064: PPUSH
1065: LD_STRING D3-Edmonds-4
1067: PPUSH
1068: CALL_OW 88
// Say ( Simone , D3-Simone-3 ) ;
1072: LD_EXP 34
1076: PPUSH
1077: LD_STRING D3-Simone-3
1079: PPUSH
1080: CALL_OW 88
// end else
1084: GO 1155
// begin SaySex ( LabSpeaker [ 1 ] , D4-Sci-1 , D4-FemSci-1 ) ;
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 1
1093: ARRAY
1094: PPUSH
1095: LD_STRING D4-Sci-1
1097: PPUSH
1098: LD_STRING D4-FemSci-1
1100: PPUSH
1101: CALL 8093 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-2 , D4-FemSci-2 ) ;
1105: LD_VAR 0 2
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_STRING D4-Sci-2
1116: PPUSH
1117: LD_STRING D4-FemSci-2
1119: PPUSH
1120: CALL 8093 0 3
// SaySex ( LabSpeaker [ 1 ] , D4-Sci-3 , D4-FemSci-3 ) ;
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: LD_STRING D4-Sci-3
1135: PPUSH
1136: LD_STRING D4-FemSci-3
1138: PPUSH
1139: CALL 8093 0 3
// Say ( Simone , D3-Simone-3 ) ;
1143: LD_EXP 34
1147: PPUSH
1148: LD_STRING D3-Simone-3
1150: PPUSH
1151: CALL_OW 88
// end ; ChangeMissionObjectives ( M1a ) ;
1155: LD_STRING M1a
1157: PPUSH
1158: CALL_OW 337
// end ;
1162: PPOPN 2
1164: END
// every 0 0$1 trigger Base_WholeBuilt do
1165: LD_EXP 10
1169: IFFALSE 1249
1171: GO 1173
1173: DISABLE
// begin wait ( Rand ( 11 11$0 , 14 14$0 ) ) ;
1174: LD_INT 23100
1176: PPUSH
1177: LD_INT 29400
1179: PPUSH
1180: CALL_OW 12
1184: PPUSH
1185: CALL_OW 67
// Say ( Barnes , D4a-Barnes-1 ) ;
1189: LD_EXP 41
1193: PPUSH
1194: LD_STRING D4a-Barnes-1
1196: PPUSH
1197: CALL_OW 88
// Say ( Bradford , D4a-Bradford-1 ) ;
1201: LD_EXP 40
1205: PPUSH
1206: LD_STRING D4a-Bradford-1
1208: PPUSH
1209: CALL_OW 88
// Say ( Barnes , D4a-Barnes-2 ) ;
1213: LD_EXP 41
1217: PPUSH
1218: LD_STRING D4a-Barnes-2
1220: PPUSH
1221: CALL_OW 88
// Say ( Bradford , D4a-Bradford-2 ) ;
1225: LD_EXP 40
1229: PPUSH
1230: LD_STRING D4a-Bradford-2
1232: PPUSH
1233: CALL_OW 88
// Say ( Bradford , D4a-Bradford-3 ) ;
1237: LD_EXP 40
1241: PPUSH
1242: LD_STRING D4a-Bradford-3
1244: PPUSH
1245: CALL_OW 88
// end ;
1249: END
// every 0 0$1 trigger Base_WholeBuilt do
1250: LD_EXP 10
1254: IFFALSE 1587
1256: GO 1258
1258: DISABLE
// begin wait ( 30 30$00 ) ;
1259: LD_INT 63000
1261: PPUSH
1262: CALL_OW 67
// InGameOn ;
1266: CALL_OW 8
// CenterOnUnits ( Bradford ) ;
1270: LD_EXP 40
1274: PPUSH
1275: CALL_OW 85
// AM_SquadOne := AM_SquadOne ^ [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] ] ;
1279: LD_ADDR_EXP 62
1283: PUSH
1284: LD_EXP 62
1288: PUSH
1289: LD_EXP 26
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: PUSH
1298: LD_EXP 26
1302: PUSH
1303: LD_INT 2
1305: ARRAY
1306: PUSH
1307: LD_EXP 26
1311: PUSH
1312: LD_INT 3
1314: ARRAY
1315: PUSH
1316: LD_EXP 26
1320: PUSH
1321: LD_INT 4
1323: ARRAY
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: ADD
1331: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ [ AM_Sols [ 5 ] , AM_Sols [ 6 ] , AM_Sols [ 7 ] ] ;
1332: LD_ADDR_EXP 63
1336: PUSH
1337: LD_EXP 63
1341: PUSH
1342: LD_EXP 26
1346: PUSH
1347: LD_INT 5
1349: ARRAY
1350: PUSH
1351: LD_EXP 26
1355: PUSH
1356: LD_INT 6
1358: ARRAY
1359: PUSH
1360: LD_EXP 26
1364: PUSH
1365: LD_INT 7
1367: ARRAY
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: ADD
1374: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ [ AM_Sols [ 8 ] , AM_Sols [ 9 ] , AM_Sols [ 10 ] ] ;
1375: LD_ADDR_EXP 64
1379: PUSH
1380: LD_EXP 64
1384: PUSH
1385: LD_EXP 26
1389: PUSH
1390: LD_INT 8
1392: ARRAY
1393: PUSH
1394: LD_EXP 26
1398: PUSH
1399: LD_INT 9
1401: ARRAY
1402: PUSH
1403: LD_EXP 26
1407: PUSH
1408: LD_INT 10
1410: ARRAY
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: LIST
1416: ADD
1417: ST_TO_ADDR
// AM_SquadTwo := AM_SquadTwo ^ Bradford ;
1418: LD_ADDR_EXP 63
1422: PUSH
1423: LD_EXP 63
1427: PUSH
1428: LD_EXP 40
1432: ADD
1433: ST_TO_ADDR
// AM_SquadThree := AM_SquadThree ^ Richford ;
1434: LD_ADDR_EXP 64
1438: PUSH
1439: LD_EXP 64
1443: PUSH
1444: LD_EXP 47
1448: ADD
1449: ST_TO_ADDR
// ComMoveXY ( AM_Sols , 93 , 84 ) ;
1450: LD_EXP 26
1454: PPUSH
1455: LD_INT 93
1457: PPUSH
1458: LD_INT 84
1460: PPUSH
1461: CALL_OW 111
// Say ( Bradford , D5-Bradford-1 ) ;
1465: LD_EXP 40
1469: PPUSH
1470: LD_STRING D5-Bradford-1
1472: PPUSH
1473: CALL_OW 88
// Say ( Bradford , D5-Bradford-2 ) ;
1477: LD_EXP 40
1481: PPUSH
1482: LD_STRING D5-Bradford-2
1484: PPUSH
1485: CALL_OW 88
// Say ( Bradford , D5-Bradford-3 ) ;
1489: LD_EXP 40
1493: PPUSH
1494: LD_STRING D5-Bradford-3
1496: PPUSH
1497: CALL_OW 88
// ComMoveXY ( AM_SquadOne , 130 , 56 ) ;
1501: LD_EXP 62
1505: PPUSH
1506: LD_INT 130
1508: PPUSH
1509: LD_INT 56
1511: PPUSH
1512: CALL_OW 111
// ComMoveXY ( AM_SquadTwo , 143 , 95 ) ;
1516: LD_EXP 63
1520: PPUSH
1521: LD_INT 143
1523: PPUSH
1524: LD_INT 95
1526: PPUSH
1527: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 169 , 147 ) ;
1531: LD_EXP 64
1535: PPUSH
1536: LD_INT 169
1538: PPUSH
1539: LD_INT 147
1541: PPUSH
1542: CALL_OW 111
// ComMoveXY ( Mortimer , 130 , 56 ) ;
1546: LD_EXP 46
1550: PPUSH
1551: LD_INT 130
1553: PPUSH
1554: LD_INT 56
1556: PPUSH
1557: CALL_OW 111
// Wait ( 0 0$5 ) ;
1561: LD_INT 175
1563: PPUSH
1564: CALL_OW 67
// InGameOff ;
1568: CALL_OW 9
// BradfordAssault := true ;
1572: LD_ADDR_EXP 2
1576: PUSH
1577: LD_INT 1
1579: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
1580: LD_STRING M2
1582: PPUSH
1583: CALL_OW 337
// end ;
1587: END
// every 0 0$1 trigger BradfordAssault do
1588: LD_EXP 2
1592: IFFALSE 1895
1594: GO 1596
1596: DISABLE
// begin Wait ( 0 0$35 ) ;
1597: LD_INT 1225
1599: PPUSH
1600: CALL_OW 67
// ComAgressiveMove ( AM_SquadOne , 176 , 58 ) ;
1604: LD_EXP 62
1608: PPUSH
1609: LD_INT 176
1611: PPUSH
1612: LD_INT 58
1614: PPUSH
1615: CALL_OW 114
// ComAgressiveMove ( AM_SquadTwo , 206 , 94 ) ;
1619: LD_EXP 63
1623: PPUSH
1624: LD_INT 206
1626: PPUSH
1627: LD_INT 94
1629: PPUSH
1630: CALL_OW 114
// ComAgressiveMove ( AM_SquadThree , 220 , 142 ) ;
1634: LD_EXP 64
1638: PPUSH
1639: LD_INT 220
1641: PPUSH
1642: LD_INT 142
1644: PPUSH
1645: CALL_OW 114
// Say ( Bradford , D5a-Bradford-1 ) ;
1649: LD_EXP 40
1653: PPUSH
1654: LD_STRING D5a-Bradford-1
1656: PPUSH
1657: CALL_OW 88
// Wait ( 0 0$15 ) ;
1661: LD_INT 525
1663: PPUSH
1664: CALL_OW 67
// Say ( Mortimer , D5a-Doherty-1 ) ;
1668: LD_EXP 46
1672: PPUSH
1673: LD_STRING D5a-Doherty-1
1675: PPUSH
1676: CALL_OW 88
// Say ( Richford , D5a-Richford-1 ) ;
1680: LD_EXP 47
1684: PPUSH
1685: LD_STRING D5a-Richford-1
1687: PPUSH
1688: CALL_OW 88
// PriorityAttack ( 3 , Bradford ) ;
1692: LD_INT 3
1694: PPUSH
1695: LD_EXP 40
1699: PPUSH
1700: CALL_OW 470
// PriorityAttack ( 3 , Richford ) ;
1704: LD_INT 3
1706: PPUSH
1707: LD_EXP 47
1711: PPUSH
1712: CALL_OW 470
// Wait ( 0 0$45 ) ;
1716: LD_INT 1575
1718: PPUSH
1719: CALL_OW 67
// SayRadio ( Barnes , D5a-Barnes-1 ) ;
1723: LD_EXP 41
1727: PPUSH
1728: LD_STRING D5a-Barnes-1
1730: PPUSH
1731: CALL_OW 94
// ComMoveXY ( AM_SquadOne , 95 , 83 ) ;
1735: LD_EXP 62
1739: PPUSH
1740: LD_INT 95
1742: PPUSH
1743: LD_INT 83
1745: PPUSH
1746: CALL_OW 111
// ComMoveXY ( AM_SquadThree , 95 , 83 ) ;
1750: LD_EXP 64
1754: PPUSH
1755: LD_INT 95
1757: PPUSH
1758: LD_INT 83
1760: PPUSH
1761: CALL_OW 111
// ComMoveXY ( Mortimer , 95 , 83 ) ;
1765: LD_EXP 46
1769: PPUSH
1770: LD_INT 95
1772: PPUSH
1773: LD_INT 83
1775: PPUSH
1776: CALL_OW 111
// SayRadio ( Barnes , D5a-Barnes-2 ) ;
1780: LD_EXP 41
1784: PPUSH
1785: LD_STRING D5a-Barnes-2
1787: PPUSH
1788: CALL_OW 94
// Wait ( 0 0$40 ) ;
1792: LD_INT 1400
1794: PPUSH
1795: CALL_OW 67
// InGameOn ;
1799: CALL_OW 8
// DialogueOn ;
1803: CALL_OW 6
// Say ( Barnes , D5b-Barnes-1 ) ;
1807: LD_EXP 41
1811: PPUSH
1812: LD_STRING D5b-Barnes-1
1814: PPUSH
1815: CALL_OW 88
// Say ( Simone , D5b-Simone-1 ) ;
1819: LD_EXP 34
1823: PPUSH
1824: LD_STRING D5b-Simone-1
1826: PPUSH
1827: CALL_OW 88
// Say ( Barnes , D5b-Barnes-2 ) ;
1831: LD_EXP 41
1835: PPUSH
1836: LD_STRING D5b-Barnes-2
1838: PPUSH
1839: CALL_OW 88
// SetSide ( AM_SquadOne , 7 ) ;
1843: LD_EXP 62
1847: PPUSH
1848: LD_INT 7
1850: PPUSH
1851: CALL_OW 235
// SetSide ( AM_SquadThree , 7 ) ;
1855: LD_EXP 64
1859: PPUSH
1860: LD_INT 7
1862: PPUSH
1863: CALL_OW 235
// SetSide ( Mortimer , 7 ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 7
1874: PPUSH
1875: CALL_OW 235
// DialogueOff ;
1879: CALL_OW 7
// InGameOff ;
1883: CALL_OW 9
// AfterBradfordAssault := true ;
1887: LD_ADDR_EXP 3
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// end ;
1895: END
// every 0 0$1 trigger AfterBradfordAssault do
1896: LD_EXP 3
1900: IFFALSE 1960
1902: GO 1904
1904: DISABLE
// begin Wait ( 3 3$40 ) ;
1905: LD_INT 7700
1907: PPUSH
1908: CALL_OW 67
// SayRadio ( Sidorovich , D6-Sidor-1 ) ;
1912: LD_EXP 42
1916: PPUSH
1917: LD_STRING D6-Sidor-1
1919: PPUSH
1920: CALL_OW 94
// Say ( Simone , D6-Simone-1 ) ;
1924: LD_EXP 34
1928: PPUSH
1929: LD_STRING D6-Simone-1
1931: PPUSH
1932: CALL_OW 88
// SayRadio ( Sidorovich , D6-Sidor-2 ) ;
1936: LD_EXP 42
1940: PPUSH
1941: LD_STRING D6-Sidor-2
1943: PPUSH
1944: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
1948: LD_EXP 34
1952: PPUSH
1953: LD_STRING D6-Simone-2
1955: PPUSH
1956: CALL_OW 88
// end ;
1960: END
// every 0 0$1 trigger AfterBradfordAssault do
1961: LD_EXP 3
1965: IFFALSE 2189
1967: GO 1969
1969: DISABLE
// begin Wait ( 7 7$20 ) ;
1970: LD_INT 15400
1972: PPUSH
1973: CALL_OW 67
// SayRadio ( Botnicov , D6a-Botnicov-1 ) ;
1977: LD_EXP 45
1981: PPUSH
1982: LD_STRING D6a-Botnicov-1
1984: PPUSH
1985: CALL_OW 94
// Say ( Simone , D6a-Simone-1 ) ;
1989: LD_EXP 34
1993: PPUSH
1994: LD_STRING D6a-Simone-1
1996: PPUSH
1997: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-2 ) ;
2001: LD_EXP 45
2005: PPUSH
2006: LD_STRING D6a-Botnicov-2
2008: PPUSH
2009: CALL_OW 94
// Say ( Simone , D6a-Simone-2 ) ;
2013: LD_EXP 34
2017: PPUSH
2018: LD_STRING D6a-Simone-2
2020: PPUSH
2021: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-3 ) ;
2025: LD_EXP 45
2029: PPUSH
2030: LD_STRING D6a-Botnicov-3
2032: PPUSH
2033: CALL_OW 94
// Say ( Simone , D6a-Simone-3 ) ;
2037: LD_EXP 34
2041: PPUSH
2042: LD_STRING D6a-Simone-3
2044: PPUSH
2045: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-4 ) ;
2049: LD_EXP 45
2053: PPUSH
2054: LD_STRING D6a-Botnicov-4
2056: PPUSH
2057: CALL_OW 94
// Say ( Simone , D6a-Simone-4 ) ;
2061: LD_EXP 34
2065: PPUSH
2066: LD_STRING D6a-Simone-4
2068: PPUSH
2069: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-5 ) ;
2073: LD_EXP 45
2077: PPUSH
2078: LD_STRING D6a-Botnicov-5
2080: PPUSH
2081: CALL_OW 94
// Say ( Simone , D6a-Simone-5 ) ;
2085: LD_EXP 34
2089: PPUSH
2090: LD_STRING D6a-Simone-5
2092: PPUSH
2093: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-6 ) ;
2097: LD_EXP 45
2101: PPUSH
2102: LD_STRING D6a-Botnicov-6
2104: PPUSH
2105: CALL_OW 94
// KolvichEnRoute := true ;
2109: LD_ADDR_EXP 6
2113: PUSH
2114: LD_INT 1
2116: ST_TO_ADDR
// SayRadio ( Botnicov , D6a-Botnicov-7 ) ;
2117: LD_EXP 45
2121: PPUSH
2122: LD_STRING D6a-Botnicov-7
2124: PPUSH
2125: CALL_OW 94
// Say ( Esther , D6a-Esther-1 ) ;
2129: LD_EXP 36
2133: PPUSH
2134: LD_STRING D6a-Esther-1
2136: PPUSH
2137: CALL_OW 88
// Say ( Simone , D6a-Simone-6 ) ;
2141: LD_EXP 34
2145: PPUSH
2146: LD_STRING D6a-Simone-6
2148: PPUSH
2149: CALL_OW 88
// SayRadio ( Botnicov , D6a-Botnicov-8 ) ;
2153: LD_EXP 45
2157: PPUSH
2158: LD_STRING D6a-Botnicov-8
2160: PPUSH
2161: CALL_OW 94
// SayRadio ( Botnicov , D6a-Botnicov-9 ) ;
2165: LD_EXP 45
2169: PPUSH
2170: LD_STRING D6a-Botnicov-9
2172: PPUSH
2173: CALL_OW 94
// Say ( Simone , D6a-Simone-7 ) ;
2177: LD_EXP 34
2181: PPUSH
2182: LD_STRING D6a-Simone-7
2184: PPUSH
2185: CALL_OW 88
// end ;
2189: END
// every 0 0$1 trigger AfterBradfordAssault do
2190: LD_EXP 3
2194: IFFALSE 2254
2196: GO 2198
2198: DISABLE
// begin Wait ( 16 16$30 ) ;
2199: LD_INT 34650
2201: PPUSH
2202: CALL_OW 67
// SayRadio ( Sidorovich , D7-Sidor-1 ) ;
2206: LD_EXP 42
2210: PPUSH
2211: LD_STRING D7-Sidor-1
2213: PPUSH
2214: CALL_OW 94
// Say ( Simone , D7-Simone-1 ) ;
2218: LD_EXP 34
2222: PPUSH
2223: LD_STRING D7-Simone-1
2225: PPUSH
2226: CALL_OW 88
// SayRadio ( Sidorovich , D7-Sidor-2 ) ;
2230: LD_EXP 42
2234: PPUSH
2235: LD_STRING D7-Sidor-2
2237: PPUSH
2238: CALL_OW 94
// Say ( Simone , D7-Simone-2 ) ;
2242: LD_EXP 34
2246: PPUSH
2247: LD_STRING D7-Simone-2
2249: PPUSH
2250: CALL_OW 88
// end ;
2254: END
// every 0 0$1 trigger AfterBradfordAssault do var WholeSquad , SolSpeaker ;
2255: LD_EXP 3
2259: IFFALSE 2455
2261: GO 2263
2263: DISABLE
2264: LD_INT 0
2266: PPUSH
2267: PPUSH
// begin Wait ( 23 23$20 ) ;
2268: LD_INT 49000
2270: PPUSH
2271: CALL_OW 67
// WholeSquad := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff [ Simone , Miller , Esther , Edmonds ] ;
2275: LD_ADDR_VAR 0 1
2279: PUSH
2280: LD_INT 22
2282: PUSH
2283: LD_INT 7
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 21
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PPUSH
2304: CALL_OW 69
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_EXP 35
2318: PUSH
2319: LD_EXP 36
2323: PUSH
2324: LD_EXP 37
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: DIFF
2335: ST_TO_ADDR
// SolSpeaker := WholeSquad [ Rand ( 1 , WholeSquad ) ] ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: PUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_VAR 0 1
2353: PPUSH
2354: CALL_OW 12
2358: ARRAY
2359: ST_TO_ADDR
// if GetSex ( SolSpeaker ) = sex_male then
2360: LD_VAR 0 2
2364: PPUSH
2365: CALL_OW 258
2369: PUSH
2370: LD_INT 1
2372: EQUAL
2373: IFFALSE 2389
// Say ( SolSpeaker , D8-Sol-1 ) else
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_STRING D8-Sol-1
2382: PPUSH
2383: CALL_OW 88
2387: GO 2416
// if GetSex ( SolSpeaker ) = sex_female then
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL_OW 258
2398: PUSH
2399: LD_INT 2
2401: EQUAL
2402: IFFALSE 2416
// Say ( SolSpeaker , D8-FemSol-1 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_STRING D8-FemSol-1
2411: PPUSH
2412: CALL_OW 88
// SayRadio ( Sidorovich , D8-Sidor-1 ) ;
2416: LD_EXP 42
2420: PPUSH
2421: LD_STRING D8-Sidor-1
2423: PPUSH
2424: CALL_OW 94
// Say ( Simone , D8-Simone-1 ) ;
2428: LD_EXP 34
2432: PPUSH
2433: LD_STRING D8-Simone-1
2435: PPUSH
2436: CALL_OW 88
// ChangeMissionObjectives ( MPlans ) ;
2440: LD_STRING MPlans
2442: PPUSH
2443: CALL_OW 337
// PlansCourierEscape := true ;
2447: LD_ADDR_EXP 5
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// end ;
2455: PPOPN 2
2457: END
// export CourierVeh , RU_Courier , RUVeh1 , RUVeh2 ; every 0 0$1 trigger PlansCourierEscape do
2458: LD_EXP 5
2462: IFFALSE 2790
2464: GO 2466
2466: DISABLE
// begin uc_side := 6 ;
2467: LD_ADDR_OWVAR 20
2471: PUSH
2472: LD_INT 6
2474: ST_TO_ADDR
// uc_nation := nation_russian ;
2475: LD_ADDR_OWVAR 21
2479: PUSH
2480: LD_INT 3
2482: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
2483: LD_ADDR_OWVAR 37
2487: PUSH
2488: LD_INT 22
2490: ST_TO_ADDR
// vc_engine := engine_siberite ;
2491: LD_ADDR_OWVAR 39
2495: PUSH
2496: LD_INT 3
2498: ST_TO_ADDR
// vc_control := control_manual ;
2499: LD_ADDR_OWVAR 38
2503: PUSH
2504: LD_INT 1
2506: ST_TO_ADDR
// vc_weapon := ru_gun ;
2507: LD_ADDR_OWVAR 40
2511: PUSH
2512: LD_INT 44
2514: ST_TO_ADDR
// CourierVeh := CreateVehicle ;
2515: LD_ADDR_EXP 12
2519: PUSH
2520: CALL_OW 45
2524: ST_TO_ADDR
// vc_control := control_computer ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 3
2532: ST_TO_ADDR
// RUVeh1 := CreateVehicle ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: CALL_OW 45
2542: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
2543: LD_ADDR_OWVAR 40
2547: PUSH
2548: LD_INT 43
2550: ST_TO_ADDR
// RUVeh2 := CreateVehicle ;
2551: LD_ADDR_EXP 15
2555: PUSH
2556: CALL_OW 45
2560: ST_TO_ADDR
// hc_class = class_mechanic ;
2561: LD_ADDR_OWVAR 28
2565: PUSH
2566: LD_INT 3
2568: ST_TO_ADDR
// hc_sex = sex_male ;
2569: LD_ADDR_OWVAR 27
2573: PUSH
2574: LD_INT 1
2576: ST_TO_ADDR
// hc_importance = 40 ;
2577: LD_ADDR_OWVAR 32
2581: PUSH
2582: LD_INT 40
2584: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 7 ] ;
2585: LD_ADDR_OWVAR 31
2589: PUSH
2590: LD_INT 6
2592: PUSH
2593: LD_INT 4
2595: PUSH
2596: LD_INT 10
2598: PUSH
2599: LD_INT 7
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
2608: LD_ADDR_OWVAR 29
2612: PUSH
2613: LD_INT 11
2615: PUSH
2616: LD_INT 10
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: ST_TO_ADDR
// hc_name := Jovan Radovcic ;
2623: LD_ADDR_OWVAR 26
2627: PUSH
2628: LD_STRING Jovan Radovcic
2630: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
2631: LD_ADDR_OWVAR 33
2635: PUSH
2636: LD_STRING ZieloneLaserki_Commanders
2638: ST_TO_ADDR
// hc_face_number := 7 ;
2639: LD_ADDR_OWVAR 34
2643: PUSH
2644: LD_INT 7
2646: ST_TO_ADDR
// RU_Courier := CreateHuman ;
2647: LD_ADDR_EXP 13
2651: PUSH
2652: CALL_OW 44
2656: ST_TO_ADDR
// hc_name :=  ;
2657: LD_ADDR_OWVAR 26
2661: PUSH
2662: LD_STRING 
2664: ST_TO_ADDR
// hc_gallery :=  ;
2665: LD_ADDR_OWVAR 33
2669: PUSH
2670: LD_STRING 
2672: ST_TO_ADDR
// PlaceUnitArea ( CourierVeh , CourierVehsArea , false ) ;
2673: LD_EXP 12
2677: PPUSH
2678: LD_INT 6
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// PlaceUnitArea ( RUVeh1 , CourierVehsArea , false ) ;
2688: LD_EXP 14
2692: PPUSH
2693: LD_INT 6
2695: PPUSH
2696: LD_INT 0
2698: PPUSH
2699: CALL_OW 49
// PlaceUnitArea ( RUVeh2 , CourierVehsArea , false ) ;
2703: LD_EXP 15
2707: PPUSH
2708: LD_INT 6
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 49
// PlaceHumanInUnit ( RU_Courier , ustinov2 ) ;
2718: LD_EXP 13
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 52
// ComEnterUnit ( RU_Courier , CourierVeh ) ;
2730: LD_EXP 13
2734: PPUSH
2735: LD_EXP 12
2739: PPUSH
2740: CALL_OW 120
// wait ( 1 1$0 ) ;
2744: LD_INT 2100
2746: PPUSH
2747: CALL_OW 67
// ComMoveXY ( CourierVeh , 123 , 3 ) ;
2751: LD_EXP 12
2755: PPUSH
2756: LD_INT 123
2758: PPUSH
2759: LD_INT 3
2761: PPUSH
2762: CALL_OW 111
// ComAgressiveMove ( [ RUVeh1 , RUVeh2 ] , 123 , 3 ) ;
2766: LD_EXP 14
2770: PUSH
2771: LD_EXP 15
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PPUSH
2780: LD_INT 123
2782: PPUSH
2783: LD_INT 3
2785: PPUSH
2786: CALL_OW 114
// end ;
2790: END
// export RUCourierEscaped , RU_Courier_Dead ; every 0 0$1 trigger ( IsInArea ( CourierVeh , RUCourierEvac ) or IsInArea ( RU_Courier , RUCourierEvac ) ) and IsOK ( RU_Courier ) do
2791: LD_EXP 12
2795: PPUSH
2796: LD_INT 5
2798: PPUSH
2799: CALL_OW 308
2803: PUSH
2804: LD_EXP 13
2808: PPUSH
2809: LD_INT 5
2811: PPUSH
2812: CALL_OW 308
2816: OR
2817: PUSH
2818: LD_EXP 13
2822: PPUSH
2823: CALL_OW 302
2827: AND
2828: IFFALSE 2883
2830: GO 2832
2832: DISABLE
// begin if not IsDead ( CourierVeh ) then
2833: LD_EXP 12
2837: PPUSH
2838: CALL_OW 301
2842: NOT
2843: IFFALSE 2854
// RemoveUnit ( CourierVeh ) ;
2845: LD_EXP 12
2849: PPUSH
2850: CALL_OW 64
// RemoveUnit ( RU_Courier ) ;
2854: LD_EXP 13
2858: PPUSH
2859: CALL_OW 64
// Say ( Miller , D8c-Miller-1 ) ;
2863: LD_EXP 35
2867: PPUSH
2868: LD_STRING D8c-Miller-1
2870: PPUSH
2871: CALL_OW 88
// RUCourierEscaped := true ;
2875: LD_ADDR_EXP 16
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
// end ;
2883: END
// every 0 0$1 trigger IsInArea ( RUVeh1 , RUCourierEvac ) and IsOK ( RUVeh1 ) and RUCourierEscaped do
2884: LD_EXP 14
2888: PPUSH
2889: LD_INT 5
2891: PPUSH
2892: CALL_OW 308
2896: PUSH
2897: LD_EXP 14
2901: PPUSH
2902: CALL_OW 302
2906: AND
2907: PUSH
2908: LD_EXP 16
2912: AND
2913: IFFALSE 2927
2915: GO 2917
2917: DISABLE
// RemoveUnit ( RUVeh1 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: CALL_OW 64
2927: END
// every 0 0$1 trigger IsInArea ( RUVeh2 , RUCourierEvac ) and IsOK ( RUVeh2 ) and RUCourierEscaped do
2928: LD_EXP 15
2932: PPUSH
2933: LD_INT 5
2935: PPUSH
2936: CALL_OW 308
2940: PUSH
2941: LD_EXP 15
2945: PPUSH
2946: CALL_OW 302
2950: AND
2951: PUSH
2952: LD_EXP 16
2956: AND
2957: IFFALSE 2971
2959: GO 2961
2961: DISABLE
// RemoveUnit ( RUVeh2 ) ;
2962: LD_EXP 15
2966: PPUSH
2967: CALL_OW 64
2971: END
// export Endgame ; export RU1Evacuation , BotnicovSpared , BotnicovAntagonized ; every 0 0$1 trigger IsDead ( Sidorovich ) and ( GetSide ( ustinov1 ) = 7 or IsDead ( ustinov1 ) ) or ( GetSide ( ustinov2 ) = 7 or IsDead ( ustinov2 ) ) do
2972: LD_EXP 42
2976: PPUSH
2977: CALL_OW 301
2981: PUSH
2982: LD_INT 2
2984: PPUSH
2985: CALL_OW 255
2989: PUSH
2990: LD_INT 7
2992: EQUAL
2993: PUSH
2994: LD_INT 2
2996: PPUSH
2997: CALL_OW 301
3001: OR
3002: AND
3003: PUSH
3004: LD_INT 3
3006: PPUSH
3007: CALL_OW 255
3011: PUSH
3012: LD_INT 7
3014: EQUAL
3015: PUSH
3016: LD_INT 3
3018: PPUSH
3019: CALL_OW 301
3023: OR
3024: OR
3025: IFFALSE 3294
3027: GO 3029
3029: DISABLE
// begin KolvichEnRoute := true ;
3030: LD_ADDR_EXP 6
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// wait ( 0 0$10 ) ;
3038: LD_INT 350
3040: PPUSH
3041: CALL_OW 67
// RU1Evacuation := true ;
3045: LD_ADDR_EXP 19
3049: PUSH
3050: LD_INT 1
3052: ST_TO_ADDR
// Prepare_Escapees ;
3053: CALL 7255 0 0
// wait ( 0 0$4 ) ;
3057: LD_INT 140
3059: PPUSH
3060: CALL_OW 67
// CenterOnUnits ( Botnicov ) ;
3064: LD_EXP 45
3068: PPUSH
3069: CALL_OW 85
// DialogueOn ;
3073: CALL_OW 6
// Say ( Miller , D9a-Miller-2 ) ;
3077: LD_EXP 35
3081: PPUSH
3082: LD_STRING D9a-Miller-2
3084: PPUSH
3085: CALL_OW 88
// if not GetAttitude ( 5 , 7 ) = att_enemy then
3089: LD_INT 5
3091: PPUSH
3092: LD_INT 7
3094: PPUSH
3095: CALL_OW 81
3099: PUSH
3100: LD_INT 2
3102: EQUAL
3103: NOT
3104: IFFALSE 3271
// case Query ( QRussians ) of 1 :
3106: LD_STRING QRussians
3108: PPUSH
3109: CALL_OW 97
3113: PUSH
3114: LD_INT 1
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3181
3122: POP
// begin Say ( Simone , D9a-Simone-2 ) ;
3123: LD_EXP 34
3127: PPUSH
3128: LD_STRING D9a-Simone-2
3130: PPUSH
3131: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1 ) ;
3135: LD_EXP 45
3139: PPUSH
3140: LD_STRING D9a-Botnicov-1
3142: PPUSH
3143: CALL_OW 88
// BotnicovSpared := true ;
3147: LD_ADDR_EXP 20
3151: PUSH
3152: LD_INT 1
3154: ST_TO_ADDR
// ComMoveToArea ( Botnicov_Sols , RUEvacZone ) ;
3155: LD_EXP 30
3159: PPUSH
3160: LD_INT 9
3162: PPUSH
3163: CALL_OW 113
// ComMoveToArea ( Botnicov , RUEvacZone ) ;
3167: LD_EXP 45
3171: PPUSH
3172: LD_INT 9
3174: PPUSH
3175: CALL_OW 113
// end ; 2 :
3179: GO 3271
3181: LD_INT 2
3183: DOUBLE
3184: EQUAL
3185: IFTRUE 3189
3187: GO 3270
3189: POP
// begin Say ( Simone , D9a-Simone-2a ) ;
3190: LD_EXP 34
3194: PPUSH
3195: LD_STRING D9a-Simone-2a
3197: PPUSH
3198: CALL_OW 88
// Say ( Botnicov , D9a-Botnicov-1a ) ;
3202: LD_EXP 45
3206: PPUSH
3207: LD_STRING D9a-Botnicov-1a
3209: PPUSH
3210: CALL_OW 88
// BotnicovAntagonized := true ;
3214: LD_ADDR_EXP 21
3218: PUSH
3219: LD_INT 1
3221: ST_TO_ADDR
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
3222: LD_INT 5
3224: PPUSH
3225: LD_INT 7
3227: PPUSH
3228: LD_INT 2
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 80
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
3238: LD_EXP 30
3242: PPUSH
3243: LD_INT 257
3245: PPUSH
3246: LD_INT 108
3248: PPUSH
3249: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
3253: LD_EXP 45
3257: PPUSH
3258: LD_INT 257
3260: PPUSH
3261: LD_INT 108
3263: PPUSH
3264: CALL_OW 114
// end ; end ;
3268: GO 3271
3270: POP
// DialogueOff ;
3271: CALL_OW 7
// wait ( 0 0$40 ) ;
3275: LD_INT 1400
3277: PPUSH
3278: CALL_OW 67
// Dialogue_Barnes_General ;
3282: CALL 7628 0 0
// Endgame := true ;
3286: LD_ADDR_EXP 18
3290: PUSH
3291: LD_INT 1
3293: ST_TO_ADDR
// end ;
3294: END
// export DvaliAttack ; every 0 0$1 trigger Endgame do
3295: LD_EXP 18
3299: IFFALSE 3389
3301: GO 3303
3303: DISABLE
// begin wait ( GEODvaliArrival ) ;
3304: LD_EXP 60
3308: PPUSH
3309: CALL_OW 67
// DialogueOn ;
3313: CALL_OW 6
// SayRadio ( Dvalishvili , D11-Dvali-1 ) ;
3317: LD_EXP 44
3321: PPUSH
3322: LD_STRING D11-Dvali-1
3324: PPUSH
3325: CALL_OW 94
// Say ( Simone , D11-Simone-1 ) ;
3329: LD_EXP 34
3333: PPUSH
3334: LD_STRING D11-Simone-1
3336: PPUSH
3337: CALL_OW 88
// SayRadio ( Dvalishvili , D11-Dvali-2 ) ;
3341: LD_EXP 44
3345: PPUSH
3346: LD_STRING D11-Dvali-2
3348: PPUSH
3349: CALL_OW 94
// SayRadio ( Dvalishvili , D11-Dvali-3 ) ;
3353: LD_EXP 44
3357: PPUSH
3358: LD_STRING D11-Dvali-3
3360: PPUSH
3361: CALL_OW 94
// Say ( Simone , D11-Simone-2 ) ;
3365: LD_EXP 34
3369: PPUSH
3370: LD_STRING D11-Simone-2
3372: PPUSH
3373: CALL_OW 88
// DialogueOff ;
3377: CALL_OW 7
// DvaliAttack := true ;
3381: LD_ADDR_EXP 22
3385: PUSH
3386: LD_INT 1
3388: ST_TO_ADDR
// end ;
3389: END
// every 0 0$1 trigger DvaliAttack do
3390: LD_EXP 22
3394: IFFALSE 3610
3396: GO 3398
3398: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_N , 8 , Rand ( 6 , 8 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 1 ) ;
3399: LD_INT 10
3401: PPUSH
3402: LD_INT 8
3404: PPUSH
3405: LD_INT 6
3407: PPUSH
3408: LD_INT 8
3410: PPUSH
3411: CALL_OW 12
3415: PPUSH
3416: LD_EXP 58
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: EMPTY
3431: PPUSH
3432: LD_INT 25
3434: PUSH
3435: LD_INT 26
3437: PUSH
3438: LD_INT 27
3440: PUSH
3441: LD_INT 28
3443: PUSH
3444: LD_INT 71
3446: PUSH
3447: LD_INT 72
3449: PUSH
3450: LD_INT 73
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: PPUSH
3462: EMPTY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL 12199 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 8 , 11 ) , 0 , 0 , 3 , 2 , GeoSolMaxLevel , DvaliSpawn_N , 1 ) ;
3471: LD_INT 8
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 8
3479: PPUSH
3480: LD_INT 11
3482: PPUSH
3483: CALL_OW 12
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 0
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_EXP 58
3504: PPUSH
3505: LD_INT 10
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: CALL 13862 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
3515: LD_INT 0
3517: PUSH
3518: LD_EXP 54
3522: PUSH
3523: LD_INT 181
3525: PUSH
3526: LD_INT 21
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 226
3535: PUSH
3536: LD_INT 72
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 225
3545: PUSH
3546: LD_INT 103
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 0
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: LD_INT 0
3566: PUSH
3567: LD_INT 1
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 0
3575: PUSH
3576: LD_INT 0
3578: PUSH
3579: LD_INT 0
3581: PUSH
3582: LD_INT 1
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL 53474 0 1
// end ;
3610: END
// every 0 0$1 trigger DvaliAttack do
3611: LD_EXP 22
3615: IFFALSE 3831
3617: GO 3619
3619: DISABLE
// begin RespawnAttackVehicle ( DvaliSpawn_S , 8 , Rand ( 6 , 9 ) , GeoSolMaxLevel , 2 , engine_siberite , control_manual , [ ] , [ 25 , 26 , 27 , 28 , 71 , 72 , 73 ] , [ ] , 2 ) ;
3620: LD_INT 11
3622: PPUSH
3623: LD_INT 8
3625: PPUSH
3626: LD_INT 6
3628: PPUSH
3629: LD_INT 9
3631: PPUSH
3632: CALL_OW 12
3636: PPUSH
3637: LD_EXP 58
3641: PPUSH
3642: LD_INT 2
3644: PPUSH
3645: LD_INT 3
3647: PPUSH
3648: LD_INT 1
3650: PPUSH
3651: EMPTY
3652: PPUSH
3653: LD_INT 25
3655: PUSH
3656: LD_INT 26
3658: PUSH
3659: LD_INT 27
3661: PUSH
3662: LD_INT 28
3664: PUSH
3665: LD_INT 71
3667: PUSH
3668: LD_INT 72
3670: PUSH
3671: LD_INT 73
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PPUSH
3683: EMPTY
3684: PPUSH
3685: LD_INT 2
3687: PPUSH
3688: CALL 12199 0 11
// RespawnAttackInfantry ( 8 , 2 , Rand ( 7 , 10 ) , 0 , 0 , 2 , 2 , GeoSolMaxLevel , DvaliSpawn_S , 1 ) ;
3692: LD_INT 8
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: LD_INT 7
3700: PPUSH
3701: LD_INT 10
3703: PPUSH
3704: CALL_OW 12
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 2
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_EXP 58
3725: PPUSH
3726: LD_INT 11
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL 13862 0 10
// Attack ( [ 0 , MC_attack_group2 , [ [ 211 , 145 ] , [ 242 , 126 ] , [ 254 , 104 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
3736: LD_INT 0
3738: PUSH
3739: LD_EXP 55
3743: PUSH
3744: LD_INT 211
3746: PUSH
3747: LD_INT 145
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PUSH
3754: LD_INT 242
3756: PUSH
3757: LD_INT 126
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PUSH
3764: LD_INT 254
3766: PUSH
3767: LD_INT 104
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 0
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 0
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: LD_INT 1
3793: PUSH
3794: LD_INT 0
3796: PUSH
3797: LD_INT 0
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 1
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL 53474 0 1
// end ;
3831: END
// export KolvichArrival , KolvichAttacks ; every 0 0$1 trigger Endgame do var i ;
3832: LD_EXP 18
3836: IFFALSE 4132
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
// begin wait ( GEODvaliArrival + 15 15$00 ) ;
3844: LD_EXP 60
3848: PUSH
3849: LD_INT 31500
3851: PLUS
3852: PPUSH
3853: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-1 ) ;
3857: LD_EXP 43
3861: PPUSH
3862: LD_STRING D12-Kolvich-1
3864: PPUSH
3865: CALL_OW 94
// wait ( 0 0$05 ) ;
3869: LD_INT 175
3871: PPUSH
3872: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-2 ) ;
3876: LD_EXP 43
3880: PPUSH
3881: LD_STRING D12-Kolvich-2
3883: PPUSH
3884: CALL_OW 94
// wait ( 0 0$05 ) ;
3888: LD_INT 175
3890: PPUSH
3891: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-3 ) ;
3895: LD_EXP 43
3899: PPUSH
3900: LD_STRING D12-Kolvich-3
3902: PPUSH
3903: CALL_OW 94
// wait ( 0 0$02 ) ;
3907: LD_INT 70
3909: PPUSH
3910: CALL_OW 67
// SayRadio ( Kolvich , D12-Kolvich-4 ) ;
3914: LD_EXP 43
3918: PPUSH
3919: LD_STRING D12-Kolvich-4
3921: PPUSH
3922: CALL_OW 94
// InGameOn ;
3926: CALL_OW 8
// SayRadio ( Kolvich , D12-Kolvich-5 ) ;
3930: LD_EXP 43
3934: PPUSH
3935: LD_STRING D12-Kolvich-5
3937: PPUSH
3938: CALL_OW 94
// Say ( Simone , D12-Simone-1 ) ;
3942: LD_EXP 34
3946: PPUSH
3947: LD_STRING D12-Simone-1
3949: PPUSH
3950: CALL_OW 88
// SayRadio ( Kolvich , D12a-Kolvich-1 ) ;
3954: LD_EXP 43
3958: PPUSH
3959: LD_STRING D12a-Kolvich-1
3961: PPUSH
3962: CALL_OW 94
// InGameOff ;
3966: CALL_OW 9
// KolvichArrival := true ;
3970: LD_ADDR_EXP 23
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// SetSide ( AMBase , 6 ) ;
3978: LD_INT 351
3980: PPUSH
3981: LD_INT 6
3983: PPUSH
3984: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) , 6 ) ;
3988: LD_INT 22
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 30
4000: PUSH
4001: LD_INT 4
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PPUSH
4012: CALL_OW 69
4016: PPUSH
4017: LD_INT 6
4019: PPUSH
4020: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) , 6 ) ;
4024: LD_INT 22
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 30
4036: PUSH
4037: LD_INT 31
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PPUSH
4053: LD_INT 6
4055: PPUSH
4056: CALL_OW 235
// Prepare_RU2 ;
4060: CALL 8144 0 0
// PriorityAttack ( 6 , AMLab ) ;
4064: LD_INT 6
4066: PPUSH
4067: LD_EXP 31
4071: PPUSH
4072: CALL_OW 470
// PriorityAttack ( 6 , AM_Factory ) ;
4076: LD_INT 6
4078: PPUSH
4079: LD_EXP 65
4083: PPUSH
4084: CALL_OW 470
// for i in AMFactoryExt do
4088: LD_ADDR_VAR 0 1
4092: PUSH
4093: LD_EXP 32
4097: PUSH
4098: FOR_IN
4099: IFFALSE 4115
// PriorityAttack ( 6 , i ) ;
4101: LD_INT 6
4103: PPUSH
4104: LD_VAR 0 1
4108: PPUSH
4109: CALL_OW 470
4113: GO 4098
4115: POP
4116: POP
// Wait ( 2 2$0 ) ;
4117: LD_INT 4200
4119: PPUSH
4120: CALL_OW 67
// KolvichAttacks := true ;
4124: LD_ADDR_EXP 24
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: PPOPN 1
4134: END
// export RandallAwaiting ; every 0 0$1 trigger KolvichArrival do
4135: LD_EXP 23
4139: IFFALSE 4413
4141: GO 4143
4143: DISABLE
// begin wait ( DefenseTime ) ;
4144: LD_EXP 61
4148: PPUSH
4149: CALL_OW 67
// KolvichAttacks = false ;
4153: LD_ADDR_EXP 24
4157: PUSH
4158: LD_INT 0
4160: ST_TO_ADDR
// RespawnAttackVehicle ( AM1_ReinforceArrival , 1 , 20 , 10 , 1 , engine_siberite , control_manual , [ ] , [ ] , [ 4 , 6 , 9 , 7 ] , 2 ) ;
4161: LD_INT 12
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 20
4169: PPUSH
4170: LD_INT 10
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 3
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: EMPTY
4183: PPUSH
4184: EMPTY
4185: PPUSH
4186: LD_INT 4
4188: PUSH
4189: LD_INT 6
4191: PUSH
4192: LD_INT 9
4194: PUSH
4195: LD_INT 7
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PPUSH
4204: LD_INT 2
4206: PPUSH
4207: CALL 12199 0 11
// Attack ( [ 0 , MC_attack_group2 , [ [ 93 , 55 ] , [ 100 , 72 ] , [ 88 , 82 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
4211: LD_INT 0
4213: PUSH
4214: LD_EXP 55
4218: PUSH
4219: LD_INT 93
4221: PUSH
4222: LD_INT 55
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 100
4231: PUSH
4232: LD_INT 72
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 88
4241: PUSH
4242: LD_INT 82
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: LIST
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 1
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 1
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 0
4271: PUSH
4272: LD_INT 0
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 1
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: PPUSH
4302: CALL 53474 0 1
// wait ( 0 0$5 ) ;
4306: LD_INT 175
4308: PPUSH
4309: CALL_OW 67
// Say ( Simone , D13-Simone-1 ) ;
4313: LD_EXP 34
4317: PPUSH
4318: LD_STRING D13-Simone-1
4320: PPUSH
4321: CALL_OW 88
// SayRadio ( Kolvich , D13a-Kolvich-1 ) ;
4325: LD_EXP 43
4329: PPUSH
4330: LD_STRING D13a-Kolvich-1
4332: PPUSH
4333: CALL_OW 94
// wait ( 0 0$45 ) ;
4337: LD_INT 1575
4339: PPUSH
4340: CALL_OW 67
// PlaceUnitXY ( Randall , 217 , 1 , false ) ;
4344: LD_EXP 49
4348: PPUSH
4349: LD_INT 217
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 48
// ComMoveXY ( Randall , 277 , 135 ) ;
4362: LD_EXP 49
4366: PPUSH
4367: LD_INT 277
4369: PPUSH
4370: LD_INT 135
4372: PPUSH
4373: CALL_OW 111
// AddComTurnUnit ( Randall , Simone ) ;
4377: LD_EXP 49
4381: PPUSH
4382: LD_EXP 34
4386: PPUSH
4387: CALL_OW 179
// wait ( 0 0$25 ) ;
4391: LD_INT 875
4393: PPUSH
4394: CALL_OW 67
// ChangeMissionObjectives ( M4 ) ;
4398: LD_STRING M4
4400: PPUSH
4401: CALL_OW 337
// RandallAwaiting := true ;
4405: LD_ADDR_EXP 25
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// end ;
4413: END
// every 0 0$1 trigger RandallAwaiting and GetDistUnits ( Simone , Randall ) < 3 do
4414: LD_EXP 25
4418: PUSH
4419: LD_EXP 34
4423: PPUSH
4424: LD_EXP 49
4428: PPUSH
4429: CALL_OW 296
4433: PUSH
4434: LD_INT 3
4436: LESS
4437: AND
4438: IFFALSE 4927
4440: GO 4442
4442: DISABLE
// begin InGameOn ;
4443: CALL_OW 8
// ComExitVehicle ( [ Esther , Miller , Edmonds ] ) ;
4447: LD_EXP 36
4451: PUSH
4452: LD_EXP 35
4456: PUSH
4457: LD_EXP 37
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PPUSH
4467: CALL_OW 121
// ComMoveXY ( [ Esther , Miller , Edmonds ] , 276 , 137 ) ;
4471: LD_EXP 36
4475: PUSH
4476: LD_EXP 35
4480: PUSH
4481: LD_EXP 37
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: LD_INT 276
4493: PPUSH
4494: LD_INT 137
4496: PPUSH
4497: CALL_OW 111
// ComMoveXY ( Simone , 278 , 136 ) ;
4501: LD_EXP 34
4505: PPUSH
4506: LD_INT 278
4508: PPUSH
4509: LD_INT 136
4511: PPUSH
4512: CALL_OW 111
// AddComTurnUnit ( Simone , Randall ) ;
4516: LD_EXP 34
4520: PPUSH
4521: LD_EXP 49
4525: PPUSH
4526: CALL_OW 179
// CenterOnUnits ( Randall ) ;
4530: LD_EXP 49
4534: PPUSH
4535: CALL_OW 85
// Say ( Randall , D14-Randall-1 ) ;
4539: LD_EXP 49
4543: PPUSH
4544: LD_STRING D14-Randall-1
4546: PPUSH
4547: CALL_OW 88
// Say ( Simone , D14-Simone-1 ) ;
4551: LD_EXP 34
4555: PPUSH
4556: LD_STRING D14-Simone-1
4558: PPUSH
4559: CALL_OW 88
// Say ( Randall , D14-Randall-2 ) ;
4563: LD_EXP 49
4567: PPUSH
4568: LD_STRING D14-Randall-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Simone , D14-Simone-2 ) ;
4575: LD_EXP 34
4579: PPUSH
4580: LD_STRING D14-Simone-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Randall , D14-Randall-2a ) ;
4587: LD_EXP 49
4591: PPUSH
4592: LD_STRING D14-Randall-2a
4594: PPUSH
4595: CALL_OW 88
// Say ( Simone , D14-Simone-2a ) ;
4599: LD_EXP 34
4603: PPUSH
4604: LD_STRING D14-Simone-2a
4606: PPUSH
4607: CALL_OW 88
// Say ( Randall , D14-Randall-3 ) ;
4611: LD_EXP 49
4615: PPUSH
4616: LD_STRING D14-Randall-3
4618: PPUSH
4619: CALL_OW 88
// Say ( Simone , D14-Simone-2b ) ;
4623: LD_EXP 34
4627: PPUSH
4628: LD_STRING D14-Simone-2b
4630: PPUSH
4631: CALL_OW 88
// Say ( Randall , D14-Randall-4 ) ;
4635: LD_EXP 49
4639: PPUSH
4640: LD_STRING D14-Randall-4
4642: PPUSH
4643: CALL_OW 88
// Say ( Simone , D14-Simone-3 ) ;
4647: LD_EXP 34
4651: PPUSH
4652: LD_STRING D14-Simone-3
4654: PPUSH
4655: CALL_OW 88
// Say ( Randall , D14-Randall-5 ) ;
4659: LD_EXP 49
4663: PPUSH
4664: LD_STRING D14-Randall-5
4666: PPUSH
4667: CALL_OW 88
// Say ( Randall , D14-Randall-6 ) ;
4671: LD_EXP 49
4675: PPUSH
4676: LD_STRING D14-Randall-6
4678: PPUSH
4679: CALL_OW 88
// Say ( Randall , D14-Randall-7 ) ;
4683: LD_EXP 49
4687: PPUSH
4688: LD_STRING D14-Randall-7
4690: PPUSH
4691: CALL_OW 88
// if not IsDead ( Edmonds ) then
4695: LD_EXP 37
4699: PPUSH
4700: CALL_OW 301
4704: NOT
4705: IFFALSE 4748
// begin Say ( Randall , D14-Edmonds-1 ) ;
4707: LD_EXP 49
4711: PPUSH
4712: LD_STRING D14-Edmonds-1
4714: PPUSH
4715: CALL_OW 88
// Say ( Randall , D14-Randall-8a ) ;
4719: LD_EXP 49
4723: PPUSH
4724: LD_STRING D14-Randall-8a
4726: PPUSH
4727: CALL_OW 88
// ComMoveXY ( Edmonds , 277 , 135 ) ;
4731: LD_EXP 37
4735: PPUSH
4736: LD_INT 277
4738: PPUSH
4739: LD_INT 135
4741: PPUSH
4742: CALL_OW 111
// end else
4746: GO 4760
// Say ( Randall , D14-Randall-8 ) ;
4748: LD_EXP 49
4752: PPUSH
4753: LD_STRING D14-Randall-8
4755: PPUSH
4756: CALL_OW 88
// wait ( 0 0$5 ) ;
4760: LD_INT 175
4762: PPUSH
4763: CALL_OW 67
// Say ( Randall , D14-Randall-9 ) ;
4767: LD_EXP 49
4771: PPUSH
4772: LD_STRING D14-Randall-9
4774: PPUSH
4775: CALL_OW 88
// ComMoveXY ( Randall , 277 , 135 ) ;
4779: LD_EXP 49
4783: PPUSH
4784: LD_INT 277
4786: PPUSH
4787: LD_INT 135
4789: PPUSH
4790: CALL_OW 111
// wait ( 0 0$2 ) ;
4794: LD_INT 70
4796: PPUSH
4797: CALL_OW 67
// Say ( Esther , D15-Esther-1 ) ;
4801: LD_EXP 36
4805: PPUSH
4806: LD_STRING D15-Esther-1
4808: PPUSH
4809: CALL_OW 88
// Say ( Simone , D15-Simone-1 ) ;
4813: LD_EXP 34
4817: PPUSH
4818: LD_STRING D15-Simone-1
4820: PPUSH
4821: CALL_OW 88
// Say ( Esther , D15-Esther-2 ) ;
4825: LD_EXP 36
4829: PPUSH
4830: LD_STRING D15-Esther-2
4832: PPUSH
4833: CALL_OW 88
// Say ( Simone , D15-Simone-2 ) ;
4837: LD_EXP 34
4841: PPUSH
4842: LD_STRING D15-Simone-2
4844: PPUSH
4845: CALL_OW 88
// Say ( Esther , D15-Esther-3 ) ;
4849: LD_EXP 36
4853: PPUSH
4854: LD_STRING D15-Esther-3
4856: PPUSH
4857: CALL_OW 88
// ComMoveXY ( Esther , 277 , 135 ) ;
4861: LD_EXP 36
4865: PPUSH
4866: LD_INT 277
4868: PPUSH
4869: LD_INT 135
4871: PPUSH
4872: CALL_OW 111
// Say ( Simone , D15-Simone-3 ) ;
4876: LD_EXP 34
4880: PPUSH
4881: LD_STRING D15-Simone-3
4883: PPUSH
4884: CALL_OW 88
// wait ( 0 0$2 ) ;
4888: LD_INT 70
4890: PPUSH
4891: CALL_OW 67
// Say ( Miller , D15-Miller-1 ) ;
4895: LD_EXP 35
4899: PPUSH
4900: LD_STRING D15-Miller-1
4902: PPUSH
4903: CALL_OW 88
// Say ( Simone , D15-Simone-4 ) ;
4907: LD_EXP 34
4911: PPUSH
4912: LD_STRING D15-Simone-4
4914: PPUSH
4915: CALL_OW 88
// InGameOff ;
4919: CALL_OW 9
// EndMission ;
4923: CALL 81916 0 0
// end ; end_of_file
4927: END
// export AM_Sols , AM_Engineers , AM_Mechs , AM_Scientists ; export function Prepare_AMBase ; var i , un ; begin
4928: LD_INT 0
4930: PPUSH
4931: PPUSH
4932: PPUSH
// for i = 1 to 10 do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 10
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5037
// begin uc_side = 1 ;
4949: LD_ADDR_OWVAR 20
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// uc_nation = 1 ;
4957: LD_ADDR_OWVAR 21
4961: PUSH
4962: LD_INT 1
4964: ST_TO_ADDR
// hc_name =  ;
4965: LD_ADDR_OWVAR 26
4969: PUSH
4970: LD_STRING 
4972: ST_TO_ADDR
// hc_gallery =  ;
4973: LD_ADDR_OWVAR 33
4977: PUSH
4978: LD_STRING 
4980: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_INT 1
4986: PPUSH
4987: LD_INT 9
4989: PPUSH
4990: CALL_OW 380
// un = CreateHuman ;
4994: LD_ADDR_VAR 0 3
4998: PUSH
4999: CALL_OW 44
5003: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 0
5014: PPUSH
5015: CALL_OW 49
// AM_Sols = AM_Sols ^ un ;
5019: LD_ADDR_EXP 26
5023: PUSH
5024: LD_EXP 26
5028: PUSH
5029: LD_VAR 0 3
5033: ADD
5034: ST_TO_ADDR
// end ;
5035: GO 4946
5037: POP
5038: POP
// for i = 1 to 4 do
5039: LD_ADDR_VAR 0 2
5043: PUSH
5044: DOUBLE
5045: LD_INT 1
5047: DEC
5048: ST_TO_ADDR
5049: LD_INT 4
5051: PUSH
5052: FOR_TO
5053: IFFALSE 5143
// begin uc_side = 1 ;
5055: LD_ADDR_OWVAR 20
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// uc_nation = 1 ;
5063: LD_ADDR_OWVAR 21
5067: PUSH
5068: LD_INT 1
5070: ST_TO_ADDR
// hc_name =  ;
5071: LD_ADDR_OWVAR 26
5075: PUSH
5076: LD_STRING 
5078: ST_TO_ADDR
// hc_gallery =  ;
5079: LD_ADDR_OWVAR 33
5083: PUSH
5084: LD_STRING 
5086: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
5087: LD_INT 1
5089: PPUSH
5090: LD_INT 2
5092: PPUSH
5093: LD_INT 9
5095: PPUSH
5096: CALL_OW 380
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 3
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: CALL_OW 49
// AM_Engineers = AM_Engineers ^ un ;
5125: LD_ADDR_EXP 27
5129: PUSH
5130: LD_EXP 27
5134: PUSH
5135: LD_VAR 0 3
5139: ADD
5140: ST_TO_ADDR
// end ;
5141: GO 5052
5143: POP
5144: POP
// for i = 1 to 6 do
5145: LD_ADDR_VAR 0 2
5149: PUSH
5150: DOUBLE
5151: LD_INT 1
5153: DEC
5154: ST_TO_ADDR
5155: LD_INT 6
5157: PUSH
5158: FOR_TO
5159: IFFALSE 5249
// begin uc_side = 1 ;
5161: LD_ADDR_OWVAR 20
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// uc_nation = 1 ;
5169: LD_ADDR_OWVAR 21
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_name =  ;
5177: LD_ADDR_OWVAR 26
5181: PUSH
5182: LD_STRING 
5184: ST_TO_ADDR
// hc_gallery =  ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING 
5192: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
5193: LD_INT 0
5195: PPUSH
5196: LD_INT 3
5198: PPUSH
5199: LD_INT 9
5201: PPUSH
5202: CALL_OW 380
// un = CreateHuman ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: CALL_OW 44
5215: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
5216: LD_VAR 0 3
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_INT 0
5226: PPUSH
5227: CALL_OW 49
// AM_Mechs = AM_Mechs ^ un ;
5231: LD_ADDR_EXP 28
5235: PUSH
5236: LD_EXP 28
5240: PUSH
5241: LD_VAR 0 3
5245: ADD
5246: ST_TO_ADDR
// end ;
5247: GO 5158
5249: POP
5250: POP
// for i = 1 to 4 do
5251: LD_ADDR_VAR 0 2
5255: PUSH
5256: DOUBLE
5257: LD_INT 1
5259: DEC
5260: ST_TO_ADDR
5261: LD_INT 4
5263: PUSH
5264: FOR_TO
5265: IFFALSE 5355
// begin uc_side = 1 ;
5267: LD_ADDR_OWVAR 20
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// uc_nation = 1 ;
5275: LD_ADDR_OWVAR 21
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// hc_name =  ;
5283: LD_ADDR_OWVAR 26
5287: PUSH
5288: LD_STRING 
5290: ST_TO_ADDR
// hc_gallery =  ;
5291: LD_ADDR_OWVAR 33
5295: PUSH
5296: LD_STRING 
5298: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
5299: LD_INT 0
5301: PPUSH
5302: LD_INT 4
5304: PPUSH
5305: LD_INT 10
5307: PPUSH
5308: CALL_OW 380
// un = CreateHuman ;
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: CALL_OW 44
5321: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
5322: LD_VAR 0 3
5326: PPUSH
5327: LD_INT 4
5329: PPUSH
5330: LD_INT 0
5332: PPUSH
5333: CALL_OW 49
// AM_Scientists = AM_Scientists ^ un ;
5337: LD_ADDR_EXP 29
5341: PUSH
5342: LD_EXP 29
5346: PUSH
5347: LD_VAR 0 3
5351: ADD
5352: ST_TO_ADDR
// end ;
5353: GO 5264
5355: POP
5356: POP
// end ;
5357: LD_VAR 0 1
5361: RET
// export function Prepare_AMBase_LateVersion ; var i , un ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
5366: PPUSH
// for i = 1 to 10 do
5367: LD_ADDR_VAR 0 2
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 10
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5486
// begin uc_side = 1 ;
5383: LD_ADDR_OWVAR 20
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// uc_nation = 1 ;
5391: LD_ADDR_OWVAR 21
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// hc_name =  ;
5399: LD_ADDR_OWVAR 26
5403: PUSH
5404: LD_STRING 
5406: ST_TO_ADDR
// hc_gallery =  ;
5407: LD_ADDR_OWVAR 33
5411: PUSH
5412: LD_STRING 
5414: ST_TO_ADDR
// PrepareHuman ( false , 1 , 9 ) ;
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: LD_INT 9
5423: PPUSH
5424: CALL_OW 380
// un = CreateHuman ;
5428: LD_ADDR_VAR 0 3
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// PlaceUnitArea ( un , AMSoldiersSpawn , false ) ;
5438: LD_VAR 0 3
5442: PPUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5453: LD_VAR 0 3
5457: PPUSH
5458: LD_INT 121
5460: PPUSH
5461: LD_INT 163
5463: PPUSH
5464: CALL_OW 118
// AM_Sols = AM_Sols ^ un ;
5468: LD_ADDR_EXP 26
5472: PUSH
5473: LD_EXP 26
5477: PUSH
5478: LD_VAR 0 3
5482: ADD
5483: ST_TO_ADDR
// end ;
5484: GO 5380
5486: POP
5487: POP
// for i = 1 to 4 do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: DOUBLE
5494: LD_INT 1
5496: DEC
5497: ST_TO_ADDR
5498: LD_INT 4
5500: PUSH
5501: FOR_TO
5502: IFFALSE 5607
// begin uc_side = 1 ;
5504: LD_ADDR_OWVAR 20
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// uc_nation = 1 ;
5512: LD_ADDR_OWVAR 21
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// hc_name =  ;
5520: LD_ADDR_OWVAR 26
5524: PUSH
5525: LD_STRING 
5527: ST_TO_ADDR
// hc_gallery =  ;
5528: LD_ADDR_OWVAR 33
5532: PUSH
5533: LD_STRING 
5535: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 9 ) ;
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 9
5544: PPUSH
5545: CALL_OW 380
// un = CreateHuman ;
5549: LD_ADDR_VAR 0 3
5553: PUSH
5554: CALL_OW 44
5558: ST_TO_ADDR
// PlaceUnitArea ( un , AMEngsSpawn , false ) ;
5559: LD_VAR 0 3
5563: PPUSH
5564: LD_INT 3
5566: PPUSH
5567: LD_INT 0
5569: PPUSH
5570: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_INT 121
5581: PPUSH
5582: LD_INT 163
5584: PPUSH
5585: CALL_OW 118
// AM_Engineers = AM_Engineers ^ un ;
5589: LD_ADDR_EXP 27
5593: PUSH
5594: LD_EXP 27
5598: PUSH
5599: LD_VAR 0 3
5603: ADD
5604: ST_TO_ADDR
// end ;
5605: GO 5501
5607: POP
5608: POP
// for i = 1 to 6 do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_INT 6
5621: PUSH
5622: FOR_TO
5623: IFFALSE 5728
// begin uc_side = 1 ;
5625: LD_ADDR_OWVAR 20
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// uc_nation = 1 ;
5633: LD_ADDR_OWVAR 21
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// hc_name =  ;
5641: LD_ADDR_OWVAR 26
5645: PUSH
5646: LD_STRING 
5648: ST_TO_ADDR
// hc_gallery =  ;
5649: LD_ADDR_OWVAR 33
5653: PUSH
5654: LD_STRING 
5656: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 3
5662: PPUSH
5663: LD_INT 9
5665: PPUSH
5666: CALL_OW 380
// un = CreateHuman ;
5670: LD_ADDR_VAR 0 3
5674: PUSH
5675: CALL_OW 44
5679: ST_TO_ADDR
// PlaceUnitArea ( un , AMMechsSpawn , false ) ;
5680: LD_VAR 0 3
5684: PPUSH
5685: LD_INT 2
5687: PPUSH
5688: LD_INT 0
5690: PPUSH
5691: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5695: LD_VAR 0 3
5699: PPUSH
5700: LD_INT 121
5702: PPUSH
5703: LD_INT 163
5705: PPUSH
5706: CALL_OW 118
// AM_Mechs = AM_Mechs ^ un ;
5710: LD_ADDR_EXP 28
5714: PUSH
5715: LD_EXP 28
5719: PUSH
5720: LD_VAR 0 3
5724: ADD
5725: ST_TO_ADDR
// end ;
5726: GO 5622
5728: POP
5729: POP
// for i = 1 to 4 do
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: DOUBLE
5736: LD_INT 1
5738: DEC
5739: ST_TO_ADDR
5740: LD_INT 4
5742: PUSH
5743: FOR_TO
5744: IFFALSE 5849
// begin uc_side = 1 ;
5746: LD_ADDR_OWVAR 20
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// uc_nation = 1 ;
5754: LD_ADDR_OWVAR 21
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// hc_name =  ;
5762: LD_ADDR_OWVAR 26
5766: PUSH
5767: LD_STRING 
5769: ST_TO_ADDR
// hc_gallery =  ;
5770: LD_ADDR_OWVAR 33
5774: PUSH
5775: LD_STRING 
5777: ST_TO_ADDR
// PrepareHuman ( false , 4 , 5 ) ;
5778: LD_INT 0
5780: PPUSH
5781: LD_INT 4
5783: PPUSH
5784: LD_INT 5
5786: PPUSH
5787: CALL_OW 380
// un = CreateHuman ;
5791: LD_ADDR_VAR 0 3
5795: PUSH
5796: CALL_OW 44
5800: ST_TO_ADDR
// PlaceUnitArea ( un , AMScientistsSpawn , false ) ;
5801: LD_VAR 0 3
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: LD_INT 0
5811: PPUSH
5812: CALL_OW 49
// ComTurnXY ( un , 121 , 163 ) ;
5816: LD_VAR 0 3
5820: PPUSH
5821: LD_INT 121
5823: PPUSH
5824: LD_INT 163
5826: PPUSH
5827: CALL_OW 118
// AM_Scientists = AM_Scientists ^ un ;
5831: LD_ADDR_EXP 29
5835: PUSH
5836: LD_EXP 29
5840: PUSH
5841: LD_VAR 0 3
5845: ADD
5846: ST_TO_ADDR
// end ;
5847: GO 5743
5849: POP
5850: POP
// end ;
5851: LD_VAR 0 1
5855: RET
// export function AlliedReinforcement ; var RVeh1 , RVeh2 , RVeh3 , RVeh4 , RVeh5 ; begin
5856: LD_INT 0
5858: PPUSH
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
// hc_name :=  ;
5864: LD_ADDR_OWVAR 26
5868: PUSH
5869: LD_STRING 
5871: ST_TO_ADDR
// hc_gallery :=  ;
5872: LD_ADDR_OWVAR 33
5876: PUSH
5877: LD_STRING 
5879: ST_TO_ADDR
// uc_side := 7 ;
5880: LD_ADDR_OWVAR 20
5884: PUSH
5885: LD_INT 7
5887: ST_TO_ADDR
// uc_nation := nation_american ;
5888: LD_ADDR_OWVAR 21
5892: PUSH
5893: LD_INT 1
5895: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
5896: LD_ADDR_OWVAR 37
5900: PUSH
5901: LD_INT 4
5903: ST_TO_ADDR
// vc_engine := engine_siberite ;
5904: LD_ADDR_OWVAR 39
5908: PUSH
5909: LD_INT 3
5911: ST_TO_ADDR
// vc_control := control_computer ;
5912: LD_ADDR_OWVAR 38
5916: PUSH
5917: LD_INT 3
5919: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
5920: LD_ADDR_OWVAR 40
5924: PUSH
5925: LD_INT 14
5927: ST_TO_ADDR
// RVeh1 := CreateVehicle ;
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: CALL_OW 45
5937: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
5938: LD_ADDR_OWVAR 37
5942: PUSH
5943: LD_INT 2
5945: ST_TO_ADDR
// vc_control := control_computer ;
5946: LD_ADDR_OWVAR 38
5950: PUSH
5951: LD_INT 3
5953: ST_TO_ADDR
// vc_weapon := us_crane ;
5954: LD_ADDR_OWVAR 40
5958: PUSH
5959: LD_INT 13
5961: ST_TO_ADDR
// RVeh2 := CreateVehicle ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
5972: LD_ADDR_OWVAR 40
5976: PUSH
5977: LD_INT 12
5979: ST_TO_ADDR
// RVeh3 := CreateVehicle ;
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: CALL_OW 45
5989: ST_TO_ADDR
// RVeh4 := CreateVehicle ;
5990: LD_ADDR_VAR 0 5
5994: PUSH
5995: CALL_OW 45
5999: ST_TO_ADDR
// RVeh5 := CreateVehicle ;
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: CALL_OW 45
6009: ST_TO_ADDR
// AddCargo ( RVeh3 , mat_cans , 100 ) ;
6010: LD_VAR 0 4
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_INT 100
6020: PPUSH
6021: CALL_OW 291
// AddCargo ( RVeh4 , mat_cans , 100 ) ;
6025: LD_VAR 0 5
6029: PPUSH
6030: LD_INT 1
6032: PPUSH
6033: LD_INT 100
6035: PPUSH
6036: CALL_OW 291
// AddCargo ( RVeh5 , mat_cans , 100 ) ;
6040: LD_VAR 0 6
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_INT 100
6050: PPUSH
6051: CALL_OW 291
// PlaceUnitXYR ( RVeh1 , 53 , 100 , 1 , false ) ;
6055: LD_VAR 0 2
6059: PPUSH
6060: LD_INT 53
6062: PPUSH
6063: LD_INT 100
6065: PPUSH
6066: LD_INT 1
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 50
// PlaceUnitXYR ( RVeh2 , 52 , 97 , 1 , false ) ;
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_INT 52
6083: PPUSH
6084: LD_INT 97
6086: PPUSH
6087: LD_INT 1
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 50
// PlaceUnitXYR ( RVeh3 , 46 , 87 , 1 , false ) ;
6097: LD_VAR 0 4
6101: PPUSH
6102: LD_INT 46
6104: PPUSH
6105: LD_INT 87
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_INT 0
6113: PPUSH
6114: CALL_OW 50
// PlaceUnitXYR ( RVeh4 , 54 , 95 , 1 , false ) ;
6118: LD_VAR 0 5
6122: PPUSH
6123: LD_INT 54
6125: PPUSH
6126: LD_INT 95
6128: PPUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 50
// PlaceUnitXYR ( RVeh5 , 56 , 98 , 1 , false ) ;
6139: LD_VAR 0 6
6143: PPUSH
6144: LD_INT 56
6146: PPUSH
6147: LD_INT 98
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: LD_INT 0
6155: PPUSH
6156: CALL_OW 50
// end ;
6160: LD_VAR 0 1
6164: RET
// export function Garrison_Buildings ( side , nation , min_pers , max_pers , min_sols , max_sols , max_spec_class , lvl ) ; var i , j , buildings , un_count , sol_count , spec_count , un , filter ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
// buildings := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
6176: LD_ADDR_VAR 0 12
6180: PUSH
6181: LD_INT 22
6183: PUSH
6184: LD_VAR 0 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 69
6211: ST_TO_ADDR
// case nation of 1 :
6212: LD_VAR 0 2
6216: PUSH
6217: LD_INT 1
6219: DOUBLE
6220: EQUAL
6221: IFTRUE 6225
6223: GO 6236
6225: POP
// uc_nation = nation_american ; 2 :
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
6234: GO 6275
6236: LD_INT 2
6238: DOUBLE
6239: EQUAL
6240: IFTRUE 6244
6242: GO 6255
6244: POP
// uc_nation = nation_arabian ; 3 :
6245: LD_ADDR_OWVAR 21
6249: PUSH
6250: LD_INT 2
6252: ST_TO_ADDR
6253: GO 6275
6255: LD_INT 3
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6274
6263: POP
// uc_nation = nation_russian ; end ;
6264: LD_ADDR_OWVAR 21
6268: PUSH
6269: LD_INT 3
6271: ST_TO_ADDR
6272: GO 6275
6274: POP
// for i = 1 to buildings do
6275: LD_ADDR_VAR 0 10
6279: PUSH
6280: DOUBLE
6281: LD_INT 1
6283: DEC
6284: ST_TO_ADDR
6285: LD_VAR 0 12
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6870
// begin if IsInUnit ( buildings [ i ] ) = 0 then
6293: LD_VAR 0 12
6297: PUSH
6298: LD_VAR 0 10
6302: ARRAY
6303: PPUSH
6304: CALL_OW 310
6308: PUSH
6309: LD_INT 0
6311: EQUAL
6312: IFFALSE 6868
// begin uc_side = side ;
6314: LD_ADDR_OWVAR 20
6318: PUSH
6319: LD_VAR 0 1
6323: ST_TO_ADDR
// if GetBType ( buildings [ i ] ) = b_armoury or GetBType ( buildings [ i ] ) = b_barracks then
6324: LD_VAR 0 12
6328: PUSH
6329: LD_VAR 0 10
6333: ARRAY
6334: PPUSH
6335: CALL_OW 266
6339: PUSH
6340: LD_INT 4
6342: EQUAL
6343: PUSH
6344: LD_VAR 0 12
6348: PUSH
6349: LD_VAR 0 10
6353: ARRAY
6354: PPUSH
6355: CALL_OW 266
6359: PUSH
6360: LD_INT 5
6362: EQUAL
6363: OR
6364: IFFALSE 6618
// begin sol_count = Rand ( min_sols , max_sols ) ;
6366: LD_ADDR_VAR 0 14
6370: PUSH
6371: LD_VAR 0 5
6375: PPUSH
6376: LD_VAR 0 6
6380: PPUSH
6381: CALL_OW 12
6385: ST_TO_ADDR
// for j = 1 to sol_count do
6386: LD_ADDR_VAR 0 11
6390: PUSH
6391: DOUBLE
6392: LD_INT 1
6394: DEC
6395: ST_TO_ADDR
6396: LD_VAR 0 14
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6448
// begin PrepareSoldier ( 0 , lvl ) ;
6404: LD_INT 0
6406: PPUSH
6407: LD_VAR 0 8
6411: PPUSH
6412: CALL_OW 381
// un = CreateHuman ;
6416: LD_ADDR_VAR 0 16
6420: PUSH
6421: CALL_OW 44
6425: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6426: LD_VAR 0 16
6430: PPUSH
6431: LD_VAR 0 12
6435: PUSH
6436: LD_VAR 0 10
6440: ARRAY
6441: PPUSH
6442: CALL_OW 52
// end ;
6446: GO 6401
6448: POP
6449: POP
// if GetBType ( buildings [ i ] ) = b_barracks then
6450: LD_VAR 0 12
6454: PUSH
6455: LD_VAR 0 10
6459: ARRAY
6460: PPUSH
6461: CALL_OW 266
6465: PUSH
6466: LD_INT 5
6468: EQUAL
6469: IFFALSE 6616
// begin spec_count = Rand ( 0 , max_spec_class ) ;
6471: LD_ADDR_VAR 0 15
6475: PUSH
6476: LD_INT 0
6478: PPUSH
6479: LD_VAR 0 7
6483: PPUSH
6484: CALL_OW 12
6488: ST_TO_ADDR
// for j = 1 to sol_count do
6489: LD_ADDR_VAR 0 11
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_VAR 0 14
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6614
// begin PrepareSoldier ( 0 , lvl ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_VAR 0 8
6514: PPUSH
6515: CALL_OW 381
// case nation of 1 :
6519: LD_VAR 0 2
6523: PUSH
6524: LD_INT 1
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6543
6532: POP
// hc_class = class_sniper ; 2 :
6533: LD_ADDR_OWVAR 28
6537: PUSH
6538: LD_INT 5
6540: ST_TO_ADDR
6541: GO 6582
6543: LD_INT 2
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6562
6551: POP
// hc_class = class_mortar ; 3 :
6552: LD_ADDR_OWVAR 28
6556: PUSH
6557: LD_INT 8
6559: ST_TO_ADDR
6560: GO 6582
6562: LD_INT 3
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6581
6570: POP
// hc_class = class_bazooker ; end ;
6571: LD_ADDR_OWVAR 28
6575: PUSH
6576: LD_INT 9
6578: ST_TO_ADDR
6579: GO 6582
6581: POP
// un = CreateHuman ;
6582: LD_ADDR_VAR 0 16
6586: PUSH
6587: CALL_OW 44
6591: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6592: LD_VAR 0 16
6596: PPUSH
6597: LD_VAR 0 12
6601: PUSH
6602: LD_VAR 0 10
6606: ARRAY
6607: PPUSH
6608: CALL_OW 52
// end ;
6612: GO 6504
6614: POP
6615: POP
// end ; end else
6616: GO 6638
// un_count = Rand ( min_pers , max_pers ) ;
6618: LD_ADDR_VAR 0 13
6622: PUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: LD_VAR 0 4
6632: PPUSH
6633: CALL_OW 12
6637: ST_TO_ADDR
// for j = 1 to un_count do
6638: LD_ADDR_VAR 0 11
6642: PUSH
6643: DOUBLE
6644: LD_INT 1
6646: DEC
6647: ST_TO_ADDR
6648: LD_VAR 0 13
6652: PUSH
6653: FOR_TO
6654: IFFALSE 6866
// begin case GetBType ( buildings [ i ] ) of b_depot :
6656: LD_VAR 0 12
6660: PUSH
6661: LD_VAR 0 10
6665: ARRAY
6666: PPUSH
6667: CALL_OW 266
6671: PUSH
6672: LD_INT 0
6674: DOUBLE
6675: EQUAL
6676: IFTRUE 6680
6678: GO 6695
6680: POP
// PrepareEngineer ( 0 , lvl ) ; b_warehouse :
6681: LD_INT 0
6683: PPUSH
6684: LD_VAR 0 8
6688: PPUSH
6689: CALL_OW 382
6693: GO 6834
6695: LD_INT 1
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6718
6703: POP
// PrepareEngineer ( 0 , lvl ) ; b_workshop :
6704: LD_INT 0
6706: PPUSH
6707: LD_VAR 0 8
6711: PPUSH
6712: CALL_OW 382
6716: GO 6834
6718: LD_INT 2
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6741
6726: POP
// PrepareMechanic ( 0 , lvl ) ; b_factory :
6727: LD_INT 0
6729: PPUSH
6730: LD_VAR 0 8
6734: PPUSH
6735: CALL_OW 383
6739: GO 6834
6741: LD_INT 3
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6764
6749: POP
// PrepareMechanic ( 0 , lvl ) ; b_lab :
6750: LD_INT 0
6752: PPUSH
6753: LD_VAR 0 8
6757: PPUSH
6758: CALL_OW 383
6762: GO 6834
6764: LD_INT 6
6766: DOUBLE
6767: EQUAL
6768: IFTRUE 6772
6770: GO 6787
6772: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_half :
6773: LD_INT 0
6775: PPUSH
6776: LD_VAR 0 8
6780: PPUSH
6781: CALL_OW 384
6785: GO 6834
6787: LD_INT 7
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 6810
6795: POP
// PrepareScientist ( 0 , lvl ) ; b_lab_full :
6796: LD_INT 0
6798: PPUSH
6799: LD_VAR 0 8
6803: PPUSH
6804: CALL_OW 384
6808: GO 6834
6810: LD_INT 8
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6833
6818: POP
// PrepareScientist ( 0 , lvl ) ; end ;
6819: LD_INT 0
6821: PPUSH
6822: LD_VAR 0 8
6826: PPUSH
6827: CALL_OW 384
6831: GO 6834
6833: POP
// un = CreateHuman ;
6834: LD_ADDR_VAR 0 16
6838: PUSH
6839: CALL_OW 44
6843: ST_TO_ADDR
// PlaceHumanInUnit ( un , buildings [ i ] ) ;
6844: LD_VAR 0 16
6848: PPUSH
6849: LD_VAR 0 12
6853: PUSH
6854: LD_VAR 0 10
6858: ARRAY
6859: PPUSH
6860: CALL_OW 52
// end ;
6864: GO 6653
6866: POP
6867: POP
// end ; end ;
6868: GO 6290
6870: POP
6871: POP
// end ;
6872: LD_VAR 0 9
6876: RET
// export function PlaceUnitInBunker ( un , b ) ; var dir ; begin
6877: LD_INT 0
6879: PPUSH
6880: PPUSH
// dir := GetDir ( b ) ;
6881: LD_ADDR_VAR 0 4
6885: PUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 254
6895: ST_TO_ADDR
// if dir < 3 then
6896: LD_VAR 0 4
6900: PUSH
6901: LD_INT 3
6903: LESS
6904: IFFALSE 6922
// dir := dir + 3 else
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: LD_VAR 0 4
6915: PUSH
6916: LD_INT 3
6918: PLUS
6919: ST_TO_ADDR
6920: GO 6936
// dir := dir - 3 ;
6922: LD_ADDR_VAR 0 4
6926: PUSH
6927: LD_VAR 0 4
6931: PUSH
6932: LD_INT 3
6934: MINUS
6935: ST_TO_ADDR
// SetDir ( un , dir ) ;
6936: LD_VAR 0 1
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_VAR 0 2
6959: PPUSH
6960: CALL_OW 52
// end ;
6964: LD_VAR 0 3
6968: RET
// export function Fill_Bunkers ( side ) ; var i , filter , un ; begin
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_nation , 3 ] , [ f_btype , b_breastwork ] ] ) ;
6975: LD_ADDR_VAR 0 4
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_VAR 0 1
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 23
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 30
7004: PUSH
7005: LD_INT 31
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: ST_TO_ADDR
// for i = 1 to filter do
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: DOUBLE
7028: LD_INT 1
7030: DEC
7031: ST_TO_ADDR
7032: LD_VAR 0 4
7036: PUSH
7037: FOR_TO
7038: IFFALSE 7133
// if IsInUnit ( filter [ i ] ) = 0 then
7040: LD_VAR 0 4
7044: PUSH
7045: LD_VAR 0 3
7049: ARRAY
7050: PPUSH
7051: CALL_OW 310
7055: PUSH
7056: LD_INT 0
7058: EQUAL
7059: IFFALSE 7131
// begin uc_nation = nation_russian ;
7061: LD_ADDR_OWVAR 21
7065: PUSH
7066: LD_INT 3
7068: ST_TO_ADDR
// uc_side = side ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_VAR 0 1
7078: ST_TO_ADDR
// PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7079: LD_INT 1
7081: PPUSH
7082: LD_EXP 56
7086: PPUSH
7087: LD_EXP 57
7091: PPUSH
7092: CALL_OW 12
7096: PPUSH
7097: CALL_OW 381
// un := CreateHuman ;
7101: LD_ADDR_VAR 0 5
7105: PUSH
7106: CALL_OW 44
7110: ST_TO_ADDR
// PlaceUnitInBunker ( un , filter [ i ] ) ;
7111: LD_VAR 0 5
7115: PPUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_VAR 0 3
7125: ARRAY
7126: PPUSH
7127: CALL 6877 0 2
// end ;
7131: GO 7037
7133: POP
7134: POP
// end ;
7135: LD_VAR 0 2
7139: RET
// export function Fill_Turrets ( side ) ; var i , filter , un ; begin
7140: LD_INT 0
7142: PPUSH
7143: PPUSH
7144: PPUSH
7145: PPUSH
// uc_side := side ;
7146: LD_ADDR_OWVAR 20
7150: PUSH
7151: LD_VAR 0 1
7155: ST_TO_ADDR
// uc_nation := 3 ;
7156: LD_ADDR_OWVAR 21
7160: PUSH
7161: LD_INT 3
7163: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
7164: LD_ADDR_VAR 0 3
7168: PUSH
7169: LD_INT 22
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 30
7183: PUSH
7184: LD_INT 32
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 58
7193: PUSH
7194: EMPTY
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: PUSH
7207: FOR_IN
7208: IFFALSE 7248
// begin PrepareSoldier ( 1 , Rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7210: LD_INT 1
7212: PPUSH
7213: LD_EXP 56
7217: PPUSH
7218: LD_EXP 57
7222: PPUSH
7223: CALL_OW 12
7227: PPUSH
7228: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
7232: CALL_OW 44
7236: PPUSH
7237: LD_VAR 0 3
7241: PPUSH
7242: CALL_OW 52
// end ;
7246: GO 7207
7248: POP
7249: POP
// end ;
7250: LD_VAR 0 2
7254: RET
// export Botnicov_Sols ; export function Prepare_Escapees ; var i , un ; begin
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
7259: PPUSH
// for i = 1 to 7 do
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_INT 7
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7364
// begin uc_side = 5 ;
7276: LD_ADDR_OWVAR 20
7280: PUSH
7281: LD_INT 5
7283: ST_TO_ADDR
// uc_nation = 3 ;
7284: LD_ADDR_OWVAR 21
7288: PUSH
7289: LD_INT 3
7291: ST_TO_ADDR
// hc_name =  ;
7292: LD_ADDR_OWVAR 26
7296: PUSH
7297: LD_STRING 
7299: ST_TO_ADDR
// hc_gallery =  ;
7300: LD_ADDR_OWVAR 33
7304: PUSH
7305: LD_STRING 
7307: ST_TO_ADDR
// PrepareHuman ( false , 1 , 8 ) ;
7308: LD_INT 0
7310: PPUSH
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 8
7316: PPUSH
7317: CALL_OW 380
// un = CreateHuman ;
7321: LD_ADDR_VAR 0 3
7325: PUSH
7326: CALL_OW 44
7330: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7331: LD_VAR 0 3
7335: PPUSH
7336: LD_INT 8
7338: PPUSH
7339: LD_INT 0
7341: PPUSH
7342: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7346: LD_ADDR_EXP 30
7350: PUSH
7351: LD_EXP 30
7355: PUSH
7356: LD_VAR 0 3
7360: ADD
7361: ST_TO_ADDR
// end ;
7362: GO 7273
7364: POP
7365: POP
// for i = 1 to 2 do
7366: LD_ADDR_VAR 0 2
7370: PUSH
7371: DOUBLE
7372: LD_INT 1
7374: DEC
7375: ST_TO_ADDR
7376: LD_INT 2
7378: PUSH
7379: FOR_TO
7380: IFFALSE 7470
// begin uc_side = 5 ;
7382: LD_ADDR_OWVAR 20
7386: PUSH
7387: LD_INT 5
7389: ST_TO_ADDR
// uc_nation = 3 ;
7390: LD_ADDR_OWVAR 21
7394: PUSH
7395: LD_INT 3
7397: ST_TO_ADDR
// hc_name =  ;
7398: LD_ADDR_OWVAR 26
7402: PUSH
7403: LD_STRING 
7405: ST_TO_ADDR
// hc_gallery =  ;
7406: LD_ADDR_OWVAR 33
7410: PUSH
7411: LD_STRING 
7413: ST_TO_ADDR
// PrepareHuman ( false , 2 , 8 ) ;
7414: LD_INT 0
7416: PPUSH
7417: LD_INT 2
7419: PPUSH
7420: LD_INT 8
7422: PPUSH
7423: CALL_OW 380
// un = CreateHuman ;
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: CALL_OW 44
7436: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7437: LD_VAR 0 3
7441: PPUSH
7442: LD_INT 8
7444: PPUSH
7445: LD_INT 0
7447: PPUSH
7448: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7452: LD_ADDR_EXP 30
7456: PUSH
7457: LD_EXP 30
7461: PUSH
7462: LD_VAR 0 3
7466: ADD
7467: ST_TO_ADDR
// end ;
7468: GO 7379
7470: POP
7471: POP
// for i = 1 to 3 do
7472: LD_ADDR_VAR 0 2
7476: PUSH
7477: DOUBLE
7478: LD_INT 1
7480: DEC
7481: ST_TO_ADDR
7482: LD_INT 3
7484: PUSH
7485: FOR_TO
7486: IFFALSE 7576
// begin uc_side = 5 ;
7488: LD_ADDR_OWVAR 20
7492: PUSH
7493: LD_INT 5
7495: ST_TO_ADDR
// uc_nation = 3 ;
7496: LD_ADDR_OWVAR 21
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
// hc_name =  ;
7504: LD_ADDR_OWVAR 26
7508: PUSH
7509: LD_STRING 
7511: ST_TO_ADDR
// hc_gallery =  ;
7512: LD_ADDR_OWVAR 33
7516: PUSH
7517: LD_STRING 
7519: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
7520: LD_INT 0
7522: PPUSH
7523: LD_INT 4
7525: PPUSH
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 380
// un = CreateHuman ;
7533: LD_ADDR_VAR 0 3
7537: PUSH
7538: CALL_OW 44
7542: ST_TO_ADDR
// PlaceUnitArea ( un , BotnicovSoldiersSpawn , false ) ;
7543: LD_VAR 0 3
7547: PPUSH
7548: LD_INT 8
7550: PPUSH
7551: LD_INT 0
7553: PPUSH
7554: CALL_OW 49
// Botnicov_Sols = Botnicov_Sols ^ un ;
7558: LD_ADDR_EXP 30
7562: PUSH
7563: LD_EXP 30
7567: PUSH
7568: LD_VAR 0 3
7572: ADD
7573: ST_TO_ADDR
// end ;
7574: GO 7485
7576: POP
7577: POP
// PlaceUnitArea ( Botnicov , BotnicovSoldiersSpawn , false ) ;
7578: LD_EXP 45
7582: PPUSH
7583: LD_INT 8
7585: PPUSH
7586: LD_INT 0
7588: PPUSH
7589: CALL_OW 49
// ComMoveXY ( Botnicov_Sols , 245 , 84 ) ;
7593: LD_EXP 30
7597: PPUSH
7598: LD_INT 245
7600: PPUSH
7601: LD_INT 84
7603: PPUSH
7604: CALL_OW 111
// ComMoveXY ( Botnicov , 245 , 84 ) ;
7608: LD_EXP 45
7612: PPUSH
7613: LD_INT 245
7615: PPUSH
7616: LD_INT 84
7618: PPUSH
7619: CALL_OW 111
// end ;
7623: LD_VAR 0 1
7627: RET
// export function Dialogue_Barnes_General ; var i ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// InGameOn ;
7632: CALL_OW 8
// CenterOnUnits ( Barnes ) ;
7636: LD_EXP 41
7640: PPUSH
7641: CALL_OW 85
// Wait ( 0 0$2 ) ;
7645: LD_INT 70
7647: PPUSH
7648: CALL_OW 67
// SayRadio ( General , D9b-Unknown-1 ) ;
7652: LD_EXP 48
7656: PPUSH
7657: LD_STRING D9b-Unknown-1
7659: PPUSH
7660: CALL_OW 94
// Say ( Barnes , D9b-Barnes-1 ) ;
7664: LD_EXP 41
7668: PPUSH
7669: LD_STRING D9b-Barnes-1
7671: PPUSH
7672: CALL_OW 88
// SayRadio ( General , D9b-Unknown-2 ) ;
7676: LD_EXP 48
7680: PPUSH
7681: LD_STRING D9b-Unknown-2
7683: PPUSH
7684: CALL_OW 94
// Say ( Barnes , D9b-Barnes-2 ) ;
7688: LD_EXP 41
7692: PPUSH
7693: LD_STRING D9b-Barnes-2
7695: PPUSH
7696: CALL_OW 88
// SayRadio ( General , D9b-Unknown-3 ) ;
7700: LD_EXP 48
7704: PPUSH
7705: LD_STRING D9b-Unknown-3
7707: PPUSH
7708: CALL_OW 94
// Say ( Barnes , D9b-Barnes-3 ) ;
7712: LD_EXP 41
7716: PPUSH
7717: LD_STRING D9b-Barnes-3
7719: PPUSH
7720: CALL_OW 88
// SayRadio ( General , D9b-Unknown-4 ) ;
7724: LD_EXP 48
7728: PPUSH
7729: LD_STRING D9b-Unknown-4
7731: PPUSH
7732: CALL_OW 94
// Say ( Barnes , D9b-Barnes-4 ) ;
7736: LD_EXP 41
7740: PPUSH
7741: LD_STRING D9b-Barnes-4
7743: PPUSH
7744: CALL_OW 88
// SayRadio ( General , D9b-Unknown-5 ) ;
7748: LD_EXP 48
7752: PPUSH
7753: LD_STRING D9b-Unknown-5
7755: PPUSH
7756: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5 ) ;
7760: LD_EXP 41
7764: PPUSH
7765: LD_STRING D9b-Barnes-5
7767: PPUSH
7768: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6 ) ;
7772: LD_EXP 48
7776: PPUSH
7777: LD_STRING D9b-Unknown-6
7779: PPUSH
7780: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5a ) ;
7784: LD_EXP 41
7788: PPUSH
7789: LD_STRING D9b-Barnes-5a
7791: PPUSH
7792: CALL_OW 88
// SayRadio ( General , D9b-Unknown-6a ) ;
7796: LD_EXP 48
7800: PPUSH
7801: LD_STRING D9b-Unknown-6a
7803: PPUSH
7804: CALL_OW 94
// Say ( Barnes , D9b-Barnes-5b ) ;
7808: LD_EXP 41
7812: PPUSH
7813: LD_STRING D9b-Barnes-5b
7815: PPUSH
7816: CALL_OW 88
// SayRadio ( General , D9b-Unknown-7 ) ;
7820: LD_EXP 48
7824: PPUSH
7825: LD_STRING D9b-Unknown-7
7827: PPUSH
7828: CALL_OW 94
// Say ( Barnes , D9b-Barnes-6 ) ;
7832: LD_EXP 41
7836: PPUSH
7837: LD_STRING D9b-Barnes-6
7839: PPUSH
7840: CALL_OW 88
// Say ( Barnes , D9b-Barnes-7 ) ;
7844: LD_EXP 41
7848: PPUSH
7849: LD_STRING D9b-Barnes-7
7851: PPUSH
7852: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 50 , 95 ) ;
7856: LD_INT 22
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 69
7870: PPUSH
7871: LD_INT 50
7873: PPUSH
7874: LD_INT 95
7876: PPUSH
7877: CALL_OW 111
// DWait ( 0 0$5 ) ;
7881: LD_INT 175
7883: PPUSH
7884: CALL_OW 68
// CenterOnXY ( 264 , 105 ) ;
7888: LD_INT 264
7890: PPUSH
7891: LD_INT 105
7893: PPUSH
7894: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
7898: LD_ADDR_VAR 0 2
7902: PUSH
7903: LD_INT 22
7905: PUSH
7906: LD_INT 1
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 21
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 69
7931: PUSH
7932: FOR_IN
7933: IFFALSE 7946
// RemoveUnit ( i ) ;
7935: LD_VAR 0 2
7939: PPUSH
7940: CALL_OW 64
7944: GO 7932
7946: POP
7947: POP
// Say ( Simone , D9b-Simone-1 ) ;
7948: LD_EXP 34
7952: PPUSH
7953: LD_STRING D9b-Simone-1
7955: PPUSH
7956: CALL_OW 88
// DWait ( 0 0$2 ) ;
7960: LD_INT 70
7962: PPUSH
7963: CALL_OW 68
// Say ( Simone , D9b-Simone-2 ) ;
7967: LD_EXP 34
7971: PPUSH
7972: LD_STRING D9b-Simone-2
7974: PPUSH
7975: CALL_OW 88
// DWait ( 0 0$2 ) ;
7979: LD_INT 70
7981: PPUSH
7982: CALL_OW 68
// Say ( Miller , D9b-Miller-1 ) ;
7986: LD_EXP 35
7990: PPUSH
7991: LD_STRING D9b-Miller-1
7993: PPUSH
7994: CALL_OW 88
// Say ( Simone , D9b-Simone-3 ) ;
7998: LD_EXP 34
8002: PPUSH
8003: LD_STRING D9b-Simone-3
8005: PPUSH
8006: CALL_OW 88
// DWait ( 0 0$1 ) ;
8010: LD_INT 35
8012: PPUSH
8013: CALL_OW 68
// InGameOff ;
8017: CALL_OW 9
// Say ( Simone , D10-Simone-1 ) ;
8021: LD_EXP 34
8025: PPUSH
8026: LD_STRING D10-Simone-1
8028: PPUSH
8029: CALL_OW 88
// Say ( Miller , D10-Miller-1 ) ;
8033: LD_EXP 35
8037: PPUSH
8038: LD_STRING D10-Miller-1
8040: PPUSH
8041: CALL_OW 88
// Say ( Miller , D10-Miller-2 ) ;
8045: LD_EXP 35
8049: PPUSH
8050: LD_STRING D10-Miller-2
8052: PPUSH
8053: CALL_OW 88
// Say ( Simone , D10-Simone-2 ) ;
8057: LD_EXP 34
8061: PPUSH
8062: LD_STRING D10-Simone-2
8064: PPUSH
8065: CALL_OW 88
// Say ( Miller , D10-Miller-3 ) ;
8069: LD_EXP 35
8073: PPUSH
8074: LD_STRING D10-Miller-3
8076: PPUSH
8077: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
8081: LD_STRING M2
8083: PPUSH
8084: CALL_OW 337
// end ;
8088: LD_VAR 0 1
8092: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
8093: LD_INT 0
8095: PPUSH
// if not unit then
8096: LD_VAR 0 1
8100: NOT
8101: IFFALSE 8105
// exit ;
8103: GO 8139
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 3
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 258
8133: ARRAY
8134: PPUSH
8135: CALL_OW 88
// end ;
8139: LD_VAR 0 4
8143: RET
// export function Prepare_RU2 ; var i , un ; begin
8144: LD_INT 0
8146: PPUSH
8147: PPUSH
8148: PPUSH
// uc_side = 6 ;
8149: LD_ADDR_OWVAR 20
8153: PUSH
8154: LD_INT 6
8156: ST_TO_ADDR
// uc_nation = 3 ;
8157: LD_ADDR_OWVAR 21
8161: PUSH
8162: LD_INT 3
8164: ST_TO_ADDR
// for i = 1 to 24 do
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_INT 24
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8280
// begin uc_side = 6 ;
8181: LD_ADDR_OWVAR 20
8185: PUSH
8186: LD_INT 6
8188: ST_TO_ADDR
// uc_nation = 3 ;
8189: LD_ADDR_OWVAR 21
8193: PUSH
8194: LD_INT 3
8196: ST_TO_ADDR
// hc_gallery =  ;
8197: LD_ADDR_OWVAR 33
8201: PUSH
8202: LD_STRING 
8204: ST_TO_ADDR
// hc_name =  ;
8205: LD_ADDR_OWVAR 26
8209: PUSH
8210: LD_STRING 
8212: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8213: LD_INT 0
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_EXP 56
8223: PPUSH
8224: LD_EXP 57
8228: PPUSH
8229: CALL_OW 12
8233: PPUSH
8234: CALL_OW 380
// un = CreateHuman ;
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: CALL_OW 44
8247: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8248: LD_VAR 0 3
8252: PPUSH
8253: LD_INT 13
8255: PPUSH
8256: LD_INT 0
8258: PPUSH
8259: CALL_OW 49
// ComAgressiveMove ( un , 88 , 81 ) ;
8263: LD_VAR 0 3
8267: PPUSH
8268: LD_INT 88
8270: PPUSH
8271: LD_INT 81
8273: PPUSH
8274: CALL_OW 114
// end ;
8278: GO 8178
8280: POP
8281: POP
// for i = 1 to 8 do
8282: LD_ADDR_VAR 0 2
8286: PUSH
8287: DOUBLE
8288: LD_INT 1
8290: DEC
8291: ST_TO_ADDR
8292: LD_INT 8
8294: PUSH
8295: FOR_TO
8296: IFFALSE 8382
// begin uc_side = 6 ;
8298: LD_ADDR_OWVAR 20
8302: PUSH
8303: LD_INT 6
8305: ST_TO_ADDR
// uc_nation = 3 ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_INT 3
8313: ST_TO_ADDR
// hc_gallery =  ;
8314: LD_ADDR_OWVAR 33
8318: PUSH
8319: LD_STRING 
8321: ST_TO_ADDR
// hc_name =  ;
8322: LD_ADDR_OWVAR 26
8326: PUSH
8327: LD_STRING 
8329: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8330: LD_INT 0
8332: PPUSH
8333: LD_INT 2
8335: PPUSH
8336: LD_EXP 56
8340: PPUSH
8341: LD_EXP 57
8345: PPUSH
8346: CALL_OW 12
8350: PPUSH
8351: CALL_OW 380
// un = CreateHuman ;
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: CALL_OW 44
8364: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8365: LD_VAR 0 3
8369: PPUSH
8370: LD_INT 13
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 49
// end ;
8380: GO 8295
8382: POP
8383: POP
// for i = 1 to 6 do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 6
8396: PUSH
8397: FOR_TO
8398: IFFALSE 8484
// begin uc_side = 6 ;
8400: LD_ADDR_OWVAR 20
8404: PUSH
8405: LD_INT 6
8407: ST_TO_ADDR
// uc_nation = 3 ;
8408: LD_ADDR_OWVAR 21
8412: PUSH
8413: LD_INT 3
8415: ST_TO_ADDR
// hc_gallery =  ;
8416: LD_ADDR_OWVAR 33
8420: PUSH
8421: LD_STRING 
8423: ST_TO_ADDR
// hc_name =  ;
8424: LD_ADDR_OWVAR 26
8428: PUSH
8429: LD_STRING 
8431: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8432: LD_INT 0
8434: PPUSH
8435: LD_INT 3
8437: PPUSH
8438: LD_EXP 56
8442: PPUSH
8443: LD_EXP 57
8447: PPUSH
8448: CALL_OW 12
8452: PPUSH
8453: CALL_OW 380
// un = CreateHuman ;
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: CALL_OW 44
8466: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8467: LD_VAR 0 3
8471: PPUSH
8472: LD_INT 13
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 49
// end ;
8482: GO 8397
8484: POP
8485: POP
// for i = 1 to 6 do
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_INT 6
8498: PUSH
8499: FOR_TO
8500: IFFALSE 8586
// begin uc_side = 6 ;
8502: LD_ADDR_OWVAR 20
8506: PUSH
8507: LD_INT 6
8509: ST_TO_ADDR
// uc_nation = 3 ;
8510: LD_ADDR_OWVAR 21
8514: PUSH
8515: LD_INT 3
8517: ST_TO_ADDR
// hc_gallery =  ;
8518: LD_ADDR_OWVAR 33
8522: PUSH
8523: LD_STRING 
8525: ST_TO_ADDR
// hc_name =  ;
8526: LD_ADDR_OWVAR 26
8530: PUSH
8531: LD_STRING 
8533: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
8534: LD_INT 0
8536: PPUSH
8537: LD_INT 4
8539: PPUSH
8540: LD_EXP 56
8544: PPUSH
8545: LD_EXP 57
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 380
// un = CreateHuman ;
8559: LD_ADDR_VAR 0 3
8563: PUSH
8564: CALL_OW 44
8568: ST_TO_ADDR
// PlaceUnitArea ( un , RU2KolvichSpawn , false ) ;
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 13
8576: PPUSH
8577: LD_INT 0
8579: PPUSH
8580: CALL_OW 49
// end ;
8584: GO 8499
8586: POP
8587: POP
// mc_bases := Replace ( mc_bases , 2 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
8588: LD_ADDR_EXP 67
8592: PUSH
8593: LD_EXP 67
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 6
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 21
8613: PUSH
8614: LD_INT 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PPUSH
8625: CALL_OW 69
8629: PPUSH
8630: CALL_OW 1
8634: ST_TO_ADDR
// MC_Start ;
8635: CALL 61526 0 0
// end ; end_of_file
8639: LD_VAR 0 1
8643: RET
// on UnitDestroyed ( un ) do begin if un = Simone then
8644: LD_VAR 0 1
8648: PUSH
8649: LD_EXP 34
8653: EQUAL
8654: IFFALSE 8682
// begin ExclusiveOn ;
8656: CALL_OW 4
// Wait ( 0 0$2 ) ;
8660: LD_INT 70
8662: PPUSH
8663: CALL_OW 67
// YouLost ( Simone ) ;
8667: LD_STRING Simone
8669: PPUSH
8670: CALL_OW 104
// ExclusiveOff ;
8674: CALL_OW 5
// exit ;
8678: GO 8882
// end else
8680: GO 8873
// if un = Miller then
8682: LD_VAR 0 1
8686: PUSH
8687: LD_EXP 35
8691: EQUAL
8692: IFFALSE 8720
// begin ExclusiveOn ;
8694: CALL_OW 4
// Wait ( 0 0$2 ) ;
8698: LD_INT 70
8700: PPUSH
8701: CALL_OW 67
// YouLost ( Miller ) ;
8705: LD_STRING Miller
8707: PPUSH
8708: CALL_OW 104
// ExclusiveOff ;
8712: CALL_OW 5
// exit ;
8716: GO 8882
// end else
8718: GO 8873
// if un = Esther then
8720: LD_VAR 0 1
8724: PUSH
8725: LD_EXP 36
8729: EQUAL
8730: IFFALSE 8758
// begin ExclusiveOn ;
8732: CALL_OW 4
// Wait ( 0 0$2 ) ;
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 67
// YouLost ( Esther ) ;
8743: LD_STRING Esther
8745: PPUSH
8746: CALL_OW 104
// ExclusiveOff ;
8750: CALL_OW 5
// exit ;
8754: GO 8882
// end else
8756: GO 8873
// if un = Bradford and not BradfordAssault then
8758: LD_VAR 0 1
8762: PUSH
8763: LD_EXP 40
8767: EQUAL
8768: PUSH
8769: LD_EXP 2
8773: NOT
8774: AND
8775: IFFALSE 8803
// begin ExclusiveOn ;
8777: CALL_OW 4
// Wait ( 0 0$2 ) ;
8781: LD_INT 70
8783: PPUSH
8784: CALL_OW 67
// YouLost ( Bradford ) ;
8788: LD_STRING Bradford
8790: PPUSH
8791: CALL_OW 104
// ExclusiveOff ;
8795: CALL_OW 5
// exit ;
8799: GO 8882
// end else
8801: GO 8873
// if un = Barnes then
8803: LD_VAR 0 1
8807: PUSH
8808: LD_EXP 41
8812: EQUAL
8813: IFFALSE 8841
// begin ExclusiveOn ;
8815: CALL_OW 4
// Wait ( 0 0$2 ) ;
8819: LD_INT 70
8821: PPUSH
8822: CALL_OW 67
// YouLost ( Barnes ) ;
8826: LD_STRING Barnes
8828: PPUSH
8829: CALL_OW 104
// ExclusiveOff ;
8833: CALL_OW 5
// exit ;
8837: GO 8882
// end else
8839: GO 8873
// if un = RU_Courier then
8841: LD_VAR 0 1
8845: PUSH
8846: LD_EXP 13
8850: EQUAL
8851: IFFALSE 8873
// begin RU_Courier_Dead := true ;
8853: LD_ADDR_EXP 17
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// Say ( Miller , D8b-Miller-1 ) ;
8861: LD_EXP 35
8865: PPUSH
8866: LD_STRING D8b-Miller-1
8868: PPUSH
8869: CALL_OW 88
// end ; MCE_UnitDestroyed ( un ) ;
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL 79452 0 1
// end ;
8882: PPOPN 1
8884: END
// on UnitGoesToRed ( un ) do begin if un = Bradford then
8885: LD_VAR 0 1
8889: PUSH
8890: LD_EXP 40
8894: EQUAL
8895: IFFALSE 8921
// begin DoNotAttack ( 3 , Bradford ) ;
8897: LD_INT 3
8899: PPUSH
8900: LD_EXP 40
8904: PPUSH
8905: CALL_OW 471
// ForceSay ( Bradford , D5a-Bradford-3 ) ;
8909: LD_EXP 40
8913: PPUSH
8914: LD_STRING D5a-Bradford-3
8916: PPUSH
8917: CALL_OW 91
// end ; if un = Richford then
8921: LD_VAR 0 1
8925: PUSH
8926: LD_EXP 47
8930: EQUAL
8931: IFFALSE 8957
// begin DoNotAttack ( 3 , Richford ) ;
8933: LD_INT 3
8935: PPUSH
8936: LD_EXP 47
8940: PPUSH
8941: CALL_OW 471
// ForceSay ( Richford , D5a-Richford-2 ) ;
8945: LD_EXP 47
8949: PPUSH
8950: LD_STRING D5a-Richford-2
8952: PPUSH
8953: CALL_OW 91
// end ; if un = CourierVeh then
8957: LD_VAR 0 1
8961: PUSH
8962: LD_EXP 12
8966: EQUAL
8967: IFFALSE 8984
// begin ComMoveXY ( RU_Courier , 123 , 3 ) ;
8969: LD_EXP 13
8973: PPUSH
8974: LD_INT 123
8976: PPUSH
8977: LD_INT 3
8979: PPUSH
8980: CALL_OW 111
// end ; if un = Sidorovich then
8984: LD_VAR 0 1
8988: PUSH
8989: LD_EXP 42
8993: EQUAL
8994: IFFALSE 9020
// begin ForceSay ( Sidorovich , D9a-Sidor-1 ) ;
8996: LD_EXP 42
9000: PPUSH
9001: LD_STRING D9a-Sidor-1
9003: PPUSH
9004: CALL_OW 91
// Say ( Simone , D9a-Simone-1 ) ;
9008: LD_EXP 34
9012: PPUSH
9013: LD_STRING D9a-Simone-1
9015: PPUSH
9016: CALL_OW 88
// end ; if un = Dvalishvili then
9020: LD_VAR 0 1
9024: PUSH
9025: LD_EXP 44
9029: EQUAL
9030: IFFALSE 9052
// begin DialogueOn ;
9032: CALL_OW 6
// Say ( Dvalishvili , D11a-Dvali-1 ) ;
9036: LD_EXP 44
9040: PPUSH
9041: LD_STRING D11a-Dvali-1
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// end ; if un = ustinov1 then
9052: LD_VAR 0 1
9056: PUSH
9057: LD_INT 2
9059: EQUAL
9060: IFFALSE 9094
// begin SetSide ( ustinov1 , 7 ) ;
9062: LD_INT 2
9064: PPUSH
9065: LD_INT 7
9067: PPUSH
9068: CALL_OW 235
// SetLives ( ustinov1 , 400 ) ;
9072: LD_INT 2
9074: PPUSH
9075: LD_INT 400
9077: PPUSH
9078: CALL_OW 234
// Say ( Sidorovich , D9-Sidor-1 ) ;
9082: LD_EXP 42
9086: PPUSH
9087: LD_STRING D9-Sidor-1
9089: PPUSH
9090: CALL_OW 88
// end ; if un = ustinov2 then
9094: LD_VAR 0 1
9098: PUSH
9099: LD_INT 3
9101: EQUAL
9102: IFFALSE 9124
// begin SetSide ( ustinov2 , 7 ) ;
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 7
9109: PPUSH
9110: CALL_OW 235
// SetLives ( ustinov2 , 400 ) ;
9114: LD_INT 3
9116: PPUSH
9117: LD_INT 400
9119: PPUSH
9120: CALL_OW 234
// end ; end ;
9124: PPOPN 1
9126: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 7 and s2 = 5 ) or ( s2 = 5 and s1 = 7 ) then
9127: LD_VAR 0 1
9131: PUSH
9132: LD_INT 7
9134: EQUAL
9135: PUSH
9136: LD_VAR 0 2
9140: PUSH
9141: LD_INT 5
9143: EQUAL
9144: AND
9145: PUSH
9146: LD_VAR 0 2
9150: PUSH
9151: LD_INT 5
9153: EQUAL
9154: PUSH
9155: LD_VAR 0 1
9159: PUSH
9160: LD_INT 7
9162: EQUAL
9163: AND
9164: OR
9165: IFFALSE 9241
// begin Say ( Botnicov , 9a-Botnicov-1a ) ;
9167: LD_EXP 45
9171: PPUSH
9172: LD_STRING 9a-Botnicov-1a
9174: PPUSH
9175: CALL_OW 88
// SetAttitude ( 5 , 7 , att_enemy , true ) ;
9179: LD_INT 5
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: LD_INT 2
9187: PPUSH
9188: LD_INT 1
9190: PPUSH
9191: CALL_OW 80
// BotnicovSpared := false ;
9195: LD_ADDR_EXP 20
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// BotnicovAntagonized := true ;
9203: LD_ADDR_EXP 21
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// ComAgressiveMove ( Botnicov_Sols , 257 , 108 ) ;
9211: LD_EXP 30
9215: PPUSH
9216: LD_INT 257
9218: PPUSH
9219: LD_INT 108
9221: PPUSH
9222: CALL_OW 114
// ComAgressiveMove ( Botnicov , 257 , 108 ) ;
9226: LD_EXP 45
9230: PPUSH
9231: LD_INT 257
9233: PPUSH
9234: LD_INT 108
9236: PPUSH
9237: CALL_OW 114
// end ; if ( s1 = 7 and s2 = 1 ) or ( s2 = 1 and s1 = 7 ) then
9241: LD_VAR 0 1
9245: PUSH
9246: LD_INT 7
9248: EQUAL
9249: PUSH
9250: LD_VAR 0 2
9254: PUSH
9255: LD_INT 1
9257: EQUAL
9258: AND
9259: PUSH
9260: LD_VAR 0 2
9264: PUSH
9265: LD_INT 1
9267: EQUAL
9268: PUSH
9269: LD_VAR 0 1
9273: PUSH
9274: LD_INT 7
9276: EQUAL
9277: AND
9278: OR
9279: IFFALSE 9318
// begin if IsOK ( Bradford ) then
9281: LD_EXP 40
9285: PPUSH
9286: CALL_OW 302
9290: IFFALSE 9306
// Say ( Bradford , DFriendlyFire-Bradford-1 ) else
9292: LD_EXP 40
9296: PPUSH
9297: LD_STRING DFriendlyFire-Bradford-1
9299: PPUSH
9300: CALL_OW 88
9304: GO 9318
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
9306: LD_EXP 41
9310: PPUSH
9311: LD_STRING DFriendlyFire-Barnes-1
9313: PPUSH
9314: CALL_OW 88
// end ; end ;
9318: PPOPN 2
9320: END
// export AMLab , AMFactoryExt ; on BuildingComplete ( building ) do var AM_Breastworks ;
9321: LD_INT 0
9323: PPUSH
// begin if GetSide ( building ) = 7 and GetBType ( building ) = b_depot and not Base_DepotBuilt then
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 255
9333: PUSH
9334: LD_INT 7
9336: EQUAL
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 266
9347: PUSH
9348: LD_INT 0
9350: EQUAL
9351: AND
9352: PUSH
9353: LD_EXP 7
9357: NOT
9358: AND
9359: IFFALSE 9369
// Base_DepotBuilt := true ;
9361: LD_ADDR_EXP 7
9365: PUSH
9366: LD_INT 1
9368: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_workshop and not Base_WorkshopBuilt then
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 255
9378: PUSH
9379: LD_INT 7
9381: EQUAL
9382: PUSH
9383: LD_VAR 0 1
9387: PPUSH
9388: CALL_OW 266
9392: PUSH
9393: LD_INT 2
9395: EQUAL
9396: AND
9397: PUSH
9398: LD_EXP 8
9402: NOT
9403: AND
9404: IFFALSE 9414
// Base_WorkshopBuilt := true ;
9406: LD_ADDR_EXP 8
9410: PUSH
9411: LD_INT 1
9413: ST_TO_ADDR
// if GetSide ( building ) = 7 and GetBType ( building ) = b_lab and not Base_LabBuilt then
9414: LD_VAR 0 1
9418: PPUSH
9419: CALL_OW 255
9423: PUSH
9424: LD_INT 7
9426: EQUAL
9427: PUSH
9428: LD_VAR 0 1
9432: PPUSH
9433: CALL_OW 266
9437: PUSH
9438: LD_INT 6
9440: EQUAL
9441: AND
9442: PUSH
9443: LD_EXP 9
9447: NOT
9448: AND
9449: IFFALSE 9459
// Base_LabBuilt := true ;
9451: LD_ADDR_EXP 9
9455: PUSH
9456: LD_INT 1
9458: ST_TO_ADDR
// if GetBType ( building ) = b_lab and GetSide ( building ) = 1 then
9459: LD_VAR 0 1
9463: PPUSH
9464: CALL_OW 266
9468: PUSH
9469: LD_INT 6
9471: EQUAL
9472: PUSH
9473: LD_VAR 0 1
9477: PPUSH
9478: CALL_OW 255
9482: PUSH
9483: LD_INT 1
9485: EQUAL
9486: AND
9487: IFFALSE 9719
// begin AMLab := building ;
9489: LD_ADDR_EXP 31
9493: PUSH
9494: LD_VAR 0 1
9498: ST_TO_ADDR
// ComMoveXY ( AM_Scientists [ 1 ] , 65 , 71 ) ;
9499: LD_EXP 29
9503: PUSH
9504: LD_INT 1
9506: ARRAY
9507: PPUSH
9508: LD_INT 65
9510: PPUSH
9511: LD_INT 71
9513: PPUSH
9514: CALL_OW 111
// ComMoveXY ( AM_Scientists [ 2 ] , 103 , 95 ) ;
9518: LD_EXP 29
9522: PUSH
9523: LD_INT 2
9525: ARRAY
9526: PPUSH
9527: LD_INT 103
9529: PPUSH
9530: LD_INT 95
9532: PPUSH
9533: CALL_OW 111
// AddComEnterUnit ( AM_Scientists , building ) ;
9537: LD_EXP 29
9541: PPUSH
9542: LD_VAR 0 1
9546: PPUSH
9547: CALL_OW 180
// ComResearch ( building , tech_Tech1 ) ;
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_INT 48
9558: PPUSH
9559: CALL_OW 124
// AddComResearch ( building , tech_Tech2 ) ;
9563: LD_VAR 0 1
9567: PPUSH
9568: LD_INT 49
9570: PPUSH
9571: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_weapon ) ;
9575: LD_VAR 0 1
9579: PPUSH
9580: LD_INT 10
9582: PPUSH
9583: CALL_OW 207
// AddComResearch ( building , tech_AdvMet ) ;
9587: LD_VAR 0 1
9591: PPUSH
9592: LD_INT 34
9594: PPUSH
9595: CALL_OW 184
// AddComResearch ( building , tech_Rocket ) ;
9599: LD_VAR 0 1
9603: PPUSH
9604: LD_INT 40
9606: PPUSH
9607: CALL_OW 184
// AddComResearch ( building , tech_Weap1 ) ;
9611: LD_VAR 0 1
9615: PPUSH
9616: LD_INT 51
9618: PPUSH
9619: CALL_OW 184
// AddComUpgradeLab ( building , b_lab_computer ) ;
9623: LD_VAR 0 1
9627: PPUSH
9628: LD_INT 12
9630: PPUSH
9631: CALL_OW 207
// AddComResearch ( building , tech_AdvAI ) ;
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_INT 27
9642: PPUSH
9643: CALL_OW 184
// AddComResearch ( building , tech_Comp1 ) ;
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 57
9654: PPUSH
9655: CALL_OW 184
// AddComResearch ( building , tech_Weap2 ) ;
9659: LD_VAR 0 1
9663: PPUSH
9664: LD_INT 52
9666: PPUSH
9667: CALL_OW 184
// AddComResearch ( building , tech_Comp2 ) ;
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_INT 58
9678: PPUSH
9679: CALL_OW 184
// AddComResearch ( building , tech_Tech3 ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_INT 50
9690: PPUSH
9691: CALL_OW 184
// AddComResearch ( building , tech_Weap3 ) ;
9695: LD_VAR 0 1
9699: PPUSH
9700: LD_INT 53
9702: PPUSH
9703: CALL_OW 184
// AddComResearch ( building , tech_Comp3 ) ;
9707: LD_VAR 0 1
9711: PPUSH
9712: LD_INT 59
9714: PPUSH
9715: CALL_OW 184
// end ; if GetBType ( building ) = b_workshop and GetSide ( building ) = 1 then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 266
9728: PUSH
9729: LD_INT 2
9731: EQUAL
9732: PUSH
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 255
9742: PUSH
9743: LD_INT 1
9745: EQUAL
9746: AND
9747: IFFALSE 9800
// begin AM_Factory := building ;
9749: LD_ADDR_EXP 65
9753: PUSH
9754: LD_VAR 0 1
9758: ST_TO_ADDR
// AddComEnterUnit ( AM_Mechs , building ) ;
9759: LD_EXP 28
9763: PPUSH
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 180
// Wait ( 0 0$20 ) ;
9773: LD_INT 700
9775: PPUSH
9776: CALL_OW 67
// ComUpgrade ( building ) ;
9780: LD_VAR 0 1
9784: PPUSH
9785: CALL_OW 146
// Wait ( 5 5$00 ) ;
9789: LD_INT 10500
9791: PPUSH
9792: CALL_OW 67
// Construct_Vehicles ;
9796: CALL 16199 0 0
// end ; if GetBType ( building ) = b_armoury and GetSide ( building ) = 1 then
9800: LD_VAR 0 1
9804: PPUSH
9805: CALL_OW 266
9809: PUSH
9810: LD_INT 4
9812: EQUAL
9813: PUSH
9814: LD_VAR 0 1
9818: PPUSH
9819: CALL_OW 255
9823: PUSH
9824: LD_INT 1
9826: EQUAL
9827: AND
9828: IFFALSE 9901
// begin ComEnterUnit ( [ AM_Sols [ 1 ] , AM_Sols [ 2 ] , AM_Sols [ 3 ] , AM_Sols [ 4 ] , AM_Sols [ 5 ] , AM_Sols [ 6 ] ] , building ) ;
9830: LD_EXP 26
9834: PUSH
9835: LD_INT 1
9837: ARRAY
9838: PUSH
9839: LD_EXP 26
9843: PUSH
9844: LD_INT 2
9846: ARRAY
9847: PUSH
9848: LD_EXP 26
9852: PUSH
9853: LD_INT 3
9855: ARRAY
9856: PUSH
9857: LD_EXP 26
9861: PUSH
9862: LD_INT 4
9864: ARRAY
9865: PUSH
9866: LD_EXP 26
9870: PUSH
9871: LD_INT 5
9873: ARRAY
9874: PUSH
9875: LD_EXP 26
9879: PUSH
9880: LD_INT 6
9882: ARRAY
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PPUSH
9892: LD_VAR 0 1
9896: PPUSH
9897: CALL_OW 120
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 1 then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 266
9910: PUSH
9911: LD_INT 31
9913: EQUAL
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 255
9924: PUSH
9925: LD_INT 1
9927: EQUAL
9928: AND
9929: IFFALSE 10009
// begin AM_Breastworks = AM_Breastworks + 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_VAR 0 2
9940: PUSH
9941: LD_INT 1
9943: PLUS
9944: ST_TO_ADDR
// case AM_Breastworks of 3 :
9945: LD_VAR 0 2
9949: PUSH
9950: LD_INT 3
9952: DOUBLE
9953: EQUAL
9954: IFTRUE 9958
9956: GO 9979
9958: POP
// ComEnterUnit ( AM_Sols [ 7 ] , building ) ; 4 :
9959: LD_EXP 26
9963: PUSH
9964: LD_INT 7
9966: ARRAY
9967: PPUSH
9968: LD_VAR 0 1
9972: PPUSH
9973: CALL_OW 120
9977: GO 10009
9979: LD_INT 4
9981: DOUBLE
9982: EQUAL
9983: IFTRUE 9987
9985: GO 10008
9987: POP
// ComEnterUnit ( AM_Sols [ 8 ] , building ) ; end ;
9988: LD_EXP 26
9992: PUSH
9993: LD_INT 8
9995: ARRAY
9996: PPUSH
9997: LD_VAR 0 1
10001: PPUSH
10002: CALL_OW 120
10006: GO 10009
10008: POP
// end ; if ( GetBType ( building ) = b_ext_computer or GetBType ( building ) = b_ext_gun or GetBType ( building ) = b_ext_laser or GetBType ( building ) = b_ext_track or GetBType ( building ) = b_ext_rocket ) and GetSide ( building ) = 1 then
10009: LD_VAR 0 1
10013: PPUSH
10014: CALL_OW 266
10018: PUSH
10019: LD_INT 24
10021: EQUAL
10022: PUSH
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 266
10032: PUSH
10033: LD_INT 17
10035: EQUAL
10036: OR
10037: PUSH
10038: LD_VAR 0 1
10042: PPUSH
10043: CALL_OW 266
10047: PUSH
10048: LD_INT 25
10050: EQUAL
10051: OR
10052: PUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 266
10062: PUSH
10063: LD_INT 16
10065: EQUAL
10066: OR
10067: PUSH
10068: LD_VAR 0 1
10072: PPUSH
10073: CALL_OW 266
10077: PUSH
10078: LD_INT 18
10080: EQUAL
10081: OR
10082: PUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 255
10092: PUSH
10093: LD_INT 1
10095: EQUAL
10096: AND
10097: IFFALSE 10115
// begin AMFactoryExt = AMFactoryExt ^ building ;
10099: LD_ADDR_EXP 32
10103: PUSH
10104: LD_EXP 32
10108: PUSH
10109: LD_VAR 0 1
10113: ADD
10114: ST_TO_ADDR
// end ; MCE_BuildingComplete ( building ) ;
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL 80635 0 1
// end ;
10124: PPOPN 2
10126: END
// export AMVehiclesBuilt ; on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 1 then
10127: LD_VAR 0 1
10131: PPUSH
10132: CALL_OW 255
10136: PUSH
10137: LD_INT 1
10139: EQUAL
10140: IFFALSE 10292
// begin AMVehiclesBuilt := AMVehiclesBuilt + 1 ;
10142: LD_ADDR_EXP 33
10146: PUSH
10147: LD_EXP 33
10151: PUSH
10152: LD_INT 1
10154: PLUS
10155: ST_TO_ADDR
// case AMVehiclesBuilt mod 3 of 0 :
10156: LD_EXP 33
10160: PUSH
10161: LD_INT 3
10163: MOD
10164: PUSH
10165: LD_INT 0
10167: DOUBLE
10168: EQUAL
10169: IFTRUE 10173
10171: GO 10207
10173: POP
// begin AM_SquadOne := AM_SquadOne ^ vehicle ;
10174: LD_ADDR_EXP 62
10178: PUSH
10179: LD_EXP 62
10183: PUSH
10184: LD_VAR 0 1
10188: ADD
10189: ST_TO_ADDR
// ComMoveXY ( vehicle , 94 , 68 ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_INT 94
10197: PPUSH
10198: LD_INT 68
10200: PPUSH
10201: CALL_OW 111
// end ; 1 :
10205: GO 10292
10207: LD_INT 1
10209: DOUBLE
10210: EQUAL
10211: IFTRUE 10215
10213: GO 10249
10215: POP
// begin AM_SquadTwo := AM_SquadTwo ^ vehicle ;
10216: LD_ADDR_EXP 63
10220: PUSH
10221: LD_EXP 63
10225: PUSH
10226: LD_VAR 0 1
10230: ADD
10231: ST_TO_ADDR
// ComMoveXY ( vehicle , 110 , 79 ) ;
10232: LD_VAR 0 1
10236: PPUSH
10237: LD_INT 110
10239: PPUSH
10240: LD_INT 79
10242: PPUSH
10243: CALL_OW 111
// end ; 2 :
10247: GO 10292
10249: LD_INT 2
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10257
10255: GO 10291
10257: POP
// begin AM_SquadThree := AM_SquadThree ^ vehicle ;
10258: LD_ADDR_EXP 64
10262: PUSH
10263: LD_EXP 64
10267: PUSH
10268: LD_VAR 0 1
10272: ADD
10273: ST_TO_ADDR
// ComMoveXY ( vehicle , 120 , 101 ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_INT 120
10281: PPUSH
10282: LD_INT 101
10284: PPUSH
10285: CALL_OW 111
// end ; end ;
10289: GO 10292
10291: POP
// end ; MCE_VehicleConstructed ( vehicle , factory ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: CALL 78479 0 2
// end ;
10306: PPOPN 2
10308: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10309: LD_VAR 0 1
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL 81319 0 2
// end ;
10323: PPOPN 2
10325: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: CALL 80401 0 1
// end ;
10335: PPOPN 1
10337: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
10338: LD_VAR 0 1
10342: PPUSH
10343: LD_VAR 0 2
10347: PPUSH
10348: CALL 79164 0 2
// end ;
10352: PPOPN 2
10354: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10355: LD_VAR 0 1
10359: PPUSH
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_VAR 0 4
10374: PPUSH
10375: LD_VAR 0 5
10379: PPUSH
10380: CALL 78791 0 5
// end ;
10384: PPOPN 5
10386: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10387: LD_VAR 0 1
10391: PPUSH
10392: LD_VAR 0 2
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_VAR 0 4
10406: PPUSH
10407: CALL 78324 0 4
// end ;
10411: PPOPN 4
10413: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10414: LD_VAR 0 1
10418: PPUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: CALL 78106 0 3
// end ;
10433: PPOPN 3
10435: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10436: LD_VAR 0 1
10440: PPUSH
10441: LD_VAR 0 2
10445: PPUSH
10446: CALL 77998 0 2
// end ;
10450: PPOPN 2
10452: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10453: LD_VAR 0 1
10457: PPUSH
10458: LD_VAR 0 2
10462: PPUSH
10463: CALL 81573 0 2
// end ;
10467: PPOPN 2
10469: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_VAR 0 4
10489: PPUSH
10490: CALL 81782 0 4
// end ;
10494: PPOPN 4
10496: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10497: LD_VAR 0 1
10501: PPUSH
10502: LD_VAR 0 2
10506: PPUSH
10507: CALL 77814 0 2
// end ; end_of_file
10511: PPOPN 2
10513: END
// export Simone , Miller , Esther , Edmonds , Pravar , AMSurvivors ; export Bradford , Barnes , Sidorovich , Kolvich , Dvalishvili , Botnicov , Mortimer , Richford , General , Randall ; export AvengerSquad , AvengerReserve , AvengerReserveCount ; export KolvichSquad ; export function CreatePersonas ; var i , un ; begin
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
10518: PPUSH
// uc_side := 7 ;
10519: LD_ADDR_OWVAR 20
10523: PUSH
10524: LD_INT 7
10526: ST_TO_ADDR
// Simone = CreateCharacter ( Simone ) ;
10527: LD_ADDR_EXP 34
10531: PUSH
10532: LD_STRING Simone
10534: PPUSH
10535: CALL_OW 34
10539: ST_TO_ADDR
// Miller = CreateCharacter ( Miller ) ;
10540: LD_ADDR_EXP 35
10544: PUSH
10545: LD_STRING Miller
10547: PPUSH
10548: CALL_OW 34
10552: ST_TO_ADDR
// Pravar = CreateCharacter ( Pravar ) ;
10553: LD_ADDR_EXP 38
10557: PUSH
10558: LD_STRING Pravar
10560: PPUSH
10561: CALL_OW 34
10565: ST_TO_ADDR
// AMSurvivors = CreateCharacterSet ( AM04_Survivors ) ;
10566: LD_ADDR_EXP 39
10570: PUSH
10571: LD_STRING AM04_Survivors
10573: PPUSH
10574: CALL_OW 31
10578: ST_TO_ADDR
// AvengerSquad := Simone ^ Miller ^ Pravar ^ AMSurvivors ;
10579: LD_ADDR_EXP 50
10583: PUSH
10584: LD_EXP 34
10588: PUSH
10589: LD_EXP 35
10593: ADD
10594: PUSH
10595: LD_EXP 38
10599: ADD
10600: PUSH
10601: LD_EXP 39
10605: ADD
10606: ST_TO_ADDR
// hc_name :=  ;
10607: LD_ADDR_OWVAR 26
10611: PUSH
10612: LD_STRING 
10614: ST_TO_ADDR
// hc_gallery :=  ;
10615: LD_ADDR_OWVAR 33
10619: PUSH
10620: LD_STRING 
10622: ST_TO_ADDR
// AvengerReserveCount := 16 - AvengerSquad ;
10623: LD_ADDR_EXP 52
10627: PUSH
10628: LD_INT 16
10630: PUSH
10631: LD_EXP 50
10635: MINUS
10636: ST_TO_ADDR
// for i = 1 to AvengerReserveCount do
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: DOUBLE
10643: LD_INT 1
10645: DEC
10646: ST_TO_ADDR
10647: LD_EXP 52
10651: PUSH
10652: FOR_TO
10653: IFFALSE 10841
// begin case Rand ( 1 , 10 ) of 1 .. 3 :
10655: LD_INT 1
10657: PPUSH
10658: LD_INT 10
10660: PPUSH
10661: CALL_OW 12
10665: PUSH
10666: LD_INT 1
10668: DOUBLE
10669: GREATEREQUAL
10670: IFFALSE 10678
10672: LD_INT 3
10674: DOUBLE
10675: LESSEQUAL
10676: IFTRUE 10680
10678: GO 10709
10680: POP
// begin PrepareSoldier ( 1 , 8 ) ;
10681: LD_INT 1
10683: PPUSH
10684: LD_INT 8
10686: PPUSH
10687: CALL_OW 381
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10691: LD_ADDR_EXP 51
10695: PUSH
10696: LD_EXP 51
10700: PUSH
10701: CALL_OW 44
10705: ADD
10706: ST_TO_ADDR
// end ; 4 .. 6 :
10707: GO 10839
10709: LD_INT 4
10711: DOUBLE
10712: GREATEREQUAL
10713: IFFALSE 10721
10715: LD_INT 6
10717: DOUBLE
10718: LESSEQUAL
10719: IFTRUE 10723
10721: GO 10752
10723: POP
// begin PrepareMechanic ( 1 , 8 ) ;
10724: LD_INT 1
10726: PPUSH
10727: LD_INT 8
10729: PPUSH
10730: CALL_OW 383
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10734: LD_ADDR_EXP 51
10738: PUSH
10739: LD_EXP 51
10743: PUSH
10744: CALL_OW 44
10748: ADD
10749: ST_TO_ADDR
// end ; 7 .. 8 :
10750: GO 10839
10752: LD_INT 7
10754: DOUBLE
10755: GREATEREQUAL
10756: IFFALSE 10764
10758: LD_INT 8
10760: DOUBLE
10761: LESSEQUAL
10762: IFTRUE 10766
10764: GO 10795
10766: POP
// begin PrepareScientist ( 1 , 8 ) ;
10767: LD_INT 1
10769: PPUSH
10770: LD_INT 8
10772: PPUSH
10773: CALL_OW 384
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10777: LD_ADDR_EXP 51
10781: PUSH
10782: LD_EXP 51
10786: PUSH
10787: CALL_OW 44
10791: ADD
10792: ST_TO_ADDR
// end ; 9 .. 10 :
10793: GO 10839
10795: LD_INT 9
10797: DOUBLE
10798: GREATEREQUAL
10799: IFFALSE 10807
10801: LD_INT 10
10803: DOUBLE
10804: LESSEQUAL
10805: IFTRUE 10809
10807: GO 10838
10809: POP
// begin PrepareEngineer ( 1 , 8 ) ;
10810: LD_INT 1
10812: PPUSH
10813: LD_INT 8
10815: PPUSH
10816: CALL_OW 382
// AvengerReserve := AvengerReserve ^ CreateHuman ;
10820: LD_ADDR_EXP 51
10824: PUSH
10825: LD_EXP 51
10829: PUSH
10830: CALL_OW 44
10834: ADD
10835: ST_TO_ADDR
// end ; end ;
10836: GO 10839
10838: POP
// end ;
10839: GO 10652
10841: POP
10842: POP
// for i in AvengerReserve do
10843: LD_ADDR_VAR 0 2
10847: PUSH
10848: LD_EXP 51
10852: PUSH
10853: FOR_IN
10854: IFFALSE 10885
// begin PlaceUnitXYR ( AvengerReserve [ i ] , 87 , 94 , 7 , false ) ;
10856: LD_EXP 51
10860: PUSH
10861: LD_VAR 0 2
10865: ARRAY
10866: PPUSH
10867: LD_INT 87
10869: PPUSH
10870: LD_INT 94
10872: PPUSH
10873: LD_INT 7
10875: PPUSH
10876: LD_INT 0
10878: PPUSH
10879: CALL_OW 50
// end ;
10883: GO 10853
10885: POP
10886: POP
// uc_side := 8 ;
10887: LD_ADDR_OWVAR 20
10891: PUSH
10892: LD_INT 8
10894: ST_TO_ADDR
// hc_class = class_soldier ;
10895: LD_ADDR_OWVAR 28
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// uc_nation := nation_arabian ;
10903: LD_ADDR_OWVAR 21
10907: PUSH
10908: LD_INT 2
10910: ST_TO_ADDR
// hc_sex = sex_male ;
10911: LD_ADDR_OWVAR 27
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// hc_importance = 40 ;
10919: LD_ADDR_OWVAR 32
10923: PUSH
10924: LD_INT 40
10926: ST_TO_ADDR
// hc_skills = [ 9 , 4 , 8 , 3 ] ;
10927: LD_ADDR_OWVAR 31
10931: PUSH
10932: LD_INT 9
10934: PUSH
10935: LD_INT 4
10937: PUSH
10938: LD_INT 8
10940: PUSH
10941: LD_INT 3
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: ST_TO_ADDR
// hc_attr = [ 15 , 10 ] ;
10950: LD_ADDR_OWVAR 29
10954: PUSH
10955: LD_INT 15
10957: PUSH
10958: LD_INT 10
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: ST_TO_ADDR
// hc_name := Giorgi Dvalishvili ;
10965: LD_ADDR_OWVAR 26
10969: PUSH
10970: LD_STRING Giorgi Dvalishvili
10972: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Dvalishvili ;
10973: LD_ADDR_OWVAR 33
10977: PUSH
10978: LD_STRING ZieloneLaserki_Dvalishvili
10980: ST_TO_ADDR
// hc_face_number := 1 ;
10981: LD_ADDR_OWVAR 34
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// Dvalishvili := CreateHuman ;
10989: LD_ADDR_EXP 44
10993: PUSH
10994: CALL_OW 44
10998: ST_TO_ADDR
// uc_side := 1 ;
10999: LD_ADDR_OWVAR 20
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// Esther = CreateCharacter ( Esther ) ;
11007: LD_ADDR_EXP 36
11011: PUSH
11012: LD_STRING Esther
11014: PPUSH
11015: CALL_OW 34
11019: ST_TO_ADDR
// Edmonds = CreateCharacter ( Edmonds ) ;
11020: LD_ADDR_EXP 37
11024: PUSH
11025: LD_STRING Edmonds
11027: PPUSH
11028: CALL_OW 34
11032: ST_TO_ADDR
// hc_class = class_soldier ;
11033: LD_ADDR_OWVAR 28
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// uc_nation := nation_american ;
11041: LD_ADDR_OWVAR 21
11045: PUSH
11046: LD_INT 1
11048: ST_TO_ADDR
// hc_importance = 70 ;
11049: LD_ADDR_OWVAR 32
11053: PUSH
11054: LD_INT 70
11056: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11057: LD_INT 1
11059: PPUSH
11060: LD_INT 9
11062: PPUSH
11063: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
11067: LD_ADDR_OWVAR 29
11071: PUSH
11072: LD_INT 10
11074: PUSH
11075: LD_INT 10
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: ST_TO_ADDR
// hc_name := Bradford ;
11082: LD_ADDR_OWVAR 26
11086: PUSH
11087: LD_STRING Bradford
11089: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11090: LD_ADDR_OWVAR 33
11094: PUSH
11095: LD_STRING ZieloneLaserki_AddtFaces2
11097: ST_TO_ADDR
// hc_face_number := 3 ;
11098: LD_ADDR_OWVAR 34
11102: PUSH
11103: LD_INT 3
11105: ST_TO_ADDR
// Bradford := CreateHuman ;
11106: LD_ADDR_EXP 40
11110: PUSH
11111: CALL_OW 44
11115: ST_TO_ADDR
// uc_nation := nation_american ;
11116: LD_ADDR_OWVAR 21
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// hc_importance = 70 ;
11124: LD_ADDR_OWVAR 32
11128: PUSH
11129: LD_INT 70
11131: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
11132: LD_INT 1
11134: PPUSH
11135: LD_INT 8
11137: PPUSH
11138: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11142: LD_ADDR_OWVAR 29
11146: PUSH
11147: LD_INT 11
11149: PUSH
11150: LD_INT 10
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// hc_name := Mortimer ;
11157: LD_ADDR_OWVAR 26
11161: PUSH
11162: LD_STRING Mortimer
11164: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces ;
11165: LD_ADDR_OWVAR 33
11169: PUSH
11170: LD_STRING ZieloneLaserki_AddtFaces
11172: ST_TO_ADDR
// hc_face_number := 1 ;
11173: LD_ADDR_OWVAR 34
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// Mortimer := CreateHuman ;
11181: LD_ADDR_EXP 46
11185: PUSH
11186: CALL_OW 44
11190: ST_TO_ADDR
// uc_nation := nation_american ;
11191: LD_ADDR_OWVAR 21
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// hc_importance = 80 ;
11199: LD_ADDR_OWVAR 32
11203: PUSH
11204: LD_INT 80
11206: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11207: LD_INT 1
11209: PPUSH
11210: LD_INT 9
11212: PPUSH
11213: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11217: LD_ADDR_OWVAR 29
11221: PUSH
11222: LD_INT 11
11224: PUSH
11225: LD_INT 10
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
// hc_name := Richford ;
11232: LD_ADDR_OWVAR 26
11236: PUSH
11237: LD_STRING Richford
11239: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11240: LD_ADDR_OWVAR 33
11244: PUSH
11245: LD_STRING ZieloneLaserki_AddtFaces2
11247: ST_TO_ADDR
// hc_face_number := 2 ;
11248: LD_ADDR_OWVAR 34
11252: PUSH
11253: LD_INT 2
11255: ST_TO_ADDR
// Richford := CreateHuman ;
11256: LD_ADDR_EXP 47
11260: PUSH
11261: CALL_OW 44
11265: ST_TO_ADDR
// hc_class = class_soldier ;
11266: LD_ADDR_OWVAR 28
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// uc_nation := nation_american ;
11274: LD_ADDR_OWVAR 21
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
// hc_importance = 90 ;
11282: LD_ADDR_OWVAR 32
11286: PUSH
11287: LD_INT 90
11289: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11290: LD_INT 1
11292: PPUSH
11293: LD_INT 10
11295: PPUSH
11296: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
11300: LD_ADDR_OWVAR 29
11304: PUSH
11305: LD_INT 10
11307: PUSH
11308: LD_INT 10
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// hc_name := Barnes ;
11315: LD_ADDR_OWVAR 26
11319: PUSH
11320: LD_STRING Barnes
11322: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
11323: LD_ADDR_OWVAR 33
11327: PUSH
11328: LD_STRING ZieloneLaserki_Commanders
11330: ST_TO_ADDR
// hc_face_number := 2 ;
11331: LD_ADDR_OWVAR 34
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// Barnes := CreateHuman ;
11339: LD_ADDR_EXP 41
11343: PUSH
11344: CALL_OW 44
11348: ST_TO_ADDR
// uc_side := 3 ;
11349: LD_ADDR_OWVAR 20
11353: PUSH
11354: LD_INT 3
11356: ST_TO_ADDR
// hc_class = class_soldier ;
11357: LD_ADDR_OWVAR 28
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// uc_nation := nation_russian ;
11365: LD_ADDR_OWVAR 21
11369: PUSH
11370: LD_INT 3
11372: ST_TO_ADDR
// hc_importance = 90 ;
11373: LD_ADDR_OWVAR 32
11377: PUSH
11378: LD_INT 90
11380: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 10
11386: PPUSH
11387: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
11391: LD_ADDR_OWVAR 29
11395: PUSH
11396: LD_INT 12
11398: PUSH
11399: LD_INT 10
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: ST_TO_ADDR
// hc_name := Sidorovich ;
11406: LD_ADDR_OWVAR 26
11410: PUSH
11411: LD_STRING Sidorovich
11413: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
11414: LD_ADDR_OWVAR 33
11418: PUSH
11419: LD_STRING ZieloneLaserki_Heroes
11421: ST_TO_ADDR
// hc_face_number := 8 ;
11422: LD_ADDR_OWVAR 34
11426: PUSH
11427: LD_INT 8
11429: ST_TO_ADDR
// Sidorovich := CreateHuman ;
11430: LD_ADDR_EXP 42
11434: PUSH
11435: CALL_OW 44
11439: ST_TO_ADDR
// uc_side := 6 ;
11440: LD_ADDR_OWVAR 20
11444: PUSH
11445: LD_INT 6
11447: ST_TO_ADDR
// hc_class = class_soldier ;
11448: LD_ADDR_OWVAR 28
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// uc_nation := nation_russian ;
11456: LD_ADDR_OWVAR 21
11460: PUSH
11461: LD_INT 3
11463: ST_TO_ADDR
// hc_importance = 90 ;
11464: LD_ADDR_OWVAR 32
11468: PUSH
11469: LD_INT 90
11471: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11472: LD_INT 1
11474: PPUSH
11475: LD_INT 10
11477: PPUSH
11478: CALL_OW 381
// hc_attr = [ 12 , 10 ] ;
11482: LD_ADDR_OWVAR 29
11486: PUSH
11487: LD_INT 12
11489: PUSH
11490: LD_INT 10
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: ST_TO_ADDR
// hc_name := Kolvich ;
11497: LD_ADDR_OWVAR 26
11501: PUSH
11502: LD_STRING Kolvich
11504: ST_TO_ADDR
// hc_gallery := RusCamp_KolvichCoterie ;
11505: LD_ADDR_OWVAR 33
11509: PUSH
11510: LD_STRING RusCamp_KolvichCoterie
11512: ST_TO_ADDR
// hc_face_number := 3 ;
11513: LD_ADDR_OWVAR 34
11517: PUSH
11518: LD_INT 3
11520: ST_TO_ADDR
// Kolvich := CreateHuman ;
11521: LD_ADDR_EXP 43
11525: PUSH
11526: CALL_OW 44
11530: ST_TO_ADDR
// uc_side := 5 ;
11531: LD_ADDR_OWVAR 20
11535: PUSH
11536: LD_INT 5
11538: ST_TO_ADDR
// hc_class = class_soldier ;
11539: LD_ADDR_OWVAR 28
11543: PUSH
11544: LD_INT 1
11546: ST_TO_ADDR
// uc_nation := nation_russian ;
11547: LD_ADDR_OWVAR 21
11551: PUSH
11552: LD_INT 3
11554: ST_TO_ADDR
// hc_importance = 90 ;
11555: LD_ADDR_OWVAR 32
11559: PUSH
11560: LD_INT 90
11562: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
11563: LD_INT 1
11565: PPUSH
11566: LD_INT 9
11568: PPUSH
11569: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11573: LD_ADDR_OWVAR 29
11577: PUSH
11578: LD_INT 11
11580: PUSH
11581: LD_INT 10
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: ST_TO_ADDR
// hc_name := Botnicov ;
11588: LD_ADDR_OWVAR 26
11592: PUSH
11593: LD_STRING Botnicov
11595: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_RusCommanders ;
11596: LD_ADDR_OWVAR 33
11600: PUSH
11601: LD_STRING ZieloneLaserki_RusCommanders
11603: ST_TO_ADDR
// hc_face_number := 1 ;
11604: LD_ADDR_OWVAR 34
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// Botnicov := CreateHuman ;
11612: LD_ADDR_EXP 45
11616: PUSH
11617: CALL_OW 44
11621: ST_TO_ADDR
// uc_side := 4 ;
11622: LD_ADDR_OWVAR 20
11626: PUSH
11627: LD_INT 4
11629: ST_TO_ADDR
// hc_class = class_soldier ;
11630: LD_ADDR_OWVAR 28
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// uc_nation := nation_american ;
11638: LD_ADDR_OWVAR 21
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// hc_importance = 90 ;
11646: LD_ADDR_OWVAR 32
11650: PUSH
11651: LD_INT 90
11653: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11654: LD_INT 1
11656: PPUSH
11657: LD_INT 10
11659: PPUSH
11660: CALL_OW 381
// hc_attr = [ 15 , 10 ] ;
11664: LD_ADDR_OWVAR 29
11668: PUSH
11669: LD_INT 15
11671: PUSH
11672: LD_INT 10
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: ST_TO_ADDR
// hc_name := General ;
11679: LD_ADDR_OWVAR 26
11683: PUSH
11684: LD_STRING General
11686: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_AddtFaces2 ;
11687: LD_ADDR_OWVAR 33
11691: PUSH
11692: LD_STRING ZieloneLaserki_AddtFaces2
11694: ST_TO_ADDR
// hc_face_number := 5 ;
11695: LD_ADDR_OWVAR 34
11699: PUSH
11700: LD_INT 5
11702: ST_TO_ADDR
// General := CreateHuman ;
11703: LD_ADDR_EXP 48
11707: PUSH
11708: CALL_OW 44
11712: ST_TO_ADDR
// uc_side := 1 ;
11713: LD_ADDR_OWVAR 20
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// hc_class = class_soldier ;
11721: LD_ADDR_OWVAR 28
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// uc_nation := nation_american ;
11729: LD_ADDR_OWVAR 21
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// hc_importance = 90 ;
11737: LD_ADDR_OWVAR 32
11741: PUSH
11742: LD_INT 90
11744: ST_TO_ADDR
// PrepareSoldier ( 1 , 10 ) ;
11745: LD_INT 1
11747: PPUSH
11748: LD_INT 10
11750: PPUSH
11751: CALL_OW 381
// hc_attr = [ 11 , 10 ] ;
11755: LD_ADDR_OWVAR 29
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_INT 10
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: ST_TO_ADDR
// hc_name := Randall ;
11770: LD_ADDR_OWVAR 26
11774: PUSH
11775: LD_STRING Randall
11777: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
11778: LD_ADDR_OWVAR 33
11782: PUSH
11783: LD_STRING ZieloneLaserki_Commanders
11785: ST_TO_ADDR
// hc_face_number := 3 ;
11786: LD_ADDR_OWVAR 34
11790: PUSH
11791: LD_INT 3
11793: ST_TO_ADDR
// Randall := CreateHuman ;
11794: LD_ADDR_EXP 49
11798: PUSH
11799: CALL_OW 44
11803: ST_TO_ADDR
// hc_name :=  ;
11804: LD_ADDR_OWVAR 26
11808: PUSH
11809: LD_STRING 
11811: ST_TO_ADDR
// hc_gallery :=  ;
11812: LD_ADDR_OWVAR 33
11816: PUSH
11817: LD_STRING 
11819: ST_TO_ADDR
// end ;
11820: LD_VAR 0 1
11824: RET
// export function Squad_Assembly ; var Vehicles , i , p , x , veh , filter ; begin
11825: LD_INT 0
11827: PPUSH
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
// uc_side := 7 ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_INT 7
11841: ST_TO_ADDR
// Vehicles := LoadVariable ( AM04_Vehicles , [ ] ) ;
11842: LD_ADDR_VAR 0 2
11846: PUSH
11847: LD_STRING AM04_Vehicles
11849: PPUSH
11850: EMPTY
11851: PPUSH
11852: CALL_OW 30
11856: ST_TO_ADDR
// x := 1 ;
11857: LD_ADDR_VAR 0 5
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// i := 1 ;
11865: LD_ADDR_VAR 0 3
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// p := 1 ;
11873: LD_ADDR_VAR 0 4
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if Vehicles > 0 then
11881: LD_VAR 0 2
11885: PUSH
11886: LD_INT 0
11888: GREATER
11889: IFFALSE 12111
// while ( i <= Vehicles ) do
11891: LD_VAR 0 3
11895: PUSH
11896: LD_VAR 0 2
11900: LESSEQUAL
11901: IFFALSE 12111
// begin vc_chassis := Vehicles [ i ] ;
11903: LD_ADDR_OWVAR 37
11907: PUSH
11908: LD_VAR 0 2
11912: PUSH
11913: LD_VAR 0 3
11917: ARRAY
11918: ST_TO_ADDR
// vc_engine := Vehicles [ i + 1 ] ;
11919: LD_ADDR_OWVAR 39
11923: PUSH
11924: LD_VAR 0 2
11928: PUSH
11929: LD_VAR 0 3
11933: PUSH
11934: LD_INT 1
11936: PLUS
11937: ARRAY
11938: ST_TO_ADDR
// vc_control := Vehicles [ i + 2 ] ;
11939: LD_ADDR_OWVAR 38
11943: PUSH
11944: LD_VAR 0 2
11948: PUSH
11949: LD_VAR 0 3
11953: PUSH
11954: LD_INT 2
11956: PLUS
11957: ARRAY
11958: ST_TO_ADDR
// vc_weapon := Vehicles [ i + 3 ] ;
11959: LD_ADDR_OWVAR 40
11963: PUSH
11964: LD_VAR 0 2
11968: PUSH
11969: LD_VAR 0 3
11973: PUSH
11974: LD_INT 3
11976: PLUS
11977: ARRAY
11978: ST_TO_ADDR
// veh := CreateVehicle ;
11979: LD_ADDR_VAR 0 6
11983: PUSH
11984: CALL_OW 45
11988: ST_TO_ADDR
// PlaceUnitXYR ( veh , 52 , 98 , 1 , false ) ;
11989: LD_VAR 0 6
11993: PPUSH
11994: LD_INT 52
11996: PPUSH
11997: LD_INT 98
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 0
12005: PPUSH
12006: CALL_OW 50
// if GetControl ( veh ) = control_manual then
12010: LD_VAR 0 6
12014: PPUSH
12015: CALL_OW 263
12019: PUSH
12020: LD_INT 1
12022: EQUAL
12023: IFFALSE 12059
// begin PlaceHumanInUnit ( AvengerSquad [ x ] , veh ) ;
12025: LD_EXP 50
12029: PUSH
12030: LD_VAR 0 5
12034: ARRAY
12035: PPUSH
12036: LD_VAR 0 6
12040: PPUSH
12041: CALL_OW 52
// x := x + 1 ;
12045: LD_ADDR_VAR 0 5
12049: PUSH
12050: LD_VAR 0 5
12054: PUSH
12055: LD_INT 1
12057: PLUS
12058: ST_TO_ADDR
// end ; ComMoveXY ( veh , 70 , 90 ) ;
12059: LD_VAR 0 6
12063: PPUSH
12064: LD_INT 70
12066: PPUSH
12067: LD_INT 90
12069: PPUSH
12070: CALL_OW 111
// wait ( 0 0$03 ) ;
12074: LD_INT 105
12076: PPUSH
12077: CALL_OW 67
// p := p + 1 ;
12081: LD_ADDR_VAR 0 4
12085: PUSH
12086: LD_VAR 0 4
12090: PUSH
12091: LD_INT 1
12093: PLUS
12094: ST_TO_ADDR
// i := i + 4 ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 3
12104: PUSH
12105: LD_INT 4
12107: PLUS
12108: ST_TO_ADDR
// end ;
12109: GO 11891
// while x <= AvengerSquad do
12111: LD_VAR 0 5
12115: PUSH
12116: LD_EXP 50
12120: LESSEQUAL
12121: IFFALSE 12194
// begin PlaceUnitXYR ( AvengerSquad [ x ] , 52 , 98 , 1 , false ) ;
12123: LD_EXP 50
12127: PUSH
12128: LD_VAR 0 5
12132: ARRAY
12133: PPUSH
12134: LD_INT 52
12136: PPUSH
12137: LD_INT 98
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_INT 0
12145: PPUSH
12146: CALL_OW 50
// ComMoveXY ( AvengerSquad [ x ] , 70 , 90 ) ;
12150: LD_EXP 50
12154: PUSH
12155: LD_VAR 0 5
12159: ARRAY
12160: PPUSH
12161: LD_INT 70
12163: PPUSH
12164: LD_INT 90
12166: PPUSH
12167: CALL_OW 111
// x := x + 1 ;
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: LD_VAR 0 5
12180: PUSH
12181: LD_INT 1
12183: PLUS
12184: ST_TO_ADDR
// wait ( 0 0$02 ) ;
12185: LD_INT 70
12187: PPUSH
12188: CALL_OW 67
// end ;
12192: GO 12111
// end ;
12194: LD_VAR 0 1
12198: RET
// export MC_attack_group , MC_attack_group2 ; export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , group ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
12199: LD_INT 0
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
// amChassisTab = [ ] ;
12211: LD_ADDR_VAR 0 19
12215: PUSH
12216: EMPTY
12217: ST_TO_ADDR
// arChassisTab = [ ] ;
12218: LD_ADDR_VAR 0 18
12222: PUSH
12223: EMPTY
12224: ST_TO_ADDR
// ruChassisTab = [ ] ;
12225: LD_ADDR_VAR 0 17
12229: PUSH
12230: EMPTY
12231: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12232: LD_INT 35
12234: PPUSH
12235: CALL_OW 67
// if nation = 1 then
12239: LD_VAR 0 5
12243: PUSH
12244: LD_INT 1
12246: EQUAL
12247: IFFALSE 12806
// begin uc_side = side ;
12249: LD_ADDR_OWVAR 20
12253: PUSH
12254: LD_VAR 0 2
12258: ST_TO_ADDR
// uc_nation = nation ;
12259: LD_ADDR_OWVAR 21
12263: PUSH
12264: LD_VAR 0 5
12268: ST_TO_ADDR
// vc_engine = vehengine ;
12269: LD_ADDR_OWVAR 39
12273: PUSH
12274: LD_VAR 0 6
12278: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12279: LD_ADDR_OWVAR 38
12283: PUSH
12284: LD_VAR 0 7
12288: PUSH
12289: LD_INT 1
12291: PPUSH
12292: LD_VAR 0 7
12296: PPUSH
12297: CALL_OW 12
12301: ARRAY
12302: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12303: LD_ADDR_OWVAR 40
12307: PUSH
12308: LD_VAR 0 10
12312: PUSH
12313: LD_INT 1
12315: PPUSH
12316: LD_VAR 0 10
12320: PPUSH
12321: CALL_OW 12
12325: ARRAY
12326: ST_TO_ADDR
// for j = 1 to AMWeapon do
12327: LD_ADDR_VAR 0 14
12331: PUSH
12332: DOUBLE
12333: LD_INT 1
12335: DEC
12336: ST_TO_ADDR
12337: LD_VAR 0 10
12341: PUSH
12342: FOR_TO
12343: IFFALSE 12644
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12345: LD_VAR 0 10
12349: PUSH
12350: LD_VAR 0 14
12354: ARRAY
12355: PUSH
12356: LD_INT 2
12358: EQUAL
12359: PUSH
12360: LD_VAR 0 10
12364: PUSH
12365: LD_VAR 0 14
12369: ARRAY
12370: PUSH
12371: LD_INT 3
12373: EQUAL
12374: OR
12375: IFFALSE 12428
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12377: LD_ADDR_VAR 0 19
12381: PUSH
12382: LD_INT 1
12384: PUSH
12385: LD_INT 2
12387: PUSH
12388: LD_INT 3
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12404: LD_ADDR_OWVAR 37
12408: PUSH
12409: LD_VAR 0 19
12413: PUSH
12414: LD_INT 1
12416: PPUSH
12417: LD_VAR 0 19
12421: PPUSH
12422: CALL_OW 12
12426: ARRAY
12427: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12428: LD_VAR 0 10
12432: PUSH
12433: LD_VAR 0 14
12437: ARRAY
12438: PUSH
12439: LD_INT 4
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 10
12447: PUSH
12448: LD_VAR 0 14
12452: ARRAY
12453: PUSH
12454: LD_INT 5
12456: EQUAL
12457: OR
12458: PUSH
12459: LD_VAR 0 10
12463: PUSH
12464: LD_VAR 0 14
12468: ARRAY
12469: PUSH
12470: LD_INT 9
12472: EQUAL
12473: OR
12474: PUSH
12475: LD_VAR 0 10
12479: PUSH
12480: LD_VAR 0 14
12484: ARRAY
12485: PUSH
12486: LD_INT 11
12488: EQUAL
12489: OR
12490: PUSH
12491: LD_VAR 0 10
12495: PUSH
12496: LD_VAR 0 14
12500: ARRAY
12501: PUSH
12502: LD_INT 7
12504: EQUAL
12505: OR
12506: IFFALSE 12555
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12508: LD_ADDR_VAR 0 19
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: LD_INT 4
12521: PUSH
12522: LD_INT 5
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12531: LD_ADDR_OWVAR 37
12535: PUSH
12536: LD_VAR 0 19
12540: PUSH
12541: LD_INT 1
12543: PPUSH
12544: LD_VAR 0 19
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12555: LD_VAR 0 10
12559: PUSH
12560: LD_VAR 0 14
12564: ARRAY
12565: PUSH
12566: LD_INT 8
12568: EQUAL
12569: PUSH
12570: LD_VAR 0 10
12574: PUSH
12575: LD_VAR 0 14
12579: ARRAY
12580: PUSH
12581: LD_INT 6
12583: EQUAL
12584: OR
12585: PUSH
12586: LD_VAR 0 10
12590: PUSH
12591: LD_VAR 0 14
12595: ARRAY
12596: PUSH
12597: LD_INT 10
12599: EQUAL
12600: OR
12601: IFFALSE 12642
// begin amChassisTab = [ 4 , 5 ] ;
12603: LD_ADDR_VAR 0 19
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12618: LD_ADDR_OWVAR 37
12622: PUSH
12623: LD_VAR 0 19
12627: PUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_VAR 0 19
12635: PPUSH
12636: CALL_OW 12
12640: ARRAY
12641: ST_TO_ADDR
// end ; end ;
12642: GO 12342
12644: POP
12645: POP
// veh = CreateVehicle ;
12646: LD_ADDR_VAR 0 16
12650: PUSH
12651: CALL_OW 45
12655: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12656: LD_VAR 0 16
12660: PPUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 49
// if vc_control = 1 then
12673: LD_OWVAR 38
12677: PUSH
12678: LD_INT 1
12680: EQUAL
12681: IFFALSE 12738
// begin hc_gallery =  ;
12683: LD_ADDR_OWVAR 33
12687: PUSH
12688: LD_STRING 
12690: ST_TO_ADDR
// hc_name =  ;
12691: LD_ADDR_OWVAR 26
12695: PUSH
12696: LD_STRING 
12698: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12699: LD_INT 0
12701: PPUSH
12702: LD_INT 3
12704: PPUSH
12705: LD_VAR 0 4
12709: PPUSH
12710: CALL_OW 380
// un = CreateHuman ;
12714: LD_ADDR_VAR 0 15
12718: PUSH
12719: CALL_OW 44
12723: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12724: LD_VAR 0 15
12728: PPUSH
12729: LD_VAR 0 16
12733: PPUSH
12734: CALL_OW 52
// end ; if group = 1 then
12738: LD_VAR 0 11
12742: PUSH
12743: LD_INT 1
12745: EQUAL
12746: IFFALSE 12766
// MC_attack_group = MC_attack_group ^ veh else
12748: LD_ADDR_EXP 54
12752: PUSH
12753: LD_EXP 54
12757: PUSH
12758: LD_VAR 0 16
12762: ADD
12763: ST_TO_ADDR
12764: GO 12792
// if group = 2 then
12766: LD_VAR 0 11
12770: PUSH
12771: LD_INT 2
12773: EQUAL
12774: IFFALSE 12792
// MC_attack_group2 = MC_attack_group2 ^ veh ;
12776: LD_ADDR_EXP 55
12780: PUSH
12781: LD_EXP 55
12785: PUSH
12786: LD_VAR 0 16
12790: ADD
12791: ST_TO_ADDR
// i = i + 1 ;
12792: LD_ADDR_VAR 0 13
12796: PUSH
12797: LD_VAR 0 13
12801: PUSH
12802: LD_INT 1
12804: PLUS
12805: ST_TO_ADDR
// end ; if nation = 2 then
12806: LD_VAR 0 5
12810: PUSH
12811: LD_INT 2
12813: EQUAL
12814: IFFALSE 13377
// begin uc_side = side ;
12816: LD_ADDR_OWVAR 20
12820: PUSH
12821: LD_VAR 0 2
12825: ST_TO_ADDR
// uc_nation = nation ;
12826: LD_ADDR_OWVAR 21
12830: PUSH
12831: LD_VAR 0 5
12835: ST_TO_ADDR
// vc_engine = vehengine ;
12836: LD_ADDR_OWVAR 39
12840: PUSH
12841: LD_VAR 0 6
12845: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12846: LD_ADDR_OWVAR 38
12850: PUSH
12851: LD_VAR 0 7
12855: PUSH
12856: LD_INT 1
12858: PPUSH
12859: LD_VAR 0 7
12863: PPUSH
12864: CALL_OW 12
12868: ARRAY
12869: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12870: LD_ADDR_OWVAR 40
12874: PUSH
12875: LD_VAR 0 9
12879: PUSH
12880: LD_INT 1
12882: PPUSH
12883: LD_VAR 0 9
12887: PPUSH
12888: CALL_OW 12
12892: ARRAY
12893: ST_TO_ADDR
// for j = 1 to ARWeapons do
12894: LD_ADDR_VAR 0 14
12898: PUSH
12899: DOUBLE
12900: LD_INT 1
12902: DEC
12903: ST_TO_ADDR
12904: LD_VAR 0 9
12908: PUSH
12909: FOR_TO
12910: IFFALSE 13215
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12912: LD_VAR 0 9
12916: PUSH
12917: LD_VAR 0 14
12921: ARRAY
12922: PUSH
12923: LD_INT 24
12925: EQUAL
12926: PUSH
12927: LD_VAR 0 9
12931: PUSH
12932: LD_VAR 0 14
12936: ARRAY
12937: PUSH
12938: LD_INT 22
12940: EQUAL
12941: OR
12942: PUSH
12943: LD_VAR 0 9
12947: PUSH
12948: LD_VAR 0 14
12952: ARRAY
12953: PUSH
12954: LD_INT 23
12956: EQUAL
12957: OR
12958: PUSH
12959: LD_VAR 0 9
12963: PUSH
12964: LD_VAR 0 14
12968: ARRAY
12969: PUSH
12970: LD_INT 30
12972: EQUAL
12973: OR
12974: IFFALSE 13011
// begin arChassisTab = [ 14 ] ;
12976: LD_ADDR_VAR 0 18
12980: PUSH
12981: LD_INT 14
12983: PUSH
12984: EMPTY
12985: LIST
12986: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12987: LD_ADDR_OWVAR 37
12991: PUSH
12992: LD_VAR 0 18
12996: PUSH
12997: LD_INT 1
12999: PPUSH
13000: LD_VAR 0 18
13004: PPUSH
13005: CALL_OW 12
13009: ARRAY
13010: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13011: LD_VAR 0 9
13015: PUSH
13016: LD_VAR 0 14
13020: ARRAY
13021: PUSH
13022: LD_INT 29
13024: EQUAL
13025: PUSH
13026: LD_VAR 0 9
13030: PUSH
13031: LD_VAR 0 14
13035: ARRAY
13036: PUSH
13037: LD_INT 28
13039: EQUAL
13040: OR
13041: PUSH
13042: LD_VAR 0 9
13046: PUSH
13047: LD_VAR 0 14
13051: ARRAY
13052: PUSH
13053: LD_INT 27
13055: EQUAL
13056: OR
13057: PUSH
13058: LD_VAR 0 9
13062: PUSH
13063: LD_VAR 0 14
13067: ARRAY
13068: PUSH
13069: LD_INT 26
13071: EQUAL
13072: OR
13073: PUSH
13074: LD_VAR 0 9
13078: PUSH
13079: LD_VAR 0 14
13083: ARRAY
13084: PUSH
13085: LD_INT 25
13087: EQUAL
13088: OR
13089: IFFALSE 13130
// begin arChassisTab = [ 14 , 16 ] ;
13091: LD_ADDR_VAR 0 18
13095: PUSH
13096: LD_INT 14
13098: PUSH
13099: LD_INT 16
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13106: LD_ADDR_OWVAR 37
13110: PUSH
13111: LD_VAR 0 18
13115: PUSH
13116: LD_INT 1
13118: PPUSH
13119: LD_VAR 0 18
13123: PPUSH
13124: CALL_OW 12
13128: ARRAY
13129: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 72 or ARWeapons [ j ] = 71 or ARWeapons [ j ] = 73 then
13130: LD_VAR 0 9
13134: PUSH
13135: LD_VAR 0 14
13139: ARRAY
13140: PUSH
13141: LD_INT 72
13143: EQUAL
13144: PUSH
13145: LD_VAR 0 9
13149: PUSH
13150: LD_VAR 0 14
13154: ARRAY
13155: PUSH
13156: LD_INT 71
13158: EQUAL
13159: OR
13160: PUSH
13161: LD_VAR 0 9
13165: PUSH
13166: LD_VAR 0 14
13170: ARRAY
13171: PUSH
13172: LD_INT 73
13174: EQUAL
13175: OR
13176: IFFALSE 13213
// begin arChassisTab = [ 16 ] ;
13178: LD_ADDR_VAR 0 18
13182: PUSH
13183: LD_INT 16
13185: PUSH
13186: EMPTY
13187: LIST
13188: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13189: LD_ADDR_OWVAR 37
13193: PUSH
13194: LD_VAR 0 18
13198: PUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_VAR 0 18
13206: PPUSH
13207: CALL_OW 12
13211: ARRAY
13212: ST_TO_ADDR
// end ; end ;
13213: GO 12909
13215: POP
13216: POP
// veh = CreateVehicle ;
13217: LD_ADDR_VAR 0 16
13221: PUSH
13222: CALL_OW 45
13226: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13227: LD_VAR 0 16
13231: PPUSH
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 0
13239: PPUSH
13240: CALL_OW 49
// if vc_control = 1 then
13244: LD_OWVAR 38
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13309
// begin hc_gallery =  ;
13254: LD_ADDR_OWVAR 33
13258: PUSH
13259: LD_STRING 
13261: ST_TO_ADDR
// hc_name =  ;
13262: LD_ADDR_OWVAR 26
13266: PUSH
13267: LD_STRING 
13269: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13270: LD_INT 0
13272: PPUSH
13273: LD_INT 3
13275: PPUSH
13276: LD_VAR 0 4
13280: PPUSH
13281: CALL_OW 380
// un = CreateHuman ;
13285: LD_ADDR_VAR 0 15
13289: PUSH
13290: CALL_OW 44
13294: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13295: LD_VAR 0 15
13299: PPUSH
13300: LD_VAR 0 16
13304: PPUSH
13305: CALL_OW 52
// end ; if group = 1 then
13309: LD_VAR 0 11
13313: PUSH
13314: LD_INT 1
13316: EQUAL
13317: IFFALSE 13337
// MC_attack_group = MC_attack_group ^ veh else
13319: LD_ADDR_EXP 54
13323: PUSH
13324: LD_EXP 54
13328: PUSH
13329: LD_VAR 0 16
13333: ADD
13334: ST_TO_ADDR
13335: GO 13363
// if group = 2 then
13337: LD_VAR 0 11
13341: PUSH
13342: LD_INT 2
13344: EQUAL
13345: IFFALSE 13363
// MC_attack_group2 = MC_attack_group2 ^ veh ;
13347: LD_ADDR_EXP 55
13351: PUSH
13352: LD_EXP 55
13356: PUSH
13357: LD_VAR 0 16
13361: ADD
13362: ST_TO_ADDR
// i = i + 1 ;
13363: LD_ADDR_VAR 0 13
13367: PUSH
13368: LD_VAR 0 13
13372: PUSH
13373: LD_INT 1
13375: PLUS
13376: ST_TO_ADDR
// end ; if nation = 3 then
13377: LD_VAR 0 5
13381: PUSH
13382: LD_INT 3
13384: EQUAL
13385: IFFALSE 13845
// begin uc_side = side ;
13387: LD_ADDR_OWVAR 20
13391: PUSH
13392: LD_VAR 0 2
13396: ST_TO_ADDR
// uc_nation = nation ;
13397: LD_ADDR_OWVAR 21
13401: PUSH
13402: LD_VAR 0 5
13406: ST_TO_ADDR
// vc_engine = vehengine ;
13407: LD_ADDR_OWVAR 39
13411: PUSH
13412: LD_VAR 0 6
13416: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13417: LD_ADDR_OWVAR 38
13421: PUSH
13422: LD_VAR 0 7
13426: PUSH
13427: LD_INT 1
13429: PPUSH
13430: LD_VAR 0 7
13434: PPUSH
13435: CALL_OW 12
13439: ARRAY
13440: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13441: LD_ADDR_OWVAR 40
13445: PUSH
13446: LD_VAR 0 8
13450: PUSH
13451: LD_INT 1
13453: PPUSH
13454: LD_VAR 0 8
13458: PPUSH
13459: CALL_OW 12
13463: ARRAY
13464: ST_TO_ADDR
// for j = 1 to RuWeapons do
13465: LD_ADDR_VAR 0 14
13469: PUSH
13470: DOUBLE
13471: LD_INT 1
13473: DEC
13474: ST_TO_ADDR
13475: LD_VAR 0 8
13479: PUSH
13480: FOR_TO
13481: IFFALSE 13683
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13483: LD_VAR 0 8
13487: PUSH
13488: LD_VAR 0 14
13492: ARRAY
13493: PUSH
13494: LD_INT 42
13496: EQUAL
13497: PUSH
13498: LD_VAR 0 8
13502: PUSH
13503: LD_VAR 0 14
13507: ARRAY
13508: PUSH
13509: LD_INT 43
13511: EQUAL
13512: OR
13513: PUSH
13514: LD_VAR 0 8
13518: PUSH
13519: LD_VAR 0 14
13523: ARRAY
13524: PUSH
13525: LD_INT 44
13527: EQUAL
13528: OR
13529: PUSH
13530: LD_VAR 0 8
13534: PUSH
13535: LD_VAR 0 14
13539: ARRAY
13540: PUSH
13541: LD_INT 45
13543: EQUAL
13544: OR
13545: PUSH
13546: LD_VAR 0 8
13550: PUSH
13551: LD_VAR 0 14
13555: ARRAY
13556: PUSH
13557: LD_INT 49
13559: EQUAL
13560: OR
13561: IFFALSE 13610
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13563: LD_ADDR_VAR 0 17
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 22
13573: PUSH
13574: LD_INT 23
13576: PUSH
13577: LD_INT 24
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13586: LD_ADDR_OWVAR 37
13590: PUSH
13591: LD_VAR 0 17
13595: PUSH
13596: LD_INT 1
13598: PPUSH
13599: LD_VAR 0 17
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13610: LD_VAR 0 8
13614: PUSH
13615: LD_VAR 0 14
13619: ARRAY
13620: PUSH
13621: LD_INT 46
13623: EQUAL
13624: PUSH
13625: LD_VAR 0 8
13629: PUSH
13630: LD_VAR 0 14
13634: ARRAY
13635: PUSH
13636: LD_INT 47
13638: EQUAL
13639: OR
13640: IFFALSE 13681
// begin ruChassisTab = [ 23 , 24 ] ;
13642: LD_ADDR_VAR 0 17
13646: PUSH
13647: LD_INT 23
13649: PUSH
13650: LD_INT 24
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13657: LD_ADDR_OWVAR 37
13661: PUSH
13662: LD_VAR 0 17
13666: PUSH
13667: LD_INT 1
13669: PPUSH
13670: LD_VAR 0 17
13674: PPUSH
13675: CALL_OW 12
13679: ARRAY
13680: ST_TO_ADDR
// end ; end ;
13681: GO 13480
13683: POP
13684: POP
// veh = CreateVehicle ;
13685: LD_ADDR_VAR 0 16
13689: PUSH
13690: CALL_OW 45
13694: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13695: LD_VAR 0 16
13699: PPUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: LD_INT 0
13707: PPUSH
13708: CALL_OW 49
// if vc_control = 1 then
13712: LD_OWVAR 38
13716: PUSH
13717: LD_INT 1
13719: EQUAL
13720: IFFALSE 13777
// begin hc_gallery =  ;
13722: LD_ADDR_OWVAR 33
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// hc_name =  ;
13730: LD_ADDR_OWVAR 26
13734: PUSH
13735: LD_STRING 
13737: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13738: LD_INT 0
13740: PPUSH
13741: LD_INT 3
13743: PPUSH
13744: LD_VAR 0 4
13748: PPUSH
13749: CALL_OW 380
// un = CreateHuman ;
13753: LD_ADDR_VAR 0 15
13757: PUSH
13758: CALL_OW 44
13762: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13763: LD_VAR 0 15
13767: PPUSH
13768: LD_VAR 0 16
13772: PPUSH
13773: CALL_OW 52
// end ; if group = 1 then
13777: LD_VAR 0 11
13781: PUSH
13782: LD_INT 1
13784: EQUAL
13785: IFFALSE 13805
// MC_attack_group = MC_attack_group ^ veh else
13787: LD_ADDR_EXP 54
13791: PUSH
13792: LD_EXP 54
13796: PUSH
13797: LD_VAR 0 16
13801: ADD
13802: ST_TO_ADDR
13803: GO 13831
// if group = 2 then
13805: LD_VAR 0 11
13809: PUSH
13810: LD_INT 2
13812: EQUAL
13813: IFFALSE 13831
// MC_attack_group2 = MC_attack_group2 ^ veh ;
13815: LD_ADDR_EXP 55
13819: PUSH
13820: LD_EXP 55
13824: PUSH
13825: LD_VAR 0 16
13829: ADD
13830: ST_TO_ADDR
// i = i + 1 ;
13831: LD_ADDR_VAR 0 13
13835: PUSH
13836: LD_VAR 0 13
13840: PUSH
13841: LD_INT 1
13843: PLUS
13844: ST_TO_ADDR
// end ; until i = vehCount ;
13845: LD_VAR 0 13
13849: PUSH
13850: LD_VAR 0 3
13854: EQUAL
13855: IFFALSE 12232
// end ;
13857: LD_VAR 0 12
13861: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , group ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
13862: LD_INT 0
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
// for i = 1 to medicCount do
13871: LD_ADDR_VAR 0 12
13875: PUSH
13876: DOUBLE
13877: LD_INT 1
13879: DEC
13880: ST_TO_ADDR
13881: LD_VAR 0 7
13885: PUSH
13886: FOR_TO
13887: IFFALSE 14023
// begin uc_side = side ;
13889: LD_ADDR_OWVAR 20
13893: PUSH
13894: LD_VAR 0 1
13898: ST_TO_ADDR
// uc_nation = nation ;
13899: LD_ADDR_OWVAR 21
13903: PUSH
13904: LD_VAR 0 2
13908: ST_TO_ADDR
// hc_name =  ;
13909: LD_ADDR_OWVAR 26
13913: PUSH
13914: LD_STRING 
13916: ST_TO_ADDR
// hc_gallery =  ;
13917: LD_ADDR_OWVAR 33
13921: PUSH
13922: LD_STRING 
13924: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
13925: LD_INT 0
13927: PPUSH
13928: LD_INT 4
13930: PPUSH
13931: LD_VAR 0 8
13935: PPUSH
13936: CALL_OW 380
// un = CreateHuman ;
13940: LD_ADDR_VAR 0 14
13944: PUSH
13945: CALL_OW 44
13949: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13950: LD_VAR 0 14
13954: PPUSH
13955: LD_VAR 0 9
13959: PPUSH
13960: LD_INT 0
13962: PPUSH
13963: CALL_OW 49
// if group = 1 then
13967: LD_VAR 0 10
13971: PUSH
13972: LD_INT 1
13974: EQUAL
13975: IFFALSE 13995
// MC_attack_group = MC_attack_group ^ un else
13977: LD_ADDR_EXP 54
13981: PUSH
13982: LD_EXP 54
13986: PUSH
13987: LD_VAR 0 14
13991: ADD
13992: ST_TO_ADDR
13993: GO 14021
// if group = 2 then
13995: LD_VAR 0 10
13999: PUSH
14000: LD_INT 2
14002: EQUAL
14003: IFFALSE 14021
// MC_attack_group2 = MC_attack_group2 ^ un ;
14005: LD_ADDR_EXP 55
14009: PUSH
14010: LD_EXP 55
14014: PUSH
14015: LD_VAR 0 14
14019: ADD
14020: ST_TO_ADDR
// end ;
14021: GO 13886
14023: POP
14024: POP
// for i = 1 to soldierCount do
14025: LD_ADDR_VAR 0 12
14029: PUSH
14030: DOUBLE
14031: LD_INT 1
14033: DEC
14034: ST_TO_ADDR
14035: LD_VAR 0 3
14039: PUSH
14040: FOR_TO
14041: IFFALSE 14177
// begin uc_side = side ;
14043: LD_ADDR_OWVAR 20
14047: PUSH
14048: LD_VAR 0 1
14052: ST_TO_ADDR
// uc_nation = nation ;
14053: LD_ADDR_OWVAR 21
14057: PUSH
14058: LD_VAR 0 2
14062: ST_TO_ADDR
// hc_name =  ;
14063: LD_ADDR_OWVAR 26
14067: PUSH
14068: LD_STRING 
14070: ST_TO_ADDR
// hc_gallery =  ;
14071: LD_ADDR_OWVAR 33
14075: PUSH
14076: LD_STRING 
14078: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14079: LD_INT 0
14081: PPUSH
14082: LD_INT 1
14084: PPUSH
14085: LD_VAR 0 8
14089: PPUSH
14090: CALL_OW 380
// un = CreateHuman ;
14094: LD_ADDR_VAR 0 14
14098: PUSH
14099: CALL_OW 44
14103: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14104: LD_VAR 0 14
14108: PPUSH
14109: LD_VAR 0 9
14113: PPUSH
14114: LD_INT 0
14116: PPUSH
14117: CALL_OW 49
// if group = 1 then
14121: LD_VAR 0 10
14125: PUSH
14126: LD_INT 1
14128: EQUAL
14129: IFFALSE 14149
// MC_attack_group = MC_attack_group ^ un else
14131: LD_ADDR_EXP 54
14135: PUSH
14136: LD_EXP 54
14140: PUSH
14141: LD_VAR 0 14
14145: ADD
14146: ST_TO_ADDR
14147: GO 14175
// if group = 2 then
14149: LD_VAR 0 10
14153: PUSH
14154: LD_INT 2
14156: EQUAL
14157: IFFALSE 14175
// MC_attack_group2 = MC_attack_group2 ^ un ;
14159: LD_ADDR_EXP 55
14163: PUSH
14164: LD_EXP 55
14168: PUSH
14169: LD_VAR 0 14
14173: ADD
14174: ST_TO_ADDR
// end ;
14175: GO 14040
14177: POP
14178: POP
// for i = 1 to sniperCount do
14179: LD_ADDR_VAR 0 12
14183: PUSH
14184: DOUBLE
14185: LD_INT 1
14187: DEC
14188: ST_TO_ADDR
14189: LD_VAR 0 4
14193: PUSH
14194: FOR_TO
14195: IFFALSE 14331
// begin uc_side = side ;
14197: LD_ADDR_OWVAR 20
14201: PUSH
14202: LD_VAR 0 1
14206: ST_TO_ADDR
// uc_nation = nation ;
14207: LD_ADDR_OWVAR 21
14211: PUSH
14212: LD_VAR 0 2
14216: ST_TO_ADDR
// hc_name =  ;
14217: LD_ADDR_OWVAR 26
14221: PUSH
14222: LD_STRING 
14224: ST_TO_ADDR
// hc_gallery =  ;
14225: LD_ADDR_OWVAR 33
14229: PUSH
14230: LD_STRING 
14232: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
14233: LD_INT 0
14235: PPUSH
14236: LD_INT 5
14238: PPUSH
14239: LD_VAR 0 8
14243: PPUSH
14244: CALL_OW 380
// un = CreateHuman ;
14248: LD_ADDR_VAR 0 14
14252: PUSH
14253: CALL_OW 44
14257: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14258: LD_VAR 0 14
14262: PPUSH
14263: LD_VAR 0 9
14267: PPUSH
14268: LD_INT 0
14270: PPUSH
14271: CALL_OW 49
// if group = 1 then
14275: LD_VAR 0 10
14279: PUSH
14280: LD_INT 1
14282: EQUAL
14283: IFFALSE 14303
// MC_attack_group = MC_attack_group ^ un else
14285: LD_ADDR_EXP 54
14289: PUSH
14290: LD_EXP 54
14294: PUSH
14295: LD_VAR 0 14
14299: ADD
14300: ST_TO_ADDR
14301: GO 14329
// if group = 2 then
14303: LD_VAR 0 10
14307: PUSH
14308: LD_INT 2
14310: EQUAL
14311: IFFALSE 14329
// MC_attack_group2 = MC_attack_group2 ^ un ;
14313: LD_ADDR_EXP 55
14317: PUSH
14318: LD_EXP 55
14322: PUSH
14323: LD_VAR 0 14
14327: ADD
14328: ST_TO_ADDR
// end ;
14329: GO 14194
14331: POP
14332: POP
// for i = 1 to bazookCount do
14333: LD_ADDR_VAR 0 12
14337: PUSH
14338: DOUBLE
14339: LD_INT 1
14341: DEC
14342: ST_TO_ADDR
14343: LD_VAR 0 5
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14485
// begin uc_side = side ;
14351: LD_ADDR_OWVAR 20
14355: PUSH
14356: LD_VAR 0 1
14360: ST_TO_ADDR
// uc_nation = nation ;
14361: LD_ADDR_OWVAR 21
14365: PUSH
14366: LD_VAR 0 2
14370: ST_TO_ADDR
// hc_name =  ;
14371: LD_ADDR_OWVAR 26
14375: PUSH
14376: LD_STRING 
14378: ST_TO_ADDR
// hc_gallery =  ;
14379: LD_ADDR_OWVAR 33
14383: PUSH
14384: LD_STRING 
14386: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
14387: LD_INT 0
14389: PPUSH
14390: LD_INT 9
14392: PPUSH
14393: LD_VAR 0 8
14397: PPUSH
14398: CALL_OW 380
// un = CreateHuman ;
14402: LD_ADDR_VAR 0 14
14406: PUSH
14407: CALL_OW 44
14411: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14412: LD_VAR 0 14
14416: PPUSH
14417: LD_VAR 0 9
14421: PPUSH
14422: LD_INT 0
14424: PPUSH
14425: CALL_OW 49
// if group = 1 then
14429: LD_VAR 0 10
14433: PUSH
14434: LD_INT 1
14436: EQUAL
14437: IFFALSE 14457
// MC_attack_group = MC_attack_group ^ un else
14439: LD_ADDR_EXP 54
14443: PUSH
14444: LD_EXP 54
14448: PUSH
14449: LD_VAR 0 14
14453: ADD
14454: ST_TO_ADDR
14455: GO 14483
// if group = 2 then
14457: LD_VAR 0 10
14461: PUSH
14462: LD_INT 2
14464: EQUAL
14465: IFFALSE 14483
// MC_attack_group2 = MC_attack_group2 ^ un ;
14467: LD_ADDR_EXP 55
14471: PUSH
14472: LD_EXP 55
14476: PUSH
14477: LD_VAR 0 14
14481: ADD
14482: ST_TO_ADDR
// end ;
14483: GO 14348
14485: POP
14486: POP
// for i = 1 to mortalCount do
14487: LD_ADDR_VAR 0 12
14491: PUSH
14492: DOUBLE
14493: LD_INT 1
14495: DEC
14496: ST_TO_ADDR
14497: LD_VAR 0 6
14501: PUSH
14502: FOR_TO
14503: IFFALSE 14639
// begin uc_side = side ;
14505: LD_ADDR_OWVAR 20
14509: PUSH
14510: LD_VAR 0 1
14514: ST_TO_ADDR
// uc_nation = nation ;
14515: LD_ADDR_OWVAR 21
14519: PUSH
14520: LD_VAR 0 2
14524: ST_TO_ADDR
// hc_name =  ;
14525: LD_ADDR_OWVAR 26
14529: PUSH
14530: LD_STRING 
14532: ST_TO_ADDR
// hc_gallery =  ;
14533: LD_ADDR_OWVAR 33
14537: PUSH
14538: LD_STRING 
14540: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
14541: LD_INT 0
14543: PPUSH
14544: LD_INT 8
14546: PPUSH
14547: LD_VAR 0 8
14551: PPUSH
14552: CALL_OW 380
// un = CreateHuman ;
14556: LD_ADDR_VAR 0 14
14560: PUSH
14561: CALL_OW 44
14565: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14566: LD_VAR 0 14
14570: PPUSH
14571: LD_VAR 0 9
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 49
// if group = 1 then
14583: LD_VAR 0 10
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: IFFALSE 14611
// MC_attack_group = MC_attack_group ^ un else
14593: LD_ADDR_EXP 54
14597: PUSH
14598: LD_EXP 54
14602: PUSH
14603: LD_VAR 0 14
14607: ADD
14608: ST_TO_ADDR
14609: GO 14637
// if group = 2 then
14611: LD_VAR 0 10
14615: PUSH
14616: LD_INT 2
14618: EQUAL
14619: IFFALSE 14637
// MC_attack_group2 = MC_attack_group2 ^ un ;
14621: LD_ADDR_EXP 55
14625: PUSH
14626: LD_EXP 55
14630: PUSH
14631: LD_VAR 0 14
14635: ADD
14636: ST_TO_ADDR
// end ;
14637: GO 14502
14639: POP
14640: POP
// end ; end_of_file
14641: LD_VAR 0 11
14645: RET
// export RuSolMinLevel , RuSolMaxLevel , GeoSolMaxLevel ; export RU2KolvichArrival , GEODvaliArrival , DefenseTime ; export function PrepareDifficulty ; begin
14646: LD_INT 0
14648: PPUSH
// if difficulty = 1 then
14649: LD_OWVAR 67
14653: PUSH
14654: LD_INT 1
14656: EQUAL
14657: IFFALSE 14980
// begin RuSolMinLevel = 6 ;
14659: LD_ADDR_EXP 56
14663: PUSH
14664: LD_INT 6
14666: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
14667: LD_ADDR_EXP 57
14671: PUSH
14672: LD_INT 8
14674: ST_TO_ADDR
// GeoSolMaxLevel = 9 ;
14675: LD_ADDR_EXP 58
14679: PUSH
14680: LD_INT 9
14682: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
14683: LD_INT 48
14685: PPUSH
14686: LD_INT 3
14688: PPUSH
14689: LD_INT 2
14691: PPUSH
14692: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
14696: LD_INT 49
14698: PPUSH
14699: LD_INT 3
14701: PPUSH
14702: LD_INT 2
14704: PPUSH
14705: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
14709: LD_INT 51
14711: PPUSH
14712: LD_INT 3
14714: PPUSH
14715: LD_INT 2
14717: PPUSH
14718: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
14722: LD_INT 52
14724: PPUSH
14725: LD_INT 3
14727: PPUSH
14728: LD_INT 2
14730: PPUSH
14731: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
14735: LD_INT 57
14737: PPUSH
14738: LD_INT 3
14740: PPUSH
14741: LD_INT 2
14743: PPUSH
14744: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
14748: LD_INT 58
14750: PPUSH
14751: LD_INT 3
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
14761: LD_INT 30
14763: PPUSH
14764: LD_INT 3
14766: PPUSH
14767: LD_INT 2
14769: PPUSH
14770: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
14774: LD_INT 48
14776: PPUSH
14777: LD_INT 6
14779: PPUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
14787: LD_INT 49
14789: PPUSH
14790: LD_INT 6
14792: PPUSH
14793: LD_INT 2
14795: PPUSH
14796: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
14800: LD_INT 51
14802: PPUSH
14803: LD_INT 6
14805: PPUSH
14806: LD_INT 2
14808: PPUSH
14809: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
14813: LD_INT 52
14815: PPUSH
14816: LD_INT 6
14818: PPUSH
14819: LD_INT 2
14821: PPUSH
14822: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
14826: LD_INT 57
14828: PPUSH
14829: LD_INT 6
14831: PPUSH
14832: LD_INT 2
14834: PPUSH
14835: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
14839: LD_INT 58
14841: PPUSH
14842: LD_INT 6
14844: PPUSH
14845: LD_INT 2
14847: PPUSH
14848: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
14852: LD_INT 30
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 2
14860: PPUSH
14861: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
14865: LD_INT 28
14867: PPUSH
14868: LD_INT 6
14870: PPUSH
14871: LD_INT 2
14873: PPUSH
14874: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
14878: LD_INT 48
14880: PPUSH
14881: LD_INT 8
14883: PPUSH
14884: LD_INT 2
14886: PPUSH
14887: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
14891: LD_INT 49
14893: PPUSH
14894: LD_INT 8
14896: PPUSH
14897: LD_INT 2
14899: PPUSH
14900: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
14904: LD_INT 51
14906: PPUSH
14907: LD_INT 8
14909: PPUSH
14910: LD_INT 2
14912: PPUSH
14913: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
14917: LD_INT 52
14919: PPUSH
14920: LD_INT 8
14922: PPUSH
14923: LD_INT 2
14925: PPUSH
14926: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
14930: LD_INT 66
14932: PPUSH
14933: LD_INT 8
14935: PPUSH
14936: LD_INT 2
14938: PPUSH
14939: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
14943: LD_INT 67
14945: PPUSH
14946: LD_INT 8
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: CALL_OW 322
// RU2KolvichArrival = 60 60$00 ;
14956: LD_ADDR_EXP 59
14960: PUSH
14961: LD_INT 126000
14963: ST_TO_ADDR
// GEODvaliArrival = 8 8$00 ;
14964: LD_ADDR_EXP 60
14968: PUSH
14969: LD_INT 16800
14971: ST_TO_ADDR
// DefenseTime = 20 20$00 ;
14972: LD_ADDR_EXP 61
14976: PUSH
14977: LD_INT 42000
14979: ST_TO_ADDR
// end ; if difficulty = 2 then
14980: LD_OWVAR 67
14984: PUSH
14985: LD_INT 2
14987: EQUAL
14988: IFFALSE 15428
// begin RuSolMinLevel = 7 ;
14990: LD_ADDR_EXP 56
14994: PUSH
14995: LD_INT 7
14997: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
14998: LD_ADDR_EXP 57
15002: PUSH
15003: LD_INT 9
15005: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
15006: LD_ADDR_EXP 58
15010: PUSH
15011: LD_INT 10
15013: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
15014: LD_INT 48
15016: PPUSH
15017: LD_INT 3
15019: PPUSH
15020: LD_INT 2
15022: PPUSH
15023: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15027: LD_INT 49
15029: PPUSH
15030: LD_INT 3
15032: PPUSH
15033: LD_INT 2
15035: PPUSH
15036: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15040: LD_INT 49
15042: PPUSH
15043: LD_INT 3
15045: PPUSH
15046: LD_INT 2
15048: PPUSH
15049: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
15053: LD_INT 51
15055: PPUSH
15056: LD_INT 3
15058: PPUSH
15059: LD_INT 2
15061: PPUSH
15062: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
15066: LD_INT 52
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: LD_INT 2
15074: PPUSH
15075: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
15079: LD_INT 57
15081: PPUSH
15082: LD_INT 3
15084: PPUSH
15085: LD_INT 2
15087: PPUSH
15088: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
15092: LD_INT 58
15094: PPUSH
15095: LD_INT 3
15097: PPUSH
15098: LD_INT 2
15100: PPUSH
15101: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
15105: LD_INT 63
15107: PPUSH
15108: LD_INT 3
15110: PPUSH
15111: LD_INT 2
15113: PPUSH
15114: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
15118: LD_INT 30
15120: PPUSH
15121: LD_INT 3
15123: PPUSH
15124: LD_INT 2
15126: PPUSH
15127: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15131: LD_INT 48
15133: PPUSH
15134: LD_INT 6
15136: PPUSH
15137: LD_INT 2
15139: PPUSH
15140: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15144: LD_INT 49
15146: PPUSH
15147: LD_INT 6
15149: PPUSH
15150: LD_INT 2
15152: PPUSH
15153: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
15157: LD_INT 50
15159: PPUSH
15160: LD_INT 6
15162: PPUSH
15163: LD_INT 2
15165: PPUSH
15166: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
15170: LD_INT 51
15172: PPUSH
15173: LD_INT 6
15175: PPUSH
15176: LD_INT 2
15178: PPUSH
15179: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
15183: LD_INT 52
15185: PPUSH
15186: LD_INT 6
15188: PPUSH
15189: LD_INT 2
15191: PPUSH
15192: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
15196: LD_INT 53
15198: PPUSH
15199: LD_INT 6
15201: PPUSH
15202: LD_INT 2
15204: PPUSH
15205: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
15209: LD_INT 57
15211: PPUSH
15212: LD_INT 6
15214: PPUSH
15215: LD_INT 2
15217: PPUSH
15218: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
15222: LD_INT 58
15224: PPUSH
15225: LD_INT 6
15227: PPUSH
15228: LD_INT 2
15230: PPUSH
15231: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
15235: LD_INT 59
15237: PPUSH
15238: LD_INT 6
15240: PPUSH
15241: LD_INT 2
15243: PPUSH
15244: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
15248: LD_INT 63
15250: PPUSH
15251: LD_INT 6
15253: PPUSH
15254: LD_INT 2
15256: PPUSH
15257: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
15261: LD_INT 64
15263: PPUSH
15264: LD_INT 6
15266: PPUSH
15267: LD_INT 2
15269: PPUSH
15270: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
15274: LD_INT 30
15276: PPUSH
15277: LD_INT 6
15279: PPUSH
15280: LD_INT 2
15282: PPUSH
15283: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
15287: LD_INT 28
15289: PPUSH
15290: LD_INT 6
15292: PPUSH
15293: LD_INT 2
15295: PPUSH
15296: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
15300: LD_INT 48
15302: PPUSH
15303: LD_INT 8
15305: PPUSH
15306: LD_INT 2
15308: PPUSH
15309: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
15313: LD_INT 49
15315: PPUSH
15316: LD_INT 8
15318: PPUSH
15319: LD_INT 2
15321: PPUSH
15322: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
15326: LD_INT 50
15328: PPUSH
15329: LD_INT 8
15331: PPUSH
15332: LD_INT 2
15334: PPUSH
15335: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
15339: LD_INT 51
15341: PPUSH
15342: LD_INT 8
15344: PPUSH
15345: LD_INT 2
15347: PPUSH
15348: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
15352: LD_INT 52
15354: PPUSH
15355: LD_INT 8
15357: PPUSH
15358: LD_INT 2
15360: PPUSH
15361: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
15365: LD_INT 66
15367: PPUSH
15368: LD_INT 8
15370: PPUSH
15371: LD_INT 2
15373: PPUSH
15374: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
15378: LD_INT 67
15380: PPUSH
15381: LD_INT 8
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
15391: LD_INT 5
15393: PPUSH
15394: LD_INT 8
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 322
// RU2KolvichArrival = 50 50$00 ;
15404: LD_ADDR_EXP 59
15408: PUSH
15409: LD_INT 105000
15411: ST_TO_ADDR
// GEODvaliArrival = 6 6$00 ;
15412: LD_ADDR_EXP 60
15416: PUSH
15417: LD_INT 12600
15419: ST_TO_ADDR
// DefenseTime = 30 30$00 ;
15420: LD_ADDR_EXP 61
15424: PUSH
15425: LD_INT 63000
15427: ST_TO_ADDR
// end ; if difficulty = 3 then
15428: LD_OWVAR 67
15432: PUSH
15433: LD_INT 3
15435: EQUAL
15436: IFFALSE 15967
// begin RuSolMinLevel = 9 ;
15438: LD_ADDR_EXP 56
15442: PUSH
15443: LD_INT 9
15445: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
15446: LD_ADDR_EXP 57
15450: PUSH
15451: LD_INT 10
15453: ST_TO_ADDR
// GeoSolMaxLevel = 10 ;
15454: LD_ADDR_EXP 58
15458: PUSH
15459: LD_INT 10
15461: ST_TO_ADDR
// SetTech ( tech_Tech1 , 3 , state_researched ) ;
15462: LD_INT 48
15464: PPUSH
15465: LD_INT 3
15467: PPUSH
15468: LD_INT 2
15470: PPUSH
15471: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
15475: LD_INT 51
15477: PPUSH
15478: LD_INT 3
15480: PPUSH
15481: LD_INT 2
15483: PPUSH
15484: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
15488: LD_INT 57
15490: PPUSH
15491: LD_INT 3
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: CALL_OW 322
// SetTech ( tech_Tech2 , 3 , state_researched ) ;
15501: LD_INT 49
15503: PPUSH
15504: LD_INT 3
15506: PPUSH
15507: LD_INT 2
15509: PPUSH
15510: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
15514: LD_INT 52
15516: PPUSH
15517: LD_INT 3
15519: PPUSH
15520: LD_INT 2
15522: PPUSH
15523: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
15527: LD_INT 58
15529: PPUSH
15530: LD_INT 3
15532: PPUSH
15533: LD_INT 2
15535: PPUSH
15536: CALL_OW 322
// SetTech ( tech_Tech3 , 3 , state_researched ) ;
15540: LD_INT 50
15542: PPUSH
15543: LD_INT 3
15545: PPUSH
15546: LD_INT 2
15548: PPUSH
15549: CALL_OW 322
// SetTech ( tech_Comp3 , 3 , state_researched ) ;
15553: LD_INT 59
15555: PPUSH
15556: LD_INT 3
15558: PPUSH
15559: LD_INT 2
15561: PPUSH
15562: CALL_OW 322
// SetTech ( tech_Weap3 , 3 , state_researched ) ;
15566: LD_INT 53
15568: PPUSH
15569: LD_INT 3
15571: PPUSH
15572: LD_INT 2
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
15579: LD_INT 63
15581: PPUSH
15582: LD_INT 3
15584: PPUSH
15585: LD_INT 2
15587: PPUSH
15588: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
15592: LD_INT 64
15594: PPUSH
15595: LD_INT 3
15597: PPUSH
15598: LD_INT 2
15600: PPUSH
15601: CALL_OW 322
// SetTech ( tech_TauField , 3 , state_researched ) ;
15605: LD_INT 30
15607: PPUSH
15608: LD_INT 3
15610: PPUSH
15611: LD_INT 2
15613: PPUSH
15614: CALL_OW 322
// SetTech ( tech_TauRad , 3 , state_researched ) ;
15618: LD_INT 28
15620: PPUSH
15621: LD_INT 3
15623: PPUSH
15624: LD_INT 2
15626: PPUSH
15627: CALL_OW 322
// SetTech ( tech_Tech1 , 6 , state_researched ) ;
15631: LD_INT 48
15633: PPUSH
15634: LD_INT 6
15636: PPUSH
15637: LD_INT 2
15639: PPUSH
15640: CALL_OW 322
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
15644: LD_INT 51
15646: PPUSH
15647: LD_INT 6
15649: PPUSH
15650: LD_INT 2
15652: PPUSH
15653: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
15657: LD_INT 57
15659: PPUSH
15660: LD_INT 6
15662: PPUSH
15663: LD_INT 2
15665: PPUSH
15666: CALL_OW 322
// SetTech ( tech_Tech2 , 6 , state_researched ) ;
15670: LD_INT 49
15672: PPUSH
15673: LD_INT 6
15675: PPUSH
15676: LD_INT 2
15678: PPUSH
15679: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
15683: LD_INT 52
15685: PPUSH
15686: LD_INT 6
15688: PPUSH
15689: LD_INT 2
15691: PPUSH
15692: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
15696: LD_INT 58
15698: PPUSH
15699: LD_INT 6
15701: PPUSH
15702: LD_INT 2
15704: PPUSH
15705: CALL_OW 322
// SetTech ( tech_Tech3 , 6 , state_researched ) ;
15709: LD_INT 50
15711: PPUSH
15712: LD_INT 6
15714: PPUSH
15715: LD_INT 2
15717: PPUSH
15718: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
15722: LD_INT 53
15724: PPUSH
15725: LD_INT 6
15727: PPUSH
15728: LD_INT 2
15730: PPUSH
15731: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
15735: LD_INT 59
15737: PPUSH
15738: LD_INT 6
15740: PPUSH
15741: LD_INT 2
15743: PPUSH
15744: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
15748: LD_INT 63
15750: PPUSH
15751: LD_INT 6
15753: PPUSH
15754: LD_INT 2
15756: PPUSH
15757: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
15761: LD_INT 64
15763: PPUSH
15764: LD_INT 6
15766: PPUSH
15767: LD_INT 2
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_ST3 , 6 , state_researched ) ;
15774: LD_INT 65
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: LD_INT 2
15782: PPUSH
15783: CALL_OW 322
// SetTech ( tech_TauField , 6 , state_researched ) ;
15787: LD_INT 30
15789: PPUSH
15790: LD_INT 6
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: CALL_OW 322
// SetTech ( tech_TauRad , 6 , state_researched ) ;
15800: LD_INT 28
15802: PPUSH
15803: LD_INT 6
15805: PPUSH
15806: LD_INT 2
15808: PPUSH
15809: CALL_OW 322
// SetTech ( tech_Tech1 , 8 , state_researched ) ;
15813: LD_INT 48
15815: PPUSH
15816: LD_INT 8
15818: PPUSH
15819: LD_INT 2
15821: PPUSH
15822: CALL_OW 322
// SetTech ( tech_Tech2 , 8 , state_researched ) ;
15826: LD_INT 49
15828: PPUSH
15829: LD_INT 8
15831: PPUSH
15832: LD_INT 2
15834: PPUSH
15835: CALL_OW 322
// SetTech ( tech_Tech3 , 8 , state_researched ) ;
15839: LD_INT 50
15841: PPUSH
15842: LD_INT 8
15844: PPUSH
15845: LD_INT 2
15847: PPUSH
15848: CALL_OW 322
// SetTech ( tech_Weap1 , 8 , state_researched ) ;
15852: LD_INT 51
15854: PPUSH
15855: LD_INT 8
15857: PPUSH
15858: LD_INT 2
15860: PPUSH
15861: CALL_OW 322
// SetTech ( tech_Weap2 , 8 , state_researched ) ;
15865: LD_INT 52
15867: PPUSH
15868: LD_INT 8
15870: PPUSH
15871: LD_INT 2
15873: PPUSH
15874: CALL_OW 322
// SetTech ( tech_Weap3 , 8 , state_researched ) ;
15878: LD_INT 53
15880: PPUSH
15881: LD_INT 8
15883: PPUSH
15884: LD_INT 2
15886: PPUSH
15887: CALL_OW 322
// SetTech ( tech_Bio1 , 8 , state_researched ) ;
15891: LD_INT 66
15893: PPUSH
15894: LD_INT 8
15896: PPUSH
15897: LD_INT 2
15899: PPUSH
15900: CALL_OW 322
// SetTech ( tech_Bio2 , 8 , state_researched ) ;
15904: LD_INT 67
15906: PPUSH
15907: LD_INT 8
15909: PPUSH
15910: LD_INT 2
15912: PPUSH
15913: CALL_OW 322
// SetTech ( tech_Bio3 , 8 , state_researched ) ;
15917: LD_INT 68
15919: PPUSH
15920: LD_INT 8
15922: PPUSH
15923: LD_INT 2
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_StimDrugs , 8 , state_researched ) ;
15930: LD_INT 5
15932: PPUSH
15933: LD_INT 8
15935: PPUSH
15936: LD_INT 2
15938: PPUSH
15939: CALL_OW 322
// RU2KolvichArrival = 45 45$00 ;
15943: LD_ADDR_EXP 59
15947: PUSH
15948: LD_INT 94500
15950: ST_TO_ADDR
// GEODvaliArrival = 4 4$00 ;
15951: LD_ADDR_EXP 60
15955: PUSH
15956: LD_INT 8400
15958: ST_TO_ADDR
// DefenseTime = 40 40$00 ;
15959: LD_ADDR_EXP 61
15963: PUSH
15964: LD_INT 84000
15966: ST_TO_ADDR
// end ; end ; end_of_file
15967: LD_VAR 0 1
15971: RET
// export AM_SquadOne , AM_SquadTwo , AM_SquadThree ; every 0 0$1 trigger MissionStart do
15972: LD_EXP 1
15976: IFFALSE 16198
15978: GO 15980
15980: DISABLE
// begin Wait ( 1 1$0 ) ;
15981: LD_INT 2100
15983: PPUSH
15984: CALL_OW 67
// ComBuild ( AM_Engineers , b_oil_mine , 63 , 69 , 0 ) ;
15988: LD_EXP 27
15992: PPUSH
15993: LD_INT 29
15995: PPUSH
15996: LD_INT 63
15998: PPUSH
15999: LD_INT 69
16001: PPUSH
16002: LD_INT 0
16004: PPUSH
16005: CALL_OW 145
// AddComBuild ( AM_Engineers , b_siberite_mine , 104 , 96 , 0 ) ;
16009: LD_EXP 27
16013: PPUSH
16014: LD_INT 30
16016: PPUSH
16017: LD_INT 104
16019: PPUSH
16020: LD_INT 96
16022: PPUSH
16023: LD_INT 0
16025: PPUSH
16026: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 97 , 0 ) ;
16030: LD_EXP 27
16034: PPUSH
16035: LD_INT 26
16037: PPUSH
16038: LD_INT 90
16040: PPUSH
16041: LD_INT 97
16043: PPUSH
16044: LD_INT 0
16046: PPUSH
16047: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 90 , 94 , 0 ) ;
16051: LD_EXP 27
16055: PPUSH
16056: LD_INT 26
16058: PPUSH
16059: LD_INT 90
16061: PPUSH
16062: LD_INT 94
16064: PPUSH
16065: LD_INT 0
16067: PPUSH
16068: CALL_OW 205
// AddComBuild ( AM_Engineers , b_oil_power , 83 , 96 , 0 ) ;
16072: LD_EXP 27
16076: PPUSH
16077: LD_INT 26
16079: PPUSH
16080: LD_INT 83
16082: PPUSH
16083: LD_INT 96
16085: PPUSH
16086: LD_INT 0
16088: PPUSH
16089: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_gun , 80 , 78 , 0 ) ;
16093: LD_EXP 27
16097: PPUSH
16098: LD_INT 17
16100: PPUSH
16101: LD_INT 80
16103: PPUSH
16104: LD_INT 78
16106: PPUSH
16107: LD_INT 0
16109: PPUSH
16110: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_rocket , 76 , 71 , 2 ) ;
16114: LD_EXP 27
16118: PPUSH
16119: LD_INT 18
16121: PPUSH
16122: LD_INT 76
16124: PPUSH
16125: LD_INT 71
16127: PPUSH
16128: LD_INT 2
16130: PPUSH
16131: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_computer , 79 , 71 , 3 ) ;
16135: LD_EXP 27
16139: PPUSH
16140: LD_INT 24
16142: PPUSH
16143: LD_INT 79
16145: PPUSH
16146: LD_INT 71
16148: PPUSH
16149: LD_INT 3
16151: PPUSH
16152: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_track , 83 , 75 , 4 ) ;
16156: LD_EXP 27
16160: PPUSH
16161: LD_INT 16
16163: PPUSH
16164: LD_INT 83
16166: PPUSH
16167: LD_INT 75
16169: PPUSH
16170: LD_INT 4
16172: PPUSH
16173: CALL_OW 205
// AddComBuild ( AM_Engineers , b_ext_laser , 76 , 73 , 1 ) ;
16177: LD_EXP 27
16181: PPUSH
16182: LD_INT 25
16184: PPUSH
16185: LD_INT 76
16187: PPUSH
16188: LD_INT 73
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 205
// end ;
16198: END
// export AM_Factory ; export function Construct_Vehicles ; var i ; begin
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
// AddResourceType ( GetBase ( AMBase ) , mat_oil , 500 ) ;
16203: LD_INT 351
16205: PPUSH
16206: CALL_OW 274
16210: PPUSH
16211: LD_INT 2
16213: PPUSH
16214: LD_INT 500
16216: PPUSH
16217: CALL_OW 276
// for i = 1 to 5 do
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: DOUBLE
16227: LD_INT 1
16229: DEC
16230: ST_TO_ADDR
16231: LD_INT 5
16233: PUSH
16234: FOR_TO
16235: IFFALSE 16278
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16237: LD_INT 351
16239: PPUSH
16240: CALL_OW 274
16244: PPUSH
16245: LD_INT 1
16247: PPUSH
16248: LD_INT 100
16250: PPUSH
16251: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_double_gun ) ;
16255: LD_EXP 65
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 3
16268: PPUSH
16269: LD_INT 5
16271: PPUSH
16272: CALL_OW 185
// end ;
16276: GO 16234
16278: POP
16279: POP
// for i = 1 to 4 do
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: DOUBLE
16286: LD_INT 1
16288: DEC
16289: ST_TO_ADDR
16290: LD_INT 4
16292: PUSH
16293: FOR_TO
16294: IFFALSE 16337
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16296: LD_INT 351
16298: PPUSH
16299: CALL_OW 274
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: LD_INT 100
16309: PPUSH
16310: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_rocket_launcher ) ;
16314: LD_EXP 65
16318: PPUSH
16319: LD_INT 3
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: LD_INT 3
16327: PPUSH
16328: LD_INT 7
16330: PPUSH
16331: CALL_OW 185
// end ;
16335: GO 16293
16337: POP
16338: POP
// for i = 1 to 7 do
16339: LD_ADDR_VAR 0 2
16343: PUSH
16344: DOUBLE
16345: LD_INT 1
16347: DEC
16348: ST_TO_ADDR
16349: LD_INT 7
16351: PUSH
16352: FOR_TO
16353: IFFALSE 16396
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16355: LD_INT 351
16357: PPUSH
16358: CALL_OW 274
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: LD_INT 100
16368: PPUSH
16369: CALL_OW 276
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun ) ;
16373: LD_EXP 65
16377: PPUSH
16378: LD_INT 4
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: LD_INT 3
16386: PPUSH
16387: LD_INT 6
16389: PPUSH
16390: CALL_OW 185
// end ;
16394: GO 16352
16396: POP
16397: POP
// for i = 1 to 4 do
16398: LD_ADDR_VAR 0 2
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 4
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16455
// begin AddResourceType ( GetBase ( AMBase ) , mat_cans , 100 ) ;
16414: LD_INT 351
16416: PPUSH
16417: CALL_OW 274
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: LD_INT 100
16427: PPUSH
16428: CALL_OW 276
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_computer , us_laser ) ;
16432: LD_EXP 65
16436: PPUSH
16437: LD_INT 3
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: LD_INT 3
16445: PPUSH
16446: LD_INT 9
16448: PPUSH
16449: CALL_OW 185
// end ;
16453: GO 16411
16455: POP
16456: POP
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
16457: LD_EXP 65
16461: PPUSH
16462: LD_INT 3
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: LD_INT 1
16470: PPUSH
16471: LD_INT 9
16473: PPUSH
16474: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_laser ) ;
16478: LD_EXP 65
16482: PPUSH
16483: LD_INT 3
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_INT 9
16494: PPUSH
16495: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
16499: LD_EXP 65
16503: PPUSH
16504: LD_INT 4
16506: PPUSH
16507: LD_INT 1
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_INT 6
16515: PPUSH
16516: CALL_OW 185
// AddComConstruct ( AM_Factory , us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ) ;
16520: LD_EXP 65
16524: PPUSH
16525: LD_INT 4
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_INT 6
16536: PPUSH
16537: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
16541: LD_EXP 65
16545: PPUSH
16546: LD_INT 3
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_INT 7
16557: PPUSH
16558: CALL_OW 185
// AddComConstruct ( AM_Factory , us_medium_tracked , engine_combustion , control_manual , us_rocket_launcher ) ;
16562: LD_EXP 65
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_INT 7
16578: PPUSH
16579: CALL_OW 185
// end ;
16583: LD_VAR 0 1
16587: RET
// export function CustomInitMacro ( ) ; begin
16588: LD_INT 0
16590: PPUSH
// MC_SetScanArea ( 1 , RU_Ustinov_Area ) ;
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 14
16596: PPUSH
16597: CALL 77758 0 2
// MC_SetParkingArea ( 1 , RU_Ustinov_Parking ) ;
16601: LD_INT 1
16603: PPUSH
16604: LD_INT 15
16606: PPUSH
16607: CALL 77702 0 2
// MC_SetDepositsXY ( 1 , [ [ 266 , 105 , 1 ] , ] ) ;
16611: LD_INT 1
16613: PPUSH
16614: LD_INT 266
16616: PUSH
16617: LD_INT 105
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: PPUSH
16631: CALL 76822 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_laser , ru_rocket , ru_rocket_battery , ru_radar ] ) ;
16635: LD_INT 1
16637: PPUSH
16638: LD_INT 43
16640: PUSH
16641: LD_INT 46
16643: PUSH
16644: LD_INT 45
16646: PUSH
16647: LD_EXP 114
16651: PUSH
16652: LD_INT 47
16654: PUSH
16655: LD_EXP 115
16659: PUSH
16660: LD_EXP 117
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL 77590 0 2
// MC_SetCratesArea ( 1 , RU_Ustinov_Crates ) ;
16678: LD_INT 1
16680: PPUSH
16681: LD_INT 16
16683: PPUSH
16684: CALL 77270 0 2
// MC_SetTame ( 1 , RU_Ustinov_Crates ) ;
16688: LD_INT 1
16690: PPUSH
16691: LD_INT 16
16693: PPUSH
16694: CALL 77001 0 2
// MC_SetDefenderLimit ( 1 , 9 ) ;
16698: LD_INT 1
16700: PPUSH
16701: LD_INT 9
16703: PPUSH
16704: CALL 76683 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
16708: LD_INT 1
16710: PPUSH
16711: LD_INT 22
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: LD_INT 43
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 44
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: LD_INT 3
16755: PUSH
16756: LD_INT 45
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: LD_INT 45
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 24
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: LD_INT 3
16791: PUSH
16792: LD_INT 43
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 24
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 3
16809: PUSH
16810: LD_INT 46
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL 76437 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 36 , 29 , 2 ] , [ b_armoury , 51 , 45 , 5 ] , [ b_armoury , 33 , 45 , 0 ] , [ b_lab , 38 , 16 , 1 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 22 , 7 , 1 ] , [ b_siberite_mine , 7 , 6 , 1 ] , [ b_siberite_power , 15 , 24 , 1 ] , [ b_siberite_power , 20 , 26 , 2 ] , [ b_siberite_power , 26 , 27 , 5 ] , [ b_bunker , 27 , 42 , 0 ] , [ b_bunker , 42 , 47 , 5 ] , [ b_bunker , 49 , 48 , 5 ] , [ b_bunker , 53 , 43 , 5 ] , [ b_bunker , 54 , 39 , 4 ] , [ b_bunker , 55 , 36 , 5 ] , [ b_bunker , 53 , 31 , 4 ] , ] ) ;
16831: LD_INT 1
16833: PPUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 36
16839: PUSH
16840: LD_INT 29
16842: PUSH
16843: LD_INT 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 4
16854: PUSH
16855: LD_INT 51
16857: PUSH
16858: LD_INT 45
16860: PUSH
16861: LD_INT 5
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 4
16872: PUSH
16873: LD_INT 33
16875: PUSH
16876: LD_INT 45
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 6
16890: PUSH
16891: LD_INT 38
16893: PUSH
16894: LD_INT 16
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 6
16908: PUSH
16909: LD_INT 46
16911: PUSH
16912: LD_INT 27
16914: PUSH
16915: LD_INT 5
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 2
16926: PUSH
16927: LD_INT 24
16929: PUSH
16930: LD_INT 34
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 29
16944: PUSH
16945: LD_INT 22
16947: PUSH
16948: LD_INT 7
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 30
16962: PUSH
16963: LD_INT 7
16965: PUSH
16966: LD_INT 6
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 28
16980: PUSH
16981: LD_INT 15
16983: PUSH
16984: LD_INT 24
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 28
16998: PUSH
16999: LD_INT 20
17001: PUSH
17002: LD_INT 26
17004: PUSH
17005: LD_INT 2
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 28
17016: PUSH
17017: LD_INT 26
17019: PUSH
17020: LD_INT 27
17022: PUSH
17023: LD_INT 5
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 32
17034: PUSH
17035: LD_INT 27
17037: PUSH
17038: LD_INT 42
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 32
17052: PUSH
17053: LD_INT 42
17055: PUSH
17056: LD_INT 47
17058: PUSH
17059: LD_INT 5
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 32
17070: PUSH
17071: LD_INT 49
17073: PUSH
17074: LD_INT 48
17076: PUSH
17077: LD_INT 5
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 32
17088: PUSH
17089: LD_INT 53
17091: PUSH
17092: LD_INT 43
17094: PUSH
17095: LD_INT 5
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 32
17106: PUSH
17107: LD_INT 54
17109: PUSH
17110: LD_INT 39
17112: PUSH
17113: LD_INT 4
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 32
17124: PUSH
17125: LD_INT 55
17127: PUSH
17128: LD_INT 36
17130: PUSH
17131: LD_INT 5
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 32
17142: PUSH
17143: LD_INT 53
17145: PUSH
17146: LD_INT 31
17148: PUSH
17149: LD_INT 4
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL 76310 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 10
17187: PUSH
17188: LD_INT 12
17190: PUSH
17191: LD_INT 14
17193: PUSH
17194: LD_INT 11
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL 77177 0 2
// MC_SetFactoryExtension ( 1 , 24 , 34 , 1 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
17207: LD_INT 1
17209: PPUSH
17210: LD_INT 24
17212: PPUSH
17213: LD_INT 34
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: LD_INT 24
17221: PUSH
17222: LD_INT 16
17224: PUSH
17225: LD_INT 17
17227: PUSH
17228: LD_INT 18
17230: PUSH
17231: LD_INT 21
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL 77384 0 5
// MC_SetScanArea ( 2 , RU2_Kolvich_Area ) ;
17245: LD_INT 2
17247: PPUSH
17248: LD_INT 17
17250: PPUSH
17251: CALL 77758 0 2
// MC_SetParkingArea ( 2 , RU2_Kolvich_Parking ) ;
17255: LD_INT 2
17257: PPUSH
17258: LD_INT 18
17260: PPUSH
17261: CALL 77702 0 2
// MC_SetDepositsXY ( 2 , [ [ 63 , 69 , 0 ] , [ 104 , 96 , 1 ] , [ 105 , 155 , 0 ] , [ 126 , 151 , 1 ] , ] ) ;
17265: LD_INT 2
17267: PPUSH
17268: LD_INT 63
17270: PUSH
17271: LD_INT 69
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 104
17284: PUSH
17285: LD_INT 96
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 105
17298: PUSH
17299: LD_INT 155
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 126
17312: PUSH
17313: LD_INT 151
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL 76822 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_rocket_battery , ru_flame_thrower ] ) ;
17334: LD_INT 2
17336: PPUSH
17337: LD_INT 43
17339: PUSH
17340: LD_INT 46
17342: PUSH
17343: LD_INT 45
17345: PUSH
17346: LD_INT 47
17348: PUSH
17349: LD_EXP 115
17353: PUSH
17354: LD_EXP 116
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL 77590 0 2
// MC_SetCratesArea ( 2 , RU2_Kolvich_CratesApes ) ;
17371: LD_INT 2
17373: PPUSH
17374: LD_INT 19
17376: PPUSH
17377: CALL 77270 0 2
// MC_SetTame ( 2 , RU2_Kolvich_CratesApes ) ;
17381: LD_INT 2
17383: PPUSH
17384: LD_INT 19
17386: PPUSH
17387: CALL 77001 0 2
// MC_SetDefenderLimit ( 2 , 10 ) ;
17391: LD_INT 2
17393: PPUSH
17394: LD_INT 10
17396: PPUSH
17397: CALL 76683 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
17401: LD_INT 2
17403: PPUSH
17404: LD_INT 22
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 43
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 22
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 44
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 22
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: LD_INT 45
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 45
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 43
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 22
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 44
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 22
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 45
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 1
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 45
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 43
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 24
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: LD_INT 3
17574: PUSH
17575: LD_INT 46
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL 76437 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 90 , 88 , 5 ] , [ b_armoury , 102 , 85 , 4 ] , [ b_armoury , 100 , 103 , 4 ] , [ b_lab , 70 , 90 , 0 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 63 , 69 , 1 ] , [ b_siberite_mine , 104 , 96 , 1 ] , [ b_siberite_power , 72 , 79 , 1 ] , [ b_bunker , 93 , 70 , 4 ] , [ b_bunker , 98 , 80 , 4 ] , [ b_bunker , 106 , 89 , 4 ] , [ b_bunker , 108 , 102 , 5 ] , [ b_bunker , 80 , 99 , 0 ] , ] ) ;
17600: LD_INT 2
17602: PPUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 90
17608: PUSH
17609: LD_INT 88
17611: PUSH
17612: LD_INT 5
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 4
17623: PUSH
17624: LD_INT 102
17626: PUSH
17627: LD_INT 85
17629: PUSH
17630: LD_INT 4
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 4
17641: PUSH
17642: LD_INT 100
17644: PUSH
17645: LD_INT 103
17647: PUSH
17648: LD_INT 4
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 6
17659: PUSH
17660: LD_INT 70
17662: PUSH
17663: LD_INT 90
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 6
17677: PUSH
17678: LD_INT 46
17680: PUSH
17681: LD_INT 27
17683: PUSH
17684: LD_INT 5
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 24
17698: PUSH
17699: LD_INT 34
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 29
17713: PUSH
17714: LD_INT 63
17716: PUSH
17717: LD_INT 69
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 30
17731: PUSH
17732: LD_INT 104
17734: PUSH
17735: LD_INT 96
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 28
17749: PUSH
17750: LD_INT 72
17752: PUSH
17753: LD_INT 79
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 32
17767: PUSH
17768: LD_INT 93
17770: PUSH
17771: LD_INT 70
17773: PUSH
17774: LD_INT 4
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 32
17785: PUSH
17786: LD_INT 98
17788: PUSH
17789: LD_INT 80
17791: PUSH
17792: LD_INT 4
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 32
17803: PUSH
17804: LD_INT 106
17806: PUSH
17807: LD_INT 89
17809: PUSH
17810: LD_INT 4
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 32
17821: PUSH
17822: LD_INT 108
17824: PUSH
17825: LD_INT 102
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 32
17839: PUSH
17840: LD_INT 80
17842: PUSH
17843: LD_INT 99
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: PPUSH
17871: CALL 76310 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
17875: LD_INT 2
17877: PPUSH
17878: LD_INT 10
17880: PUSH
17881: LD_INT 12
17883: PUSH
17884: LD_INT 14
17886: PUSH
17887: LD_INT 11
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL 77177 0 2
// MC_SetFactoryExtension ( 2 , 80 , 75 , 2 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
17900: LD_INT 2
17902: PPUSH
17903: LD_INT 80
17905: PPUSH
17906: LD_INT 75
17908: PPUSH
17909: LD_INT 2
17911: PPUSH
17912: LD_INT 24
17914: PUSH
17915: LD_INT 16
17917: PUSH
17918: LD_INT 17
17920: PUSH
17921: LD_INT 18
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL 77384 0 5
// end ;
17938: LD_VAR 0 1
17942: RET
// every 5 5$0 trigger KolvichAttacks do
17943: LD_EXP 24
17947: IFFALSE 18447
17949: GO 17951
17951: DISABLE
// begin enable ;
17952: ENABLE
// case Rand ( 1 , 3 ) of 1 :
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 3
17958: PPUSH
17959: CALL_OW 12
17963: PUSH
17964: LD_INT 1
17966: DOUBLE
17967: EQUAL
17968: IFTRUE 17972
17970: GO 18205
17972: POP
// begin RespawnAttackVehicle ( RU2_Kolvich_ArmySpawn , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , 1 ) ;
17973: LD_INT 20
17975: PPUSH
17976: LD_INT 6
17978: PPUSH
17979: LD_INT 5
17981: PPUSH
17982: LD_INT 8
17984: PPUSH
17985: CALL_OW 12
17989: PPUSH
17990: LD_EXP 57
17994: PPUSH
17995: LD_INT 3
17997: PPUSH
17998: LD_INT 3
18000: PPUSH
18001: LD_INT 1
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PPUSH
18011: EMPTY
18012: PPUSH
18013: LD_INT 46
18015: PUSH
18016: LD_INT 43
18018: PUSH
18019: LD_INT 44
18021: PUSH
18022: LD_INT 47
18024: PUSH
18025: LD_INT 45
18027: PUSH
18028: LD_INT 74
18030: PUSH
18031: LD_INT 75
18033: PUSH
18034: LD_INT 76
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PPUSH
18047: EMPTY
18048: PPUSH
18049: LD_INT 1
18051: PPUSH
18052: CALL 12199 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , RU2_Kolvich_ArmySpawn , 1 ) ;
18056: LD_INT 6
18058: PPUSH
18059: LD_INT 3
18061: PPUSH
18062: LD_INT 6
18064: PPUSH
18065: LD_INT 8
18067: PPUSH
18068: CALL_OW 12
18072: PPUSH
18073: LD_INT 0
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: LD_INT 3
18081: PPUSH
18082: CALL_OW 12
18086: PPUSH
18087: LD_INT 0
18089: PPUSH
18090: LD_INT 2
18092: PPUSH
18093: LD_EXP 57
18097: PPUSH
18098: LD_INT 20
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: CALL 13862 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 146 , 86 ] , [ 219 , 83 ] , [ 256 , 101 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
18108: LD_INT 0
18110: PUSH
18111: LD_EXP 54
18115: PUSH
18116: LD_INT 146
18118: PUSH
18119: LD_INT 86
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 219
18128: PUSH
18129: LD_INT 83
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 256
18138: PUSH
18139: LD_INT 101
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL 53474 0 1
// end ; 2 :
18203: GO 18447
18205: LD_INT 2
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18446
18213: POP
// begin RespawnAttackVehicle ( DvaliSpawn_N , 6 , Rand ( 5 , 8 ) , RuSolMaxLevel , 3 , engine_siberite , [ 1 , 3 ] , [ ] , [ 46 , 43 , 44 , 47 , 45 , 74 , 75 , 76 ] , [ ] , 1 ) ;
18214: LD_INT 10
18216: PPUSH
18217: LD_INT 6
18219: PPUSH
18220: LD_INT 5
18222: PPUSH
18223: LD_INT 8
18225: PPUSH
18226: CALL_OW 12
18230: PPUSH
18231: LD_EXP 57
18235: PPUSH
18236: LD_INT 3
18238: PPUSH
18239: LD_INT 3
18241: PPUSH
18242: LD_INT 1
18244: PUSH
18245: LD_INT 3
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: EMPTY
18253: PPUSH
18254: LD_INT 46
18256: PUSH
18257: LD_INT 43
18259: PUSH
18260: LD_INT 44
18262: PUSH
18263: LD_INT 47
18265: PUSH
18266: LD_INT 45
18268: PUSH
18269: LD_INT 74
18271: PUSH
18272: LD_INT 75
18274: PUSH
18275: LD_INT 76
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: PPUSH
18288: EMPTY
18289: PPUSH
18290: LD_INT 1
18292: PPUSH
18293: CALL 12199 0 11
// RespawnAttackInfantry ( 6 , 3 , Rand ( 6 , 8 ) , 0 , Rand ( 1 , 3 ) , 0 , 2 , RuSolMaxLevel , DvaliSpawn_N , 1 ) ;
18297: LD_INT 6
18299: PPUSH
18300: LD_INT 3
18302: PPUSH
18303: LD_INT 6
18305: PPUSH
18306: LD_INT 8
18308: PPUSH
18309: CALL_OW 12
18313: PPUSH
18314: LD_INT 0
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: LD_INT 3
18322: PPUSH
18323: CALL_OW 12
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: LD_INT 2
18333: PPUSH
18334: LD_EXP 57
18338: PPUSH
18339: LD_INT 10
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL 13862 0 10
// Attack ( [ 0 , MC_attack_group , [ [ 181 , 21 ] , [ 226 , 72 ] , [ 225 , 103 ] ] , [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ] ) ;
18349: LD_INT 0
18351: PUSH
18352: LD_EXP 54
18356: PUSH
18357: LD_INT 181
18359: PUSH
18360: LD_INT 21
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 226
18369: PUSH
18370: LD_INT 72
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 225
18379: PUSH
18380: LD_INT 103
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: PPUSH
18440: CALL 53474 0 1
// end ; end ;
18444: GO 18447
18446: POP
// end ; end_of_file
18447: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18448: LD_INT 0
18450: PPUSH
18451: PPUSH
// if exist_mode then
18452: LD_VAR 0 2
18456: IFFALSE 18481
// unit := CreateCharacter ( prefix & ident ) else
18458: LD_ADDR_VAR 0 5
18462: PUSH
18463: LD_VAR 0 3
18467: PUSH
18468: LD_VAR 0 1
18472: STR
18473: PPUSH
18474: CALL_OW 34
18478: ST_TO_ADDR
18479: GO 18496
// unit := NewCharacter ( ident ) ;
18481: LD_ADDR_VAR 0 5
18485: PUSH
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 25
18495: ST_TO_ADDR
// result := unit ;
18496: LD_ADDR_VAR 0 4
18500: PUSH
18501: LD_VAR 0 5
18505: ST_TO_ADDR
// end ;
18506: LD_VAR 0 4
18510: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18511: LD_INT 0
18513: PPUSH
18514: PPUSH
// if not side or not nation then
18515: LD_VAR 0 1
18519: NOT
18520: PUSH
18521: LD_VAR 0 2
18525: NOT
18526: OR
18527: IFFALSE 18531
// exit ;
18529: GO 19167
// case nation of nation_american :
18531: LD_VAR 0 2
18535: PUSH
18536: LD_INT 1
18538: DOUBLE
18539: EQUAL
18540: IFTRUE 18544
18542: GO 18714
18544: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: LD_INT 35
18552: PUSH
18553: LD_INT 45
18555: PUSH
18556: LD_INT 46
18558: PUSH
18559: LD_INT 47
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 6
18570: PUSH
18571: LD_INT 15
18573: PUSH
18574: LD_INT 16
18576: PUSH
18577: LD_INT 7
18579: PUSH
18580: LD_INT 12
18582: PUSH
18583: LD_INT 13
18585: PUSH
18586: LD_INT 10
18588: PUSH
18589: LD_INT 14
18591: PUSH
18592: LD_INT 20
18594: PUSH
18595: LD_INT 21
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_INT 25
18603: PUSH
18604: LD_INT 32
18606: PUSH
18607: LD_INT 27
18609: PUSH
18610: LD_INT 36
18612: PUSH
18613: LD_INT 69
18615: PUSH
18616: LD_INT 39
18618: PUSH
18619: LD_INT 34
18621: PUSH
18622: LD_INT 40
18624: PUSH
18625: LD_INT 48
18627: PUSH
18628: LD_INT 49
18630: PUSH
18631: LD_INT 50
18633: PUSH
18634: LD_INT 51
18636: PUSH
18637: LD_INT 52
18639: PUSH
18640: LD_INT 53
18642: PUSH
18643: LD_INT 54
18645: PUSH
18646: LD_INT 55
18648: PUSH
18649: LD_INT 56
18651: PUSH
18652: LD_INT 57
18654: PUSH
18655: LD_INT 58
18657: PUSH
18658: LD_INT 59
18660: PUSH
18661: LD_INT 60
18663: PUSH
18664: LD_INT 61
18666: PUSH
18667: LD_INT 62
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 19091
18714: LD_INT 2
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18900
18722: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_INT 35
18730: PUSH
18731: LD_INT 45
18733: PUSH
18734: LD_INT 46
18736: PUSH
18737: LD_INT 47
18739: PUSH
18740: LD_INT 70
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 11
18748: PUSH
18749: LD_INT 3
18751: PUSH
18752: LD_INT 4
18754: PUSH
18755: LD_INT 5
18757: PUSH
18758: LD_INT 6
18760: PUSH
18761: LD_INT 15
18763: PUSH
18764: LD_INT 18
18766: PUSH
18767: LD_INT 7
18769: PUSH
18770: LD_INT 17
18772: PUSH
18773: LD_INT 8
18775: PUSH
18776: LD_INT 20
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 22
18784: PUSH
18785: LD_INT 72
18787: PUSH
18788: LD_INT 26
18790: PUSH
18791: LD_INT 69
18793: PUSH
18794: LD_INT 39
18796: PUSH
18797: LD_INT 40
18799: PUSH
18800: LD_INT 41
18802: PUSH
18803: LD_INT 42
18805: PUSH
18806: LD_INT 43
18808: PUSH
18809: LD_INT 48
18811: PUSH
18812: LD_INT 49
18814: PUSH
18815: LD_INT 50
18817: PUSH
18818: LD_INT 51
18820: PUSH
18821: LD_INT 52
18823: PUSH
18824: LD_INT 53
18826: PUSH
18827: LD_INT 54
18829: PUSH
18830: LD_INT 55
18832: PUSH
18833: LD_INT 56
18835: PUSH
18836: LD_INT 60
18838: PUSH
18839: LD_INT 61
18841: PUSH
18842: LD_INT 62
18844: PUSH
18845: LD_INT 66
18847: PUSH
18848: LD_INT 67
18850: PUSH
18851: LD_INT 68
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
18898: GO 19091
18900: LD_INT 3
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 19090
18908: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
18909: LD_ADDR_VAR 0 4
18913: PUSH
18914: LD_INT 46
18916: PUSH
18917: LD_INT 47
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: LD_INT 11
18928: PUSH
18929: LD_INT 9
18931: PUSH
18932: LD_INT 20
18934: PUSH
18935: LD_INT 19
18937: PUSH
18938: LD_INT 21
18940: PUSH
18941: LD_INT 24
18943: PUSH
18944: LD_INT 22
18946: PUSH
18947: LD_INT 25
18949: PUSH
18950: LD_INT 28
18952: PUSH
18953: LD_INT 29
18955: PUSH
18956: LD_INT 30
18958: PUSH
18959: LD_INT 31
18961: PUSH
18962: LD_INT 37
18964: PUSH
18965: LD_INT 38
18967: PUSH
18968: LD_INT 32
18970: PUSH
18971: LD_INT 27
18973: PUSH
18974: LD_INT 33
18976: PUSH
18977: LD_INT 69
18979: PUSH
18980: LD_INT 39
18982: PUSH
18983: LD_INT 34
18985: PUSH
18986: LD_INT 40
18988: PUSH
18989: LD_INT 71
18991: PUSH
18992: LD_INT 23
18994: PUSH
18995: LD_INT 44
18997: PUSH
18998: LD_INT 48
19000: PUSH
19001: LD_INT 49
19003: PUSH
19004: LD_INT 50
19006: PUSH
19007: LD_INT 51
19009: PUSH
19010: LD_INT 52
19012: PUSH
19013: LD_INT 53
19015: PUSH
19016: LD_INT 54
19018: PUSH
19019: LD_INT 55
19021: PUSH
19022: LD_INT 56
19024: PUSH
19025: LD_INT 57
19027: PUSH
19028: LD_INT 58
19030: PUSH
19031: LD_INT 59
19033: PUSH
19034: LD_INT 63
19036: PUSH
19037: LD_INT 64
19039: PUSH
19040: LD_INT 65
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
19088: GO 19091
19090: POP
// if state > - 1 and state < 3 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: GREATER
19100: PUSH
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 3
19108: LESS
19109: AND
19110: IFFALSE 19167
// for i in result do
19112: LD_ADDR_VAR 0 5
19116: PUSH
19117: LD_VAR 0 4
19121: PUSH
19122: FOR_IN
19123: IFFALSE 19165
// if GetTech ( i , side ) <> state then
19125: LD_VAR 0 5
19129: PPUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 321
19139: PUSH
19140: LD_VAR 0 3
19144: NONEQUAL
19145: IFFALSE 19163
// result := result diff i ;
19147: LD_ADDR_VAR 0 4
19151: PUSH
19152: LD_VAR 0 4
19156: PUSH
19157: LD_VAR 0 5
19161: DIFF
19162: ST_TO_ADDR
19163: GO 19122
19165: POP
19166: POP
// end ;
19167: LD_VAR 0 4
19171: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19172: LD_INT 0
19174: PPUSH
19175: PPUSH
19176: PPUSH
// result := true ;
19177: LD_ADDR_VAR 0 3
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19185: LD_ADDR_VAR 0 5
19189: PUSH
19190: LD_VAR 0 2
19194: PPUSH
19195: CALL_OW 480
19199: ST_TO_ADDR
// if not tmp then
19200: LD_VAR 0 5
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19258
// for i in tmp do
19209: LD_ADDR_VAR 0 4
19213: PUSH
19214: LD_VAR 0 5
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19256
// if GetTech ( i , side ) <> state_researched then
19222: LD_VAR 0 4
19226: PPUSH
19227: LD_VAR 0 1
19231: PPUSH
19232: CALL_OW 321
19236: PUSH
19237: LD_INT 2
19239: NONEQUAL
19240: IFFALSE 19254
// begin result := false ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_INT 0
19249: ST_TO_ADDR
// exit ;
19250: POP
19251: POP
19252: GO 19258
// end ;
19254: GO 19219
19256: POP
19257: POP
// end ;
19258: LD_VAR 0 3
19262: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19263: LD_INT 0
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
19272: PPUSH
19273: PPUSH
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19278: LD_VAR 0 1
19282: NOT
19283: PUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL_OW 257
19293: PUSH
19294: LD_INT 9
19296: NONEQUAL
19297: OR
19298: IFFALSE 19302
// exit ;
19300: GO 19875
// side := GetSide ( unit ) ;
19302: LD_ADDR_VAR 0 9
19306: PUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 255
19316: ST_TO_ADDR
// tech_space := tech_spacanom ;
19317: LD_ADDR_VAR 0 12
19321: PUSH
19322: LD_INT 29
19324: ST_TO_ADDR
// tech_time := tech_taurad ;
19325: LD_ADDR_VAR 0 13
19329: PUSH
19330: LD_INT 28
19332: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19333: LD_ADDR_VAR 0 11
19337: PUSH
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 310
19347: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19348: LD_VAR 0 11
19352: PPUSH
19353: CALL_OW 247
19357: PUSH
19358: LD_INT 2
19360: EQUAL
19361: IFFALSE 19365
// exit ;
19363: GO 19875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19365: LD_ADDR_VAR 0 8
19369: PUSH
19370: LD_INT 81
19372: PUSH
19373: LD_VAR 0 9
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 3
19384: PUSH
19385: LD_INT 21
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: ST_TO_ADDR
// if not tmp then
19408: LD_VAR 0 8
19412: NOT
19413: IFFALSE 19417
// exit ;
19415: GO 19875
// if in_unit then
19417: LD_VAR 0 11
19421: IFFALSE 19445
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19423: LD_ADDR_VAR 0 10
19427: PUSH
19428: LD_VAR 0 8
19432: PPUSH
19433: LD_VAR 0 11
19437: PPUSH
19438: CALL_OW 74
19442: ST_TO_ADDR
19443: GO 19465
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19445: LD_ADDR_VAR 0 10
19449: PUSH
19450: LD_VAR 0 8
19454: PPUSH
19455: LD_VAR 0 1
19459: PPUSH
19460: CALL_OW 74
19464: ST_TO_ADDR
// if not enemy then
19465: LD_VAR 0 10
19469: NOT
19470: IFFALSE 19474
// exit ;
19472: GO 19875
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19474: LD_VAR 0 11
19478: PUSH
19479: LD_VAR 0 11
19483: PPUSH
19484: LD_VAR 0 10
19488: PPUSH
19489: CALL_OW 296
19493: PUSH
19494: LD_INT 13
19496: GREATER
19497: AND
19498: PUSH
19499: LD_VAR 0 1
19503: PPUSH
19504: LD_VAR 0 10
19508: PPUSH
19509: CALL_OW 296
19513: PUSH
19514: LD_INT 12
19516: GREATER
19517: OR
19518: IFFALSE 19522
// exit ;
19520: GO 19875
// missile := [ 1 ] ;
19522: LD_ADDR_VAR 0 14
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19533: LD_VAR 0 9
19537: PPUSH
19538: LD_VAR 0 12
19542: PPUSH
19543: CALL_OW 325
19547: IFFALSE 19576
// missile := Insert ( missile , missile + 1 , 2 ) ;
19549: LD_ADDR_VAR 0 14
19553: PUSH
19554: LD_VAR 0 14
19558: PPUSH
19559: LD_VAR 0 14
19563: PUSH
19564: LD_INT 1
19566: PLUS
19567: PPUSH
19568: LD_INT 2
19570: PPUSH
19571: CALL_OW 2
19575: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19576: LD_VAR 0 9
19580: PPUSH
19581: LD_VAR 0 13
19585: PPUSH
19586: CALL_OW 325
19590: PUSH
19591: LD_VAR 0 10
19595: PPUSH
19596: CALL_OW 255
19600: PPUSH
19601: LD_VAR 0 13
19605: PPUSH
19606: CALL_OW 325
19610: NOT
19611: AND
19612: IFFALSE 19641
// missile := Insert ( missile , missile + 1 , 3 ) ;
19614: LD_ADDR_VAR 0 14
19618: PUSH
19619: LD_VAR 0 14
19623: PPUSH
19624: LD_VAR 0 14
19628: PUSH
19629: LD_INT 1
19631: PLUS
19632: PPUSH
19633: LD_INT 3
19635: PPUSH
19636: CALL_OW 2
19640: ST_TO_ADDR
// if missile < 2 then
19641: LD_VAR 0 14
19645: PUSH
19646: LD_INT 2
19648: LESS
19649: IFFALSE 19653
// exit ;
19651: GO 19875
// x := GetX ( enemy ) ;
19653: LD_ADDR_VAR 0 4
19657: PUSH
19658: LD_VAR 0 10
19662: PPUSH
19663: CALL_OW 250
19667: ST_TO_ADDR
// y := GetY ( enemy ) ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_VAR 0 10
19677: PPUSH
19678: CALL_OW 251
19682: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19683: LD_ADDR_VAR 0 6
19687: PUSH
19688: LD_VAR 0 4
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PPUSH
19697: LD_INT 1
19699: PPUSH
19700: CALL_OW 12
19704: PLUS
19705: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19706: LD_ADDR_VAR 0 7
19710: PUSH
19711: LD_VAR 0 5
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 12
19727: PLUS
19728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19729: LD_VAR 0 6
19733: PPUSH
19734: LD_VAR 0 7
19738: PPUSH
19739: CALL_OW 488
19743: NOT
19744: IFFALSE 19766
// begin _x := x ;
19746: LD_ADDR_VAR 0 6
19750: PUSH
19751: LD_VAR 0 4
19755: ST_TO_ADDR
// _y := y ;
19756: LD_ADDR_VAR 0 7
19760: PUSH
19761: LD_VAR 0 5
19765: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19766: LD_ADDR_VAR 0 3
19770: PUSH
19771: LD_INT 1
19773: PPUSH
19774: LD_VAR 0 14
19778: PPUSH
19779: CALL_OW 12
19783: ST_TO_ADDR
// case i of 1 :
19784: LD_VAR 0 3
19788: PUSH
19789: LD_INT 1
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19814
19797: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19798: LD_VAR 0 1
19802: PPUSH
19803: LD_VAR 0 10
19807: PPUSH
19808: CALL_OW 115
19812: GO 19875
19814: LD_INT 2
19816: DOUBLE
19817: EQUAL
19818: IFTRUE 19822
19820: GO 19844
19822: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19823: LD_VAR 0 1
19827: PPUSH
19828: LD_VAR 0 6
19832: PPUSH
19833: LD_VAR 0 7
19837: PPUSH
19838: CALL_OW 153
19842: GO 19875
19844: LD_INT 3
19846: DOUBLE
19847: EQUAL
19848: IFTRUE 19852
19850: GO 19874
19852: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19853: LD_VAR 0 1
19857: PPUSH
19858: LD_VAR 0 6
19862: PPUSH
19863: LD_VAR 0 7
19867: PPUSH
19868: CALL_OW 154
19872: GO 19875
19874: POP
// end ;
19875: LD_VAR 0 2
19879: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19880: LD_INT 0
19882: PPUSH
19883: PPUSH
19884: PPUSH
19885: PPUSH
19886: PPUSH
19887: PPUSH
// if not unit or not building then
19888: LD_VAR 0 1
19892: NOT
19893: PUSH
19894: LD_VAR 0 2
19898: NOT
19899: OR
19900: IFFALSE 19904
// exit ;
19902: GO 20062
// x := GetX ( building ) ;
19904: LD_ADDR_VAR 0 5
19908: PUSH
19909: LD_VAR 0 2
19913: PPUSH
19914: CALL_OW 250
19918: ST_TO_ADDR
// y := GetY ( building ) ;
19919: LD_ADDR_VAR 0 6
19923: PUSH
19924: LD_VAR 0 2
19928: PPUSH
19929: CALL_OW 251
19933: ST_TO_ADDR
// for i = 0 to 5 do
19934: LD_ADDR_VAR 0 4
19938: PUSH
19939: DOUBLE
19940: LD_INT 0
19942: DEC
19943: ST_TO_ADDR
19944: LD_INT 5
19946: PUSH
19947: FOR_TO
19948: IFFALSE 20060
// begin _x := ShiftX ( x , i , 3 ) ;
19950: LD_ADDR_VAR 0 7
19954: PUSH
19955: LD_VAR 0 5
19959: PPUSH
19960: LD_VAR 0 4
19964: PPUSH
19965: LD_INT 3
19967: PPUSH
19968: CALL_OW 272
19972: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19973: LD_ADDR_VAR 0 8
19977: PUSH
19978: LD_VAR 0 6
19982: PPUSH
19983: LD_VAR 0 4
19987: PPUSH
19988: LD_INT 3
19990: PPUSH
19991: CALL_OW 273
19995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19996: LD_VAR 0 7
20000: PPUSH
20001: LD_VAR 0 8
20005: PPUSH
20006: CALL_OW 488
20010: NOT
20011: IFFALSE 20015
// continue ;
20013: GO 19947
// if HexInfo ( _x , _y ) = 0 then
20015: LD_VAR 0 7
20019: PPUSH
20020: LD_VAR 0 8
20024: PPUSH
20025: CALL_OW 428
20029: PUSH
20030: LD_INT 0
20032: EQUAL
20033: IFFALSE 20058
// begin ComMoveXY ( unit , _x , _y ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: LD_VAR 0 7
20044: PPUSH
20045: LD_VAR 0 8
20049: PPUSH
20050: CALL_OW 111
// exit ;
20054: POP
20055: POP
20056: GO 20062
// end ; end ;
20058: GO 19947
20060: POP
20061: POP
// end ;
20062: LD_VAR 0 3
20066: RET
// export function ScanBase ( side , base_area ) ; begin
20067: LD_INT 0
20069: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20070: LD_ADDR_VAR 0 3
20074: PUSH
20075: LD_VAR 0 2
20079: PPUSH
20080: LD_INT 81
20082: PUSH
20083: LD_VAR 0 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PPUSH
20092: CALL_OW 70
20096: ST_TO_ADDR
// end ;
20097: LD_VAR 0 3
20101: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
20102: LD_INT 0
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
20109: LD_VAR 0 1
20113: NOT
20114: PUSH
20115: LD_EXP 67
20119: PUSH
20120: LD_VAR 0 1
20124: ARRAY
20125: NOT
20126: OR
20127: PUSH
20128: LD_VAR 0 2
20132: NOT
20133: OR
20134: PUSH
20135: LD_VAR 0 3
20139: NOT
20140: OR
20141: IFFALSE 20145
// exit ;
20143: GO 20595
// side := mc_sides [ base ] ;
20145: LD_ADDR_VAR 0 6
20149: PUSH
20150: LD_EXP 93
20154: PUSH
20155: LD_VAR 0 1
20159: ARRAY
20160: ST_TO_ADDR
// if not side then
20161: LD_VAR 0 6
20165: NOT
20166: IFFALSE 20170
// exit ;
20168: GO 20595
// for i in solds do
20170: LD_ADDR_VAR 0 7
20174: PUSH
20175: LD_VAR 0 2
20179: PUSH
20180: FOR_IN
20181: IFFALSE 20242
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
20183: LD_VAR 0 7
20187: PPUSH
20188: CALL_OW 310
20192: PPUSH
20193: CALL_OW 266
20197: PUSH
20198: LD_INT 32
20200: PUSH
20201: LD_INT 31
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: IN
20208: IFFALSE 20228
// solds := solds diff i else
20210: LD_ADDR_VAR 0 2
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_VAR 0 7
20224: DIFF
20225: ST_TO_ADDR
20226: GO 20240
// SetTag ( i , 18 ) ;
20228: LD_VAR 0 7
20232: PPUSH
20233: LD_INT 18
20235: PPUSH
20236: CALL_OW 109
20240: GO 20180
20242: POP
20243: POP
// if not solds then
20244: LD_VAR 0 2
20248: NOT
20249: IFFALSE 20253
// exit ;
20251: GO 20595
// repeat wait ( 0 0$1 ) ;
20253: LD_INT 35
20255: PPUSH
20256: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
20260: LD_ADDR_VAR 0 5
20264: PUSH
20265: LD_VAR 0 6
20269: PPUSH
20270: LD_VAR 0 3
20274: PPUSH
20275: CALL 20067 0 2
20279: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
20280: LD_VAR 0 5
20284: NOT
20285: PUSH
20286: LD_VAR 0 5
20290: PUSH
20291: LD_INT 3
20293: GREATER
20294: OR
20295: PUSH
20296: LD_EXP 89
20300: PUSH
20301: LD_VAR 0 1
20305: ARRAY
20306: OR
20307: IFFALSE 20348
// begin for i in solds do
20309: LD_ADDR_VAR 0 7
20313: PUSH
20314: LD_VAR 0 2
20318: PUSH
20319: FOR_IN
20320: IFFALSE 20344
// if HasTask ( i ) then
20322: LD_VAR 0 7
20326: PPUSH
20327: CALL_OW 314
20331: IFFALSE 20342
// ComStop ( i ) ;
20333: LD_VAR 0 7
20337: PPUSH
20338: CALL_OW 141
20342: GO 20319
20344: POP
20345: POP
// break ;
20346: GO 20583
// end ; for i in solds do
20348: LD_ADDR_VAR 0 7
20352: PUSH
20353: LD_VAR 0 2
20357: PUSH
20358: FOR_IN
20359: IFFALSE 20575
// begin if IsInUnit ( i ) then
20361: LD_VAR 0 7
20365: PPUSH
20366: CALL_OW 310
20370: IFFALSE 20381
// ComExitBuilding ( i ) ;
20372: LD_VAR 0 7
20376: PPUSH
20377: CALL_OW 122
// if GetLives ( i ) > 333 then
20381: LD_VAR 0 7
20385: PPUSH
20386: CALL_OW 256
20390: PUSH
20391: LD_INT 333
20393: GREATER
20394: IFFALSE 20422
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20396: LD_VAR 0 7
20400: PPUSH
20401: LD_VAR 0 5
20405: PPUSH
20406: LD_VAR 0 7
20410: PPUSH
20411: CALL_OW 74
20415: PPUSH
20416: CALL_OW 115
20420: GO 20573
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
20422: LD_ADDR_VAR 0 8
20426: PUSH
20427: LD_EXP 67
20431: PUSH
20432: LD_VAR 0 1
20436: ARRAY
20437: PPUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 30
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 30
20463: PUSH
20464: LD_INT 6
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 72
20481: PPUSH
20482: LD_VAR 0 7
20486: PPUSH
20487: CALL_OW 74
20491: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
20492: LD_VAR 0 7
20496: PPUSH
20497: LD_VAR 0 8
20501: PPUSH
20502: CALL_OW 250
20506: PPUSH
20507: LD_INT 3
20509: PPUSH
20510: LD_INT 5
20512: PPUSH
20513: CALL_OW 272
20517: PPUSH
20518: LD_VAR 0 8
20522: PPUSH
20523: CALL_OW 251
20527: PPUSH
20528: LD_INT 3
20530: PPUSH
20531: LD_INT 5
20533: PPUSH
20534: CALL_OW 273
20538: PPUSH
20539: CALL_OW 111
// SetTag ( i , 0 ) ;
20543: LD_VAR 0 7
20547: PPUSH
20548: LD_INT 0
20550: PPUSH
20551: CALL_OW 109
// solds := solds diff i ;
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_VAR 0 2
20564: PUSH
20565: LD_VAR 0 7
20569: DIFF
20570: ST_TO_ADDR
// continue ;
20571: GO 20358
// end ; end ;
20573: GO 20358
20575: POP
20576: POP
// until solds ;
20577: LD_VAR 0 2
20581: IFFALSE 20253
// MC_Reset ( base , 18 ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_INT 18
20590: PPUSH
20591: CALL 63386 0 2
// end ;
20595: LD_VAR 0 4
20599: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
20608: PPUSH
20609: PPUSH
20610: PPUSH
20611: PPUSH
20612: PPUSH
20613: PPUSH
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20618: LD_ADDR_VAR 0 12
20622: PUSH
20623: LD_EXP 67
20627: PUSH
20628: LD_VAR 0 1
20632: ARRAY
20633: PPUSH
20634: LD_INT 25
20636: PUSH
20637: LD_INT 3
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 72
20648: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20649: LD_ADDR_VAR 0 8
20653: PUSH
20654: LD_EXP 67
20658: PUSH
20659: LD_VAR 0 1
20663: ARRAY
20664: PPUSH
20665: LD_INT 2
20667: PUSH
20668: LD_INT 25
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 25
20680: PUSH
20681: LD_INT 5
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 25
20690: PUSH
20691: LD_INT 8
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 25
20700: PUSH
20701: LD_INT 9
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: PPUSH
20715: CALL_OW 72
20719: ST_TO_ADDR
// if not defenders and not solds then
20720: LD_VAR 0 2
20724: NOT
20725: PUSH
20726: LD_VAR 0 8
20730: NOT
20731: AND
20732: IFFALSE 20736
// exit ;
20734: GO 22102
// depot_under_attack := false ;
20736: LD_ADDR_VAR 0 16
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sold_defenders := [ ] ;
20744: LD_ADDR_VAR 0 17
20748: PUSH
20749: EMPTY
20750: ST_TO_ADDR
// if mechs then
20751: LD_VAR 0 12
20755: IFFALSE 20884
// for i in defenders do
20757: LD_ADDR_VAR 0 5
20761: PUSH
20762: LD_VAR 0 2
20766: PUSH
20767: FOR_IN
20768: IFFALSE 20882
// begin SetTag ( i , 20 ) ;
20770: LD_VAR 0 5
20774: PPUSH
20775: LD_INT 20
20777: PPUSH
20778: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
20782: LD_VAR 0 5
20786: PPUSH
20787: CALL_OW 263
20791: PUSH
20792: LD_INT 1
20794: EQUAL
20795: PUSH
20796: LD_VAR 0 5
20800: PPUSH
20801: CALL_OW 311
20805: NOT
20806: AND
20807: PUSH
20808: LD_VAR 0 12
20812: AND
20813: IFFALSE 20880
// begin un := mechs [ 1 ] ;
20815: LD_ADDR_VAR 0 10
20819: PUSH
20820: LD_VAR 0 12
20824: PUSH
20825: LD_INT 1
20827: ARRAY
20828: ST_TO_ADDR
// ComExitBuilding ( un ) ;
20829: LD_VAR 0 10
20833: PPUSH
20834: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
20838: LD_VAR 0 10
20842: PPUSH
20843: LD_VAR 0 5
20847: PPUSH
20848: CALL_OW 180
// SetTag ( un , 19 ) ;
20852: LD_VAR 0 10
20856: PPUSH
20857: LD_INT 19
20859: PPUSH
20860: CALL_OW 109
// mechs := mechs diff un ;
20864: LD_ADDR_VAR 0 12
20868: PUSH
20869: LD_VAR 0 12
20873: PUSH
20874: LD_VAR 0 10
20878: DIFF
20879: ST_TO_ADDR
// end ; end ;
20880: GO 20767
20882: POP
20883: POP
// if solds then
20884: LD_VAR 0 8
20888: IFFALSE 20947
// for i in solds do
20890: LD_ADDR_VAR 0 5
20894: PUSH
20895: LD_VAR 0 8
20899: PUSH
20900: FOR_IN
20901: IFFALSE 20945
// if not GetTag ( i ) then
20903: LD_VAR 0 5
20907: PPUSH
20908: CALL_OW 110
20912: NOT
20913: IFFALSE 20943
// begin defenders := defenders union i ;
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_VAR 0 2
20924: PUSH
20925: LD_VAR 0 5
20929: UNION
20930: ST_TO_ADDR
// SetTag ( i , 18 ) ;
20931: LD_VAR 0 5
20935: PPUSH
20936: LD_INT 18
20938: PPUSH
20939: CALL_OW 109
// end ;
20943: GO 20900
20945: POP
20946: POP
// repeat wait ( 0 0$1 ) ;
20947: LD_INT 35
20949: PPUSH
20950: CALL_OW 67
// enemy := mc_scan [ base ] ;
20954: LD_ADDR_VAR 0 3
20958: PUSH
20959: LD_EXP 90
20963: PUSH
20964: LD_VAR 0 1
20968: ARRAY
20969: ST_TO_ADDR
// for i in defenders do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 2
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21666
// begin e := NearestUnitToUnit ( enemy , i ) ;
20983: LD_ADDR_VAR 0 13
20987: PUSH
20988: LD_VAR 0 3
20992: PPUSH
20993: LD_VAR 0 5
20997: PPUSH
20998: CALL_OW 74
21002: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21003: LD_ADDR_VAR 0 16
21007: PUSH
21008: LD_EXP 67
21012: PUSH
21013: LD_VAR 0 1
21017: ARRAY
21018: PPUSH
21019: LD_INT 2
21021: PUSH
21022: LD_INT 30
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 30
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 72
21051: NOT
21052: PUSH
21053: LD_EXP 67
21057: PUSH
21058: LD_VAR 0 1
21062: ARRAY
21063: PPUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 72
21096: PPUSH
21097: CALL_OW 256
21101: PUSH
21102: LD_INT 600
21104: LESS
21105: OR
21106: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
21107: LD_VAR 0 5
21111: PPUSH
21112: CALL_OW 247
21116: PUSH
21117: LD_INT 2
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21372
21125: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
21126: LD_VAR 0 5
21130: PPUSH
21131: CALL_OW 256
21135: PUSH
21136: LD_INT 650
21138: GREATER
21139: PUSH
21140: LD_VAR 0 5
21144: PPUSH
21145: LD_VAR 0 13
21149: PPUSH
21150: CALL_OW 296
21154: PUSH
21155: LD_INT 40
21157: LESS
21158: AND
21159: IFFALSE 21177
// ComAttackUnit ( i , e ) else
21161: LD_VAR 0 5
21165: PPUSH
21166: LD_VAR 0 13
21170: PPUSH
21171: CALL_OW 115
21175: GO 21255
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
21177: LD_VAR 0 5
21181: PPUSH
21182: LD_VAR 0 13
21186: PPUSH
21187: CALL_OW 296
21191: PUSH
21192: LD_INT 30
21194: GREATEREQUAL
21195: PUSH
21196: LD_VAR 0 5
21200: PPUSH
21201: CALL_OW 256
21205: PUSH
21206: LD_INT 650
21208: LESSEQUAL
21209: OR
21210: PUSH
21211: LD_VAR 0 5
21215: PPUSH
21216: LD_EXP 91
21220: PUSH
21221: LD_VAR 0 1
21225: ARRAY
21226: PPUSH
21227: CALL_OW 308
21231: NOT
21232: AND
21233: IFFALSE 21255
// ComMoveToArea ( i , mc_parking [ base ] ) ;
21235: LD_VAR 0 5
21239: PPUSH
21240: LD_EXP 91
21244: PUSH
21245: LD_VAR 0 1
21249: ARRAY
21250: PPUSH
21251: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
21255: LD_VAR 0 5
21259: PPUSH
21260: CALL_OW 256
21264: PUSH
21265: LD_INT 998
21267: LESS
21268: PUSH
21269: LD_VAR 0 5
21273: PPUSH
21274: CALL_OW 263
21278: PUSH
21279: LD_INT 1
21281: EQUAL
21282: AND
21283: PUSH
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL_OW 311
21293: AND
21294: PUSH
21295: LD_VAR 0 5
21299: PPUSH
21300: LD_EXP 91
21304: PUSH
21305: LD_VAR 0 1
21309: ARRAY
21310: PPUSH
21311: CALL_OW 308
21315: AND
21316: IFFALSE 21370
// begin mech := IsDrivenBy ( i ) ;
21318: LD_ADDR_VAR 0 9
21322: PUSH
21323: LD_VAR 0 5
21327: PPUSH
21328: CALL_OW 311
21332: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21333: LD_VAR 0 9
21337: PPUSH
21338: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21342: LD_VAR 0 9
21346: PPUSH
21347: LD_VAR 0 5
21351: PPUSH
21352: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
21356: LD_VAR 0 9
21360: PPUSH
21361: LD_VAR 0 5
21365: PPUSH
21366: CALL_OW 180
// end ; end ; unit_human :
21370: GO 21637
21372: LD_INT 1
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21636
21380: POP
// begin b := IsInUnit ( i ) ;
21381: LD_ADDR_VAR 0 18
21385: PUSH
21386: LD_VAR 0 5
21390: PPUSH
21391: CALL_OW 310
21395: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
21396: LD_ADDR_VAR 0 19
21400: PUSH
21401: LD_VAR 0 18
21405: NOT
21406: PUSH
21407: LD_VAR 0 18
21411: PPUSH
21412: CALL_OW 266
21416: PUSH
21417: LD_INT 32
21419: PUSH
21420: LD_INT 31
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: IN
21427: OR
21428: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
21429: LD_VAR 0 16
21433: PUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: LD_INT 21
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 72
21453: PUSH
21454: LD_INT 1
21456: LESSEQUAL
21457: OR
21458: PUSH
21459: LD_VAR 0 19
21463: AND
21464: PUSH
21465: LD_VAR 0 5
21469: PUSH
21470: LD_VAR 0 17
21474: IN
21475: NOT
21476: AND
21477: IFFALSE 21570
// begin if b then
21479: LD_VAR 0 18
21483: IFFALSE 21532
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
21485: LD_VAR 0 18
21489: PPUSH
21490: LD_VAR 0 3
21494: PPUSH
21495: LD_VAR 0 18
21499: PPUSH
21500: CALL_OW 74
21504: PPUSH
21505: CALL_OW 296
21509: PUSH
21510: LD_INT 10
21512: LESS
21513: PUSH
21514: LD_VAR 0 18
21518: PPUSH
21519: CALL_OW 461
21523: PUSH
21524: LD_INT 7
21526: NONEQUAL
21527: AND
21528: IFFALSE 21532
// continue ;
21530: GO 20980
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
21532: LD_ADDR_VAR 0 17
21536: PUSH
21537: LD_VAR 0 17
21541: PPUSH
21542: LD_VAR 0 17
21546: PUSH
21547: LD_INT 1
21549: PLUS
21550: PPUSH
21551: LD_VAR 0 5
21555: PPUSH
21556: CALL_OW 1
21560: ST_TO_ADDR
// ComExitBuilding ( i ) ;
21561: LD_VAR 0 5
21565: PPUSH
21566: CALL_OW 122
// end ; if sold_defenders then
21570: LD_VAR 0 17
21574: IFFALSE 21634
// if i in sold_defenders then
21576: LD_VAR 0 5
21580: PUSH
21581: LD_VAR 0 17
21585: IN
21586: IFFALSE 21634
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
21588: LD_VAR 0 5
21592: PPUSH
21593: CALL_OW 314
21597: NOT
21598: PUSH
21599: LD_VAR 0 5
21603: PPUSH
21604: LD_VAR 0 13
21608: PPUSH
21609: CALL_OW 296
21613: PUSH
21614: LD_INT 30
21616: LESS
21617: AND
21618: IFFALSE 21634
// ComAttackUnit ( i , e ) ;
21620: LD_VAR 0 5
21624: PPUSH
21625: LD_VAR 0 13
21629: PPUSH
21630: CALL_OW 115
// end ; end ; end ;
21634: GO 21637
21636: POP
// if IsDead ( i ) then
21637: LD_VAR 0 5
21641: PPUSH
21642: CALL_OW 301
21646: IFFALSE 21664
// defenders := defenders diff i ;
21648: LD_ADDR_VAR 0 2
21652: PUSH
21653: LD_VAR 0 2
21657: PUSH
21658: LD_VAR 0 5
21662: DIFF
21663: ST_TO_ADDR
// end ;
21664: GO 20980
21666: POP
21667: POP
// until not enemy or not defenders ;
21668: LD_VAR 0 3
21672: NOT
21673: PUSH
21674: LD_VAR 0 2
21678: NOT
21679: OR
21680: IFFALSE 20947
// MC_Reset ( base , 18 ) ;
21682: LD_VAR 0 1
21686: PPUSH
21687: LD_INT 18
21689: PPUSH
21690: CALL 63386 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: LD_VAR 0 2
21703: PUSH
21704: LD_VAR 0 2
21708: PPUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 25
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 5
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 25
21734: PUSH
21735: LD_INT 8
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 25
21744: PUSH
21745: LD_INT 9
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PPUSH
21759: CALL_OW 72
21763: DIFF
21764: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
21765: LD_VAR 0 3
21769: NOT
21770: PUSH
21771: LD_VAR 0 2
21775: PPUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL_OW 72
21790: AND
21791: IFFALSE 22053
// begin tmp := FilterByTag ( defenders , 19 ) ;
21793: LD_ADDR_VAR 0 11
21797: PUSH
21798: LD_VAR 0 2
21802: PPUSH
21803: LD_INT 19
21805: PPUSH
21806: CALL 58218 0 2
21810: ST_TO_ADDR
// if tmp then
21811: LD_VAR 0 11
21815: IFFALSE 21885
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
21817: LD_ADDR_VAR 0 11
21821: PUSH
21822: LD_VAR 0 11
21826: PPUSH
21827: LD_INT 25
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 72
21841: ST_TO_ADDR
// if tmp then
21842: LD_VAR 0 11
21846: IFFALSE 21885
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
21848: LD_ADDR_EXP 79
21852: PUSH
21853: LD_EXP 79
21857: PPUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: LD_EXP 79
21867: PUSH
21868: LD_VAR 0 1
21872: ARRAY
21873: PUSH
21874: LD_VAR 0 11
21878: UNION
21879: PPUSH
21880: CALL_OW 1
21884: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
21885: LD_VAR 0 1
21889: PPUSH
21890: LD_INT 19
21892: PPUSH
21893: CALL 63386 0 2
// repeat wait ( 0 0$1 ) ;
21897: LD_INT 35
21899: PPUSH
21900: CALL_OW 67
// for i in defenders do
21904: LD_ADDR_VAR 0 5
21908: PUSH
21909: LD_VAR 0 2
21913: PUSH
21914: FOR_IN
21915: IFFALSE 22004
// begin if not IsInArea ( i , mc_parking [ base ] ) then
21917: LD_VAR 0 5
21921: PPUSH
21922: LD_EXP 91
21926: PUSH
21927: LD_VAR 0 1
21931: ARRAY
21932: PPUSH
21933: CALL_OW 308
21937: NOT
21938: IFFALSE 21962
// ComMoveToArea ( i , mc_parking [ base ] ) else
21940: LD_VAR 0 5
21944: PPUSH
21945: LD_EXP 91
21949: PUSH
21950: LD_VAR 0 1
21954: ARRAY
21955: PPUSH
21956: CALL_OW 113
21960: GO 22002
// if GetControl ( i ) = control_manual then
21962: LD_VAR 0 5
21966: PPUSH
21967: CALL_OW 263
21971: PUSH
21972: LD_INT 1
21974: EQUAL
21975: IFFALSE 22002
// if IsDrivenBy ( i ) then
21977: LD_VAR 0 5
21981: PPUSH
21982: CALL_OW 311
21986: IFFALSE 22002
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
21988: LD_VAR 0 5
21992: PPUSH
21993: CALL_OW 311
21997: PPUSH
21998: CALL_OW 121
// end ;
22002: GO 21914
22004: POP
22005: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22006: LD_VAR 0 2
22010: PPUSH
22011: LD_INT 95
22013: PUSH
22014: LD_EXP 91
22018: PUSH
22019: LD_VAR 0 1
22023: ARRAY
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PPUSH
22029: CALL_OW 72
22033: PUSH
22034: LD_VAR 0 2
22038: EQUAL
22039: PUSH
22040: LD_EXP 90
22044: PUSH
22045: LD_VAR 0 1
22049: ARRAY
22050: OR
22051: IFFALSE 21897
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
22053: LD_ADDR_EXP 89
22057: PUSH
22058: LD_EXP 89
22062: PPUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: LD_EXP 89
22072: PUSH
22073: LD_VAR 0 1
22077: ARRAY
22078: PUSH
22079: LD_VAR 0 2
22083: UNION
22084: PPUSH
22085: CALL_OW 1
22089: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
22090: LD_VAR 0 1
22094: PPUSH
22095: LD_INT 20
22097: PPUSH
22098: CALL 63386 0 2
// end ;
22102: LD_VAR 0 4
22106: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22107: LD_INT 0
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
// result := false ;
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_INT 0
22120: ST_TO_ADDR
// side := GetSide ( unit ) ;
22121: LD_ADDR_VAR 0 3
22125: PUSH
22126: LD_VAR 0 1
22130: PPUSH
22131: CALL_OW 255
22135: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22136: LD_ADDR_VAR 0 4
22140: PUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 248
22150: ST_TO_ADDR
// case nat of 1 :
22151: LD_VAR 0 4
22155: PUSH
22156: LD_INT 1
22158: DOUBLE
22159: EQUAL
22160: IFTRUE 22164
22162: GO 22175
22164: POP
// tech := tech_lassight ; 2 :
22165: LD_ADDR_VAR 0 5
22169: PUSH
22170: LD_INT 12
22172: ST_TO_ADDR
22173: GO 22214
22175: LD_INT 2
22177: DOUBLE
22178: EQUAL
22179: IFTRUE 22183
22181: GO 22194
22183: POP
// tech := tech_mortar ; 3 :
22184: LD_ADDR_VAR 0 5
22188: PUSH
22189: LD_INT 41
22191: ST_TO_ADDR
22192: GO 22214
22194: LD_INT 3
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22213
22202: POP
// tech := tech_bazooka ; end ;
22203: LD_ADDR_VAR 0 5
22207: PUSH
22208: LD_INT 44
22210: ST_TO_ADDR
22211: GO 22214
22213: POP
// if Researched ( side , tech ) then
22214: LD_VAR 0 3
22218: PPUSH
22219: LD_VAR 0 5
22223: PPUSH
22224: CALL_OW 325
22228: IFFALSE 22255
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22230: LD_ADDR_VAR 0 2
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 8
22240: PUSH
22241: LD_INT 9
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: LD_VAR 0 4
22253: ARRAY
22254: ST_TO_ADDR
// end ;
22255: LD_VAR 0 2
22259: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22260: LD_INT 0
22262: PPUSH
22263: PPUSH
22264: PPUSH
// if not mines then
22265: LD_VAR 0 2
22269: NOT
22270: IFFALSE 22274
// exit ;
22272: GO 22418
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22274: LD_ADDR_VAR 0 5
22278: PUSH
22279: LD_INT 81
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: LD_INT 21
22296: PUSH
22297: LD_INT 3
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PPUSH
22312: CALL_OW 69
22316: ST_TO_ADDR
// for i in mines do
22317: LD_ADDR_VAR 0 4
22321: PUSH
22322: LD_VAR 0 2
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22416
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22330: LD_VAR 0 4
22334: PUSH
22335: LD_INT 1
22337: ARRAY
22338: PPUSH
22339: LD_VAR 0 4
22343: PUSH
22344: LD_INT 2
22346: ARRAY
22347: PPUSH
22348: CALL_OW 458
22352: NOT
22353: IFFALSE 22357
// continue ;
22355: GO 22327
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22357: LD_VAR 0 4
22361: PUSH
22362: LD_INT 1
22364: ARRAY
22365: PPUSH
22366: LD_VAR 0 4
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: PPUSH
22375: CALL_OW 428
22379: PUSH
22380: LD_VAR 0 5
22384: IN
22385: IFFALSE 22414
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22387: LD_VAR 0 4
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: LD_VAR 0 4
22400: PUSH
22401: LD_INT 2
22403: ARRAY
22404: PPUSH
22405: LD_VAR 0 1
22409: PPUSH
22410: CALL_OW 456
// end ;
22414: GO 22327
22416: POP
22417: POP
// end ;
22418: LD_VAR 0 3
22422: RET
// export function Count ( array ) ; var i ; begin
22423: LD_INT 0
22425: PPUSH
22426: PPUSH
// result := 0 ;
22427: LD_ADDR_VAR 0 2
22431: PUSH
22432: LD_INT 0
22434: ST_TO_ADDR
// for i in array do
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_VAR 0 1
22444: PUSH
22445: FOR_IN
22446: IFFALSE 22470
// if i then
22448: LD_VAR 0 3
22452: IFFALSE 22468
// result := result + 1 ;
22454: LD_ADDR_VAR 0 2
22458: PUSH
22459: LD_VAR 0 2
22463: PUSH
22464: LD_INT 1
22466: PLUS
22467: ST_TO_ADDR
22468: GO 22445
22470: POP
22471: POP
// end ;
22472: LD_VAR 0 2
22476: RET
// export function IsEmpty ( building ) ; begin
22477: LD_INT 0
22479: PPUSH
// if not building then
22480: LD_VAR 0 1
22484: NOT
22485: IFFALSE 22489
// exit ;
22487: GO 22532
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22489: LD_ADDR_VAR 0 2
22493: PUSH
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 22
22501: PUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL_OW 255
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 58
22518: PUSH
22519: EMPTY
22520: LIST
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PPUSH
22526: CALL_OW 69
22530: IN
22531: ST_TO_ADDR
// end ;
22532: LD_VAR 0 2
22536: RET
// export function IsNotFull ( building ) ; begin
22537: LD_INT 0
22539: PPUSH
// if not building then
22540: LD_VAR 0 1
22544: NOT
22545: IFFALSE 22549
// exit ;
22547: GO 22568
// result := UnitsInside ( building ) < 6 ;
22549: LD_ADDR_VAR 0 2
22553: PUSH
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 313
22563: PUSH
22564: LD_INT 6
22566: LESS
22567: ST_TO_ADDR
// end ;
22568: LD_VAR 0 2
22572: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
// tmp := [ ] ;
22579: LD_ADDR_VAR 0 3
22583: PUSH
22584: EMPTY
22585: ST_TO_ADDR
// list := [ ] ;
22586: LD_ADDR_VAR 0 5
22590: PUSH
22591: EMPTY
22592: ST_TO_ADDR
// for i = 16 to 25 do
22593: LD_ADDR_VAR 0 4
22597: PUSH
22598: DOUBLE
22599: LD_INT 16
22601: DEC
22602: ST_TO_ADDR
22603: LD_INT 25
22605: PUSH
22606: FOR_TO
22607: IFFALSE 22680
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22609: LD_ADDR_VAR 0 3
22613: PUSH
22614: LD_VAR 0 3
22618: PUSH
22619: LD_INT 22
22621: PUSH
22622: LD_VAR 0 1
22626: PPUSH
22627: CALL_OW 255
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 91
22638: PUSH
22639: LD_VAR 0 1
22643: PUSH
22644: LD_INT 6
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 30
22654: PUSH
22655: LD_VAR 0 4
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: PPUSH
22672: CALL_OW 69
22676: ADD
22677: ST_TO_ADDR
22678: GO 22606
22680: POP
22681: POP
// for i = 1 to tmp do
22682: LD_ADDR_VAR 0 4
22686: PUSH
22687: DOUBLE
22688: LD_INT 1
22690: DEC
22691: ST_TO_ADDR
22692: LD_VAR 0 3
22696: PUSH
22697: FOR_TO
22698: IFFALSE 22786
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22700: LD_ADDR_VAR 0 5
22704: PUSH
22705: LD_VAR 0 5
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: LD_VAR 0 4
22719: ARRAY
22720: PPUSH
22721: CALL_OW 266
22725: PUSH
22726: LD_VAR 0 3
22730: PUSH
22731: LD_VAR 0 4
22735: ARRAY
22736: PPUSH
22737: CALL_OW 250
22741: PUSH
22742: LD_VAR 0 3
22746: PUSH
22747: LD_VAR 0 4
22751: ARRAY
22752: PPUSH
22753: CALL_OW 251
22757: PUSH
22758: LD_VAR 0 3
22762: PUSH
22763: LD_VAR 0 4
22767: ARRAY
22768: PPUSH
22769: CALL_OW 254
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: ADD
22783: ST_TO_ADDR
22784: GO 22697
22786: POP
22787: POP
// result := list ;
22788: LD_ADDR_VAR 0 2
22792: PUSH
22793: LD_VAR 0 5
22797: ST_TO_ADDR
// end ;
22798: LD_VAR 0 2
22802: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22803: LD_INT 0
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
22810: PPUSH
22811: PPUSH
// if not factory then
22812: LD_VAR 0 1
22816: NOT
22817: IFFALSE 22821
// exit ;
22819: GO 23346
// if control = control_apeman then
22821: LD_VAR 0 4
22825: PUSH
22826: LD_INT 5
22828: EQUAL
22829: IFFALSE 22938
// begin tmp := UnitsInside ( factory ) ;
22831: LD_ADDR_VAR 0 8
22835: PUSH
22836: LD_VAR 0 1
22840: PPUSH
22841: CALL_OW 313
22845: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22846: LD_VAR 0 8
22850: PPUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: NOT
22866: IFFALSE 22876
// control := control_manual ;
22868: LD_ADDR_VAR 0 4
22872: PUSH
22873: LD_INT 1
22875: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22876: LD_ADDR_VAR 0 8
22880: PUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL 22573 0 1
22890: ST_TO_ADDR
// if tmp then
22891: LD_VAR 0 8
22895: IFFALSE 22938
// begin for i in tmp do
22897: LD_ADDR_VAR 0 7
22901: PUSH
22902: LD_VAR 0 8
22906: PUSH
22907: FOR_IN
22908: IFFALSE 22936
// if i [ 1 ] = b_ext_radar then
22910: LD_VAR 0 7
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PUSH
22919: LD_INT 20
22921: EQUAL
22922: IFFALSE 22934
// begin control := control_remote ;
22924: LD_ADDR_VAR 0 4
22928: PUSH
22929: LD_INT 2
22931: ST_TO_ADDR
// break ;
22932: GO 22936
// end ;
22934: GO 22907
22936: POP
22937: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22938: LD_VAR 0 1
22942: PPUSH
22943: LD_VAR 0 2
22947: PPUSH
22948: LD_VAR 0 3
22952: PPUSH
22953: LD_VAR 0 4
22957: PPUSH
22958: LD_VAR 0 5
22962: PPUSH
22963: CALL_OW 448
22967: IFFALSE 23002
// begin result := [ chassis , engine , control , weapon ] ;
22969: LD_ADDR_VAR 0 6
22973: PUSH
22974: LD_VAR 0 2
22978: PUSH
22979: LD_VAR 0 3
22983: PUSH
22984: LD_VAR 0 4
22988: PUSH
22989: LD_VAR 0 5
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: ST_TO_ADDR
// exit ;
23000: GO 23346
// end ; _chassis := AvailableChassisList ( factory ) ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 475
23016: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23017: LD_ADDR_VAR 0 11
23021: PUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL_OW 476
23031: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23032: LD_ADDR_VAR 0 12
23036: PUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 477
23046: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23047: LD_ADDR_VAR 0 10
23051: PUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 478
23061: ST_TO_ADDR
// if not chassis in _chassis then
23062: LD_VAR 0 2
23066: PUSH
23067: LD_VAR 0 9
23071: IN
23072: NOT
23073: IFFALSE 23099
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_VAR 0 9
23084: PUSH
23085: LD_INT 1
23087: PPUSH
23088: LD_VAR 0 9
23092: PPUSH
23093: CALL_OW 12
23097: ARRAY
23098: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23099: LD_VAR 0 2
23103: PPUSH
23104: LD_VAR 0 3
23108: PPUSH
23109: CALL 23351 0 2
23113: NOT
23114: IFFALSE 23173
// repeat engine := _engine [ 1 ] ;
23116: LD_ADDR_VAR 0 3
23120: PUSH
23121: LD_VAR 0 11
23125: PUSH
23126: LD_INT 1
23128: ARRAY
23129: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23130: LD_ADDR_VAR 0 11
23134: PUSH
23135: LD_VAR 0 11
23139: PPUSH
23140: LD_INT 1
23142: PPUSH
23143: CALL_OW 3
23147: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23148: LD_VAR 0 2
23152: PPUSH
23153: LD_VAR 0 3
23157: PPUSH
23158: CALL 23351 0 2
23162: PUSH
23163: LD_VAR 0 11
23167: PUSH
23168: EMPTY
23169: EQUAL
23170: OR
23171: IFFALSE 23116
// if not control in _control then
23173: LD_VAR 0 4
23177: PUSH
23178: LD_VAR 0 12
23182: IN
23183: NOT
23184: IFFALSE 23210
// control := _control [ rand ( 1 , _control ) ] ;
23186: LD_ADDR_VAR 0 4
23190: PUSH
23191: LD_VAR 0 12
23195: PUSH
23196: LD_INT 1
23198: PPUSH
23199: LD_VAR 0 12
23203: PPUSH
23204: CALL_OW 12
23208: ARRAY
23209: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23210: LD_VAR 0 2
23214: PPUSH
23215: LD_VAR 0 5
23219: PPUSH
23220: CALL 23571 0 2
23224: NOT
23225: IFFALSE 23284
// repeat weapon := _weapon [ 1 ] ;
23227: LD_ADDR_VAR 0 5
23231: PUSH
23232: LD_VAR 0 10
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23241: LD_ADDR_VAR 0 10
23245: PUSH
23246: LD_VAR 0 10
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 3
23258: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_VAR 0 5
23268: PPUSH
23269: CALL 23571 0 2
23273: PUSH
23274: LD_VAR 0 10
23278: PUSH
23279: EMPTY
23280: EQUAL
23281: OR
23282: IFFALSE 23227
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23284: LD_VAR 0 1
23288: PPUSH
23289: LD_VAR 0 2
23293: PPUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: LD_VAR 0 4
23303: PPUSH
23304: LD_VAR 0 5
23308: PPUSH
23309: CALL_OW 448
23313: IFFALSE 23346
// result := [ chassis , engine , control , weapon ] ;
23315: LD_ADDR_VAR 0 6
23319: PUSH
23320: LD_VAR 0 2
23324: PUSH
23325: LD_VAR 0 3
23329: PUSH
23330: LD_VAR 0 4
23334: PUSH
23335: LD_VAR 0 5
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: ST_TO_ADDR
// end ;
23346: LD_VAR 0 6
23350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23351: LD_INT 0
23353: PPUSH
// if not chassis or not engine then
23354: LD_VAR 0 1
23358: NOT
23359: PUSH
23360: LD_VAR 0 2
23364: NOT
23365: OR
23366: IFFALSE 23370
// exit ;
23368: GO 23566
// case engine of engine_solar :
23370: LD_VAR 0 2
23374: PUSH
23375: LD_INT 2
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23421
23383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23384: LD_ADDR_VAR 0 3
23388: PUSH
23389: LD_INT 11
23391: PUSH
23392: LD_INT 12
23394: PUSH
23395: LD_INT 13
23397: PUSH
23398: LD_INT 14
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: ST_TO_ADDR
23419: GO 23550
23421: LD_INT 1
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 23491
23429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23430: LD_ADDR_VAR 0 3
23434: PUSH
23435: LD_INT 11
23437: PUSH
23438: LD_INT 12
23440: PUSH
23441: LD_INT 13
23443: PUSH
23444: LD_INT 14
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: LD_INT 2
23452: PUSH
23453: LD_INT 3
23455: PUSH
23456: LD_INT 4
23458: PUSH
23459: LD_INT 5
23461: PUSH
23462: LD_INT 21
23464: PUSH
23465: LD_INT 23
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_INT 24
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
23489: GO 23550
23491: LD_INT 3
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23549
23499: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_INT 13
23507: PUSH
23508: LD_INT 14
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 3
23516: PUSH
23517: LD_INT 4
23519: PUSH
23520: LD_INT 5
23522: PUSH
23523: LD_INT 21
23525: PUSH
23526: LD_INT 22
23528: PUSH
23529: LD_INT 23
23531: PUSH
23532: LD_INT 24
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: ST_TO_ADDR
23547: GO 23550
23549: POP
// result := ( chassis in result ) ;
23550: LD_ADDR_VAR 0 3
23554: PUSH
23555: LD_VAR 0 1
23559: PUSH
23560: LD_VAR 0 3
23564: IN
23565: ST_TO_ADDR
// end ;
23566: LD_VAR 0 3
23570: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23571: LD_INT 0
23573: PPUSH
// if not chassis or not weapon then
23574: LD_VAR 0 1
23578: NOT
23579: PUSH
23580: LD_VAR 0 2
23584: NOT
23585: OR
23586: IFFALSE 23590
// exit ;
23588: GO 24616
// case weapon of us_machine_gun :
23590: LD_VAR 0 2
23594: PUSH
23595: LD_INT 2
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23633
23603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23604: LD_ADDR_VAR 0 3
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: ST_TO_ADDR
23631: GO 24600
23633: LD_INT 3
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23671
23641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 3
23655: PUSH
23656: LD_INT 4
23658: PUSH
23659: LD_INT 5
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: ST_TO_ADDR
23669: GO 24600
23671: LD_INT 11
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23709
23679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 3
23693: PUSH
23694: LD_INT 4
23696: PUSH
23697: LD_INT 5
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: ST_TO_ADDR
23707: GO 24600
23709: LD_INT 4
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23743
23717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: LD_INT 4
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: ST_TO_ADDR
23741: GO 24600
23743: LD_INT 5
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23777
23751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23752: LD_ADDR_VAR 0 3
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: LD_INT 3
23762: PUSH
23763: LD_INT 4
23765: PUSH
23766: LD_INT 5
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: ST_TO_ADDR
23775: GO 24600
23777: LD_INT 9
23779: DOUBLE
23780: EQUAL
23781: IFTRUE 23785
23783: GO 23811
23785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23786: LD_ADDR_VAR 0 3
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: LD_INT 4
23799: PUSH
23800: LD_INT 5
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 24600
23811: LD_INT 7
23813: DOUBLE
23814: EQUAL
23815: IFTRUE 23819
23817: GO 23845
23819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23820: LD_ADDR_VAR 0 3
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: LD_INT 4
23833: PUSH
23834: LD_INT 5
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: ST_TO_ADDR
23843: GO 24600
23845: LD_INT 12
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23853
23851: GO 23879
23853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23854: LD_ADDR_VAR 0 3
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: LD_INT 4
23867: PUSH
23868: LD_INT 5
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
23877: GO 24600
23879: LD_INT 13
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23887
23885: GO 23913
23887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23888: LD_ADDR_VAR 0 3
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 3
23898: PUSH
23899: LD_INT 4
23901: PUSH
23902: LD_INT 5
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: ST_TO_ADDR
23911: GO 24600
23913: LD_INT 14
23915: DOUBLE
23916: EQUAL
23917: IFTRUE 23921
23919: GO 23939
23921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23922: LD_ADDR_VAR 0 3
23926: PUSH
23927: LD_INT 4
23929: PUSH
23930: LD_INT 5
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: ST_TO_ADDR
23937: GO 24600
23939: LD_INT 6
23941: DOUBLE
23942: EQUAL
23943: IFTRUE 23947
23945: GO 23965
23947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23948: LD_ADDR_VAR 0 3
23952: PUSH
23953: LD_INT 4
23955: PUSH
23956: LD_INT 5
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: ST_TO_ADDR
23963: GO 24600
23965: LD_INT 10
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 23991
23973: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_INT 4
23981: PUSH
23982: LD_INT 5
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: ST_TO_ADDR
23989: GO 24600
23991: LD_INT 22
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24025
23999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24000: LD_ADDR_VAR 0 3
24004: PUSH
24005: LD_INT 11
24007: PUSH
24008: LD_INT 12
24010: PUSH
24011: LD_INT 13
24013: PUSH
24014: LD_INT 14
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 24600
24025: LD_INT 23
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24059
24033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_INT 11
24041: PUSH
24042: LD_INT 12
24044: PUSH
24045: LD_INT 13
24047: PUSH
24048: LD_INT 14
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: ST_TO_ADDR
24057: GO 24600
24059: LD_INT 24
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24093
24067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24068: LD_ADDR_VAR 0 3
24072: PUSH
24073: LD_INT 11
24075: PUSH
24076: LD_INT 12
24078: PUSH
24079: LD_INT 13
24081: PUSH
24082: LD_INT 14
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: ST_TO_ADDR
24091: GO 24600
24093: LD_INT 30
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24127
24101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24102: LD_ADDR_VAR 0 3
24106: PUSH
24107: LD_INT 11
24109: PUSH
24110: LD_INT 12
24112: PUSH
24113: LD_INT 13
24115: PUSH
24116: LD_INT 14
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: ST_TO_ADDR
24125: GO 24600
24127: LD_INT 25
24129: DOUBLE
24130: EQUAL
24131: IFTRUE 24135
24133: GO 24153
24135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24136: LD_ADDR_VAR 0 3
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: ST_TO_ADDR
24151: GO 24600
24153: LD_INT 27
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24179
24161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24162: LD_ADDR_VAR 0 3
24166: PUSH
24167: LD_INT 13
24169: PUSH
24170: LD_INT 14
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: ST_TO_ADDR
24177: GO 24600
24179: LD_INT 28
24181: DOUBLE
24182: EQUAL
24183: IFTRUE 24187
24185: GO 24205
24187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24188: LD_ADDR_VAR 0 3
24192: PUSH
24193: LD_INT 13
24195: PUSH
24196: LD_INT 14
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: ST_TO_ADDR
24203: GO 24600
24205: LD_INT 29
24207: DOUBLE
24208: EQUAL
24209: IFTRUE 24213
24211: GO 24231
24213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24214: LD_ADDR_VAR 0 3
24218: PUSH
24219: LD_INT 13
24221: PUSH
24222: LD_INT 14
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: ST_TO_ADDR
24229: GO 24600
24231: LD_INT 31
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24257
24239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24240: LD_ADDR_VAR 0 3
24244: PUSH
24245: LD_INT 13
24247: PUSH
24248: LD_INT 14
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: ST_TO_ADDR
24255: GO 24600
24257: LD_INT 26
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24265
24263: GO 24283
24265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_INT 13
24273: PUSH
24274: LD_INT 14
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: ST_TO_ADDR
24281: GO 24600
24283: LD_INT 42
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24317
24291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24292: LD_ADDR_VAR 0 3
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_INT 23
24305: PUSH
24306: LD_INT 24
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: ST_TO_ADDR
24315: GO 24600
24317: LD_INT 43
24319: DOUBLE
24320: EQUAL
24321: IFTRUE 24325
24323: GO 24351
24325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24326: LD_ADDR_VAR 0 3
24330: PUSH
24331: LD_INT 21
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 23
24339: PUSH
24340: LD_INT 24
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: ST_TO_ADDR
24349: GO 24600
24351: LD_INT 44
24353: DOUBLE
24354: EQUAL
24355: IFTRUE 24359
24357: GO 24385
24359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24360: LD_ADDR_VAR 0 3
24364: PUSH
24365: LD_INT 21
24367: PUSH
24368: LD_INT 22
24370: PUSH
24371: LD_INT 23
24373: PUSH
24374: LD_INT 24
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: ST_TO_ADDR
24383: GO 24600
24385: LD_INT 45
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24419
24393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24394: LD_ADDR_VAR 0 3
24398: PUSH
24399: LD_INT 21
24401: PUSH
24402: LD_INT 22
24404: PUSH
24405: LD_INT 23
24407: PUSH
24408: LD_INT 24
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: ST_TO_ADDR
24417: GO 24600
24419: LD_INT 49
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24453
24427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24428: LD_ADDR_VAR 0 3
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_INT 23
24441: PUSH
24442: LD_INT 24
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: ST_TO_ADDR
24451: GO 24600
24453: LD_INT 51
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24487
24461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24462: LD_ADDR_VAR 0 3
24466: PUSH
24467: LD_INT 21
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 23
24475: PUSH
24476: LD_INT 24
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: ST_TO_ADDR
24485: GO 24600
24487: LD_INT 52
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24521
24495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_INT 23
24509: PUSH
24510: LD_INT 24
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
24519: GO 24600
24521: LD_INT 53
24523: DOUBLE
24524: EQUAL
24525: IFTRUE 24529
24527: GO 24547
24529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24530: LD_ADDR_VAR 0 3
24534: PUSH
24535: LD_INT 23
24537: PUSH
24538: LD_INT 24
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: ST_TO_ADDR
24545: GO 24600
24547: LD_INT 46
24549: DOUBLE
24550: EQUAL
24551: IFTRUE 24555
24553: GO 24573
24555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24556: LD_ADDR_VAR 0 3
24560: PUSH
24561: LD_INT 23
24563: PUSH
24564: LD_INT 24
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: ST_TO_ADDR
24571: GO 24600
24573: LD_INT 47
24575: DOUBLE
24576: EQUAL
24577: IFTRUE 24581
24579: GO 24599
24581: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24582: LD_ADDR_VAR 0 3
24586: PUSH
24587: LD_INT 23
24589: PUSH
24590: LD_INT 24
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: ST_TO_ADDR
24597: GO 24600
24599: POP
// result := ( chassis in result ) ;
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_VAR 0 1
24609: PUSH
24610: LD_VAR 0 3
24614: IN
24615: ST_TO_ADDR
// end ;
24616: LD_VAR 0 3
24620: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24621: LD_INT 0
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
// result := array ;
24630: LD_ADDR_VAR 0 5
24634: PUSH
24635: LD_VAR 0 1
24639: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24640: LD_VAR 0 1
24644: NOT
24645: PUSH
24646: LD_VAR 0 2
24650: NOT
24651: OR
24652: PUSH
24653: LD_VAR 0 3
24657: NOT
24658: OR
24659: PUSH
24660: LD_VAR 0 2
24664: PUSH
24665: LD_VAR 0 1
24669: GREATER
24670: OR
24671: PUSH
24672: LD_VAR 0 3
24676: PUSH
24677: LD_VAR 0 1
24681: GREATER
24682: OR
24683: IFFALSE 24687
// exit ;
24685: GO 24983
// if direction then
24687: LD_VAR 0 4
24691: IFFALSE 24755
// begin d := 1 ;
24693: LD_ADDR_VAR 0 9
24697: PUSH
24698: LD_INT 1
24700: ST_TO_ADDR
// if i_from > i_to then
24701: LD_VAR 0 2
24705: PUSH
24706: LD_VAR 0 3
24710: GREATER
24711: IFFALSE 24737
// length := ( array - i_from ) + i_to else
24713: LD_ADDR_VAR 0 11
24717: PUSH
24718: LD_VAR 0 1
24722: PUSH
24723: LD_VAR 0 2
24727: MINUS
24728: PUSH
24729: LD_VAR 0 3
24733: PLUS
24734: ST_TO_ADDR
24735: GO 24753
// length := i_to - i_from ;
24737: LD_ADDR_VAR 0 11
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 2
24751: MINUS
24752: ST_TO_ADDR
// end else
24753: GO 24816
// begin d := - 1 ;
24755: LD_ADDR_VAR 0 9
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: ST_TO_ADDR
// if i_from > i_to then
24764: LD_VAR 0 2
24768: PUSH
24769: LD_VAR 0 3
24773: GREATER
24774: IFFALSE 24794
// length := i_from - i_to else
24776: LD_ADDR_VAR 0 11
24780: PUSH
24781: LD_VAR 0 2
24785: PUSH
24786: LD_VAR 0 3
24790: MINUS
24791: ST_TO_ADDR
24792: GO 24816
// length := ( array - i_to ) + i_from ;
24794: LD_ADDR_VAR 0 11
24798: PUSH
24799: LD_VAR 0 1
24803: PUSH
24804: LD_VAR 0 3
24808: MINUS
24809: PUSH
24810: LD_VAR 0 2
24814: PLUS
24815: ST_TO_ADDR
// end ; if not length then
24816: LD_VAR 0 11
24820: NOT
24821: IFFALSE 24825
// exit ;
24823: GO 24983
// tmp := array ;
24825: LD_ADDR_VAR 0 10
24829: PUSH
24830: LD_VAR 0 1
24834: ST_TO_ADDR
// for i = 1 to length do
24835: LD_ADDR_VAR 0 6
24839: PUSH
24840: DOUBLE
24841: LD_INT 1
24843: DEC
24844: ST_TO_ADDR
24845: LD_VAR 0 11
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24971
// begin for j = 1 to array do
24853: LD_ADDR_VAR 0 7
24857: PUSH
24858: DOUBLE
24859: LD_INT 1
24861: DEC
24862: ST_TO_ADDR
24863: LD_VAR 0 1
24867: PUSH
24868: FOR_TO
24869: IFFALSE 24957
// begin k := j + d ;
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: LD_VAR 0 7
24880: PUSH
24881: LD_VAR 0 9
24885: PLUS
24886: ST_TO_ADDR
// if k > array then
24887: LD_VAR 0 8
24891: PUSH
24892: LD_VAR 0 1
24896: GREATER
24897: IFFALSE 24907
// k := 1 ;
24899: LD_ADDR_VAR 0 8
24903: PUSH
24904: LD_INT 1
24906: ST_TO_ADDR
// if not k then
24907: LD_VAR 0 8
24911: NOT
24912: IFFALSE 24924
// k := array ;
24914: LD_ADDR_VAR 0 8
24918: PUSH
24919: LD_VAR 0 1
24923: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24924: LD_ADDR_VAR 0 10
24928: PUSH
24929: LD_VAR 0 10
24933: PPUSH
24934: LD_VAR 0 8
24938: PPUSH
24939: LD_VAR 0 1
24943: PUSH
24944: LD_VAR 0 7
24948: ARRAY
24949: PPUSH
24950: CALL_OW 1
24954: ST_TO_ADDR
// end ;
24955: GO 24868
24957: POP
24958: POP
// array := tmp ;
24959: LD_ADDR_VAR 0 1
24963: PUSH
24964: LD_VAR 0 10
24968: ST_TO_ADDR
// end ;
24969: GO 24850
24971: POP
24972: POP
// result := array ;
24973: LD_ADDR_VAR 0 5
24977: PUSH
24978: LD_VAR 0 1
24982: ST_TO_ADDR
// end ;
24983: LD_VAR 0 5
24987: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24988: LD_INT 0
24990: PPUSH
24991: PPUSH
// result := 0 ;
24992: LD_ADDR_VAR 0 3
24996: PUSH
24997: LD_INT 0
24999: ST_TO_ADDR
// if not array or not value in array then
25000: LD_VAR 0 1
25004: NOT
25005: PUSH
25006: LD_VAR 0 2
25010: PUSH
25011: LD_VAR 0 1
25015: IN
25016: NOT
25017: OR
25018: IFFALSE 25022
// exit ;
25020: GO 25076
// for i = 1 to array do
25022: LD_ADDR_VAR 0 4
25026: PUSH
25027: DOUBLE
25028: LD_INT 1
25030: DEC
25031: ST_TO_ADDR
25032: LD_VAR 0 1
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25074
// if value = array [ i ] then
25040: LD_VAR 0 2
25044: PUSH
25045: LD_VAR 0 1
25049: PUSH
25050: LD_VAR 0 4
25054: ARRAY
25055: EQUAL
25056: IFFALSE 25072
// begin result := i ;
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_VAR 0 4
25067: ST_TO_ADDR
// exit ;
25068: POP
25069: POP
25070: GO 25076
// end ;
25072: GO 25037
25074: POP
25075: POP
// end ;
25076: LD_VAR 0 3
25080: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25081: LD_INT 0
25083: PPUSH
// vc_chassis := chassis ;
25084: LD_ADDR_OWVAR 37
25088: PUSH
25089: LD_VAR 0 1
25093: ST_TO_ADDR
// vc_engine := engine ;
25094: LD_ADDR_OWVAR 39
25098: PUSH
25099: LD_VAR 0 2
25103: ST_TO_ADDR
// vc_control := control ;
25104: LD_ADDR_OWVAR 38
25108: PUSH
25109: LD_VAR 0 3
25113: ST_TO_ADDR
// vc_weapon := weapon ;
25114: LD_ADDR_OWVAR 40
25118: PUSH
25119: LD_VAR 0 4
25123: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25124: LD_ADDR_OWVAR 41
25128: PUSH
25129: LD_VAR 0 5
25133: ST_TO_ADDR
// end ;
25134: LD_VAR 0 6
25138: RET
// export function WantPlant ( unit ) ; var task ; begin
25139: LD_INT 0
25141: PPUSH
25142: PPUSH
// result := false ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_INT 0
25150: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25151: LD_ADDR_VAR 0 3
25155: PUSH
25156: LD_VAR 0 1
25160: PPUSH
25161: CALL_OW 437
25165: ST_TO_ADDR
// if task then
25166: LD_VAR 0 3
25170: IFFALSE 25198
// if task [ 1 ] [ 1 ] = p then
25172: LD_VAR 0 3
25176: PUSH
25177: LD_INT 1
25179: ARRAY
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PUSH
25185: LD_STRING p
25187: EQUAL
25188: IFFALSE 25198
// result := true ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_INT 1
25197: ST_TO_ADDR
// end ;
25198: LD_VAR 0 2
25202: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25203: LD_INT 0
25205: PPUSH
25206: PPUSH
25207: PPUSH
25208: PPUSH
// if pos < 1 then
25209: LD_VAR 0 2
25213: PUSH
25214: LD_INT 1
25216: LESS
25217: IFFALSE 25221
// exit ;
25219: GO 25524
// if pos = 1 then
25221: LD_VAR 0 2
25225: PUSH
25226: LD_INT 1
25228: EQUAL
25229: IFFALSE 25262
// result := Replace ( arr , pos [ 1 ] , value ) else
25231: LD_ADDR_VAR 0 4
25235: PUSH
25236: LD_VAR 0 1
25240: PPUSH
25241: LD_VAR 0 2
25245: PUSH
25246: LD_INT 1
25248: ARRAY
25249: PPUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: CALL_OW 1
25259: ST_TO_ADDR
25260: GO 25524
// begin tmp := arr ;
25262: LD_ADDR_VAR 0 6
25266: PUSH
25267: LD_VAR 0 1
25271: ST_TO_ADDR
// s_arr := [ tmp ] ;
25272: LD_ADDR_VAR 0 7
25276: PUSH
25277: LD_VAR 0 6
25281: PUSH
25282: EMPTY
25283: LIST
25284: ST_TO_ADDR
// for i = 1 to pos - 1 do
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: DOUBLE
25291: LD_INT 1
25293: DEC
25294: ST_TO_ADDR
25295: LD_VAR 0 2
25299: PUSH
25300: LD_INT 1
25302: MINUS
25303: PUSH
25304: FOR_TO
25305: IFFALSE 25350
// begin tmp := tmp [ pos [ i ] ] ;
25307: LD_ADDR_VAR 0 6
25311: PUSH
25312: LD_VAR 0 6
25316: PUSH
25317: LD_VAR 0 2
25321: PUSH
25322: LD_VAR 0 5
25326: ARRAY
25327: ARRAY
25328: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25329: LD_ADDR_VAR 0 7
25333: PUSH
25334: LD_VAR 0 7
25338: PUSH
25339: LD_VAR 0 6
25343: PUSH
25344: EMPTY
25345: LIST
25346: ADD
25347: ST_TO_ADDR
// end ;
25348: GO 25304
25350: POP
25351: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25352: LD_ADDR_VAR 0 6
25356: PUSH
25357: LD_VAR 0 6
25361: PPUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_VAR 0 2
25371: ARRAY
25372: PPUSH
25373: LD_VAR 0 3
25377: PPUSH
25378: CALL_OW 1
25382: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25383: LD_ADDR_VAR 0 7
25387: PUSH
25388: LD_VAR 0 7
25392: PPUSH
25393: LD_VAR 0 7
25397: PPUSH
25398: LD_VAR 0 6
25402: PPUSH
25403: CALL_OW 1
25407: ST_TO_ADDR
// for i = s_arr downto 2 do
25408: LD_ADDR_VAR 0 5
25412: PUSH
25413: DOUBLE
25414: LD_VAR 0 7
25418: INC
25419: ST_TO_ADDR
25420: LD_INT 2
25422: PUSH
25423: FOR_DOWNTO
25424: IFFALSE 25508
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25426: LD_ADDR_VAR 0 6
25430: PUSH
25431: LD_VAR 0 7
25435: PUSH
25436: LD_VAR 0 5
25440: PUSH
25441: LD_INT 1
25443: MINUS
25444: ARRAY
25445: PPUSH
25446: LD_VAR 0 2
25450: PUSH
25451: LD_VAR 0 5
25455: PUSH
25456: LD_INT 1
25458: MINUS
25459: ARRAY
25460: PPUSH
25461: LD_VAR 0 7
25465: PUSH
25466: LD_VAR 0 5
25470: ARRAY
25471: PPUSH
25472: CALL_OW 1
25476: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25477: LD_ADDR_VAR 0 7
25481: PUSH
25482: LD_VAR 0 7
25486: PPUSH
25487: LD_VAR 0 5
25491: PUSH
25492: LD_INT 1
25494: MINUS
25495: PPUSH
25496: LD_VAR 0 6
25500: PPUSH
25501: CALL_OW 1
25505: ST_TO_ADDR
// end ;
25506: GO 25423
25508: POP
25509: POP
// result := s_arr [ 1 ] ;
25510: LD_ADDR_VAR 0 4
25514: PUSH
25515: LD_VAR 0 7
25519: PUSH
25520: LD_INT 1
25522: ARRAY
25523: ST_TO_ADDR
// end ; end ;
25524: LD_VAR 0 4
25528: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25529: LD_INT 0
25531: PPUSH
25532: PPUSH
// if not list then
25533: LD_VAR 0 1
25537: NOT
25538: IFFALSE 25542
// exit ;
25540: GO 25633
// i := list [ pos1 ] ;
25542: LD_ADDR_VAR 0 5
25546: PUSH
25547: LD_VAR 0 1
25551: PUSH
25552: LD_VAR 0 2
25556: ARRAY
25557: ST_TO_ADDR
// if not i then
25558: LD_VAR 0 5
25562: NOT
25563: IFFALSE 25567
// exit ;
25565: GO 25633
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25567: LD_ADDR_VAR 0 1
25571: PUSH
25572: LD_VAR 0 1
25576: PPUSH
25577: LD_VAR 0 2
25581: PPUSH
25582: LD_VAR 0 1
25586: PUSH
25587: LD_VAR 0 3
25591: ARRAY
25592: PPUSH
25593: CALL_OW 1
25597: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25598: LD_ADDR_VAR 0 1
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_VAR 0 5
25617: PPUSH
25618: CALL_OW 1
25622: ST_TO_ADDR
// result := list ;
25623: LD_ADDR_VAR 0 4
25627: PUSH
25628: LD_VAR 0 1
25632: ST_TO_ADDR
// end ;
25633: LD_VAR 0 4
25637: RET
// export function Add ( list , pos , val ) ; begin
25638: LD_INT 0
25640: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_VAR 0 2
25655: PPUSH
25656: LD_VAR 0 3
25660: PPUSH
25661: CALL 25203 0 3
25665: ST_TO_ADDR
25666: LD_VAR 0 4
25670: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25671: LD_INT 0
25673: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25674: LD_ADDR_VAR 0 5
25678: PUSH
25679: LD_VAR 0 1
25683: PPUSH
25684: CALL_OW 250
25688: PPUSH
25689: LD_VAR 0 1
25693: PPUSH
25694: CALL_OW 251
25698: PPUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_VAR 0 3
25708: PPUSH
25709: LD_VAR 0 4
25713: PPUSH
25714: CALL 25724 0 5
25718: ST_TO_ADDR
// end ;
25719: LD_VAR 0 5
25723: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25724: LD_INT 0
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
// if not list then
25730: LD_VAR 0 3
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 26127
// result := [ ] ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: EMPTY
25745: ST_TO_ADDR
// for i in list do
25746: LD_ADDR_VAR 0 7
25750: PUSH
25751: LD_VAR 0 3
25755: PUSH
25756: FOR_IN
25757: IFFALSE 25959
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25759: LD_ADDR_VAR 0 9
25763: PUSH
25764: LD_VAR 0 7
25768: PPUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: LD_VAR 0 2
25778: PPUSH
25779: CALL_OW 297
25783: ST_TO_ADDR
// if not result then
25784: LD_VAR 0 6
25788: NOT
25789: IFFALSE 25815
// result := [ [ i , tmp ] ] else
25791: LD_ADDR_VAR 0 6
25795: PUSH
25796: LD_VAR 0 7
25800: PUSH
25801: LD_VAR 0 9
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: ST_TO_ADDR
25813: GO 25957
// begin if result [ result ] [ 2 ] < tmp then
25815: LD_VAR 0 6
25819: PUSH
25820: LD_VAR 0 6
25824: ARRAY
25825: PUSH
25826: LD_INT 2
25828: ARRAY
25829: PUSH
25830: LD_VAR 0 9
25834: LESS
25835: IFFALSE 25877
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25837: LD_ADDR_VAR 0 6
25841: PUSH
25842: LD_VAR 0 6
25846: PPUSH
25847: LD_VAR 0 6
25851: PUSH
25852: LD_INT 1
25854: PLUS
25855: PPUSH
25856: LD_VAR 0 7
25860: PUSH
25861: LD_VAR 0 9
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PPUSH
25870: CALL_OW 2
25874: ST_TO_ADDR
25875: GO 25957
// for j = 1 to result do
25877: LD_ADDR_VAR 0 8
25881: PUSH
25882: DOUBLE
25883: LD_INT 1
25885: DEC
25886: ST_TO_ADDR
25887: LD_VAR 0 6
25891: PUSH
25892: FOR_TO
25893: IFFALSE 25955
// begin if tmp < result [ j ] [ 2 ] then
25895: LD_VAR 0 9
25899: PUSH
25900: LD_VAR 0 6
25904: PUSH
25905: LD_VAR 0 8
25909: ARRAY
25910: PUSH
25911: LD_INT 2
25913: ARRAY
25914: LESS
25915: IFFALSE 25953
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25917: LD_ADDR_VAR 0 6
25921: PUSH
25922: LD_VAR 0 6
25926: PPUSH
25927: LD_VAR 0 8
25931: PPUSH
25932: LD_VAR 0 7
25936: PUSH
25937: LD_VAR 0 9
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 2
25950: ST_TO_ADDR
// break ;
25951: GO 25955
// end ; end ;
25953: GO 25892
25955: POP
25956: POP
// end ; end ;
25957: GO 25756
25959: POP
25960: POP
// if result and not asc then
25961: LD_VAR 0 6
25965: PUSH
25966: LD_VAR 0 4
25970: NOT
25971: AND
25972: IFFALSE 26047
// begin tmp := result ;
25974: LD_ADDR_VAR 0 9
25978: PUSH
25979: LD_VAR 0 6
25983: ST_TO_ADDR
// for i = tmp downto 1 do
25984: LD_ADDR_VAR 0 7
25988: PUSH
25989: DOUBLE
25990: LD_VAR 0 9
25994: INC
25995: ST_TO_ADDR
25996: LD_INT 1
25998: PUSH
25999: FOR_DOWNTO
26000: IFFALSE 26045
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26002: LD_ADDR_VAR 0 6
26006: PUSH
26007: LD_VAR 0 6
26011: PPUSH
26012: LD_VAR 0 9
26016: PUSH
26017: LD_VAR 0 7
26021: MINUS
26022: PUSH
26023: LD_INT 1
26025: PLUS
26026: PPUSH
26027: LD_VAR 0 9
26031: PUSH
26032: LD_VAR 0 7
26036: ARRAY
26037: PPUSH
26038: CALL_OW 1
26042: ST_TO_ADDR
26043: GO 25999
26045: POP
26046: POP
// end ; tmp := [ ] ;
26047: LD_ADDR_VAR 0 9
26051: PUSH
26052: EMPTY
26053: ST_TO_ADDR
// if mode then
26054: LD_VAR 0 5
26058: IFFALSE 26127
// begin for i = 1 to result do
26060: LD_ADDR_VAR 0 7
26064: PUSH
26065: DOUBLE
26066: LD_INT 1
26068: DEC
26069: ST_TO_ADDR
26070: LD_VAR 0 6
26074: PUSH
26075: FOR_TO
26076: IFFALSE 26115
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26078: LD_ADDR_VAR 0 9
26082: PUSH
26083: LD_VAR 0 9
26087: PPUSH
26088: LD_VAR 0 7
26092: PPUSH
26093: LD_VAR 0 6
26097: PUSH
26098: LD_VAR 0 7
26102: ARRAY
26103: PUSH
26104: LD_INT 1
26106: ARRAY
26107: PPUSH
26108: CALL_OW 1
26112: ST_TO_ADDR
26113: GO 26075
26115: POP
26116: POP
// result := tmp ;
26117: LD_ADDR_VAR 0 6
26121: PUSH
26122: LD_VAR 0 9
26126: ST_TO_ADDR
// end ; end ;
26127: LD_VAR 0 6
26131: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26132: LD_INT 0
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26140: LD_ADDR_VAR 0 5
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// if not x or not y then
26162: LD_VAR 0 2
26166: NOT
26167: PUSH
26168: LD_VAR 0 3
26172: NOT
26173: OR
26174: IFFALSE 26178
// exit ;
26176: GO 27824
// if not range then
26178: LD_VAR 0 4
26182: NOT
26183: IFFALSE 26193
// range := 10 ;
26185: LD_ADDR_VAR 0 4
26189: PUSH
26190: LD_INT 10
26192: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26193: LD_ADDR_VAR 0 8
26197: PUSH
26198: LD_INT 81
26200: PUSH
26201: LD_VAR 0 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 92
26212: PUSH
26213: LD_VAR 0 2
26217: PUSH
26218: LD_VAR 0 3
26222: PUSH
26223: LD_VAR 0 4
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 3
26236: PUSH
26237: LD_INT 21
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: PPUSH
26256: CALL_OW 69
26260: ST_TO_ADDR
// if not tmp then
26261: LD_VAR 0 8
26265: NOT
26266: IFFALSE 26270
// exit ;
26268: GO 27824
// for i in tmp do
26270: LD_ADDR_VAR 0 6
26274: PUSH
26275: LD_VAR 0 8
26279: PUSH
26280: FOR_IN
26281: IFFALSE 27799
// begin points := [ 0 , 0 , 0 ] ;
26283: LD_ADDR_VAR 0 9
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: ST_TO_ADDR
// bpoints := 1 ;
26302: LD_ADDR_VAR 0 10
26306: PUSH
26307: LD_INT 1
26309: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26310: LD_VAR 0 6
26314: PPUSH
26315: CALL_OW 247
26319: PUSH
26320: LD_INT 1
26322: DOUBLE
26323: EQUAL
26324: IFTRUE 26328
26326: GO 26906
26328: POP
// begin if GetClass ( i ) = 1 then
26329: LD_VAR 0 6
26333: PPUSH
26334: CALL_OW 257
26338: PUSH
26339: LD_INT 1
26341: EQUAL
26342: IFFALSE 26363
// points := [ 10 , 5 , 3 ] ;
26344: LD_ADDR_VAR 0 9
26348: PUSH
26349: LD_INT 10
26351: PUSH
26352: LD_INT 5
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26363: LD_VAR 0 6
26367: PPUSH
26368: CALL_OW 257
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 3
26378: PUSH
26379: LD_INT 4
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: IN
26387: IFFALSE 26408
// points := [ 3 , 2 , 1 ] ;
26389: LD_ADDR_VAR 0 9
26393: PUSH
26394: LD_INT 3
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26408: LD_VAR 0 6
26412: PPUSH
26413: CALL_OW 257
26417: PUSH
26418: LD_INT 5
26420: EQUAL
26421: IFFALSE 26442
// points := [ 130 , 5 , 2 ] ;
26423: LD_ADDR_VAR 0 9
26427: PUSH
26428: LD_INT 130
26430: PUSH
26431: LD_INT 5
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26442: LD_VAR 0 6
26446: PPUSH
26447: CALL_OW 257
26451: PUSH
26452: LD_INT 8
26454: EQUAL
26455: IFFALSE 26476
// points := [ 35 , 35 , 30 ] ;
26457: LD_ADDR_VAR 0 9
26461: PUSH
26462: LD_INT 35
26464: PUSH
26465: LD_INT 35
26467: PUSH
26468: LD_INT 30
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26476: LD_VAR 0 6
26480: PPUSH
26481: CALL_OW 257
26485: PUSH
26486: LD_INT 9
26488: EQUAL
26489: IFFALSE 26510
// points := [ 20 , 55 , 40 ] ;
26491: LD_ADDR_VAR 0 9
26495: PUSH
26496: LD_INT 20
26498: PUSH
26499: LD_INT 55
26501: PUSH
26502: LD_INT 40
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: LIST
26509: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26510: LD_VAR 0 6
26514: PPUSH
26515: CALL_OW 257
26519: PUSH
26520: LD_INT 12
26522: PUSH
26523: LD_INT 16
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: IN
26530: IFFALSE 26551
// points := [ 5 , 3 , 2 ] ;
26532: LD_ADDR_VAR 0 9
26536: PUSH
26537: LD_INT 5
26539: PUSH
26540: LD_INT 3
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26551: LD_VAR 0 6
26555: PPUSH
26556: CALL_OW 257
26560: PUSH
26561: LD_INT 17
26563: EQUAL
26564: IFFALSE 26585
// points := [ 100 , 50 , 75 ] ;
26566: LD_ADDR_VAR 0 9
26570: PUSH
26571: LD_INT 100
26573: PUSH
26574: LD_INT 50
26576: PUSH
26577: LD_INT 75
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26585: LD_VAR 0 6
26589: PPUSH
26590: CALL_OW 257
26594: PUSH
26595: LD_INT 15
26597: EQUAL
26598: IFFALSE 26619
// points := [ 10 , 5 , 3 ] ;
26600: LD_ADDR_VAR 0 9
26604: PUSH
26605: LD_INT 10
26607: PUSH
26608: LD_INT 5
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26619: LD_VAR 0 6
26623: PPUSH
26624: CALL_OW 257
26628: PUSH
26629: LD_INT 14
26631: EQUAL
26632: IFFALSE 26653
// points := [ 10 , 0 , 0 ] ;
26634: LD_ADDR_VAR 0 9
26638: PUSH
26639: LD_INT 10
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26653: LD_VAR 0 6
26657: PPUSH
26658: CALL_OW 257
26662: PUSH
26663: LD_INT 11
26665: EQUAL
26666: IFFALSE 26687
// points := [ 30 , 10 , 5 ] ;
26668: LD_ADDR_VAR 0 9
26672: PUSH
26673: LD_INT 30
26675: PUSH
26676: LD_INT 10
26678: PUSH
26679: LD_INT 5
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26687: LD_VAR 0 1
26691: PPUSH
26692: LD_INT 5
26694: PPUSH
26695: CALL_OW 321
26699: PUSH
26700: LD_INT 2
26702: EQUAL
26703: IFFALSE 26720
// bpoints := bpoints * 1.8 ;
26705: LD_ADDR_VAR 0 10
26709: PUSH
26710: LD_VAR 0 10
26714: PUSH
26715: LD_REAL  1.80000000000000E+0000
26718: MUL
26719: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26720: LD_VAR 0 6
26724: PPUSH
26725: CALL_OW 257
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: LD_INT 4
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: IN
26748: PUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_INT 51
26756: PPUSH
26757: CALL_OW 321
26761: PUSH
26762: LD_INT 2
26764: EQUAL
26765: AND
26766: IFFALSE 26783
// bpoints := bpoints * 1.2 ;
26768: LD_ADDR_VAR 0 10
26772: PUSH
26773: LD_VAR 0 10
26777: PUSH
26778: LD_REAL  1.20000000000000E+0000
26781: MUL
26782: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26783: LD_VAR 0 6
26787: PPUSH
26788: CALL_OW 257
26792: PUSH
26793: LD_INT 5
26795: PUSH
26796: LD_INT 7
26798: PUSH
26799: LD_INT 9
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: PUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: LD_INT 52
26815: PPUSH
26816: CALL_OW 321
26820: PUSH
26821: LD_INT 2
26823: EQUAL
26824: AND
26825: IFFALSE 26842
// bpoints := bpoints * 1.5 ;
26827: LD_ADDR_VAR 0 10
26831: PUSH
26832: LD_VAR 0 10
26836: PUSH
26837: LD_REAL  1.50000000000000E+0000
26840: MUL
26841: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26842: LD_VAR 0 1
26846: PPUSH
26847: LD_INT 66
26849: PPUSH
26850: CALL_OW 321
26854: PUSH
26855: LD_INT 2
26857: EQUAL
26858: IFFALSE 26875
// bpoints := bpoints * 1.1 ;
26860: LD_ADDR_VAR 0 10
26864: PUSH
26865: LD_VAR 0 10
26869: PUSH
26870: LD_REAL  1.10000000000000E+0000
26873: MUL
26874: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26875: LD_ADDR_VAR 0 10
26879: PUSH
26880: LD_VAR 0 10
26884: PUSH
26885: LD_VAR 0 6
26889: PPUSH
26890: LD_INT 1
26892: PPUSH
26893: CALL_OW 259
26897: PUSH
26898: LD_REAL  1.15000000000000E+0000
26901: MUL
26902: MUL
26903: ST_TO_ADDR
// end ; unit_vehicle :
26904: GO 27728
26906: LD_INT 2
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 27716
26914: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26915: LD_VAR 0 6
26919: PPUSH
26920: CALL_OW 264
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: LD_INT 42
26930: PUSH
26931: LD_INT 24
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: IN
26939: IFFALSE 26960
// points := [ 25 , 5 , 3 ] ;
26941: LD_ADDR_VAR 0 9
26945: PUSH
26946: LD_INT 25
26948: PUSH
26949: LD_INT 5
26951: PUSH
26952: LD_INT 3
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26960: LD_VAR 0 6
26964: PPUSH
26965: CALL_OW 264
26969: PUSH
26970: LD_INT 4
26972: PUSH
26973: LD_INT 43
26975: PUSH
26976: LD_INT 25
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: IN
26984: IFFALSE 27005
// points := [ 40 , 15 , 5 ] ;
26986: LD_ADDR_VAR 0 9
26990: PUSH
26991: LD_INT 40
26993: PUSH
26994: LD_INT 15
26996: PUSH
26997: LD_INT 5
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27005: LD_VAR 0 6
27009: PPUSH
27010: CALL_OW 264
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 23
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: IN
27025: IFFALSE 27046
// points := [ 7 , 25 , 8 ] ;
27027: LD_ADDR_VAR 0 9
27031: PUSH
27032: LD_INT 7
27034: PUSH
27035: LD_INT 25
27037: PUSH
27038: LD_INT 8
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27046: LD_VAR 0 6
27050: PPUSH
27051: CALL_OW 264
27055: PUSH
27056: LD_INT 5
27058: PUSH
27059: LD_INT 27
27061: PUSH
27062: LD_INT 44
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: IN
27070: IFFALSE 27091
// points := [ 14 , 50 , 16 ] ;
27072: LD_ADDR_VAR 0 9
27076: PUSH
27077: LD_INT 14
27079: PUSH
27080: LD_INT 50
27082: PUSH
27083: LD_INT 16
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27091: LD_VAR 0 6
27095: PPUSH
27096: CALL_OW 264
27100: PUSH
27101: LD_INT 6
27103: PUSH
27104: LD_INT 46
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: IN
27111: IFFALSE 27132
// points := [ 32 , 120 , 70 ] ;
27113: LD_ADDR_VAR 0 9
27117: PUSH
27118: LD_INT 32
27120: PUSH
27121: LD_INT 120
27123: PUSH
27124: LD_INT 70
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27132: LD_VAR 0 6
27136: PPUSH
27137: CALL_OW 264
27141: PUSH
27142: LD_INT 7
27144: PUSH
27145: LD_INT 28
27147: PUSH
27148: LD_INT 45
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: IN
27156: IFFALSE 27177
// points := [ 35 , 20 , 45 ] ;
27158: LD_ADDR_VAR 0 9
27162: PUSH
27163: LD_INT 35
27165: PUSH
27166: LD_INT 20
27168: PUSH
27169: LD_INT 45
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27177: LD_VAR 0 6
27181: PPUSH
27182: CALL_OW 264
27186: PUSH
27187: LD_INT 47
27189: PUSH
27190: EMPTY
27191: LIST
27192: IN
27193: IFFALSE 27214
// points := [ 67 , 45 , 75 ] ;
27195: LD_ADDR_VAR 0 9
27199: PUSH
27200: LD_INT 67
27202: PUSH
27203: LD_INT 45
27205: PUSH
27206: LD_INT 75
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 264
27223: PUSH
27224: LD_INT 26
27226: PUSH
27227: EMPTY
27228: LIST
27229: IN
27230: IFFALSE 27251
// points := [ 120 , 30 , 80 ] ;
27232: LD_ADDR_VAR 0 9
27236: PUSH
27237: LD_INT 120
27239: PUSH
27240: LD_INT 30
27242: PUSH
27243: LD_INT 80
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27251: LD_VAR 0 6
27255: PPUSH
27256: CALL_OW 264
27260: PUSH
27261: LD_INT 22
27263: PUSH
27264: EMPTY
27265: LIST
27266: IN
27267: IFFALSE 27288
// points := [ 40 , 1 , 1 ] ;
27269: LD_ADDR_VAR 0 9
27273: PUSH
27274: LD_INT 40
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27288: LD_VAR 0 6
27292: PPUSH
27293: CALL_OW 264
27297: PUSH
27298: LD_INT 29
27300: PUSH
27301: EMPTY
27302: LIST
27303: IN
27304: IFFALSE 27325
// points := [ 70 , 200 , 400 ] ;
27306: LD_ADDR_VAR 0 9
27310: PUSH
27311: LD_INT 70
27313: PUSH
27314: LD_INT 200
27316: PUSH
27317: LD_INT 400
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27325: LD_VAR 0 6
27329: PPUSH
27330: CALL_OW 264
27334: PUSH
27335: LD_INT 14
27337: PUSH
27338: LD_INT 53
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: IN
27345: IFFALSE 27366
// points := [ 40 , 10 , 20 ] ;
27347: LD_ADDR_VAR 0 9
27351: PUSH
27352: LD_INT 40
27354: PUSH
27355: LD_INT 10
27357: PUSH
27358: LD_INT 20
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 264
27375: PUSH
27376: LD_INT 9
27378: PUSH
27379: EMPTY
27380: LIST
27381: IN
27382: IFFALSE 27403
// points := [ 5 , 70 , 20 ] ;
27384: LD_ADDR_VAR 0 9
27388: PUSH
27389: LD_INT 5
27391: PUSH
27392: LD_INT 70
27394: PUSH
27395: LD_INT 20
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27403: LD_VAR 0 6
27407: PPUSH
27408: CALL_OW 264
27412: PUSH
27413: LD_INT 10
27415: PUSH
27416: EMPTY
27417: LIST
27418: IN
27419: IFFALSE 27440
// points := [ 35 , 110 , 70 ] ;
27421: LD_ADDR_VAR 0 9
27425: PUSH
27426: LD_INT 35
27428: PUSH
27429: LD_INT 110
27431: PUSH
27432: LD_INT 70
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27440: LD_VAR 0 6
27444: PPUSH
27445: CALL_OW 265
27449: PUSH
27450: LD_INT 25
27452: EQUAL
27453: IFFALSE 27474
// points := [ 80 , 65 , 100 ] ;
27455: LD_ADDR_VAR 0 9
27459: PUSH
27460: LD_INT 80
27462: PUSH
27463: LD_INT 65
27465: PUSH
27466: LD_INT 100
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27474: LD_VAR 0 6
27478: PPUSH
27479: CALL_OW 263
27483: PUSH
27484: LD_INT 1
27486: EQUAL
27487: IFFALSE 27522
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27489: LD_ADDR_VAR 0 10
27493: PUSH
27494: LD_VAR 0 10
27498: PUSH
27499: LD_VAR 0 6
27503: PPUSH
27504: CALL_OW 311
27508: PPUSH
27509: LD_INT 3
27511: PPUSH
27512: CALL_OW 259
27516: PUSH
27517: LD_INT 4
27519: MUL
27520: MUL
27521: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27522: LD_VAR 0 6
27526: PPUSH
27527: CALL_OW 263
27531: PUSH
27532: LD_INT 2
27534: EQUAL
27535: IFFALSE 27586
// begin j := IsControledBy ( i ) ;
27537: LD_ADDR_VAR 0 7
27541: PUSH
27542: LD_VAR 0 6
27546: PPUSH
27547: CALL_OW 312
27551: ST_TO_ADDR
// if j then
27552: LD_VAR 0 7
27556: IFFALSE 27586
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27558: LD_ADDR_VAR 0 10
27562: PUSH
27563: LD_VAR 0 10
27567: PUSH
27568: LD_VAR 0 7
27572: PPUSH
27573: LD_INT 3
27575: PPUSH
27576: CALL_OW 259
27580: PUSH
27581: LD_INT 3
27583: MUL
27584: MUL
27585: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27586: LD_VAR 0 6
27590: PPUSH
27591: CALL_OW 264
27595: PUSH
27596: LD_INT 5
27598: PUSH
27599: LD_INT 6
27601: PUSH
27602: LD_INT 46
27604: PUSH
27605: LD_INT 44
27607: PUSH
27608: LD_INT 47
27610: PUSH
27611: LD_INT 45
27613: PUSH
27614: LD_INT 28
27616: PUSH
27617: LD_INT 7
27619: PUSH
27620: LD_INT 27
27622: PUSH
27623: LD_INT 29
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: IN
27638: PUSH
27639: LD_VAR 0 1
27643: PPUSH
27644: LD_INT 52
27646: PPUSH
27647: CALL_OW 321
27651: PUSH
27652: LD_INT 2
27654: EQUAL
27655: AND
27656: IFFALSE 27673
// bpoints := bpoints * 1.2 ;
27658: LD_ADDR_VAR 0 10
27662: PUSH
27663: LD_VAR 0 10
27667: PUSH
27668: LD_REAL  1.20000000000000E+0000
27671: MUL
27672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27673: LD_VAR 0 6
27677: PPUSH
27678: CALL_OW 264
27682: PUSH
27683: LD_INT 6
27685: PUSH
27686: LD_INT 46
27688: PUSH
27689: LD_INT 47
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: IN
27697: IFFALSE 27714
// bpoints := bpoints * 1.2 ;
27699: LD_ADDR_VAR 0 10
27703: PUSH
27704: LD_VAR 0 10
27708: PUSH
27709: LD_REAL  1.20000000000000E+0000
27712: MUL
27713: ST_TO_ADDR
// end ; unit_building :
27714: GO 27728
27716: LD_INT 3
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27724
27722: GO 27727
27724: POP
// ; end ;
27725: GO 27728
27727: POP
// for j = 1 to 3 do
27728: LD_ADDR_VAR 0 7
27732: PUSH
27733: DOUBLE
27734: LD_INT 1
27736: DEC
27737: ST_TO_ADDR
27738: LD_INT 3
27740: PUSH
27741: FOR_TO
27742: IFFALSE 27795
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27744: LD_ADDR_VAR 0 5
27748: PUSH
27749: LD_VAR 0 5
27753: PPUSH
27754: LD_VAR 0 7
27758: PPUSH
27759: LD_VAR 0 5
27763: PUSH
27764: LD_VAR 0 7
27768: ARRAY
27769: PUSH
27770: LD_VAR 0 9
27774: PUSH
27775: LD_VAR 0 7
27779: ARRAY
27780: PUSH
27781: LD_VAR 0 10
27785: MUL
27786: PLUS
27787: PPUSH
27788: CALL_OW 1
27792: ST_TO_ADDR
27793: GO 27741
27795: POP
27796: POP
// end ;
27797: GO 26280
27799: POP
27800: POP
// result := Replace ( result , 4 , tmp ) ;
27801: LD_ADDR_VAR 0 5
27805: PUSH
27806: LD_VAR 0 5
27810: PPUSH
27811: LD_INT 4
27813: PPUSH
27814: LD_VAR 0 8
27818: PPUSH
27819: CALL_OW 1
27823: ST_TO_ADDR
// end ;
27824: LD_VAR 0 5
27828: RET
// export function DangerAtRange ( unit , range ) ; begin
27829: LD_INT 0
27831: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27832: LD_ADDR_VAR 0 3
27836: PUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 255
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 250
27856: PPUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL_OW 251
27866: PPUSH
27867: LD_VAR 0 2
27871: PPUSH
27872: CALL 26132 0 4
27876: ST_TO_ADDR
// end ;
27877: LD_VAR 0 3
27881: RET
// export function DangerInArea ( side , area ) ; begin
27882: LD_INT 0
27884: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_INT 81
27897: PUSH
27898: LD_VAR 0 1
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 70
27911: ST_TO_ADDR
// end ;
27912: LD_VAR 0 3
27916: RET
// export function IsExtension ( b ) ; begin
27917: LD_INT 0
27919: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: LD_VAR 0 1
27929: PUSH
27930: LD_INT 23
27932: PUSH
27933: LD_INT 20
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_INT 17
27941: PUSH
27942: LD_INT 24
27944: PUSH
27945: LD_INT 21
27947: PUSH
27948: LD_INT 19
27950: PUSH
27951: LD_INT 16
27953: PUSH
27954: LD_INT 25
27956: PUSH
27957: LD_INT 18
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: IN
27972: ST_TO_ADDR
// end ;
27973: LD_VAR 0 2
27977: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
27978: LD_INT 0
27980: PPUSH
27981: PPUSH
27982: PPUSH
// result := [ ] ;
27983: LD_ADDR_VAR 0 2
27987: PUSH
27988: EMPTY
27989: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_INT 21
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PPUSH
28005: CALL_OW 69
28009: ST_TO_ADDR
// if not tmp then
28010: LD_VAR 0 3
28014: NOT
28015: IFFALSE 28019
// exit ;
28017: GO 28069
// for i in tmp do
28019: LD_ADDR_VAR 0 4
28023: PUSH
28024: LD_VAR 0 3
28028: PUSH
28029: FOR_IN
28030: IFFALSE 28067
// if GetBase ( i ) = base then
28032: LD_VAR 0 4
28036: PPUSH
28037: CALL_OW 274
28041: PUSH
28042: LD_VAR 0 1
28046: EQUAL
28047: IFFALSE 28065
// result := result ^ i ;
28049: LD_ADDR_VAR 0 2
28053: PUSH
28054: LD_VAR 0 2
28058: PUSH
28059: LD_VAR 0 4
28063: ADD
28064: ST_TO_ADDR
28065: GO 28029
28067: POP
28068: POP
// end ;
28069: LD_VAR 0 2
28073: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28074: LD_INT 0
28076: PPUSH
28077: PPUSH
// if BuildingStatus ( b ) = bs_build then
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 461
28087: PUSH
28088: LD_INT 1
28090: EQUAL
28091: IFFALSE 28151
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_STRING h
28100: PUSH
28101: LD_VAR 0 2
28105: PPUSH
28106: CALL_OW 250
28110: PUSH
28111: LD_VAR 0 2
28115: PPUSH
28116: CALL_OW 251
28120: PUSH
28121: LD_VAR 0 2
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: PPUSH
28147: CALL_OW 446
// end ;
28151: LD_VAR 0 3
28155: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28164: LD_VAR 0 1
28168: NOT
28169: PUSH
28170: LD_VAR 0 1
28174: PPUSH
28175: CALL_OW 263
28179: PUSH
28180: LD_INT 2
28182: EQUAL
28183: NOT
28184: OR
28185: IFFALSE 28189
// exit ;
28187: GO 28505
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28189: LD_ADDR_VAR 0 6
28193: PUSH
28194: LD_INT 22
28196: PUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 255
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 30
28216: PUSH
28217: LD_INT 36
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 34
28226: PUSH
28227: LD_INT 31
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: ST_TO_ADDR
// if not tmp then
28248: LD_VAR 0 6
28252: NOT
28253: IFFALSE 28257
// exit ;
28255: GO 28505
// result := [ ] ;
28257: LD_ADDR_VAR 0 2
28261: PUSH
28262: EMPTY
28263: ST_TO_ADDR
// for i in tmp do
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_VAR 0 6
28273: PUSH
28274: FOR_IN
28275: IFFALSE 28346
// begin t := UnitsInside ( i ) ;
28277: LD_ADDR_VAR 0 4
28281: PUSH
28282: LD_VAR 0 3
28286: PPUSH
28287: CALL_OW 313
28291: ST_TO_ADDR
// if t then
28292: LD_VAR 0 4
28296: IFFALSE 28344
// for j in t do
28298: LD_ADDR_VAR 0 7
28302: PUSH
28303: LD_VAR 0 4
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28342
// result := Insert ( result , result + 1 , j ) ;
28311: LD_ADDR_VAR 0 2
28315: PUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: LD_VAR 0 2
28325: PUSH
28326: LD_INT 1
28328: PLUS
28329: PPUSH
28330: LD_VAR 0 7
28334: PPUSH
28335: CALL_OW 2
28339: ST_TO_ADDR
28340: GO 28308
28342: POP
28343: POP
// end ;
28344: GO 28274
28346: POP
28347: POP
// if not result then
28348: LD_VAR 0 2
28352: NOT
28353: IFFALSE 28357
// exit ;
28355: GO 28505
// mech := result [ 1 ] ;
28357: LD_ADDR_VAR 0 5
28361: PUSH
28362: LD_VAR 0 2
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: ST_TO_ADDR
// if result > 1 then
28371: LD_VAR 0 2
28375: PUSH
28376: LD_INT 1
28378: GREATER
28379: IFFALSE 28491
// for i = 2 to result do
28381: LD_ADDR_VAR 0 3
28385: PUSH
28386: DOUBLE
28387: LD_INT 2
28389: DEC
28390: ST_TO_ADDR
28391: LD_VAR 0 2
28395: PUSH
28396: FOR_TO
28397: IFFALSE 28489
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28399: LD_ADDR_VAR 0 4
28403: PUSH
28404: LD_VAR 0 2
28408: PUSH
28409: LD_VAR 0 3
28413: ARRAY
28414: PPUSH
28415: LD_INT 3
28417: PPUSH
28418: CALL_OW 259
28422: PUSH
28423: LD_VAR 0 2
28427: PUSH
28428: LD_VAR 0 3
28432: ARRAY
28433: PPUSH
28434: CALL_OW 432
28438: MINUS
28439: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28440: LD_VAR 0 4
28444: PUSH
28445: LD_VAR 0 5
28449: PPUSH
28450: LD_INT 3
28452: PPUSH
28453: CALL_OW 259
28457: PUSH
28458: LD_VAR 0 5
28462: PPUSH
28463: CALL_OW 432
28467: MINUS
28468: GREATEREQUAL
28469: IFFALSE 28487
// mech := result [ i ] ;
28471: LD_ADDR_VAR 0 5
28475: PUSH
28476: LD_VAR 0 2
28480: PUSH
28481: LD_VAR 0 3
28485: ARRAY
28486: ST_TO_ADDR
// end ;
28487: GO 28396
28489: POP
28490: POP
// ComLinkTo ( vehicle , mech ) ;
28491: LD_VAR 0 1
28495: PPUSH
28496: LD_VAR 0 5
28500: PPUSH
28501: CALL_OW 135
// end ;
28505: LD_VAR 0 2
28509: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28510: LD_INT 0
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
28524: PPUSH
// result := [ ] ;
28525: LD_ADDR_VAR 0 6
28529: PUSH
28530: EMPTY
28531: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 266
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: IN
28552: NOT
28553: IFFALSE 28557
// exit ;
28555: GO 30076
// if name then
28557: LD_VAR 0 2
28561: IFFALSE 28577
// SetBName ( base_dep , name ) ;
28563: LD_VAR 0 1
28567: PPUSH
28568: LD_VAR 0 2
28572: PPUSH
28573: CALL_OW 500
// base := GetBase ( base_dep ) ;
28577: LD_ADDR_VAR 0 14
28581: PUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 274
28591: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28592: LD_ADDR_VAR 0 15
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 255
28606: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28607: LD_ADDR_VAR 0 16
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 248
28621: ST_TO_ADDR
// if sources then
28622: LD_VAR 0 4
28626: IFFALSE 28673
// for i = 1 to 3 do
28628: LD_ADDR_VAR 0 7
28632: PUSH
28633: DOUBLE
28634: LD_INT 1
28636: DEC
28637: ST_TO_ADDR
28638: LD_INT 3
28640: PUSH
28641: FOR_TO
28642: IFFALSE 28671
// AddResourceType ( base , i , sources [ i ] ) ;
28644: LD_VAR 0 14
28648: PPUSH
28649: LD_VAR 0 7
28653: PPUSH
28654: LD_VAR 0 4
28658: PUSH
28659: LD_VAR 0 7
28663: ARRAY
28664: PPUSH
28665: CALL_OW 276
28669: GO 28641
28671: POP
28672: POP
// buildings := GetBaseBuildings ( base ) ;
28673: LD_ADDR_VAR 0 17
28677: PUSH
28678: LD_VAR 0 14
28682: PPUSH
28683: CALL 27978 0 1
28687: ST_TO_ADDR
// InitHc ;
28688: CALL_OW 19
// InitUc ;
28692: CALL_OW 18
// uc_side := side ;
28696: LD_ADDR_OWVAR 20
28700: PUSH
28701: LD_VAR 0 15
28705: ST_TO_ADDR
// uc_nation := nation ;
28706: LD_ADDR_OWVAR 21
28710: PUSH
28711: LD_VAR 0 16
28715: ST_TO_ADDR
// if buildings then
28716: LD_VAR 0 17
28720: IFFALSE 29935
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28722: LD_VAR 0 17
28726: PPUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 30
28732: PUSH
28733: LD_INT 32
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 30
28742: PUSH
28743: LD_INT 33
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 72
28759: IFFALSE 28842
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_VAR 0 17
28770: PPUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 30
28776: PUSH
28777: LD_INT 32
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 30
28786: PUSH
28787: LD_INT 33
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: PPUSH
28799: CALL_OW 72
28803: PUSH
28804: FOR_IN
28805: IFFALSE 28840
// begin if not GetBWeapon ( i ) then
28807: LD_VAR 0 7
28811: PPUSH
28812: CALL_OW 269
28816: NOT
28817: IFFALSE 28838
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
28819: LD_VAR 0 7
28823: PPUSH
28824: LD_VAR 0 7
28828: PPUSH
28829: CALL 30081 0 1
28833: PPUSH
28834: CALL_OW 431
// end ;
28838: GO 28804
28840: POP
28841: POP
// end ; for i = 1 to personel do
28842: LD_ADDR_VAR 0 7
28846: PUSH
28847: DOUBLE
28848: LD_INT 1
28850: DEC
28851: ST_TO_ADDR
28852: LD_VAR 0 5
28856: PUSH
28857: FOR_TO
28858: IFFALSE 29915
// begin if i > 4 then
28860: LD_VAR 0 7
28864: PUSH
28865: LD_INT 4
28867: GREATER
28868: IFFALSE 28872
// break ;
28870: GO 29915
// case i of 1 :
28872: LD_VAR 0 7
28876: PUSH
28877: LD_INT 1
28879: DOUBLE
28880: EQUAL
28881: IFTRUE 28885
28883: GO 28958
28885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28886: LD_ADDR_VAR 0 11
28890: PUSH
28891: LD_VAR 0 17
28895: PPUSH
28896: LD_INT 22
28898: PUSH
28899: LD_VAR 0 15
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 32
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 30
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 5
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 72
28955: ST_TO_ADDR
28956: GO 29180
28958: LD_INT 2
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 29028
28966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28967: LD_ADDR_VAR 0 11
28971: PUSH
28972: LD_VAR 0 17
28976: PPUSH
28977: LD_INT 22
28979: PUSH
28980: LD_VAR 0 15
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 30
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 30
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PPUSH
29021: CALL_OW 72
29025: ST_TO_ADDR
29026: GO 29180
29028: LD_INT 3
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29098
29036: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29037: LD_ADDR_VAR 0 11
29041: PUSH
29042: LD_VAR 0 17
29046: PPUSH
29047: LD_INT 22
29049: PUSH
29050: LD_VAR 0 15
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 30
29074: PUSH
29075: LD_INT 3
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 72
29095: ST_TO_ADDR
29096: GO 29180
29098: LD_INT 4
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29179
29106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29107: LD_ADDR_VAR 0 11
29111: PUSH
29112: LD_VAR 0 17
29116: PPUSH
29117: LD_INT 22
29119: PUSH
29120: LD_VAR 0 15
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 30
29134: PUSH
29135: LD_INT 6
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 30
29144: PUSH
29145: LD_INT 7
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 30
29154: PUSH
29155: LD_INT 8
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PPUSH
29172: CALL_OW 72
29176: ST_TO_ADDR
29177: GO 29180
29179: POP
// if i = 1 then
29180: LD_VAR 0 7
29184: PUSH
29185: LD_INT 1
29187: EQUAL
29188: IFFALSE 29299
// begin tmp := [ ] ;
29190: LD_ADDR_VAR 0 18
29194: PUSH
29195: EMPTY
29196: ST_TO_ADDR
// for j in f do
29197: LD_ADDR_VAR 0 8
29201: PUSH
29202: LD_VAR 0 11
29206: PUSH
29207: FOR_IN
29208: IFFALSE 29281
// if GetBType ( j ) = b_bunker then
29210: LD_VAR 0 8
29214: PPUSH
29215: CALL_OW 266
29219: PUSH
29220: LD_INT 32
29222: EQUAL
29223: IFFALSE 29250
// tmp := Insert ( tmp , 1 , j ) else
29225: LD_ADDR_VAR 0 18
29229: PUSH
29230: LD_VAR 0 18
29234: PPUSH
29235: LD_INT 1
29237: PPUSH
29238: LD_VAR 0 8
29242: PPUSH
29243: CALL_OW 2
29247: ST_TO_ADDR
29248: GO 29279
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29250: LD_ADDR_VAR 0 18
29254: PUSH
29255: LD_VAR 0 18
29259: PPUSH
29260: LD_VAR 0 18
29264: PUSH
29265: LD_INT 1
29267: PLUS
29268: PPUSH
29269: LD_VAR 0 8
29273: PPUSH
29274: CALL_OW 2
29278: ST_TO_ADDR
29279: GO 29207
29281: POP
29282: POP
// if tmp then
29283: LD_VAR 0 18
29287: IFFALSE 29299
// f := tmp ;
29289: LD_ADDR_VAR 0 11
29293: PUSH
29294: LD_VAR 0 18
29298: ST_TO_ADDR
// end ; x := personel [ i ] ;
29299: LD_ADDR_VAR 0 12
29303: PUSH
29304: LD_VAR 0 5
29308: PUSH
29309: LD_VAR 0 7
29313: ARRAY
29314: ST_TO_ADDR
// if x = - 1 then
29315: LD_VAR 0 12
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: EQUAL
29324: IFFALSE 29533
// begin for j in f do
29326: LD_ADDR_VAR 0 8
29330: PUSH
29331: LD_VAR 0 11
29335: PUSH
29336: FOR_IN
29337: IFFALSE 29529
// repeat InitHc ;
29339: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29343: LD_VAR 0 8
29347: PPUSH
29348: CALL_OW 266
29352: PUSH
29353: LD_INT 5
29355: EQUAL
29356: IFFALSE 29426
// begin if UnitsInside ( j ) < 3 then
29358: LD_VAR 0 8
29362: PPUSH
29363: CALL_OW 313
29367: PUSH
29368: LD_INT 3
29370: LESS
29371: IFFALSE 29407
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29373: LD_INT 0
29375: PPUSH
29376: LD_INT 5
29378: PUSH
29379: LD_INT 8
29381: PUSH
29382: LD_INT 9
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: PUSH
29390: LD_VAR 0 16
29394: ARRAY
29395: PPUSH
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 380
29405: GO 29424
// PrepareHuman ( false , i , skill ) ;
29407: LD_INT 0
29409: PPUSH
29410: LD_VAR 0 7
29414: PPUSH
29415: LD_VAR 0 3
29419: PPUSH
29420: CALL_OW 380
// end else
29424: GO 29443
// PrepareHuman ( false , i , skill ) ;
29426: LD_INT 0
29428: PPUSH
29429: LD_VAR 0 7
29433: PPUSH
29434: LD_VAR 0 3
29438: PPUSH
29439: CALL_OW 380
// un := CreateHuman ;
29443: LD_ADDR_VAR 0 13
29447: PUSH
29448: CALL_OW 44
29452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29453: LD_ADDR_VAR 0 6
29457: PUSH
29458: LD_VAR 0 6
29462: PPUSH
29463: LD_INT 1
29465: PPUSH
29466: LD_VAR 0 13
29470: PPUSH
29471: CALL_OW 2
29475: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29476: LD_VAR 0 13
29480: PPUSH
29481: LD_VAR 0 8
29485: PPUSH
29486: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29490: LD_VAR 0 8
29494: PPUSH
29495: CALL_OW 313
29499: PUSH
29500: LD_INT 6
29502: EQUAL
29503: PUSH
29504: LD_VAR 0 8
29508: PPUSH
29509: CALL_OW 266
29513: PUSH
29514: LD_INT 32
29516: PUSH
29517: LD_INT 31
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: IN
29524: OR
29525: IFFALSE 29339
29527: GO 29336
29529: POP
29530: POP
// end else
29531: GO 29913
// for j = 1 to x do
29533: LD_ADDR_VAR 0 8
29537: PUSH
29538: DOUBLE
29539: LD_INT 1
29541: DEC
29542: ST_TO_ADDR
29543: LD_VAR 0 12
29547: PUSH
29548: FOR_TO
29549: IFFALSE 29911
// begin InitHc ;
29551: CALL_OW 19
// if not f then
29555: LD_VAR 0 11
29559: NOT
29560: IFFALSE 29649
// begin PrepareHuman ( false , i , skill ) ;
29562: LD_INT 0
29564: PPUSH
29565: LD_VAR 0 7
29569: PPUSH
29570: LD_VAR 0 3
29574: PPUSH
29575: CALL_OW 380
// un := CreateHuman ;
29579: LD_ADDR_VAR 0 13
29583: PUSH
29584: CALL_OW 44
29588: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29589: LD_ADDR_VAR 0 6
29593: PUSH
29594: LD_VAR 0 6
29598: PPUSH
29599: LD_INT 1
29601: PPUSH
29602: LD_VAR 0 13
29606: PPUSH
29607: CALL_OW 2
29611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29612: LD_VAR 0 13
29616: PPUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 250
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 251
29636: PPUSH
29637: LD_INT 10
29639: PPUSH
29640: LD_INT 0
29642: PPUSH
29643: CALL_OW 50
// continue ;
29647: GO 29548
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29649: LD_VAR 0 11
29653: PUSH
29654: LD_INT 1
29656: ARRAY
29657: PPUSH
29658: CALL_OW 313
29662: PUSH
29663: LD_VAR 0 11
29667: PUSH
29668: LD_INT 1
29670: ARRAY
29671: PPUSH
29672: CALL_OW 266
29676: PUSH
29677: LD_INT 32
29679: PUSH
29680: LD_INT 31
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: IN
29687: AND
29688: PUSH
29689: LD_VAR 0 11
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: CALL_OW 313
29702: PUSH
29703: LD_INT 6
29705: EQUAL
29706: OR
29707: IFFALSE 29727
// f := Delete ( f , 1 ) ;
29709: LD_ADDR_VAR 0 11
29713: PUSH
29714: LD_VAR 0 11
29718: PPUSH
29719: LD_INT 1
29721: PPUSH
29722: CALL_OW 3
29726: ST_TO_ADDR
// if not f then
29727: LD_VAR 0 11
29731: NOT
29732: IFFALSE 29750
// begin x := x + 2 ;
29734: LD_ADDR_VAR 0 12
29738: PUSH
29739: LD_VAR 0 12
29743: PUSH
29744: LD_INT 2
29746: PLUS
29747: ST_TO_ADDR
// continue ;
29748: GO 29548
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29750: LD_VAR 0 11
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: CALL_OW 266
29763: PUSH
29764: LD_INT 5
29766: EQUAL
29767: IFFALSE 29841
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29769: LD_VAR 0 11
29773: PUSH
29774: LD_INT 1
29776: ARRAY
29777: PPUSH
29778: CALL_OW 313
29782: PUSH
29783: LD_INT 3
29785: LESS
29786: IFFALSE 29822
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29788: LD_INT 0
29790: PPUSH
29791: LD_INT 5
29793: PUSH
29794: LD_INT 8
29796: PUSH
29797: LD_INT 9
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: PUSH
29805: LD_VAR 0 16
29809: ARRAY
29810: PPUSH
29811: LD_VAR 0 3
29815: PPUSH
29816: CALL_OW 380
29820: GO 29839
// PrepareHuman ( false , i , skill ) ;
29822: LD_INT 0
29824: PPUSH
29825: LD_VAR 0 7
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL_OW 380
// end else
29839: GO 29858
// PrepareHuman ( false , i , skill ) ;
29841: LD_INT 0
29843: PPUSH
29844: LD_VAR 0 7
29848: PPUSH
29849: LD_VAR 0 3
29853: PPUSH
29854: CALL_OW 380
// un := CreateHuman ;
29858: LD_ADDR_VAR 0 13
29862: PUSH
29863: CALL_OW 44
29867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29868: LD_ADDR_VAR 0 6
29872: PUSH
29873: LD_VAR 0 6
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: LD_VAR 0 13
29885: PPUSH
29886: CALL_OW 2
29890: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29891: LD_VAR 0 13
29895: PPUSH
29896: LD_VAR 0 11
29900: PUSH
29901: LD_INT 1
29903: ARRAY
29904: PPUSH
29905: CALL_OW 52
// end ;
29909: GO 29548
29911: POP
29912: POP
// end ;
29913: GO 28857
29915: POP
29916: POP
// result := result ^ buildings ;
29917: LD_ADDR_VAR 0 6
29921: PUSH
29922: LD_VAR 0 6
29926: PUSH
29927: LD_VAR 0 17
29931: ADD
29932: ST_TO_ADDR
// end else
29933: GO 30076
// begin for i = 1 to personel do
29935: LD_ADDR_VAR 0 7
29939: PUSH
29940: DOUBLE
29941: LD_INT 1
29943: DEC
29944: ST_TO_ADDR
29945: LD_VAR 0 5
29949: PUSH
29950: FOR_TO
29951: IFFALSE 30074
// begin if i > 4 then
29953: LD_VAR 0 7
29957: PUSH
29958: LD_INT 4
29960: GREATER
29961: IFFALSE 29965
// break ;
29963: GO 30074
// x := personel [ i ] ;
29965: LD_ADDR_VAR 0 12
29969: PUSH
29970: LD_VAR 0 5
29974: PUSH
29975: LD_VAR 0 7
29979: ARRAY
29980: ST_TO_ADDR
// if x = - 1 then
29981: LD_VAR 0 12
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: EQUAL
29990: IFFALSE 29994
// continue ;
29992: GO 29950
// PrepareHuman ( false , i , skill ) ;
29994: LD_INT 0
29996: PPUSH
29997: LD_VAR 0 7
30001: PPUSH
30002: LD_VAR 0 3
30006: PPUSH
30007: CALL_OW 380
// un := CreateHuman ;
30011: LD_ADDR_VAR 0 13
30015: PUSH
30016: CALL_OW 44
30020: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30021: LD_VAR 0 13
30025: PPUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 250
30035: PPUSH
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL_OW 251
30045: PPUSH
30046: LD_INT 10
30048: PPUSH
30049: LD_INT 0
30051: PPUSH
30052: CALL_OW 50
// result := result ^ un ;
30056: LD_ADDR_VAR 0 6
30060: PUSH
30061: LD_VAR 0 6
30065: PUSH
30066: LD_VAR 0 13
30070: ADD
30071: ST_TO_ADDR
// end ;
30072: GO 29950
30074: POP
30075: POP
// end ; end ;
30076: LD_VAR 0 6
30080: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30081: LD_INT 0
30083: PPUSH
30084: PPUSH
30085: PPUSH
30086: PPUSH
30087: PPUSH
30088: PPUSH
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
// result := false ;
30099: LD_ADDR_VAR 0 2
30103: PUSH
30104: LD_INT 0
30106: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30107: LD_VAR 0 1
30111: NOT
30112: PUSH
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 266
30122: PUSH
30123: LD_INT 32
30125: PUSH
30126: LD_INT 33
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: IN
30133: NOT
30134: OR
30135: IFFALSE 30139
// exit ;
30137: GO 31270
// nat := GetNation ( tower ) ;
30139: LD_ADDR_VAR 0 11
30143: PUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 248
30153: ST_TO_ADDR
// side := GetSide ( tower ) ;
30154: LD_ADDR_VAR 0 15
30158: PUSH
30159: LD_VAR 0 1
30163: PPUSH
30164: CALL_OW 255
30168: ST_TO_ADDR
// x := GetX ( tower ) ;
30169: LD_ADDR_VAR 0 9
30173: PUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 250
30183: ST_TO_ADDR
// y := GetY ( tower ) ;
30184: LD_ADDR_VAR 0 10
30188: PUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 251
30198: ST_TO_ADDR
// if not x or not y then
30199: LD_VAR 0 9
30203: NOT
30204: PUSH
30205: LD_VAR 0 10
30209: NOT
30210: OR
30211: IFFALSE 30215
// exit ;
30213: GO 31270
// weapon := 0 ;
30215: LD_ADDR_VAR 0 17
30219: PUSH
30220: LD_INT 0
30222: ST_TO_ADDR
// fac_list := [ ] ;
30223: LD_ADDR_VAR 0 16
30227: PUSH
30228: EMPTY
30229: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
30230: LD_ADDR_VAR 0 5
30234: PUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: CALL_OW 274
30244: PPUSH
30245: CALL 27978 0 1
30249: PPUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PPUSH
30260: CALL_OW 72
30264: ST_TO_ADDR
// if not factories then
30265: LD_VAR 0 5
30269: NOT
30270: IFFALSE 30274
// exit ;
30272: GO 31270
// for i in factories do
30274: LD_ADDR_VAR 0 7
30278: PUSH
30279: LD_VAR 0 5
30283: PUSH
30284: FOR_IN
30285: IFFALSE 30310
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30287: LD_ADDR_VAR 0 16
30291: PUSH
30292: LD_VAR 0 16
30296: PUSH
30297: LD_VAR 0 7
30301: PPUSH
30302: CALL_OW 478
30306: UNION
30307: ST_TO_ADDR
30308: GO 30284
30310: POP
30311: POP
// if not fac_list then
30312: LD_VAR 0 16
30316: NOT
30317: IFFALSE 30321
// exit ;
30319: GO 31270
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30321: LD_ADDR_VAR 0 4
30325: PUSH
30326: LD_INT 4
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: LD_INT 9
30334: PUSH
30335: LD_INT 10
30337: PUSH
30338: LD_INT 6
30340: PUSH
30341: LD_INT 7
30343: PUSH
30344: LD_INT 11
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 27
30358: PUSH
30359: LD_INT 28
30361: PUSH
30362: LD_INT 26
30364: PUSH
30365: LD_INT 30
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 43
30376: PUSH
30377: LD_INT 44
30379: PUSH
30380: LD_INT 46
30382: PUSH
30383: LD_INT 45
30385: PUSH
30386: LD_INT 47
30388: PUSH
30389: LD_INT 49
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: PUSH
30405: LD_VAR 0 11
30409: ARRAY
30410: ST_TO_ADDR
// for i in list do
30411: LD_ADDR_VAR 0 7
30415: PUSH
30416: LD_VAR 0 4
30420: PUSH
30421: FOR_IN
30422: IFFALSE 30455
// if not i in fac_list then
30424: LD_VAR 0 7
30428: PUSH
30429: LD_VAR 0 16
30433: IN
30434: NOT
30435: IFFALSE 30453
// list := list diff i ;
30437: LD_ADDR_VAR 0 4
30441: PUSH
30442: LD_VAR 0 4
30446: PUSH
30447: LD_VAR 0 7
30451: DIFF
30452: ST_TO_ADDR
30453: GO 30421
30455: POP
30456: POP
// if not list then
30457: LD_VAR 0 4
30461: NOT
30462: IFFALSE 30466
// exit ;
30464: GO 31270
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30466: LD_VAR 0 11
30470: PUSH
30471: LD_INT 3
30473: EQUAL
30474: PUSH
30475: LD_INT 49
30477: PUSH
30478: LD_VAR 0 4
30482: IN
30483: AND
30484: PUSH
30485: LD_INT 31
30487: PPUSH
30488: LD_VAR 0 15
30492: PPUSH
30493: CALL_OW 321
30497: PUSH
30498: LD_INT 2
30500: EQUAL
30501: AND
30502: IFFALSE 30562
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30504: LD_INT 22
30506: PUSH
30507: LD_VAR 0 15
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 35
30518: PUSH
30519: LD_INT 49
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 91
30528: PUSH
30529: LD_VAR 0 1
30533: PUSH
30534: LD_INT 10
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: PPUSH
30547: CALL_OW 69
30551: NOT
30552: IFFALSE 30562
// weapon := ru_time_lapser ;
30554: LD_ADDR_VAR 0 17
30558: PUSH
30559: LD_INT 49
30561: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30562: LD_VAR 0 11
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: IN
30577: PUSH
30578: LD_INT 11
30580: PUSH
30581: LD_VAR 0 4
30585: IN
30586: PUSH
30587: LD_INT 30
30589: PUSH
30590: LD_VAR 0 4
30594: IN
30595: OR
30596: AND
30597: PUSH
30598: LD_INT 6
30600: PPUSH
30601: LD_VAR 0 15
30605: PPUSH
30606: CALL_OW 321
30610: PUSH
30611: LD_INT 2
30613: EQUAL
30614: AND
30615: IFFALSE 30780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30617: LD_INT 22
30619: PUSH
30620: LD_VAR 0 15
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 35
30634: PUSH
30635: LD_INT 11
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 35
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 91
30659: PUSH
30660: LD_VAR 0 1
30664: PUSH
30665: LD_INT 18
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: PPUSH
30678: CALL_OW 69
30682: NOT
30683: PUSH
30684: LD_INT 22
30686: PUSH
30687: LD_VAR 0 15
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 30
30701: PUSH
30702: LD_INT 32
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 30
30711: PUSH
30712: LD_INT 33
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 91
30726: PUSH
30727: LD_VAR 0 1
30731: PUSH
30732: LD_INT 12
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: EMPTY
30746: LIST
30747: PPUSH
30748: CALL_OW 69
30752: PUSH
30753: LD_INT 2
30755: GREATER
30756: AND
30757: IFFALSE 30780
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30759: LD_ADDR_VAR 0 17
30763: PUSH
30764: LD_INT 11
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_VAR 0 11
30778: ARRAY
30779: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30780: LD_VAR 0 17
30784: NOT
30785: PUSH
30786: LD_INT 40
30788: PPUSH
30789: LD_VAR 0 15
30793: PPUSH
30794: CALL_OW 321
30798: PUSH
30799: LD_INT 2
30801: EQUAL
30802: AND
30803: PUSH
30804: LD_INT 7
30806: PUSH
30807: LD_VAR 0 4
30811: IN
30812: PUSH
30813: LD_INT 28
30815: PUSH
30816: LD_VAR 0 4
30820: IN
30821: OR
30822: PUSH
30823: LD_INT 45
30825: PUSH
30826: LD_VAR 0 4
30830: IN
30831: OR
30832: AND
30833: IFFALSE 31087
// begin hex := GetHexInfo ( x , y ) ;
30835: LD_ADDR_VAR 0 3
30839: PUSH
30840: LD_VAR 0 9
30844: PPUSH
30845: LD_VAR 0 10
30849: PPUSH
30850: CALL_OW 546
30854: ST_TO_ADDR
// if hex [ 1 ] then
30855: LD_VAR 0 3
30859: PUSH
30860: LD_INT 1
30862: ARRAY
30863: IFFALSE 30867
// exit ;
30865: GO 31270
// height := hex [ 2 ] ;
30867: LD_ADDR_VAR 0 14
30871: PUSH
30872: LD_VAR 0 3
30876: PUSH
30877: LD_INT 2
30879: ARRAY
30880: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30881: LD_ADDR_VAR 0 13
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: LD_INT 5
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// for i in tmp do
30904: LD_ADDR_VAR 0 7
30908: PUSH
30909: LD_VAR 0 13
30913: PUSH
30914: FOR_IN
30915: IFFALSE 31085
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30917: LD_ADDR_VAR 0 8
30921: PUSH
30922: LD_VAR 0 9
30926: PPUSH
30927: LD_VAR 0 7
30931: PPUSH
30932: LD_INT 5
30934: PPUSH
30935: CALL_OW 272
30939: PUSH
30940: LD_VAR 0 10
30944: PPUSH
30945: LD_VAR 0 7
30949: PPUSH
30950: LD_INT 5
30952: PPUSH
30953: CALL_OW 273
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30962: LD_VAR 0 8
30966: PUSH
30967: LD_INT 1
30969: ARRAY
30970: PPUSH
30971: LD_VAR 0 8
30975: PUSH
30976: LD_INT 2
30978: ARRAY
30979: PPUSH
30980: CALL_OW 488
30984: IFFALSE 31083
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_VAR 0 8
30995: PUSH
30996: LD_INT 1
30998: ARRAY
30999: PPUSH
31000: LD_VAR 0 8
31004: PUSH
31005: LD_INT 2
31007: ARRAY
31008: PPUSH
31009: CALL_OW 546
31013: ST_TO_ADDR
// if hex [ 1 ] then
31014: LD_VAR 0 3
31018: PUSH
31019: LD_INT 1
31021: ARRAY
31022: IFFALSE 31026
// continue ;
31024: GO 30914
// h := hex [ 2 ] ;
31026: LD_ADDR_VAR 0 12
31030: PUSH
31031: LD_VAR 0 3
31035: PUSH
31036: LD_INT 2
31038: ARRAY
31039: ST_TO_ADDR
// if h + 7 < height then
31040: LD_VAR 0 12
31044: PUSH
31045: LD_INT 7
31047: PLUS
31048: PUSH
31049: LD_VAR 0 14
31053: LESS
31054: IFFALSE 31083
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31056: LD_ADDR_VAR 0 17
31060: PUSH
31061: LD_INT 7
31063: PUSH
31064: LD_INT 28
31066: PUSH
31067: LD_INT 45
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: LD_VAR 0 11
31079: ARRAY
31080: ST_TO_ADDR
// break ;
31081: GO 31085
// end ; end ; end ;
31083: GO 30914
31085: POP
31086: POP
// end ; if not weapon then
31087: LD_VAR 0 17
31091: NOT
31092: IFFALSE 31152
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31094: LD_ADDR_VAR 0 4
31098: PUSH
31099: LD_VAR 0 4
31103: PUSH
31104: LD_INT 11
31106: PUSH
31107: LD_INT 30
31109: PUSH
31110: LD_INT 49
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: DIFF
31118: ST_TO_ADDR
// if not list then
31119: LD_VAR 0 4
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31270
// weapon := list [ rand ( 1 , list ) ] ;
31128: LD_ADDR_VAR 0 17
31132: PUSH
31133: LD_VAR 0 4
31137: PUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_VAR 0 4
31145: PPUSH
31146: CALL_OW 12
31150: ARRAY
31151: ST_TO_ADDR
// end ; if weapon then
31152: LD_VAR 0 17
31156: IFFALSE 31270
// begin tmp := CostOfWeapon ( weapon ) ;
31158: LD_ADDR_VAR 0 13
31162: PUSH
31163: LD_VAR 0 17
31167: PPUSH
31168: CALL_OW 451
31172: ST_TO_ADDR
// j := GetBase ( tower ) ;
31173: LD_ADDR_VAR 0 8
31177: PUSH
31178: LD_VAR 0 1
31182: PPUSH
31183: CALL_OW 274
31187: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31188: LD_VAR 0 8
31192: PPUSH
31193: LD_INT 1
31195: PPUSH
31196: CALL_OW 275
31200: PUSH
31201: LD_VAR 0 13
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: GREATEREQUAL
31210: PUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_INT 2
31218: PPUSH
31219: CALL_OW 275
31223: PUSH
31224: LD_VAR 0 13
31228: PUSH
31229: LD_INT 2
31231: ARRAY
31232: GREATEREQUAL
31233: AND
31234: PUSH
31235: LD_VAR 0 8
31239: PPUSH
31240: LD_INT 3
31242: PPUSH
31243: CALL_OW 275
31247: PUSH
31248: LD_VAR 0 13
31252: PUSH
31253: LD_INT 3
31255: ARRAY
31256: GREATEREQUAL
31257: AND
31258: IFFALSE 31270
// result := weapon ;
31260: LD_ADDR_VAR 0 2
31264: PUSH
31265: LD_VAR 0 17
31269: ST_TO_ADDR
// end ; end ;
31270: LD_VAR 0 2
31274: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
// result := true ;
31279: LD_ADDR_VAR 0 3
31283: PUSH
31284: LD_INT 1
31286: ST_TO_ADDR
// if array1 = array2 then
31287: LD_VAR 0 1
31291: PUSH
31292: LD_VAR 0 2
31296: EQUAL
31297: IFFALSE 31357
// begin for i = 1 to array1 do
31299: LD_ADDR_VAR 0 4
31303: PUSH
31304: DOUBLE
31305: LD_INT 1
31307: DEC
31308: ST_TO_ADDR
31309: LD_VAR 0 1
31313: PUSH
31314: FOR_TO
31315: IFFALSE 31353
// if array1 [ i ] <> array2 [ i ] then
31317: LD_VAR 0 1
31321: PUSH
31322: LD_VAR 0 4
31326: ARRAY
31327: PUSH
31328: LD_VAR 0 2
31332: PUSH
31333: LD_VAR 0 4
31337: ARRAY
31338: NONEQUAL
31339: IFFALSE 31351
// begin result := false ;
31341: LD_ADDR_VAR 0 3
31345: PUSH
31346: LD_INT 0
31348: ST_TO_ADDR
// break ;
31349: GO 31353
// end ;
31351: GO 31314
31353: POP
31354: POP
// end else
31355: GO 31365
// result := false ;
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 0
31364: ST_TO_ADDR
// end ;
31365: LD_VAR 0 3
31369: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
31374: PPUSH
// pom := GetBase ( fac ) ;
31375: LD_ADDR_VAR 0 5
31379: PUSH
31380: LD_VAR 0 1
31384: PPUSH
31385: CALL_OW 274
31389: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31390: LD_ADDR_VAR 0 4
31394: PUSH
31395: LD_VAR 0 2
31399: PUSH
31400: LD_INT 1
31402: ARRAY
31403: PPUSH
31404: LD_VAR 0 2
31408: PUSH
31409: LD_INT 2
31411: ARRAY
31412: PPUSH
31413: LD_VAR 0 2
31417: PUSH
31418: LD_INT 3
31420: ARRAY
31421: PPUSH
31422: LD_VAR 0 2
31426: PUSH
31427: LD_INT 4
31429: ARRAY
31430: PPUSH
31431: CALL_OW 449
31435: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_VAR 0 5
31445: PPUSH
31446: LD_INT 1
31448: PPUSH
31449: CALL_OW 275
31453: PUSH
31454: LD_VAR 0 4
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: GREATEREQUAL
31463: PUSH
31464: LD_VAR 0 5
31468: PPUSH
31469: LD_INT 2
31471: PPUSH
31472: CALL_OW 275
31476: PUSH
31477: LD_VAR 0 4
31481: PUSH
31482: LD_INT 2
31484: ARRAY
31485: GREATEREQUAL
31486: AND
31487: PUSH
31488: LD_VAR 0 5
31492: PPUSH
31493: LD_INT 3
31495: PPUSH
31496: CALL_OW 275
31500: PUSH
31501: LD_VAR 0 4
31505: PUSH
31506: LD_INT 3
31508: ARRAY
31509: GREATEREQUAL
31510: AND
31511: ST_TO_ADDR
// end ;
31512: LD_VAR 0 3
31516: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
31522: PPUSH
// pom := GetBase ( building ) ;
31523: LD_ADDR_VAR 0 3
31527: PUSH
31528: LD_VAR 0 1
31532: PPUSH
31533: CALL_OW 274
31537: ST_TO_ADDR
// if not pom then
31538: LD_VAR 0 3
31542: NOT
31543: IFFALSE 31547
// exit ;
31545: GO 31717
// btype := GetBType ( building ) ;
31547: LD_ADDR_VAR 0 5
31551: PUSH
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 266
31561: ST_TO_ADDR
// if btype = b_armoury then
31562: LD_VAR 0 5
31566: PUSH
31567: LD_INT 4
31569: EQUAL
31570: IFFALSE 31580
// btype := b_barracks ;
31572: LD_ADDR_VAR 0 5
31576: PUSH
31577: LD_INT 5
31579: ST_TO_ADDR
// if btype = b_depot then
31580: LD_VAR 0 5
31584: PUSH
31585: LD_INT 0
31587: EQUAL
31588: IFFALSE 31598
// btype := b_warehouse ;
31590: LD_ADDR_VAR 0 5
31594: PUSH
31595: LD_INT 1
31597: ST_TO_ADDR
// if btype = b_workshop then
31598: LD_VAR 0 5
31602: PUSH
31603: LD_INT 2
31605: EQUAL
31606: IFFALSE 31616
// btype := b_factory ;
31608: LD_ADDR_VAR 0 5
31612: PUSH
31613: LD_INT 3
31615: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31616: LD_ADDR_VAR 0 4
31620: PUSH
31621: LD_VAR 0 5
31625: PPUSH
31626: LD_VAR 0 1
31630: PPUSH
31631: CALL_OW 248
31635: PPUSH
31636: CALL_OW 450
31640: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31641: LD_ADDR_VAR 0 2
31645: PUSH
31646: LD_VAR 0 3
31650: PPUSH
31651: LD_INT 1
31653: PPUSH
31654: CALL_OW 275
31658: PUSH
31659: LD_VAR 0 4
31663: PUSH
31664: LD_INT 1
31666: ARRAY
31667: GREATEREQUAL
31668: PUSH
31669: LD_VAR 0 3
31673: PPUSH
31674: LD_INT 2
31676: PPUSH
31677: CALL_OW 275
31681: PUSH
31682: LD_VAR 0 4
31686: PUSH
31687: LD_INT 2
31689: ARRAY
31690: GREATEREQUAL
31691: AND
31692: PUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: LD_INT 3
31700: PPUSH
31701: CALL_OW 275
31705: PUSH
31706: LD_VAR 0 4
31710: PUSH
31711: LD_INT 3
31713: ARRAY
31714: GREATEREQUAL
31715: AND
31716: ST_TO_ADDR
// end ;
31717: LD_VAR 0 2
31721: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31722: LD_INT 0
31724: PPUSH
31725: PPUSH
31726: PPUSH
// pom := GetBase ( building ) ;
31727: LD_ADDR_VAR 0 4
31731: PUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 274
31741: ST_TO_ADDR
// if not pom then
31742: LD_VAR 0 4
31746: NOT
31747: IFFALSE 31751
// exit ;
31749: GO 31852
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31751: LD_ADDR_VAR 0 5
31755: PUSH
31756: LD_VAR 0 2
31760: PPUSH
31761: LD_VAR 0 1
31765: PPUSH
31766: CALL_OW 248
31770: PPUSH
31771: CALL_OW 450
31775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31776: LD_ADDR_VAR 0 3
31780: PUSH
31781: LD_VAR 0 4
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 275
31793: PUSH
31794: LD_VAR 0 5
31798: PUSH
31799: LD_INT 1
31801: ARRAY
31802: GREATEREQUAL
31803: PUSH
31804: LD_VAR 0 4
31808: PPUSH
31809: LD_INT 2
31811: PPUSH
31812: CALL_OW 275
31816: PUSH
31817: LD_VAR 0 5
31821: PUSH
31822: LD_INT 2
31824: ARRAY
31825: GREATEREQUAL
31826: AND
31827: PUSH
31828: LD_VAR 0 4
31832: PPUSH
31833: LD_INT 3
31835: PPUSH
31836: CALL_OW 275
31840: PUSH
31841: LD_VAR 0 5
31845: PUSH
31846: LD_INT 3
31848: ARRAY
31849: GREATEREQUAL
31850: AND
31851: ST_TO_ADDR
// end ;
31852: LD_VAR 0 3
31856: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
// result := false ;
31869: LD_ADDR_VAR 0 6
31873: PUSH
31874: LD_INT 0
31876: ST_TO_ADDR
// if not base or not btype or not x or not y then
31877: LD_VAR 0 1
31881: NOT
31882: PUSH
31883: LD_VAR 0 2
31887: NOT
31888: OR
31889: PUSH
31890: LD_VAR 0 3
31894: NOT
31895: OR
31896: PUSH
31897: LD_VAR 0 4
31901: NOT
31902: OR
31903: IFFALSE 31907
// exit ;
31905: GO 32421
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31907: LD_ADDR_VAR 0 12
31911: PUSH
31912: LD_VAR 0 2
31916: PPUSH
31917: LD_VAR 0 3
31921: PPUSH
31922: LD_VAR 0 4
31926: PPUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: LD_VAR 0 1
31936: PUSH
31937: LD_INT 1
31939: ARRAY
31940: PPUSH
31941: CALL_OW 248
31945: PPUSH
31946: LD_INT 0
31948: PPUSH
31949: CALL 33250 0 6
31953: ST_TO_ADDR
// if not hexes then
31954: LD_VAR 0 12
31958: NOT
31959: IFFALSE 31963
// exit ;
31961: GO 32421
// for i = 1 to hexes do
31963: LD_ADDR_VAR 0 7
31967: PUSH
31968: DOUBLE
31969: LD_INT 1
31971: DEC
31972: ST_TO_ADDR
31973: LD_VAR 0 12
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32419
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31981: LD_ADDR_VAR 0 11
31985: PUSH
31986: LD_VAR 0 12
31990: PUSH
31991: LD_VAR 0 7
31995: ARRAY
31996: PUSH
31997: LD_INT 1
31999: ARRAY
32000: PPUSH
32001: LD_VAR 0 12
32005: PUSH
32006: LD_VAR 0 7
32010: ARRAY
32011: PUSH
32012: LD_INT 2
32014: ARRAY
32015: PPUSH
32016: CALL_OW 428
32020: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
32021: LD_VAR 0 11
32025: NOT
32026: PUSH
32027: LD_VAR 0 11
32031: PPUSH
32032: CALL_OW 247
32036: PUSH
32037: LD_INT 3
32039: EQUAL
32040: OR
32041: IFFALSE 32045
// continue ;
32043: GO 31978
// result := true ;
32045: LD_ADDR_VAR 0 6
32049: PUSH
32050: LD_INT 1
32052: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32053: LD_ADDR_VAR 0 15
32057: PUSH
32058: LD_INT 22
32060: PUSH
32061: LD_VAR 0 11
32065: PPUSH
32066: CALL_OW 255
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 30
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 30
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PPUSH
32107: CALL_OW 69
32111: ST_TO_ADDR
// if dep then
32112: LD_VAR 0 15
32116: IFFALSE 32252
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32118: LD_ADDR_VAR 0 14
32122: PUSH
32123: LD_VAR 0 15
32127: PUSH
32128: LD_INT 1
32130: ARRAY
32131: PPUSH
32132: CALL_OW 250
32136: PPUSH
32137: LD_VAR 0 15
32141: PUSH
32142: LD_INT 1
32144: ARRAY
32145: PPUSH
32146: CALL_OW 254
32150: PPUSH
32151: LD_INT 5
32153: PPUSH
32154: CALL_OW 272
32158: PUSH
32159: LD_VAR 0 15
32163: PUSH
32164: LD_INT 1
32166: ARRAY
32167: PPUSH
32168: CALL_OW 251
32172: PPUSH
32173: LD_VAR 0 15
32177: PUSH
32178: LD_INT 1
32180: ARRAY
32181: PPUSH
32182: CALL_OW 254
32186: PPUSH
32187: LD_INT 5
32189: PPUSH
32190: CALL_OW 273
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32199: LD_VAR 0 14
32203: PUSH
32204: LD_INT 1
32206: ARRAY
32207: PPUSH
32208: LD_VAR 0 14
32212: PUSH
32213: LD_INT 2
32215: ARRAY
32216: PPUSH
32217: CALL_OW 488
32221: IFFALSE 32252
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32223: LD_VAR 0 11
32227: PPUSH
32228: LD_VAR 0 14
32232: PUSH
32233: LD_INT 1
32235: ARRAY
32236: PPUSH
32237: LD_VAR 0 14
32241: PUSH
32242: LD_INT 2
32244: ARRAY
32245: PPUSH
32246: CALL_OW 111
// continue ;
32250: GO 31978
// end ; end ; r := GetDir ( tmp ) ;
32252: LD_ADDR_VAR 0 13
32256: PUSH
32257: LD_VAR 0 11
32261: PPUSH
32262: CALL_OW 254
32266: ST_TO_ADDR
// if r = 5 then
32267: LD_VAR 0 13
32271: PUSH
32272: LD_INT 5
32274: EQUAL
32275: IFFALSE 32285
// r := 0 ;
32277: LD_ADDR_VAR 0 13
32281: PUSH
32282: LD_INT 0
32284: ST_TO_ADDR
// for j = r to 5 do
32285: LD_ADDR_VAR 0 8
32289: PUSH
32290: DOUBLE
32291: LD_VAR 0 13
32295: DEC
32296: ST_TO_ADDR
32297: LD_INT 5
32299: PUSH
32300: FOR_TO
32301: IFFALSE 32415
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32303: LD_ADDR_VAR 0 9
32307: PUSH
32308: LD_VAR 0 11
32312: PPUSH
32313: CALL_OW 250
32317: PPUSH
32318: LD_VAR 0 8
32322: PPUSH
32323: LD_INT 2
32325: PPUSH
32326: CALL_OW 272
32330: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32331: LD_ADDR_VAR 0 10
32335: PUSH
32336: LD_VAR 0 11
32340: PPUSH
32341: CALL_OW 251
32345: PPUSH
32346: LD_VAR 0 8
32350: PPUSH
32351: LD_INT 2
32353: PPUSH
32354: CALL_OW 273
32358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32359: LD_VAR 0 9
32363: PPUSH
32364: LD_VAR 0 10
32368: PPUSH
32369: CALL_OW 488
32373: PUSH
32374: LD_VAR 0 9
32378: PPUSH
32379: LD_VAR 0 10
32383: PPUSH
32384: CALL_OW 428
32388: NOT
32389: AND
32390: IFFALSE 32413
// begin ComMoveXY ( tmp , _x , _y ) ;
32392: LD_VAR 0 11
32396: PPUSH
32397: LD_VAR 0 9
32401: PPUSH
32402: LD_VAR 0 10
32406: PPUSH
32407: CALL_OW 111
// break ;
32411: GO 32415
// end ; end ;
32413: GO 32300
32415: POP
32416: POP
// end ;
32417: GO 31978
32419: POP
32420: POP
// end ;
32421: LD_VAR 0 6
32425: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
// result := false ;
32437: LD_ADDR_VAR 0 6
32441: PUSH
32442: LD_INT 0
32444: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32445: LD_VAR 0 1
32449: NOT
32450: PUSH
32451: LD_VAR 0 1
32455: PPUSH
32456: CALL_OW 266
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: IN
32471: NOT
32472: OR
32473: PUSH
32474: LD_VAR 0 2
32478: NOT
32479: OR
32480: PUSH
32481: LD_VAR 0 5
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: IN
32512: NOT
32513: OR
32514: PUSH
32515: LD_VAR 0 3
32519: PPUSH
32520: LD_VAR 0 4
32524: PPUSH
32525: CALL_OW 488
32529: NOT
32530: OR
32531: IFFALSE 32535
// exit ;
32533: GO 33245
// pom := GetBase ( bdepot ) ;
32535: LD_ADDR_VAR 0 9
32539: PUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: CALL_OW 274
32549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
32550: LD_ADDR_VAR 0 10
32554: PUSH
32555: LD_VAR 0 2
32559: PPUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 248
32569: PPUSH
32570: CALL_OW 450
32574: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32575: LD_VAR 0 9
32579: PPUSH
32580: LD_INT 1
32582: PPUSH
32583: CALL_OW 275
32587: PUSH
32588: LD_VAR 0 10
32592: PUSH
32593: LD_INT 1
32595: ARRAY
32596: GREATEREQUAL
32597: PUSH
32598: LD_VAR 0 9
32602: PPUSH
32603: LD_INT 2
32605: PPUSH
32606: CALL_OW 275
32610: PUSH
32611: LD_VAR 0 10
32615: PUSH
32616: LD_INT 2
32618: ARRAY
32619: GREATEREQUAL
32620: AND
32621: PUSH
32622: LD_VAR 0 9
32626: PPUSH
32627: LD_INT 3
32629: PPUSH
32630: CALL_OW 275
32634: PUSH
32635: LD_VAR 0 10
32639: PUSH
32640: LD_INT 3
32642: ARRAY
32643: GREATEREQUAL
32644: AND
32645: NOT
32646: IFFALSE 32650
// exit ;
32648: GO 33245
// if GetBType ( bdepot ) = b_depot then
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 266
32659: PUSH
32660: LD_INT 0
32662: EQUAL
32663: IFFALSE 32675
// dist := 28 else
32665: LD_ADDR_VAR 0 13
32669: PUSH
32670: LD_INT 28
32672: ST_TO_ADDR
32673: GO 32683
// dist := 36 ;
32675: LD_ADDR_VAR 0 13
32679: PUSH
32680: LD_INT 36
32682: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
32683: LD_VAR 0 1
32687: PPUSH
32688: LD_VAR 0 3
32692: PPUSH
32693: LD_VAR 0 4
32697: PPUSH
32698: CALL_OW 297
32702: PUSH
32703: LD_VAR 0 13
32707: GREATER
32708: IFFALSE 32712
// exit ;
32710: GO 33245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
32712: LD_ADDR_VAR 0 11
32716: PUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: LD_VAR 0 3
32726: PPUSH
32727: LD_VAR 0 4
32731: PPUSH
32732: LD_VAR 0 5
32736: PPUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 248
32746: PPUSH
32747: LD_INT 0
32749: PPUSH
32750: CALL 33250 0 6
32754: ST_TO_ADDR
// if not hexes then
32755: LD_VAR 0 11
32759: NOT
32760: IFFALSE 32764
// exit ;
32762: GO 33245
// hex := GetHexInfo ( x , y ) ;
32764: LD_ADDR_VAR 0 14
32768: PUSH
32769: LD_VAR 0 3
32773: PPUSH
32774: LD_VAR 0 4
32778: PPUSH
32779: CALL_OW 546
32783: ST_TO_ADDR
// if hex [ 1 ] then
32784: LD_VAR 0 14
32788: PUSH
32789: LD_INT 1
32791: ARRAY
32792: IFFALSE 32796
// exit ;
32794: GO 33245
// height := hex [ 2 ] ;
32796: LD_ADDR_VAR 0 12
32800: PUSH
32801: LD_VAR 0 14
32805: PUSH
32806: LD_INT 2
32808: ARRAY
32809: ST_TO_ADDR
// for i = 1 to hexes do
32810: LD_ADDR_VAR 0 7
32814: PUSH
32815: DOUBLE
32816: LD_INT 1
32818: DEC
32819: ST_TO_ADDR
32820: LD_VAR 0 11
32824: PUSH
32825: FOR_TO
32826: IFFALSE 33154
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32828: LD_VAR 0 11
32832: PUSH
32833: LD_VAR 0 7
32837: ARRAY
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: PPUSH
32843: LD_VAR 0 11
32847: PUSH
32848: LD_VAR 0 7
32852: ARRAY
32853: PUSH
32854: LD_INT 2
32856: ARRAY
32857: PPUSH
32858: CALL_OW 488
32862: NOT
32863: IFFALSE 32867
// continue ;
32865: GO 32825
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32867: LD_ADDR_VAR 0 8
32871: PUSH
32872: LD_VAR 0 11
32876: PUSH
32877: LD_VAR 0 7
32881: ARRAY
32882: PUSH
32883: LD_INT 1
32885: ARRAY
32886: PPUSH
32887: LD_VAR 0 11
32891: PUSH
32892: LD_VAR 0 7
32896: ARRAY
32897: PUSH
32898: LD_INT 2
32900: ARRAY
32901: PPUSH
32902: CALL_OW 546
32906: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32907: LD_VAR 0 8
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: PUSH
32916: LD_VAR 0 8
32920: PUSH
32921: LD_INT 2
32923: ARRAY
32924: PUSH
32925: LD_VAR 0 12
32929: PUSH
32930: LD_INT 2
32932: PLUS
32933: GREATER
32934: OR
32935: PUSH
32936: LD_VAR 0 8
32940: PUSH
32941: LD_INT 2
32943: ARRAY
32944: PUSH
32945: LD_VAR 0 12
32949: PUSH
32950: LD_INT 2
32952: MINUS
32953: LESS
32954: OR
32955: PUSH
32956: LD_VAR 0 8
32960: PUSH
32961: LD_INT 3
32963: ARRAY
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 8
32970: PUSH
32971: LD_INT 9
32973: PUSH
32974: LD_INT 10
32976: PUSH
32977: LD_INT 11
32979: PUSH
32980: LD_INT 12
32982: PUSH
32983: LD_INT 13
32985: PUSH
32986: LD_INT 16
32988: PUSH
32989: LD_INT 17
32991: PUSH
32992: LD_INT 18
32994: PUSH
32995: LD_INT 19
32997: PUSH
32998: LD_INT 20
33000: PUSH
33001: LD_INT 21
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: IN
33019: NOT
33020: OR
33021: PUSH
33022: LD_VAR 0 8
33026: PUSH
33027: LD_INT 5
33029: ARRAY
33030: NOT
33031: OR
33032: PUSH
33033: LD_VAR 0 8
33037: PUSH
33038: LD_INT 6
33040: ARRAY
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 7
33050: PUSH
33051: LD_INT 9
33053: PUSH
33054: LD_INT 10
33056: PUSH
33057: LD_INT 11
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: IN
33068: NOT
33069: OR
33070: PUSH
33071: LD_VAR 0 11
33075: PUSH
33076: LD_VAR 0 7
33080: ARRAY
33081: PUSH
33082: LD_INT 1
33084: ARRAY
33085: PPUSH
33086: LD_VAR 0 11
33090: PUSH
33091: LD_VAR 0 7
33095: ARRAY
33096: PUSH
33097: LD_INT 2
33099: ARRAY
33100: PPUSH
33101: CALL_OW 428
33105: PUSH
33106: LD_INT 0
33108: GREATER
33109: OR
33110: PUSH
33111: LD_VAR 0 11
33115: PUSH
33116: LD_VAR 0 7
33120: ARRAY
33121: PUSH
33122: LD_INT 1
33124: ARRAY
33125: PPUSH
33126: LD_VAR 0 11
33130: PUSH
33131: LD_VAR 0 7
33135: ARRAY
33136: PUSH
33137: LD_INT 2
33139: ARRAY
33140: PPUSH
33141: CALL_OW 351
33145: OR
33146: IFFALSE 33152
// exit ;
33148: POP
33149: POP
33150: GO 33245
// end ;
33152: GO 32825
33154: POP
33155: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 255
33165: PPUSH
33166: LD_VAR 0 3
33170: PPUSH
33171: LD_VAR 0 4
33175: PPUSH
33176: LD_INT 20
33178: PPUSH
33179: CALL 26132 0 4
33183: PUSH
33184: LD_INT 4
33186: ARRAY
33187: IFFALSE 33191
// exit ;
33189: GO 33245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
33191: LD_VAR 0 2
33195: PUSH
33196: LD_INT 29
33198: PUSH
33199: LD_INT 30
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: IN
33206: PUSH
33207: LD_VAR 0 3
33211: PPUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 255
33226: PPUSH
33227: CALL_OW 440
33231: NOT
33232: AND
33233: IFFALSE 33237
// exit ;
33235: GO 33245
// result := true ;
33237: LD_ADDR_VAR 0 6
33241: PUSH
33242: LD_INT 1
33244: ST_TO_ADDR
// end ;
33245: LD_VAR 0 6
33249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
// result = [ ] ;
33310: LD_ADDR_VAR 0 7
33314: PUSH
33315: EMPTY
33316: ST_TO_ADDR
// temp_list = [ ] ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: EMPTY
33323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33324: LD_VAR 0 4
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: LD_INT 4
33343: PUSH
33344: LD_INT 5
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: IN
33355: NOT
33356: PUSH
33357: LD_VAR 0 1
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: IN
33372: PUSH
33373: LD_VAR 0 5
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: NOT
33393: AND
33394: OR
33395: IFFALSE 33399
// exit ;
33397: GO 51784
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33399: LD_VAR 0 1
33403: PUSH
33404: LD_INT 6
33406: PUSH
33407: LD_INT 7
33409: PUSH
33410: LD_INT 8
33412: PUSH
33413: LD_INT 13
33415: PUSH
33416: LD_INT 12
33418: PUSH
33419: LD_INT 15
33421: PUSH
33422: LD_INT 11
33424: PUSH
33425: LD_INT 14
33427: PUSH
33428: LD_INT 10
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: IN
33442: IFFALSE 33452
// btype = b_lab ;
33444: LD_ADDR_VAR 0 1
33448: PUSH
33449: LD_INT 6
33451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33452: LD_VAR 0 6
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: IN
33471: NOT
33472: PUSH
33473: LD_VAR 0 1
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 6
33492: PUSH
33493: LD_INT 36
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: LD_INT 31
33504: PUSH
33505: LD_INT 32
33507: PUSH
33508: LD_INT 33
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: IN
33524: NOT
33525: PUSH
33526: LD_VAR 0 6
33530: PUSH
33531: LD_INT 1
33533: EQUAL
33534: AND
33535: OR
33536: PUSH
33537: LD_VAR 0 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: IN
33552: NOT
33553: PUSH
33554: LD_VAR 0 6
33558: PUSH
33559: LD_INT 2
33561: EQUAL
33562: AND
33563: OR
33564: IFFALSE 33574
// mode = 0 ;
33566: LD_ADDR_VAR 0 6
33570: PUSH
33571: LD_INT 0
33573: ST_TO_ADDR
// case mode of 0 :
33574: LD_VAR 0 6
33578: PUSH
33579: LD_INT 0
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33587
33585: GO 45040
33587: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33588: LD_ADDR_VAR 0 11
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33781: LD_ADDR_VAR 0 12
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 3
33938: NEG
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33977: LD_ADDR_VAR 0 13
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 3
34136: NEG
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34176: LD_ADDR_VAR 0 14
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: LD_INT 3
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 3
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 2
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34372: LD_ADDR_VAR 0 15
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 3
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34565: LD_ADDR_VAR 0 16
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 3
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34758: LD_ADDR_VAR 0 17
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 2
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 2
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 2
34957: NEG
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34988: LD_ADDR_VAR 0 18
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: NEG
35188: PUSH
35189: LD_INT 2
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35218: LD_ADDR_VAR 0 19
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35448: LD_ADDR_VAR 0 20
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: LD_INT 2
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35678: LD_ADDR_VAR 0 21
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 2
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35908: LD_ADDR_VAR 0 22
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: NEG
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36138: LD_ADDR_VAR 0 23
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 2
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: NEG
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 3
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 3
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 2
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36418: LD_ADDR_VAR 0 24
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36694: LD_ADDR_VAR 0 25
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 3
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 3
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36968: LD_ADDR_VAR 0 26
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 3
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37244: LD_ADDR_VAR 0 27
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 3
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 3
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37524: LD_ADDR_VAR 0 28
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 3
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: NEG
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37806: LD_ADDR_VAR 0 29
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38085: LD_ADDR_VAR 0 30
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 3
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38363: LD_ADDR_VAR 0 31
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 3
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 3
38606: NEG
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38641: LD_ADDR_VAR 0 32
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38919: LD_ADDR_VAR 0 33
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: NEG
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39198: LD_ADDR_VAR 0 34
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39478: LD_ADDR_VAR 0 35
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39590: LD_ADDR_VAR 0 36
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39702: LD_ADDR_VAR 0 37
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39814: LD_ADDR_VAR 0 38
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39926: LD_ADDR_VAR 0 39
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40038: LD_ADDR_VAR 0 40
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40150: LD_ADDR_VAR 0 41
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 3
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: LD_INT 3
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 3
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 3
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40500: LD_ADDR_VAR 0 42
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 3
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 3
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 3
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 3
40797: NEG
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 3
40809: NEG
40810: PUSH
40811: LD_INT 3
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40850: LD_ADDR_VAR 0 43
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 3
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 3
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41198: LD_ADDR_VAR 0 44
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41548: LD_ADDR_VAR 0 45
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 3
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41898: LD_ADDR_VAR 0 46
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42246: LD_ADDR_VAR 0 47
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42397: LD_ADDR_VAR 0 48
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42544: LD_ADDR_VAR 0 49
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42688: LD_ADDR_VAR 0 50
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42832: LD_ADDR_VAR 0 51
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42979: LD_ADDR_VAR 0 52
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43130: LD_ADDR_VAR 0 53
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43360: LD_ADDR_VAR 0 54
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43590: LD_ADDR_VAR 0 55
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43820: LD_ADDR_VAR 0 56
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44050: LD_ADDR_VAR 0 57
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44280: LD_ADDR_VAR 0 58
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44510: LD_ADDR_VAR 0 59
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44598: LD_ADDR_VAR 0 60
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44686: LD_ADDR_VAR 0 61
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44774: LD_ADDR_VAR 0 62
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44862: LD_ADDR_VAR 0 63
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44950: LD_ADDR_VAR 0 64
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// end ; 1 :
45038: GO 50935
45040: LD_INT 1
45042: DOUBLE
45043: EQUAL
45044: IFTRUE 45048
45046: GO 47671
45048: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45049: LD_ADDR_VAR 0 11
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 3
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 3
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45093: LD_ADDR_VAR 0 12
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 3
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45134: LD_ADDR_VAR 0 13
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 3
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45174: LD_ADDR_VAR 0 14
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45215: LD_ADDR_VAR 0 15
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 3
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45259: LD_ADDR_VAR 0 16
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 3
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 3
45290: NEG
45291: PUSH
45292: LD_INT 3
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45305: LD_ADDR_VAR 0 17
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45349: LD_ADDR_VAR 0 18
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45390: LD_ADDR_VAR 0 19
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45430: LD_ADDR_VAR 0 20
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45471: LD_ADDR_VAR 0 21
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45515: LD_ADDR_VAR 0 22
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45561: LD_ADDR_VAR 0 23
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 4
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 3
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45605: LD_ADDR_VAR 0 24
45609: PUSH
45610: LD_INT 3
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 4
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45646: LD_ADDR_VAR 0 25
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45686: LD_ADDR_VAR 0 26
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 4
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45727: LD_ADDR_VAR 0 27
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45771: LD_ADDR_VAR 0 28
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 4
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 4
45802: NEG
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45817: LD_ADDR_VAR 0 29
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 4
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 4
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 5
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 6
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 6
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 5
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45972: LD_ADDR_VAR 0 30
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 4
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 4
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 5
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 5
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 5
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 6
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 6
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46115: LD_ADDR_VAR 0 31
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 4
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 4
46162: PUSH
46163: LD_INT 4
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: LD_INT 4
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 5
46182: PUSH
46183: LD_INT 4
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 5
46192: PUSH
46193: LD_INT 5
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 4
46202: PUSH
46203: LD_INT 5
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 6
46212: PUSH
46213: LD_INT 5
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 6
46222: PUSH
46223: LD_INT 6
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 5
46232: PUSH
46233: LD_INT 6
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46254: LD_ADDR_VAR 0 32
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 4
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 5
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 4
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 6
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 6
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 5
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46397: LD_ADDR_VAR 0 33
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 4
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 4
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 4
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 5
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 5
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 5
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 6
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 6
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46552: LD_ADDR_VAR 0 34
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: LD_INT 3
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: LD_INT 3
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: LD_INT 4
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 4
46607: NEG
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 4
46619: NEG
46620: PUSH
46621: LD_INT 4
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: LD_INT 5
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 5
46643: NEG
46644: PUSH
46645: LD_INT 4
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 5
46655: NEG
46656: PUSH
46657: LD_INT 5
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 5
46667: NEG
46668: PUSH
46669: LD_INT 6
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 6
46679: NEG
46680: PUSH
46681: LD_INT 5
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 6
46691: NEG
46692: PUSH
46693: LD_INT 6
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46715: LD_ADDR_VAR 0 41
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46759: LD_ADDR_VAR 0 42
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46800: LD_ADDR_VAR 0 43
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46840: LD_ADDR_VAR 0 44
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46881: LD_ADDR_VAR 0 45
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46925: LD_ADDR_VAR 0 46
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46971: LD_ADDR_VAR 0 47
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47004: LD_ADDR_VAR 0 48
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47035: LD_ADDR_VAR 0 49
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47064: LD_ADDR_VAR 0 50
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47093: LD_ADDR_VAR 0 51
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47124: LD_ADDR_VAR 0 52
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47157: LD_ADDR_VAR 0 53
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47201: LD_ADDR_VAR 0 54
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47242: LD_ADDR_VAR 0 55
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47282: LD_ADDR_VAR 0 56
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47323: LD_ADDR_VAR 0 57
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47367: LD_ADDR_VAR 0 58
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47413: LD_ADDR_VAR 0 59
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47457: LD_ADDR_VAR 0 60
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47498: LD_ADDR_VAR 0 61
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47538: LD_ADDR_VAR 0 62
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47579: LD_ADDR_VAR 0 63
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47623: LD_ADDR_VAR 0 64
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: ST_TO_ADDR
// end ; 2 :
47669: GO 50935
47671: LD_INT 2
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47679
47677: GO 50934
47679: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47680: LD_ADDR_VAR 0 29
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 4
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 5
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 4
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 4
47810: PUSH
47811: LD_INT 4
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: LD_INT 4
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 4
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 4
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 3
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 5
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 4
48019: NEG
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 4
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 4
48042: NEG
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 4
48065: NEG
48066: PUSH
48067: LD_INT 4
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 4
48077: NEG
48078: PUSH
48079: LD_INT 5
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 4
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 4
48113: NEG
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 5
48125: NEG
48126: PUSH
48127: LD_INT 4
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 5
48137: NEG
48138: PUSH
48139: LD_INT 5
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 3
48149: NEG
48150: PUSH
48151: LD_INT 5
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 5
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48218: LD_ADDR_VAR 0 30
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: LD_INT 4
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 5
48245: PUSH
48246: LD_INT 4
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 5
48255: PUSH
48256: LD_INT 5
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: LD_INT 4
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 5
48295: PUSH
48296: LD_INT 3
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: LD_INT 5
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 4
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 4
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 4
48408: NEG
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 4
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 4
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 5
48464: NEG
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 5
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 5
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 4
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: NEG
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 4
48582: NEG
48583: PUSH
48584: LD_INT 4
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 4
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 4
48606: NEG
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 4
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 5
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 4
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 4
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 5
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 3
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 5
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48765: LD_ADDR_VAR 0 31
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 4
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 4
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 5
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 5
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 4
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 5
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 4
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 4
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 4
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 4
48967: NEG
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: LD_INT 5
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 4
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: NEG
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 5
49027: NEG
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 5
49039: NEG
49040: PUSH
49041: LD_INT 5
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 5
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 5
49063: NEG
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 3
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 4
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 4
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 4
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 4
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 5
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 5
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 4
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 3
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 5
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49315: LD_ADDR_VAR 0 32
49319: PUSH
49320: LD_INT 4
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 4
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 4
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 5
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 5
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: LD_INT 4
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 4
49496: NEG
49497: PUSH
49498: LD_INT 4
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 4
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 4
49520: NEG
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 5
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 4
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 5
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 5
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 4
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 4
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 4
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: LD_INT 4
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 4
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 5
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 5
49757: PUSH
49758: LD_INT 5
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 4
49767: PUSH
49768: LD_INT 5
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 4
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49862: LD_ADDR_VAR 0 33
49866: PUSH
49867: LD_INT 4
49869: NEG
49870: PUSH
49871: LD_INT 4
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: LD_INT 5
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 4
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 4
49917: NEG
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 5
49929: NEG
49930: PUSH
49931: LD_INT 4
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: LD_INT 5
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: NEG
49954: PUSH
49955: LD_INT 5
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 5
49965: NEG
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 4
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 4
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 4
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 5
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 5
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 4
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 5
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 4
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 4
50202: PUSH
50203: LD_INT 4
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 4
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 4
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 4
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 4
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 5
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 5
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 4
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 5
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50400: LD_ADDR_VAR 0 34
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 4
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 4
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 5
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 5
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 4
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 4
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 5
50622: PUSH
50623: LD_INT 4
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 5
50632: PUSH
50633: LD_INT 5
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 4
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 5
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 4
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 4
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 4
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 5
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 5
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 5
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// end ; end ;
50932: GO 50935
50934: POP
// case btype of b_depot , b_warehouse :
50935: LD_VAR 0 1
50939: PUSH
50940: LD_INT 0
50942: DOUBLE
50943: EQUAL
50944: IFTRUE 50954
50946: LD_INT 1
50948: DOUBLE
50949: EQUAL
50950: IFTRUE 50954
50952: GO 51155
50954: POP
// case nation of nation_american :
50955: LD_VAR 0 5
50959: PUSH
50960: LD_INT 1
50962: DOUBLE
50963: EQUAL
50964: IFTRUE 50968
50966: GO 51024
50968: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50969: LD_ADDR_VAR 0 9
50973: PUSH
50974: LD_VAR 0 11
50978: PUSH
50979: LD_VAR 0 12
50983: PUSH
50984: LD_VAR 0 13
50988: PUSH
50989: LD_VAR 0 14
50993: PUSH
50994: LD_VAR 0 15
50998: PUSH
50999: LD_VAR 0 16
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: PUSH
51012: LD_VAR 0 4
51016: PUSH
51017: LD_INT 1
51019: PLUS
51020: ARRAY
51021: ST_TO_ADDR
51022: GO 51153
51024: LD_INT 2
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51032
51030: GO 51088
51032: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51033: LD_ADDR_VAR 0 9
51037: PUSH
51038: LD_VAR 0 17
51042: PUSH
51043: LD_VAR 0 18
51047: PUSH
51048: LD_VAR 0 19
51052: PUSH
51053: LD_VAR 0 20
51057: PUSH
51058: LD_VAR 0 21
51062: PUSH
51063: LD_VAR 0 22
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: PUSH
51076: LD_VAR 0 4
51080: PUSH
51081: LD_INT 1
51083: PLUS
51084: ARRAY
51085: ST_TO_ADDR
51086: GO 51153
51088: LD_INT 3
51090: DOUBLE
51091: EQUAL
51092: IFTRUE 51096
51094: GO 51152
51096: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51097: LD_ADDR_VAR 0 9
51101: PUSH
51102: LD_VAR 0 23
51106: PUSH
51107: LD_VAR 0 24
51111: PUSH
51112: LD_VAR 0 25
51116: PUSH
51117: LD_VAR 0 26
51121: PUSH
51122: LD_VAR 0 27
51126: PUSH
51127: LD_VAR 0 28
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: PUSH
51140: LD_VAR 0 4
51144: PUSH
51145: LD_INT 1
51147: PLUS
51148: ARRAY
51149: ST_TO_ADDR
51150: GO 51153
51152: POP
51153: GO 51702
51155: LD_INT 2
51157: DOUBLE
51158: EQUAL
51159: IFTRUE 51169
51161: LD_INT 3
51163: DOUBLE
51164: EQUAL
51165: IFTRUE 51169
51167: GO 51225
51169: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51170: LD_ADDR_VAR 0 9
51174: PUSH
51175: LD_VAR 0 29
51179: PUSH
51180: LD_VAR 0 30
51184: PUSH
51185: LD_VAR 0 31
51189: PUSH
51190: LD_VAR 0 32
51194: PUSH
51195: LD_VAR 0 33
51199: PUSH
51200: LD_VAR 0 34
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: PUSH
51213: LD_VAR 0 4
51217: PUSH
51218: LD_INT 1
51220: PLUS
51221: ARRAY
51222: ST_TO_ADDR
51223: GO 51702
51225: LD_INT 16
51227: DOUBLE
51228: EQUAL
51229: IFTRUE 51281
51231: LD_INT 17
51233: DOUBLE
51234: EQUAL
51235: IFTRUE 51281
51237: LD_INT 18
51239: DOUBLE
51240: EQUAL
51241: IFTRUE 51281
51243: LD_INT 19
51245: DOUBLE
51246: EQUAL
51247: IFTRUE 51281
51249: LD_INT 20
51251: DOUBLE
51252: EQUAL
51253: IFTRUE 51281
51255: LD_INT 21
51257: DOUBLE
51258: EQUAL
51259: IFTRUE 51281
51261: LD_INT 23
51263: DOUBLE
51264: EQUAL
51265: IFTRUE 51281
51267: LD_INT 24
51269: DOUBLE
51270: EQUAL
51271: IFTRUE 51281
51273: LD_INT 25
51275: DOUBLE
51276: EQUAL
51277: IFTRUE 51281
51279: GO 51337
51281: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51282: LD_ADDR_VAR 0 9
51286: PUSH
51287: LD_VAR 0 35
51291: PUSH
51292: LD_VAR 0 36
51296: PUSH
51297: LD_VAR 0 37
51301: PUSH
51302: LD_VAR 0 38
51306: PUSH
51307: LD_VAR 0 39
51311: PUSH
51312: LD_VAR 0 40
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 4
51329: PUSH
51330: LD_INT 1
51332: PLUS
51333: ARRAY
51334: ST_TO_ADDR
51335: GO 51702
51337: LD_INT 6
51339: DOUBLE
51340: EQUAL
51341: IFTRUE 51393
51343: LD_INT 7
51345: DOUBLE
51346: EQUAL
51347: IFTRUE 51393
51349: LD_INT 8
51351: DOUBLE
51352: EQUAL
51353: IFTRUE 51393
51355: LD_INT 13
51357: DOUBLE
51358: EQUAL
51359: IFTRUE 51393
51361: LD_INT 12
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51393
51367: LD_INT 15
51369: DOUBLE
51370: EQUAL
51371: IFTRUE 51393
51373: LD_INT 11
51375: DOUBLE
51376: EQUAL
51377: IFTRUE 51393
51379: LD_INT 14
51381: DOUBLE
51382: EQUAL
51383: IFTRUE 51393
51385: LD_INT 10
51387: DOUBLE
51388: EQUAL
51389: IFTRUE 51393
51391: GO 51449
51393: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
51394: LD_ADDR_VAR 0 9
51398: PUSH
51399: LD_VAR 0 41
51403: PUSH
51404: LD_VAR 0 42
51408: PUSH
51409: LD_VAR 0 43
51413: PUSH
51414: LD_VAR 0 44
51418: PUSH
51419: LD_VAR 0 45
51423: PUSH
51424: LD_VAR 0 46
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: PUSH
51437: LD_VAR 0 4
51441: PUSH
51442: LD_INT 1
51444: PLUS
51445: ARRAY
51446: ST_TO_ADDR
51447: GO 51702
51449: LD_INT 36
51451: DOUBLE
51452: EQUAL
51453: IFTRUE 51457
51455: GO 51513
51457: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51458: LD_ADDR_VAR 0 9
51462: PUSH
51463: LD_VAR 0 47
51467: PUSH
51468: LD_VAR 0 48
51472: PUSH
51473: LD_VAR 0 49
51477: PUSH
51478: LD_VAR 0 50
51482: PUSH
51483: LD_VAR 0 51
51487: PUSH
51488: LD_VAR 0 52
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: PUSH
51501: LD_VAR 0 4
51505: PUSH
51506: LD_INT 1
51508: PLUS
51509: ARRAY
51510: ST_TO_ADDR
51511: GO 51702
51513: LD_INT 4
51515: DOUBLE
51516: EQUAL
51517: IFTRUE 51539
51519: LD_INT 5
51521: DOUBLE
51522: EQUAL
51523: IFTRUE 51539
51525: LD_INT 34
51527: DOUBLE
51528: EQUAL
51529: IFTRUE 51539
51531: LD_INT 37
51533: DOUBLE
51534: EQUAL
51535: IFTRUE 51539
51537: GO 51595
51539: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51540: LD_ADDR_VAR 0 9
51544: PUSH
51545: LD_VAR 0 53
51549: PUSH
51550: LD_VAR 0 54
51554: PUSH
51555: LD_VAR 0 55
51559: PUSH
51560: LD_VAR 0 56
51564: PUSH
51565: LD_VAR 0 57
51569: PUSH
51570: LD_VAR 0 58
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: PUSH
51583: LD_VAR 0 4
51587: PUSH
51588: LD_INT 1
51590: PLUS
51591: ARRAY
51592: ST_TO_ADDR
51593: GO 51702
51595: LD_INT 31
51597: DOUBLE
51598: EQUAL
51599: IFTRUE 51645
51601: LD_INT 32
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51645
51607: LD_INT 33
51609: DOUBLE
51610: EQUAL
51611: IFTRUE 51645
51613: LD_INT 27
51615: DOUBLE
51616: EQUAL
51617: IFTRUE 51645
51619: LD_INT 26
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51645
51625: LD_INT 28
51627: DOUBLE
51628: EQUAL
51629: IFTRUE 51645
51631: LD_INT 29
51633: DOUBLE
51634: EQUAL
51635: IFTRUE 51645
51637: LD_INT 30
51639: DOUBLE
51640: EQUAL
51641: IFTRUE 51645
51643: GO 51701
51645: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
51646: LD_ADDR_VAR 0 9
51650: PUSH
51651: LD_VAR 0 59
51655: PUSH
51656: LD_VAR 0 60
51660: PUSH
51661: LD_VAR 0 61
51665: PUSH
51666: LD_VAR 0 62
51670: PUSH
51671: LD_VAR 0 63
51675: PUSH
51676: LD_VAR 0 64
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: PUSH
51689: LD_VAR 0 4
51693: PUSH
51694: LD_INT 1
51696: PLUS
51697: ARRAY
51698: ST_TO_ADDR
51699: GO 51702
51701: POP
// temp_list2 = [ ] ;
51702: LD_ADDR_VAR 0 10
51706: PUSH
51707: EMPTY
51708: ST_TO_ADDR
// for i in temp_list do
51709: LD_ADDR_VAR 0 8
51713: PUSH
51714: LD_VAR 0 9
51718: PUSH
51719: FOR_IN
51720: IFFALSE 51772
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51722: LD_ADDR_VAR 0 10
51726: PUSH
51727: LD_VAR 0 10
51731: PUSH
51732: LD_VAR 0 8
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PUSH
51741: LD_VAR 0 2
51745: PLUS
51746: PUSH
51747: LD_VAR 0 8
51751: PUSH
51752: LD_INT 2
51754: ARRAY
51755: PUSH
51756: LD_VAR 0 3
51760: PLUS
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: ADD
51769: ST_TO_ADDR
51770: GO 51719
51772: POP
51773: POP
// result = temp_list2 ;
51774: LD_ADDR_VAR 0 7
51778: PUSH
51779: LD_VAR 0 10
51783: ST_TO_ADDR
// end ;
51784: LD_VAR 0 7
51788: RET
// export function EnemyInRange ( unit , dist ) ; begin
51789: LD_INT 0
51791: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51792: LD_ADDR_VAR 0 3
51796: PUSH
51797: LD_VAR 0 1
51801: PPUSH
51802: CALL_OW 255
51806: PPUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 250
51816: PPUSH
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL_OW 251
51826: PPUSH
51827: LD_VAR 0 2
51831: PPUSH
51832: CALL 26132 0 4
51836: PUSH
51837: LD_INT 4
51839: ARRAY
51840: ST_TO_ADDR
// end ;
51841: LD_VAR 0 3
51845: RET
// export function PlayerSeeMe ( unit ) ; begin
51846: LD_INT 0
51848: PPUSH
// result := See ( your_side , unit ) ;
51849: LD_ADDR_VAR 0 2
51853: PUSH
51854: LD_OWVAR 2
51858: PPUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 292
51868: ST_TO_ADDR
// end ;
51869: LD_VAR 0 2
51873: RET
// export function ReverseDir ( unit ) ; begin
51874: LD_INT 0
51876: PPUSH
// if not unit then
51877: LD_VAR 0 1
51881: NOT
51882: IFFALSE 51886
// exit ;
51884: GO 51932
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
51886: LD_ADDR_VAR 0 2
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: LD_INT 5
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: LD_VAR 0 1
51921: PPUSH
51922: CALL_OW 254
51926: PUSH
51927: LD_INT 1
51929: PLUS
51930: ARRAY
51931: ST_TO_ADDR
// end ;
51932: LD_VAR 0 2
51936: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51937: LD_INT 0
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
// if not hexes then
51944: LD_VAR 0 2
51948: NOT
51949: IFFALSE 51953
// exit ;
51951: GO 52101
// dist := 9999 ;
51953: LD_ADDR_VAR 0 5
51957: PUSH
51958: LD_INT 9999
51960: ST_TO_ADDR
// for i = 1 to hexes do
51961: LD_ADDR_VAR 0 4
51965: PUSH
51966: DOUBLE
51967: LD_INT 1
51969: DEC
51970: ST_TO_ADDR
51971: LD_VAR 0 2
51975: PUSH
51976: FOR_TO
51977: IFFALSE 52089
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51979: LD_VAR 0 1
51983: PPUSH
51984: LD_VAR 0 2
51988: PUSH
51989: LD_VAR 0 4
51993: ARRAY
51994: PUSH
51995: LD_INT 1
51997: ARRAY
51998: PPUSH
51999: LD_VAR 0 2
52003: PUSH
52004: LD_VAR 0 4
52008: ARRAY
52009: PUSH
52010: LD_INT 2
52012: ARRAY
52013: PPUSH
52014: CALL_OW 297
52018: PUSH
52019: LD_VAR 0 5
52023: LESS
52024: IFFALSE 52087
// begin hex := hexes [ i ] ;
52026: LD_ADDR_VAR 0 7
52030: PUSH
52031: LD_VAR 0 2
52035: PUSH
52036: LD_VAR 0 4
52040: ARRAY
52041: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52042: LD_ADDR_VAR 0 5
52046: PUSH
52047: LD_VAR 0 1
52051: PPUSH
52052: LD_VAR 0 2
52056: PUSH
52057: LD_VAR 0 4
52061: ARRAY
52062: PUSH
52063: LD_INT 1
52065: ARRAY
52066: PPUSH
52067: LD_VAR 0 2
52071: PUSH
52072: LD_VAR 0 4
52076: ARRAY
52077: PUSH
52078: LD_INT 2
52080: ARRAY
52081: PPUSH
52082: CALL_OW 297
52086: ST_TO_ADDR
// end ; end ;
52087: GO 51976
52089: POP
52090: POP
// result := hex ;
52091: LD_ADDR_VAR 0 3
52095: PUSH
52096: LD_VAR 0 7
52100: ST_TO_ADDR
// end ;
52101: LD_VAR 0 3
52105: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52106: LD_INT 0
52108: PPUSH
52109: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52110: LD_VAR 0 1
52114: NOT
52115: PUSH
52116: LD_VAR 0 1
52120: PUSH
52121: LD_INT 21
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 23
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PPUSH
52145: CALL_OW 69
52149: IN
52150: NOT
52151: OR
52152: IFFALSE 52156
// exit ;
52154: GO 52203
// for i = 1 to 3 do
52156: LD_ADDR_VAR 0 3
52160: PUSH
52161: DOUBLE
52162: LD_INT 1
52164: DEC
52165: ST_TO_ADDR
52166: LD_INT 3
52168: PUSH
52169: FOR_TO
52170: IFFALSE 52201
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52172: LD_VAR 0 1
52176: PPUSH
52177: CALL_OW 250
52181: PPUSH
52182: LD_VAR 0 1
52186: PPUSH
52187: CALL_OW 251
52191: PPUSH
52192: LD_INT 1
52194: PPUSH
52195: CALL_OW 453
52199: GO 52169
52201: POP
52202: POP
// end ;
52203: LD_VAR 0 2
52207: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52208: LD_INT 0
52210: PPUSH
52211: PPUSH
52212: PPUSH
52213: PPUSH
52214: PPUSH
52215: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52216: LD_VAR 0 1
52220: NOT
52221: PUSH
52222: LD_VAR 0 2
52226: NOT
52227: OR
52228: PUSH
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 314
52238: OR
52239: IFFALSE 52243
// exit ;
52241: GO 52684
// x := GetX ( enemy_unit ) ;
52243: LD_ADDR_VAR 0 7
52247: PUSH
52248: LD_VAR 0 2
52252: PPUSH
52253: CALL_OW 250
52257: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52258: LD_ADDR_VAR 0 8
52262: PUSH
52263: LD_VAR 0 2
52267: PPUSH
52268: CALL_OW 251
52272: ST_TO_ADDR
// if not x or not y then
52273: LD_VAR 0 7
52277: NOT
52278: PUSH
52279: LD_VAR 0 8
52283: NOT
52284: OR
52285: IFFALSE 52289
// exit ;
52287: GO 52684
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52289: LD_ADDR_VAR 0 6
52293: PUSH
52294: LD_VAR 0 7
52298: PPUSH
52299: LD_INT 0
52301: PPUSH
52302: LD_INT 4
52304: PPUSH
52305: CALL_OW 272
52309: PUSH
52310: LD_VAR 0 8
52314: PPUSH
52315: LD_INT 0
52317: PPUSH
52318: LD_INT 4
52320: PPUSH
52321: CALL_OW 273
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_VAR 0 7
52334: PPUSH
52335: LD_INT 1
52337: PPUSH
52338: LD_INT 4
52340: PPUSH
52341: CALL_OW 272
52345: PUSH
52346: LD_VAR 0 8
52350: PPUSH
52351: LD_INT 1
52353: PPUSH
52354: LD_INT 4
52356: PPUSH
52357: CALL_OW 273
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_VAR 0 7
52370: PPUSH
52371: LD_INT 2
52373: PPUSH
52374: LD_INT 4
52376: PPUSH
52377: CALL_OW 272
52381: PUSH
52382: LD_VAR 0 8
52386: PPUSH
52387: LD_INT 2
52389: PPUSH
52390: LD_INT 4
52392: PPUSH
52393: CALL_OW 273
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_VAR 0 7
52406: PPUSH
52407: LD_INT 3
52409: PPUSH
52410: LD_INT 4
52412: PPUSH
52413: CALL_OW 272
52417: PUSH
52418: LD_VAR 0 8
52422: PPUSH
52423: LD_INT 3
52425: PPUSH
52426: LD_INT 4
52428: PPUSH
52429: CALL_OW 273
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_VAR 0 7
52442: PPUSH
52443: LD_INT 4
52445: PPUSH
52446: LD_INT 4
52448: PPUSH
52449: CALL_OW 272
52453: PUSH
52454: LD_VAR 0 8
52458: PPUSH
52459: LD_INT 4
52461: PPUSH
52462: LD_INT 4
52464: PPUSH
52465: CALL_OW 273
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_VAR 0 7
52478: PPUSH
52479: LD_INT 5
52481: PPUSH
52482: LD_INT 4
52484: PPUSH
52485: CALL_OW 272
52489: PUSH
52490: LD_VAR 0 8
52494: PPUSH
52495: LD_INT 5
52497: PPUSH
52498: LD_INT 4
52500: PPUSH
52501: CALL_OW 273
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// for i = tmp downto 1 do
52518: LD_ADDR_VAR 0 4
52522: PUSH
52523: DOUBLE
52524: LD_VAR 0 6
52528: INC
52529: ST_TO_ADDR
52530: LD_INT 1
52532: PUSH
52533: FOR_DOWNTO
52534: IFFALSE 52635
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52536: LD_VAR 0 6
52540: PUSH
52541: LD_VAR 0 4
52545: ARRAY
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PPUSH
52551: LD_VAR 0 6
52555: PUSH
52556: LD_VAR 0 4
52560: ARRAY
52561: PUSH
52562: LD_INT 2
52564: ARRAY
52565: PPUSH
52566: CALL_OW 488
52570: NOT
52571: PUSH
52572: LD_VAR 0 6
52576: PUSH
52577: LD_VAR 0 4
52581: ARRAY
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: PPUSH
52587: LD_VAR 0 6
52591: PUSH
52592: LD_VAR 0 4
52596: ARRAY
52597: PUSH
52598: LD_INT 2
52600: ARRAY
52601: PPUSH
52602: CALL_OW 428
52606: PUSH
52607: LD_INT 0
52609: NONEQUAL
52610: OR
52611: IFFALSE 52633
// tmp := Delete ( tmp , i ) ;
52613: LD_ADDR_VAR 0 6
52617: PUSH
52618: LD_VAR 0 6
52622: PPUSH
52623: LD_VAR 0 4
52627: PPUSH
52628: CALL_OW 3
52632: ST_TO_ADDR
52633: GO 52533
52635: POP
52636: POP
// j := GetClosestHex ( unit , tmp ) ;
52637: LD_ADDR_VAR 0 5
52641: PUSH
52642: LD_VAR 0 1
52646: PPUSH
52647: LD_VAR 0 6
52651: PPUSH
52652: CALL 51937 0 2
52656: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52657: LD_VAR 0 1
52661: PPUSH
52662: LD_VAR 0 5
52666: PUSH
52667: LD_INT 1
52669: ARRAY
52670: PPUSH
52671: LD_VAR 0 5
52675: PUSH
52676: LD_INT 2
52678: ARRAY
52679: PPUSH
52680: CALL_OW 111
// end ;
52684: LD_VAR 0 3
52688: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52689: LD_INT 0
52691: PPUSH
52692: PPUSH
52693: PPUSH
// uc_side = 0 ;
52694: LD_ADDR_OWVAR 20
52698: PUSH
52699: LD_INT 0
52701: ST_TO_ADDR
// uc_nation = 0 ;
52702: LD_ADDR_OWVAR 21
52706: PUSH
52707: LD_INT 0
52709: ST_TO_ADDR
// InitHc ;
52710: CALL_OW 19
// InitVc ;
52714: CALL_OW 20
// if mastodonts then
52718: LD_VAR 0 6
52722: IFFALSE 52789
// for i = 1 to mastodonts do
52724: LD_ADDR_VAR 0 11
52728: PUSH
52729: DOUBLE
52730: LD_INT 1
52732: DEC
52733: ST_TO_ADDR
52734: LD_VAR 0 6
52738: PUSH
52739: FOR_TO
52740: IFFALSE 52787
// begin vc_chassis := 31 ;
52742: LD_ADDR_OWVAR 37
52746: PUSH
52747: LD_INT 31
52749: ST_TO_ADDR
// vc_control := control_rider ;
52750: LD_ADDR_OWVAR 38
52754: PUSH
52755: LD_INT 4
52757: ST_TO_ADDR
// animal := CreateVehicle ;
52758: LD_ADDR_VAR 0 12
52762: PUSH
52763: CALL_OW 45
52767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52768: LD_VAR 0 12
52772: PPUSH
52773: LD_VAR 0 8
52777: PPUSH
52778: LD_INT 0
52780: PPUSH
52781: CALL 59495 0 3
// end ;
52785: GO 52739
52787: POP
52788: POP
// if horses then
52789: LD_VAR 0 5
52793: IFFALSE 52860
// for i = 1 to horses do
52795: LD_ADDR_VAR 0 11
52799: PUSH
52800: DOUBLE
52801: LD_INT 1
52803: DEC
52804: ST_TO_ADDR
52805: LD_VAR 0 5
52809: PUSH
52810: FOR_TO
52811: IFFALSE 52858
// begin hc_class := 21 ;
52813: LD_ADDR_OWVAR 28
52817: PUSH
52818: LD_INT 21
52820: ST_TO_ADDR
// hc_gallery :=  ;
52821: LD_ADDR_OWVAR 33
52825: PUSH
52826: LD_STRING 
52828: ST_TO_ADDR
// animal := CreateHuman ;
52829: LD_ADDR_VAR 0 12
52833: PUSH
52834: CALL_OW 44
52838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52839: LD_VAR 0 12
52843: PPUSH
52844: LD_VAR 0 8
52848: PPUSH
52849: LD_INT 0
52851: PPUSH
52852: CALL 59495 0 3
// end ;
52856: GO 52810
52858: POP
52859: POP
// if birds then
52860: LD_VAR 0 1
52864: IFFALSE 52931
// for i = 1 to birds do
52866: LD_ADDR_VAR 0 11
52870: PUSH
52871: DOUBLE
52872: LD_INT 1
52874: DEC
52875: ST_TO_ADDR
52876: LD_VAR 0 1
52880: PUSH
52881: FOR_TO
52882: IFFALSE 52929
// begin hc_class = 18 ;
52884: LD_ADDR_OWVAR 28
52888: PUSH
52889: LD_INT 18
52891: ST_TO_ADDR
// hc_gallery =  ;
52892: LD_ADDR_OWVAR 33
52896: PUSH
52897: LD_STRING 
52899: ST_TO_ADDR
// animal := CreateHuman ;
52900: LD_ADDR_VAR 0 12
52904: PUSH
52905: CALL_OW 44
52909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52910: LD_VAR 0 12
52914: PPUSH
52915: LD_VAR 0 8
52919: PPUSH
52920: LD_INT 0
52922: PPUSH
52923: CALL 59495 0 3
// end ;
52927: GO 52881
52929: POP
52930: POP
// if tigers then
52931: LD_VAR 0 2
52935: IFFALSE 53019
// for i = 1 to tigers do
52937: LD_ADDR_VAR 0 11
52941: PUSH
52942: DOUBLE
52943: LD_INT 1
52945: DEC
52946: ST_TO_ADDR
52947: LD_VAR 0 2
52951: PUSH
52952: FOR_TO
52953: IFFALSE 53017
// begin hc_class = class_tiger ;
52955: LD_ADDR_OWVAR 28
52959: PUSH
52960: LD_INT 14
52962: ST_TO_ADDR
// hc_gallery =  ;
52963: LD_ADDR_OWVAR 33
52967: PUSH
52968: LD_STRING 
52970: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52971: LD_ADDR_OWVAR 35
52975: PUSH
52976: LD_INT 7
52978: NEG
52979: PPUSH
52980: LD_INT 7
52982: PPUSH
52983: CALL_OW 12
52987: ST_TO_ADDR
// animal := CreateHuman ;
52988: LD_ADDR_VAR 0 12
52992: PUSH
52993: CALL_OW 44
52997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52998: LD_VAR 0 12
53002: PPUSH
53003: LD_VAR 0 8
53007: PPUSH
53008: LD_INT 0
53010: PPUSH
53011: CALL 59495 0 3
// end ;
53015: GO 52952
53017: POP
53018: POP
// if apemans then
53019: LD_VAR 0 3
53023: IFFALSE 53146
// for i = 1 to apemans do
53025: LD_ADDR_VAR 0 11
53029: PUSH
53030: DOUBLE
53031: LD_INT 1
53033: DEC
53034: ST_TO_ADDR
53035: LD_VAR 0 3
53039: PUSH
53040: FOR_TO
53041: IFFALSE 53144
// begin hc_class = class_apeman ;
53043: LD_ADDR_OWVAR 28
53047: PUSH
53048: LD_INT 12
53050: ST_TO_ADDR
// hc_gallery =  ;
53051: LD_ADDR_OWVAR 33
53055: PUSH
53056: LD_STRING 
53058: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53059: LD_ADDR_OWVAR 35
53063: PUSH
53064: LD_INT 5
53066: NEG
53067: PPUSH
53068: LD_INT 5
53070: PPUSH
53071: CALL_OW 12
53075: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53076: LD_ADDR_OWVAR 31
53080: PUSH
53081: LD_INT 1
53083: PPUSH
53084: LD_INT 3
53086: PPUSH
53087: CALL_OW 12
53091: PUSH
53092: LD_INT 1
53094: PPUSH
53095: LD_INT 3
53097: PPUSH
53098: CALL_OW 12
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// animal := CreateHuman ;
53115: LD_ADDR_VAR 0 12
53119: PUSH
53120: CALL_OW 44
53124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53125: LD_VAR 0 12
53129: PPUSH
53130: LD_VAR 0 8
53134: PPUSH
53135: LD_INT 0
53137: PPUSH
53138: CALL 59495 0 3
// end ;
53142: GO 53040
53144: POP
53145: POP
// if enchidnas then
53146: LD_VAR 0 4
53150: IFFALSE 53217
// for i = 1 to enchidnas do
53152: LD_ADDR_VAR 0 11
53156: PUSH
53157: DOUBLE
53158: LD_INT 1
53160: DEC
53161: ST_TO_ADDR
53162: LD_VAR 0 4
53166: PUSH
53167: FOR_TO
53168: IFFALSE 53215
// begin hc_class = 13 ;
53170: LD_ADDR_OWVAR 28
53174: PUSH
53175: LD_INT 13
53177: ST_TO_ADDR
// hc_gallery =  ;
53178: LD_ADDR_OWVAR 33
53182: PUSH
53183: LD_STRING 
53185: ST_TO_ADDR
// animal := CreateHuman ;
53186: LD_ADDR_VAR 0 12
53190: PUSH
53191: CALL_OW 44
53195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53196: LD_VAR 0 12
53200: PPUSH
53201: LD_VAR 0 8
53205: PPUSH
53206: LD_INT 0
53208: PPUSH
53209: CALL 59495 0 3
// end ;
53213: GO 53167
53215: POP
53216: POP
// if fishes then
53217: LD_VAR 0 7
53221: IFFALSE 53288
// for i = 1 to fishes do
53223: LD_ADDR_VAR 0 11
53227: PUSH
53228: DOUBLE
53229: LD_INT 1
53231: DEC
53232: ST_TO_ADDR
53233: LD_VAR 0 7
53237: PUSH
53238: FOR_TO
53239: IFFALSE 53286
// begin hc_class = 20 ;
53241: LD_ADDR_OWVAR 28
53245: PUSH
53246: LD_INT 20
53248: ST_TO_ADDR
// hc_gallery =  ;
53249: LD_ADDR_OWVAR 33
53253: PUSH
53254: LD_STRING 
53256: ST_TO_ADDR
// animal := CreateHuman ;
53257: LD_ADDR_VAR 0 12
53261: PUSH
53262: CALL_OW 44
53266: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53267: LD_VAR 0 12
53271: PPUSH
53272: LD_VAR 0 9
53276: PPUSH
53277: LD_INT 0
53279: PPUSH
53280: CALL 59495 0 3
// end ;
53284: GO 53238
53286: POP
53287: POP
// end ;
53288: LD_VAR 0 10
53292: RET
// export function WantHeal ( sci , unit ) ; begin
53293: LD_INT 0
53295: PPUSH
// if GetTaskList ( sci ) > 0 then
53296: LD_VAR 0 1
53300: PPUSH
53301: CALL_OW 437
53305: PUSH
53306: LD_INT 0
53308: GREATER
53309: IFFALSE 53379
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 437
53320: PUSH
53321: LD_INT 1
53323: ARRAY
53324: PUSH
53325: LD_INT 1
53327: ARRAY
53328: PUSH
53329: LD_STRING l
53331: EQUAL
53332: PUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 437
53342: PUSH
53343: LD_INT 1
53345: ARRAY
53346: PUSH
53347: LD_INT 4
53349: ARRAY
53350: PUSH
53351: LD_VAR 0 2
53355: EQUAL
53356: AND
53357: IFFALSE 53369
// result := true else
53359: LD_ADDR_VAR 0 3
53363: PUSH
53364: LD_INT 1
53366: ST_TO_ADDR
53367: GO 53377
// result := false ;
53369: LD_ADDR_VAR 0 3
53373: PUSH
53374: LD_INT 0
53376: ST_TO_ADDR
// end else
53377: GO 53387
// result := false ;
53379: LD_ADDR_VAR 0 3
53383: PUSH
53384: LD_INT 0
53386: ST_TO_ADDR
// end ;
53387: LD_VAR 0 3
53391: RET
// export function HealTarget ( sci ) ; begin
53392: LD_INT 0
53394: PPUSH
// if not sci then
53395: LD_VAR 0 1
53399: NOT
53400: IFFALSE 53404
// exit ;
53402: GO 53469
// result := 0 ;
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: LD_INT 0
53411: ST_TO_ADDR
// if GetTaskList ( sci ) then
53412: LD_VAR 0 1
53416: PPUSH
53417: CALL_OW 437
53421: IFFALSE 53469
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53423: LD_VAR 0 1
53427: PPUSH
53428: CALL_OW 437
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PUSH
53441: LD_STRING l
53443: EQUAL
53444: IFFALSE 53469
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53446: LD_ADDR_VAR 0 2
53450: PUSH
53451: LD_VAR 0 1
53455: PPUSH
53456: CALL_OW 437
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: PUSH
53465: LD_INT 4
53467: ARRAY
53468: ST_TO_ADDR
// end ;
53469: LD_VAR 0 2
53473: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
53474: LD_INT 0
53476: PPUSH
53477: PPUSH
53478: PPUSH
53479: PPUSH
53480: PPUSH
53481: PPUSH
53482: PPUSH
53483: PPUSH
53484: PPUSH
53485: PPUSH
53486: PPUSH
53487: PPUSH
53488: PPUSH
53489: PPUSH
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
53495: PPUSH
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
53504: PPUSH
53505: PPUSH
53506: PPUSH
53507: PPUSH
53508: PPUSH
// if not list then
53509: LD_VAR 0 1
53513: NOT
53514: IFFALSE 53518
// exit ;
53516: GO 58106
// base := list [ 1 ] ;
53518: LD_ADDR_VAR 0 3
53522: PUSH
53523: LD_VAR 0 1
53527: PUSH
53528: LD_INT 1
53530: ARRAY
53531: ST_TO_ADDR
// group := list [ 2 ] ;
53532: LD_ADDR_VAR 0 4
53536: PUSH
53537: LD_VAR 0 1
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: ST_TO_ADDR
// path := list [ 3 ] ;
53546: LD_ADDR_VAR 0 5
53550: PUSH
53551: LD_VAR 0 1
53555: PUSH
53556: LD_INT 3
53558: ARRAY
53559: ST_TO_ADDR
// flags := list [ 4 ] ;
53560: LD_ADDR_VAR 0 6
53564: PUSH
53565: LD_VAR 0 1
53569: PUSH
53570: LD_INT 4
53572: ARRAY
53573: ST_TO_ADDR
// mined := [ ] ;
53574: LD_ADDR_VAR 0 27
53578: PUSH
53579: EMPTY
53580: ST_TO_ADDR
// bombed := [ ] ;
53581: LD_ADDR_VAR 0 28
53585: PUSH
53586: EMPTY
53587: ST_TO_ADDR
// healers := [ ] ;
53588: LD_ADDR_VAR 0 31
53592: PUSH
53593: EMPTY
53594: ST_TO_ADDR
// to_heal := [ ] ;
53595: LD_ADDR_VAR 0 30
53599: PUSH
53600: EMPTY
53601: ST_TO_ADDR
// repairs := [ ] ;
53602: LD_ADDR_VAR 0 33
53606: PUSH
53607: EMPTY
53608: ST_TO_ADDR
// to_repair := [ ] ;
53609: LD_ADDR_VAR 0 32
53613: PUSH
53614: EMPTY
53615: ST_TO_ADDR
// if not group or not path then
53616: LD_VAR 0 4
53620: NOT
53621: PUSH
53622: LD_VAR 0 5
53626: NOT
53627: OR
53628: IFFALSE 53632
// exit ;
53630: GO 58106
// if flags then
53632: LD_VAR 0 6
53636: IFFALSE 53780
// begin f_ignore_area := flags [ 1 ] ;
53638: LD_ADDR_VAR 0 17
53642: PUSH
53643: LD_VAR 0 6
53647: PUSH
53648: LD_INT 1
53650: ARRAY
53651: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
53652: LD_ADDR_VAR 0 18
53656: PUSH
53657: LD_VAR 0 6
53661: PUSH
53662: LD_INT 2
53664: ARRAY
53665: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
53666: LD_ADDR_VAR 0 19
53670: PUSH
53671: LD_VAR 0 6
53675: PUSH
53676: LD_INT 3
53678: ARRAY
53679: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
53680: LD_ADDR_VAR 0 20
53684: PUSH
53685: LD_VAR 0 6
53689: PUSH
53690: LD_INT 4
53692: ARRAY
53693: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
53694: LD_ADDR_VAR 0 21
53698: PUSH
53699: LD_VAR 0 6
53703: PUSH
53704: LD_INT 5
53706: ARRAY
53707: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
53708: LD_ADDR_VAR 0 22
53712: PUSH
53713: LD_VAR 0 6
53717: PUSH
53718: LD_INT 6
53720: ARRAY
53721: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
53722: LD_ADDR_VAR 0 23
53726: PUSH
53727: LD_VAR 0 6
53731: PUSH
53732: LD_INT 7
53734: ARRAY
53735: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
53736: LD_ADDR_VAR 0 24
53740: PUSH
53741: LD_VAR 0 6
53745: PUSH
53746: LD_INT 8
53748: ARRAY
53749: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
53750: LD_ADDR_VAR 0 25
53754: PUSH
53755: LD_VAR 0 6
53759: PUSH
53760: LD_INT 9
53762: ARRAY
53763: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
53764: LD_ADDR_VAR 0 26
53768: PUSH
53769: LD_VAR 0 6
53773: PUSH
53774: LD_INT 10
53776: ARRAY
53777: ST_TO_ADDR
// end else
53778: GO 53860
// begin f_ignore_area := false ;
53780: LD_ADDR_VAR 0 17
53784: PUSH
53785: LD_INT 0
53787: ST_TO_ADDR
// f_capture := false ;
53788: LD_ADDR_VAR 0 18
53792: PUSH
53793: LD_INT 0
53795: ST_TO_ADDR
// f_ignore_civ := false ;
53796: LD_ADDR_VAR 0 19
53800: PUSH
53801: LD_INT 0
53803: ST_TO_ADDR
// f_murder := false ;
53804: LD_ADDR_VAR 0 20
53808: PUSH
53809: LD_INT 0
53811: ST_TO_ADDR
// f_mines := false ;
53812: LD_ADDR_VAR 0 21
53816: PUSH
53817: LD_INT 0
53819: ST_TO_ADDR
// f_repair := false ;
53820: LD_ADDR_VAR 0 22
53824: PUSH
53825: LD_INT 0
53827: ST_TO_ADDR
// f_heal := false ;
53828: LD_ADDR_VAR 0 23
53832: PUSH
53833: LD_INT 0
53835: ST_TO_ADDR
// f_spacetime := false ;
53836: LD_ADDR_VAR 0 24
53840: PUSH
53841: LD_INT 0
53843: ST_TO_ADDR
// f_attack_depot := false ;
53844: LD_ADDR_VAR 0 25
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// f_crawl := false ;
53852: LD_ADDR_VAR 0 26
53856: PUSH
53857: LD_INT 0
53859: ST_TO_ADDR
// end ; if f_heal then
53860: LD_VAR 0 23
53864: IFFALSE 53891
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
53866: LD_ADDR_VAR 0 31
53870: PUSH
53871: LD_VAR 0 4
53875: PPUSH
53876: LD_INT 25
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PPUSH
53886: CALL_OW 72
53890: ST_TO_ADDR
// if f_repair then
53891: LD_VAR 0 22
53895: IFFALSE 53922
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
53897: LD_ADDR_VAR 0 33
53901: PUSH
53902: LD_VAR 0 4
53906: PPUSH
53907: LD_INT 25
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PPUSH
53917: CALL_OW 72
53921: ST_TO_ADDR
// units_path := [ ] ;
53922: LD_ADDR_VAR 0 16
53926: PUSH
53927: EMPTY
53928: ST_TO_ADDR
// for i = 1 to group do
53929: LD_ADDR_VAR 0 7
53933: PUSH
53934: DOUBLE
53935: LD_INT 1
53937: DEC
53938: ST_TO_ADDR
53939: LD_VAR 0 4
53943: PUSH
53944: FOR_TO
53945: IFFALSE 53974
// units_path := Replace ( units_path , i , path ) ;
53947: LD_ADDR_VAR 0 16
53951: PUSH
53952: LD_VAR 0 16
53956: PPUSH
53957: LD_VAR 0 7
53961: PPUSH
53962: LD_VAR 0 5
53966: PPUSH
53967: CALL_OW 1
53971: ST_TO_ADDR
53972: GO 53944
53974: POP
53975: POP
// repeat for i = group downto 1 do
53976: LD_ADDR_VAR 0 7
53980: PUSH
53981: DOUBLE
53982: LD_VAR 0 4
53986: INC
53987: ST_TO_ADDR
53988: LD_INT 1
53990: PUSH
53991: FOR_DOWNTO
53992: IFFALSE 58088
// begin wait ( 5 ) ;
53994: LD_INT 5
53996: PPUSH
53997: CALL_OW 67
// tmp := [ ] ;
54001: LD_ADDR_VAR 0 14
54005: PUSH
54006: EMPTY
54007: ST_TO_ADDR
// attacking := false ;
54008: LD_ADDR_VAR 0 29
54012: PUSH
54013: LD_INT 0
54015: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
54016: LD_VAR 0 4
54020: PUSH
54021: LD_VAR 0 7
54025: ARRAY
54026: PPUSH
54027: CALL_OW 301
54031: PUSH
54032: LD_VAR 0 4
54036: PUSH
54037: LD_VAR 0 7
54041: ARRAY
54042: NOT
54043: OR
54044: IFFALSE 54153
// begin if GetType ( group [ i ] ) = unit_human then
54046: LD_VAR 0 4
54050: PUSH
54051: LD_VAR 0 7
54055: ARRAY
54056: PPUSH
54057: CALL_OW 247
54061: PUSH
54062: LD_INT 1
54064: EQUAL
54065: IFFALSE 54111
// begin to_heal := to_heal diff group [ i ] ;
54067: LD_ADDR_VAR 0 30
54071: PUSH
54072: LD_VAR 0 30
54076: PUSH
54077: LD_VAR 0 4
54081: PUSH
54082: LD_VAR 0 7
54086: ARRAY
54087: DIFF
54088: ST_TO_ADDR
// healers := healers diff group [ i ] ;
54089: LD_ADDR_VAR 0 31
54093: PUSH
54094: LD_VAR 0 31
54098: PUSH
54099: LD_VAR 0 4
54103: PUSH
54104: LD_VAR 0 7
54108: ARRAY
54109: DIFF
54110: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
54111: LD_ADDR_VAR 0 4
54115: PUSH
54116: LD_VAR 0 4
54120: PPUSH
54121: LD_VAR 0 7
54125: PPUSH
54126: CALL_OW 3
54130: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
54131: LD_ADDR_VAR 0 16
54135: PUSH
54136: LD_VAR 0 16
54140: PPUSH
54141: LD_VAR 0 7
54145: PPUSH
54146: CALL_OW 3
54150: ST_TO_ADDR
// continue ;
54151: GO 53991
// end ; if f_repair then
54153: LD_VAR 0 22
54157: IFFALSE 54646
// begin if GetType ( group [ i ] ) = unit_vehicle then
54159: LD_VAR 0 4
54163: PUSH
54164: LD_VAR 0 7
54168: ARRAY
54169: PPUSH
54170: CALL_OW 247
54174: PUSH
54175: LD_INT 2
54177: EQUAL
54178: IFFALSE 54368
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
54180: LD_VAR 0 4
54184: PUSH
54185: LD_VAR 0 7
54189: ARRAY
54190: PPUSH
54191: CALL_OW 256
54195: PUSH
54196: LD_INT 700
54198: LESS
54199: PUSH
54200: LD_VAR 0 4
54204: PUSH
54205: LD_VAR 0 7
54209: ARRAY
54210: PUSH
54211: LD_VAR 0 32
54215: IN
54216: NOT
54217: AND
54218: IFFALSE 54242
// to_repair := to_repair union group [ i ] ;
54220: LD_ADDR_VAR 0 32
54224: PUSH
54225: LD_VAR 0 32
54229: PUSH
54230: LD_VAR 0 4
54234: PUSH
54235: LD_VAR 0 7
54239: ARRAY
54240: UNION
54241: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
54242: LD_VAR 0 4
54246: PUSH
54247: LD_VAR 0 7
54251: ARRAY
54252: PPUSH
54253: CALL_OW 256
54257: PUSH
54258: LD_INT 1000
54260: EQUAL
54261: PUSH
54262: LD_VAR 0 4
54266: PUSH
54267: LD_VAR 0 7
54271: ARRAY
54272: PUSH
54273: LD_VAR 0 32
54277: IN
54278: AND
54279: IFFALSE 54303
// to_repair := to_repair diff group [ i ] ;
54281: LD_ADDR_VAR 0 32
54285: PUSH
54286: LD_VAR 0 32
54290: PUSH
54291: LD_VAR 0 4
54295: PUSH
54296: LD_VAR 0 7
54300: ARRAY
54301: DIFF
54302: ST_TO_ADDR
// if group [ i ] in to_repair then
54303: LD_VAR 0 4
54307: PUSH
54308: LD_VAR 0 7
54312: ARRAY
54313: PUSH
54314: LD_VAR 0 32
54318: IN
54319: IFFALSE 54366
// begin if not IsInArea ( group [ i ] , f_repair ) then
54321: LD_VAR 0 4
54325: PUSH
54326: LD_VAR 0 7
54330: ARRAY
54331: PPUSH
54332: LD_VAR 0 22
54336: PPUSH
54337: CALL_OW 308
54341: NOT
54342: IFFALSE 54364
// ComMoveToArea ( group [ i ] , f_repair ) ;
54344: LD_VAR 0 4
54348: PUSH
54349: LD_VAR 0 7
54353: ARRAY
54354: PPUSH
54355: LD_VAR 0 22
54359: PPUSH
54360: CALL_OW 113
// continue ;
54364: GO 53991
// end ; end else
54366: GO 54646
// if group [ i ] in repairs then
54368: LD_VAR 0 4
54372: PUSH
54373: LD_VAR 0 7
54377: ARRAY
54378: PUSH
54379: LD_VAR 0 33
54383: IN
54384: IFFALSE 54646
// begin if IsInUnit ( group [ i ] ) then
54386: LD_VAR 0 4
54390: PUSH
54391: LD_VAR 0 7
54395: ARRAY
54396: PPUSH
54397: CALL_OW 310
54401: IFFALSE 54469
// begin z := IsInUnit ( group [ i ] ) ;
54403: LD_ADDR_VAR 0 13
54407: PUSH
54408: LD_VAR 0 4
54412: PUSH
54413: LD_VAR 0 7
54417: ARRAY
54418: PPUSH
54419: CALL_OW 310
54423: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
54424: LD_VAR 0 13
54428: PUSH
54429: LD_VAR 0 32
54433: IN
54434: PUSH
54435: LD_VAR 0 13
54439: PPUSH
54440: LD_VAR 0 22
54444: PPUSH
54445: CALL_OW 308
54449: AND
54450: IFFALSE 54467
// ComExitVehicle ( group [ i ] ) ;
54452: LD_VAR 0 4
54456: PUSH
54457: LD_VAR 0 7
54461: ARRAY
54462: PPUSH
54463: CALL_OW 121
// end else
54467: GO 54646
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
54469: LD_ADDR_VAR 0 13
54473: PUSH
54474: LD_VAR 0 4
54478: PPUSH
54479: LD_INT 95
54481: PUSH
54482: LD_VAR 0 22
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 58
54493: PUSH
54494: EMPTY
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PPUSH
54501: CALL_OW 72
54505: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
54506: LD_VAR 0 4
54510: PUSH
54511: LD_VAR 0 7
54515: ARRAY
54516: PPUSH
54517: CALL_OW 314
54521: NOT
54522: IFFALSE 54644
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
54524: LD_ADDR_VAR 0 10
54528: PUSH
54529: LD_VAR 0 13
54533: PPUSH
54534: LD_VAR 0 4
54538: PUSH
54539: LD_VAR 0 7
54543: ARRAY
54544: PPUSH
54545: CALL_OW 74
54549: ST_TO_ADDR
// if not x then
54550: LD_VAR 0 10
54554: NOT
54555: IFFALSE 54559
// continue ;
54557: GO 53991
// if GetLives ( x ) < 1000 then
54559: LD_VAR 0 10
54563: PPUSH
54564: CALL_OW 256
54568: PUSH
54569: LD_INT 1000
54571: LESS
54572: IFFALSE 54596
// ComRepairVehicle ( group [ i ] , x ) else
54574: LD_VAR 0 4
54578: PUSH
54579: LD_VAR 0 7
54583: ARRAY
54584: PPUSH
54585: LD_VAR 0 10
54589: PPUSH
54590: CALL_OW 129
54594: GO 54644
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
54596: LD_VAR 0 23
54600: PUSH
54601: LD_VAR 0 4
54605: PUSH
54606: LD_VAR 0 7
54610: ARRAY
54611: PPUSH
54612: CALL_OW 256
54616: PUSH
54617: LD_INT 1000
54619: LESS
54620: AND
54621: NOT
54622: IFFALSE 54644
// ComEnterUnit ( group [ i ] , x ) ;
54624: LD_VAR 0 4
54628: PUSH
54629: LD_VAR 0 7
54633: ARRAY
54634: PPUSH
54635: LD_VAR 0 10
54639: PPUSH
54640: CALL_OW 120
// end ; continue ;
54644: GO 53991
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
54646: LD_VAR 0 23
54650: PUSH
54651: LD_VAR 0 4
54655: PUSH
54656: LD_VAR 0 7
54660: ARRAY
54661: PPUSH
54662: CALL_OW 247
54666: PUSH
54667: LD_INT 1
54669: EQUAL
54670: AND
54671: IFFALSE 55149
// begin if group [ i ] in healers then
54673: LD_VAR 0 4
54677: PUSH
54678: LD_VAR 0 7
54682: ARRAY
54683: PUSH
54684: LD_VAR 0 31
54688: IN
54689: IFFALSE 54962
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
54691: LD_VAR 0 4
54695: PUSH
54696: LD_VAR 0 7
54700: ARRAY
54701: PPUSH
54702: LD_VAR 0 23
54706: PPUSH
54707: CALL_OW 308
54711: NOT
54712: PUSH
54713: LD_VAR 0 4
54717: PUSH
54718: LD_VAR 0 7
54722: ARRAY
54723: PPUSH
54724: CALL_OW 314
54728: NOT
54729: AND
54730: IFFALSE 54754
// ComMoveToArea ( group [ i ] , f_heal ) else
54732: LD_VAR 0 4
54736: PUSH
54737: LD_VAR 0 7
54741: ARRAY
54742: PPUSH
54743: LD_VAR 0 23
54747: PPUSH
54748: CALL_OW 113
54752: GO 54960
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
54754: LD_VAR 0 4
54758: PUSH
54759: LD_VAR 0 7
54763: ARRAY
54764: PPUSH
54765: CALL 53392 0 1
54769: PPUSH
54770: CALL_OW 256
54774: PUSH
54775: LD_INT 1000
54777: EQUAL
54778: IFFALSE 54797
// ComStop ( group [ i ] ) else
54780: LD_VAR 0 4
54784: PUSH
54785: LD_VAR 0 7
54789: ARRAY
54790: PPUSH
54791: CALL_OW 141
54795: GO 54960
// if not HasTask ( group [ i ] ) and to_heal then
54797: LD_VAR 0 4
54801: PUSH
54802: LD_VAR 0 7
54806: ARRAY
54807: PPUSH
54808: CALL_OW 314
54812: NOT
54813: PUSH
54814: LD_VAR 0 30
54818: AND
54819: IFFALSE 54960
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
54821: LD_ADDR_VAR 0 13
54825: PUSH
54826: LD_VAR 0 30
54830: PPUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 54
54836: PUSH
54837: EMPTY
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PPUSH
54844: CALL_OW 72
54848: PPUSH
54849: LD_VAR 0 4
54853: PUSH
54854: LD_VAR 0 7
54858: ARRAY
54859: PPUSH
54860: CALL_OW 74
54864: ST_TO_ADDR
// if z then
54865: LD_VAR 0 13
54869: IFFALSE 54960
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
54871: LD_INT 91
54873: PUSH
54874: LD_VAR 0 13
54878: PUSH
54879: LD_INT 10
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 81
54889: PUSH
54890: LD_VAR 0 13
54894: PPUSH
54895: CALL_OW 255
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PPUSH
54908: CALL_OW 69
54912: PUSH
54913: LD_INT 0
54915: EQUAL
54916: IFFALSE 54940
// ComHeal ( group [ i ] , z ) else
54918: LD_VAR 0 4
54922: PUSH
54923: LD_VAR 0 7
54927: ARRAY
54928: PPUSH
54929: LD_VAR 0 13
54933: PPUSH
54934: CALL_OW 128
54938: GO 54960
// ComMoveToArea ( group [ i ] , f_heal ) ;
54940: LD_VAR 0 4
54944: PUSH
54945: LD_VAR 0 7
54949: ARRAY
54950: PPUSH
54951: LD_VAR 0 23
54955: PPUSH
54956: CALL_OW 113
// end ; continue ;
54960: GO 53991
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
54962: LD_VAR 0 4
54966: PUSH
54967: LD_VAR 0 7
54971: ARRAY
54972: PPUSH
54973: CALL_OW 256
54977: PUSH
54978: LD_INT 700
54980: LESS
54981: PUSH
54982: LD_VAR 0 4
54986: PUSH
54987: LD_VAR 0 7
54991: ARRAY
54992: PUSH
54993: LD_VAR 0 30
54997: IN
54998: NOT
54999: AND
55000: IFFALSE 55024
// to_heal := to_heal union group [ i ] ;
55002: LD_ADDR_VAR 0 30
55006: PUSH
55007: LD_VAR 0 30
55011: PUSH
55012: LD_VAR 0 4
55016: PUSH
55017: LD_VAR 0 7
55021: ARRAY
55022: UNION
55023: ST_TO_ADDR
// if group [ i ] in to_heal then
55024: LD_VAR 0 4
55028: PUSH
55029: LD_VAR 0 7
55033: ARRAY
55034: PUSH
55035: LD_VAR 0 30
55039: IN
55040: IFFALSE 55149
// begin if GetLives ( group [ i ] ) = 1000 then
55042: LD_VAR 0 4
55046: PUSH
55047: LD_VAR 0 7
55051: ARRAY
55052: PPUSH
55053: CALL_OW 256
55057: PUSH
55058: LD_INT 1000
55060: EQUAL
55061: IFFALSE 55087
// to_heal := to_heal diff group [ i ] else
55063: LD_ADDR_VAR 0 30
55067: PUSH
55068: LD_VAR 0 30
55072: PUSH
55073: LD_VAR 0 4
55077: PUSH
55078: LD_VAR 0 7
55082: ARRAY
55083: DIFF
55084: ST_TO_ADDR
55085: GO 55149
// begin if not IsInArea ( group [ i ] , to_heal ) then
55087: LD_VAR 0 4
55091: PUSH
55092: LD_VAR 0 7
55096: ARRAY
55097: PPUSH
55098: LD_VAR 0 30
55102: PPUSH
55103: CALL_OW 308
55107: NOT
55108: IFFALSE 55132
// ComMoveToArea ( group [ i ] , f_heal ) else
55110: LD_VAR 0 4
55114: PUSH
55115: LD_VAR 0 7
55119: ARRAY
55120: PPUSH
55121: LD_VAR 0 23
55125: PPUSH
55126: CALL_OW 113
55130: GO 55147
// ComHold ( group [ i ] ) ;
55132: LD_VAR 0 4
55136: PUSH
55137: LD_VAR 0 7
55141: ARRAY
55142: PPUSH
55143: CALL_OW 140
// continue ;
55147: GO 53991
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
55149: LD_VAR 0 4
55153: PUSH
55154: LD_VAR 0 7
55158: ARRAY
55159: PPUSH
55160: LD_INT 10
55162: PPUSH
55163: CALL 51789 0 2
55167: NOT
55168: PUSH
55169: LD_VAR 0 16
55173: PUSH
55174: LD_VAR 0 7
55178: ARRAY
55179: PUSH
55180: EMPTY
55181: EQUAL
55182: NOT
55183: AND
55184: IFFALSE 55450
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
55186: LD_VAR 0 4
55190: PUSH
55191: LD_VAR 0 7
55195: ARRAY
55196: PPUSH
55197: CALL_OW 262
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: IN
55212: IFFALSE 55253
// if GetFuel ( group [ i ] ) < 10 then
55214: LD_VAR 0 4
55218: PUSH
55219: LD_VAR 0 7
55223: ARRAY
55224: PPUSH
55225: CALL_OW 261
55229: PUSH
55230: LD_INT 10
55232: LESS
55233: IFFALSE 55253
// SetFuel ( group [ i ] , 12 ) ;
55235: LD_VAR 0 4
55239: PUSH
55240: LD_VAR 0 7
55244: ARRAY
55245: PPUSH
55246: LD_INT 12
55248: PPUSH
55249: CALL_OW 240
// if units_path [ i ] then
55253: LD_VAR 0 16
55257: PUSH
55258: LD_VAR 0 7
55262: ARRAY
55263: IFFALSE 55448
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
55265: LD_VAR 0 4
55269: PUSH
55270: LD_VAR 0 7
55274: ARRAY
55275: PPUSH
55276: LD_VAR 0 16
55280: PUSH
55281: LD_VAR 0 7
55285: ARRAY
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: PPUSH
55295: LD_VAR 0 16
55299: PUSH
55300: LD_VAR 0 7
55304: ARRAY
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PUSH
55310: LD_INT 2
55312: ARRAY
55313: PPUSH
55314: CALL_OW 297
55318: PUSH
55319: LD_INT 6
55321: GREATER
55322: IFFALSE 55397
// begin if not HasTask ( group [ i ] ) then
55324: LD_VAR 0 4
55328: PUSH
55329: LD_VAR 0 7
55333: ARRAY
55334: PPUSH
55335: CALL_OW 314
55339: NOT
55340: IFFALSE 55395
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
55342: LD_VAR 0 4
55346: PUSH
55347: LD_VAR 0 7
55351: ARRAY
55352: PPUSH
55353: LD_VAR 0 16
55357: PUSH
55358: LD_VAR 0 7
55362: ARRAY
55363: PUSH
55364: LD_INT 1
55366: ARRAY
55367: PUSH
55368: LD_INT 1
55370: ARRAY
55371: PPUSH
55372: LD_VAR 0 16
55376: PUSH
55377: LD_VAR 0 7
55381: ARRAY
55382: PUSH
55383: LD_INT 1
55385: ARRAY
55386: PUSH
55387: LD_INT 2
55389: ARRAY
55390: PPUSH
55391: CALL_OW 114
// end else
55395: GO 55448
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
55397: LD_ADDR_VAR 0 15
55401: PUSH
55402: LD_VAR 0 16
55406: PUSH
55407: LD_VAR 0 7
55411: ARRAY
55412: PPUSH
55413: LD_INT 1
55415: PPUSH
55416: CALL_OW 3
55420: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
55421: LD_ADDR_VAR 0 16
55425: PUSH
55426: LD_VAR 0 16
55430: PPUSH
55431: LD_VAR 0 7
55435: PPUSH
55436: LD_VAR 0 15
55440: PPUSH
55441: CALL_OW 1
55445: ST_TO_ADDR
// continue ;
55446: GO 53991
// end ; end ; end else
55448: GO 58086
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
55450: LD_ADDR_VAR 0 14
55454: PUSH
55455: LD_INT 81
55457: PUSH
55458: LD_VAR 0 4
55462: PUSH
55463: LD_VAR 0 7
55467: ARRAY
55468: PPUSH
55469: CALL_OW 255
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PPUSH
55478: CALL_OW 69
55482: ST_TO_ADDR
// if not tmp then
55483: LD_VAR 0 14
55487: NOT
55488: IFFALSE 55492
// continue ;
55490: GO 53991
// if f_ignore_area then
55492: LD_VAR 0 17
55496: IFFALSE 55584
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
55498: LD_ADDR_VAR 0 15
55502: PUSH
55503: LD_VAR 0 14
55507: PPUSH
55508: LD_INT 3
55510: PUSH
55511: LD_INT 92
55513: PUSH
55514: LD_VAR 0 17
55518: PUSH
55519: LD_INT 1
55521: ARRAY
55522: PUSH
55523: LD_VAR 0 17
55527: PUSH
55528: LD_INT 2
55530: ARRAY
55531: PUSH
55532: LD_VAR 0 17
55536: PUSH
55537: LD_INT 3
55539: ARRAY
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PPUSH
55551: CALL_OW 72
55555: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
55556: LD_VAR 0 14
55560: PUSH
55561: LD_VAR 0 15
55565: DIFF
55566: IFFALSE 55584
// tmp := tmp diff tmp2 ;
55568: LD_ADDR_VAR 0 14
55572: PUSH
55573: LD_VAR 0 14
55577: PUSH
55578: LD_VAR 0 15
55582: DIFF
55583: ST_TO_ADDR
// end ; if not f_murder then
55584: LD_VAR 0 20
55588: NOT
55589: IFFALSE 55647
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
55591: LD_ADDR_VAR 0 15
55595: PUSH
55596: LD_VAR 0 14
55600: PPUSH
55601: LD_INT 3
55603: PUSH
55604: LD_INT 50
55606: PUSH
55607: EMPTY
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PPUSH
55614: CALL_OW 72
55618: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
55619: LD_VAR 0 14
55623: PUSH
55624: LD_VAR 0 15
55628: DIFF
55629: IFFALSE 55647
// tmp := tmp diff tmp2 ;
55631: LD_ADDR_VAR 0 14
55635: PUSH
55636: LD_VAR 0 14
55640: PUSH
55641: LD_VAR 0 15
55645: DIFF
55646: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
55647: LD_ADDR_VAR 0 14
55651: PUSH
55652: LD_VAR 0 4
55656: PUSH
55657: LD_VAR 0 7
55661: ARRAY
55662: PPUSH
55663: LD_VAR 0 14
55667: PPUSH
55668: LD_INT 1
55670: PPUSH
55671: LD_INT 1
55673: PPUSH
55674: CALL 25671 0 4
55678: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
55679: LD_VAR 0 4
55683: PUSH
55684: LD_VAR 0 7
55688: ARRAY
55689: PPUSH
55690: CALL_OW 257
55694: PUSH
55695: LD_INT 1
55697: EQUAL
55698: IFFALSE 56146
// begin if WantPlant ( group [ i ] ) then
55700: LD_VAR 0 4
55704: PUSH
55705: LD_VAR 0 7
55709: ARRAY
55710: PPUSH
55711: CALL 25139 0 1
55715: IFFALSE 55719
// continue ;
55717: GO 53991
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
55719: LD_VAR 0 18
55723: PUSH
55724: LD_VAR 0 4
55728: PUSH
55729: LD_VAR 0 7
55733: ARRAY
55734: PPUSH
55735: CALL_OW 310
55739: NOT
55740: AND
55741: PUSH
55742: LD_VAR 0 14
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: PUSH
55751: LD_VAR 0 14
55755: PPUSH
55756: LD_INT 21
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 58
55768: PUSH
55769: EMPTY
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PPUSH
55776: CALL_OW 72
55780: IN
55781: AND
55782: IFFALSE 55818
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
55784: LD_VAR 0 4
55788: PUSH
55789: LD_VAR 0 7
55793: ARRAY
55794: PPUSH
55795: LD_VAR 0 14
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PPUSH
55804: CALL_OW 120
// attacking := true ;
55808: LD_ADDR_VAR 0 29
55812: PUSH
55813: LD_INT 1
55815: ST_TO_ADDR
// continue ;
55816: GO 53991
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
55818: LD_VAR 0 26
55822: PUSH
55823: LD_VAR 0 4
55827: PUSH
55828: LD_VAR 0 7
55832: ARRAY
55833: PPUSH
55834: CALL_OW 257
55838: PUSH
55839: LD_INT 1
55841: EQUAL
55842: AND
55843: PUSH
55844: LD_VAR 0 4
55848: PUSH
55849: LD_VAR 0 7
55853: ARRAY
55854: PPUSH
55855: CALL_OW 256
55859: PUSH
55860: LD_INT 800
55862: LESS
55863: AND
55864: PUSH
55865: LD_VAR 0 4
55869: PUSH
55870: LD_VAR 0 7
55874: ARRAY
55875: PPUSH
55876: CALL_OW 318
55880: NOT
55881: AND
55882: IFFALSE 55899
// ComCrawl ( group [ i ] ) ;
55884: LD_VAR 0 4
55888: PUSH
55889: LD_VAR 0 7
55893: ARRAY
55894: PPUSH
55895: CALL_OW 137
// if f_mines then
55899: LD_VAR 0 21
55903: IFFALSE 56146
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
55905: LD_VAR 0 14
55909: PUSH
55910: LD_INT 1
55912: ARRAY
55913: PPUSH
55914: CALL_OW 247
55918: PUSH
55919: LD_INT 3
55921: EQUAL
55922: PUSH
55923: LD_VAR 0 14
55927: PUSH
55928: LD_INT 1
55930: ARRAY
55931: PUSH
55932: LD_VAR 0 27
55936: IN
55937: NOT
55938: AND
55939: IFFALSE 56146
// begin x := GetX ( tmp [ 1 ] ) ;
55941: LD_ADDR_VAR 0 10
55945: PUSH
55946: LD_VAR 0 14
55950: PUSH
55951: LD_INT 1
55953: ARRAY
55954: PPUSH
55955: CALL_OW 250
55959: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
55960: LD_ADDR_VAR 0 11
55964: PUSH
55965: LD_VAR 0 14
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PPUSH
55974: CALL_OW 251
55978: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
55979: LD_ADDR_VAR 0 12
55983: PUSH
55984: LD_VAR 0 4
55988: PUSH
55989: LD_VAR 0 7
55993: ARRAY
55994: PPUSH
55995: CALL 51874 0 1
55999: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
56000: LD_VAR 0 4
56004: PUSH
56005: LD_VAR 0 7
56009: ARRAY
56010: PPUSH
56011: LD_VAR 0 10
56015: PPUSH
56016: LD_VAR 0 11
56020: PPUSH
56021: LD_VAR 0 14
56025: PUSH
56026: LD_INT 1
56028: ARRAY
56029: PPUSH
56030: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
56034: LD_VAR 0 4
56038: PUSH
56039: LD_VAR 0 7
56043: ARRAY
56044: PPUSH
56045: LD_VAR 0 10
56049: PPUSH
56050: LD_VAR 0 12
56054: PPUSH
56055: LD_INT 7
56057: PPUSH
56058: CALL_OW 272
56062: PPUSH
56063: LD_VAR 0 11
56067: PPUSH
56068: LD_VAR 0 12
56072: PPUSH
56073: LD_INT 7
56075: PPUSH
56076: CALL_OW 273
56080: PPUSH
56081: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
56085: LD_VAR 0 4
56089: PUSH
56090: LD_VAR 0 7
56094: ARRAY
56095: PPUSH
56096: LD_INT 71
56098: PPUSH
56099: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
56103: LD_ADDR_VAR 0 27
56107: PUSH
56108: LD_VAR 0 27
56112: PPUSH
56113: LD_VAR 0 27
56117: PUSH
56118: LD_INT 1
56120: PLUS
56121: PPUSH
56122: LD_VAR 0 14
56126: PUSH
56127: LD_INT 1
56129: ARRAY
56130: PPUSH
56131: CALL_OW 1
56135: ST_TO_ADDR
// attacking := true ;
56136: LD_ADDR_VAR 0 29
56140: PUSH
56141: LD_INT 1
56143: ST_TO_ADDR
// continue ;
56144: GO 53991
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
56146: LD_VAR 0 4
56150: PUSH
56151: LD_VAR 0 7
56155: ARRAY
56156: PPUSH
56157: CALL_OW 257
56161: PUSH
56162: LD_INT 17
56164: EQUAL
56165: PUSH
56166: LD_VAR 0 4
56170: PUSH
56171: LD_VAR 0 7
56175: ARRAY
56176: PPUSH
56177: CALL_OW 110
56181: PUSH
56182: LD_INT 71
56184: EQUAL
56185: NOT
56186: AND
56187: IFFALSE 56333
// begin attacking := false ;
56189: LD_ADDR_VAR 0 29
56193: PUSH
56194: LD_INT 0
56196: ST_TO_ADDR
// k := 5 ;
56197: LD_ADDR_VAR 0 9
56201: PUSH
56202: LD_INT 5
56204: ST_TO_ADDR
// if tmp < k then
56205: LD_VAR 0 14
56209: PUSH
56210: LD_VAR 0 9
56214: LESS
56215: IFFALSE 56227
// k := tmp ;
56217: LD_ADDR_VAR 0 9
56221: PUSH
56222: LD_VAR 0 14
56226: ST_TO_ADDR
// for j = 1 to k do
56227: LD_ADDR_VAR 0 8
56231: PUSH
56232: DOUBLE
56233: LD_INT 1
56235: DEC
56236: ST_TO_ADDR
56237: LD_VAR 0 9
56241: PUSH
56242: FOR_TO
56243: IFFALSE 56331
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
56245: LD_VAR 0 14
56249: PUSH
56250: LD_VAR 0 8
56254: ARRAY
56255: PUSH
56256: LD_VAR 0 14
56260: PPUSH
56261: LD_INT 58
56263: PUSH
56264: EMPTY
56265: LIST
56266: PPUSH
56267: CALL_OW 72
56271: IN
56272: NOT
56273: IFFALSE 56329
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
56275: LD_VAR 0 4
56279: PUSH
56280: LD_VAR 0 7
56284: ARRAY
56285: PPUSH
56286: LD_VAR 0 14
56290: PUSH
56291: LD_VAR 0 8
56295: ARRAY
56296: PPUSH
56297: CALL_OW 115
// attacking := true ;
56301: LD_ADDR_VAR 0 29
56305: PUSH
56306: LD_INT 1
56308: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
56309: LD_VAR 0 4
56313: PUSH
56314: LD_VAR 0 7
56318: ARRAY
56319: PPUSH
56320: LD_INT 71
56322: PPUSH
56323: CALL_OW 109
// continue ;
56327: GO 56242
// end ; end ;
56329: GO 56242
56331: POP
56332: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
56333: LD_VAR 0 4
56337: PUSH
56338: LD_VAR 0 7
56342: ARRAY
56343: PPUSH
56344: CALL_OW 257
56348: PUSH
56349: LD_INT 8
56351: EQUAL
56352: PUSH
56353: LD_VAR 0 4
56357: PUSH
56358: LD_VAR 0 7
56362: ARRAY
56363: PPUSH
56364: CALL_OW 264
56368: PUSH
56369: LD_INT 28
56371: PUSH
56372: LD_INT 45
56374: PUSH
56375: LD_INT 7
56377: PUSH
56378: LD_INT 47
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: IN
56387: OR
56388: IFFALSE 56618
// begin attacking := false ;
56390: LD_ADDR_VAR 0 29
56394: PUSH
56395: LD_INT 0
56397: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
56398: LD_VAR 0 14
56402: PUSH
56403: LD_INT 1
56405: ARRAY
56406: PPUSH
56407: CALL_OW 266
56411: PUSH
56412: LD_INT 32
56414: PUSH
56415: LD_INT 31
56417: PUSH
56418: LD_INT 33
56420: PUSH
56421: LD_INT 4
56423: PUSH
56424: LD_INT 5
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: IN
56434: IFFALSE 56618
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
56436: LD_ADDR_VAR 0 9
56440: PUSH
56441: LD_VAR 0 14
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PPUSH
56450: CALL_OW 266
56454: PPUSH
56455: LD_VAR 0 14
56459: PUSH
56460: LD_INT 1
56462: ARRAY
56463: PPUSH
56464: CALL_OW 250
56468: PPUSH
56469: LD_VAR 0 14
56473: PUSH
56474: LD_INT 1
56476: ARRAY
56477: PPUSH
56478: CALL_OW 251
56482: PPUSH
56483: LD_VAR 0 14
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PPUSH
56492: CALL_OW 254
56496: PPUSH
56497: LD_VAR 0 14
56501: PUSH
56502: LD_INT 1
56504: ARRAY
56505: PPUSH
56506: CALL_OW 248
56510: PPUSH
56511: LD_INT 0
56513: PPUSH
56514: CALL 33250 0 6
56518: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
56519: LD_ADDR_VAR 0 8
56523: PUSH
56524: LD_VAR 0 4
56528: PUSH
56529: LD_VAR 0 7
56533: ARRAY
56534: PPUSH
56535: LD_VAR 0 9
56539: PPUSH
56540: CALL 51937 0 2
56544: ST_TO_ADDR
// if j then
56545: LD_VAR 0 8
56549: IFFALSE 56618
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56551: LD_VAR 0 8
56555: PUSH
56556: LD_INT 1
56558: ARRAY
56559: PPUSH
56560: LD_VAR 0 8
56564: PUSH
56565: LD_INT 2
56567: ARRAY
56568: PPUSH
56569: CALL_OW 488
56573: IFFALSE 56618
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
56575: LD_VAR 0 4
56579: PUSH
56580: LD_VAR 0 7
56584: ARRAY
56585: PPUSH
56586: LD_VAR 0 8
56590: PUSH
56591: LD_INT 1
56593: ARRAY
56594: PPUSH
56595: LD_VAR 0 8
56599: PUSH
56600: LD_INT 2
56602: ARRAY
56603: PPUSH
56604: CALL_OW 116
// attacking := true ;
56608: LD_ADDR_VAR 0 29
56612: PUSH
56613: LD_INT 1
56615: ST_TO_ADDR
// continue ;
56616: GO 53991
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
56618: LD_VAR 0 4
56622: PUSH
56623: LD_VAR 0 7
56627: ARRAY
56628: PPUSH
56629: CALL_OW 265
56633: PUSH
56634: LD_INT 11
56636: EQUAL
56637: IFFALSE 56915
// begin k := 10 ;
56639: LD_ADDR_VAR 0 9
56643: PUSH
56644: LD_INT 10
56646: ST_TO_ADDR
// x := 0 ;
56647: LD_ADDR_VAR 0 10
56651: PUSH
56652: LD_INT 0
56654: ST_TO_ADDR
// if tmp < k then
56655: LD_VAR 0 14
56659: PUSH
56660: LD_VAR 0 9
56664: LESS
56665: IFFALSE 56677
// k := tmp ;
56667: LD_ADDR_VAR 0 9
56671: PUSH
56672: LD_VAR 0 14
56676: ST_TO_ADDR
// for j = k downto 1 do
56677: LD_ADDR_VAR 0 8
56681: PUSH
56682: DOUBLE
56683: LD_VAR 0 9
56687: INC
56688: ST_TO_ADDR
56689: LD_INT 1
56691: PUSH
56692: FOR_DOWNTO
56693: IFFALSE 56768
// begin if GetType ( tmp [ j ] ) = unit_human then
56695: LD_VAR 0 14
56699: PUSH
56700: LD_VAR 0 8
56704: ARRAY
56705: PPUSH
56706: CALL_OW 247
56710: PUSH
56711: LD_INT 1
56713: EQUAL
56714: IFFALSE 56766
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
56716: LD_VAR 0 4
56720: PUSH
56721: LD_VAR 0 7
56725: ARRAY
56726: PPUSH
56727: LD_VAR 0 14
56731: PUSH
56732: LD_VAR 0 8
56736: ARRAY
56737: PPUSH
56738: CALL 52208 0 2
// x := tmp [ j ] ;
56742: LD_ADDR_VAR 0 10
56746: PUSH
56747: LD_VAR 0 14
56751: PUSH
56752: LD_VAR 0 8
56756: ARRAY
56757: ST_TO_ADDR
// attacking := true ;
56758: LD_ADDR_VAR 0 29
56762: PUSH
56763: LD_INT 1
56765: ST_TO_ADDR
// end ; end ;
56766: GO 56692
56768: POP
56769: POP
// if not x then
56770: LD_VAR 0 10
56774: NOT
56775: IFFALSE 56915
// begin attacking := true ;
56777: LD_ADDR_VAR 0 29
56781: PUSH
56782: LD_INT 1
56784: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
56785: LD_VAR 0 4
56789: PUSH
56790: LD_VAR 0 7
56794: ARRAY
56795: PPUSH
56796: CALL_OW 250
56800: PPUSH
56801: LD_VAR 0 4
56805: PUSH
56806: LD_VAR 0 7
56810: ARRAY
56811: PPUSH
56812: CALL_OW 251
56816: PPUSH
56817: CALL_OW 546
56821: PUSH
56822: LD_INT 2
56824: ARRAY
56825: PUSH
56826: LD_VAR 0 14
56830: PUSH
56831: LD_INT 1
56833: ARRAY
56834: PPUSH
56835: CALL_OW 250
56839: PPUSH
56840: LD_VAR 0 14
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: PPUSH
56849: CALL_OW 251
56853: PPUSH
56854: CALL_OW 546
56858: PUSH
56859: LD_INT 2
56861: ARRAY
56862: EQUAL
56863: IFFALSE 56891
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
56865: LD_VAR 0 4
56869: PUSH
56870: LD_VAR 0 7
56874: ARRAY
56875: PPUSH
56876: LD_VAR 0 14
56880: PUSH
56881: LD_INT 1
56883: ARRAY
56884: PPUSH
56885: CALL 52208 0 2
56889: GO 56915
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
56891: LD_VAR 0 4
56895: PUSH
56896: LD_VAR 0 7
56900: ARRAY
56901: PPUSH
56902: LD_VAR 0 14
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
56915: LD_VAR 0 4
56919: PUSH
56920: LD_VAR 0 7
56924: ARRAY
56925: PPUSH
56926: CALL_OW 264
56930: PUSH
56931: LD_INT 29
56933: EQUAL
56934: IFFALSE 57300
// begin if WantsToAttack ( group [ i ] ) in bombed then
56936: LD_VAR 0 4
56940: PUSH
56941: LD_VAR 0 7
56945: ARRAY
56946: PPUSH
56947: CALL_OW 319
56951: PUSH
56952: LD_VAR 0 28
56956: IN
56957: IFFALSE 56961
// continue ;
56959: GO 53991
// k := 8 ;
56961: LD_ADDR_VAR 0 9
56965: PUSH
56966: LD_INT 8
56968: ST_TO_ADDR
// x := 0 ;
56969: LD_ADDR_VAR 0 10
56973: PUSH
56974: LD_INT 0
56976: ST_TO_ADDR
// if tmp < k then
56977: LD_VAR 0 14
56981: PUSH
56982: LD_VAR 0 9
56986: LESS
56987: IFFALSE 56999
// k := tmp ;
56989: LD_ADDR_VAR 0 9
56993: PUSH
56994: LD_VAR 0 14
56998: ST_TO_ADDR
// for j = 1 to k do
56999: LD_ADDR_VAR 0 8
57003: PUSH
57004: DOUBLE
57005: LD_INT 1
57007: DEC
57008: ST_TO_ADDR
57009: LD_VAR 0 9
57013: PUSH
57014: FOR_TO
57015: IFFALSE 57147
// begin if GetType ( tmp [ j ] ) = unit_building then
57017: LD_VAR 0 14
57021: PUSH
57022: LD_VAR 0 8
57026: ARRAY
57027: PPUSH
57028: CALL_OW 247
57032: PUSH
57033: LD_INT 3
57035: EQUAL
57036: IFFALSE 57145
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
57038: LD_VAR 0 14
57042: PUSH
57043: LD_VAR 0 8
57047: ARRAY
57048: PUSH
57049: LD_VAR 0 28
57053: IN
57054: NOT
57055: PUSH
57056: LD_VAR 0 14
57060: PUSH
57061: LD_VAR 0 8
57065: ARRAY
57066: PPUSH
57067: CALL_OW 313
57071: AND
57072: IFFALSE 57145
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57074: LD_VAR 0 4
57078: PUSH
57079: LD_VAR 0 7
57083: ARRAY
57084: PPUSH
57085: LD_VAR 0 14
57089: PUSH
57090: LD_VAR 0 8
57094: ARRAY
57095: PPUSH
57096: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
57100: LD_ADDR_VAR 0 28
57104: PUSH
57105: LD_VAR 0 28
57109: PPUSH
57110: LD_VAR 0 28
57114: PUSH
57115: LD_INT 1
57117: PLUS
57118: PPUSH
57119: LD_VAR 0 14
57123: PUSH
57124: LD_VAR 0 8
57128: ARRAY
57129: PPUSH
57130: CALL_OW 1
57134: ST_TO_ADDR
// attacking := true ;
57135: LD_ADDR_VAR 0 29
57139: PUSH
57140: LD_INT 1
57142: ST_TO_ADDR
// break ;
57143: GO 57147
// end ; end ;
57145: GO 57014
57147: POP
57148: POP
// if not attacking and f_attack_depot then
57149: LD_VAR 0 29
57153: NOT
57154: PUSH
57155: LD_VAR 0 25
57159: AND
57160: IFFALSE 57255
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57162: LD_ADDR_VAR 0 13
57166: PUSH
57167: LD_VAR 0 14
57171: PPUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 30
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 30
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: PPUSH
57200: CALL_OW 72
57204: ST_TO_ADDR
// if z then
57205: LD_VAR 0 13
57209: IFFALSE 57255
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
57211: LD_VAR 0 4
57215: PUSH
57216: LD_VAR 0 7
57220: ARRAY
57221: PPUSH
57222: LD_VAR 0 13
57226: PPUSH
57227: LD_VAR 0 4
57231: PUSH
57232: LD_VAR 0 7
57236: ARRAY
57237: PPUSH
57238: CALL_OW 74
57242: PPUSH
57243: CALL_OW 115
// attacking := true ;
57247: LD_ADDR_VAR 0 29
57251: PUSH
57252: LD_INT 1
57254: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
57255: LD_VAR 0 4
57259: PUSH
57260: LD_VAR 0 7
57264: ARRAY
57265: PPUSH
57266: CALL_OW 256
57270: PUSH
57271: LD_INT 500
57273: LESS
57274: IFFALSE 57300
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
57276: LD_VAR 0 4
57280: PUSH
57281: LD_VAR 0 7
57285: ARRAY
57286: PPUSH
57287: LD_VAR 0 14
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: PPUSH
57296: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
57300: LD_VAR 0 4
57304: PUSH
57305: LD_VAR 0 7
57309: ARRAY
57310: PPUSH
57311: CALL_OW 264
57315: PUSH
57316: LD_INT 49
57318: EQUAL
57319: IFFALSE 57440
// begin if not HasTask ( group [ i ] ) then
57321: LD_VAR 0 4
57325: PUSH
57326: LD_VAR 0 7
57330: ARRAY
57331: PPUSH
57332: CALL_OW 314
57336: NOT
57337: IFFALSE 57440
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
57339: LD_ADDR_VAR 0 9
57343: PUSH
57344: LD_INT 81
57346: PUSH
57347: LD_VAR 0 4
57351: PUSH
57352: LD_VAR 0 7
57356: ARRAY
57357: PPUSH
57358: CALL_OW 255
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PPUSH
57367: CALL_OW 69
57371: PPUSH
57372: LD_VAR 0 4
57376: PUSH
57377: LD_VAR 0 7
57381: ARRAY
57382: PPUSH
57383: CALL_OW 74
57387: ST_TO_ADDR
// if k then
57388: LD_VAR 0 9
57392: IFFALSE 57440
// if GetDistUnits ( group [ i ] , k ) > 10 then
57394: LD_VAR 0 4
57398: PUSH
57399: LD_VAR 0 7
57403: ARRAY
57404: PPUSH
57405: LD_VAR 0 9
57409: PPUSH
57410: CALL_OW 296
57414: PUSH
57415: LD_INT 10
57417: GREATER
57418: IFFALSE 57440
// ComMoveUnit ( group [ i ] , k ) ;
57420: LD_VAR 0 4
57424: PUSH
57425: LD_VAR 0 7
57429: ARRAY
57430: PPUSH
57431: LD_VAR 0 9
57435: PPUSH
57436: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57440: LD_VAR 0 4
57444: PUSH
57445: LD_VAR 0 7
57449: ARRAY
57450: PPUSH
57451: CALL_OW 256
57455: PUSH
57456: LD_INT 250
57458: LESS
57459: PUSH
57460: LD_VAR 0 4
57464: PUSH
57465: LD_VAR 0 7
57469: ARRAY
57470: PUSH
57471: LD_INT 21
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 23
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: IN
57500: AND
57501: IFFALSE 57626
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
57503: LD_ADDR_VAR 0 9
57507: PUSH
57508: LD_OWVAR 3
57512: PUSH
57513: LD_VAR 0 4
57517: PUSH
57518: LD_VAR 0 7
57522: ARRAY
57523: DIFF
57524: PPUSH
57525: LD_VAR 0 4
57529: PUSH
57530: LD_VAR 0 7
57534: ARRAY
57535: PPUSH
57536: CALL_OW 74
57540: ST_TO_ADDR
// if not k then
57541: LD_VAR 0 9
57545: NOT
57546: IFFALSE 57550
// continue ;
57548: GO 53991
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
57550: LD_VAR 0 9
57554: PUSH
57555: LD_INT 81
57557: PUSH
57558: LD_VAR 0 4
57562: PUSH
57563: LD_VAR 0 7
57567: ARRAY
57568: PPUSH
57569: CALL_OW 255
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PPUSH
57578: CALL_OW 69
57582: IN
57583: PUSH
57584: LD_VAR 0 9
57588: PPUSH
57589: LD_VAR 0 4
57593: PUSH
57594: LD_VAR 0 7
57598: ARRAY
57599: PPUSH
57600: CALL_OW 296
57604: PUSH
57605: LD_INT 5
57607: LESS
57608: AND
57609: IFFALSE 57626
// ComAutodestruct ( group [ i ] ) ;
57611: LD_VAR 0 4
57615: PUSH
57616: LD_VAR 0 7
57620: ARRAY
57621: PPUSH
57622: CALL 52106 0 1
// end ; if f_attack_depot then
57626: LD_VAR 0 25
57630: IFFALSE 57742
// begin k := 6 ;
57632: LD_ADDR_VAR 0 9
57636: PUSH
57637: LD_INT 6
57639: ST_TO_ADDR
// if tmp < k then
57640: LD_VAR 0 14
57644: PUSH
57645: LD_VAR 0 9
57649: LESS
57650: IFFALSE 57662
// k := tmp ;
57652: LD_ADDR_VAR 0 9
57656: PUSH
57657: LD_VAR 0 14
57661: ST_TO_ADDR
// for j = 1 to k do
57662: LD_ADDR_VAR 0 8
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_VAR 0 9
57676: PUSH
57677: FOR_TO
57678: IFFALSE 57740
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
57680: LD_VAR 0 8
57684: PPUSH
57685: CALL_OW 266
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: IN
57700: IFFALSE 57738
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57702: LD_VAR 0 4
57706: PUSH
57707: LD_VAR 0 7
57711: ARRAY
57712: PPUSH
57713: LD_VAR 0 14
57717: PUSH
57718: LD_VAR 0 8
57722: ARRAY
57723: PPUSH
57724: CALL_OW 115
// attacking := true ;
57728: LD_ADDR_VAR 0 29
57732: PUSH
57733: LD_INT 1
57735: ST_TO_ADDR
// break ;
57736: GO 57740
// end ;
57738: GO 57677
57740: POP
57741: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
57742: LD_VAR 0 4
57746: PUSH
57747: LD_VAR 0 7
57751: ARRAY
57752: PPUSH
57753: CALL_OW 302
57757: PUSH
57758: LD_VAR 0 29
57762: NOT
57763: AND
57764: IFFALSE 58086
// begin if GetTag ( group [ i ] ) = 71 then
57766: LD_VAR 0 4
57770: PUSH
57771: LD_VAR 0 7
57775: ARRAY
57776: PPUSH
57777: CALL_OW 110
57781: PUSH
57782: LD_INT 71
57784: EQUAL
57785: IFFALSE 57826
// begin if HasTask ( group [ i ] ) then
57787: LD_VAR 0 4
57791: PUSH
57792: LD_VAR 0 7
57796: ARRAY
57797: PPUSH
57798: CALL_OW 314
57802: IFFALSE 57808
// continue else
57804: GO 53991
57806: GO 57826
// SetTag ( group [ i ] , 0 ) ;
57808: LD_VAR 0 4
57812: PUSH
57813: LD_VAR 0 7
57817: ARRAY
57818: PPUSH
57819: LD_INT 0
57821: PPUSH
57822: CALL_OW 109
// end ; k := 8 ;
57826: LD_ADDR_VAR 0 9
57830: PUSH
57831: LD_INT 8
57833: ST_TO_ADDR
// x := 0 ;
57834: LD_ADDR_VAR 0 10
57838: PUSH
57839: LD_INT 0
57841: ST_TO_ADDR
// if tmp < k then
57842: LD_VAR 0 14
57846: PUSH
57847: LD_VAR 0 9
57851: LESS
57852: IFFALSE 57864
// k := tmp ;
57854: LD_ADDR_VAR 0 9
57858: PUSH
57859: LD_VAR 0 14
57863: ST_TO_ADDR
// for j = 1 to k do
57864: LD_ADDR_VAR 0 8
57868: PUSH
57869: DOUBLE
57870: LD_INT 1
57872: DEC
57873: ST_TO_ADDR
57874: LD_VAR 0 9
57878: PUSH
57879: FOR_TO
57880: IFFALSE 57978
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
57882: LD_VAR 0 14
57886: PUSH
57887: LD_VAR 0 8
57891: ARRAY
57892: PPUSH
57893: CALL_OW 247
57897: PUSH
57898: LD_INT 1
57900: EQUAL
57901: PUSH
57902: LD_VAR 0 14
57906: PUSH
57907: LD_VAR 0 8
57911: ARRAY
57912: PPUSH
57913: CALL_OW 256
57917: PUSH
57918: LD_INT 250
57920: LESS
57921: PUSH
57922: LD_VAR 0 20
57926: AND
57927: PUSH
57928: LD_VAR 0 20
57932: NOT
57933: PUSH
57934: LD_VAR 0 14
57938: PUSH
57939: LD_VAR 0 8
57943: ARRAY
57944: PPUSH
57945: CALL_OW 256
57949: PUSH
57950: LD_INT 250
57952: GREATEREQUAL
57953: AND
57954: OR
57955: AND
57956: IFFALSE 57976
// begin x := tmp [ j ] ;
57958: LD_ADDR_VAR 0 10
57962: PUSH
57963: LD_VAR 0 14
57967: PUSH
57968: LD_VAR 0 8
57972: ARRAY
57973: ST_TO_ADDR
// break ;
57974: GO 57978
// end ;
57976: GO 57879
57978: POP
57979: POP
// if x then
57980: LD_VAR 0 10
57984: IFFALSE 58008
// ComAttackUnit ( group [ i ] , x ) else
57986: LD_VAR 0 4
57990: PUSH
57991: LD_VAR 0 7
57995: ARRAY
57996: PPUSH
57997: LD_VAR 0 10
58001: PPUSH
58002: CALL_OW 115
58006: GO 58032
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58008: LD_VAR 0 4
58012: PUSH
58013: LD_VAR 0 7
58017: ARRAY
58018: PPUSH
58019: LD_VAR 0 14
58023: PUSH
58024: LD_INT 1
58026: ARRAY
58027: PPUSH
58028: CALL_OW 115
// if not HasTask ( group [ i ] ) then
58032: LD_VAR 0 4
58036: PUSH
58037: LD_VAR 0 7
58041: ARRAY
58042: PPUSH
58043: CALL_OW 314
58047: NOT
58048: IFFALSE 58086
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
58050: LD_VAR 0 4
58054: PUSH
58055: LD_VAR 0 7
58059: ARRAY
58060: PPUSH
58061: LD_VAR 0 14
58065: PPUSH
58066: LD_VAR 0 4
58070: PUSH
58071: LD_VAR 0 7
58075: ARRAY
58076: PPUSH
58077: CALL_OW 74
58081: PPUSH
58082: CALL_OW 115
// end ; end ; end ;
58086: GO 53991
58088: POP
58089: POP
// wait ( 0 0$1 ) ;
58090: LD_INT 35
58092: PPUSH
58093: CALL_OW 67
// until group = [ ] ;
58097: LD_VAR 0 4
58101: PUSH
58102: EMPTY
58103: EQUAL
58104: IFFALSE 53976
// end ;
58106: LD_VAR 0 2
58110: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58111: LD_INT 0
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
// if not base_units then
58117: LD_VAR 0 1
58121: NOT
58122: IFFALSE 58126
// exit ;
58124: GO 58213
// result := false ;
58126: LD_ADDR_VAR 0 2
58130: PUSH
58131: LD_INT 0
58133: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58134: LD_ADDR_VAR 0 5
58138: PUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: LD_INT 21
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PPUSH
58154: CALL_OW 72
58158: ST_TO_ADDR
// if not tmp then
58159: LD_VAR 0 5
58163: NOT
58164: IFFALSE 58168
// exit ;
58166: GO 58213
// for i in tmp do
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 5
58177: PUSH
58178: FOR_IN
58179: IFFALSE 58211
// begin result := EnemyInRange ( i , 22 ) ;
58181: LD_ADDR_VAR 0 2
58185: PUSH
58186: LD_VAR 0 3
58190: PPUSH
58191: LD_INT 22
58193: PPUSH
58194: CALL 51789 0 2
58198: ST_TO_ADDR
// if result then
58199: LD_VAR 0 2
58203: IFFALSE 58209
// exit ;
58205: POP
58206: POP
58207: GO 58213
// end ;
58209: GO 58178
58211: POP
58212: POP
// end ;
58213: LD_VAR 0 2
58217: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
// if not units then
58222: LD_VAR 0 1
58226: NOT
58227: IFFALSE 58231
// exit ;
58229: GO 58301
// result := [ ] ;
58231: LD_ADDR_VAR 0 3
58235: PUSH
58236: EMPTY
58237: ST_TO_ADDR
// for i in units do
58238: LD_ADDR_VAR 0 4
58242: PUSH
58243: LD_VAR 0 1
58247: PUSH
58248: FOR_IN
58249: IFFALSE 58299
// if GetTag ( i ) = tag then
58251: LD_VAR 0 4
58255: PPUSH
58256: CALL_OW 110
58260: PUSH
58261: LD_VAR 0 2
58265: EQUAL
58266: IFFALSE 58297
// result := Insert ( result , result + 1 , i ) ;
58268: LD_ADDR_VAR 0 3
58272: PUSH
58273: LD_VAR 0 3
58277: PPUSH
58278: LD_VAR 0 3
58282: PUSH
58283: LD_INT 1
58285: PLUS
58286: PPUSH
58287: LD_VAR 0 4
58291: PPUSH
58292: CALL_OW 2
58296: ST_TO_ADDR
58297: GO 58248
58299: POP
58300: POP
// end ;
58301: LD_VAR 0 3
58305: RET
// export function IsDriver ( un ) ; begin
58306: LD_INT 0
58308: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58309: LD_ADDR_VAR 0 2
58313: PUSH
58314: LD_VAR 0 1
58318: PUSH
58319: LD_INT 55
58321: PUSH
58322: EMPTY
58323: LIST
58324: PPUSH
58325: CALL_OW 69
58329: IN
58330: ST_TO_ADDR
// end ;
58331: LD_VAR 0 2
58335: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58336: LD_INT 0
58338: PPUSH
58339: PPUSH
// list := [ ] ;
58340: LD_ADDR_VAR 0 5
58344: PUSH
58345: EMPTY
58346: ST_TO_ADDR
// case d of 0 :
58347: LD_VAR 0 3
58351: PUSH
58352: LD_INT 0
58354: DOUBLE
58355: EQUAL
58356: IFTRUE 58360
58358: GO 58493
58360: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58361: LD_ADDR_VAR 0 5
58365: PUSH
58366: LD_VAR 0 1
58370: PUSH
58371: LD_INT 4
58373: MINUS
58374: PUSH
58375: LD_VAR 0 2
58379: PUSH
58380: LD_INT 4
58382: MINUS
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: PUSH
58392: LD_VAR 0 1
58396: PUSH
58397: LD_INT 3
58399: MINUS
58400: PUSH
58401: LD_VAR 0 2
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: PUSH
58414: LD_VAR 0 1
58418: PUSH
58419: LD_INT 4
58421: PLUS
58422: PUSH
58423: LD_VAR 0 2
58427: PUSH
58428: LD_INT 4
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: PUSH
58436: LD_VAR 0 1
58440: PUSH
58441: LD_INT 3
58443: PLUS
58444: PUSH
58445: LD_VAR 0 2
58449: PUSH
58450: LD_INT 3
58452: PLUS
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: PUSH
58462: LD_VAR 0 1
58466: PUSH
58467: LD_VAR 0 2
58471: PUSH
58472: LD_INT 4
58474: PLUS
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// end ; 1 :
58491: GO 59191
58493: LD_INT 1
58495: DOUBLE
58496: EQUAL
58497: IFTRUE 58501
58499: GO 58634
58501: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58502: LD_ADDR_VAR 0 5
58506: PUSH
58507: LD_VAR 0 1
58511: PUSH
58512: LD_VAR 0 2
58516: PUSH
58517: LD_INT 4
58519: MINUS
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: PUSH
58529: LD_VAR 0 1
58533: PUSH
58534: LD_INT 3
58536: MINUS
58537: PUSH
58538: LD_VAR 0 2
58542: PUSH
58543: LD_INT 3
58545: MINUS
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: PUSH
58555: LD_VAR 0 1
58559: PUSH
58560: LD_INT 4
58562: MINUS
58563: PUSH
58564: LD_VAR 0 2
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 1
58581: PUSH
58582: LD_VAR 0 2
58586: PUSH
58587: LD_INT 3
58589: PLUS
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: LD_VAR 0 1
58603: PUSH
58604: LD_INT 4
58606: PLUS
58607: PUSH
58608: LD_VAR 0 2
58612: PUSH
58613: LD_INT 4
58615: PLUS
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// end ; 2 :
58632: GO 59191
58634: LD_INT 2
58636: DOUBLE
58637: EQUAL
58638: IFTRUE 58642
58640: GO 58771
58642: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58643: LD_ADDR_VAR 0 5
58647: PUSH
58648: LD_VAR 0 1
58652: PUSH
58653: LD_VAR 0 2
58657: PUSH
58658: LD_INT 3
58660: MINUS
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_INT 4
58677: PLUS
58678: PUSH
58679: LD_VAR 0 2
58683: PUSH
58684: LD_INT 4
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: LD_VAR 0 2
58701: PUSH
58702: LD_INT 4
58704: PLUS
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 3
58721: MINUS
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_INT 4
58743: MINUS
58744: PUSH
58745: LD_VAR 0 2
58749: PUSH
58750: LD_INT 4
58752: MINUS
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// end ; 3 :
58769: GO 59191
58771: LD_INT 3
58773: DOUBLE
58774: EQUAL
58775: IFTRUE 58779
58777: GO 58912
58779: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58780: LD_ADDR_VAR 0 5
58784: PUSH
58785: LD_VAR 0 1
58789: PUSH
58790: LD_INT 3
58792: PLUS
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_INT 4
58814: PLUS
58815: PUSH
58816: LD_VAR 0 2
58820: PUSH
58821: LD_INT 4
58823: PLUS
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: PUSH
58833: LD_VAR 0 1
58837: PUSH
58838: LD_INT 4
58840: MINUS
58841: PUSH
58842: LD_VAR 0 2
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 4
58867: MINUS
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 1
58881: PUSH
58882: LD_INT 3
58884: MINUS
58885: PUSH
58886: LD_VAR 0 2
58890: PUSH
58891: LD_INT 3
58893: MINUS
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: ST_TO_ADDR
// end ; 4 :
58910: GO 59191
58912: LD_INT 4
58914: DOUBLE
58915: EQUAL
58916: IFTRUE 58920
58918: GO 59053
58920: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58921: LD_ADDR_VAR 0 5
58925: PUSH
58926: LD_VAR 0 1
58930: PUSH
58931: LD_VAR 0 2
58935: PUSH
58936: LD_INT 4
58938: PLUS
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: PUSH
58948: LD_VAR 0 1
58952: PUSH
58953: LD_INT 3
58955: PLUS
58956: PUSH
58957: LD_VAR 0 2
58961: PUSH
58962: LD_INT 3
58964: PLUS
58965: PUSH
58966: LD_INT 5
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: PUSH
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 4
58981: PLUS
58982: PUSH
58983: LD_VAR 0 2
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: PUSH
58996: LD_VAR 0 1
59000: PUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 3
59008: MINUS
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: LD_VAR 0 1
59022: PUSH
59023: LD_INT 4
59025: MINUS
59026: PUSH
59027: LD_VAR 0 2
59031: PUSH
59032: LD_INT 4
59034: MINUS
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// end ; 5 :
59051: GO 59191
59053: LD_INT 5
59055: DOUBLE
59056: EQUAL
59057: IFTRUE 59061
59059: GO 59190
59061: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59062: LD_ADDR_VAR 0 5
59066: PUSH
59067: LD_VAR 0 1
59071: PUSH
59072: LD_INT 4
59074: MINUS
59075: PUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: PUSH
59089: LD_VAR 0 1
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 4
59101: MINUS
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: LD_VAR 0 1
59115: PUSH
59116: LD_INT 4
59118: PLUS
59119: PUSH
59120: LD_VAR 0 2
59124: PUSH
59125: LD_INT 4
59127: PLUS
59128: PUSH
59129: LD_INT 5
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: PUSH
59137: LD_VAR 0 1
59141: PUSH
59142: LD_INT 3
59144: PLUS
59145: PUSH
59146: LD_VAR 0 2
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: PUSH
59159: LD_VAR 0 1
59163: PUSH
59164: LD_VAR 0 2
59168: PUSH
59169: LD_INT 3
59171: PLUS
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// end ; end ;
59188: GO 59191
59190: POP
// result := list ;
59191: LD_ADDR_VAR 0 4
59195: PUSH
59196: LD_VAR 0 5
59200: ST_TO_ADDR
// end ;
59201: LD_VAR 0 4
59205: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59206: LD_INT 0
59208: PPUSH
59209: PPUSH
59210: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59211: LD_VAR 0 1
59215: NOT
59216: PUSH
59217: LD_VAR 0 2
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 4
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: IN
59240: NOT
59241: OR
59242: IFFALSE 59246
// exit ;
59244: GO 59338
// tmp := [ ] ;
59246: LD_ADDR_VAR 0 5
59250: PUSH
59251: EMPTY
59252: ST_TO_ADDR
// for i in units do
59253: LD_ADDR_VAR 0 4
59257: PUSH
59258: LD_VAR 0 1
59262: PUSH
59263: FOR_IN
59264: IFFALSE 59307
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59266: LD_ADDR_VAR 0 5
59270: PUSH
59271: LD_VAR 0 5
59275: PPUSH
59276: LD_VAR 0 5
59280: PUSH
59281: LD_INT 1
59283: PLUS
59284: PPUSH
59285: LD_VAR 0 4
59289: PPUSH
59290: LD_VAR 0 2
59294: PPUSH
59295: CALL_OW 259
59299: PPUSH
59300: CALL_OW 2
59304: ST_TO_ADDR
59305: GO 59263
59307: POP
59308: POP
// if not tmp then
59309: LD_VAR 0 5
59313: NOT
59314: IFFALSE 59318
// exit ;
59316: GO 59338
// result := SortListByListDesc ( units , tmp ) ;
59318: LD_ADDR_VAR 0 3
59322: PUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: LD_VAR 0 5
59332: PPUSH
59333: CALL_OW 77
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 3
59342: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
59347: PPUSH
// x := GetX ( building ) ;
59348: LD_ADDR_VAR 0 4
59352: PUSH
59353: LD_VAR 0 2
59357: PPUSH
59358: CALL_OW 250
59362: ST_TO_ADDR
// y := GetY ( building ) ;
59363: LD_ADDR_VAR 0 5
59367: PUSH
59368: LD_VAR 0 2
59372: PPUSH
59373: CALL_OW 251
59377: ST_TO_ADDR
// if GetTaskList ( unit ) then
59378: LD_VAR 0 1
59382: PPUSH
59383: CALL_OW 437
59387: IFFALSE 59482
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59389: LD_STRING e
59391: PUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 437
59401: PUSH
59402: LD_INT 1
59404: ARRAY
59405: PUSH
59406: LD_INT 1
59408: ARRAY
59409: EQUAL
59410: PUSH
59411: LD_VAR 0 4
59415: PUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL_OW 437
59425: PUSH
59426: LD_INT 1
59428: ARRAY
59429: PUSH
59430: LD_INT 2
59432: ARRAY
59433: EQUAL
59434: AND
59435: PUSH
59436: LD_VAR 0 5
59440: PUSH
59441: LD_VAR 0 1
59445: PPUSH
59446: CALL_OW 437
59450: PUSH
59451: LD_INT 1
59453: ARRAY
59454: PUSH
59455: LD_INT 3
59457: ARRAY
59458: EQUAL
59459: AND
59460: IFFALSE 59472
// result := true else
59462: LD_ADDR_VAR 0 3
59466: PUSH
59467: LD_INT 1
59469: ST_TO_ADDR
59470: GO 59480
// result := false ;
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: LD_INT 0
59479: ST_TO_ADDR
// end else
59480: GO 59490
// result := false ;
59482: LD_ADDR_VAR 0 3
59486: PUSH
59487: LD_INT 0
59489: ST_TO_ADDR
// end ;
59490: LD_VAR 0 3
59494: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59495: LD_INT 0
59497: PPUSH
59498: PPUSH
59499: PPUSH
59500: PPUSH
// if not unit or not area then
59501: LD_VAR 0 1
59505: NOT
59506: PUSH
59507: LD_VAR 0 2
59511: NOT
59512: OR
59513: IFFALSE 59517
// exit ;
59515: GO 59682
// tmp := AreaToList ( area , i ) ;
59517: LD_ADDR_VAR 0 6
59521: PUSH
59522: LD_VAR 0 2
59526: PPUSH
59527: LD_VAR 0 5
59531: PPUSH
59532: CALL_OW 517
59536: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59537: LD_ADDR_VAR 0 5
59541: PUSH
59542: DOUBLE
59543: LD_INT 1
59545: DEC
59546: ST_TO_ADDR
59547: LD_VAR 0 6
59551: PUSH
59552: LD_INT 1
59554: ARRAY
59555: PUSH
59556: FOR_TO
59557: IFFALSE 59672
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59559: LD_ADDR_VAR 0 7
59563: PUSH
59564: LD_VAR 0 6
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PUSH
59573: LD_VAR 0 5
59577: ARRAY
59578: PUSH
59579: LD_VAR 0 6
59583: PUSH
59584: LD_INT 2
59586: ARRAY
59587: PUSH
59588: LD_VAR 0 5
59592: ARRAY
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59598: LD_VAR 0 7
59602: PUSH
59603: LD_INT 1
59605: ARRAY
59606: PPUSH
59607: LD_VAR 0 7
59611: PUSH
59612: LD_INT 2
59614: ARRAY
59615: PPUSH
59616: CALL_OW 428
59620: PUSH
59621: LD_INT 0
59623: EQUAL
59624: IFFALSE 59670
// begin result := true ;
59626: LD_ADDR_VAR 0 4
59630: PUSH
59631: LD_INT 1
59633: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59634: LD_VAR 0 1
59638: PPUSH
59639: LD_VAR 0 7
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PPUSH
59648: LD_VAR 0 7
59652: PUSH
59653: LD_INT 2
59655: ARRAY
59656: PPUSH
59657: LD_VAR 0 3
59661: PPUSH
59662: CALL_OW 48
// exit ;
59666: POP
59667: POP
59668: GO 59682
// end ; end ;
59670: GO 59556
59672: POP
59673: POP
// result := false ;
59674: LD_ADDR_VAR 0 4
59678: PUSH
59679: LD_INT 0
59681: ST_TO_ADDR
// end ;
59682: LD_VAR 0 4
59686: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59687: LD_INT 0
59689: PPUSH
59690: PPUSH
59691: PPUSH
// if not side or side > 8 then
59692: LD_VAR 0 1
59696: NOT
59697: PUSH
59698: LD_VAR 0 1
59702: PUSH
59703: LD_INT 8
59705: GREATER
59706: OR
59707: IFFALSE 59711
// exit ;
59709: GO 59898
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59711: LD_ADDR_VAR 0 4
59715: PUSH
59716: LD_INT 22
59718: PUSH
59719: LD_VAR 0 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 21
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PPUSH
59742: CALL_OW 69
59746: ST_TO_ADDR
// if not tmp then
59747: LD_VAR 0 4
59751: NOT
59752: IFFALSE 59756
// exit ;
59754: GO 59898
// enable_addtolog := true ;
59756: LD_ADDR_OWVAR 81
59760: PUSH
59761: LD_INT 1
59763: ST_TO_ADDR
// AddToLog ( [ ) ;
59764: LD_STRING [
59766: PPUSH
59767: CALL_OW 561
// for i in tmp do
59771: LD_ADDR_VAR 0 3
59775: PUSH
59776: LD_VAR 0 4
59780: PUSH
59781: FOR_IN
59782: IFFALSE 59889
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59784: LD_STRING [
59786: PUSH
59787: LD_VAR 0 3
59791: PPUSH
59792: CALL_OW 266
59796: STR
59797: PUSH
59798: LD_STRING , 
59800: STR
59801: PUSH
59802: LD_VAR 0 3
59806: PPUSH
59807: CALL_OW 250
59811: STR
59812: PUSH
59813: LD_STRING , 
59815: STR
59816: PUSH
59817: LD_VAR 0 3
59821: PPUSH
59822: CALL_OW 251
59826: STR
59827: PUSH
59828: LD_STRING , 
59830: STR
59831: PUSH
59832: LD_VAR 0 3
59836: PPUSH
59837: CALL_OW 254
59841: STR
59842: PUSH
59843: LD_STRING , 
59845: STR
59846: PUSH
59847: LD_VAR 0 3
59851: PPUSH
59852: LD_INT 1
59854: PPUSH
59855: CALL_OW 268
59859: STR
59860: PUSH
59861: LD_STRING , 
59863: STR
59864: PUSH
59865: LD_VAR 0 3
59869: PPUSH
59870: LD_INT 2
59872: PPUSH
59873: CALL_OW 268
59877: STR
59878: PUSH
59879: LD_STRING ],
59881: STR
59882: PPUSH
59883: CALL_OW 561
// end ;
59887: GO 59781
59889: POP
59890: POP
// AddToLog ( ]; ) ;
59891: LD_STRING ];
59893: PPUSH
59894: CALL_OW 561
// end ;
59898: LD_VAR 0 2
59902: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59903: LD_INT 0
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
// if not area or not rate or not max then
59910: LD_VAR 0 1
59914: NOT
59915: PUSH
59916: LD_VAR 0 2
59920: NOT
59921: OR
59922: PUSH
59923: LD_VAR 0 4
59927: NOT
59928: OR
59929: IFFALSE 59933
// exit ;
59931: GO 60125
// while 1 do
59933: LD_INT 1
59935: IFFALSE 60125
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59937: LD_ADDR_VAR 0 9
59941: PUSH
59942: LD_VAR 0 1
59946: PPUSH
59947: LD_INT 1
59949: PPUSH
59950: CALL_OW 287
59954: PUSH
59955: LD_INT 10
59957: MUL
59958: ST_TO_ADDR
// r := rate / 10 ;
59959: LD_ADDR_VAR 0 7
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 10
59971: DIVREAL
59972: ST_TO_ADDR
// time := 1 1$00 ;
59973: LD_ADDR_VAR 0 8
59977: PUSH
59978: LD_INT 2100
59980: ST_TO_ADDR
// if amount < min then
59981: LD_VAR 0 9
59985: PUSH
59986: LD_VAR 0 3
59990: LESS
59991: IFFALSE 60009
// r := r * 2 else
59993: LD_ADDR_VAR 0 7
59997: PUSH
59998: LD_VAR 0 7
60002: PUSH
60003: LD_INT 2
60005: MUL
60006: ST_TO_ADDR
60007: GO 60035
// if amount > max then
60009: LD_VAR 0 9
60013: PUSH
60014: LD_VAR 0 4
60018: GREATER
60019: IFFALSE 60035
// r := r / 2 ;
60021: LD_ADDR_VAR 0 7
60025: PUSH
60026: LD_VAR 0 7
60030: PUSH
60031: LD_INT 2
60033: DIVREAL
60034: ST_TO_ADDR
// time := time / r ;
60035: LD_ADDR_VAR 0 8
60039: PUSH
60040: LD_VAR 0 8
60044: PUSH
60045: LD_VAR 0 7
60049: DIVREAL
60050: ST_TO_ADDR
// if time < 0 then
60051: LD_VAR 0 8
60055: PUSH
60056: LD_INT 0
60058: LESS
60059: IFFALSE 60076
// time := time * - 1 ;
60061: LD_ADDR_VAR 0 8
60065: PUSH
60066: LD_VAR 0 8
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: MUL
60075: ST_TO_ADDR
// wait ( time ) ;
60076: LD_VAR 0 8
60080: PPUSH
60081: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60085: LD_INT 35
60087: PPUSH
60088: LD_INT 875
60090: PPUSH
60091: CALL_OW 12
60095: PPUSH
60096: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60100: LD_INT 1
60102: PPUSH
60103: LD_INT 5
60105: PPUSH
60106: CALL_OW 12
60110: PPUSH
60111: LD_VAR 0 1
60115: PPUSH
60116: LD_INT 1
60118: PPUSH
60119: CALL_OW 55
// end ;
60123: GO 59933
// end ;
60125: LD_VAR 0 5
60129: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60130: LD_INT 0
60132: PPUSH
60133: PPUSH
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
60138: PPUSH
60139: PPUSH
// if not turrets or not factories then
60140: LD_VAR 0 1
60144: NOT
60145: PUSH
60146: LD_VAR 0 2
60150: NOT
60151: OR
60152: IFFALSE 60156
// exit ;
60154: GO 60463
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60156: LD_ADDR_VAR 0 10
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 6
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 24
60198: PUSH
60199: LD_INT 25
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 23
60208: PUSH
60209: LD_INT 27
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 42
60222: PUSH
60223: LD_INT 43
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 44
60232: PUSH
60233: LD_INT 46
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 45
60242: PUSH
60243: LD_INT 47
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// result := [ ] ;
60260: LD_ADDR_VAR 0 3
60264: PUSH
60265: EMPTY
60266: ST_TO_ADDR
// for i in turrets do
60267: LD_ADDR_VAR 0 4
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: FOR_IN
60278: IFFALSE 60461
// begin nat := GetNation ( i ) ;
60280: LD_ADDR_VAR 0 7
60284: PUSH
60285: LD_VAR 0 4
60289: PPUSH
60290: CALL_OW 248
60294: ST_TO_ADDR
// weapon := 0 ;
60295: LD_ADDR_VAR 0 8
60299: PUSH
60300: LD_INT 0
60302: ST_TO_ADDR
// if not nat then
60303: LD_VAR 0 7
60307: NOT
60308: IFFALSE 60312
// continue ;
60310: GO 60277
// for j in list [ nat ] do
60312: LD_ADDR_VAR 0 5
60316: PUSH
60317: LD_VAR 0 10
60321: PUSH
60322: LD_VAR 0 7
60326: ARRAY
60327: PUSH
60328: FOR_IN
60329: IFFALSE 60370
// if GetBWeapon ( i ) = j [ 1 ] then
60331: LD_VAR 0 4
60335: PPUSH
60336: CALL_OW 269
60340: PUSH
60341: LD_VAR 0 5
60345: PUSH
60346: LD_INT 1
60348: ARRAY
60349: EQUAL
60350: IFFALSE 60368
// begin weapon := j [ 2 ] ;
60352: LD_ADDR_VAR 0 8
60356: PUSH
60357: LD_VAR 0 5
60361: PUSH
60362: LD_INT 2
60364: ARRAY
60365: ST_TO_ADDR
// break ;
60366: GO 60370
// end ;
60368: GO 60328
60370: POP
60371: POP
// if not weapon then
60372: LD_VAR 0 8
60376: NOT
60377: IFFALSE 60381
// continue ;
60379: GO 60277
// for k in factories do
60381: LD_ADDR_VAR 0 6
60385: PUSH
60386: LD_VAR 0 2
60390: PUSH
60391: FOR_IN
60392: IFFALSE 60457
// begin weapons := AvailableWeaponList ( k ) ;
60394: LD_ADDR_VAR 0 9
60398: PUSH
60399: LD_VAR 0 6
60403: PPUSH
60404: CALL_OW 478
60408: ST_TO_ADDR
// if not weapons then
60409: LD_VAR 0 9
60413: NOT
60414: IFFALSE 60418
// continue ;
60416: GO 60391
// if weapon in weapons then
60418: LD_VAR 0 8
60422: PUSH
60423: LD_VAR 0 9
60427: IN
60428: IFFALSE 60455
// begin result := [ i , weapon ] ;
60430: LD_ADDR_VAR 0 3
60434: PUSH
60435: LD_VAR 0 4
60439: PUSH
60440: LD_VAR 0 8
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// exit ;
60449: POP
60450: POP
60451: POP
60452: POP
60453: GO 60463
// end ; end ;
60455: GO 60391
60457: POP
60458: POP
// end ;
60459: GO 60277
60461: POP
60462: POP
// end ; end_of_file
60463: LD_VAR 0 3
60467: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
60468: LD_INT 0
60470: PPUSH
60471: PPUSH
// skirmish := false ;
60472: LD_ADDR_EXP 66
60476: PUSH
60477: LD_INT 0
60479: ST_TO_ADDR
// mc_bases := [ ] ;
60480: LD_ADDR_EXP 67
60484: PUSH
60485: EMPTY
60486: ST_TO_ADDR
// mc_sides := [ ] ;
60487: LD_ADDR_EXP 93
60491: PUSH
60492: EMPTY
60493: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
60494: LD_ADDR_EXP 68
60498: PUSH
60499: EMPTY
60500: ST_TO_ADDR
// mc_building_repairs := [ ] ;
60501: LD_ADDR_EXP 69
60505: PUSH
60506: EMPTY
60507: ST_TO_ADDR
// mc_need_heal := [ ] ;
60508: LD_ADDR_EXP 70
60512: PUSH
60513: EMPTY
60514: ST_TO_ADDR
// mc_healers := [ ] ;
60515: LD_ADDR_EXP 71
60519: PUSH
60520: EMPTY
60521: ST_TO_ADDR
// mc_build_list := [ ] ;
60522: LD_ADDR_EXP 72
60526: PUSH
60527: EMPTY
60528: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
60529: LD_ADDR_EXP 99
60533: PUSH
60534: EMPTY
60535: ST_TO_ADDR
// mc_builders := [ ] ;
60536: LD_ADDR_EXP 73
60540: PUSH
60541: EMPTY
60542: ST_TO_ADDR
// mc_construct_list := [ ] ;
60543: LD_ADDR_EXP 74
60547: PUSH
60548: EMPTY
60549: ST_TO_ADDR
// mc_turret_list := [ ] ;
60550: LD_ADDR_EXP 75
60554: PUSH
60555: EMPTY
60556: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
60557: LD_ADDR_EXP 76
60561: PUSH
60562: EMPTY
60563: ST_TO_ADDR
// mc_miners := [ ] ;
60564: LD_ADDR_EXP 81
60568: PUSH
60569: EMPTY
60570: ST_TO_ADDR
// mc_mines := [ ] ;
60571: LD_ADDR_EXP 80
60575: PUSH
60576: EMPTY
60577: ST_TO_ADDR
// mc_minefields := [ ] ;
60578: LD_ADDR_EXP 82
60582: PUSH
60583: EMPTY
60584: ST_TO_ADDR
// mc_crates := [ ] ;
60585: LD_ADDR_EXP 83
60589: PUSH
60590: EMPTY
60591: ST_TO_ADDR
// mc_crates_collector := [ ] ;
60592: LD_ADDR_EXP 84
60596: PUSH
60597: EMPTY
60598: ST_TO_ADDR
// mc_crates_area := [ ] ;
60599: LD_ADDR_EXP 85
60603: PUSH
60604: EMPTY
60605: ST_TO_ADDR
// mc_vehicles := [ ] ;
60606: LD_ADDR_EXP 86
60610: PUSH
60611: EMPTY
60612: ST_TO_ADDR
// mc_attack := [ ] ;
60613: LD_ADDR_EXP 87
60617: PUSH
60618: EMPTY
60619: ST_TO_ADDR
// mc_produce := [ ] ;
60620: LD_ADDR_EXP 88
60624: PUSH
60625: EMPTY
60626: ST_TO_ADDR
// mc_defender := [ ] ;
60627: LD_ADDR_EXP 89
60631: PUSH
60632: EMPTY
60633: ST_TO_ADDR
// mc_parking := [ ] ;
60634: LD_ADDR_EXP 91
60638: PUSH
60639: EMPTY
60640: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
60641: LD_ADDR_EXP 77
60645: PUSH
60646: EMPTY
60647: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
60648: LD_ADDR_EXP 79
60652: PUSH
60653: EMPTY
60654: ST_TO_ADDR
// mc_scan := [ ] ;
60655: LD_ADDR_EXP 90
60659: PUSH
60660: EMPTY
60661: ST_TO_ADDR
// mc_scan_area := [ ] ;
60662: LD_ADDR_EXP 92
60666: PUSH
60667: EMPTY
60668: ST_TO_ADDR
// mc_tech := [ ] ;
60669: LD_ADDR_EXP 94
60673: PUSH
60674: EMPTY
60675: ST_TO_ADDR
// end ;
60676: LD_VAR 0 1
60680: RET
// export function MC_Kill ( base ) ; begin
60681: LD_INT 0
60683: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
60684: LD_ADDR_EXP 67
60688: PUSH
60689: LD_EXP 67
60693: PPUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: EMPTY
60700: PPUSH
60701: CALL_OW 1
60705: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
60706: LD_ADDR_EXP 68
60710: PUSH
60711: LD_EXP 68
60715: PPUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: EMPTY
60722: PPUSH
60723: CALL_OW 1
60727: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60728: LD_ADDR_EXP 69
60732: PUSH
60733: LD_EXP 69
60737: PPUSH
60738: LD_VAR 0 1
60742: PPUSH
60743: EMPTY
60744: PPUSH
60745: CALL_OW 1
60749: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60750: LD_ADDR_EXP 70
60754: PUSH
60755: LD_EXP 70
60759: PPUSH
60760: LD_VAR 0 1
60764: PPUSH
60765: EMPTY
60766: PPUSH
60767: CALL_OW 1
60771: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
60772: LD_ADDR_EXP 71
60776: PUSH
60777: LD_EXP 71
60781: PPUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: EMPTY
60788: PPUSH
60789: CALL_OW 1
60793: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
60794: LD_ADDR_EXP 72
60798: PUSH
60799: LD_EXP 72
60803: PPUSH
60804: LD_VAR 0 1
60808: PPUSH
60809: EMPTY
60810: PPUSH
60811: CALL_OW 1
60815: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
60816: LD_ADDR_EXP 73
60820: PUSH
60821: LD_EXP 73
60825: PPUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: EMPTY
60832: PPUSH
60833: CALL_OW 1
60837: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
60838: LD_ADDR_EXP 74
60842: PUSH
60843: LD_EXP 74
60847: PPUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: EMPTY
60854: PPUSH
60855: CALL_OW 1
60859: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60860: LD_ADDR_EXP 75
60864: PUSH
60865: LD_EXP 75
60869: PPUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: EMPTY
60876: PPUSH
60877: CALL_OW 1
60881: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
60882: LD_ADDR_EXP 76
60886: PUSH
60887: LD_EXP 76
60891: PPUSH
60892: LD_VAR 0 1
60896: PPUSH
60897: EMPTY
60898: PPUSH
60899: CALL_OW 1
60903: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
60904: LD_ADDR_EXP 77
60908: PUSH
60909: LD_EXP 77
60913: PPUSH
60914: LD_VAR 0 1
60918: PPUSH
60919: EMPTY
60920: PPUSH
60921: CALL_OW 1
60925: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
60926: LD_ADDR_EXP 78
60930: PUSH
60931: LD_EXP 78
60935: PPUSH
60936: LD_VAR 0 1
60940: PPUSH
60941: LD_INT 0
60943: PPUSH
60944: CALL_OW 1
60948: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
60949: LD_ADDR_EXP 79
60953: PUSH
60954: LD_EXP 79
60958: PPUSH
60959: LD_VAR 0 1
60963: PPUSH
60964: EMPTY
60965: PPUSH
60966: CALL_OW 1
60970: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
60971: LD_ADDR_EXP 80
60975: PUSH
60976: LD_EXP 80
60980: PPUSH
60981: LD_VAR 0 1
60985: PPUSH
60986: EMPTY
60987: PPUSH
60988: CALL_OW 1
60992: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
60993: LD_ADDR_EXP 81
60997: PUSH
60998: LD_EXP 81
61002: PPUSH
61003: LD_VAR 0 1
61007: PPUSH
61008: EMPTY
61009: PPUSH
61010: CALL_OW 1
61014: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
61015: LD_ADDR_EXP 82
61019: PUSH
61020: LD_EXP 82
61024: PPUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: EMPTY
61031: PPUSH
61032: CALL_OW 1
61036: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
61037: LD_ADDR_EXP 83
61041: PUSH
61042: LD_EXP 83
61046: PPUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: EMPTY
61053: PPUSH
61054: CALL_OW 1
61058: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
61059: LD_ADDR_EXP 84
61063: PUSH
61064: LD_EXP 84
61068: PPUSH
61069: LD_VAR 0 1
61073: PPUSH
61074: EMPTY
61075: PPUSH
61076: CALL_OW 1
61080: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
61081: LD_ADDR_EXP 85
61085: PUSH
61086: LD_EXP 85
61090: PPUSH
61091: LD_VAR 0 1
61095: PPUSH
61096: EMPTY
61097: PPUSH
61098: CALL_OW 1
61102: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
61103: LD_ADDR_EXP 86
61107: PUSH
61108: LD_EXP 86
61112: PPUSH
61113: LD_VAR 0 1
61117: PPUSH
61118: EMPTY
61119: PPUSH
61120: CALL_OW 1
61124: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
61125: LD_ADDR_EXP 87
61129: PUSH
61130: LD_EXP 87
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: EMPTY
61141: PPUSH
61142: CALL_OW 1
61146: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
61147: LD_ADDR_EXP 88
61151: PUSH
61152: LD_EXP 88
61156: PPUSH
61157: LD_VAR 0 1
61161: PPUSH
61162: EMPTY
61163: PPUSH
61164: CALL_OW 1
61168: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
61169: LD_ADDR_EXP 89
61173: PUSH
61174: LD_EXP 89
61178: PPUSH
61179: LD_VAR 0 1
61183: PPUSH
61184: EMPTY
61185: PPUSH
61186: CALL_OW 1
61190: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
61191: LD_ADDR_EXP 90
61195: PUSH
61196: LD_EXP 90
61200: PPUSH
61201: LD_VAR 0 1
61205: PPUSH
61206: EMPTY
61207: PPUSH
61208: CALL_OW 1
61212: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
61213: LD_ADDR_EXP 91
61217: PUSH
61218: LD_EXP 91
61222: PPUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: EMPTY
61229: PPUSH
61230: CALL_OW 1
61234: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
61235: LD_ADDR_EXP 92
61239: PUSH
61240: LD_EXP 92
61244: PPUSH
61245: LD_VAR 0 1
61249: PPUSH
61250: EMPTY
61251: PPUSH
61252: CALL_OW 1
61256: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
61257: LD_ADDR_EXP 94
61261: PUSH
61262: LD_EXP 94
61266: PPUSH
61267: LD_VAR 0 1
61271: PPUSH
61272: EMPTY
61273: PPUSH
61274: CALL_OW 1
61278: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
61279: LD_ADDR_EXP 96
61283: PUSH
61284: LD_EXP 96
61288: PPUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: EMPTY
61295: PPUSH
61296: CALL_OW 1
61300: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
61301: LD_ADDR_EXP 97
61305: PUSH
61306: LD_EXP 97
61310: PPUSH
61311: LD_VAR 0 1
61315: PPUSH
61316: EMPTY
61317: PPUSH
61318: CALL_OW 1
61322: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
61323: LD_ADDR_EXP 98
61327: PUSH
61328: LD_EXP 98
61332: PPUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: EMPTY
61339: PPUSH
61340: CALL_OW 1
61344: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
61345: LD_ADDR_EXP 99
61349: PUSH
61350: LD_EXP 99
61354: PPUSH
61355: LD_VAR 0 1
61359: PPUSH
61360: EMPTY
61361: PPUSH
61362: CALL_OW 1
61366: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
61367: LD_ADDR_EXP 100
61371: PUSH
61372: LD_EXP 100
61376: PPUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: EMPTY
61383: PPUSH
61384: CALL_OW 1
61388: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
61389: LD_ADDR_EXP 101
61393: PUSH
61394: LD_EXP 101
61398: PPUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: EMPTY
61405: PPUSH
61406: CALL_OW 1
61410: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
61411: LD_ADDR_EXP 102
61415: PUSH
61416: LD_EXP 102
61420: PPUSH
61421: LD_VAR 0 1
61425: PPUSH
61426: EMPTY
61427: PPUSH
61428: CALL_OW 1
61432: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
61433: LD_ADDR_EXP 103
61437: PUSH
61438: LD_EXP 103
61442: PPUSH
61443: LD_VAR 0 1
61447: PPUSH
61448: EMPTY
61449: PPUSH
61450: CALL_OW 1
61454: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
61455: LD_ADDR_EXP 104
61459: PUSH
61460: LD_EXP 104
61464: PPUSH
61465: LD_VAR 0 1
61469: PPUSH
61470: EMPTY
61471: PPUSH
61472: CALL_OW 1
61476: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
61477: LD_ADDR_EXP 105
61481: PUSH
61482: LD_EXP 105
61486: PPUSH
61487: LD_VAR 0 1
61491: PPUSH
61492: EMPTY
61493: PPUSH
61494: CALL_OW 1
61498: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
61499: LD_ADDR_EXP 106
61503: PUSH
61504: LD_EXP 106
61508: PPUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: EMPTY
61515: PPUSH
61516: CALL_OW 1
61520: ST_TO_ADDR
// end ;
61521: LD_VAR 0 2
61525: RET
// export function MC_Start ( ) ; var i ; begin
61526: LD_INT 0
61528: PPUSH
61529: PPUSH
// for i = 1 to mc_bases do
61530: LD_ADDR_VAR 0 2
61534: PUSH
61535: DOUBLE
61536: LD_INT 1
61538: DEC
61539: ST_TO_ADDR
61540: LD_EXP 67
61544: PUSH
61545: FOR_TO
61546: IFFALSE 62479
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
61548: LD_ADDR_EXP 68
61552: PUSH
61553: LD_EXP 68
61557: PPUSH
61558: LD_VAR 0 2
61562: PPUSH
61563: EMPTY
61564: PPUSH
61565: CALL_OW 1
61569: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61570: LD_ADDR_EXP 69
61574: PUSH
61575: LD_EXP 69
61579: PPUSH
61580: LD_VAR 0 2
61584: PPUSH
61585: EMPTY
61586: PPUSH
61587: CALL_OW 1
61591: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
61592: LD_ADDR_EXP 70
61596: PUSH
61597: LD_EXP 70
61601: PPUSH
61602: LD_VAR 0 2
61606: PPUSH
61607: EMPTY
61608: PPUSH
61609: CALL_OW 1
61613: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
61614: LD_ADDR_EXP 71
61618: PUSH
61619: LD_EXP 71
61623: PPUSH
61624: LD_VAR 0 2
61628: PPUSH
61629: EMPTY
61630: PUSH
61631: EMPTY
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PPUSH
61637: CALL_OW 1
61641: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
61642: LD_ADDR_EXP 72
61646: PUSH
61647: LD_EXP 72
61651: PPUSH
61652: LD_VAR 0 2
61656: PPUSH
61657: EMPTY
61658: PPUSH
61659: CALL_OW 1
61663: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
61664: LD_ADDR_EXP 99
61668: PUSH
61669: LD_EXP 99
61673: PPUSH
61674: LD_VAR 0 2
61678: PPUSH
61679: EMPTY
61680: PPUSH
61681: CALL_OW 1
61685: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
61686: LD_ADDR_EXP 73
61690: PUSH
61691: LD_EXP 73
61695: PPUSH
61696: LD_VAR 0 2
61700: PPUSH
61701: EMPTY
61702: PPUSH
61703: CALL_OW 1
61707: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
61708: LD_ADDR_EXP 74
61712: PUSH
61713: LD_EXP 74
61717: PPUSH
61718: LD_VAR 0 2
61722: PPUSH
61723: EMPTY
61724: PPUSH
61725: CALL_OW 1
61729: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
61730: LD_ADDR_EXP 75
61734: PUSH
61735: LD_EXP 75
61739: PPUSH
61740: LD_VAR 0 2
61744: PPUSH
61745: EMPTY
61746: PPUSH
61747: CALL_OW 1
61751: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
61752: LD_ADDR_EXP 76
61756: PUSH
61757: LD_EXP 76
61761: PPUSH
61762: LD_VAR 0 2
61766: PPUSH
61767: LD_EXP 67
61771: PUSH
61772: LD_VAR 0 2
61776: ARRAY
61777: PPUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 30
61783: PUSH
61784: LD_INT 32
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 30
61793: PUSH
61794: LD_INT 31
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 58
61808: PUSH
61809: EMPTY
61810: LIST
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PPUSH
61816: CALL_OW 72
61820: PPUSH
61821: CALL_OW 1
61825: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
61826: LD_ADDR_EXP 77
61830: PUSH
61831: LD_EXP 77
61835: PPUSH
61836: LD_VAR 0 2
61840: PPUSH
61841: EMPTY
61842: PPUSH
61843: CALL_OW 1
61847: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
61848: LD_ADDR_EXP 81
61852: PUSH
61853: LD_EXP 81
61857: PPUSH
61858: LD_VAR 0 2
61862: PPUSH
61863: EMPTY
61864: PPUSH
61865: CALL_OW 1
61869: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
61870: LD_ADDR_EXP 80
61874: PUSH
61875: LD_EXP 80
61879: PPUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: EMPTY
61886: PPUSH
61887: CALL_OW 1
61891: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
61892: LD_ADDR_EXP 82
61896: PUSH
61897: LD_EXP 82
61901: PPUSH
61902: LD_VAR 0 2
61906: PPUSH
61907: EMPTY
61908: PPUSH
61909: CALL_OW 1
61913: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
61914: LD_ADDR_EXP 83
61918: PUSH
61919: LD_EXP 83
61923: PPUSH
61924: LD_VAR 0 2
61928: PPUSH
61929: EMPTY
61930: PPUSH
61931: CALL_OW 1
61935: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
61936: LD_ADDR_EXP 84
61940: PUSH
61941: LD_EXP 84
61945: PPUSH
61946: LD_VAR 0 2
61950: PPUSH
61951: EMPTY
61952: PPUSH
61953: CALL_OW 1
61957: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
61958: LD_ADDR_EXP 85
61962: PUSH
61963: LD_EXP 85
61967: PPUSH
61968: LD_VAR 0 2
61972: PPUSH
61973: EMPTY
61974: PPUSH
61975: CALL_OW 1
61979: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
61980: LD_ADDR_EXP 86
61984: PUSH
61985: LD_EXP 86
61989: PPUSH
61990: LD_VAR 0 2
61994: PPUSH
61995: EMPTY
61996: PPUSH
61997: CALL_OW 1
62001: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
62002: LD_ADDR_EXP 87
62006: PUSH
62007: LD_EXP 87
62011: PPUSH
62012: LD_VAR 0 2
62016: PPUSH
62017: EMPTY
62018: PPUSH
62019: CALL_OW 1
62023: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
62024: LD_ADDR_EXP 88
62028: PUSH
62029: LD_EXP 88
62033: PPUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: EMPTY
62040: PPUSH
62041: CALL_OW 1
62045: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
62046: LD_ADDR_EXP 89
62050: PUSH
62051: LD_EXP 89
62055: PPUSH
62056: LD_VAR 0 2
62060: PPUSH
62061: EMPTY
62062: PPUSH
62063: CALL_OW 1
62067: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
62068: LD_ADDR_EXP 78
62072: PUSH
62073: LD_EXP 78
62077: PPUSH
62078: LD_VAR 0 2
62082: PPUSH
62083: LD_INT 0
62085: PPUSH
62086: CALL_OW 1
62090: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
62091: LD_ADDR_EXP 91
62095: PUSH
62096: LD_EXP 91
62100: PPUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: LD_INT 0
62108: PPUSH
62109: CALL_OW 1
62113: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
62114: LD_ADDR_EXP 79
62118: PUSH
62119: LD_EXP 79
62123: PPUSH
62124: LD_VAR 0 2
62128: PPUSH
62129: EMPTY
62130: PPUSH
62131: CALL_OW 1
62135: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
62136: LD_ADDR_EXP 90
62140: PUSH
62141: LD_EXP 90
62145: PPUSH
62146: LD_VAR 0 2
62150: PPUSH
62151: LD_INT 0
62153: PPUSH
62154: CALL_OW 1
62158: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
62159: LD_ADDR_EXP 92
62163: PUSH
62164: LD_EXP 92
62168: PPUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: EMPTY
62175: PPUSH
62176: CALL_OW 1
62180: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
62181: LD_ADDR_EXP 95
62185: PUSH
62186: LD_EXP 95
62190: PPUSH
62191: LD_VAR 0 2
62195: PPUSH
62196: LD_INT 0
62198: PPUSH
62199: CALL_OW 1
62203: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
62204: LD_ADDR_EXP 96
62208: PUSH
62209: LD_EXP 96
62213: PPUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: EMPTY
62220: PPUSH
62221: CALL_OW 1
62225: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
62226: LD_ADDR_EXP 97
62230: PUSH
62231: LD_EXP 97
62235: PPUSH
62236: LD_VAR 0 2
62240: PPUSH
62241: EMPTY
62242: PPUSH
62243: CALL_OW 1
62247: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62248: LD_ADDR_EXP 98
62252: PUSH
62253: LD_EXP 98
62257: PPUSH
62258: LD_VAR 0 2
62262: PPUSH
62263: EMPTY
62264: PPUSH
62265: CALL_OW 1
62269: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
62270: LD_ADDR_EXP 100
62274: PUSH
62275: LD_EXP 100
62279: PPUSH
62280: LD_VAR 0 2
62284: PPUSH
62285: LD_EXP 67
62289: PUSH
62290: LD_VAR 0 2
62294: ARRAY
62295: PPUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 30
62301: PUSH
62302: LD_INT 6
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 30
62311: PUSH
62312: LD_INT 7
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 30
62321: PUSH
62322: LD_INT 8
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: PPUSH
62335: CALL_OW 72
62339: PPUSH
62340: CALL_OW 1
62344: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
62345: LD_ADDR_EXP 101
62349: PUSH
62350: LD_EXP 101
62354: PPUSH
62355: LD_VAR 0 2
62359: PPUSH
62360: EMPTY
62361: PPUSH
62362: CALL_OW 1
62366: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
62367: LD_ADDR_EXP 102
62371: PUSH
62372: LD_EXP 102
62376: PPUSH
62377: LD_VAR 0 2
62381: PPUSH
62382: EMPTY
62383: PPUSH
62384: CALL_OW 1
62388: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
62389: LD_ADDR_EXP 103
62393: PUSH
62394: LD_EXP 103
62398: PPUSH
62399: LD_VAR 0 2
62403: PPUSH
62404: EMPTY
62405: PPUSH
62406: CALL_OW 1
62410: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
62411: LD_ADDR_EXP 104
62415: PUSH
62416: LD_EXP 104
62420: PPUSH
62421: LD_VAR 0 2
62425: PPUSH
62426: EMPTY
62427: PPUSH
62428: CALL_OW 1
62432: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
62433: LD_ADDR_EXP 105
62437: PUSH
62438: LD_EXP 105
62442: PPUSH
62443: LD_VAR 0 2
62447: PPUSH
62448: EMPTY
62449: PPUSH
62450: CALL_OW 1
62454: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
62455: LD_ADDR_EXP 106
62459: PUSH
62460: LD_EXP 106
62464: PPUSH
62465: LD_VAR 0 2
62469: PPUSH
62470: EMPTY
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
// end ;
62477: GO 61545
62479: POP
62480: POP
// MC_InitSides ( ) ;
62481: CALL 62767 0 0
// MC_InitResearch ( ) ;
62485: CALL 62506 0 0
// CustomInitMacro ( ) ;
62489: CALL 16588 0 0
// skirmish := true ;
62493: LD_ADDR_EXP 66
62497: PUSH
62498: LD_INT 1
62500: ST_TO_ADDR
// end ;
62501: LD_VAR 0 1
62505: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
62506: LD_INT 0
62508: PPUSH
62509: PPUSH
62510: PPUSH
62511: PPUSH
62512: PPUSH
62513: PPUSH
// if not mc_bases then
62514: LD_EXP 67
62518: NOT
62519: IFFALSE 62523
// exit ;
62521: GO 62762
// for i = 1 to 8 do
62523: LD_ADDR_VAR 0 2
62527: PUSH
62528: DOUBLE
62529: LD_INT 1
62531: DEC
62532: ST_TO_ADDR
62533: LD_INT 8
62535: PUSH
62536: FOR_TO
62537: IFFALSE 62563
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
62539: LD_ADDR_EXP 94
62543: PUSH
62544: LD_EXP 94
62548: PPUSH
62549: LD_VAR 0 2
62553: PPUSH
62554: EMPTY
62555: PPUSH
62556: CALL_OW 1
62560: ST_TO_ADDR
62561: GO 62536
62563: POP
62564: POP
// tmp := [ ] ;
62565: LD_ADDR_VAR 0 5
62569: PUSH
62570: EMPTY
62571: ST_TO_ADDR
// for i = 1 to mc_sides do
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: DOUBLE
62578: LD_INT 1
62580: DEC
62581: ST_TO_ADDR
62582: LD_EXP 93
62586: PUSH
62587: FOR_TO
62588: IFFALSE 62646
// if not mc_sides [ i ] in tmp then
62590: LD_EXP 93
62594: PUSH
62595: LD_VAR 0 2
62599: ARRAY
62600: PUSH
62601: LD_VAR 0 5
62605: IN
62606: NOT
62607: IFFALSE 62644
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
62609: LD_ADDR_VAR 0 5
62613: PUSH
62614: LD_VAR 0 5
62618: PPUSH
62619: LD_VAR 0 5
62623: PUSH
62624: LD_INT 1
62626: PLUS
62627: PPUSH
62628: LD_EXP 93
62632: PUSH
62633: LD_VAR 0 2
62637: ARRAY
62638: PPUSH
62639: CALL_OW 2
62643: ST_TO_ADDR
62644: GO 62587
62646: POP
62647: POP
// if not tmp then
62648: LD_VAR 0 5
62652: NOT
62653: IFFALSE 62657
// exit ;
62655: GO 62762
// for j in tmp do
62657: LD_ADDR_VAR 0 3
62661: PUSH
62662: LD_VAR 0 5
62666: PUSH
62667: FOR_IN
62668: IFFALSE 62760
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
62670: LD_ADDR_VAR 0 6
62674: PUSH
62675: LD_INT 22
62677: PUSH
62678: LD_VAR 0 3
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PPUSH
62687: CALL_OW 69
62691: ST_TO_ADDR
// if not un then
62692: LD_VAR 0 6
62696: NOT
62697: IFFALSE 62701
// continue ;
62699: GO 62667
// nation := GetNation ( un [ 1 ] ) ;
62701: LD_ADDR_VAR 0 4
62705: PUSH
62706: LD_VAR 0 6
62710: PUSH
62711: LD_INT 1
62713: ARRAY
62714: PPUSH
62715: CALL_OW 248
62719: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
62720: LD_ADDR_EXP 94
62724: PUSH
62725: LD_EXP 94
62729: PPUSH
62730: LD_VAR 0 3
62734: PPUSH
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_VAR 0 4
62744: PPUSH
62745: LD_INT 1
62747: PPUSH
62748: CALL 18511 0 3
62752: PPUSH
62753: CALL_OW 1
62757: ST_TO_ADDR
// end ;
62758: GO 62667
62760: POP
62761: POP
// end ;
62762: LD_VAR 0 1
62766: RET
// export function MC_InitSides ( ) ; var i ; begin
62767: LD_INT 0
62769: PPUSH
62770: PPUSH
// if not mc_bases then
62771: LD_EXP 67
62775: NOT
62776: IFFALSE 62780
// exit ;
62778: GO 62854
// for i = 1 to mc_bases do
62780: LD_ADDR_VAR 0 2
62784: PUSH
62785: DOUBLE
62786: LD_INT 1
62788: DEC
62789: ST_TO_ADDR
62790: LD_EXP 67
62794: PUSH
62795: FOR_TO
62796: IFFALSE 62852
// if mc_bases [ i ] then
62798: LD_EXP 67
62802: PUSH
62803: LD_VAR 0 2
62807: ARRAY
62808: IFFALSE 62850
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
62810: LD_ADDR_EXP 93
62814: PUSH
62815: LD_EXP 93
62819: PPUSH
62820: LD_VAR 0 2
62824: PPUSH
62825: LD_EXP 67
62829: PUSH
62830: LD_VAR 0 2
62834: ARRAY
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PPUSH
62840: CALL_OW 255
62844: PPUSH
62845: CALL_OW 1
62849: ST_TO_ADDR
62850: GO 62795
62852: POP
62853: POP
// end ;
62854: LD_VAR 0 1
62858: RET
// every 0 0$01 trigger skirmish do
62859: LD_EXP 66
62863: IFFALSE 62996
62865: GO 62867
62867: DISABLE
// begin enable ;
62868: ENABLE
// MC_CheckBuildings ( ) ;
62869: CALL 63481 0 0
// MC_CheckPeopleLife ( ) ;
62873: CALL 63606 0 0
// RaiseSailEvent ( 103 ) ;
62877: LD_INT 103
62879: PPUSH
62880: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
62884: LD_INT 104
62886: PPUSH
62887: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
62891: LD_INT 105
62893: PPUSH
62894: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
62898: LD_INT 106
62900: PPUSH
62901: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
62905: LD_INT 107
62907: PPUSH
62908: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
62912: LD_INT 108
62914: PPUSH
62915: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
62919: LD_INT 109
62921: PPUSH
62922: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
62926: LD_INT 110
62928: PPUSH
62929: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
62933: LD_INT 111
62935: PPUSH
62936: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
62940: LD_INT 112
62942: PPUSH
62943: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
62947: LD_INT 120
62949: PPUSH
62950: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
62954: LD_INT 121
62956: PPUSH
62957: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
62961: LD_INT 122
62963: PPUSH
62964: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
62968: LD_INT 123
62970: PPUSH
62971: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
62975: LD_INT 125
62977: PPUSH
62978: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
62982: LD_INT 126
62984: PPUSH
62985: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
62989: LD_INT 200
62991: PPUSH
62992: CALL_OW 427
// end ;
62996: END
// every 10 trigger skirmish do var i ;
62997: LD_EXP 66
63001: IFFALSE 63100
63003: GO 63005
63005: DISABLE
63006: LD_INT 0
63008: PPUSH
// begin enable ;
63009: ENABLE
// if not mc_bases then
63010: LD_EXP 67
63014: NOT
63015: IFFALSE 63019
// exit ;
63017: GO 63100
// for i = 1 to mc_bases do
63019: LD_ADDR_VAR 0 1
63023: PUSH
63024: DOUBLE
63025: LD_INT 1
63027: DEC
63028: ST_TO_ADDR
63029: LD_EXP 67
63033: PUSH
63034: FOR_TO
63035: IFFALSE 63098
// if mc_mines [ i ] and mc_miners [ i ] then
63037: LD_EXP 80
63041: PUSH
63042: LD_VAR 0 1
63046: ARRAY
63047: PUSH
63048: LD_EXP 81
63052: PUSH
63053: LD_VAR 0 1
63057: ARRAY
63058: AND
63059: IFFALSE 63096
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
63061: LD_EXP 81
63065: PUSH
63066: LD_VAR 0 1
63070: ARRAY
63071: PUSH
63072: LD_INT 1
63074: ARRAY
63075: PPUSH
63076: CALL_OW 255
63080: PPUSH
63081: LD_EXP 80
63085: PUSH
63086: LD_VAR 0 1
63090: ARRAY
63091: PPUSH
63092: CALL 22260 0 2
63096: GO 63034
63098: POP
63099: POP
// end ;
63100: PPOPN 1
63102: END
// on SailEvent ( event ) do begin if event = 101 then
63103: LD_VAR 0 1
63107: PUSH
63108: LD_INT 101
63110: EQUAL
63111: IFFALSE 63117
// MC_RepairBuildings ( ) ;
63113: CALL 64164 0 0
// if event = 102 then
63117: LD_VAR 0 1
63121: PUSH
63122: LD_INT 102
63124: EQUAL
63125: IFFALSE 63131
// MC_Heal ( ) ;
63127: CALL 64570 0 0
// if event = 103 then
63131: LD_VAR 0 1
63135: PUSH
63136: LD_INT 103
63138: EQUAL
63139: IFFALSE 63145
// MC_Build ( ) ;
63141: CALL 64992 0 0
// if event = 104 then
63145: LD_VAR 0 1
63149: PUSH
63150: LD_INT 104
63152: EQUAL
63153: IFFALSE 63159
// MC_TurretWeapon ( ) ;
63155: CALL 66431 0 0
// if event = 105 then
63159: LD_VAR 0 1
63163: PUSH
63164: LD_INT 105
63166: EQUAL
63167: IFFALSE 63173
// MC_BuildUpgrade ( ) ;
63169: CALL 65982 0 0
// if event = 106 then
63173: LD_VAR 0 1
63177: PUSH
63178: LD_INT 106
63180: EQUAL
63181: IFFALSE 63187
// MC_PlantMines ( ) ;
63183: CALL 66783 0 0
// if event = 107 then
63187: LD_VAR 0 1
63191: PUSH
63192: LD_INT 107
63194: EQUAL
63195: IFFALSE 63201
// MC_CollectCrates ( ) ;
63197: CALL 67790 0 0
// if event = 108 then
63201: LD_VAR 0 1
63205: PUSH
63206: LD_INT 108
63208: EQUAL
63209: IFFALSE 63215
// MC_LinkRemoteControl ( ) ;
63211: CALL 69294 0 0
// if event = 109 then
63215: LD_VAR 0 1
63219: PUSH
63220: LD_INT 109
63222: EQUAL
63223: IFFALSE 63229
// MC_ProduceVehicle ( ) ;
63225: CALL 69475 0 0
// if event = 110 then
63229: LD_VAR 0 1
63233: PUSH
63234: LD_INT 110
63236: EQUAL
63237: IFFALSE 63243
// MC_SendAttack ( ) ;
63239: CALL 69956 0 0
// if event = 111 then
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 111
63250: EQUAL
63251: IFFALSE 63257
// MC_Defend ( ) ;
63253: CALL 70064 0 0
// if event = 112 then
63257: LD_VAR 0 1
63261: PUSH
63262: LD_INT 112
63264: EQUAL
63265: IFFALSE 63271
// MC_Research ( ) ;
63267: CALL 70462 0 0
// if event = 120 then
63271: LD_VAR 0 1
63275: PUSH
63276: LD_INT 120
63278: EQUAL
63279: IFFALSE 63285
// MC_RepairVehicle ( ) ;
63281: CALL 71431 0 0
// if event = 121 then
63285: LD_VAR 0 1
63289: PUSH
63290: LD_INT 121
63292: EQUAL
63293: IFFALSE 63299
// MC_TameApe ( ) ;
63295: CALL 72120 0 0
// if event = 122 then
63299: LD_VAR 0 1
63303: PUSH
63304: LD_INT 122
63306: EQUAL
63307: IFFALSE 63313
// MC_ChangeApeClass ( ) ;
63309: CALL 72883 0 0
// if event = 123 then
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 123
63320: EQUAL
63321: IFFALSE 63327
// MC_Bazooka ( ) ;
63323: CALL 73517 0 0
// if event = 124 then
63327: LD_VAR 0 1
63331: PUSH
63332: LD_INT 124
63334: EQUAL
63335: IFFALSE 63341
// MC_TeleportExit ( ) ;
63337: CALL 73715 0 0
// if event = 125 then
63341: LD_VAR 0 1
63345: PUSH
63346: LD_INT 125
63348: EQUAL
63349: IFFALSE 63355
// MC_Deposits ( ) ;
63351: CALL 73757 0 0
// if event = 126 then
63355: LD_VAR 0 1
63359: PUSH
63360: LD_INT 126
63362: EQUAL
63363: IFFALSE 63369
// MC_RemoteDriver ( ) ;
63365: CALL 74336 0 0
// if event = 200 then
63369: LD_VAR 0 1
63373: PUSH
63374: LD_INT 200
63376: EQUAL
63377: IFFALSE 63383
// MC_Idle ( ) ;
63379: CALL 75841 0 0
// end ;
63383: PPOPN 1
63385: END
// export function MC_Reset ( base , tag ) ; var i ; begin
63386: LD_INT 0
63388: PPUSH
63389: PPUSH
// if not mc_bases [ base ] or not tag then
63390: LD_EXP 67
63394: PUSH
63395: LD_VAR 0 1
63399: ARRAY
63400: NOT
63401: PUSH
63402: LD_VAR 0 2
63406: NOT
63407: OR
63408: IFFALSE 63412
// exit ;
63410: GO 63476
// for i in mc_bases [ base ] union mc_ape [ base ] do
63412: LD_ADDR_VAR 0 4
63416: PUSH
63417: LD_EXP 67
63421: PUSH
63422: LD_VAR 0 1
63426: ARRAY
63427: PUSH
63428: LD_EXP 96
63432: PUSH
63433: LD_VAR 0 1
63437: ARRAY
63438: UNION
63439: PUSH
63440: FOR_IN
63441: IFFALSE 63474
// if GetTag ( i ) = tag then
63443: LD_VAR 0 4
63447: PPUSH
63448: CALL_OW 110
63452: PUSH
63453: LD_VAR 0 2
63457: EQUAL
63458: IFFALSE 63472
// SetTag ( i , 0 ) ;
63460: LD_VAR 0 4
63464: PPUSH
63465: LD_INT 0
63467: PPUSH
63468: CALL_OW 109
63472: GO 63440
63474: POP
63475: POP
// end ;
63476: LD_VAR 0 3
63480: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
63485: PPUSH
// if not mc_bases then
63486: LD_EXP 67
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63601
// for i = 1 to mc_bases do
63495: LD_ADDR_VAR 0 2
63499: PUSH
63500: DOUBLE
63501: LD_INT 1
63503: DEC
63504: ST_TO_ADDR
63505: LD_EXP 67
63509: PUSH
63510: FOR_TO
63511: IFFALSE 63592
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63513: LD_ADDR_VAR 0 3
63517: PUSH
63518: LD_EXP 67
63522: PUSH
63523: LD_VAR 0 2
63527: ARRAY
63528: PPUSH
63529: LD_INT 21
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: LD_INT 24
63544: PUSH
63545: LD_INT 1000
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PPUSH
63560: CALL_OW 72
63564: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
63565: LD_ADDR_EXP 68
63569: PUSH
63570: LD_EXP 68
63574: PPUSH
63575: LD_VAR 0 2
63579: PPUSH
63580: LD_VAR 0 3
63584: PPUSH
63585: CALL_OW 1
63589: ST_TO_ADDR
// end ;
63590: GO 63510
63592: POP
63593: POP
// RaiseSailEvent ( 101 ) ;
63594: LD_INT 101
63596: PPUSH
63597: CALL_OW 427
// end ;
63601: LD_VAR 0 1
63605: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
63606: LD_INT 0
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
63612: PPUSH
63613: PPUSH
63614: PPUSH
// if not mc_bases then
63615: LD_EXP 67
63619: NOT
63620: IFFALSE 63624
// exit ;
63622: GO 64159
// for i = 1 to mc_bases do
63624: LD_ADDR_VAR 0 2
63628: PUSH
63629: DOUBLE
63630: LD_INT 1
63632: DEC
63633: ST_TO_ADDR
63634: LD_EXP 67
63638: PUSH
63639: FOR_TO
63640: IFFALSE 64150
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
63642: LD_ADDR_VAR 0 5
63646: PUSH
63647: LD_EXP 67
63651: PUSH
63652: LD_VAR 0 2
63656: ARRAY
63657: PUSH
63658: LD_EXP 96
63662: PUSH
63663: LD_VAR 0 2
63667: ARRAY
63668: UNION
63669: PPUSH
63670: LD_INT 21
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 54
63688: PUSH
63689: EMPTY
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: LD_INT 24
63701: PUSH
63702: LD_INT 700
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PPUSH
63722: CALL_OW 72
63726: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
63727: LD_ADDR_VAR 0 6
63731: PUSH
63732: LD_EXP 67
63736: PUSH
63737: LD_VAR 0 2
63741: ARRAY
63742: PPUSH
63743: LD_INT 21
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: LD_INT 54
63761: PUSH
63762: EMPTY
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: LD_INT 24
63774: PUSH
63775: LD_INT 250
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PPUSH
63795: CALL_OW 72
63799: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
63800: LD_ADDR_VAR 0 7
63804: PUSH
63805: LD_VAR 0 5
63809: PUSH
63810: LD_VAR 0 6
63814: DIFF
63815: ST_TO_ADDR
// if not need_heal_1 then
63816: LD_VAR 0 6
63820: NOT
63821: IFFALSE 63854
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
63823: LD_ADDR_EXP 70
63827: PUSH
63828: LD_EXP 70
63832: PPUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PPUSH
63845: EMPTY
63846: PPUSH
63847: CALL 25638 0 3
63851: ST_TO_ADDR
63852: GO 63886
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
63854: LD_ADDR_EXP 70
63858: PUSH
63859: LD_EXP 70
63863: PPUSH
63864: LD_VAR 0 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PPUSH
63876: LD_VAR 0 6
63880: PPUSH
63881: CALL 25638 0 3
63885: ST_TO_ADDR
// if not need_heal_2 then
63886: LD_VAR 0 7
63890: NOT
63891: IFFALSE 63924
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
63893: LD_ADDR_EXP 70
63897: PUSH
63898: LD_EXP 70
63902: PPUSH
63903: LD_VAR 0 2
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PPUSH
63915: EMPTY
63916: PPUSH
63917: CALL 25638 0 3
63921: ST_TO_ADDR
63922: GO 63956
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
63924: LD_ADDR_EXP 70
63928: PUSH
63929: LD_EXP 70
63933: PPUSH
63934: LD_VAR 0 2
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PPUSH
63946: LD_VAR 0 7
63950: PPUSH
63951: CALL 25638 0 3
63955: ST_TO_ADDR
// if need_heal_2 then
63956: LD_VAR 0 7
63960: IFFALSE 64132
// for j in need_heal_2 do
63962: LD_ADDR_VAR 0 3
63966: PUSH
63967: LD_VAR 0 7
63971: PUSH
63972: FOR_IN
63973: IFFALSE 64130
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
63975: LD_ADDR_VAR 0 5
63979: PUSH
63980: LD_EXP 67
63984: PUSH
63985: LD_VAR 0 2
63989: ARRAY
63990: PPUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 30
63996: PUSH
63997: LD_INT 6
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 30
64006: PUSH
64007: LD_INT 7
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 30
64016: PUSH
64017: LD_INT 8
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 30
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 30
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 25
64046: PUSH
64047: LD_INT 4
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: PPUSH
64063: CALL_OW 72
64067: ST_TO_ADDR
// if tmp then
64068: LD_VAR 0 5
64072: IFFALSE 64128
// begin k := NearestUnitToUnit ( tmp , j ) ;
64074: LD_ADDR_VAR 0 4
64078: PUSH
64079: LD_VAR 0 5
64083: PPUSH
64084: LD_VAR 0 3
64088: PPUSH
64089: CALL_OW 74
64093: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
64094: LD_VAR 0 3
64098: PPUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: CALL_OW 296
64108: PUSH
64109: LD_INT 7
64111: GREATER
64112: IFFALSE 64128
// ComMoveUnit ( j , k ) ;
64114: LD_VAR 0 3
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: CALL_OW 112
// end ; end ;
64128: GO 63972
64130: POP
64131: POP
// if not need_heal_1 and not need_heal_2 then
64132: LD_VAR 0 6
64136: NOT
64137: PUSH
64138: LD_VAR 0 7
64142: NOT
64143: AND
64144: IFFALSE 64148
// continue ;
64146: GO 63639
// end ;
64148: GO 63639
64150: POP
64151: POP
// RaiseSailEvent ( 102 ) ;
64152: LD_INT 102
64154: PPUSH
64155: CALL_OW 427
// end ;
64159: LD_VAR 0 1
64163: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
64164: LD_INT 0
64166: PPUSH
64167: PPUSH
64168: PPUSH
64169: PPUSH
64170: PPUSH
// if not mc_bases then
64171: LD_EXP 67
64175: NOT
64176: IFFALSE 64180
// exit ;
64178: GO 64565
// for i = 1 to mc_bases do
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: DOUBLE
64186: LD_INT 1
64188: DEC
64189: ST_TO_ADDR
64190: LD_EXP 67
64194: PUSH
64195: FOR_TO
64196: IFFALSE 64563
// begin if not mc_building_need_repair [ i ] then
64198: LD_EXP 68
64202: PUSH
64203: LD_VAR 0 2
64207: ARRAY
64208: NOT
64209: IFFALSE 64247
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64211: LD_ADDR_EXP 69
64215: PUSH
64216: LD_EXP 69
64220: PPUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: EMPTY
64227: PPUSH
64228: CALL_OW 1
64232: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64233: LD_VAR 0 2
64237: PPUSH
64238: LD_INT 101
64240: PPUSH
64241: CALL 63386 0 2
// continue ;
64245: GO 64195
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
64247: LD_ADDR_EXP 73
64251: PUSH
64252: LD_EXP 73
64256: PPUSH
64257: LD_VAR 0 2
64261: PPUSH
64262: EMPTY
64263: PPUSH
64264: CALL_OW 1
64268: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64269: LD_VAR 0 2
64273: PPUSH
64274: LD_INT 103
64276: PPUSH
64277: CALL 63386 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
64281: LD_ADDR_VAR 0 5
64285: PUSH
64286: LD_EXP 67
64290: PUSH
64291: LD_VAR 0 2
64295: ARRAY
64296: PUSH
64297: LD_EXP 96
64301: PUSH
64302: LD_VAR 0 2
64306: ARRAY
64307: UNION
64308: PPUSH
64309: LD_INT 2
64311: PUSH
64312: LD_INT 25
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 25
64324: PUSH
64325: LD_INT 16
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: PPUSH
64340: CALL_OW 72
64344: ST_TO_ADDR
// if not tmp then
64345: LD_VAR 0 5
64349: NOT
64350: IFFALSE 64354
// continue ;
64352: GO 64195
// for j in tmp do
64354: LD_ADDR_VAR 0 3
64358: PUSH
64359: LD_VAR 0 5
64363: PUSH
64364: FOR_IN
64365: IFFALSE 64559
// begin if mc_need_heal [ i ] then
64367: LD_EXP 70
64371: PUSH
64372: LD_VAR 0 2
64376: ARRAY
64377: IFFALSE 64425
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
64379: LD_VAR 0 3
64383: PUSH
64384: LD_EXP 70
64388: PUSH
64389: LD_VAR 0 2
64393: ARRAY
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: IN
64399: PUSH
64400: LD_VAR 0 3
64404: PUSH
64405: LD_EXP 70
64409: PUSH
64410: LD_VAR 0 2
64414: ARRAY
64415: PUSH
64416: LD_INT 2
64418: ARRAY
64419: IN
64420: OR
64421: IFFALSE 64425
// continue ;
64423: GO 64364
// if IsInUnit ( j ) then
64425: LD_VAR 0 3
64429: PPUSH
64430: CALL_OW 310
64434: IFFALSE 64445
// ComExitBuilding ( j ) ;
64436: LD_VAR 0 3
64440: PPUSH
64441: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
64445: LD_VAR 0 3
64449: PUSH
64450: LD_EXP 69
64454: PUSH
64455: LD_VAR 0 2
64459: ARRAY
64460: IN
64461: NOT
64462: IFFALSE 64520
// begin SetTag ( j , 101 ) ;
64464: LD_VAR 0 3
64468: PPUSH
64469: LD_INT 101
64471: PPUSH
64472: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
64476: LD_ADDR_EXP 69
64480: PUSH
64481: LD_EXP 69
64485: PPUSH
64486: LD_VAR 0 2
64490: PUSH
64491: LD_EXP 69
64495: PUSH
64496: LD_VAR 0 2
64500: ARRAY
64501: PUSH
64502: LD_INT 1
64504: PLUS
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PPUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: CALL 25638 0 3
64519: ST_TO_ADDR
// end ; Wait ( 3 ) ;
64520: LD_INT 3
64522: PPUSH
64523: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
64527: LD_VAR 0 3
64531: PPUSH
64532: LD_EXP 68
64536: PUSH
64537: LD_VAR 0 2
64541: ARRAY
64542: PPUSH
64543: LD_VAR 0 3
64547: PPUSH
64548: CALL_OW 74
64552: PPUSH
64553: CALL_OW 130
// end ;
64557: GO 64364
64559: POP
64560: POP
// end ;
64561: GO 64195
64563: POP
64564: POP
// end ;
64565: LD_VAR 0 1
64569: RET
// export function MC_Heal ; var i , j , tmp ; begin
64570: LD_INT 0
64572: PPUSH
64573: PPUSH
64574: PPUSH
64575: PPUSH
// if not mc_bases then
64576: LD_EXP 67
64580: NOT
64581: IFFALSE 64585
// exit ;
64583: GO 64987
// for i = 1 to mc_bases do
64585: LD_ADDR_VAR 0 2
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_EXP 67
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64985
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
64603: LD_EXP 70
64607: PUSH
64608: LD_VAR 0 2
64612: ARRAY
64613: PUSH
64614: LD_INT 1
64616: ARRAY
64617: NOT
64618: PUSH
64619: LD_EXP 70
64623: PUSH
64624: LD_VAR 0 2
64628: ARRAY
64629: PUSH
64630: LD_INT 2
64632: ARRAY
64633: NOT
64634: AND
64635: IFFALSE 64673
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
64637: LD_ADDR_EXP 71
64641: PUSH
64642: LD_EXP 71
64646: PPUSH
64647: LD_VAR 0 2
64651: PPUSH
64652: EMPTY
64653: PPUSH
64654: CALL_OW 1
64658: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
64659: LD_VAR 0 2
64663: PPUSH
64664: LD_INT 102
64666: PPUSH
64667: CALL 63386 0 2
// continue ;
64671: GO 64600
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
64673: LD_ADDR_VAR 0 4
64677: PUSH
64678: LD_EXP 67
64682: PUSH
64683: LD_VAR 0 2
64687: ARRAY
64688: PPUSH
64689: LD_INT 25
64691: PUSH
64692: LD_INT 4
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PPUSH
64699: CALL_OW 72
64703: ST_TO_ADDR
// if not tmp then
64704: LD_VAR 0 4
64708: NOT
64709: IFFALSE 64713
// continue ;
64711: GO 64600
// if mc_taming [ i ] then
64713: LD_EXP 98
64717: PUSH
64718: LD_VAR 0 2
64722: ARRAY
64723: IFFALSE 64747
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64725: LD_ADDR_EXP 98
64729: PUSH
64730: LD_EXP 98
64734: PPUSH
64735: LD_VAR 0 2
64739: PPUSH
64740: EMPTY
64741: PPUSH
64742: CALL_OW 1
64746: ST_TO_ADDR
// for j in tmp do
64747: LD_ADDR_VAR 0 3
64751: PUSH
64752: LD_VAR 0 4
64756: PUSH
64757: FOR_IN
64758: IFFALSE 64981
// begin if IsInUnit ( j ) then
64760: LD_VAR 0 3
64764: PPUSH
64765: CALL_OW 310
64769: IFFALSE 64780
// ComExitBuilding ( j ) ;
64771: LD_VAR 0 3
64775: PPUSH
64776: CALL_OW 122
// if not j in mc_healers [ i ] then
64780: LD_VAR 0 3
64784: PUSH
64785: LD_EXP 71
64789: PUSH
64790: LD_VAR 0 2
64794: ARRAY
64795: IN
64796: NOT
64797: IFFALSE 64843
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64799: LD_ADDR_EXP 71
64803: PUSH
64804: LD_EXP 71
64808: PPUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_EXP 71
64818: PUSH
64819: LD_VAR 0 2
64823: ARRAY
64824: PUSH
64825: LD_INT 1
64827: PLUS
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PPUSH
64833: LD_VAR 0 3
64837: PPUSH
64838: CALL 25638 0 3
64842: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64843: LD_VAR 0 3
64847: PPUSH
64848: CALL_OW 110
64852: PUSH
64853: LD_INT 102
64855: NONEQUAL
64856: IFFALSE 64870
// SetTag ( j , 102 ) ;
64858: LD_VAR 0 3
64862: PPUSH
64863: LD_INT 102
64865: PPUSH
64866: CALL_OW 109
// Wait ( 3 ) ;
64870: LD_INT 3
64872: PPUSH
64873: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64877: LD_EXP 70
64881: PUSH
64882: LD_VAR 0 2
64886: ARRAY
64887: PUSH
64888: LD_INT 1
64890: ARRAY
64891: IFFALSE 64923
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64893: LD_VAR 0 3
64897: PPUSH
64898: LD_EXP 70
64902: PUSH
64903: LD_VAR 0 2
64907: ARRAY
64908: PUSH
64909: LD_INT 1
64911: ARRAY
64912: PUSH
64913: LD_INT 1
64915: ARRAY
64916: PPUSH
64917: CALL_OW 128
64921: GO 64979
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64923: LD_VAR 0 3
64927: PPUSH
64928: CALL_OW 314
64932: NOT
64933: PUSH
64934: LD_EXP 70
64938: PUSH
64939: LD_VAR 0 2
64943: ARRAY
64944: PUSH
64945: LD_INT 2
64947: ARRAY
64948: AND
64949: IFFALSE 64979
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64951: LD_VAR 0 3
64955: PPUSH
64956: LD_EXP 70
64960: PUSH
64961: LD_VAR 0 2
64965: ARRAY
64966: PUSH
64967: LD_INT 2
64969: ARRAY
64970: PUSH
64971: LD_INT 1
64973: ARRAY
64974: PPUSH
64975: CALL_OW 128
// end ;
64979: GO 64757
64981: POP
64982: POP
// end ;
64983: GO 64600
64985: POP
64986: POP
// end ;
64987: LD_VAR 0 1
64991: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64992: LD_INT 0
64994: PPUSH
64995: PPUSH
64996: PPUSH
64997: PPUSH
64998: PPUSH
// if not mc_bases then
64999: LD_EXP 67
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65977
// for i = 1 to mc_bases do
65008: LD_ADDR_VAR 0 2
65012: PUSH
65013: DOUBLE
65014: LD_INT 1
65016: DEC
65017: ST_TO_ADDR
65018: LD_EXP 67
65022: PUSH
65023: FOR_TO
65024: IFFALSE 65975
// begin if mc_scan [ i ] then
65026: LD_EXP 90
65030: PUSH
65031: LD_VAR 0 2
65035: ARRAY
65036: IFFALSE 65040
// continue ;
65038: GO 65023
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
65040: LD_EXP 72
65044: PUSH
65045: LD_VAR 0 2
65049: ARRAY
65050: NOT
65051: PUSH
65052: LD_EXP 74
65056: PUSH
65057: LD_VAR 0 2
65061: ARRAY
65062: NOT
65063: AND
65064: PUSH
65065: LD_EXP 73
65069: PUSH
65070: LD_VAR 0 2
65074: ARRAY
65075: AND
65076: IFFALSE 65114
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
65078: LD_ADDR_EXP 73
65082: PUSH
65083: LD_EXP 73
65087: PPUSH
65088: LD_VAR 0 2
65092: PPUSH
65093: EMPTY
65094: PPUSH
65095: CALL_OW 1
65099: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65100: LD_VAR 0 2
65104: PPUSH
65105: LD_INT 103
65107: PPUSH
65108: CALL 63386 0 2
// continue ;
65112: GO 65023
// end ; if mc_construct_list [ i ] then
65114: LD_EXP 74
65118: PUSH
65119: LD_VAR 0 2
65123: ARRAY
65124: IFFALSE 65344
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65126: LD_ADDR_VAR 0 4
65130: PUSH
65131: LD_EXP 67
65135: PUSH
65136: LD_VAR 0 2
65140: ARRAY
65141: PPUSH
65142: LD_INT 25
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PPUSH
65152: CALL_OW 72
65156: PUSH
65157: LD_EXP 69
65161: PUSH
65162: LD_VAR 0 2
65166: ARRAY
65167: DIFF
65168: ST_TO_ADDR
// if not tmp then
65169: LD_VAR 0 4
65173: NOT
65174: IFFALSE 65178
// continue ;
65176: GO 65023
// for j in tmp do
65178: LD_ADDR_VAR 0 3
65182: PUSH
65183: LD_VAR 0 4
65187: PUSH
65188: FOR_IN
65189: IFFALSE 65340
// begin if not mc_builders [ i ] then
65191: LD_EXP 73
65195: PUSH
65196: LD_VAR 0 2
65200: ARRAY
65201: NOT
65202: IFFALSE 65260
// begin SetTag ( j , 103 ) ;
65204: LD_VAR 0 3
65208: PPUSH
65209: LD_INT 103
65211: PPUSH
65212: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65216: LD_ADDR_EXP 73
65220: PUSH
65221: LD_EXP 73
65225: PPUSH
65226: LD_VAR 0 2
65230: PUSH
65231: LD_EXP 73
65235: PUSH
65236: LD_VAR 0 2
65240: ARRAY
65241: PUSH
65242: LD_INT 1
65244: PLUS
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PPUSH
65250: LD_VAR 0 3
65254: PPUSH
65255: CALL 25638 0 3
65259: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65260: LD_VAR 0 3
65264: PPUSH
65265: CALL_OW 310
65269: IFFALSE 65280
// ComExitBuilding ( j ) ;
65271: LD_VAR 0 3
65275: PPUSH
65276: CALL_OW 122
// wait ( 3 ) ;
65280: LD_INT 3
65282: PPUSH
65283: CALL_OW 67
// if not mc_construct_list [ i ] then
65287: LD_EXP 74
65291: PUSH
65292: LD_VAR 0 2
65296: ARRAY
65297: NOT
65298: IFFALSE 65302
// break ;
65300: GO 65340
// if not HasTask ( j ) then
65302: LD_VAR 0 3
65306: PPUSH
65307: CALL_OW 314
65311: NOT
65312: IFFALSE 65338
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
65314: LD_VAR 0 3
65318: PPUSH
65319: LD_EXP 74
65323: PUSH
65324: LD_VAR 0 2
65328: ARRAY
65329: PUSH
65330: LD_INT 1
65332: ARRAY
65333: PPUSH
65334: CALL 28074 0 2
// end ;
65338: GO 65188
65340: POP
65341: POP
// end else
65342: GO 65973
// if mc_build_list [ i ] then
65344: LD_EXP 72
65348: PUSH
65349: LD_VAR 0 2
65353: ARRAY
65354: IFFALSE 65973
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65356: LD_ADDR_VAR 0 5
65360: PUSH
65361: LD_EXP 67
65365: PUSH
65366: LD_VAR 0 2
65370: ARRAY
65371: PPUSH
65372: LD_INT 2
65374: PUSH
65375: LD_INT 30
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 30
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: PPUSH
65400: CALL_OW 72
65404: ST_TO_ADDR
// if depot then
65405: LD_VAR 0 5
65409: IFFALSE 65427
// depot := depot [ 1 ] else
65411: LD_ADDR_VAR 0 5
65415: PUSH
65416: LD_VAR 0 5
65420: PUSH
65421: LD_INT 1
65423: ARRAY
65424: ST_TO_ADDR
65425: GO 65435
// depot := 0 ;
65427: LD_ADDR_VAR 0 5
65431: PUSH
65432: LD_INT 0
65434: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
65435: LD_EXP 72
65439: PUSH
65440: LD_VAR 0 2
65444: ARRAY
65445: PUSH
65446: LD_INT 1
65448: ARRAY
65449: PUSH
65450: LD_INT 1
65452: ARRAY
65453: PUSH
65454: LD_INT 0
65456: EQUAL
65457: PUSH
65458: LD_VAR 0 5
65462: PUSH
65463: LD_VAR 0 5
65467: PPUSH
65468: LD_EXP 72
65472: PUSH
65473: LD_VAR 0 2
65477: ARRAY
65478: PUSH
65479: LD_INT 1
65481: ARRAY
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PPUSH
65487: LD_EXP 72
65491: PUSH
65492: LD_VAR 0 2
65496: ARRAY
65497: PUSH
65498: LD_INT 1
65500: ARRAY
65501: PUSH
65502: LD_INT 2
65504: ARRAY
65505: PPUSH
65506: LD_EXP 72
65510: PUSH
65511: LD_VAR 0 2
65515: ARRAY
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: PUSH
65521: LD_INT 3
65523: ARRAY
65524: PPUSH
65525: LD_EXP 72
65529: PUSH
65530: LD_VAR 0 2
65534: ARRAY
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PUSH
65540: LD_INT 4
65542: ARRAY
65543: PPUSH
65544: CALL 32426 0 5
65548: AND
65549: OR
65550: IFFALSE 65831
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65552: LD_ADDR_VAR 0 4
65556: PUSH
65557: LD_EXP 67
65561: PUSH
65562: LD_VAR 0 2
65566: ARRAY
65567: PPUSH
65568: LD_INT 25
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PPUSH
65578: CALL_OW 72
65582: PUSH
65583: LD_EXP 69
65587: PUSH
65588: LD_VAR 0 2
65592: ARRAY
65593: DIFF
65594: ST_TO_ADDR
// if not tmp then
65595: LD_VAR 0 4
65599: NOT
65600: IFFALSE 65604
// continue ;
65602: GO 65023
// for j in tmp do
65604: LD_ADDR_VAR 0 3
65608: PUSH
65609: LD_VAR 0 4
65613: PUSH
65614: FOR_IN
65615: IFFALSE 65827
// begin if not mc_builders [ i ] then
65617: LD_EXP 73
65621: PUSH
65622: LD_VAR 0 2
65626: ARRAY
65627: NOT
65628: IFFALSE 65686
// begin SetTag ( j , 103 ) ;
65630: LD_VAR 0 3
65634: PPUSH
65635: LD_INT 103
65637: PPUSH
65638: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65642: LD_ADDR_EXP 73
65646: PUSH
65647: LD_EXP 73
65651: PPUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_EXP 73
65661: PUSH
65662: LD_VAR 0 2
65666: ARRAY
65667: PUSH
65668: LD_INT 1
65670: PLUS
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: LD_VAR 0 3
65680: PPUSH
65681: CALL 25638 0 3
65685: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65686: LD_VAR 0 3
65690: PPUSH
65691: CALL_OW 310
65695: IFFALSE 65706
// ComExitBuilding ( j ) ;
65697: LD_VAR 0 3
65701: PPUSH
65702: CALL_OW 122
// wait ( 3 ) ;
65706: LD_INT 3
65708: PPUSH
65709: CALL_OW 67
// if not mc_build_list [ i ] then
65713: LD_EXP 72
65717: PUSH
65718: LD_VAR 0 2
65722: ARRAY
65723: NOT
65724: IFFALSE 65728
// break ;
65726: GO 65827
// if not HasTask ( j ) then
65728: LD_VAR 0 3
65732: PPUSH
65733: CALL_OW 314
65737: NOT
65738: IFFALSE 65825
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65740: LD_VAR 0 3
65744: PPUSH
65745: LD_EXP 72
65749: PUSH
65750: LD_VAR 0 2
65754: ARRAY
65755: PUSH
65756: LD_INT 1
65758: ARRAY
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: PPUSH
65764: LD_EXP 72
65768: PUSH
65769: LD_VAR 0 2
65773: ARRAY
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PUSH
65779: LD_INT 2
65781: ARRAY
65782: PPUSH
65783: LD_EXP 72
65787: PUSH
65788: LD_VAR 0 2
65792: ARRAY
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: PUSH
65798: LD_INT 3
65800: ARRAY
65801: PPUSH
65802: LD_EXP 72
65806: PUSH
65807: LD_VAR 0 2
65811: ARRAY
65812: PUSH
65813: LD_INT 1
65815: ARRAY
65816: PUSH
65817: LD_INT 4
65819: ARRAY
65820: PPUSH
65821: CALL_OW 145
// end ;
65825: GO 65614
65827: POP
65828: POP
// end else
65829: GO 65973
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65831: LD_EXP 67
65835: PUSH
65836: LD_VAR 0 2
65840: ARRAY
65841: PPUSH
65842: LD_EXP 72
65846: PUSH
65847: LD_VAR 0 2
65851: ARRAY
65852: PUSH
65853: LD_INT 1
65855: ARRAY
65856: PUSH
65857: LD_INT 1
65859: ARRAY
65860: PPUSH
65861: LD_EXP 72
65865: PUSH
65866: LD_VAR 0 2
65870: ARRAY
65871: PUSH
65872: LD_INT 1
65874: ARRAY
65875: PUSH
65876: LD_INT 2
65878: ARRAY
65879: PPUSH
65880: LD_EXP 72
65884: PUSH
65885: LD_VAR 0 2
65889: ARRAY
65890: PUSH
65891: LD_INT 1
65893: ARRAY
65894: PUSH
65895: LD_INT 3
65897: ARRAY
65898: PPUSH
65899: LD_EXP 72
65903: PUSH
65904: LD_VAR 0 2
65908: ARRAY
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PUSH
65914: LD_INT 4
65916: ARRAY
65917: PPUSH
65918: CALL 31857 0 5
65922: NOT
65923: IFFALSE 65973
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65925: LD_ADDR_EXP 72
65929: PUSH
65930: LD_EXP 72
65934: PPUSH
65935: LD_VAR 0 2
65939: PPUSH
65940: LD_EXP 72
65944: PUSH
65945: LD_VAR 0 2
65949: ARRAY
65950: PPUSH
65951: LD_INT 1
65953: PPUSH
65954: LD_INT 1
65956: NEG
65957: PPUSH
65958: LD_INT 0
65960: PPUSH
65961: CALL 24621 0 4
65965: PPUSH
65966: CALL_OW 1
65970: ST_TO_ADDR
// continue ;
65971: GO 65023
// end ; end ; end ;
65973: GO 65023
65975: POP
65976: POP
// end ;
65977: LD_VAR 0 1
65981: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
65986: PPUSH
65987: PPUSH
65988: PPUSH
65989: PPUSH
// if not mc_bases then
65990: LD_EXP 67
65994: NOT
65995: IFFALSE 65999
// exit ;
65997: GO 66426
// for i = 1 to mc_bases do
65999: LD_ADDR_VAR 0 2
66003: PUSH
66004: DOUBLE
66005: LD_INT 1
66007: DEC
66008: ST_TO_ADDR
66009: LD_EXP 67
66013: PUSH
66014: FOR_TO
66015: IFFALSE 66424
// begin tmp := mc_build_upgrade [ i ] ;
66017: LD_ADDR_VAR 0 4
66021: PUSH
66022: LD_EXP 99
66026: PUSH
66027: LD_VAR 0 2
66031: ARRAY
66032: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
66033: LD_ADDR_VAR 0 6
66037: PUSH
66038: LD_EXP 100
66042: PUSH
66043: LD_VAR 0 2
66047: ARRAY
66048: PPUSH
66049: LD_INT 2
66051: PUSH
66052: LD_INT 30
66054: PUSH
66055: LD_INT 6
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 30
66064: PUSH
66065: LD_INT 7
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: PPUSH
66077: CALL_OW 72
66081: ST_TO_ADDR
// if not tmp and not lab then
66082: LD_VAR 0 4
66086: NOT
66087: PUSH
66088: LD_VAR 0 6
66092: NOT
66093: AND
66094: IFFALSE 66098
// continue ;
66096: GO 66014
// if tmp then
66098: LD_VAR 0 4
66102: IFFALSE 66222
// for j in tmp do
66104: LD_ADDR_VAR 0 3
66108: PUSH
66109: LD_VAR 0 4
66113: PUSH
66114: FOR_IN
66115: IFFALSE 66220
// begin if UpgradeCost ( j ) then
66117: LD_VAR 0 3
66121: PPUSH
66122: CALL 31517 0 1
66126: IFFALSE 66218
// begin ComUpgrade ( j ) ;
66128: LD_VAR 0 3
66132: PPUSH
66133: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
66137: LD_ADDR_EXP 99
66141: PUSH
66142: LD_EXP 99
66146: PPUSH
66147: LD_VAR 0 2
66151: PPUSH
66152: LD_EXP 99
66156: PUSH
66157: LD_VAR 0 2
66161: ARRAY
66162: PUSH
66163: LD_VAR 0 3
66167: DIFF
66168: PPUSH
66169: CALL_OW 1
66173: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66174: LD_ADDR_EXP 74
66178: PUSH
66179: LD_EXP 74
66183: PPUSH
66184: LD_VAR 0 2
66188: PUSH
66189: LD_EXP 74
66193: PUSH
66194: LD_VAR 0 2
66198: ARRAY
66199: PUSH
66200: LD_INT 1
66202: PLUS
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PPUSH
66208: LD_VAR 0 3
66212: PPUSH
66213: CALL 25638 0 3
66217: ST_TO_ADDR
// end ; end ;
66218: GO 66114
66220: POP
66221: POP
// if not lab or not mc_lab_upgrade [ i ] then
66222: LD_VAR 0 6
66226: NOT
66227: PUSH
66228: LD_EXP 101
66232: PUSH
66233: LD_VAR 0 2
66237: ARRAY
66238: NOT
66239: OR
66240: IFFALSE 66244
// continue ;
66242: GO 66014
// for j in lab do
66244: LD_ADDR_VAR 0 3
66248: PUSH
66249: LD_VAR 0 6
66253: PUSH
66254: FOR_IN
66255: IFFALSE 66420
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
66257: LD_VAR 0 3
66261: PPUSH
66262: CALL_OW 266
66266: PUSH
66267: LD_INT 6
66269: PUSH
66270: LD_INT 7
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: IN
66277: PUSH
66278: LD_VAR 0 3
66282: PPUSH
66283: CALL_OW 461
66287: PUSH
66288: LD_INT 1
66290: NONEQUAL
66291: AND
66292: IFFALSE 66418
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
66294: LD_VAR 0 3
66298: PPUSH
66299: LD_EXP 101
66303: PUSH
66304: LD_VAR 0 2
66308: ARRAY
66309: PUSH
66310: LD_INT 1
66312: ARRAY
66313: PPUSH
66314: CALL 31722 0 2
66318: IFFALSE 66418
// begin ComCancel ( j ) ;
66320: LD_VAR 0 3
66324: PPUSH
66325: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
66329: LD_VAR 0 3
66333: PPUSH
66334: LD_EXP 101
66338: PUSH
66339: LD_VAR 0 2
66343: ARRAY
66344: PUSH
66345: LD_INT 1
66347: ARRAY
66348: PPUSH
66349: CALL_OW 207
// if not j in mc_construct_list [ i ] then
66353: LD_VAR 0 3
66357: PUSH
66358: LD_EXP 74
66362: PUSH
66363: LD_VAR 0 2
66367: ARRAY
66368: IN
66369: NOT
66370: IFFALSE 66416
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66372: LD_ADDR_EXP 74
66376: PUSH
66377: LD_EXP 74
66381: PPUSH
66382: LD_VAR 0 2
66386: PUSH
66387: LD_EXP 74
66391: PUSH
66392: LD_VAR 0 2
66396: ARRAY
66397: PUSH
66398: LD_INT 1
66400: PLUS
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PPUSH
66406: LD_VAR 0 3
66410: PPUSH
66411: CALL 25638 0 3
66415: ST_TO_ADDR
// break ;
66416: GO 66420
// end ; end ; end ;
66418: GO 66254
66420: POP
66421: POP
// end ;
66422: GO 66014
66424: POP
66425: POP
// end ;
66426: LD_VAR 0 1
66430: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
66431: LD_INT 0
66433: PPUSH
66434: PPUSH
66435: PPUSH
66436: PPUSH
66437: PPUSH
66438: PPUSH
66439: PPUSH
// if not mc_bases then
66440: LD_EXP 67
66444: NOT
66445: IFFALSE 66449
// exit ;
66447: GO 66778
// for i = 1 to mc_bases do
66449: LD_ADDR_VAR 0 2
66453: PUSH
66454: DOUBLE
66455: LD_INT 1
66457: DEC
66458: ST_TO_ADDR
66459: LD_EXP 67
66463: PUSH
66464: FOR_TO
66465: IFFALSE 66776
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
66467: LD_EXP 75
66471: PUSH
66472: LD_VAR 0 2
66476: ARRAY
66477: NOT
66478: PUSH
66479: LD_EXP 67
66483: PUSH
66484: LD_VAR 0 2
66488: ARRAY
66489: PPUSH
66490: LD_INT 30
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PPUSH
66500: CALL_OW 72
66504: NOT
66505: OR
66506: IFFALSE 66510
// continue ;
66508: GO 66464
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
66510: LD_EXP 75
66514: PUSH
66515: LD_VAR 0 2
66519: ARRAY
66520: PUSH
66521: LD_INT 1
66523: ARRAY
66524: PPUSH
66525: CALL_OW 269
66529: IFFALSE 66595
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
66531: LD_ADDR_VAR 0 4
66535: PUSH
66536: LD_EXP 75
66540: PUSH
66541: LD_VAR 0 2
66545: ARRAY
66546: PPUSH
66547: LD_INT 1
66549: PPUSH
66550: CALL_OW 3
66554: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
66555: LD_ADDR_EXP 75
66559: PUSH
66560: LD_EXP 75
66564: PPUSH
66565: LD_VAR 0 2
66569: PPUSH
66570: LD_VAR 0 4
66574: PPUSH
66575: CALL_OW 1
66579: ST_TO_ADDR
// if not mc_turret_list [ i ] then
66580: LD_EXP 75
66584: PUSH
66585: LD_VAR 0 2
66589: ARRAY
66590: NOT
66591: IFFALSE 66595
// continue ;
66593: GO 66464
// end ; busy := false ;
66595: LD_ADDR_VAR 0 6
66599: PUSH
66600: LD_INT 0
66602: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66603: LD_ADDR_VAR 0 4
66607: PUSH
66608: LD_EXP 67
66612: PUSH
66613: LD_VAR 0 2
66617: ARRAY
66618: PPUSH
66619: LD_INT 30
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PPUSH
66629: CALL_OW 72
66633: ST_TO_ADDR
// for j in tmp do
66634: LD_ADDR_VAR 0 3
66638: PUSH
66639: LD_VAR 0 4
66643: PUSH
66644: FOR_IN
66645: IFFALSE 66673
// if not BuildingStatus ( j ) = bs_idle then
66647: LD_VAR 0 3
66651: PPUSH
66652: CALL_OW 461
66656: PUSH
66657: LD_INT 2
66659: EQUAL
66660: NOT
66661: IFFALSE 66671
// busy := true ;
66663: LD_ADDR_VAR 0 6
66667: PUSH
66668: LD_INT 1
66670: ST_TO_ADDR
66671: GO 66644
66673: POP
66674: POP
// if busy then
66675: LD_VAR 0 6
66679: IFFALSE 66683
// continue ;
66681: GO 66464
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
66683: LD_ADDR_VAR 0 7
66687: PUSH
66688: LD_EXP 75
66692: PUSH
66693: LD_VAR 0 2
66697: ARRAY
66698: PUSH
66699: LD_INT 1
66701: ARRAY
66702: PPUSH
66703: CALL 30081 0 1
66707: ST_TO_ADDR
// if not weapon then
66708: LD_VAR 0 7
66712: NOT
66713: IFFALSE 66717
// continue ;
66715: GO 66464
// if mc_allowed_tower_weapons [ i ] then
66717: LD_EXP 105
66721: PUSH
66722: LD_VAR 0 2
66726: ARRAY
66727: IFFALSE 66750
// if not weapon in mc_allowed_tower_weapons [ i ] then
66729: LD_VAR 0 7
66733: PUSH
66734: LD_EXP 105
66738: PUSH
66739: LD_VAR 0 2
66743: ARRAY
66744: IN
66745: NOT
66746: IFFALSE 66750
// continue ;
66748: GO 66464
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
66750: LD_EXP 75
66754: PUSH
66755: LD_VAR 0 2
66759: ARRAY
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PPUSH
66765: LD_VAR 0 7
66769: PPUSH
66770: CALL_OW 148
// end ;
66774: GO 66464
66776: POP
66777: POP
// end ;
66778: LD_VAR 0 1
66782: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
// if not mc_bases then
66791: LD_EXP 67
66795: NOT
66796: IFFALSE 66800
// exit ;
66798: GO 67785
// for i = 1 to mc_bases do
66800: LD_ADDR_VAR 0 2
66804: PUSH
66805: DOUBLE
66806: LD_INT 1
66808: DEC
66809: ST_TO_ADDR
66810: LD_EXP 67
66814: PUSH
66815: FOR_TO
66816: IFFALSE 67783
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
66818: LD_EXP 80
66822: PUSH
66823: LD_VAR 0 2
66827: ARRAY
66828: NOT
66829: PUSH
66830: LD_EXP 80
66834: PUSH
66835: LD_VAR 0 2
66839: ARRAY
66840: PUSH
66841: LD_EXP 81
66845: PUSH
66846: LD_VAR 0 2
66850: ARRAY
66851: EQUAL
66852: OR
66853: IFFALSE 66857
// continue ;
66855: GO 66815
// if mc_miners [ i ] then
66857: LD_EXP 81
66861: PUSH
66862: LD_VAR 0 2
66866: ARRAY
66867: IFFALSE 67470
// begin k := 1 ;
66869: LD_ADDR_VAR 0 4
66873: PUSH
66874: LD_INT 1
66876: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
66877: LD_ADDR_VAR 0 3
66881: PUSH
66882: DOUBLE
66883: LD_EXP 81
66887: PUSH
66888: LD_VAR 0 2
66892: ARRAY
66893: INC
66894: ST_TO_ADDR
66895: LD_INT 1
66897: PUSH
66898: FOR_DOWNTO
66899: IFFALSE 67468
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
66901: LD_EXP 81
66905: PUSH
66906: LD_VAR 0 2
66910: ARRAY
66911: PUSH
66912: LD_VAR 0 3
66916: ARRAY
66917: PPUSH
66918: CALL_OW 301
66922: IFFALSE 66985
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66924: LD_ADDR_VAR 0 5
66928: PUSH
66929: LD_EXP 81
66933: PUSH
66934: LD_VAR 0 2
66938: ARRAY
66939: PUSH
66940: LD_EXP 81
66944: PUSH
66945: LD_VAR 0 2
66949: ARRAY
66950: PUSH
66951: LD_VAR 0 3
66955: ARRAY
66956: DIFF
66957: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66958: LD_ADDR_EXP 81
66962: PUSH
66963: LD_EXP 81
66967: PPUSH
66968: LD_VAR 0 2
66972: PPUSH
66973: LD_VAR 0 5
66977: PPUSH
66978: CALL_OW 1
66982: ST_TO_ADDR
// continue ;
66983: GO 66898
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
66985: LD_EXP 81
66989: PUSH
66990: LD_VAR 0 2
66994: ARRAY
66995: PUSH
66996: LD_VAR 0 3
67000: ARRAY
67001: PPUSH
67002: CALL 25139 0 1
67006: PUSH
67007: LD_EXP 81
67011: PUSH
67012: LD_VAR 0 2
67016: ARRAY
67017: PUSH
67018: LD_VAR 0 3
67022: ARRAY
67023: PPUSH
67024: CALL_OW 255
67028: PPUSH
67029: LD_EXP 80
67033: PUSH
67034: LD_VAR 0 2
67038: ARRAY
67039: PUSH
67040: LD_VAR 0 4
67044: ARRAY
67045: PUSH
67046: LD_INT 1
67048: ARRAY
67049: PPUSH
67050: LD_EXP 80
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_VAR 0 4
67065: ARRAY
67066: PUSH
67067: LD_INT 2
67069: ARRAY
67070: PPUSH
67071: LD_INT 15
67073: PPUSH
67074: CALL 26132 0 4
67078: PUSH
67079: LD_INT 4
67081: ARRAY
67082: PUSH
67083: LD_EXP 81
67087: PUSH
67088: LD_VAR 0 2
67092: ARRAY
67093: PUSH
67094: LD_VAR 0 3
67098: ARRAY
67099: PPUSH
67100: LD_INT 10
67102: PPUSH
67103: CALL 27829 0 2
67107: PUSH
67108: LD_INT 4
67110: ARRAY
67111: OR
67112: AND
67113: IFFALSE 67136
// ComStop ( mc_miners [ i ] [ j ] ) ;
67115: LD_EXP 81
67119: PUSH
67120: LD_VAR 0 2
67124: ARRAY
67125: PUSH
67126: LD_VAR 0 3
67130: ARRAY
67131: PPUSH
67132: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
67136: LD_EXP 81
67140: PUSH
67141: LD_VAR 0 2
67145: ARRAY
67146: PUSH
67147: LD_VAR 0 3
67151: ARRAY
67152: PPUSH
67153: CALL_OW 257
67157: PUSH
67158: LD_INT 1
67160: EQUAL
67161: PUSH
67162: LD_EXP 81
67166: PUSH
67167: LD_VAR 0 2
67171: ARRAY
67172: PUSH
67173: LD_VAR 0 3
67177: ARRAY
67178: PPUSH
67179: CALL_OW 459
67183: NOT
67184: AND
67185: PUSH
67186: LD_EXP 81
67190: PUSH
67191: LD_VAR 0 2
67195: ARRAY
67196: PUSH
67197: LD_VAR 0 3
67201: ARRAY
67202: PPUSH
67203: CALL_OW 255
67207: PPUSH
67208: LD_EXP 80
67212: PUSH
67213: LD_VAR 0 2
67217: ARRAY
67218: PUSH
67219: LD_VAR 0 4
67223: ARRAY
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: PPUSH
67229: LD_EXP 80
67233: PUSH
67234: LD_VAR 0 2
67238: ARRAY
67239: PUSH
67240: LD_VAR 0 4
67244: ARRAY
67245: PUSH
67246: LD_INT 2
67248: ARRAY
67249: PPUSH
67250: LD_INT 15
67252: PPUSH
67253: CALL 26132 0 4
67257: PUSH
67258: LD_INT 4
67260: ARRAY
67261: PUSH
67262: LD_INT 0
67264: EQUAL
67265: AND
67266: PUSH
67267: LD_EXP 81
67271: PUSH
67272: LD_VAR 0 2
67276: ARRAY
67277: PUSH
67278: LD_VAR 0 3
67282: ARRAY
67283: PPUSH
67284: CALL_OW 314
67288: NOT
67289: AND
67290: IFFALSE 67466
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
67292: LD_EXP 81
67296: PUSH
67297: LD_VAR 0 2
67301: ARRAY
67302: PUSH
67303: LD_VAR 0 3
67307: ARRAY
67308: PPUSH
67309: CALL_OW 310
67313: IFFALSE 67336
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
67315: LD_EXP 81
67319: PUSH
67320: LD_VAR 0 2
67324: ARRAY
67325: PUSH
67326: LD_VAR 0 3
67330: ARRAY
67331: PPUSH
67332: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
67336: LD_EXP 81
67340: PUSH
67341: LD_VAR 0 2
67345: ARRAY
67346: PUSH
67347: LD_VAR 0 3
67351: ARRAY
67352: PPUSH
67353: CALL_OW 314
67357: NOT
67358: IFFALSE 67426
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
67360: LD_EXP 81
67364: PUSH
67365: LD_VAR 0 2
67369: ARRAY
67370: PUSH
67371: LD_VAR 0 3
67375: ARRAY
67376: PPUSH
67377: LD_EXP 80
67381: PUSH
67382: LD_VAR 0 2
67386: ARRAY
67387: PUSH
67388: LD_VAR 0 4
67392: ARRAY
67393: PUSH
67394: LD_INT 1
67396: ARRAY
67397: PPUSH
67398: LD_EXP 80
67402: PUSH
67403: LD_VAR 0 2
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 4
67413: ARRAY
67414: PUSH
67415: LD_INT 2
67417: ARRAY
67418: PPUSH
67419: LD_INT 0
67421: PPUSH
67422: CALL_OW 193
// k := k + 1 ;
67426: LD_ADDR_VAR 0 4
67430: PUSH
67431: LD_VAR 0 4
67435: PUSH
67436: LD_INT 1
67438: PLUS
67439: ST_TO_ADDR
// if k > mc_mines [ i ] then
67440: LD_VAR 0 4
67444: PUSH
67445: LD_EXP 80
67449: PUSH
67450: LD_VAR 0 2
67454: ARRAY
67455: GREATER
67456: IFFALSE 67466
// k := 1 ;
67458: LD_ADDR_VAR 0 4
67462: PUSH
67463: LD_INT 1
67465: ST_TO_ADDR
// end ; end ;
67466: GO 66898
67468: POP
67469: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67470: LD_ADDR_VAR 0 5
67474: PUSH
67475: LD_EXP 67
67479: PUSH
67480: LD_VAR 0 2
67484: ARRAY
67485: PPUSH
67486: LD_INT 2
67488: PUSH
67489: LD_INT 30
67491: PUSH
67492: LD_INT 4
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 30
67501: PUSH
67502: LD_INT 5
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 30
67511: PUSH
67512: LD_INT 32
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: PPUSH
67525: CALL_OW 72
67529: ST_TO_ADDR
// if not tmp then
67530: LD_VAR 0 5
67534: NOT
67535: IFFALSE 67539
// continue ;
67537: GO 66815
// list := [ ] ;
67539: LD_ADDR_VAR 0 6
67543: PUSH
67544: EMPTY
67545: ST_TO_ADDR
// for j in tmp do
67546: LD_ADDR_VAR 0 3
67550: PUSH
67551: LD_VAR 0 5
67555: PUSH
67556: FOR_IN
67557: IFFALSE 67626
// begin for k in UnitsInside ( j ) do
67559: LD_ADDR_VAR 0 4
67563: PUSH
67564: LD_VAR 0 3
67568: PPUSH
67569: CALL_OW 313
67573: PUSH
67574: FOR_IN
67575: IFFALSE 67622
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67577: LD_VAR 0 4
67581: PPUSH
67582: CALL_OW 257
67586: PUSH
67587: LD_INT 1
67589: EQUAL
67590: PUSH
67591: LD_VAR 0 4
67595: PPUSH
67596: CALL_OW 459
67600: NOT
67601: AND
67602: IFFALSE 67620
// list := list ^ k ;
67604: LD_ADDR_VAR 0 6
67608: PUSH
67609: LD_VAR 0 6
67613: PUSH
67614: LD_VAR 0 4
67618: ADD
67619: ST_TO_ADDR
67620: GO 67574
67622: POP
67623: POP
// end ;
67624: GO 67556
67626: POP
67627: POP
// list := list diff mc_miners [ i ] ;
67628: LD_ADDR_VAR 0 6
67632: PUSH
67633: LD_VAR 0 6
67637: PUSH
67638: LD_EXP 81
67642: PUSH
67643: LD_VAR 0 2
67647: ARRAY
67648: DIFF
67649: ST_TO_ADDR
// if not list then
67650: LD_VAR 0 6
67654: NOT
67655: IFFALSE 67659
// continue ;
67657: GO 66815
// k := mc_mines [ i ] - mc_miners [ i ] ;
67659: LD_ADDR_VAR 0 4
67663: PUSH
67664: LD_EXP 80
67668: PUSH
67669: LD_VAR 0 2
67673: ARRAY
67674: PUSH
67675: LD_EXP 81
67679: PUSH
67680: LD_VAR 0 2
67684: ARRAY
67685: MINUS
67686: ST_TO_ADDR
// if k > list then
67687: LD_VAR 0 4
67691: PUSH
67692: LD_VAR 0 6
67696: GREATER
67697: IFFALSE 67709
// k := list ;
67699: LD_ADDR_VAR 0 4
67703: PUSH
67704: LD_VAR 0 6
67708: ST_TO_ADDR
// for j = 1 to k do
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: DOUBLE
67715: LD_INT 1
67717: DEC
67718: ST_TO_ADDR
67719: LD_VAR 0 4
67723: PUSH
67724: FOR_TO
67725: IFFALSE 67779
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67727: LD_ADDR_EXP 81
67731: PUSH
67732: LD_EXP 81
67736: PPUSH
67737: LD_VAR 0 2
67741: PUSH
67742: LD_EXP 81
67746: PUSH
67747: LD_VAR 0 2
67751: ARRAY
67752: PUSH
67753: LD_INT 1
67755: PLUS
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PPUSH
67761: LD_VAR 0 6
67765: PUSH
67766: LD_VAR 0 3
67770: ARRAY
67771: PPUSH
67772: CALL 25638 0 3
67776: ST_TO_ADDR
67777: GO 67724
67779: POP
67780: POP
// end ;
67781: GO 66815
67783: POP
67784: POP
// end ;
67785: LD_VAR 0 1
67789: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
67790: LD_INT 0
67792: PPUSH
67793: PPUSH
67794: PPUSH
67795: PPUSH
67796: PPUSH
67797: PPUSH
67798: PPUSH
67799: PPUSH
67800: PPUSH
// if not mc_bases then
67801: LD_EXP 67
67805: NOT
67806: IFFALSE 67810
// exit ;
67808: GO 69289
// for i = 1 to mc_bases do
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: DOUBLE
67816: LD_INT 1
67818: DEC
67819: ST_TO_ADDR
67820: LD_EXP 67
67824: PUSH
67825: FOR_TO
67826: IFFALSE 69287
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67828: LD_EXP 67
67832: PUSH
67833: LD_VAR 0 2
67837: ARRAY
67838: NOT
67839: PUSH
67840: LD_EXP 74
67844: PUSH
67845: LD_VAR 0 2
67849: ARRAY
67850: OR
67851: IFFALSE 67855
// continue ;
67853: GO 67825
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67855: LD_EXP 83
67859: PUSH
67860: LD_VAR 0 2
67864: ARRAY
67865: NOT
67866: PUSH
67867: LD_EXP 84
67871: PUSH
67872: LD_VAR 0 2
67876: ARRAY
67877: AND
67878: IFFALSE 67916
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67880: LD_ADDR_EXP 84
67884: PUSH
67885: LD_EXP 84
67889: PPUSH
67890: LD_VAR 0 2
67894: PPUSH
67895: EMPTY
67896: PPUSH
67897: CALL_OW 1
67901: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67902: LD_VAR 0 2
67906: PPUSH
67907: LD_INT 107
67909: PPUSH
67910: CALL 63386 0 2
// continue ;
67914: GO 67825
// end ; target := [ ] ;
67916: LD_ADDR_VAR 0 5
67920: PUSH
67921: EMPTY
67922: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67923: LD_ADDR_VAR 0 3
67927: PUSH
67928: DOUBLE
67929: LD_EXP 83
67933: PUSH
67934: LD_VAR 0 2
67938: ARRAY
67939: INC
67940: ST_TO_ADDR
67941: LD_INT 1
67943: PUSH
67944: FOR_DOWNTO
67945: IFFALSE 68205
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67947: LD_EXP 83
67951: PUSH
67952: LD_VAR 0 2
67956: ARRAY
67957: PUSH
67958: LD_VAR 0 3
67962: ARRAY
67963: PUSH
67964: LD_INT 2
67966: ARRAY
67967: PPUSH
67968: LD_EXP 83
67972: PUSH
67973: LD_VAR 0 2
67977: ARRAY
67978: PUSH
67979: LD_VAR 0 3
67983: ARRAY
67984: PUSH
67985: LD_INT 3
67987: ARRAY
67988: PPUSH
67989: CALL_OW 488
67993: PUSH
67994: LD_EXP 83
67998: PUSH
67999: LD_VAR 0 2
68003: ARRAY
68004: PUSH
68005: LD_VAR 0 3
68009: ARRAY
68010: PUSH
68011: LD_INT 2
68013: ARRAY
68014: PPUSH
68015: LD_EXP 83
68019: PUSH
68020: LD_VAR 0 2
68024: ARRAY
68025: PUSH
68026: LD_VAR 0 3
68030: ARRAY
68031: PUSH
68032: LD_INT 3
68034: ARRAY
68035: PPUSH
68036: CALL_OW 284
68040: PUSH
68041: LD_INT 0
68043: EQUAL
68044: AND
68045: IFFALSE 68100
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
68047: LD_ADDR_VAR 0 4
68051: PUSH
68052: LD_EXP 83
68056: PUSH
68057: LD_VAR 0 2
68061: ARRAY
68062: PPUSH
68063: LD_VAR 0 3
68067: PPUSH
68068: CALL_OW 3
68072: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
68073: LD_ADDR_EXP 83
68077: PUSH
68078: LD_EXP 83
68082: PPUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: LD_VAR 0 4
68092: PPUSH
68093: CALL_OW 1
68097: ST_TO_ADDR
// continue ;
68098: GO 67944
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
68100: LD_EXP 67
68104: PUSH
68105: LD_VAR 0 2
68109: ARRAY
68110: PUSH
68111: LD_INT 1
68113: ARRAY
68114: PPUSH
68115: CALL_OW 255
68119: PPUSH
68120: LD_EXP 83
68124: PUSH
68125: LD_VAR 0 2
68129: ARRAY
68130: PUSH
68131: LD_VAR 0 3
68135: ARRAY
68136: PUSH
68137: LD_INT 2
68139: ARRAY
68140: PPUSH
68141: LD_EXP 83
68145: PUSH
68146: LD_VAR 0 2
68150: ARRAY
68151: PUSH
68152: LD_VAR 0 3
68156: ARRAY
68157: PUSH
68158: LD_INT 3
68160: ARRAY
68161: PPUSH
68162: LD_INT 20
68164: PPUSH
68165: CALL 26132 0 4
68169: PUSH
68170: LD_INT 4
68172: ARRAY
68173: PUSH
68174: LD_INT 0
68176: EQUAL
68177: IFFALSE 68203
// begin target := mc_crates [ i ] [ j ] ;
68179: LD_ADDR_VAR 0 5
68183: PUSH
68184: LD_EXP 83
68188: PUSH
68189: LD_VAR 0 2
68193: ARRAY
68194: PUSH
68195: LD_VAR 0 3
68199: ARRAY
68200: ST_TO_ADDR
// break ;
68201: GO 68205
// end ; end ;
68203: GO 67944
68205: POP
68206: POP
// if not target then
68207: LD_VAR 0 5
68211: NOT
68212: IFFALSE 68216
// continue ;
68214: GO 67825
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
68216: LD_ADDR_VAR 0 6
68220: PUSH
68221: LD_EXP 86
68225: PUSH
68226: LD_VAR 0 2
68230: ARRAY
68231: PPUSH
68232: LD_INT 2
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: LD_INT 58
68240: PUSH
68241: EMPTY
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 61
68250: PUSH
68251: EMPTY
68252: LIST
68253: PUSH
68254: LD_INT 33
68256: PUSH
68257: LD_INT 5
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 33
68266: PUSH
68267: LD_INT 3
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 2
68283: PUSH
68284: LD_INT 34
68286: PUSH
68287: LD_INT 32
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 34
68296: PUSH
68297: LD_INT 51
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 34
68306: PUSH
68307: LD_INT 12
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PPUSH
68324: CALL_OW 72
68328: ST_TO_ADDR
// if not cargo then
68329: LD_VAR 0 6
68333: NOT
68334: IFFALSE 68822
// begin if mc_crates_collector [ i ] < 5 then
68336: LD_EXP 84
68340: PUSH
68341: LD_VAR 0 2
68345: ARRAY
68346: PUSH
68347: LD_INT 5
68349: LESS
68350: IFFALSE 68636
// begin if mc_ape [ i ] then
68352: LD_EXP 96
68356: PUSH
68357: LD_VAR 0 2
68361: ARRAY
68362: IFFALSE 68409
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
68364: LD_ADDR_VAR 0 4
68368: PUSH
68369: LD_EXP 96
68373: PUSH
68374: LD_VAR 0 2
68378: ARRAY
68379: PPUSH
68380: LD_INT 25
68382: PUSH
68383: LD_INT 16
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 24
68392: PUSH
68393: LD_INT 750
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PPUSH
68404: CALL_OW 72
68408: ST_TO_ADDR
// if not tmp then
68409: LD_VAR 0 4
68413: NOT
68414: IFFALSE 68463
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
68416: LD_ADDR_VAR 0 4
68420: PUSH
68421: LD_EXP 67
68425: PUSH
68426: LD_VAR 0 2
68430: ARRAY
68431: PPUSH
68432: LD_INT 25
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 24
68444: PUSH
68445: LD_INT 750
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PPUSH
68456: CALL_OW 72
68460: ST_TO_ADDR
68461: GO 68524
// if tmp < 5 then
68463: LD_VAR 0 4
68467: PUSH
68468: LD_INT 5
68470: LESS
68471: IFFALSE 68524
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
68473: LD_ADDR_VAR 0 4
68477: PUSH
68478: LD_VAR 0 4
68482: PUSH
68483: LD_EXP 67
68487: PUSH
68488: LD_VAR 0 2
68492: ARRAY
68493: PPUSH
68494: LD_INT 25
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 24
68506: PUSH
68507: LD_INT 750
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PPUSH
68518: CALL_OW 72
68522: UNION
68523: ST_TO_ADDR
// if not tmp then
68524: LD_VAR 0 4
68528: NOT
68529: IFFALSE 68533
// continue ;
68531: GO 67825
// for j in tmp do
68533: LD_ADDR_VAR 0 3
68537: PUSH
68538: LD_VAR 0 4
68542: PUSH
68543: FOR_IN
68544: IFFALSE 68634
// if not GetTag ( j ) then
68546: LD_VAR 0 3
68550: PPUSH
68551: CALL_OW 110
68555: NOT
68556: IFFALSE 68632
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68558: LD_ADDR_EXP 84
68562: PUSH
68563: LD_EXP 84
68567: PPUSH
68568: LD_VAR 0 2
68572: PUSH
68573: LD_EXP 84
68577: PUSH
68578: LD_VAR 0 2
68582: ARRAY
68583: PUSH
68584: LD_INT 1
68586: PLUS
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PPUSH
68592: LD_VAR 0 3
68596: PPUSH
68597: CALL 25638 0 3
68601: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68602: LD_VAR 0 3
68606: PPUSH
68607: LD_INT 107
68609: PPUSH
68610: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68614: LD_EXP 84
68618: PUSH
68619: LD_VAR 0 2
68623: ARRAY
68624: PUSH
68625: LD_INT 5
68627: GREATEREQUAL
68628: IFFALSE 68632
// break ;
68630: GO 68634
// end ;
68632: GO 68543
68634: POP
68635: POP
// end ; if mc_crates_collector [ i ] and target then
68636: LD_EXP 84
68640: PUSH
68641: LD_VAR 0 2
68645: ARRAY
68646: PUSH
68647: LD_VAR 0 5
68651: AND
68652: IFFALSE 68820
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68654: LD_EXP 84
68658: PUSH
68659: LD_VAR 0 2
68663: ARRAY
68664: PUSH
68665: LD_VAR 0 5
68669: PUSH
68670: LD_INT 1
68672: ARRAY
68673: LESS
68674: IFFALSE 68694
// tmp := mc_crates_collector [ i ] else
68676: LD_ADDR_VAR 0 4
68680: PUSH
68681: LD_EXP 84
68685: PUSH
68686: LD_VAR 0 2
68690: ARRAY
68691: ST_TO_ADDR
68692: GO 68708
// tmp := target [ 1 ] ;
68694: LD_ADDR_VAR 0 4
68698: PUSH
68699: LD_VAR 0 5
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: ST_TO_ADDR
// for j = 1 to tmp do
68708: LD_ADDR_VAR 0 3
68712: PUSH
68713: DOUBLE
68714: LD_INT 1
68716: DEC
68717: ST_TO_ADDR
68718: LD_VAR 0 4
68722: PUSH
68723: FOR_TO
68724: IFFALSE 68818
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
68726: LD_EXP 84
68730: PUSH
68731: LD_VAR 0 2
68735: ARRAY
68736: PUSH
68737: LD_VAR 0 3
68741: ARRAY
68742: PPUSH
68743: CALL_OW 310
68747: IFFALSE 68770
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
68749: LD_EXP 84
68753: PUSH
68754: LD_VAR 0 2
68758: ARRAY
68759: PUSH
68760: LD_VAR 0 3
68764: ARRAY
68765: PPUSH
68766: CALL_OW 122
// wait ( 3 ) ;
68770: LD_INT 3
68772: PPUSH
68773: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
68777: LD_EXP 84
68781: PUSH
68782: LD_VAR 0 2
68786: ARRAY
68787: PUSH
68788: LD_VAR 0 3
68792: ARRAY
68793: PPUSH
68794: LD_VAR 0 5
68798: PUSH
68799: LD_INT 2
68801: ARRAY
68802: PPUSH
68803: LD_VAR 0 5
68807: PUSH
68808: LD_INT 3
68810: ARRAY
68811: PPUSH
68812: CALL_OW 117
// end ;
68816: GO 68723
68818: POP
68819: POP
// end ; end else
68820: GO 69285
// begin for j in cargo do
68822: LD_ADDR_VAR 0 3
68826: PUSH
68827: LD_VAR 0 6
68831: PUSH
68832: FOR_IN
68833: IFFALSE 69283
// begin if GetTag ( j ) <> 0 then
68835: LD_VAR 0 3
68839: PPUSH
68840: CALL_OW 110
68844: PUSH
68845: LD_INT 0
68847: NONEQUAL
68848: IFFALSE 68852
// continue ;
68850: GO 68832
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68852: LD_VAR 0 3
68856: PPUSH
68857: CALL_OW 262
68861: PUSH
68862: LD_INT 2
68864: EQUAL
68865: PUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: CALL_OW 261
68875: PUSH
68876: LD_INT 15
68878: LESS
68879: AND
68880: IFFALSE 68884
// continue ;
68882: GO 68832
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68884: LD_VAR 0 3
68888: PPUSH
68889: CALL_OW 262
68893: PUSH
68894: LD_INT 1
68896: EQUAL
68897: PUSH
68898: LD_VAR 0 3
68902: PPUSH
68903: CALL_OW 261
68907: PUSH
68908: LD_INT 10
68910: LESS
68911: AND
68912: IFFALSE 69222
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68914: LD_ADDR_VAR 0 7
68918: PUSH
68919: LD_EXP 67
68923: PUSH
68924: LD_VAR 0 2
68928: ARRAY
68929: PPUSH
68930: LD_INT 2
68932: PUSH
68933: LD_INT 30
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 30
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: LIST
68957: PPUSH
68958: CALL_OW 72
68962: ST_TO_ADDR
// if not depot then
68963: LD_VAR 0 7
68967: NOT
68968: IFFALSE 68972
// continue ;
68970: GO 68832
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68972: LD_VAR 0 3
68976: PPUSH
68977: LD_VAR 0 7
68981: PPUSH
68982: LD_VAR 0 3
68986: PPUSH
68987: CALL_OW 74
68991: PPUSH
68992: CALL_OW 296
68996: PUSH
68997: LD_INT 6
68999: LESS
69000: IFFALSE 69016
// SetFuel ( j , 100 ) else
69002: LD_VAR 0 3
69006: PPUSH
69007: LD_INT 100
69009: PPUSH
69010: CALL_OW 240
69014: GO 69222
// if GetFuel ( j ) = 0 then
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL_OW 261
69025: PUSH
69026: LD_INT 0
69028: EQUAL
69029: IFFALSE 69222
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
69031: LD_ADDR_EXP 86
69035: PUSH
69036: LD_EXP 86
69040: PPUSH
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_EXP 86
69050: PUSH
69051: LD_VAR 0 2
69055: ARRAY
69056: PUSH
69057: LD_VAR 0 3
69061: DIFF
69062: PPUSH
69063: CALL_OW 1
69067: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
69068: LD_VAR 0 3
69072: PPUSH
69073: CALL_OW 263
69077: PUSH
69078: LD_INT 1
69080: EQUAL
69081: IFFALSE 69097
// ComExitVehicle ( IsInUnit ( j ) ) ;
69083: LD_VAR 0 3
69087: PPUSH
69088: CALL_OW 310
69092: PPUSH
69093: CALL_OW 121
// if GetControl ( j ) = control_remote then
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 263
69106: PUSH
69107: LD_INT 2
69109: EQUAL
69110: IFFALSE 69121
// ComUnlink ( j ) ;
69112: LD_VAR 0 3
69116: PPUSH
69117: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
69121: LD_ADDR_VAR 0 8
69125: PUSH
69126: LD_VAR 0 2
69130: PPUSH
69131: LD_INT 3
69133: PPUSH
69134: CALL 76918 0 2
69138: ST_TO_ADDR
// if fac then
69139: LD_VAR 0 8
69143: IFFALSE 69220
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
69145: LD_ADDR_VAR 0 9
69149: PUSH
69150: LD_VAR 0 8
69154: PPUSH
69155: LD_VAR 0 3
69159: PPUSH
69160: CALL_OW 265
69164: PPUSH
69165: LD_VAR 0 3
69169: PPUSH
69170: CALL_OW 262
69174: PPUSH
69175: LD_VAR 0 3
69179: PPUSH
69180: CALL_OW 263
69184: PPUSH
69185: LD_VAR 0 3
69189: PPUSH
69190: CALL_OW 264
69194: PPUSH
69195: CALL 22803 0 5
69199: ST_TO_ADDR
// if components then
69200: LD_VAR 0 9
69204: IFFALSE 69220
// MC_InsertProduceList ( i , components ) ;
69206: LD_VAR 0 2
69210: PPUSH
69211: LD_VAR 0 9
69215: PPUSH
69216: CALL 76485 0 2
// end ; continue ;
69220: GO 68832
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69222: LD_VAR 0 3
69226: PPUSH
69227: LD_INT 1
69229: PPUSH
69230: CALL_OW 289
69234: PUSH
69235: LD_INT 100
69237: LESS
69238: PUSH
69239: LD_VAR 0 3
69243: PPUSH
69244: CALL_OW 314
69248: NOT
69249: AND
69250: IFFALSE 69279
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69252: LD_VAR 0 3
69256: PPUSH
69257: LD_VAR 0 5
69261: PUSH
69262: LD_INT 2
69264: ARRAY
69265: PPUSH
69266: LD_VAR 0 5
69270: PUSH
69271: LD_INT 3
69273: ARRAY
69274: PPUSH
69275: CALL_OW 117
// break ;
69279: GO 69283
// end ;
69281: GO 68832
69283: POP
69284: POP
// end ; end ;
69285: GO 67825
69287: POP
69288: POP
// end ;
69289: LD_VAR 0 1
69293: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69294: LD_INT 0
69296: PPUSH
69297: PPUSH
69298: PPUSH
69299: PPUSH
// if not mc_bases then
69300: LD_EXP 67
69304: NOT
69305: IFFALSE 69309
// exit ;
69307: GO 69470
// for i = 1 to mc_bases do
69309: LD_ADDR_VAR 0 2
69313: PUSH
69314: DOUBLE
69315: LD_INT 1
69317: DEC
69318: ST_TO_ADDR
69319: LD_EXP 67
69323: PUSH
69324: FOR_TO
69325: IFFALSE 69468
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
69327: LD_ADDR_VAR 0 4
69331: PUSH
69332: LD_EXP 86
69336: PUSH
69337: LD_VAR 0 2
69341: ARRAY
69342: PUSH
69343: LD_EXP 89
69347: PUSH
69348: LD_VAR 0 2
69352: ARRAY
69353: ADD
69354: PPUSH
69355: LD_INT 33
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PPUSH
69365: CALL_OW 72
69369: ST_TO_ADDR
// if tmp then
69370: LD_VAR 0 4
69374: IFFALSE 69466
// for j in tmp do
69376: LD_ADDR_VAR 0 3
69380: PUSH
69381: LD_VAR 0 4
69385: PUSH
69386: FOR_IN
69387: IFFALSE 69464
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69389: LD_VAR 0 3
69393: PPUSH
69394: CALL_OW 312
69398: NOT
69399: PUSH
69400: LD_VAR 0 3
69404: PPUSH
69405: CALL_OW 256
69409: PUSH
69410: LD_INT 250
69412: GREATEREQUAL
69413: AND
69414: IFFALSE 69427
// Connect ( j ) else
69416: LD_VAR 0 3
69420: PPUSH
69421: CALL 28156 0 1
69425: GO 69462
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69427: LD_VAR 0 3
69431: PPUSH
69432: CALL_OW 256
69436: PUSH
69437: LD_INT 250
69439: LESS
69440: PUSH
69441: LD_VAR 0 3
69445: PPUSH
69446: CALL_OW 312
69450: AND
69451: IFFALSE 69462
// ComUnlink ( j ) ;
69453: LD_VAR 0 3
69457: PPUSH
69458: CALL_OW 136
69462: GO 69386
69464: POP
69465: POP
// end ;
69466: GO 69324
69468: POP
69469: POP
// end ;
69470: LD_VAR 0 1
69474: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
69480: PPUSH
69481: PPUSH
// if not mc_bases then
69482: LD_EXP 67
69486: NOT
69487: IFFALSE 69491
// exit ;
69489: GO 69951
// for i = 1 to mc_bases do
69491: LD_ADDR_VAR 0 2
69495: PUSH
69496: DOUBLE
69497: LD_INT 1
69499: DEC
69500: ST_TO_ADDR
69501: LD_EXP 67
69505: PUSH
69506: FOR_TO
69507: IFFALSE 69949
// begin if not mc_produce [ i ] then
69509: LD_EXP 88
69513: PUSH
69514: LD_VAR 0 2
69518: ARRAY
69519: NOT
69520: IFFALSE 69524
// continue ;
69522: GO 69506
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69524: LD_ADDR_VAR 0 5
69528: PUSH
69529: LD_EXP 67
69533: PUSH
69534: LD_VAR 0 2
69538: ARRAY
69539: PPUSH
69540: LD_INT 30
69542: PUSH
69543: LD_INT 3
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PPUSH
69550: CALL_OW 72
69554: ST_TO_ADDR
// if not fac then
69555: LD_VAR 0 5
69559: NOT
69560: IFFALSE 69564
// continue ;
69562: GO 69506
// for j in fac do
69564: LD_ADDR_VAR 0 3
69568: PUSH
69569: LD_VAR 0 5
69573: PUSH
69574: FOR_IN
69575: IFFALSE 69945
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
69577: LD_VAR 0 3
69581: PPUSH
69582: CALL_OW 461
69586: PUSH
69587: LD_INT 2
69589: NONEQUAL
69590: PUSH
69591: LD_VAR 0 3
69595: PPUSH
69596: LD_INT 15
69598: PPUSH
69599: CALL 27829 0 2
69603: PUSH
69604: LD_INT 4
69606: ARRAY
69607: OR
69608: PUSH
69609: LD_VAR 0 3
69613: PPUSH
69614: CALL_OW 313
69618: PUSH
69619: LD_INT 0
69621: EQUAL
69622: OR
69623: IFFALSE 69627
// continue ;
69625: GO 69574
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69627: LD_VAR 0 3
69631: PPUSH
69632: LD_EXP 88
69636: PUSH
69637: LD_VAR 0 2
69641: ARRAY
69642: PUSH
69643: LD_INT 1
69645: ARRAY
69646: PUSH
69647: LD_INT 1
69649: ARRAY
69650: PPUSH
69651: LD_EXP 88
69655: PUSH
69656: LD_VAR 0 2
69660: ARRAY
69661: PUSH
69662: LD_INT 1
69664: ARRAY
69665: PUSH
69666: LD_INT 2
69668: ARRAY
69669: PPUSH
69670: LD_EXP 88
69674: PUSH
69675: LD_VAR 0 2
69679: ARRAY
69680: PUSH
69681: LD_INT 1
69683: ARRAY
69684: PUSH
69685: LD_INT 3
69687: ARRAY
69688: PPUSH
69689: LD_EXP 88
69693: PUSH
69694: LD_VAR 0 2
69698: ARRAY
69699: PUSH
69700: LD_INT 1
69702: ARRAY
69703: PUSH
69704: LD_INT 4
69706: ARRAY
69707: PPUSH
69708: CALL_OW 448
69712: PUSH
69713: LD_VAR 0 3
69717: PPUSH
69718: LD_EXP 88
69722: PUSH
69723: LD_VAR 0 2
69727: ARRAY
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: PUSH
69733: LD_INT 1
69735: ARRAY
69736: PUSH
69737: LD_EXP 88
69741: PUSH
69742: LD_VAR 0 2
69746: ARRAY
69747: PUSH
69748: LD_INT 1
69750: ARRAY
69751: PUSH
69752: LD_INT 2
69754: ARRAY
69755: PUSH
69756: LD_EXP 88
69760: PUSH
69761: LD_VAR 0 2
69765: ARRAY
69766: PUSH
69767: LD_INT 1
69769: ARRAY
69770: PUSH
69771: LD_INT 3
69773: ARRAY
69774: PUSH
69775: LD_EXP 88
69779: PUSH
69780: LD_VAR 0 2
69784: ARRAY
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PUSH
69790: LD_INT 4
69792: ARRAY
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: PPUSH
69800: CALL 31370 0 2
69804: AND
69805: IFFALSE 69943
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69807: LD_VAR 0 3
69811: PPUSH
69812: LD_EXP 88
69816: PUSH
69817: LD_VAR 0 2
69821: ARRAY
69822: PUSH
69823: LD_INT 1
69825: ARRAY
69826: PUSH
69827: LD_INT 1
69829: ARRAY
69830: PPUSH
69831: LD_EXP 88
69835: PUSH
69836: LD_VAR 0 2
69840: ARRAY
69841: PUSH
69842: LD_INT 1
69844: ARRAY
69845: PUSH
69846: LD_INT 2
69848: ARRAY
69849: PPUSH
69850: LD_EXP 88
69854: PUSH
69855: LD_VAR 0 2
69859: ARRAY
69860: PUSH
69861: LD_INT 1
69863: ARRAY
69864: PUSH
69865: LD_INT 3
69867: ARRAY
69868: PPUSH
69869: LD_EXP 88
69873: PUSH
69874: LD_VAR 0 2
69878: ARRAY
69879: PUSH
69880: LD_INT 1
69882: ARRAY
69883: PUSH
69884: LD_INT 4
69886: ARRAY
69887: PPUSH
69888: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69892: LD_ADDR_VAR 0 4
69896: PUSH
69897: LD_EXP 88
69901: PUSH
69902: LD_VAR 0 2
69906: ARRAY
69907: PPUSH
69908: LD_INT 1
69910: PPUSH
69911: CALL_OW 3
69915: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69916: LD_ADDR_EXP 88
69920: PUSH
69921: LD_EXP 88
69925: PPUSH
69926: LD_VAR 0 2
69930: PPUSH
69931: LD_VAR 0 4
69935: PPUSH
69936: CALL_OW 1
69940: ST_TO_ADDR
// break ;
69941: GO 69945
// end ; end ;
69943: GO 69574
69945: POP
69946: POP
// end ;
69947: GO 69506
69949: POP
69950: POP
// end ;
69951: LD_VAR 0 1
69955: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69956: LD_INT 0
69958: PPUSH
69959: PPUSH
69960: PPUSH
// if not mc_bases then
69961: LD_EXP 67
69965: NOT
69966: IFFALSE 69970
// exit ;
69968: GO 70059
// for i = 1 to mc_bases do
69970: LD_ADDR_VAR 0 2
69974: PUSH
69975: DOUBLE
69976: LD_INT 1
69978: DEC
69979: ST_TO_ADDR
69980: LD_EXP 67
69984: PUSH
69985: FOR_TO
69986: IFFALSE 70057
// begin if mc_attack [ i ] then
69988: LD_EXP 87
69992: PUSH
69993: LD_VAR 0 2
69997: ARRAY
69998: IFFALSE 70055
// begin tmp := mc_attack [ i ] [ 1 ] ;
70000: LD_ADDR_VAR 0 3
70004: PUSH
70005: LD_EXP 87
70009: PUSH
70010: LD_VAR 0 2
70014: ARRAY
70015: PUSH
70016: LD_INT 1
70018: ARRAY
70019: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
70020: LD_ADDR_EXP 87
70024: PUSH
70025: LD_EXP 87
70029: PPUSH
70030: LD_VAR 0 2
70034: PPUSH
70035: EMPTY
70036: PPUSH
70037: CALL_OW 1
70041: ST_TO_ADDR
// Attack ( tmp ) ;
70042: LD_VAR 0 3
70046: PPUSH
70047: CALL 53474 0 1
// exit ;
70051: POP
70052: POP
70053: GO 70059
// end ; end ;
70055: GO 69985
70057: POP
70058: POP
// end ;
70059: LD_VAR 0 1
70063: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
70064: LD_INT 0
70066: PPUSH
70067: PPUSH
70068: PPUSH
70069: PPUSH
70070: PPUSH
70071: PPUSH
70072: PPUSH
// if not mc_bases then
70073: LD_EXP 67
70077: NOT
70078: IFFALSE 70082
// exit ;
70080: GO 70457
// for i = 1 to mc_bases do
70082: LD_ADDR_VAR 0 2
70086: PUSH
70087: DOUBLE
70088: LD_INT 1
70090: DEC
70091: ST_TO_ADDR
70092: LD_EXP 67
70096: PUSH
70097: FOR_TO
70098: IFFALSE 70455
// begin if not mc_bases [ i ] then
70100: LD_EXP 67
70104: PUSH
70105: LD_VAR 0 2
70109: ARRAY
70110: NOT
70111: IFFALSE 70115
// continue ;
70113: GO 70097
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
70115: LD_ADDR_VAR 0 7
70119: PUSH
70120: LD_EXP 67
70124: PUSH
70125: LD_VAR 0 2
70129: ARRAY
70130: PUSH
70131: LD_INT 1
70133: ARRAY
70134: PPUSH
70135: CALL 22107 0 1
70139: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
70140: LD_ADDR_EXP 90
70144: PUSH
70145: LD_EXP 90
70149: PPUSH
70150: LD_VAR 0 2
70154: PPUSH
70155: LD_EXP 67
70159: PUSH
70160: LD_VAR 0 2
70164: ARRAY
70165: PUSH
70166: LD_INT 1
70168: ARRAY
70169: PPUSH
70170: CALL_OW 255
70174: PPUSH
70175: LD_EXP 92
70179: PUSH
70180: LD_VAR 0 2
70184: ARRAY
70185: PPUSH
70186: CALL 20067 0 2
70190: PPUSH
70191: CALL_OW 1
70195: ST_TO_ADDR
// if not mc_scan [ i ] then
70196: LD_EXP 90
70200: PUSH
70201: LD_VAR 0 2
70205: ARRAY
70206: NOT
70207: IFFALSE 70362
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70209: LD_ADDR_VAR 0 4
70213: PUSH
70214: LD_EXP 67
70218: PUSH
70219: LD_VAR 0 2
70223: ARRAY
70224: PPUSH
70225: LD_INT 2
70227: PUSH
70228: LD_INT 25
70230: PUSH
70231: LD_INT 5
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 25
70240: PUSH
70241: LD_INT 8
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 25
70250: PUSH
70251: LD_INT 9
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: PPUSH
70264: CALL_OW 72
70268: ST_TO_ADDR
// if not tmp then
70269: LD_VAR 0 4
70273: NOT
70274: IFFALSE 70278
// continue ;
70276: GO 70097
// for j in tmp do
70278: LD_ADDR_VAR 0 3
70282: PUSH
70283: LD_VAR 0 4
70287: PUSH
70288: FOR_IN
70289: IFFALSE 70360
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70291: LD_VAR 0 3
70295: PPUSH
70296: CALL_OW 310
70300: PPUSH
70301: CALL_OW 266
70305: PUSH
70306: LD_INT 5
70308: EQUAL
70309: PUSH
70310: LD_VAR 0 3
70314: PPUSH
70315: CALL_OW 257
70319: PUSH
70320: LD_INT 1
70322: EQUAL
70323: AND
70324: PUSH
70325: LD_VAR 0 3
70329: PPUSH
70330: CALL_OW 459
70334: NOT
70335: AND
70336: PUSH
70337: LD_VAR 0 7
70341: AND
70342: IFFALSE 70358
// ComChangeProfession ( j , class ) ;
70344: LD_VAR 0 3
70348: PPUSH
70349: LD_VAR 0 7
70353: PPUSH
70354: CALL_OW 123
70358: GO 70288
70360: POP
70361: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
70362: LD_EXP 90
70366: PUSH
70367: LD_VAR 0 2
70371: ARRAY
70372: PUSH
70373: LD_EXP 89
70377: PUSH
70378: LD_VAR 0 2
70382: ARRAY
70383: AND
70384: IFFALSE 70453
// begin tmp := mc_defender [ i ] ;
70386: LD_ADDR_VAR 0 4
70390: PUSH
70391: LD_EXP 89
70395: PUSH
70396: LD_VAR 0 2
70400: ARRAY
70401: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
70402: LD_ADDR_EXP 89
70406: PUSH
70407: LD_EXP 89
70411: PPUSH
70412: LD_VAR 0 2
70416: PPUSH
70417: EMPTY
70418: PPUSH
70419: CALL_OW 1
70423: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70424: LD_VAR 0 2
70428: PPUSH
70429: LD_VAR 0 4
70433: PPUSH
70434: LD_EXP 90
70438: PUSH
70439: LD_VAR 0 2
70443: ARRAY
70444: PPUSH
70445: CALL 20600 0 3
// exit ;
70449: POP
70450: POP
70451: GO 70457
// end ; end ;
70453: GO 70097
70455: POP
70456: POP
// end ;
70457: LD_VAR 0 1
70461: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
70471: PPUSH
70472: PPUSH
// if not mc_bases then
70473: LD_EXP 67
70477: NOT
70478: IFFALSE 70482
// exit ;
70480: GO 71426
// for i = 1 to mc_bases do
70482: LD_ADDR_VAR 0 2
70486: PUSH
70487: DOUBLE
70488: LD_INT 1
70490: DEC
70491: ST_TO_ADDR
70492: LD_EXP 67
70496: PUSH
70497: FOR_TO
70498: IFFALSE 71424
// begin tmp := mc_lab [ i ] ;
70500: LD_ADDR_VAR 0 6
70504: PUSH
70505: LD_EXP 100
70509: PUSH
70510: LD_VAR 0 2
70514: ARRAY
70515: ST_TO_ADDR
// if not tmp then
70516: LD_VAR 0 6
70520: NOT
70521: IFFALSE 70525
// continue ;
70523: GO 70497
// for j in tmp do
70525: LD_ADDR_VAR 0 3
70529: PUSH
70530: LD_VAR 0 6
70534: PUSH
70535: FOR_IN
70536: IFFALSE 71420
// begin side := GetSide ( j ) ;
70538: LD_ADDR_VAR 0 4
70542: PUSH
70543: LD_VAR 0 3
70547: PPUSH
70548: CALL_OW 255
70552: ST_TO_ADDR
// if not mc_tech [ side ] then
70553: LD_EXP 94
70557: PUSH
70558: LD_VAR 0 4
70562: ARRAY
70563: NOT
70564: IFFALSE 70568
// continue ;
70566: GO 70535
// if BuildingStatus ( j ) = bs_idle then
70568: LD_VAR 0 3
70572: PPUSH
70573: CALL_OW 461
70577: PUSH
70578: LD_INT 2
70580: EQUAL
70581: IFFALSE 70654
// for t in mc_tech [ side ] do
70583: LD_ADDR_VAR 0 5
70587: PUSH
70588: LD_EXP 94
70592: PUSH
70593: LD_VAR 0 4
70597: ARRAY
70598: PUSH
70599: FOR_IN
70600: IFFALSE 70652
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70602: LD_VAR 0 3
70606: PPUSH
70607: LD_VAR 0 5
70611: PPUSH
70612: CALL_OW 430
70616: PUSH
70617: LD_VAR 0 4
70621: PPUSH
70622: LD_VAR 0 5
70626: PPUSH
70627: CALL 19172 0 2
70631: AND
70632: IFFALSE 70650
// begin ComResearch ( j , t ) ;
70634: LD_VAR 0 3
70638: PPUSH
70639: LD_VAR 0 5
70643: PPUSH
70644: CALL_OW 124
// break ;
70648: GO 70652
// end ;
70650: GO 70599
70652: POP
70653: POP
// if BuildingStatus ( j ) = bs_need_ape then
70654: LD_VAR 0 3
70658: PPUSH
70659: CALL_OW 461
70663: PUSH
70664: LD_INT 10
70666: EQUAL
70667: IFFALSE 71255
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70669: LD_EXP 96
70673: PUSH
70674: LD_VAR 0 2
70678: ARRAY
70679: NOT
70680: PUSH
70681: LD_EXP 97
70685: PUSH
70686: LD_VAR 0 2
70690: ARRAY
70691: NOT
70692: AND
70693: PUSH
70694: LD_EXP 94
70698: PUSH
70699: LD_VAR 0 4
70703: ARRAY
70704: PUSH
70705: LD_INT 1
70707: GREATER
70708: AND
70709: IFFALSE 70840
// begin ComCancel ( j ) ;
70711: LD_VAR 0 3
70715: PPUSH
70716: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70720: LD_ADDR_EXP 94
70724: PUSH
70725: LD_EXP 94
70729: PPUSH
70730: LD_VAR 0 4
70734: PPUSH
70735: LD_EXP 94
70739: PUSH
70740: LD_VAR 0 4
70744: ARRAY
70745: PPUSH
70746: LD_EXP 94
70750: PUSH
70751: LD_VAR 0 4
70755: ARRAY
70756: PUSH
70757: LD_INT 1
70759: MINUS
70760: PPUSH
70761: LD_EXP 94
70765: PUSH
70766: LD_VAR 0 4
70770: ARRAY
70771: PPUSH
70772: LD_INT 0
70774: PPUSH
70775: CALL 24621 0 4
70779: PPUSH
70780: CALL_OW 1
70784: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
70785: LD_ADDR_EXP 94
70789: PUSH
70790: LD_EXP 94
70794: PPUSH
70795: LD_VAR 0 4
70799: PPUSH
70800: LD_EXP 94
70804: PUSH
70805: LD_VAR 0 4
70809: ARRAY
70810: PPUSH
70811: LD_EXP 94
70815: PUSH
70816: LD_VAR 0 4
70820: ARRAY
70821: PPUSH
70822: LD_INT 1
70824: PPUSH
70825: LD_INT 0
70827: PPUSH
70828: CALL 24621 0 4
70832: PPUSH
70833: CALL_OW 1
70837: ST_TO_ADDR
// continue ;
70838: GO 70535
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
70840: LD_EXP 96
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: PUSH
70851: LD_EXP 97
70855: PUSH
70856: LD_VAR 0 2
70860: ARRAY
70861: NOT
70862: AND
70863: IFFALSE 70990
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
70865: LD_ADDR_EXP 97
70869: PUSH
70870: LD_EXP 97
70874: PPUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_EXP 97
70884: PUSH
70885: LD_VAR 0 2
70889: ARRAY
70890: PUSH
70891: LD_INT 1
70893: PLUS
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PPUSH
70899: LD_EXP 96
70903: PUSH
70904: LD_VAR 0 2
70908: ARRAY
70909: PUSH
70910: LD_INT 1
70912: ARRAY
70913: PPUSH
70914: CALL 25638 0 3
70918: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
70919: LD_EXP 96
70923: PUSH
70924: LD_VAR 0 2
70928: ARRAY
70929: PUSH
70930: LD_INT 1
70932: ARRAY
70933: PPUSH
70934: LD_INT 112
70936: PPUSH
70937: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
70941: LD_ADDR_VAR 0 9
70945: PUSH
70946: LD_EXP 96
70950: PUSH
70951: LD_VAR 0 2
70955: ARRAY
70956: PPUSH
70957: LD_INT 1
70959: PPUSH
70960: CALL_OW 3
70964: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
70965: LD_ADDR_EXP 96
70969: PUSH
70970: LD_EXP 96
70974: PPUSH
70975: LD_VAR 0 2
70979: PPUSH
70980: LD_VAR 0 9
70984: PPUSH
70985: CALL_OW 1
70989: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
70990: LD_EXP 96
70994: PUSH
70995: LD_VAR 0 2
70999: ARRAY
71000: PUSH
71001: LD_EXP 97
71005: PUSH
71006: LD_VAR 0 2
71010: ARRAY
71011: AND
71012: PUSH
71013: LD_EXP 97
71017: PUSH
71018: LD_VAR 0 2
71022: ARRAY
71023: PUSH
71024: LD_INT 1
71026: ARRAY
71027: PPUSH
71028: CALL_OW 310
71032: NOT
71033: AND
71034: PUSH
71035: LD_VAR 0 3
71039: PPUSH
71040: CALL_OW 313
71044: PUSH
71045: LD_INT 6
71047: EQUAL
71048: AND
71049: IFFALSE 71105
// begin tmp2 := UnitsInside ( j ) ;
71051: LD_ADDR_VAR 0 9
71055: PUSH
71056: LD_VAR 0 3
71060: PPUSH
71061: CALL_OW 313
71065: ST_TO_ADDR
// if tmp2 = 6 then
71066: LD_VAR 0 9
71070: PUSH
71071: LD_INT 6
71073: EQUAL
71074: IFFALSE 71105
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71076: LD_VAR 0 9
71080: PUSH
71081: LD_INT 1
71083: ARRAY
71084: PPUSH
71085: LD_INT 112
71087: PPUSH
71088: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71092: LD_VAR 0 9
71096: PUSH
71097: LD_INT 1
71099: ARRAY
71100: PPUSH
71101: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71105: LD_EXP 97
71109: PUSH
71110: LD_VAR 0 2
71114: ARRAY
71115: PUSH
71116: LD_EXP 97
71120: PUSH
71121: LD_VAR 0 2
71125: ARRAY
71126: PUSH
71127: LD_INT 1
71129: ARRAY
71130: PPUSH
71131: CALL_OW 314
71135: NOT
71136: AND
71137: PUSH
71138: LD_EXP 97
71142: PUSH
71143: LD_VAR 0 2
71147: ARRAY
71148: PUSH
71149: LD_INT 1
71151: ARRAY
71152: PPUSH
71153: CALL_OW 310
71157: NOT
71158: AND
71159: IFFALSE 71185
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71161: LD_EXP 97
71165: PUSH
71166: LD_VAR 0 2
71170: ARRAY
71171: PUSH
71172: LD_INT 1
71174: ARRAY
71175: PPUSH
71176: LD_VAR 0 3
71180: PPUSH
71181: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71185: LD_EXP 97
71189: PUSH
71190: LD_VAR 0 2
71194: ARRAY
71195: PUSH
71196: LD_INT 1
71198: ARRAY
71199: PPUSH
71200: CALL_OW 310
71204: PUSH
71205: LD_EXP 97
71209: PUSH
71210: LD_VAR 0 2
71214: ARRAY
71215: PUSH
71216: LD_INT 1
71218: ARRAY
71219: PPUSH
71220: CALL_OW 310
71224: PPUSH
71225: CALL_OW 461
71229: PUSH
71230: LD_INT 3
71232: NONEQUAL
71233: AND
71234: IFFALSE 71255
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71236: LD_EXP 97
71240: PUSH
71241: LD_VAR 0 2
71245: ARRAY
71246: PUSH
71247: LD_INT 1
71249: ARRAY
71250: PPUSH
71251: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71255: LD_VAR 0 3
71259: PPUSH
71260: CALL_OW 461
71264: PUSH
71265: LD_INT 6
71267: EQUAL
71268: PUSH
71269: LD_VAR 0 6
71273: PUSH
71274: LD_INT 1
71276: GREATER
71277: AND
71278: IFFALSE 71418
// begin sci := [ ] ;
71280: LD_ADDR_VAR 0 8
71284: PUSH
71285: EMPTY
71286: ST_TO_ADDR
// for x in tmp diff j do
71287: LD_ADDR_VAR 0 7
71291: PUSH
71292: LD_VAR 0 6
71296: PUSH
71297: LD_VAR 0 3
71301: DIFF
71302: PUSH
71303: FOR_IN
71304: IFFALSE 71344
// begin if BuildingStatus ( x ) = bs_idle then
71306: LD_VAR 0 7
71310: PPUSH
71311: CALL_OW 461
71315: PUSH
71316: LD_INT 2
71318: EQUAL
71319: IFFALSE 71342
// sci := sci ^ UnitsInside ( x ) ;
71321: LD_ADDR_VAR 0 8
71325: PUSH
71326: LD_VAR 0 8
71330: PUSH
71331: LD_VAR 0 7
71335: PPUSH
71336: CALL_OW 313
71340: ADD
71341: ST_TO_ADDR
// end ;
71342: GO 71303
71344: POP
71345: POP
// if not sci then
71346: LD_VAR 0 8
71350: NOT
71351: IFFALSE 71355
// continue ;
71353: GO 70535
// for x in sci do
71355: LD_ADDR_VAR 0 7
71359: PUSH
71360: LD_VAR 0 8
71364: PUSH
71365: FOR_IN
71366: IFFALSE 71416
// if IsInUnit ( x ) and not HasTask ( x ) then
71368: LD_VAR 0 7
71372: PPUSH
71373: CALL_OW 310
71377: PUSH
71378: LD_VAR 0 7
71382: PPUSH
71383: CALL_OW 314
71387: NOT
71388: AND
71389: IFFALSE 71414
// begin ComExitBuilding ( x ) ;
71391: LD_VAR 0 7
71395: PPUSH
71396: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71400: LD_VAR 0 7
71404: PPUSH
71405: LD_VAR 0 3
71409: PPUSH
71410: CALL_OW 180
// end ;
71414: GO 71365
71416: POP
71417: POP
// end ; end ;
71418: GO 70535
71420: POP
71421: POP
// end ;
71422: GO 70497
71424: POP
71425: POP
// end ;
71426: LD_VAR 0 1
71430: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71431: LD_INT 0
71433: PPUSH
71434: PPUSH
71435: PPUSH
71436: PPUSH
71437: PPUSH
71438: PPUSH
71439: PPUSH
71440: PPUSH
// if not mc_bases or not mc_parking then
71441: LD_EXP 67
71445: NOT
71446: PUSH
71447: LD_EXP 91
71451: NOT
71452: OR
71453: IFFALSE 71457
// exit ;
71455: GO 72115
// for i = 1 to mc_bases do
71457: LD_ADDR_VAR 0 2
71461: PUSH
71462: DOUBLE
71463: LD_INT 1
71465: DEC
71466: ST_TO_ADDR
71467: LD_EXP 67
71471: PUSH
71472: FOR_TO
71473: IFFALSE 72113
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71475: LD_EXP 67
71479: PUSH
71480: LD_VAR 0 2
71484: ARRAY
71485: NOT
71486: PUSH
71487: LD_EXP 91
71491: PUSH
71492: LD_VAR 0 2
71496: ARRAY
71497: NOT
71498: OR
71499: IFFALSE 71503
// continue ;
71501: GO 71472
// if mc_scan [ i ] then
71503: LD_EXP 90
71507: PUSH
71508: LD_VAR 0 2
71512: ARRAY
71513: IFFALSE 71539
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
71515: LD_ADDR_EXP 79
71519: PUSH
71520: LD_EXP 79
71524: PPUSH
71525: LD_VAR 0 2
71529: PPUSH
71530: EMPTY
71531: PPUSH
71532: CALL_OW 1
71536: ST_TO_ADDR
// continue ;
71537: GO 71472
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71539: LD_ADDR_VAR 0 5
71543: PUSH
71544: LD_EXP 67
71548: PUSH
71549: LD_VAR 0 2
71553: ARRAY
71554: PUSH
71555: LD_INT 1
71557: ARRAY
71558: PPUSH
71559: CALL_OW 255
71563: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71564: LD_ADDR_VAR 0 6
71568: PUSH
71569: LD_EXP 67
71573: PUSH
71574: LD_VAR 0 2
71578: ARRAY
71579: PPUSH
71580: LD_INT 30
71582: PUSH
71583: LD_INT 3
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PPUSH
71590: CALL_OW 72
71594: ST_TO_ADDR
// if not fac then
71595: LD_VAR 0 6
71599: NOT
71600: IFFALSE 71651
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71602: LD_ADDR_VAR 0 6
71606: PUSH
71607: LD_EXP 67
71611: PUSH
71612: LD_VAR 0 2
71616: ARRAY
71617: PPUSH
71618: LD_INT 2
71620: PUSH
71621: LD_INT 30
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 30
71633: PUSH
71634: LD_INT 1
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: LIST
71645: PPUSH
71646: CALL_OW 72
71650: ST_TO_ADDR
// if not fac then
71651: LD_VAR 0 6
71655: NOT
71656: IFFALSE 71660
// continue ;
71658: GO 71472
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71660: LD_ADDR_VAR 0 7
71664: PUSH
71665: LD_EXP 91
71669: PUSH
71670: LD_VAR 0 2
71674: ARRAY
71675: PPUSH
71676: LD_INT 22
71678: PUSH
71679: LD_VAR 0 5
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 21
71690: PUSH
71691: LD_INT 2
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 3
71700: PUSH
71701: LD_INT 24
71703: PUSH
71704: LD_INT 1000
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: PPUSH
71720: CALL_OW 70
71724: PUSH
71725: LD_INT 22
71727: PUSH
71728: LD_VAR 0 5
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 91
71739: PUSH
71740: LD_VAR 0 6
71744: PUSH
71745: LD_INT 1
71747: ARRAY
71748: PUSH
71749: LD_INT 25
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 21
71759: PUSH
71760: LD_INT 2
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 3
71769: PUSH
71770: LD_INT 24
71772: PUSH
71773: LD_INT 1000
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: PPUSH
71790: CALL_OW 69
71794: UNION
71795: ST_TO_ADDR
// if not vehs then
71796: LD_VAR 0 7
71800: NOT
71801: IFFALSE 71827
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
71803: LD_ADDR_EXP 79
71807: PUSH
71808: LD_EXP 79
71812: PPUSH
71813: LD_VAR 0 2
71817: PPUSH
71818: EMPTY
71819: PPUSH
71820: CALL_OW 1
71824: ST_TO_ADDR
// continue ;
71825: GO 71472
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71827: LD_ADDR_VAR 0 8
71831: PUSH
71832: LD_EXP 67
71836: PUSH
71837: LD_VAR 0 2
71841: ARRAY
71842: PPUSH
71843: LD_INT 30
71845: PUSH
71846: LD_INT 3
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PPUSH
71853: CALL_OW 72
71857: ST_TO_ADDR
// if tmp then
71858: LD_VAR 0 8
71862: IFFALSE 71965
// begin for j in tmp do
71864: LD_ADDR_VAR 0 3
71868: PUSH
71869: LD_VAR 0 8
71873: PUSH
71874: FOR_IN
71875: IFFALSE 71963
// for k in UnitsInside ( j ) do
71877: LD_ADDR_VAR 0 4
71881: PUSH
71882: LD_VAR 0 3
71886: PPUSH
71887: CALL_OW 313
71891: PUSH
71892: FOR_IN
71893: IFFALSE 71959
// if k then
71895: LD_VAR 0 4
71899: IFFALSE 71957
// if not k in mc_repair_vehicle [ i ] then
71901: LD_VAR 0 4
71905: PUSH
71906: LD_EXP 79
71910: PUSH
71911: LD_VAR 0 2
71915: ARRAY
71916: IN
71917: NOT
71918: IFFALSE 71957
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
71920: LD_ADDR_EXP 79
71924: PUSH
71925: LD_EXP 79
71929: PPUSH
71930: LD_VAR 0 2
71934: PPUSH
71935: LD_EXP 79
71939: PUSH
71940: LD_VAR 0 2
71944: ARRAY
71945: PUSH
71946: LD_VAR 0 4
71950: UNION
71951: PPUSH
71952: CALL_OW 1
71956: ST_TO_ADDR
71957: GO 71892
71959: POP
71960: POP
71961: GO 71874
71963: POP
71964: POP
// end ; if not mc_repair_vehicle [ i ] then
71965: LD_EXP 79
71969: PUSH
71970: LD_VAR 0 2
71974: ARRAY
71975: NOT
71976: IFFALSE 71980
// continue ;
71978: GO 71472
// for j in mc_repair_vehicle [ i ] do
71980: LD_ADDR_VAR 0 3
71984: PUSH
71985: LD_EXP 79
71989: PUSH
71990: LD_VAR 0 2
71994: ARRAY
71995: PUSH
71996: FOR_IN
71997: IFFALSE 72109
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 311
72008: NOT
72009: PUSH
72010: LD_VAR 0 3
72014: PUSH
72015: LD_EXP 70
72019: PUSH
72020: LD_VAR 0 2
72024: ARRAY
72025: PUSH
72026: LD_INT 1
72028: ARRAY
72029: IN
72030: NOT
72031: AND
72032: PUSH
72033: LD_VAR 0 3
72037: PUSH
72038: LD_EXP 70
72042: PUSH
72043: LD_VAR 0 2
72047: ARRAY
72048: PUSH
72049: LD_INT 2
72051: ARRAY
72052: IN
72053: NOT
72054: AND
72055: IFFALSE 72107
// begin if IsInUnit ( j ) then
72057: LD_VAR 0 3
72061: PPUSH
72062: CALL_OW 310
72066: IFFALSE 72077
// ComExitBuilding ( j ) ;
72068: LD_VAR 0 3
72072: PPUSH
72073: CALL_OW 122
// if not HasTask ( j ) then
72077: LD_VAR 0 3
72081: PPUSH
72082: CALL_OW 314
72086: NOT
72087: IFFALSE 72107
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72089: LD_VAR 0 3
72093: PPUSH
72094: LD_VAR 0 7
72098: PUSH
72099: LD_INT 1
72101: ARRAY
72102: PPUSH
72103: CALL_OW 189
// end ; end ;
72107: GO 71996
72109: POP
72110: POP
// end ;
72111: GO 71472
72113: POP
72114: POP
// end ;
72115: LD_VAR 0 1
72119: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72120: LD_INT 0
72122: PPUSH
72123: PPUSH
72124: PPUSH
72125: PPUSH
72126: PPUSH
72127: PPUSH
72128: PPUSH
72129: PPUSH
72130: PPUSH
72131: PPUSH
72132: PPUSH
// if not mc_bases then
72133: LD_EXP 67
72137: NOT
72138: IFFALSE 72142
// exit ;
72140: GO 72878
// for i = 1 to mc_bases do
72142: LD_ADDR_VAR 0 2
72146: PUSH
72147: DOUBLE
72148: LD_INT 1
72150: DEC
72151: ST_TO_ADDR
72152: LD_EXP 67
72156: PUSH
72157: FOR_TO
72158: IFFALSE 72876
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72160: LD_EXP 95
72164: PUSH
72165: LD_VAR 0 2
72169: ARRAY
72170: NOT
72171: PUSH
72172: LD_EXP 70
72176: PUSH
72177: LD_VAR 0 2
72181: ARRAY
72182: PUSH
72183: LD_INT 1
72185: ARRAY
72186: OR
72187: PUSH
72188: LD_EXP 70
72192: PUSH
72193: LD_VAR 0 2
72197: ARRAY
72198: PUSH
72199: LD_INT 2
72201: ARRAY
72202: OR
72203: PUSH
72204: LD_EXP 93
72208: PUSH
72209: LD_VAR 0 2
72213: ARRAY
72214: PPUSH
72215: LD_INT 1
72217: PPUSH
72218: CALL_OW 325
72222: NOT
72223: OR
72224: PUSH
72225: LD_EXP 90
72229: PUSH
72230: LD_VAR 0 2
72234: ARRAY
72235: OR
72236: IFFALSE 72240
// continue ;
72238: GO 72157
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72240: LD_ADDR_VAR 0 8
72244: PUSH
72245: LD_EXP 67
72249: PUSH
72250: LD_VAR 0 2
72254: ARRAY
72255: PPUSH
72256: LD_INT 25
72258: PUSH
72259: LD_INT 4
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 50
72268: PUSH
72269: EMPTY
72270: LIST
72271: PUSH
72272: LD_INT 3
72274: PUSH
72275: LD_INT 60
72277: PUSH
72278: EMPTY
72279: LIST
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PPUSH
72290: CALL_OW 72
72294: PUSH
72295: LD_EXP 71
72299: PUSH
72300: LD_VAR 0 2
72304: ARRAY
72305: DIFF
72306: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72307: LD_ADDR_VAR 0 9
72311: PUSH
72312: LD_EXP 67
72316: PUSH
72317: LD_VAR 0 2
72321: ARRAY
72322: PPUSH
72323: LD_INT 2
72325: PUSH
72326: LD_INT 30
72328: PUSH
72329: LD_INT 0
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 30
72338: PUSH
72339: LD_INT 1
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: LIST
72350: PPUSH
72351: CALL_OW 72
72355: ST_TO_ADDR
// if not tmp or not dep then
72356: LD_VAR 0 8
72360: NOT
72361: PUSH
72362: LD_VAR 0 9
72366: NOT
72367: OR
72368: IFFALSE 72372
// continue ;
72370: GO 72157
// side := GetSide ( tmp [ 1 ] ) ;
72372: LD_ADDR_VAR 0 11
72376: PUSH
72377: LD_VAR 0 8
72381: PUSH
72382: LD_INT 1
72384: ARRAY
72385: PPUSH
72386: CALL_OW 255
72390: ST_TO_ADDR
// dep := dep [ 1 ] ;
72391: LD_ADDR_VAR 0 9
72395: PUSH
72396: LD_VAR 0 9
72400: PUSH
72401: LD_INT 1
72403: ARRAY
72404: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72405: LD_ADDR_VAR 0 7
72409: PUSH
72410: LD_EXP 95
72414: PUSH
72415: LD_VAR 0 2
72419: ARRAY
72420: PPUSH
72421: LD_INT 22
72423: PUSH
72424: LD_INT 0
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 25
72433: PUSH
72434: LD_INT 12
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PPUSH
72445: CALL_OW 70
72449: PUSH
72450: LD_INT 22
72452: PUSH
72453: LD_INT 0
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 25
72462: PUSH
72463: LD_INT 12
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 91
72472: PUSH
72473: LD_VAR 0 9
72477: PUSH
72478: LD_INT 20
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: LIST
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: PPUSH
72491: CALL_OW 69
72495: UNION
72496: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72497: LD_ADDR_VAR 0 10
72501: PUSH
72502: LD_EXP 95
72506: PUSH
72507: LD_VAR 0 2
72511: ARRAY
72512: PPUSH
72513: LD_INT 81
72515: PUSH
72516: LD_VAR 0 11
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PPUSH
72525: CALL_OW 70
72529: ST_TO_ADDR
// if not apes or danger_at_area then
72530: LD_VAR 0 7
72534: NOT
72535: PUSH
72536: LD_VAR 0 10
72540: OR
72541: IFFALSE 72591
// begin if mc_taming [ i ] then
72543: LD_EXP 98
72547: PUSH
72548: LD_VAR 0 2
72552: ARRAY
72553: IFFALSE 72589
// begin MC_Reset ( i , 121 ) ;
72555: LD_VAR 0 2
72559: PPUSH
72560: LD_INT 121
72562: PPUSH
72563: CALL 63386 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72567: LD_ADDR_EXP 98
72571: PUSH
72572: LD_EXP 98
72576: PPUSH
72577: LD_VAR 0 2
72581: PPUSH
72582: EMPTY
72583: PPUSH
72584: CALL_OW 1
72588: ST_TO_ADDR
// end ; continue ;
72589: GO 72157
// end ; for j in tmp do
72591: LD_ADDR_VAR 0 3
72595: PUSH
72596: LD_VAR 0 8
72600: PUSH
72601: FOR_IN
72602: IFFALSE 72872
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72604: LD_VAR 0 3
72608: PUSH
72609: LD_EXP 98
72613: PUSH
72614: LD_VAR 0 2
72618: ARRAY
72619: IN
72620: NOT
72621: PUSH
72622: LD_EXP 98
72626: PUSH
72627: LD_VAR 0 2
72631: ARRAY
72632: PUSH
72633: LD_INT 3
72635: LESS
72636: AND
72637: IFFALSE 72695
// begin SetTag ( j , 121 ) ;
72639: LD_VAR 0 3
72643: PPUSH
72644: LD_INT 121
72646: PPUSH
72647: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
72651: LD_ADDR_EXP 98
72655: PUSH
72656: LD_EXP 98
72660: PPUSH
72661: LD_VAR 0 2
72665: PUSH
72666: LD_EXP 98
72670: PUSH
72671: LD_VAR 0 2
72675: ARRAY
72676: PUSH
72677: LD_INT 1
72679: PLUS
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PPUSH
72685: LD_VAR 0 3
72689: PPUSH
72690: CALL 25638 0 3
72694: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
72695: LD_VAR 0 3
72699: PUSH
72700: LD_EXP 98
72704: PUSH
72705: LD_VAR 0 2
72709: ARRAY
72710: IN
72711: IFFALSE 72870
// begin if IsInUnit ( j ) then
72713: LD_VAR 0 3
72717: PPUSH
72718: CALL_OW 310
72722: IFFALSE 72733
// ComExitBuilding ( j ) ;
72724: LD_VAR 0 3
72728: PPUSH
72729: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
72733: LD_ADDR_VAR 0 6
72737: PUSH
72738: LD_VAR 0 7
72742: PPUSH
72743: LD_VAR 0 3
72747: PPUSH
72748: CALL_OW 74
72752: ST_TO_ADDR
// if not ape then
72753: LD_VAR 0 6
72757: NOT
72758: IFFALSE 72762
// break ;
72760: GO 72872
// x := GetX ( ape ) ;
72762: LD_ADDR_VAR 0 4
72766: PUSH
72767: LD_VAR 0 6
72771: PPUSH
72772: CALL_OW 250
72776: ST_TO_ADDR
// y := GetY ( ape ) ;
72777: LD_ADDR_VAR 0 5
72781: PUSH
72782: LD_VAR 0 6
72786: PPUSH
72787: CALL_OW 251
72791: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
72792: LD_VAR 0 4
72796: PPUSH
72797: LD_VAR 0 5
72801: PPUSH
72802: CALL_OW 488
72806: NOT
72807: PUSH
72808: LD_VAR 0 11
72812: PPUSH
72813: LD_VAR 0 4
72817: PPUSH
72818: LD_VAR 0 5
72822: PPUSH
72823: LD_INT 20
72825: PPUSH
72826: CALL 26132 0 4
72830: PUSH
72831: LD_INT 4
72833: ARRAY
72834: OR
72835: IFFALSE 72839
// break ;
72837: GO 72872
// if not HasTask ( j ) then
72839: LD_VAR 0 3
72843: PPUSH
72844: CALL_OW 314
72848: NOT
72849: IFFALSE 72870
// ComTameXY ( j , x , y ) ;
72851: LD_VAR 0 3
72855: PPUSH
72856: LD_VAR 0 4
72860: PPUSH
72861: LD_VAR 0 5
72865: PPUSH
72866: CALL_OW 131
// end ; end ;
72870: GO 72601
72872: POP
72873: POP
// end ;
72874: GO 72157
72876: POP
72877: POP
// end ;
72878: LD_VAR 0 1
72882: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72883: LD_INT 0
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
// if not mc_bases then
72893: LD_EXP 67
72897: NOT
72898: IFFALSE 72902
// exit ;
72900: GO 73512
// for i = 1 to mc_bases do
72902: LD_ADDR_VAR 0 2
72906: PUSH
72907: DOUBLE
72908: LD_INT 1
72910: DEC
72911: ST_TO_ADDR
72912: LD_EXP 67
72916: PUSH
72917: FOR_TO
72918: IFFALSE 73510
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72920: LD_EXP 96
72924: PUSH
72925: LD_VAR 0 2
72929: ARRAY
72930: NOT
72931: PUSH
72932: LD_EXP 96
72936: PUSH
72937: LD_VAR 0 2
72941: ARRAY
72942: PPUSH
72943: LD_INT 25
72945: PUSH
72946: LD_INT 12
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PPUSH
72953: CALL_OW 72
72957: NOT
72958: OR
72959: IFFALSE 72963
// continue ;
72961: GO 72917
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72963: LD_ADDR_VAR 0 5
72967: PUSH
72968: LD_EXP 96
72972: PUSH
72973: LD_VAR 0 2
72977: ARRAY
72978: PUSH
72979: LD_INT 1
72981: ARRAY
72982: PPUSH
72983: CALL_OW 255
72987: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72988: LD_VAR 0 5
72992: PPUSH
72993: LD_INT 2
72995: PPUSH
72996: CALL_OW 325
73000: IFFALSE 73245
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73002: LD_ADDR_VAR 0 4
73006: PUSH
73007: LD_EXP 96
73011: PUSH
73012: LD_VAR 0 2
73016: ARRAY
73017: PPUSH
73018: LD_INT 25
73020: PUSH
73021: LD_INT 16
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PPUSH
73028: CALL_OW 72
73032: ST_TO_ADDR
// if tmp < 6 then
73033: LD_VAR 0 4
73037: PUSH
73038: LD_INT 6
73040: LESS
73041: IFFALSE 73245
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73043: LD_ADDR_VAR 0 6
73047: PUSH
73048: LD_EXP 67
73052: PUSH
73053: LD_VAR 0 2
73057: ARRAY
73058: PPUSH
73059: LD_INT 2
73061: PUSH
73062: LD_INT 30
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 30
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: PPUSH
73087: CALL_OW 72
73091: ST_TO_ADDR
// if depot then
73092: LD_VAR 0 6
73096: IFFALSE 73245
// begin for j in depot do
73098: LD_ADDR_VAR 0 3
73102: PUSH
73103: LD_VAR 0 6
73107: PUSH
73108: FOR_IN
73109: IFFALSE 73140
// begin if UnitsInside ( j ) < 6 then
73111: LD_VAR 0 3
73115: PPUSH
73116: CALL_OW 313
73120: PUSH
73121: LD_INT 6
73123: LESS
73124: IFFALSE 73138
// begin selected := j ;
73126: LD_ADDR_VAR 0 7
73130: PUSH
73131: LD_VAR 0 3
73135: ST_TO_ADDR
// break ;
73136: GO 73140
// end ; end ;
73138: GO 73108
73140: POP
73141: POP
// if selected then
73142: LD_VAR 0 7
73146: IFFALSE 73245
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73148: LD_ADDR_VAR 0 3
73152: PUSH
73153: LD_EXP 96
73157: PUSH
73158: LD_VAR 0 2
73162: ARRAY
73163: PPUSH
73164: LD_INT 25
73166: PUSH
73167: LD_INT 12
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PPUSH
73174: CALL_OW 72
73178: PUSH
73179: FOR_IN
73180: IFFALSE 73243
// if not HasTask ( j ) then
73182: LD_VAR 0 3
73186: PPUSH
73187: CALL_OW 314
73191: NOT
73192: IFFALSE 73241
// begin if not IsInUnit ( j ) then
73194: LD_VAR 0 3
73198: PPUSH
73199: CALL_OW 310
73203: NOT
73204: IFFALSE 73220
// ComEnterUnit ( j , selected ) ;
73206: LD_VAR 0 3
73210: PPUSH
73211: LD_VAR 0 7
73215: PPUSH
73216: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73220: LD_VAR 0 3
73224: PPUSH
73225: LD_INT 16
73227: PPUSH
73228: CALL_OW 183
// AddComExitBuilding ( j ) ;
73232: LD_VAR 0 3
73236: PPUSH
73237: CALL_OW 182
// end ;
73241: GO 73179
73243: POP
73244: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73245: LD_VAR 0 5
73249: PPUSH
73250: LD_INT 11
73252: PPUSH
73253: CALL_OW 325
73257: IFFALSE 73508
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73259: LD_ADDR_VAR 0 4
73263: PUSH
73264: LD_EXP 96
73268: PUSH
73269: LD_VAR 0 2
73273: ARRAY
73274: PPUSH
73275: LD_INT 25
73277: PUSH
73278: LD_INT 16
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PPUSH
73285: CALL_OW 72
73289: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73290: LD_VAR 0 4
73294: PUSH
73295: LD_INT 6
73297: GREATEREQUAL
73298: PUSH
73299: LD_VAR 0 5
73303: PPUSH
73304: LD_INT 2
73306: PPUSH
73307: CALL_OW 325
73311: NOT
73312: OR
73313: IFFALSE 73508
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73315: LD_ADDR_VAR 0 8
73319: PUSH
73320: LD_EXP 67
73324: PUSH
73325: LD_VAR 0 2
73329: ARRAY
73330: PPUSH
73331: LD_INT 2
73333: PUSH
73334: LD_INT 30
73336: PUSH
73337: LD_INT 4
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 30
73346: PUSH
73347: LD_INT 5
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: LIST
73358: PPUSH
73359: CALL_OW 72
73363: ST_TO_ADDR
// if barracks then
73364: LD_VAR 0 8
73368: IFFALSE 73508
// begin for j in barracks do
73370: LD_ADDR_VAR 0 3
73374: PUSH
73375: LD_VAR 0 8
73379: PUSH
73380: FOR_IN
73381: IFFALSE 73412
// begin if UnitsInside ( j ) < 6 then
73383: LD_VAR 0 3
73387: PPUSH
73388: CALL_OW 313
73392: PUSH
73393: LD_INT 6
73395: LESS
73396: IFFALSE 73410
// begin selected := j ;
73398: LD_ADDR_VAR 0 7
73402: PUSH
73403: LD_VAR 0 3
73407: ST_TO_ADDR
// break ;
73408: GO 73412
// end ; end ;
73410: GO 73380
73412: POP
73413: POP
// if selected then
73414: LD_VAR 0 7
73418: IFFALSE 73508
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73420: LD_ADDR_VAR 0 3
73424: PUSH
73425: LD_EXP 96
73429: PUSH
73430: LD_VAR 0 2
73434: ARRAY
73435: PPUSH
73436: LD_INT 25
73438: PUSH
73439: LD_INT 12
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PPUSH
73446: CALL_OW 72
73450: PUSH
73451: FOR_IN
73452: IFFALSE 73506
// if not IsInUnit ( j ) and not HasTask ( j ) then
73454: LD_VAR 0 3
73458: PPUSH
73459: CALL_OW 310
73463: NOT
73464: PUSH
73465: LD_VAR 0 3
73469: PPUSH
73470: CALL_OW 314
73474: NOT
73475: AND
73476: IFFALSE 73504
// begin ComEnterUnit ( j , selected ) ;
73478: LD_VAR 0 3
73482: PPUSH
73483: LD_VAR 0 7
73487: PPUSH
73488: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73492: LD_VAR 0 3
73496: PPUSH
73497: LD_INT 15
73499: PPUSH
73500: CALL_OW 183
// end ;
73504: GO 73451
73506: POP
73507: POP
// end ; end ; end ; end ; end ;
73508: GO 72917
73510: POP
73511: POP
// end ;
73512: LD_VAR 0 1
73516: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73517: LD_INT 0
73519: PPUSH
73520: PPUSH
73521: PPUSH
73522: PPUSH
// if not mc_bases then
73523: LD_EXP 67
73527: NOT
73528: IFFALSE 73532
// exit ;
73530: GO 73710
// for i = 1 to mc_bases do
73532: LD_ADDR_VAR 0 2
73536: PUSH
73537: DOUBLE
73538: LD_INT 1
73540: DEC
73541: ST_TO_ADDR
73542: LD_EXP 67
73546: PUSH
73547: FOR_TO
73548: IFFALSE 73708
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
73550: LD_ADDR_VAR 0 4
73554: PUSH
73555: LD_EXP 67
73559: PUSH
73560: LD_VAR 0 2
73564: ARRAY
73565: PPUSH
73566: LD_INT 25
73568: PUSH
73569: LD_INT 9
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PPUSH
73576: CALL_OW 72
73580: ST_TO_ADDR
// if not tmp then
73581: LD_VAR 0 4
73585: NOT
73586: IFFALSE 73590
// continue ;
73588: GO 73547
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
73590: LD_EXP 93
73594: PUSH
73595: LD_VAR 0 2
73599: ARRAY
73600: PPUSH
73601: LD_INT 29
73603: PPUSH
73604: CALL_OW 325
73608: NOT
73609: PUSH
73610: LD_EXP 93
73614: PUSH
73615: LD_VAR 0 2
73619: ARRAY
73620: PPUSH
73621: LD_INT 28
73623: PPUSH
73624: CALL_OW 325
73628: NOT
73629: AND
73630: IFFALSE 73634
// continue ;
73632: GO 73547
// for j in tmp do
73634: LD_ADDR_VAR 0 3
73638: PUSH
73639: LD_VAR 0 4
73643: PUSH
73644: FOR_IN
73645: IFFALSE 73704
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73647: LD_VAR 0 3
73651: PUSH
73652: LD_EXP 70
73656: PUSH
73657: LD_VAR 0 2
73661: ARRAY
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: IN
73667: NOT
73668: PUSH
73669: LD_VAR 0 3
73673: PUSH
73674: LD_EXP 70
73678: PUSH
73679: LD_VAR 0 2
73683: ARRAY
73684: PUSH
73685: LD_INT 2
73687: ARRAY
73688: IN
73689: NOT
73690: AND
73691: IFFALSE 73702
// ComSpaceTimeShoot ( j ) ;
73693: LD_VAR 0 3
73697: PPUSH
73698: CALL 19263 0 1
73702: GO 73644
73704: POP
73705: POP
// end ;
73706: GO 73547
73708: POP
73709: POP
// end ;
73710: LD_VAR 0 1
73714: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
73715: LD_INT 0
73717: PPUSH
73718: PPUSH
73719: PPUSH
73720: PPUSH
// if not mc_bases then
73721: LD_EXP 67
73725: NOT
73726: IFFALSE 73730
// exit ;
73728: GO 73752
// for i = 1 to mc_bases do
73730: LD_ADDR_VAR 0 2
73734: PUSH
73735: DOUBLE
73736: LD_INT 1
73738: DEC
73739: ST_TO_ADDR
73740: LD_EXP 67
73744: PUSH
73745: FOR_TO
73746: IFFALSE 73750
// begin end ;
73748: GO 73745
73750: POP
73751: POP
// end ;
73752: LD_VAR 0 1
73756: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73757: LD_INT 0
73759: PPUSH
73760: PPUSH
73761: PPUSH
// if not mc_bases then
73762: LD_EXP 67
73766: NOT
73767: IFFALSE 73771
// exit ;
73769: GO 74331
// for i = 1 to mc_bases do
73771: LD_ADDR_VAR 0 2
73775: PUSH
73776: DOUBLE
73777: LD_INT 1
73779: DEC
73780: ST_TO_ADDR
73781: LD_EXP 67
73785: PUSH
73786: FOR_TO
73787: IFFALSE 74329
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73789: LD_ADDR_VAR 0 3
73793: PUSH
73794: LD_EXP 67
73798: PUSH
73799: LD_VAR 0 2
73803: ARRAY
73804: PPUSH
73805: LD_INT 25
73807: PUSH
73808: LD_INT 4
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PPUSH
73815: CALL_OW 72
73819: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
73820: LD_VAR 0 3
73824: NOT
73825: PUSH
73826: LD_EXP 103
73830: PUSH
73831: LD_VAR 0 2
73835: ARRAY
73836: NOT
73837: OR
73838: IFFALSE 73888
// begin if mc_deposits_finder [ i ] then
73840: LD_EXP 104
73844: PUSH
73845: LD_VAR 0 2
73849: ARRAY
73850: IFFALSE 73886
// begin MC_Reset ( i , 125 ) ;
73852: LD_VAR 0 2
73856: PPUSH
73857: LD_INT 125
73859: PPUSH
73860: CALL 63386 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73864: LD_ADDR_EXP 104
73868: PUSH
73869: LD_EXP 104
73873: PPUSH
73874: LD_VAR 0 2
73878: PPUSH
73879: EMPTY
73880: PPUSH
73881: CALL_OW 1
73885: ST_TO_ADDR
// end ; continue ;
73886: GO 73786
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73888: LD_EXP 103
73892: PUSH
73893: LD_VAR 0 2
73897: ARRAY
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_INT 3
73905: ARRAY
73906: PUSH
73907: LD_INT 1
73909: EQUAL
73910: PUSH
73911: LD_INT 20
73913: PPUSH
73914: LD_EXP 93
73918: PUSH
73919: LD_VAR 0 2
73923: ARRAY
73924: PPUSH
73925: CALL_OW 321
73929: PUSH
73930: LD_INT 2
73932: NONEQUAL
73933: AND
73934: IFFALSE 73984
// begin if mc_deposits_finder [ i ] then
73936: LD_EXP 104
73940: PUSH
73941: LD_VAR 0 2
73945: ARRAY
73946: IFFALSE 73982
// begin MC_Reset ( i , 125 ) ;
73948: LD_VAR 0 2
73952: PPUSH
73953: LD_INT 125
73955: PPUSH
73956: CALL 63386 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73960: LD_ADDR_EXP 104
73964: PUSH
73965: LD_EXP 104
73969: PPUSH
73970: LD_VAR 0 2
73974: PPUSH
73975: EMPTY
73976: PPUSH
73977: CALL_OW 1
73981: ST_TO_ADDR
// end ; continue ;
73982: GO 73786
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73984: LD_EXP 103
73988: PUSH
73989: LD_VAR 0 2
73993: ARRAY
73994: PUSH
73995: LD_INT 1
73997: ARRAY
73998: PUSH
73999: LD_INT 1
74001: ARRAY
74002: PPUSH
74003: LD_EXP 103
74007: PUSH
74008: LD_VAR 0 2
74012: ARRAY
74013: PUSH
74014: LD_INT 1
74016: ARRAY
74017: PUSH
74018: LD_INT 2
74020: ARRAY
74021: PPUSH
74022: LD_EXP 93
74026: PUSH
74027: LD_VAR 0 2
74031: ARRAY
74032: PPUSH
74033: CALL_OW 440
74037: IFFALSE 74080
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
74039: LD_ADDR_EXP 103
74043: PUSH
74044: LD_EXP 103
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_EXP 103
74058: PUSH
74059: LD_VAR 0 2
74063: ARRAY
74064: PPUSH
74065: LD_INT 1
74067: PPUSH
74068: CALL_OW 3
74072: PPUSH
74073: CALL_OW 1
74077: ST_TO_ADDR
74078: GO 74327
// begin if not mc_deposits_finder [ i ] then
74080: LD_EXP 104
74084: PUSH
74085: LD_VAR 0 2
74089: ARRAY
74090: NOT
74091: IFFALSE 74143
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
74093: LD_ADDR_EXP 104
74097: PUSH
74098: LD_EXP 104
74102: PPUSH
74103: LD_VAR 0 2
74107: PPUSH
74108: LD_VAR 0 3
74112: PUSH
74113: LD_INT 1
74115: ARRAY
74116: PUSH
74117: EMPTY
74118: LIST
74119: PPUSH
74120: CALL_OW 1
74124: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
74125: LD_VAR 0 3
74129: PUSH
74130: LD_INT 1
74132: ARRAY
74133: PPUSH
74134: LD_INT 125
74136: PPUSH
74137: CALL_OW 109
// end else
74141: GO 74327
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
74143: LD_EXP 104
74147: PUSH
74148: LD_VAR 0 2
74152: ARRAY
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PPUSH
74158: CALL_OW 310
74162: IFFALSE 74185
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
74164: LD_EXP 104
74168: PUSH
74169: LD_VAR 0 2
74173: ARRAY
74174: PUSH
74175: LD_INT 1
74177: ARRAY
74178: PPUSH
74179: CALL_OW 122
74183: GO 74327
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74185: LD_EXP 104
74189: PUSH
74190: LD_VAR 0 2
74194: ARRAY
74195: PUSH
74196: LD_INT 1
74198: ARRAY
74199: PPUSH
74200: CALL_OW 314
74204: NOT
74205: PUSH
74206: LD_EXP 104
74210: PUSH
74211: LD_VAR 0 2
74215: ARRAY
74216: PUSH
74217: LD_INT 1
74219: ARRAY
74220: PPUSH
74221: LD_EXP 103
74225: PUSH
74226: LD_VAR 0 2
74230: ARRAY
74231: PUSH
74232: LD_INT 1
74234: ARRAY
74235: PUSH
74236: LD_INT 1
74238: ARRAY
74239: PPUSH
74240: LD_EXP 103
74244: PUSH
74245: LD_VAR 0 2
74249: ARRAY
74250: PUSH
74251: LD_INT 1
74253: ARRAY
74254: PUSH
74255: LD_INT 2
74257: ARRAY
74258: PPUSH
74259: CALL_OW 297
74263: PUSH
74264: LD_INT 6
74266: GREATER
74267: AND
74268: IFFALSE 74327
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74270: LD_EXP 104
74274: PUSH
74275: LD_VAR 0 2
74279: ARRAY
74280: PUSH
74281: LD_INT 1
74283: ARRAY
74284: PPUSH
74285: LD_EXP 103
74289: PUSH
74290: LD_VAR 0 2
74294: ARRAY
74295: PUSH
74296: LD_INT 1
74298: ARRAY
74299: PUSH
74300: LD_INT 1
74302: ARRAY
74303: PPUSH
74304: LD_EXP 103
74308: PUSH
74309: LD_VAR 0 2
74313: ARRAY
74314: PUSH
74315: LD_INT 1
74317: ARRAY
74318: PUSH
74319: LD_INT 2
74321: ARRAY
74322: PPUSH
74323: CALL_OW 111
// end ; end ; end ;
74327: GO 73786
74329: POP
74330: POP
// end ;
74331: LD_VAR 0 1
74335: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
74336: LD_INT 0
74338: PPUSH
74339: PPUSH
74340: PPUSH
74341: PPUSH
74342: PPUSH
74343: PPUSH
74344: PPUSH
74345: PPUSH
74346: PPUSH
// if not mc_bases then
74347: LD_EXP 67
74351: NOT
74352: IFFALSE 74356
// exit ;
74354: GO 74854
// for i = 1 to mc_bases do
74356: LD_ADDR_VAR 0 2
74360: PUSH
74361: DOUBLE
74362: LD_INT 1
74364: DEC
74365: ST_TO_ADDR
74366: LD_EXP 67
74370: PUSH
74371: FOR_TO
74372: IFFALSE 74852
// begin if not mc_bases [ i ] then
74374: LD_EXP 67
74378: PUSH
74379: LD_VAR 0 2
74383: ARRAY
74384: NOT
74385: IFFALSE 74389
// continue ;
74387: GO 74371
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74389: LD_ADDR_VAR 0 7
74393: PUSH
74394: LD_EXP 67
74398: PUSH
74399: LD_VAR 0 2
74403: ARRAY
74404: PUSH
74405: LD_INT 1
74407: ARRAY
74408: PPUSH
74409: CALL_OW 248
74413: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
74414: LD_VAR 0 7
74418: PUSH
74419: LD_INT 1
74421: NONEQUAL
74422: PUSH
74423: LD_EXP 86
74427: PUSH
74428: LD_VAR 0 2
74432: ARRAY
74433: PUSH
74434: LD_EXP 89
74438: PUSH
74439: LD_VAR 0 2
74443: ARRAY
74444: UNION
74445: PPUSH
74446: LD_INT 33
74448: PUSH
74449: LD_INT 2
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PPUSH
74456: CALL_OW 72
74460: NOT
74461: OR
74462: IFFALSE 74466
// continue ;
74464: GO 74371
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74466: LD_ADDR_VAR 0 9
74470: PUSH
74471: LD_EXP 67
74475: PUSH
74476: LD_VAR 0 2
74480: ARRAY
74481: PPUSH
74482: LD_INT 30
74484: PUSH
74485: LD_INT 36
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PPUSH
74492: CALL_OW 72
74496: ST_TO_ADDR
// if not cts then
74497: LD_VAR 0 9
74501: NOT
74502: IFFALSE 74506
// continue ;
74504: GO 74371
// if mc_remote_driver [ i ] then
74506: LD_EXP 106
74510: PUSH
74511: LD_VAR 0 2
74515: ARRAY
74516: IFFALSE 74665
// for j in mc_remote_driver [ i ] do
74518: LD_ADDR_VAR 0 3
74522: PUSH
74523: LD_EXP 106
74527: PUSH
74528: LD_VAR 0 2
74532: ARRAY
74533: PUSH
74534: FOR_IN
74535: IFFALSE 74663
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
74537: LD_VAR 0 3
74541: PPUSH
74542: CALL_OW 310
74546: NOT
74547: PUSH
74548: LD_VAR 0 3
74552: PPUSH
74553: CALL_OW 310
74557: PPUSH
74558: CALL_OW 266
74562: PUSH
74563: LD_INT 36
74565: NONEQUAL
74566: OR
74567: IFFALSE 74661
// begin if IsInUnit ( j ) then
74569: LD_VAR 0 3
74573: PPUSH
74574: CALL_OW 310
74578: IFFALSE 74589
// ComExitBuilding ( j ) ;
74580: LD_VAR 0 3
74584: PPUSH
74585: CALL_OW 122
// ct := 0 ;
74589: LD_ADDR_VAR 0 8
74593: PUSH
74594: LD_INT 0
74596: ST_TO_ADDR
// for k in cts do
74597: LD_ADDR_VAR 0 4
74601: PUSH
74602: LD_VAR 0 9
74606: PUSH
74607: FOR_IN
74608: IFFALSE 74639
// if UnitsInside ( k ) < 3 then
74610: LD_VAR 0 4
74614: PPUSH
74615: CALL_OW 313
74619: PUSH
74620: LD_INT 3
74622: LESS
74623: IFFALSE 74637
// begin ct := k ;
74625: LD_ADDR_VAR 0 8
74629: PUSH
74630: LD_VAR 0 4
74634: ST_TO_ADDR
// break ;
74635: GO 74639
// end ;
74637: GO 74607
74639: POP
74640: POP
// if ct then
74641: LD_VAR 0 8
74645: IFFALSE 74661
// AddComEnterUnit ( j , ct ) ;
74647: LD_VAR 0 3
74651: PPUSH
74652: LD_VAR 0 8
74656: PPUSH
74657: CALL_OW 180
// end ;
74661: GO 74534
74663: POP
74664: POP
// places := 0 ;
74665: LD_ADDR_VAR 0 5
74669: PUSH
74670: LD_INT 0
74672: ST_TO_ADDR
// for j = 1 to cts do
74673: LD_ADDR_VAR 0 3
74677: PUSH
74678: DOUBLE
74679: LD_INT 1
74681: DEC
74682: ST_TO_ADDR
74683: LD_VAR 0 9
74687: PUSH
74688: FOR_TO
74689: IFFALSE 74707
// places := places + 3 ;
74691: LD_ADDR_VAR 0 5
74695: PUSH
74696: LD_VAR 0 5
74700: PUSH
74701: LD_INT 3
74703: PLUS
74704: ST_TO_ADDR
74705: GO 74688
74707: POP
74708: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
74709: LD_ADDR_VAR 0 6
74713: PUSH
74714: LD_EXP 67
74718: PUSH
74719: LD_VAR 0 2
74723: ARRAY
74724: PPUSH
74725: LD_INT 25
74727: PUSH
74728: LD_INT 3
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PPUSH
74735: CALL_OW 72
74739: PUSH
74740: LD_EXP 106
74744: PUSH
74745: LD_VAR 0 2
74749: ARRAY
74750: DIFF
74751: ST_TO_ADDR
// if not tmp then
74752: LD_VAR 0 6
74756: NOT
74757: IFFALSE 74761
// continue ;
74759: GO 74371
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
74761: LD_ADDR_VAR 0 5
74765: PUSH
74766: LD_VAR 0 5
74770: PUSH
74771: LD_EXP 106
74775: PUSH
74776: LD_VAR 0 2
74780: ARRAY
74781: PUSH
74782: LD_INT 1
74784: PLUS
74785: MINUS
74786: ST_TO_ADDR
// if places then
74787: LD_VAR 0 5
74791: IFFALSE 74850
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74793: LD_ADDR_EXP 106
74797: PUSH
74798: LD_EXP 106
74802: PPUSH
74803: LD_VAR 0 2
74807: PPUSH
74808: LD_EXP 106
74812: PUSH
74813: LD_VAR 0 2
74817: ARRAY
74818: PUSH
74819: LD_VAR 0 6
74823: PUSH
74824: LD_INT 1
74826: ARRAY
74827: UNION
74828: PPUSH
74829: CALL_OW 1
74833: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74834: LD_VAR 0 6
74838: PUSH
74839: LD_INT 1
74841: ARRAY
74842: PPUSH
74843: LD_INT 126
74845: PPUSH
74846: CALL_OW 109
// end ; end ;
74850: GO 74371
74852: POP
74853: POP
// end ;
74854: LD_VAR 0 1
74858: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74859: LD_INT 0
74861: PPUSH
74862: PPUSH
74863: PPUSH
74864: PPUSH
74865: PPUSH
74866: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74867: LD_VAR 0 1
74871: NOT
74872: PUSH
74873: LD_VAR 0 2
74877: NOT
74878: OR
74879: PUSH
74880: LD_VAR 0 3
74884: NOT
74885: OR
74886: PUSH
74887: LD_VAR 0 4
74891: PUSH
74892: LD_INT 1
74894: PUSH
74895: LD_INT 2
74897: PUSH
74898: LD_INT 3
74900: PUSH
74901: LD_INT 4
74903: PUSH
74904: LD_INT 5
74906: PUSH
74907: LD_INT 8
74909: PUSH
74910: LD_INT 9
74912: PUSH
74913: LD_INT 15
74915: PUSH
74916: LD_INT 16
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: IN
74930: NOT
74931: OR
74932: IFFALSE 74936
// exit ;
74934: GO 75836
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
74936: LD_ADDR_VAR 0 2
74940: PUSH
74941: LD_VAR 0 2
74945: PPUSH
74946: LD_INT 21
74948: PUSH
74949: LD_INT 3
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 24
74958: PUSH
74959: LD_INT 250
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PPUSH
74970: CALL_OW 72
74974: ST_TO_ADDR
// case class of 1 , 15 :
74975: LD_VAR 0 4
74979: PUSH
74980: LD_INT 1
74982: DOUBLE
74983: EQUAL
74984: IFTRUE 74994
74986: LD_INT 15
74988: DOUBLE
74989: EQUAL
74990: IFTRUE 74994
74992: GO 75079
74994: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
74995: LD_ADDR_VAR 0 8
74999: PUSH
75000: LD_VAR 0 2
75004: PPUSH
75005: LD_INT 2
75007: PUSH
75008: LD_INT 30
75010: PUSH
75011: LD_INT 32
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 30
75020: PUSH
75021: LD_INT 31
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: PPUSH
75033: CALL_OW 72
75037: PUSH
75038: LD_VAR 0 2
75042: PPUSH
75043: LD_INT 2
75045: PUSH
75046: LD_INT 30
75048: PUSH
75049: LD_INT 4
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 30
75058: PUSH
75059: LD_INT 5
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: LIST
75070: PPUSH
75071: CALL_OW 72
75075: ADD
75076: ST_TO_ADDR
75077: GO 75325
75079: LD_INT 2
75081: DOUBLE
75082: EQUAL
75083: IFTRUE 75093
75085: LD_INT 16
75087: DOUBLE
75088: EQUAL
75089: IFTRUE 75093
75091: GO 75139
75093: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75094: LD_ADDR_VAR 0 8
75098: PUSH
75099: LD_VAR 0 2
75103: PPUSH
75104: LD_INT 2
75106: PUSH
75107: LD_INT 30
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 30
75119: PUSH
75120: LD_INT 1
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: LIST
75131: PPUSH
75132: CALL_OW 72
75136: ST_TO_ADDR
75137: GO 75325
75139: LD_INT 3
75141: DOUBLE
75142: EQUAL
75143: IFTRUE 75147
75145: GO 75193
75147: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75148: LD_ADDR_VAR 0 8
75152: PUSH
75153: LD_VAR 0 2
75157: PPUSH
75158: LD_INT 2
75160: PUSH
75161: LD_INT 30
75163: PUSH
75164: LD_INT 2
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 30
75173: PUSH
75174: LD_INT 3
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: PPUSH
75186: CALL_OW 72
75190: ST_TO_ADDR
75191: GO 75325
75193: LD_INT 4
75195: DOUBLE
75196: EQUAL
75197: IFTRUE 75201
75199: GO 75258
75201: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75202: LD_ADDR_VAR 0 8
75206: PUSH
75207: LD_VAR 0 2
75211: PPUSH
75212: LD_INT 2
75214: PUSH
75215: LD_INT 30
75217: PUSH
75218: LD_INT 6
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 30
75227: PUSH
75228: LD_INT 7
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 30
75237: PUSH
75238: LD_INT 8
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: PPUSH
75251: CALL_OW 72
75255: ST_TO_ADDR
75256: GO 75325
75258: LD_INT 5
75260: DOUBLE
75261: EQUAL
75262: IFTRUE 75278
75264: LD_INT 8
75266: DOUBLE
75267: EQUAL
75268: IFTRUE 75278
75270: LD_INT 9
75272: DOUBLE
75273: EQUAL
75274: IFTRUE 75278
75276: GO 75324
75278: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75279: LD_ADDR_VAR 0 8
75283: PUSH
75284: LD_VAR 0 2
75288: PPUSH
75289: LD_INT 2
75291: PUSH
75292: LD_INT 30
75294: PUSH
75295: LD_INT 4
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 30
75304: PUSH
75305: LD_INT 5
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: PPUSH
75317: CALL_OW 72
75321: ST_TO_ADDR
75322: GO 75325
75324: POP
// if not tmp then
75325: LD_VAR 0 8
75329: NOT
75330: IFFALSE 75334
// exit ;
75332: GO 75836
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75334: LD_VAR 0 4
75338: PUSH
75339: LD_INT 1
75341: PUSH
75342: LD_INT 15
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: IN
75349: PUSH
75350: LD_EXP 76
75354: PUSH
75355: LD_VAR 0 1
75359: ARRAY
75360: AND
75361: IFFALSE 75517
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75363: LD_ADDR_VAR 0 9
75367: PUSH
75368: LD_EXP 76
75372: PUSH
75373: LD_VAR 0 1
75377: ARRAY
75378: PUSH
75379: LD_INT 1
75381: ARRAY
75382: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75383: LD_VAR 0 9
75387: PUSH
75388: LD_EXP 77
75392: PUSH
75393: LD_VAR 0 1
75397: ARRAY
75398: IN
75399: NOT
75400: IFFALSE 75515
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75402: LD_ADDR_EXP 77
75406: PUSH
75407: LD_EXP 77
75411: PPUSH
75412: LD_VAR 0 1
75416: PUSH
75417: LD_EXP 77
75421: PUSH
75422: LD_VAR 0 1
75426: ARRAY
75427: PUSH
75428: LD_INT 1
75430: PLUS
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PPUSH
75436: LD_VAR 0 9
75440: PPUSH
75441: CALL 25638 0 3
75445: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75446: LD_ADDR_EXP 76
75450: PUSH
75451: LD_EXP 76
75455: PPUSH
75456: LD_VAR 0 1
75460: PPUSH
75461: LD_EXP 76
75465: PUSH
75466: LD_VAR 0 1
75470: ARRAY
75471: PUSH
75472: LD_VAR 0 9
75476: DIFF
75477: PPUSH
75478: CALL_OW 1
75482: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75483: LD_VAR 0 3
75487: PPUSH
75488: LD_EXP 77
75492: PUSH
75493: LD_VAR 0 1
75497: ARRAY
75498: PUSH
75499: LD_EXP 77
75503: PUSH
75504: LD_VAR 0 1
75508: ARRAY
75509: ARRAY
75510: PPUSH
75511: CALL_OW 120
// end ; exit ;
75515: GO 75836
// end ; if tmp > 1 then
75517: LD_VAR 0 8
75521: PUSH
75522: LD_INT 1
75524: GREATER
75525: IFFALSE 75629
// for i = 2 to tmp do
75527: LD_ADDR_VAR 0 6
75531: PUSH
75532: DOUBLE
75533: LD_INT 2
75535: DEC
75536: ST_TO_ADDR
75537: LD_VAR 0 8
75541: PUSH
75542: FOR_TO
75543: IFFALSE 75627
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75545: LD_VAR 0 8
75549: PUSH
75550: LD_VAR 0 6
75554: ARRAY
75555: PPUSH
75556: CALL_OW 461
75560: PUSH
75561: LD_INT 6
75563: EQUAL
75564: IFFALSE 75625
// begin x := tmp [ i ] ;
75566: LD_ADDR_VAR 0 9
75570: PUSH
75571: LD_VAR 0 8
75575: PUSH
75576: LD_VAR 0 6
75580: ARRAY
75581: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75582: LD_ADDR_VAR 0 8
75586: PUSH
75587: LD_VAR 0 8
75591: PPUSH
75592: LD_VAR 0 6
75596: PPUSH
75597: CALL_OW 3
75601: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75602: LD_ADDR_VAR 0 8
75606: PUSH
75607: LD_VAR 0 8
75611: PPUSH
75612: LD_INT 1
75614: PPUSH
75615: LD_VAR 0 9
75619: PPUSH
75620: CALL_OW 2
75624: ST_TO_ADDR
// end ;
75625: GO 75542
75627: POP
75628: POP
// for i in tmp do
75629: LD_ADDR_VAR 0 6
75633: PUSH
75634: LD_VAR 0 8
75638: PUSH
75639: FOR_IN
75640: IFFALSE 75709
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75642: LD_VAR 0 6
75646: PPUSH
75647: CALL_OW 313
75651: PUSH
75652: LD_INT 6
75654: LESS
75655: PUSH
75656: LD_VAR 0 6
75660: PPUSH
75661: CALL_OW 266
75665: PUSH
75666: LD_INT 31
75668: PUSH
75669: LD_INT 32
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: IN
75676: NOT
75677: AND
75678: PUSH
75679: LD_VAR 0 6
75683: PPUSH
75684: CALL_OW 313
75688: PUSH
75689: LD_INT 0
75691: EQUAL
75692: OR
75693: IFFALSE 75707
// begin j := i ;
75695: LD_ADDR_VAR 0 7
75699: PUSH
75700: LD_VAR 0 6
75704: ST_TO_ADDR
// break ;
75705: GO 75709
// end ; end ;
75707: GO 75639
75709: POP
75710: POP
// if j then
75711: LD_VAR 0 7
75715: IFFALSE 75733
// ComEnterUnit ( unit , j ) else
75717: LD_VAR 0 3
75721: PPUSH
75722: LD_VAR 0 7
75726: PPUSH
75727: CALL_OW 120
75731: GO 75836
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75733: LD_ADDR_VAR 0 10
75737: PUSH
75738: LD_VAR 0 2
75742: PPUSH
75743: LD_INT 2
75745: PUSH
75746: LD_INT 30
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PUSH
75756: LD_INT 30
75758: PUSH
75759: LD_INT 1
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: LIST
75770: PPUSH
75771: CALL_OW 72
75775: ST_TO_ADDR
// if depot then
75776: LD_VAR 0 10
75780: IFFALSE 75836
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75782: LD_ADDR_VAR 0 10
75786: PUSH
75787: LD_VAR 0 10
75791: PPUSH
75792: LD_VAR 0 3
75796: PPUSH
75797: CALL_OW 74
75801: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75802: LD_VAR 0 3
75806: PPUSH
75807: LD_VAR 0 10
75811: PPUSH
75812: CALL_OW 296
75816: PUSH
75817: LD_INT 10
75819: GREATER
75820: IFFALSE 75836
// ComStandNearbyBuilding ( unit , depot ) ;
75822: LD_VAR 0 3
75826: PPUSH
75827: LD_VAR 0 10
75831: PPUSH
75832: CALL 19880 0 2
// end ; end ; end ;
75836: LD_VAR 0 5
75840: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75841: LD_INT 0
75843: PPUSH
75844: PPUSH
75845: PPUSH
75846: PPUSH
// if not mc_bases then
75847: LD_EXP 67
75851: NOT
75852: IFFALSE 75856
// exit ;
75854: GO 76095
// for i = 1 to mc_bases do
75856: LD_ADDR_VAR 0 2
75860: PUSH
75861: DOUBLE
75862: LD_INT 1
75864: DEC
75865: ST_TO_ADDR
75866: LD_EXP 67
75870: PUSH
75871: FOR_TO
75872: IFFALSE 76093
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75874: LD_ADDR_VAR 0 4
75878: PUSH
75879: LD_EXP 67
75883: PUSH
75884: LD_VAR 0 2
75888: ARRAY
75889: PPUSH
75890: LD_INT 21
75892: PUSH
75893: LD_INT 1
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PPUSH
75900: CALL_OW 72
75904: PUSH
75905: LD_EXP 96
75909: PUSH
75910: LD_VAR 0 2
75914: ARRAY
75915: UNION
75916: ST_TO_ADDR
// if not tmp then
75917: LD_VAR 0 4
75921: NOT
75922: IFFALSE 75926
// continue ;
75924: GO 75871
// for j in tmp do
75926: LD_ADDR_VAR 0 3
75930: PUSH
75931: LD_VAR 0 4
75935: PUSH
75936: FOR_IN
75937: IFFALSE 76089
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
75939: LD_VAR 0 3
75943: PPUSH
75944: CALL_OW 110
75948: NOT
75949: PUSH
75950: LD_VAR 0 3
75954: PPUSH
75955: CALL_OW 314
75959: NOT
75960: AND
75961: PUSH
75962: LD_VAR 0 3
75966: PPUSH
75967: CALL_OW 311
75971: NOT
75972: AND
75973: PUSH
75974: LD_VAR 0 3
75978: PPUSH
75979: CALL_OW 310
75983: NOT
75984: AND
75985: PUSH
75986: LD_VAR 0 3
75990: PUSH
75991: LD_EXP 70
75995: PUSH
75996: LD_VAR 0 2
76000: ARRAY
76001: PUSH
76002: LD_INT 1
76004: ARRAY
76005: IN
76006: NOT
76007: AND
76008: PUSH
76009: LD_VAR 0 3
76013: PUSH
76014: LD_EXP 70
76018: PUSH
76019: LD_VAR 0 2
76023: ARRAY
76024: PUSH
76025: LD_INT 2
76027: ARRAY
76028: IN
76029: NOT
76030: AND
76031: PUSH
76032: LD_VAR 0 3
76036: PUSH
76037: LD_EXP 79
76041: PUSH
76042: LD_VAR 0 2
76046: ARRAY
76047: IN
76048: NOT
76049: AND
76050: IFFALSE 76087
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76052: LD_VAR 0 2
76056: PPUSH
76057: LD_EXP 67
76061: PUSH
76062: LD_VAR 0 2
76066: ARRAY
76067: PPUSH
76068: LD_VAR 0 3
76072: PPUSH
76073: LD_VAR 0 3
76077: PPUSH
76078: CALL_OW 257
76082: PPUSH
76083: CALL 74859 0 4
// end ;
76087: GO 75936
76089: POP
76090: POP
// end ;
76091: GO 75871
76093: POP
76094: POP
// end ;
76095: LD_VAR 0 1
76099: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76100: LD_INT 0
76102: PPUSH
76103: PPUSH
76104: PPUSH
76105: PPUSH
76106: PPUSH
76107: PPUSH
// if not mc_bases [ base ] then
76108: LD_EXP 67
76112: PUSH
76113: LD_VAR 0 1
76117: ARRAY
76118: NOT
76119: IFFALSE 76123
// exit ;
76121: GO 76305
// tmp := [ ] ;
76123: LD_ADDR_VAR 0 6
76127: PUSH
76128: EMPTY
76129: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76130: LD_ADDR_VAR 0 7
76134: PUSH
76135: LD_VAR 0 3
76139: PPUSH
76140: LD_INT 0
76142: PPUSH
76143: CALL_OW 517
76147: ST_TO_ADDR
// if not list then
76148: LD_VAR 0 7
76152: NOT
76153: IFFALSE 76157
// exit ;
76155: GO 76305
// for i = 1 to amount do
76157: LD_ADDR_VAR 0 5
76161: PUSH
76162: DOUBLE
76163: LD_INT 1
76165: DEC
76166: ST_TO_ADDR
76167: LD_VAR 0 2
76171: PUSH
76172: FOR_TO
76173: IFFALSE 76253
// begin x := rand ( 1 , list [ 1 ] ) ;
76175: LD_ADDR_VAR 0 8
76179: PUSH
76180: LD_INT 1
76182: PPUSH
76183: LD_VAR 0 7
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: CALL_OW 12
76196: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76197: LD_ADDR_VAR 0 6
76201: PUSH
76202: LD_VAR 0 6
76206: PPUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: LD_VAR 0 7
76216: PUSH
76217: LD_INT 1
76219: ARRAY
76220: PUSH
76221: LD_VAR 0 8
76225: ARRAY
76226: PUSH
76227: LD_VAR 0 7
76231: PUSH
76232: LD_INT 2
76234: ARRAY
76235: PUSH
76236: LD_VAR 0 8
76240: ARRAY
76241: PUSH
76242: EMPTY
76243: LIST
76244: LIST
76245: PPUSH
76246: CALL_OW 1
76250: ST_TO_ADDR
// end ;
76251: GO 76172
76253: POP
76254: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76255: LD_ADDR_EXP 80
76259: PUSH
76260: LD_EXP 80
76264: PPUSH
76265: LD_VAR 0 1
76269: PPUSH
76270: LD_VAR 0 6
76274: PPUSH
76275: CALL_OW 1
76279: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76280: LD_ADDR_EXP 82
76284: PUSH
76285: LD_EXP 82
76289: PPUSH
76290: LD_VAR 0 1
76294: PPUSH
76295: LD_VAR 0 3
76299: PPUSH
76300: CALL_OW 1
76304: ST_TO_ADDR
// end ;
76305: LD_VAR 0 4
76309: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76310: LD_INT 0
76312: PPUSH
// if not mc_bases [ base ] then
76313: LD_EXP 67
76317: PUSH
76318: LD_VAR 0 1
76322: ARRAY
76323: NOT
76324: IFFALSE 76328
// exit ;
76326: GO 76353
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76328: LD_ADDR_EXP 72
76332: PUSH
76333: LD_EXP 72
76337: PPUSH
76338: LD_VAR 0 1
76342: PPUSH
76343: LD_VAR 0 2
76347: PPUSH
76348: CALL_OW 1
76352: ST_TO_ADDR
// end ;
76353: LD_VAR 0 3
76357: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76358: LD_INT 0
76360: PPUSH
// if not mc_bases [ base ] then
76361: LD_EXP 67
76365: PUSH
76366: LD_VAR 0 1
76370: ARRAY
76371: NOT
76372: IFFALSE 76376
// exit ;
76374: GO 76432
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
76376: LD_ADDR_EXP 72
76380: PUSH
76381: LD_EXP 72
76385: PPUSH
76386: LD_VAR 0 1
76390: PPUSH
76391: LD_EXP 72
76395: PUSH
76396: LD_VAR 0 1
76400: ARRAY
76401: PPUSH
76402: LD_EXP 72
76406: PUSH
76407: LD_VAR 0 1
76411: ARRAY
76412: PUSH
76413: LD_INT 1
76415: PLUS
76416: PPUSH
76417: LD_VAR 0 2
76421: PPUSH
76422: CALL_OW 2
76426: PPUSH
76427: CALL_OW 1
76431: ST_TO_ADDR
// end ;
76432: LD_VAR 0 3
76436: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76437: LD_INT 0
76439: PPUSH
// if not mc_bases [ base ] then
76440: LD_EXP 67
76444: PUSH
76445: LD_VAR 0 1
76449: ARRAY
76450: NOT
76451: IFFALSE 76455
// exit ;
76453: GO 76480
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76455: LD_ADDR_EXP 88
76459: PUSH
76460: LD_EXP 88
76464: PPUSH
76465: LD_VAR 0 1
76469: PPUSH
76470: LD_VAR 0 2
76474: PPUSH
76475: CALL_OW 1
76479: ST_TO_ADDR
// end ;
76480: LD_VAR 0 3
76484: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
76485: LD_INT 0
76487: PPUSH
// if not mc_bases [ base ] then
76488: LD_EXP 67
76492: PUSH
76493: LD_VAR 0 1
76497: ARRAY
76498: NOT
76499: IFFALSE 76503
// exit ;
76501: GO 76543
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
76503: LD_ADDR_EXP 88
76507: PUSH
76508: LD_EXP 88
76512: PPUSH
76513: LD_VAR 0 1
76517: PPUSH
76518: LD_EXP 88
76522: PUSH
76523: LD_VAR 0 1
76527: ARRAY
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: EMPTY
76535: LIST
76536: ADD
76537: PPUSH
76538: CALL_OW 1
76542: ST_TO_ADDR
// end ;
76543: LD_VAR 0 3
76547: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76548: LD_INT 0
76550: PPUSH
// if not mc_bases [ base ] then
76551: LD_EXP 67
76555: PUSH
76556: LD_VAR 0 1
76560: ARRAY
76561: NOT
76562: IFFALSE 76566
// exit ;
76564: GO 76678
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76566: LD_ADDR_EXP 89
76570: PUSH
76571: LD_EXP 89
76575: PPUSH
76576: LD_VAR 0 1
76580: PPUSH
76581: LD_VAR 0 2
76585: PPUSH
76586: CALL_OW 1
76590: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76591: LD_ADDR_EXP 78
76595: PUSH
76596: LD_EXP 78
76600: PPUSH
76601: LD_VAR 0 1
76605: PPUSH
76606: LD_VAR 0 2
76610: PUSH
76611: LD_INT 0
76613: PLUS
76614: PPUSH
76615: CALL_OW 1
76619: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
76620: LD_ADDR_EXP 86
76624: PUSH
76625: LD_EXP 86
76629: PPUSH
76630: LD_VAR 0 1
76634: PPUSH
76635: LD_EXP 86
76639: PUSH
76640: LD_VAR 0 1
76644: ARRAY
76645: PUSH
76646: LD_EXP 89
76650: PUSH
76651: LD_VAR 0 1
76655: ARRAY
76656: PPUSH
76657: LD_INT 21
76659: PUSH
76660: LD_INT 2
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PPUSH
76667: CALL_OW 72
76671: UNION
76672: PPUSH
76673: CALL_OW 1
76677: ST_TO_ADDR
// end ;
76678: LD_VAR 0 3
76682: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76683: LD_INT 0
76685: PPUSH
// if not mc_bases [ base ] then
76686: LD_EXP 67
76690: PUSH
76691: LD_VAR 0 1
76695: ARRAY
76696: NOT
76697: IFFALSE 76701
// exit ;
76699: GO 76726
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76701: LD_ADDR_EXP 78
76705: PUSH
76706: LD_EXP 78
76710: PPUSH
76711: LD_VAR 0 1
76715: PPUSH
76716: LD_VAR 0 2
76720: PPUSH
76721: CALL_OW 1
76725: ST_TO_ADDR
// end ;
76726: LD_VAR 0 3
76730: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76731: LD_INT 0
76733: PPUSH
76734: PPUSH
76735: PPUSH
76736: PPUSH
// if not mc_bases [ base ] then
76737: LD_EXP 67
76741: PUSH
76742: LD_VAR 0 1
76746: ARRAY
76747: NOT
76748: IFFALSE 76752
// exit ;
76750: GO 76817
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76752: LD_ADDR_EXP 87
76756: PUSH
76757: LD_EXP 87
76761: PPUSH
76762: LD_VAR 0 1
76766: PUSH
76767: LD_EXP 87
76771: PUSH
76772: LD_VAR 0 1
76776: ARRAY
76777: PUSH
76778: LD_INT 1
76780: PLUS
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PPUSH
76786: LD_VAR 0 1
76790: PUSH
76791: LD_VAR 0 2
76795: PUSH
76796: LD_VAR 0 3
76800: PUSH
76801: LD_VAR 0 4
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: PPUSH
76812: CALL 25638 0 3
76816: ST_TO_ADDR
// end ;
76817: LD_VAR 0 5
76821: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76822: LD_INT 0
76824: PPUSH
// if not mc_bases [ base ] then
76825: LD_EXP 67
76829: PUSH
76830: LD_VAR 0 1
76834: ARRAY
76835: NOT
76836: IFFALSE 76840
// exit ;
76838: GO 76865
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76840: LD_ADDR_EXP 103
76844: PUSH
76845: LD_EXP 103
76849: PPUSH
76850: LD_VAR 0 1
76854: PPUSH
76855: LD_VAR 0 2
76859: PPUSH
76860: CALL_OW 1
76864: ST_TO_ADDR
// end ;
76865: LD_VAR 0 3
76869: RET
// export function MC_GetMinesField ( base ) ; begin
76870: LD_INT 0
76872: PPUSH
// result := mc_mines [ base ] ;
76873: LD_ADDR_VAR 0 2
76877: PUSH
76878: LD_EXP 80
76882: PUSH
76883: LD_VAR 0 1
76887: ARRAY
76888: ST_TO_ADDR
// end ;
76889: LD_VAR 0 2
76893: RET
// export function MC_GetProduceList ( base ) ; begin
76894: LD_INT 0
76896: PPUSH
// result := mc_produce [ base ] ;
76897: LD_ADDR_VAR 0 2
76901: PUSH
76902: LD_EXP 88
76906: PUSH
76907: LD_VAR 0 1
76911: ARRAY
76912: ST_TO_ADDR
// end ;
76913: LD_VAR 0 2
76917: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
// if not mc_bases then
76922: LD_EXP 67
76926: NOT
76927: IFFALSE 76931
// exit ;
76929: GO 76996
// if mc_bases [ base ] then
76931: LD_EXP 67
76935: PUSH
76936: LD_VAR 0 1
76940: ARRAY
76941: IFFALSE 76996
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76943: LD_ADDR_VAR 0 3
76947: PUSH
76948: LD_EXP 67
76952: PUSH
76953: LD_VAR 0 1
76957: ARRAY
76958: PPUSH
76959: LD_INT 30
76961: PUSH
76962: LD_VAR 0 2
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 72
76975: ST_TO_ADDR
// if result then
76976: LD_VAR 0 3
76980: IFFALSE 76996
// result := result [ 1 ] ;
76982: LD_ADDR_VAR 0 3
76986: PUSH
76987: LD_VAR 0 3
76991: PUSH
76992: LD_INT 1
76994: ARRAY
76995: ST_TO_ADDR
// end ; end ;
76996: LD_VAR 0 3
77000: RET
// export function MC_SetTame ( base , area ) ; begin
77001: LD_INT 0
77003: PPUSH
// if not mc_bases or not base then
77004: LD_EXP 67
77008: NOT
77009: PUSH
77010: LD_VAR 0 1
77014: NOT
77015: OR
77016: IFFALSE 77020
// exit ;
77018: GO 77045
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77020: LD_ADDR_EXP 95
77024: PUSH
77025: LD_EXP 95
77029: PPUSH
77030: LD_VAR 0 1
77034: PPUSH
77035: LD_VAR 0 2
77039: PPUSH
77040: CALL_OW 1
77044: ST_TO_ADDR
// end ;
77045: LD_VAR 0 3
77049: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77050: LD_INT 0
77052: PPUSH
77053: PPUSH
// if not mc_bases or not base then
77054: LD_EXP 67
77058: NOT
77059: PUSH
77060: LD_VAR 0 1
77064: NOT
77065: OR
77066: IFFALSE 77070
// exit ;
77068: GO 77172
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77070: LD_ADDR_VAR 0 4
77074: PUSH
77075: LD_EXP 67
77079: PUSH
77080: LD_VAR 0 1
77084: ARRAY
77085: PPUSH
77086: LD_INT 30
77088: PUSH
77089: LD_VAR 0 2
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PPUSH
77098: CALL_OW 72
77102: ST_TO_ADDR
// if not tmp then
77103: LD_VAR 0 4
77107: NOT
77108: IFFALSE 77112
// exit ;
77110: GO 77172
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77112: LD_ADDR_EXP 99
77116: PUSH
77117: LD_EXP 99
77121: PPUSH
77122: LD_VAR 0 1
77126: PPUSH
77127: LD_EXP 99
77131: PUSH
77132: LD_VAR 0 1
77136: ARRAY
77137: PPUSH
77138: LD_EXP 99
77142: PUSH
77143: LD_VAR 0 1
77147: ARRAY
77148: PUSH
77149: LD_INT 1
77151: PLUS
77152: PPUSH
77153: LD_VAR 0 4
77157: PUSH
77158: LD_INT 1
77160: ARRAY
77161: PPUSH
77162: CALL_OW 2
77166: PPUSH
77167: CALL_OW 1
77171: ST_TO_ADDR
// end ;
77172: LD_VAR 0 3
77176: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77177: LD_INT 0
77179: PPUSH
77180: PPUSH
// if not mc_bases or not base or not kinds then
77181: LD_EXP 67
77185: NOT
77186: PUSH
77187: LD_VAR 0 1
77191: NOT
77192: OR
77193: PUSH
77194: LD_VAR 0 2
77198: NOT
77199: OR
77200: IFFALSE 77204
// exit ;
77202: GO 77265
// for i in kinds do
77204: LD_ADDR_VAR 0 4
77208: PUSH
77209: LD_VAR 0 2
77213: PUSH
77214: FOR_IN
77215: IFFALSE 77263
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77217: LD_ADDR_EXP 101
77221: PUSH
77222: LD_EXP 101
77226: PPUSH
77227: LD_VAR 0 1
77231: PUSH
77232: LD_EXP 101
77236: PUSH
77237: LD_VAR 0 1
77241: ARRAY
77242: PUSH
77243: LD_INT 1
77245: PLUS
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PPUSH
77251: LD_VAR 0 4
77255: PPUSH
77256: CALL 25638 0 3
77260: ST_TO_ADDR
77261: GO 77214
77263: POP
77264: POP
// end ;
77265: LD_VAR 0 3
77269: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77270: LD_INT 0
77272: PPUSH
// if not mc_bases or not base or not areas then
77273: LD_EXP 67
77277: NOT
77278: PUSH
77279: LD_VAR 0 1
77283: NOT
77284: OR
77285: PUSH
77286: LD_VAR 0 2
77290: NOT
77291: OR
77292: IFFALSE 77296
// exit ;
77294: GO 77321
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77296: LD_ADDR_EXP 85
77300: PUSH
77301: LD_EXP 85
77305: PPUSH
77306: LD_VAR 0 1
77310: PPUSH
77311: LD_VAR 0 2
77315: PPUSH
77316: CALL_OW 1
77320: ST_TO_ADDR
// end ;
77321: LD_VAR 0 3
77325: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
77326: LD_INT 0
77328: PPUSH
// if not mc_bases or not base then
77329: LD_EXP 67
77333: NOT
77334: PUSH
77335: LD_VAR 0 1
77339: NOT
77340: OR
77341: IFFALSE 77345
// exit ;
77343: GO 77379
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
77345: LD_ADDR_EXP 102
77349: PUSH
77350: LD_EXP 102
77354: PPUSH
77355: LD_VAR 0 1
77359: PPUSH
77360: LD_VAR 0 2
77364: PUSH
77365: LD_VAR 0 3
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PPUSH
77374: CALL_OW 1
77378: ST_TO_ADDR
// end ;
77379: LD_VAR 0 4
77383: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77384: LD_INT 0
77386: PPUSH
77387: PPUSH
77388: PPUSH
// if not mc_bases or not base or not ext_list then
77389: LD_EXP 67
77393: NOT
77394: PUSH
77395: LD_VAR 0 1
77399: NOT
77400: OR
77401: PUSH
77402: LD_VAR 0 5
77406: NOT
77407: OR
77408: IFFALSE 77412
// exit ;
77410: GO 77585
// tmp := GetFacExtXYD ( x , y , d ) ;
77412: LD_ADDR_VAR 0 8
77416: PUSH
77417: LD_VAR 0 2
77421: PPUSH
77422: LD_VAR 0 3
77426: PPUSH
77427: LD_VAR 0 4
77431: PPUSH
77432: CALL 58336 0 3
77436: ST_TO_ADDR
// if not tmp then
77437: LD_VAR 0 8
77441: NOT
77442: IFFALSE 77446
// exit ;
77444: GO 77585
// for i in tmp do
77446: LD_ADDR_VAR 0 7
77450: PUSH
77451: LD_VAR 0 8
77455: PUSH
77456: FOR_IN
77457: IFFALSE 77583
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77459: LD_ADDR_EXP 72
77463: PUSH
77464: LD_EXP 72
77468: PPUSH
77469: LD_VAR 0 1
77473: PPUSH
77474: LD_EXP 72
77478: PUSH
77479: LD_VAR 0 1
77483: ARRAY
77484: PPUSH
77485: LD_EXP 72
77489: PUSH
77490: LD_VAR 0 1
77494: ARRAY
77495: PUSH
77496: LD_INT 1
77498: PLUS
77499: PPUSH
77500: LD_VAR 0 5
77504: PUSH
77505: LD_INT 1
77507: ARRAY
77508: PUSH
77509: LD_VAR 0 7
77513: PUSH
77514: LD_INT 1
77516: ARRAY
77517: PUSH
77518: LD_VAR 0 7
77522: PUSH
77523: LD_INT 2
77525: ARRAY
77526: PUSH
77527: LD_VAR 0 7
77531: PUSH
77532: LD_INT 3
77534: ARRAY
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: PPUSH
77542: CALL_OW 2
77546: PPUSH
77547: CALL_OW 1
77551: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77552: LD_ADDR_VAR 0 5
77556: PUSH
77557: LD_VAR 0 5
77561: PPUSH
77562: LD_INT 1
77564: PPUSH
77565: CALL_OW 3
77569: ST_TO_ADDR
// if not ext_list then
77570: LD_VAR 0 5
77574: NOT
77575: IFFALSE 77581
// exit ;
77577: POP
77578: POP
77579: GO 77585
// end ;
77581: GO 77456
77583: POP
77584: POP
// end ;
77585: LD_VAR 0 6
77589: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77590: LD_INT 0
77592: PPUSH
// if not mc_bases or not base or not weapon_list then
77593: LD_EXP 67
77597: NOT
77598: PUSH
77599: LD_VAR 0 1
77603: NOT
77604: OR
77605: PUSH
77606: LD_VAR 0 2
77610: NOT
77611: OR
77612: IFFALSE 77616
// exit ;
77614: GO 77641
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77616: LD_ADDR_EXP 105
77620: PUSH
77621: LD_EXP 105
77625: PPUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: LD_VAR 0 2
77635: PPUSH
77636: CALL_OW 1
77640: ST_TO_ADDR
// end ;
77641: LD_VAR 0 3
77645: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77646: LD_INT 0
77648: PPUSH
// if not mc_bases or not base or not tech_list then
77649: LD_EXP 67
77653: NOT
77654: PUSH
77655: LD_VAR 0 1
77659: NOT
77660: OR
77661: PUSH
77662: LD_VAR 0 2
77666: NOT
77667: OR
77668: IFFALSE 77672
// exit ;
77670: GO 77697
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77672: LD_ADDR_EXP 94
77676: PUSH
77677: LD_EXP 94
77681: PPUSH
77682: LD_VAR 0 1
77686: PPUSH
77687: LD_VAR 0 2
77691: PPUSH
77692: CALL_OW 1
77696: ST_TO_ADDR
// end ;
77697: LD_VAR 0 3
77701: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77702: LD_INT 0
77704: PPUSH
// if not mc_bases or not parking_area or not base then
77705: LD_EXP 67
77709: NOT
77710: PUSH
77711: LD_VAR 0 2
77715: NOT
77716: OR
77717: PUSH
77718: LD_VAR 0 1
77722: NOT
77723: OR
77724: IFFALSE 77728
// exit ;
77726: GO 77753
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77728: LD_ADDR_EXP 91
77732: PUSH
77733: LD_EXP 91
77737: PPUSH
77738: LD_VAR 0 1
77742: PPUSH
77743: LD_VAR 0 2
77747: PPUSH
77748: CALL_OW 1
77752: ST_TO_ADDR
// end ;
77753: LD_VAR 0 3
77757: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77758: LD_INT 0
77760: PPUSH
// if not mc_bases or not base or not scan_area then
77761: LD_EXP 67
77765: NOT
77766: PUSH
77767: LD_VAR 0 1
77771: NOT
77772: OR
77773: PUSH
77774: LD_VAR 0 2
77778: NOT
77779: OR
77780: IFFALSE 77784
// exit ;
77782: GO 77809
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77784: LD_ADDR_EXP 92
77788: PUSH
77789: LD_EXP 92
77793: PPUSH
77794: LD_VAR 0 1
77798: PPUSH
77799: LD_VAR 0 2
77803: PPUSH
77804: CALL_OW 1
77808: ST_TO_ADDR
// end ; end_of_file
77809: LD_VAR 0 3
77813: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
77814: LD_INT 0
77816: PPUSH
77817: PPUSH
77818: PPUSH
// if not mc_bases then
77819: LD_EXP 67
77823: NOT
77824: IFFALSE 77828
// exit ;
77826: GO 77993
// for i = 1 to mc_bases do
77828: LD_ADDR_VAR 0 4
77832: PUSH
77833: DOUBLE
77834: LD_INT 1
77836: DEC
77837: ST_TO_ADDR
77838: LD_EXP 67
77842: PUSH
77843: FOR_TO
77844: IFFALSE 77991
// begin if sci in mc_bases [ i ] then
77846: LD_VAR 0 2
77850: PUSH
77851: LD_EXP 67
77855: PUSH
77856: LD_VAR 0 4
77860: ARRAY
77861: IN
77862: IFFALSE 77989
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
77864: LD_ADDR_EXP 96
77868: PUSH
77869: LD_EXP 96
77873: PPUSH
77874: LD_VAR 0 4
77878: PUSH
77879: LD_EXP 96
77883: PUSH
77884: LD_VAR 0 4
77888: ARRAY
77889: PUSH
77890: LD_INT 1
77892: PLUS
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: PPUSH
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL 25638 0 3
77907: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
77908: LD_ADDR_VAR 0 5
77912: PUSH
77913: LD_EXP 67
77917: PUSH
77918: LD_VAR 0 4
77922: ARRAY
77923: PPUSH
77924: LD_INT 2
77926: PUSH
77927: LD_INT 30
77929: PUSH
77930: LD_INT 0
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 30
77939: PUSH
77940: LD_INT 1
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: LIST
77951: PPUSH
77952: CALL_OW 72
77956: PPUSH
77957: LD_VAR 0 1
77961: PPUSH
77962: CALL_OW 74
77966: ST_TO_ADDR
// if tmp then
77967: LD_VAR 0 5
77971: IFFALSE 77987
// ComStandNearbyBuilding ( ape , tmp ) ;
77973: LD_VAR 0 1
77977: PPUSH
77978: LD_VAR 0 5
77982: PPUSH
77983: CALL 19880 0 2
// break ;
77987: GO 77991
// end ; end ;
77989: GO 77843
77991: POP
77992: POP
// end ;
77993: LD_VAR 0 3
77997: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
77998: LD_INT 0
78000: PPUSH
78001: PPUSH
78002: PPUSH
// if not mc_bases then
78003: LD_EXP 67
78007: NOT
78008: IFFALSE 78012
// exit ;
78010: GO 78101
// for i = 1 to mc_bases do
78012: LD_ADDR_VAR 0 4
78016: PUSH
78017: DOUBLE
78018: LD_INT 1
78020: DEC
78021: ST_TO_ADDR
78022: LD_EXP 67
78026: PUSH
78027: FOR_TO
78028: IFFALSE 78099
// begin if building in mc_busy_turret_list [ i ] then
78030: LD_VAR 0 1
78034: PUSH
78035: LD_EXP 77
78039: PUSH
78040: LD_VAR 0 4
78044: ARRAY
78045: IN
78046: IFFALSE 78097
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78048: LD_ADDR_VAR 0 5
78052: PUSH
78053: LD_EXP 77
78057: PUSH
78058: LD_VAR 0 4
78062: ARRAY
78063: PUSH
78064: LD_VAR 0 1
78068: DIFF
78069: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78070: LD_ADDR_EXP 77
78074: PUSH
78075: LD_EXP 77
78079: PPUSH
78080: LD_VAR 0 4
78084: PPUSH
78085: LD_VAR 0 5
78089: PPUSH
78090: CALL_OW 1
78094: ST_TO_ADDR
// break ;
78095: GO 78099
// end ; end ;
78097: GO 78027
78099: POP
78100: POP
// end ;
78101: LD_VAR 0 3
78105: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78106: LD_INT 0
78108: PPUSH
78109: PPUSH
78110: PPUSH
// if not mc_bases then
78111: LD_EXP 67
78115: NOT
78116: IFFALSE 78120
// exit ;
78118: GO 78319
// for i = 1 to mc_bases do
78120: LD_ADDR_VAR 0 5
78124: PUSH
78125: DOUBLE
78126: LD_INT 1
78128: DEC
78129: ST_TO_ADDR
78130: LD_EXP 67
78134: PUSH
78135: FOR_TO
78136: IFFALSE 78317
// if building in mc_bases [ i ] then
78138: LD_VAR 0 1
78142: PUSH
78143: LD_EXP 67
78147: PUSH
78148: LD_VAR 0 5
78152: ARRAY
78153: IN
78154: IFFALSE 78315
// begin tmp := mc_bases [ i ] diff building ;
78156: LD_ADDR_VAR 0 6
78160: PUSH
78161: LD_EXP 67
78165: PUSH
78166: LD_VAR 0 5
78170: ARRAY
78171: PUSH
78172: LD_VAR 0 1
78176: DIFF
78177: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78178: LD_ADDR_EXP 67
78182: PUSH
78183: LD_EXP 67
78187: PPUSH
78188: LD_VAR 0 5
78192: PPUSH
78193: LD_VAR 0 6
78197: PPUSH
78198: CALL_OW 1
78202: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78203: LD_VAR 0 1
78207: PUSH
78208: LD_EXP 75
78212: PUSH
78213: LD_VAR 0 5
78217: ARRAY
78218: IN
78219: IFFALSE 78258
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78221: LD_ADDR_EXP 75
78225: PUSH
78226: LD_EXP 75
78230: PPUSH
78231: LD_VAR 0 5
78235: PPUSH
78236: LD_EXP 75
78240: PUSH
78241: LD_VAR 0 5
78245: ARRAY
78246: PUSH
78247: LD_VAR 0 1
78251: DIFF
78252: PPUSH
78253: CALL_OW 1
78257: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78258: LD_VAR 0 1
78262: PUSH
78263: LD_EXP 76
78267: PUSH
78268: LD_VAR 0 5
78272: ARRAY
78273: IN
78274: IFFALSE 78313
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78276: LD_ADDR_EXP 76
78280: PUSH
78281: LD_EXP 76
78285: PPUSH
78286: LD_VAR 0 5
78290: PPUSH
78291: LD_EXP 76
78295: PUSH
78296: LD_VAR 0 5
78300: ARRAY
78301: PUSH
78302: LD_VAR 0 1
78306: DIFF
78307: PPUSH
78308: CALL_OW 1
78312: ST_TO_ADDR
// break ;
78313: GO 78317
// end ;
78315: GO 78135
78317: POP
78318: POP
// end ;
78319: LD_VAR 0 4
78323: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78324: LD_INT 0
78326: PPUSH
78327: PPUSH
78328: PPUSH
// if not mc_bases or not side in mc_sides then
78329: LD_EXP 67
78333: NOT
78334: PUSH
78335: LD_VAR 0 3
78339: PUSH
78340: LD_EXP 93
78344: IN
78345: NOT
78346: OR
78347: IFFALSE 78351
// exit ;
78349: GO 78474
// for i = 1 to mc_vehicles do
78351: LD_ADDR_VAR 0 6
78355: PUSH
78356: DOUBLE
78357: LD_INT 1
78359: DEC
78360: ST_TO_ADDR
78361: LD_EXP 86
78365: PUSH
78366: FOR_TO
78367: IFFALSE 78472
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78369: LD_VAR 0 2
78373: PUSH
78374: LD_EXP 86
78378: PUSH
78379: LD_VAR 0 6
78383: ARRAY
78384: IN
78385: PUSH
78386: LD_VAR 0 1
78390: PUSH
78391: LD_EXP 86
78395: PUSH
78396: LD_VAR 0 6
78400: ARRAY
78401: IN
78402: OR
78403: IFFALSE 78470
// begin tmp := mc_vehicles [ i ] diff old ;
78405: LD_ADDR_VAR 0 7
78409: PUSH
78410: LD_EXP 86
78414: PUSH
78415: LD_VAR 0 6
78419: ARRAY
78420: PUSH
78421: LD_VAR 0 2
78425: DIFF
78426: ST_TO_ADDR
// tmp := tmp diff new ;
78427: LD_ADDR_VAR 0 7
78431: PUSH
78432: LD_VAR 0 7
78436: PUSH
78437: LD_VAR 0 1
78441: DIFF
78442: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78443: LD_ADDR_EXP 86
78447: PUSH
78448: LD_EXP 86
78452: PPUSH
78453: LD_VAR 0 6
78457: PPUSH
78458: LD_VAR 0 7
78462: PPUSH
78463: CALL_OW 1
78467: ST_TO_ADDR
// break ;
78468: GO 78472
// end ;
78470: GO 78366
78472: POP
78473: POP
// end ;
78474: LD_VAR 0 5
78478: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78479: LD_INT 0
78481: PPUSH
78482: PPUSH
78483: PPUSH
78484: PPUSH
// if not mc_bases then
78485: LD_EXP 67
78489: NOT
78490: IFFALSE 78494
// exit ;
78492: GO 78786
// side := GetSide ( vehicle ) ;
78494: LD_ADDR_VAR 0 5
78498: PUSH
78499: LD_VAR 0 1
78503: PPUSH
78504: CALL_OW 255
78508: ST_TO_ADDR
// for i = 1 to mc_bases do
78509: LD_ADDR_VAR 0 4
78513: PUSH
78514: DOUBLE
78515: LD_INT 1
78517: DEC
78518: ST_TO_ADDR
78519: LD_EXP 67
78523: PUSH
78524: FOR_TO
78525: IFFALSE 78784
// begin if factory in mc_bases [ i ] then
78527: LD_VAR 0 2
78531: PUSH
78532: LD_EXP 67
78536: PUSH
78537: LD_VAR 0 4
78541: ARRAY
78542: IN
78543: IFFALSE 78782
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
78545: LD_EXP 89
78549: PUSH
78550: LD_VAR 0 4
78554: ARRAY
78555: PUSH
78556: LD_EXP 78
78560: PUSH
78561: LD_VAR 0 4
78565: ARRAY
78566: LESS
78567: IFFALSE 78738
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
78569: LD_ADDR_EXP 89
78573: PUSH
78574: LD_EXP 89
78578: PPUSH
78579: LD_VAR 0 4
78583: PPUSH
78584: LD_EXP 89
78588: PUSH
78589: LD_VAR 0 4
78593: ARRAY
78594: PUSH
78595: LD_VAR 0 1
78599: ADD
78600: PPUSH
78601: CALL_OW 1
78605: ST_TO_ADDR
// if not mc_scan [ i ] then
78606: LD_EXP 90
78610: PUSH
78611: LD_VAR 0 4
78615: ARRAY
78616: NOT
78617: IFFALSE 78736
// begin if GetControl ( vehicle ) = control_remote then
78619: LD_VAR 0 1
78623: PPUSH
78624: CALL_OW 263
78628: PUSH
78629: LD_INT 2
78631: EQUAL
78632: IFFALSE 78652
// repeat wait ( 0 0$1 ) ;
78634: LD_INT 35
78636: PPUSH
78637: CALL_OW 67
// until IsControledBy ( vehicle ) ;
78641: LD_VAR 0 1
78645: PPUSH
78646: CALL_OW 312
78650: IFFALSE 78634
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
78652: LD_VAR 0 1
78656: PPUSH
78657: LD_EXP 91
78661: PUSH
78662: LD_VAR 0 4
78666: ARRAY
78667: PPUSH
78668: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
78672: LD_VAR 0 1
78676: PPUSH
78677: CALL_OW 263
78681: PUSH
78682: LD_INT 1
78684: NONEQUAL
78685: IFFALSE 78689
// break ;
78687: GO 78784
// repeat wait ( 0 0$1 ) ;
78689: LD_INT 35
78691: PPUSH
78692: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
78696: LD_VAR 0 1
78700: PPUSH
78701: LD_EXP 91
78705: PUSH
78706: LD_VAR 0 4
78710: ARRAY
78711: PPUSH
78712: CALL_OW 308
78716: IFFALSE 78689
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
78718: LD_VAR 0 1
78722: PPUSH
78723: CALL_OW 311
78727: PPUSH
78728: CALL_OW 121
// exit ;
78732: POP
78733: POP
78734: GO 78786
// end ; end else
78736: GO 78782
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
78738: LD_ADDR_EXP 86
78742: PUSH
78743: LD_EXP 86
78747: PPUSH
78748: LD_VAR 0 4
78752: PUSH
78753: LD_EXP 86
78757: PUSH
78758: LD_VAR 0 4
78762: ARRAY
78763: PUSH
78764: LD_INT 1
78766: PLUS
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PPUSH
78772: LD_VAR 0 1
78776: PPUSH
78777: CALL 25638 0 3
78781: ST_TO_ADDR
// end ; end ;
78782: GO 78524
78784: POP
78785: POP
// end ;
78786: LD_VAR 0 3
78790: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
78791: LD_INT 0
78793: PPUSH
78794: PPUSH
78795: PPUSH
78796: PPUSH
// if not mc_bases then
78797: LD_EXP 67
78801: NOT
78802: IFFALSE 78806
// exit ;
78804: GO 79159
// repeat wait ( 0 0$1 ) ;
78806: LD_INT 35
78808: PPUSH
78809: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
78813: LD_VAR 0 2
78817: PPUSH
78818: LD_VAR 0 3
78822: PPUSH
78823: CALL_OW 284
78827: IFFALSE 78806
// if GetResourceTypeXY ( x , y ) = mat_artefact then
78829: LD_VAR 0 2
78833: PPUSH
78834: LD_VAR 0 3
78838: PPUSH
78839: CALL_OW 283
78843: PUSH
78844: LD_INT 4
78846: EQUAL
78847: IFFALSE 78851
// exit ;
78849: GO 79159
// for i = 1 to mc_bases do
78851: LD_ADDR_VAR 0 7
78855: PUSH
78856: DOUBLE
78857: LD_INT 1
78859: DEC
78860: ST_TO_ADDR
78861: LD_EXP 67
78865: PUSH
78866: FOR_TO
78867: IFFALSE 79157
// begin if mc_crates_area [ i ] then
78869: LD_EXP 85
78873: PUSH
78874: LD_VAR 0 7
78878: ARRAY
78879: IFFALSE 78990
// for j in mc_crates_area [ i ] do
78881: LD_ADDR_VAR 0 8
78885: PUSH
78886: LD_EXP 85
78890: PUSH
78891: LD_VAR 0 7
78895: ARRAY
78896: PUSH
78897: FOR_IN
78898: IFFALSE 78988
// if InArea ( x , y , j ) then
78900: LD_VAR 0 2
78904: PPUSH
78905: LD_VAR 0 3
78909: PPUSH
78910: LD_VAR 0 8
78914: PPUSH
78915: CALL_OW 309
78919: IFFALSE 78986
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
78921: LD_ADDR_EXP 83
78925: PUSH
78926: LD_EXP 83
78930: PPUSH
78931: LD_VAR 0 7
78935: PUSH
78936: LD_EXP 83
78940: PUSH
78941: LD_VAR 0 7
78945: ARRAY
78946: PUSH
78947: LD_INT 1
78949: PLUS
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PPUSH
78955: LD_VAR 0 4
78959: PUSH
78960: LD_VAR 0 2
78964: PUSH
78965: LD_VAR 0 3
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: LIST
78974: PPUSH
78975: CALL 25638 0 3
78979: ST_TO_ADDR
// exit ;
78980: POP
78981: POP
78982: POP
78983: POP
78984: GO 79159
// end ;
78986: GO 78897
78988: POP
78989: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78990: LD_ADDR_VAR 0 9
78994: PUSH
78995: LD_EXP 67
78999: PUSH
79000: LD_VAR 0 7
79004: ARRAY
79005: PPUSH
79006: LD_INT 2
79008: PUSH
79009: LD_INT 30
79011: PUSH
79012: LD_INT 0
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 30
79021: PUSH
79022: LD_INT 1
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: LIST
79033: PPUSH
79034: CALL_OW 72
79038: ST_TO_ADDR
// if not depot then
79039: LD_VAR 0 9
79043: NOT
79044: IFFALSE 79048
// continue ;
79046: GO 78866
// for j in depot do
79048: LD_ADDR_VAR 0 8
79052: PUSH
79053: LD_VAR 0 9
79057: PUSH
79058: FOR_IN
79059: IFFALSE 79153
// if GetDistUnitXY ( j , x , y ) < 30 then
79061: LD_VAR 0 8
79065: PPUSH
79066: LD_VAR 0 2
79070: PPUSH
79071: LD_VAR 0 3
79075: PPUSH
79076: CALL_OW 297
79080: PUSH
79081: LD_INT 30
79083: LESS
79084: IFFALSE 79151
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79086: LD_ADDR_EXP 83
79090: PUSH
79091: LD_EXP 83
79095: PPUSH
79096: LD_VAR 0 7
79100: PUSH
79101: LD_EXP 83
79105: PUSH
79106: LD_VAR 0 7
79110: ARRAY
79111: PUSH
79112: LD_INT 1
79114: PLUS
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PPUSH
79120: LD_VAR 0 4
79124: PUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_VAR 0 3
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: LIST
79139: PPUSH
79140: CALL 25638 0 3
79144: ST_TO_ADDR
// exit ;
79145: POP
79146: POP
79147: POP
79148: POP
79149: GO 79159
// end ;
79151: GO 79058
79153: POP
79154: POP
// end ;
79155: GO 78866
79157: POP
79158: POP
// end ;
79159: LD_VAR 0 6
79163: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79164: LD_INT 0
79166: PPUSH
79167: PPUSH
79168: PPUSH
79169: PPUSH
// side := GetSide ( lab ) ;
79170: LD_ADDR_VAR 0 4
79174: PUSH
79175: LD_VAR 0 2
79179: PPUSH
79180: CALL_OW 255
79184: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79185: LD_VAR 0 4
79189: PUSH
79190: LD_EXP 93
79194: IN
79195: NOT
79196: PUSH
79197: LD_EXP 94
79201: NOT
79202: OR
79203: PUSH
79204: LD_EXP 67
79208: NOT
79209: OR
79210: IFFALSE 79214
// exit ;
79212: GO 79447
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79214: LD_ADDR_EXP 94
79218: PUSH
79219: LD_EXP 94
79223: PPUSH
79224: LD_VAR 0 4
79228: PPUSH
79229: LD_EXP 94
79233: PUSH
79234: LD_VAR 0 4
79238: ARRAY
79239: PUSH
79240: LD_VAR 0 1
79244: DIFF
79245: PPUSH
79246: CALL_OW 1
79250: ST_TO_ADDR
// for i = 1 to mc_bases do
79251: LD_ADDR_VAR 0 5
79255: PUSH
79256: DOUBLE
79257: LD_INT 1
79259: DEC
79260: ST_TO_ADDR
79261: LD_EXP 67
79265: PUSH
79266: FOR_TO
79267: IFFALSE 79445
// begin if lab in mc_bases [ i ] then
79269: LD_VAR 0 2
79273: PUSH
79274: LD_EXP 67
79278: PUSH
79279: LD_VAR 0 5
79283: ARRAY
79284: IN
79285: IFFALSE 79443
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79287: LD_VAR 0 1
79291: PUSH
79292: LD_INT 11
79294: PUSH
79295: LD_INT 4
79297: PUSH
79298: LD_INT 3
79300: PUSH
79301: LD_INT 2
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: IN
79310: PUSH
79311: LD_EXP 97
79315: PUSH
79316: LD_VAR 0 5
79320: ARRAY
79321: AND
79322: IFFALSE 79443
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79324: LD_ADDR_VAR 0 6
79328: PUSH
79329: LD_EXP 97
79333: PUSH
79334: LD_VAR 0 5
79338: ARRAY
79339: PUSH
79340: LD_INT 1
79342: ARRAY
79343: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79344: LD_ADDR_EXP 97
79348: PUSH
79349: LD_EXP 97
79353: PPUSH
79354: LD_VAR 0 5
79358: PPUSH
79359: EMPTY
79360: PPUSH
79361: CALL_OW 1
79365: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79366: LD_VAR 0 6
79370: PPUSH
79371: LD_INT 0
79373: PPUSH
79374: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79378: LD_VAR 0 6
79382: PPUSH
79383: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79387: LD_ADDR_EXP 96
79391: PUSH
79392: LD_EXP 96
79396: PPUSH
79397: LD_VAR 0 5
79401: PPUSH
79402: LD_EXP 96
79406: PUSH
79407: LD_VAR 0 5
79411: ARRAY
79412: PPUSH
79413: LD_INT 1
79415: PPUSH
79416: LD_VAR 0 6
79420: PPUSH
79421: CALL_OW 2
79425: PPUSH
79426: CALL_OW 1
79430: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79431: LD_VAR 0 5
79435: PPUSH
79436: LD_INT 112
79438: PPUSH
79439: CALL 63386 0 2
// end ; end ; end ;
79443: GO 79266
79445: POP
79446: POP
// end ;
79447: LD_VAR 0 3
79451: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79452: LD_INT 0
79454: PPUSH
79455: PPUSH
79456: PPUSH
79457: PPUSH
79458: PPUSH
79459: PPUSH
79460: PPUSH
79461: PPUSH
// if not mc_bases then
79462: LD_EXP 67
79466: NOT
79467: IFFALSE 79471
// exit ;
79469: GO 80396
// for i = 1 to mc_bases do
79471: LD_ADDR_VAR 0 3
79475: PUSH
79476: DOUBLE
79477: LD_INT 1
79479: DEC
79480: ST_TO_ADDR
79481: LD_EXP 67
79485: PUSH
79486: FOR_TO
79487: IFFALSE 80394
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79489: LD_VAR 0 1
79493: PUSH
79494: LD_EXP 67
79498: PUSH
79499: LD_VAR 0 3
79503: ARRAY
79504: IN
79505: PUSH
79506: LD_VAR 0 1
79510: PUSH
79511: LD_EXP 74
79515: PUSH
79516: LD_VAR 0 3
79520: ARRAY
79521: IN
79522: OR
79523: PUSH
79524: LD_VAR 0 1
79528: PUSH
79529: LD_EXP 86
79533: PUSH
79534: LD_VAR 0 3
79538: ARRAY
79539: IN
79540: OR
79541: PUSH
79542: LD_VAR 0 1
79546: PUSH
79547: LD_EXP 96
79551: PUSH
79552: LD_VAR 0 3
79556: ARRAY
79557: IN
79558: OR
79559: PUSH
79560: LD_VAR 0 1
79564: PUSH
79565: LD_EXP 97
79569: PUSH
79570: LD_VAR 0 3
79574: ARRAY
79575: IN
79576: OR
79577: IFFALSE 80392
// begin if un in mc_ape [ i ] then
79579: LD_VAR 0 1
79583: PUSH
79584: LD_EXP 96
79588: PUSH
79589: LD_VAR 0 3
79593: ARRAY
79594: IN
79595: IFFALSE 79634
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
79597: LD_ADDR_EXP 96
79601: PUSH
79602: LD_EXP 96
79606: PPUSH
79607: LD_VAR 0 3
79611: PPUSH
79612: LD_EXP 96
79616: PUSH
79617: LD_VAR 0 3
79621: ARRAY
79622: PUSH
79623: LD_VAR 0 1
79627: DIFF
79628: PPUSH
79629: CALL_OW 1
79633: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
79634: LD_VAR 0 1
79638: PUSH
79639: LD_EXP 97
79643: PUSH
79644: LD_VAR 0 3
79648: ARRAY
79649: IN
79650: IFFALSE 79674
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79652: LD_ADDR_EXP 97
79656: PUSH
79657: LD_EXP 97
79661: PPUSH
79662: LD_VAR 0 3
79666: PPUSH
79667: EMPTY
79668: PPUSH
79669: CALL_OW 1
79673: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
79674: LD_VAR 0 1
79678: PPUSH
79679: CALL_OW 247
79683: PUSH
79684: LD_INT 2
79686: EQUAL
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: CALL_OW 110
79697: PUSH
79698: LD_INT 20
79700: EQUAL
79701: AND
79702: IFFALSE 79805
// begin fac := MC_GetBuilding ( i , b_factory ) ;
79704: LD_ADDR_VAR 0 8
79708: PUSH
79709: LD_VAR 0 3
79713: PPUSH
79714: LD_INT 3
79716: PPUSH
79717: CALL 76918 0 2
79721: ST_TO_ADDR
// if fac then
79722: LD_VAR 0 8
79726: IFFALSE 79805
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
79728: LD_ADDR_VAR 0 9
79732: PUSH
79733: LD_VAR 0 8
79737: PPUSH
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 265
79747: PPUSH
79748: LD_VAR 0 1
79752: PPUSH
79753: CALL_OW 262
79757: PPUSH
79758: LD_VAR 0 1
79762: PPUSH
79763: CALL_OW 263
79767: PPUSH
79768: LD_VAR 0 1
79772: PPUSH
79773: CALL_OW 264
79777: PPUSH
79778: CALL 22803 0 5
79782: ST_TO_ADDR
// if components then
79783: LD_VAR 0 9
79787: IFFALSE 79803
// MC_InsertProduceList ( i , components ) ;
79789: LD_VAR 0 3
79793: PPUSH
79794: LD_VAR 0 9
79798: PPUSH
79799: CALL 76485 0 2
// break ;
79803: GO 80394
// end ; end ; if GetType ( un ) = unit_building then
79805: LD_VAR 0 1
79809: PPUSH
79810: CALL_OW 247
79814: PUSH
79815: LD_INT 3
79817: EQUAL
79818: IFFALSE 80115
// begin btype := GetBType ( un ) ;
79820: LD_ADDR_VAR 0 5
79824: PUSH
79825: LD_VAR 0 1
79829: PPUSH
79830: CALL_OW 266
79834: ST_TO_ADDR
// if btype = b_warehouse then
79835: LD_VAR 0 5
79839: PUSH
79840: LD_INT 1
79842: EQUAL
79843: IFFALSE 79861
// begin btype := b_depot ;
79845: LD_ADDR_VAR 0 5
79849: PUSH
79850: LD_INT 0
79852: ST_TO_ADDR
// pos := 1 ;
79853: LD_ADDR_VAR 0 6
79857: PUSH
79858: LD_INT 1
79860: ST_TO_ADDR
// end ; if btype = b_factory then
79861: LD_VAR 0 5
79865: PUSH
79866: LD_INT 3
79868: EQUAL
79869: IFFALSE 79887
// begin btype := b_workshop ;
79871: LD_ADDR_VAR 0 5
79875: PUSH
79876: LD_INT 2
79878: ST_TO_ADDR
// pos := 1 ;
79879: LD_ADDR_VAR 0 6
79883: PUSH
79884: LD_INT 1
79886: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
79887: LD_VAR 0 5
79891: PUSH
79892: LD_INT 7
79894: PUSH
79895: LD_INT 8
79897: PUSH
79898: EMPTY
79899: LIST
79900: LIST
79901: IN
79902: IFFALSE 79912
// btype := b_lab ;
79904: LD_ADDR_VAR 0 5
79908: PUSH
79909: LD_INT 6
79911: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
79912: LD_ADDR_EXP 72
79916: PUSH
79917: LD_EXP 72
79921: PPUSH
79922: LD_VAR 0 3
79926: PUSH
79927: LD_EXP 72
79931: PUSH
79932: LD_VAR 0 3
79936: ARRAY
79937: PUSH
79938: LD_INT 1
79940: PLUS
79941: PUSH
79942: EMPTY
79943: LIST
79944: LIST
79945: PPUSH
79946: LD_VAR 0 5
79950: PUSH
79951: LD_VAR 0 1
79955: PPUSH
79956: CALL_OW 250
79960: PUSH
79961: LD_VAR 0 1
79965: PPUSH
79966: CALL_OW 251
79970: PUSH
79971: LD_VAR 0 1
79975: PPUSH
79976: CALL_OW 254
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: LIST
79985: LIST
79986: PPUSH
79987: CALL 25638 0 3
79991: ST_TO_ADDR
// if pos = 1 then
79992: LD_VAR 0 6
79996: PUSH
79997: LD_INT 1
79999: EQUAL
80000: IFFALSE 80115
// begin tmp := mc_build_list [ i ] ;
80002: LD_ADDR_VAR 0 7
80006: PUSH
80007: LD_EXP 72
80011: PUSH
80012: LD_VAR 0 3
80016: ARRAY
80017: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80018: LD_VAR 0 7
80022: PPUSH
80023: LD_INT 2
80025: PUSH
80026: LD_INT 30
80028: PUSH
80029: LD_INT 0
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: LD_INT 30
80038: PUSH
80039: LD_INT 1
80041: PUSH
80042: EMPTY
80043: LIST
80044: LIST
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: LIST
80050: PPUSH
80051: CALL_OW 72
80055: IFFALSE 80065
// pos := 2 ;
80057: LD_ADDR_VAR 0 6
80061: PUSH
80062: LD_INT 2
80064: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80065: LD_ADDR_VAR 0 7
80069: PUSH
80070: LD_VAR 0 7
80074: PPUSH
80075: LD_VAR 0 6
80079: PPUSH
80080: LD_VAR 0 7
80084: PPUSH
80085: CALL 25529 0 3
80089: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80090: LD_ADDR_EXP 72
80094: PUSH
80095: LD_EXP 72
80099: PPUSH
80100: LD_VAR 0 3
80104: PPUSH
80105: LD_VAR 0 7
80109: PPUSH
80110: CALL_OW 1
80114: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80115: LD_VAR 0 1
80119: PUSH
80120: LD_EXP 67
80124: PUSH
80125: LD_VAR 0 3
80129: ARRAY
80130: IN
80131: IFFALSE 80170
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80133: LD_ADDR_EXP 67
80137: PUSH
80138: LD_EXP 67
80142: PPUSH
80143: LD_VAR 0 3
80147: PPUSH
80148: LD_EXP 67
80152: PUSH
80153: LD_VAR 0 3
80157: ARRAY
80158: PUSH
80159: LD_VAR 0 1
80163: DIFF
80164: PPUSH
80165: CALL_OW 1
80169: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80170: LD_VAR 0 1
80174: PUSH
80175: LD_EXP 74
80179: PUSH
80180: LD_VAR 0 3
80184: ARRAY
80185: IN
80186: IFFALSE 80225
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80188: LD_ADDR_EXP 74
80192: PUSH
80193: LD_EXP 74
80197: PPUSH
80198: LD_VAR 0 3
80202: PPUSH
80203: LD_EXP 74
80207: PUSH
80208: LD_VAR 0 3
80212: ARRAY
80213: PUSH
80214: LD_VAR 0 1
80218: DIFF
80219: PPUSH
80220: CALL_OW 1
80224: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80225: LD_VAR 0 1
80229: PUSH
80230: LD_EXP 86
80234: PUSH
80235: LD_VAR 0 3
80239: ARRAY
80240: IN
80241: IFFALSE 80280
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80243: LD_ADDR_EXP 86
80247: PUSH
80248: LD_EXP 86
80252: PPUSH
80253: LD_VAR 0 3
80257: PPUSH
80258: LD_EXP 86
80262: PUSH
80263: LD_VAR 0 3
80267: ARRAY
80268: PUSH
80269: LD_VAR 0 1
80273: DIFF
80274: PPUSH
80275: CALL_OW 1
80279: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80280: LD_VAR 0 1
80284: PUSH
80285: LD_EXP 76
80289: PUSH
80290: LD_VAR 0 3
80294: ARRAY
80295: IN
80296: IFFALSE 80335
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80298: LD_ADDR_EXP 76
80302: PUSH
80303: LD_EXP 76
80307: PPUSH
80308: LD_VAR 0 3
80312: PPUSH
80313: LD_EXP 76
80317: PUSH
80318: LD_VAR 0 3
80322: ARRAY
80323: PUSH
80324: LD_VAR 0 1
80328: DIFF
80329: PPUSH
80330: CALL_OW 1
80334: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80335: LD_VAR 0 1
80339: PUSH
80340: LD_EXP 75
80344: PUSH
80345: LD_VAR 0 3
80349: ARRAY
80350: IN
80351: IFFALSE 80390
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80353: LD_ADDR_EXP 75
80357: PUSH
80358: LD_EXP 75
80362: PPUSH
80363: LD_VAR 0 3
80367: PPUSH
80368: LD_EXP 75
80372: PUSH
80373: LD_VAR 0 3
80377: ARRAY
80378: PUSH
80379: LD_VAR 0 1
80383: DIFF
80384: PPUSH
80385: CALL_OW 1
80389: ST_TO_ADDR
// end ; break ;
80390: GO 80394
// end ;
80392: GO 79486
80394: POP
80395: POP
// end ;
80396: LD_VAR 0 2
80400: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80401: LD_INT 0
80403: PPUSH
80404: PPUSH
80405: PPUSH
// if not mc_bases then
80406: LD_EXP 67
80410: NOT
80411: IFFALSE 80415
// exit ;
80413: GO 80630
// for i = 1 to mc_bases do
80415: LD_ADDR_VAR 0 3
80419: PUSH
80420: DOUBLE
80421: LD_INT 1
80423: DEC
80424: ST_TO_ADDR
80425: LD_EXP 67
80429: PUSH
80430: FOR_TO
80431: IFFALSE 80628
// begin if building in mc_construct_list [ i ] then
80433: LD_VAR 0 1
80437: PUSH
80438: LD_EXP 74
80442: PUSH
80443: LD_VAR 0 3
80447: ARRAY
80448: IN
80449: IFFALSE 80626
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80451: LD_ADDR_EXP 74
80455: PUSH
80456: LD_EXP 74
80460: PPUSH
80461: LD_VAR 0 3
80465: PPUSH
80466: LD_EXP 74
80470: PUSH
80471: LD_VAR 0 3
80475: ARRAY
80476: PUSH
80477: LD_VAR 0 1
80481: DIFF
80482: PPUSH
80483: CALL_OW 1
80487: ST_TO_ADDR
// if building in mc_lab [ i ] then
80488: LD_VAR 0 1
80492: PUSH
80493: LD_EXP 100
80497: PUSH
80498: LD_VAR 0 3
80502: ARRAY
80503: IN
80504: IFFALSE 80559
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
80506: LD_ADDR_EXP 101
80510: PUSH
80511: LD_EXP 101
80515: PPUSH
80516: LD_VAR 0 3
80520: PPUSH
80521: LD_EXP 101
80525: PUSH
80526: LD_VAR 0 3
80530: ARRAY
80531: PPUSH
80532: LD_INT 1
80534: PPUSH
80535: LD_EXP 101
80539: PUSH
80540: LD_VAR 0 3
80544: ARRAY
80545: PPUSH
80546: LD_INT 0
80548: PPUSH
80549: CALL 24621 0 4
80553: PPUSH
80554: CALL_OW 1
80558: ST_TO_ADDR
// if not building in mc_bases [ i ] then
80559: LD_VAR 0 1
80563: PUSH
80564: LD_EXP 67
80568: PUSH
80569: LD_VAR 0 3
80573: ARRAY
80574: IN
80575: NOT
80576: IFFALSE 80622
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80578: LD_ADDR_EXP 67
80582: PUSH
80583: LD_EXP 67
80587: PPUSH
80588: LD_VAR 0 3
80592: PUSH
80593: LD_EXP 67
80597: PUSH
80598: LD_VAR 0 3
80602: ARRAY
80603: PUSH
80604: LD_INT 1
80606: PLUS
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PPUSH
80612: LD_VAR 0 1
80616: PPUSH
80617: CALL 25638 0 3
80621: ST_TO_ADDR
// exit ;
80622: POP
80623: POP
80624: GO 80630
// end ; end ;
80626: GO 80430
80628: POP
80629: POP
// end ;
80630: LD_VAR 0 2
80634: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
80635: LD_INT 0
80637: PPUSH
80638: PPUSH
80639: PPUSH
80640: PPUSH
80641: PPUSH
80642: PPUSH
80643: PPUSH
// if not mc_bases then
80644: LD_EXP 67
80648: NOT
80649: IFFALSE 80653
// exit ;
80651: GO 81314
// for i = 1 to mc_bases do
80653: LD_ADDR_VAR 0 3
80657: PUSH
80658: DOUBLE
80659: LD_INT 1
80661: DEC
80662: ST_TO_ADDR
80663: LD_EXP 67
80667: PUSH
80668: FOR_TO
80669: IFFALSE 81312
// begin if building in mc_construct_list [ i ] then
80671: LD_VAR 0 1
80675: PUSH
80676: LD_EXP 74
80680: PUSH
80681: LD_VAR 0 3
80685: ARRAY
80686: IN
80687: IFFALSE 81310
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80689: LD_ADDR_EXP 74
80693: PUSH
80694: LD_EXP 74
80698: PPUSH
80699: LD_VAR 0 3
80703: PPUSH
80704: LD_EXP 74
80708: PUSH
80709: LD_VAR 0 3
80713: ARRAY
80714: PUSH
80715: LD_VAR 0 1
80719: DIFF
80720: PPUSH
80721: CALL_OW 1
80725: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80726: LD_ADDR_EXP 67
80730: PUSH
80731: LD_EXP 67
80735: PPUSH
80736: LD_VAR 0 3
80740: PUSH
80741: LD_EXP 67
80745: PUSH
80746: LD_VAR 0 3
80750: ARRAY
80751: PUSH
80752: LD_INT 1
80754: PLUS
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: PPUSH
80760: LD_VAR 0 1
80764: PPUSH
80765: CALL 25638 0 3
80769: ST_TO_ADDR
// btype := GetBType ( building ) ;
80770: LD_ADDR_VAR 0 5
80774: PUSH
80775: LD_VAR 0 1
80779: PPUSH
80780: CALL_OW 266
80784: ST_TO_ADDR
// side := GetSide ( building ) ;
80785: LD_ADDR_VAR 0 8
80789: PUSH
80790: LD_VAR 0 1
80794: PPUSH
80795: CALL_OW 255
80799: ST_TO_ADDR
// if btype = b_lab then
80800: LD_VAR 0 5
80804: PUSH
80805: LD_INT 6
80807: EQUAL
80808: IFFALSE 80858
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
80810: LD_ADDR_EXP 100
80814: PUSH
80815: LD_EXP 100
80819: PPUSH
80820: LD_VAR 0 3
80824: PUSH
80825: LD_EXP 100
80829: PUSH
80830: LD_VAR 0 3
80834: ARRAY
80835: PUSH
80836: LD_INT 1
80838: PLUS
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PPUSH
80844: LD_VAR 0 1
80848: PPUSH
80849: CALL 25638 0 3
80853: ST_TO_ADDR
// exit ;
80854: POP
80855: POP
80856: GO 81314
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
80858: LD_VAR 0 5
80862: PUSH
80863: LD_INT 0
80865: PUSH
80866: LD_INT 2
80868: PUSH
80869: LD_INT 4
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: LIST
80876: IN
80877: IFFALSE 81001
// begin if btype = b_armoury then
80879: LD_VAR 0 5
80883: PUSH
80884: LD_INT 4
80886: EQUAL
80887: IFFALSE 80897
// btype := b_barracks ;
80889: LD_ADDR_VAR 0 5
80893: PUSH
80894: LD_INT 5
80896: ST_TO_ADDR
// if btype = b_depot then
80897: LD_VAR 0 5
80901: PUSH
80902: LD_INT 0
80904: EQUAL
80905: IFFALSE 80915
// btype := b_warehouse ;
80907: LD_ADDR_VAR 0 5
80911: PUSH
80912: LD_INT 1
80914: ST_TO_ADDR
// if btype = b_workshop then
80915: LD_VAR 0 5
80919: PUSH
80920: LD_INT 2
80922: EQUAL
80923: IFFALSE 80933
// btype := b_factory ;
80925: LD_ADDR_VAR 0 5
80929: PUSH
80930: LD_INT 3
80932: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
80933: LD_VAR 0 5
80937: PPUSH
80938: LD_VAR 0 8
80942: PPUSH
80943: CALL_OW 323
80947: PUSH
80948: LD_INT 1
80950: EQUAL
80951: IFFALSE 80997
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
80953: LD_ADDR_EXP 99
80957: PUSH
80958: LD_EXP 99
80962: PPUSH
80963: LD_VAR 0 3
80967: PUSH
80968: LD_EXP 99
80972: PUSH
80973: LD_VAR 0 3
80977: ARRAY
80978: PUSH
80979: LD_INT 1
80981: PLUS
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PPUSH
80987: LD_VAR 0 1
80991: PPUSH
80992: CALL 25638 0 3
80996: ST_TO_ADDR
// exit ;
80997: POP
80998: POP
80999: GO 81314
// end ; if btype in [ b_bunker , b_turret ] then
81001: LD_VAR 0 5
81005: PUSH
81006: LD_INT 32
81008: PUSH
81009: LD_INT 33
81011: PUSH
81012: EMPTY
81013: LIST
81014: LIST
81015: IN
81016: IFFALSE 81306
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81018: LD_ADDR_EXP 75
81022: PUSH
81023: LD_EXP 75
81027: PPUSH
81028: LD_VAR 0 3
81032: PUSH
81033: LD_EXP 75
81037: PUSH
81038: LD_VAR 0 3
81042: ARRAY
81043: PUSH
81044: LD_INT 1
81046: PLUS
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PPUSH
81052: LD_VAR 0 1
81056: PPUSH
81057: CALL 25638 0 3
81061: ST_TO_ADDR
// if btype = b_bunker then
81062: LD_VAR 0 5
81066: PUSH
81067: LD_INT 32
81069: EQUAL
81070: IFFALSE 81306
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81072: LD_ADDR_EXP 76
81076: PUSH
81077: LD_EXP 76
81081: PPUSH
81082: LD_VAR 0 3
81086: PUSH
81087: LD_EXP 76
81091: PUSH
81092: LD_VAR 0 3
81096: ARRAY
81097: PUSH
81098: LD_INT 1
81100: PLUS
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PPUSH
81106: LD_VAR 0 1
81110: PPUSH
81111: CALL 25638 0 3
81115: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81116: LD_ADDR_VAR 0 6
81120: PUSH
81121: LD_EXP 67
81125: PUSH
81126: LD_VAR 0 3
81130: ARRAY
81131: PPUSH
81132: LD_INT 25
81134: PUSH
81135: LD_INT 1
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: PUSH
81142: LD_INT 3
81144: PUSH
81145: LD_INT 54
81147: PUSH
81148: EMPTY
81149: LIST
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PPUSH
81159: CALL_OW 72
81163: ST_TO_ADDR
// if tmp then
81164: LD_VAR 0 6
81168: IFFALSE 81174
// exit ;
81170: POP
81171: POP
81172: GO 81314
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81174: LD_ADDR_VAR 0 6
81178: PUSH
81179: LD_EXP 67
81183: PUSH
81184: LD_VAR 0 3
81188: ARRAY
81189: PPUSH
81190: LD_INT 2
81192: PUSH
81193: LD_INT 30
81195: PUSH
81196: LD_INT 4
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PUSH
81203: LD_INT 30
81205: PUSH
81206: LD_INT 5
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PUSH
81213: EMPTY
81214: LIST
81215: LIST
81216: LIST
81217: PPUSH
81218: CALL_OW 72
81222: ST_TO_ADDR
// if not tmp then
81223: LD_VAR 0 6
81227: NOT
81228: IFFALSE 81234
// exit ;
81230: POP
81231: POP
81232: GO 81314
// for j in tmp do
81234: LD_ADDR_VAR 0 4
81238: PUSH
81239: LD_VAR 0 6
81243: PUSH
81244: FOR_IN
81245: IFFALSE 81304
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81247: LD_ADDR_VAR 0 7
81251: PUSH
81252: LD_VAR 0 4
81256: PPUSH
81257: CALL_OW 313
81261: PPUSH
81262: LD_INT 25
81264: PUSH
81265: LD_INT 1
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: PPUSH
81272: CALL_OW 72
81276: ST_TO_ADDR
// if units then
81277: LD_VAR 0 7
81281: IFFALSE 81302
// begin ComExitBuilding ( units [ 1 ] ) ;
81283: LD_VAR 0 7
81287: PUSH
81288: LD_INT 1
81290: ARRAY
81291: PPUSH
81292: CALL_OW 122
// exit ;
81296: POP
81297: POP
81298: POP
81299: POP
81300: GO 81314
// end ; end ;
81302: GO 81244
81304: POP
81305: POP
// end ; end ; exit ;
81306: POP
81307: POP
81308: GO 81314
// end ; end ;
81310: GO 80668
81312: POP
81313: POP
// end ;
81314: LD_VAR 0 2
81318: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81319: LD_INT 0
81321: PPUSH
81322: PPUSH
81323: PPUSH
81324: PPUSH
81325: PPUSH
81326: PPUSH
81327: PPUSH
// if not mc_bases then
81328: LD_EXP 67
81332: NOT
81333: IFFALSE 81337
// exit ;
81335: GO 81568
// btype := GetBType ( building ) ;
81337: LD_ADDR_VAR 0 6
81341: PUSH
81342: LD_VAR 0 1
81346: PPUSH
81347: CALL_OW 266
81351: ST_TO_ADDR
// x := GetX ( building ) ;
81352: LD_ADDR_VAR 0 7
81356: PUSH
81357: LD_VAR 0 1
81361: PPUSH
81362: CALL_OW 250
81366: ST_TO_ADDR
// y := GetY ( building ) ;
81367: LD_ADDR_VAR 0 8
81371: PUSH
81372: LD_VAR 0 1
81376: PPUSH
81377: CALL_OW 251
81381: ST_TO_ADDR
// d := GetDir ( building ) ;
81382: LD_ADDR_VAR 0 9
81386: PUSH
81387: LD_VAR 0 1
81391: PPUSH
81392: CALL_OW 254
81396: ST_TO_ADDR
// for i = 1 to mc_bases do
81397: LD_ADDR_VAR 0 4
81401: PUSH
81402: DOUBLE
81403: LD_INT 1
81405: DEC
81406: ST_TO_ADDR
81407: LD_EXP 67
81411: PUSH
81412: FOR_TO
81413: IFFALSE 81566
// begin if not mc_build_list [ i ] then
81415: LD_EXP 72
81419: PUSH
81420: LD_VAR 0 4
81424: ARRAY
81425: NOT
81426: IFFALSE 81430
// continue ;
81428: GO 81412
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
81430: LD_VAR 0 6
81434: PUSH
81435: LD_VAR 0 7
81439: PUSH
81440: LD_VAR 0 8
81444: PUSH
81445: LD_VAR 0 9
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: LIST
81454: LIST
81455: PPUSH
81456: LD_EXP 72
81460: PUSH
81461: LD_VAR 0 4
81465: ARRAY
81466: PUSH
81467: LD_INT 1
81469: ARRAY
81470: PPUSH
81471: CALL 31275 0 2
81475: IFFALSE 81564
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
81477: LD_ADDR_EXP 72
81481: PUSH
81482: LD_EXP 72
81486: PPUSH
81487: LD_VAR 0 4
81491: PPUSH
81492: LD_EXP 72
81496: PUSH
81497: LD_VAR 0 4
81501: ARRAY
81502: PPUSH
81503: LD_INT 1
81505: PPUSH
81506: CALL_OW 3
81510: PPUSH
81511: CALL_OW 1
81515: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
81516: LD_ADDR_EXP 74
81520: PUSH
81521: LD_EXP 74
81525: PPUSH
81526: LD_VAR 0 4
81530: PUSH
81531: LD_EXP 74
81535: PUSH
81536: LD_VAR 0 4
81540: ARRAY
81541: PUSH
81542: LD_INT 1
81544: PLUS
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: PPUSH
81550: LD_VAR 0 1
81554: PPUSH
81555: CALL 25638 0 3
81559: ST_TO_ADDR
// exit ;
81560: POP
81561: POP
81562: GO 81568
// end ; end ;
81564: GO 81412
81566: POP
81567: POP
// end ;
81568: LD_VAR 0 3
81572: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
81573: LD_INT 0
81575: PPUSH
81576: PPUSH
81577: PPUSH
// if not mc_bases then
81578: LD_EXP 67
81582: NOT
81583: IFFALSE 81587
// exit ;
81585: GO 81777
// for i = 1 to mc_bases do
81587: LD_ADDR_VAR 0 4
81591: PUSH
81592: DOUBLE
81593: LD_INT 1
81595: DEC
81596: ST_TO_ADDR
81597: LD_EXP 67
81601: PUSH
81602: FOR_TO
81603: IFFALSE 81690
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
81605: LD_VAR 0 1
81609: PUSH
81610: LD_EXP 75
81614: PUSH
81615: LD_VAR 0 4
81619: ARRAY
81620: IN
81621: PUSH
81622: LD_VAR 0 1
81626: PUSH
81627: LD_EXP 76
81631: PUSH
81632: LD_VAR 0 4
81636: ARRAY
81637: IN
81638: NOT
81639: AND
81640: IFFALSE 81688
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81642: LD_ADDR_EXP 76
81646: PUSH
81647: LD_EXP 76
81651: PPUSH
81652: LD_VAR 0 4
81656: PUSH
81657: LD_EXP 76
81661: PUSH
81662: LD_VAR 0 4
81666: ARRAY
81667: PUSH
81668: LD_INT 1
81670: PLUS
81671: PUSH
81672: EMPTY
81673: LIST
81674: LIST
81675: PPUSH
81676: LD_VAR 0 1
81680: PPUSH
81681: CALL 25638 0 3
81685: ST_TO_ADDR
// break ;
81686: GO 81690
// end ; end ;
81688: GO 81602
81690: POP
81691: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
81692: LD_VAR 0 1
81696: PPUSH
81697: CALL_OW 257
81701: PUSH
81702: LD_EXP 93
81706: IN
81707: PUSH
81708: LD_VAR 0 1
81712: PPUSH
81713: CALL_OW 266
81717: PUSH
81718: LD_INT 5
81720: EQUAL
81721: AND
81722: PUSH
81723: LD_VAR 0 2
81727: PPUSH
81728: CALL_OW 110
81732: PUSH
81733: LD_INT 18
81735: NONEQUAL
81736: AND
81737: IFFALSE 81777
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
81739: LD_VAR 0 2
81743: PPUSH
81744: CALL_OW 257
81748: PUSH
81749: LD_INT 5
81751: PUSH
81752: LD_INT 8
81754: PUSH
81755: LD_INT 9
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: LIST
81762: IN
81763: IFFALSE 81777
// SetClass ( unit , 1 ) ;
81765: LD_VAR 0 2
81769: PPUSH
81770: LD_INT 1
81772: PPUSH
81773: CALL_OW 336
// end ;
81777: LD_VAR 0 3
81781: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
81782: LD_INT 0
81784: PPUSH
81785: PPUSH
// if not mc_bases then
81786: LD_EXP 67
81790: NOT
81791: IFFALSE 81795
// exit ;
81793: GO 81911
// if GetLives ( abandoned_vehicle ) > 250 then
81795: LD_VAR 0 2
81799: PPUSH
81800: CALL_OW 256
81804: PUSH
81805: LD_INT 250
81807: GREATER
81808: IFFALSE 81812
// exit ;
81810: GO 81911
// for i = 1 to mc_bases do
81812: LD_ADDR_VAR 0 6
81816: PUSH
81817: DOUBLE
81818: LD_INT 1
81820: DEC
81821: ST_TO_ADDR
81822: LD_EXP 67
81826: PUSH
81827: FOR_TO
81828: IFFALSE 81909
// begin if driver in mc_bases [ i ] then
81830: LD_VAR 0 1
81834: PUSH
81835: LD_EXP 67
81839: PUSH
81840: LD_VAR 0 6
81844: ARRAY
81845: IN
81846: IFFALSE 81907
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
81848: LD_VAR 0 1
81852: PPUSH
81853: LD_EXP 67
81857: PUSH
81858: LD_VAR 0 6
81862: ARRAY
81863: PPUSH
81864: LD_INT 2
81866: PUSH
81867: LD_INT 30
81869: PUSH
81870: LD_INT 0
81872: PUSH
81873: EMPTY
81874: LIST
81875: LIST
81876: PUSH
81877: LD_INT 30
81879: PUSH
81880: LD_INT 1
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: PUSH
81887: EMPTY
81888: LIST
81889: LIST
81890: LIST
81891: PPUSH
81892: CALL_OW 72
81896: PUSH
81897: LD_INT 1
81899: ARRAY
81900: PPUSH
81901: CALL_OW 112
// break ;
81905: GO 81909
// end ; end ;
81907: GO 81827
81909: POP
81910: POP
// end ; end_of_file
81911: LD_VAR 0 5
81915: RET
// export SuperChassisContructed , AM7Losses ; export function EndMission ; var player_units , filter ; begin
81916: LD_INT 0
81918: PPUSH
81919: PPUSH
81920: PPUSH
// Wait ( 0 0$1 ) ;
81921: LD_INT 35
81923: PPUSH
81924: CALL_OW 67
// player_units := UnitFilter ( player_units , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) ;
81928: LD_ADDR_VAR 0 2
81932: PUSH
81933: LD_VAR 0 2
81937: PPUSH
81938: LD_INT 3
81940: PUSH
81941: LD_INT 2
81943: PUSH
81944: LD_INT 25
81946: PUSH
81947: LD_INT 16
81949: PUSH
81950: EMPTY
81951: LIST
81952: LIST
81953: PUSH
81954: LD_INT 25
81956: PUSH
81957: LD_INT 15
81959: PUSH
81960: EMPTY
81961: LIST
81962: LIST
81963: PUSH
81964: EMPTY
81965: LIST
81966: LIST
81967: LIST
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PPUSH
81973: CALL_OW 72
81977: ST_TO_ADDR
// if RUCourierEscaped then
81978: LD_EXP 16
81982: IFFALSE 81996
// AddMedal ( Plans , 1 ) else
81984: LD_STRING Plans
81986: PPUSH
81987: LD_INT 1
81989: PPUSH
81990: CALL_OW 101
81994: GO 82007
// AddMedal ( Plans , - 1 ) ;
81996: LD_STRING Plans
81998: PPUSH
81999: LD_INT 1
82001: NEG
82002: PPUSH
82003: CALL_OW 101
// SaveVariable ( RUCourierEscaped , AM05_CourierEscaped ) ;
82007: LD_EXP 16
82011: PPUSH
82012: LD_STRING AM05_CourierEscaped
82014: PPUSH
82015: CALL_OW 39
// if SuperChassisContructed then
82019: LD_EXP 107
82023: IFFALSE 82037
// AddMedal ( UberPanzer , 1 ) else
82025: LD_STRING UberPanzer
82027: PPUSH
82028: LD_INT 1
82030: PPUSH
82031: CALL_OW 101
82035: GO 82048
// AddMedal ( UberPanzer , - 1 ) ;
82037: LD_STRING UberPanzer
82039: PPUSH
82040: LD_INT 1
82042: NEG
82043: PPUSH
82044: CALL_OW 101
// SaveVariable ( SuperChassisContructed , AM05_SuperChassisContructed ) ;
82048: LD_EXP 107
82052: PPUSH
82053: LD_STRING AM05_SuperChassisContructed
82055: PPUSH
82056: CALL_OW 39
// if AM7Losses > 5 then
82060: LD_EXP 108
82064: PUSH
82065: LD_INT 5
82067: GREATER
82068: IFFALSE 82083
// AddMedal ( Losses , - 1 ) else
82070: LD_STRING Losses
82072: PPUSH
82073: LD_INT 1
82075: NEG
82076: PPUSH
82077: CALL_OW 101
82081: GO 82093
// AddMedal ( Losses , 1 ) ;
82083: LD_STRING Losses
82085: PPUSH
82086: LD_INT 1
82088: PPUSH
82089: CALL_OW 101
// SaveVariable ( AM7Losses , AM05_SufferedLosses ) ;
82093: LD_EXP 108
82097: PPUSH
82098: LD_STRING AM05_SufferedLosses
82100: PPUSH
82101: CALL_OW 39
// GiveMedals ( Main ) ;
82105: LD_STRING Main
82107: PPUSH
82108: CALL_OW 102
// RewardPeople ( player_units ) ;
82112: LD_VAR 0 2
82116: PPUSH
82117: CALL_OW 43
// SaveCharacters ( Simone , Simone ) ;
82121: LD_EXP 34
82125: PPUSH
82126: LD_STRING Simone
82128: PPUSH
82129: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
82133: LD_EXP 35
82137: PPUSH
82138: LD_STRING Miller
82140: PPUSH
82141: CALL_OW 38
// SaveCharacters ( Esther , Esther ) ;
82145: LD_EXP 36
82149: PPUSH
82150: LD_STRING Esther
82152: PPUSH
82153: CALL_OW 38
// SaveCharacters ( Edmonds , Edmonds ) ;
82157: LD_EXP 37
82161: PPUSH
82162: LD_STRING Edmonds
82164: PPUSH
82165: CALL_OW 38
// SaveCharacters ( Pravar , Pravar ) ;
82169: LD_EXP 38
82173: PPUSH
82174: LD_STRING Pravar
82176: PPUSH
82177: CALL_OW 38
// SaveCharacters ( Mortimer , Mortimer ) ;
82181: LD_EXP 46
82185: PPUSH
82186: LD_STRING Mortimer
82188: PPUSH
82189: CALL_OW 38
// SaveCharacters ( player_units diff [ Simone , Miller , Esther , Edmonds , Pravar , Mortimer ] , AM05_Survivors ) ;
82193: LD_VAR 0 2
82197: PUSH
82198: LD_EXP 34
82202: PUSH
82203: LD_EXP 35
82207: PUSH
82208: LD_EXP 36
82212: PUSH
82213: LD_EXP 37
82217: PUSH
82218: LD_EXP 38
82222: PUSH
82223: LD_EXP 46
82227: PUSH
82228: EMPTY
82229: LIST
82230: LIST
82231: LIST
82232: LIST
82233: LIST
82234: LIST
82235: DIFF
82236: PPUSH
82237: LD_STRING AM05_Survivors
82239: PPUSH
82240: CALL_OW 38
// YouWin ;
82244: CALL_OW 103
// exit ;
82248: GO 82250
// end ; end_of_file
82250: LD_VAR 0 1
82254: RET
// export ar_heavy_tracked , us_tesla_coil , ar_liquid_siberite , ar_heavy_gun , ar_mobile_mortar , ru_laser , ru_rocket_battery , ru_flame_thrower , ru_radar , Tech_Tesla ; export function InitiateConstants ; begin
82255: LD_INT 0
82257: PPUSH
// ar_heavy_tracked := 16 ;
82258: LD_ADDR_EXP 109
82262: PUSH
82263: LD_INT 16
82265: ST_TO_ADDR
// us_tesla_coil := 70 ;
82266: LD_ADDR_EXP 110
82270: PUSH
82271: LD_INT 70
82273: ST_TO_ADDR
// ar_liquid_siberite := 71 ;
82274: LD_ADDR_EXP 111
82278: PUSH
82279: LD_INT 71
82281: ST_TO_ADDR
// ar_heavy_gun := 72 ;
82282: LD_ADDR_EXP 112
82286: PUSH
82287: LD_INT 72
82289: ST_TO_ADDR
// ar_mobile_mortar := 73 ;
82290: LD_ADDR_EXP 113
82294: PUSH
82295: LD_INT 73
82297: ST_TO_ADDR
// ru_laser := 74 ;
82298: LD_ADDR_EXP 114
82302: PUSH
82303: LD_INT 74
82305: ST_TO_ADDR
// ru_rocket_battery := 75 ;
82306: LD_ADDR_EXP 115
82310: PUSH
82311: LD_INT 75
82313: ST_TO_ADDR
// ru_flame_thrower := 76 ;
82314: LD_ADDR_EXP 116
82318: PUSH
82319: LD_INT 76
82321: ST_TO_ADDR
// ru_radar := 77 ;
82322: LD_ADDR_EXP 117
82326: PUSH
82327: LD_INT 77
82329: ST_TO_ADDR
// Tech_Tesla := 73 ;
82330: LD_ADDR_EXP 118
82334: PUSH
82335: LD_INT 73
82337: ST_TO_ADDR
// end ;
82338: LD_VAR 0 1
82342: RET
