// export MissionBegin , RussianAssaultStopped , readyForAttack ; export AMAttack , AMWesternArmor ; export LaserTanks , personnel , WesternEngineers , EasternEngineers , EasternBase ; export attack_group ; export ts , tk , tlz , t1 , t2 , t3 ; export game_start ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitMacro ;
   8: CALL 57694 0 0
// game_start := false ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ingame_video = true ;
  20: LD_ADDR_OWVAR 52
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// interface_hidden = true ;
  28: LD_ADDR_OWVAR 54
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// PlaceSeeing ( 70 , 139 , 7 , - 99 ) ;
  36: LD_INT 70
  38: PPUSH
  39: LD_INT 139
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 99
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 70 , 139 , 7 ) ;
  53: LD_INT 70
  55: PPUSH
  56: LD_INT 139
  58: PPUSH
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 331
// PrepareLaserTanks ;
  66: CALL 11303 0 0
// LaserTanks := [ ts , tk , tlz , t1 , t2 , t3 ] ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_EXP 12
  79: PUSH
  80: LD_EXP 13
  84: PUSH
  85: LD_EXP 14
  89: PUSH
  90: LD_EXP 15
  94: PUSH
  95: LD_EXP 16
  99: PUSH
 100: LD_EXP 17
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: ST_TO_ADDR
// attack_group = FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
 113: LD_ADDR_EXP 11
 117: PUSH
 118: LD_INT 9
 120: PPUSH
 121: LD_INT 22
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 50
 133: PUSH
 134: EMPTY
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 71
 145: ST_TO_ADDR
// CreatePersonnel ;
 146: CALL 3636 0 0
// PrepareDifficulty ;
 150: CALL 10907 0 0
// Garrison_Buildings ( 3 ) ;
 154: LD_INT 3
 156: PPUSH
 157: CALL 4673 0 1
// Garrison_Buildings_AM ( 1 ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL 5425 0 1
// Assemble_Barracks ( 3 ) ;
 168: LD_INT 3
 170: PPUSH
 171: CALL 6159 0 1
// Assemble_Barracks ( 1 ) ;
 175: LD_INT 1
 177: PPUSH
 178: CALL 6159 0 1
// PrepareNature ( 7 , 3 , 17 , 9 , 3 , 0 , 0 , Nat_GenArea , 0 ) ;
 182: LD_INT 7
 184: PPUSH
 185: LD_INT 3
 187: PPUSH
 188: LD_INT 17
 190: PPUSH
 191: LD_INT 9
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: LD_INT 19
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: CALL 49915 0 9
// WesternEngineers = UnitsInside ( base2 ) ;
 213: LD_ADDR_EXP 8
 217: PUSH
 218: LD_INT 1
 220: PPUSH
 221: CALL_OW 313
 225: ST_TO_ADDR
// EasternEngineers = UnitsInside ( base1 ) ;
 226: LD_ADDR_EXP 9
 230: PUSH
 231: LD_INT 3
 233: PPUSH
 234: CALL_OW 313
 238: ST_TO_ADDR
// music_class = 1 ;
 239: LD_ADDR_OWVAR 72
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// game_start := true ;
 247: LD_ADDR_EXP 18
 251: PUSH
 252: LD_INT 1
 254: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , ts ) ;
 255: LD_EXP 19
 259: PPUSH
 260: LD_EXP 12
 264: PPUSH
 265: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , tk ) ;
 269: LD_EXP 20
 273: PPUSH
 274: LD_EXP 13
 278: PPUSH
 279: CALL_OW 52
// PlaceHumanInUnit ( Lazarfeld , tlz ) ;
 283: LD_EXP 24
 287: PPUSH
 288: LD_EXP 14
 292: PPUSH
 293: CALL_OW 52
// PlaceHumanInUnit ( Gomez , t1 ) ;
 297: LD_EXP 23
 301: PPUSH
 302: LD_EXP 15
 306: PPUSH
 307: CALL_OW 52
// PlaceHumanInUnit ( Mirron , t2 ) ;
 311: LD_EXP 21
 315: PPUSH
 316: LD_EXP 16
 320: PPUSH
 321: CALL_OW 52
// PlaceHumanInUnit ( Valheim , t3 ) ;
 325: LD_EXP 22
 329: PPUSH
 330: LD_EXP 17
 334: PPUSH
 335: CALL_OW 52
// ComAgressiveMove ( Lazarfeld , 75 , 71 ) ;
 339: LD_EXP 24
 343: PPUSH
 344: LD_INT 75
 346: PPUSH
 347: LD_INT 71
 349: PPUSH
 350: CALL_OW 114
// ComAgressiveMove ( Mirron , 61 , 67 ) ;
 354: LD_EXP 21
 358: PPUSH
 359: LD_INT 61
 361: PPUSH
 362: LD_INT 67
 364: PPUSH
 365: CALL_OW 114
// ComAgressiveMove ( Valheim , 86 , 79 ) ;
 369: LD_EXP 22
 373: PPUSH
 374: LD_INT 86
 376: PPUSH
 377: LD_INT 79
 379: PPUSH
 380: CALL_OW 114
// ComAgressiveMove ( Simone , 125 , 81 ) ;
 384: LD_EXP 19
 388: PPUSH
 389: LD_INT 125
 391: PPUSH
 392: LD_INT 81
 394: PPUSH
 395: CALL_OW 114
// ComMoveXY ( Kathryn , 124 , 75 ) ;
 399: LD_EXP 20
 403: PPUSH
 404: LD_INT 124
 406: PPUSH
 407: LD_INT 75
 409: PPUSH
 410: CALL_OW 111
// ComAgressiveMove ( Gomez , 135 , 94 ) ;
 414: LD_EXP 23
 418: PPUSH
 419: LD_INT 135
 421: PPUSH
 422: LD_INT 94
 424: PPUSH
 425: CALL_OW 114
// ComMoveXY ( AMcrane , 65 , 56 ) ;
 429: LD_INT 124
 431: PPUSH
 432: LD_INT 65
 434: PPUSH
 435: LD_INT 56
 437: PPUSH
 438: CALL_OW 111
// DoNotAttack ( 3 , Simone ) ;
 442: LD_INT 3
 444: PPUSH
 445: LD_EXP 19
 449: PPUSH
 450: CALL_OW 471
// DoNotAttack ( 3 , Kathryn ) ;
 454: LD_INT 3
 456: PPUSH
 457: LD_EXP 20
 461: PPUSH
 462: CALL_OW 471
// DoNotAttack ( 3 , Gomez ) ;
 466: LD_INT 3
 468: PPUSH
 469: LD_EXP 23
 473: PPUSH
 474: CALL_OW 471
// CenterNowOnXY ( 61 , 96 ) ;
 478: LD_INT 61
 480: PPUSH
 481: LD_INT 96
 483: PPUSH
 484: CALL_OW 86
// Wait ( 0 0$2 ) ;
 488: LD_INT 70
 490: PPUSH
 491: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-2 ) ;
 495: LD_EXP 24
 499: PPUSH
 500: LD_STRING D1-Lazar-2
 502: PPUSH
 503: CALL_OW 94
// Wait ( 0 0$1 ) ;
 507: LD_INT 35
 509: PPUSH
 510: CALL_OW 67
// CenterOnXY ( 124 , 116 ) ;
 514: LD_INT 124
 516: PPUSH
 517: LD_INT 116
 519: PPUSH
 520: CALL_OW 84
// Wait ( 0 0$2 ) ;
 524: LD_INT 70
 526: PPUSH
 527: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-1 ) ;
 531: LD_EXP 24
 535: PPUSH
 536: LD_STRING D1-Lazar-1
 538: PPUSH
 539: CALL_OW 94
// Wait ( 0 0$3 ) ;
 543: LD_INT 105
 545: PPUSH
 546: CALL_OW 67
// CenterOnXY ( 127 , 89 ) ;
 550: LD_INT 127
 552: PPUSH
 553: LD_INT 89
 555: PPUSH
 556: CALL_OW 84
// Wait ( 0 0$15 ) ;
 560: LD_INT 525
 562: PPUSH
 563: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-3 ) ;
 567: LD_EXP 24
 571: PPUSH
 572: LD_STRING D1-Lazar-3
 574: PPUSH
 575: CALL_OW 94
// Wait ( 0 0$3 ) ;
 579: LD_INT 105
 581: PPUSH
 582: CALL_OW 67
// ingame_video = false ;
 586: LD_ADDR_OWVAR 52
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// interface_hidden = false ;
 594: LD_ADDR_OWVAR 54
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// SayRadio ( Lazarfeld , D1a-Lazar-1 ) ;
 602: LD_EXP 24
 606: PPUSH
 607: LD_STRING D1a-Lazar-1
 609: PPUSH
 610: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-1 ) ;
 614: LD_EXP 27
 618: PPUSH
 619: LD_STRING D1a-Off-1
 621: PPUSH
 622: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-2 ) ;
 626: LD_EXP 27
 630: PPUSH
 631: LD_STRING D1a-Off-2
 633: PPUSH
 634: CALL_OW 94
// SayRadio ( Lazarfeld , D1a-Lazar-2 ) ;
 638: LD_EXP 24
 642: PPUSH
 643: LD_STRING D1a-Lazar-2
 645: PPUSH
 646: CALL_OW 94
// Say ( Simone , D1a-Simone-1 ) ;
 650: LD_EXP 19
 654: PPUSH
 655: LD_STRING D1a-Simone-1
 657: PPUSH
 658: CALL_OW 88
// SayRadio ( Lazarfeld , D1a-Lazar-3 ) ;
 662: LD_EXP 24
 666: PPUSH
 667: LD_STRING D1a-Lazar-3
 669: PPUSH
 670: CALL_OW 94
// music_class = 0 ;
 674: LD_ADDR_OWVAR 72
 678: PUSH
 679: LD_INT 0
 681: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
 682: LD_STRING M1
 684: PPUSH
 685: CALL_OW 337
// NormalAttack ( 3 , Simone ) ;
 689: LD_INT 3
 691: PPUSH
 692: LD_EXP 19
 696: PPUSH
 697: CALL_OW 472
// NormalAttack ( 3 , Kathryn ) ;
 701: LD_INT 3
 703: PPUSH
 704: LD_EXP 20
 708: PPUSH
 709: CALL_OW 472
// NormalAttack ( 3 , Gomez ) ;
 713: LD_INT 3
 715: PPUSH
 716: LD_EXP 23
 720: PPUSH
 721: CALL_OW 472
// ComAgressiveMove ( WesternEngineers , 76 , 76 ) ;
 725: LD_EXP 8
 729: PPUSH
 730: LD_INT 76
 732: PPUSH
 733: LD_INT 76
 735: PPUSH
 736: CALL_OW 114
// ComAgressiveMove ( EasternEngineers , 126 , 91 ) ;
 740: LD_EXP 9
 744: PPUSH
 745: LD_INT 126
 747: PPUSH
 748: LD_INT 91
 750: PPUSH
 751: CALL_OW 114
// EasternBase = FilterUnitsInArea ( AMBaseEast , [ f_side , 1 ] ) ^ EasternEngineers ^ UnitsInside ( EastLab ) ^ UnitsInside ( Factor ) ^ UnitsInside ( EastArmor ) diff WesternEngineers ;
 755: LD_ADDR_EXP 10
 759: PUSH
 760: LD_INT 11
 762: PPUSH
 763: LD_INT 22
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PPUSH
 773: CALL_OW 70
 777: PUSH
 778: LD_EXP 9
 782: ADD
 783: PUSH
 784: LD_INT 12
 786: PPUSH
 787: CALL_OW 313
 791: ADD
 792: PUSH
 793: LD_INT 5
 795: PPUSH
 796: CALL_OW 313
 800: ADD
 801: PUSH
 802: LD_INT 4
 804: PPUSH
 805: CALL_OW 313
 809: ADD
 810: PUSH
 811: LD_EXP 8
 815: DIFF
 816: ST_TO_ADDR
// SetSide ( EasternBase , 7 ) ;
 817: LD_EXP 10
 821: PPUSH
 822: LD_INT 7
 824: PPUSH
 825: CALL_OW 235
// SaveForQuickRestart ;
 829: CALL_OW 22
// MissionBegin = true ;
 833: LD_ADDR_EXP 1
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// end ;
 841: END
// every 0 0$1 trigger MissionBegin do
 842: LD_EXP 1
 846: IFFALSE 2137
 848: GO 850
 850: DISABLE
// begin Wait ( 0 0$42 ) ;
 851: LD_INT 1470
 853: PPUSH
 854: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-1 , D2-FemScout-1 ) ;
 858: LD_EXP 30
 862: PPUSH
 863: LD_STRING D2-Scout-1
 865: PPUSH
 866: LD_STRING D2-FemScout-1
 868: PPUSH
 869: CALL 14234 0 3
// Say ( Simone , D2-Simone-1 ) ;
 873: LD_EXP 19
 877: PPUSH
 878: LD_STRING D2-Simone-1
 880: PPUSH
 881: CALL_OW 88
// Say ( Kathryn , D2-Kathryn-1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING D2-Kathryn-1
 892: PPUSH
 893: CALL_OW 88
// DoNotAttack ( 3 , tlz ) ;
 897: LD_INT 3
 899: PPUSH
 900: LD_EXP 14
 904: PPUSH
 905: CALL_OW 471
// DoNotAttack ( 3 , t2 ) ;
 909: LD_INT 3
 911: PPUSH
 912: LD_EXP 16
 916: PPUSH
 917: CALL_OW 471
// DoNotAttack ( 3 , t3 ) ;
 921: LD_INT 3
 923: PPUSH
 924: LD_EXP 17
 928: PPUSH
 929: CALL_OW 471
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
 933: LD_INT 3
 935: PPUSH
 936: LD_INT 3
 938: PPUSH
 939: LD_INT 6
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 0
 953: PPUSH
 954: LD_EXP 37
 958: PPUSH
 959: LD_EXP 38
 963: PPUSH
 964: CALL_OW 12
 968: PPUSH
 969: LD_INT 3
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 3 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
 982: LD_INT 3
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: LD_INT 3
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_EXP 37
1007: PPUSH
1008: LD_EXP 38
1012: PPUSH
1013: CALL_OW 12
1017: PPUSH
1018: LD_INT 8
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL 8049 0 11
// Wait ( 0 0$8 ) ;
1031: LD_INT 280
1033: PPUSH
1034: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 1
1046: PPUSH
1047: LD_EXP 37
1051: PPUSH
1052: LD_EXP 38
1056: PPUSH
1057: CALL_OW 12
1061: PPUSH
1062: LD_INT 3
1064: PPUSH
1065: LD_INT 3
1067: PPUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: LD_INT 43
1080: PUSH
1081: LD_INT 44
1083: PUSH
1084: LD_INT 42
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PPUSH
1092: EMPTY
1093: PPUSH
1094: EMPTY
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: LD_INT 1
1101: PPUSH
1102: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1106: LD_INT 8
1108: PPUSH
1109: LD_INT 3
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_EXP 37
1119: PPUSH
1120: LD_EXP 38
1124: PPUSH
1125: CALL_OW 12
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: LD_INT 3
1135: PPUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PPUSH
1146: LD_INT 43
1148: PUSH
1149: LD_INT 44
1151: PUSH
1152: LD_INT 42
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PPUSH
1160: EMPTY
1161: PPUSH
1162: EMPTY
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL 6443 0 12
// Wait ( 3 3$20 ) ;
1174: LD_INT 7000
1176: PPUSH
1177: CALL_OW 67
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1181: LD_INT 3
1183: PPUSH
1184: LD_INT 3
1186: PPUSH
1187: LD_INT 5
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 0
1201: PPUSH
1202: LD_EXP 37
1206: PPUSH
1207: LD_EXP 38
1211: PPUSH
1212: CALL_OW 12
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1230: LD_INT 3
1232: PPUSH
1233: LD_INT 3
1235: PPUSH
1236: LD_INT 5
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_EXP 37
1255: PPUSH
1256: LD_EXP 38
1260: PPUSH
1261: CALL_OW 12
1265: PPUSH
1266: LD_INT 8
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1279: LD_INT 1050
1281: PPUSH
1282: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1286: LD_INT 3
1288: PPUSH
1289: LD_INT 3
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: LD_EXP 37
1299: PPUSH
1300: LD_EXP 38
1304: PPUSH
1305: CALL_OW 12
1309: PPUSH
1310: LD_INT 3
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: LD_INT 1
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PPUSH
1326: LD_INT 43
1328: PUSH
1329: LD_INT 44
1331: PUSH
1332: LD_INT 42
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: EMPTY
1341: PPUSH
1342: EMPTY
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1354: LD_INT 8
1356: PPUSH
1357: LD_INT 3
1359: PPUSH
1360: LD_INT 5
1362: PPUSH
1363: LD_EXP 37
1367: PPUSH
1368: LD_EXP 38
1372: PPUSH
1373: CALL_OW 12
1377: PPUSH
1378: LD_INT 3
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 3
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PPUSH
1394: LD_INT 43
1396: PUSH
1397: LD_INT 44
1399: PUSH
1400: LD_INT 42
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PPUSH
1408: EMPTY
1409: PPUSH
1410: EMPTY
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL 6443 0 12
// Wait ( 2 2$30 ) ;
1422: LD_INT 5250
1424: PPUSH
1425: CALL_OW 67
// SayRadio ( Lazarfeld , D3-Lazar-1 ) ;
1429: LD_EXP 24
1433: PPUSH
1434: LD_STRING D3-Lazar-1
1436: PPUSH
1437: CALL_OW 94
// SayRadio ( Loghain , D3-Off-1 ) ;
1441: LD_EXP 27
1445: PPUSH
1446: LD_STRING D3-Off-1
1448: PPUSH
1449: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-2 ) ;
1453: LD_EXP 24
1457: PPUSH
1458: LD_STRING D3-Lazar-2
1460: PPUSH
1461: CALL_OW 94
// SayRadio ( Barnes , D3-Comm-1 ) ;
1465: LD_EXP 26
1469: PPUSH
1470: LD_STRING D3-Comm-1
1472: PPUSH
1473: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-3 ) ;
1477: LD_EXP 24
1481: PPUSH
1482: LD_STRING D3-Lazar-3
1484: PPUSH
1485: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-4 ) ;
1489: LD_EXP 24
1493: PPUSH
1494: LD_STRING D3-Lazar-4
1496: PPUSH
1497: CALL_OW 94
// Say ( Simone , D3-Simone-1 ) ;
1501: LD_EXP 19
1505: PPUSH
1506: LD_STRING D3-Simone-1
1508: PPUSH
1509: CALL_OW 88
// ComMoveXY ( EasternEngineers , 127 , 94 ) ;
1513: LD_EXP 9
1517: PPUSH
1518: LD_INT 127
1520: PPUSH
1521: LD_INT 94
1523: PPUSH
1524: CALL_OW 111
// ComMoveXY ( Lazarfeld , 65 , 70 ) ;
1528: LD_EXP 24
1532: PPUSH
1533: LD_INT 65
1535: PPUSH
1536: LD_INT 70
1538: PPUSH
1539: CALL_OW 111
// ComBuild ( WesternEngineers , b_armoury , 75 , 70 , 3 ) ;
1543: LD_EXP 8
1547: PPUSH
1548: LD_INT 4
1550: PPUSH
1551: LD_INT 75
1553: PPUSH
1554: LD_INT 70
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 145
// Wait ( 3 3$30 ) ;
1564: LD_INT 7350
1566: PPUSH
1567: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-2 , D2-FemScout-2 ) ;
1571: LD_EXP 30
1575: PPUSH
1576: LD_STRING D2-Scout-2
1578: PPUSH
1579: LD_STRING D2-FemScout-2
1581: PPUSH
1582: CALL 14234 0 3
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1586: LD_INT 3
1588: PPUSH
1589: LD_INT 3
1591: PPUSH
1592: LD_INT 5
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 0
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 0
1606: PPUSH
1607: LD_EXP 37
1611: PPUSH
1612: LD_EXP 38
1616: PPUSH
1617: CALL_OW 12
1621: PPUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 2 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1635: LD_INT 3
1637: PPUSH
1638: LD_INT 3
1640: PPUSH
1641: LD_INT 6
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: LD_EXP 37
1660: PPUSH
1661: LD_EXP 38
1665: PPUSH
1666: CALL_OW 12
1670: PPUSH
1671: LD_INT 8
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1684: LD_INT 1050
1686: PPUSH
1687: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: LD_EXP 37
1704: PPUSH
1705: LD_EXP 38
1709: PPUSH
1710: CALL_OW 12
1714: PPUSH
1715: LD_INT 3
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 3
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PPUSH
1731: LD_INT 43
1733: PUSH
1734: LD_INT 44
1736: PUSH
1737: LD_INT 42
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PPUSH
1745: EMPTY
1746: PPUSH
1747: EMPTY
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 1
1754: PPUSH
1755: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1759: LD_INT 8
1761: PPUSH
1762: LD_INT 3
1764: PPUSH
1765: LD_INT 4
1767: PPUSH
1768: LD_EXP 37
1772: PPUSH
1773: LD_EXP 38
1777: PPUSH
1778: CALL_OW 12
1782: PPUSH
1783: LD_INT 3
1785: PPUSH
1786: LD_INT 3
1788: PPUSH
1789: LD_INT 1
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PPUSH
1799: LD_INT 43
1801: PUSH
1802: LD_INT 44
1804: PUSH
1805: LD_INT 42
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: EMPTY
1814: PPUSH
1815: EMPTY
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL 6443 0 12
// Wait ( 2 2$10 ) ;
1827: LD_INT 4550
1829: PPUSH
1830: CALL_OW 67
// ComUpgrade ( AMWesternArmor ) ;
1834: LD_EXP 5
1838: PPUSH
1839: CALL_OW 146
// Wait ( 2 2$10 ) ;
1843: LD_INT 4550
1845: PPUSH
1846: CALL_OW 67
// ComAgressiveMove ( tlz , 60 , 53 ) ;
1850: LD_EXP 14
1854: PPUSH
1855: LD_INT 60
1857: PPUSH
1858: LD_INT 53
1860: PPUSH
1861: CALL_OW 114
// PriorityAttack ( 3 , tlz ) ;
1865: LD_INT 3
1867: PPUSH
1868: LD_EXP 14
1872: PPUSH
1873: CALL_OW 470
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1877: LD_INT 3
1879: PPUSH
1880: LD_INT 3
1882: PPUSH
1883: LD_INT 6
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: LD_EXP 37
1902: PPUSH
1903: LD_EXP 38
1907: PPUSH
1908: CALL_OW 12
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: LD_INT 1
1921: PPUSH
1922: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 2 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1926: LD_INT 3
1928: PPUSH
1929: LD_INT 3
1931: PPUSH
1932: LD_INT 5
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 2
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: LD_EXP 37
1951: PPUSH
1952: LD_EXP 38
1956: PPUSH
1957: CALL_OW 12
1961: PPUSH
1962: LD_INT 8
1964: PPUSH
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1975: LD_INT 1050
1977: PPUSH
1978: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1982: LD_INT 3
1984: PPUSH
1985: LD_INT 3
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: LD_EXP 37
1995: PPUSH
1996: LD_EXP 38
2000: PPUSH
2001: CALL_OW 12
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: LD_INT 1
2014: PUSH
2015: LD_INT 3
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PPUSH
2022: LD_INT 43
2024: PUSH
2025: LD_INT 44
2027: PUSH
2028: LD_INT 42
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PPUSH
2036: EMPTY
2037: PPUSH
2038: EMPTY
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
2050: LD_INT 8
2052: PPUSH
2053: LD_INT 3
2055: PPUSH
2056: LD_INT 5
2058: PPUSH
2059: LD_EXP 37
2063: PPUSH
2064: LD_EXP 38
2068: PPUSH
2069: CALL_OW 12
2073: PPUSH
2074: LD_INT 3
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 1
2082: PUSH
2083: LD_INT 3
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: LD_INT 43
2092: PUSH
2093: LD_INT 44
2095: PUSH
2096: LD_INT 42
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PPUSH
2104: EMPTY
2105: PPUSH
2106: EMPTY
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: CALL 6443 0 12
// Wait ( 3 3$20 ) ;
2118: LD_INT 7000
2120: PPUSH
2121: CALL_OW 67
// SetLives ( tlz , 250 ) ;
2125: LD_EXP 14
2129: PPUSH
2130: LD_INT 250
2132: PPUSH
2133: CALL_OW 234
// end ;
2137: END
// every 0 0$1 trigger GetLives ( tlz ) < 251 do
2138: LD_EXP 14
2142: PPUSH
2143: CALL_OW 256
2147: PUSH
2148: LD_INT 251
2150: LESS
2151: IFFALSE 2888
2153: GO 2155
2155: DISABLE
// begin CenterOnUnits ( tlz ) ;
2156: LD_EXP 14
2160: PPUSH
2161: CALL_OW 85
// Wait ( 0 0$1 ) ;
2165: LD_INT 35
2167: PPUSH
2168: CALL_OW 67
// DialogueOn ;
2172: CALL_OW 6
// SayRadio ( Lazarfeld , D4-Lazar-1 ) ;
2176: LD_EXP 24
2180: PPUSH
2181: LD_STRING D4-Lazar-1
2183: PPUSH
2184: CALL_OW 94
// SetLives ( Lazarfeld , 0 ) ;
2188: LD_EXP 24
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 234
// SetLives ( tlz , 0 ) ;
2200: LD_EXP 14
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 234
// DialogueOff ;
2212: CALL_OW 7
// ComMoveXY ( Mirron , 77 , 98 ) ;
2216: LD_EXP 21
2220: PPUSH
2221: LD_INT 77
2223: PPUSH
2224: LD_INT 98
2226: PPUSH
2227: CALL_OW 111
// ComMoveXY ( Valheim , 77 , 98 ) ;
2231: LD_EXP 22
2235: PPUSH
2236: LD_INT 77
2238: PPUSH
2239: LD_INT 98
2241: PPUSH
2242: CALL_OW 111
// NormalAttack ( 3 , t2 ) ;
2246: LD_INT 3
2248: PPUSH
2249: LD_EXP 16
2253: PPUSH
2254: CALL_OW 472
// NormalAttack ( 3 , t3 ) ;
2258: LD_INT 3
2260: PPUSH
2261: LD_EXP 17
2265: PPUSH
2266: CALL_OW 472
// SayRadio ( Valheim , D4-Valheim-1 ) ;
2270: LD_EXP 22
2274: PPUSH
2275: LD_STRING D4-Valheim-1
2277: PPUSH
2278: CALL_OW 94
// Say ( Kathryn , D4-Kathryn-1 ) ;
2282: LD_EXP 20
2286: PPUSH
2287: LD_STRING D4-Kathryn-1
2289: PPUSH
2290: CALL_OW 88
// Say ( Gomez , D4-Gomez-1 ) ;
2294: LD_EXP 23
2298: PPUSH
2299: LD_STRING D4-Gomez-1
2301: PPUSH
2302: CALL_OW 88
// Say ( Simone , D4-Simone-1 ) ;
2306: LD_EXP 19
2310: PPUSH
2311: LD_STRING D4-Simone-1
2313: PPUSH
2314: CALL_OW 88
// Say ( Kathryn , D4-Kathryn-2 ) ;
2318: LD_EXP 20
2322: PPUSH
2323: LD_STRING D4-Kathryn-2
2325: PPUSH
2326: CALL_OW 88
// Say ( Loghain , D4-Off-1 ) ;
2330: LD_EXP 27
2334: PPUSH
2335: LD_STRING D4-Off-1
2337: PPUSH
2338: CALL_OW 88
// SayRadio ( Simone , D4-Simone-2 ) ;
2342: LD_EXP 19
2346: PPUSH
2347: LD_STRING D4-Simone-2
2349: PPUSH
2350: CALL_OW 94
// SetSide ( FilterAllUnits ( [ f_side , 1 ] ) , 7 ) ;
2354: LD_INT 22
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PPUSH
2364: CALL_OW 69
2368: PPUSH
2369: LD_INT 7
2371: PPUSH
2372: CALL_OW 235
// Wait ( 0 0$30 ) ;
2376: LD_INT 1050
2378: PPUSH
2379: CALL_OW 67
// RespawnAttackInfantry ( 3 , 3 , 7 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_SE , false , true ) ;
2383: LD_INT 3
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: LD_INT 7
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: LD_INT 0
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: LD_EXP 37
2408: PPUSH
2409: LD_EXP 38
2413: PPUSH
2414: CALL_OW 12
2418: PPUSH
2419: LD_INT 5
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_INT 1
2427: PPUSH
2428: CALL 8049 0 11
// Wait ( 0 0$5 ) ;
2432: LD_INT 175
2434: PPUSH
2435: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-3 , D2-FemScout-3 ) ;
2439: LD_EXP 30
2443: PPUSH
2444: LD_STRING D2-Scout-3
2446: PPUSH
2447: LD_STRING D2-FemScout-3
2449: PPUSH
2450: CALL 14234 0 3
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , false , true ) ;
2454: LD_INT 3
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: LD_INT 4
2462: PPUSH
2463: LD_EXP 37
2467: PPUSH
2468: LD_EXP 38
2472: PPUSH
2473: CALL_OW 12
2477: PPUSH
2478: LD_INT 3
2480: PPUSH
2481: LD_INT 3
2483: PPUSH
2484: LD_INT 1
2486: PUSH
2487: LD_INT 3
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PPUSH
2494: LD_INT 43
2496: PUSH
2497: LD_INT 44
2499: PUSH
2500: LD_INT 45
2502: PUSH
2503: LD_INT 46
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: EMPTY
2513: PPUSH
2514: EMPTY
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL 6443 0 12
// RespawnAttackInfantry ( 3 , 3 , 8 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: LD_INT 8
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: LD_INT 1
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_INT 0
2546: PPUSH
2547: LD_EXP 37
2551: PPUSH
2552: LD_EXP 38
2556: PPUSH
2557: CALL_OW 12
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 1
2570: PPUSH
2571: CALL 8049 0 11
// Wait ( 1 1$10 ) ;
2575: LD_INT 2450
2577: PPUSH
2578: CALL_OW 67
// ReinforcementArrival ;
2582: CALL 13637 0 0
// Say ( Loghain , D4a-Off-1 ) ;
2586: LD_EXP 27
2590: PPUSH
2591: LD_STRING D4a-Off-1
2593: PPUSH
2594: CALL_OW 88
// SetSide ( FilterAllUnits ( [ f_side , 1 ] ) , 7 ) ;
2598: LD_INT 22
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: PPUSH
2613: LD_INT 7
2615: PPUSH
2616: CALL_OW 235
// Say ( Simone , D4a-Simone-1 ) ;
2620: LD_EXP 19
2624: PPUSH
2625: LD_STRING D4a-Simone-1
2627: PPUSH
2628: CALL_OW 88
// Say ( Kathryn , D4a-Kathryn-1 ) ;
2632: LD_EXP 20
2636: PPUSH
2637: LD_STRING D4a-Kathryn-1
2639: PPUSH
2640: CALL_OW 88
// Wait ( 1 1$0 ) ;
2644: LD_INT 2100
2646: PPUSH
2647: CALL_OW 67
// DialogueOn ;
2651: CALL_OW 6
// Say ( Miller , D4b-Miller-1 ) ;
2655: LD_EXP 25
2659: PPUSH
2660: LD_STRING D4b-Miller-1
2662: PPUSH
2663: CALL_OW 88
// Say ( Simone , D4b-Simone-1 ) ;
2667: LD_EXP 19
2671: PPUSH
2672: LD_STRING D4b-Simone-1
2674: PPUSH
2675: CALL_OW 88
// Say ( Miller , D4b-Miller-2 ) ;
2679: LD_EXP 25
2683: PPUSH
2684: LD_STRING D4b-Miller-2
2686: PPUSH
2687: CALL_OW 88
// Say ( Simone , D4b-Simone-2 ) ;
2691: LD_EXP 19
2695: PPUSH
2696: LD_STRING D4b-Simone-2
2698: PPUSH
2699: CALL_OW 88
// Say ( Miller , D4b-Miller-3 ) ;
2703: LD_EXP 25
2707: PPUSH
2708: LD_STRING D4b-Miller-3
2710: PPUSH
2711: CALL_OW 88
// Say ( Simone , D4b-Simone-3 ) ;
2715: LD_EXP 19
2719: PPUSH
2720: LD_STRING D4b-Simone-3
2722: PPUSH
2723: CALL_OW 88
// Say ( Miller , D4b-Miller-4 ) ;
2727: LD_EXP 25
2731: PPUSH
2732: LD_STRING D4b-Miller-4
2734: PPUSH
2735: CALL_OW 88
// DialogueOff ;
2739: CALL_OW 7
// Wait ( 0 0$5 ) ;
2743: LD_INT 175
2745: PPUSH
2746: CALL_OW 67
// Say ( Loghain , D5-Off-1 ) ;
2750: LD_EXP 27
2754: PPUSH
2755: LD_STRING D5-Off-1
2757: PPUSH
2758: CALL_OW 88
// Say ( Simone , D5-Simone-1 ) ;
2762: LD_EXP 19
2766: PPUSH
2767: LD_STRING D5-Simone-1
2769: PPUSH
2770: CALL_OW 88
// SayRadioSex ( Scout , D5-Scout-1 , D5-FemScout-1 ) ;
2774: LD_EXP 30
2778: PPUSH
2779: LD_STRING D5-Scout-1
2781: PPUSH
2782: LD_STRING D5-FemScout-1
2784: PPUSH
2785: CALL 14234 0 3
// Say ( Kathryn , D5-Kathryn-1 ) ;
2789: LD_EXP 20
2793: PPUSH
2794: LD_STRING D5-Kathryn-1
2796: PPUSH
2797: CALL_OW 88
// Say ( Simone , D5-Simone-2 ) ;
2801: LD_EXP 19
2805: PPUSH
2806: LD_STRING D5-Simone-2
2808: PPUSH
2809: CALL_OW 88
// SayRadio ( Barnes , D5-Comm-1 ) ;
2813: LD_EXP 26
2817: PPUSH
2818: LD_STRING D5-Comm-1
2820: PPUSH
2821: CALL_OW 94
// SayRadio ( Barnes , D5-Comm-2 ) ;
2825: LD_EXP 26
2829: PPUSH
2830: LD_STRING D5-Comm-2
2832: PPUSH
2833: CALL_OW 94
// Say ( Simone , D5-Simone-3 ) ;
2837: LD_EXP 19
2841: PPUSH
2842: LD_STRING D5-Simone-3
2844: PPUSH
2845: CALL_OW 88
// Say ( Kathryn , D5-Kathryn-2 ) ;
2849: LD_EXP 20
2853: PPUSH
2854: LD_STRING D5-Kathryn-2
2856: PPUSH
2857: CALL_OW 88
// Say ( Simone , D5-Simone-4 ) ;
2861: LD_EXP 19
2865: PPUSH
2866: LD_STRING D5-Simone-4
2868: PPUSH
2869: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
2873: LD_STRING M2
2875: PPUSH
2876: CALL_OW 337
// RussianAssaultStopped = true ;
2880: LD_ADDR_EXP 2
2884: PUSH
2885: LD_INT 1
2887: ST_TO_ADDR
// end ;
2888: END
// every 0 0$1 trigger RussianAssaultStopped do
2889: LD_EXP 2
2893: IFFALSE 3082
2895: GO 2897
2897: DISABLE
// begin Wait ( 1 1$20 ) ;
2898: LD_INT 2800
2900: PPUSH
2901: CALL_OW 67
// PlaceUnitXY ( Scout , 40 , 5 , false ) ;
2905: LD_EXP 30
2909: PPUSH
2910: LD_INT 40
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: LD_INT 0
2918: PPUSH
2919: CALL_OW 48
// ComMoveXY ( Scout , 65 , 72 ) ;
2923: LD_EXP 30
2927: PPUSH
2928: LD_INT 65
2930: PPUSH
2931: LD_INT 72
2933: PPUSH
2934: CALL_OW 111
// Wait ( 0 0$30 ) ;
2938: LD_INT 1050
2940: PPUSH
2941: CALL_OW 67
// CenterOnUnits ( Scout ) ;
2945: LD_EXP 30
2949: PPUSH
2950: CALL_OW 85
// SaySex ( Scout , D5a-Scout-1 , D5a-FemScout-1 ) ;
2954: LD_EXP 30
2958: PPUSH
2959: LD_STRING D5a-Scout-1
2961: PPUSH
2962: LD_STRING D5a-FemScout-1
2964: PPUSH
2965: CALL 14183 0 3
// Say ( Simone , D5a-Simone-1 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D5a-Simone-1
2976: PPUSH
2977: CALL_OW 88
// SetSide ( Scout , 7 ) ;
2981: LD_EXP 30
2985: PPUSH
2986: LD_INT 7
2988: PPUSH
2989: CALL_OW 235
// if difficulty > 1 then
2993: LD_OWVAR 67
2997: PUSH
2998: LD_INT 1
3000: GREATER
3001: IFFALSE 3082
// begin Wait ( 0 0$10 ) ;
3003: LD_INT 350
3005: PPUSH
3006: CALL_OW 67
// SaySex ( Scout , D5b-Scout-1 , D5b-FemScout-1 ) ;
3010: LD_EXP 30
3014: PPUSH
3015: LD_STRING D5b-Scout-1
3017: PPUSH
3018: LD_STRING D5b-FemScout-1
3020: PPUSH
3021: CALL 14183 0 3
// Say ( Simone , D5b-Simone-1 ) ;
3025: LD_EXP 19
3029: PPUSH
3030: LD_STRING D5b-Simone-1
3032: PPUSH
3033: CALL_OW 88
// SaySex ( Scout , D5b-Scout-1 , D5b-FemScout-1 ) ;
3037: LD_EXP 30
3041: PPUSH
3042: LD_STRING D5b-Scout-1
3044: PPUSH
3045: LD_STRING D5b-FemScout-1
3047: PPUSH
3048: CALL 14183 0 3
// Say ( Simone , D5b-Simone-2 ) ;
3052: LD_EXP 19
3056: PPUSH
3057: LD_STRING D5b-Simone-2
3059: PPUSH
3060: CALL_OW 88
// Wait ( 1 1$10 ) ;
3064: LD_INT 2450
3066: PPUSH
3067: CALL_OW 67
// Prepare_RU2 ;
3071: CALL 15189 0 0
// ChangeMissionObjectives ( M2a ) ;
3075: LD_STRING M2a
3077: PPUSH
3078: CALL_OW 337
// end ; end ;
3082: END
// every 0 0$1 trigger IsDead ( tk ) do
3083: LD_EXP 13
3087: PPUSH
3088: CALL_OW 301
3092: IFFALSE 3109
3094: GO 3096
3096: DISABLE
// begin Say ( Kathryn , D7-Kathryn-1 ) ;
3097: LD_EXP 20
3101: PPUSH
3102: LD_STRING D7-Kathryn-1
3104: PPUSH
3105: CALL_OW 88
// end ;
3109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 4 do
3110: LD_INT 22
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 21
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 69
3145: PUSH
3146: LD_INT 4
3148: LESS
3149: PUSH
3150: LD_INT 22
3152: PUSH
3153: LD_INT 6
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 50
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 69
3185: PUSH
3186: LD_INT 4
3188: LESS
3189: AND
3190: IFFALSE 3635
3192: GO 3194
3194: DISABLE
// begin SayRadio ( Loghain , D6-Sol-1 ) ;
3195: LD_EXP 27
3199: PPUSH
3200: LD_STRING D6-Sol-1
3202: PPUSH
3203: CALL_OW 94
// SayRadio ( ROff , D6-ROff-1 ) ;
3207: LD_EXP 28
3211: PPUSH
3212: LD_STRING D6-ROff-1
3214: PPUSH
3215: CALL_OW 94
// SayRadio ( Sidor , D6-Sidor-1 ) ;
3219: LD_EXP 29
3223: PPUSH
3224: LD_STRING D6-Sidor-1
3226: PPUSH
3227: CALL_OW 94
// SayRadio ( ROff , D6-ROff-2 ) ;
3231: LD_EXP 28
3235: PPUSH
3236: LD_STRING D6-ROff-2
3238: PPUSH
3239: CALL_OW 94
// Say ( Kathryn , D6-Kathryn-1 ) ;
3243: LD_EXP 20
3247: PPUSH
3248: LD_STRING D6-Kathryn-1
3250: PPUSH
3251: CALL_OW 88
// Say ( Simone , D6-Simone-1 ) ;
3255: LD_EXP 19
3259: PPUSH
3260: LD_STRING D6-Simone-1
3262: PPUSH
3263: CALL_OW 88
// SayRadio ( Barnes , D6-Comm-1 ) ;
3267: LD_EXP 26
3271: PPUSH
3272: LD_STRING D6-Comm-1
3274: PPUSH
3275: CALL_OW 94
// SayRadio ( Barnes , D6-Comm-2 ) ;
3279: LD_EXP 26
3283: PPUSH
3284: LD_STRING D6-Comm-2
3286: PPUSH
3287: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
3291: LD_EXP 19
3295: PPUSH
3296: LD_STRING D6-Simone-2
3298: PPUSH
3299: CALL_OW 88
// if not IsDead ( tk ) then
3303: LD_EXP 13
3307: PPUSH
3308: CALL_OW 301
3312: NOT
3313: IFFALSE 3341
// begin Say ( Kathryn , D6-Kathryn-2 ) ;
3315: LD_EXP 20
3319: PPUSH
3320: LD_STRING D6-Kathryn-2
3322: PPUSH
3323: CALL_OW 88
// Say ( Simone , D6-Simone-3 ) ;
3327: LD_EXP 19
3331: PPUSH
3332: LD_STRING D6-Simone-3
3334: PPUSH
3335: CALL_OW 88
// end else
3339: GO 3377
// begin Say ( Kathryn , D6-Kathryn-2a ) ;
3341: LD_EXP 20
3345: PPUSH
3346: LD_STRING D6-Kathryn-2a
3348: PPUSH
3349: CALL_OW 88
// Say ( Simone , D6-Simone-3a ) ;
3353: LD_EXP 19
3357: PPUSH
3358: LD_STRING D6-Simone-3a
3360: PPUSH
3361: CALL_OW 88
// Say ( Kathryn , D6-Kathryn-3a ) ;
3365: LD_EXP 20
3369: PPUSH
3370: LD_STRING D6-Kathryn-3a
3372: PPUSH
3373: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
3377: LD_INT 35
3379: PPUSH
3380: CALL_OW 67
// if IsOK ( Gomez ) and IsOK ( Mirron ) and IsOK ( Valheim ) then
3384: LD_EXP 23
3388: PPUSH
3389: CALL_OW 302
3393: PUSH
3394: LD_EXP 21
3398: PPUSH
3399: CALL_OW 302
3403: AND
3404: PUSH
3405: LD_EXP 22
3409: PPUSH
3410: CALL_OW 302
3414: AND
3415: IFFALSE 3429
// AddMedal ( Personnel , 1 ) else
3417: LD_STRING Personnel
3419: PPUSH
3420: LD_INT 1
3422: PPUSH
3423: CALL_OW 101
3427: GO 3440
// AddMedal ( Personnel , - 1 ) ;
3429: LD_STRING Personnel
3431: PPUSH
3432: LD_INT 1
3434: NEG
3435: PPUSH
3436: CALL_OW 101
// if LaserTanks < 5 then
3440: LD_EXP 6
3444: PUSH
3445: LD_INT 5
3447: LESS
3448: IFFALSE 3463
// AddMedal ( Vehicles , - 1 ) else
3450: LD_STRING Vehicles
3452: PPUSH
3453: LD_INT 1
3455: NEG
3456: PPUSH
3457: CALL_OW 101
3461: GO 3473
// AddMedal ( Vehicles , 1 ) ;
3463: LD_STRING Vehicles
3465: PPUSH
3466: LD_INT 1
3468: PPUSH
3469: CALL_OW 101
// AddMedal ( Bases , 1 ) ;
3473: LD_STRING Bases
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 101
// GiveMedals ( Main ) ;
3483: LD_STRING Main
3485: PPUSH
3486: CALL_OW 102
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
3490: LD_ADDR_EXP 7
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 7
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 50
3517: PUSH
3518: EMPTY
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: PPUSH
3526: CALL_OW 69
3530: ST_TO_ADDR
// RewardPeople ( personnel ) ;
3531: LD_EXP 7
3535: PPUSH
3536: CALL_OW 43
// SaveCharacters ( Kathryn , Kathryn ) ;
3540: LD_EXP 20
3544: PPUSH
3545: LD_STRING Kathryn
3547: PPUSH
3548: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
3552: LD_EXP 19
3556: PPUSH
3557: LD_STRING Simone
3559: PPUSH
3560: CALL_OW 38
// SaveCharacters ( Loghain , Loghain ) ;
3564: LD_EXP 27
3568: PPUSH
3569: LD_STRING Loghain
3571: PPUSH
3572: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
3576: LD_EXP 25
3580: PPUSH
3581: LD_STRING Miller
3583: PPUSH
3584: CALL_OW 38
// SaveCharacters ( personnel diff [ Kathryn , Simone , Loghain , Miller , 0 ] , AM01_Survivors ) ;
3588: LD_EXP 7
3592: PUSH
3593: LD_EXP 20
3597: PUSH
3598: LD_EXP 19
3602: PUSH
3603: LD_EXP 27
3607: PUSH
3608: LD_EXP 25
3612: PUSH
3613: LD_INT 0
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: DIFF
3623: PPUSH
3624: LD_STRING AM01_Survivors
3626: PPUSH
3627: CALL_OW 38
// YouWin ;
3631: CALL_OW 103
// end ; end_of_file
3635: END
// export Simone , Kathryn , Mirron , Valheim , Gomez , Lazarfeld , Miller , Barnes , Loghain , ROff , Sidor , Scout ; export RUBazookers , soldiersOK_list , vehicleOK_list , medic_list ; export MC_attack_group , attack_group2 ; export function CreatePersonnel ; begin
3636: LD_INT 0
3638: PPUSH
// uc_side := 7 ;
3639: LD_ADDR_OWVAR 20
3643: PUSH
3644: LD_INT 7
3646: ST_TO_ADDR
// hc_class = class_mechanic ;
3647: LD_ADDR_OWVAR 28
3651: PUSH
3652: LD_INT 3
3654: ST_TO_ADDR
// uc_nation := nation_american ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_sex = sex_female ;
3663: LD_ADDR_OWVAR 27
3667: PUSH
3668: LD_INT 2
3670: ST_TO_ADDR
// hc_importance = 120 ;
3671: LD_ADDR_OWVAR 32
3675: PUSH
3676: LD_INT 120
3678: ST_TO_ADDR
// hc_basic_skills = [ 3 , 1 , 5 , 4 ] ;
3679: LD_ADDR_OWVAR 30
3683: PUSH
3684: LD_INT 3
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: LD_INT 5
3692: PUSH
3693: LD_INT 4
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: ST_TO_ADDR
// hc_skills = [ 4 , 3 , 5 , 4 ] ;
3702: LD_ADDR_OWVAR 31
3706: PUSH
3707: LD_INT 4
3709: PUSH
3710: LD_INT 3
3712: PUSH
3713: LD_INT 5
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
3725: LD_ADDR_OWVAR 29
3729: PUSH
3730: LD_INT 12
3732: PUSH
3733: LD_INT 10
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: ST_TO_ADDR
// hc_name := Simone ;
3740: LD_ADDR_OWVAR 26
3744: PUSH
3745: LD_STRING Simone
3747: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
3748: LD_ADDR_OWVAR 33
3752: PUSH
3753: LD_STRING ZieloneLaserki_Heroines
3755: ST_TO_ADDR
// hc_face_number := 1 ;
3756: LD_ADDR_OWVAR 34
3760: PUSH
3761: LD_INT 1
3763: ST_TO_ADDR
// Simone := CreateHuman ;
3764: LD_ADDR_EXP 19
3768: PUSH
3769: CALL_OW 44
3773: ST_TO_ADDR
// uc_nation := nation_american ;
3774: LD_ADDR_OWVAR 21
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// hc_importance = 110 ;
3782: LD_ADDR_OWVAR 32
3786: PUSH
3787: LD_INT 110
3789: ST_TO_ADDR
// hc_sex = sex_female ;
3790: LD_ADDR_OWVAR 27
3794: PUSH
3795: LD_INT 2
3797: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 2 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 3
3805: PUSH
3806: LD_INT 2
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills = [ 3 , 2 , 4 , 2 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 4
3834: PUSH
3835: LD_INT 2
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3844: LD_ADDR_OWVAR 29
3848: PUSH
3849: LD_INT 11
3851: PUSH
3852: LD_INT 10
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: ST_TO_ADDR
// hc_name := Kathryn ;
3859: LD_ADDR_OWVAR 26
3863: PUSH
3864: LD_STRING Kathryn
3866: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
3867: LD_ADDR_OWVAR 33
3871: PUSH
3872: LD_STRING ZieloneLaserki_Heroines
3874: ST_TO_ADDR
// hc_face_number := 2 ;
3875: LD_ADDR_OWVAR 34
3879: PUSH
3880: LD_INT 2
3882: ST_TO_ADDR
// Kathryn := CreateHuman ;
3883: LD_ADDR_EXP 20
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// hc_sex = sex_male ;
3893: LD_ADDR_OWVAR 27
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// uc_nation := nation_american ;
3901: LD_ADDR_OWVAR 21
3905: PUSH
3906: LD_INT 1
3908: ST_TO_ADDR
// hc_importance = 70 ;
3909: LD_ADDR_OWVAR 32
3913: PUSH
3914: LD_INT 70
3916: ST_TO_ADDR
// hc_skills = [ 3 , 3 , 4 , 1 ] ;
3917: LD_ADDR_OWVAR 31
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 1
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3940: LD_ADDR_OWVAR 29
3944: PUSH
3945: LD_INT 10
3947: PUSH
3948: LD_INT 10
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: ST_TO_ADDR
// hc_name := Mike Gomez ;
3955: LD_ADDR_OWVAR 26
3959: PUSH
3960: LD_STRING Mike Gomez
3962: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
3963: LD_ADDR_OWVAR 33
3967: PUSH
3968: LD_STRING ZieloneLaserki_Heroes
3970: ST_TO_ADDR
// hc_face_number := 7 ;
3971: LD_ADDR_OWVAR 34
3975: PUSH
3976: LD_INT 7
3978: ST_TO_ADDR
// Gomez := CreateHuman ;
3979: LD_ADDR_EXP 23
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// uc_side := 1 ;
3989: LD_ADDR_OWVAR 20
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// uc_nation := nation_american ;
3997: LD_ADDR_OWVAR 21
4001: PUSH
4002: LD_INT 1
4004: ST_TO_ADDR
// hc_importance = 70 ;
4005: LD_ADDR_OWVAR 32
4009: PUSH
4010: LD_INT 70
4012: ST_TO_ADDR
// hc_skills = [ 5 , 4 , 7 , 3 ] ;
4013: LD_ADDR_OWVAR 31
4017: PUSH
4018: LD_INT 5
4020: PUSH
4021: LD_INT 4
4023: PUSH
4024: LD_INT 7
4026: PUSH
4027: LD_INT 3
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4036: LD_ADDR_OWVAR 29
4040: PUSH
4041: LD_INT 10
4043: PUSH
4044: LD_INT 10
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: ST_TO_ADDR
// hc_name := Lazarfeld ;
4051: LD_ADDR_OWVAR 26
4055: PUSH
4056: LD_STRING Lazarfeld
4058: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING ZieloneLaserki_Heroes
4066: ST_TO_ADDR
// hc_face_number := 1 ;
4067: LD_ADDR_OWVAR 34
4071: PUSH
4072: LD_INT 1
4074: ST_TO_ADDR
// Lazarfeld := CreateHuman ;
4075: LD_ADDR_EXP 24
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// uc_nation := nation_american ;
4085: LD_ADDR_OWVAR 21
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// hc_importance = 70 ;
4093: LD_ADDR_OWVAR 32
4097: PUSH
4098: LD_INT 70
4100: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 3 ] ;
4101: LD_ADDR_OWVAR 31
4105: PUSH
4106: LD_INT 5
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4124: LD_ADDR_OWVAR 29
4128: PUSH
4129: LD_INT 10
4131: PUSH
4132: LD_INT 10
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: ST_TO_ADDR
// hc_name := Geoff Mirron ;
4139: LD_ADDR_OWVAR 26
4143: PUSH
4144: LD_STRING Geoff Mirron
4146: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4147: LD_ADDR_OWVAR 33
4151: PUSH
4152: LD_STRING ZieloneLaserki_Heroes
4154: ST_TO_ADDR
// hc_face_number := 2 ;
4155: LD_ADDR_OWVAR 34
4159: PUSH
4160: LD_INT 2
4162: ST_TO_ADDR
// Mirron := CreateHuman ;
4163: LD_ADDR_EXP 21
4167: PUSH
4168: CALL_OW 44
4172: ST_TO_ADDR
// uc_nation := nation_american ;
4173: LD_ADDR_OWVAR 21
4177: PUSH
4178: LD_INT 1
4180: ST_TO_ADDR
// hc_importance = 70 ;
4181: LD_ADDR_OWVAR 32
4185: PUSH
4186: LD_INT 70
4188: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 4 , 2 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: LD_INT 2
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4212: LD_ADDR_OWVAR 29
4216: PUSH
4217: LD_INT 10
4219: PUSH
4220: LD_INT 10
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: ST_TO_ADDR
// hc_name := Pavel Valheim ;
4227: LD_ADDR_OWVAR 26
4231: PUSH
4232: LD_STRING Pavel Valheim
4234: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4235: LD_ADDR_OWVAR 33
4239: PUSH
4240: LD_STRING ZieloneLaserki_Heroes
4242: ST_TO_ADDR
// hc_face_number := 5 ;
4243: LD_ADDR_OWVAR 34
4247: PUSH
4248: LD_INT 5
4250: ST_TO_ADDR
// Valheim := CreateHuman ;
4251: LD_ADDR_EXP 22
4255: PUSH
4256: CALL_OW 44
4260: ST_TO_ADDR
// hc_class = class_soldier ;
4261: LD_ADDR_OWVAR 28
4265: PUSH
4266: LD_INT 1
4268: ST_TO_ADDR
// uc_nation := nation_american ;
4269: LD_ADDR_OWVAR 21
4273: PUSH
4274: LD_INT 1
4276: ST_TO_ADDR
// hc_importance = 70 ;
4277: LD_ADDR_OWVAR 32
4281: PUSH
4282: LD_INT 70
4284: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 8
4290: PPUSH
4291: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
4295: LD_ADDR_OWVAR 29
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 10
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
// hc_name := Barnes ;
4310: LD_ADDR_OWVAR 26
4314: PUSH
4315: LD_STRING Barnes
4317: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
4318: LD_ADDR_OWVAR 33
4322: PUSH
4323: LD_STRING ZieloneLaserki_Commanders
4325: ST_TO_ADDR
// hc_face_number := 2 ;
4326: LD_ADDR_OWVAR 34
4330: PUSH
4331: LD_INT 2
4333: ST_TO_ADDR
// Barnes := CreateHuman ;
4334: LD_ADDR_EXP 26
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// uc_nation := nation_american ;
4344: LD_ADDR_OWVAR 21
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// hc_importance = 50 ;
4352: LD_ADDR_OWVAR 32
4356: PUSH
4357: LD_INT 50
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 6 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 6
4365: PPUSH
4366: CALL_OW 381
// hc_name := Loghain ;
4370: LD_ADDR_OWVAR 26
4374: PUSH
4375: LD_STRING Loghain
4377: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4378: LD_ADDR_OWVAR 33
4382: PUSH
4383: LD_STRING ZieloneLaserki_Heroes
4385: ST_TO_ADDR
// hc_face_number := 6 ;
4386: LD_ADDR_OWVAR 34
4390: PUSH
4391: LD_INT 6
4393: ST_TO_ADDR
// Loghain := CreateHuman ;
4394: LD_ADDR_EXP 27
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// uc_side := 1 ;
4404: LD_ADDR_OWVAR 20
4408: PUSH
4409: LD_INT 1
4411: ST_TO_ADDR
// uc_nation := nation_american ;
4412: LD_ADDR_OWVAR 21
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// hc_importance = 105 ;
4420: LD_ADDR_OWVAR 32
4424: PUSH
4425: LD_INT 105
4427: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
4428: LD_INT 1
4430: PPUSH
4431: LD_INT 5
4433: PPUSH
4434: CALL_OW 381
// hc_name := Arthur Miller ;
4438: LD_ADDR_OWVAR 26
4442: PUSH
4443: LD_STRING Arthur Miller
4445: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4446: LD_ADDR_OWVAR 33
4450: PUSH
4451: LD_STRING ZieloneLaserki_Heroes
4453: ST_TO_ADDR
// hc_face_number := 3 ;
4454: LD_ADDR_OWVAR 34
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// Miller := CreateHuman ;
4462: LD_ADDR_EXP 25
4466: PUSH
4467: CALL_OW 44
4471: ST_TO_ADDR
// uc_side := 3 ;
4472: LD_ADDR_OWVAR 20
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// uc_nation := nation_russian ;
4480: LD_ADDR_OWVAR 21
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// hc_importance = 50 ;
4488: LD_ADDR_OWVAR 32
4492: PUSH
4493: LD_INT 50
4495: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 5
4501: PPUSH
4502: CALL_OW 381
// hc_name := Nikolaj Barinski ;
4506: LD_ADDR_OWVAR 26
4510: PUSH
4511: LD_STRING Nikolaj Barinski
4513: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
4514: LD_ADDR_OWVAR 33
4518: PUSH
4519: LD_STRING ZieloneLaserki_Commanders
4521: ST_TO_ADDR
// hc_face_number := 8 ;
4522: LD_ADDR_OWVAR 34
4526: PUSH
4527: LD_INT 8
4529: ST_TO_ADDR
// ROff := CreateHuman ;
4530: LD_ADDR_EXP 28
4534: PUSH
4535: CALL_OW 44
4539: ST_TO_ADDR
// uc_side := 3 ;
4540: LD_ADDR_OWVAR 20
4544: PUSH
4545: LD_INT 3
4547: ST_TO_ADDR
// uc_nation := nation_russian ;
4548: LD_ADDR_OWVAR 21
4552: PUSH
4553: LD_INT 3
4555: ST_TO_ADDR
// hc_importance = 50 ;
4556: LD_ADDR_OWVAR 32
4560: PUSH
4561: LD_INT 50
4563: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 9
4569: PPUSH
4570: CALL_OW 381
// hc_name := ??? ;
4574: LD_ADDR_OWVAR 26
4578: PUSH
4579: LD_STRING ???
4581: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4582: LD_ADDR_OWVAR 33
4586: PUSH
4587: LD_STRING ZieloneLaserki_Heroes
4589: ST_TO_ADDR
// hc_face_number := 8 ;
4590: LD_ADDR_OWVAR 34
4594: PUSH
4595: LD_INT 8
4597: ST_TO_ADDR
// Sidor := CreateHuman ;
4598: LD_ADDR_EXP 29
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// uc_side := 4 ;
4608: LD_ADDR_OWVAR 20
4612: PUSH
4613: LD_INT 4
4615: ST_TO_ADDR
// uc_nation := nation_american ;
4616: LD_ADDR_OWVAR 21
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// hc_importance = 50 ;
4624: LD_ADDR_OWVAR 32
4628: PUSH
4629: LD_INT 50
4631: ST_TO_ADDR
// PrepareSoldier ( 0 , 5 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 5
4637: PPUSH
4638: CALL_OW 381
// hc_name :=  ;
4642: LD_ADDR_OWVAR 26
4646: PUSH
4647: LD_STRING 
4649: ST_TO_ADDR
// hc_gallery :=  ;
4650: LD_ADDR_OWVAR 33
4654: PUSH
4655: LD_STRING 
4657: ST_TO_ADDR
// Scout := CreateHuman ;
4658: LD_ADDR_EXP 30
4662: PUSH
4663: CALL_OW 44
4667: ST_TO_ADDR
// end ;
4668: LD_VAR 0 1
4672: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
4673: LD_INT 0
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
4687: LD_ADDR_VAR 0 6
4691: PUSH
4692: LD_INT 22
4694: PUSH
4695: LD_VAR 0 1
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 30
4706: PUSH
4707: LD_INT 6
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
4723: LD_ADDR_VAR 0 6
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: LD_INT 22
4735: PUSH
4736: LD_VAR 0 1
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 30
4747: PUSH
4748: LD_INT 7
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ADD
4764: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4765: LD_ADDR_VAR 0 6
4769: PUSH
4770: LD_VAR 0 6
4774: PUSH
4775: LD_INT 22
4777: PUSH
4778: LD_VAR 0 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 30
4789: PUSH
4790: LD_INT 8
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ADD
4806: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
4807: LD_ADDR_VAR 0 8
4811: PUSH
4812: LD_INT 22
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 30
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 69
4842: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4843: LD_ADDR_VAR 0 9
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_VAR 0 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
4879: LD_ADDR_VAR 0 10
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_VAR 0 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 30
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4915: LD_ADDR_VAR 0 10
4919: PUSH
4920: LD_INT 22
4922: PUSH
4923: LD_VAR 0 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 30
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// case side of 1 :
4951: LD_VAR 0 1
4955: PUSH
4956: LD_INT 1
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 4975
4964: POP
// uc_nation = nation_american ; 3 :
4965: LD_ADDR_OWVAR 21
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
4973: GO 4995
4975: LD_INT 3
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4994
4983: POP
// uc_nation = nation_russian ; end ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 3
4991: ST_TO_ADDR
4992: GO 4995
4994: POP
// for i = 1 to laby do
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_VAR 0 6
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5140
// begin if IsInUnit ( laby [ i ] ) = 0 then
5013: LD_VAR 0 6
5017: PUSH
5018: LD_VAR 0 3
5022: ARRAY
5023: PPUSH
5024: CALL_OW 310
5028: PUSH
5029: LD_INT 0
5031: EQUAL
5032: IFFALSE 5138
// begin uc_side = side ;
5034: LD_ADDR_OWVAR 20
5038: PUSH
5039: LD_VAR 0 1
5043: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
5044: LD_ADDR_VAR 0 11
5048: PUSH
5049: LD_INT 2
5051: PPUSH
5052: LD_INT 4
5054: PPUSH
5055: CALL_OW 12
5059: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5060: LD_ADDR_VAR 0 4
5064: PUSH
5065: DOUBLE
5066: LD_INT 1
5068: DEC
5069: ST_TO_ADDR
5070: LD_VAR 0 11
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5136
// begin PrepareScientist ( 0 , 4 ) ;
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 4
5083: PPUSH
5084: CALL_OW 384
// ludz = CreateHuman ;
5088: LD_ADDR_VAR 0 12
5092: PUSH
5093: CALL_OW 44
5097: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
5098: LD_VAR 0 12
5102: PPUSH
5103: LD_VAR 0 6
5107: PUSH
5108: LD_VAR 0 3
5112: ARRAY
5113: PPUSH
5114: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
5118: LD_ADDR_VAR 0 11
5122: PUSH
5123: LD_INT 2
5125: PPUSH
5126: LD_INT 4
5128: PPUSH
5129: CALL_OW 12
5133: ST_TO_ADDR
// end ;
5134: GO 5075
5136: POP
5137: POP
// end ; end ;
5138: GO 5010
5140: POP
5141: POP
// for i = 1 to fabryki do
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: DOUBLE
5148: LD_INT 1
5150: DEC
5151: ST_TO_ADDR
5152: LD_VAR 0 9
5156: PUSH
5157: FOR_TO
5158: IFFALSE 5287
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
5160: LD_VAR 0 9
5164: PUSH
5165: LD_VAR 0 3
5169: ARRAY
5170: PPUSH
5171: CALL_OW 310
5175: PUSH
5176: LD_INT 0
5178: EQUAL
5179: IFFALSE 5285
// begin uc_side = side ;
5181: LD_ADDR_OWVAR 20
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_INT 2
5198: PPUSH
5199: LD_INT 4
5201: PPUSH
5202: CALL_OW 12
5206: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5207: LD_ADDR_VAR 0 4
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_VAR 0 11
5221: PUSH
5222: FOR_TO
5223: IFFALSE 5283
// begin PrepareMechanic ( 0 , 4 ) ;
5225: LD_INT 0
5227: PPUSH
5228: LD_INT 4
5230: PPUSH
5231: CALL_OW 383
// ludz = CreateHuman ;
5235: LD_ADDR_VAR 0 12
5239: PUSH
5240: CALL_OW 44
5244: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
5245: LD_VAR 0 12
5249: PPUSH
5250: LD_VAR 0 9
5254: PUSH
5255: LD_VAR 0 3
5259: ARRAY
5260: PPUSH
5261: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
5265: LD_ADDR_VAR 0 11
5269: PUSH
5270: LD_INT 2
5272: PPUSH
5273: LD_INT 4
5275: PPUSH
5276: CALL_OW 12
5280: ST_TO_ADDR
// end ;
5281: GO 5222
5283: POP
5284: POP
// end ; end ;
5285: GO 5157
5287: POP
5288: POP
// for i = 1 to sklad do
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_VAR 0 10
5303: PUSH
5304: FOR_TO
5305: IFFALSE 5418
// begin if IsInUnit ( sklad [ i ] ) = 0 then
5307: LD_VAR 0 10
5311: PUSH
5312: LD_VAR 0 3
5316: ARRAY
5317: PPUSH
5318: CALL_OW 310
5322: PUSH
5323: LD_INT 0
5325: EQUAL
5326: IFFALSE 5416
// begin uc_side = side ;
5328: LD_ADDR_OWVAR 20
5332: PUSH
5333: LD_VAR 0 1
5337: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
5338: LD_ADDR_VAR 0 11
5342: PUSH
5343: LD_INT 2
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 12
5353: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: DOUBLE
5360: LD_INT 1
5362: DEC
5363: ST_TO_ADDR
5364: LD_VAR 0 11
5368: PUSH
5369: FOR_TO
5370: IFFALSE 5414
// begin PrepareEngineer ( 0 , 4 ) ;
5372: LD_INT 0
5374: PPUSH
5375: LD_INT 4
5377: PPUSH
5378: CALL_OW 382
// ludz = CreateHuman ;
5382: LD_ADDR_VAR 0 12
5386: PUSH
5387: CALL_OW 44
5391: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
5392: LD_VAR 0 12
5396: PPUSH
5397: LD_VAR 0 10
5401: PUSH
5402: LD_VAR 0 3
5406: ARRAY
5407: PPUSH
5408: CALL_OW 52
// end ;
5412: GO 5369
5414: POP
5415: POP
// end ; end ;
5416: GO 5304
5418: POP
5419: POP
// end ;
5420: LD_VAR 0 2
5424: RET
// export function Garrison_Buildings_AM ( side ) ; var i , j , l , labs , labs2 , factories , depots , how_many , ludz , filter ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
// labs := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_VAR 0 1
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 30
5457: PUSH
5458: LD_INT 7
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: ST_TO_ADDR
// labs2 := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
5474: LD_ADDR_VAR 0 7
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_VAR 0 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 30
5493: PUSH
5494: LD_INT 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL_OW 69
5509: ST_TO_ADDR
// factories := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
5510: LD_ADDR_VAR 0 8
5514: PUSH
5515: LD_INT 22
5517: PUSH
5518: LD_VAR 0 1
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 30
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// depots := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
5546: LD_ADDR_VAR 0 9
5550: PUSH
5551: LD_INT 22
5553: PUSH
5554: LD_VAR 0 1
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 30
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 69
5581: ST_TO_ADDR
// depots := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5582: LD_ADDR_VAR 0 9
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_VAR 0 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 30
5601: PUSH
5602: LD_INT 1
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 69
5617: ST_TO_ADDR
// case side of 1 :
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 1
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5631
5629: GO 5642
5631: POP
// uc_nation = nation_american ; 3 :
5632: LD_ADDR_OWVAR 21
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
5640: GO 5662
5642: LD_INT 3
5644: DOUBLE
5645: EQUAL
5646: IFTRUE 5650
5648: GO 5661
5650: POP
// uc_nation = nation_russian ; end ;
5651: LD_ADDR_OWVAR 21
5655: PUSH
5656: LD_INT 3
5658: ST_TO_ADDR
5659: GO 5662
5661: POP
// for i = 1 to labs do
5662: LD_ADDR_VAR 0 3
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_VAR 0 6
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5783
// begin if IsInUnit ( labs [ i ] ) = 0 then
5680: LD_VAR 0 6
5684: PUSH
5685: LD_VAR 0 3
5689: ARRAY
5690: PPUSH
5691: CALL_OW 310
5695: PUSH
5696: LD_INT 0
5698: EQUAL
5699: IFFALSE 5781
// begin uc_side = side ;
5701: LD_ADDR_OWVAR 20
5705: PUSH
5706: LD_VAR 0 1
5710: ST_TO_ADDR
// how_many = 2 ;
5711: LD_ADDR_VAR 0 10
5715: PUSH
5716: LD_INT 2
5718: ST_TO_ADDR
// for j = 1 to how_many do
5719: LD_ADDR_VAR 0 4
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_VAR 0 10
5733: PUSH
5734: FOR_TO
5735: IFFALSE 5779
// begin PrepareScientist ( 0 , 4 ) ;
5737: LD_INT 0
5739: PPUSH
5740: LD_INT 4
5742: PPUSH
5743: CALL_OW 384
// ludz = CreateHuman ;
5747: LD_ADDR_VAR 0 11
5751: PUSH
5752: CALL_OW 44
5756: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , labs [ i ] ) ;
5757: LD_VAR 0 11
5761: PPUSH
5762: LD_VAR 0 6
5766: PUSH
5767: LD_VAR 0 3
5771: ARRAY
5772: PPUSH
5773: CALL_OW 52
// end ;
5777: GO 5734
5779: POP
5780: POP
// end ; end ;
5781: GO 5677
5783: POP
5784: POP
// for i = 1 to labs2 do
5785: LD_ADDR_VAR 0 3
5789: PUSH
5790: DOUBLE
5791: LD_INT 1
5793: DEC
5794: ST_TO_ADDR
5795: LD_VAR 0 7
5799: PUSH
5800: FOR_TO
5801: IFFALSE 5906
// begin if IsInUnit ( labs2 [ i ] ) = 0 then
5803: LD_VAR 0 7
5807: PUSH
5808: LD_VAR 0 3
5812: ARRAY
5813: PPUSH
5814: CALL_OW 310
5818: PUSH
5819: LD_INT 0
5821: EQUAL
5822: IFFALSE 5904
// begin uc_side = side ;
5824: LD_ADDR_OWVAR 20
5828: PUSH
5829: LD_VAR 0 1
5833: ST_TO_ADDR
// how_many = 3 ;
5834: LD_ADDR_VAR 0 10
5838: PUSH
5839: LD_INT 3
5841: ST_TO_ADDR
// for j = 1 to how_many do
5842: LD_ADDR_VAR 0 4
5846: PUSH
5847: DOUBLE
5848: LD_INT 1
5850: DEC
5851: ST_TO_ADDR
5852: LD_VAR 0 10
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5902
// begin PrepareScientist ( 0 , 5 ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 5
5865: PPUSH
5866: CALL_OW 384
// ludz = CreateHuman ;
5870: LD_ADDR_VAR 0 11
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , labs2 [ i ] ) ;
5880: LD_VAR 0 11
5884: PPUSH
5885: LD_VAR 0 7
5889: PUSH
5890: LD_VAR 0 3
5894: ARRAY
5895: PPUSH
5896: CALL_OW 52
// end ;
5900: GO 5857
5902: POP
5903: POP
// end ; end ;
5904: GO 5800
5906: POP
5907: POP
// for i = 1 to factories do
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: DOUBLE
5914: LD_INT 1
5916: DEC
5917: ST_TO_ADDR
5918: LD_VAR 0 8
5922: PUSH
5923: FOR_TO
5924: IFFALSE 6029
// begin if IsInUnit ( factories [ i ] ) = 0 then
5926: LD_VAR 0 8
5930: PUSH
5931: LD_VAR 0 3
5935: ARRAY
5936: PPUSH
5937: CALL_OW 310
5941: PUSH
5942: LD_INT 0
5944: EQUAL
5945: IFFALSE 6027
// begin uc_side = side ;
5947: LD_ADDR_OWVAR 20
5951: PUSH
5952: LD_VAR 0 1
5956: ST_TO_ADDR
// how_many = 3 ;
5957: LD_ADDR_VAR 0 10
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// for j = 1 to how_many do
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: DOUBLE
5971: LD_INT 1
5973: DEC
5974: ST_TO_ADDR
5975: LD_VAR 0 10
5979: PUSH
5980: FOR_TO
5981: IFFALSE 6025
// begin PrepareMechanic ( 0 , 4 ) ;
5983: LD_INT 0
5985: PPUSH
5986: LD_INT 4
5988: PPUSH
5989: CALL_OW 383
// ludz = CreateHuman ;
5993: LD_ADDR_VAR 0 11
5997: PUSH
5998: CALL_OW 44
6002: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , factories [ i ] ) ;
6003: LD_VAR 0 11
6007: PPUSH
6008: LD_VAR 0 8
6012: PUSH
6013: LD_VAR 0 3
6017: ARRAY
6018: PPUSH
6019: CALL_OW 52
// end ;
6023: GO 5980
6025: POP
6026: POP
// end ; end ;
6027: GO 5923
6029: POP
6030: POP
// for i = 1 to depots do
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_VAR 0 9
6045: PUSH
6046: FOR_TO
6047: IFFALSE 6152
// begin if IsInUnit ( depots [ i ] ) = 0 then
6049: LD_VAR 0 9
6053: PUSH
6054: LD_VAR 0 3
6058: ARRAY
6059: PPUSH
6060: CALL_OW 310
6064: PUSH
6065: LD_INT 0
6067: EQUAL
6068: IFFALSE 6150
// begin uc_side = side ;
6070: LD_ADDR_OWVAR 20
6074: PUSH
6075: LD_VAR 0 1
6079: ST_TO_ADDR
// how_many = 3 ;
6080: LD_ADDR_VAR 0 10
6084: PUSH
6085: LD_INT 3
6087: ST_TO_ADDR
// for j = 1 to how_many do
6088: LD_ADDR_VAR 0 4
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_VAR 0 10
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6148
// begin PrepareEngineer ( 0 , 4 ) ;
6106: LD_INT 0
6108: PPUSH
6109: LD_INT 4
6111: PPUSH
6112: CALL_OW 382
// ludz = CreateHuman ;
6116: LD_ADDR_VAR 0 11
6120: PUSH
6121: CALL_OW 44
6125: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , depots [ i ] ) ;
6126: LD_VAR 0 11
6130: PPUSH
6131: LD_VAR 0 9
6135: PUSH
6136: LD_VAR 0 3
6140: ARRAY
6141: PPUSH
6142: CALL_OW 52
// end ;
6146: GO 6103
6148: POP
6149: POP
// end ; end ;
6150: GO 6046
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 2
6158: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
// case side of 1 :
6167: LD_VAR 0 1
6171: PUSH
6172: LD_INT 1
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6191
6180: POP
// uc_nation = nation_american ; 3 :
6181: LD_ADDR_OWVAR 21
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
6189: GO 6211
6191: LD_INT 3
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6210
6199: POP
// uc_nation = nation_russian ; end ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
6208: GO 6211
6210: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
6211: LD_ADDR_VAR 0 5
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_VAR 0 1
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 30
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 69
6246: ST_TO_ADDR
// for i = 1 to barrack do
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_VAR 0 5
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6436
// begin if IsInUnit ( barrack [ i ] ) = 0 then
6265: LD_VAR 0 5
6269: PUSH
6270: LD_VAR 0 3
6274: ARRAY
6275: PPUSH
6276: CALL_OW 310
6280: PUSH
6281: LD_INT 0
6283: EQUAL
6284: IFFALSE 6434
// begin uc_side = side ;
6286: LD_ADDR_OWVAR 20
6290: PUSH
6291: LD_VAR 0 1
6295: ST_TO_ADDR
// for j = 1 to 3 do
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: DOUBLE
6302: LD_INT 1
6304: DEC
6305: ST_TO_ADDR
6306: LD_INT 3
6308: PUSH
6309: FOR_TO
6310: IFFALSE 6354
// begin PrepareSoldier ( 0 , 5 ) ;
6312: LD_INT 0
6314: PPUSH
6315: LD_INT 5
6317: PPUSH
6318: CALL_OW 381
// soldat := CreateHuman ;
6322: LD_ADDR_VAR 0 6
6326: PUSH
6327: CALL_OW 44
6331: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
6332: LD_VAR 0 6
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_VAR 0 3
6346: ARRAY
6347: PPUSH
6348: CALL_OW 52
// end ;
6352: GO 6309
6354: POP
6355: POP
// if side = 3 then
6356: LD_VAR 0 1
6360: PUSH
6361: LD_INT 3
6363: EQUAL
6364: IFFALSE 6434
// for j = 1 to 2 do
6366: LD_ADDR_VAR 0 4
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 2
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6432
// begin PrepareSoldier ( 0 , 5 ) ;
6382: LD_INT 0
6384: PPUSH
6385: LD_INT 5
6387: PPUSH
6388: CALL_OW 381
// hc_class = class_bazooker ;
6392: LD_ADDR_OWVAR 28
6396: PUSH
6397: LD_INT 9
6399: ST_TO_ADDR
// soldat := CreateHuman ;
6400: LD_ADDR_VAR 0 6
6404: PUSH
6405: CALL_OW 44
6409: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
6410: LD_VAR 0 6
6414: PPUSH
6415: LD_VAR 0 5
6419: PUSH
6420: LD_VAR 0 3
6424: ARRAY
6425: PPUSH
6426: CALL_OW 52
// end ;
6430: GO 6379
6432: POP
6433: POP
// end ; end ;
6434: GO 6262
6436: POP
6437: POP
// end ;
6438: LD_VAR 0 2
6442: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , IsMCAttack , AttacksAlly ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
6451: PPUSH
6452: PPUSH
6453: PPUSH
6454: PPUSH
// amChassisTab = [ ] ;
6455: LD_ADDR_VAR 0 20
6459: PUSH
6460: EMPTY
6461: ST_TO_ADDR
// arChassisTab = [ ] ;
6462: LD_ADDR_VAR 0 19
6466: PUSH
6467: EMPTY
6468: ST_TO_ADDR
// ruChassisTab = [ ] ;
6469: LD_ADDR_VAR 0 18
6473: PUSH
6474: EMPTY
6475: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6476: LD_INT 35
6478: PPUSH
6479: CALL_OW 67
// if nation = 1 then
6483: LD_VAR 0 5
6487: PUSH
6488: LD_INT 1
6490: EQUAL
6491: IFFALSE 7060
// begin uc_side = side ;
6493: LD_ADDR_OWVAR 20
6497: PUSH
6498: LD_VAR 0 2
6502: ST_TO_ADDR
// uc_nation = nation ;
6503: LD_ADDR_OWVAR 21
6507: PUSH
6508: LD_VAR 0 5
6512: ST_TO_ADDR
// vc_engine = vehengine ;
6513: LD_ADDR_OWVAR 39
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
6523: LD_ADDR_OWVAR 38
6527: PUSH
6528: LD_VAR 0 7
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_VAR 0 7
6540: PPUSH
6541: CALL_OW 12
6545: ARRAY
6546: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
6547: LD_ADDR_OWVAR 40
6551: PUSH
6552: LD_VAR 0 10
6556: PUSH
6557: LD_INT 1
6559: PPUSH
6560: LD_VAR 0 10
6564: PPUSH
6565: CALL_OW 12
6569: ARRAY
6570: ST_TO_ADDR
// for j = 1 to AMWeapon do
6571: LD_ADDR_VAR 0 15
6575: PUSH
6576: DOUBLE
6577: LD_INT 1
6579: DEC
6580: ST_TO_ADDR
6581: LD_VAR 0 10
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6888
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
6589: LD_VAR 0 10
6593: PUSH
6594: LD_VAR 0 15
6598: ARRAY
6599: PUSH
6600: LD_INT 2
6602: EQUAL
6603: PUSH
6604: LD_VAR 0 10
6608: PUSH
6609: LD_VAR 0 15
6613: ARRAY
6614: PUSH
6615: LD_INT 3
6617: EQUAL
6618: OR
6619: IFFALSE 6672
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
6621: LD_ADDR_VAR 0 20
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: LD_INT 4
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6648: LD_ADDR_OWVAR 37
6652: PUSH
6653: LD_VAR 0 20
6657: PUSH
6658: LD_INT 1
6660: PPUSH
6661: LD_VAR 0 20
6665: PPUSH
6666: CALL_OW 12
6670: ARRAY
6671: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
6672: LD_VAR 0 10
6676: PUSH
6677: LD_VAR 0 15
6681: ARRAY
6682: PUSH
6683: LD_INT 4
6685: EQUAL
6686: PUSH
6687: LD_VAR 0 10
6691: PUSH
6692: LD_VAR 0 15
6696: ARRAY
6697: PUSH
6698: LD_INT 5
6700: EQUAL
6701: OR
6702: PUSH
6703: LD_VAR 0 10
6707: PUSH
6708: LD_VAR 0 15
6712: ARRAY
6713: PUSH
6714: LD_INT 9
6716: EQUAL
6717: OR
6718: PUSH
6719: LD_VAR 0 10
6723: PUSH
6724: LD_VAR 0 15
6728: ARRAY
6729: PUSH
6730: LD_INT 11
6732: EQUAL
6733: OR
6734: PUSH
6735: LD_VAR 0 10
6739: PUSH
6740: LD_VAR 0 15
6744: ARRAY
6745: PUSH
6746: LD_INT 7
6748: EQUAL
6749: OR
6750: IFFALSE 6799
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
6752: LD_ADDR_VAR 0 20
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6775: LD_ADDR_OWVAR 37
6779: PUSH
6780: LD_VAR 0 20
6784: PUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_VAR 0 20
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
6799: LD_VAR 0 10
6803: PUSH
6804: LD_VAR 0 15
6808: ARRAY
6809: PUSH
6810: LD_INT 8
6812: EQUAL
6813: PUSH
6814: LD_VAR 0 10
6818: PUSH
6819: LD_VAR 0 15
6823: ARRAY
6824: PUSH
6825: LD_INT 6
6827: EQUAL
6828: OR
6829: PUSH
6830: LD_VAR 0 10
6834: PUSH
6835: LD_VAR 0 15
6839: ARRAY
6840: PUSH
6841: LD_INT 10
6843: EQUAL
6844: OR
6845: IFFALSE 6886
// begin amChassisTab = [ 4 , 5 ] ;
6847: LD_ADDR_VAR 0 20
6851: PUSH
6852: LD_INT 4
6854: PUSH
6855: LD_INT 5
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6862: LD_ADDR_OWVAR 37
6866: PUSH
6867: LD_VAR 0 20
6871: PUSH
6872: LD_INT 1
6874: PPUSH
6875: LD_VAR 0 20
6879: PPUSH
6880: CALL_OW 12
6884: ARRAY
6885: ST_TO_ADDR
// end ; end ;
6886: GO 6586
6888: POP
6889: POP
// veh = CreateVehicle ;
6890: LD_ADDR_VAR 0 17
6894: PUSH
6895: CALL_OW 45
6899: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6900: LD_VAR 0 17
6904: PPUSH
6905: LD_VAR 0 1
6909: PPUSH
6910: LD_INT 0
6912: PPUSH
6913: CALL_OW 49
// if vc_control = 1 then
6917: LD_OWVAR 38
6921: PUSH
6922: LD_INT 1
6924: EQUAL
6925: IFFALSE 6982
// begin hc_gallery =  ;
6927: LD_ADDR_OWVAR 33
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// hc_name =  ;
6935: LD_ADDR_OWVAR 26
6939: PUSH
6940: LD_STRING 
6942: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_INT 3
6948: PPUSH
6949: LD_VAR 0 4
6953: PPUSH
6954: CALL_OW 380
// un = CreateHuman ;
6958: LD_ADDR_VAR 0 16
6962: PUSH
6963: CALL_OW 44
6967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6968: LD_VAR 0 16
6972: PPUSH
6973: LD_VAR 0 17
6977: PPUSH
6978: CALL_OW 52
// end ; if IsMCAttack then
6982: LD_VAR 0 11
6986: IFFALSE 7006
// MC_attack_group = MC_attack_group ^ veh else
6988: LD_ADDR_EXP 35
6992: PUSH
6993: LD_EXP 35
6997: PUSH
6998: LD_VAR 0 17
7002: ADD
7003: ST_TO_ADDR
7004: GO 7046
// if AttacksAlly then
7006: LD_VAR 0 12
7010: IFFALSE 7030
// attack_group = attack_group ^ veh else
7012: LD_ADDR_EXP 11
7016: PUSH
7017: LD_EXP 11
7021: PUSH
7022: LD_VAR 0 17
7026: ADD
7027: ST_TO_ADDR
7028: GO 7046
// attack_group2 = attack_group2 ^ veh ;
7030: LD_ADDR_EXP 36
7034: PUSH
7035: LD_EXP 36
7039: PUSH
7040: LD_VAR 0 17
7044: ADD
7045: ST_TO_ADDR
// i = i + 1 ;
7046: LD_ADDR_VAR 0 14
7050: PUSH
7051: LD_VAR 0 14
7055: PUSH
7056: LD_INT 1
7058: PLUS
7059: ST_TO_ADDR
// end ; if nation = 2 then
7060: LD_VAR 0 5
7064: PUSH
7065: LD_INT 2
7067: EQUAL
7068: IFFALSE 7554
// begin uc_side = side ;
7070: LD_ADDR_OWVAR 20
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// uc_nation = nation ;
7080: LD_ADDR_OWVAR 21
7084: PUSH
7085: LD_VAR 0 5
7089: ST_TO_ADDR
// vc_engine = vehengine ;
7090: LD_ADDR_OWVAR 39
7094: PUSH
7095: LD_VAR 0 6
7099: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
7100: LD_ADDR_OWVAR 38
7104: PUSH
7105: LD_VAR 0 7
7109: PUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_VAR 0 7
7117: PPUSH
7118: CALL_OW 12
7122: ARRAY
7123: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
7124: LD_ADDR_OWVAR 40
7128: PUSH
7129: LD_VAR 0 9
7133: PUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_VAR 0 9
7141: PPUSH
7142: CALL_OW 12
7146: ARRAY
7147: ST_TO_ADDR
// for j = 1 to ARWeapons do
7148: LD_ADDR_VAR 0 15
7152: PUSH
7153: DOUBLE
7154: LD_INT 1
7156: DEC
7157: ST_TO_ADDR
7158: LD_VAR 0 9
7162: PUSH
7163: FOR_TO
7164: IFFALSE 7382
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
7166: LD_VAR 0 9
7170: PUSH
7171: LD_VAR 0 15
7175: ARRAY
7176: PUSH
7177: LD_INT 24
7179: EQUAL
7180: PUSH
7181: LD_VAR 0 9
7185: PUSH
7186: LD_VAR 0 15
7190: ARRAY
7191: PUSH
7192: LD_INT 22
7194: EQUAL
7195: OR
7196: PUSH
7197: LD_VAR 0 9
7201: PUSH
7202: LD_VAR 0 15
7206: ARRAY
7207: PUSH
7208: LD_INT 23
7210: EQUAL
7211: OR
7212: PUSH
7213: LD_VAR 0 9
7217: PUSH
7218: LD_VAR 0 15
7222: ARRAY
7223: PUSH
7224: LD_INT 30
7226: EQUAL
7227: OR
7228: IFFALSE 7265
// begin arChassisTab = [ 14 ] ;
7230: LD_ADDR_VAR 0 19
7234: PUSH
7235: LD_INT 14
7237: PUSH
7238: EMPTY
7239: LIST
7240: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7241: LD_ADDR_OWVAR 37
7245: PUSH
7246: LD_VAR 0 19
7250: PUSH
7251: LD_INT 1
7253: PPUSH
7254: LD_VAR 0 19
7258: PPUSH
7259: CALL_OW 12
7263: ARRAY
7264: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
7265: LD_VAR 0 9
7269: PUSH
7270: LD_VAR 0 15
7274: ARRAY
7275: PUSH
7276: LD_INT 29
7278: EQUAL
7279: PUSH
7280: LD_VAR 0 9
7284: PUSH
7285: LD_VAR 0 15
7289: ARRAY
7290: PUSH
7291: LD_INT 28
7293: EQUAL
7294: OR
7295: PUSH
7296: LD_VAR 0 9
7300: PUSH
7301: LD_VAR 0 15
7305: ARRAY
7306: PUSH
7307: LD_INT 27
7309: EQUAL
7310: OR
7311: PUSH
7312: LD_VAR 0 9
7316: PUSH
7317: LD_VAR 0 15
7321: ARRAY
7322: PUSH
7323: LD_INT 26
7325: EQUAL
7326: OR
7327: PUSH
7328: LD_VAR 0 9
7332: PUSH
7333: LD_VAR 0 15
7337: ARRAY
7338: PUSH
7339: LD_INT 25
7341: EQUAL
7342: OR
7343: IFFALSE 7380
// begin arChassisTab = [ 14 ] ;
7345: LD_ADDR_VAR 0 19
7349: PUSH
7350: LD_INT 14
7352: PUSH
7353: EMPTY
7354: LIST
7355: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7356: LD_ADDR_OWVAR 37
7360: PUSH
7361: LD_VAR 0 19
7365: PUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_VAR 0 19
7373: PPUSH
7374: CALL_OW 12
7378: ARRAY
7379: ST_TO_ADDR
// end ; end ;
7380: GO 7163
7382: POP
7383: POP
// veh = CreateVehicle ;
7384: LD_ADDR_VAR 0 17
7388: PUSH
7389: CALL_OW 45
7393: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7394: LD_VAR 0 17
7398: PPUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 49
// if vc_control = 1 then
7411: LD_OWVAR 38
7415: PUSH
7416: LD_INT 1
7418: EQUAL
7419: IFFALSE 7476
// begin hc_gallery =  ;
7421: LD_ADDR_OWVAR 33
7425: PUSH
7426: LD_STRING 
7428: ST_TO_ADDR
// hc_name =  ;
7429: LD_ADDR_OWVAR 26
7433: PUSH
7434: LD_STRING 
7436: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7437: LD_INT 0
7439: PPUSH
7440: LD_INT 3
7442: PPUSH
7443: LD_VAR 0 4
7447: PPUSH
7448: CALL_OW 380
// un = CreateHuman ;
7452: LD_ADDR_VAR 0 16
7456: PUSH
7457: CALL_OW 44
7461: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7462: LD_VAR 0 16
7466: PPUSH
7467: LD_VAR 0 17
7471: PPUSH
7472: CALL_OW 52
// end ; if IsMCAttack then
7476: LD_VAR 0 11
7480: IFFALSE 7500
// MC_attack_group = MC_attack_group ^ veh else
7482: LD_ADDR_EXP 35
7486: PUSH
7487: LD_EXP 35
7491: PUSH
7492: LD_VAR 0 17
7496: ADD
7497: ST_TO_ADDR
7498: GO 7540
// if AttacksAlly then
7500: LD_VAR 0 12
7504: IFFALSE 7524
// attack_group = attack_group ^ veh else
7506: LD_ADDR_EXP 11
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 17
7520: ADD
7521: ST_TO_ADDR
7522: GO 7540
// attack_group2 = attack_group2 ^ veh ;
7524: LD_ADDR_EXP 36
7528: PUSH
7529: LD_EXP 36
7533: PUSH
7534: LD_VAR 0 17
7538: ADD
7539: ST_TO_ADDR
// i = i + 1 ;
7540: LD_ADDR_VAR 0 14
7544: PUSH
7545: LD_VAR 0 14
7549: PUSH
7550: LD_INT 1
7552: PLUS
7553: ST_TO_ADDR
// end ; if nation = 3 then
7554: LD_VAR 0 5
7558: PUSH
7559: LD_INT 3
7561: EQUAL
7562: IFFALSE 8032
// begin uc_side = side ;
7564: LD_ADDR_OWVAR 20
7568: PUSH
7569: LD_VAR 0 2
7573: ST_TO_ADDR
// uc_nation = nation ;
7574: LD_ADDR_OWVAR 21
7578: PUSH
7579: LD_VAR 0 5
7583: ST_TO_ADDR
// vc_engine = vehengine ;
7584: LD_ADDR_OWVAR 39
7588: PUSH
7589: LD_VAR 0 6
7593: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
7594: LD_ADDR_OWVAR 38
7598: PUSH
7599: LD_VAR 0 7
7603: PUSH
7604: LD_INT 1
7606: PPUSH
7607: LD_VAR 0 7
7611: PPUSH
7612: CALL_OW 12
7616: ARRAY
7617: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
7618: LD_ADDR_OWVAR 40
7622: PUSH
7623: LD_VAR 0 8
7627: PUSH
7628: LD_INT 1
7630: PPUSH
7631: LD_VAR 0 8
7635: PPUSH
7636: CALL_OW 12
7640: ARRAY
7641: ST_TO_ADDR
// for j = 1 to RuWeapons do
7642: LD_ADDR_VAR 0 15
7646: PUSH
7647: DOUBLE
7648: LD_INT 1
7650: DEC
7651: ST_TO_ADDR
7652: LD_VAR 0 8
7656: PUSH
7657: FOR_TO
7658: IFFALSE 7860
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
7660: LD_VAR 0 8
7664: PUSH
7665: LD_VAR 0 15
7669: ARRAY
7670: PUSH
7671: LD_INT 42
7673: EQUAL
7674: PUSH
7675: LD_VAR 0 8
7679: PUSH
7680: LD_VAR 0 15
7684: ARRAY
7685: PUSH
7686: LD_INT 43
7688: EQUAL
7689: OR
7690: PUSH
7691: LD_VAR 0 8
7695: PUSH
7696: LD_VAR 0 15
7700: ARRAY
7701: PUSH
7702: LD_INT 44
7704: EQUAL
7705: OR
7706: PUSH
7707: LD_VAR 0 8
7711: PUSH
7712: LD_VAR 0 15
7716: ARRAY
7717: PUSH
7718: LD_INT 45
7720: EQUAL
7721: OR
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_VAR 0 15
7732: ARRAY
7733: PUSH
7734: LD_INT 49
7736: EQUAL
7737: OR
7738: IFFALSE 7787
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
7740: LD_ADDR_VAR 0 18
7744: PUSH
7745: LD_INT 21
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 23
7753: PUSH
7754: LD_INT 24
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7763: LD_ADDR_OWVAR 37
7767: PUSH
7768: LD_VAR 0 18
7772: PUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_VAR 0 18
7780: PPUSH
7781: CALL_OW 12
7785: ARRAY
7786: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
7787: LD_VAR 0 8
7791: PUSH
7792: LD_VAR 0 15
7796: ARRAY
7797: PUSH
7798: LD_INT 46
7800: EQUAL
7801: PUSH
7802: LD_VAR 0 8
7806: PUSH
7807: LD_VAR 0 15
7811: ARRAY
7812: PUSH
7813: LD_INT 47
7815: EQUAL
7816: OR
7817: IFFALSE 7858
// begin ruChassisTab = [ 23 , 24 ] ;
7819: LD_ADDR_VAR 0 18
7823: PUSH
7824: LD_INT 23
7826: PUSH
7827: LD_INT 24
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7834: LD_ADDR_OWVAR 37
7838: PUSH
7839: LD_VAR 0 18
7843: PUSH
7844: LD_INT 1
7846: PPUSH
7847: LD_VAR 0 18
7851: PPUSH
7852: CALL_OW 12
7856: ARRAY
7857: ST_TO_ADDR
// end ; end ;
7858: GO 7657
7860: POP
7861: POP
// veh = CreateVehicle ;
7862: LD_ADDR_VAR 0 17
7866: PUSH
7867: CALL_OW 45
7871: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7872: LD_VAR 0 17
7876: PPUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 0
7884: PPUSH
7885: CALL_OW 49
// if vc_control = 1 then
7889: LD_OWVAR 38
7893: PUSH
7894: LD_INT 1
7896: EQUAL
7897: IFFALSE 7954
// begin hc_gallery =  ;
7899: LD_ADDR_OWVAR 33
7903: PUSH
7904: LD_STRING 
7906: ST_TO_ADDR
// hc_name =  ;
7907: LD_ADDR_OWVAR 26
7911: PUSH
7912: LD_STRING 
7914: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 3
7920: PPUSH
7921: LD_VAR 0 4
7925: PPUSH
7926: CALL_OW 380
// un = CreateHuman ;
7930: LD_ADDR_VAR 0 16
7934: PUSH
7935: CALL_OW 44
7939: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7940: LD_VAR 0 16
7944: PPUSH
7945: LD_VAR 0 17
7949: PPUSH
7950: CALL_OW 52
// end ; if IsMCAttack then
7954: LD_VAR 0 11
7958: IFFALSE 7978
// MC_attack_group = MC_attack_group ^ veh else
7960: LD_ADDR_EXP 35
7964: PUSH
7965: LD_EXP 35
7969: PUSH
7970: LD_VAR 0 17
7974: ADD
7975: ST_TO_ADDR
7976: GO 8018
// if AttacksAlly then
7978: LD_VAR 0 12
7982: IFFALSE 8002
// attack_group = attack_group ^ veh else
7984: LD_ADDR_EXP 11
7988: PUSH
7989: LD_EXP 11
7993: PUSH
7994: LD_VAR 0 17
7998: ADD
7999: ST_TO_ADDR
8000: GO 8018
// attack_group2 = attack_group2 ^ veh ;
8002: LD_ADDR_EXP 36
8006: PUSH
8007: LD_EXP 36
8011: PUSH
8012: LD_VAR 0 17
8016: ADD
8017: ST_TO_ADDR
// i = i + 1 ;
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: LD_VAR 0 14
8027: PUSH
8028: LD_INT 1
8030: PLUS
8031: ST_TO_ADDR
// end ; until i = vehCount ;
8032: LD_VAR 0 14
8036: PUSH
8037: LD_VAR 0 3
8041: EQUAL
8042: IFFALSE 6476
// end ;
8044: LD_VAR 0 13
8048: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , IsMCAttack , AttacksAlly ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
8049: LD_INT 0
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
8055: PPUSH
8056: PPUSH
8057: PPUSH
// for i = 1 to medicCount do
8058: LD_ADDR_VAR 0 13
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_VAR 0 7
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8220
// begin uc_side = side ;
8076: LD_ADDR_OWVAR 20
8080: PUSH
8081: LD_VAR 0 1
8085: ST_TO_ADDR
// uc_nation = nation ;
8086: LD_ADDR_OWVAR 21
8090: PUSH
8091: LD_VAR 0 2
8095: ST_TO_ADDR
// hc_name =  ;
8096: LD_ADDR_OWVAR 26
8100: PUSH
8101: LD_STRING 
8103: ST_TO_ADDR
// hc_gallery =  ;
8104: LD_ADDR_OWVAR 33
8108: PUSH
8109: LD_STRING 
8111: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8112: LD_INT 0
8114: PPUSH
8115: LD_INT 4
8117: PPUSH
8118: LD_VAR 0 8
8122: PPUSH
8123: CALL_OW 380
// un = CreateHuman ;
8127: LD_ADDR_VAR 0 15
8131: PUSH
8132: CALL_OW 44
8136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8137: LD_VAR 0 15
8141: PPUSH
8142: LD_VAR 0 9
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 49
// if IsMCAttack then
8154: LD_VAR 0 10
8158: IFFALSE 8178
// MC_attack_group = MC_attack_group ^ un else
8160: LD_ADDR_EXP 35
8164: PUSH
8165: LD_EXP 35
8169: PUSH
8170: LD_VAR 0 15
8174: ADD
8175: ST_TO_ADDR
8176: GO 8218
// if AttacksAlly then
8178: LD_VAR 0 11
8182: IFFALSE 8202
// attack_group = attack_group ^ un else
8184: LD_ADDR_EXP 11
8188: PUSH
8189: LD_EXP 11
8193: PUSH
8194: LD_VAR 0 15
8198: ADD
8199: ST_TO_ADDR
8200: GO 8218
// attack_group2 = attack_group2 ^ un ;
8202: LD_ADDR_EXP 36
8206: PUSH
8207: LD_EXP 36
8211: PUSH
8212: LD_VAR 0 15
8216: ADD
8217: ST_TO_ADDR
// end ;
8218: GO 8073
8220: POP
8221: POP
// for i = 1 to soldierCount do
8222: LD_ADDR_VAR 0 13
8226: PUSH
8227: DOUBLE
8228: LD_INT 1
8230: DEC
8231: ST_TO_ADDR
8232: LD_VAR 0 3
8236: PUSH
8237: FOR_TO
8238: IFFALSE 8384
// begin uc_side = side ;
8240: LD_ADDR_OWVAR 20
8244: PUSH
8245: LD_VAR 0 1
8249: ST_TO_ADDR
// uc_nation = nation ;
8250: LD_ADDR_OWVAR 21
8254: PUSH
8255: LD_VAR 0 2
8259: ST_TO_ADDR
// hc_name =  ;
8260: LD_ADDR_OWVAR 26
8264: PUSH
8265: LD_STRING 
8267: ST_TO_ADDR
// hc_gallery =  ;
8268: LD_ADDR_OWVAR 33
8272: PUSH
8273: LD_STRING 
8275: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8276: LD_INT 0
8278: PPUSH
8279: LD_INT 1
8281: PPUSH
8282: LD_VAR 0 8
8286: PPUSH
8287: CALL_OW 380
// un = CreateHuman ;
8291: LD_ADDR_VAR 0 15
8295: PUSH
8296: CALL_OW 44
8300: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8301: LD_VAR 0 15
8305: PPUSH
8306: LD_VAR 0 9
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 49
// if IsMCAttack then
8318: LD_VAR 0 10
8322: IFFALSE 8342
// MC_attack_group = MC_attack_group ^ un else
8324: LD_ADDR_EXP 35
8328: PUSH
8329: LD_EXP 35
8333: PUSH
8334: LD_VAR 0 15
8338: ADD
8339: ST_TO_ADDR
8340: GO 8382
// if AttacksAlly then
8342: LD_VAR 0 11
8346: IFFALSE 8366
// attack_group = attack_group ^ un else
8348: LD_ADDR_EXP 11
8352: PUSH
8353: LD_EXP 11
8357: PUSH
8358: LD_VAR 0 15
8362: ADD
8363: ST_TO_ADDR
8364: GO 8382
// attack_group2 = attack_group2 ^ un ;
8366: LD_ADDR_EXP 36
8370: PUSH
8371: LD_EXP 36
8375: PUSH
8376: LD_VAR 0 15
8380: ADD
8381: ST_TO_ADDR
// end ;
8382: GO 8237
8384: POP
8385: POP
// for i = 1 to sniperCount do
8386: LD_ADDR_VAR 0 13
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 4
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8548
// begin uc_side = side ;
8404: LD_ADDR_OWVAR 20
8408: PUSH
8409: LD_VAR 0 1
8413: ST_TO_ADDR
// uc_nation = nation ;
8414: LD_ADDR_OWVAR 21
8418: PUSH
8419: LD_VAR 0 2
8423: ST_TO_ADDR
// hc_name =  ;
8424: LD_ADDR_OWVAR 26
8428: PUSH
8429: LD_STRING 
8431: ST_TO_ADDR
// hc_gallery =  ;
8432: LD_ADDR_OWVAR 33
8436: PUSH
8437: LD_STRING 
8439: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8440: LD_INT 0
8442: PPUSH
8443: LD_INT 5
8445: PPUSH
8446: LD_VAR 0 8
8450: PPUSH
8451: CALL_OW 380
// un = CreateHuman ;
8455: LD_ADDR_VAR 0 15
8459: PUSH
8460: CALL_OW 44
8464: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8465: LD_VAR 0 15
8469: PPUSH
8470: LD_VAR 0 9
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 49
// if IsMCAttack then
8482: LD_VAR 0 10
8486: IFFALSE 8506
// MC_attack_group = MC_attack_group ^ un else
8488: LD_ADDR_EXP 35
8492: PUSH
8493: LD_EXP 35
8497: PUSH
8498: LD_VAR 0 15
8502: ADD
8503: ST_TO_ADDR
8504: GO 8546
// if AttacksAlly then
8506: LD_VAR 0 11
8510: IFFALSE 8530
// attack_group = attack_group ^ un else
8512: LD_ADDR_EXP 11
8516: PUSH
8517: LD_EXP 11
8521: PUSH
8522: LD_VAR 0 15
8526: ADD
8527: ST_TO_ADDR
8528: GO 8546
// attack_group2 = attack_group2 ^ un ;
8530: LD_ADDR_EXP 36
8534: PUSH
8535: LD_EXP 36
8539: PUSH
8540: LD_VAR 0 15
8544: ADD
8545: ST_TO_ADDR
// end ;
8546: GO 8401
8548: POP
8549: POP
// for i = 1 to bazookCount do
8550: LD_ADDR_VAR 0 13
8554: PUSH
8555: DOUBLE
8556: LD_INT 1
8558: DEC
8559: ST_TO_ADDR
8560: LD_VAR 0 5
8564: PUSH
8565: FOR_TO
8566: IFFALSE 8712
// begin uc_side = side ;
8568: LD_ADDR_OWVAR 20
8572: PUSH
8573: LD_VAR 0 1
8577: ST_TO_ADDR
// uc_nation = nation ;
8578: LD_ADDR_OWVAR 21
8582: PUSH
8583: LD_VAR 0 2
8587: ST_TO_ADDR
// hc_name =  ;
8588: LD_ADDR_OWVAR 26
8592: PUSH
8593: LD_STRING 
8595: ST_TO_ADDR
// hc_gallery =  ;
8596: LD_ADDR_OWVAR 33
8600: PUSH
8601: LD_STRING 
8603: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8604: LD_INT 0
8606: PPUSH
8607: LD_INT 9
8609: PPUSH
8610: LD_VAR 0 8
8614: PPUSH
8615: CALL_OW 380
// un = CreateHuman ;
8619: LD_ADDR_VAR 0 15
8623: PUSH
8624: CALL_OW 44
8628: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8629: LD_VAR 0 15
8633: PPUSH
8634: LD_VAR 0 9
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 49
// if IsMCAttack then
8646: LD_VAR 0 10
8650: IFFALSE 8670
// MC_attack_group = MC_attack_group ^ un else
8652: LD_ADDR_EXP 35
8656: PUSH
8657: LD_EXP 35
8661: PUSH
8662: LD_VAR 0 15
8666: ADD
8667: ST_TO_ADDR
8668: GO 8710
// if AttacksAlly then
8670: LD_VAR 0 11
8674: IFFALSE 8694
// attack_group = attack_group ^ un else
8676: LD_ADDR_EXP 11
8680: PUSH
8681: LD_EXP 11
8685: PUSH
8686: LD_VAR 0 15
8690: ADD
8691: ST_TO_ADDR
8692: GO 8710
// attack_group2 = attack_group2 ^ un ;
8694: LD_ADDR_EXP 36
8698: PUSH
8699: LD_EXP 36
8703: PUSH
8704: LD_VAR 0 15
8708: ADD
8709: ST_TO_ADDR
// end ;
8710: GO 8565
8712: POP
8713: POP
// for i = 1 to mortalCount do
8714: LD_ADDR_VAR 0 13
8718: PUSH
8719: DOUBLE
8720: LD_INT 1
8722: DEC
8723: ST_TO_ADDR
8724: LD_VAR 0 6
8728: PUSH
8729: FOR_TO
8730: IFFALSE 8876
// begin uc_side = side ;
8732: LD_ADDR_OWVAR 20
8736: PUSH
8737: LD_VAR 0 1
8741: ST_TO_ADDR
// uc_nation = nation ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_VAR 0 2
8751: ST_TO_ADDR
// hc_name =  ;
8752: LD_ADDR_OWVAR 26
8756: PUSH
8757: LD_STRING 
8759: ST_TO_ADDR
// hc_gallery =  ;
8760: LD_ADDR_OWVAR 33
8764: PUSH
8765: LD_STRING 
8767: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8768: LD_INT 0
8770: PPUSH
8771: LD_INT 8
8773: PPUSH
8774: LD_VAR 0 8
8778: PPUSH
8779: CALL_OW 380
// un = CreateHuman ;
8783: LD_ADDR_VAR 0 15
8787: PUSH
8788: CALL_OW 44
8792: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8793: LD_VAR 0 15
8797: PPUSH
8798: LD_VAR 0 9
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 49
// if IsMCAttack then
8810: LD_VAR 0 10
8814: IFFALSE 8834
// MC_attack_group = MC_attack_group ^ un else
8816: LD_ADDR_EXP 35
8820: PUSH
8821: LD_EXP 35
8825: PUSH
8826: LD_VAR 0 15
8830: ADD
8831: ST_TO_ADDR
8832: GO 8874
// if AttacksAlly then
8834: LD_VAR 0 11
8838: IFFALSE 8858
// attack_group = attack_group ^ un else
8840: LD_ADDR_EXP 11
8844: PUSH
8845: LD_EXP 11
8849: PUSH
8850: LD_VAR 0 15
8854: ADD
8855: ST_TO_ADDR
8856: GO 8874
// attack_group2 = attack_group2 ^ un ;
8858: LD_ADDR_EXP 36
8862: PUSH
8863: LD_EXP 36
8867: PUSH
8868: LD_VAR 0 15
8872: ADD
8873: ST_TO_ADDR
// end ;
8874: GO 8729
8876: POP
8877: POP
// RUBazookers = RUBazookers ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 9 ] ] ) ;
8878: LD_ADDR_EXP 31
8882: PUSH
8883: LD_EXP 31
8887: PUSH
8888: LD_INT 9
8890: PPUSH
8891: LD_INT 22
8893: PUSH
8894: LD_VAR 0 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 25
8905: PUSH
8906: LD_INT 9
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 71
8921: ADD
8922: ST_TO_ADDR
// medic_list = medic_list ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8923: LD_ADDR_EXP 34
8927: PUSH
8928: LD_EXP 34
8932: PUSH
8933: LD_INT 9
8935: PPUSH
8936: LD_INT 22
8938: PUSH
8939: LD_VAR 0 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 25
8950: PUSH
8951: LD_INT 4
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 71
8966: ADD
8967: ST_TO_ADDR
// end ; end_of_file
8968: LD_VAR 0 12
8972: RET
// every 0 0$1 do
8973: GO 8975
8975: DISABLE
// begin enable ;
8976: ENABLE
// IntBazooka ( 3 , 1 , 7 ) ;
8977: LD_INT 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: LD_INT 7
8985: PPUSH
8986: CALL 12650 0 3
// end ;
8990: END
// every 0 0$1 do
8991: GO 8993
8993: DISABLE
// begin enable ;
8994: ENABLE
// RepairBuilding ( 3 , RuBase ) ;
8995: LD_INT 3
8997: PPUSH
8998: LD_INT 37
9000: PPUSH
9001: CALL 12293 0 2
// HealUnitInBase ( 3 , RussianHealArea1 , MainRUBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
9005: LD_INT 3
9007: PPUSH
9008: LD_INT 8
9010: PPUSH
9011: LD_INT 9
9013: PPUSH
9014: LD_INT 22
9016: PUSH
9017: LD_INT 3
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 21
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 30
9036: PUSH
9037: LD_INT 8
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 69
9053: PPUSH
9054: CALL 11745 0 4
// end ;
9058: END
// export function AIEngageEnemy ; var enemy , enemy2 , attacker ; begin
9059: LD_INT 0
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
// enemy = Filterallunits ( [ f_side , 1 ] ) ^ Filterallunits ( [ f_side , 7 ] ) ;
9065: LD_ADDR_VAR 0 2
9069: PUSH
9070: LD_INT 22
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 69
9084: PUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 7
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 69
9099: ADD
9100: ST_TO_ADDR
// enemy2 = Filterallunits ( [ f_side , 7 ] ) ;
9101: LD_ADDR_VAR 0 3
9105: PUSH
9106: LD_INT 22
9108: PUSH
9109: LD_INT 7
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 69
9120: ST_TO_ADDR
// for attacker in attack_group do
9121: LD_ADDR_VAR 0 4
9125: PUSH
9126: LD_EXP 11
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9160
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
9134: LD_VAR 0 4
9138: PPUSH
9139: LD_VAR 0 2
9143: PPUSH
9144: LD_VAR 0 4
9148: PPUSH
9149: CALL_OW 74
9153: PPUSH
9154: CALL_OW 115
9158: GO 9131
9160: POP
9161: POP
// for attacker in attack_group2 do
9162: LD_ADDR_VAR 0 4
9166: PUSH
9167: LD_EXP 36
9171: PUSH
9172: FOR_IN
9173: IFFALSE 9201
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy2 , attacker ) ) ;
9175: LD_VAR 0 4
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: LD_VAR 0 4
9189: PPUSH
9190: CALL_OW 74
9194: PPUSH
9195: CALL_OW 115
9199: GO 9172
9201: POP
9202: POP
// end ;
9203: LD_VAR 0 1
9207: RET
// every 0 0$1 do
9208: GO 9210
9210: DISABLE
// begin enable ;
9211: ENABLE
// AIEngageEnemy ;
9212: CALL 9059 0 0
// end ;
9216: END
// every 0 0$1 do var un ;
9217: GO 9219
9219: DISABLE
9220: LD_INT 0
9222: PPUSH
// begin enable ;
9223: ENABLE
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_engineer ] ] ) < 3 and RusEngReserve > 0 then
9224: LD_INT 22
9226: PUSH
9227: LD_INT 3
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 25
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PUSH
9253: LD_INT 3
9255: LESS
9256: PUSH
9257: LD_EXP 40
9261: PUSH
9262: LD_INT 0
9264: GREATER
9265: AND
9266: IFFALSE 9352
// begin uc_side = 3 ;
9268: LD_ADDR_OWVAR 20
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// uc_nation = 3 ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_INT 3
9283: ST_TO_ADDR
// hc_name =  ;
9284: LD_ADDR_OWVAR 26
9288: PUSH
9289: LD_STRING 
9291: ST_TO_ADDR
// hc_gallery =  ;
9292: LD_ADDR_OWVAR 33
9296: PUSH
9297: LD_STRING 
9299: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 5 ) ;
9300: LD_INT 1
9302: PPUSH
9303: LD_INT 2
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 380
// un = CreateHuman ;
9313: LD_ADDR_VAR 0 1
9317: PUSH
9318: CALL_OW 44
9322: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Personnel_Spawn , false ) ;
9323: LD_VAR 0 1
9327: PPUSH
9328: LD_INT 12
9330: PPUSH
9331: LD_INT 0
9333: PPUSH
9334: CALL_OW 49
// RusEngReserve = RusEngReserve - 1 ;
9338: LD_ADDR_EXP 40
9342: PUSH
9343: LD_EXP 40
9347: PUSH
9348: LD_INT 1
9350: MINUS
9351: ST_TO_ADDR
// end ; end ;
9352: PPOPN 1
9354: END
// every 6 6$0 trigger russianAssaultStopped = 1 and IsOk ( rusFabr ) and GetSide ( rusFabr ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
9355: LD_EXP 2
9359: PUSH
9360: LD_INT 1
9362: EQUAL
9363: PUSH
9364: LD_INT 42
9366: PPUSH
9367: CALL_OW 302
9371: AND
9372: PUSH
9373: LD_INT 42
9375: PPUSH
9376: CALL_OW 255
9380: PUSH
9381: LD_INT 3
9383: EQUAL
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 33
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: PUSH
9426: LD_INT 0
9428: EQUAL
9429: AND
9430: IFFALSE 9611
9432: GO 9434
9434: DISABLE
// begin enable ;
9435: ENABLE
// if Difficulty = 1 then
9436: LD_OWVAR 67
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9497
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 4 , 5 ) , 7 , [ 43 , 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9446: LD_INT 3
9448: PPUSH
9449: LD_INT 42
9451: PPUSH
9452: LD_INT 4
9454: PPUSH
9455: LD_INT 5
9457: PPUSH
9458: CALL_OW 12
9462: PPUSH
9463: LD_INT 7
9465: PPUSH
9466: LD_INT 43
9468: PUSH
9469: LD_INT 44
9471: PUSH
9472: LD_INT 45
9474: PUSH
9475: LD_INT 46
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PPUSH
9484: LD_INT 3
9486: PPUSH
9487: LD_INT 3
9489: PPUSH
9490: LD_INT 22
9492: PPUSH
9493: CALL 13027 0 8
// if Difficulty = 2 then
9497: LD_OWVAR 67
9501: PUSH
9502: LD_INT 2
9504: EQUAL
9505: IFFALSE 9554
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 5 , 6 ) , 7 , [ 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9507: LD_INT 3
9509: PPUSH
9510: LD_INT 42
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: LD_INT 6
9518: PPUSH
9519: CALL_OW 12
9523: PPUSH
9524: LD_INT 7
9526: PPUSH
9527: LD_INT 44
9529: PUSH
9530: LD_INT 45
9532: PUSH
9533: LD_INT 46
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: LD_INT 3
9543: PPUSH
9544: LD_INT 3
9546: PPUSH
9547: LD_INT 22
9549: PPUSH
9550: CALL 13027 0 8
// if Difficulty = 3 then
9554: LD_OWVAR 67
9558: PUSH
9559: LD_INT 3
9561: EQUAL
9562: IFFALSE 9611
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 7 , 8 ) , 7 , [ 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9564: LD_INT 3
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 8
9575: PPUSH
9576: CALL_OW 12
9580: PPUSH
9581: LD_INT 7
9583: PPUSH
9584: LD_INT 44
9586: PUSH
9587: LD_INT 45
9589: PUSH
9590: LD_INT 46
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: PPUSH
9598: LD_INT 3
9600: PPUSH
9601: LD_INT 3
9603: PPUSH
9604: LD_INT 22
9606: PPUSH
9607: CALL 13027 0 8
// end ;
9611: END
// every 5 5$0 + 1 1$30 trigger russianAssaultStopped = 1 and RusRearAttacks > 0 do
9612: LD_EXP 2
9616: PUSH
9617: LD_INT 1
9619: EQUAL
9620: PUSH
9621: LD_EXP 41
9625: PUSH
9626: LD_INT 0
9628: GREATER
9629: AND
9630: IFFALSE 9707
9632: GO 9634
9634: DISABLE
// begin enable ;
9635: ENABLE
// RespawnAttackInfantry ( 3 , 3 , Rand ( 3 , 5 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_SE , false , true ) ;
9636: LD_INT 3
9638: PPUSH
9639: LD_INT 3
9641: PPUSH
9642: LD_INT 3
9644: PPUSH
9645: LD_INT 5
9647: PPUSH
9648: CALL_OW 12
9652: PPUSH
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: LD_EXP 37
9669: PPUSH
9670: LD_EXP 38
9674: PPUSH
9675: CALL_OW 12
9679: PPUSH
9680: LD_INT 5
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL 8049 0 11
// RusRearAttacks = RusRearAttacks - 1 ;
9693: LD_ADDR_EXP 41
9697: PUSH
9698: LD_EXP 41
9702: PUSH
9703: LD_INT 1
9705: MINUS
9706: ST_TO_ADDR
// end ;
9707: END
// every 6 6$0 + 2 2$20 trigger russianAssaultStopped = 1 and RusMainAttacks > 0 do var flags , coords ;
9708: LD_EXP 2
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: PUSH
9717: LD_EXP 42
9721: PUSH
9722: LD_INT 0
9724: GREATER
9725: AND
9726: IFFALSE 10268
9728: GO 9730
9730: DISABLE
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
// begin enable ;
9735: ENABLE
// flags := [ 0 , 1 , 0 , 1 , 0 , RussianHealArea2 , RussianHealArea2 , 0 , 0 , 1 ] ;
9736: LD_ADDR_VAR 0 1
9740: PUSH
9741: LD_INT 0
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 0
9755: PUSH
9756: LD_INT 7
9758: PUSH
9759: LD_INT 7
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: LD_INT 0
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// coords := [ ] ;
9783: LD_ADDR_VAR 0 2
9787: PUSH
9788: EMPTY
9789: ST_TO_ADDR
// case Rand ( 1 , 2 ) of 1 :
9790: LD_INT 1
9792: PPUSH
9793: LD_INT 2
9795: PPUSH
9796: CALL_OW 12
9800: PUSH
9801: LD_INT 1
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 10034
9809: POP
// begin RespawnAttackInfantry ( 3 , 3 , Rand ( 2 , 3 ) , 0 , Rand ( 0 , 2 ) , 0 , Rand ( 0 , 2 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , true , true ) ;
9810: LD_INT 3
9812: PPUSH
9813: LD_INT 3
9815: PPUSH
9816: LD_INT 2
9818: PPUSH
9819: LD_INT 3
9821: PPUSH
9822: CALL_OW 12
9826: PPUSH
9827: LD_INT 0
9829: PPUSH
9830: LD_INT 0
9832: PPUSH
9833: LD_INT 2
9835: PPUSH
9836: CALL_OW 12
9840: PPUSH
9841: LD_INT 0
9843: PPUSH
9844: LD_INT 0
9846: PPUSH
9847: LD_INT 2
9849: PPUSH
9850: CALL_OW 12
9854: PPUSH
9855: LD_EXP 37
9859: PPUSH
9860: LD_EXP 38
9864: PPUSH
9865: CALL_OW 12
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 1
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL 8049 0 11
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , Rand ( 3 , 7 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RuWeaponArray , [ ] , [ ] , true , true ) ;
9883: LD_INT 3
9885: PPUSH
9886: LD_INT 3
9888: PPUSH
9889: LD_INT 3
9891: PPUSH
9892: LD_INT 7
9894: PPUSH
9895: CALL_OW 12
9899: PPUSH
9900: LD_EXP 37
9904: PPUSH
9905: LD_EXP 38
9909: PPUSH
9910: CALL_OW 12
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 3
9920: PPUSH
9921: LD_INT 1
9923: PUSH
9924: LD_INT 3
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PPUSH
9931: LD_EXP 39
9935: PPUSH
9936: EMPTY
9937: PPUSH
9938: EMPTY
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: LD_INT 1
9945: PPUSH
9946: CALL 6443 0 12
// RusMainAttacks = RusMainAttacks - 1 ;
9950: LD_ADDR_EXP 42
9954: PUSH
9955: LD_EXP 42
9959: PUSH
9960: LD_INT 1
9962: MINUS
9963: ST_TO_ADDR
// coords := [ [ 57 , 33 ] , [ 72 , 59 ] , [ 77 , 82 ] ] ;
9964: LD_ADDR_VAR 0 2
9968: PUSH
9969: LD_INT 57
9971: PUSH
9972: LD_INT 33
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 72
9981: PUSH
9982: LD_INT 59
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 77
9991: PUSH
9992: LD_INT 82
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: ST_TO_ADDR
// Attack ( [ 0 , MC_attack_group , coords , flags ] ) ;
10004: LD_INT 0
10006: PUSH
10007: LD_EXP 35
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: LD_VAR 0 1
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL 50700 0 1
// end ; 2 :
10032: GO 10268
10034: LD_INT 2
10036: DOUBLE
10037: EQUAL
10038: IFTRUE 10042
10040: GO 10267
10042: POP
// begin RespawnAttackInfantry ( 3 , 3 , Rand ( 2 , 3 ) , 0 , Rand ( 0 , 2 ) , 0 , Rand ( 0 , 2 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N2 , true , true ) ;
10043: LD_INT 3
10045: PPUSH
10046: LD_INT 3
10048: PPUSH
10049: LD_INT 2
10051: PPUSH
10052: LD_INT 3
10054: PPUSH
10055: CALL_OW 12
10059: PPUSH
10060: LD_INT 0
10062: PPUSH
10063: LD_INT 0
10065: PPUSH
10066: LD_INT 2
10068: PPUSH
10069: CALL_OW 12
10073: PPUSH
10074: LD_INT 0
10076: PPUSH
10077: LD_INT 0
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: CALL_OW 12
10087: PPUSH
10088: LD_EXP 37
10092: PPUSH
10093: LD_EXP 38
10097: PPUSH
10098: CALL_OW 12
10102: PPUSH
10103: LD_INT 6
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL 8049 0 11
// RespawnAttackVehicle ( RU_SpawnZone_N2 , 3 , Rand ( 3 , 7 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RuWeaponArray , [ ] , [ ] , true , true ) ;
10116: LD_INT 6
10118: PPUSH
10119: LD_INT 3
10121: PPUSH
10122: LD_INT 3
10124: PPUSH
10125: LD_INT 7
10127: PPUSH
10128: CALL_OW 12
10132: PPUSH
10133: LD_EXP 37
10137: PPUSH
10138: LD_EXP 38
10142: PPUSH
10143: CALL_OW 12
10147: PPUSH
10148: LD_INT 3
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_INT 1
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PPUSH
10164: LD_EXP 39
10168: PPUSH
10169: EMPTY
10170: PPUSH
10171: EMPTY
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL 6443 0 12
// RusMainAttacks = RusMainAttacks - 1 ;
10183: LD_ADDR_EXP 42
10187: PUSH
10188: LD_EXP 42
10192: PUSH
10193: LD_INT 1
10195: MINUS
10196: ST_TO_ADDR
// coords := [ [ 124 , 69 ] , [ 126 , 80 ] , [ 131 , 106 ] ] ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_INT 124
10204: PUSH
10205: LD_INT 69
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 126
10214: PUSH
10215: LD_INT 80
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 131
10224: PUSH
10225: LD_INT 106
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: ST_TO_ADDR
// Attack ( [ 0 , MC_attack_group , coords , flags ] ) ;
10237: LD_INT 0
10239: PUSH
10240: LD_EXP 35
10244: PUSH
10245: LD_VAR 0 2
10249: PUSH
10250: LD_VAR 0 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL 50700 0 1
// end ; end ;
10265: GO 10268
10267: POP
// end ;
10268: PPOPN 2
10270: END
// export function CustomInitMacro ( ) ; begin
10271: LD_INT 0
10273: PPUSH
// MC_SetScanArea ( 1 , RU2_Base_Area ) ;
10274: LD_INT 1
10276: PPUSH
10277: LD_INT 13
10279: PPUSH
10280: CALL 74984 0 2
// MC_SetParkingArea ( 1 , RU2_Base_Parking ) ;
10284: LD_INT 1
10286: PPUSH
10287: LD_INT 14
10289: PPUSH
10290: CALL 74928 0 2
// MC_SetDepositsXY ( 1 , [ [ 22 , 7 , 0 ] , [ 7 , 6 , 1 ] , ] ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 22
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: LD_INT 0
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 7
10313: PUSH
10314: LD_INT 6
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL 74048 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
10333: LD_INT 1
10335: PPUSH
10336: LD_INT 43
10338: PUSH
10339: LD_INT 46
10341: PUSH
10342: LD_INT 45
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL 74816 0 2
// MC_SetCratesArea ( 1 , RU2_Base_Crates ) ;
10354: LD_INT 1
10356: PPUSH
10357: LD_INT 15
10359: PPUSH
10360: CALL 74496 0 2
// MC_SetTame ( 1 , RU2_Base_ApeTame ) ;
10364: LD_INT 1
10366: PPUSH
10367: LD_INT 16
10369: PPUSH
10370: CALL 74227 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
10374: LD_INT 1
10376: PPUSH
10377: LD_INT 5
10379: PPUSH
10380: CALL 73909 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
10384: LD_INT 1
10386: PPUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: LD_INT 43
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: LD_INT 3
10413: PUSH
10414: LD_INT 44
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 24
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 45
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: LD_INT 43
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 24
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: LD_INT 46
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL 73663 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 36 , 29 , 2 ] , [ b_armoury , 51 , 45 , 5 ] , [ b_armoury , 33 , 45 , 0 ] , [ b_lab , 38 , 16 , 1 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 22 , 7 , 1 ] , [ b_siberite_mine , 7 , 6 , 1 ] , [ b_siberite_power , 15 , 24 , 1 ] , [ b_siberite_power , 20 , 26 , 2 ] , [ b_siberite_power , 26 , 27 , 5 ] , [ b_bunker , 27 , 42 , 0 ] , [ b_bunker , 42 , 47 , 5 ] , [ b_bunker , 49 , 48 , 5 ] , [ b_bunker , 53 , 43 , 5 ] , [ b_bunker , 54 , 39 , 4 ] , [ b_bunker , 55 , 36 , 5 ] , [ b_bunker , 53 , 31 , 4 ] , ] ) ;
10488: LD_INT 1
10490: PPUSH
10491: LD_INT 0
10493: PUSH
10494: LD_INT 36
10496: PUSH
10497: LD_INT 29
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 4
10511: PUSH
10512: LD_INT 51
10514: PUSH
10515: LD_INT 45
10517: PUSH
10518: LD_INT 5
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 33
10532: PUSH
10533: LD_INT 45
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 6
10547: PUSH
10548: LD_INT 38
10550: PUSH
10551: LD_INT 16
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 6
10565: PUSH
10566: LD_INT 46
10568: PUSH
10569: LD_INT 27
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 24
10586: PUSH
10587: LD_INT 34
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 29
10601: PUSH
10602: LD_INT 22
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 30
10619: PUSH
10620: LD_INT 7
10622: PUSH
10623: LD_INT 6
10625: PUSH
10626: LD_INT 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: LD_INT 15
10640: PUSH
10641: LD_INT 24
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 28
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 26
10661: PUSH
10662: LD_INT 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 28
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 27
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 32
10691: PUSH
10692: LD_INT 27
10694: PUSH
10695: LD_INT 42
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 32
10709: PUSH
10710: LD_INT 42
10712: PUSH
10713: LD_INT 47
10715: PUSH
10716: LD_INT 5
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 32
10727: PUSH
10728: LD_INT 49
10730: PUSH
10731: LD_INT 48
10733: PUSH
10734: LD_INT 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 32
10745: PUSH
10746: LD_INT 53
10748: PUSH
10749: LD_INT 43
10751: PUSH
10752: LD_INT 5
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 32
10763: PUSH
10764: LD_INT 54
10766: PUSH
10767: LD_INT 39
10769: PUSH
10770: LD_INT 4
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: LD_INT 55
10784: PUSH
10785: LD_INT 36
10787: PUSH
10788: LD_INT 5
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 32
10799: PUSH
10800: LD_INT 53
10802: PUSH
10803: LD_INT 31
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL 73536 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
10839: LD_INT 1
10841: PPUSH
10842: LD_INT 10
10844: PUSH
10845: LD_INT 12
10847: PUSH
10848: LD_INT 14
10850: PUSH
10851: LD_INT 11
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PPUSH
10860: CALL 74403 0 2
// MC_SetFactoryExtension ( 1 , 24 , 34 , 1 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
10864: LD_INT 1
10866: PPUSH
10867: LD_INT 24
10869: PPUSH
10870: LD_INT 34
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: LD_INT 24
10878: PUSH
10879: LD_INT 16
10881: PUSH
10882: LD_INT 17
10884: PUSH
10885: LD_INT 18
10887: PUSH
10888: LD_INT 21
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PPUSH
10898: CALL 74610 0 5
// end ; end_of_file
10902: LD_VAR 0 1
10906: RET
// export RuSolMinLevel , RuSolMaxLevel , RuWeaponArray ; export RusEngReserve , RusRearAttacks , RusMainAttacks ; export function PrepareDifficulty ; begin
10907: LD_INT 0
10909: PPUSH
// if difficulty = 1 then
10910: LD_OWVAR 67
10914: PUSH
10915: LD_INT 1
10917: EQUAL
10918: IFFALSE 11005
// begin RuSolMinLevel = 3 ;
10920: LD_ADDR_EXP 37
10924: PUSH
10925: LD_INT 3
10927: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
10928: LD_ADDR_EXP 38
10932: PUSH
10933: LD_INT 4
10935: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
10936: LD_INT 51
10938: PPUSH
10939: LD_INT 3
10941: PPUSH
10942: LD_INT 2
10944: PPUSH
10945: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
10949: LD_INT 57
10951: PPUSH
10952: LD_INT 3
10954: PPUSH
10955: LD_INT 2
10957: PPUSH
10958: CALL_OW 322
// RusEngReserve = 3 ;
10962: LD_ADDR_EXP 40
10966: PUSH
10967: LD_INT 3
10969: ST_TO_ADDR
// RusRearAttacks = 2 ;
10970: LD_ADDR_EXP 41
10974: PUSH
10975: LD_INT 2
10977: ST_TO_ADDR
// RusMainAttacks = 3 ;
10978: LD_ADDR_EXP 42
10982: PUSH
10983: LD_INT 3
10985: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 42 ] ;
10986: LD_ADDR_EXP 39
10990: PUSH
10991: LD_INT 43
10993: PUSH
10994: LD_INT 44
10996: PUSH
10997: LD_INT 42
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: ST_TO_ADDR
// end ; if difficulty = 2 then
11005: LD_OWVAR 67
11009: PUSH
11010: LD_INT 2
11012: EQUAL
11013: IFFALSE 11147
// begin RuSolMinLevel = 4 ;
11015: LD_ADDR_EXP 37
11019: PUSH
11020: LD_INT 4
11022: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11023: LD_ADDR_EXP 38
11027: PUSH
11028: LD_INT 5
11030: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
11031: LD_INT 51
11033: PPUSH
11034: LD_INT 3
11036: PPUSH
11037: LD_INT 2
11039: PPUSH
11040: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
11044: LD_INT 52
11046: PPUSH
11047: LD_INT 3
11049: PPUSH
11050: LD_INT 2
11052: PPUSH
11053: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
11057: LD_INT 57
11059: PPUSH
11060: LD_INT 3
11062: PPUSH
11063: LD_INT 2
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
11070: LD_INT 58
11072: PPUSH
11073: LD_INT 3
11075: PPUSH
11076: LD_INT 2
11078: PPUSH
11079: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
11083: LD_INT 63
11085: PPUSH
11086: LD_INT 3
11088: PPUSH
11089: LD_INT 2
11091: PPUSH
11092: CALL_OW 322
// RusEngReserve = 6 ;
11096: LD_ADDR_EXP 40
11100: PUSH
11101: LD_INT 6
11103: ST_TO_ADDR
// RusRearAttacks = 3 ;
11104: LD_ADDR_EXP 41
11108: PUSH
11109: LD_INT 3
11111: ST_TO_ADDR
// RusMainAttacks = 5 ;
11112: LD_ADDR_EXP 42
11116: PUSH
11117: LD_INT 5
11119: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 42 , 45 , 46 ] ;
11120: LD_ADDR_EXP 39
11124: PUSH
11125: LD_INT 43
11127: PUSH
11128: LD_INT 44
11130: PUSH
11131: LD_INT 42
11133: PUSH
11134: LD_INT 45
11136: PUSH
11137: LD_INT 46
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: ST_TO_ADDR
// end ; if difficulty = 3 then
11147: LD_OWVAR 67
11151: PUSH
11152: LD_INT 3
11154: EQUAL
11155: IFFALSE 11298
// begin RuSolMinLevel = 5 ;
11157: LD_ADDR_EXP 37
11161: PUSH
11162: LD_INT 5
11164: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
11165: LD_ADDR_EXP 38
11169: PUSH
11170: LD_INT 6
11172: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
11173: LD_INT 51
11175: PPUSH
11176: LD_INT 3
11178: PPUSH
11179: LD_INT 2
11181: PPUSH
11182: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
11186: LD_INT 57
11188: PPUSH
11189: LD_INT 3
11191: PPUSH
11192: LD_INT 2
11194: PPUSH
11195: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
11199: LD_INT 52
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: LD_INT 2
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
11212: LD_INT 58
11214: PPUSH
11215: LD_INT 3
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
11225: LD_INT 63
11227: PPUSH
11228: LD_INT 3
11230: PPUSH
11231: LD_INT 2
11233: PPUSH
11234: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
11238: LD_INT 64
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: LD_INT 2
11246: PPUSH
11247: CALL_OW 322
// RusEngReserve = 9 ;
11251: LD_ADDR_EXP 40
11255: PUSH
11256: LD_INT 9
11258: ST_TO_ADDR
// RusRearAttacks = 5 ;
11259: LD_ADDR_EXP 41
11263: PUSH
11264: LD_INT 5
11266: ST_TO_ADDR
// RusMainAttacks = 7 ;
11267: LD_ADDR_EXP 42
11271: PUSH
11272: LD_INT 7
11274: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 45 , 46 ] ;
11275: LD_ADDR_EXP 39
11279: PUSH
11280: LD_INT 43
11282: PUSH
11283: LD_INT 44
11285: PUSH
11286: LD_INT 45
11288: PUSH
11289: LD_INT 46
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// end ; end ; end_of_file
11298: LD_VAR 0 1
11302: RET
// export function PrepareLaserTanks ; var i , xy ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// xy := [ [ 116 , 135 , 0 ] , [ 121 , 135 , 0 ] , [ 49 , 93 , 1 ] , [ 126 , 135 , 0 ] , [ 54 , 98 , 1 ] , [ 59 , 104 , 1 ] ] ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 116
11315: PUSH
11316: LD_INT 135
11318: PUSH
11319: LD_INT 0
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 121
11329: PUSH
11330: LD_INT 135
11332: PUSH
11333: LD_INT 0
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 49
11343: PUSH
11344: LD_INT 93
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 126
11357: PUSH
11358: LD_INT 135
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 54
11371: PUSH
11372: LD_INT 98
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 59
11385: PUSH
11386: LD_INT 104
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
// uc_nation := 1 ;
11405: LD_ADDR_OWVAR 21
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// for i = 1 to 6 do
11413: LD_ADDR_VAR 0 2
11417: PUSH
11418: DOUBLE
11419: LD_INT 1
11421: DEC
11422: ST_TO_ADDR
11423: LD_INT 6
11425: PUSH
11426: FOR_TO
11427: IFFALSE 11610
// begin if i < 4 then
11429: LD_VAR 0 2
11433: PUSH
11434: LD_INT 4
11436: LESS
11437: IFFALSE 11449
// uc_side := 7 else
11439: LD_ADDR_OWVAR 20
11443: PUSH
11444: LD_INT 7
11446: ST_TO_ADDR
11447: GO 11457
// uc_side := 1 ;
11449: LD_ADDR_OWVAR 20
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_double_laser , 100 ) ;
11457: LD_INT 5
11459: PPUSH
11460: LD_INT 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: LD_INT 10
11468: PPUSH
11469: LD_INT 100
11471: PPUSH
11472: CALL 22307 0 5
// case i of 1 :
11476: LD_VAR 0 2
11480: PUSH
11481: LD_INT 1
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11502
11489: POP
// ts := CreateVehicle ; 2 :
11490: LD_ADDR_EXP 12
11494: PUSH
11495: CALL_OW 45
11499: ST_TO_ADDR
11500: GO 11608
11502: LD_INT 2
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11523
11510: POP
// tk := CreateVehicle ; 3 :
11511: LD_ADDR_EXP 13
11515: PUSH
11516: CALL_OW 45
11520: ST_TO_ADDR
11521: GO 11608
11523: LD_INT 3
11525: DOUBLE
11526: EQUAL
11527: IFTRUE 11531
11529: GO 11544
11531: POP
// t1 := CreateVehicle ; 4 :
11532: LD_ADDR_EXP 15
11536: PUSH
11537: CALL_OW 45
11541: ST_TO_ADDR
11542: GO 11608
11544: LD_INT 4
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11565
11552: POP
// tlz := CreateVehicle ; 5 :
11553: LD_ADDR_EXP 14
11557: PUSH
11558: CALL_OW 45
11562: ST_TO_ADDR
11563: GO 11608
11565: LD_INT 5
11567: DOUBLE
11568: EQUAL
11569: IFTRUE 11573
11571: GO 11586
11573: POP
// t2 := CreateVehicle ; 6 :
11574: LD_ADDR_EXP 16
11578: PUSH
11579: CALL_OW 45
11583: ST_TO_ADDR
11584: GO 11608
11586: LD_INT 6
11588: DOUBLE
11589: EQUAL
11590: IFTRUE 11594
11592: GO 11607
11594: POP
// t3 := CreateVehicle ; end ;
11595: LD_ADDR_EXP 17
11599: PUSH
11600: CALL_OW 45
11604: ST_TO_ADDR
11605: GO 11608
11607: POP
// end ;
11608: GO 11426
11610: POP
11611: POP
// for i in [ ts , tk , tlz , t1 , t2 , t3 ] do
11612: LD_ADDR_VAR 0 2
11616: PUSH
11617: LD_EXP 12
11621: PUSH
11622: LD_EXP 13
11626: PUSH
11627: LD_EXP 14
11631: PUSH
11632: LD_EXP 15
11636: PUSH
11637: LD_EXP 16
11641: PUSH
11642: LD_EXP 17
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: FOR_IN
11656: IFFALSE 11738
// begin PlaceUnitXY ( i , xy [ 1 ] [ 1 ] , xy [ 1 ] [ 2 ] , false ) ;
11658: LD_VAR 0 2
11662: PPUSH
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: ARRAY
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PUSH
11685: LD_INT 2
11687: ARRAY
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: CALL_OW 48
// SetDir ( i , xy [ 1 ] [ 3 ] ) ;
11696: LD_VAR 0 2
11700: PPUSH
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: PUSH
11710: LD_INT 3
11712: ARRAY
11713: PPUSH
11714: CALL_OW 233
// xy := Delete ( xy , 1 ) ;
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 3
11735: ST_TO_ADDR
// end ;
11736: GO 11655
11738: POP
11739: POP
// end ;
11740: LD_VAR 0 1
11744: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
11756: LD_ADDR_VAR 0 6
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_VAR 0 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 25
11775: PUSH
11776: LD_INT 4
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 24
11785: PUSH
11786: LD_INT 251
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11803: LD_ADDR_VAR 0 7
11807: PUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 25
11827: PUSH
11828: LD_INT 4
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 50
11837: PUSH
11838: EMPTY
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 70
11850: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11851: LD_ADDR_VAR 0 10
11855: PUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 22
11863: PUSH
11864: LD_VAR 0 1
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 3
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: LD_INT 24
11905: PUSH
11906: LD_INT 750
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 70
11927: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11928: LD_ADDR_VAR 0 11
11932: PUSH
11933: LD_VAR 0 2
11937: PPUSH
11938: LD_INT 22
11940: PUSH
11941: LD_VAR 0 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 21
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: LD_INT 24
11982: PUSH
11983: LD_INT 1000
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 70
12004: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12005: LD_VAR 0 10
12009: NOT
12010: PUSH
12011: LD_VAR 0 7
12015: NOT
12016: AND
12017: PUSH
12018: LD_VAR 0 11
12022: NOT
12023: AND
12024: IFFALSE 12028
// exit ;
12026: GO 12288
// if damageUnits > 0 and sci_list > 0 then
12028: LD_VAR 0 10
12032: PUSH
12033: LD_INT 0
12035: GREATER
12036: PUSH
12037: LD_VAR 0 6
12041: PUSH
12042: LD_INT 0
12044: GREATER
12045: AND
12046: IFFALSE 12079
// for i in damageUnits do
12048: LD_ADDR_VAR 0 8
12052: PUSH
12053: LD_VAR 0 10
12057: PUSH
12058: FOR_IN
12059: IFFALSE 12077
// ComMoveToArea ( i , healArea ) ;
12061: LD_VAR 0 8
12065: PPUSH
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 113
12075: GO 12058
12077: POP
12078: POP
// if unitsToHeal > 0 and sci_list > 0 then
12079: LD_VAR 0 11
12083: PUSH
12084: LD_INT 0
12086: GREATER
12087: PUSH
12088: LD_VAR 0 6
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: AND
12097: IFFALSE 12156
// begin for i in sci_list do
12099: LD_ADDR_VAR 0 8
12103: PUSH
12104: LD_VAR 0 6
12108: PUSH
12109: FOR_IN
12110: IFFALSE 12154
// begin ComExitBuilding ( i ) ;
12112: LD_VAR 0 8
12116: PPUSH
12117: CALL_OW 122
// for j in unitsToHeal do
12121: LD_ADDR_VAR 0 9
12125: PUSH
12126: LD_VAR 0 11
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12150
// AddComHeal ( i , j ) ;
12134: LD_VAR 0 8
12138: PPUSH
12139: LD_VAR 0 9
12143: PPUSH
12144: CALL_OW 188
12148: GO 12131
12150: POP
12151: POP
// end ;
12152: GO 12109
12154: POP
12155: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12156: LD_VAR 0 10
12160: PUSH
12161: LD_INT 0
12163: EQUAL
12164: PUSH
12165: LD_VAR 0 11
12169: PUSH
12170: LD_INT 0
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 7
12179: PUSH
12180: LD_INT 0
12182: GREATER
12183: AND
12184: IFFALSE 12288
// for i in sci_listOutside do
12186: LD_ADDR_VAR 0 8
12190: PUSH
12191: LD_VAR 0 7
12195: PUSH
12196: FOR_IN
12197: IFFALSE 12286
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12199: LD_ADDR_VAR 0 12
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 21
12218: PUSH
12219: LD_INT 3
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 8
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12246: LD_ADDR_VAR 0 13
12250: PUSH
12251: LD_INT 1
12253: PPUSH
12254: LD_VAR 0 12
12258: PPUSH
12259: CALL_OW 12
12263: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
12264: LD_VAR 0 8
12268: PPUSH
12269: LD_VAR 0 12
12273: PUSH
12274: LD_VAR 0 13
12278: ARRAY
12279: PPUSH
12280: CALL_OW 120
// end ;
12284: GO 12196
12286: POP
12287: POP
// end ;
12288: LD_VAR 0 5
12292: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12301: LD_ADDR_VAR 0 6
12305: PUSH
12306: LD_VAR 0 2
12310: PPUSH
12311: CALL_OW 313
12315: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 7
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 24
12345: PUSH
12346: LD_INT 1000
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 3
12355: PUSH
12356: LD_INT 54
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) diff baracksdestr ;
12377: LD_ADDR_VAR 0 4
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 3
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 3
12406: PUSH
12407: LD_INT 24
12409: PUSH
12410: LD_INT 1000
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_INT 2
12436: DIFF
12437: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12438: LD_VAR 0 4
12442: NOT
12443: PUSH
12444: LD_VAR 0 7
12448: NOT
12449: AND
12450: IFFALSE 12454
// exit ;
12452: GO 12645
// if buildings_list > 0 and engineerOkInside then
12454: LD_VAR 0 4
12458: PUSH
12459: LD_INT 0
12461: GREATER
12462: PUSH
12463: LD_VAR 0 6
12467: AND
12468: IFFALSE 12522
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_VAR 0 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 25
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: PUSH
12506: FOR_IN
12507: IFFALSE 12520
// ComExitBuilding ( i ) ;
12509: LD_VAR 0 5
12513: PPUSH
12514: CALL_OW 122
12518: GO 12506
12520: POP
12521: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
12522: LD_VAR 0 4
12526: PUSH
12527: LD_INT 0
12529: GREATER
12530: PUSH
12531: LD_VAR 0 7
12535: PUSH
12536: LD_INT 0
12538: GREATER
12539: AND
12540: IFFALSE 12594
// begin for i in engineerOkOutside do
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_VAR 0 7
12551: PUSH
12552: FOR_IN
12553: IFFALSE 12592
// for j in buildings_list do
12555: LD_ADDR_VAR 0 8
12559: PUSH
12560: LD_VAR 0 4
12564: PUSH
12565: FOR_IN
12566: IFFALSE 12588
// ComRepairBuilding ( i , j [ 1 ] ) ;
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_VAR 0 8
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: PPUSH
12582: CALL_OW 130
12586: GO 12565
12588: POP
12589: POP
12590: GO 12552
12592: POP
12593: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12594: LD_VAR 0 4
12598: PUSH
12599: LD_INT 0
12601: EQUAL
12602: PUSH
12603: LD_VAR 0 7
12607: PUSH
12608: LD_INT 0
12610: GREATER
12611: AND
12612: IFFALSE 12645
// for i in engineerOkOutside do
12614: LD_ADDR_VAR 0 5
12618: PUSH
12619: LD_VAR 0 7
12623: PUSH
12624: FOR_IN
12625: IFFALSE 12643
// ComEnterUnit ( i , building ) ;
12627: LD_VAR 0 5
12631: PPUSH
12632: LD_VAR 0 2
12636: PPUSH
12637: CALL_OW 120
12641: GO 12624
12643: POP
12644: POP
// end ;
12645: LD_VAR 0 3
12649: RET
// export function IntBazooka ( side , targetSide , targetSide2 ) ; var ta , c , i , list , filter ; begin
12650: LD_INT 0
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12658: LD_ADDR_VAR 0 8
12662: PUSH
12663: LD_INT 22
12665: PUSH
12666: LD_VAR 0 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 9
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12694: LD_ADDR_VAR 0 9
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_VAR 0 2
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 21
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// filter := filter ^ FilterAllUnits ( [ [ f_side , targetSide2 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12737: LD_ADDR_VAR 0 9
12741: PUSH
12742: LD_VAR 0 9
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_VAR 0 3
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 69
12784: ADD
12785: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12786: LD_ADDR_VAR 0 6
12790: PUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_INT 3
12796: PPUSH
12797: CALL_OW 12
12801: ST_TO_ADDR
// for i = 1 to list do
12802: LD_ADDR_VAR 0 7
12806: PUSH
12807: DOUBLE
12808: LD_INT 1
12810: DEC
12811: ST_TO_ADDR
12812: LD_VAR 0 8
12816: PUSH
12817: FOR_TO
12818: IFFALSE 13020
// for ta in filter do
12820: LD_ADDR_VAR 0 5
12824: PUSH
12825: LD_VAR 0 9
12829: PUSH
12830: FOR_IN
12831: IFFALSE 13016
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12833: LD_VAR 0 8
12837: PUSH
12838: LD_VAR 0 7
12842: ARRAY
12843: PPUSH
12844: LD_VAR 0 5
12848: PPUSH
12849: CALL_OW 296
12853: PUSH
12854: LD_INT 15
12856: LESSEQUAL
12857: IFFALSE 13014
// begin case c of 1 :
12859: LD_VAR 0 6
12863: PUSH
12864: LD_INT 1
12866: DOUBLE
12867: EQUAL
12868: IFTRUE 12872
12870: GO 12910
12872: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12873: LD_VAR 0 8
12877: PUSH
12878: LD_VAR 0 7
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 5
12888: PPUSH
12889: CALL_OW 250
12893: PPUSH
12894: LD_VAR 0 5
12898: PPUSH
12899: CALL_OW 251
12903: PPUSH
12904: CALL_OW 154
12908: GO 13014
12910: LD_INT 2
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 12982
12918: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12919: LD_VAR 0 8
12923: PUSH
12924: LD_VAR 0 7
12928: ARRAY
12929: PPUSH
12930: LD_VAR 0 5
12934: PPUSH
12935: CALL_OW 250
12939: PUSH
12940: LD_INT 1
12942: NEG
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 12
12951: PLUS
12952: PPUSH
12953: LD_VAR 0 5
12957: PPUSH
12958: CALL_OW 251
12962: PUSH
12963: LD_INT 1
12965: NEG
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 12
12974: PLUS
12975: PPUSH
12976: CALL_OW 153
12980: GO 13014
12982: LD_INT 3
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 13013
12990: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12991: LD_VAR 0 8
12995: PUSH
12996: LD_VAR 0 7
13000: ARRAY
13001: PPUSH
13002: LD_VAR 0 5
13006: PPUSH
13007: CALL_OW 115
13011: GO 13014
13013: POP
// end ; end ;
13014: GO 12830
13016: POP
13017: POP
13018: GO 12817
13020: POP
13021: POP
// end ;
13022: LD_VAR 0 4
13026: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13038: LD_INT 22
13040: PUSH
13041: LD_VAR 0 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PPUSH
13064: CALL_OW 69
13068: PUSH
13069: LD_VAR 0 3
13073: LESSEQUAL
13074: IFFALSE 13186
// for i = 1 to vehCount do
13076: LD_ADDR_VAR 0 10
13080: PUSH
13081: DOUBLE
13082: LD_INT 1
13084: DEC
13085: ST_TO_ADDR
13086: LD_VAR 0 3
13090: PUSH
13091: FOR_TO
13092: IFFALSE 13184
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
13094: LD_ADDR_VAR 0 12
13098: PUSH
13099: LD_VAR 0 5
13103: PUSH
13104: LD_INT 1
13106: PPUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: CALL_OW 12
13116: ARRAY
13117: ST_TO_ADDR
// if randWeapon = 46 then
13118: LD_VAR 0 12
13122: PUSH
13123: LD_INT 46
13125: EQUAL
13126: IFFALSE 13155
// AddComConstruct ( fabric , 24 , engine , 3 , randWeapon ) else
13128: LD_VAR 0 2
13132: PPUSH
13133: LD_INT 24
13135: PPUSH
13136: LD_VAR 0 6
13140: PPUSH
13141: LD_INT 3
13143: PPUSH
13144: LD_VAR 0 12
13148: PPUSH
13149: CALL_OW 185
13153: GO 13182
// AddComConstruct ( fabric , chassis , engine , 3 , randWeapon ) ;
13155: LD_VAR 0 2
13159: PPUSH
13160: LD_VAR 0 8
13164: PPUSH
13165: LD_VAR 0 6
13169: PPUSH
13170: LD_INT 3
13172: PPUSH
13173: LD_VAR 0 12
13177: PPUSH
13178: CALL_OW 185
// end ;
13182: GO 13091
13184: POP
13185: POP
// repeat wait ( 0 0$1 ) ;
13186: LD_INT 35
13188: PPUSH
13189: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
13193: LD_INT 22
13195: PUSH
13196: LD_VAR 0 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 21
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 24
13217: PUSH
13218: LD_INT 250
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: PUSH
13235: LD_VAR 0 3
13239: GREATEREQUAL
13240: IFFALSE 13186
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
13242: LD_INT 22
13244: PUSH
13245: LD_VAR 0 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 24
13266: PUSH
13267: LD_INT 250
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: PPUSH
13279: CALL_OW 69
13283: PUSH
13284: LD_VAR 0 3
13288: GREATEREQUAL
13289: IFFALSE 13632
// begin repeat begin wait ( 0 0$1 ) ;
13291: LD_INT 35
13293: PPUSH
13294: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
13298: LD_INT 22
13300: PUSH
13301: LD_VAR 0 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 24
13322: PUSH
13323: LD_INT 651
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: PUSH
13340: LD_INT 0
13342: GREATER
13343: IFFALSE 13571
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
13345: LD_ADDR_VAR 0 10
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_VAR 0 1
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 24
13374: PUSH
13375: LD_INT 651
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: PUSH
13392: FOR_IN
13393: IFFALSE 13569
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13395: LD_ADDR_VAR 0 16
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_VAR 0 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: PPUSH
13417: LD_VAR 0 10
13421: PPUSH
13422: CALL_OW 74
13426: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 59
13449: PUSH
13450: EMPTY
13451: LIST
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 21
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: PPUSH
13486: CALL_OW 69
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 74
13500: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13501: LD_VAR 0 10
13505: PPUSH
13506: LD_VAR 0 16
13510: PPUSH
13511: CALL_OW 296
13515: PUSH
13516: LD_INT 8
13518: PLUS
13519: PUSH
13520: LD_VAR 0 10
13524: PPUSH
13525: LD_VAR 0 17
13529: PPUSH
13530: CALL_OW 296
13534: LESS
13535: IFFALSE 13553
// begin ComAttackUnit ( i , target1 ) ;
13537: LD_VAR 0 10
13541: PPUSH
13542: LD_VAR 0 16
13546: PPUSH
13547: CALL_OW 115
// end else
13551: GO 13567
// begin ComAttackUnit ( i , target2 ) ;
13553: LD_VAR 0 10
13557: PPUSH
13558: LD_VAR 0 17
13562: PPUSH
13563: CALL_OW 115
// end ; end ;
13567: GO 13392
13569: POP
13570: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
13571: LD_INT 22
13573: PUSH
13574: LD_VAR 0 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 21
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PUSH
13602: LD_INT 0
13604: EQUAL
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_VAR 0 4
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: PUSH
13626: LD_INT 0
13628: EQUAL
13629: OR
13630: IFFALSE 13291
// end ; end ;
13632: LD_VAR 0 9
13636: RET
// export function ReinforcementArrival ( ) ; var i , un , mech , veh ; begin
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
// uc_side = 1 ;
13644: LD_ADDR_OWVAR 20
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// uc_nation = 1 ;
13652: LD_ADDR_OWVAR 21
13656: PUSH
13657: LD_INT 1
13659: ST_TO_ADDR
// for i = 1 to 3 do
13660: LD_ADDR_VAR 0 2
13664: PUSH
13665: DOUBLE
13666: LD_INT 1
13668: DEC
13669: ST_TO_ADDR
13670: LD_INT 3
13672: PUSH
13673: FOR_TO
13674: IFFALSE 13797
// begin PrepareMechanic ( 0 , 5 ) ;
13676: LD_INT 0
13678: PPUSH
13679: LD_INT 5
13681: PPUSH
13682: CALL_OW 383
// mech = CreateHuman ;
13686: LD_ADDR_VAR 0 4
13690: PUSH
13691: CALL_OW 44
13695: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
13696: LD_ADDR_OWVAR 37
13700: PUSH
13701: LD_INT 4
13703: ST_TO_ADDR
// vc_engine := engine_siberite ;
13704: LD_ADDR_OWVAR 39
13708: PUSH
13709: LD_INT 3
13711: ST_TO_ADDR
// vc_weapon := us_double_gun ;
13712: LD_ADDR_OWVAR 40
13716: PUSH
13717: LD_INT 5
13719: ST_TO_ADDR
// vc_control := control_manual ;
13720: LD_ADDR_OWVAR 38
13724: PUSH
13725: LD_INT 1
13727: ST_TO_ADDR
// veh := CreateVehicle ;
13728: LD_ADDR_VAR 0 5
13732: PUSH
13733: CALL_OW 45
13737: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
13738: LD_VAR 0 4
13742: PPUSH
13743: LD_VAR 0 5
13747: PPUSH
13748: CALL_OW 52
// PlaceUnitXYR ( veh , 126 , 134 , 5 , false ) ;
13752: LD_VAR 0 5
13756: PPUSH
13757: LD_INT 126
13759: PPUSH
13760: LD_INT 134
13762: PPUSH
13763: LD_INT 5
13765: PPUSH
13766: LD_INT 0
13768: PPUSH
13769: CALL_OW 50
// ComAgressiveMove ( veh , 128 , 98 ) ;
13773: LD_VAR 0 5
13777: PPUSH
13778: LD_INT 128
13780: PPUSH
13781: LD_INT 98
13783: PPUSH
13784: CALL_OW 114
// wait ( 0 0$2 ) ;
13788: LD_INT 70
13790: PPUSH
13791: CALL_OW 67
// end ;
13795: GO 13673
13797: POP
13798: POP
// for i = 1 to 2 do
13799: LD_ADDR_VAR 0 2
13803: PUSH
13804: DOUBLE
13805: LD_INT 1
13807: DEC
13808: ST_TO_ADDR
13809: LD_INT 2
13811: PUSH
13812: FOR_TO
13813: IFFALSE 13902
// begin uc_side = 1 ;
13815: LD_ADDR_OWVAR 20
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// uc_nation = 1 ;
13823: LD_ADDR_OWVAR 21
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// hc_name =  ;
13831: LD_ADDR_OWVAR 26
13835: PUSH
13836: LD_STRING 
13838: ST_TO_ADDR
// hc_gallery =  ;
13839: LD_ADDR_OWVAR 33
13843: PUSH
13844: LD_STRING 
13846: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 5 ) ;
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 5
13855: PPUSH
13856: CALL_OW 380
// un = CreateHuman ;
13860: LD_ADDR_VAR 0 3
13864: PUSH
13865: CALL_OW 44
13869: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_S , false ) ;
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_INT 0
13880: PPUSH
13881: CALL_OW 49
// ComAgressiveMove ( un , 128 , 98 ) ;
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 128
13892: PPUSH
13893: LD_INT 98
13895: PPUSH
13896: CALL_OW 114
// end ;
13900: GO 13812
13902: POP
13903: POP
// for i = 1 to 2 do
13904: LD_ADDR_VAR 0 2
13908: PUSH
13909: DOUBLE
13910: LD_INT 1
13912: DEC
13913: ST_TO_ADDR
13914: LD_INT 2
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14041
// begin PrepareMechanic ( 0 , 5 ) ;
13920: LD_INT 0
13922: PPUSH
13923: LD_INT 5
13925: PPUSH
13926: CALL_OW 383
// mech = CreateHuman ;
13930: LD_ADDR_VAR 0 4
13934: PUSH
13935: CALL_OW 44
13939: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
13940: LD_ADDR_OWVAR 37
13944: PUSH
13945: LD_INT 4
13947: ST_TO_ADDR
// vc_engine := engine_siberite ;
13948: LD_ADDR_OWVAR 39
13952: PUSH
13953: LD_INT 3
13955: ST_TO_ADDR
// vc_weapon := us_double_gun ;
13956: LD_ADDR_OWVAR 40
13960: PUSH
13961: LD_INT 5
13963: ST_TO_ADDR
// vc_control := control_manual ;
13964: LD_ADDR_OWVAR 38
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// veh := CreateVehicle ;
13972: LD_ADDR_VAR 0 5
13976: PUSH
13977: CALL_OW 45
13981: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
13982: LD_VAR 0 4
13986: PPUSH
13987: LD_VAR 0 5
13991: PPUSH
13992: CALL_OW 52
// PlaceUnitXYR ( veh , 51 , 95 , 1 , false ) ;
13996: LD_VAR 0 5
14000: PPUSH
14001: LD_INT 51
14003: PPUSH
14004: LD_INT 95
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: LD_INT 0
14012: PPUSH
14013: CALL_OW 50
// ComAgressiveMove ( veh , 75 , 80 ) ;
14017: LD_VAR 0 5
14021: PPUSH
14022: LD_INT 75
14024: PPUSH
14025: LD_INT 80
14027: PPUSH
14028: CALL_OW 114
// wait ( 0 0$2 ) ;
14032: LD_INT 70
14034: PPUSH
14035: CALL_OW 67
// end ;
14039: GO 13917
14041: POP
14042: POP
// for i = 1 to 3 do
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: DOUBLE
14049: LD_INT 1
14051: DEC
14052: ST_TO_ADDR
14053: LD_INT 3
14055: PUSH
14056: FOR_TO
14057: IFFALSE 14146
// begin uc_side = 1 ;
14059: LD_ADDR_OWVAR 20
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// uc_nation = 1 ;
14067: LD_ADDR_OWVAR 21
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// hc_name =  ;
14075: LD_ADDR_OWVAR 26
14079: PUSH
14080: LD_STRING 
14082: ST_TO_ADDR
// hc_gallery =  ;
14083: LD_ADDR_OWVAR 33
14087: PUSH
14088: LD_STRING 
14090: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 5 ) ;
14091: LD_INT 1
14093: PPUSH
14094: LD_INT 1
14096: PPUSH
14097: LD_INT 5
14099: PPUSH
14100: CALL_OW 380
// un = CreateHuman ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: CALL_OW 44
14113: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_W , false ) ;
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_INT 2
14121: PPUSH
14122: LD_INT 0
14124: PPUSH
14125: CALL_OW 49
// ComAgressiveMove ( un , 75 , 80 ) ;
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 75
14136: PPUSH
14137: LD_INT 80
14139: PPUSH
14140: CALL_OW 114
// end ;
14144: GO 14056
14146: POP
14147: POP
// PlaceUnitArea ( Miller , AM_SpawnZone_W , false ) ;
14148: LD_EXP 25
14152: PPUSH
14153: LD_INT 2
14155: PPUSH
14156: LD_INT 0
14158: PPUSH
14159: CALL_OW 49
// ComAgressiveMove ( Miller , 75 , 80 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_INT 75
14170: PPUSH
14171: LD_INT 80
14173: PPUSH
14174: CALL_OW 114
// end ;
14178: LD_VAR 0 1
14182: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
14183: LD_INT 0
14185: PPUSH
// if not unit then
14186: LD_VAR 0 1
14190: NOT
14191: IFFALSE 14195
// exit ;
14193: GO 14229
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
14195: LD_VAR 0 1
14199: PPUSH
14200: LD_VAR 0 2
14204: PUSH
14205: LD_VAR 0 3
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 258
14223: ARRAY
14224: PPUSH
14225: CALL_OW 88
// end ;
14229: LD_VAR 0 4
14233: RET
// export function SayRadioSex ( unit , dialogM , dialogF ) ; begin
14234: LD_INT 0
14236: PPUSH
// if not unit then
14237: LD_VAR 0 1
14241: NOT
14242: IFFALSE 14246
// exit ;
14244: GO 14280
// SayRadio ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_VAR 0 2
14255: PUSH
14256: LD_VAR 0 3
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 258
14274: ARRAY
14275: PPUSH
14276: CALL_OW 94
// end ;
14280: LD_VAR 0 4
14284: RET
// every 0 0$1 trigger MissionBegin do
14285: LD_EXP 1
14289: IFFALSE 14390
14291: GO 14293
14293: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
14294: LD_INT 2100
14296: PPUSH
14297: LD_INT 3150
14299: PPUSH
14300: CALL_OW 12
14304: PPUSH
14305: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
14309: LD_INT 2
14311: PPUSH
14312: LD_INT 5
14314: PPUSH
14315: CALL_OW 12
14319: PPUSH
14320: LD_INT 17
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: CALL_OW 55
// case Rand ( 1 , 2 ) of 1 :
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 12
14340: PUSH
14341: LD_INT 1
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14388
14349: POP
// begin wait ( Rand ( 0 0$15 , 0 0$30 ) ) ;
14350: LD_INT 525
14352: PPUSH
14353: LD_INT 1050
14355: PPUSH
14356: CALL_OW 12
14360: PPUSH
14361: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
14365: LD_INT 2
14367: PPUSH
14368: LD_INT 5
14370: PPUSH
14371: CALL_OW 12
14375: PPUSH
14376: LD_INT 17
14378: PPUSH
14379: LD_INT 1
14381: PPUSH
14382: CALL_OW 55
// end ; end ;
14386: GO 14389
14388: POP
// enable ;
14389: ENABLE
// end ; end_of_file
14390: END
// on UnitDestroyed ( un ) do begin if un = Simone then
14391: LD_VAR 0 1
14395: PUSH
14396: LD_EXP 19
14400: EQUAL
14401: IFFALSE 14429
// begin ExclusiveOn ;
14403: CALL_OW 4
// Wait ( 0 0$2 ) ;
14407: LD_INT 70
14409: PPUSH
14410: CALL_OW 67
// YouLost ( Simone ) ;
14414: LD_STRING Simone
14416: PPUSH
14417: CALL_OW 104
// ExclusiveOff ;
14421: CALL_OW 5
// exit ;
14425: GO 14558
// end else
14427: GO 14549
// if un = Kathryn then
14429: LD_VAR 0 1
14433: PUSH
14434: LD_EXP 20
14438: EQUAL
14439: IFFALSE 14467
// begin ExclusiveOn ;
14441: CALL_OW 4
// Wait ( 0 0$2 ) ;
14445: LD_INT 70
14447: PPUSH
14448: CALL_OW 67
// YouLost ( Kathryn ) ;
14452: LD_STRING Kathryn
14454: PPUSH
14455: CALL_OW 104
// ExclusiveOff ;
14459: CALL_OW 5
// exit ;
14463: GO 14558
// end else
14465: GO 14549
// if un = Miller then
14467: LD_VAR 0 1
14471: PUSH
14472: LD_EXP 25
14476: EQUAL
14477: IFFALSE 14505
// begin ExclusiveOn ;
14479: CALL_OW 4
// Wait ( 0 0$2 ) ;
14483: LD_INT 70
14485: PPUSH
14486: CALL_OW 67
// YouLost ( Miller ) ;
14490: LD_STRING Miller
14492: PPUSH
14493: CALL_OW 104
// ExclusiveOff ;
14497: CALL_OW 5
// exit ;
14501: GO 14558
// end else
14503: GO 14549
// if un = base1 or un = base2 then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 3
14512: EQUAL
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: LD_INT 1
14521: EQUAL
14522: OR
14523: IFFALSE 14549
// begin ExclusiveOn ;
14525: CALL_OW 4
// Wait ( 0 0$2 ) ;
14529: LD_INT 70
14531: PPUSH
14532: CALL_OW 67
// YouLost ( Bases ) ;
14536: LD_STRING Bases
14538: PPUSH
14539: CALL_OW 104
// ExclusiveOff ;
14543: CALL_OW 5
// exit ;
14547: GO 14558
// end ; MCE_UnitDestroyed ( un ) ;
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL 76678 0 1
// end ;
14558: PPOPN 1
14560: END
// on UnitGoesToRed ( un ) do begin if un = baracksdestr then
14561: LD_VAR 0 1
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: IFFALSE 14590
// begin ComEnterUnit ( UnitsInside ( un ) , AMWesternArmor ) ;
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 313
14580: PPUSH
14581: LD_EXP 5
14585: PPUSH
14586: CALL_OW 120
// end ; end ;
14590: PPOPN 1
14592: END
// every 0 0$1 trigger LaserTanks < 2 and game_start do
14593: LD_EXP 6
14597: PUSH
14598: LD_INT 2
14600: LESS
14601: PUSH
14602: LD_EXP 18
14606: AND
14607: IFFALSE 14634
14609: GO 14611
14611: DISABLE
// begin ExclusiveOn ;
14612: CALL_OW 4
// Wait ( 0 0$2 ) ;
14616: LD_INT 70
14618: PPUSH
14619: CALL_OW 67
// YouLost ( Vehicles ) ;
14623: LD_STRING Vehicles
14625: PPUSH
14626: CALL_OW 104
// ExclusiveOff ;
14630: CALL_OW 5
// end ;
14634: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
14635: LD_VAR 0 1
14639: PPUSH
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL 78545 0 2
// end ;
14649: PPOPN 2
14651: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL 77627 0 1
// end ;
14661: PPOPN 1
14663: END
// on BuildingComplete ( building ) do var i , un ;
14664: LD_INT 0
14666: PPUSH
14667: PPUSH
// begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 1 then
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 266
14677: PUSH
14678: LD_INT 4
14680: EQUAL
14681: PUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 255
14691: PUSH
14692: LD_INT 1
14694: EQUAL
14695: AND
14696: IFFALSE 14814
// begin AMWesternArmor = building ;
14698: LD_ADDR_EXP 5
14702: PUSH
14703: LD_VAR 0 1
14707: ST_TO_ADDR
// for i = 1 to 2 do
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: DOUBLE
14714: LD_INT 1
14716: DEC
14717: ST_TO_ADDR
14718: LD_INT 2
14720: PUSH
14721: FOR_TO
14722: IFFALSE 14810
// begin uc_side = 1 ;
14724: LD_ADDR_OWVAR 20
14728: PUSH
14729: LD_INT 1
14731: ST_TO_ADDR
// uc_nation = 1 ;
14732: LD_ADDR_OWVAR 21
14736: PUSH
14737: LD_INT 1
14739: ST_TO_ADDR
// hc_name =  ;
14740: LD_ADDR_OWVAR 26
14744: PUSH
14745: LD_STRING 
14747: ST_TO_ADDR
// hc_gallery =  ;
14748: LD_ADDR_OWVAR 33
14752: PUSH
14753: LD_STRING 
14755: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
14756: LD_INT 1
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_INT 6
14764: PPUSH
14765: CALL_OW 380
// un = CreateHuman ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: CALL_OW 44
14778: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_W , false ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 2
14786: PPUSH
14787: LD_INT 0
14789: PPUSH
14790: CALL_OW 49
// ComEnterUnit ( un , building ) ;
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 120
// end ;
14808: GO 14721
14810: POP
14811: POP
// end else
14812: GO 14904
// if ( GetSide ( building ) = 6 ) and ( GetBType ( building ) = b_depot ) then
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 255
14823: PUSH
14824: LD_INT 6
14826: EQUAL
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 0
14840: EQUAL
14841: AND
14842: IFFALSE 14904
// begin SetResourceType ( GetBase ( building ) , mat_cans , 500 ) ;
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 274
14853: PPUSH
14854: LD_INT 1
14856: PPUSH
14857: LD_INT 500
14859: PPUSH
14860: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_oil , 100 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 274
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: LD_INT 100
14879: PPUSH
14880: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_siberit , 50 ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 274
14893: PPUSH
14894: LD_INT 3
14896: PPUSH
14897: LD_INT 50
14899: PPUSH
14900: CALL_OW 277
// end ; MCE_BuildingComplete ( building ) ;
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL 77861 0 1
// end ;
14913: PPOPN 3
14915: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 2
14925: PPUSH
14926: CALL 76390 0 2
// end ;
14930: PPOPN 2
14932: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_VAR 0 2
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_VAR 0 4
14952: PPUSH
14953: LD_VAR 0 5
14957: PPUSH
14958: CALL 76017 0 5
// end ;
14962: PPOPN 5
14964: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
14965: LD_VAR 0 1
14969: PPUSH
14970: LD_VAR 0 2
14974: PPUSH
14975: CALL 75705 0 2
// end ;
14979: PPOPN 2
14981: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_VAR 0 4
15001: PPUSH
15002: CALL 75550 0 4
// end ;
15006: PPOPN 4
15008: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: LD_VAR 0 3
15023: PPUSH
15024: CALL 75332 0 3
// end ;
15028: PPOPN 3
15030: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
15031: LD_VAR 0 1
15035: PPUSH
15036: LD_VAR 0 2
15040: PPUSH
15041: CALL 75224 0 2
// end ;
15045: PPOPN 2
15047: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_VAR 0 2
15057: PPUSH
15058: CALL 78799 0 2
// end ;
15062: PPOPN 2
15064: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_VAR 0 4
15084: PPUSH
15085: CALL 79008 0 4
// end ;
15089: PPOPN 4
15091: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_VAR 0 2
15101: PPUSH
15102: CALL 75040 0 2
// end ;
15106: PPOPN 2
15108: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 7 and side2 = 1 ) or ( side1 = 1 and side2 = 7 ) then
15109: LD_VAR 0 1
15113: PUSH
15114: LD_INT 7
15116: EQUAL
15117: PUSH
15118: LD_VAR 0 2
15122: PUSH
15123: LD_INT 1
15125: EQUAL
15126: AND
15127: PUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 1
15135: EQUAL
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: LD_INT 7
15144: EQUAL
15145: AND
15146: OR
15147: IFFALSE 15186
// begin ExclusiveOn ;
15149: CALL_OW 4
// DialogueOn ;
15153: CALL_OW 6
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
15157: LD_EXP 26
15161: PPUSH
15162: LD_STRING DFriendlyFire-Barnes-1
15164: PPUSH
15165: CALL_OW 88
// DialogueOff ;
15169: CALL_OW 7
// YouLost ( FriendlyFire ) ;
15173: LD_STRING FriendlyFire
15175: PPUSH
15176: CALL_OW 104
// ExclusiveOff ;
15180: CALL_OW 5
// exit ;
15184: GO 15186
// end ; end ; end_of_file
15186: PPOPN 2
15188: END
// export function Prepare_RU2 ; var i , un ; begin
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
15193: PPUSH
// uc_side = 6 ;
15194: LD_ADDR_OWVAR 20
15198: PUSH
15199: LD_INT 6
15201: ST_TO_ADDR
// uc_nation = 3 ;
15202: LD_ADDR_OWVAR 21
15206: PUSH
15207: LD_INT 3
15209: ST_TO_ADDR
// for i = 1 to 20 do
15210: LD_ADDR_VAR 0 2
15214: PUSH
15215: DOUBLE
15216: LD_INT 1
15218: DEC
15219: ST_TO_ADDR
15220: LD_INT 20
15222: PUSH
15223: FOR_TO
15224: IFFALSE 15310
// begin uc_side = 6 ;
15226: LD_ADDR_OWVAR 20
15230: PUSH
15231: LD_INT 6
15233: ST_TO_ADDR
// uc_nation = 3 ;
15234: LD_ADDR_OWVAR 21
15238: PUSH
15239: LD_INT 3
15241: ST_TO_ADDR
// hc_gallery =  ;
15242: LD_ADDR_OWVAR 33
15246: PUSH
15247: LD_STRING 
15249: ST_TO_ADDR
// hc_name =  ;
15250: LD_ADDR_OWVAR 26
15254: PUSH
15255: LD_STRING 
15257: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15258: LD_INT 0
15260: PPUSH
15261: LD_INT 1
15263: PPUSH
15264: LD_EXP 37
15268: PPUSH
15269: LD_EXP 38
15273: PPUSH
15274: CALL_OW 12
15278: PPUSH
15279: CALL_OW 380
// un = CreateHuman ;
15283: LD_ADDR_VAR 0 3
15287: PUSH
15288: CALL_OW 44
15292: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 3
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 49
// end ;
15308: GO 15223
15310: POP
15311: POP
// for i = 1 to 6 do
15312: LD_ADDR_VAR 0 2
15316: PUSH
15317: DOUBLE
15318: LD_INT 1
15320: DEC
15321: ST_TO_ADDR
15322: LD_INT 6
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15412
// begin uc_side = 6 ;
15328: LD_ADDR_OWVAR 20
15332: PUSH
15333: LD_INT 6
15335: ST_TO_ADDR
// uc_nation = 3 ;
15336: LD_ADDR_OWVAR 21
15340: PUSH
15341: LD_INT 3
15343: ST_TO_ADDR
// hc_gallery =  ;
15344: LD_ADDR_OWVAR 33
15348: PUSH
15349: LD_STRING 
15351: ST_TO_ADDR
// hc_name =  ;
15352: LD_ADDR_OWVAR 26
15356: PUSH
15357: LD_STRING 
15359: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15360: LD_INT 0
15362: PPUSH
15363: LD_INT 2
15365: PPUSH
15366: LD_EXP 37
15370: PPUSH
15371: LD_EXP 38
15375: PPUSH
15376: CALL_OW 12
15380: PPUSH
15381: CALL_OW 380
// un = CreateHuman ;
15385: LD_ADDR_VAR 0 3
15389: PUSH
15390: CALL_OW 44
15394: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 3
15402: PPUSH
15403: LD_INT 0
15405: PPUSH
15406: CALL_OW 49
// end ;
15410: GO 15325
15412: POP
15413: POP
// for i = 1 to 6 do
15414: LD_ADDR_VAR 0 2
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_INT 6
15426: PUSH
15427: FOR_TO
15428: IFFALSE 15514
// begin uc_side = 6 ;
15430: LD_ADDR_OWVAR 20
15434: PUSH
15435: LD_INT 6
15437: ST_TO_ADDR
// uc_nation = 3 ;
15438: LD_ADDR_OWVAR 21
15442: PUSH
15443: LD_INT 3
15445: ST_TO_ADDR
// hc_gallery =  ;
15446: LD_ADDR_OWVAR 33
15450: PUSH
15451: LD_STRING 
15453: ST_TO_ADDR
// hc_name =  ;
15454: LD_ADDR_OWVAR 26
15458: PUSH
15459: LD_STRING 
15461: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 3
15467: PPUSH
15468: LD_EXP 37
15472: PPUSH
15473: LD_EXP 38
15477: PPUSH
15478: CALL_OW 12
15482: PPUSH
15483: CALL_OW 380
// un = CreateHuman ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: CALL_OW 44
15496: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 3
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: CALL_OW 49
// end ;
15512: GO 15427
15514: POP
15515: POP
// for i = 1 to 4 do
15516: LD_ADDR_VAR 0 2
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_INT 4
15528: PUSH
15529: FOR_TO
15530: IFFALSE 15616
// begin uc_side = 6 ;
15532: LD_ADDR_OWVAR 20
15536: PUSH
15537: LD_INT 6
15539: ST_TO_ADDR
// uc_nation = 3 ;
15540: LD_ADDR_OWVAR 21
15544: PUSH
15545: LD_INT 3
15547: ST_TO_ADDR
// hc_gallery =  ;
15548: LD_ADDR_OWVAR 33
15552: PUSH
15553: LD_STRING 
15555: ST_TO_ADDR
// hc_name =  ;
15556: LD_ADDR_OWVAR 26
15560: PUSH
15561: LD_STRING 
15563: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15564: LD_INT 0
15566: PPUSH
15567: LD_INT 4
15569: PPUSH
15570: LD_EXP 37
15574: PPUSH
15575: LD_EXP 38
15579: PPUSH
15580: CALL_OW 12
15584: PPUSH
15585: CALL_OW 380
// un = CreateHuman ;
15589: LD_ADDR_VAR 0 3
15593: PUSH
15594: CALL_OW 44
15598: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_INT 3
15606: PPUSH
15607: LD_INT 0
15609: PPUSH
15610: CALL_OW 49
// end ;
15614: GO 15529
15616: POP
15617: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
15618: LD_ADDR_EXP 44
15622: PUSH
15623: LD_EXP 44
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 6
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: PPUSH
15660: CALL_OW 1
15664: ST_TO_ADDR
// MC_Start ;
15665: CALL 58752 0 0
// end ; end_of_file
15669: LD_VAR 0 1
15673: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15674: LD_INT 0
15676: PPUSH
15677: PPUSH
// if exist_mode then
15678: LD_VAR 0 2
15682: IFFALSE 15707
// unit := CreateCharacter ( prefix & ident ) else
15684: LD_ADDR_VAR 0 5
15688: PUSH
15689: LD_VAR 0 3
15693: PUSH
15694: LD_VAR 0 1
15698: STR
15699: PPUSH
15700: CALL_OW 34
15704: ST_TO_ADDR
15705: GO 15722
// unit := NewCharacter ( ident ) ;
15707: LD_ADDR_VAR 0 5
15711: PUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 25
15721: ST_TO_ADDR
// result := unit ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 5
15731: ST_TO_ADDR
// end ;
15732: LD_VAR 0 4
15736: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// if not side or not nation then
15741: LD_VAR 0 1
15745: NOT
15746: PUSH
15747: LD_VAR 0 2
15751: NOT
15752: OR
15753: IFFALSE 15757
// exit ;
15755: GO 16393
// case nation of nation_american :
15757: LD_VAR 0 2
15761: PUSH
15762: LD_INT 1
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15940
15770: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
15771: LD_ADDR_VAR 0 4
15775: PUSH
15776: LD_INT 35
15778: PUSH
15779: LD_INT 45
15781: PUSH
15782: LD_INT 46
15784: PUSH
15785: LD_INT 47
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: LD_INT 2
15793: PUSH
15794: LD_INT 6
15796: PUSH
15797: LD_INT 15
15799: PUSH
15800: LD_INT 16
15802: PUSH
15803: LD_INT 7
15805: PUSH
15806: LD_INT 12
15808: PUSH
15809: LD_INT 13
15811: PUSH
15812: LD_INT 10
15814: PUSH
15815: LD_INT 14
15817: PUSH
15818: LD_INT 20
15820: PUSH
15821: LD_INT 21
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 32
15832: PUSH
15833: LD_INT 27
15835: PUSH
15836: LD_INT 36
15838: PUSH
15839: LD_INT 69
15841: PUSH
15842: LD_INT 39
15844: PUSH
15845: LD_INT 34
15847: PUSH
15848: LD_INT 40
15850: PUSH
15851: LD_INT 48
15853: PUSH
15854: LD_INT 49
15856: PUSH
15857: LD_INT 50
15859: PUSH
15860: LD_INT 51
15862: PUSH
15863: LD_INT 52
15865: PUSH
15866: LD_INT 53
15868: PUSH
15869: LD_INT 54
15871: PUSH
15872: LD_INT 55
15874: PUSH
15875: LD_INT 56
15877: PUSH
15878: LD_INT 57
15880: PUSH
15881: LD_INT 58
15883: PUSH
15884: LD_INT 59
15886: PUSH
15887: LD_INT 60
15889: PUSH
15890: LD_INT 61
15892: PUSH
15893: LD_INT 62
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: ST_TO_ADDR
15938: GO 16317
15940: LD_INT 2
15942: DOUBLE
15943: EQUAL
15944: IFTRUE 15948
15946: GO 16126
15948: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
15949: LD_ADDR_VAR 0 4
15953: PUSH
15954: LD_INT 35
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: LD_INT 46
15962: PUSH
15963: LD_INT 47
15965: PUSH
15966: LD_INT 70
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 11
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 4
15980: PUSH
15981: LD_INT 5
15983: PUSH
15984: LD_INT 6
15986: PUSH
15987: LD_INT 15
15989: PUSH
15990: LD_INT 18
15992: PUSH
15993: LD_INT 7
15995: PUSH
15996: LD_INT 17
15998: PUSH
15999: LD_INT 8
16001: PUSH
16002: LD_INT 20
16004: PUSH
16005: LD_INT 21
16007: PUSH
16008: LD_INT 22
16010: PUSH
16011: LD_INT 72
16013: PUSH
16014: LD_INT 26
16016: PUSH
16017: LD_INT 69
16019: PUSH
16020: LD_INT 39
16022: PUSH
16023: LD_INT 40
16025: PUSH
16026: LD_INT 41
16028: PUSH
16029: LD_INT 42
16031: PUSH
16032: LD_INT 43
16034: PUSH
16035: LD_INT 48
16037: PUSH
16038: LD_INT 49
16040: PUSH
16041: LD_INT 50
16043: PUSH
16044: LD_INT 51
16046: PUSH
16047: LD_INT 52
16049: PUSH
16050: LD_INT 53
16052: PUSH
16053: LD_INT 54
16055: PUSH
16056: LD_INT 55
16058: PUSH
16059: LD_INT 56
16061: PUSH
16062: LD_INT 60
16064: PUSH
16065: LD_INT 61
16067: PUSH
16068: LD_INT 62
16070: PUSH
16071: LD_INT 66
16073: PUSH
16074: LD_INT 67
16076: PUSH
16077: LD_INT 68
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: ST_TO_ADDR
16124: GO 16317
16126: LD_INT 3
16128: DOUBLE
16129: EQUAL
16130: IFTRUE 16134
16132: GO 16316
16134: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
16135: LD_ADDR_VAR 0 4
16139: PUSH
16140: LD_INT 46
16142: PUSH
16143: LD_INT 47
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: LD_INT 2
16151: PUSH
16152: LD_INT 11
16154: PUSH
16155: LD_INT 9
16157: PUSH
16158: LD_INT 20
16160: PUSH
16161: LD_INT 19
16163: PUSH
16164: LD_INT 21
16166: PUSH
16167: LD_INT 24
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_INT 25
16175: PUSH
16176: LD_INT 28
16178: PUSH
16179: LD_INT 29
16181: PUSH
16182: LD_INT 30
16184: PUSH
16185: LD_INT 31
16187: PUSH
16188: LD_INT 37
16190: PUSH
16191: LD_INT 38
16193: PUSH
16194: LD_INT 32
16196: PUSH
16197: LD_INT 27
16199: PUSH
16200: LD_INT 33
16202: PUSH
16203: LD_INT 69
16205: PUSH
16206: LD_INT 39
16208: PUSH
16209: LD_INT 34
16211: PUSH
16212: LD_INT 40
16214: PUSH
16215: LD_INT 71
16217: PUSH
16218: LD_INT 23
16220: PUSH
16221: LD_INT 44
16223: PUSH
16224: LD_INT 48
16226: PUSH
16227: LD_INT 49
16229: PUSH
16230: LD_INT 50
16232: PUSH
16233: LD_INT 51
16235: PUSH
16236: LD_INT 52
16238: PUSH
16239: LD_INT 53
16241: PUSH
16242: LD_INT 54
16244: PUSH
16245: LD_INT 55
16247: PUSH
16248: LD_INT 56
16250: PUSH
16251: LD_INT 57
16253: PUSH
16254: LD_INT 58
16256: PUSH
16257: LD_INT 59
16259: PUSH
16260: LD_INT 63
16262: PUSH
16263: LD_INT 64
16265: PUSH
16266: LD_INT 65
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: ST_TO_ADDR
16314: GO 16317
16316: POP
// if state > - 1 and state < 3 then
16317: LD_VAR 0 3
16321: PUSH
16322: LD_INT 1
16324: NEG
16325: GREATER
16326: PUSH
16327: LD_VAR 0 3
16331: PUSH
16332: LD_INT 3
16334: LESS
16335: AND
16336: IFFALSE 16393
// for i in result do
16338: LD_ADDR_VAR 0 5
16342: PUSH
16343: LD_VAR 0 4
16347: PUSH
16348: FOR_IN
16349: IFFALSE 16391
// if GetTech ( i , side ) <> state then
16351: LD_VAR 0 5
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 321
16365: PUSH
16366: LD_VAR 0 3
16370: NONEQUAL
16371: IFFALSE 16389
// result := result diff i ;
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_VAR 0 4
16382: PUSH
16383: LD_VAR 0 5
16387: DIFF
16388: ST_TO_ADDR
16389: GO 16348
16391: POP
16392: POP
// end ;
16393: LD_VAR 0 4
16397: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
16402: PPUSH
// result := true ;
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_INT 1
16410: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16411: LD_ADDR_VAR 0 5
16415: PUSH
16416: LD_VAR 0 2
16420: PPUSH
16421: CALL_OW 480
16425: ST_TO_ADDR
// if not tmp then
16426: LD_VAR 0 5
16430: NOT
16431: IFFALSE 16435
// exit ;
16433: GO 16484
// for i in tmp do
16435: LD_ADDR_VAR 0 4
16439: PUSH
16440: LD_VAR 0 5
16444: PUSH
16445: FOR_IN
16446: IFFALSE 16482
// if GetTech ( i , side ) <> state_researched then
16448: LD_VAR 0 4
16452: PPUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 321
16462: PUSH
16463: LD_INT 2
16465: NONEQUAL
16466: IFFALSE 16480
// begin result := false ;
16468: LD_ADDR_VAR 0 3
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// exit ;
16476: POP
16477: POP
16478: GO 16484
// end ;
16480: GO 16445
16482: POP
16483: POP
// end ;
16484: LD_VAR 0 3
16488: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16489: LD_INT 0
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
16498: PPUSH
16499: PPUSH
16500: PPUSH
16501: PPUSH
16502: PPUSH
16503: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16504: LD_VAR 0 1
16508: NOT
16509: PUSH
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 257
16519: PUSH
16520: LD_INT 9
16522: NONEQUAL
16523: OR
16524: IFFALSE 16528
// exit ;
16526: GO 17101
// side := GetSide ( unit ) ;
16528: LD_ADDR_VAR 0 9
16532: PUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 255
16542: ST_TO_ADDR
// tech_space := tech_spacanom ;
16543: LD_ADDR_VAR 0 12
16547: PUSH
16548: LD_INT 29
16550: ST_TO_ADDR
// tech_time := tech_taurad ;
16551: LD_ADDR_VAR 0 13
16555: PUSH
16556: LD_INT 28
16558: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16559: LD_ADDR_VAR 0 11
16563: PUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 310
16573: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16574: LD_VAR 0 11
16578: PPUSH
16579: CALL_OW 247
16583: PUSH
16584: LD_INT 2
16586: EQUAL
16587: IFFALSE 16591
// exit ;
16589: GO 17101
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16591: LD_ADDR_VAR 0 8
16595: PUSH
16596: LD_INT 81
16598: PUSH
16599: LD_VAR 0 9
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: ST_TO_ADDR
// if not tmp then
16634: LD_VAR 0 8
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 17101
// if in_unit then
16643: LD_VAR 0 11
16647: IFFALSE 16671
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16649: LD_ADDR_VAR 0 10
16653: PUSH
16654: LD_VAR 0 8
16658: PPUSH
16659: LD_VAR 0 11
16663: PPUSH
16664: CALL_OW 74
16668: ST_TO_ADDR
16669: GO 16691
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16671: LD_ADDR_VAR 0 10
16675: PUSH
16676: LD_VAR 0 8
16680: PPUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 74
16690: ST_TO_ADDR
// if not enemy then
16691: LD_VAR 0 10
16695: NOT
16696: IFFALSE 16700
// exit ;
16698: GO 17101
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16700: LD_VAR 0 11
16704: PUSH
16705: LD_VAR 0 11
16709: PPUSH
16710: LD_VAR 0 10
16714: PPUSH
16715: CALL_OW 296
16719: PUSH
16720: LD_INT 13
16722: GREATER
16723: AND
16724: PUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_VAR 0 10
16734: PPUSH
16735: CALL_OW 296
16739: PUSH
16740: LD_INT 12
16742: GREATER
16743: OR
16744: IFFALSE 16748
// exit ;
16746: GO 17101
// missile := [ 1 ] ;
16748: LD_ADDR_VAR 0 14
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16759: LD_VAR 0 9
16763: PPUSH
16764: LD_VAR 0 12
16768: PPUSH
16769: CALL_OW 325
16773: IFFALSE 16802
// missile := Insert ( missile , missile + 1 , 2 ) ;
16775: LD_ADDR_VAR 0 14
16779: PUSH
16780: LD_VAR 0 14
16784: PPUSH
16785: LD_VAR 0 14
16789: PUSH
16790: LD_INT 1
16792: PLUS
16793: PPUSH
16794: LD_INT 2
16796: PPUSH
16797: CALL_OW 2
16801: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16802: LD_VAR 0 9
16806: PPUSH
16807: LD_VAR 0 13
16811: PPUSH
16812: CALL_OW 325
16816: PUSH
16817: LD_VAR 0 10
16821: PPUSH
16822: CALL_OW 255
16826: PPUSH
16827: LD_VAR 0 13
16831: PPUSH
16832: CALL_OW 325
16836: NOT
16837: AND
16838: IFFALSE 16867
// missile := Insert ( missile , missile + 1 , 3 ) ;
16840: LD_ADDR_VAR 0 14
16844: PUSH
16845: LD_VAR 0 14
16849: PPUSH
16850: LD_VAR 0 14
16854: PUSH
16855: LD_INT 1
16857: PLUS
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL_OW 2
16866: ST_TO_ADDR
// if missile < 2 then
16867: LD_VAR 0 14
16871: PUSH
16872: LD_INT 2
16874: LESS
16875: IFFALSE 16879
// exit ;
16877: GO 17101
// x := GetX ( enemy ) ;
16879: LD_ADDR_VAR 0 4
16883: PUSH
16884: LD_VAR 0 10
16888: PPUSH
16889: CALL_OW 250
16893: ST_TO_ADDR
// y := GetY ( enemy ) ;
16894: LD_ADDR_VAR 0 5
16898: PUSH
16899: LD_VAR 0 10
16903: PPUSH
16904: CALL_OW 251
16908: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16909: LD_ADDR_VAR 0 6
16913: PUSH
16914: LD_VAR 0 4
16918: PUSH
16919: LD_INT 1
16921: NEG
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 12
16930: PLUS
16931: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16932: LD_ADDR_VAR 0 7
16936: PUSH
16937: LD_VAR 0 5
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PPUSH
16946: LD_INT 1
16948: PPUSH
16949: CALL_OW 12
16953: PLUS
16954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16955: LD_VAR 0 6
16959: PPUSH
16960: LD_VAR 0 7
16964: PPUSH
16965: CALL_OW 488
16969: NOT
16970: IFFALSE 16992
// begin _x := x ;
16972: LD_ADDR_VAR 0 6
16976: PUSH
16977: LD_VAR 0 4
16981: ST_TO_ADDR
// _y := y ;
16982: LD_ADDR_VAR 0 7
16986: PUSH
16987: LD_VAR 0 5
16991: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_INT 1
16999: PPUSH
17000: LD_VAR 0 14
17004: PPUSH
17005: CALL_OW 12
17009: ST_TO_ADDR
// case i of 1 :
17010: LD_VAR 0 3
17014: PUSH
17015: LD_INT 1
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17040
17023: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17024: LD_VAR 0 1
17028: PPUSH
17029: LD_VAR 0 10
17033: PPUSH
17034: CALL_OW 115
17038: GO 17101
17040: LD_INT 2
17042: DOUBLE
17043: EQUAL
17044: IFTRUE 17048
17046: GO 17070
17048: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_VAR 0 6
17058: PPUSH
17059: LD_VAR 0 7
17063: PPUSH
17064: CALL_OW 153
17068: GO 17101
17070: LD_INT 3
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17100
17078: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 6
17088: PPUSH
17089: LD_VAR 0 7
17093: PPUSH
17094: CALL_OW 154
17098: GO 17101
17100: POP
// end ;
17101: LD_VAR 0 2
17105: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17106: LD_INT 0
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
// if not unit or not building then
17114: LD_VAR 0 1
17118: NOT
17119: PUSH
17120: LD_VAR 0 2
17124: NOT
17125: OR
17126: IFFALSE 17130
// exit ;
17128: GO 17288
// x := GetX ( building ) ;
17130: LD_ADDR_VAR 0 5
17134: PUSH
17135: LD_VAR 0 2
17139: PPUSH
17140: CALL_OW 250
17144: ST_TO_ADDR
// y := GetY ( building ) ;
17145: LD_ADDR_VAR 0 6
17149: PUSH
17150: LD_VAR 0 2
17154: PPUSH
17155: CALL_OW 251
17159: ST_TO_ADDR
// for i = 0 to 5 do
17160: LD_ADDR_VAR 0 4
17164: PUSH
17165: DOUBLE
17166: LD_INT 0
17168: DEC
17169: ST_TO_ADDR
17170: LD_INT 5
17172: PUSH
17173: FOR_TO
17174: IFFALSE 17286
// begin _x := ShiftX ( x , i , 3 ) ;
17176: LD_ADDR_VAR 0 7
17180: PUSH
17181: LD_VAR 0 5
17185: PPUSH
17186: LD_VAR 0 4
17190: PPUSH
17191: LD_INT 3
17193: PPUSH
17194: CALL_OW 272
17198: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17199: LD_ADDR_VAR 0 8
17203: PUSH
17204: LD_VAR 0 6
17208: PPUSH
17209: LD_VAR 0 4
17213: PPUSH
17214: LD_INT 3
17216: PPUSH
17217: CALL_OW 273
17221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17222: LD_VAR 0 7
17226: PPUSH
17227: LD_VAR 0 8
17231: PPUSH
17232: CALL_OW 488
17236: NOT
17237: IFFALSE 17241
// continue ;
17239: GO 17173
// if HexInfo ( _x , _y ) = 0 then
17241: LD_VAR 0 7
17245: PPUSH
17246: LD_VAR 0 8
17250: PPUSH
17251: CALL_OW 428
17255: PUSH
17256: LD_INT 0
17258: EQUAL
17259: IFFALSE 17284
// begin ComMoveXY ( unit , _x , _y ) ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_VAR 0 7
17270: PPUSH
17271: LD_VAR 0 8
17275: PPUSH
17276: CALL_OW 111
// exit ;
17280: POP
17281: POP
17282: GO 17288
// end ; end ;
17284: GO 17173
17286: POP
17287: POP
// end ;
17288: LD_VAR 0 3
17292: RET
// export function ScanBase ( side , base_area ) ; begin
17293: LD_INT 0
17295: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17296: LD_ADDR_VAR 0 3
17300: PUSH
17301: LD_VAR 0 2
17305: PPUSH
17306: LD_INT 81
17308: PUSH
17309: LD_VAR 0 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 70
17322: ST_TO_ADDR
// end ;
17323: LD_VAR 0 3
17327: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
17328: LD_INT 0
17330: PPUSH
17331: PPUSH
17332: PPUSH
17333: PPUSH
17334: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
17335: LD_VAR 0 1
17339: NOT
17340: PUSH
17341: LD_EXP 44
17345: PUSH
17346: LD_VAR 0 1
17350: ARRAY
17351: NOT
17352: OR
17353: PUSH
17354: LD_VAR 0 2
17358: NOT
17359: OR
17360: PUSH
17361: LD_VAR 0 3
17365: NOT
17366: OR
17367: IFFALSE 17371
// exit ;
17369: GO 17821
// side := mc_sides [ base ] ;
17371: LD_ADDR_VAR 0 6
17375: PUSH
17376: LD_EXP 70
17380: PUSH
17381: LD_VAR 0 1
17385: ARRAY
17386: ST_TO_ADDR
// if not side then
17387: LD_VAR 0 6
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17821
// for i in solds do
17396: LD_ADDR_VAR 0 7
17400: PUSH
17401: LD_VAR 0 2
17405: PUSH
17406: FOR_IN
17407: IFFALSE 17468
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
17409: LD_VAR 0 7
17413: PPUSH
17414: CALL_OW 310
17418: PPUSH
17419: CALL_OW 266
17423: PUSH
17424: LD_INT 32
17426: PUSH
17427: LD_INT 31
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: IN
17434: IFFALSE 17454
// solds := solds diff i else
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: LD_VAR 0 2
17445: PUSH
17446: LD_VAR 0 7
17450: DIFF
17451: ST_TO_ADDR
17452: GO 17466
// SetTag ( i , 18 ) ;
17454: LD_VAR 0 7
17458: PPUSH
17459: LD_INT 18
17461: PPUSH
17462: CALL_OW 109
17466: GO 17406
17468: POP
17469: POP
// if not solds then
17470: LD_VAR 0 2
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17821
// repeat wait ( 0 0$1 ) ;
17479: LD_INT 35
17481: PPUSH
17482: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
17486: LD_ADDR_VAR 0 5
17490: PUSH
17491: LD_VAR 0 6
17495: PPUSH
17496: LD_VAR 0 3
17500: PPUSH
17501: CALL 17293 0 2
17505: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
17506: LD_VAR 0 5
17510: NOT
17511: PUSH
17512: LD_VAR 0 5
17516: PUSH
17517: LD_INT 3
17519: GREATER
17520: OR
17521: PUSH
17522: LD_EXP 66
17526: PUSH
17527: LD_VAR 0 1
17531: ARRAY
17532: OR
17533: IFFALSE 17574
// begin for i in solds do
17535: LD_ADDR_VAR 0 7
17539: PUSH
17540: LD_VAR 0 2
17544: PUSH
17545: FOR_IN
17546: IFFALSE 17570
// if HasTask ( i ) then
17548: LD_VAR 0 7
17552: PPUSH
17553: CALL_OW 314
17557: IFFALSE 17568
// ComStop ( i ) ;
17559: LD_VAR 0 7
17563: PPUSH
17564: CALL_OW 141
17568: GO 17545
17570: POP
17571: POP
// break ;
17572: GO 17809
// end ; for i in solds do
17574: LD_ADDR_VAR 0 7
17578: PUSH
17579: LD_VAR 0 2
17583: PUSH
17584: FOR_IN
17585: IFFALSE 17801
// begin if IsInUnit ( i ) then
17587: LD_VAR 0 7
17591: PPUSH
17592: CALL_OW 310
17596: IFFALSE 17607
// ComExitBuilding ( i ) ;
17598: LD_VAR 0 7
17602: PPUSH
17603: CALL_OW 122
// if GetLives ( i ) > 333 then
17607: LD_VAR 0 7
17611: PPUSH
17612: CALL_OW 256
17616: PUSH
17617: LD_INT 333
17619: GREATER
17620: IFFALSE 17648
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
17622: LD_VAR 0 7
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: LD_VAR 0 7
17636: PPUSH
17637: CALL_OW 74
17641: PPUSH
17642: CALL_OW 115
17646: GO 17799
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
17648: LD_ADDR_VAR 0 8
17652: PUSH
17653: LD_EXP 44
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 30
17669: PUSH
17670: LD_INT 0
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 30
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 30
17689: PUSH
17690: LD_INT 6
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 72
17707: PPUSH
17708: LD_VAR 0 7
17712: PPUSH
17713: CALL_OW 74
17717: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
17718: LD_VAR 0 7
17722: PPUSH
17723: LD_VAR 0 8
17727: PPUSH
17728: CALL_OW 250
17732: PPUSH
17733: LD_INT 3
17735: PPUSH
17736: LD_INT 5
17738: PPUSH
17739: CALL_OW 272
17743: PPUSH
17744: LD_VAR 0 8
17748: PPUSH
17749: CALL_OW 251
17753: PPUSH
17754: LD_INT 3
17756: PPUSH
17757: LD_INT 5
17759: PPUSH
17760: CALL_OW 273
17764: PPUSH
17765: CALL_OW 111
// SetTag ( i , 0 ) ;
17769: LD_VAR 0 7
17773: PPUSH
17774: LD_INT 0
17776: PPUSH
17777: CALL_OW 109
// solds := solds diff i ;
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_VAR 0 7
17795: DIFF
17796: ST_TO_ADDR
// continue ;
17797: GO 17584
// end ; end ;
17799: GO 17584
17801: POP
17802: POP
// until solds ;
17803: LD_VAR 0 2
17807: IFFALSE 17479
// MC_Reset ( base , 18 ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_INT 18
17816: PPUSH
17817: CALL 60612 0 2
// end ;
17821: LD_VAR 0 4
17825: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
17826: LD_INT 0
17828: PPUSH
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
17844: LD_ADDR_VAR 0 12
17848: PUSH
17849: LD_EXP 44
17853: PUSH
17854: LD_VAR 0 1
17858: ARRAY
17859: PPUSH
17860: LD_INT 25
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PPUSH
17870: CALL_OW 72
17874: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
17875: LD_ADDR_VAR 0 8
17879: PUSH
17880: LD_EXP 44
17884: PUSH
17885: LD_VAR 0 1
17889: ARRAY
17890: PPUSH
17891: LD_INT 2
17893: PUSH
17894: LD_INT 25
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 25
17906: PUSH
17907: LD_INT 5
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 25
17916: PUSH
17917: LD_INT 8
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 9
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 72
17945: ST_TO_ADDR
// if not defenders and not solds then
17946: LD_VAR 0 2
17950: NOT
17951: PUSH
17952: LD_VAR 0 8
17956: NOT
17957: AND
17958: IFFALSE 17962
// exit ;
17960: GO 19328
// depot_under_attack := false ;
17962: LD_ADDR_VAR 0 16
17966: PUSH
17967: LD_INT 0
17969: ST_TO_ADDR
// sold_defenders := [ ] ;
17970: LD_ADDR_VAR 0 17
17974: PUSH
17975: EMPTY
17976: ST_TO_ADDR
// if mechs then
17977: LD_VAR 0 12
17981: IFFALSE 18110
// for i in defenders do
17983: LD_ADDR_VAR 0 5
17987: PUSH
17988: LD_VAR 0 2
17992: PUSH
17993: FOR_IN
17994: IFFALSE 18108
// begin SetTag ( i , 20 ) ;
17996: LD_VAR 0 5
18000: PPUSH
18001: LD_INT 20
18003: PPUSH
18004: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
18008: LD_VAR 0 5
18012: PPUSH
18013: CALL_OW 263
18017: PUSH
18018: LD_INT 1
18020: EQUAL
18021: PUSH
18022: LD_VAR 0 5
18026: PPUSH
18027: CALL_OW 311
18031: NOT
18032: AND
18033: PUSH
18034: LD_VAR 0 12
18038: AND
18039: IFFALSE 18106
// begin un := mechs [ 1 ] ;
18041: LD_ADDR_VAR 0 10
18045: PUSH
18046: LD_VAR 0 12
18050: PUSH
18051: LD_INT 1
18053: ARRAY
18054: ST_TO_ADDR
// ComExitBuilding ( un ) ;
18055: LD_VAR 0 10
18059: PPUSH
18060: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
18064: LD_VAR 0 10
18068: PPUSH
18069: LD_VAR 0 5
18073: PPUSH
18074: CALL_OW 180
// SetTag ( un , 19 ) ;
18078: LD_VAR 0 10
18082: PPUSH
18083: LD_INT 19
18085: PPUSH
18086: CALL_OW 109
// mechs := mechs diff un ;
18090: LD_ADDR_VAR 0 12
18094: PUSH
18095: LD_VAR 0 12
18099: PUSH
18100: LD_VAR 0 10
18104: DIFF
18105: ST_TO_ADDR
// end ; end ;
18106: GO 17993
18108: POP
18109: POP
// if solds then
18110: LD_VAR 0 8
18114: IFFALSE 18173
// for i in solds do
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_VAR 0 8
18125: PUSH
18126: FOR_IN
18127: IFFALSE 18171
// if not GetTag ( i ) then
18129: LD_VAR 0 5
18133: PPUSH
18134: CALL_OW 110
18138: NOT
18139: IFFALSE 18169
// begin defenders := defenders union i ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_VAR 0 2
18150: PUSH
18151: LD_VAR 0 5
18155: UNION
18156: ST_TO_ADDR
// SetTag ( i , 18 ) ;
18157: LD_VAR 0 5
18161: PPUSH
18162: LD_INT 18
18164: PPUSH
18165: CALL_OW 109
// end ;
18169: GO 18126
18171: POP
18172: POP
// repeat wait ( 0 0$1 ) ;
18173: LD_INT 35
18175: PPUSH
18176: CALL_OW 67
// enemy := mc_scan [ base ] ;
18180: LD_ADDR_VAR 0 3
18184: PUSH
18185: LD_EXP 67
18189: PUSH
18190: LD_VAR 0 1
18194: ARRAY
18195: ST_TO_ADDR
// for i in defenders do
18196: LD_ADDR_VAR 0 5
18200: PUSH
18201: LD_VAR 0 2
18205: PUSH
18206: FOR_IN
18207: IFFALSE 18892
// begin e := NearestUnitToUnit ( enemy , i ) ;
18209: LD_ADDR_VAR 0 13
18213: PUSH
18214: LD_VAR 0 3
18218: PPUSH
18219: LD_VAR 0 5
18223: PPUSH
18224: CALL_OW 74
18228: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
18229: LD_ADDR_VAR 0 16
18233: PUSH
18234: LD_EXP 44
18238: PUSH
18239: LD_VAR 0 1
18243: ARRAY
18244: PPUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 30
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 30
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 72
18277: NOT
18278: PUSH
18279: LD_EXP 44
18283: PUSH
18284: LD_VAR 0 1
18288: ARRAY
18289: PPUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 30
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 30
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: LIST
18317: PPUSH
18318: CALL_OW 72
18322: PPUSH
18323: CALL_OW 256
18327: PUSH
18328: LD_INT 600
18330: LESS
18331: OR
18332: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
18333: LD_VAR 0 5
18337: PPUSH
18338: CALL_OW 247
18342: PUSH
18343: LD_INT 2
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18598
18351: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
18352: LD_VAR 0 5
18356: PPUSH
18357: CALL_OW 256
18361: PUSH
18362: LD_INT 650
18364: GREATER
18365: PUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: LD_VAR 0 13
18375: PPUSH
18376: CALL_OW 296
18380: PUSH
18381: LD_INT 40
18383: LESS
18384: AND
18385: IFFALSE 18403
// ComAttackUnit ( i , e ) else
18387: LD_VAR 0 5
18391: PPUSH
18392: LD_VAR 0 13
18396: PPUSH
18397: CALL_OW 115
18401: GO 18481
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
18403: LD_VAR 0 5
18407: PPUSH
18408: LD_VAR 0 13
18412: PPUSH
18413: CALL_OW 296
18417: PUSH
18418: LD_INT 30
18420: GREATEREQUAL
18421: PUSH
18422: LD_VAR 0 5
18426: PPUSH
18427: CALL_OW 256
18431: PUSH
18432: LD_INT 650
18434: LESSEQUAL
18435: OR
18436: PUSH
18437: LD_VAR 0 5
18441: PPUSH
18442: LD_EXP 68
18446: PUSH
18447: LD_VAR 0 1
18451: ARRAY
18452: PPUSH
18453: CALL_OW 308
18457: NOT
18458: AND
18459: IFFALSE 18481
// ComMoveToArea ( i , mc_parking [ base ] ) ;
18461: LD_VAR 0 5
18465: PPUSH
18466: LD_EXP 68
18470: PUSH
18471: LD_VAR 0 1
18475: ARRAY
18476: PPUSH
18477: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
18481: LD_VAR 0 5
18485: PPUSH
18486: CALL_OW 256
18490: PUSH
18491: LD_INT 998
18493: LESS
18494: PUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL_OW 263
18504: PUSH
18505: LD_INT 1
18507: EQUAL
18508: AND
18509: PUSH
18510: LD_VAR 0 5
18514: PPUSH
18515: CALL_OW 311
18519: AND
18520: PUSH
18521: LD_VAR 0 5
18525: PPUSH
18526: LD_EXP 68
18530: PUSH
18531: LD_VAR 0 1
18535: ARRAY
18536: PPUSH
18537: CALL_OW 308
18541: AND
18542: IFFALSE 18596
// begin mech := IsDrivenBy ( i ) ;
18544: LD_ADDR_VAR 0 9
18548: PUSH
18549: LD_VAR 0 5
18553: PPUSH
18554: CALL_OW 311
18558: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18559: LD_VAR 0 9
18563: PPUSH
18564: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18568: LD_VAR 0 9
18572: PPUSH
18573: LD_VAR 0 5
18577: PPUSH
18578: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
18582: LD_VAR 0 9
18586: PPUSH
18587: LD_VAR 0 5
18591: PPUSH
18592: CALL_OW 180
// end ; end ; unit_human :
18596: GO 18863
18598: LD_INT 1
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18862
18606: POP
// begin b := IsInUnit ( i ) ;
18607: LD_ADDR_VAR 0 18
18611: PUSH
18612: LD_VAR 0 5
18616: PPUSH
18617: CALL_OW 310
18621: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
18622: LD_ADDR_VAR 0 19
18626: PUSH
18627: LD_VAR 0 18
18631: NOT
18632: PUSH
18633: LD_VAR 0 18
18637: PPUSH
18638: CALL_OW 266
18642: PUSH
18643: LD_INT 32
18645: PUSH
18646: LD_INT 31
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: IN
18653: OR
18654: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
18655: LD_VAR 0 16
18659: PUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PPUSH
18675: CALL_OW 72
18679: PUSH
18680: LD_INT 1
18682: LESSEQUAL
18683: OR
18684: PUSH
18685: LD_VAR 0 19
18689: AND
18690: PUSH
18691: LD_VAR 0 5
18695: PUSH
18696: LD_VAR 0 17
18700: IN
18701: NOT
18702: AND
18703: IFFALSE 18796
// begin if b then
18705: LD_VAR 0 18
18709: IFFALSE 18758
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
18711: LD_VAR 0 18
18715: PPUSH
18716: LD_VAR 0 3
18720: PPUSH
18721: LD_VAR 0 18
18725: PPUSH
18726: CALL_OW 74
18730: PPUSH
18731: CALL_OW 296
18735: PUSH
18736: LD_INT 10
18738: LESS
18739: PUSH
18740: LD_VAR 0 18
18744: PPUSH
18745: CALL_OW 461
18749: PUSH
18750: LD_INT 7
18752: NONEQUAL
18753: AND
18754: IFFALSE 18758
// continue ;
18756: GO 18206
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
18758: LD_ADDR_VAR 0 17
18762: PUSH
18763: LD_VAR 0 17
18767: PPUSH
18768: LD_VAR 0 17
18772: PUSH
18773: LD_INT 1
18775: PLUS
18776: PPUSH
18777: LD_VAR 0 5
18781: PPUSH
18782: CALL_OW 1
18786: ST_TO_ADDR
// ComExitBuilding ( i ) ;
18787: LD_VAR 0 5
18791: PPUSH
18792: CALL_OW 122
// end ; if sold_defenders then
18796: LD_VAR 0 17
18800: IFFALSE 18860
// if i in sold_defenders then
18802: LD_VAR 0 5
18806: PUSH
18807: LD_VAR 0 17
18811: IN
18812: IFFALSE 18860
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
18814: LD_VAR 0 5
18818: PPUSH
18819: CALL_OW 314
18823: NOT
18824: PUSH
18825: LD_VAR 0 5
18829: PPUSH
18830: LD_VAR 0 13
18834: PPUSH
18835: CALL_OW 296
18839: PUSH
18840: LD_INT 30
18842: LESS
18843: AND
18844: IFFALSE 18860
// ComAttackUnit ( i , e ) ;
18846: LD_VAR 0 5
18850: PPUSH
18851: LD_VAR 0 13
18855: PPUSH
18856: CALL_OW 115
// end ; end ; end ;
18860: GO 18863
18862: POP
// if IsDead ( i ) then
18863: LD_VAR 0 5
18867: PPUSH
18868: CALL_OW 301
18872: IFFALSE 18890
// defenders := defenders diff i ;
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: LD_VAR 0 5
18888: DIFF
18889: ST_TO_ADDR
// end ;
18890: GO 18206
18892: POP
18893: POP
// until not enemy or not defenders ;
18894: LD_VAR 0 3
18898: NOT
18899: PUSH
18900: LD_VAR 0 2
18904: NOT
18905: OR
18906: IFFALSE 18173
// MC_Reset ( base , 18 ) ;
18908: LD_VAR 0 1
18912: PPUSH
18913: LD_INT 18
18915: PPUSH
18916: CALL 60612 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 2
18929: PUSH
18930: LD_VAR 0 2
18934: PPUSH
18935: LD_INT 2
18937: PUSH
18938: LD_INT 25
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 25
18950: PUSH
18951: LD_INT 5
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 8
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 9
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: PPUSH
18985: CALL_OW 72
18989: DIFF
18990: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
18991: LD_VAR 0 3
18995: NOT
18996: PUSH
18997: LD_VAR 0 2
19001: PPUSH
19002: LD_INT 21
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 72
19016: AND
19017: IFFALSE 19279
// begin tmp := FilterByTag ( defenders , 19 ) ;
19019: LD_ADDR_VAR 0 11
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_INT 19
19031: PPUSH
19032: CALL 55444 0 2
19036: ST_TO_ADDR
// if tmp then
19037: LD_VAR 0 11
19041: IFFALSE 19111
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
19043: LD_ADDR_VAR 0 11
19047: PUSH
19048: LD_VAR 0 11
19052: PPUSH
19053: LD_INT 25
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 72
19067: ST_TO_ADDR
// if tmp then
19068: LD_VAR 0 11
19072: IFFALSE 19111
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
19074: LD_ADDR_EXP 56
19078: PUSH
19079: LD_EXP 56
19083: PPUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: LD_EXP 56
19093: PUSH
19094: LD_VAR 0 1
19098: ARRAY
19099: PUSH
19100: LD_VAR 0 11
19104: UNION
19105: PPUSH
19106: CALL_OW 1
19110: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_INT 19
19118: PPUSH
19119: CALL 60612 0 2
// repeat wait ( 0 0$1 ) ;
19123: LD_INT 35
19125: PPUSH
19126: CALL_OW 67
// for i in defenders do
19130: LD_ADDR_VAR 0 5
19134: PUSH
19135: LD_VAR 0 2
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19230
// begin if not IsInArea ( i , mc_parking [ base ] ) then
19143: LD_VAR 0 5
19147: PPUSH
19148: LD_EXP 68
19152: PUSH
19153: LD_VAR 0 1
19157: ARRAY
19158: PPUSH
19159: CALL_OW 308
19163: NOT
19164: IFFALSE 19188
// ComMoveToArea ( i , mc_parking [ base ] ) else
19166: LD_VAR 0 5
19170: PPUSH
19171: LD_EXP 68
19175: PUSH
19176: LD_VAR 0 1
19180: ARRAY
19181: PPUSH
19182: CALL_OW 113
19186: GO 19228
// if GetControl ( i ) = control_manual then
19188: LD_VAR 0 5
19192: PPUSH
19193: CALL_OW 263
19197: PUSH
19198: LD_INT 1
19200: EQUAL
19201: IFFALSE 19228
// if IsDrivenBy ( i ) then
19203: LD_VAR 0 5
19207: PPUSH
19208: CALL_OW 311
19212: IFFALSE 19228
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
19214: LD_VAR 0 5
19218: PPUSH
19219: CALL_OW 311
19223: PPUSH
19224: CALL_OW 121
// end ;
19228: GO 19140
19230: POP
19231: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
19232: LD_VAR 0 2
19236: PPUSH
19237: LD_INT 95
19239: PUSH
19240: LD_EXP 68
19244: PUSH
19245: LD_VAR 0 1
19249: ARRAY
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 72
19259: PUSH
19260: LD_VAR 0 2
19264: EQUAL
19265: PUSH
19266: LD_EXP 67
19270: PUSH
19271: LD_VAR 0 1
19275: ARRAY
19276: OR
19277: IFFALSE 19123
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
19279: LD_ADDR_EXP 66
19283: PUSH
19284: LD_EXP 66
19288: PPUSH
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_EXP 66
19298: PUSH
19299: LD_VAR 0 1
19303: ARRAY
19304: PUSH
19305: LD_VAR 0 2
19309: UNION
19310: PPUSH
19311: CALL_OW 1
19315: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
19316: LD_VAR 0 1
19320: PPUSH
19321: LD_INT 20
19323: PPUSH
19324: CALL 60612 0 2
// end ;
19328: LD_VAR 0 4
19332: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
19337: PPUSH
19338: PPUSH
// result := false ;
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// side := GetSide ( unit ) ;
19347: LD_ADDR_VAR 0 3
19351: PUSH
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 255
19361: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19362: LD_ADDR_VAR 0 4
19366: PUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 248
19376: ST_TO_ADDR
// case nat of 1 :
19377: LD_VAR 0 4
19381: PUSH
19382: LD_INT 1
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19401
19390: POP
// tech := tech_lassight ; 2 :
19391: LD_ADDR_VAR 0 5
19395: PUSH
19396: LD_INT 12
19398: ST_TO_ADDR
19399: GO 19440
19401: LD_INT 2
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19420
19409: POP
// tech := tech_mortar ; 3 :
19410: LD_ADDR_VAR 0 5
19414: PUSH
19415: LD_INT 41
19417: ST_TO_ADDR
19418: GO 19440
19420: LD_INT 3
19422: DOUBLE
19423: EQUAL
19424: IFTRUE 19428
19426: GO 19439
19428: POP
// tech := tech_bazooka ; end ;
19429: LD_ADDR_VAR 0 5
19433: PUSH
19434: LD_INT 44
19436: ST_TO_ADDR
19437: GO 19440
19439: POP
// if Researched ( side , tech ) then
19440: LD_VAR 0 3
19444: PPUSH
19445: LD_VAR 0 5
19449: PPUSH
19450: CALL_OW 325
19454: IFFALSE 19481
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: LD_INT 8
19466: PUSH
19467: LD_INT 9
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: PUSH
19475: LD_VAR 0 4
19479: ARRAY
19480: ST_TO_ADDR
// end ;
19481: LD_VAR 0 2
19485: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19486: LD_INT 0
19488: PPUSH
19489: PPUSH
19490: PPUSH
// if not mines then
19491: LD_VAR 0 2
19495: NOT
19496: IFFALSE 19500
// exit ;
19498: GO 19644
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19500: LD_ADDR_VAR 0 5
19504: PUSH
19505: LD_INT 81
19507: PUSH
19508: LD_VAR 0 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 3
19519: PUSH
19520: LD_INT 21
19522: PUSH
19523: LD_INT 3
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: ST_TO_ADDR
// for i in mines do
19543: LD_ADDR_VAR 0 4
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19642
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19556: LD_VAR 0 4
19560: PUSH
19561: LD_INT 1
19563: ARRAY
19564: PPUSH
19565: LD_VAR 0 4
19569: PUSH
19570: LD_INT 2
19572: ARRAY
19573: PPUSH
19574: CALL_OW 458
19578: NOT
19579: IFFALSE 19583
// continue ;
19581: GO 19553
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19583: LD_VAR 0 4
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: PPUSH
19592: LD_VAR 0 4
19596: PUSH
19597: LD_INT 2
19599: ARRAY
19600: PPUSH
19601: CALL_OW 428
19605: PUSH
19606: LD_VAR 0 5
19610: IN
19611: IFFALSE 19640
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19613: LD_VAR 0 4
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: PPUSH
19622: LD_VAR 0 4
19626: PUSH
19627: LD_INT 2
19629: ARRAY
19630: PPUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 456
// end ;
19640: GO 19553
19642: POP
19643: POP
// end ;
19644: LD_VAR 0 3
19648: RET
// export function Count ( array ) ; var i ; begin
19649: LD_INT 0
19651: PPUSH
19652: PPUSH
// result := 0 ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 0
19660: ST_TO_ADDR
// for i in array do
19661: LD_ADDR_VAR 0 3
19665: PUSH
19666: LD_VAR 0 1
19670: PUSH
19671: FOR_IN
19672: IFFALSE 19696
// if i then
19674: LD_VAR 0 3
19678: IFFALSE 19694
// result := result + 1 ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 2
19689: PUSH
19690: LD_INT 1
19692: PLUS
19693: ST_TO_ADDR
19694: GO 19671
19696: POP
19697: POP
// end ;
19698: LD_VAR 0 2
19702: RET
// export function IsEmpty ( building ) ; begin
19703: LD_INT 0
19705: PPUSH
// if not building then
19706: LD_VAR 0 1
19710: NOT
19711: IFFALSE 19715
// exit ;
19713: GO 19758
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: LD_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 58
19744: PUSH
19745: EMPTY
19746: LIST
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PPUSH
19752: CALL_OW 69
19756: IN
19757: ST_TO_ADDR
// end ;
19758: LD_VAR 0 2
19762: RET
// export function IsNotFull ( building ) ; begin
19763: LD_INT 0
19765: PPUSH
// if not building then
19766: LD_VAR 0 1
19770: NOT
19771: IFFALSE 19775
// exit ;
19773: GO 19794
// result := UnitsInside ( building ) < 6 ;
19775: LD_ADDR_VAR 0 2
19779: PUSH
19780: LD_VAR 0 1
19784: PPUSH
19785: CALL_OW 313
19789: PUSH
19790: LD_INT 6
19792: LESS
19793: ST_TO_ADDR
// end ;
19794: LD_VAR 0 2
19798: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
19803: PPUSH
19804: PPUSH
// tmp := [ ] ;
19805: LD_ADDR_VAR 0 3
19809: PUSH
19810: EMPTY
19811: ST_TO_ADDR
// list := [ ] ;
19812: LD_ADDR_VAR 0 5
19816: PUSH
19817: EMPTY
19818: ST_TO_ADDR
// for i = 16 to 25 do
19819: LD_ADDR_VAR 0 4
19823: PUSH
19824: DOUBLE
19825: LD_INT 16
19827: DEC
19828: ST_TO_ADDR
19829: LD_INT 25
19831: PUSH
19832: FOR_TO
19833: IFFALSE 19906
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19835: LD_ADDR_VAR 0 3
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 255
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 91
19864: PUSH
19865: LD_VAR 0 1
19869: PUSH
19870: LD_INT 6
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 30
19880: PUSH
19881: LD_VAR 0 4
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: PPUSH
19898: CALL_OW 69
19902: ADD
19903: ST_TO_ADDR
19904: GO 19832
19906: POP
19907: POP
// for i = 1 to tmp do
19908: LD_ADDR_VAR 0 4
19912: PUSH
19913: DOUBLE
19914: LD_INT 1
19916: DEC
19917: ST_TO_ADDR
19918: LD_VAR 0 3
19922: PUSH
19923: FOR_TO
19924: IFFALSE 20012
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19926: LD_ADDR_VAR 0 5
19930: PUSH
19931: LD_VAR 0 5
19935: PUSH
19936: LD_VAR 0 3
19940: PUSH
19941: LD_VAR 0 4
19945: ARRAY
19946: PPUSH
19947: CALL_OW 266
19951: PUSH
19952: LD_VAR 0 3
19956: PUSH
19957: LD_VAR 0 4
19961: ARRAY
19962: PPUSH
19963: CALL_OW 250
19967: PUSH
19968: LD_VAR 0 3
19972: PUSH
19973: LD_VAR 0 4
19977: ARRAY
19978: PPUSH
19979: CALL_OW 251
19983: PUSH
19984: LD_VAR 0 3
19988: PUSH
19989: LD_VAR 0 4
19993: ARRAY
19994: PPUSH
19995: CALL_OW 254
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: ADD
20009: ST_TO_ADDR
20010: GO 19923
20012: POP
20013: POP
// result := list ;
20014: LD_ADDR_VAR 0 2
20018: PUSH
20019: LD_VAR 0 5
20023: ST_TO_ADDR
// end ;
20024: LD_VAR 0 2
20028: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20029: LD_INT 0
20031: PPUSH
20032: PPUSH
20033: PPUSH
20034: PPUSH
20035: PPUSH
20036: PPUSH
20037: PPUSH
// if not factory then
20038: LD_VAR 0 1
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20572
// if control = control_apeman then
20047: LD_VAR 0 4
20051: PUSH
20052: LD_INT 5
20054: EQUAL
20055: IFFALSE 20164
// begin tmp := UnitsInside ( factory ) ;
20057: LD_ADDR_VAR 0 8
20061: PUSH
20062: LD_VAR 0 1
20066: PPUSH
20067: CALL_OW 313
20071: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20072: LD_VAR 0 8
20076: PPUSH
20077: LD_INT 25
20079: PUSH
20080: LD_INT 12
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PPUSH
20087: CALL_OW 72
20091: NOT
20092: IFFALSE 20102
// control := control_manual ;
20094: LD_ADDR_VAR 0 4
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20102: LD_ADDR_VAR 0 8
20106: PUSH
20107: LD_VAR 0 1
20111: PPUSH
20112: CALL 19799 0 1
20116: ST_TO_ADDR
// if tmp then
20117: LD_VAR 0 8
20121: IFFALSE 20164
// begin for i in tmp do
20123: LD_ADDR_VAR 0 7
20127: PUSH
20128: LD_VAR 0 8
20132: PUSH
20133: FOR_IN
20134: IFFALSE 20162
// if i [ 1 ] = b_ext_radar then
20136: LD_VAR 0 7
20140: PUSH
20141: LD_INT 1
20143: ARRAY
20144: PUSH
20145: LD_INT 20
20147: EQUAL
20148: IFFALSE 20160
// begin control := control_remote ;
20150: LD_ADDR_VAR 0 4
20154: PUSH
20155: LD_INT 2
20157: ST_TO_ADDR
// break ;
20158: GO 20162
// end ;
20160: GO 20133
20162: POP
20163: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20164: LD_VAR 0 1
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_VAR 0 3
20178: PPUSH
20179: LD_VAR 0 4
20183: PPUSH
20184: LD_VAR 0 5
20188: PPUSH
20189: CALL_OW 448
20193: IFFALSE 20228
// begin result := [ chassis , engine , control , weapon ] ;
20195: LD_ADDR_VAR 0 6
20199: PUSH
20200: LD_VAR 0 2
20204: PUSH
20205: LD_VAR 0 3
20209: PUSH
20210: LD_VAR 0 4
20214: PUSH
20215: LD_VAR 0 5
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// exit ;
20226: GO 20572
// end ; _chassis := AvailableChassisList ( factory ) ;
20228: LD_ADDR_VAR 0 9
20232: PUSH
20233: LD_VAR 0 1
20237: PPUSH
20238: CALL_OW 475
20242: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20243: LD_ADDR_VAR 0 11
20247: PUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 476
20257: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20258: LD_ADDR_VAR 0 12
20262: PUSH
20263: LD_VAR 0 1
20267: PPUSH
20268: CALL_OW 477
20272: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20273: LD_ADDR_VAR 0 10
20277: PUSH
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 478
20287: ST_TO_ADDR
// if not chassis in _chassis then
20288: LD_VAR 0 2
20292: PUSH
20293: LD_VAR 0 9
20297: IN
20298: NOT
20299: IFFALSE 20325
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20301: LD_ADDR_VAR 0 2
20305: PUSH
20306: LD_VAR 0 9
20310: PUSH
20311: LD_INT 1
20313: PPUSH
20314: LD_VAR 0 9
20318: PPUSH
20319: CALL_OW 12
20323: ARRAY
20324: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_VAR 0 3
20334: PPUSH
20335: CALL 20577 0 2
20339: NOT
20340: IFFALSE 20399
// repeat engine := _engine [ 1 ] ;
20342: LD_ADDR_VAR 0 3
20346: PUSH
20347: LD_VAR 0 11
20351: PUSH
20352: LD_INT 1
20354: ARRAY
20355: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20356: LD_ADDR_VAR 0 11
20360: PUSH
20361: LD_VAR 0 11
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 3
20373: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: CALL 20577 0 2
20388: PUSH
20389: LD_VAR 0 11
20393: PUSH
20394: EMPTY
20395: EQUAL
20396: OR
20397: IFFALSE 20342
// if not control in _control then
20399: LD_VAR 0 4
20403: PUSH
20404: LD_VAR 0 12
20408: IN
20409: NOT
20410: IFFALSE 20436
// control := _control [ rand ( 1 , _control ) ] ;
20412: LD_ADDR_VAR 0 4
20416: PUSH
20417: LD_VAR 0 12
20421: PUSH
20422: LD_INT 1
20424: PPUSH
20425: LD_VAR 0 12
20429: PPUSH
20430: CALL_OW 12
20434: ARRAY
20435: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20436: LD_VAR 0 2
20440: PPUSH
20441: LD_VAR 0 5
20445: PPUSH
20446: CALL 20797 0 2
20450: NOT
20451: IFFALSE 20510
// repeat weapon := _weapon [ 1 ] ;
20453: LD_ADDR_VAR 0 5
20457: PUSH
20458: LD_VAR 0 10
20462: PUSH
20463: LD_INT 1
20465: ARRAY
20466: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20467: LD_ADDR_VAR 0 10
20471: PUSH
20472: LD_VAR 0 10
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL_OW 3
20484: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 5
20494: PPUSH
20495: CALL 20797 0 2
20499: PUSH
20500: LD_VAR 0 10
20504: PUSH
20505: EMPTY
20506: EQUAL
20507: OR
20508: IFFALSE 20453
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20510: LD_VAR 0 1
20514: PPUSH
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_VAR 0 4
20529: PPUSH
20530: LD_VAR 0 5
20534: PPUSH
20535: CALL_OW 448
20539: IFFALSE 20572
// result := [ chassis , engine , control , weapon ] ;
20541: LD_ADDR_VAR 0 6
20545: PUSH
20546: LD_VAR 0 2
20550: PUSH
20551: LD_VAR 0 3
20555: PUSH
20556: LD_VAR 0 4
20560: PUSH
20561: LD_VAR 0 5
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: ST_TO_ADDR
// end ;
20572: LD_VAR 0 6
20576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20577: LD_INT 0
20579: PPUSH
// if not chassis or not engine then
20580: LD_VAR 0 1
20584: NOT
20585: PUSH
20586: LD_VAR 0 2
20590: NOT
20591: OR
20592: IFFALSE 20596
// exit ;
20594: GO 20792
// case engine of engine_solar :
20596: LD_VAR 0 2
20600: PUSH
20601: LD_INT 2
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20647
20609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20610: LD_ADDR_VAR 0 3
20614: PUSH
20615: LD_INT 11
20617: PUSH
20618: LD_INT 12
20620: PUSH
20621: LD_INT 13
20623: PUSH
20624: LD_INT 14
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: ST_TO_ADDR
20645: GO 20776
20647: LD_INT 1
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20717
20655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20656: LD_ADDR_VAR 0 3
20660: PUSH
20661: LD_INT 11
20663: PUSH
20664: LD_INT 12
20666: PUSH
20667: LD_INT 13
20669: PUSH
20670: LD_INT 14
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: LD_INT 4
20684: PUSH
20685: LD_INT 5
20687: PUSH
20688: LD_INT 21
20690: PUSH
20691: LD_INT 23
20693: PUSH
20694: LD_INT 22
20696: PUSH
20697: LD_INT 24
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: ST_TO_ADDR
20715: GO 20776
20717: LD_INT 3
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20775
20725: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_INT 13
20733: PUSH
20734: LD_INT 14
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: LD_INT 3
20742: PUSH
20743: LD_INT 4
20745: PUSH
20746: LD_INT 5
20748: PUSH
20749: LD_INT 21
20751: PUSH
20752: LD_INT 22
20754: PUSH
20755: LD_INT 23
20757: PUSH
20758: LD_INT 24
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: ST_TO_ADDR
20773: GO 20776
20775: POP
// result := ( chassis in result ) ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_VAR 0 1
20785: PUSH
20786: LD_VAR 0 3
20790: IN
20791: ST_TO_ADDR
// end ;
20792: LD_VAR 0 3
20796: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20797: LD_INT 0
20799: PPUSH
// if not chassis or not weapon then
20800: LD_VAR 0 1
20804: NOT
20805: PUSH
20806: LD_VAR 0 2
20810: NOT
20811: OR
20812: IFFALSE 20816
// exit ;
20814: GO 21842
// case weapon of us_machine_gun :
20816: LD_VAR 0 2
20820: PUSH
20821: LD_INT 2
20823: DOUBLE
20824: EQUAL
20825: IFTRUE 20829
20827: GO 20859
20829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20830: LD_ADDR_VAR 0 3
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: LD_INT 3
20843: PUSH
20844: LD_INT 4
20846: PUSH
20847: LD_INT 5
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
20857: GO 21826
20859: LD_INT 3
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20897
20867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20868: LD_ADDR_VAR 0 3
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: LD_INT 4
20884: PUSH
20885: LD_INT 5
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: ST_TO_ADDR
20895: GO 21826
20897: LD_INT 11
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20935
20905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 3
20919: PUSH
20920: LD_INT 4
20922: PUSH
20923: LD_INT 5
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: ST_TO_ADDR
20933: GO 21826
20935: LD_INT 4
20937: DOUBLE
20938: EQUAL
20939: IFTRUE 20943
20941: GO 20969
20943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20944: LD_ADDR_VAR 0 3
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: LD_INT 3
20954: PUSH
20955: LD_INT 4
20957: PUSH
20958: LD_INT 5
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: ST_TO_ADDR
20967: GO 21826
20969: LD_INT 5
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 21003
20977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20978: LD_ADDR_VAR 0 3
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 3
20988: PUSH
20989: LD_INT 4
20991: PUSH
20992: LD_INT 5
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: ST_TO_ADDR
21001: GO 21826
21003: LD_INT 9
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21037
21011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21012: LD_ADDR_VAR 0 3
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: LD_INT 4
21025: PUSH
21026: LD_INT 5
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: ST_TO_ADDR
21035: GO 21826
21037: LD_INT 7
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21071
21045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21046: LD_ADDR_VAR 0 3
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 3
21056: PUSH
21057: LD_INT 4
21059: PUSH
21060: LD_INT 5
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
21069: GO 21826
21071: LD_INT 12
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21105
21079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 3
21090: PUSH
21091: LD_INT 4
21093: PUSH
21094: LD_INT 5
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: ST_TO_ADDR
21103: GO 21826
21105: LD_INT 13
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21139
21113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21114: LD_ADDR_VAR 0 3
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: LD_INT 4
21127: PUSH
21128: LD_INT 5
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: ST_TO_ADDR
21137: GO 21826
21139: LD_INT 14
21141: DOUBLE
21142: EQUAL
21143: IFTRUE 21147
21145: GO 21165
21147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21148: LD_ADDR_VAR 0 3
21152: PUSH
21153: LD_INT 4
21155: PUSH
21156: LD_INT 5
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: ST_TO_ADDR
21163: GO 21826
21165: LD_INT 6
21167: DOUBLE
21168: EQUAL
21169: IFTRUE 21173
21171: GO 21191
21173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21174: LD_ADDR_VAR 0 3
21178: PUSH
21179: LD_INT 4
21181: PUSH
21182: LD_INT 5
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 21826
21191: LD_INT 10
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21217
21199: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21200: LD_ADDR_VAR 0 3
21204: PUSH
21205: LD_INT 4
21207: PUSH
21208: LD_INT 5
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: ST_TO_ADDR
21215: GO 21826
21217: LD_INT 22
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21251
21225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21226: LD_ADDR_VAR 0 3
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 13
21239: PUSH
21240: LD_INT 14
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: ST_TO_ADDR
21249: GO 21826
21251: LD_INT 23
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21285
21259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21260: LD_ADDR_VAR 0 3
21264: PUSH
21265: LD_INT 11
21267: PUSH
21268: LD_INT 12
21270: PUSH
21271: LD_INT 13
21273: PUSH
21274: LD_INT 14
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: ST_TO_ADDR
21283: GO 21826
21285: LD_INT 24
21287: DOUBLE
21288: EQUAL
21289: IFTRUE 21293
21291: GO 21319
21293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21294: LD_ADDR_VAR 0 3
21298: PUSH
21299: LD_INT 11
21301: PUSH
21302: LD_INT 12
21304: PUSH
21305: LD_INT 13
21307: PUSH
21308: LD_INT 14
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: ST_TO_ADDR
21317: GO 21826
21319: LD_INT 30
21321: DOUBLE
21322: EQUAL
21323: IFTRUE 21327
21325: GO 21353
21327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21328: LD_ADDR_VAR 0 3
21332: PUSH
21333: LD_INT 11
21335: PUSH
21336: LD_INT 12
21338: PUSH
21339: LD_INT 13
21341: PUSH
21342: LD_INT 14
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: ST_TO_ADDR
21351: GO 21826
21353: LD_INT 25
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21379
21361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21362: LD_ADDR_VAR 0 3
21366: PUSH
21367: LD_INT 13
21369: PUSH
21370: LD_INT 14
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: ST_TO_ADDR
21377: GO 21826
21379: LD_INT 27
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21405
21387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21388: LD_ADDR_VAR 0 3
21392: PUSH
21393: LD_INT 13
21395: PUSH
21396: LD_INT 14
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: ST_TO_ADDR
21403: GO 21826
21405: LD_INT 28
21407: DOUBLE
21408: EQUAL
21409: IFTRUE 21413
21411: GO 21431
21413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21414: LD_ADDR_VAR 0 3
21418: PUSH
21419: LD_INT 13
21421: PUSH
21422: LD_INT 14
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: ST_TO_ADDR
21429: GO 21826
21431: LD_INT 29
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21457
21439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21440: LD_ADDR_VAR 0 3
21444: PUSH
21445: LD_INT 13
21447: PUSH
21448: LD_INT 14
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: ST_TO_ADDR
21455: GO 21826
21457: LD_INT 31
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21483
21465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_INT 13
21473: PUSH
21474: LD_INT 14
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: ST_TO_ADDR
21481: GO 21826
21483: LD_INT 26
21485: DOUBLE
21486: EQUAL
21487: IFTRUE 21491
21489: GO 21509
21491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21492: LD_ADDR_VAR 0 3
21496: PUSH
21497: LD_INT 13
21499: PUSH
21500: LD_INT 14
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: ST_TO_ADDR
21507: GO 21826
21509: LD_INT 42
21511: DOUBLE
21512: EQUAL
21513: IFTRUE 21517
21515: GO 21543
21517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21518: LD_ADDR_VAR 0 3
21522: PUSH
21523: LD_INT 21
21525: PUSH
21526: LD_INT 22
21528: PUSH
21529: LD_INT 23
21531: PUSH
21532: LD_INT 24
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: ST_TO_ADDR
21541: GO 21826
21543: LD_INT 43
21545: DOUBLE
21546: EQUAL
21547: IFTRUE 21551
21549: GO 21577
21551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_INT 21
21559: PUSH
21560: LD_INT 22
21562: PUSH
21563: LD_INT 23
21565: PUSH
21566: LD_INT 24
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: ST_TO_ADDR
21575: GO 21826
21577: LD_INT 44
21579: DOUBLE
21580: EQUAL
21581: IFTRUE 21585
21583: GO 21611
21585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: LD_INT 21
21593: PUSH
21594: LD_INT 22
21596: PUSH
21597: LD_INT 23
21599: PUSH
21600: LD_INT 24
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: ST_TO_ADDR
21609: GO 21826
21611: LD_INT 45
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21645
21619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21620: LD_ADDR_VAR 0 3
21624: PUSH
21625: LD_INT 21
21627: PUSH
21628: LD_INT 22
21630: PUSH
21631: LD_INT 23
21633: PUSH
21634: LD_INT 24
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: ST_TO_ADDR
21643: GO 21826
21645: LD_INT 49
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21679
21653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_INT 21
21661: PUSH
21662: LD_INT 22
21664: PUSH
21665: LD_INT 23
21667: PUSH
21668: LD_INT 24
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: ST_TO_ADDR
21677: GO 21826
21679: LD_INT 51
21681: DOUBLE
21682: EQUAL
21683: IFTRUE 21687
21685: GO 21713
21687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21688: LD_ADDR_VAR 0 3
21692: PUSH
21693: LD_INT 21
21695: PUSH
21696: LD_INT 22
21698: PUSH
21699: LD_INT 23
21701: PUSH
21702: LD_INT 24
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
21711: GO 21826
21713: LD_INT 52
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21747
21721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21722: LD_ADDR_VAR 0 3
21726: PUSH
21727: LD_INT 21
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_INT 23
21735: PUSH
21736: LD_INT 24
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: ST_TO_ADDR
21745: GO 21826
21747: LD_INT 53
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21773
21755: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_INT 23
21763: PUSH
21764: LD_INT 24
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: ST_TO_ADDR
21771: GO 21826
21773: LD_INT 46
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21799
21781: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_INT 23
21789: PUSH
21790: LD_INT 24
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: ST_TO_ADDR
21797: GO 21826
21799: LD_INT 47
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21825
21807: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 23
21815: PUSH
21816: LD_INT 24
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
21823: GO 21826
21825: POP
// result := ( chassis in result ) ;
21826: LD_ADDR_VAR 0 3
21830: PUSH
21831: LD_VAR 0 1
21835: PUSH
21836: LD_VAR 0 3
21840: IN
21841: ST_TO_ADDR
// end ;
21842: LD_VAR 0 3
21846: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
// result := array ;
21856: LD_ADDR_VAR 0 5
21860: PUSH
21861: LD_VAR 0 1
21865: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21866: LD_VAR 0 1
21870: NOT
21871: PUSH
21872: LD_VAR 0 2
21876: NOT
21877: OR
21878: PUSH
21879: LD_VAR 0 3
21883: NOT
21884: OR
21885: PUSH
21886: LD_VAR 0 2
21890: PUSH
21891: LD_VAR 0 1
21895: GREATER
21896: OR
21897: PUSH
21898: LD_VAR 0 3
21902: PUSH
21903: LD_VAR 0 1
21907: GREATER
21908: OR
21909: IFFALSE 21913
// exit ;
21911: GO 22209
// if direction then
21913: LD_VAR 0 4
21917: IFFALSE 21981
// begin d := 1 ;
21919: LD_ADDR_VAR 0 9
21923: PUSH
21924: LD_INT 1
21926: ST_TO_ADDR
// if i_from > i_to then
21927: LD_VAR 0 2
21931: PUSH
21932: LD_VAR 0 3
21936: GREATER
21937: IFFALSE 21963
// length := ( array - i_from ) + i_to else
21939: LD_ADDR_VAR 0 11
21943: PUSH
21944: LD_VAR 0 1
21948: PUSH
21949: LD_VAR 0 2
21953: MINUS
21954: PUSH
21955: LD_VAR 0 3
21959: PLUS
21960: ST_TO_ADDR
21961: GO 21979
// length := i_to - i_from ;
21963: LD_ADDR_VAR 0 11
21967: PUSH
21968: LD_VAR 0 3
21972: PUSH
21973: LD_VAR 0 2
21977: MINUS
21978: ST_TO_ADDR
// end else
21979: GO 22042
// begin d := - 1 ;
21981: LD_ADDR_VAR 0 9
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: ST_TO_ADDR
// if i_from > i_to then
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: GREATER
22000: IFFALSE 22020
// length := i_from - i_to else
22002: LD_ADDR_VAR 0 11
22006: PUSH
22007: LD_VAR 0 2
22011: PUSH
22012: LD_VAR 0 3
22016: MINUS
22017: ST_TO_ADDR
22018: GO 22042
// length := ( array - i_to ) + i_from ;
22020: LD_ADDR_VAR 0 11
22024: PUSH
22025: LD_VAR 0 1
22029: PUSH
22030: LD_VAR 0 3
22034: MINUS
22035: PUSH
22036: LD_VAR 0 2
22040: PLUS
22041: ST_TO_ADDR
// end ; if not length then
22042: LD_VAR 0 11
22046: NOT
22047: IFFALSE 22051
// exit ;
22049: GO 22209
// tmp := array ;
22051: LD_ADDR_VAR 0 10
22055: PUSH
22056: LD_VAR 0 1
22060: ST_TO_ADDR
// for i = 1 to length do
22061: LD_ADDR_VAR 0 6
22065: PUSH
22066: DOUBLE
22067: LD_INT 1
22069: DEC
22070: ST_TO_ADDR
22071: LD_VAR 0 11
22075: PUSH
22076: FOR_TO
22077: IFFALSE 22197
// begin for j = 1 to array do
22079: LD_ADDR_VAR 0 7
22083: PUSH
22084: DOUBLE
22085: LD_INT 1
22087: DEC
22088: ST_TO_ADDR
22089: LD_VAR 0 1
22093: PUSH
22094: FOR_TO
22095: IFFALSE 22183
// begin k := j + d ;
22097: LD_ADDR_VAR 0 8
22101: PUSH
22102: LD_VAR 0 7
22106: PUSH
22107: LD_VAR 0 9
22111: PLUS
22112: ST_TO_ADDR
// if k > array then
22113: LD_VAR 0 8
22117: PUSH
22118: LD_VAR 0 1
22122: GREATER
22123: IFFALSE 22133
// k := 1 ;
22125: LD_ADDR_VAR 0 8
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// if not k then
22133: LD_VAR 0 8
22137: NOT
22138: IFFALSE 22150
// k := array ;
22140: LD_ADDR_VAR 0 8
22144: PUSH
22145: LD_VAR 0 1
22149: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22150: LD_ADDR_VAR 0 10
22154: PUSH
22155: LD_VAR 0 10
22159: PPUSH
22160: LD_VAR 0 8
22164: PPUSH
22165: LD_VAR 0 1
22169: PUSH
22170: LD_VAR 0 7
22174: ARRAY
22175: PPUSH
22176: CALL_OW 1
22180: ST_TO_ADDR
// end ;
22181: GO 22094
22183: POP
22184: POP
// array := tmp ;
22185: LD_ADDR_VAR 0 1
22189: PUSH
22190: LD_VAR 0 10
22194: ST_TO_ADDR
// end ;
22195: GO 22076
22197: POP
22198: POP
// result := array ;
22199: LD_ADDR_VAR 0 5
22203: PUSH
22204: LD_VAR 0 1
22208: ST_TO_ADDR
// end ;
22209: LD_VAR 0 5
22213: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22214: LD_INT 0
22216: PPUSH
22217: PPUSH
// result := 0 ;
22218: LD_ADDR_VAR 0 3
22222: PUSH
22223: LD_INT 0
22225: ST_TO_ADDR
// if not array or not value in array then
22226: LD_VAR 0 1
22230: NOT
22231: PUSH
22232: LD_VAR 0 2
22236: PUSH
22237: LD_VAR 0 1
22241: IN
22242: NOT
22243: OR
22244: IFFALSE 22248
// exit ;
22246: GO 22302
// for i = 1 to array do
22248: LD_ADDR_VAR 0 4
22252: PUSH
22253: DOUBLE
22254: LD_INT 1
22256: DEC
22257: ST_TO_ADDR
22258: LD_VAR 0 1
22262: PUSH
22263: FOR_TO
22264: IFFALSE 22300
// if value = array [ i ] then
22266: LD_VAR 0 2
22270: PUSH
22271: LD_VAR 0 1
22275: PUSH
22276: LD_VAR 0 4
22280: ARRAY
22281: EQUAL
22282: IFFALSE 22298
// begin result := i ;
22284: LD_ADDR_VAR 0 3
22288: PUSH
22289: LD_VAR 0 4
22293: ST_TO_ADDR
// exit ;
22294: POP
22295: POP
22296: GO 22302
// end ;
22298: GO 22263
22300: POP
22301: POP
// end ;
22302: LD_VAR 0 3
22306: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22307: LD_INT 0
22309: PPUSH
// vc_chassis := chassis ;
22310: LD_ADDR_OWVAR 37
22314: PUSH
22315: LD_VAR 0 1
22319: ST_TO_ADDR
// vc_engine := engine ;
22320: LD_ADDR_OWVAR 39
22324: PUSH
22325: LD_VAR 0 2
22329: ST_TO_ADDR
// vc_control := control ;
22330: LD_ADDR_OWVAR 38
22334: PUSH
22335: LD_VAR 0 3
22339: ST_TO_ADDR
// vc_weapon := weapon ;
22340: LD_ADDR_OWVAR 40
22344: PUSH
22345: LD_VAR 0 4
22349: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22350: LD_ADDR_OWVAR 41
22354: PUSH
22355: LD_VAR 0 5
22359: ST_TO_ADDR
// end ;
22360: LD_VAR 0 6
22364: RET
// export function WantPlant ( unit ) ; var task ; begin
22365: LD_INT 0
22367: PPUSH
22368: PPUSH
// result := false ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 0
22376: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22377: LD_ADDR_VAR 0 3
22381: PUSH
22382: LD_VAR 0 1
22386: PPUSH
22387: CALL_OW 437
22391: ST_TO_ADDR
// if task then
22392: LD_VAR 0 3
22396: IFFALSE 22424
// if task [ 1 ] [ 1 ] = p then
22398: LD_VAR 0 3
22402: PUSH
22403: LD_INT 1
22405: ARRAY
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PUSH
22411: LD_STRING p
22413: EQUAL
22414: IFFALSE 22424
// result := true ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// end ;
22424: LD_VAR 0 2
22428: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
// if pos < 1 then
22435: LD_VAR 0 2
22439: PUSH
22440: LD_INT 1
22442: LESS
22443: IFFALSE 22447
// exit ;
22445: GO 22750
// if pos = 1 then
22447: LD_VAR 0 2
22451: PUSH
22452: LD_INT 1
22454: EQUAL
22455: IFFALSE 22488
// result := Replace ( arr , pos [ 1 ] , value ) else
22457: LD_ADDR_VAR 0 4
22461: PUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: LD_VAR 0 2
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: CALL_OW 1
22485: ST_TO_ADDR
22486: GO 22750
// begin tmp := arr ;
22488: LD_ADDR_VAR 0 6
22492: PUSH
22493: LD_VAR 0 1
22497: ST_TO_ADDR
// s_arr := [ tmp ] ;
22498: LD_ADDR_VAR 0 7
22502: PUSH
22503: LD_VAR 0 6
22507: PUSH
22508: EMPTY
22509: LIST
22510: ST_TO_ADDR
// for i = 1 to pos - 1 do
22511: LD_ADDR_VAR 0 5
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_VAR 0 2
22525: PUSH
22526: LD_INT 1
22528: MINUS
22529: PUSH
22530: FOR_TO
22531: IFFALSE 22576
// begin tmp := tmp [ pos [ i ] ] ;
22533: LD_ADDR_VAR 0 6
22537: PUSH
22538: LD_VAR 0 6
22542: PUSH
22543: LD_VAR 0 2
22547: PUSH
22548: LD_VAR 0 5
22552: ARRAY
22553: ARRAY
22554: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22555: LD_ADDR_VAR 0 7
22559: PUSH
22560: LD_VAR 0 7
22564: PUSH
22565: LD_VAR 0 6
22569: PUSH
22570: EMPTY
22571: LIST
22572: ADD
22573: ST_TO_ADDR
// end ;
22574: GO 22530
22576: POP
22577: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22578: LD_ADDR_VAR 0 6
22582: PUSH
22583: LD_VAR 0 6
22587: PPUSH
22588: LD_VAR 0 2
22592: PUSH
22593: LD_VAR 0 2
22597: ARRAY
22598: PPUSH
22599: LD_VAR 0 3
22603: PPUSH
22604: CALL_OW 1
22608: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22609: LD_ADDR_VAR 0 7
22613: PUSH
22614: LD_VAR 0 7
22618: PPUSH
22619: LD_VAR 0 7
22623: PPUSH
22624: LD_VAR 0 6
22628: PPUSH
22629: CALL_OW 1
22633: ST_TO_ADDR
// for i = s_arr downto 2 do
22634: LD_ADDR_VAR 0 5
22638: PUSH
22639: DOUBLE
22640: LD_VAR 0 7
22644: INC
22645: ST_TO_ADDR
22646: LD_INT 2
22648: PUSH
22649: FOR_DOWNTO
22650: IFFALSE 22734
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22652: LD_ADDR_VAR 0 6
22656: PUSH
22657: LD_VAR 0 7
22661: PUSH
22662: LD_VAR 0 5
22666: PUSH
22667: LD_INT 1
22669: MINUS
22670: ARRAY
22671: PPUSH
22672: LD_VAR 0 2
22676: PUSH
22677: LD_VAR 0 5
22681: PUSH
22682: LD_INT 1
22684: MINUS
22685: ARRAY
22686: PPUSH
22687: LD_VAR 0 7
22691: PUSH
22692: LD_VAR 0 5
22696: ARRAY
22697: PPUSH
22698: CALL_OW 1
22702: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22703: LD_ADDR_VAR 0 7
22707: PUSH
22708: LD_VAR 0 7
22712: PPUSH
22713: LD_VAR 0 5
22717: PUSH
22718: LD_INT 1
22720: MINUS
22721: PPUSH
22722: LD_VAR 0 6
22726: PPUSH
22727: CALL_OW 1
22731: ST_TO_ADDR
// end ;
22732: GO 22649
22734: POP
22735: POP
// result := s_arr [ 1 ] ;
22736: LD_ADDR_VAR 0 4
22740: PUSH
22741: LD_VAR 0 7
22745: PUSH
22746: LD_INT 1
22748: ARRAY
22749: ST_TO_ADDR
// end ; end ;
22750: LD_VAR 0 4
22754: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22755: LD_INT 0
22757: PPUSH
22758: PPUSH
// if not list then
22759: LD_VAR 0 1
22763: NOT
22764: IFFALSE 22768
// exit ;
22766: GO 22859
// i := list [ pos1 ] ;
22768: LD_ADDR_VAR 0 5
22772: PUSH
22773: LD_VAR 0 1
22777: PUSH
22778: LD_VAR 0 2
22782: ARRAY
22783: ST_TO_ADDR
// if not i then
22784: LD_VAR 0 5
22788: NOT
22789: IFFALSE 22793
// exit ;
22791: GO 22859
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22793: LD_ADDR_VAR 0 1
22797: PUSH
22798: LD_VAR 0 1
22802: PPUSH
22803: LD_VAR 0 2
22807: PPUSH
22808: LD_VAR 0 1
22812: PUSH
22813: LD_VAR 0 3
22817: ARRAY
22818: PPUSH
22819: CALL_OW 1
22823: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_VAR 0 3
22838: PPUSH
22839: LD_VAR 0 5
22843: PPUSH
22844: CALL_OW 1
22848: ST_TO_ADDR
// result := list ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_VAR 0 1
22858: ST_TO_ADDR
// end ;
22859: LD_VAR 0 4
22863: RET
// export function Add ( list , pos , val ) ; begin
22864: LD_INT 0
22866: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
22867: LD_ADDR_VAR 0 4
22871: PUSH
22872: LD_VAR 0 1
22876: PPUSH
22877: LD_VAR 0 2
22881: PPUSH
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL 22429 0 3
22891: ST_TO_ADDR
22892: LD_VAR 0 4
22896: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22897: LD_INT 0
22899: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22900: LD_ADDR_VAR 0 5
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PPUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PPUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: LD_VAR 0 3
22934: PPUSH
22935: LD_VAR 0 4
22939: PPUSH
22940: CALL 22950 0 5
22944: ST_TO_ADDR
// end ;
22945: LD_VAR 0 5
22949: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22950: LD_INT 0
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
// if not list then
22956: LD_VAR 0 3
22960: NOT
22961: IFFALSE 22965
// exit ;
22963: GO 23353
// result := [ ] ;
22965: LD_ADDR_VAR 0 6
22969: PUSH
22970: EMPTY
22971: ST_TO_ADDR
// for i in list do
22972: LD_ADDR_VAR 0 7
22976: PUSH
22977: LD_VAR 0 3
22981: PUSH
22982: FOR_IN
22983: IFFALSE 23185
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22985: LD_ADDR_VAR 0 9
22989: PUSH
22990: LD_VAR 0 7
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: LD_VAR 0 2
23004: PPUSH
23005: CALL_OW 297
23009: ST_TO_ADDR
// if not result then
23010: LD_VAR 0 6
23014: NOT
23015: IFFALSE 23041
// result := [ [ i , tmp ] ] else
23017: LD_ADDR_VAR 0 6
23021: PUSH
23022: LD_VAR 0 7
23026: PUSH
23027: LD_VAR 0 9
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: ST_TO_ADDR
23039: GO 23183
// begin if result [ result ] [ 2 ] < tmp then
23041: LD_VAR 0 6
23045: PUSH
23046: LD_VAR 0 6
23050: ARRAY
23051: PUSH
23052: LD_INT 2
23054: ARRAY
23055: PUSH
23056: LD_VAR 0 9
23060: LESS
23061: IFFALSE 23103
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23063: LD_ADDR_VAR 0 6
23067: PUSH
23068: LD_VAR 0 6
23072: PPUSH
23073: LD_VAR 0 6
23077: PUSH
23078: LD_INT 1
23080: PLUS
23081: PPUSH
23082: LD_VAR 0 7
23086: PUSH
23087: LD_VAR 0 9
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PPUSH
23096: CALL_OW 2
23100: ST_TO_ADDR
23101: GO 23183
// for j = 1 to result do
23103: LD_ADDR_VAR 0 8
23107: PUSH
23108: DOUBLE
23109: LD_INT 1
23111: DEC
23112: ST_TO_ADDR
23113: LD_VAR 0 6
23117: PUSH
23118: FOR_TO
23119: IFFALSE 23181
// begin if tmp < result [ j ] [ 2 ] then
23121: LD_VAR 0 9
23125: PUSH
23126: LD_VAR 0 6
23130: PUSH
23131: LD_VAR 0 8
23135: ARRAY
23136: PUSH
23137: LD_INT 2
23139: ARRAY
23140: LESS
23141: IFFALSE 23179
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23143: LD_ADDR_VAR 0 6
23147: PUSH
23148: LD_VAR 0 6
23152: PPUSH
23153: LD_VAR 0 8
23157: PPUSH
23158: LD_VAR 0 7
23162: PUSH
23163: LD_VAR 0 9
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 2
23176: ST_TO_ADDR
// break ;
23177: GO 23181
// end ; end ;
23179: GO 23118
23181: POP
23182: POP
// end ; end ;
23183: GO 22982
23185: POP
23186: POP
// if result and not asc then
23187: LD_VAR 0 6
23191: PUSH
23192: LD_VAR 0 4
23196: NOT
23197: AND
23198: IFFALSE 23273
// begin tmp := result ;
23200: LD_ADDR_VAR 0 9
23204: PUSH
23205: LD_VAR 0 6
23209: ST_TO_ADDR
// for i = tmp downto 1 do
23210: LD_ADDR_VAR 0 7
23214: PUSH
23215: DOUBLE
23216: LD_VAR 0 9
23220: INC
23221: ST_TO_ADDR
23222: LD_INT 1
23224: PUSH
23225: FOR_DOWNTO
23226: IFFALSE 23271
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23228: LD_ADDR_VAR 0 6
23232: PUSH
23233: LD_VAR 0 6
23237: PPUSH
23238: LD_VAR 0 9
23242: PUSH
23243: LD_VAR 0 7
23247: MINUS
23248: PUSH
23249: LD_INT 1
23251: PLUS
23252: PPUSH
23253: LD_VAR 0 9
23257: PUSH
23258: LD_VAR 0 7
23262: ARRAY
23263: PPUSH
23264: CALL_OW 1
23268: ST_TO_ADDR
23269: GO 23225
23271: POP
23272: POP
// end ; tmp := [ ] ;
23273: LD_ADDR_VAR 0 9
23277: PUSH
23278: EMPTY
23279: ST_TO_ADDR
// if mode then
23280: LD_VAR 0 5
23284: IFFALSE 23353
// begin for i = 1 to result do
23286: LD_ADDR_VAR 0 7
23290: PUSH
23291: DOUBLE
23292: LD_INT 1
23294: DEC
23295: ST_TO_ADDR
23296: LD_VAR 0 6
23300: PUSH
23301: FOR_TO
23302: IFFALSE 23341
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23304: LD_ADDR_VAR 0 9
23308: PUSH
23309: LD_VAR 0 9
23313: PPUSH
23314: LD_VAR 0 7
23318: PPUSH
23319: LD_VAR 0 6
23323: PUSH
23324: LD_VAR 0 7
23328: ARRAY
23329: PUSH
23330: LD_INT 1
23332: ARRAY
23333: PPUSH
23334: CALL_OW 1
23338: ST_TO_ADDR
23339: GO 23301
23341: POP
23342: POP
// result := tmp ;
23343: LD_ADDR_VAR 0 6
23347: PUSH
23348: LD_VAR 0 9
23352: ST_TO_ADDR
// end ; end ;
23353: LD_VAR 0 6
23357: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23366: LD_ADDR_VAR 0 5
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: ST_TO_ADDR
// if not x or not y then
23388: LD_VAR 0 2
23392: NOT
23393: PUSH
23394: LD_VAR 0 3
23398: NOT
23399: OR
23400: IFFALSE 23404
// exit ;
23402: GO 25050
// if not range then
23404: LD_VAR 0 4
23408: NOT
23409: IFFALSE 23419
// range := 10 ;
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_INT 10
23418: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23419: LD_ADDR_VAR 0 8
23423: PUSH
23424: LD_INT 81
23426: PUSH
23427: LD_VAR 0 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 92
23438: PUSH
23439: LD_VAR 0 2
23443: PUSH
23444: LD_VAR 0 3
23448: PUSH
23449: LD_VAR 0 4
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 3
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 3
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: PPUSH
23482: CALL_OW 69
23486: ST_TO_ADDR
// if not tmp then
23487: LD_VAR 0 8
23491: NOT
23492: IFFALSE 23496
// exit ;
23494: GO 25050
// for i in tmp do
23496: LD_ADDR_VAR 0 6
23500: PUSH
23501: LD_VAR 0 8
23505: PUSH
23506: FOR_IN
23507: IFFALSE 25025
// begin points := [ 0 , 0 , 0 ] ;
23509: LD_ADDR_VAR 0 9
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
// bpoints := 1 ;
23528: LD_ADDR_VAR 0 10
23532: PUSH
23533: LD_INT 1
23535: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23536: LD_VAR 0 6
23540: PPUSH
23541: CALL_OW 247
23545: PUSH
23546: LD_INT 1
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 24132
23554: POP
// begin if GetClass ( i ) = 1 then
23555: LD_VAR 0 6
23559: PPUSH
23560: CALL_OW 257
23564: PUSH
23565: LD_INT 1
23567: EQUAL
23568: IFFALSE 23589
// points := [ 10 , 5 , 3 ] ;
23570: LD_ADDR_VAR 0 9
23574: PUSH
23575: LD_INT 10
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23589: LD_VAR 0 6
23593: PPUSH
23594: CALL_OW 257
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 3
23604: PUSH
23605: LD_INT 4
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: IN
23613: IFFALSE 23634
// points := [ 3 , 2 , 1 ] ;
23615: LD_ADDR_VAR 0 9
23619: PUSH
23620: LD_INT 3
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23634: LD_VAR 0 6
23638: PPUSH
23639: CALL_OW 257
23643: PUSH
23644: LD_INT 5
23646: EQUAL
23647: IFFALSE 23668
// points := [ 130 , 5 , 2 ] ;
23649: LD_ADDR_VAR 0 9
23653: PUSH
23654: LD_INT 130
23656: PUSH
23657: LD_INT 5
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23668: LD_VAR 0 6
23672: PPUSH
23673: CALL_OW 257
23677: PUSH
23678: LD_INT 8
23680: EQUAL
23681: IFFALSE 23702
// points := [ 35 , 35 , 30 ] ;
23683: LD_ADDR_VAR 0 9
23687: PUSH
23688: LD_INT 35
23690: PUSH
23691: LD_INT 35
23693: PUSH
23694: LD_INT 30
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23702: LD_VAR 0 6
23706: PPUSH
23707: CALL_OW 257
23711: PUSH
23712: LD_INT 9
23714: EQUAL
23715: IFFALSE 23736
// points := [ 20 , 55 , 40 ] ;
23717: LD_ADDR_VAR 0 9
23721: PUSH
23722: LD_INT 20
23724: PUSH
23725: LD_INT 55
23727: PUSH
23728: LD_INT 40
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: LIST
23735: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23736: LD_VAR 0 6
23740: PPUSH
23741: CALL_OW 257
23745: PUSH
23746: LD_INT 12
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: IN
23756: IFFALSE 23777
// points := [ 5 , 3 , 2 ] ;
23758: LD_ADDR_VAR 0 9
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23777: LD_VAR 0 6
23781: PPUSH
23782: CALL_OW 257
23786: PUSH
23787: LD_INT 17
23789: EQUAL
23790: IFFALSE 23811
// points := [ 100 , 50 , 75 ] ;
23792: LD_ADDR_VAR 0 9
23796: PUSH
23797: LD_INT 100
23799: PUSH
23800: LD_INT 50
23802: PUSH
23803: LD_INT 75
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23811: LD_VAR 0 6
23815: PPUSH
23816: CALL_OW 257
23820: PUSH
23821: LD_INT 15
23823: EQUAL
23824: IFFALSE 23845
// points := [ 10 , 5 , 3 ] ;
23826: LD_ADDR_VAR 0 9
23830: PUSH
23831: LD_INT 10
23833: PUSH
23834: LD_INT 5
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23845: LD_VAR 0 6
23849: PPUSH
23850: CALL_OW 257
23854: PUSH
23855: LD_INT 14
23857: EQUAL
23858: IFFALSE 23879
// points := [ 10 , 0 , 0 ] ;
23860: LD_ADDR_VAR 0 9
23864: PUSH
23865: LD_INT 10
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23879: LD_VAR 0 6
23883: PPUSH
23884: CALL_OW 257
23888: PUSH
23889: LD_INT 11
23891: EQUAL
23892: IFFALSE 23913
// points := [ 30 , 10 , 5 ] ;
23894: LD_ADDR_VAR 0 9
23898: PUSH
23899: LD_INT 30
23901: PUSH
23902: LD_INT 10
23904: PUSH
23905: LD_INT 5
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_INT 5
23920: PPUSH
23921: CALL_OW 321
23925: PUSH
23926: LD_INT 2
23928: EQUAL
23929: IFFALSE 23946
// bpoints := bpoints * 1.8 ;
23931: LD_ADDR_VAR 0 10
23935: PUSH
23936: LD_VAR 0 10
23940: PUSH
23941: LD_REAL  1.80000000000000E+0000
23944: MUL
23945: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23946: LD_VAR 0 6
23950: PPUSH
23951: CALL_OW 257
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: LD_INT 3
23964: PUSH
23965: LD_INT 4
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: IN
23974: PUSH
23975: LD_VAR 0 1
23979: PPUSH
23980: LD_INT 51
23982: PPUSH
23983: CALL_OW 321
23987: PUSH
23988: LD_INT 2
23990: EQUAL
23991: AND
23992: IFFALSE 24009
// bpoints := bpoints * 1.2 ;
23994: LD_ADDR_VAR 0 10
23998: PUSH
23999: LD_VAR 0 10
24003: PUSH
24004: LD_REAL  1.20000000000000E+0000
24007: MUL
24008: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24009: LD_VAR 0 6
24013: PPUSH
24014: CALL_OW 257
24018: PUSH
24019: LD_INT 5
24021: PUSH
24022: LD_INT 7
24024: PUSH
24025: LD_INT 9
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: IN
24033: PUSH
24034: LD_VAR 0 1
24038: PPUSH
24039: LD_INT 52
24041: PPUSH
24042: CALL_OW 321
24046: PUSH
24047: LD_INT 2
24049: EQUAL
24050: AND
24051: IFFALSE 24068
// bpoints := bpoints * 1.5 ;
24053: LD_ADDR_VAR 0 10
24057: PUSH
24058: LD_VAR 0 10
24062: PUSH
24063: LD_REAL  1.50000000000000E+0000
24066: MUL
24067: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24068: LD_VAR 0 1
24072: PPUSH
24073: LD_INT 66
24075: PPUSH
24076: CALL_OW 321
24080: PUSH
24081: LD_INT 2
24083: EQUAL
24084: IFFALSE 24101
// bpoints := bpoints * 1.1 ;
24086: LD_ADDR_VAR 0 10
24090: PUSH
24091: LD_VAR 0 10
24095: PUSH
24096: LD_REAL  1.10000000000000E+0000
24099: MUL
24100: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24101: LD_ADDR_VAR 0 10
24105: PUSH
24106: LD_VAR 0 10
24110: PUSH
24111: LD_VAR 0 6
24115: PPUSH
24116: LD_INT 1
24118: PPUSH
24119: CALL_OW 259
24123: PUSH
24124: LD_REAL  1.15000000000000E+0000
24127: MUL
24128: MUL
24129: ST_TO_ADDR
// end ; unit_vehicle :
24130: GO 24954
24132: LD_INT 2
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24942
24140: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24141: LD_VAR 0 6
24145: PPUSH
24146: CALL_OW 264
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: LD_INT 42
24156: PUSH
24157: LD_INT 24
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: IN
24165: IFFALSE 24186
// points := [ 25 , 5 , 3 ] ;
24167: LD_ADDR_VAR 0 9
24171: PUSH
24172: LD_INT 25
24174: PUSH
24175: LD_INT 5
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24186: LD_VAR 0 6
24190: PPUSH
24191: CALL_OW 264
24195: PUSH
24196: LD_INT 4
24198: PUSH
24199: LD_INT 43
24201: PUSH
24202: LD_INT 25
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: IN
24210: IFFALSE 24231
// points := [ 40 , 15 , 5 ] ;
24212: LD_ADDR_VAR 0 9
24216: PUSH
24217: LD_INT 40
24219: PUSH
24220: LD_INT 15
24222: PUSH
24223: LD_INT 5
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24231: LD_VAR 0 6
24235: PPUSH
24236: CALL_OW 264
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: LD_INT 23
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: IN
24251: IFFALSE 24272
// points := [ 7 , 25 , 8 ] ;
24253: LD_ADDR_VAR 0 9
24257: PUSH
24258: LD_INT 7
24260: PUSH
24261: LD_INT 25
24263: PUSH
24264: LD_INT 8
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24272: LD_VAR 0 6
24276: PPUSH
24277: CALL_OW 264
24281: PUSH
24282: LD_INT 5
24284: PUSH
24285: LD_INT 27
24287: PUSH
24288: LD_INT 44
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: IN
24296: IFFALSE 24317
// points := [ 14 , 50 , 16 ] ;
24298: LD_ADDR_VAR 0 9
24302: PUSH
24303: LD_INT 14
24305: PUSH
24306: LD_INT 50
24308: PUSH
24309: LD_INT 16
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: LIST
24316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24317: LD_VAR 0 6
24321: PPUSH
24322: CALL_OW 264
24326: PUSH
24327: LD_INT 6
24329: PUSH
24330: LD_INT 46
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: IN
24337: IFFALSE 24358
// points := [ 32 , 120 , 70 ] ;
24339: LD_ADDR_VAR 0 9
24343: PUSH
24344: LD_INT 32
24346: PUSH
24347: LD_INT 120
24349: PUSH
24350: LD_INT 70
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24358: LD_VAR 0 6
24362: PPUSH
24363: CALL_OW 264
24367: PUSH
24368: LD_INT 7
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 45
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: IN
24382: IFFALSE 24403
// points := [ 35 , 20 , 45 ] ;
24384: LD_ADDR_VAR 0 9
24388: PUSH
24389: LD_INT 35
24391: PUSH
24392: LD_INT 20
24394: PUSH
24395: LD_INT 45
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24403: LD_VAR 0 6
24407: PPUSH
24408: CALL_OW 264
24412: PUSH
24413: LD_INT 47
24415: PUSH
24416: EMPTY
24417: LIST
24418: IN
24419: IFFALSE 24440
// points := [ 67 , 45 , 75 ] ;
24421: LD_ADDR_VAR 0 9
24425: PUSH
24426: LD_INT 67
24428: PUSH
24429: LD_INT 45
24431: PUSH
24432: LD_INT 75
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24440: LD_VAR 0 6
24444: PPUSH
24445: CALL_OW 264
24449: PUSH
24450: LD_INT 26
24452: PUSH
24453: EMPTY
24454: LIST
24455: IN
24456: IFFALSE 24477
// points := [ 120 , 30 , 80 ] ;
24458: LD_ADDR_VAR 0 9
24462: PUSH
24463: LD_INT 120
24465: PUSH
24466: LD_INT 30
24468: PUSH
24469: LD_INT 80
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24477: LD_VAR 0 6
24481: PPUSH
24482: CALL_OW 264
24486: PUSH
24487: LD_INT 22
24489: PUSH
24490: EMPTY
24491: LIST
24492: IN
24493: IFFALSE 24514
// points := [ 40 , 1 , 1 ] ;
24495: LD_ADDR_VAR 0 9
24499: PUSH
24500: LD_INT 40
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24514: LD_VAR 0 6
24518: PPUSH
24519: CALL_OW 264
24523: PUSH
24524: LD_INT 29
24526: PUSH
24527: EMPTY
24528: LIST
24529: IN
24530: IFFALSE 24551
// points := [ 70 , 200 , 400 ] ;
24532: LD_ADDR_VAR 0 9
24536: PUSH
24537: LD_INT 70
24539: PUSH
24540: LD_INT 200
24542: PUSH
24543: LD_INT 400
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24551: LD_VAR 0 6
24555: PPUSH
24556: CALL_OW 264
24560: PUSH
24561: LD_INT 14
24563: PUSH
24564: LD_INT 53
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: IN
24571: IFFALSE 24592
// points := [ 40 , 10 , 20 ] ;
24573: LD_ADDR_VAR 0 9
24577: PUSH
24578: LD_INT 40
24580: PUSH
24581: LD_INT 10
24583: PUSH
24584: LD_INT 20
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24592: LD_VAR 0 6
24596: PPUSH
24597: CALL_OW 264
24601: PUSH
24602: LD_INT 9
24604: PUSH
24605: EMPTY
24606: LIST
24607: IN
24608: IFFALSE 24629
// points := [ 5 , 70 , 20 ] ;
24610: LD_ADDR_VAR 0 9
24614: PUSH
24615: LD_INT 5
24617: PUSH
24618: LD_INT 70
24620: PUSH
24621: LD_INT 20
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24629: LD_VAR 0 6
24633: PPUSH
24634: CALL_OW 264
24638: PUSH
24639: LD_INT 10
24641: PUSH
24642: EMPTY
24643: LIST
24644: IN
24645: IFFALSE 24666
// points := [ 35 , 110 , 70 ] ;
24647: LD_ADDR_VAR 0 9
24651: PUSH
24652: LD_INT 35
24654: PUSH
24655: LD_INT 110
24657: PUSH
24658: LD_INT 70
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24666: LD_VAR 0 6
24670: PPUSH
24671: CALL_OW 265
24675: PUSH
24676: LD_INT 25
24678: EQUAL
24679: IFFALSE 24700
// points := [ 80 , 65 , 100 ] ;
24681: LD_ADDR_VAR 0 9
24685: PUSH
24686: LD_INT 80
24688: PUSH
24689: LD_INT 65
24691: PUSH
24692: LD_INT 100
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24700: LD_VAR 0 6
24704: PPUSH
24705: CALL_OW 263
24709: PUSH
24710: LD_INT 1
24712: EQUAL
24713: IFFALSE 24748
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24715: LD_ADDR_VAR 0 10
24719: PUSH
24720: LD_VAR 0 10
24724: PUSH
24725: LD_VAR 0 6
24729: PPUSH
24730: CALL_OW 311
24734: PPUSH
24735: LD_INT 3
24737: PPUSH
24738: CALL_OW 259
24742: PUSH
24743: LD_INT 4
24745: MUL
24746: MUL
24747: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24748: LD_VAR 0 6
24752: PPUSH
24753: CALL_OW 263
24757: PUSH
24758: LD_INT 2
24760: EQUAL
24761: IFFALSE 24812
// begin j := IsControledBy ( i ) ;
24763: LD_ADDR_VAR 0 7
24767: PUSH
24768: LD_VAR 0 6
24772: PPUSH
24773: CALL_OW 312
24777: ST_TO_ADDR
// if j then
24778: LD_VAR 0 7
24782: IFFALSE 24812
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24784: LD_ADDR_VAR 0 10
24788: PUSH
24789: LD_VAR 0 10
24793: PUSH
24794: LD_VAR 0 7
24798: PPUSH
24799: LD_INT 3
24801: PPUSH
24802: CALL_OW 259
24806: PUSH
24807: LD_INT 3
24809: MUL
24810: MUL
24811: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24812: LD_VAR 0 6
24816: PPUSH
24817: CALL_OW 264
24821: PUSH
24822: LD_INT 5
24824: PUSH
24825: LD_INT 6
24827: PUSH
24828: LD_INT 46
24830: PUSH
24831: LD_INT 44
24833: PUSH
24834: LD_INT 47
24836: PUSH
24837: LD_INT 45
24839: PUSH
24840: LD_INT 28
24842: PUSH
24843: LD_INT 7
24845: PUSH
24846: LD_INT 27
24848: PUSH
24849: LD_INT 29
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: IN
24864: PUSH
24865: LD_VAR 0 1
24869: PPUSH
24870: LD_INT 52
24872: PPUSH
24873: CALL_OW 321
24877: PUSH
24878: LD_INT 2
24880: EQUAL
24881: AND
24882: IFFALSE 24899
// bpoints := bpoints * 1.2 ;
24884: LD_ADDR_VAR 0 10
24888: PUSH
24889: LD_VAR 0 10
24893: PUSH
24894: LD_REAL  1.20000000000000E+0000
24897: MUL
24898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24899: LD_VAR 0 6
24903: PPUSH
24904: CALL_OW 264
24908: PUSH
24909: LD_INT 6
24911: PUSH
24912: LD_INT 46
24914: PUSH
24915: LD_INT 47
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: IN
24923: IFFALSE 24940
// bpoints := bpoints * 1.2 ;
24925: LD_ADDR_VAR 0 10
24929: PUSH
24930: LD_VAR 0 10
24934: PUSH
24935: LD_REAL  1.20000000000000E+0000
24938: MUL
24939: ST_TO_ADDR
// end ; unit_building :
24940: GO 24954
24942: LD_INT 3
24944: DOUBLE
24945: EQUAL
24946: IFTRUE 24950
24948: GO 24953
24950: POP
// ; end ;
24951: GO 24954
24953: POP
// for j = 1 to 3 do
24954: LD_ADDR_VAR 0 7
24958: PUSH
24959: DOUBLE
24960: LD_INT 1
24962: DEC
24963: ST_TO_ADDR
24964: LD_INT 3
24966: PUSH
24967: FOR_TO
24968: IFFALSE 25021
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_VAR 0 5
24979: PPUSH
24980: LD_VAR 0 7
24984: PPUSH
24985: LD_VAR 0 5
24989: PUSH
24990: LD_VAR 0 7
24994: ARRAY
24995: PUSH
24996: LD_VAR 0 9
25000: PUSH
25001: LD_VAR 0 7
25005: ARRAY
25006: PUSH
25007: LD_VAR 0 10
25011: MUL
25012: PLUS
25013: PPUSH
25014: CALL_OW 1
25018: ST_TO_ADDR
25019: GO 24967
25021: POP
25022: POP
// end ;
25023: GO 23506
25025: POP
25026: POP
// result := Replace ( result , 4 , tmp ) ;
25027: LD_ADDR_VAR 0 5
25031: PUSH
25032: LD_VAR 0 5
25036: PPUSH
25037: LD_INT 4
25039: PPUSH
25040: LD_VAR 0 8
25044: PPUSH
25045: CALL_OW 1
25049: ST_TO_ADDR
// end ;
25050: LD_VAR 0 5
25054: RET
// export function DangerAtRange ( unit , range ) ; begin
25055: LD_INT 0
25057: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: CALL_OW 255
25072: PPUSH
25073: LD_VAR 0 1
25077: PPUSH
25078: CALL_OW 250
25082: PPUSH
25083: LD_VAR 0 1
25087: PPUSH
25088: CALL_OW 251
25092: PPUSH
25093: LD_VAR 0 2
25097: PPUSH
25098: CALL 23358 0 4
25102: ST_TO_ADDR
// end ;
25103: LD_VAR 0 3
25107: RET
// export function DangerInArea ( side , area ) ; begin
25108: LD_INT 0
25110: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_VAR 0 2
25120: PPUSH
25121: LD_INT 81
25123: PUSH
25124: LD_VAR 0 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 70
25137: ST_TO_ADDR
// end ;
25138: LD_VAR 0 3
25142: RET
// export function IsExtension ( b ) ; begin
25143: LD_INT 0
25145: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_VAR 0 1
25155: PUSH
25156: LD_INT 23
25158: PUSH
25159: LD_INT 20
25161: PUSH
25162: LD_INT 22
25164: PUSH
25165: LD_INT 17
25167: PUSH
25168: LD_INT 24
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 19
25176: PUSH
25177: LD_INT 16
25179: PUSH
25180: LD_INT 25
25182: PUSH
25183: LD_INT 18
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: IN
25198: ST_TO_ADDR
// end ;
25199: LD_VAR 0 2
25203: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
25204: LD_INT 0
25206: PPUSH
25207: PPUSH
25208: PPUSH
// result := [ ] ;
25209: LD_ADDR_VAR 0 2
25213: PUSH
25214: EMPTY
25215: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_INT 21
25223: PUSH
25224: LD_INT 3
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 3
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25295
// for i in tmp do
25245: LD_ADDR_VAR 0 4
25249: PUSH
25250: LD_VAR 0 3
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25293
// if GetBase ( i ) = base then
25258: LD_VAR 0 4
25262: PPUSH
25263: CALL_OW 274
25267: PUSH
25268: LD_VAR 0 1
25272: EQUAL
25273: IFFALSE 25291
// result := result ^ i ;
25275: LD_ADDR_VAR 0 2
25279: PUSH
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 4
25289: ADD
25290: ST_TO_ADDR
25291: GO 25255
25293: POP
25294: POP
// end ;
25295: LD_VAR 0 2
25299: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25300: LD_INT 0
25302: PPUSH
25303: PPUSH
// if BuildingStatus ( b ) = bs_build then
25304: LD_VAR 0 2
25308: PPUSH
25309: CALL_OW 461
25313: PUSH
25314: LD_INT 1
25316: EQUAL
25317: IFFALSE 25377
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_STRING h
25326: PUSH
25327: LD_VAR 0 2
25331: PPUSH
25332: CALL_OW 250
25336: PUSH
25337: LD_VAR 0 2
25341: PPUSH
25342: CALL_OW 251
25346: PUSH
25347: LD_VAR 0 2
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: PPUSH
25373: CALL_OW 446
// end ;
25377: LD_VAR 0 3
25381: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25382: LD_INT 0
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25390: LD_VAR 0 1
25394: NOT
25395: PUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 263
25405: PUSH
25406: LD_INT 2
25408: EQUAL
25409: NOT
25410: OR
25411: IFFALSE 25415
// exit ;
25413: GO 25731
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25415: LD_ADDR_VAR 0 6
25419: PUSH
25420: LD_INT 22
25422: PUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 255
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: LD_INT 30
25442: PUSH
25443: LD_INT 36
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 34
25452: PUSH
25453: LD_INT 31
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PPUSH
25469: CALL_OW 69
25473: ST_TO_ADDR
// if not tmp then
25474: LD_VAR 0 6
25478: NOT
25479: IFFALSE 25483
// exit ;
25481: GO 25731
// result := [ ] ;
25483: LD_ADDR_VAR 0 2
25487: PUSH
25488: EMPTY
25489: ST_TO_ADDR
// for i in tmp do
25490: LD_ADDR_VAR 0 3
25494: PUSH
25495: LD_VAR 0 6
25499: PUSH
25500: FOR_IN
25501: IFFALSE 25572
// begin t := UnitsInside ( i ) ;
25503: LD_ADDR_VAR 0 4
25507: PUSH
25508: LD_VAR 0 3
25512: PPUSH
25513: CALL_OW 313
25517: ST_TO_ADDR
// if t then
25518: LD_VAR 0 4
25522: IFFALSE 25570
// for j in t do
25524: LD_ADDR_VAR 0 7
25528: PUSH
25529: LD_VAR 0 4
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25568
// result := Insert ( result , result + 1 , j ) ;
25537: LD_ADDR_VAR 0 2
25541: PUSH
25542: LD_VAR 0 2
25546: PPUSH
25547: LD_VAR 0 2
25551: PUSH
25552: LD_INT 1
25554: PLUS
25555: PPUSH
25556: LD_VAR 0 7
25560: PPUSH
25561: CALL_OW 2
25565: ST_TO_ADDR
25566: GO 25534
25568: POP
25569: POP
// end ;
25570: GO 25500
25572: POP
25573: POP
// if not result then
25574: LD_VAR 0 2
25578: NOT
25579: IFFALSE 25583
// exit ;
25581: GO 25731
// mech := result [ 1 ] ;
25583: LD_ADDR_VAR 0 5
25587: PUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_INT 1
25595: ARRAY
25596: ST_TO_ADDR
// if result > 1 then
25597: LD_VAR 0 2
25601: PUSH
25602: LD_INT 1
25604: GREATER
25605: IFFALSE 25717
// for i = 2 to result do
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: DOUBLE
25613: LD_INT 2
25615: DEC
25616: ST_TO_ADDR
25617: LD_VAR 0 2
25621: PUSH
25622: FOR_TO
25623: IFFALSE 25715
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25625: LD_ADDR_VAR 0 4
25629: PUSH
25630: LD_VAR 0 2
25634: PUSH
25635: LD_VAR 0 3
25639: ARRAY
25640: PPUSH
25641: LD_INT 3
25643: PPUSH
25644: CALL_OW 259
25648: PUSH
25649: LD_VAR 0 2
25653: PUSH
25654: LD_VAR 0 3
25658: ARRAY
25659: PPUSH
25660: CALL_OW 432
25664: MINUS
25665: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25666: LD_VAR 0 4
25670: PUSH
25671: LD_VAR 0 5
25675: PPUSH
25676: LD_INT 3
25678: PPUSH
25679: CALL_OW 259
25683: PUSH
25684: LD_VAR 0 5
25688: PPUSH
25689: CALL_OW 432
25693: MINUS
25694: GREATEREQUAL
25695: IFFALSE 25713
// mech := result [ i ] ;
25697: LD_ADDR_VAR 0 5
25701: PUSH
25702: LD_VAR 0 2
25706: PUSH
25707: LD_VAR 0 3
25711: ARRAY
25712: ST_TO_ADDR
// end ;
25713: GO 25622
25715: POP
25716: POP
// ComLinkTo ( vehicle , mech ) ;
25717: LD_VAR 0 1
25721: PPUSH
25722: LD_VAR 0 5
25726: PPUSH
25727: CALL_OW 135
// end ;
25731: LD_VAR 0 2
25735: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25736: LD_INT 0
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
// result := [ ] ;
25751: LD_ADDR_VAR 0 6
25755: PUSH
25756: EMPTY
25757: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 266
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: IN
25778: NOT
25779: IFFALSE 25783
// exit ;
25781: GO 27302
// if name then
25783: LD_VAR 0 2
25787: IFFALSE 25803
// SetBName ( base_dep , name ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_VAR 0 2
25798: PPUSH
25799: CALL_OW 500
// base := GetBase ( base_dep ) ;
25803: LD_ADDR_VAR 0 14
25807: PUSH
25808: LD_VAR 0 1
25812: PPUSH
25813: CALL_OW 274
25817: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25818: LD_ADDR_VAR 0 15
25822: PUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 255
25832: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25833: LD_ADDR_VAR 0 16
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 248
25847: ST_TO_ADDR
// if sources then
25848: LD_VAR 0 4
25852: IFFALSE 25899
// for i = 1 to 3 do
25854: LD_ADDR_VAR 0 7
25858: PUSH
25859: DOUBLE
25860: LD_INT 1
25862: DEC
25863: ST_TO_ADDR
25864: LD_INT 3
25866: PUSH
25867: FOR_TO
25868: IFFALSE 25897
// AddResourceType ( base , i , sources [ i ] ) ;
25870: LD_VAR 0 14
25874: PPUSH
25875: LD_VAR 0 7
25879: PPUSH
25880: LD_VAR 0 4
25884: PUSH
25885: LD_VAR 0 7
25889: ARRAY
25890: PPUSH
25891: CALL_OW 276
25895: GO 25867
25897: POP
25898: POP
// buildings := GetBaseBuildings ( base ) ;
25899: LD_ADDR_VAR 0 17
25903: PUSH
25904: LD_VAR 0 14
25908: PPUSH
25909: CALL 25204 0 1
25913: ST_TO_ADDR
// InitHc ;
25914: CALL_OW 19
// InitUc ;
25918: CALL_OW 18
// uc_side := side ;
25922: LD_ADDR_OWVAR 20
25926: PUSH
25927: LD_VAR 0 15
25931: ST_TO_ADDR
// uc_nation := nation ;
25932: LD_ADDR_OWVAR 21
25936: PUSH
25937: LD_VAR 0 16
25941: ST_TO_ADDR
// if buildings then
25942: LD_VAR 0 17
25946: IFFALSE 27161
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25948: LD_VAR 0 17
25952: PPUSH
25953: LD_INT 2
25955: PUSH
25956: LD_INT 30
25958: PUSH
25959: LD_INT 32
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 30
25968: PUSH
25969: LD_INT 33
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: PPUSH
25981: CALL_OW 72
25985: IFFALSE 26068
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25987: LD_ADDR_VAR 0 7
25991: PUSH
25992: LD_VAR 0 17
25996: PPUSH
25997: LD_INT 2
25999: PUSH
26000: LD_INT 30
26002: PUSH
26003: LD_INT 32
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: LD_INT 33
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: PPUSH
26025: CALL_OW 72
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26066
// begin if not GetBWeapon ( i ) then
26033: LD_VAR 0 7
26037: PPUSH
26038: CALL_OW 269
26042: NOT
26043: IFFALSE 26064
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
26045: LD_VAR 0 7
26049: PPUSH
26050: LD_VAR 0 7
26054: PPUSH
26055: CALL 27307 0 1
26059: PPUSH
26060: CALL_OW 431
// end ;
26064: GO 26030
26066: POP
26067: POP
// end ; for i = 1 to personel do
26068: LD_ADDR_VAR 0 7
26072: PUSH
26073: DOUBLE
26074: LD_INT 1
26076: DEC
26077: ST_TO_ADDR
26078: LD_VAR 0 5
26082: PUSH
26083: FOR_TO
26084: IFFALSE 27141
// begin if i > 4 then
26086: LD_VAR 0 7
26090: PUSH
26091: LD_INT 4
26093: GREATER
26094: IFFALSE 26098
// break ;
26096: GO 27141
// case i of 1 :
26098: LD_VAR 0 7
26102: PUSH
26103: LD_INT 1
26105: DOUBLE
26106: EQUAL
26107: IFTRUE 26111
26109: GO 26184
26111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26112: LD_ADDR_VAR 0 11
26116: PUSH
26117: LD_VAR 0 17
26121: PPUSH
26122: LD_INT 22
26124: PUSH
26125: LD_VAR 0 15
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 32
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_INT 4
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: LD_INT 5
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PPUSH
26177: CALL_OW 72
26181: ST_TO_ADDR
26182: GO 26406
26184: LD_INT 2
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26254
26192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26193: LD_ADDR_VAR 0 11
26197: PUSH
26198: LD_VAR 0 17
26202: PPUSH
26203: LD_INT 22
26205: PUSH
26206: LD_VAR 0 15
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 30
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 30
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: ST_TO_ADDR
26252: GO 26406
26254: LD_INT 3
26256: DOUBLE
26257: EQUAL
26258: IFTRUE 26262
26260: GO 26324
26262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26263: LD_ADDR_VAR 0 11
26267: PUSH
26268: LD_VAR 0 17
26272: PPUSH
26273: LD_INT 22
26275: PUSH
26276: LD_VAR 0 15
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: LD_INT 30
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 3
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PPUSH
26317: CALL_OW 72
26321: ST_TO_ADDR
26322: GO 26406
26324: LD_INT 4
26326: DOUBLE
26327: EQUAL
26328: IFTRUE 26332
26330: GO 26405
26332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26333: LD_ADDR_VAR 0 11
26337: PUSH
26338: LD_VAR 0 17
26342: PPUSH
26343: LD_INT 22
26345: PUSH
26346: LD_VAR 0 15
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 6
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 30
26370: PUSH
26371: LD_INT 7
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 30
26380: PUSH
26381: LD_INT 8
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PPUSH
26398: CALL_OW 72
26402: ST_TO_ADDR
26403: GO 26406
26405: POP
// if i = 1 then
26406: LD_VAR 0 7
26410: PUSH
26411: LD_INT 1
26413: EQUAL
26414: IFFALSE 26525
// begin tmp := [ ] ;
26416: LD_ADDR_VAR 0 18
26420: PUSH
26421: EMPTY
26422: ST_TO_ADDR
// for j in f do
26423: LD_ADDR_VAR 0 8
26427: PUSH
26428: LD_VAR 0 11
26432: PUSH
26433: FOR_IN
26434: IFFALSE 26507
// if GetBType ( j ) = b_bunker then
26436: LD_VAR 0 8
26440: PPUSH
26441: CALL_OW 266
26445: PUSH
26446: LD_INT 32
26448: EQUAL
26449: IFFALSE 26476
// tmp := Insert ( tmp , 1 , j ) else
26451: LD_ADDR_VAR 0 18
26455: PUSH
26456: LD_VAR 0 18
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_VAR 0 8
26468: PPUSH
26469: CALL_OW 2
26473: ST_TO_ADDR
26474: GO 26505
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26476: LD_ADDR_VAR 0 18
26480: PUSH
26481: LD_VAR 0 18
26485: PPUSH
26486: LD_VAR 0 18
26490: PUSH
26491: LD_INT 1
26493: PLUS
26494: PPUSH
26495: LD_VAR 0 8
26499: PPUSH
26500: CALL_OW 2
26504: ST_TO_ADDR
26505: GO 26433
26507: POP
26508: POP
// if tmp then
26509: LD_VAR 0 18
26513: IFFALSE 26525
// f := tmp ;
26515: LD_ADDR_VAR 0 11
26519: PUSH
26520: LD_VAR 0 18
26524: ST_TO_ADDR
// end ; x := personel [ i ] ;
26525: LD_ADDR_VAR 0 12
26529: PUSH
26530: LD_VAR 0 5
26534: PUSH
26535: LD_VAR 0 7
26539: ARRAY
26540: ST_TO_ADDR
// if x = - 1 then
26541: LD_VAR 0 12
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: EQUAL
26550: IFFALSE 26759
// begin for j in f do
26552: LD_ADDR_VAR 0 8
26556: PUSH
26557: LD_VAR 0 11
26561: PUSH
26562: FOR_IN
26563: IFFALSE 26755
// repeat InitHc ;
26565: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26569: LD_VAR 0 8
26573: PPUSH
26574: CALL_OW 266
26578: PUSH
26579: LD_INT 5
26581: EQUAL
26582: IFFALSE 26652
// begin if UnitsInside ( j ) < 3 then
26584: LD_VAR 0 8
26588: PPUSH
26589: CALL_OW 313
26593: PUSH
26594: LD_INT 3
26596: LESS
26597: IFFALSE 26633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26599: LD_INT 0
26601: PPUSH
26602: LD_INT 5
26604: PUSH
26605: LD_INT 8
26607: PUSH
26608: LD_INT 9
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: PUSH
26616: LD_VAR 0 16
26620: ARRAY
26621: PPUSH
26622: LD_VAR 0 3
26626: PPUSH
26627: CALL_OW 380
26631: GO 26650
// PrepareHuman ( false , i , skill ) ;
26633: LD_INT 0
26635: PPUSH
26636: LD_VAR 0 7
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 380
// end else
26650: GO 26669
// PrepareHuman ( false , i , skill ) ;
26652: LD_INT 0
26654: PPUSH
26655: LD_VAR 0 7
26659: PPUSH
26660: LD_VAR 0 3
26664: PPUSH
26665: CALL_OW 380
// un := CreateHuman ;
26669: LD_ADDR_VAR 0 13
26673: PUSH
26674: CALL_OW 44
26678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26679: LD_ADDR_VAR 0 6
26683: PUSH
26684: LD_VAR 0 6
26688: PPUSH
26689: LD_INT 1
26691: PPUSH
26692: LD_VAR 0 13
26696: PPUSH
26697: CALL_OW 2
26701: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26702: LD_VAR 0 13
26706: PPUSH
26707: LD_VAR 0 8
26711: PPUSH
26712: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26716: LD_VAR 0 8
26720: PPUSH
26721: CALL_OW 313
26725: PUSH
26726: LD_INT 6
26728: EQUAL
26729: PUSH
26730: LD_VAR 0 8
26734: PPUSH
26735: CALL_OW 266
26739: PUSH
26740: LD_INT 32
26742: PUSH
26743: LD_INT 31
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: IN
26750: OR
26751: IFFALSE 26565
26753: GO 26562
26755: POP
26756: POP
// end else
26757: GO 27139
// for j = 1 to x do
26759: LD_ADDR_VAR 0 8
26763: PUSH
26764: DOUBLE
26765: LD_INT 1
26767: DEC
26768: ST_TO_ADDR
26769: LD_VAR 0 12
26773: PUSH
26774: FOR_TO
26775: IFFALSE 27137
// begin InitHc ;
26777: CALL_OW 19
// if not f then
26781: LD_VAR 0 11
26785: NOT
26786: IFFALSE 26875
// begin PrepareHuman ( false , i , skill ) ;
26788: LD_INT 0
26790: PPUSH
26791: LD_VAR 0 7
26795: PPUSH
26796: LD_VAR 0 3
26800: PPUSH
26801: CALL_OW 380
// un := CreateHuman ;
26805: LD_ADDR_VAR 0 13
26809: PUSH
26810: CALL_OW 44
26814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26815: LD_ADDR_VAR 0 6
26819: PUSH
26820: LD_VAR 0 6
26824: PPUSH
26825: LD_INT 1
26827: PPUSH
26828: LD_VAR 0 13
26832: PPUSH
26833: CALL_OW 2
26837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26838: LD_VAR 0 13
26842: PPUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 250
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 251
26862: PPUSH
26863: LD_INT 10
26865: PPUSH
26866: LD_INT 0
26868: PPUSH
26869: CALL_OW 50
// continue ;
26873: GO 26774
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26875: LD_VAR 0 11
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: CALL_OW 313
26888: PUSH
26889: LD_VAR 0 11
26893: PUSH
26894: LD_INT 1
26896: ARRAY
26897: PPUSH
26898: CALL_OW 266
26902: PUSH
26903: LD_INT 32
26905: PUSH
26906: LD_INT 31
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: IN
26913: AND
26914: PUSH
26915: LD_VAR 0 11
26919: PUSH
26920: LD_INT 1
26922: ARRAY
26923: PPUSH
26924: CALL_OW 313
26928: PUSH
26929: LD_INT 6
26931: EQUAL
26932: OR
26933: IFFALSE 26953
// f := Delete ( f , 1 ) ;
26935: LD_ADDR_VAR 0 11
26939: PUSH
26940: LD_VAR 0 11
26944: PPUSH
26945: LD_INT 1
26947: PPUSH
26948: CALL_OW 3
26952: ST_TO_ADDR
// if not f then
26953: LD_VAR 0 11
26957: NOT
26958: IFFALSE 26976
// begin x := x + 2 ;
26960: LD_ADDR_VAR 0 12
26964: PUSH
26965: LD_VAR 0 12
26969: PUSH
26970: LD_INT 2
26972: PLUS
26973: ST_TO_ADDR
// continue ;
26974: GO 26774
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26976: LD_VAR 0 11
26980: PUSH
26981: LD_INT 1
26983: ARRAY
26984: PPUSH
26985: CALL_OW 266
26989: PUSH
26990: LD_INT 5
26992: EQUAL
26993: IFFALSE 27067
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26995: LD_VAR 0 11
26999: PUSH
27000: LD_INT 1
27002: ARRAY
27003: PPUSH
27004: CALL_OW 313
27008: PUSH
27009: LD_INT 3
27011: LESS
27012: IFFALSE 27048
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27014: LD_INT 0
27016: PPUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 8
27022: PUSH
27023: LD_INT 9
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: PUSH
27031: LD_VAR 0 16
27035: ARRAY
27036: PPUSH
27037: LD_VAR 0 3
27041: PPUSH
27042: CALL_OW 380
27046: GO 27065
// PrepareHuman ( false , i , skill ) ;
27048: LD_INT 0
27050: PPUSH
27051: LD_VAR 0 7
27055: PPUSH
27056: LD_VAR 0 3
27060: PPUSH
27061: CALL_OW 380
// end else
27065: GO 27084
// PrepareHuman ( false , i , skill ) ;
27067: LD_INT 0
27069: PPUSH
27070: LD_VAR 0 7
27074: PPUSH
27075: LD_VAR 0 3
27079: PPUSH
27080: CALL_OW 380
// un := CreateHuman ;
27084: LD_ADDR_VAR 0 13
27088: PUSH
27089: CALL_OW 44
27093: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27094: LD_ADDR_VAR 0 6
27098: PUSH
27099: LD_VAR 0 6
27103: PPUSH
27104: LD_INT 1
27106: PPUSH
27107: LD_VAR 0 13
27111: PPUSH
27112: CALL_OW 2
27116: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27117: LD_VAR 0 13
27121: PPUSH
27122: LD_VAR 0 11
27126: PUSH
27127: LD_INT 1
27129: ARRAY
27130: PPUSH
27131: CALL_OW 52
// end ;
27135: GO 26774
27137: POP
27138: POP
// end ;
27139: GO 26083
27141: POP
27142: POP
// result := result ^ buildings ;
27143: LD_ADDR_VAR 0 6
27147: PUSH
27148: LD_VAR 0 6
27152: PUSH
27153: LD_VAR 0 17
27157: ADD
27158: ST_TO_ADDR
// end else
27159: GO 27302
// begin for i = 1 to personel do
27161: LD_ADDR_VAR 0 7
27165: PUSH
27166: DOUBLE
27167: LD_INT 1
27169: DEC
27170: ST_TO_ADDR
27171: LD_VAR 0 5
27175: PUSH
27176: FOR_TO
27177: IFFALSE 27300
// begin if i > 4 then
27179: LD_VAR 0 7
27183: PUSH
27184: LD_INT 4
27186: GREATER
27187: IFFALSE 27191
// break ;
27189: GO 27300
// x := personel [ i ] ;
27191: LD_ADDR_VAR 0 12
27195: PUSH
27196: LD_VAR 0 5
27200: PUSH
27201: LD_VAR 0 7
27205: ARRAY
27206: ST_TO_ADDR
// if x = - 1 then
27207: LD_VAR 0 12
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: EQUAL
27216: IFFALSE 27220
// continue ;
27218: GO 27176
// PrepareHuman ( false , i , skill ) ;
27220: LD_INT 0
27222: PPUSH
27223: LD_VAR 0 7
27227: PPUSH
27228: LD_VAR 0 3
27232: PPUSH
27233: CALL_OW 380
// un := CreateHuman ;
27237: LD_ADDR_VAR 0 13
27241: PUSH
27242: CALL_OW 44
27246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27247: LD_VAR 0 13
27251: PPUSH
27252: LD_VAR 0 1
27256: PPUSH
27257: CALL_OW 250
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 251
27271: PPUSH
27272: LD_INT 10
27274: PPUSH
27275: LD_INT 0
27277: PPUSH
27278: CALL_OW 50
// result := result ^ un ;
27282: LD_ADDR_VAR 0 6
27286: PUSH
27287: LD_VAR 0 6
27291: PUSH
27292: LD_VAR 0 13
27296: ADD
27297: ST_TO_ADDR
// end ;
27298: GO 27176
27300: POP
27301: POP
// end ; end ;
27302: LD_VAR 0 6
27306: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
27320: PPUSH
27321: PPUSH
27322: PPUSH
27323: PPUSH
27324: PPUSH
// result := false ;
27325: LD_ADDR_VAR 0 2
27329: PUSH
27330: LD_INT 0
27332: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27333: LD_VAR 0 1
27337: NOT
27338: PUSH
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 266
27348: PUSH
27349: LD_INT 32
27351: PUSH
27352: LD_INT 33
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: IN
27359: NOT
27360: OR
27361: IFFALSE 27365
// exit ;
27363: GO 28496
// nat := GetNation ( tower ) ;
27365: LD_ADDR_VAR 0 11
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 248
27379: ST_TO_ADDR
// side := GetSide ( tower ) ;
27380: LD_ADDR_VAR 0 15
27384: PUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 255
27394: ST_TO_ADDR
// x := GetX ( tower ) ;
27395: LD_ADDR_VAR 0 9
27399: PUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 250
27409: ST_TO_ADDR
// y := GetY ( tower ) ;
27410: LD_ADDR_VAR 0 10
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 251
27424: ST_TO_ADDR
// if not x or not y then
27425: LD_VAR 0 9
27429: NOT
27430: PUSH
27431: LD_VAR 0 10
27435: NOT
27436: OR
27437: IFFALSE 27441
// exit ;
27439: GO 28496
// weapon := 0 ;
27441: LD_ADDR_VAR 0 17
27445: PUSH
27446: LD_INT 0
27448: ST_TO_ADDR
// fac_list := [ ] ;
27449: LD_ADDR_VAR 0 16
27453: PUSH
27454: EMPTY
27455: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
27456: LD_ADDR_VAR 0 5
27460: PUSH
27461: LD_VAR 0 1
27465: PPUSH
27466: CALL_OW 274
27470: PPUSH
27471: CALL 25204 0 1
27475: PPUSH
27476: LD_INT 30
27478: PUSH
27479: LD_INT 3
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 72
27490: ST_TO_ADDR
// if not factories then
27491: LD_VAR 0 5
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 28496
// for i in factories do
27500: LD_ADDR_VAR 0 7
27504: PUSH
27505: LD_VAR 0 5
27509: PUSH
27510: FOR_IN
27511: IFFALSE 27536
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27513: LD_ADDR_VAR 0 16
27517: PUSH
27518: LD_VAR 0 16
27522: PUSH
27523: LD_VAR 0 7
27527: PPUSH
27528: CALL_OW 478
27532: UNION
27533: ST_TO_ADDR
27534: GO 27510
27536: POP
27537: POP
// if not fac_list then
27538: LD_VAR 0 16
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 28496
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27547: LD_ADDR_VAR 0 4
27551: PUSH
27552: LD_INT 4
27554: PUSH
27555: LD_INT 5
27557: PUSH
27558: LD_INT 9
27560: PUSH
27561: LD_INT 10
27563: PUSH
27564: LD_INT 6
27566: PUSH
27567: LD_INT 7
27569: PUSH
27570: LD_INT 11
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 27
27584: PUSH
27585: LD_INT 28
27587: PUSH
27588: LD_INT 26
27590: PUSH
27591: LD_INT 30
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 43
27602: PUSH
27603: LD_INT 44
27605: PUSH
27606: LD_INT 46
27608: PUSH
27609: LD_INT 45
27611: PUSH
27612: LD_INT 47
27614: PUSH
27615: LD_INT 49
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: PUSH
27631: LD_VAR 0 11
27635: ARRAY
27636: ST_TO_ADDR
// for i in list do
27637: LD_ADDR_VAR 0 7
27641: PUSH
27642: LD_VAR 0 4
27646: PUSH
27647: FOR_IN
27648: IFFALSE 27681
// if not i in fac_list then
27650: LD_VAR 0 7
27654: PUSH
27655: LD_VAR 0 16
27659: IN
27660: NOT
27661: IFFALSE 27679
// list := list diff i ;
27663: LD_ADDR_VAR 0 4
27667: PUSH
27668: LD_VAR 0 4
27672: PUSH
27673: LD_VAR 0 7
27677: DIFF
27678: ST_TO_ADDR
27679: GO 27647
27681: POP
27682: POP
// if not list then
27683: LD_VAR 0 4
27687: NOT
27688: IFFALSE 27692
// exit ;
27690: GO 28496
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27692: LD_VAR 0 11
27696: PUSH
27697: LD_INT 3
27699: EQUAL
27700: PUSH
27701: LD_INT 49
27703: PUSH
27704: LD_VAR 0 4
27708: IN
27709: AND
27710: PUSH
27711: LD_INT 31
27713: PPUSH
27714: LD_VAR 0 15
27718: PPUSH
27719: CALL_OW 321
27723: PUSH
27724: LD_INT 2
27726: EQUAL
27727: AND
27728: IFFALSE 27788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27730: LD_INT 22
27732: PUSH
27733: LD_VAR 0 15
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 35
27744: PUSH
27745: LD_INT 49
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 91
27754: PUSH
27755: LD_VAR 0 1
27759: PUSH
27760: LD_INT 10
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: NOT
27778: IFFALSE 27788
// weapon := ru_time_lapser ;
27780: LD_ADDR_VAR 0 17
27784: PUSH
27785: LD_INT 49
27787: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27788: LD_VAR 0 11
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: IN
27803: PUSH
27804: LD_INT 11
27806: PUSH
27807: LD_VAR 0 4
27811: IN
27812: PUSH
27813: LD_INT 30
27815: PUSH
27816: LD_VAR 0 4
27820: IN
27821: OR
27822: AND
27823: PUSH
27824: LD_INT 6
27826: PPUSH
27827: LD_VAR 0 15
27831: PPUSH
27832: CALL_OW 321
27836: PUSH
27837: LD_INT 2
27839: EQUAL
27840: AND
27841: IFFALSE 28006
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27843: LD_INT 22
27845: PUSH
27846: LD_VAR 0 15
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 35
27860: PUSH
27861: LD_INT 11
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 35
27870: PUSH
27871: LD_INT 30
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 91
27885: PUSH
27886: LD_VAR 0 1
27890: PUSH
27891: LD_INT 18
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: PPUSH
27904: CALL_OW 69
27908: NOT
27909: PUSH
27910: LD_INT 22
27912: PUSH
27913: LD_VAR 0 15
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: LD_INT 30
27927: PUSH
27928: LD_INT 32
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 30
27937: PUSH
27938: LD_INT 33
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 91
27952: PUSH
27953: LD_VAR 0 1
27957: PUSH
27958: LD_INT 12
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: PUSH
27979: LD_INT 2
27981: GREATER
27982: AND
27983: IFFALSE 28006
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27985: LD_ADDR_VAR 0 17
27989: PUSH
27990: LD_INT 11
27992: PUSH
27993: LD_INT 30
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_VAR 0 11
28004: ARRAY
28005: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28006: LD_VAR 0 17
28010: NOT
28011: PUSH
28012: LD_INT 40
28014: PPUSH
28015: LD_VAR 0 15
28019: PPUSH
28020: CALL_OW 321
28024: PUSH
28025: LD_INT 2
28027: EQUAL
28028: AND
28029: PUSH
28030: LD_INT 7
28032: PUSH
28033: LD_VAR 0 4
28037: IN
28038: PUSH
28039: LD_INT 28
28041: PUSH
28042: LD_VAR 0 4
28046: IN
28047: OR
28048: PUSH
28049: LD_INT 45
28051: PUSH
28052: LD_VAR 0 4
28056: IN
28057: OR
28058: AND
28059: IFFALSE 28313
// begin hex := GetHexInfo ( x , y ) ;
28061: LD_ADDR_VAR 0 3
28065: PUSH
28066: LD_VAR 0 9
28070: PPUSH
28071: LD_VAR 0 10
28075: PPUSH
28076: CALL_OW 546
28080: ST_TO_ADDR
// if hex [ 1 ] then
28081: LD_VAR 0 3
28085: PUSH
28086: LD_INT 1
28088: ARRAY
28089: IFFALSE 28093
// exit ;
28091: GO 28496
// height := hex [ 2 ] ;
28093: LD_ADDR_VAR 0 14
28097: PUSH
28098: LD_VAR 0 3
28102: PUSH
28103: LD_INT 2
28105: ARRAY
28106: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28107: LD_ADDR_VAR 0 13
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 3
28120: PUSH
28121: LD_INT 5
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// for i in tmp do
28130: LD_ADDR_VAR 0 7
28134: PUSH
28135: LD_VAR 0 13
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28311
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28143: LD_ADDR_VAR 0 8
28147: PUSH
28148: LD_VAR 0 9
28152: PPUSH
28153: LD_VAR 0 7
28157: PPUSH
28158: LD_INT 5
28160: PPUSH
28161: CALL_OW 272
28165: PUSH
28166: LD_VAR 0 10
28170: PPUSH
28171: LD_VAR 0 7
28175: PPUSH
28176: LD_INT 5
28178: PPUSH
28179: CALL_OW 273
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28188: LD_VAR 0 8
28192: PUSH
28193: LD_INT 1
28195: ARRAY
28196: PPUSH
28197: LD_VAR 0 8
28201: PUSH
28202: LD_INT 2
28204: ARRAY
28205: PPUSH
28206: CALL_OW 488
28210: IFFALSE 28309
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_VAR 0 8
28221: PUSH
28222: LD_INT 1
28224: ARRAY
28225: PPUSH
28226: LD_VAR 0 8
28230: PUSH
28231: LD_INT 2
28233: ARRAY
28234: PPUSH
28235: CALL_OW 546
28239: ST_TO_ADDR
// if hex [ 1 ] then
28240: LD_VAR 0 3
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: IFFALSE 28252
// continue ;
28250: GO 28140
// h := hex [ 2 ] ;
28252: LD_ADDR_VAR 0 12
28256: PUSH
28257: LD_VAR 0 3
28261: PUSH
28262: LD_INT 2
28264: ARRAY
28265: ST_TO_ADDR
// if h + 7 < height then
28266: LD_VAR 0 12
28270: PUSH
28271: LD_INT 7
28273: PLUS
28274: PUSH
28275: LD_VAR 0 14
28279: LESS
28280: IFFALSE 28309
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28282: LD_ADDR_VAR 0 17
28286: PUSH
28287: LD_INT 7
28289: PUSH
28290: LD_INT 28
28292: PUSH
28293: LD_INT 45
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: PUSH
28301: LD_VAR 0 11
28305: ARRAY
28306: ST_TO_ADDR
// break ;
28307: GO 28311
// end ; end ; end ;
28309: GO 28140
28311: POP
28312: POP
// end ; if not weapon then
28313: LD_VAR 0 17
28317: NOT
28318: IFFALSE 28378
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28320: LD_ADDR_VAR 0 4
28324: PUSH
28325: LD_VAR 0 4
28329: PUSH
28330: LD_INT 11
28332: PUSH
28333: LD_INT 30
28335: PUSH
28336: LD_INT 49
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: DIFF
28344: ST_TO_ADDR
// if not list then
28345: LD_VAR 0 4
28349: NOT
28350: IFFALSE 28354
// exit ;
28352: GO 28496
// weapon := list [ rand ( 1 , list ) ] ;
28354: LD_ADDR_VAR 0 17
28358: PUSH
28359: LD_VAR 0 4
28363: PUSH
28364: LD_INT 1
28366: PPUSH
28367: LD_VAR 0 4
28371: PPUSH
28372: CALL_OW 12
28376: ARRAY
28377: ST_TO_ADDR
// end ; if weapon then
28378: LD_VAR 0 17
28382: IFFALSE 28496
// begin tmp := CostOfWeapon ( weapon ) ;
28384: LD_ADDR_VAR 0 13
28388: PUSH
28389: LD_VAR 0 17
28393: PPUSH
28394: CALL_OW 451
28398: ST_TO_ADDR
// j := GetBase ( tower ) ;
28399: LD_ADDR_VAR 0 8
28403: PUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 274
28413: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28414: LD_VAR 0 8
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: CALL_OW 275
28426: PUSH
28427: LD_VAR 0 13
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: GREATEREQUAL
28436: PUSH
28437: LD_VAR 0 8
28441: PPUSH
28442: LD_INT 2
28444: PPUSH
28445: CALL_OW 275
28449: PUSH
28450: LD_VAR 0 13
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: GREATEREQUAL
28459: AND
28460: PUSH
28461: LD_VAR 0 8
28465: PPUSH
28466: LD_INT 3
28468: PPUSH
28469: CALL_OW 275
28473: PUSH
28474: LD_VAR 0 13
28478: PUSH
28479: LD_INT 3
28481: ARRAY
28482: GREATEREQUAL
28483: AND
28484: IFFALSE 28496
// result := weapon ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_VAR 0 17
28495: ST_TO_ADDR
// end ; end ;
28496: LD_VAR 0 2
28500: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28501: LD_INT 0
28503: PPUSH
28504: PPUSH
// result := true ;
28505: LD_ADDR_VAR 0 3
28509: PUSH
28510: LD_INT 1
28512: ST_TO_ADDR
// if array1 = array2 then
28513: LD_VAR 0 1
28517: PUSH
28518: LD_VAR 0 2
28522: EQUAL
28523: IFFALSE 28583
// begin for i = 1 to array1 do
28525: LD_ADDR_VAR 0 4
28529: PUSH
28530: DOUBLE
28531: LD_INT 1
28533: DEC
28534: ST_TO_ADDR
28535: LD_VAR 0 1
28539: PUSH
28540: FOR_TO
28541: IFFALSE 28579
// if array1 [ i ] <> array2 [ i ] then
28543: LD_VAR 0 1
28547: PUSH
28548: LD_VAR 0 4
28552: ARRAY
28553: PUSH
28554: LD_VAR 0 2
28558: PUSH
28559: LD_VAR 0 4
28563: ARRAY
28564: NONEQUAL
28565: IFFALSE 28577
// begin result := false ;
28567: LD_ADDR_VAR 0 3
28571: PUSH
28572: LD_INT 0
28574: ST_TO_ADDR
// break ;
28575: GO 28579
// end ;
28577: GO 28540
28579: POP
28580: POP
// end else
28581: GO 28591
// result := false ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 0
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 3
28595: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
// pom := GetBase ( fac ) ;
28601: LD_ADDR_VAR 0 5
28605: PUSH
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL_OW 274
28615: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28616: LD_ADDR_VAR 0 4
28620: PUSH
28621: LD_VAR 0 2
28625: PUSH
28626: LD_INT 1
28628: ARRAY
28629: PPUSH
28630: LD_VAR 0 2
28634: PUSH
28635: LD_INT 2
28637: ARRAY
28638: PPUSH
28639: LD_VAR 0 2
28643: PUSH
28644: LD_INT 3
28646: ARRAY
28647: PPUSH
28648: LD_VAR 0 2
28652: PUSH
28653: LD_INT 4
28655: ARRAY
28656: PPUSH
28657: CALL_OW 449
28661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28662: LD_ADDR_VAR 0 3
28666: PUSH
28667: LD_VAR 0 5
28671: PPUSH
28672: LD_INT 1
28674: PPUSH
28675: CALL_OW 275
28679: PUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: GREATEREQUAL
28689: PUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: LD_INT 2
28697: PPUSH
28698: CALL_OW 275
28702: PUSH
28703: LD_VAR 0 4
28707: PUSH
28708: LD_INT 2
28710: ARRAY
28711: GREATEREQUAL
28712: AND
28713: PUSH
28714: LD_VAR 0 5
28718: PPUSH
28719: LD_INT 3
28721: PPUSH
28722: CALL_OW 275
28726: PUSH
28727: LD_VAR 0 4
28731: PUSH
28732: LD_INT 3
28734: ARRAY
28735: GREATEREQUAL
28736: AND
28737: ST_TO_ADDR
// end ;
28738: LD_VAR 0 3
28742: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
// pom := GetBase ( building ) ;
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 274
28763: ST_TO_ADDR
// if not pom then
28764: LD_VAR 0 3
28768: NOT
28769: IFFALSE 28773
// exit ;
28771: GO 28943
// btype := GetBType ( building ) ;
28773: LD_ADDR_VAR 0 5
28777: PUSH
28778: LD_VAR 0 1
28782: PPUSH
28783: CALL_OW 266
28787: ST_TO_ADDR
// if btype = b_armoury then
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 4
28795: EQUAL
28796: IFFALSE 28806
// btype := b_barracks ;
28798: LD_ADDR_VAR 0 5
28802: PUSH
28803: LD_INT 5
28805: ST_TO_ADDR
// if btype = b_depot then
28806: LD_VAR 0 5
28810: PUSH
28811: LD_INT 0
28813: EQUAL
28814: IFFALSE 28824
// btype := b_warehouse ;
28816: LD_ADDR_VAR 0 5
28820: PUSH
28821: LD_INT 1
28823: ST_TO_ADDR
// if btype = b_workshop then
28824: LD_VAR 0 5
28828: PUSH
28829: LD_INT 2
28831: EQUAL
28832: IFFALSE 28842
// btype := b_factory ;
28834: LD_ADDR_VAR 0 5
28838: PUSH
28839: LD_INT 3
28841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28842: LD_ADDR_VAR 0 4
28846: PUSH
28847: LD_VAR 0 5
28851: PPUSH
28852: LD_VAR 0 1
28856: PPUSH
28857: CALL_OW 248
28861: PPUSH
28862: CALL_OW 450
28866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_VAR 0 3
28876: PPUSH
28877: LD_INT 1
28879: PPUSH
28880: CALL_OW 275
28884: PUSH
28885: LD_VAR 0 4
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: GREATEREQUAL
28894: PUSH
28895: LD_VAR 0 3
28899: PPUSH
28900: LD_INT 2
28902: PPUSH
28903: CALL_OW 275
28907: PUSH
28908: LD_VAR 0 4
28912: PUSH
28913: LD_INT 2
28915: ARRAY
28916: GREATEREQUAL
28917: AND
28918: PUSH
28919: LD_VAR 0 3
28923: PPUSH
28924: LD_INT 3
28926: PPUSH
28927: CALL_OW 275
28931: PUSH
28932: LD_VAR 0 4
28936: PUSH
28937: LD_INT 3
28939: ARRAY
28940: GREATEREQUAL
28941: AND
28942: ST_TO_ADDR
// end ;
28943: LD_VAR 0 2
28947: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28948: LD_INT 0
28950: PPUSH
28951: PPUSH
28952: PPUSH
// pom := GetBase ( building ) ;
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 274
28967: ST_TO_ADDR
// if not pom then
28968: LD_VAR 0 4
28972: NOT
28973: IFFALSE 28977
// exit ;
28975: GO 29078
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28977: LD_ADDR_VAR 0 5
28981: PUSH
28982: LD_VAR 0 2
28986: PPUSH
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 248
28996: PPUSH
28997: CALL_OW 450
29001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29002: LD_ADDR_VAR 0 3
29006: PUSH
29007: LD_VAR 0 4
29011: PPUSH
29012: LD_INT 1
29014: PPUSH
29015: CALL_OW 275
29019: PUSH
29020: LD_VAR 0 5
29024: PUSH
29025: LD_INT 1
29027: ARRAY
29028: GREATEREQUAL
29029: PUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: LD_INT 2
29037: PPUSH
29038: CALL_OW 275
29042: PUSH
29043: LD_VAR 0 5
29047: PUSH
29048: LD_INT 2
29050: ARRAY
29051: GREATEREQUAL
29052: AND
29053: PUSH
29054: LD_VAR 0 4
29058: PPUSH
29059: LD_INT 3
29061: PPUSH
29062: CALL_OW 275
29066: PUSH
29067: LD_VAR 0 5
29071: PUSH
29072: LD_INT 3
29074: ARRAY
29075: GREATEREQUAL
29076: AND
29077: ST_TO_ADDR
// end ;
29078: LD_VAR 0 3
29082: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29083: LD_INT 0
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
// result := false ;
29095: LD_ADDR_VAR 0 6
29099: PUSH
29100: LD_INT 0
29102: ST_TO_ADDR
// if not base or not btype or not x or not y then
29103: LD_VAR 0 1
29107: NOT
29108: PUSH
29109: LD_VAR 0 2
29113: NOT
29114: OR
29115: PUSH
29116: LD_VAR 0 3
29120: NOT
29121: OR
29122: PUSH
29123: LD_VAR 0 4
29127: NOT
29128: OR
29129: IFFALSE 29133
// exit ;
29131: GO 29647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29133: LD_ADDR_VAR 0 12
29137: PUSH
29138: LD_VAR 0 2
29142: PPUSH
29143: LD_VAR 0 3
29147: PPUSH
29148: LD_VAR 0 4
29152: PPUSH
29153: LD_VAR 0 5
29157: PPUSH
29158: LD_VAR 0 1
29162: PUSH
29163: LD_INT 1
29165: ARRAY
29166: PPUSH
29167: CALL_OW 248
29171: PPUSH
29172: LD_INT 0
29174: PPUSH
29175: CALL 30476 0 6
29179: ST_TO_ADDR
// if not hexes then
29180: LD_VAR 0 12
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29647
// for i = 1 to hexes do
29189: LD_ADDR_VAR 0 7
29193: PUSH
29194: DOUBLE
29195: LD_INT 1
29197: DEC
29198: ST_TO_ADDR
29199: LD_VAR 0 12
29203: PUSH
29204: FOR_TO
29205: IFFALSE 29645
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29207: LD_ADDR_VAR 0 11
29211: PUSH
29212: LD_VAR 0 12
29216: PUSH
29217: LD_VAR 0 7
29221: ARRAY
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: PPUSH
29227: LD_VAR 0 12
29231: PUSH
29232: LD_VAR 0 7
29236: ARRAY
29237: PUSH
29238: LD_INT 2
29240: ARRAY
29241: PPUSH
29242: CALL_OW 428
29246: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
29247: LD_VAR 0 11
29251: NOT
29252: PUSH
29253: LD_VAR 0 11
29257: PPUSH
29258: CALL_OW 247
29262: PUSH
29263: LD_INT 3
29265: EQUAL
29266: OR
29267: IFFALSE 29271
// continue ;
29269: GO 29204
// result := true ;
29271: LD_ADDR_VAR 0 6
29275: PUSH
29276: LD_INT 1
29278: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29279: LD_ADDR_VAR 0 15
29283: PUSH
29284: LD_INT 22
29286: PUSH
29287: LD_VAR 0 11
29291: PPUSH
29292: CALL_OW 255
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 30
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 30
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if dep then
29338: LD_VAR 0 15
29342: IFFALSE 29478
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29344: LD_ADDR_VAR 0 14
29348: PUSH
29349: LD_VAR 0 15
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: CALL_OW 250
29362: PPUSH
29363: LD_VAR 0 15
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: CALL_OW 254
29376: PPUSH
29377: LD_INT 5
29379: PPUSH
29380: CALL_OW 272
29384: PUSH
29385: LD_VAR 0 15
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: PPUSH
29394: CALL_OW 251
29398: PPUSH
29399: LD_VAR 0 15
29403: PUSH
29404: LD_INT 1
29406: ARRAY
29407: PPUSH
29408: CALL_OW 254
29412: PPUSH
29413: LD_INT 5
29415: PPUSH
29416: CALL_OW 273
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29425: LD_VAR 0 14
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PPUSH
29434: LD_VAR 0 14
29438: PUSH
29439: LD_INT 2
29441: ARRAY
29442: PPUSH
29443: CALL_OW 488
29447: IFFALSE 29478
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29449: LD_VAR 0 11
29453: PPUSH
29454: LD_VAR 0 14
29458: PUSH
29459: LD_INT 1
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 14
29467: PUSH
29468: LD_INT 2
29470: ARRAY
29471: PPUSH
29472: CALL_OW 111
// continue ;
29476: GO 29204
// end ; end ; r := GetDir ( tmp ) ;
29478: LD_ADDR_VAR 0 13
29482: PUSH
29483: LD_VAR 0 11
29487: PPUSH
29488: CALL_OW 254
29492: ST_TO_ADDR
// if r = 5 then
29493: LD_VAR 0 13
29497: PUSH
29498: LD_INT 5
29500: EQUAL
29501: IFFALSE 29511
// r := 0 ;
29503: LD_ADDR_VAR 0 13
29507: PUSH
29508: LD_INT 0
29510: ST_TO_ADDR
// for j = r to 5 do
29511: LD_ADDR_VAR 0 8
29515: PUSH
29516: DOUBLE
29517: LD_VAR 0 13
29521: DEC
29522: ST_TO_ADDR
29523: LD_INT 5
29525: PUSH
29526: FOR_TO
29527: IFFALSE 29641
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29529: LD_ADDR_VAR 0 9
29533: PUSH
29534: LD_VAR 0 11
29538: PPUSH
29539: CALL_OW 250
29543: PPUSH
29544: LD_VAR 0 8
29548: PPUSH
29549: LD_INT 2
29551: PPUSH
29552: CALL_OW 272
29556: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29557: LD_ADDR_VAR 0 10
29561: PUSH
29562: LD_VAR 0 11
29566: PPUSH
29567: CALL_OW 251
29571: PPUSH
29572: LD_VAR 0 8
29576: PPUSH
29577: LD_INT 2
29579: PPUSH
29580: CALL_OW 273
29584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29585: LD_VAR 0 9
29589: PPUSH
29590: LD_VAR 0 10
29594: PPUSH
29595: CALL_OW 488
29599: PUSH
29600: LD_VAR 0 9
29604: PPUSH
29605: LD_VAR 0 10
29609: PPUSH
29610: CALL_OW 428
29614: NOT
29615: AND
29616: IFFALSE 29639
// begin ComMoveXY ( tmp , _x , _y ) ;
29618: LD_VAR 0 11
29622: PPUSH
29623: LD_VAR 0 9
29627: PPUSH
29628: LD_VAR 0 10
29632: PPUSH
29633: CALL_OW 111
// break ;
29637: GO 29641
// end ; end ;
29639: GO 29526
29641: POP
29642: POP
// end ;
29643: GO 29204
29645: POP
29646: POP
// end ;
29647: LD_VAR 0 6
29651: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
29652: LD_INT 0
29654: PPUSH
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
// result := false ;
29663: LD_ADDR_VAR 0 6
29667: PUSH
29668: LD_INT 0
29670: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29671: LD_VAR 0 1
29675: NOT
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 266
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: IN
29697: NOT
29698: OR
29699: PUSH
29700: LD_VAR 0 2
29704: NOT
29705: OR
29706: PUSH
29707: LD_VAR 0 5
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: LD_INT 4
29726: PUSH
29727: LD_INT 5
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: IN
29738: NOT
29739: OR
29740: PUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: LD_VAR 0 4
29750: PPUSH
29751: CALL_OW 488
29755: NOT
29756: OR
29757: IFFALSE 29761
// exit ;
29759: GO 30471
// pom := GetBase ( bdepot ) ;
29761: LD_ADDR_VAR 0 9
29765: PUSH
29766: LD_VAR 0 1
29770: PPUSH
29771: CALL_OW 274
29775: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
29776: LD_ADDR_VAR 0 10
29780: PUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: CALL_OW 248
29795: PPUSH
29796: CALL_OW 450
29800: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29801: LD_VAR 0 9
29805: PPUSH
29806: LD_INT 1
29808: PPUSH
29809: CALL_OW 275
29813: PUSH
29814: LD_VAR 0 10
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: GREATEREQUAL
29823: PUSH
29824: LD_VAR 0 9
29828: PPUSH
29829: LD_INT 2
29831: PPUSH
29832: CALL_OW 275
29836: PUSH
29837: LD_VAR 0 10
29841: PUSH
29842: LD_INT 2
29844: ARRAY
29845: GREATEREQUAL
29846: AND
29847: PUSH
29848: LD_VAR 0 9
29852: PPUSH
29853: LD_INT 3
29855: PPUSH
29856: CALL_OW 275
29860: PUSH
29861: LD_VAR 0 10
29865: PUSH
29866: LD_INT 3
29868: ARRAY
29869: GREATEREQUAL
29870: AND
29871: NOT
29872: IFFALSE 29876
// exit ;
29874: GO 30471
// if GetBType ( bdepot ) = b_depot then
29876: LD_VAR 0 1
29880: PPUSH
29881: CALL_OW 266
29885: PUSH
29886: LD_INT 0
29888: EQUAL
29889: IFFALSE 29901
// dist := 28 else
29891: LD_ADDR_VAR 0 13
29895: PUSH
29896: LD_INT 28
29898: ST_TO_ADDR
29899: GO 29909
// dist := 36 ;
29901: LD_ADDR_VAR 0 13
29905: PUSH
29906: LD_INT 36
29908: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: LD_VAR 0 4
29923: PPUSH
29924: CALL_OW 297
29928: PUSH
29929: LD_VAR 0 13
29933: GREATER
29934: IFFALSE 29938
// exit ;
29936: GO 30471
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
29938: LD_ADDR_VAR 0 11
29942: PUSH
29943: LD_VAR 0 2
29947: PPUSH
29948: LD_VAR 0 3
29952: PPUSH
29953: LD_VAR 0 4
29957: PPUSH
29958: LD_VAR 0 5
29962: PPUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 248
29972: PPUSH
29973: LD_INT 0
29975: PPUSH
29976: CALL 30476 0 6
29980: ST_TO_ADDR
// if not hexes then
29981: LD_VAR 0 11
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30471
// hex := GetHexInfo ( x , y ) ;
29990: LD_ADDR_VAR 0 14
29994: PUSH
29995: LD_VAR 0 3
29999: PPUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: CALL_OW 546
30009: ST_TO_ADDR
// if hex [ 1 ] then
30010: LD_VAR 0 14
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: IFFALSE 30022
// exit ;
30020: GO 30471
// height := hex [ 2 ] ;
30022: LD_ADDR_VAR 0 12
30026: PUSH
30027: LD_VAR 0 14
30031: PUSH
30032: LD_INT 2
30034: ARRAY
30035: ST_TO_ADDR
// for i = 1 to hexes do
30036: LD_ADDR_VAR 0 7
30040: PUSH
30041: DOUBLE
30042: LD_INT 1
30044: DEC
30045: ST_TO_ADDR
30046: LD_VAR 0 11
30050: PUSH
30051: FOR_TO
30052: IFFALSE 30380
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30054: LD_VAR 0 11
30058: PUSH
30059: LD_VAR 0 7
30063: ARRAY
30064: PUSH
30065: LD_INT 1
30067: ARRAY
30068: PPUSH
30069: LD_VAR 0 11
30073: PUSH
30074: LD_VAR 0 7
30078: ARRAY
30079: PUSH
30080: LD_INT 2
30082: ARRAY
30083: PPUSH
30084: CALL_OW 488
30088: NOT
30089: IFFALSE 30093
// continue ;
30091: GO 30051
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30093: LD_ADDR_VAR 0 8
30097: PUSH
30098: LD_VAR 0 11
30102: PUSH
30103: LD_VAR 0 7
30107: ARRAY
30108: PUSH
30109: LD_INT 1
30111: ARRAY
30112: PPUSH
30113: LD_VAR 0 11
30117: PUSH
30118: LD_VAR 0 7
30122: ARRAY
30123: PUSH
30124: LD_INT 2
30126: ARRAY
30127: PPUSH
30128: CALL_OW 546
30132: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30133: LD_VAR 0 8
30137: PUSH
30138: LD_INT 1
30140: ARRAY
30141: PUSH
30142: LD_VAR 0 8
30146: PUSH
30147: LD_INT 2
30149: ARRAY
30150: PUSH
30151: LD_VAR 0 12
30155: PUSH
30156: LD_INT 2
30158: PLUS
30159: GREATER
30160: OR
30161: PUSH
30162: LD_VAR 0 8
30166: PUSH
30167: LD_INT 2
30169: ARRAY
30170: PUSH
30171: LD_VAR 0 12
30175: PUSH
30176: LD_INT 2
30178: MINUS
30179: LESS
30180: OR
30181: PUSH
30182: LD_VAR 0 8
30186: PUSH
30187: LD_INT 3
30189: ARRAY
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: LD_INT 8
30196: PUSH
30197: LD_INT 9
30199: PUSH
30200: LD_INT 10
30202: PUSH
30203: LD_INT 11
30205: PUSH
30206: LD_INT 12
30208: PUSH
30209: LD_INT 13
30211: PUSH
30212: LD_INT 16
30214: PUSH
30215: LD_INT 17
30217: PUSH
30218: LD_INT 18
30220: PUSH
30221: LD_INT 19
30223: PUSH
30224: LD_INT 20
30226: PUSH
30227: LD_INT 21
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: IN
30245: NOT
30246: OR
30247: PUSH
30248: LD_VAR 0 8
30252: PUSH
30253: LD_INT 5
30255: ARRAY
30256: NOT
30257: OR
30258: PUSH
30259: LD_VAR 0 8
30263: PUSH
30264: LD_INT 6
30266: ARRAY
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 7
30276: PUSH
30277: LD_INT 9
30279: PUSH
30280: LD_INT 10
30282: PUSH
30283: LD_INT 11
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: IN
30294: NOT
30295: OR
30296: PUSH
30297: LD_VAR 0 11
30301: PUSH
30302: LD_VAR 0 7
30306: ARRAY
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: PPUSH
30312: LD_VAR 0 11
30316: PUSH
30317: LD_VAR 0 7
30321: ARRAY
30322: PUSH
30323: LD_INT 2
30325: ARRAY
30326: PPUSH
30327: CALL_OW 428
30331: PUSH
30332: LD_INT 0
30334: GREATER
30335: OR
30336: PUSH
30337: LD_VAR 0 11
30341: PUSH
30342: LD_VAR 0 7
30346: ARRAY
30347: PUSH
30348: LD_INT 1
30350: ARRAY
30351: PPUSH
30352: LD_VAR 0 11
30356: PUSH
30357: LD_VAR 0 7
30361: ARRAY
30362: PUSH
30363: LD_INT 2
30365: ARRAY
30366: PPUSH
30367: CALL_OW 351
30371: OR
30372: IFFALSE 30378
// exit ;
30374: POP
30375: POP
30376: GO 30471
// end ;
30378: GO 30051
30380: POP
30381: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
30382: LD_VAR 0 1
30386: PPUSH
30387: CALL_OW 255
30391: PPUSH
30392: LD_VAR 0 3
30396: PPUSH
30397: LD_VAR 0 4
30401: PPUSH
30402: LD_INT 20
30404: PPUSH
30405: CALL 23358 0 4
30409: PUSH
30410: LD_INT 4
30412: ARRAY
30413: IFFALSE 30417
// exit ;
30415: GO 30471
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
30417: LD_VAR 0 2
30421: PUSH
30422: LD_INT 29
30424: PUSH
30425: LD_INT 30
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: IN
30432: PUSH
30433: LD_VAR 0 3
30437: PPUSH
30438: LD_VAR 0 4
30442: PPUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 255
30452: PPUSH
30453: CALL_OW 440
30457: NOT
30458: AND
30459: IFFALSE 30463
// exit ;
30461: GO 30471
// result := true ;
30463: LD_ADDR_VAR 0 6
30467: PUSH
30468: LD_INT 1
30470: ST_TO_ADDR
// end ;
30471: LD_VAR 0 6
30475: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
// result = [ ] ;
30536: LD_ADDR_VAR 0 7
30540: PUSH
30541: EMPTY
30542: ST_TO_ADDR
// temp_list = [ ] ;
30543: LD_ADDR_VAR 0 9
30547: PUSH
30548: EMPTY
30549: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30550: LD_VAR 0 4
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: LD_INT 4
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: IN
30581: NOT
30582: PUSH
30583: LD_VAR 0 1
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: IN
30598: PUSH
30599: LD_VAR 0 5
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: IN
30618: NOT
30619: AND
30620: OR
30621: IFFALSE 30625
// exit ;
30623: GO 49010
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30625: LD_VAR 0 1
30629: PUSH
30630: LD_INT 6
30632: PUSH
30633: LD_INT 7
30635: PUSH
30636: LD_INT 8
30638: PUSH
30639: LD_INT 13
30641: PUSH
30642: LD_INT 12
30644: PUSH
30645: LD_INT 15
30647: PUSH
30648: LD_INT 11
30650: PUSH
30651: LD_INT 14
30653: PUSH
30654: LD_INT 10
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: IN
30668: IFFALSE 30678
// btype = b_lab ;
30670: LD_ADDR_VAR 0 1
30674: PUSH
30675: LD_INT 6
30677: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30678: LD_VAR 0 6
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: IN
30697: NOT
30698: PUSH
30699: LD_VAR 0 1
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: LD_INT 6
30718: PUSH
30719: LD_INT 36
30721: PUSH
30722: LD_INT 4
30724: PUSH
30725: LD_INT 5
30727: PUSH
30728: LD_INT 31
30730: PUSH
30731: LD_INT 32
30733: PUSH
30734: LD_INT 33
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: IN
30750: NOT
30751: PUSH
30752: LD_VAR 0 6
30756: PUSH
30757: LD_INT 1
30759: EQUAL
30760: AND
30761: OR
30762: PUSH
30763: LD_VAR 0 1
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 3
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: IN
30778: NOT
30779: PUSH
30780: LD_VAR 0 6
30784: PUSH
30785: LD_INT 2
30787: EQUAL
30788: AND
30789: OR
30790: IFFALSE 30800
// mode = 0 ;
30792: LD_ADDR_VAR 0 6
30796: PUSH
30797: LD_INT 0
30799: ST_TO_ADDR
// case mode of 0 :
30800: LD_VAR 0 6
30804: PUSH
30805: LD_INT 0
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 42266
30813: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30814: LD_ADDR_VAR 0 11
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31007: LD_ADDR_VAR 0 12
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31203: LD_ADDR_VAR 0 13
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 3
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31402: LD_ADDR_VAR 0 14
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31598: LD_ADDR_VAR 0 15
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 3
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31791: LD_ADDR_VAR 0 16
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31984: LD_ADDR_VAR 0 17
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32214: LD_ADDR_VAR 0 18
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32444: LD_ADDR_VAR 0 19
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 2
32620: NEG
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: NEG
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32674: LD_ADDR_VAR 0 20
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32904: LD_ADDR_VAR 0 21
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: LD_INT 2
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 2
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33134: LD_ADDR_VAR 0 22
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33364: LD_ADDR_VAR 0 23
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: LD_INT 2
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: LD_INT 2
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 2
33575: NEG
33576: PUSH
33577: LD_INT 3
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 3
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33644: LD_ADDR_VAR 0 24
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33920: LD_ADDR_VAR 0 25
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 1
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: NEG
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34194: LD_ADDR_VAR 0 26
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 3
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34470: LD_ADDR_VAR 0 27
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 2
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 3
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34750: LD_ADDR_VAR 0 28
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35032: LD_ADDR_VAR 0 29
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 2
35198: NEG
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 3
35276: NEG
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35311: LD_ADDR_VAR 0 30
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 3
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 3
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35589: LD_ADDR_VAR 0 31
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: LD_INT 3
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 3
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 3
35832: NEG
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35867: LD_ADDR_VAR 0 32
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 2
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: LD_INT 3
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36145: LD_ADDR_VAR 0 33
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 3
36389: NEG
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36424: LD_ADDR_VAR 0 34
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 3
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 3
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36704: LD_ADDR_VAR 0 35
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36816: LD_ADDR_VAR 0 36
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36928: LD_ADDR_VAR 0 37
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37040: LD_ADDR_VAR 0 38
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37152: LD_ADDR_VAR 0 39
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37264: LD_ADDR_VAR 0 40
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37376: LD_ADDR_VAR 0 41
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: NEG
37567: PUSH
37568: LD_INT 3
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 3
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 3
37685: NEG
37686: PUSH
37687: LD_INT 3
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37726: LD_ADDR_VAR 0 42
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: LD_INT 3
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 3
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 3
38023: NEG
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: LD_INT 3
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38076: LD_ADDR_VAR 0 43
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: NEG
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 3
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 3
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 3
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38424: LD_ADDR_VAR 0 44
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: LD_INT 3
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 3
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 3
38667: PUSH
38668: LD_INT 3
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 3
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 3
38721: NEG
38722: PUSH
38723: LD_INT 2
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 3
38733: NEG
38734: PUSH
38735: LD_INT 3
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38774: LD_ADDR_VAR 0 45
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 3
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 3
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39124: LD_ADDR_VAR 0 46
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 3
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 3
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 3
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39472: LD_ADDR_VAR 0 47
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39623: LD_ADDR_VAR 0 48
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39770: LD_ADDR_VAR 0 49
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39914: LD_ADDR_VAR 0 50
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40058: LD_ADDR_VAR 0 51
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40205: LD_ADDR_VAR 0 52
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40356: LD_ADDR_VAR 0 53
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40586: LD_ADDR_VAR 0 54
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40816: LD_ADDR_VAR 0 55
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41046: LD_ADDR_VAR 0 56
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41276: LD_ADDR_VAR 0 57
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41506: LD_ADDR_VAR 0 58
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41736: LD_ADDR_VAR 0 59
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41824: LD_ADDR_VAR 0 60
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41912: LD_ADDR_VAR 0 61
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42000: LD_ADDR_VAR 0 62
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42088: LD_ADDR_VAR 0 63
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42176: LD_ADDR_VAR 0 64
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// end ; 1 :
42264: GO 48161
42266: LD_INT 1
42268: DOUBLE
42269: EQUAL
42270: IFTRUE 42274
42272: GO 44897
42274: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42275: LD_ADDR_VAR 0 11
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42319: LD_ADDR_VAR 0 12
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 3
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42360: LD_ADDR_VAR 0 13
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42400: LD_ADDR_VAR 0 14
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42441: LD_ADDR_VAR 0 15
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 3
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42485: LD_ADDR_VAR 0 16
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42531: LD_ADDR_VAR 0 17
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 3
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42575: LD_ADDR_VAR 0 18
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42616: LD_ADDR_VAR 0 19
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42656: LD_ADDR_VAR 0 20
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42697: LD_ADDR_VAR 0 21
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42741: LD_ADDR_VAR 0 22
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: LD_INT 3
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42787: LD_ADDR_VAR 0 23
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 4
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42831: LD_ADDR_VAR 0 24
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 4
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42872: LD_ADDR_VAR 0 25
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 4
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 4
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42912: LD_ADDR_VAR 0 26
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 4
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42953: LD_ADDR_VAR 0 27
42957: PUSH
42958: LD_INT 3
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 4
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42997: LD_ADDR_VAR 0 28
43001: PUSH
43002: LD_INT 3
43004: NEG
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: LD_INT 4
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 4
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43043: LD_ADDR_VAR 0 29
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 2
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 4
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 4
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 3
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 5
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 5
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 4
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 6
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 6
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 5
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43198: LD_ADDR_VAR 0 30
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 3
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 4
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 5
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 5
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 5
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 6
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 6
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43341: LD_ADDR_VAR 0 31
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 4
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 4
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 5
43408: PUSH
43409: LD_INT 4
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 5
43418: PUSH
43419: LD_INT 5
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 4
43428: PUSH
43429: LD_INT 5
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 6
43438: PUSH
43439: LD_INT 5
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 6
43448: PUSH
43449: LD_INT 6
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 5
43458: PUSH
43459: LD_INT 6
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43480: LD_ADDR_VAR 0 32
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 4
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 5
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 4
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 6
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 6
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 5
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43623: LD_ADDR_VAR 0 33
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 4
43675: NEG
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 4
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 4
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 5
43709: NEG
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 5
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 5
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 6
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 6
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43778: LD_ADDR_VAR 0 34
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: LD_INT 4
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 4
43833: NEG
43834: PUSH
43835: LD_INT 3
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 4
43845: NEG
43846: PUSH
43847: LD_INT 4
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 4
43857: NEG
43858: PUSH
43859: LD_INT 5
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 5
43869: NEG
43870: PUSH
43871: LD_INT 4
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 5
43881: NEG
43882: PUSH
43883: LD_INT 5
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 5
43893: NEG
43894: PUSH
43895: LD_INT 6
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 6
43905: NEG
43906: PUSH
43907: LD_INT 5
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 6
43917: NEG
43918: PUSH
43919: LD_INT 6
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43941: LD_ADDR_VAR 0 41
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 3
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43985: LD_ADDR_VAR 0 42
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44026: LD_ADDR_VAR 0 43
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44066: LD_ADDR_VAR 0 44
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44107: LD_ADDR_VAR 0 45
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 3
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44151: LD_ADDR_VAR 0 46
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 3
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44197: LD_ADDR_VAR 0 47
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 3
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44230: LD_ADDR_VAR 0 48
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44261: LD_ADDR_VAR 0 49
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44290: LD_ADDR_VAR 0 50
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44319: LD_ADDR_VAR 0 51
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44350: LD_ADDR_VAR 0 52
44354: PUSH
44355: LD_INT 3
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44383: LD_ADDR_VAR 0 53
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 3
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 3
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44427: LD_ADDR_VAR 0 54
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44468: LD_ADDR_VAR 0 55
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44508: LD_ADDR_VAR 0 56
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44549: LD_ADDR_VAR 0 57
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44593: LD_ADDR_VAR 0 58
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 3
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: NEG
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44639: LD_ADDR_VAR 0 59
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44683: LD_ADDR_VAR 0 60
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44724: LD_ADDR_VAR 0 61
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44764: LD_ADDR_VAR 0 62
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 63
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44849: LD_ADDR_VAR 0 64
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// end ; 2 :
44895: GO 48161
44897: LD_INT 2
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44905
44903: GO 48160
44905: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44906: LD_ADDR_VAR 0 29
44910: PUSH
44911: LD_INT 4
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 4
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 5
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 4
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 4
45036: PUSH
45037: LD_INT 4
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 4
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 4
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 4
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 5
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 5
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 4
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 5
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 4
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 4
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 4
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 4
45291: NEG
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 4
45303: NEG
45304: PUSH
45305: LD_INT 5
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: LD_INT 4
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 4
45339: NEG
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 5
45351: NEG
45352: PUSH
45353: LD_INT 4
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: NEG
45364: PUSH
45365: LD_INT 5
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: LD_INT 5
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 5
45387: NEG
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45444: LD_ADDR_VAR 0 30
45448: PUSH
45449: LD_INT 4
45451: PUSH
45452: LD_INT 4
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 4
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 5
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 5
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 4
45491: PUSH
45492: LD_INT 5
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 4
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: PUSH
45532: LD_INT 5
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 4
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 4
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 4
45634: NEG
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 4
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 5
45690: NEG
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 5
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 5
45713: NEG
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 3
45725: NEG
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 4
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 3
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 4
45796: NEG
45797: PUSH
45798: LD_INT 3
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 4
45808: NEG
45809: PUSH
45810: LD_INT 4
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 4
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 4
45832: NEG
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 4
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 5
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 4
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 4
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 5
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 5
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45991: LD_ADDR_VAR 0 31
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 4
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 4
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 5
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 5
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 4
46147: NEG
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 4
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 4
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 4
46193: NEG
46194: PUSH
46195: LD_INT 4
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 4
46205: NEG
46206: PUSH
46207: LD_INT 5
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: NEG
46218: PUSH
46219: LD_INT 4
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: NEG
46230: PUSH
46231: LD_INT 3
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 4
46241: NEG
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 5
46253: NEG
46254: PUSH
46255: LD_INT 4
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 5
46265: NEG
46266: PUSH
46267: LD_INT 5
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 3
46277: NEG
46278: PUSH
46279: LD_INT 5
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 5
46289: NEG
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 3
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 4
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 4
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 4
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 5
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 5
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 4
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 3
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 3
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 5
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46541: LD_ADDR_VAR 0 32
46545: PUSH
46546: LD_INT 4
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 5
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 5
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: LD_INT 4
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 3
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 4
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 4
46722: NEG
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 4
46746: NEG
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 4
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 5
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 4
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 5
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 5
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 4
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 4
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 4
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: PUSH
46954: LD_INT 4
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 4
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 5
46973: PUSH
46974: LD_INT 4
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 5
46983: PUSH
46984: LD_INT 5
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 4
46993: PUSH
46994: LD_INT 5
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: LD_INT 4
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 3
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: PUSH
47034: LD_INT 5
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47088: LD_ADDR_VAR 0 33
47092: PUSH
47093: LD_INT 4
47095: NEG
47096: PUSH
47097: LD_INT 4
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: NEG
47108: PUSH
47109: LD_INT 5
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 4
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 4
47143: NEG
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 5
47155: NEG
47156: PUSH
47157: LD_INT 4
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 5
47167: NEG
47168: PUSH
47169: LD_INT 5
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: LD_INT 5
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 5
47191: NEG
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 3
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 4
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 3
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 4
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 4
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 5
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 5
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 4
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 5
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 4
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 4
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 4
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 4
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 4
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 5
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 5
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47626: LD_ADDR_VAR 0 34
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 4
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 5
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 3
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 4
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 5
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 5
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 4
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: PUSH
47829: LD_INT 4
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 4
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 4
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 4
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 5
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: LD_INT 5
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 4
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 4
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 4
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 4
48011: NEG
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 4
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 4
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 5
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 5
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 5
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// end ; end ;
48158: GO 48161
48160: POP
// case btype of b_depot , b_warehouse :
48161: LD_VAR 0 1
48165: PUSH
48166: LD_INT 0
48168: DOUBLE
48169: EQUAL
48170: IFTRUE 48180
48172: LD_INT 1
48174: DOUBLE
48175: EQUAL
48176: IFTRUE 48180
48178: GO 48381
48180: POP
// case nation of nation_american :
48181: LD_VAR 0 5
48185: PUSH
48186: LD_INT 1
48188: DOUBLE
48189: EQUAL
48190: IFTRUE 48194
48192: GO 48250
48194: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
48195: LD_ADDR_VAR 0 9
48199: PUSH
48200: LD_VAR 0 11
48204: PUSH
48205: LD_VAR 0 12
48209: PUSH
48210: LD_VAR 0 13
48214: PUSH
48215: LD_VAR 0 14
48219: PUSH
48220: LD_VAR 0 15
48224: PUSH
48225: LD_VAR 0 16
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: PUSH
48238: LD_VAR 0 4
48242: PUSH
48243: LD_INT 1
48245: PLUS
48246: ARRAY
48247: ST_TO_ADDR
48248: GO 48379
48250: LD_INT 2
48252: DOUBLE
48253: EQUAL
48254: IFTRUE 48258
48256: GO 48314
48258: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
48259: LD_ADDR_VAR 0 9
48263: PUSH
48264: LD_VAR 0 17
48268: PUSH
48269: LD_VAR 0 18
48273: PUSH
48274: LD_VAR 0 19
48278: PUSH
48279: LD_VAR 0 20
48283: PUSH
48284: LD_VAR 0 21
48288: PUSH
48289: LD_VAR 0 22
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: PUSH
48302: LD_VAR 0 4
48306: PUSH
48307: LD_INT 1
48309: PLUS
48310: ARRAY
48311: ST_TO_ADDR
48312: GO 48379
48314: LD_INT 3
48316: DOUBLE
48317: EQUAL
48318: IFTRUE 48322
48320: GO 48378
48322: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48323: LD_ADDR_VAR 0 9
48327: PUSH
48328: LD_VAR 0 23
48332: PUSH
48333: LD_VAR 0 24
48337: PUSH
48338: LD_VAR 0 25
48342: PUSH
48343: LD_VAR 0 26
48347: PUSH
48348: LD_VAR 0 27
48352: PUSH
48353: LD_VAR 0 28
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: PUSH
48366: LD_VAR 0 4
48370: PUSH
48371: LD_INT 1
48373: PLUS
48374: ARRAY
48375: ST_TO_ADDR
48376: GO 48379
48378: POP
48379: GO 48928
48381: LD_INT 2
48383: DOUBLE
48384: EQUAL
48385: IFTRUE 48395
48387: LD_INT 3
48389: DOUBLE
48390: EQUAL
48391: IFTRUE 48395
48393: GO 48451
48395: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48396: LD_ADDR_VAR 0 9
48400: PUSH
48401: LD_VAR 0 29
48405: PUSH
48406: LD_VAR 0 30
48410: PUSH
48411: LD_VAR 0 31
48415: PUSH
48416: LD_VAR 0 32
48420: PUSH
48421: LD_VAR 0 33
48425: PUSH
48426: LD_VAR 0 34
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: PUSH
48439: LD_VAR 0 4
48443: PUSH
48444: LD_INT 1
48446: PLUS
48447: ARRAY
48448: ST_TO_ADDR
48449: GO 48928
48451: LD_INT 16
48453: DOUBLE
48454: EQUAL
48455: IFTRUE 48507
48457: LD_INT 17
48459: DOUBLE
48460: EQUAL
48461: IFTRUE 48507
48463: LD_INT 18
48465: DOUBLE
48466: EQUAL
48467: IFTRUE 48507
48469: LD_INT 19
48471: DOUBLE
48472: EQUAL
48473: IFTRUE 48507
48475: LD_INT 20
48477: DOUBLE
48478: EQUAL
48479: IFTRUE 48507
48481: LD_INT 21
48483: DOUBLE
48484: EQUAL
48485: IFTRUE 48507
48487: LD_INT 23
48489: DOUBLE
48490: EQUAL
48491: IFTRUE 48507
48493: LD_INT 24
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48507
48499: LD_INT 25
48501: DOUBLE
48502: EQUAL
48503: IFTRUE 48507
48505: GO 48563
48507: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48508: LD_ADDR_VAR 0 9
48512: PUSH
48513: LD_VAR 0 35
48517: PUSH
48518: LD_VAR 0 36
48522: PUSH
48523: LD_VAR 0 37
48527: PUSH
48528: LD_VAR 0 38
48532: PUSH
48533: LD_VAR 0 39
48537: PUSH
48538: LD_VAR 0 40
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: LD_VAR 0 4
48555: PUSH
48556: LD_INT 1
48558: PLUS
48559: ARRAY
48560: ST_TO_ADDR
48561: GO 48928
48563: LD_INT 6
48565: DOUBLE
48566: EQUAL
48567: IFTRUE 48619
48569: LD_INT 7
48571: DOUBLE
48572: EQUAL
48573: IFTRUE 48619
48575: LD_INT 8
48577: DOUBLE
48578: EQUAL
48579: IFTRUE 48619
48581: LD_INT 13
48583: DOUBLE
48584: EQUAL
48585: IFTRUE 48619
48587: LD_INT 12
48589: DOUBLE
48590: EQUAL
48591: IFTRUE 48619
48593: LD_INT 15
48595: DOUBLE
48596: EQUAL
48597: IFTRUE 48619
48599: LD_INT 11
48601: DOUBLE
48602: EQUAL
48603: IFTRUE 48619
48605: LD_INT 14
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48619
48611: LD_INT 10
48613: DOUBLE
48614: EQUAL
48615: IFTRUE 48619
48617: GO 48675
48619: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
48620: LD_ADDR_VAR 0 9
48624: PUSH
48625: LD_VAR 0 41
48629: PUSH
48630: LD_VAR 0 42
48634: PUSH
48635: LD_VAR 0 43
48639: PUSH
48640: LD_VAR 0 44
48644: PUSH
48645: LD_VAR 0 45
48649: PUSH
48650: LD_VAR 0 46
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: PUSH
48663: LD_VAR 0 4
48667: PUSH
48668: LD_INT 1
48670: PLUS
48671: ARRAY
48672: ST_TO_ADDR
48673: GO 48928
48675: LD_INT 36
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48683
48681: GO 48739
48683: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48684: LD_ADDR_VAR 0 9
48688: PUSH
48689: LD_VAR 0 47
48693: PUSH
48694: LD_VAR 0 48
48698: PUSH
48699: LD_VAR 0 49
48703: PUSH
48704: LD_VAR 0 50
48708: PUSH
48709: LD_VAR 0 51
48713: PUSH
48714: LD_VAR 0 52
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: PUSH
48727: LD_VAR 0 4
48731: PUSH
48732: LD_INT 1
48734: PLUS
48735: ARRAY
48736: ST_TO_ADDR
48737: GO 48928
48739: LD_INT 4
48741: DOUBLE
48742: EQUAL
48743: IFTRUE 48765
48745: LD_INT 5
48747: DOUBLE
48748: EQUAL
48749: IFTRUE 48765
48751: LD_INT 34
48753: DOUBLE
48754: EQUAL
48755: IFTRUE 48765
48757: LD_INT 37
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48765
48763: GO 48821
48765: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48766: LD_ADDR_VAR 0 9
48770: PUSH
48771: LD_VAR 0 53
48775: PUSH
48776: LD_VAR 0 54
48780: PUSH
48781: LD_VAR 0 55
48785: PUSH
48786: LD_VAR 0 56
48790: PUSH
48791: LD_VAR 0 57
48795: PUSH
48796: LD_VAR 0 58
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: PUSH
48809: LD_VAR 0 4
48813: PUSH
48814: LD_INT 1
48816: PLUS
48817: ARRAY
48818: ST_TO_ADDR
48819: GO 48928
48821: LD_INT 31
48823: DOUBLE
48824: EQUAL
48825: IFTRUE 48871
48827: LD_INT 32
48829: DOUBLE
48830: EQUAL
48831: IFTRUE 48871
48833: LD_INT 33
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48871
48839: LD_INT 27
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48871
48845: LD_INT 26
48847: DOUBLE
48848: EQUAL
48849: IFTRUE 48871
48851: LD_INT 28
48853: DOUBLE
48854: EQUAL
48855: IFTRUE 48871
48857: LD_INT 29
48859: DOUBLE
48860: EQUAL
48861: IFTRUE 48871
48863: LD_INT 30
48865: DOUBLE
48866: EQUAL
48867: IFTRUE 48871
48869: GO 48927
48871: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_VAR 0 59
48881: PUSH
48882: LD_VAR 0 60
48886: PUSH
48887: LD_VAR 0 61
48891: PUSH
48892: LD_VAR 0 62
48896: PUSH
48897: LD_VAR 0 63
48901: PUSH
48902: LD_VAR 0 64
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: PUSH
48915: LD_VAR 0 4
48919: PUSH
48920: LD_INT 1
48922: PLUS
48923: ARRAY
48924: ST_TO_ADDR
48925: GO 48928
48927: POP
// temp_list2 = [ ] ;
48928: LD_ADDR_VAR 0 10
48932: PUSH
48933: EMPTY
48934: ST_TO_ADDR
// for i in temp_list do
48935: LD_ADDR_VAR 0 8
48939: PUSH
48940: LD_VAR 0 9
48944: PUSH
48945: FOR_IN
48946: IFFALSE 48998
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48948: LD_ADDR_VAR 0 10
48952: PUSH
48953: LD_VAR 0 10
48957: PUSH
48958: LD_VAR 0 8
48962: PUSH
48963: LD_INT 1
48965: ARRAY
48966: PUSH
48967: LD_VAR 0 2
48971: PLUS
48972: PUSH
48973: LD_VAR 0 8
48977: PUSH
48978: LD_INT 2
48980: ARRAY
48981: PUSH
48982: LD_VAR 0 3
48986: PLUS
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: ADD
48995: ST_TO_ADDR
48996: GO 48945
48998: POP
48999: POP
// result = temp_list2 ;
49000: LD_ADDR_VAR 0 7
49004: PUSH
49005: LD_VAR 0 10
49009: ST_TO_ADDR
// end ;
49010: LD_VAR 0 7
49014: RET
// export function EnemyInRange ( unit , dist ) ; begin
49015: LD_INT 0
49017: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49018: LD_ADDR_VAR 0 3
49022: PUSH
49023: LD_VAR 0 1
49027: PPUSH
49028: CALL_OW 255
49032: PPUSH
49033: LD_VAR 0 1
49037: PPUSH
49038: CALL_OW 250
49042: PPUSH
49043: LD_VAR 0 1
49047: PPUSH
49048: CALL_OW 251
49052: PPUSH
49053: LD_VAR 0 2
49057: PPUSH
49058: CALL 23358 0 4
49062: PUSH
49063: LD_INT 4
49065: ARRAY
49066: ST_TO_ADDR
// end ;
49067: LD_VAR 0 3
49071: RET
// export function PlayerSeeMe ( unit ) ; begin
49072: LD_INT 0
49074: PPUSH
// result := See ( your_side , unit ) ;
49075: LD_ADDR_VAR 0 2
49079: PUSH
49080: LD_OWVAR 2
49084: PPUSH
49085: LD_VAR 0 1
49089: PPUSH
49090: CALL_OW 292
49094: ST_TO_ADDR
// end ;
49095: LD_VAR 0 2
49099: RET
// export function ReverseDir ( unit ) ; begin
49100: LD_INT 0
49102: PPUSH
// if not unit then
49103: LD_VAR 0 1
49107: NOT
49108: IFFALSE 49112
// exit ;
49110: GO 49158
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
49112: LD_ADDR_VAR 0 2
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: LD_INT 5
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: PUSH
49143: LD_VAR 0 1
49147: PPUSH
49148: CALL_OW 254
49152: PUSH
49153: LD_INT 1
49155: PLUS
49156: ARRAY
49157: ST_TO_ADDR
// end ;
49158: LD_VAR 0 2
49162: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49163: LD_INT 0
49165: PPUSH
49166: PPUSH
49167: PPUSH
49168: PPUSH
49169: PPUSH
// if not hexes then
49170: LD_VAR 0 2
49174: NOT
49175: IFFALSE 49179
// exit ;
49177: GO 49327
// dist := 9999 ;
49179: LD_ADDR_VAR 0 5
49183: PUSH
49184: LD_INT 9999
49186: ST_TO_ADDR
// for i = 1 to hexes do
49187: LD_ADDR_VAR 0 4
49191: PUSH
49192: DOUBLE
49193: LD_INT 1
49195: DEC
49196: ST_TO_ADDR
49197: LD_VAR 0 2
49201: PUSH
49202: FOR_TO
49203: IFFALSE 49315
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49205: LD_VAR 0 1
49209: PPUSH
49210: LD_VAR 0 2
49214: PUSH
49215: LD_VAR 0 4
49219: ARRAY
49220: PUSH
49221: LD_INT 1
49223: ARRAY
49224: PPUSH
49225: LD_VAR 0 2
49229: PUSH
49230: LD_VAR 0 4
49234: ARRAY
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: PPUSH
49240: CALL_OW 297
49244: PUSH
49245: LD_VAR 0 5
49249: LESS
49250: IFFALSE 49313
// begin hex := hexes [ i ] ;
49252: LD_ADDR_VAR 0 7
49256: PUSH
49257: LD_VAR 0 2
49261: PUSH
49262: LD_VAR 0 4
49266: ARRAY
49267: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49268: LD_ADDR_VAR 0 5
49272: PUSH
49273: LD_VAR 0 1
49277: PPUSH
49278: LD_VAR 0 2
49282: PUSH
49283: LD_VAR 0 4
49287: ARRAY
49288: PUSH
49289: LD_INT 1
49291: ARRAY
49292: PPUSH
49293: LD_VAR 0 2
49297: PUSH
49298: LD_VAR 0 4
49302: ARRAY
49303: PUSH
49304: LD_INT 2
49306: ARRAY
49307: PPUSH
49308: CALL_OW 297
49312: ST_TO_ADDR
// end ; end ;
49313: GO 49202
49315: POP
49316: POP
// result := hex ;
49317: LD_ADDR_VAR 0 3
49321: PUSH
49322: LD_VAR 0 7
49326: ST_TO_ADDR
// end ;
49327: LD_VAR 0 3
49331: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49332: LD_INT 0
49334: PPUSH
49335: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49336: LD_VAR 0 1
49340: NOT
49341: PUSH
49342: LD_VAR 0 1
49346: PUSH
49347: LD_INT 21
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 23
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PPUSH
49371: CALL_OW 69
49375: IN
49376: NOT
49377: OR
49378: IFFALSE 49382
// exit ;
49380: GO 49429
// for i = 1 to 3 do
49382: LD_ADDR_VAR 0 3
49386: PUSH
49387: DOUBLE
49388: LD_INT 1
49390: DEC
49391: ST_TO_ADDR
49392: LD_INT 3
49394: PUSH
49395: FOR_TO
49396: IFFALSE 49427
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49398: LD_VAR 0 1
49402: PPUSH
49403: CALL_OW 250
49407: PPUSH
49408: LD_VAR 0 1
49412: PPUSH
49413: CALL_OW 251
49417: PPUSH
49418: LD_INT 1
49420: PPUSH
49421: CALL_OW 453
49425: GO 49395
49427: POP
49428: POP
// end ;
49429: LD_VAR 0 2
49433: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49434: LD_INT 0
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49442: LD_VAR 0 1
49446: NOT
49447: PUSH
49448: LD_VAR 0 2
49452: NOT
49453: OR
49454: PUSH
49455: LD_VAR 0 1
49459: PPUSH
49460: CALL_OW 314
49464: OR
49465: IFFALSE 49469
// exit ;
49467: GO 49910
// x := GetX ( enemy_unit ) ;
49469: LD_ADDR_VAR 0 7
49473: PUSH
49474: LD_VAR 0 2
49478: PPUSH
49479: CALL_OW 250
49483: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49484: LD_ADDR_VAR 0 8
49488: PUSH
49489: LD_VAR 0 2
49493: PPUSH
49494: CALL_OW 251
49498: ST_TO_ADDR
// if not x or not y then
49499: LD_VAR 0 7
49503: NOT
49504: PUSH
49505: LD_VAR 0 8
49509: NOT
49510: OR
49511: IFFALSE 49515
// exit ;
49513: GO 49910
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49515: LD_ADDR_VAR 0 6
49519: PUSH
49520: LD_VAR 0 7
49524: PPUSH
49525: LD_INT 0
49527: PPUSH
49528: LD_INT 4
49530: PPUSH
49531: CALL_OW 272
49535: PUSH
49536: LD_VAR 0 8
49540: PPUSH
49541: LD_INT 0
49543: PPUSH
49544: LD_INT 4
49546: PPUSH
49547: CALL_OW 273
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_VAR 0 7
49560: PPUSH
49561: LD_INT 1
49563: PPUSH
49564: LD_INT 4
49566: PPUSH
49567: CALL_OW 272
49571: PUSH
49572: LD_VAR 0 8
49576: PPUSH
49577: LD_INT 1
49579: PPUSH
49580: LD_INT 4
49582: PPUSH
49583: CALL_OW 273
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_VAR 0 7
49596: PPUSH
49597: LD_INT 2
49599: PPUSH
49600: LD_INT 4
49602: PPUSH
49603: CALL_OW 272
49607: PUSH
49608: LD_VAR 0 8
49612: PPUSH
49613: LD_INT 2
49615: PPUSH
49616: LD_INT 4
49618: PPUSH
49619: CALL_OW 273
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_VAR 0 7
49632: PPUSH
49633: LD_INT 3
49635: PPUSH
49636: LD_INT 4
49638: PPUSH
49639: CALL_OW 272
49643: PUSH
49644: LD_VAR 0 8
49648: PPUSH
49649: LD_INT 3
49651: PPUSH
49652: LD_INT 4
49654: PPUSH
49655: CALL_OW 273
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_VAR 0 7
49668: PPUSH
49669: LD_INT 4
49671: PPUSH
49672: LD_INT 4
49674: PPUSH
49675: CALL_OW 272
49679: PUSH
49680: LD_VAR 0 8
49684: PPUSH
49685: LD_INT 4
49687: PPUSH
49688: LD_INT 4
49690: PPUSH
49691: CALL_OW 273
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_VAR 0 7
49704: PPUSH
49705: LD_INT 5
49707: PPUSH
49708: LD_INT 4
49710: PPUSH
49711: CALL_OW 272
49715: PUSH
49716: LD_VAR 0 8
49720: PPUSH
49721: LD_INT 5
49723: PPUSH
49724: LD_INT 4
49726: PPUSH
49727: CALL_OW 273
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// for i = tmp downto 1 do
49744: LD_ADDR_VAR 0 4
49748: PUSH
49749: DOUBLE
49750: LD_VAR 0 6
49754: INC
49755: ST_TO_ADDR
49756: LD_INT 1
49758: PUSH
49759: FOR_DOWNTO
49760: IFFALSE 49861
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49762: LD_VAR 0 6
49766: PUSH
49767: LD_VAR 0 4
49771: ARRAY
49772: PUSH
49773: LD_INT 1
49775: ARRAY
49776: PPUSH
49777: LD_VAR 0 6
49781: PUSH
49782: LD_VAR 0 4
49786: ARRAY
49787: PUSH
49788: LD_INT 2
49790: ARRAY
49791: PPUSH
49792: CALL_OW 488
49796: NOT
49797: PUSH
49798: LD_VAR 0 6
49802: PUSH
49803: LD_VAR 0 4
49807: ARRAY
49808: PUSH
49809: LD_INT 1
49811: ARRAY
49812: PPUSH
49813: LD_VAR 0 6
49817: PUSH
49818: LD_VAR 0 4
49822: ARRAY
49823: PUSH
49824: LD_INT 2
49826: ARRAY
49827: PPUSH
49828: CALL_OW 428
49832: PUSH
49833: LD_INT 0
49835: NONEQUAL
49836: OR
49837: IFFALSE 49859
// tmp := Delete ( tmp , i ) ;
49839: LD_ADDR_VAR 0 6
49843: PUSH
49844: LD_VAR 0 6
49848: PPUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: CALL_OW 3
49858: ST_TO_ADDR
49859: GO 49759
49861: POP
49862: POP
// j := GetClosestHex ( unit , tmp ) ;
49863: LD_ADDR_VAR 0 5
49867: PUSH
49868: LD_VAR 0 1
49872: PPUSH
49873: LD_VAR 0 6
49877: PPUSH
49878: CALL 49163 0 2
49882: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49883: LD_VAR 0 1
49887: PPUSH
49888: LD_VAR 0 5
49892: PUSH
49893: LD_INT 1
49895: ARRAY
49896: PPUSH
49897: LD_VAR 0 5
49901: PUSH
49902: LD_INT 2
49904: ARRAY
49905: PPUSH
49906: CALL_OW 111
// end ;
49910: LD_VAR 0 3
49914: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49915: LD_INT 0
49917: PPUSH
49918: PPUSH
49919: PPUSH
// uc_side = 0 ;
49920: LD_ADDR_OWVAR 20
49924: PUSH
49925: LD_INT 0
49927: ST_TO_ADDR
// uc_nation = 0 ;
49928: LD_ADDR_OWVAR 21
49932: PUSH
49933: LD_INT 0
49935: ST_TO_ADDR
// InitHc ;
49936: CALL_OW 19
// InitVc ;
49940: CALL_OW 20
// if mastodonts then
49944: LD_VAR 0 6
49948: IFFALSE 50015
// for i = 1 to mastodonts do
49950: LD_ADDR_VAR 0 11
49954: PUSH
49955: DOUBLE
49956: LD_INT 1
49958: DEC
49959: ST_TO_ADDR
49960: LD_VAR 0 6
49964: PUSH
49965: FOR_TO
49966: IFFALSE 50013
// begin vc_chassis := 31 ;
49968: LD_ADDR_OWVAR 37
49972: PUSH
49973: LD_INT 31
49975: ST_TO_ADDR
// vc_control := control_rider ;
49976: LD_ADDR_OWVAR 38
49980: PUSH
49981: LD_INT 4
49983: ST_TO_ADDR
// animal := CreateVehicle ;
49984: LD_ADDR_VAR 0 12
49988: PUSH
49989: CALL_OW 45
49993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49994: LD_VAR 0 12
49998: PPUSH
49999: LD_VAR 0 8
50003: PPUSH
50004: LD_INT 0
50006: PPUSH
50007: CALL 56721 0 3
// end ;
50011: GO 49965
50013: POP
50014: POP
// if horses then
50015: LD_VAR 0 5
50019: IFFALSE 50086
// for i = 1 to horses do
50021: LD_ADDR_VAR 0 11
50025: PUSH
50026: DOUBLE
50027: LD_INT 1
50029: DEC
50030: ST_TO_ADDR
50031: LD_VAR 0 5
50035: PUSH
50036: FOR_TO
50037: IFFALSE 50084
// begin hc_class := 21 ;
50039: LD_ADDR_OWVAR 28
50043: PUSH
50044: LD_INT 21
50046: ST_TO_ADDR
// hc_gallery :=  ;
50047: LD_ADDR_OWVAR 33
50051: PUSH
50052: LD_STRING 
50054: ST_TO_ADDR
// animal := CreateHuman ;
50055: LD_ADDR_VAR 0 12
50059: PUSH
50060: CALL_OW 44
50064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50065: LD_VAR 0 12
50069: PPUSH
50070: LD_VAR 0 8
50074: PPUSH
50075: LD_INT 0
50077: PPUSH
50078: CALL 56721 0 3
// end ;
50082: GO 50036
50084: POP
50085: POP
// if birds then
50086: LD_VAR 0 1
50090: IFFALSE 50157
// for i = 1 to birds do
50092: LD_ADDR_VAR 0 11
50096: PUSH
50097: DOUBLE
50098: LD_INT 1
50100: DEC
50101: ST_TO_ADDR
50102: LD_VAR 0 1
50106: PUSH
50107: FOR_TO
50108: IFFALSE 50155
// begin hc_class = 18 ;
50110: LD_ADDR_OWVAR 28
50114: PUSH
50115: LD_INT 18
50117: ST_TO_ADDR
// hc_gallery =  ;
50118: LD_ADDR_OWVAR 33
50122: PUSH
50123: LD_STRING 
50125: ST_TO_ADDR
// animal := CreateHuman ;
50126: LD_ADDR_VAR 0 12
50130: PUSH
50131: CALL_OW 44
50135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50136: LD_VAR 0 12
50140: PPUSH
50141: LD_VAR 0 8
50145: PPUSH
50146: LD_INT 0
50148: PPUSH
50149: CALL 56721 0 3
// end ;
50153: GO 50107
50155: POP
50156: POP
// if tigers then
50157: LD_VAR 0 2
50161: IFFALSE 50245
// for i = 1 to tigers do
50163: LD_ADDR_VAR 0 11
50167: PUSH
50168: DOUBLE
50169: LD_INT 1
50171: DEC
50172: ST_TO_ADDR
50173: LD_VAR 0 2
50177: PUSH
50178: FOR_TO
50179: IFFALSE 50243
// begin hc_class = class_tiger ;
50181: LD_ADDR_OWVAR 28
50185: PUSH
50186: LD_INT 14
50188: ST_TO_ADDR
// hc_gallery =  ;
50189: LD_ADDR_OWVAR 33
50193: PUSH
50194: LD_STRING 
50196: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50197: LD_ADDR_OWVAR 35
50201: PUSH
50202: LD_INT 7
50204: NEG
50205: PPUSH
50206: LD_INT 7
50208: PPUSH
50209: CALL_OW 12
50213: ST_TO_ADDR
// animal := CreateHuman ;
50214: LD_ADDR_VAR 0 12
50218: PUSH
50219: CALL_OW 44
50223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50224: LD_VAR 0 12
50228: PPUSH
50229: LD_VAR 0 8
50233: PPUSH
50234: LD_INT 0
50236: PPUSH
50237: CALL 56721 0 3
// end ;
50241: GO 50178
50243: POP
50244: POP
// if apemans then
50245: LD_VAR 0 3
50249: IFFALSE 50372
// for i = 1 to apemans do
50251: LD_ADDR_VAR 0 11
50255: PUSH
50256: DOUBLE
50257: LD_INT 1
50259: DEC
50260: ST_TO_ADDR
50261: LD_VAR 0 3
50265: PUSH
50266: FOR_TO
50267: IFFALSE 50370
// begin hc_class = class_apeman ;
50269: LD_ADDR_OWVAR 28
50273: PUSH
50274: LD_INT 12
50276: ST_TO_ADDR
// hc_gallery =  ;
50277: LD_ADDR_OWVAR 33
50281: PUSH
50282: LD_STRING 
50284: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50285: LD_ADDR_OWVAR 35
50289: PUSH
50290: LD_INT 5
50292: NEG
50293: PPUSH
50294: LD_INT 5
50296: PPUSH
50297: CALL_OW 12
50301: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50302: LD_ADDR_OWVAR 31
50306: PUSH
50307: LD_INT 1
50309: PPUSH
50310: LD_INT 3
50312: PPUSH
50313: CALL_OW 12
50317: PUSH
50318: LD_INT 1
50320: PPUSH
50321: LD_INT 3
50323: PPUSH
50324: CALL_OW 12
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// animal := CreateHuman ;
50341: LD_ADDR_VAR 0 12
50345: PUSH
50346: CALL_OW 44
50350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50351: LD_VAR 0 12
50355: PPUSH
50356: LD_VAR 0 8
50360: PPUSH
50361: LD_INT 0
50363: PPUSH
50364: CALL 56721 0 3
// end ;
50368: GO 50266
50370: POP
50371: POP
// if enchidnas then
50372: LD_VAR 0 4
50376: IFFALSE 50443
// for i = 1 to enchidnas do
50378: LD_ADDR_VAR 0 11
50382: PUSH
50383: DOUBLE
50384: LD_INT 1
50386: DEC
50387: ST_TO_ADDR
50388: LD_VAR 0 4
50392: PUSH
50393: FOR_TO
50394: IFFALSE 50441
// begin hc_class = 13 ;
50396: LD_ADDR_OWVAR 28
50400: PUSH
50401: LD_INT 13
50403: ST_TO_ADDR
// hc_gallery =  ;
50404: LD_ADDR_OWVAR 33
50408: PUSH
50409: LD_STRING 
50411: ST_TO_ADDR
// animal := CreateHuman ;
50412: LD_ADDR_VAR 0 12
50416: PUSH
50417: CALL_OW 44
50421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50422: LD_VAR 0 12
50426: PPUSH
50427: LD_VAR 0 8
50431: PPUSH
50432: LD_INT 0
50434: PPUSH
50435: CALL 56721 0 3
// end ;
50439: GO 50393
50441: POP
50442: POP
// if fishes then
50443: LD_VAR 0 7
50447: IFFALSE 50514
// for i = 1 to fishes do
50449: LD_ADDR_VAR 0 11
50453: PUSH
50454: DOUBLE
50455: LD_INT 1
50457: DEC
50458: ST_TO_ADDR
50459: LD_VAR 0 7
50463: PUSH
50464: FOR_TO
50465: IFFALSE 50512
// begin hc_class = 20 ;
50467: LD_ADDR_OWVAR 28
50471: PUSH
50472: LD_INT 20
50474: ST_TO_ADDR
// hc_gallery =  ;
50475: LD_ADDR_OWVAR 33
50479: PUSH
50480: LD_STRING 
50482: ST_TO_ADDR
// animal := CreateHuman ;
50483: LD_ADDR_VAR 0 12
50487: PUSH
50488: CALL_OW 44
50492: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50493: LD_VAR 0 12
50497: PPUSH
50498: LD_VAR 0 9
50502: PPUSH
50503: LD_INT 0
50505: PPUSH
50506: CALL 56721 0 3
// end ;
50510: GO 50464
50512: POP
50513: POP
// end ;
50514: LD_VAR 0 10
50518: RET
// export function WantHeal ( sci , unit ) ; begin
50519: LD_INT 0
50521: PPUSH
// if GetTaskList ( sci ) > 0 then
50522: LD_VAR 0 1
50526: PPUSH
50527: CALL_OW 437
50531: PUSH
50532: LD_INT 0
50534: GREATER
50535: IFFALSE 50605
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50537: LD_VAR 0 1
50541: PPUSH
50542: CALL_OW 437
50546: PUSH
50547: LD_INT 1
50549: ARRAY
50550: PUSH
50551: LD_INT 1
50553: ARRAY
50554: PUSH
50555: LD_STRING l
50557: EQUAL
50558: PUSH
50559: LD_VAR 0 1
50563: PPUSH
50564: CALL_OW 437
50568: PUSH
50569: LD_INT 1
50571: ARRAY
50572: PUSH
50573: LD_INT 4
50575: ARRAY
50576: PUSH
50577: LD_VAR 0 2
50581: EQUAL
50582: AND
50583: IFFALSE 50595
// result := true else
50585: LD_ADDR_VAR 0 3
50589: PUSH
50590: LD_INT 1
50592: ST_TO_ADDR
50593: GO 50603
// result := false ;
50595: LD_ADDR_VAR 0 3
50599: PUSH
50600: LD_INT 0
50602: ST_TO_ADDR
// end else
50603: GO 50613
// result := false ;
50605: LD_ADDR_VAR 0 3
50609: PUSH
50610: LD_INT 0
50612: ST_TO_ADDR
// end ;
50613: LD_VAR 0 3
50617: RET
// export function HealTarget ( sci ) ; begin
50618: LD_INT 0
50620: PPUSH
// if not sci then
50621: LD_VAR 0 1
50625: NOT
50626: IFFALSE 50630
// exit ;
50628: GO 50695
// result := 0 ;
50630: LD_ADDR_VAR 0 2
50634: PUSH
50635: LD_INT 0
50637: ST_TO_ADDR
// if GetTaskList ( sci ) then
50638: LD_VAR 0 1
50642: PPUSH
50643: CALL_OW 437
50647: IFFALSE 50695
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50649: LD_VAR 0 1
50653: PPUSH
50654: CALL_OW 437
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: PUSH
50663: LD_INT 1
50665: ARRAY
50666: PUSH
50667: LD_STRING l
50669: EQUAL
50670: IFFALSE 50695
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50672: LD_ADDR_VAR 0 2
50676: PUSH
50677: LD_VAR 0 1
50681: PPUSH
50682: CALL_OW 437
50686: PUSH
50687: LD_INT 1
50689: ARRAY
50690: PUSH
50691: LD_INT 4
50693: ARRAY
50694: ST_TO_ADDR
// end ;
50695: LD_VAR 0 2
50699: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
50700: LD_INT 0
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
// if not list then
50735: LD_VAR 0 1
50739: NOT
50740: IFFALSE 50744
// exit ;
50742: GO 55332
// base := list [ 1 ] ;
50744: LD_ADDR_VAR 0 3
50748: PUSH
50749: LD_VAR 0 1
50753: PUSH
50754: LD_INT 1
50756: ARRAY
50757: ST_TO_ADDR
// group := list [ 2 ] ;
50758: LD_ADDR_VAR 0 4
50762: PUSH
50763: LD_VAR 0 1
50767: PUSH
50768: LD_INT 2
50770: ARRAY
50771: ST_TO_ADDR
// path := list [ 3 ] ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_VAR 0 1
50781: PUSH
50782: LD_INT 3
50784: ARRAY
50785: ST_TO_ADDR
// flags := list [ 4 ] ;
50786: LD_ADDR_VAR 0 6
50790: PUSH
50791: LD_VAR 0 1
50795: PUSH
50796: LD_INT 4
50798: ARRAY
50799: ST_TO_ADDR
// mined := [ ] ;
50800: LD_ADDR_VAR 0 27
50804: PUSH
50805: EMPTY
50806: ST_TO_ADDR
// bombed := [ ] ;
50807: LD_ADDR_VAR 0 28
50811: PUSH
50812: EMPTY
50813: ST_TO_ADDR
// healers := [ ] ;
50814: LD_ADDR_VAR 0 31
50818: PUSH
50819: EMPTY
50820: ST_TO_ADDR
// to_heal := [ ] ;
50821: LD_ADDR_VAR 0 30
50825: PUSH
50826: EMPTY
50827: ST_TO_ADDR
// repairs := [ ] ;
50828: LD_ADDR_VAR 0 33
50832: PUSH
50833: EMPTY
50834: ST_TO_ADDR
// to_repair := [ ] ;
50835: LD_ADDR_VAR 0 32
50839: PUSH
50840: EMPTY
50841: ST_TO_ADDR
// if not group or not path then
50842: LD_VAR 0 4
50846: NOT
50847: PUSH
50848: LD_VAR 0 5
50852: NOT
50853: OR
50854: IFFALSE 50858
// exit ;
50856: GO 55332
// if flags then
50858: LD_VAR 0 6
50862: IFFALSE 51006
// begin f_ignore_area := flags [ 1 ] ;
50864: LD_ADDR_VAR 0 17
50868: PUSH
50869: LD_VAR 0 6
50873: PUSH
50874: LD_INT 1
50876: ARRAY
50877: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
50878: LD_ADDR_VAR 0 18
50882: PUSH
50883: LD_VAR 0 6
50887: PUSH
50888: LD_INT 2
50890: ARRAY
50891: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
50892: LD_ADDR_VAR 0 19
50896: PUSH
50897: LD_VAR 0 6
50901: PUSH
50902: LD_INT 3
50904: ARRAY
50905: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
50906: LD_ADDR_VAR 0 20
50910: PUSH
50911: LD_VAR 0 6
50915: PUSH
50916: LD_INT 4
50918: ARRAY
50919: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
50920: LD_ADDR_VAR 0 21
50924: PUSH
50925: LD_VAR 0 6
50929: PUSH
50930: LD_INT 5
50932: ARRAY
50933: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
50934: LD_ADDR_VAR 0 22
50938: PUSH
50939: LD_VAR 0 6
50943: PUSH
50944: LD_INT 6
50946: ARRAY
50947: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
50948: LD_ADDR_VAR 0 23
50952: PUSH
50953: LD_VAR 0 6
50957: PUSH
50958: LD_INT 7
50960: ARRAY
50961: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
50962: LD_ADDR_VAR 0 24
50966: PUSH
50967: LD_VAR 0 6
50971: PUSH
50972: LD_INT 8
50974: ARRAY
50975: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
50976: LD_ADDR_VAR 0 25
50980: PUSH
50981: LD_VAR 0 6
50985: PUSH
50986: LD_INT 9
50988: ARRAY
50989: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
50990: LD_ADDR_VAR 0 26
50994: PUSH
50995: LD_VAR 0 6
50999: PUSH
51000: LD_INT 10
51002: ARRAY
51003: ST_TO_ADDR
// end else
51004: GO 51086
// begin f_ignore_area := false ;
51006: LD_ADDR_VAR 0 17
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// f_capture := false ;
51014: LD_ADDR_VAR 0 18
51018: PUSH
51019: LD_INT 0
51021: ST_TO_ADDR
// f_ignore_civ := false ;
51022: LD_ADDR_VAR 0 19
51026: PUSH
51027: LD_INT 0
51029: ST_TO_ADDR
// f_murder := false ;
51030: LD_ADDR_VAR 0 20
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// f_mines := false ;
51038: LD_ADDR_VAR 0 21
51042: PUSH
51043: LD_INT 0
51045: ST_TO_ADDR
// f_repair := false ;
51046: LD_ADDR_VAR 0 22
51050: PUSH
51051: LD_INT 0
51053: ST_TO_ADDR
// f_heal := false ;
51054: LD_ADDR_VAR 0 23
51058: PUSH
51059: LD_INT 0
51061: ST_TO_ADDR
// f_spacetime := false ;
51062: LD_ADDR_VAR 0 24
51066: PUSH
51067: LD_INT 0
51069: ST_TO_ADDR
// f_attack_depot := false ;
51070: LD_ADDR_VAR 0 25
51074: PUSH
51075: LD_INT 0
51077: ST_TO_ADDR
// f_crawl := false ;
51078: LD_ADDR_VAR 0 26
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// end ; if f_heal then
51086: LD_VAR 0 23
51090: IFFALSE 51117
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
51092: LD_ADDR_VAR 0 31
51096: PUSH
51097: LD_VAR 0 4
51101: PPUSH
51102: LD_INT 25
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PPUSH
51112: CALL_OW 72
51116: ST_TO_ADDR
// if f_repair then
51117: LD_VAR 0 22
51121: IFFALSE 51148
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
51123: LD_ADDR_VAR 0 33
51127: PUSH
51128: LD_VAR 0 4
51132: PPUSH
51133: LD_INT 25
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PPUSH
51143: CALL_OW 72
51147: ST_TO_ADDR
// units_path := [ ] ;
51148: LD_ADDR_VAR 0 16
51152: PUSH
51153: EMPTY
51154: ST_TO_ADDR
// for i = 1 to group do
51155: LD_ADDR_VAR 0 7
51159: PUSH
51160: DOUBLE
51161: LD_INT 1
51163: DEC
51164: ST_TO_ADDR
51165: LD_VAR 0 4
51169: PUSH
51170: FOR_TO
51171: IFFALSE 51200
// units_path := Replace ( units_path , i , path ) ;
51173: LD_ADDR_VAR 0 16
51177: PUSH
51178: LD_VAR 0 16
51182: PPUSH
51183: LD_VAR 0 7
51187: PPUSH
51188: LD_VAR 0 5
51192: PPUSH
51193: CALL_OW 1
51197: ST_TO_ADDR
51198: GO 51170
51200: POP
51201: POP
// repeat for i = group downto 1 do
51202: LD_ADDR_VAR 0 7
51206: PUSH
51207: DOUBLE
51208: LD_VAR 0 4
51212: INC
51213: ST_TO_ADDR
51214: LD_INT 1
51216: PUSH
51217: FOR_DOWNTO
51218: IFFALSE 55314
// begin wait ( 5 ) ;
51220: LD_INT 5
51222: PPUSH
51223: CALL_OW 67
// tmp := [ ] ;
51227: LD_ADDR_VAR 0 14
51231: PUSH
51232: EMPTY
51233: ST_TO_ADDR
// attacking := false ;
51234: LD_ADDR_VAR 0 29
51238: PUSH
51239: LD_INT 0
51241: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
51242: LD_VAR 0 4
51246: PUSH
51247: LD_VAR 0 7
51251: ARRAY
51252: PPUSH
51253: CALL_OW 301
51257: PUSH
51258: LD_VAR 0 4
51262: PUSH
51263: LD_VAR 0 7
51267: ARRAY
51268: NOT
51269: OR
51270: IFFALSE 51379
// begin if GetType ( group [ i ] ) = unit_human then
51272: LD_VAR 0 4
51276: PUSH
51277: LD_VAR 0 7
51281: ARRAY
51282: PPUSH
51283: CALL_OW 247
51287: PUSH
51288: LD_INT 1
51290: EQUAL
51291: IFFALSE 51337
// begin to_heal := to_heal diff group [ i ] ;
51293: LD_ADDR_VAR 0 30
51297: PUSH
51298: LD_VAR 0 30
51302: PUSH
51303: LD_VAR 0 4
51307: PUSH
51308: LD_VAR 0 7
51312: ARRAY
51313: DIFF
51314: ST_TO_ADDR
// healers := healers diff group [ i ] ;
51315: LD_ADDR_VAR 0 31
51319: PUSH
51320: LD_VAR 0 31
51324: PUSH
51325: LD_VAR 0 4
51329: PUSH
51330: LD_VAR 0 7
51334: ARRAY
51335: DIFF
51336: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
51337: LD_ADDR_VAR 0 4
51341: PUSH
51342: LD_VAR 0 4
51346: PPUSH
51347: LD_VAR 0 7
51351: PPUSH
51352: CALL_OW 3
51356: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
51357: LD_ADDR_VAR 0 16
51361: PUSH
51362: LD_VAR 0 16
51366: PPUSH
51367: LD_VAR 0 7
51371: PPUSH
51372: CALL_OW 3
51376: ST_TO_ADDR
// continue ;
51377: GO 51217
// end ; if f_repair then
51379: LD_VAR 0 22
51383: IFFALSE 51872
// begin if GetType ( group [ i ] ) = unit_vehicle then
51385: LD_VAR 0 4
51389: PUSH
51390: LD_VAR 0 7
51394: ARRAY
51395: PPUSH
51396: CALL_OW 247
51400: PUSH
51401: LD_INT 2
51403: EQUAL
51404: IFFALSE 51594
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
51406: LD_VAR 0 4
51410: PUSH
51411: LD_VAR 0 7
51415: ARRAY
51416: PPUSH
51417: CALL_OW 256
51421: PUSH
51422: LD_INT 700
51424: LESS
51425: PUSH
51426: LD_VAR 0 4
51430: PUSH
51431: LD_VAR 0 7
51435: ARRAY
51436: PUSH
51437: LD_VAR 0 32
51441: IN
51442: NOT
51443: AND
51444: IFFALSE 51468
// to_repair := to_repair union group [ i ] ;
51446: LD_ADDR_VAR 0 32
51450: PUSH
51451: LD_VAR 0 32
51455: PUSH
51456: LD_VAR 0 4
51460: PUSH
51461: LD_VAR 0 7
51465: ARRAY
51466: UNION
51467: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
51468: LD_VAR 0 4
51472: PUSH
51473: LD_VAR 0 7
51477: ARRAY
51478: PPUSH
51479: CALL_OW 256
51483: PUSH
51484: LD_INT 1000
51486: EQUAL
51487: PUSH
51488: LD_VAR 0 4
51492: PUSH
51493: LD_VAR 0 7
51497: ARRAY
51498: PUSH
51499: LD_VAR 0 32
51503: IN
51504: AND
51505: IFFALSE 51529
// to_repair := to_repair diff group [ i ] ;
51507: LD_ADDR_VAR 0 32
51511: PUSH
51512: LD_VAR 0 32
51516: PUSH
51517: LD_VAR 0 4
51521: PUSH
51522: LD_VAR 0 7
51526: ARRAY
51527: DIFF
51528: ST_TO_ADDR
// if group [ i ] in to_repair then
51529: LD_VAR 0 4
51533: PUSH
51534: LD_VAR 0 7
51538: ARRAY
51539: PUSH
51540: LD_VAR 0 32
51544: IN
51545: IFFALSE 51592
// begin if not IsInArea ( group [ i ] , f_repair ) then
51547: LD_VAR 0 4
51551: PUSH
51552: LD_VAR 0 7
51556: ARRAY
51557: PPUSH
51558: LD_VAR 0 22
51562: PPUSH
51563: CALL_OW 308
51567: NOT
51568: IFFALSE 51590
// ComMoveToArea ( group [ i ] , f_repair ) ;
51570: LD_VAR 0 4
51574: PUSH
51575: LD_VAR 0 7
51579: ARRAY
51580: PPUSH
51581: LD_VAR 0 22
51585: PPUSH
51586: CALL_OW 113
// continue ;
51590: GO 51217
// end ; end else
51592: GO 51872
// if group [ i ] in repairs then
51594: LD_VAR 0 4
51598: PUSH
51599: LD_VAR 0 7
51603: ARRAY
51604: PUSH
51605: LD_VAR 0 33
51609: IN
51610: IFFALSE 51872
// begin if IsInUnit ( group [ i ] ) then
51612: LD_VAR 0 4
51616: PUSH
51617: LD_VAR 0 7
51621: ARRAY
51622: PPUSH
51623: CALL_OW 310
51627: IFFALSE 51695
// begin z := IsInUnit ( group [ i ] ) ;
51629: LD_ADDR_VAR 0 13
51633: PUSH
51634: LD_VAR 0 4
51638: PUSH
51639: LD_VAR 0 7
51643: ARRAY
51644: PPUSH
51645: CALL_OW 310
51649: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
51650: LD_VAR 0 13
51654: PUSH
51655: LD_VAR 0 32
51659: IN
51660: PUSH
51661: LD_VAR 0 13
51665: PPUSH
51666: LD_VAR 0 22
51670: PPUSH
51671: CALL_OW 308
51675: AND
51676: IFFALSE 51693
// ComExitVehicle ( group [ i ] ) ;
51678: LD_VAR 0 4
51682: PUSH
51683: LD_VAR 0 7
51687: ARRAY
51688: PPUSH
51689: CALL_OW 121
// end else
51693: GO 51872
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
51695: LD_ADDR_VAR 0 13
51699: PUSH
51700: LD_VAR 0 4
51704: PPUSH
51705: LD_INT 95
51707: PUSH
51708: LD_VAR 0 22
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 58
51719: PUSH
51720: EMPTY
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PPUSH
51727: CALL_OW 72
51731: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
51732: LD_VAR 0 4
51736: PUSH
51737: LD_VAR 0 7
51741: ARRAY
51742: PPUSH
51743: CALL_OW 314
51747: NOT
51748: IFFALSE 51870
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
51750: LD_ADDR_VAR 0 10
51754: PUSH
51755: LD_VAR 0 13
51759: PPUSH
51760: LD_VAR 0 4
51764: PUSH
51765: LD_VAR 0 7
51769: ARRAY
51770: PPUSH
51771: CALL_OW 74
51775: ST_TO_ADDR
// if not x then
51776: LD_VAR 0 10
51780: NOT
51781: IFFALSE 51785
// continue ;
51783: GO 51217
// if GetLives ( x ) < 1000 then
51785: LD_VAR 0 10
51789: PPUSH
51790: CALL_OW 256
51794: PUSH
51795: LD_INT 1000
51797: LESS
51798: IFFALSE 51822
// ComRepairVehicle ( group [ i ] , x ) else
51800: LD_VAR 0 4
51804: PUSH
51805: LD_VAR 0 7
51809: ARRAY
51810: PPUSH
51811: LD_VAR 0 10
51815: PPUSH
51816: CALL_OW 129
51820: GO 51870
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
51822: LD_VAR 0 23
51826: PUSH
51827: LD_VAR 0 4
51831: PUSH
51832: LD_VAR 0 7
51836: ARRAY
51837: PPUSH
51838: CALL_OW 256
51842: PUSH
51843: LD_INT 1000
51845: LESS
51846: AND
51847: NOT
51848: IFFALSE 51870
// ComEnterUnit ( group [ i ] , x ) ;
51850: LD_VAR 0 4
51854: PUSH
51855: LD_VAR 0 7
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 10
51865: PPUSH
51866: CALL_OW 120
// end ; continue ;
51870: GO 51217
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
51872: LD_VAR 0 23
51876: PUSH
51877: LD_VAR 0 4
51881: PUSH
51882: LD_VAR 0 7
51886: ARRAY
51887: PPUSH
51888: CALL_OW 247
51892: PUSH
51893: LD_INT 1
51895: EQUAL
51896: AND
51897: IFFALSE 52375
// begin if group [ i ] in healers then
51899: LD_VAR 0 4
51903: PUSH
51904: LD_VAR 0 7
51908: ARRAY
51909: PUSH
51910: LD_VAR 0 31
51914: IN
51915: IFFALSE 52188
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
51917: LD_VAR 0 4
51921: PUSH
51922: LD_VAR 0 7
51926: ARRAY
51927: PPUSH
51928: LD_VAR 0 23
51932: PPUSH
51933: CALL_OW 308
51937: NOT
51938: PUSH
51939: LD_VAR 0 4
51943: PUSH
51944: LD_VAR 0 7
51948: ARRAY
51949: PPUSH
51950: CALL_OW 314
51954: NOT
51955: AND
51956: IFFALSE 51980
// ComMoveToArea ( group [ i ] , f_heal ) else
51958: LD_VAR 0 4
51962: PUSH
51963: LD_VAR 0 7
51967: ARRAY
51968: PPUSH
51969: LD_VAR 0 23
51973: PPUSH
51974: CALL_OW 113
51978: GO 52186
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
51980: LD_VAR 0 4
51984: PUSH
51985: LD_VAR 0 7
51989: ARRAY
51990: PPUSH
51991: CALL 50618 0 1
51995: PPUSH
51996: CALL_OW 256
52000: PUSH
52001: LD_INT 1000
52003: EQUAL
52004: IFFALSE 52023
// ComStop ( group [ i ] ) else
52006: LD_VAR 0 4
52010: PUSH
52011: LD_VAR 0 7
52015: ARRAY
52016: PPUSH
52017: CALL_OW 141
52021: GO 52186
// if not HasTask ( group [ i ] ) and to_heal then
52023: LD_VAR 0 4
52027: PUSH
52028: LD_VAR 0 7
52032: ARRAY
52033: PPUSH
52034: CALL_OW 314
52038: NOT
52039: PUSH
52040: LD_VAR 0 30
52044: AND
52045: IFFALSE 52186
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
52047: LD_ADDR_VAR 0 13
52051: PUSH
52052: LD_VAR 0 30
52056: PPUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 54
52062: PUSH
52063: EMPTY
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PPUSH
52070: CALL_OW 72
52074: PPUSH
52075: LD_VAR 0 4
52079: PUSH
52080: LD_VAR 0 7
52084: ARRAY
52085: PPUSH
52086: CALL_OW 74
52090: ST_TO_ADDR
// if z then
52091: LD_VAR 0 13
52095: IFFALSE 52186
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
52097: LD_INT 91
52099: PUSH
52100: LD_VAR 0 13
52104: PUSH
52105: LD_INT 10
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 81
52115: PUSH
52116: LD_VAR 0 13
52120: PPUSH
52121: CALL_OW 255
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PPUSH
52134: CALL_OW 69
52138: PUSH
52139: LD_INT 0
52141: EQUAL
52142: IFFALSE 52166
// ComHeal ( group [ i ] , z ) else
52144: LD_VAR 0 4
52148: PUSH
52149: LD_VAR 0 7
52153: ARRAY
52154: PPUSH
52155: LD_VAR 0 13
52159: PPUSH
52160: CALL_OW 128
52164: GO 52186
// ComMoveToArea ( group [ i ] , f_heal ) ;
52166: LD_VAR 0 4
52170: PUSH
52171: LD_VAR 0 7
52175: ARRAY
52176: PPUSH
52177: LD_VAR 0 23
52181: PPUSH
52182: CALL_OW 113
// end ; continue ;
52186: GO 51217
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
52188: LD_VAR 0 4
52192: PUSH
52193: LD_VAR 0 7
52197: ARRAY
52198: PPUSH
52199: CALL_OW 256
52203: PUSH
52204: LD_INT 700
52206: LESS
52207: PUSH
52208: LD_VAR 0 4
52212: PUSH
52213: LD_VAR 0 7
52217: ARRAY
52218: PUSH
52219: LD_VAR 0 30
52223: IN
52224: NOT
52225: AND
52226: IFFALSE 52250
// to_heal := to_heal union group [ i ] ;
52228: LD_ADDR_VAR 0 30
52232: PUSH
52233: LD_VAR 0 30
52237: PUSH
52238: LD_VAR 0 4
52242: PUSH
52243: LD_VAR 0 7
52247: ARRAY
52248: UNION
52249: ST_TO_ADDR
// if group [ i ] in to_heal then
52250: LD_VAR 0 4
52254: PUSH
52255: LD_VAR 0 7
52259: ARRAY
52260: PUSH
52261: LD_VAR 0 30
52265: IN
52266: IFFALSE 52375
// begin if GetLives ( group [ i ] ) = 1000 then
52268: LD_VAR 0 4
52272: PUSH
52273: LD_VAR 0 7
52277: ARRAY
52278: PPUSH
52279: CALL_OW 256
52283: PUSH
52284: LD_INT 1000
52286: EQUAL
52287: IFFALSE 52313
// to_heal := to_heal diff group [ i ] else
52289: LD_ADDR_VAR 0 30
52293: PUSH
52294: LD_VAR 0 30
52298: PUSH
52299: LD_VAR 0 4
52303: PUSH
52304: LD_VAR 0 7
52308: ARRAY
52309: DIFF
52310: ST_TO_ADDR
52311: GO 52375
// begin if not IsInArea ( group [ i ] , to_heal ) then
52313: LD_VAR 0 4
52317: PUSH
52318: LD_VAR 0 7
52322: ARRAY
52323: PPUSH
52324: LD_VAR 0 30
52328: PPUSH
52329: CALL_OW 308
52333: NOT
52334: IFFALSE 52358
// ComMoveToArea ( group [ i ] , f_heal ) else
52336: LD_VAR 0 4
52340: PUSH
52341: LD_VAR 0 7
52345: ARRAY
52346: PPUSH
52347: LD_VAR 0 23
52351: PPUSH
52352: CALL_OW 113
52356: GO 52373
// ComHold ( group [ i ] ) ;
52358: LD_VAR 0 4
52362: PUSH
52363: LD_VAR 0 7
52367: ARRAY
52368: PPUSH
52369: CALL_OW 140
// continue ;
52373: GO 51217
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
52375: LD_VAR 0 4
52379: PUSH
52380: LD_VAR 0 7
52384: ARRAY
52385: PPUSH
52386: LD_INT 10
52388: PPUSH
52389: CALL 49015 0 2
52393: NOT
52394: PUSH
52395: LD_VAR 0 16
52399: PUSH
52400: LD_VAR 0 7
52404: ARRAY
52405: PUSH
52406: EMPTY
52407: EQUAL
52408: NOT
52409: AND
52410: IFFALSE 52676
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
52412: LD_VAR 0 4
52416: PUSH
52417: LD_VAR 0 7
52421: ARRAY
52422: PPUSH
52423: CALL_OW 262
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: IN
52438: IFFALSE 52479
// if GetFuel ( group [ i ] ) < 10 then
52440: LD_VAR 0 4
52444: PUSH
52445: LD_VAR 0 7
52449: ARRAY
52450: PPUSH
52451: CALL_OW 261
52455: PUSH
52456: LD_INT 10
52458: LESS
52459: IFFALSE 52479
// SetFuel ( group [ i ] , 12 ) ;
52461: LD_VAR 0 4
52465: PUSH
52466: LD_VAR 0 7
52470: ARRAY
52471: PPUSH
52472: LD_INT 12
52474: PPUSH
52475: CALL_OW 240
// if units_path [ i ] then
52479: LD_VAR 0 16
52483: PUSH
52484: LD_VAR 0 7
52488: ARRAY
52489: IFFALSE 52674
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
52491: LD_VAR 0 4
52495: PUSH
52496: LD_VAR 0 7
52500: ARRAY
52501: PPUSH
52502: LD_VAR 0 16
52506: PUSH
52507: LD_VAR 0 7
52511: ARRAY
52512: PUSH
52513: LD_INT 1
52515: ARRAY
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: PPUSH
52521: LD_VAR 0 16
52525: PUSH
52526: LD_VAR 0 7
52530: ARRAY
52531: PUSH
52532: LD_INT 1
52534: ARRAY
52535: PUSH
52536: LD_INT 2
52538: ARRAY
52539: PPUSH
52540: CALL_OW 297
52544: PUSH
52545: LD_INT 6
52547: GREATER
52548: IFFALSE 52623
// begin if not HasTask ( group [ i ] ) then
52550: LD_VAR 0 4
52554: PUSH
52555: LD_VAR 0 7
52559: ARRAY
52560: PPUSH
52561: CALL_OW 314
52565: NOT
52566: IFFALSE 52621
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
52568: LD_VAR 0 4
52572: PUSH
52573: LD_VAR 0 7
52577: ARRAY
52578: PPUSH
52579: LD_VAR 0 16
52583: PUSH
52584: LD_VAR 0 7
52588: ARRAY
52589: PUSH
52590: LD_INT 1
52592: ARRAY
52593: PUSH
52594: LD_INT 1
52596: ARRAY
52597: PPUSH
52598: LD_VAR 0 16
52602: PUSH
52603: LD_VAR 0 7
52607: ARRAY
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PUSH
52613: LD_INT 2
52615: ARRAY
52616: PPUSH
52617: CALL_OW 114
// end else
52621: GO 52674
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
52623: LD_ADDR_VAR 0 15
52627: PUSH
52628: LD_VAR 0 16
52632: PUSH
52633: LD_VAR 0 7
52637: ARRAY
52638: PPUSH
52639: LD_INT 1
52641: PPUSH
52642: CALL_OW 3
52646: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
52647: LD_ADDR_VAR 0 16
52651: PUSH
52652: LD_VAR 0 16
52656: PPUSH
52657: LD_VAR 0 7
52661: PPUSH
52662: LD_VAR 0 15
52666: PPUSH
52667: CALL_OW 1
52671: ST_TO_ADDR
// continue ;
52672: GO 51217
// end ; end ; end else
52674: GO 55312
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
52676: LD_ADDR_VAR 0 14
52680: PUSH
52681: LD_INT 81
52683: PUSH
52684: LD_VAR 0 4
52688: PUSH
52689: LD_VAR 0 7
52693: ARRAY
52694: PPUSH
52695: CALL_OW 255
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PPUSH
52704: CALL_OW 69
52708: ST_TO_ADDR
// if not tmp then
52709: LD_VAR 0 14
52713: NOT
52714: IFFALSE 52718
// continue ;
52716: GO 51217
// if f_ignore_area then
52718: LD_VAR 0 17
52722: IFFALSE 52810
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
52724: LD_ADDR_VAR 0 15
52728: PUSH
52729: LD_VAR 0 14
52733: PPUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 92
52739: PUSH
52740: LD_VAR 0 17
52744: PUSH
52745: LD_INT 1
52747: ARRAY
52748: PUSH
52749: LD_VAR 0 17
52753: PUSH
52754: LD_INT 2
52756: ARRAY
52757: PUSH
52758: LD_VAR 0 17
52762: PUSH
52763: LD_INT 3
52765: ARRAY
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PPUSH
52777: CALL_OW 72
52781: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
52782: LD_VAR 0 14
52786: PUSH
52787: LD_VAR 0 15
52791: DIFF
52792: IFFALSE 52810
// tmp := tmp diff tmp2 ;
52794: LD_ADDR_VAR 0 14
52798: PUSH
52799: LD_VAR 0 14
52803: PUSH
52804: LD_VAR 0 15
52808: DIFF
52809: ST_TO_ADDR
// end ; if not f_murder then
52810: LD_VAR 0 20
52814: NOT
52815: IFFALSE 52873
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
52817: LD_ADDR_VAR 0 15
52821: PUSH
52822: LD_VAR 0 14
52826: PPUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 50
52832: PUSH
52833: EMPTY
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PPUSH
52840: CALL_OW 72
52844: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
52845: LD_VAR 0 14
52849: PUSH
52850: LD_VAR 0 15
52854: DIFF
52855: IFFALSE 52873
// tmp := tmp diff tmp2 ;
52857: LD_ADDR_VAR 0 14
52861: PUSH
52862: LD_VAR 0 14
52866: PUSH
52867: LD_VAR 0 15
52871: DIFF
52872: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
52873: LD_ADDR_VAR 0 14
52877: PUSH
52878: LD_VAR 0 4
52882: PUSH
52883: LD_VAR 0 7
52887: ARRAY
52888: PPUSH
52889: LD_VAR 0 14
52893: PPUSH
52894: LD_INT 1
52896: PPUSH
52897: LD_INT 1
52899: PPUSH
52900: CALL 22897 0 4
52904: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
52905: LD_VAR 0 4
52909: PUSH
52910: LD_VAR 0 7
52914: ARRAY
52915: PPUSH
52916: CALL_OW 257
52920: PUSH
52921: LD_INT 1
52923: EQUAL
52924: IFFALSE 53372
// begin if WantPlant ( group [ i ] ) then
52926: LD_VAR 0 4
52930: PUSH
52931: LD_VAR 0 7
52935: ARRAY
52936: PPUSH
52937: CALL 22365 0 1
52941: IFFALSE 52945
// continue ;
52943: GO 51217
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
52945: LD_VAR 0 18
52949: PUSH
52950: LD_VAR 0 4
52954: PUSH
52955: LD_VAR 0 7
52959: ARRAY
52960: PPUSH
52961: CALL_OW 310
52965: NOT
52966: AND
52967: PUSH
52968: LD_VAR 0 14
52972: PUSH
52973: LD_INT 1
52975: ARRAY
52976: PUSH
52977: LD_VAR 0 14
52981: PPUSH
52982: LD_INT 21
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 58
52994: PUSH
52995: EMPTY
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PPUSH
53002: CALL_OW 72
53006: IN
53007: AND
53008: IFFALSE 53044
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
53010: LD_VAR 0 4
53014: PUSH
53015: LD_VAR 0 7
53019: ARRAY
53020: PPUSH
53021: LD_VAR 0 14
53025: PUSH
53026: LD_INT 1
53028: ARRAY
53029: PPUSH
53030: CALL_OW 120
// attacking := true ;
53034: LD_ADDR_VAR 0 29
53038: PUSH
53039: LD_INT 1
53041: ST_TO_ADDR
// continue ;
53042: GO 51217
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
53044: LD_VAR 0 26
53048: PUSH
53049: LD_VAR 0 4
53053: PUSH
53054: LD_VAR 0 7
53058: ARRAY
53059: PPUSH
53060: CALL_OW 257
53064: PUSH
53065: LD_INT 1
53067: EQUAL
53068: AND
53069: PUSH
53070: LD_VAR 0 4
53074: PUSH
53075: LD_VAR 0 7
53079: ARRAY
53080: PPUSH
53081: CALL_OW 256
53085: PUSH
53086: LD_INT 800
53088: LESS
53089: AND
53090: PUSH
53091: LD_VAR 0 4
53095: PUSH
53096: LD_VAR 0 7
53100: ARRAY
53101: PPUSH
53102: CALL_OW 318
53106: NOT
53107: AND
53108: IFFALSE 53125
// ComCrawl ( group [ i ] ) ;
53110: LD_VAR 0 4
53114: PUSH
53115: LD_VAR 0 7
53119: ARRAY
53120: PPUSH
53121: CALL_OW 137
// if f_mines then
53125: LD_VAR 0 21
53129: IFFALSE 53372
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
53131: LD_VAR 0 14
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: PPUSH
53140: CALL_OW 247
53144: PUSH
53145: LD_INT 3
53147: EQUAL
53148: PUSH
53149: LD_VAR 0 14
53153: PUSH
53154: LD_INT 1
53156: ARRAY
53157: PUSH
53158: LD_VAR 0 27
53162: IN
53163: NOT
53164: AND
53165: IFFALSE 53372
// begin x := GetX ( tmp [ 1 ] ) ;
53167: LD_ADDR_VAR 0 10
53171: PUSH
53172: LD_VAR 0 14
53176: PUSH
53177: LD_INT 1
53179: ARRAY
53180: PPUSH
53181: CALL_OW 250
53185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
53186: LD_ADDR_VAR 0 11
53190: PUSH
53191: LD_VAR 0 14
53195: PUSH
53196: LD_INT 1
53198: ARRAY
53199: PPUSH
53200: CALL_OW 251
53204: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
53205: LD_ADDR_VAR 0 12
53209: PUSH
53210: LD_VAR 0 4
53214: PUSH
53215: LD_VAR 0 7
53219: ARRAY
53220: PPUSH
53221: CALL 49100 0 1
53225: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
53226: LD_VAR 0 4
53230: PUSH
53231: LD_VAR 0 7
53235: ARRAY
53236: PPUSH
53237: LD_VAR 0 10
53241: PPUSH
53242: LD_VAR 0 11
53246: PPUSH
53247: LD_VAR 0 14
53251: PUSH
53252: LD_INT 1
53254: ARRAY
53255: PPUSH
53256: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
53260: LD_VAR 0 4
53264: PUSH
53265: LD_VAR 0 7
53269: ARRAY
53270: PPUSH
53271: LD_VAR 0 10
53275: PPUSH
53276: LD_VAR 0 12
53280: PPUSH
53281: LD_INT 7
53283: PPUSH
53284: CALL_OW 272
53288: PPUSH
53289: LD_VAR 0 11
53293: PPUSH
53294: LD_VAR 0 12
53298: PPUSH
53299: LD_INT 7
53301: PPUSH
53302: CALL_OW 273
53306: PPUSH
53307: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
53311: LD_VAR 0 4
53315: PUSH
53316: LD_VAR 0 7
53320: ARRAY
53321: PPUSH
53322: LD_INT 71
53324: PPUSH
53325: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
53329: LD_ADDR_VAR 0 27
53333: PUSH
53334: LD_VAR 0 27
53338: PPUSH
53339: LD_VAR 0 27
53343: PUSH
53344: LD_INT 1
53346: PLUS
53347: PPUSH
53348: LD_VAR 0 14
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PPUSH
53357: CALL_OW 1
53361: ST_TO_ADDR
// attacking := true ;
53362: LD_ADDR_VAR 0 29
53366: PUSH
53367: LD_INT 1
53369: ST_TO_ADDR
// continue ;
53370: GO 51217
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
53372: LD_VAR 0 4
53376: PUSH
53377: LD_VAR 0 7
53381: ARRAY
53382: PPUSH
53383: CALL_OW 257
53387: PUSH
53388: LD_INT 17
53390: EQUAL
53391: PUSH
53392: LD_VAR 0 4
53396: PUSH
53397: LD_VAR 0 7
53401: ARRAY
53402: PPUSH
53403: CALL_OW 110
53407: PUSH
53408: LD_INT 71
53410: EQUAL
53411: NOT
53412: AND
53413: IFFALSE 53559
// begin attacking := false ;
53415: LD_ADDR_VAR 0 29
53419: PUSH
53420: LD_INT 0
53422: ST_TO_ADDR
// k := 5 ;
53423: LD_ADDR_VAR 0 9
53427: PUSH
53428: LD_INT 5
53430: ST_TO_ADDR
// if tmp < k then
53431: LD_VAR 0 14
53435: PUSH
53436: LD_VAR 0 9
53440: LESS
53441: IFFALSE 53453
// k := tmp ;
53443: LD_ADDR_VAR 0 9
53447: PUSH
53448: LD_VAR 0 14
53452: ST_TO_ADDR
// for j = 1 to k do
53453: LD_ADDR_VAR 0 8
53457: PUSH
53458: DOUBLE
53459: LD_INT 1
53461: DEC
53462: ST_TO_ADDR
53463: LD_VAR 0 9
53467: PUSH
53468: FOR_TO
53469: IFFALSE 53557
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
53471: LD_VAR 0 14
53475: PUSH
53476: LD_VAR 0 8
53480: ARRAY
53481: PUSH
53482: LD_VAR 0 14
53486: PPUSH
53487: LD_INT 58
53489: PUSH
53490: EMPTY
53491: LIST
53492: PPUSH
53493: CALL_OW 72
53497: IN
53498: NOT
53499: IFFALSE 53555
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
53501: LD_VAR 0 4
53505: PUSH
53506: LD_VAR 0 7
53510: ARRAY
53511: PPUSH
53512: LD_VAR 0 14
53516: PUSH
53517: LD_VAR 0 8
53521: ARRAY
53522: PPUSH
53523: CALL_OW 115
// attacking := true ;
53527: LD_ADDR_VAR 0 29
53531: PUSH
53532: LD_INT 1
53534: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
53535: LD_VAR 0 4
53539: PUSH
53540: LD_VAR 0 7
53544: ARRAY
53545: PPUSH
53546: LD_INT 71
53548: PPUSH
53549: CALL_OW 109
// continue ;
53553: GO 53468
// end ; end ;
53555: GO 53468
53557: POP
53558: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
53559: LD_VAR 0 4
53563: PUSH
53564: LD_VAR 0 7
53568: ARRAY
53569: PPUSH
53570: CALL_OW 257
53574: PUSH
53575: LD_INT 8
53577: EQUAL
53578: PUSH
53579: LD_VAR 0 4
53583: PUSH
53584: LD_VAR 0 7
53588: ARRAY
53589: PPUSH
53590: CALL_OW 264
53594: PUSH
53595: LD_INT 28
53597: PUSH
53598: LD_INT 45
53600: PUSH
53601: LD_INT 7
53603: PUSH
53604: LD_INT 47
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: IN
53613: OR
53614: IFFALSE 53844
// begin attacking := false ;
53616: LD_ADDR_VAR 0 29
53620: PUSH
53621: LD_INT 0
53623: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
53624: LD_VAR 0 14
53628: PUSH
53629: LD_INT 1
53631: ARRAY
53632: PPUSH
53633: CALL_OW 266
53637: PUSH
53638: LD_INT 32
53640: PUSH
53641: LD_INT 31
53643: PUSH
53644: LD_INT 33
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: IN
53660: IFFALSE 53844
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
53662: LD_ADDR_VAR 0 9
53666: PUSH
53667: LD_VAR 0 14
53671: PUSH
53672: LD_INT 1
53674: ARRAY
53675: PPUSH
53676: CALL_OW 266
53680: PPUSH
53681: LD_VAR 0 14
53685: PUSH
53686: LD_INT 1
53688: ARRAY
53689: PPUSH
53690: CALL_OW 250
53694: PPUSH
53695: LD_VAR 0 14
53699: PUSH
53700: LD_INT 1
53702: ARRAY
53703: PPUSH
53704: CALL_OW 251
53708: PPUSH
53709: LD_VAR 0 14
53713: PUSH
53714: LD_INT 1
53716: ARRAY
53717: PPUSH
53718: CALL_OW 254
53722: PPUSH
53723: LD_VAR 0 14
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: PPUSH
53732: CALL_OW 248
53736: PPUSH
53737: LD_INT 0
53739: PPUSH
53740: CALL 30476 0 6
53744: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
53745: LD_ADDR_VAR 0 8
53749: PUSH
53750: LD_VAR 0 4
53754: PUSH
53755: LD_VAR 0 7
53759: ARRAY
53760: PPUSH
53761: LD_VAR 0 9
53765: PPUSH
53766: CALL 49163 0 2
53770: ST_TO_ADDR
// if j then
53771: LD_VAR 0 8
53775: IFFALSE 53844
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53777: LD_VAR 0 8
53781: PUSH
53782: LD_INT 1
53784: ARRAY
53785: PPUSH
53786: LD_VAR 0 8
53790: PUSH
53791: LD_INT 2
53793: ARRAY
53794: PPUSH
53795: CALL_OW 488
53799: IFFALSE 53844
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
53801: LD_VAR 0 4
53805: PUSH
53806: LD_VAR 0 7
53810: ARRAY
53811: PPUSH
53812: LD_VAR 0 8
53816: PUSH
53817: LD_INT 1
53819: ARRAY
53820: PPUSH
53821: LD_VAR 0 8
53825: PUSH
53826: LD_INT 2
53828: ARRAY
53829: PPUSH
53830: CALL_OW 116
// attacking := true ;
53834: LD_ADDR_VAR 0 29
53838: PUSH
53839: LD_INT 1
53841: ST_TO_ADDR
// continue ;
53842: GO 51217
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
53844: LD_VAR 0 4
53848: PUSH
53849: LD_VAR 0 7
53853: ARRAY
53854: PPUSH
53855: CALL_OW 265
53859: PUSH
53860: LD_INT 11
53862: EQUAL
53863: IFFALSE 54141
// begin k := 10 ;
53865: LD_ADDR_VAR 0 9
53869: PUSH
53870: LD_INT 10
53872: ST_TO_ADDR
// x := 0 ;
53873: LD_ADDR_VAR 0 10
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// if tmp < k then
53881: LD_VAR 0 14
53885: PUSH
53886: LD_VAR 0 9
53890: LESS
53891: IFFALSE 53903
// k := tmp ;
53893: LD_ADDR_VAR 0 9
53897: PUSH
53898: LD_VAR 0 14
53902: ST_TO_ADDR
// for j = k downto 1 do
53903: LD_ADDR_VAR 0 8
53907: PUSH
53908: DOUBLE
53909: LD_VAR 0 9
53913: INC
53914: ST_TO_ADDR
53915: LD_INT 1
53917: PUSH
53918: FOR_DOWNTO
53919: IFFALSE 53994
// begin if GetType ( tmp [ j ] ) = unit_human then
53921: LD_VAR 0 14
53925: PUSH
53926: LD_VAR 0 8
53930: ARRAY
53931: PPUSH
53932: CALL_OW 247
53936: PUSH
53937: LD_INT 1
53939: EQUAL
53940: IFFALSE 53992
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
53942: LD_VAR 0 4
53946: PUSH
53947: LD_VAR 0 7
53951: ARRAY
53952: PPUSH
53953: LD_VAR 0 14
53957: PUSH
53958: LD_VAR 0 8
53962: ARRAY
53963: PPUSH
53964: CALL 49434 0 2
// x := tmp [ j ] ;
53968: LD_ADDR_VAR 0 10
53972: PUSH
53973: LD_VAR 0 14
53977: PUSH
53978: LD_VAR 0 8
53982: ARRAY
53983: ST_TO_ADDR
// attacking := true ;
53984: LD_ADDR_VAR 0 29
53988: PUSH
53989: LD_INT 1
53991: ST_TO_ADDR
// end ; end ;
53992: GO 53918
53994: POP
53995: POP
// if not x then
53996: LD_VAR 0 10
54000: NOT
54001: IFFALSE 54141
// begin attacking := true ;
54003: LD_ADDR_VAR 0 29
54007: PUSH
54008: LD_INT 1
54010: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
54011: LD_VAR 0 4
54015: PUSH
54016: LD_VAR 0 7
54020: ARRAY
54021: PPUSH
54022: CALL_OW 250
54026: PPUSH
54027: LD_VAR 0 4
54031: PUSH
54032: LD_VAR 0 7
54036: ARRAY
54037: PPUSH
54038: CALL_OW 251
54042: PPUSH
54043: CALL_OW 546
54047: PUSH
54048: LD_INT 2
54050: ARRAY
54051: PUSH
54052: LD_VAR 0 14
54056: PUSH
54057: LD_INT 1
54059: ARRAY
54060: PPUSH
54061: CALL_OW 250
54065: PPUSH
54066: LD_VAR 0 14
54070: PUSH
54071: LD_INT 1
54073: ARRAY
54074: PPUSH
54075: CALL_OW 251
54079: PPUSH
54080: CALL_OW 546
54084: PUSH
54085: LD_INT 2
54087: ARRAY
54088: EQUAL
54089: IFFALSE 54117
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
54091: LD_VAR 0 4
54095: PUSH
54096: LD_VAR 0 7
54100: ARRAY
54101: PPUSH
54102: LD_VAR 0 14
54106: PUSH
54107: LD_INT 1
54109: ARRAY
54110: PPUSH
54111: CALL 49434 0 2
54115: GO 54141
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
54117: LD_VAR 0 4
54121: PUSH
54122: LD_VAR 0 7
54126: ARRAY
54127: PPUSH
54128: LD_VAR 0 14
54132: PUSH
54133: LD_INT 1
54135: ARRAY
54136: PPUSH
54137: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
54141: LD_VAR 0 4
54145: PUSH
54146: LD_VAR 0 7
54150: ARRAY
54151: PPUSH
54152: CALL_OW 264
54156: PUSH
54157: LD_INT 29
54159: EQUAL
54160: IFFALSE 54526
// begin if WantsToAttack ( group [ i ] ) in bombed then
54162: LD_VAR 0 4
54166: PUSH
54167: LD_VAR 0 7
54171: ARRAY
54172: PPUSH
54173: CALL_OW 319
54177: PUSH
54178: LD_VAR 0 28
54182: IN
54183: IFFALSE 54187
// continue ;
54185: GO 51217
// k := 8 ;
54187: LD_ADDR_VAR 0 9
54191: PUSH
54192: LD_INT 8
54194: ST_TO_ADDR
// x := 0 ;
54195: LD_ADDR_VAR 0 10
54199: PUSH
54200: LD_INT 0
54202: ST_TO_ADDR
// if tmp < k then
54203: LD_VAR 0 14
54207: PUSH
54208: LD_VAR 0 9
54212: LESS
54213: IFFALSE 54225
// k := tmp ;
54215: LD_ADDR_VAR 0 9
54219: PUSH
54220: LD_VAR 0 14
54224: ST_TO_ADDR
// for j = 1 to k do
54225: LD_ADDR_VAR 0 8
54229: PUSH
54230: DOUBLE
54231: LD_INT 1
54233: DEC
54234: ST_TO_ADDR
54235: LD_VAR 0 9
54239: PUSH
54240: FOR_TO
54241: IFFALSE 54373
// begin if GetType ( tmp [ j ] ) = unit_building then
54243: LD_VAR 0 14
54247: PUSH
54248: LD_VAR 0 8
54252: ARRAY
54253: PPUSH
54254: CALL_OW 247
54258: PUSH
54259: LD_INT 3
54261: EQUAL
54262: IFFALSE 54371
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
54264: LD_VAR 0 14
54268: PUSH
54269: LD_VAR 0 8
54273: ARRAY
54274: PUSH
54275: LD_VAR 0 28
54279: IN
54280: NOT
54281: PUSH
54282: LD_VAR 0 14
54286: PUSH
54287: LD_VAR 0 8
54291: ARRAY
54292: PPUSH
54293: CALL_OW 313
54297: AND
54298: IFFALSE 54371
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
54300: LD_VAR 0 4
54304: PUSH
54305: LD_VAR 0 7
54309: ARRAY
54310: PPUSH
54311: LD_VAR 0 14
54315: PUSH
54316: LD_VAR 0 8
54320: ARRAY
54321: PPUSH
54322: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
54326: LD_ADDR_VAR 0 28
54330: PUSH
54331: LD_VAR 0 28
54335: PPUSH
54336: LD_VAR 0 28
54340: PUSH
54341: LD_INT 1
54343: PLUS
54344: PPUSH
54345: LD_VAR 0 14
54349: PUSH
54350: LD_VAR 0 8
54354: ARRAY
54355: PPUSH
54356: CALL_OW 1
54360: ST_TO_ADDR
// attacking := true ;
54361: LD_ADDR_VAR 0 29
54365: PUSH
54366: LD_INT 1
54368: ST_TO_ADDR
// break ;
54369: GO 54373
// end ; end ;
54371: GO 54240
54373: POP
54374: POP
// if not attacking and f_attack_depot then
54375: LD_VAR 0 29
54379: NOT
54380: PUSH
54381: LD_VAR 0 25
54385: AND
54386: IFFALSE 54481
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54388: LD_ADDR_VAR 0 13
54392: PUSH
54393: LD_VAR 0 14
54397: PPUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 30
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 30
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: PPUSH
54426: CALL_OW 72
54430: ST_TO_ADDR
// if z then
54431: LD_VAR 0 13
54435: IFFALSE 54481
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
54437: LD_VAR 0 4
54441: PUSH
54442: LD_VAR 0 7
54446: ARRAY
54447: PPUSH
54448: LD_VAR 0 13
54452: PPUSH
54453: LD_VAR 0 4
54457: PUSH
54458: LD_VAR 0 7
54462: ARRAY
54463: PPUSH
54464: CALL_OW 74
54468: PPUSH
54469: CALL_OW 115
// attacking := true ;
54473: LD_ADDR_VAR 0 29
54477: PUSH
54478: LD_INT 1
54480: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
54481: LD_VAR 0 4
54485: PUSH
54486: LD_VAR 0 7
54490: ARRAY
54491: PPUSH
54492: CALL_OW 256
54496: PUSH
54497: LD_INT 500
54499: LESS
54500: IFFALSE 54526
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
54502: LD_VAR 0 4
54506: PUSH
54507: LD_VAR 0 7
54511: ARRAY
54512: PPUSH
54513: LD_VAR 0 14
54517: PUSH
54518: LD_INT 1
54520: ARRAY
54521: PPUSH
54522: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
54526: LD_VAR 0 4
54530: PUSH
54531: LD_VAR 0 7
54535: ARRAY
54536: PPUSH
54537: CALL_OW 264
54541: PUSH
54542: LD_INT 49
54544: EQUAL
54545: IFFALSE 54666
// begin if not HasTask ( group [ i ] ) then
54547: LD_VAR 0 4
54551: PUSH
54552: LD_VAR 0 7
54556: ARRAY
54557: PPUSH
54558: CALL_OW 314
54562: NOT
54563: IFFALSE 54666
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
54565: LD_ADDR_VAR 0 9
54569: PUSH
54570: LD_INT 81
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_VAR 0 7
54582: ARRAY
54583: PPUSH
54584: CALL_OW 255
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PPUSH
54593: CALL_OW 69
54597: PPUSH
54598: LD_VAR 0 4
54602: PUSH
54603: LD_VAR 0 7
54607: ARRAY
54608: PPUSH
54609: CALL_OW 74
54613: ST_TO_ADDR
// if k then
54614: LD_VAR 0 9
54618: IFFALSE 54666
// if GetDistUnits ( group [ i ] , k ) > 10 then
54620: LD_VAR 0 4
54624: PUSH
54625: LD_VAR 0 7
54629: ARRAY
54630: PPUSH
54631: LD_VAR 0 9
54635: PPUSH
54636: CALL_OW 296
54640: PUSH
54641: LD_INT 10
54643: GREATER
54644: IFFALSE 54666
// ComMoveUnit ( group [ i ] , k ) ;
54646: LD_VAR 0 4
54650: PUSH
54651: LD_VAR 0 7
54655: ARRAY
54656: PPUSH
54657: LD_VAR 0 9
54661: PPUSH
54662: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54666: LD_VAR 0 4
54670: PUSH
54671: LD_VAR 0 7
54675: ARRAY
54676: PPUSH
54677: CALL_OW 256
54681: PUSH
54682: LD_INT 250
54684: LESS
54685: PUSH
54686: LD_VAR 0 4
54690: PUSH
54691: LD_VAR 0 7
54695: ARRAY
54696: PUSH
54697: LD_INT 21
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 23
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PPUSH
54721: CALL_OW 69
54725: IN
54726: AND
54727: IFFALSE 54852
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
54729: LD_ADDR_VAR 0 9
54733: PUSH
54734: LD_OWVAR 3
54738: PUSH
54739: LD_VAR 0 4
54743: PUSH
54744: LD_VAR 0 7
54748: ARRAY
54749: DIFF
54750: PPUSH
54751: LD_VAR 0 4
54755: PUSH
54756: LD_VAR 0 7
54760: ARRAY
54761: PPUSH
54762: CALL_OW 74
54766: ST_TO_ADDR
// if not k then
54767: LD_VAR 0 9
54771: NOT
54772: IFFALSE 54776
// continue ;
54774: GO 51217
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
54776: LD_VAR 0 9
54780: PUSH
54781: LD_INT 81
54783: PUSH
54784: LD_VAR 0 4
54788: PUSH
54789: LD_VAR 0 7
54793: ARRAY
54794: PPUSH
54795: CALL_OW 255
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PPUSH
54804: CALL_OW 69
54808: IN
54809: PUSH
54810: LD_VAR 0 9
54814: PPUSH
54815: LD_VAR 0 4
54819: PUSH
54820: LD_VAR 0 7
54824: ARRAY
54825: PPUSH
54826: CALL_OW 296
54830: PUSH
54831: LD_INT 5
54833: LESS
54834: AND
54835: IFFALSE 54852
// ComAutodestruct ( group [ i ] ) ;
54837: LD_VAR 0 4
54841: PUSH
54842: LD_VAR 0 7
54846: ARRAY
54847: PPUSH
54848: CALL 49332 0 1
// end ; if f_attack_depot then
54852: LD_VAR 0 25
54856: IFFALSE 54968
// begin k := 6 ;
54858: LD_ADDR_VAR 0 9
54862: PUSH
54863: LD_INT 6
54865: ST_TO_ADDR
// if tmp < k then
54866: LD_VAR 0 14
54870: PUSH
54871: LD_VAR 0 9
54875: LESS
54876: IFFALSE 54888
// k := tmp ;
54878: LD_ADDR_VAR 0 9
54882: PUSH
54883: LD_VAR 0 14
54887: ST_TO_ADDR
// for j = 1 to k do
54888: LD_ADDR_VAR 0 8
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_VAR 0 9
54902: PUSH
54903: FOR_TO
54904: IFFALSE 54966
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
54906: LD_VAR 0 8
54910: PPUSH
54911: CALL_OW 266
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: IN
54926: IFFALSE 54964
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
54928: LD_VAR 0 4
54932: PUSH
54933: LD_VAR 0 7
54937: ARRAY
54938: PPUSH
54939: LD_VAR 0 14
54943: PUSH
54944: LD_VAR 0 8
54948: ARRAY
54949: PPUSH
54950: CALL_OW 115
// attacking := true ;
54954: LD_ADDR_VAR 0 29
54958: PUSH
54959: LD_INT 1
54961: ST_TO_ADDR
// break ;
54962: GO 54966
// end ;
54964: GO 54903
54966: POP
54967: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
54968: LD_VAR 0 4
54972: PUSH
54973: LD_VAR 0 7
54977: ARRAY
54978: PPUSH
54979: CALL_OW 302
54983: PUSH
54984: LD_VAR 0 29
54988: NOT
54989: AND
54990: IFFALSE 55312
// begin if GetTag ( group [ i ] ) = 71 then
54992: LD_VAR 0 4
54996: PUSH
54997: LD_VAR 0 7
55001: ARRAY
55002: PPUSH
55003: CALL_OW 110
55007: PUSH
55008: LD_INT 71
55010: EQUAL
55011: IFFALSE 55052
// begin if HasTask ( group [ i ] ) then
55013: LD_VAR 0 4
55017: PUSH
55018: LD_VAR 0 7
55022: ARRAY
55023: PPUSH
55024: CALL_OW 314
55028: IFFALSE 55034
// continue else
55030: GO 51217
55032: GO 55052
// SetTag ( group [ i ] , 0 ) ;
55034: LD_VAR 0 4
55038: PUSH
55039: LD_VAR 0 7
55043: ARRAY
55044: PPUSH
55045: LD_INT 0
55047: PPUSH
55048: CALL_OW 109
// end ; k := 8 ;
55052: LD_ADDR_VAR 0 9
55056: PUSH
55057: LD_INT 8
55059: ST_TO_ADDR
// x := 0 ;
55060: LD_ADDR_VAR 0 10
55064: PUSH
55065: LD_INT 0
55067: ST_TO_ADDR
// if tmp < k then
55068: LD_VAR 0 14
55072: PUSH
55073: LD_VAR 0 9
55077: LESS
55078: IFFALSE 55090
// k := tmp ;
55080: LD_ADDR_VAR 0 9
55084: PUSH
55085: LD_VAR 0 14
55089: ST_TO_ADDR
// for j = 1 to k do
55090: LD_ADDR_VAR 0 8
55094: PUSH
55095: DOUBLE
55096: LD_INT 1
55098: DEC
55099: ST_TO_ADDR
55100: LD_VAR 0 9
55104: PUSH
55105: FOR_TO
55106: IFFALSE 55204
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
55108: LD_VAR 0 14
55112: PUSH
55113: LD_VAR 0 8
55117: ARRAY
55118: PPUSH
55119: CALL_OW 247
55123: PUSH
55124: LD_INT 1
55126: EQUAL
55127: PUSH
55128: LD_VAR 0 14
55132: PUSH
55133: LD_VAR 0 8
55137: ARRAY
55138: PPUSH
55139: CALL_OW 256
55143: PUSH
55144: LD_INT 250
55146: LESS
55147: PUSH
55148: LD_VAR 0 20
55152: AND
55153: PUSH
55154: LD_VAR 0 20
55158: NOT
55159: PUSH
55160: LD_VAR 0 14
55164: PUSH
55165: LD_VAR 0 8
55169: ARRAY
55170: PPUSH
55171: CALL_OW 256
55175: PUSH
55176: LD_INT 250
55178: GREATEREQUAL
55179: AND
55180: OR
55181: AND
55182: IFFALSE 55202
// begin x := tmp [ j ] ;
55184: LD_ADDR_VAR 0 10
55188: PUSH
55189: LD_VAR 0 14
55193: PUSH
55194: LD_VAR 0 8
55198: ARRAY
55199: ST_TO_ADDR
// break ;
55200: GO 55204
// end ;
55202: GO 55105
55204: POP
55205: POP
// if x then
55206: LD_VAR 0 10
55210: IFFALSE 55234
// ComAttackUnit ( group [ i ] , x ) else
55212: LD_VAR 0 4
55216: PUSH
55217: LD_VAR 0 7
55221: ARRAY
55222: PPUSH
55223: LD_VAR 0 10
55227: PPUSH
55228: CALL_OW 115
55232: GO 55258
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
55234: LD_VAR 0 4
55238: PUSH
55239: LD_VAR 0 7
55243: ARRAY
55244: PPUSH
55245: LD_VAR 0 14
55249: PUSH
55250: LD_INT 1
55252: ARRAY
55253: PPUSH
55254: CALL_OW 115
// if not HasTask ( group [ i ] ) then
55258: LD_VAR 0 4
55262: PUSH
55263: LD_VAR 0 7
55267: ARRAY
55268: PPUSH
55269: CALL_OW 314
55273: NOT
55274: IFFALSE 55312
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
55276: LD_VAR 0 4
55280: PUSH
55281: LD_VAR 0 7
55285: ARRAY
55286: PPUSH
55287: LD_VAR 0 14
55291: PPUSH
55292: LD_VAR 0 4
55296: PUSH
55297: LD_VAR 0 7
55301: ARRAY
55302: PPUSH
55303: CALL_OW 74
55307: PPUSH
55308: CALL_OW 115
// end ; end ; end ;
55312: GO 51217
55314: POP
55315: POP
// wait ( 0 0$1 ) ;
55316: LD_INT 35
55318: PPUSH
55319: CALL_OW 67
// until group = [ ] ;
55323: LD_VAR 0 4
55327: PUSH
55328: EMPTY
55329: EQUAL
55330: IFFALSE 51202
// end ;
55332: LD_VAR 0 2
55336: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55337: LD_INT 0
55339: PPUSH
55340: PPUSH
55341: PPUSH
55342: PPUSH
// if not base_units then
55343: LD_VAR 0 1
55347: NOT
55348: IFFALSE 55352
// exit ;
55350: GO 55439
// result := false ;
55352: LD_ADDR_VAR 0 2
55356: PUSH
55357: LD_INT 0
55359: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55360: LD_ADDR_VAR 0 5
55364: PUSH
55365: LD_VAR 0 1
55369: PPUSH
55370: LD_INT 21
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PPUSH
55380: CALL_OW 72
55384: ST_TO_ADDR
// if not tmp then
55385: LD_VAR 0 5
55389: NOT
55390: IFFALSE 55394
// exit ;
55392: GO 55439
// for i in tmp do
55394: LD_ADDR_VAR 0 3
55398: PUSH
55399: LD_VAR 0 5
55403: PUSH
55404: FOR_IN
55405: IFFALSE 55437
// begin result := EnemyInRange ( i , 22 ) ;
55407: LD_ADDR_VAR 0 2
55411: PUSH
55412: LD_VAR 0 3
55416: PPUSH
55417: LD_INT 22
55419: PPUSH
55420: CALL 49015 0 2
55424: ST_TO_ADDR
// if result then
55425: LD_VAR 0 2
55429: IFFALSE 55435
// exit ;
55431: POP
55432: POP
55433: GO 55439
// end ;
55435: GO 55404
55437: POP
55438: POP
// end ;
55439: LD_VAR 0 2
55443: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55444: LD_INT 0
55446: PPUSH
55447: PPUSH
// if not units then
55448: LD_VAR 0 1
55452: NOT
55453: IFFALSE 55457
// exit ;
55455: GO 55527
// result := [ ] ;
55457: LD_ADDR_VAR 0 3
55461: PUSH
55462: EMPTY
55463: ST_TO_ADDR
// for i in units do
55464: LD_ADDR_VAR 0 4
55468: PUSH
55469: LD_VAR 0 1
55473: PUSH
55474: FOR_IN
55475: IFFALSE 55525
// if GetTag ( i ) = tag then
55477: LD_VAR 0 4
55481: PPUSH
55482: CALL_OW 110
55486: PUSH
55487: LD_VAR 0 2
55491: EQUAL
55492: IFFALSE 55523
// result := Insert ( result , result + 1 , i ) ;
55494: LD_ADDR_VAR 0 3
55498: PUSH
55499: LD_VAR 0 3
55503: PPUSH
55504: LD_VAR 0 3
55508: PUSH
55509: LD_INT 1
55511: PLUS
55512: PPUSH
55513: LD_VAR 0 4
55517: PPUSH
55518: CALL_OW 2
55522: ST_TO_ADDR
55523: GO 55474
55525: POP
55526: POP
// end ;
55527: LD_VAR 0 3
55531: RET
// export function IsDriver ( un ) ; begin
55532: LD_INT 0
55534: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55535: LD_ADDR_VAR 0 2
55539: PUSH
55540: LD_VAR 0 1
55544: PUSH
55545: LD_INT 55
55547: PUSH
55548: EMPTY
55549: LIST
55550: PPUSH
55551: CALL_OW 69
55555: IN
55556: ST_TO_ADDR
// end ;
55557: LD_VAR 0 2
55561: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55562: LD_INT 0
55564: PPUSH
55565: PPUSH
// list := [ ] ;
55566: LD_ADDR_VAR 0 5
55570: PUSH
55571: EMPTY
55572: ST_TO_ADDR
// case d of 0 :
55573: LD_VAR 0 3
55577: PUSH
55578: LD_INT 0
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55586
55584: GO 55719
55586: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55587: LD_ADDR_VAR 0 5
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_INT 4
55599: MINUS
55600: PUSH
55601: LD_VAR 0 2
55605: PUSH
55606: LD_INT 4
55608: MINUS
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: PUSH
55618: LD_VAR 0 1
55622: PUSH
55623: LD_INT 3
55625: MINUS
55626: PUSH
55627: LD_VAR 0 2
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: PUSH
55640: LD_VAR 0 1
55644: PUSH
55645: LD_INT 4
55647: PLUS
55648: PUSH
55649: LD_VAR 0 2
55653: PUSH
55654: LD_INT 4
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_VAR 0 1
55666: PUSH
55667: LD_INT 3
55669: PLUS
55670: PUSH
55671: LD_VAR 0 2
55675: PUSH
55676: LD_INT 3
55678: PLUS
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: PUSH
55688: LD_VAR 0 1
55692: PUSH
55693: LD_VAR 0 2
55697: PUSH
55698: LD_INT 4
55700: PLUS
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// end ; 1 :
55717: GO 56417
55719: LD_INT 1
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55727
55725: GO 55860
55727: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55728: LD_ADDR_VAR 0 5
55732: PUSH
55733: LD_VAR 0 1
55737: PUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_INT 4
55745: MINUS
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 3
55762: MINUS
55763: PUSH
55764: LD_VAR 0 2
55768: PUSH
55769: LD_INT 3
55771: MINUS
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: LD_VAR 0 1
55785: PUSH
55786: LD_INT 4
55788: MINUS
55789: PUSH
55790: LD_VAR 0 2
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: PUSH
55803: LD_VAR 0 1
55807: PUSH
55808: LD_VAR 0 2
55812: PUSH
55813: LD_INT 3
55815: PLUS
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: PUSH
55825: LD_VAR 0 1
55829: PUSH
55830: LD_INT 4
55832: PLUS
55833: PUSH
55834: LD_VAR 0 2
55838: PUSH
55839: LD_INT 4
55841: PLUS
55842: PUSH
55843: LD_INT 5
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// end ; 2 :
55858: GO 56417
55860: LD_INT 2
55862: DOUBLE
55863: EQUAL
55864: IFTRUE 55868
55866: GO 55997
55868: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55869: LD_ADDR_VAR 0 5
55873: PUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_VAR 0 2
55883: PUSH
55884: LD_INT 3
55886: MINUS
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: PUSH
55896: LD_VAR 0 1
55900: PUSH
55901: LD_INT 4
55903: PLUS
55904: PUSH
55905: LD_VAR 0 2
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: PUSH
55918: LD_VAR 0 1
55922: PUSH
55923: LD_VAR 0 2
55927: PUSH
55928: LD_INT 4
55930: PLUS
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: PUSH
55940: LD_VAR 0 1
55944: PUSH
55945: LD_INT 3
55947: MINUS
55948: PUSH
55949: LD_VAR 0 2
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: PUSH
55962: LD_VAR 0 1
55966: PUSH
55967: LD_INT 4
55969: MINUS
55970: PUSH
55971: LD_VAR 0 2
55975: PUSH
55976: LD_INT 4
55978: MINUS
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// end ; 3 :
55995: GO 56417
55997: LD_INT 3
55999: DOUBLE
56000: EQUAL
56001: IFTRUE 56005
56003: GO 56138
56005: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56006: LD_ADDR_VAR 0 5
56010: PUSH
56011: LD_VAR 0 1
56015: PUSH
56016: LD_INT 3
56018: PLUS
56019: PUSH
56020: LD_VAR 0 2
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: PUSH
56033: LD_VAR 0 1
56037: PUSH
56038: LD_INT 4
56040: PLUS
56041: PUSH
56042: LD_VAR 0 2
56046: PUSH
56047: LD_INT 4
56049: PLUS
56050: PUSH
56051: LD_INT 5
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: LIST
56058: PUSH
56059: LD_VAR 0 1
56063: PUSH
56064: LD_INT 4
56066: MINUS
56067: PUSH
56068: LD_VAR 0 2
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: PUSH
56081: LD_VAR 0 1
56085: PUSH
56086: LD_VAR 0 2
56090: PUSH
56091: LD_INT 4
56093: MINUS
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: PUSH
56103: LD_VAR 0 1
56107: PUSH
56108: LD_INT 3
56110: MINUS
56111: PUSH
56112: LD_VAR 0 2
56116: PUSH
56117: LD_INT 3
56119: MINUS
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// end ; 4 :
56136: GO 56417
56138: LD_INT 4
56140: DOUBLE
56141: EQUAL
56142: IFTRUE 56146
56144: GO 56279
56146: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56147: LD_ADDR_VAR 0 5
56151: PUSH
56152: LD_VAR 0 1
56156: PUSH
56157: LD_VAR 0 2
56161: PUSH
56162: LD_INT 4
56164: PLUS
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: PUSH
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 3
56181: PLUS
56182: PUSH
56183: LD_VAR 0 2
56187: PUSH
56188: LD_INT 3
56190: PLUS
56191: PUSH
56192: LD_INT 5
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: PUSH
56200: LD_VAR 0 1
56204: PUSH
56205: LD_INT 4
56207: PLUS
56208: PUSH
56209: LD_VAR 0 2
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: PUSH
56222: LD_VAR 0 1
56226: PUSH
56227: LD_VAR 0 2
56231: PUSH
56232: LD_INT 3
56234: MINUS
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: PUSH
56244: LD_VAR 0 1
56248: PUSH
56249: LD_INT 4
56251: MINUS
56252: PUSH
56253: LD_VAR 0 2
56257: PUSH
56258: LD_INT 4
56260: MINUS
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// end ; 5 :
56277: GO 56417
56279: LD_INT 5
56281: DOUBLE
56282: EQUAL
56283: IFTRUE 56287
56285: GO 56416
56287: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56288: LD_ADDR_VAR 0 5
56292: PUSH
56293: LD_VAR 0 1
56297: PUSH
56298: LD_INT 4
56300: MINUS
56301: PUSH
56302: LD_VAR 0 2
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: PUSH
56315: LD_VAR 0 1
56319: PUSH
56320: LD_VAR 0 2
56324: PUSH
56325: LD_INT 4
56327: MINUS
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 1
56341: PUSH
56342: LD_INT 4
56344: PLUS
56345: PUSH
56346: LD_VAR 0 2
56350: PUSH
56351: LD_INT 4
56353: PLUS
56354: PUSH
56355: LD_INT 5
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: PUSH
56363: LD_VAR 0 1
56367: PUSH
56368: LD_INT 3
56370: PLUS
56371: PUSH
56372: LD_VAR 0 2
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: PUSH
56385: LD_VAR 0 1
56389: PUSH
56390: LD_VAR 0 2
56394: PUSH
56395: LD_INT 3
56397: PLUS
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// end ; end ;
56414: GO 56417
56416: POP
// result := list ;
56417: LD_ADDR_VAR 0 4
56421: PUSH
56422: LD_VAR 0 5
56426: ST_TO_ADDR
// end ;
56427: LD_VAR 0 4
56431: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56432: LD_INT 0
56434: PPUSH
56435: PPUSH
56436: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56437: LD_VAR 0 1
56441: NOT
56442: PUSH
56443: LD_VAR 0 2
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: IN
56466: NOT
56467: OR
56468: IFFALSE 56472
// exit ;
56470: GO 56564
// tmp := [ ] ;
56472: LD_ADDR_VAR 0 5
56476: PUSH
56477: EMPTY
56478: ST_TO_ADDR
// for i in units do
56479: LD_ADDR_VAR 0 4
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: FOR_IN
56490: IFFALSE 56533
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56492: LD_ADDR_VAR 0 5
56496: PUSH
56497: LD_VAR 0 5
56501: PPUSH
56502: LD_VAR 0 5
56506: PUSH
56507: LD_INT 1
56509: PLUS
56510: PPUSH
56511: LD_VAR 0 4
56515: PPUSH
56516: LD_VAR 0 2
56520: PPUSH
56521: CALL_OW 259
56525: PPUSH
56526: CALL_OW 2
56530: ST_TO_ADDR
56531: GO 56489
56533: POP
56534: POP
// if not tmp then
56535: LD_VAR 0 5
56539: NOT
56540: IFFALSE 56544
// exit ;
56542: GO 56564
// result := SortListByListDesc ( units , tmp ) ;
56544: LD_ADDR_VAR 0 3
56548: PUSH
56549: LD_VAR 0 1
56553: PPUSH
56554: LD_VAR 0 5
56558: PPUSH
56559: CALL_OW 77
56563: ST_TO_ADDR
// end ;
56564: LD_VAR 0 3
56568: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56569: LD_INT 0
56571: PPUSH
56572: PPUSH
56573: PPUSH
// x := GetX ( building ) ;
56574: LD_ADDR_VAR 0 4
56578: PUSH
56579: LD_VAR 0 2
56583: PPUSH
56584: CALL_OW 250
56588: ST_TO_ADDR
// y := GetY ( building ) ;
56589: LD_ADDR_VAR 0 5
56593: PUSH
56594: LD_VAR 0 2
56598: PPUSH
56599: CALL_OW 251
56603: ST_TO_ADDR
// if GetTaskList ( unit ) then
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 437
56613: IFFALSE 56708
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56615: LD_STRING e
56617: PUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL_OW 437
56627: PUSH
56628: LD_INT 1
56630: ARRAY
56631: PUSH
56632: LD_INT 1
56634: ARRAY
56635: EQUAL
56636: PUSH
56637: LD_VAR 0 4
56641: PUSH
56642: LD_VAR 0 1
56646: PPUSH
56647: CALL_OW 437
56651: PUSH
56652: LD_INT 1
56654: ARRAY
56655: PUSH
56656: LD_INT 2
56658: ARRAY
56659: EQUAL
56660: AND
56661: PUSH
56662: LD_VAR 0 5
56666: PUSH
56667: LD_VAR 0 1
56671: PPUSH
56672: CALL_OW 437
56676: PUSH
56677: LD_INT 1
56679: ARRAY
56680: PUSH
56681: LD_INT 3
56683: ARRAY
56684: EQUAL
56685: AND
56686: IFFALSE 56698
// result := true else
56688: LD_ADDR_VAR 0 3
56692: PUSH
56693: LD_INT 1
56695: ST_TO_ADDR
56696: GO 56706
// result := false ;
56698: LD_ADDR_VAR 0 3
56702: PUSH
56703: LD_INT 0
56705: ST_TO_ADDR
// end else
56706: GO 56716
// result := false ;
56708: LD_ADDR_VAR 0 3
56712: PUSH
56713: LD_INT 0
56715: ST_TO_ADDR
// end ;
56716: LD_VAR 0 3
56720: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56721: LD_INT 0
56723: PPUSH
56724: PPUSH
56725: PPUSH
56726: PPUSH
// if not unit or not area then
56727: LD_VAR 0 1
56731: NOT
56732: PUSH
56733: LD_VAR 0 2
56737: NOT
56738: OR
56739: IFFALSE 56743
// exit ;
56741: GO 56908
// tmp := AreaToList ( area , i ) ;
56743: LD_ADDR_VAR 0 6
56747: PUSH
56748: LD_VAR 0 2
56752: PPUSH
56753: LD_VAR 0 5
56757: PPUSH
56758: CALL_OW 517
56762: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56763: LD_ADDR_VAR 0 5
56767: PUSH
56768: DOUBLE
56769: LD_INT 1
56771: DEC
56772: ST_TO_ADDR
56773: LD_VAR 0 6
56777: PUSH
56778: LD_INT 1
56780: ARRAY
56781: PUSH
56782: FOR_TO
56783: IFFALSE 56898
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56785: LD_ADDR_VAR 0 7
56789: PUSH
56790: LD_VAR 0 6
56794: PUSH
56795: LD_INT 1
56797: ARRAY
56798: PUSH
56799: LD_VAR 0 5
56803: ARRAY
56804: PUSH
56805: LD_VAR 0 6
56809: PUSH
56810: LD_INT 2
56812: ARRAY
56813: PUSH
56814: LD_VAR 0 5
56818: ARRAY
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56824: LD_VAR 0 7
56828: PUSH
56829: LD_INT 1
56831: ARRAY
56832: PPUSH
56833: LD_VAR 0 7
56837: PUSH
56838: LD_INT 2
56840: ARRAY
56841: PPUSH
56842: CALL_OW 428
56846: PUSH
56847: LD_INT 0
56849: EQUAL
56850: IFFALSE 56896
// begin result := true ;
56852: LD_ADDR_VAR 0 4
56856: PUSH
56857: LD_INT 1
56859: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56860: LD_VAR 0 1
56864: PPUSH
56865: LD_VAR 0 7
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PPUSH
56874: LD_VAR 0 7
56878: PUSH
56879: LD_INT 2
56881: ARRAY
56882: PPUSH
56883: LD_VAR 0 3
56887: PPUSH
56888: CALL_OW 48
// exit ;
56892: POP
56893: POP
56894: GO 56908
// end ; end ;
56896: GO 56782
56898: POP
56899: POP
// result := false ;
56900: LD_ADDR_VAR 0 4
56904: PUSH
56905: LD_INT 0
56907: ST_TO_ADDR
// end ;
56908: LD_VAR 0 4
56912: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56913: LD_INT 0
56915: PPUSH
56916: PPUSH
56917: PPUSH
// if not side or side > 8 then
56918: LD_VAR 0 1
56922: NOT
56923: PUSH
56924: LD_VAR 0 1
56928: PUSH
56929: LD_INT 8
56931: GREATER
56932: OR
56933: IFFALSE 56937
// exit ;
56935: GO 57124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56937: LD_ADDR_VAR 0 4
56941: PUSH
56942: LD_INT 22
56944: PUSH
56945: LD_VAR 0 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 21
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PPUSH
56968: CALL_OW 69
56972: ST_TO_ADDR
// if not tmp then
56973: LD_VAR 0 4
56977: NOT
56978: IFFALSE 56982
// exit ;
56980: GO 57124
// enable_addtolog := true ;
56982: LD_ADDR_OWVAR 81
56986: PUSH
56987: LD_INT 1
56989: ST_TO_ADDR
// AddToLog ( [ ) ;
56990: LD_STRING [
56992: PPUSH
56993: CALL_OW 561
// for i in tmp do
56997: LD_ADDR_VAR 0 3
57001: PUSH
57002: LD_VAR 0 4
57006: PUSH
57007: FOR_IN
57008: IFFALSE 57115
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57010: LD_STRING [
57012: PUSH
57013: LD_VAR 0 3
57017: PPUSH
57018: CALL_OW 266
57022: STR
57023: PUSH
57024: LD_STRING , 
57026: STR
57027: PUSH
57028: LD_VAR 0 3
57032: PPUSH
57033: CALL_OW 250
57037: STR
57038: PUSH
57039: LD_STRING , 
57041: STR
57042: PUSH
57043: LD_VAR 0 3
57047: PPUSH
57048: CALL_OW 251
57052: STR
57053: PUSH
57054: LD_STRING , 
57056: STR
57057: PUSH
57058: LD_VAR 0 3
57062: PPUSH
57063: CALL_OW 254
57067: STR
57068: PUSH
57069: LD_STRING , 
57071: STR
57072: PUSH
57073: LD_VAR 0 3
57077: PPUSH
57078: LD_INT 1
57080: PPUSH
57081: CALL_OW 268
57085: STR
57086: PUSH
57087: LD_STRING , 
57089: STR
57090: PUSH
57091: LD_VAR 0 3
57095: PPUSH
57096: LD_INT 2
57098: PPUSH
57099: CALL_OW 268
57103: STR
57104: PUSH
57105: LD_STRING ],
57107: STR
57108: PPUSH
57109: CALL_OW 561
// end ;
57113: GO 57007
57115: POP
57116: POP
// AddToLog ( ]; ) ;
57117: LD_STRING ];
57119: PPUSH
57120: CALL_OW 561
// end ;
57124: LD_VAR 0 2
57128: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57129: LD_INT 0
57131: PPUSH
57132: PPUSH
57133: PPUSH
57134: PPUSH
57135: PPUSH
// if not area or not rate or not max then
57136: LD_VAR 0 1
57140: NOT
57141: PUSH
57142: LD_VAR 0 2
57146: NOT
57147: OR
57148: PUSH
57149: LD_VAR 0 4
57153: NOT
57154: OR
57155: IFFALSE 57159
// exit ;
57157: GO 57351
// while 1 do
57159: LD_INT 1
57161: IFFALSE 57351
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57163: LD_ADDR_VAR 0 9
57167: PUSH
57168: LD_VAR 0 1
57172: PPUSH
57173: LD_INT 1
57175: PPUSH
57176: CALL_OW 287
57180: PUSH
57181: LD_INT 10
57183: MUL
57184: ST_TO_ADDR
// r := rate / 10 ;
57185: LD_ADDR_VAR 0 7
57189: PUSH
57190: LD_VAR 0 2
57194: PUSH
57195: LD_INT 10
57197: DIVREAL
57198: ST_TO_ADDR
// time := 1 1$00 ;
57199: LD_ADDR_VAR 0 8
57203: PUSH
57204: LD_INT 2100
57206: ST_TO_ADDR
// if amount < min then
57207: LD_VAR 0 9
57211: PUSH
57212: LD_VAR 0 3
57216: LESS
57217: IFFALSE 57235
// r := r * 2 else
57219: LD_ADDR_VAR 0 7
57223: PUSH
57224: LD_VAR 0 7
57228: PUSH
57229: LD_INT 2
57231: MUL
57232: ST_TO_ADDR
57233: GO 57261
// if amount > max then
57235: LD_VAR 0 9
57239: PUSH
57240: LD_VAR 0 4
57244: GREATER
57245: IFFALSE 57261
// r := r / 2 ;
57247: LD_ADDR_VAR 0 7
57251: PUSH
57252: LD_VAR 0 7
57256: PUSH
57257: LD_INT 2
57259: DIVREAL
57260: ST_TO_ADDR
// time := time / r ;
57261: LD_ADDR_VAR 0 8
57265: PUSH
57266: LD_VAR 0 8
57270: PUSH
57271: LD_VAR 0 7
57275: DIVREAL
57276: ST_TO_ADDR
// if time < 0 then
57277: LD_VAR 0 8
57281: PUSH
57282: LD_INT 0
57284: LESS
57285: IFFALSE 57302
// time := time * - 1 ;
57287: LD_ADDR_VAR 0 8
57291: PUSH
57292: LD_VAR 0 8
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: MUL
57301: ST_TO_ADDR
// wait ( time ) ;
57302: LD_VAR 0 8
57306: PPUSH
57307: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57311: LD_INT 35
57313: PPUSH
57314: LD_INT 875
57316: PPUSH
57317: CALL_OW 12
57321: PPUSH
57322: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57326: LD_INT 1
57328: PPUSH
57329: LD_INT 5
57331: PPUSH
57332: CALL_OW 12
57336: PPUSH
57337: LD_VAR 0 1
57341: PPUSH
57342: LD_INT 1
57344: PPUSH
57345: CALL_OW 55
// end ;
57349: GO 57159
// end ;
57351: LD_VAR 0 5
57355: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57356: LD_INT 0
57358: PPUSH
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
57364: PPUSH
57365: PPUSH
// if not turrets or not factories then
57366: LD_VAR 0 1
57370: NOT
57371: PUSH
57372: LD_VAR 0 2
57376: NOT
57377: OR
57378: IFFALSE 57382
// exit ;
57380: GO 57689
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57382: LD_ADDR_VAR 0 10
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: LD_INT 6
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 4
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 5
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 24
57424: PUSH
57425: LD_INT 25
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 23
57434: PUSH
57435: LD_INT 27
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 42
57448: PUSH
57449: LD_INT 43
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 44
57458: PUSH
57459: LD_INT 46
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 45
57468: PUSH
57469: LD_INT 47
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// result := [ ] ;
57486: LD_ADDR_VAR 0 3
57490: PUSH
57491: EMPTY
57492: ST_TO_ADDR
// for i in turrets do
57493: LD_ADDR_VAR 0 4
57497: PUSH
57498: LD_VAR 0 1
57502: PUSH
57503: FOR_IN
57504: IFFALSE 57687
// begin nat := GetNation ( i ) ;
57506: LD_ADDR_VAR 0 7
57510: PUSH
57511: LD_VAR 0 4
57515: PPUSH
57516: CALL_OW 248
57520: ST_TO_ADDR
// weapon := 0 ;
57521: LD_ADDR_VAR 0 8
57525: PUSH
57526: LD_INT 0
57528: ST_TO_ADDR
// if not nat then
57529: LD_VAR 0 7
57533: NOT
57534: IFFALSE 57538
// continue ;
57536: GO 57503
// for j in list [ nat ] do
57538: LD_ADDR_VAR 0 5
57542: PUSH
57543: LD_VAR 0 10
57547: PUSH
57548: LD_VAR 0 7
57552: ARRAY
57553: PUSH
57554: FOR_IN
57555: IFFALSE 57596
// if GetBWeapon ( i ) = j [ 1 ] then
57557: LD_VAR 0 4
57561: PPUSH
57562: CALL_OW 269
57566: PUSH
57567: LD_VAR 0 5
57571: PUSH
57572: LD_INT 1
57574: ARRAY
57575: EQUAL
57576: IFFALSE 57594
// begin weapon := j [ 2 ] ;
57578: LD_ADDR_VAR 0 8
57582: PUSH
57583: LD_VAR 0 5
57587: PUSH
57588: LD_INT 2
57590: ARRAY
57591: ST_TO_ADDR
// break ;
57592: GO 57596
// end ;
57594: GO 57554
57596: POP
57597: POP
// if not weapon then
57598: LD_VAR 0 8
57602: NOT
57603: IFFALSE 57607
// continue ;
57605: GO 57503
// for k in factories do
57607: LD_ADDR_VAR 0 6
57611: PUSH
57612: LD_VAR 0 2
57616: PUSH
57617: FOR_IN
57618: IFFALSE 57683
// begin weapons := AvailableWeaponList ( k ) ;
57620: LD_ADDR_VAR 0 9
57624: PUSH
57625: LD_VAR 0 6
57629: PPUSH
57630: CALL_OW 478
57634: ST_TO_ADDR
// if not weapons then
57635: LD_VAR 0 9
57639: NOT
57640: IFFALSE 57644
// continue ;
57642: GO 57617
// if weapon in weapons then
57644: LD_VAR 0 8
57648: PUSH
57649: LD_VAR 0 9
57653: IN
57654: IFFALSE 57681
// begin result := [ i , weapon ] ;
57656: LD_ADDR_VAR 0 3
57660: PUSH
57661: LD_VAR 0 4
57665: PUSH
57666: LD_VAR 0 8
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// exit ;
57675: POP
57676: POP
57677: POP
57678: POP
57679: GO 57689
// end ; end ;
57681: GO 57617
57683: POP
57684: POP
// end ;
57685: GO 57503
57687: POP
57688: POP
// end ; end_of_file
57689: LD_VAR 0 3
57693: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
57694: LD_INT 0
57696: PPUSH
57697: PPUSH
// skirmish := false ;
57698: LD_ADDR_EXP 43
57702: PUSH
57703: LD_INT 0
57705: ST_TO_ADDR
// mc_bases := [ ] ;
57706: LD_ADDR_EXP 44
57710: PUSH
57711: EMPTY
57712: ST_TO_ADDR
// mc_sides := [ ] ;
57713: LD_ADDR_EXP 70
57717: PUSH
57718: EMPTY
57719: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
57720: LD_ADDR_EXP 45
57724: PUSH
57725: EMPTY
57726: ST_TO_ADDR
// mc_building_repairs := [ ] ;
57727: LD_ADDR_EXP 46
57731: PUSH
57732: EMPTY
57733: ST_TO_ADDR
// mc_need_heal := [ ] ;
57734: LD_ADDR_EXP 47
57738: PUSH
57739: EMPTY
57740: ST_TO_ADDR
// mc_healers := [ ] ;
57741: LD_ADDR_EXP 48
57745: PUSH
57746: EMPTY
57747: ST_TO_ADDR
// mc_build_list := [ ] ;
57748: LD_ADDR_EXP 49
57752: PUSH
57753: EMPTY
57754: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
57755: LD_ADDR_EXP 76
57759: PUSH
57760: EMPTY
57761: ST_TO_ADDR
// mc_builders := [ ] ;
57762: LD_ADDR_EXP 50
57766: PUSH
57767: EMPTY
57768: ST_TO_ADDR
// mc_construct_list := [ ] ;
57769: LD_ADDR_EXP 51
57773: PUSH
57774: EMPTY
57775: ST_TO_ADDR
// mc_turret_list := [ ] ;
57776: LD_ADDR_EXP 52
57780: PUSH
57781: EMPTY
57782: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
57783: LD_ADDR_EXP 53
57787: PUSH
57788: EMPTY
57789: ST_TO_ADDR
// mc_miners := [ ] ;
57790: LD_ADDR_EXP 58
57794: PUSH
57795: EMPTY
57796: ST_TO_ADDR
// mc_mines := [ ] ;
57797: LD_ADDR_EXP 57
57801: PUSH
57802: EMPTY
57803: ST_TO_ADDR
// mc_minefields := [ ] ;
57804: LD_ADDR_EXP 59
57808: PUSH
57809: EMPTY
57810: ST_TO_ADDR
// mc_crates := [ ] ;
57811: LD_ADDR_EXP 60
57815: PUSH
57816: EMPTY
57817: ST_TO_ADDR
// mc_crates_collector := [ ] ;
57818: LD_ADDR_EXP 61
57822: PUSH
57823: EMPTY
57824: ST_TO_ADDR
// mc_crates_area := [ ] ;
57825: LD_ADDR_EXP 62
57829: PUSH
57830: EMPTY
57831: ST_TO_ADDR
// mc_vehicles := [ ] ;
57832: LD_ADDR_EXP 63
57836: PUSH
57837: EMPTY
57838: ST_TO_ADDR
// mc_attack := [ ] ;
57839: LD_ADDR_EXP 64
57843: PUSH
57844: EMPTY
57845: ST_TO_ADDR
// mc_produce := [ ] ;
57846: LD_ADDR_EXP 65
57850: PUSH
57851: EMPTY
57852: ST_TO_ADDR
// mc_defender := [ ] ;
57853: LD_ADDR_EXP 66
57857: PUSH
57858: EMPTY
57859: ST_TO_ADDR
// mc_parking := [ ] ;
57860: LD_ADDR_EXP 68
57864: PUSH
57865: EMPTY
57866: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
57867: LD_ADDR_EXP 54
57871: PUSH
57872: EMPTY
57873: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
57874: LD_ADDR_EXP 56
57878: PUSH
57879: EMPTY
57880: ST_TO_ADDR
// mc_scan := [ ] ;
57881: LD_ADDR_EXP 67
57885: PUSH
57886: EMPTY
57887: ST_TO_ADDR
// mc_scan_area := [ ] ;
57888: LD_ADDR_EXP 69
57892: PUSH
57893: EMPTY
57894: ST_TO_ADDR
// mc_tech := [ ] ;
57895: LD_ADDR_EXP 71
57899: PUSH
57900: EMPTY
57901: ST_TO_ADDR
// end ;
57902: LD_VAR 0 1
57906: RET
// export function MC_Kill ( base ) ; begin
57907: LD_INT 0
57909: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
57910: LD_ADDR_EXP 44
57914: PUSH
57915: LD_EXP 44
57919: PPUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: EMPTY
57926: PPUSH
57927: CALL_OW 1
57931: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57932: LD_ADDR_EXP 45
57936: PUSH
57937: LD_EXP 45
57941: PPUSH
57942: LD_VAR 0 1
57946: PPUSH
57947: EMPTY
57948: PPUSH
57949: CALL_OW 1
57953: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57954: LD_ADDR_EXP 46
57958: PUSH
57959: LD_EXP 46
57963: PPUSH
57964: LD_VAR 0 1
57968: PPUSH
57969: EMPTY
57970: PPUSH
57971: CALL_OW 1
57975: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57976: LD_ADDR_EXP 47
57980: PUSH
57981: LD_EXP 47
57985: PPUSH
57986: LD_VAR 0 1
57990: PPUSH
57991: EMPTY
57992: PPUSH
57993: CALL_OW 1
57997: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57998: LD_ADDR_EXP 48
58002: PUSH
58003: LD_EXP 48
58007: PPUSH
58008: LD_VAR 0 1
58012: PPUSH
58013: EMPTY
58014: PPUSH
58015: CALL_OW 1
58019: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
58020: LD_ADDR_EXP 49
58024: PUSH
58025: LD_EXP 49
58029: PPUSH
58030: LD_VAR 0 1
58034: PPUSH
58035: EMPTY
58036: PPUSH
58037: CALL_OW 1
58041: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
58042: LD_ADDR_EXP 50
58046: PUSH
58047: LD_EXP 50
58051: PPUSH
58052: LD_VAR 0 1
58056: PPUSH
58057: EMPTY
58058: PPUSH
58059: CALL_OW 1
58063: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
58064: LD_ADDR_EXP 51
58068: PUSH
58069: LD_EXP 51
58073: PPUSH
58074: LD_VAR 0 1
58078: PPUSH
58079: EMPTY
58080: PPUSH
58081: CALL_OW 1
58085: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
58086: LD_ADDR_EXP 52
58090: PUSH
58091: LD_EXP 52
58095: PPUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: EMPTY
58102: PPUSH
58103: CALL_OW 1
58107: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
58108: LD_ADDR_EXP 53
58112: PUSH
58113: LD_EXP 53
58117: PPUSH
58118: LD_VAR 0 1
58122: PPUSH
58123: EMPTY
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
58130: LD_ADDR_EXP 54
58134: PUSH
58135: LD_EXP 54
58139: PPUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: EMPTY
58146: PPUSH
58147: CALL_OW 1
58151: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
58152: LD_ADDR_EXP 55
58156: PUSH
58157: LD_EXP 55
58161: PPUSH
58162: LD_VAR 0 1
58166: PPUSH
58167: LD_INT 0
58169: PPUSH
58170: CALL_OW 1
58174: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
58175: LD_ADDR_EXP 56
58179: PUSH
58180: LD_EXP 56
58184: PPUSH
58185: LD_VAR 0 1
58189: PPUSH
58190: EMPTY
58191: PPUSH
58192: CALL_OW 1
58196: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
58197: LD_ADDR_EXP 57
58201: PUSH
58202: LD_EXP 57
58206: PPUSH
58207: LD_VAR 0 1
58211: PPUSH
58212: EMPTY
58213: PPUSH
58214: CALL_OW 1
58218: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
58219: LD_ADDR_EXP 58
58223: PUSH
58224: LD_EXP 58
58228: PPUSH
58229: LD_VAR 0 1
58233: PPUSH
58234: EMPTY
58235: PPUSH
58236: CALL_OW 1
58240: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
58241: LD_ADDR_EXP 59
58245: PUSH
58246: LD_EXP 59
58250: PPUSH
58251: LD_VAR 0 1
58255: PPUSH
58256: EMPTY
58257: PPUSH
58258: CALL_OW 1
58262: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
58263: LD_ADDR_EXP 60
58267: PUSH
58268: LD_EXP 60
58272: PPUSH
58273: LD_VAR 0 1
58277: PPUSH
58278: EMPTY
58279: PPUSH
58280: CALL_OW 1
58284: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
58285: LD_ADDR_EXP 61
58289: PUSH
58290: LD_EXP 61
58294: PPUSH
58295: LD_VAR 0 1
58299: PPUSH
58300: EMPTY
58301: PPUSH
58302: CALL_OW 1
58306: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
58307: LD_ADDR_EXP 62
58311: PUSH
58312: LD_EXP 62
58316: PPUSH
58317: LD_VAR 0 1
58321: PPUSH
58322: EMPTY
58323: PPUSH
58324: CALL_OW 1
58328: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
58329: LD_ADDR_EXP 63
58333: PUSH
58334: LD_EXP 63
58338: PPUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: EMPTY
58345: PPUSH
58346: CALL_OW 1
58350: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
58351: LD_ADDR_EXP 64
58355: PUSH
58356: LD_EXP 64
58360: PPUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: EMPTY
58367: PPUSH
58368: CALL_OW 1
58372: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
58373: LD_ADDR_EXP 65
58377: PUSH
58378: LD_EXP 65
58382: PPUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: EMPTY
58389: PPUSH
58390: CALL_OW 1
58394: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
58395: LD_ADDR_EXP 66
58399: PUSH
58400: LD_EXP 66
58404: PPUSH
58405: LD_VAR 0 1
58409: PPUSH
58410: EMPTY
58411: PPUSH
58412: CALL_OW 1
58416: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
58417: LD_ADDR_EXP 67
58421: PUSH
58422: LD_EXP 67
58426: PPUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: EMPTY
58433: PPUSH
58434: CALL_OW 1
58438: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
58439: LD_ADDR_EXP 68
58443: PUSH
58444: LD_EXP 68
58448: PPUSH
58449: LD_VAR 0 1
58453: PPUSH
58454: EMPTY
58455: PPUSH
58456: CALL_OW 1
58460: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
58461: LD_ADDR_EXP 69
58465: PUSH
58466: LD_EXP 69
58470: PPUSH
58471: LD_VAR 0 1
58475: PPUSH
58476: EMPTY
58477: PPUSH
58478: CALL_OW 1
58482: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
58483: LD_ADDR_EXP 71
58487: PUSH
58488: LD_EXP 71
58492: PPUSH
58493: LD_VAR 0 1
58497: PPUSH
58498: EMPTY
58499: PPUSH
58500: CALL_OW 1
58504: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58505: LD_ADDR_EXP 73
58509: PUSH
58510: LD_EXP 73
58514: PPUSH
58515: LD_VAR 0 1
58519: PPUSH
58520: EMPTY
58521: PPUSH
58522: CALL_OW 1
58526: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58527: LD_ADDR_EXP 74
58531: PUSH
58532: LD_EXP 74
58536: PPUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: EMPTY
58543: PPUSH
58544: CALL_OW 1
58548: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
58549: LD_ADDR_EXP 75
58553: PUSH
58554: LD_EXP 75
58558: PPUSH
58559: LD_VAR 0 1
58563: PPUSH
58564: EMPTY
58565: PPUSH
58566: CALL_OW 1
58570: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
58571: LD_ADDR_EXP 76
58575: PUSH
58576: LD_EXP 76
58580: PPUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: EMPTY
58587: PPUSH
58588: CALL_OW 1
58592: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
58593: LD_ADDR_EXP 77
58597: PUSH
58598: LD_EXP 77
58602: PPUSH
58603: LD_VAR 0 1
58607: PPUSH
58608: EMPTY
58609: PPUSH
58610: CALL_OW 1
58614: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
58615: LD_ADDR_EXP 78
58619: PUSH
58620: LD_EXP 78
58624: PPUSH
58625: LD_VAR 0 1
58629: PPUSH
58630: EMPTY
58631: PPUSH
58632: CALL_OW 1
58636: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
58637: LD_ADDR_EXP 79
58641: PUSH
58642: LD_EXP 79
58646: PPUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: EMPTY
58653: PPUSH
58654: CALL_OW 1
58658: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
58659: LD_ADDR_EXP 80
58663: PUSH
58664: LD_EXP 80
58668: PPUSH
58669: LD_VAR 0 1
58673: PPUSH
58674: EMPTY
58675: PPUSH
58676: CALL_OW 1
58680: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
58681: LD_ADDR_EXP 81
58685: PUSH
58686: LD_EXP 81
58690: PPUSH
58691: LD_VAR 0 1
58695: PPUSH
58696: EMPTY
58697: PPUSH
58698: CALL_OW 1
58702: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
58703: LD_ADDR_EXP 82
58707: PUSH
58708: LD_EXP 82
58712: PPUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: EMPTY
58719: PPUSH
58720: CALL_OW 1
58724: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
58725: LD_ADDR_EXP 83
58729: PUSH
58730: LD_EXP 83
58734: PPUSH
58735: LD_VAR 0 1
58739: PPUSH
58740: EMPTY
58741: PPUSH
58742: CALL_OW 1
58746: ST_TO_ADDR
// end ;
58747: LD_VAR 0 2
58751: RET
// export function MC_Start ( ) ; var i ; begin
58752: LD_INT 0
58754: PPUSH
58755: PPUSH
// for i = 1 to mc_bases do
58756: LD_ADDR_VAR 0 2
58760: PUSH
58761: DOUBLE
58762: LD_INT 1
58764: DEC
58765: ST_TO_ADDR
58766: LD_EXP 44
58770: PUSH
58771: FOR_TO
58772: IFFALSE 59705
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
58774: LD_ADDR_EXP 45
58778: PUSH
58779: LD_EXP 45
58783: PPUSH
58784: LD_VAR 0 2
58788: PPUSH
58789: EMPTY
58790: PPUSH
58791: CALL_OW 1
58795: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58796: LD_ADDR_EXP 46
58800: PUSH
58801: LD_EXP 46
58805: PPUSH
58806: LD_VAR 0 2
58810: PPUSH
58811: EMPTY
58812: PPUSH
58813: CALL_OW 1
58817: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58818: LD_ADDR_EXP 47
58822: PUSH
58823: LD_EXP 47
58827: PPUSH
58828: LD_VAR 0 2
58832: PPUSH
58833: EMPTY
58834: PPUSH
58835: CALL_OW 1
58839: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58840: LD_ADDR_EXP 48
58844: PUSH
58845: LD_EXP 48
58849: PPUSH
58850: LD_VAR 0 2
58854: PPUSH
58855: EMPTY
58856: PUSH
58857: EMPTY
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PPUSH
58863: CALL_OW 1
58867: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58868: LD_ADDR_EXP 49
58872: PUSH
58873: LD_EXP 49
58877: PPUSH
58878: LD_VAR 0 2
58882: PPUSH
58883: EMPTY
58884: PPUSH
58885: CALL_OW 1
58889: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58890: LD_ADDR_EXP 76
58894: PUSH
58895: LD_EXP 76
58899: PPUSH
58900: LD_VAR 0 2
58904: PPUSH
58905: EMPTY
58906: PPUSH
58907: CALL_OW 1
58911: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58912: LD_ADDR_EXP 50
58916: PUSH
58917: LD_EXP 50
58921: PPUSH
58922: LD_VAR 0 2
58926: PPUSH
58927: EMPTY
58928: PPUSH
58929: CALL_OW 1
58933: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58934: LD_ADDR_EXP 51
58938: PUSH
58939: LD_EXP 51
58943: PPUSH
58944: LD_VAR 0 2
58948: PPUSH
58949: EMPTY
58950: PPUSH
58951: CALL_OW 1
58955: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
58956: LD_ADDR_EXP 52
58960: PUSH
58961: LD_EXP 52
58965: PPUSH
58966: LD_VAR 0 2
58970: PPUSH
58971: EMPTY
58972: PPUSH
58973: CALL_OW 1
58977: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58978: LD_ADDR_EXP 53
58982: PUSH
58983: LD_EXP 53
58987: PPUSH
58988: LD_VAR 0 2
58992: PPUSH
58993: LD_EXP 44
58997: PUSH
58998: LD_VAR 0 2
59002: ARRAY
59003: PPUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 30
59009: PUSH
59010: LD_INT 32
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 30
59019: PUSH
59020: LD_INT 31
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 58
59034: PUSH
59035: EMPTY
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PPUSH
59042: CALL_OW 72
59046: PPUSH
59047: CALL_OW 1
59051: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
59052: LD_ADDR_EXP 54
59056: PUSH
59057: LD_EXP 54
59061: PPUSH
59062: LD_VAR 0 2
59066: PPUSH
59067: EMPTY
59068: PPUSH
59069: CALL_OW 1
59073: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
59074: LD_ADDR_EXP 58
59078: PUSH
59079: LD_EXP 58
59083: PPUSH
59084: LD_VAR 0 2
59088: PPUSH
59089: EMPTY
59090: PPUSH
59091: CALL_OW 1
59095: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
59096: LD_ADDR_EXP 57
59100: PUSH
59101: LD_EXP 57
59105: PPUSH
59106: LD_VAR 0 2
59110: PPUSH
59111: EMPTY
59112: PPUSH
59113: CALL_OW 1
59117: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
59118: LD_ADDR_EXP 59
59122: PUSH
59123: LD_EXP 59
59127: PPUSH
59128: LD_VAR 0 2
59132: PPUSH
59133: EMPTY
59134: PPUSH
59135: CALL_OW 1
59139: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
59140: LD_ADDR_EXP 60
59144: PUSH
59145: LD_EXP 60
59149: PPUSH
59150: LD_VAR 0 2
59154: PPUSH
59155: EMPTY
59156: PPUSH
59157: CALL_OW 1
59161: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59162: LD_ADDR_EXP 61
59166: PUSH
59167: LD_EXP 61
59171: PPUSH
59172: LD_VAR 0 2
59176: PPUSH
59177: EMPTY
59178: PPUSH
59179: CALL_OW 1
59183: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
59184: LD_ADDR_EXP 62
59188: PUSH
59189: LD_EXP 62
59193: PPUSH
59194: LD_VAR 0 2
59198: PPUSH
59199: EMPTY
59200: PPUSH
59201: CALL_OW 1
59205: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
59206: LD_ADDR_EXP 63
59210: PUSH
59211: LD_EXP 63
59215: PPUSH
59216: LD_VAR 0 2
59220: PPUSH
59221: EMPTY
59222: PPUSH
59223: CALL_OW 1
59227: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
59228: LD_ADDR_EXP 64
59232: PUSH
59233: LD_EXP 64
59237: PPUSH
59238: LD_VAR 0 2
59242: PPUSH
59243: EMPTY
59244: PPUSH
59245: CALL_OW 1
59249: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
59250: LD_ADDR_EXP 65
59254: PUSH
59255: LD_EXP 65
59259: PPUSH
59260: LD_VAR 0 2
59264: PPUSH
59265: EMPTY
59266: PPUSH
59267: CALL_OW 1
59271: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
59272: LD_ADDR_EXP 66
59276: PUSH
59277: LD_EXP 66
59281: PPUSH
59282: LD_VAR 0 2
59286: PPUSH
59287: EMPTY
59288: PPUSH
59289: CALL_OW 1
59293: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
59294: LD_ADDR_EXP 55
59298: PUSH
59299: LD_EXP 55
59303: PPUSH
59304: LD_VAR 0 2
59308: PPUSH
59309: LD_INT 0
59311: PPUSH
59312: CALL_OW 1
59316: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
59317: LD_ADDR_EXP 68
59321: PUSH
59322: LD_EXP 68
59326: PPUSH
59327: LD_VAR 0 2
59331: PPUSH
59332: LD_INT 0
59334: PPUSH
59335: CALL_OW 1
59339: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59340: LD_ADDR_EXP 56
59344: PUSH
59345: LD_EXP 56
59349: PPUSH
59350: LD_VAR 0 2
59354: PPUSH
59355: EMPTY
59356: PPUSH
59357: CALL_OW 1
59361: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
59362: LD_ADDR_EXP 67
59366: PUSH
59367: LD_EXP 67
59371: PPUSH
59372: LD_VAR 0 2
59376: PPUSH
59377: LD_INT 0
59379: PPUSH
59380: CALL_OW 1
59384: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
59385: LD_ADDR_EXP 69
59389: PUSH
59390: LD_EXP 69
59394: PPUSH
59395: LD_VAR 0 2
59399: PPUSH
59400: EMPTY
59401: PPUSH
59402: CALL_OW 1
59406: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
59407: LD_ADDR_EXP 72
59411: PUSH
59412: LD_EXP 72
59416: PPUSH
59417: LD_VAR 0 2
59421: PPUSH
59422: LD_INT 0
59424: PPUSH
59425: CALL_OW 1
59429: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
59430: LD_ADDR_EXP 73
59434: PUSH
59435: LD_EXP 73
59439: PPUSH
59440: LD_VAR 0 2
59444: PPUSH
59445: EMPTY
59446: PPUSH
59447: CALL_OW 1
59451: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
59452: LD_ADDR_EXP 74
59456: PUSH
59457: LD_EXP 74
59461: PPUSH
59462: LD_VAR 0 2
59466: PPUSH
59467: EMPTY
59468: PPUSH
59469: CALL_OW 1
59473: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59474: LD_ADDR_EXP 75
59478: PUSH
59479: LD_EXP 75
59483: PPUSH
59484: LD_VAR 0 2
59488: PPUSH
59489: EMPTY
59490: PPUSH
59491: CALL_OW 1
59495: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
59496: LD_ADDR_EXP 77
59500: PUSH
59501: LD_EXP 77
59505: PPUSH
59506: LD_VAR 0 2
59510: PPUSH
59511: LD_EXP 44
59515: PUSH
59516: LD_VAR 0 2
59520: ARRAY
59521: PPUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 30
59527: PUSH
59528: LD_INT 6
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 30
59537: PUSH
59538: LD_INT 7
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 30
59547: PUSH
59548: LD_INT 8
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: PPUSH
59561: CALL_OW 72
59565: PPUSH
59566: CALL_OW 1
59570: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
59571: LD_ADDR_EXP 78
59575: PUSH
59576: LD_EXP 78
59580: PPUSH
59581: LD_VAR 0 2
59585: PPUSH
59586: EMPTY
59587: PPUSH
59588: CALL_OW 1
59592: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
59593: LD_ADDR_EXP 79
59597: PUSH
59598: LD_EXP 79
59602: PPUSH
59603: LD_VAR 0 2
59607: PPUSH
59608: EMPTY
59609: PPUSH
59610: CALL_OW 1
59614: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
59615: LD_ADDR_EXP 80
59619: PUSH
59620: LD_EXP 80
59624: PPUSH
59625: LD_VAR 0 2
59629: PPUSH
59630: EMPTY
59631: PPUSH
59632: CALL_OW 1
59636: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59637: LD_ADDR_EXP 81
59641: PUSH
59642: LD_EXP 81
59646: PPUSH
59647: LD_VAR 0 2
59651: PPUSH
59652: EMPTY
59653: PPUSH
59654: CALL_OW 1
59658: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
59659: LD_ADDR_EXP 82
59663: PUSH
59664: LD_EXP 82
59668: PPUSH
59669: LD_VAR 0 2
59673: PPUSH
59674: EMPTY
59675: PPUSH
59676: CALL_OW 1
59680: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
59681: LD_ADDR_EXP 83
59685: PUSH
59686: LD_EXP 83
59690: PPUSH
59691: LD_VAR 0 2
59695: PPUSH
59696: EMPTY
59697: PPUSH
59698: CALL_OW 1
59702: ST_TO_ADDR
// end ;
59703: GO 58771
59705: POP
59706: POP
// MC_InitSides ( ) ;
59707: CALL 59993 0 0
// MC_InitResearch ( ) ;
59711: CALL 59732 0 0
// CustomInitMacro ( ) ;
59715: CALL 10271 0 0
// skirmish := true ;
59719: LD_ADDR_EXP 43
59723: PUSH
59724: LD_INT 1
59726: ST_TO_ADDR
// end ;
59727: LD_VAR 0 1
59731: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59732: LD_INT 0
59734: PPUSH
59735: PPUSH
59736: PPUSH
59737: PPUSH
59738: PPUSH
59739: PPUSH
// if not mc_bases then
59740: LD_EXP 44
59744: NOT
59745: IFFALSE 59749
// exit ;
59747: GO 59988
// for i = 1 to 8 do
59749: LD_ADDR_VAR 0 2
59753: PUSH
59754: DOUBLE
59755: LD_INT 1
59757: DEC
59758: ST_TO_ADDR
59759: LD_INT 8
59761: PUSH
59762: FOR_TO
59763: IFFALSE 59789
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59765: LD_ADDR_EXP 71
59769: PUSH
59770: LD_EXP 71
59774: PPUSH
59775: LD_VAR 0 2
59779: PPUSH
59780: EMPTY
59781: PPUSH
59782: CALL_OW 1
59786: ST_TO_ADDR
59787: GO 59762
59789: POP
59790: POP
// tmp := [ ] ;
59791: LD_ADDR_VAR 0 5
59795: PUSH
59796: EMPTY
59797: ST_TO_ADDR
// for i = 1 to mc_sides do
59798: LD_ADDR_VAR 0 2
59802: PUSH
59803: DOUBLE
59804: LD_INT 1
59806: DEC
59807: ST_TO_ADDR
59808: LD_EXP 70
59812: PUSH
59813: FOR_TO
59814: IFFALSE 59872
// if not mc_sides [ i ] in tmp then
59816: LD_EXP 70
59820: PUSH
59821: LD_VAR 0 2
59825: ARRAY
59826: PUSH
59827: LD_VAR 0 5
59831: IN
59832: NOT
59833: IFFALSE 59870
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59835: LD_ADDR_VAR 0 5
59839: PUSH
59840: LD_VAR 0 5
59844: PPUSH
59845: LD_VAR 0 5
59849: PUSH
59850: LD_INT 1
59852: PLUS
59853: PPUSH
59854: LD_EXP 70
59858: PUSH
59859: LD_VAR 0 2
59863: ARRAY
59864: PPUSH
59865: CALL_OW 2
59869: ST_TO_ADDR
59870: GO 59813
59872: POP
59873: POP
// if not tmp then
59874: LD_VAR 0 5
59878: NOT
59879: IFFALSE 59883
// exit ;
59881: GO 59988
// for j in tmp do
59883: LD_ADDR_VAR 0 3
59887: PUSH
59888: LD_VAR 0 5
59892: PUSH
59893: FOR_IN
59894: IFFALSE 59986
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59896: LD_ADDR_VAR 0 6
59900: PUSH
59901: LD_INT 22
59903: PUSH
59904: LD_VAR 0 3
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PPUSH
59913: CALL_OW 69
59917: ST_TO_ADDR
// if not un then
59918: LD_VAR 0 6
59922: NOT
59923: IFFALSE 59927
// continue ;
59925: GO 59893
// nation := GetNation ( un [ 1 ] ) ;
59927: LD_ADDR_VAR 0 4
59931: PUSH
59932: LD_VAR 0 6
59936: PUSH
59937: LD_INT 1
59939: ARRAY
59940: PPUSH
59941: CALL_OW 248
59945: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59946: LD_ADDR_EXP 71
59950: PUSH
59951: LD_EXP 71
59955: PPUSH
59956: LD_VAR 0 3
59960: PPUSH
59961: LD_VAR 0 3
59965: PPUSH
59966: LD_VAR 0 4
59970: PPUSH
59971: LD_INT 1
59973: PPUSH
59974: CALL 15737 0 3
59978: PPUSH
59979: CALL_OW 1
59983: ST_TO_ADDR
// end ;
59984: GO 59893
59986: POP
59987: POP
// end ;
59988: LD_VAR 0 1
59992: RET
// export function MC_InitSides ( ) ; var i ; begin
59993: LD_INT 0
59995: PPUSH
59996: PPUSH
// if not mc_bases then
59997: LD_EXP 44
60001: NOT
60002: IFFALSE 60006
// exit ;
60004: GO 60080
// for i = 1 to mc_bases do
60006: LD_ADDR_VAR 0 2
60010: PUSH
60011: DOUBLE
60012: LD_INT 1
60014: DEC
60015: ST_TO_ADDR
60016: LD_EXP 44
60020: PUSH
60021: FOR_TO
60022: IFFALSE 60078
// if mc_bases [ i ] then
60024: LD_EXP 44
60028: PUSH
60029: LD_VAR 0 2
60033: ARRAY
60034: IFFALSE 60076
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
60036: LD_ADDR_EXP 70
60040: PUSH
60041: LD_EXP 70
60045: PPUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: LD_EXP 44
60055: PUSH
60056: LD_VAR 0 2
60060: ARRAY
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: PPUSH
60066: CALL_OW 255
60070: PPUSH
60071: CALL_OW 1
60075: ST_TO_ADDR
60076: GO 60021
60078: POP
60079: POP
// end ;
60080: LD_VAR 0 1
60084: RET
// every 0 0$01 trigger skirmish do
60085: LD_EXP 43
60089: IFFALSE 60222
60091: GO 60093
60093: DISABLE
// begin enable ;
60094: ENABLE
// MC_CheckBuildings ( ) ;
60095: CALL 60707 0 0
// MC_CheckPeopleLife ( ) ;
60099: CALL 60832 0 0
// RaiseSailEvent ( 103 ) ;
60103: LD_INT 103
60105: PPUSH
60106: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
60110: LD_INT 104
60112: PPUSH
60113: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
60117: LD_INT 105
60119: PPUSH
60120: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
60124: LD_INT 106
60126: PPUSH
60127: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
60131: LD_INT 107
60133: PPUSH
60134: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
60138: LD_INT 108
60140: PPUSH
60141: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
60145: LD_INT 109
60147: PPUSH
60148: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
60152: LD_INT 110
60154: PPUSH
60155: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
60159: LD_INT 111
60161: PPUSH
60162: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
60166: LD_INT 112
60168: PPUSH
60169: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
60173: LD_INT 120
60175: PPUSH
60176: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
60180: LD_INT 121
60182: PPUSH
60183: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
60187: LD_INT 122
60189: PPUSH
60190: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
60194: LD_INT 123
60196: PPUSH
60197: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
60201: LD_INT 125
60203: PPUSH
60204: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
60208: LD_INT 126
60210: PPUSH
60211: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
60215: LD_INT 200
60217: PPUSH
60218: CALL_OW 427
// end ;
60222: END
// every 10 trigger skirmish do var i ;
60223: LD_EXP 43
60227: IFFALSE 60326
60229: GO 60231
60231: DISABLE
60232: LD_INT 0
60234: PPUSH
// begin enable ;
60235: ENABLE
// if not mc_bases then
60236: LD_EXP 44
60240: NOT
60241: IFFALSE 60245
// exit ;
60243: GO 60326
// for i = 1 to mc_bases do
60245: LD_ADDR_VAR 0 1
60249: PUSH
60250: DOUBLE
60251: LD_INT 1
60253: DEC
60254: ST_TO_ADDR
60255: LD_EXP 44
60259: PUSH
60260: FOR_TO
60261: IFFALSE 60324
// if mc_mines [ i ] and mc_miners [ i ] then
60263: LD_EXP 57
60267: PUSH
60268: LD_VAR 0 1
60272: ARRAY
60273: PUSH
60274: LD_EXP 58
60278: PUSH
60279: LD_VAR 0 1
60283: ARRAY
60284: AND
60285: IFFALSE 60322
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
60287: LD_EXP 58
60291: PUSH
60292: LD_VAR 0 1
60296: ARRAY
60297: PUSH
60298: LD_INT 1
60300: ARRAY
60301: PPUSH
60302: CALL_OW 255
60306: PPUSH
60307: LD_EXP 57
60311: PUSH
60312: LD_VAR 0 1
60316: ARRAY
60317: PPUSH
60318: CALL 19486 0 2
60322: GO 60260
60324: POP
60325: POP
// end ;
60326: PPOPN 1
60328: END
// on SailEvent ( event ) do begin if event = 101 then
60329: LD_VAR 0 1
60333: PUSH
60334: LD_INT 101
60336: EQUAL
60337: IFFALSE 60343
// MC_RepairBuildings ( ) ;
60339: CALL 61390 0 0
// if event = 102 then
60343: LD_VAR 0 1
60347: PUSH
60348: LD_INT 102
60350: EQUAL
60351: IFFALSE 60357
// MC_Heal ( ) ;
60353: CALL 61796 0 0
// if event = 103 then
60357: LD_VAR 0 1
60361: PUSH
60362: LD_INT 103
60364: EQUAL
60365: IFFALSE 60371
// MC_Build ( ) ;
60367: CALL 62218 0 0
// if event = 104 then
60371: LD_VAR 0 1
60375: PUSH
60376: LD_INT 104
60378: EQUAL
60379: IFFALSE 60385
// MC_TurretWeapon ( ) ;
60381: CALL 63657 0 0
// if event = 105 then
60385: LD_VAR 0 1
60389: PUSH
60390: LD_INT 105
60392: EQUAL
60393: IFFALSE 60399
// MC_BuildUpgrade ( ) ;
60395: CALL 63208 0 0
// if event = 106 then
60399: LD_VAR 0 1
60403: PUSH
60404: LD_INT 106
60406: EQUAL
60407: IFFALSE 60413
// MC_PlantMines ( ) ;
60409: CALL 64009 0 0
// if event = 107 then
60413: LD_VAR 0 1
60417: PUSH
60418: LD_INT 107
60420: EQUAL
60421: IFFALSE 60427
// MC_CollectCrates ( ) ;
60423: CALL 65016 0 0
// if event = 108 then
60427: LD_VAR 0 1
60431: PUSH
60432: LD_INT 108
60434: EQUAL
60435: IFFALSE 60441
// MC_LinkRemoteControl ( ) ;
60437: CALL 66520 0 0
// if event = 109 then
60441: LD_VAR 0 1
60445: PUSH
60446: LD_INT 109
60448: EQUAL
60449: IFFALSE 60455
// MC_ProduceVehicle ( ) ;
60451: CALL 66701 0 0
// if event = 110 then
60455: LD_VAR 0 1
60459: PUSH
60460: LD_INT 110
60462: EQUAL
60463: IFFALSE 60469
// MC_SendAttack ( ) ;
60465: CALL 67182 0 0
// if event = 111 then
60469: LD_VAR 0 1
60473: PUSH
60474: LD_INT 111
60476: EQUAL
60477: IFFALSE 60483
// MC_Defend ( ) ;
60479: CALL 67290 0 0
// if event = 112 then
60483: LD_VAR 0 1
60487: PUSH
60488: LD_INT 112
60490: EQUAL
60491: IFFALSE 60497
// MC_Research ( ) ;
60493: CALL 67688 0 0
// if event = 120 then
60497: LD_VAR 0 1
60501: PUSH
60502: LD_INT 120
60504: EQUAL
60505: IFFALSE 60511
// MC_RepairVehicle ( ) ;
60507: CALL 68657 0 0
// if event = 121 then
60511: LD_VAR 0 1
60515: PUSH
60516: LD_INT 121
60518: EQUAL
60519: IFFALSE 60525
// MC_TameApe ( ) ;
60521: CALL 69346 0 0
// if event = 122 then
60525: LD_VAR 0 1
60529: PUSH
60530: LD_INT 122
60532: EQUAL
60533: IFFALSE 60539
// MC_ChangeApeClass ( ) ;
60535: CALL 70109 0 0
// if event = 123 then
60539: LD_VAR 0 1
60543: PUSH
60544: LD_INT 123
60546: EQUAL
60547: IFFALSE 60553
// MC_Bazooka ( ) ;
60549: CALL 70743 0 0
// if event = 124 then
60553: LD_VAR 0 1
60557: PUSH
60558: LD_INT 124
60560: EQUAL
60561: IFFALSE 60567
// MC_TeleportExit ( ) ;
60563: CALL 70941 0 0
// if event = 125 then
60567: LD_VAR 0 1
60571: PUSH
60572: LD_INT 125
60574: EQUAL
60575: IFFALSE 60581
// MC_Deposits ( ) ;
60577: CALL 70983 0 0
// if event = 126 then
60581: LD_VAR 0 1
60585: PUSH
60586: LD_INT 126
60588: EQUAL
60589: IFFALSE 60595
// MC_RemoteDriver ( ) ;
60591: CALL 71562 0 0
// if event = 200 then
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 200
60602: EQUAL
60603: IFFALSE 60609
// MC_Idle ( ) ;
60605: CALL 73067 0 0
// end ;
60609: PPOPN 1
60611: END
// export function MC_Reset ( base , tag ) ; var i ; begin
60612: LD_INT 0
60614: PPUSH
60615: PPUSH
// if not mc_bases [ base ] or not tag then
60616: LD_EXP 44
60620: PUSH
60621: LD_VAR 0 1
60625: ARRAY
60626: NOT
60627: PUSH
60628: LD_VAR 0 2
60632: NOT
60633: OR
60634: IFFALSE 60638
// exit ;
60636: GO 60702
// for i in mc_bases [ base ] union mc_ape [ base ] do
60638: LD_ADDR_VAR 0 4
60642: PUSH
60643: LD_EXP 44
60647: PUSH
60648: LD_VAR 0 1
60652: ARRAY
60653: PUSH
60654: LD_EXP 73
60658: PUSH
60659: LD_VAR 0 1
60663: ARRAY
60664: UNION
60665: PUSH
60666: FOR_IN
60667: IFFALSE 60700
// if GetTag ( i ) = tag then
60669: LD_VAR 0 4
60673: PPUSH
60674: CALL_OW 110
60678: PUSH
60679: LD_VAR 0 2
60683: EQUAL
60684: IFFALSE 60698
// SetTag ( i , 0 ) ;
60686: LD_VAR 0 4
60690: PPUSH
60691: LD_INT 0
60693: PPUSH
60694: CALL_OW 109
60698: GO 60666
60700: POP
60701: POP
// end ;
60702: LD_VAR 0 3
60706: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
60707: LD_INT 0
60709: PPUSH
60710: PPUSH
60711: PPUSH
// if not mc_bases then
60712: LD_EXP 44
60716: NOT
60717: IFFALSE 60721
// exit ;
60719: GO 60827
// for i = 1 to mc_bases do
60721: LD_ADDR_VAR 0 2
60725: PUSH
60726: DOUBLE
60727: LD_INT 1
60729: DEC
60730: ST_TO_ADDR
60731: LD_EXP 44
60735: PUSH
60736: FOR_TO
60737: IFFALSE 60818
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
60739: LD_ADDR_VAR 0 3
60743: PUSH
60744: LD_EXP 44
60748: PUSH
60749: LD_VAR 0 2
60753: ARRAY
60754: PPUSH
60755: LD_INT 21
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: LD_INT 24
60770: PUSH
60771: LD_INT 1000
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PPUSH
60786: CALL_OW 72
60790: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
60791: LD_ADDR_EXP 45
60795: PUSH
60796: LD_EXP 45
60800: PPUSH
60801: LD_VAR 0 2
60805: PPUSH
60806: LD_VAR 0 3
60810: PPUSH
60811: CALL_OW 1
60815: ST_TO_ADDR
// end ;
60816: GO 60736
60818: POP
60819: POP
// RaiseSailEvent ( 101 ) ;
60820: LD_INT 101
60822: PPUSH
60823: CALL_OW 427
// end ;
60827: LD_VAR 0 1
60831: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
60836: PPUSH
60837: PPUSH
60838: PPUSH
60839: PPUSH
60840: PPUSH
// if not mc_bases then
60841: LD_EXP 44
60845: NOT
60846: IFFALSE 60850
// exit ;
60848: GO 61385
// for i = 1 to mc_bases do
60850: LD_ADDR_VAR 0 2
60854: PUSH
60855: DOUBLE
60856: LD_INT 1
60858: DEC
60859: ST_TO_ADDR
60860: LD_EXP 44
60864: PUSH
60865: FOR_TO
60866: IFFALSE 61376
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
60868: LD_ADDR_VAR 0 5
60872: PUSH
60873: LD_EXP 44
60877: PUSH
60878: LD_VAR 0 2
60882: ARRAY
60883: PUSH
60884: LD_EXP 73
60888: PUSH
60889: LD_VAR 0 2
60893: ARRAY
60894: UNION
60895: PPUSH
60896: LD_INT 21
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: LD_INT 54
60914: PUSH
60915: EMPTY
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 24
60927: PUSH
60928: LD_INT 700
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PPUSH
60948: CALL_OW 72
60952: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
60953: LD_ADDR_VAR 0 6
60957: PUSH
60958: LD_EXP 44
60962: PUSH
60963: LD_VAR 0 2
60967: ARRAY
60968: PPUSH
60969: LD_INT 21
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: LD_INT 3
60984: PUSH
60985: LD_INT 54
60987: PUSH
60988: EMPTY
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: LD_INT 24
61000: PUSH
61001: LD_INT 250
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PPUSH
61021: CALL_OW 72
61025: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61026: LD_ADDR_VAR 0 7
61030: PUSH
61031: LD_VAR 0 5
61035: PUSH
61036: LD_VAR 0 6
61040: DIFF
61041: ST_TO_ADDR
// if not need_heal_1 then
61042: LD_VAR 0 6
61046: NOT
61047: IFFALSE 61080
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
61049: LD_ADDR_EXP 47
61053: PUSH
61054: LD_EXP 47
61058: PPUSH
61059: LD_VAR 0 2
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PPUSH
61071: EMPTY
61072: PPUSH
61073: CALL 22864 0 3
61077: ST_TO_ADDR
61078: GO 61112
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
61080: LD_ADDR_EXP 47
61084: PUSH
61085: LD_EXP 47
61089: PPUSH
61090: LD_VAR 0 2
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PPUSH
61102: LD_VAR 0 6
61106: PPUSH
61107: CALL 22864 0 3
61111: ST_TO_ADDR
// if not need_heal_2 then
61112: LD_VAR 0 7
61116: NOT
61117: IFFALSE 61150
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
61119: LD_ADDR_EXP 47
61123: PUSH
61124: LD_EXP 47
61128: PPUSH
61129: LD_VAR 0 2
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PPUSH
61141: EMPTY
61142: PPUSH
61143: CALL 22864 0 3
61147: ST_TO_ADDR
61148: GO 61182
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
61150: LD_ADDR_EXP 47
61154: PUSH
61155: LD_EXP 47
61159: PPUSH
61160: LD_VAR 0 2
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PPUSH
61172: LD_VAR 0 7
61176: PPUSH
61177: CALL 22864 0 3
61181: ST_TO_ADDR
// if need_heal_2 then
61182: LD_VAR 0 7
61186: IFFALSE 61358
// for j in need_heal_2 do
61188: LD_ADDR_VAR 0 3
61192: PUSH
61193: LD_VAR 0 7
61197: PUSH
61198: FOR_IN
61199: IFFALSE 61356
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
61201: LD_ADDR_VAR 0 5
61205: PUSH
61206: LD_EXP 44
61210: PUSH
61211: LD_VAR 0 2
61215: ARRAY
61216: PPUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 30
61222: PUSH
61223: LD_INT 6
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 30
61232: PUSH
61233: LD_INT 7
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 30
61242: PUSH
61243: LD_INT 8
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 30
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 30
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 25
61272: PUSH
61273: LD_INT 4
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: PPUSH
61289: CALL_OW 72
61293: ST_TO_ADDR
// if tmp then
61294: LD_VAR 0 5
61298: IFFALSE 61354
// begin k := NearestUnitToUnit ( tmp , j ) ;
61300: LD_ADDR_VAR 0 4
61304: PUSH
61305: LD_VAR 0 5
61309: PPUSH
61310: LD_VAR 0 3
61314: PPUSH
61315: CALL_OW 74
61319: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
61320: LD_VAR 0 3
61324: PPUSH
61325: LD_VAR 0 4
61329: PPUSH
61330: CALL_OW 296
61334: PUSH
61335: LD_INT 7
61337: GREATER
61338: IFFALSE 61354
// ComMoveUnit ( j , k ) ;
61340: LD_VAR 0 3
61344: PPUSH
61345: LD_VAR 0 4
61349: PPUSH
61350: CALL_OW 112
// end ; end ;
61354: GO 61198
61356: POP
61357: POP
// if not need_heal_1 and not need_heal_2 then
61358: LD_VAR 0 6
61362: NOT
61363: PUSH
61364: LD_VAR 0 7
61368: NOT
61369: AND
61370: IFFALSE 61374
// continue ;
61372: GO 60865
// end ;
61374: GO 60865
61376: POP
61377: POP
// RaiseSailEvent ( 102 ) ;
61378: LD_INT 102
61380: PPUSH
61381: CALL_OW 427
// end ;
61385: LD_VAR 0 1
61389: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
61395: PPUSH
61396: PPUSH
// if not mc_bases then
61397: LD_EXP 44
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61791
// for i = 1 to mc_bases do
61406: LD_ADDR_VAR 0 2
61410: PUSH
61411: DOUBLE
61412: LD_INT 1
61414: DEC
61415: ST_TO_ADDR
61416: LD_EXP 44
61420: PUSH
61421: FOR_TO
61422: IFFALSE 61789
// begin if not mc_building_need_repair [ i ] then
61424: LD_EXP 45
61428: PUSH
61429: LD_VAR 0 2
61433: ARRAY
61434: NOT
61435: IFFALSE 61473
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61437: LD_ADDR_EXP 46
61441: PUSH
61442: LD_EXP 46
61446: PPUSH
61447: LD_VAR 0 2
61451: PPUSH
61452: EMPTY
61453: PPUSH
61454: CALL_OW 1
61458: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
61459: LD_VAR 0 2
61463: PPUSH
61464: LD_INT 101
61466: PPUSH
61467: CALL 60612 0 2
// continue ;
61471: GO 61421
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
61473: LD_ADDR_EXP 50
61477: PUSH
61478: LD_EXP 50
61482: PPUSH
61483: LD_VAR 0 2
61487: PPUSH
61488: EMPTY
61489: PPUSH
61490: CALL_OW 1
61494: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
61495: LD_VAR 0 2
61499: PPUSH
61500: LD_INT 103
61502: PPUSH
61503: CALL 60612 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
61507: LD_ADDR_VAR 0 5
61511: PUSH
61512: LD_EXP 44
61516: PUSH
61517: LD_VAR 0 2
61521: ARRAY
61522: PUSH
61523: LD_EXP 73
61527: PUSH
61528: LD_VAR 0 2
61532: ARRAY
61533: UNION
61534: PPUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 25
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 25
61550: PUSH
61551: LD_INT 16
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: PUSH
61563: EMPTY
61564: LIST
61565: PPUSH
61566: CALL_OW 72
61570: ST_TO_ADDR
// if not tmp then
61571: LD_VAR 0 5
61575: NOT
61576: IFFALSE 61580
// continue ;
61578: GO 61421
// for j in tmp do
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_VAR 0 5
61589: PUSH
61590: FOR_IN
61591: IFFALSE 61785
// begin if mc_need_heal [ i ] then
61593: LD_EXP 47
61597: PUSH
61598: LD_VAR 0 2
61602: ARRAY
61603: IFFALSE 61651
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
61605: LD_VAR 0 3
61609: PUSH
61610: LD_EXP 47
61614: PUSH
61615: LD_VAR 0 2
61619: ARRAY
61620: PUSH
61621: LD_INT 1
61623: ARRAY
61624: IN
61625: PUSH
61626: LD_VAR 0 3
61630: PUSH
61631: LD_EXP 47
61635: PUSH
61636: LD_VAR 0 2
61640: ARRAY
61641: PUSH
61642: LD_INT 2
61644: ARRAY
61645: IN
61646: OR
61647: IFFALSE 61651
// continue ;
61649: GO 61590
// if IsInUnit ( j ) then
61651: LD_VAR 0 3
61655: PPUSH
61656: CALL_OW 310
61660: IFFALSE 61671
// ComExitBuilding ( j ) ;
61662: LD_VAR 0 3
61666: PPUSH
61667: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
61671: LD_VAR 0 3
61675: PUSH
61676: LD_EXP 46
61680: PUSH
61681: LD_VAR 0 2
61685: ARRAY
61686: IN
61687: NOT
61688: IFFALSE 61746
// begin SetTag ( j , 101 ) ;
61690: LD_VAR 0 3
61694: PPUSH
61695: LD_INT 101
61697: PPUSH
61698: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
61702: LD_ADDR_EXP 46
61706: PUSH
61707: LD_EXP 46
61711: PPUSH
61712: LD_VAR 0 2
61716: PUSH
61717: LD_EXP 46
61721: PUSH
61722: LD_VAR 0 2
61726: ARRAY
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PPUSH
61736: LD_VAR 0 3
61740: PPUSH
61741: CALL 22864 0 3
61745: ST_TO_ADDR
// end ; Wait ( 3 ) ;
61746: LD_INT 3
61748: PPUSH
61749: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
61753: LD_VAR 0 3
61757: PPUSH
61758: LD_EXP 45
61762: PUSH
61763: LD_VAR 0 2
61767: ARRAY
61768: PPUSH
61769: LD_VAR 0 3
61773: PPUSH
61774: CALL_OW 74
61778: PPUSH
61779: CALL_OW 130
// end ;
61783: GO 61590
61785: POP
61786: POP
// end ;
61787: GO 61421
61789: POP
61790: POP
// end ;
61791: LD_VAR 0 1
61795: RET
// export function MC_Heal ; var i , j , tmp ; begin
61796: LD_INT 0
61798: PPUSH
61799: PPUSH
61800: PPUSH
61801: PPUSH
// if not mc_bases then
61802: LD_EXP 44
61806: NOT
61807: IFFALSE 61811
// exit ;
61809: GO 62213
// for i = 1 to mc_bases do
61811: LD_ADDR_VAR 0 2
61815: PUSH
61816: DOUBLE
61817: LD_INT 1
61819: DEC
61820: ST_TO_ADDR
61821: LD_EXP 44
61825: PUSH
61826: FOR_TO
61827: IFFALSE 62211
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
61829: LD_EXP 47
61833: PUSH
61834: LD_VAR 0 2
61838: ARRAY
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: NOT
61844: PUSH
61845: LD_EXP 47
61849: PUSH
61850: LD_VAR 0 2
61854: ARRAY
61855: PUSH
61856: LD_INT 2
61858: ARRAY
61859: NOT
61860: AND
61861: IFFALSE 61899
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
61863: LD_ADDR_EXP 48
61867: PUSH
61868: LD_EXP 48
61872: PPUSH
61873: LD_VAR 0 2
61877: PPUSH
61878: EMPTY
61879: PPUSH
61880: CALL_OW 1
61884: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
61885: LD_VAR 0 2
61889: PPUSH
61890: LD_INT 102
61892: PPUSH
61893: CALL 60612 0 2
// continue ;
61897: GO 61826
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
61899: LD_ADDR_VAR 0 4
61903: PUSH
61904: LD_EXP 44
61908: PUSH
61909: LD_VAR 0 2
61913: ARRAY
61914: PPUSH
61915: LD_INT 25
61917: PUSH
61918: LD_INT 4
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PPUSH
61925: CALL_OW 72
61929: ST_TO_ADDR
// if not tmp then
61930: LD_VAR 0 4
61934: NOT
61935: IFFALSE 61939
// continue ;
61937: GO 61826
// if mc_taming [ i ] then
61939: LD_EXP 75
61943: PUSH
61944: LD_VAR 0 2
61948: ARRAY
61949: IFFALSE 61973
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
61951: LD_ADDR_EXP 75
61955: PUSH
61956: LD_EXP 75
61960: PPUSH
61961: LD_VAR 0 2
61965: PPUSH
61966: EMPTY
61967: PPUSH
61968: CALL_OW 1
61972: ST_TO_ADDR
// for j in tmp do
61973: LD_ADDR_VAR 0 3
61977: PUSH
61978: LD_VAR 0 4
61982: PUSH
61983: FOR_IN
61984: IFFALSE 62207
// begin if IsInUnit ( j ) then
61986: LD_VAR 0 3
61990: PPUSH
61991: CALL_OW 310
61995: IFFALSE 62006
// ComExitBuilding ( j ) ;
61997: LD_VAR 0 3
62001: PPUSH
62002: CALL_OW 122
// if not j in mc_healers [ i ] then
62006: LD_VAR 0 3
62010: PUSH
62011: LD_EXP 48
62015: PUSH
62016: LD_VAR 0 2
62020: ARRAY
62021: IN
62022: NOT
62023: IFFALSE 62069
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62025: LD_ADDR_EXP 48
62029: PUSH
62030: LD_EXP 48
62034: PPUSH
62035: LD_VAR 0 2
62039: PUSH
62040: LD_EXP 48
62044: PUSH
62045: LD_VAR 0 2
62049: ARRAY
62050: PUSH
62051: LD_INT 1
62053: PLUS
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PPUSH
62059: LD_VAR 0 3
62063: PPUSH
62064: CALL 22864 0 3
62068: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62069: LD_VAR 0 3
62073: PPUSH
62074: CALL_OW 110
62078: PUSH
62079: LD_INT 102
62081: NONEQUAL
62082: IFFALSE 62096
// SetTag ( j , 102 ) ;
62084: LD_VAR 0 3
62088: PPUSH
62089: LD_INT 102
62091: PPUSH
62092: CALL_OW 109
// Wait ( 3 ) ;
62096: LD_INT 3
62098: PPUSH
62099: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62103: LD_EXP 47
62107: PUSH
62108: LD_VAR 0 2
62112: ARRAY
62113: PUSH
62114: LD_INT 1
62116: ARRAY
62117: IFFALSE 62149
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62119: LD_VAR 0 3
62123: PPUSH
62124: LD_EXP 47
62128: PUSH
62129: LD_VAR 0 2
62133: ARRAY
62134: PUSH
62135: LD_INT 1
62137: ARRAY
62138: PUSH
62139: LD_INT 1
62141: ARRAY
62142: PPUSH
62143: CALL_OW 128
62147: GO 62205
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
62149: LD_VAR 0 3
62153: PPUSH
62154: CALL_OW 314
62158: NOT
62159: PUSH
62160: LD_EXP 47
62164: PUSH
62165: LD_VAR 0 2
62169: ARRAY
62170: PUSH
62171: LD_INT 2
62173: ARRAY
62174: AND
62175: IFFALSE 62205
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
62177: LD_VAR 0 3
62181: PPUSH
62182: LD_EXP 47
62186: PUSH
62187: LD_VAR 0 2
62191: ARRAY
62192: PUSH
62193: LD_INT 2
62195: ARRAY
62196: PUSH
62197: LD_INT 1
62199: ARRAY
62200: PPUSH
62201: CALL_OW 128
// end ;
62205: GO 61983
62207: POP
62208: POP
// end ;
62209: GO 61826
62211: POP
62212: POP
// end ;
62213: LD_VAR 0 1
62217: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
62218: LD_INT 0
62220: PPUSH
62221: PPUSH
62222: PPUSH
62223: PPUSH
62224: PPUSH
// if not mc_bases then
62225: LD_EXP 44
62229: NOT
62230: IFFALSE 62234
// exit ;
62232: GO 63203
// for i = 1 to mc_bases do
62234: LD_ADDR_VAR 0 2
62238: PUSH
62239: DOUBLE
62240: LD_INT 1
62242: DEC
62243: ST_TO_ADDR
62244: LD_EXP 44
62248: PUSH
62249: FOR_TO
62250: IFFALSE 63201
// begin if mc_scan [ i ] then
62252: LD_EXP 67
62256: PUSH
62257: LD_VAR 0 2
62261: ARRAY
62262: IFFALSE 62266
// continue ;
62264: GO 62249
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
62266: LD_EXP 49
62270: PUSH
62271: LD_VAR 0 2
62275: ARRAY
62276: NOT
62277: PUSH
62278: LD_EXP 51
62282: PUSH
62283: LD_VAR 0 2
62287: ARRAY
62288: NOT
62289: AND
62290: PUSH
62291: LD_EXP 50
62295: PUSH
62296: LD_VAR 0 2
62300: ARRAY
62301: AND
62302: IFFALSE 62340
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
62304: LD_ADDR_EXP 50
62308: PUSH
62309: LD_EXP 50
62313: PPUSH
62314: LD_VAR 0 2
62318: PPUSH
62319: EMPTY
62320: PPUSH
62321: CALL_OW 1
62325: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62326: LD_VAR 0 2
62330: PPUSH
62331: LD_INT 103
62333: PPUSH
62334: CALL 60612 0 2
// continue ;
62338: GO 62249
// end ; if mc_construct_list [ i ] then
62340: LD_EXP 51
62344: PUSH
62345: LD_VAR 0 2
62349: ARRAY
62350: IFFALSE 62570
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62352: LD_ADDR_VAR 0 4
62356: PUSH
62357: LD_EXP 44
62361: PUSH
62362: LD_VAR 0 2
62366: ARRAY
62367: PPUSH
62368: LD_INT 25
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PPUSH
62378: CALL_OW 72
62382: PUSH
62383: LD_EXP 46
62387: PUSH
62388: LD_VAR 0 2
62392: ARRAY
62393: DIFF
62394: ST_TO_ADDR
// if not tmp then
62395: LD_VAR 0 4
62399: NOT
62400: IFFALSE 62404
// continue ;
62402: GO 62249
// for j in tmp do
62404: LD_ADDR_VAR 0 3
62408: PUSH
62409: LD_VAR 0 4
62413: PUSH
62414: FOR_IN
62415: IFFALSE 62566
// begin if not mc_builders [ i ] then
62417: LD_EXP 50
62421: PUSH
62422: LD_VAR 0 2
62426: ARRAY
62427: NOT
62428: IFFALSE 62486
// begin SetTag ( j , 103 ) ;
62430: LD_VAR 0 3
62434: PPUSH
62435: LD_INT 103
62437: PPUSH
62438: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62442: LD_ADDR_EXP 50
62446: PUSH
62447: LD_EXP 50
62451: PPUSH
62452: LD_VAR 0 2
62456: PUSH
62457: LD_EXP 50
62461: PUSH
62462: LD_VAR 0 2
62466: ARRAY
62467: PUSH
62468: LD_INT 1
62470: PLUS
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PPUSH
62476: LD_VAR 0 3
62480: PPUSH
62481: CALL 22864 0 3
62485: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62486: LD_VAR 0 3
62490: PPUSH
62491: CALL_OW 310
62495: IFFALSE 62506
// ComExitBuilding ( j ) ;
62497: LD_VAR 0 3
62501: PPUSH
62502: CALL_OW 122
// wait ( 3 ) ;
62506: LD_INT 3
62508: PPUSH
62509: CALL_OW 67
// if not mc_construct_list [ i ] then
62513: LD_EXP 51
62517: PUSH
62518: LD_VAR 0 2
62522: ARRAY
62523: NOT
62524: IFFALSE 62528
// break ;
62526: GO 62566
// if not HasTask ( j ) then
62528: LD_VAR 0 3
62532: PPUSH
62533: CALL_OW 314
62537: NOT
62538: IFFALSE 62564
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
62540: LD_VAR 0 3
62544: PPUSH
62545: LD_EXP 51
62549: PUSH
62550: LD_VAR 0 2
62554: ARRAY
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: PPUSH
62560: CALL 25300 0 2
// end ;
62564: GO 62414
62566: POP
62567: POP
// end else
62568: GO 63199
// if mc_build_list [ i ] then
62570: LD_EXP 49
62574: PUSH
62575: LD_VAR 0 2
62579: ARRAY
62580: IFFALSE 63199
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62582: LD_ADDR_VAR 0 5
62586: PUSH
62587: LD_EXP 44
62591: PUSH
62592: LD_VAR 0 2
62596: ARRAY
62597: PPUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 30
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 30
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: PPUSH
62626: CALL_OW 72
62630: ST_TO_ADDR
// if depot then
62631: LD_VAR 0 5
62635: IFFALSE 62653
// depot := depot [ 1 ] else
62637: LD_ADDR_VAR 0 5
62641: PUSH
62642: LD_VAR 0 5
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: ST_TO_ADDR
62651: GO 62661
// depot := 0 ;
62653: LD_ADDR_VAR 0 5
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
62661: LD_EXP 49
62665: PUSH
62666: LD_VAR 0 2
62670: ARRAY
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PUSH
62680: LD_INT 0
62682: EQUAL
62683: PUSH
62684: LD_VAR 0 5
62688: PUSH
62689: LD_VAR 0 5
62693: PPUSH
62694: LD_EXP 49
62698: PUSH
62699: LD_VAR 0 2
62703: ARRAY
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PUSH
62709: LD_INT 1
62711: ARRAY
62712: PPUSH
62713: LD_EXP 49
62717: PUSH
62718: LD_VAR 0 2
62722: ARRAY
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PUSH
62728: LD_INT 2
62730: ARRAY
62731: PPUSH
62732: LD_EXP 49
62736: PUSH
62737: LD_VAR 0 2
62741: ARRAY
62742: PUSH
62743: LD_INT 1
62745: ARRAY
62746: PUSH
62747: LD_INT 3
62749: ARRAY
62750: PPUSH
62751: LD_EXP 49
62755: PUSH
62756: LD_VAR 0 2
62760: ARRAY
62761: PUSH
62762: LD_INT 1
62764: ARRAY
62765: PUSH
62766: LD_INT 4
62768: ARRAY
62769: PPUSH
62770: CALL 29652 0 5
62774: AND
62775: OR
62776: IFFALSE 63057
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62778: LD_ADDR_VAR 0 4
62782: PUSH
62783: LD_EXP 44
62787: PUSH
62788: LD_VAR 0 2
62792: ARRAY
62793: PPUSH
62794: LD_INT 25
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PPUSH
62804: CALL_OW 72
62808: PUSH
62809: LD_EXP 46
62813: PUSH
62814: LD_VAR 0 2
62818: ARRAY
62819: DIFF
62820: ST_TO_ADDR
// if not tmp then
62821: LD_VAR 0 4
62825: NOT
62826: IFFALSE 62830
// continue ;
62828: GO 62249
// for j in tmp do
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: LD_VAR 0 4
62839: PUSH
62840: FOR_IN
62841: IFFALSE 63053
// begin if not mc_builders [ i ] then
62843: LD_EXP 50
62847: PUSH
62848: LD_VAR 0 2
62852: ARRAY
62853: NOT
62854: IFFALSE 62912
// begin SetTag ( j , 103 ) ;
62856: LD_VAR 0 3
62860: PPUSH
62861: LD_INT 103
62863: PPUSH
62864: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62868: LD_ADDR_EXP 50
62872: PUSH
62873: LD_EXP 50
62877: PPUSH
62878: LD_VAR 0 2
62882: PUSH
62883: LD_EXP 50
62887: PUSH
62888: LD_VAR 0 2
62892: ARRAY
62893: PUSH
62894: LD_INT 1
62896: PLUS
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PPUSH
62902: LD_VAR 0 3
62906: PPUSH
62907: CALL 22864 0 3
62911: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62912: LD_VAR 0 3
62916: PPUSH
62917: CALL_OW 310
62921: IFFALSE 62932
// ComExitBuilding ( j ) ;
62923: LD_VAR 0 3
62927: PPUSH
62928: CALL_OW 122
// wait ( 3 ) ;
62932: LD_INT 3
62934: PPUSH
62935: CALL_OW 67
// if not mc_build_list [ i ] then
62939: LD_EXP 49
62943: PUSH
62944: LD_VAR 0 2
62948: ARRAY
62949: NOT
62950: IFFALSE 62954
// break ;
62952: GO 63053
// if not HasTask ( j ) then
62954: LD_VAR 0 3
62958: PPUSH
62959: CALL_OW 314
62963: NOT
62964: IFFALSE 63051
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
62966: LD_VAR 0 3
62970: PPUSH
62971: LD_EXP 49
62975: PUSH
62976: LD_VAR 0 2
62980: ARRAY
62981: PUSH
62982: LD_INT 1
62984: ARRAY
62985: PUSH
62986: LD_INT 1
62988: ARRAY
62989: PPUSH
62990: LD_EXP 49
62994: PUSH
62995: LD_VAR 0 2
62999: ARRAY
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PUSH
63005: LD_INT 2
63007: ARRAY
63008: PPUSH
63009: LD_EXP 49
63013: PUSH
63014: LD_VAR 0 2
63018: ARRAY
63019: PUSH
63020: LD_INT 1
63022: ARRAY
63023: PUSH
63024: LD_INT 3
63026: ARRAY
63027: PPUSH
63028: LD_EXP 49
63032: PUSH
63033: LD_VAR 0 2
63037: ARRAY
63038: PUSH
63039: LD_INT 1
63041: ARRAY
63042: PUSH
63043: LD_INT 4
63045: ARRAY
63046: PPUSH
63047: CALL_OW 145
// end ;
63051: GO 62840
63053: POP
63054: POP
// end else
63055: GO 63199
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
63057: LD_EXP 44
63061: PUSH
63062: LD_VAR 0 2
63066: ARRAY
63067: PPUSH
63068: LD_EXP 49
63072: PUSH
63073: LD_VAR 0 2
63077: ARRAY
63078: PUSH
63079: LD_INT 1
63081: ARRAY
63082: PUSH
63083: LD_INT 1
63085: ARRAY
63086: PPUSH
63087: LD_EXP 49
63091: PUSH
63092: LD_VAR 0 2
63096: ARRAY
63097: PUSH
63098: LD_INT 1
63100: ARRAY
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: PPUSH
63106: LD_EXP 49
63110: PUSH
63111: LD_VAR 0 2
63115: ARRAY
63116: PUSH
63117: LD_INT 1
63119: ARRAY
63120: PUSH
63121: LD_INT 3
63123: ARRAY
63124: PPUSH
63125: LD_EXP 49
63129: PUSH
63130: LD_VAR 0 2
63134: ARRAY
63135: PUSH
63136: LD_INT 1
63138: ARRAY
63139: PUSH
63140: LD_INT 4
63142: ARRAY
63143: PPUSH
63144: CALL 29083 0 5
63148: NOT
63149: IFFALSE 63199
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
63151: LD_ADDR_EXP 49
63155: PUSH
63156: LD_EXP 49
63160: PPUSH
63161: LD_VAR 0 2
63165: PPUSH
63166: LD_EXP 49
63170: PUSH
63171: LD_VAR 0 2
63175: ARRAY
63176: PPUSH
63177: LD_INT 1
63179: PPUSH
63180: LD_INT 1
63182: NEG
63183: PPUSH
63184: LD_INT 0
63186: PPUSH
63187: CALL 21847 0 4
63191: PPUSH
63192: CALL_OW 1
63196: ST_TO_ADDR
// continue ;
63197: GO 62249
// end ; end ; end ;
63199: GO 62249
63201: POP
63202: POP
// end ;
63203: LD_VAR 0 1
63207: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
63208: LD_INT 0
63210: PPUSH
63211: PPUSH
63212: PPUSH
63213: PPUSH
63214: PPUSH
63215: PPUSH
// if not mc_bases then
63216: LD_EXP 44
63220: NOT
63221: IFFALSE 63225
// exit ;
63223: GO 63652
// for i = 1 to mc_bases do
63225: LD_ADDR_VAR 0 2
63229: PUSH
63230: DOUBLE
63231: LD_INT 1
63233: DEC
63234: ST_TO_ADDR
63235: LD_EXP 44
63239: PUSH
63240: FOR_TO
63241: IFFALSE 63650
// begin tmp := mc_build_upgrade [ i ] ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_EXP 76
63252: PUSH
63253: LD_VAR 0 2
63257: ARRAY
63258: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
63259: LD_ADDR_VAR 0 6
63263: PUSH
63264: LD_EXP 77
63268: PUSH
63269: LD_VAR 0 2
63273: ARRAY
63274: PPUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 30
63280: PUSH
63281: LD_INT 6
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 30
63290: PUSH
63291: LD_INT 7
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: PPUSH
63303: CALL_OW 72
63307: ST_TO_ADDR
// if not tmp and not lab then
63308: LD_VAR 0 4
63312: NOT
63313: PUSH
63314: LD_VAR 0 6
63318: NOT
63319: AND
63320: IFFALSE 63324
// continue ;
63322: GO 63240
// if tmp then
63324: LD_VAR 0 4
63328: IFFALSE 63448
// for j in tmp do
63330: LD_ADDR_VAR 0 3
63334: PUSH
63335: LD_VAR 0 4
63339: PUSH
63340: FOR_IN
63341: IFFALSE 63446
// begin if UpgradeCost ( j ) then
63343: LD_VAR 0 3
63347: PPUSH
63348: CALL 28743 0 1
63352: IFFALSE 63444
// begin ComUpgrade ( j ) ;
63354: LD_VAR 0 3
63358: PPUSH
63359: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
63363: LD_ADDR_EXP 76
63367: PUSH
63368: LD_EXP 76
63372: PPUSH
63373: LD_VAR 0 2
63377: PPUSH
63378: LD_EXP 76
63382: PUSH
63383: LD_VAR 0 2
63387: ARRAY
63388: PUSH
63389: LD_VAR 0 3
63393: DIFF
63394: PPUSH
63395: CALL_OW 1
63399: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63400: LD_ADDR_EXP 51
63404: PUSH
63405: LD_EXP 51
63409: PPUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_EXP 51
63419: PUSH
63420: LD_VAR 0 2
63424: ARRAY
63425: PUSH
63426: LD_INT 1
63428: PLUS
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PPUSH
63434: LD_VAR 0 3
63438: PPUSH
63439: CALL 22864 0 3
63443: ST_TO_ADDR
// end ; end ;
63444: GO 63340
63446: POP
63447: POP
// if not lab or not mc_lab_upgrade [ i ] then
63448: LD_VAR 0 6
63452: NOT
63453: PUSH
63454: LD_EXP 78
63458: PUSH
63459: LD_VAR 0 2
63463: ARRAY
63464: NOT
63465: OR
63466: IFFALSE 63470
// continue ;
63468: GO 63240
// for j in lab do
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_VAR 0 6
63479: PUSH
63480: FOR_IN
63481: IFFALSE 63646
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
63483: LD_VAR 0 3
63487: PPUSH
63488: CALL_OW 266
63492: PUSH
63493: LD_INT 6
63495: PUSH
63496: LD_INT 7
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: IN
63503: PUSH
63504: LD_VAR 0 3
63508: PPUSH
63509: CALL_OW 461
63513: PUSH
63514: LD_INT 1
63516: NONEQUAL
63517: AND
63518: IFFALSE 63644
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
63520: LD_VAR 0 3
63524: PPUSH
63525: LD_EXP 78
63529: PUSH
63530: LD_VAR 0 2
63534: ARRAY
63535: PUSH
63536: LD_INT 1
63538: ARRAY
63539: PPUSH
63540: CALL 28948 0 2
63544: IFFALSE 63644
// begin ComCancel ( j ) ;
63546: LD_VAR 0 3
63550: PPUSH
63551: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
63555: LD_VAR 0 3
63559: PPUSH
63560: LD_EXP 78
63564: PUSH
63565: LD_VAR 0 2
63569: ARRAY
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: PPUSH
63575: CALL_OW 207
// if not j in mc_construct_list [ i ] then
63579: LD_VAR 0 3
63583: PUSH
63584: LD_EXP 51
63588: PUSH
63589: LD_VAR 0 2
63593: ARRAY
63594: IN
63595: NOT
63596: IFFALSE 63642
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63598: LD_ADDR_EXP 51
63602: PUSH
63603: LD_EXP 51
63607: PPUSH
63608: LD_VAR 0 2
63612: PUSH
63613: LD_EXP 51
63617: PUSH
63618: LD_VAR 0 2
63622: ARRAY
63623: PUSH
63624: LD_INT 1
63626: PLUS
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PPUSH
63632: LD_VAR 0 3
63636: PPUSH
63637: CALL 22864 0 3
63641: ST_TO_ADDR
// break ;
63642: GO 63646
// end ; end ; end ;
63644: GO 63480
63646: POP
63647: POP
// end ;
63648: GO 63240
63650: POP
63651: POP
// end ;
63652: LD_VAR 0 1
63656: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
63657: LD_INT 0
63659: PPUSH
63660: PPUSH
63661: PPUSH
63662: PPUSH
63663: PPUSH
63664: PPUSH
63665: PPUSH
// if not mc_bases then
63666: LD_EXP 44
63670: NOT
63671: IFFALSE 63675
// exit ;
63673: GO 64004
// for i = 1 to mc_bases do
63675: LD_ADDR_VAR 0 2
63679: PUSH
63680: DOUBLE
63681: LD_INT 1
63683: DEC
63684: ST_TO_ADDR
63685: LD_EXP 44
63689: PUSH
63690: FOR_TO
63691: IFFALSE 64002
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
63693: LD_EXP 52
63697: PUSH
63698: LD_VAR 0 2
63702: ARRAY
63703: NOT
63704: PUSH
63705: LD_EXP 44
63709: PUSH
63710: LD_VAR 0 2
63714: ARRAY
63715: PPUSH
63716: LD_INT 30
63718: PUSH
63719: LD_INT 3
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: CALL_OW 72
63730: NOT
63731: OR
63732: IFFALSE 63736
// continue ;
63734: GO 63690
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
63736: LD_EXP 52
63740: PUSH
63741: LD_VAR 0 2
63745: ARRAY
63746: PUSH
63747: LD_INT 1
63749: ARRAY
63750: PPUSH
63751: CALL_OW 269
63755: IFFALSE 63821
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
63757: LD_ADDR_VAR 0 4
63761: PUSH
63762: LD_EXP 52
63766: PUSH
63767: LD_VAR 0 2
63771: ARRAY
63772: PPUSH
63773: LD_INT 1
63775: PPUSH
63776: CALL_OW 3
63780: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
63781: LD_ADDR_EXP 52
63785: PUSH
63786: LD_EXP 52
63790: PPUSH
63791: LD_VAR 0 2
63795: PPUSH
63796: LD_VAR 0 4
63800: PPUSH
63801: CALL_OW 1
63805: ST_TO_ADDR
// if not mc_turret_list [ i ] then
63806: LD_EXP 52
63810: PUSH
63811: LD_VAR 0 2
63815: ARRAY
63816: NOT
63817: IFFALSE 63821
// continue ;
63819: GO 63690
// end ; busy := false ;
63821: LD_ADDR_VAR 0 6
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63829: LD_ADDR_VAR 0 4
63833: PUSH
63834: LD_EXP 44
63838: PUSH
63839: LD_VAR 0 2
63843: ARRAY
63844: PPUSH
63845: LD_INT 30
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PPUSH
63855: CALL_OW 72
63859: ST_TO_ADDR
// for j in tmp do
63860: LD_ADDR_VAR 0 3
63864: PUSH
63865: LD_VAR 0 4
63869: PUSH
63870: FOR_IN
63871: IFFALSE 63899
// if not BuildingStatus ( j ) = bs_idle then
63873: LD_VAR 0 3
63877: PPUSH
63878: CALL_OW 461
63882: PUSH
63883: LD_INT 2
63885: EQUAL
63886: NOT
63887: IFFALSE 63897
// busy := true ;
63889: LD_ADDR_VAR 0 6
63893: PUSH
63894: LD_INT 1
63896: ST_TO_ADDR
63897: GO 63870
63899: POP
63900: POP
// if busy then
63901: LD_VAR 0 6
63905: IFFALSE 63909
// continue ;
63907: GO 63690
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
63909: LD_ADDR_VAR 0 7
63913: PUSH
63914: LD_EXP 52
63918: PUSH
63919: LD_VAR 0 2
63923: ARRAY
63924: PUSH
63925: LD_INT 1
63927: ARRAY
63928: PPUSH
63929: CALL 27307 0 1
63933: ST_TO_ADDR
// if not weapon then
63934: LD_VAR 0 7
63938: NOT
63939: IFFALSE 63943
// continue ;
63941: GO 63690
// if mc_allowed_tower_weapons [ i ] then
63943: LD_EXP 82
63947: PUSH
63948: LD_VAR 0 2
63952: ARRAY
63953: IFFALSE 63976
// if not weapon in mc_allowed_tower_weapons [ i ] then
63955: LD_VAR 0 7
63959: PUSH
63960: LD_EXP 82
63964: PUSH
63965: LD_VAR 0 2
63969: ARRAY
63970: IN
63971: NOT
63972: IFFALSE 63976
// continue ;
63974: GO 63690
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
63976: LD_EXP 52
63980: PUSH
63981: LD_VAR 0 2
63985: ARRAY
63986: PUSH
63987: LD_INT 1
63989: ARRAY
63990: PPUSH
63991: LD_VAR 0 7
63995: PPUSH
63996: CALL_OW 148
// end ;
64000: GO 63690
64002: POP
64003: POP
// end ;
64004: LD_VAR 0 1
64008: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
64009: LD_INT 0
64011: PPUSH
64012: PPUSH
64013: PPUSH
64014: PPUSH
64015: PPUSH
64016: PPUSH
// if not mc_bases then
64017: LD_EXP 44
64021: NOT
64022: IFFALSE 64026
// exit ;
64024: GO 65011
// for i = 1 to mc_bases do
64026: LD_ADDR_VAR 0 2
64030: PUSH
64031: DOUBLE
64032: LD_INT 1
64034: DEC
64035: ST_TO_ADDR
64036: LD_EXP 44
64040: PUSH
64041: FOR_TO
64042: IFFALSE 65009
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
64044: LD_EXP 57
64048: PUSH
64049: LD_VAR 0 2
64053: ARRAY
64054: NOT
64055: PUSH
64056: LD_EXP 57
64060: PUSH
64061: LD_VAR 0 2
64065: ARRAY
64066: PUSH
64067: LD_EXP 58
64071: PUSH
64072: LD_VAR 0 2
64076: ARRAY
64077: EQUAL
64078: OR
64079: IFFALSE 64083
// continue ;
64081: GO 64041
// if mc_miners [ i ] then
64083: LD_EXP 58
64087: PUSH
64088: LD_VAR 0 2
64092: ARRAY
64093: IFFALSE 64696
// begin k := 1 ;
64095: LD_ADDR_VAR 0 4
64099: PUSH
64100: LD_INT 1
64102: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: DOUBLE
64109: LD_EXP 58
64113: PUSH
64114: LD_VAR 0 2
64118: ARRAY
64119: INC
64120: ST_TO_ADDR
64121: LD_INT 1
64123: PUSH
64124: FOR_DOWNTO
64125: IFFALSE 64694
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
64127: LD_EXP 58
64131: PUSH
64132: LD_VAR 0 2
64136: ARRAY
64137: PUSH
64138: LD_VAR 0 3
64142: ARRAY
64143: PPUSH
64144: CALL_OW 301
64148: IFFALSE 64211
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
64150: LD_ADDR_VAR 0 5
64154: PUSH
64155: LD_EXP 58
64159: PUSH
64160: LD_VAR 0 2
64164: ARRAY
64165: PUSH
64166: LD_EXP 58
64170: PUSH
64171: LD_VAR 0 2
64175: ARRAY
64176: PUSH
64177: LD_VAR 0 3
64181: ARRAY
64182: DIFF
64183: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
64184: LD_ADDR_EXP 58
64188: PUSH
64189: LD_EXP 58
64193: PPUSH
64194: LD_VAR 0 2
64198: PPUSH
64199: LD_VAR 0 5
64203: PPUSH
64204: CALL_OW 1
64208: ST_TO_ADDR
// continue ;
64209: GO 64124
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
64211: LD_EXP 58
64215: PUSH
64216: LD_VAR 0 2
64220: ARRAY
64221: PUSH
64222: LD_VAR 0 3
64226: ARRAY
64227: PPUSH
64228: CALL 22365 0 1
64232: PUSH
64233: LD_EXP 58
64237: PUSH
64238: LD_VAR 0 2
64242: ARRAY
64243: PUSH
64244: LD_VAR 0 3
64248: ARRAY
64249: PPUSH
64250: CALL_OW 255
64254: PPUSH
64255: LD_EXP 57
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: PUSH
64266: LD_VAR 0 4
64270: ARRAY
64271: PUSH
64272: LD_INT 1
64274: ARRAY
64275: PPUSH
64276: LD_EXP 57
64280: PUSH
64281: LD_VAR 0 2
64285: ARRAY
64286: PUSH
64287: LD_VAR 0 4
64291: ARRAY
64292: PUSH
64293: LD_INT 2
64295: ARRAY
64296: PPUSH
64297: LD_INT 15
64299: PPUSH
64300: CALL 23358 0 4
64304: PUSH
64305: LD_INT 4
64307: ARRAY
64308: PUSH
64309: LD_EXP 58
64313: PUSH
64314: LD_VAR 0 2
64318: ARRAY
64319: PUSH
64320: LD_VAR 0 3
64324: ARRAY
64325: PPUSH
64326: LD_INT 10
64328: PPUSH
64329: CALL 25055 0 2
64333: PUSH
64334: LD_INT 4
64336: ARRAY
64337: OR
64338: AND
64339: IFFALSE 64362
// ComStop ( mc_miners [ i ] [ j ] ) ;
64341: LD_EXP 58
64345: PUSH
64346: LD_VAR 0 2
64350: ARRAY
64351: PUSH
64352: LD_VAR 0 3
64356: ARRAY
64357: PPUSH
64358: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
64362: LD_EXP 58
64366: PUSH
64367: LD_VAR 0 2
64371: ARRAY
64372: PUSH
64373: LD_VAR 0 3
64377: ARRAY
64378: PPUSH
64379: CALL_OW 257
64383: PUSH
64384: LD_INT 1
64386: EQUAL
64387: PUSH
64388: LD_EXP 58
64392: PUSH
64393: LD_VAR 0 2
64397: ARRAY
64398: PUSH
64399: LD_VAR 0 3
64403: ARRAY
64404: PPUSH
64405: CALL_OW 459
64409: NOT
64410: AND
64411: PUSH
64412: LD_EXP 58
64416: PUSH
64417: LD_VAR 0 2
64421: ARRAY
64422: PUSH
64423: LD_VAR 0 3
64427: ARRAY
64428: PPUSH
64429: CALL_OW 255
64433: PPUSH
64434: LD_EXP 57
64438: PUSH
64439: LD_VAR 0 2
64443: ARRAY
64444: PUSH
64445: LD_VAR 0 4
64449: ARRAY
64450: PUSH
64451: LD_INT 1
64453: ARRAY
64454: PPUSH
64455: LD_EXP 57
64459: PUSH
64460: LD_VAR 0 2
64464: ARRAY
64465: PUSH
64466: LD_VAR 0 4
64470: ARRAY
64471: PUSH
64472: LD_INT 2
64474: ARRAY
64475: PPUSH
64476: LD_INT 15
64478: PPUSH
64479: CALL 23358 0 4
64483: PUSH
64484: LD_INT 4
64486: ARRAY
64487: PUSH
64488: LD_INT 0
64490: EQUAL
64491: AND
64492: PUSH
64493: LD_EXP 58
64497: PUSH
64498: LD_VAR 0 2
64502: ARRAY
64503: PUSH
64504: LD_VAR 0 3
64508: ARRAY
64509: PPUSH
64510: CALL_OW 314
64514: NOT
64515: AND
64516: IFFALSE 64692
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
64518: LD_EXP 58
64522: PUSH
64523: LD_VAR 0 2
64527: ARRAY
64528: PUSH
64529: LD_VAR 0 3
64533: ARRAY
64534: PPUSH
64535: CALL_OW 310
64539: IFFALSE 64562
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
64541: LD_EXP 58
64545: PUSH
64546: LD_VAR 0 2
64550: ARRAY
64551: PUSH
64552: LD_VAR 0 3
64556: ARRAY
64557: PPUSH
64558: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
64562: LD_EXP 58
64566: PUSH
64567: LD_VAR 0 2
64571: ARRAY
64572: PUSH
64573: LD_VAR 0 3
64577: ARRAY
64578: PPUSH
64579: CALL_OW 314
64583: NOT
64584: IFFALSE 64652
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
64586: LD_EXP 58
64590: PUSH
64591: LD_VAR 0 2
64595: ARRAY
64596: PUSH
64597: LD_VAR 0 3
64601: ARRAY
64602: PPUSH
64603: LD_EXP 57
64607: PUSH
64608: LD_VAR 0 2
64612: ARRAY
64613: PUSH
64614: LD_VAR 0 4
64618: ARRAY
64619: PUSH
64620: LD_INT 1
64622: ARRAY
64623: PPUSH
64624: LD_EXP 57
64628: PUSH
64629: LD_VAR 0 2
64633: ARRAY
64634: PUSH
64635: LD_VAR 0 4
64639: ARRAY
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PPUSH
64645: LD_INT 0
64647: PPUSH
64648: CALL_OW 193
// k := k + 1 ;
64652: LD_ADDR_VAR 0 4
64656: PUSH
64657: LD_VAR 0 4
64661: PUSH
64662: LD_INT 1
64664: PLUS
64665: ST_TO_ADDR
// if k > mc_mines [ i ] then
64666: LD_VAR 0 4
64670: PUSH
64671: LD_EXP 57
64675: PUSH
64676: LD_VAR 0 2
64680: ARRAY
64681: GREATER
64682: IFFALSE 64692
// k := 1 ;
64684: LD_ADDR_VAR 0 4
64688: PUSH
64689: LD_INT 1
64691: ST_TO_ADDR
// end ; end ;
64692: GO 64124
64694: POP
64695: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
64696: LD_ADDR_VAR 0 5
64700: PUSH
64701: LD_EXP 44
64705: PUSH
64706: LD_VAR 0 2
64710: ARRAY
64711: PPUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 30
64717: PUSH
64718: LD_INT 4
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 30
64727: PUSH
64728: LD_INT 5
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 30
64737: PUSH
64738: LD_INT 32
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: PPUSH
64751: CALL_OW 72
64755: ST_TO_ADDR
// if not tmp then
64756: LD_VAR 0 5
64760: NOT
64761: IFFALSE 64765
// continue ;
64763: GO 64041
// list := [ ] ;
64765: LD_ADDR_VAR 0 6
64769: PUSH
64770: EMPTY
64771: ST_TO_ADDR
// for j in tmp do
64772: LD_ADDR_VAR 0 3
64776: PUSH
64777: LD_VAR 0 5
64781: PUSH
64782: FOR_IN
64783: IFFALSE 64852
// begin for k in UnitsInside ( j ) do
64785: LD_ADDR_VAR 0 4
64789: PUSH
64790: LD_VAR 0 3
64794: PPUSH
64795: CALL_OW 313
64799: PUSH
64800: FOR_IN
64801: IFFALSE 64848
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
64803: LD_VAR 0 4
64807: PPUSH
64808: CALL_OW 257
64812: PUSH
64813: LD_INT 1
64815: EQUAL
64816: PUSH
64817: LD_VAR 0 4
64821: PPUSH
64822: CALL_OW 459
64826: NOT
64827: AND
64828: IFFALSE 64846
// list := list ^ k ;
64830: LD_ADDR_VAR 0 6
64834: PUSH
64835: LD_VAR 0 6
64839: PUSH
64840: LD_VAR 0 4
64844: ADD
64845: ST_TO_ADDR
64846: GO 64800
64848: POP
64849: POP
// end ;
64850: GO 64782
64852: POP
64853: POP
// list := list diff mc_miners [ i ] ;
64854: LD_ADDR_VAR 0 6
64858: PUSH
64859: LD_VAR 0 6
64863: PUSH
64864: LD_EXP 58
64868: PUSH
64869: LD_VAR 0 2
64873: ARRAY
64874: DIFF
64875: ST_TO_ADDR
// if not list then
64876: LD_VAR 0 6
64880: NOT
64881: IFFALSE 64885
// continue ;
64883: GO 64041
// k := mc_mines [ i ] - mc_miners [ i ] ;
64885: LD_ADDR_VAR 0 4
64889: PUSH
64890: LD_EXP 57
64894: PUSH
64895: LD_VAR 0 2
64899: ARRAY
64900: PUSH
64901: LD_EXP 58
64905: PUSH
64906: LD_VAR 0 2
64910: ARRAY
64911: MINUS
64912: ST_TO_ADDR
// if k > list then
64913: LD_VAR 0 4
64917: PUSH
64918: LD_VAR 0 6
64922: GREATER
64923: IFFALSE 64935
// k := list ;
64925: LD_ADDR_VAR 0 4
64929: PUSH
64930: LD_VAR 0 6
64934: ST_TO_ADDR
// for j = 1 to k do
64935: LD_ADDR_VAR 0 3
64939: PUSH
64940: DOUBLE
64941: LD_INT 1
64943: DEC
64944: ST_TO_ADDR
64945: LD_VAR 0 4
64949: PUSH
64950: FOR_TO
64951: IFFALSE 65005
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
64953: LD_ADDR_EXP 58
64957: PUSH
64958: LD_EXP 58
64962: PPUSH
64963: LD_VAR 0 2
64967: PUSH
64968: LD_EXP 58
64972: PUSH
64973: LD_VAR 0 2
64977: ARRAY
64978: PUSH
64979: LD_INT 1
64981: PLUS
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PPUSH
64987: LD_VAR 0 6
64991: PUSH
64992: LD_VAR 0 3
64996: ARRAY
64997: PPUSH
64998: CALL 22864 0 3
65002: ST_TO_ADDR
65003: GO 64950
65005: POP
65006: POP
// end ;
65007: GO 64041
65009: POP
65010: POP
// end ;
65011: LD_VAR 0 1
65015: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
65016: LD_INT 0
65018: PPUSH
65019: PPUSH
65020: PPUSH
65021: PPUSH
65022: PPUSH
65023: PPUSH
65024: PPUSH
65025: PPUSH
65026: PPUSH
// if not mc_bases then
65027: LD_EXP 44
65031: NOT
65032: IFFALSE 65036
// exit ;
65034: GO 66515
// for i = 1 to mc_bases do
65036: LD_ADDR_VAR 0 2
65040: PUSH
65041: DOUBLE
65042: LD_INT 1
65044: DEC
65045: ST_TO_ADDR
65046: LD_EXP 44
65050: PUSH
65051: FOR_TO
65052: IFFALSE 66513
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
65054: LD_EXP 44
65058: PUSH
65059: LD_VAR 0 2
65063: ARRAY
65064: NOT
65065: PUSH
65066: LD_EXP 51
65070: PUSH
65071: LD_VAR 0 2
65075: ARRAY
65076: OR
65077: IFFALSE 65081
// continue ;
65079: GO 65051
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
65081: LD_EXP 60
65085: PUSH
65086: LD_VAR 0 2
65090: ARRAY
65091: NOT
65092: PUSH
65093: LD_EXP 61
65097: PUSH
65098: LD_VAR 0 2
65102: ARRAY
65103: AND
65104: IFFALSE 65142
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65106: LD_ADDR_EXP 61
65110: PUSH
65111: LD_EXP 61
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: EMPTY
65122: PPUSH
65123: CALL_OW 1
65127: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
65128: LD_VAR 0 2
65132: PPUSH
65133: LD_INT 107
65135: PPUSH
65136: CALL 60612 0 2
// continue ;
65140: GO 65051
// end ; target := [ ] ;
65142: LD_ADDR_VAR 0 5
65146: PUSH
65147: EMPTY
65148: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
65149: LD_ADDR_VAR 0 3
65153: PUSH
65154: DOUBLE
65155: LD_EXP 60
65159: PUSH
65160: LD_VAR 0 2
65164: ARRAY
65165: INC
65166: ST_TO_ADDR
65167: LD_INT 1
65169: PUSH
65170: FOR_DOWNTO
65171: IFFALSE 65431
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
65173: LD_EXP 60
65177: PUSH
65178: LD_VAR 0 2
65182: ARRAY
65183: PUSH
65184: LD_VAR 0 3
65188: ARRAY
65189: PUSH
65190: LD_INT 2
65192: ARRAY
65193: PPUSH
65194: LD_EXP 60
65198: PUSH
65199: LD_VAR 0 2
65203: ARRAY
65204: PUSH
65205: LD_VAR 0 3
65209: ARRAY
65210: PUSH
65211: LD_INT 3
65213: ARRAY
65214: PPUSH
65215: CALL_OW 488
65219: PUSH
65220: LD_EXP 60
65224: PUSH
65225: LD_VAR 0 2
65229: ARRAY
65230: PUSH
65231: LD_VAR 0 3
65235: ARRAY
65236: PUSH
65237: LD_INT 2
65239: ARRAY
65240: PPUSH
65241: LD_EXP 60
65245: PUSH
65246: LD_VAR 0 2
65250: ARRAY
65251: PUSH
65252: LD_VAR 0 3
65256: ARRAY
65257: PUSH
65258: LD_INT 3
65260: ARRAY
65261: PPUSH
65262: CALL_OW 284
65266: PUSH
65267: LD_INT 0
65269: EQUAL
65270: AND
65271: IFFALSE 65326
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
65273: LD_ADDR_VAR 0 4
65277: PUSH
65278: LD_EXP 60
65282: PUSH
65283: LD_VAR 0 2
65287: ARRAY
65288: PPUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: CALL_OW 3
65298: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
65299: LD_ADDR_EXP 60
65303: PUSH
65304: LD_EXP 60
65308: PPUSH
65309: LD_VAR 0 2
65313: PPUSH
65314: LD_VAR 0 4
65318: PPUSH
65319: CALL_OW 1
65323: ST_TO_ADDR
// continue ;
65324: GO 65170
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
65326: LD_EXP 44
65330: PUSH
65331: LD_VAR 0 2
65335: ARRAY
65336: PUSH
65337: LD_INT 1
65339: ARRAY
65340: PPUSH
65341: CALL_OW 255
65345: PPUSH
65346: LD_EXP 60
65350: PUSH
65351: LD_VAR 0 2
65355: ARRAY
65356: PUSH
65357: LD_VAR 0 3
65361: ARRAY
65362: PUSH
65363: LD_INT 2
65365: ARRAY
65366: PPUSH
65367: LD_EXP 60
65371: PUSH
65372: LD_VAR 0 2
65376: ARRAY
65377: PUSH
65378: LD_VAR 0 3
65382: ARRAY
65383: PUSH
65384: LD_INT 3
65386: ARRAY
65387: PPUSH
65388: LD_INT 20
65390: PPUSH
65391: CALL 23358 0 4
65395: PUSH
65396: LD_INT 4
65398: ARRAY
65399: PUSH
65400: LD_INT 0
65402: EQUAL
65403: IFFALSE 65429
// begin target := mc_crates [ i ] [ j ] ;
65405: LD_ADDR_VAR 0 5
65409: PUSH
65410: LD_EXP 60
65414: PUSH
65415: LD_VAR 0 2
65419: ARRAY
65420: PUSH
65421: LD_VAR 0 3
65425: ARRAY
65426: ST_TO_ADDR
// break ;
65427: GO 65431
// end ; end ;
65429: GO 65170
65431: POP
65432: POP
// if not target then
65433: LD_VAR 0 5
65437: NOT
65438: IFFALSE 65442
// continue ;
65440: GO 65051
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
65442: LD_ADDR_VAR 0 6
65446: PUSH
65447: LD_EXP 63
65451: PUSH
65452: LD_VAR 0 2
65456: ARRAY
65457: PPUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: LD_INT 58
65466: PUSH
65467: EMPTY
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 61
65476: PUSH
65477: EMPTY
65478: LIST
65479: PUSH
65480: LD_INT 33
65482: PUSH
65483: LD_INT 5
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 33
65492: PUSH
65493: LD_INT 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: LD_INT 34
65512: PUSH
65513: LD_INT 32
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 34
65522: PUSH
65523: LD_INT 51
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 34
65532: PUSH
65533: LD_INT 12
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PPUSH
65550: CALL_OW 72
65554: ST_TO_ADDR
// if not cargo then
65555: LD_VAR 0 6
65559: NOT
65560: IFFALSE 66048
// begin if mc_crates_collector [ i ] < 5 then
65562: LD_EXP 61
65566: PUSH
65567: LD_VAR 0 2
65571: ARRAY
65572: PUSH
65573: LD_INT 5
65575: LESS
65576: IFFALSE 65862
// begin if mc_ape [ i ] then
65578: LD_EXP 73
65582: PUSH
65583: LD_VAR 0 2
65587: ARRAY
65588: IFFALSE 65635
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
65590: LD_ADDR_VAR 0 4
65594: PUSH
65595: LD_EXP 73
65599: PUSH
65600: LD_VAR 0 2
65604: ARRAY
65605: PPUSH
65606: LD_INT 25
65608: PUSH
65609: LD_INT 16
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 24
65618: PUSH
65619: LD_INT 750
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PPUSH
65630: CALL_OW 72
65634: ST_TO_ADDR
// if not tmp then
65635: LD_VAR 0 4
65639: NOT
65640: IFFALSE 65689
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
65642: LD_ADDR_VAR 0 4
65646: PUSH
65647: LD_EXP 44
65651: PUSH
65652: LD_VAR 0 2
65656: ARRAY
65657: PPUSH
65658: LD_INT 25
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 24
65670: PUSH
65671: LD_INT 750
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PPUSH
65682: CALL_OW 72
65686: ST_TO_ADDR
65687: GO 65750
// if tmp < 5 then
65689: LD_VAR 0 4
65693: PUSH
65694: LD_INT 5
65696: LESS
65697: IFFALSE 65750
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
65699: LD_ADDR_VAR 0 4
65703: PUSH
65704: LD_VAR 0 4
65708: PUSH
65709: LD_EXP 44
65713: PUSH
65714: LD_VAR 0 2
65718: ARRAY
65719: PPUSH
65720: LD_INT 25
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 24
65732: PUSH
65733: LD_INT 750
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PPUSH
65744: CALL_OW 72
65748: UNION
65749: ST_TO_ADDR
// if not tmp then
65750: LD_VAR 0 4
65754: NOT
65755: IFFALSE 65759
// continue ;
65757: GO 65051
// for j in tmp do
65759: LD_ADDR_VAR 0 3
65763: PUSH
65764: LD_VAR 0 4
65768: PUSH
65769: FOR_IN
65770: IFFALSE 65860
// if not GetTag ( j ) then
65772: LD_VAR 0 3
65776: PPUSH
65777: CALL_OW 110
65781: NOT
65782: IFFALSE 65858
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
65784: LD_ADDR_EXP 61
65788: PUSH
65789: LD_EXP 61
65793: PPUSH
65794: LD_VAR 0 2
65798: PUSH
65799: LD_EXP 61
65803: PUSH
65804: LD_VAR 0 2
65808: ARRAY
65809: PUSH
65810: LD_INT 1
65812: PLUS
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PPUSH
65818: LD_VAR 0 3
65822: PPUSH
65823: CALL 22864 0 3
65827: ST_TO_ADDR
// SetTag ( j , 107 ) ;
65828: LD_VAR 0 3
65832: PPUSH
65833: LD_INT 107
65835: PPUSH
65836: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
65840: LD_EXP 61
65844: PUSH
65845: LD_VAR 0 2
65849: ARRAY
65850: PUSH
65851: LD_INT 5
65853: GREATEREQUAL
65854: IFFALSE 65858
// break ;
65856: GO 65860
// end ;
65858: GO 65769
65860: POP
65861: POP
// end ; if mc_crates_collector [ i ] and target then
65862: LD_EXP 61
65866: PUSH
65867: LD_VAR 0 2
65871: ARRAY
65872: PUSH
65873: LD_VAR 0 5
65877: AND
65878: IFFALSE 66046
// begin if mc_crates_collector [ i ] < target [ 1 ] then
65880: LD_EXP 61
65884: PUSH
65885: LD_VAR 0 2
65889: ARRAY
65890: PUSH
65891: LD_VAR 0 5
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: LESS
65900: IFFALSE 65920
// tmp := mc_crates_collector [ i ] else
65902: LD_ADDR_VAR 0 4
65906: PUSH
65907: LD_EXP 61
65911: PUSH
65912: LD_VAR 0 2
65916: ARRAY
65917: ST_TO_ADDR
65918: GO 65934
// tmp := target [ 1 ] ;
65920: LD_ADDR_VAR 0 4
65924: PUSH
65925: LD_VAR 0 5
65929: PUSH
65930: LD_INT 1
65932: ARRAY
65933: ST_TO_ADDR
// for j = 1 to tmp do
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: DOUBLE
65940: LD_INT 1
65942: DEC
65943: ST_TO_ADDR
65944: LD_VAR 0 4
65948: PUSH
65949: FOR_TO
65950: IFFALSE 66044
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
65952: LD_EXP 61
65956: PUSH
65957: LD_VAR 0 2
65961: ARRAY
65962: PUSH
65963: LD_VAR 0 3
65967: ARRAY
65968: PPUSH
65969: CALL_OW 310
65973: IFFALSE 65996
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
65975: LD_EXP 61
65979: PUSH
65980: LD_VAR 0 2
65984: ARRAY
65985: PUSH
65986: LD_VAR 0 3
65990: ARRAY
65991: PPUSH
65992: CALL_OW 122
// wait ( 3 ) ;
65996: LD_INT 3
65998: PPUSH
65999: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
66003: LD_EXP 61
66007: PUSH
66008: LD_VAR 0 2
66012: ARRAY
66013: PUSH
66014: LD_VAR 0 3
66018: ARRAY
66019: PPUSH
66020: LD_VAR 0 5
66024: PUSH
66025: LD_INT 2
66027: ARRAY
66028: PPUSH
66029: LD_VAR 0 5
66033: PUSH
66034: LD_INT 3
66036: ARRAY
66037: PPUSH
66038: CALL_OW 117
// end ;
66042: GO 65949
66044: POP
66045: POP
// end ; end else
66046: GO 66511
// begin for j in cargo do
66048: LD_ADDR_VAR 0 3
66052: PUSH
66053: LD_VAR 0 6
66057: PUSH
66058: FOR_IN
66059: IFFALSE 66509
// begin if GetTag ( j ) <> 0 then
66061: LD_VAR 0 3
66065: PPUSH
66066: CALL_OW 110
66070: PUSH
66071: LD_INT 0
66073: NONEQUAL
66074: IFFALSE 66078
// continue ;
66076: GO 66058
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
66078: LD_VAR 0 3
66082: PPUSH
66083: CALL_OW 262
66087: PUSH
66088: LD_INT 2
66090: EQUAL
66091: PUSH
66092: LD_VAR 0 3
66096: PPUSH
66097: CALL_OW 261
66101: PUSH
66102: LD_INT 15
66104: LESS
66105: AND
66106: IFFALSE 66110
// continue ;
66108: GO 66058
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
66110: LD_VAR 0 3
66114: PPUSH
66115: CALL_OW 262
66119: PUSH
66120: LD_INT 1
66122: EQUAL
66123: PUSH
66124: LD_VAR 0 3
66128: PPUSH
66129: CALL_OW 261
66133: PUSH
66134: LD_INT 10
66136: LESS
66137: AND
66138: IFFALSE 66448
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66140: LD_ADDR_VAR 0 7
66144: PUSH
66145: LD_EXP 44
66149: PUSH
66150: LD_VAR 0 2
66154: ARRAY
66155: PPUSH
66156: LD_INT 2
66158: PUSH
66159: LD_INT 30
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 30
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: PPUSH
66184: CALL_OW 72
66188: ST_TO_ADDR
// if not depot then
66189: LD_VAR 0 7
66193: NOT
66194: IFFALSE 66198
// continue ;
66196: GO 66058
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
66198: LD_VAR 0 3
66202: PPUSH
66203: LD_VAR 0 7
66207: PPUSH
66208: LD_VAR 0 3
66212: PPUSH
66213: CALL_OW 74
66217: PPUSH
66218: CALL_OW 296
66222: PUSH
66223: LD_INT 6
66225: LESS
66226: IFFALSE 66242
// SetFuel ( j , 100 ) else
66228: LD_VAR 0 3
66232: PPUSH
66233: LD_INT 100
66235: PPUSH
66236: CALL_OW 240
66240: GO 66448
// if GetFuel ( j ) = 0 then
66242: LD_VAR 0 3
66246: PPUSH
66247: CALL_OW 261
66251: PUSH
66252: LD_INT 0
66254: EQUAL
66255: IFFALSE 66448
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
66257: LD_ADDR_EXP 63
66261: PUSH
66262: LD_EXP 63
66266: PPUSH
66267: LD_VAR 0 2
66271: PPUSH
66272: LD_EXP 63
66276: PUSH
66277: LD_VAR 0 2
66281: ARRAY
66282: PUSH
66283: LD_VAR 0 3
66287: DIFF
66288: PPUSH
66289: CALL_OW 1
66293: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
66294: LD_VAR 0 3
66298: PPUSH
66299: CALL_OW 263
66303: PUSH
66304: LD_INT 1
66306: EQUAL
66307: IFFALSE 66323
// ComExitVehicle ( IsInUnit ( j ) ) ;
66309: LD_VAR 0 3
66313: PPUSH
66314: CALL_OW 310
66318: PPUSH
66319: CALL_OW 121
// if GetControl ( j ) = control_remote then
66323: LD_VAR 0 3
66327: PPUSH
66328: CALL_OW 263
66332: PUSH
66333: LD_INT 2
66335: EQUAL
66336: IFFALSE 66347
// ComUnlink ( j ) ;
66338: LD_VAR 0 3
66342: PPUSH
66343: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
66347: LD_ADDR_VAR 0 8
66351: PUSH
66352: LD_VAR 0 2
66356: PPUSH
66357: LD_INT 3
66359: PPUSH
66360: CALL 74144 0 2
66364: ST_TO_ADDR
// if fac then
66365: LD_VAR 0 8
66369: IFFALSE 66446
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
66371: LD_ADDR_VAR 0 9
66375: PUSH
66376: LD_VAR 0 8
66380: PPUSH
66381: LD_VAR 0 3
66385: PPUSH
66386: CALL_OW 265
66390: PPUSH
66391: LD_VAR 0 3
66395: PPUSH
66396: CALL_OW 262
66400: PPUSH
66401: LD_VAR 0 3
66405: PPUSH
66406: CALL_OW 263
66410: PPUSH
66411: LD_VAR 0 3
66415: PPUSH
66416: CALL_OW 264
66420: PPUSH
66421: CALL 20029 0 5
66425: ST_TO_ADDR
// if components then
66426: LD_VAR 0 9
66430: IFFALSE 66446
// MC_InsertProduceList ( i , components ) ;
66432: LD_VAR 0 2
66436: PPUSH
66437: LD_VAR 0 9
66441: PPUSH
66442: CALL 73711 0 2
// end ; continue ;
66446: GO 66058
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
66448: LD_VAR 0 3
66452: PPUSH
66453: LD_INT 1
66455: PPUSH
66456: CALL_OW 289
66460: PUSH
66461: LD_INT 100
66463: LESS
66464: PUSH
66465: LD_VAR 0 3
66469: PPUSH
66470: CALL_OW 314
66474: NOT
66475: AND
66476: IFFALSE 66505
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
66478: LD_VAR 0 3
66482: PPUSH
66483: LD_VAR 0 5
66487: PUSH
66488: LD_INT 2
66490: ARRAY
66491: PPUSH
66492: LD_VAR 0 5
66496: PUSH
66497: LD_INT 3
66499: ARRAY
66500: PPUSH
66501: CALL_OW 117
// break ;
66505: GO 66509
// end ;
66507: GO 66058
66509: POP
66510: POP
// end ; end ;
66511: GO 65051
66513: POP
66514: POP
// end ;
66515: LD_VAR 0 1
66519: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
// if not mc_bases then
66526: LD_EXP 44
66530: NOT
66531: IFFALSE 66535
// exit ;
66533: GO 66696
// for i = 1 to mc_bases do
66535: LD_ADDR_VAR 0 2
66539: PUSH
66540: DOUBLE
66541: LD_INT 1
66543: DEC
66544: ST_TO_ADDR
66545: LD_EXP 44
66549: PUSH
66550: FOR_TO
66551: IFFALSE 66694
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
66553: LD_ADDR_VAR 0 4
66557: PUSH
66558: LD_EXP 63
66562: PUSH
66563: LD_VAR 0 2
66567: ARRAY
66568: PUSH
66569: LD_EXP 66
66573: PUSH
66574: LD_VAR 0 2
66578: ARRAY
66579: ADD
66580: PPUSH
66581: LD_INT 33
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PPUSH
66591: CALL_OW 72
66595: ST_TO_ADDR
// if tmp then
66596: LD_VAR 0 4
66600: IFFALSE 66692
// for j in tmp do
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: LD_VAR 0 4
66611: PUSH
66612: FOR_IN
66613: IFFALSE 66690
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
66615: LD_VAR 0 3
66619: PPUSH
66620: CALL_OW 312
66624: NOT
66625: PUSH
66626: LD_VAR 0 3
66630: PPUSH
66631: CALL_OW 256
66635: PUSH
66636: LD_INT 250
66638: GREATEREQUAL
66639: AND
66640: IFFALSE 66653
// Connect ( j ) else
66642: LD_VAR 0 3
66646: PPUSH
66647: CALL 25382 0 1
66651: GO 66688
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
66653: LD_VAR 0 3
66657: PPUSH
66658: CALL_OW 256
66662: PUSH
66663: LD_INT 250
66665: LESS
66666: PUSH
66667: LD_VAR 0 3
66671: PPUSH
66672: CALL_OW 312
66676: AND
66677: IFFALSE 66688
// ComUnlink ( j ) ;
66679: LD_VAR 0 3
66683: PPUSH
66684: CALL_OW 136
66688: GO 66612
66690: POP
66691: POP
// end ;
66692: GO 66550
66694: POP
66695: POP
// end ;
66696: LD_VAR 0 1
66700: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
66701: LD_INT 0
66703: PPUSH
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
// if not mc_bases then
66708: LD_EXP 44
66712: NOT
66713: IFFALSE 66717
// exit ;
66715: GO 67177
// for i = 1 to mc_bases do
66717: LD_ADDR_VAR 0 2
66721: PUSH
66722: DOUBLE
66723: LD_INT 1
66725: DEC
66726: ST_TO_ADDR
66727: LD_EXP 44
66731: PUSH
66732: FOR_TO
66733: IFFALSE 67175
// begin if not mc_produce [ i ] then
66735: LD_EXP 65
66739: PUSH
66740: LD_VAR 0 2
66744: ARRAY
66745: NOT
66746: IFFALSE 66750
// continue ;
66748: GO 66732
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66750: LD_ADDR_VAR 0 5
66754: PUSH
66755: LD_EXP 44
66759: PUSH
66760: LD_VAR 0 2
66764: ARRAY
66765: PPUSH
66766: LD_INT 30
66768: PUSH
66769: LD_INT 3
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PPUSH
66776: CALL_OW 72
66780: ST_TO_ADDR
// if not fac then
66781: LD_VAR 0 5
66785: NOT
66786: IFFALSE 66790
// continue ;
66788: GO 66732
// for j in fac do
66790: LD_ADDR_VAR 0 3
66794: PUSH
66795: LD_VAR 0 5
66799: PUSH
66800: FOR_IN
66801: IFFALSE 67171
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
66803: LD_VAR 0 3
66807: PPUSH
66808: CALL_OW 461
66812: PUSH
66813: LD_INT 2
66815: NONEQUAL
66816: PUSH
66817: LD_VAR 0 3
66821: PPUSH
66822: LD_INT 15
66824: PPUSH
66825: CALL 25055 0 2
66829: PUSH
66830: LD_INT 4
66832: ARRAY
66833: OR
66834: PUSH
66835: LD_VAR 0 3
66839: PPUSH
66840: CALL_OW 313
66844: PUSH
66845: LD_INT 0
66847: EQUAL
66848: OR
66849: IFFALSE 66853
// continue ;
66851: GO 66800
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
66853: LD_VAR 0 3
66857: PPUSH
66858: LD_EXP 65
66862: PUSH
66863: LD_VAR 0 2
66867: ARRAY
66868: PUSH
66869: LD_INT 1
66871: ARRAY
66872: PUSH
66873: LD_INT 1
66875: ARRAY
66876: PPUSH
66877: LD_EXP 65
66881: PUSH
66882: LD_VAR 0 2
66886: ARRAY
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PUSH
66892: LD_INT 2
66894: ARRAY
66895: PPUSH
66896: LD_EXP 65
66900: PUSH
66901: LD_VAR 0 2
66905: ARRAY
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PUSH
66911: LD_INT 3
66913: ARRAY
66914: PPUSH
66915: LD_EXP 65
66919: PUSH
66920: LD_VAR 0 2
66924: ARRAY
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PUSH
66930: LD_INT 4
66932: ARRAY
66933: PPUSH
66934: CALL_OW 448
66938: PUSH
66939: LD_VAR 0 3
66943: PPUSH
66944: LD_EXP 65
66948: PUSH
66949: LD_VAR 0 2
66953: ARRAY
66954: PUSH
66955: LD_INT 1
66957: ARRAY
66958: PUSH
66959: LD_INT 1
66961: ARRAY
66962: PUSH
66963: LD_EXP 65
66967: PUSH
66968: LD_VAR 0 2
66972: ARRAY
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: PUSH
66978: LD_INT 2
66980: ARRAY
66981: PUSH
66982: LD_EXP 65
66986: PUSH
66987: LD_VAR 0 2
66991: ARRAY
66992: PUSH
66993: LD_INT 1
66995: ARRAY
66996: PUSH
66997: LD_INT 3
66999: ARRAY
67000: PUSH
67001: LD_EXP 65
67005: PUSH
67006: LD_VAR 0 2
67010: ARRAY
67011: PUSH
67012: LD_INT 1
67014: ARRAY
67015: PUSH
67016: LD_INT 4
67018: ARRAY
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: PPUSH
67026: CALL 28596 0 2
67030: AND
67031: IFFALSE 67169
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
67033: LD_VAR 0 3
67037: PPUSH
67038: LD_EXP 65
67042: PUSH
67043: LD_VAR 0 2
67047: ARRAY
67048: PUSH
67049: LD_INT 1
67051: ARRAY
67052: PUSH
67053: LD_INT 1
67055: ARRAY
67056: PPUSH
67057: LD_EXP 65
67061: PUSH
67062: LD_VAR 0 2
67066: ARRAY
67067: PUSH
67068: LD_INT 1
67070: ARRAY
67071: PUSH
67072: LD_INT 2
67074: ARRAY
67075: PPUSH
67076: LD_EXP 65
67080: PUSH
67081: LD_VAR 0 2
67085: ARRAY
67086: PUSH
67087: LD_INT 1
67089: ARRAY
67090: PUSH
67091: LD_INT 3
67093: ARRAY
67094: PPUSH
67095: LD_EXP 65
67099: PUSH
67100: LD_VAR 0 2
67104: ARRAY
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: PUSH
67110: LD_INT 4
67112: ARRAY
67113: PPUSH
67114: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
67118: LD_ADDR_VAR 0 4
67122: PUSH
67123: LD_EXP 65
67127: PUSH
67128: LD_VAR 0 2
67132: ARRAY
67133: PPUSH
67134: LD_INT 1
67136: PPUSH
67137: CALL_OW 3
67141: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
67142: LD_ADDR_EXP 65
67146: PUSH
67147: LD_EXP 65
67151: PPUSH
67152: LD_VAR 0 2
67156: PPUSH
67157: LD_VAR 0 4
67161: PPUSH
67162: CALL_OW 1
67166: ST_TO_ADDR
// break ;
67167: GO 67171
// end ; end ;
67169: GO 66800
67171: POP
67172: POP
// end ;
67173: GO 66732
67175: POP
67176: POP
// end ;
67177: LD_VAR 0 1
67181: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
67182: LD_INT 0
67184: PPUSH
67185: PPUSH
67186: PPUSH
// if not mc_bases then
67187: LD_EXP 44
67191: NOT
67192: IFFALSE 67196
// exit ;
67194: GO 67285
// for i = 1 to mc_bases do
67196: LD_ADDR_VAR 0 2
67200: PUSH
67201: DOUBLE
67202: LD_INT 1
67204: DEC
67205: ST_TO_ADDR
67206: LD_EXP 44
67210: PUSH
67211: FOR_TO
67212: IFFALSE 67283
// begin if mc_attack [ i ] then
67214: LD_EXP 64
67218: PUSH
67219: LD_VAR 0 2
67223: ARRAY
67224: IFFALSE 67281
// begin tmp := mc_attack [ i ] [ 1 ] ;
67226: LD_ADDR_VAR 0 3
67230: PUSH
67231: LD_EXP 64
67235: PUSH
67236: LD_VAR 0 2
67240: ARRAY
67241: PUSH
67242: LD_INT 1
67244: ARRAY
67245: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
67246: LD_ADDR_EXP 64
67250: PUSH
67251: LD_EXP 64
67255: PPUSH
67256: LD_VAR 0 2
67260: PPUSH
67261: EMPTY
67262: PPUSH
67263: CALL_OW 1
67267: ST_TO_ADDR
// Attack ( tmp ) ;
67268: LD_VAR 0 3
67272: PPUSH
67273: CALL 50700 0 1
// exit ;
67277: POP
67278: POP
67279: GO 67285
// end ; end ;
67281: GO 67211
67283: POP
67284: POP
// end ;
67285: LD_VAR 0 1
67289: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
67290: LD_INT 0
67292: PPUSH
67293: PPUSH
67294: PPUSH
67295: PPUSH
67296: PPUSH
67297: PPUSH
67298: PPUSH
// if not mc_bases then
67299: LD_EXP 44
67303: NOT
67304: IFFALSE 67308
// exit ;
67306: GO 67683
// for i = 1 to mc_bases do
67308: LD_ADDR_VAR 0 2
67312: PUSH
67313: DOUBLE
67314: LD_INT 1
67316: DEC
67317: ST_TO_ADDR
67318: LD_EXP 44
67322: PUSH
67323: FOR_TO
67324: IFFALSE 67681
// begin if not mc_bases [ i ] then
67326: LD_EXP 44
67330: PUSH
67331: LD_VAR 0 2
67335: ARRAY
67336: NOT
67337: IFFALSE 67341
// continue ;
67339: GO 67323
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
67341: LD_ADDR_VAR 0 7
67345: PUSH
67346: LD_EXP 44
67350: PUSH
67351: LD_VAR 0 2
67355: ARRAY
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: PPUSH
67361: CALL 19333 0 1
67365: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
67366: LD_ADDR_EXP 67
67370: PUSH
67371: LD_EXP 67
67375: PPUSH
67376: LD_VAR 0 2
67380: PPUSH
67381: LD_EXP 44
67385: PUSH
67386: LD_VAR 0 2
67390: ARRAY
67391: PUSH
67392: LD_INT 1
67394: ARRAY
67395: PPUSH
67396: CALL_OW 255
67400: PPUSH
67401: LD_EXP 69
67405: PUSH
67406: LD_VAR 0 2
67410: ARRAY
67411: PPUSH
67412: CALL 17293 0 2
67416: PPUSH
67417: CALL_OW 1
67421: ST_TO_ADDR
// if not mc_scan [ i ] then
67422: LD_EXP 67
67426: PUSH
67427: LD_VAR 0 2
67431: ARRAY
67432: NOT
67433: IFFALSE 67588
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67435: LD_ADDR_VAR 0 4
67439: PUSH
67440: LD_EXP 44
67444: PUSH
67445: LD_VAR 0 2
67449: ARRAY
67450: PPUSH
67451: LD_INT 2
67453: PUSH
67454: LD_INT 25
67456: PUSH
67457: LD_INT 5
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 25
67466: PUSH
67467: LD_INT 8
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 25
67476: PUSH
67477: LD_INT 9
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: PPUSH
67490: CALL_OW 72
67494: ST_TO_ADDR
// if not tmp then
67495: LD_VAR 0 4
67499: NOT
67500: IFFALSE 67504
// continue ;
67502: GO 67323
// for j in tmp do
67504: LD_ADDR_VAR 0 3
67508: PUSH
67509: LD_VAR 0 4
67513: PUSH
67514: FOR_IN
67515: IFFALSE 67586
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
67517: LD_VAR 0 3
67521: PPUSH
67522: CALL_OW 310
67526: PPUSH
67527: CALL_OW 266
67531: PUSH
67532: LD_INT 5
67534: EQUAL
67535: PUSH
67536: LD_VAR 0 3
67540: PPUSH
67541: CALL_OW 257
67545: PUSH
67546: LD_INT 1
67548: EQUAL
67549: AND
67550: PUSH
67551: LD_VAR 0 3
67555: PPUSH
67556: CALL_OW 459
67560: NOT
67561: AND
67562: PUSH
67563: LD_VAR 0 7
67567: AND
67568: IFFALSE 67584
// ComChangeProfession ( j , class ) ;
67570: LD_VAR 0 3
67574: PPUSH
67575: LD_VAR 0 7
67579: PPUSH
67580: CALL_OW 123
67584: GO 67514
67586: POP
67587: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
67588: LD_EXP 67
67592: PUSH
67593: LD_VAR 0 2
67597: ARRAY
67598: PUSH
67599: LD_EXP 66
67603: PUSH
67604: LD_VAR 0 2
67608: ARRAY
67609: AND
67610: IFFALSE 67679
// begin tmp := mc_defender [ i ] ;
67612: LD_ADDR_VAR 0 4
67616: PUSH
67617: LD_EXP 66
67621: PUSH
67622: LD_VAR 0 2
67626: ARRAY
67627: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
67628: LD_ADDR_EXP 66
67632: PUSH
67633: LD_EXP 66
67637: PPUSH
67638: LD_VAR 0 2
67642: PPUSH
67643: EMPTY
67644: PPUSH
67645: CALL_OW 1
67649: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_VAR 0 4
67659: PPUSH
67660: LD_EXP 67
67664: PUSH
67665: LD_VAR 0 2
67669: ARRAY
67670: PPUSH
67671: CALL 17826 0 3
// exit ;
67675: POP
67676: POP
67677: GO 67683
// end ; end ;
67679: GO 67323
67681: POP
67682: POP
// end ;
67683: LD_VAR 0 1
67687: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
67695: PPUSH
67696: PPUSH
67697: PPUSH
67698: PPUSH
// if not mc_bases then
67699: LD_EXP 44
67703: NOT
67704: IFFALSE 67708
// exit ;
67706: GO 68652
// for i = 1 to mc_bases do
67708: LD_ADDR_VAR 0 2
67712: PUSH
67713: DOUBLE
67714: LD_INT 1
67716: DEC
67717: ST_TO_ADDR
67718: LD_EXP 44
67722: PUSH
67723: FOR_TO
67724: IFFALSE 68650
// begin tmp := mc_lab [ i ] ;
67726: LD_ADDR_VAR 0 6
67730: PUSH
67731: LD_EXP 77
67735: PUSH
67736: LD_VAR 0 2
67740: ARRAY
67741: ST_TO_ADDR
// if not tmp then
67742: LD_VAR 0 6
67746: NOT
67747: IFFALSE 67751
// continue ;
67749: GO 67723
// for j in tmp do
67751: LD_ADDR_VAR 0 3
67755: PUSH
67756: LD_VAR 0 6
67760: PUSH
67761: FOR_IN
67762: IFFALSE 68646
// begin side := GetSide ( j ) ;
67764: LD_ADDR_VAR 0 4
67768: PUSH
67769: LD_VAR 0 3
67773: PPUSH
67774: CALL_OW 255
67778: ST_TO_ADDR
// if not mc_tech [ side ] then
67779: LD_EXP 71
67783: PUSH
67784: LD_VAR 0 4
67788: ARRAY
67789: NOT
67790: IFFALSE 67794
// continue ;
67792: GO 67761
// if BuildingStatus ( j ) = bs_idle then
67794: LD_VAR 0 3
67798: PPUSH
67799: CALL_OW 461
67803: PUSH
67804: LD_INT 2
67806: EQUAL
67807: IFFALSE 67880
// for t in mc_tech [ side ] do
67809: LD_ADDR_VAR 0 5
67813: PUSH
67814: LD_EXP 71
67818: PUSH
67819: LD_VAR 0 4
67823: ARRAY
67824: PUSH
67825: FOR_IN
67826: IFFALSE 67878
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
67828: LD_VAR 0 3
67832: PPUSH
67833: LD_VAR 0 5
67837: PPUSH
67838: CALL_OW 430
67842: PUSH
67843: LD_VAR 0 4
67847: PPUSH
67848: LD_VAR 0 5
67852: PPUSH
67853: CALL 16398 0 2
67857: AND
67858: IFFALSE 67876
// begin ComResearch ( j , t ) ;
67860: LD_VAR 0 3
67864: PPUSH
67865: LD_VAR 0 5
67869: PPUSH
67870: CALL_OW 124
// break ;
67874: GO 67878
// end ;
67876: GO 67825
67878: POP
67879: POP
// if BuildingStatus ( j ) = bs_need_ape then
67880: LD_VAR 0 3
67884: PPUSH
67885: CALL_OW 461
67889: PUSH
67890: LD_INT 10
67892: EQUAL
67893: IFFALSE 68481
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
67895: LD_EXP 73
67899: PUSH
67900: LD_VAR 0 2
67904: ARRAY
67905: NOT
67906: PUSH
67907: LD_EXP 74
67911: PUSH
67912: LD_VAR 0 2
67916: ARRAY
67917: NOT
67918: AND
67919: PUSH
67920: LD_EXP 71
67924: PUSH
67925: LD_VAR 0 4
67929: ARRAY
67930: PUSH
67931: LD_INT 1
67933: GREATER
67934: AND
67935: IFFALSE 68066
// begin ComCancel ( j ) ;
67937: LD_VAR 0 3
67941: PPUSH
67942: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
67946: LD_ADDR_EXP 71
67950: PUSH
67951: LD_EXP 71
67955: PPUSH
67956: LD_VAR 0 4
67960: PPUSH
67961: LD_EXP 71
67965: PUSH
67966: LD_VAR 0 4
67970: ARRAY
67971: PPUSH
67972: LD_EXP 71
67976: PUSH
67977: LD_VAR 0 4
67981: ARRAY
67982: PUSH
67983: LD_INT 1
67985: MINUS
67986: PPUSH
67987: LD_EXP 71
67991: PUSH
67992: LD_VAR 0 4
67996: ARRAY
67997: PPUSH
67998: LD_INT 0
68000: PPUSH
68001: CALL 21847 0 4
68005: PPUSH
68006: CALL_OW 1
68010: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
68011: LD_ADDR_EXP 71
68015: PUSH
68016: LD_EXP 71
68020: PPUSH
68021: LD_VAR 0 4
68025: PPUSH
68026: LD_EXP 71
68030: PUSH
68031: LD_VAR 0 4
68035: ARRAY
68036: PPUSH
68037: LD_EXP 71
68041: PUSH
68042: LD_VAR 0 4
68046: ARRAY
68047: PPUSH
68048: LD_INT 1
68050: PPUSH
68051: LD_INT 0
68053: PPUSH
68054: CALL 21847 0 4
68058: PPUSH
68059: CALL_OW 1
68063: ST_TO_ADDR
// continue ;
68064: GO 67761
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
68066: LD_EXP 73
68070: PUSH
68071: LD_VAR 0 2
68075: ARRAY
68076: PUSH
68077: LD_EXP 74
68081: PUSH
68082: LD_VAR 0 2
68086: ARRAY
68087: NOT
68088: AND
68089: IFFALSE 68216
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
68091: LD_ADDR_EXP 74
68095: PUSH
68096: LD_EXP 74
68100: PPUSH
68101: LD_VAR 0 2
68105: PUSH
68106: LD_EXP 74
68110: PUSH
68111: LD_VAR 0 2
68115: ARRAY
68116: PUSH
68117: LD_INT 1
68119: PLUS
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PPUSH
68125: LD_EXP 73
68129: PUSH
68130: LD_VAR 0 2
68134: ARRAY
68135: PUSH
68136: LD_INT 1
68138: ARRAY
68139: PPUSH
68140: CALL 22864 0 3
68144: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
68145: LD_EXP 73
68149: PUSH
68150: LD_VAR 0 2
68154: ARRAY
68155: PUSH
68156: LD_INT 1
68158: ARRAY
68159: PPUSH
68160: LD_INT 112
68162: PPUSH
68163: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
68167: LD_ADDR_VAR 0 9
68171: PUSH
68172: LD_EXP 73
68176: PUSH
68177: LD_VAR 0 2
68181: ARRAY
68182: PPUSH
68183: LD_INT 1
68185: PPUSH
68186: CALL_OW 3
68190: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
68191: LD_ADDR_EXP 73
68195: PUSH
68196: LD_EXP 73
68200: PPUSH
68201: LD_VAR 0 2
68205: PPUSH
68206: LD_VAR 0 9
68210: PPUSH
68211: CALL_OW 1
68215: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
68216: LD_EXP 73
68220: PUSH
68221: LD_VAR 0 2
68225: ARRAY
68226: PUSH
68227: LD_EXP 74
68231: PUSH
68232: LD_VAR 0 2
68236: ARRAY
68237: AND
68238: PUSH
68239: LD_EXP 74
68243: PUSH
68244: LD_VAR 0 2
68248: ARRAY
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: PPUSH
68254: CALL_OW 310
68258: NOT
68259: AND
68260: PUSH
68261: LD_VAR 0 3
68265: PPUSH
68266: CALL_OW 313
68270: PUSH
68271: LD_INT 6
68273: EQUAL
68274: AND
68275: IFFALSE 68331
// begin tmp2 := UnitsInside ( j ) ;
68277: LD_ADDR_VAR 0 9
68281: PUSH
68282: LD_VAR 0 3
68286: PPUSH
68287: CALL_OW 313
68291: ST_TO_ADDR
// if tmp2 = 6 then
68292: LD_VAR 0 9
68296: PUSH
68297: LD_INT 6
68299: EQUAL
68300: IFFALSE 68331
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
68302: LD_VAR 0 9
68306: PUSH
68307: LD_INT 1
68309: ARRAY
68310: PPUSH
68311: LD_INT 112
68313: PPUSH
68314: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
68318: LD_VAR 0 9
68322: PUSH
68323: LD_INT 1
68325: ARRAY
68326: PPUSH
68327: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
68331: LD_EXP 74
68335: PUSH
68336: LD_VAR 0 2
68340: ARRAY
68341: PUSH
68342: LD_EXP 74
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PPUSH
68357: CALL_OW 314
68361: NOT
68362: AND
68363: PUSH
68364: LD_EXP 74
68368: PUSH
68369: LD_VAR 0 2
68373: ARRAY
68374: PUSH
68375: LD_INT 1
68377: ARRAY
68378: PPUSH
68379: CALL_OW 310
68383: NOT
68384: AND
68385: IFFALSE 68411
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
68387: LD_EXP 74
68391: PUSH
68392: LD_VAR 0 2
68396: ARRAY
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PPUSH
68402: LD_VAR 0 3
68406: PPUSH
68407: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
68411: LD_EXP 74
68415: PUSH
68416: LD_VAR 0 2
68420: ARRAY
68421: PUSH
68422: LD_INT 1
68424: ARRAY
68425: PPUSH
68426: CALL_OW 310
68430: PUSH
68431: LD_EXP 74
68435: PUSH
68436: LD_VAR 0 2
68440: ARRAY
68441: PUSH
68442: LD_INT 1
68444: ARRAY
68445: PPUSH
68446: CALL_OW 310
68450: PPUSH
68451: CALL_OW 461
68455: PUSH
68456: LD_INT 3
68458: NONEQUAL
68459: AND
68460: IFFALSE 68481
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
68462: LD_EXP 74
68466: PUSH
68467: LD_VAR 0 2
68471: ARRAY
68472: PUSH
68473: LD_INT 1
68475: ARRAY
68476: PPUSH
68477: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
68481: LD_VAR 0 3
68485: PPUSH
68486: CALL_OW 461
68490: PUSH
68491: LD_INT 6
68493: EQUAL
68494: PUSH
68495: LD_VAR 0 6
68499: PUSH
68500: LD_INT 1
68502: GREATER
68503: AND
68504: IFFALSE 68644
// begin sci := [ ] ;
68506: LD_ADDR_VAR 0 8
68510: PUSH
68511: EMPTY
68512: ST_TO_ADDR
// for x in tmp diff j do
68513: LD_ADDR_VAR 0 7
68517: PUSH
68518: LD_VAR 0 6
68522: PUSH
68523: LD_VAR 0 3
68527: DIFF
68528: PUSH
68529: FOR_IN
68530: IFFALSE 68570
// begin if BuildingStatus ( x ) = bs_idle then
68532: LD_VAR 0 7
68536: PPUSH
68537: CALL_OW 461
68541: PUSH
68542: LD_INT 2
68544: EQUAL
68545: IFFALSE 68568
// sci := sci ^ UnitsInside ( x ) ;
68547: LD_ADDR_VAR 0 8
68551: PUSH
68552: LD_VAR 0 8
68556: PUSH
68557: LD_VAR 0 7
68561: PPUSH
68562: CALL_OW 313
68566: ADD
68567: ST_TO_ADDR
// end ;
68568: GO 68529
68570: POP
68571: POP
// if not sci then
68572: LD_VAR 0 8
68576: NOT
68577: IFFALSE 68581
// continue ;
68579: GO 67761
// for x in sci do
68581: LD_ADDR_VAR 0 7
68585: PUSH
68586: LD_VAR 0 8
68590: PUSH
68591: FOR_IN
68592: IFFALSE 68642
// if IsInUnit ( x ) and not HasTask ( x ) then
68594: LD_VAR 0 7
68598: PPUSH
68599: CALL_OW 310
68603: PUSH
68604: LD_VAR 0 7
68608: PPUSH
68609: CALL_OW 314
68613: NOT
68614: AND
68615: IFFALSE 68640
// begin ComExitBuilding ( x ) ;
68617: LD_VAR 0 7
68621: PPUSH
68622: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
68626: LD_VAR 0 7
68630: PPUSH
68631: LD_VAR 0 3
68635: PPUSH
68636: CALL_OW 180
// end ;
68640: GO 68591
68642: POP
68643: POP
// end ; end ;
68644: GO 67761
68646: POP
68647: POP
// end ;
68648: GO 67723
68650: POP
68651: POP
// end ;
68652: LD_VAR 0 1
68656: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
68657: LD_INT 0
68659: PPUSH
68660: PPUSH
68661: PPUSH
68662: PPUSH
68663: PPUSH
68664: PPUSH
68665: PPUSH
68666: PPUSH
// if not mc_bases or not mc_parking then
68667: LD_EXP 44
68671: NOT
68672: PUSH
68673: LD_EXP 68
68677: NOT
68678: OR
68679: IFFALSE 68683
// exit ;
68681: GO 69341
// for i = 1 to mc_bases do
68683: LD_ADDR_VAR 0 2
68687: PUSH
68688: DOUBLE
68689: LD_INT 1
68691: DEC
68692: ST_TO_ADDR
68693: LD_EXP 44
68697: PUSH
68698: FOR_TO
68699: IFFALSE 69339
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
68701: LD_EXP 44
68705: PUSH
68706: LD_VAR 0 2
68710: ARRAY
68711: NOT
68712: PUSH
68713: LD_EXP 68
68717: PUSH
68718: LD_VAR 0 2
68722: ARRAY
68723: NOT
68724: OR
68725: IFFALSE 68729
// continue ;
68727: GO 68698
// if mc_scan [ i ] then
68729: LD_EXP 67
68733: PUSH
68734: LD_VAR 0 2
68738: ARRAY
68739: IFFALSE 68765
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
68741: LD_ADDR_EXP 56
68745: PUSH
68746: LD_EXP 56
68750: PPUSH
68751: LD_VAR 0 2
68755: PPUSH
68756: EMPTY
68757: PPUSH
68758: CALL_OW 1
68762: ST_TO_ADDR
// continue ;
68763: GO 68698
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
68765: LD_ADDR_VAR 0 5
68769: PUSH
68770: LD_EXP 44
68774: PUSH
68775: LD_VAR 0 2
68779: ARRAY
68780: PUSH
68781: LD_INT 1
68783: ARRAY
68784: PPUSH
68785: CALL_OW 255
68789: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68790: LD_ADDR_VAR 0 6
68794: PUSH
68795: LD_EXP 44
68799: PUSH
68800: LD_VAR 0 2
68804: ARRAY
68805: PPUSH
68806: LD_INT 30
68808: PUSH
68809: LD_INT 3
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PPUSH
68816: CALL_OW 72
68820: ST_TO_ADDR
// if not fac then
68821: LD_VAR 0 6
68825: NOT
68826: IFFALSE 68877
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68828: LD_ADDR_VAR 0 6
68832: PUSH
68833: LD_EXP 44
68837: PUSH
68838: LD_VAR 0 2
68842: ARRAY
68843: PPUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 30
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 30
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: LIST
68871: PPUSH
68872: CALL_OW 72
68876: ST_TO_ADDR
// if not fac then
68877: LD_VAR 0 6
68881: NOT
68882: IFFALSE 68886
// continue ;
68884: GO 68698
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
68886: LD_ADDR_VAR 0 7
68890: PUSH
68891: LD_EXP 68
68895: PUSH
68896: LD_VAR 0 2
68900: ARRAY
68901: PPUSH
68902: LD_INT 22
68904: PUSH
68905: LD_VAR 0 5
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 21
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: LD_INT 24
68929: PUSH
68930: LD_INT 1000
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: PPUSH
68946: CALL_OW 70
68950: PUSH
68951: LD_INT 22
68953: PUSH
68954: LD_VAR 0 5
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 91
68965: PUSH
68966: LD_VAR 0 6
68970: PUSH
68971: LD_INT 1
68973: ARRAY
68974: PUSH
68975: LD_INT 25
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 21
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 3
68995: PUSH
68996: LD_INT 24
68998: PUSH
68999: LD_INT 1000
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: PPUSH
69016: CALL_OW 69
69020: UNION
69021: ST_TO_ADDR
// if not vehs then
69022: LD_VAR 0 7
69026: NOT
69027: IFFALSE 69053
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
69029: LD_ADDR_EXP 56
69033: PUSH
69034: LD_EXP 56
69038: PPUSH
69039: LD_VAR 0 2
69043: PPUSH
69044: EMPTY
69045: PPUSH
69046: CALL_OW 1
69050: ST_TO_ADDR
// continue ;
69051: GO 68698
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69053: LD_ADDR_VAR 0 8
69057: PUSH
69058: LD_EXP 44
69062: PUSH
69063: LD_VAR 0 2
69067: ARRAY
69068: PPUSH
69069: LD_INT 30
69071: PUSH
69072: LD_INT 3
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PPUSH
69079: CALL_OW 72
69083: ST_TO_ADDR
// if tmp then
69084: LD_VAR 0 8
69088: IFFALSE 69191
// begin for j in tmp do
69090: LD_ADDR_VAR 0 3
69094: PUSH
69095: LD_VAR 0 8
69099: PUSH
69100: FOR_IN
69101: IFFALSE 69189
// for k in UnitsInside ( j ) do
69103: LD_ADDR_VAR 0 4
69107: PUSH
69108: LD_VAR 0 3
69112: PPUSH
69113: CALL_OW 313
69117: PUSH
69118: FOR_IN
69119: IFFALSE 69185
// if k then
69121: LD_VAR 0 4
69125: IFFALSE 69183
// if not k in mc_repair_vehicle [ i ] then
69127: LD_VAR 0 4
69131: PUSH
69132: LD_EXP 56
69136: PUSH
69137: LD_VAR 0 2
69141: ARRAY
69142: IN
69143: NOT
69144: IFFALSE 69183
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
69146: LD_ADDR_EXP 56
69150: PUSH
69151: LD_EXP 56
69155: PPUSH
69156: LD_VAR 0 2
69160: PPUSH
69161: LD_EXP 56
69165: PUSH
69166: LD_VAR 0 2
69170: ARRAY
69171: PUSH
69172: LD_VAR 0 4
69176: UNION
69177: PPUSH
69178: CALL_OW 1
69182: ST_TO_ADDR
69183: GO 69118
69185: POP
69186: POP
69187: GO 69100
69189: POP
69190: POP
// end ; if not mc_repair_vehicle [ i ] then
69191: LD_EXP 56
69195: PUSH
69196: LD_VAR 0 2
69200: ARRAY
69201: NOT
69202: IFFALSE 69206
// continue ;
69204: GO 68698
// for j in mc_repair_vehicle [ i ] do
69206: LD_ADDR_VAR 0 3
69210: PUSH
69211: LD_EXP 56
69215: PUSH
69216: LD_VAR 0 2
69220: ARRAY
69221: PUSH
69222: FOR_IN
69223: IFFALSE 69335
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69225: LD_VAR 0 3
69229: PPUSH
69230: CALL_OW 311
69234: NOT
69235: PUSH
69236: LD_VAR 0 3
69240: PUSH
69241: LD_EXP 47
69245: PUSH
69246: LD_VAR 0 2
69250: ARRAY
69251: PUSH
69252: LD_INT 1
69254: ARRAY
69255: IN
69256: NOT
69257: AND
69258: PUSH
69259: LD_VAR 0 3
69263: PUSH
69264: LD_EXP 47
69268: PUSH
69269: LD_VAR 0 2
69273: ARRAY
69274: PUSH
69275: LD_INT 2
69277: ARRAY
69278: IN
69279: NOT
69280: AND
69281: IFFALSE 69333
// begin if IsInUnit ( j ) then
69283: LD_VAR 0 3
69287: PPUSH
69288: CALL_OW 310
69292: IFFALSE 69303
// ComExitBuilding ( j ) ;
69294: LD_VAR 0 3
69298: PPUSH
69299: CALL_OW 122
// if not HasTask ( j ) then
69303: LD_VAR 0 3
69307: PPUSH
69308: CALL_OW 314
69312: NOT
69313: IFFALSE 69333
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
69315: LD_VAR 0 3
69319: PPUSH
69320: LD_VAR 0 7
69324: PUSH
69325: LD_INT 1
69327: ARRAY
69328: PPUSH
69329: CALL_OW 189
// end ; end ;
69333: GO 69222
69335: POP
69336: POP
// end ;
69337: GO 68698
69339: POP
69340: POP
// end ;
69341: LD_VAR 0 1
69345: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
69346: LD_INT 0
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
69356: PPUSH
69357: PPUSH
69358: PPUSH
// if not mc_bases then
69359: LD_EXP 44
69363: NOT
69364: IFFALSE 69368
// exit ;
69366: GO 70104
// for i = 1 to mc_bases do
69368: LD_ADDR_VAR 0 2
69372: PUSH
69373: DOUBLE
69374: LD_INT 1
69376: DEC
69377: ST_TO_ADDR
69378: LD_EXP 44
69382: PUSH
69383: FOR_TO
69384: IFFALSE 70102
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
69386: LD_EXP 72
69390: PUSH
69391: LD_VAR 0 2
69395: ARRAY
69396: NOT
69397: PUSH
69398: LD_EXP 47
69402: PUSH
69403: LD_VAR 0 2
69407: ARRAY
69408: PUSH
69409: LD_INT 1
69411: ARRAY
69412: OR
69413: PUSH
69414: LD_EXP 47
69418: PUSH
69419: LD_VAR 0 2
69423: ARRAY
69424: PUSH
69425: LD_INT 2
69427: ARRAY
69428: OR
69429: PUSH
69430: LD_EXP 70
69434: PUSH
69435: LD_VAR 0 2
69439: ARRAY
69440: PPUSH
69441: LD_INT 1
69443: PPUSH
69444: CALL_OW 325
69448: NOT
69449: OR
69450: PUSH
69451: LD_EXP 67
69455: PUSH
69456: LD_VAR 0 2
69460: ARRAY
69461: OR
69462: IFFALSE 69466
// continue ;
69464: GO 69383
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
69466: LD_ADDR_VAR 0 8
69470: PUSH
69471: LD_EXP 44
69475: PUSH
69476: LD_VAR 0 2
69480: ARRAY
69481: PPUSH
69482: LD_INT 25
69484: PUSH
69485: LD_INT 4
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 50
69494: PUSH
69495: EMPTY
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: LD_INT 60
69503: PUSH
69504: EMPTY
69505: LIST
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 72
69520: PUSH
69521: LD_EXP 48
69525: PUSH
69526: LD_VAR 0 2
69530: ARRAY
69531: DIFF
69532: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69533: LD_ADDR_VAR 0 9
69537: PUSH
69538: LD_EXP 44
69542: PUSH
69543: LD_VAR 0 2
69547: ARRAY
69548: PPUSH
69549: LD_INT 2
69551: PUSH
69552: LD_INT 30
69554: PUSH
69555: LD_INT 0
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 30
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: LIST
69576: PPUSH
69577: CALL_OW 72
69581: ST_TO_ADDR
// if not tmp or not dep then
69582: LD_VAR 0 8
69586: NOT
69587: PUSH
69588: LD_VAR 0 9
69592: NOT
69593: OR
69594: IFFALSE 69598
// continue ;
69596: GO 69383
// side := GetSide ( tmp [ 1 ] ) ;
69598: LD_ADDR_VAR 0 11
69602: PUSH
69603: LD_VAR 0 8
69607: PUSH
69608: LD_INT 1
69610: ARRAY
69611: PPUSH
69612: CALL_OW 255
69616: ST_TO_ADDR
// dep := dep [ 1 ] ;
69617: LD_ADDR_VAR 0 9
69621: PUSH
69622: LD_VAR 0 9
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
69631: LD_ADDR_VAR 0 7
69635: PUSH
69636: LD_EXP 72
69640: PUSH
69641: LD_VAR 0 2
69645: ARRAY
69646: PPUSH
69647: LD_INT 22
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 25
69659: PUSH
69660: LD_INT 12
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PPUSH
69671: CALL_OW 70
69675: PUSH
69676: LD_INT 22
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 25
69688: PUSH
69689: LD_INT 12
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 91
69698: PUSH
69699: LD_VAR 0 9
69703: PUSH
69704: LD_INT 20
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: PPUSH
69717: CALL_OW 69
69721: UNION
69722: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
69723: LD_ADDR_VAR 0 10
69727: PUSH
69728: LD_EXP 72
69732: PUSH
69733: LD_VAR 0 2
69737: ARRAY
69738: PPUSH
69739: LD_INT 81
69741: PUSH
69742: LD_VAR 0 11
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PPUSH
69751: CALL_OW 70
69755: ST_TO_ADDR
// if not apes or danger_at_area then
69756: LD_VAR 0 7
69760: NOT
69761: PUSH
69762: LD_VAR 0 10
69766: OR
69767: IFFALSE 69817
// begin if mc_taming [ i ] then
69769: LD_EXP 75
69773: PUSH
69774: LD_VAR 0 2
69778: ARRAY
69779: IFFALSE 69815
// begin MC_Reset ( i , 121 ) ;
69781: LD_VAR 0 2
69785: PPUSH
69786: LD_INT 121
69788: PPUSH
69789: CALL 60612 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
69793: LD_ADDR_EXP 75
69797: PUSH
69798: LD_EXP 75
69802: PPUSH
69803: LD_VAR 0 2
69807: PPUSH
69808: EMPTY
69809: PPUSH
69810: CALL_OW 1
69814: ST_TO_ADDR
// end ; continue ;
69815: GO 69383
// end ; for j in tmp do
69817: LD_ADDR_VAR 0 3
69821: PUSH
69822: LD_VAR 0 8
69826: PUSH
69827: FOR_IN
69828: IFFALSE 70098
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
69830: LD_VAR 0 3
69834: PUSH
69835: LD_EXP 75
69839: PUSH
69840: LD_VAR 0 2
69844: ARRAY
69845: IN
69846: NOT
69847: PUSH
69848: LD_EXP 75
69852: PUSH
69853: LD_VAR 0 2
69857: ARRAY
69858: PUSH
69859: LD_INT 3
69861: LESS
69862: AND
69863: IFFALSE 69921
// begin SetTag ( j , 121 ) ;
69865: LD_VAR 0 3
69869: PPUSH
69870: LD_INT 121
69872: PPUSH
69873: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
69877: LD_ADDR_EXP 75
69881: PUSH
69882: LD_EXP 75
69886: PPUSH
69887: LD_VAR 0 2
69891: PUSH
69892: LD_EXP 75
69896: PUSH
69897: LD_VAR 0 2
69901: ARRAY
69902: PUSH
69903: LD_INT 1
69905: PLUS
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PPUSH
69911: LD_VAR 0 3
69915: PPUSH
69916: CALL 22864 0 3
69920: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
69921: LD_VAR 0 3
69925: PUSH
69926: LD_EXP 75
69930: PUSH
69931: LD_VAR 0 2
69935: ARRAY
69936: IN
69937: IFFALSE 70096
// begin if IsInUnit ( j ) then
69939: LD_VAR 0 3
69943: PPUSH
69944: CALL_OW 310
69948: IFFALSE 69959
// ComExitBuilding ( j ) ;
69950: LD_VAR 0 3
69954: PPUSH
69955: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
69959: LD_ADDR_VAR 0 6
69963: PUSH
69964: LD_VAR 0 7
69968: PPUSH
69969: LD_VAR 0 3
69973: PPUSH
69974: CALL_OW 74
69978: ST_TO_ADDR
// if not ape then
69979: LD_VAR 0 6
69983: NOT
69984: IFFALSE 69988
// break ;
69986: GO 70098
// x := GetX ( ape ) ;
69988: LD_ADDR_VAR 0 4
69992: PUSH
69993: LD_VAR 0 6
69997: PPUSH
69998: CALL_OW 250
70002: ST_TO_ADDR
// y := GetY ( ape ) ;
70003: LD_ADDR_VAR 0 5
70007: PUSH
70008: LD_VAR 0 6
70012: PPUSH
70013: CALL_OW 251
70017: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
70018: LD_VAR 0 4
70022: PPUSH
70023: LD_VAR 0 5
70027: PPUSH
70028: CALL_OW 488
70032: NOT
70033: PUSH
70034: LD_VAR 0 11
70038: PPUSH
70039: LD_VAR 0 4
70043: PPUSH
70044: LD_VAR 0 5
70048: PPUSH
70049: LD_INT 20
70051: PPUSH
70052: CALL 23358 0 4
70056: PUSH
70057: LD_INT 4
70059: ARRAY
70060: OR
70061: IFFALSE 70065
// break ;
70063: GO 70098
// if not HasTask ( j ) then
70065: LD_VAR 0 3
70069: PPUSH
70070: CALL_OW 314
70074: NOT
70075: IFFALSE 70096
// ComTameXY ( j , x , y ) ;
70077: LD_VAR 0 3
70081: PPUSH
70082: LD_VAR 0 4
70086: PPUSH
70087: LD_VAR 0 5
70091: PPUSH
70092: CALL_OW 131
// end ; end ;
70096: GO 69827
70098: POP
70099: POP
// end ;
70100: GO 69383
70102: POP
70103: POP
// end ;
70104: LD_VAR 0 1
70108: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
70113: PPUSH
70114: PPUSH
70115: PPUSH
70116: PPUSH
70117: PPUSH
70118: PPUSH
// if not mc_bases then
70119: LD_EXP 44
70123: NOT
70124: IFFALSE 70128
// exit ;
70126: GO 70738
// for i = 1 to mc_bases do
70128: LD_ADDR_VAR 0 2
70132: PUSH
70133: DOUBLE
70134: LD_INT 1
70136: DEC
70137: ST_TO_ADDR
70138: LD_EXP 44
70142: PUSH
70143: FOR_TO
70144: IFFALSE 70736
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
70146: LD_EXP 73
70150: PUSH
70151: LD_VAR 0 2
70155: ARRAY
70156: NOT
70157: PUSH
70158: LD_EXP 73
70162: PUSH
70163: LD_VAR 0 2
70167: ARRAY
70168: PPUSH
70169: LD_INT 25
70171: PUSH
70172: LD_INT 12
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PPUSH
70179: CALL_OW 72
70183: NOT
70184: OR
70185: IFFALSE 70189
// continue ;
70187: GO 70143
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
70189: LD_ADDR_VAR 0 5
70193: PUSH
70194: LD_EXP 73
70198: PUSH
70199: LD_VAR 0 2
70203: ARRAY
70204: PUSH
70205: LD_INT 1
70207: ARRAY
70208: PPUSH
70209: CALL_OW 255
70213: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
70214: LD_VAR 0 5
70218: PPUSH
70219: LD_INT 2
70221: PPUSH
70222: CALL_OW 325
70226: IFFALSE 70471
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
70228: LD_ADDR_VAR 0 4
70232: PUSH
70233: LD_EXP 73
70237: PUSH
70238: LD_VAR 0 2
70242: ARRAY
70243: PPUSH
70244: LD_INT 25
70246: PUSH
70247: LD_INT 16
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PPUSH
70254: CALL_OW 72
70258: ST_TO_ADDR
// if tmp < 6 then
70259: LD_VAR 0 4
70263: PUSH
70264: LD_INT 6
70266: LESS
70267: IFFALSE 70471
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70269: LD_ADDR_VAR 0 6
70273: PUSH
70274: LD_EXP 44
70278: PUSH
70279: LD_VAR 0 2
70283: ARRAY
70284: PPUSH
70285: LD_INT 2
70287: PUSH
70288: LD_INT 30
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 30
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: LIST
70312: PPUSH
70313: CALL_OW 72
70317: ST_TO_ADDR
// if depot then
70318: LD_VAR 0 6
70322: IFFALSE 70471
// begin for j in depot do
70324: LD_ADDR_VAR 0 3
70328: PUSH
70329: LD_VAR 0 6
70333: PUSH
70334: FOR_IN
70335: IFFALSE 70366
// begin if UnitsInside ( j ) < 6 then
70337: LD_VAR 0 3
70341: PPUSH
70342: CALL_OW 313
70346: PUSH
70347: LD_INT 6
70349: LESS
70350: IFFALSE 70364
// begin selected := j ;
70352: LD_ADDR_VAR 0 7
70356: PUSH
70357: LD_VAR 0 3
70361: ST_TO_ADDR
// break ;
70362: GO 70366
// end ; end ;
70364: GO 70334
70366: POP
70367: POP
// if selected then
70368: LD_VAR 0 7
70372: IFFALSE 70471
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
70374: LD_ADDR_VAR 0 3
70378: PUSH
70379: LD_EXP 73
70383: PUSH
70384: LD_VAR 0 2
70388: ARRAY
70389: PPUSH
70390: LD_INT 25
70392: PUSH
70393: LD_INT 12
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PPUSH
70400: CALL_OW 72
70404: PUSH
70405: FOR_IN
70406: IFFALSE 70469
// if not HasTask ( j ) then
70408: LD_VAR 0 3
70412: PPUSH
70413: CALL_OW 314
70417: NOT
70418: IFFALSE 70467
// begin if not IsInUnit ( j ) then
70420: LD_VAR 0 3
70424: PPUSH
70425: CALL_OW 310
70429: NOT
70430: IFFALSE 70446
// ComEnterUnit ( j , selected ) ;
70432: LD_VAR 0 3
70436: PPUSH
70437: LD_VAR 0 7
70441: PPUSH
70442: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
70446: LD_VAR 0 3
70450: PPUSH
70451: LD_INT 16
70453: PPUSH
70454: CALL_OW 183
// AddComExitBuilding ( j ) ;
70458: LD_VAR 0 3
70462: PPUSH
70463: CALL_OW 182
// end ;
70467: GO 70405
70469: POP
70470: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
70471: LD_VAR 0 5
70475: PPUSH
70476: LD_INT 11
70478: PPUSH
70479: CALL_OW 325
70483: IFFALSE 70734
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
70485: LD_ADDR_VAR 0 4
70489: PUSH
70490: LD_EXP 73
70494: PUSH
70495: LD_VAR 0 2
70499: ARRAY
70500: PPUSH
70501: LD_INT 25
70503: PUSH
70504: LD_INT 16
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PPUSH
70511: CALL_OW 72
70515: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
70516: LD_VAR 0 4
70520: PUSH
70521: LD_INT 6
70523: GREATEREQUAL
70524: PUSH
70525: LD_VAR 0 5
70529: PPUSH
70530: LD_INT 2
70532: PPUSH
70533: CALL_OW 325
70537: NOT
70538: OR
70539: IFFALSE 70734
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
70541: LD_ADDR_VAR 0 8
70545: PUSH
70546: LD_EXP 44
70550: PUSH
70551: LD_VAR 0 2
70555: ARRAY
70556: PPUSH
70557: LD_INT 2
70559: PUSH
70560: LD_INT 30
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 30
70572: PUSH
70573: LD_INT 5
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: PPUSH
70585: CALL_OW 72
70589: ST_TO_ADDR
// if barracks then
70590: LD_VAR 0 8
70594: IFFALSE 70734
// begin for j in barracks do
70596: LD_ADDR_VAR 0 3
70600: PUSH
70601: LD_VAR 0 8
70605: PUSH
70606: FOR_IN
70607: IFFALSE 70638
// begin if UnitsInside ( j ) < 6 then
70609: LD_VAR 0 3
70613: PPUSH
70614: CALL_OW 313
70618: PUSH
70619: LD_INT 6
70621: LESS
70622: IFFALSE 70636
// begin selected := j ;
70624: LD_ADDR_VAR 0 7
70628: PUSH
70629: LD_VAR 0 3
70633: ST_TO_ADDR
// break ;
70634: GO 70638
// end ; end ;
70636: GO 70606
70638: POP
70639: POP
// if selected then
70640: LD_VAR 0 7
70644: IFFALSE 70734
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
70646: LD_ADDR_VAR 0 3
70650: PUSH
70651: LD_EXP 73
70655: PUSH
70656: LD_VAR 0 2
70660: ARRAY
70661: PPUSH
70662: LD_INT 25
70664: PUSH
70665: LD_INT 12
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PPUSH
70672: CALL_OW 72
70676: PUSH
70677: FOR_IN
70678: IFFALSE 70732
// if not IsInUnit ( j ) and not HasTask ( j ) then
70680: LD_VAR 0 3
70684: PPUSH
70685: CALL_OW 310
70689: NOT
70690: PUSH
70691: LD_VAR 0 3
70695: PPUSH
70696: CALL_OW 314
70700: NOT
70701: AND
70702: IFFALSE 70730
// begin ComEnterUnit ( j , selected ) ;
70704: LD_VAR 0 3
70708: PPUSH
70709: LD_VAR 0 7
70713: PPUSH
70714: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
70718: LD_VAR 0 3
70722: PPUSH
70723: LD_INT 15
70725: PPUSH
70726: CALL_OW 183
// end ;
70730: GO 70677
70732: POP
70733: POP
// end ; end ; end ; end ; end ;
70734: GO 70143
70736: POP
70737: POP
// end ;
70738: LD_VAR 0 1
70742: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
70743: LD_INT 0
70745: PPUSH
70746: PPUSH
70747: PPUSH
70748: PPUSH
// if not mc_bases then
70749: LD_EXP 44
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 70936
// for i = 1 to mc_bases do
70758: LD_ADDR_VAR 0 2
70762: PUSH
70763: DOUBLE
70764: LD_INT 1
70766: DEC
70767: ST_TO_ADDR
70768: LD_EXP 44
70772: PUSH
70773: FOR_TO
70774: IFFALSE 70934
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
70776: LD_ADDR_VAR 0 4
70780: PUSH
70781: LD_EXP 44
70785: PUSH
70786: LD_VAR 0 2
70790: ARRAY
70791: PPUSH
70792: LD_INT 25
70794: PUSH
70795: LD_INT 9
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PPUSH
70802: CALL_OW 72
70806: ST_TO_ADDR
// if not tmp then
70807: LD_VAR 0 4
70811: NOT
70812: IFFALSE 70816
// continue ;
70814: GO 70773
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
70816: LD_EXP 70
70820: PUSH
70821: LD_VAR 0 2
70825: ARRAY
70826: PPUSH
70827: LD_INT 29
70829: PPUSH
70830: CALL_OW 325
70834: NOT
70835: PUSH
70836: LD_EXP 70
70840: PUSH
70841: LD_VAR 0 2
70845: ARRAY
70846: PPUSH
70847: LD_INT 28
70849: PPUSH
70850: CALL_OW 325
70854: NOT
70855: AND
70856: IFFALSE 70860
// continue ;
70858: GO 70773
// for j in tmp do
70860: LD_ADDR_VAR 0 3
70864: PUSH
70865: LD_VAR 0 4
70869: PUSH
70870: FOR_IN
70871: IFFALSE 70930
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
70873: LD_VAR 0 3
70877: PUSH
70878: LD_EXP 47
70882: PUSH
70883: LD_VAR 0 2
70887: ARRAY
70888: PUSH
70889: LD_INT 1
70891: ARRAY
70892: IN
70893: NOT
70894: PUSH
70895: LD_VAR 0 3
70899: PUSH
70900: LD_EXP 47
70904: PUSH
70905: LD_VAR 0 2
70909: ARRAY
70910: PUSH
70911: LD_INT 2
70913: ARRAY
70914: IN
70915: NOT
70916: AND
70917: IFFALSE 70928
// ComSpaceTimeShoot ( j ) ;
70919: LD_VAR 0 3
70923: PPUSH
70924: CALL 16489 0 1
70928: GO 70870
70930: POP
70931: POP
// end ;
70932: GO 70773
70934: POP
70935: POP
// end ;
70936: LD_VAR 0 1
70940: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
70941: LD_INT 0
70943: PPUSH
70944: PPUSH
70945: PPUSH
70946: PPUSH
// if not mc_bases then
70947: LD_EXP 44
70951: NOT
70952: IFFALSE 70956
// exit ;
70954: GO 70978
// for i = 1 to mc_bases do
70956: LD_ADDR_VAR 0 2
70960: PUSH
70961: DOUBLE
70962: LD_INT 1
70964: DEC
70965: ST_TO_ADDR
70966: LD_EXP 44
70970: PUSH
70971: FOR_TO
70972: IFFALSE 70976
// begin end ;
70974: GO 70971
70976: POP
70977: POP
// end ;
70978: LD_VAR 0 1
70982: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70983: LD_INT 0
70985: PPUSH
70986: PPUSH
70987: PPUSH
// if not mc_bases then
70988: LD_EXP 44
70992: NOT
70993: IFFALSE 70997
// exit ;
70995: GO 71557
// for i = 1 to mc_bases do
70997: LD_ADDR_VAR 0 2
71001: PUSH
71002: DOUBLE
71003: LD_INT 1
71005: DEC
71006: ST_TO_ADDR
71007: LD_EXP 44
71011: PUSH
71012: FOR_TO
71013: IFFALSE 71555
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71015: LD_ADDR_VAR 0 3
71019: PUSH
71020: LD_EXP 44
71024: PUSH
71025: LD_VAR 0 2
71029: ARRAY
71030: PPUSH
71031: LD_INT 25
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PPUSH
71041: CALL_OW 72
71045: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
71046: LD_VAR 0 3
71050: NOT
71051: PUSH
71052: LD_EXP 80
71056: PUSH
71057: LD_VAR 0 2
71061: ARRAY
71062: NOT
71063: OR
71064: IFFALSE 71114
// begin if mc_deposits_finder [ i ] then
71066: LD_EXP 81
71070: PUSH
71071: LD_VAR 0 2
71075: ARRAY
71076: IFFALSE 71112
// begin MC_Reset ( i , 125 ) ;
71078: LD_VAR 0 2
71082: PPUSH
71083: LD_INT 125
71085: PPUSH
71086: CALL 60612 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
71090: LD_ADDR_EXP 81
71094: PUSH
71095: LD_EXP 81
71099: PPUSH
71100: LD_VAR 0 2
71104: PPUSH
71105: EMPTY
71106: PPUSH
71107: CALL_OW 1
71111: ST_TO_ADDR
// end ; continue ;
71112: GO 71012
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
71114: LD_EXP 80
71118: PUSH
71119: LD_VAR 0 2
71123: ARRAY
71124: PUSH
71125: LD_INT 1
71127: ARRAY
71128: PUSH
71129: LD_INT 3
71131: ARRAY
71132: PUSH
71133: LD_INT 1
71135: EQUAL
71136: PUSH
71137: LD_INT 20
71139: PPUSH
71140: LD_EXP 70
71144: PUSH
71145: LD_VAR 0 2
71149: ARRAY
71150: PPUSH
71151: CALL_OW 321
71155: PUSH
71156: LD_INT 2
71158: NONEQUAL
71159: AND
71160: IFFALSE 71210
// begin if mc_deposits_finder [ i ] then
71162: LD_EXP 81
71166: PUSH
71167: LD_VAR 0 2
71171: ARRAY
71172: IFFALSE 71208
// begin MC_Reset ( i , 125 ) ;
71174: LD_VAR 0 2
71178: PPUSH
71179: LD_INT 125
71181: PPUSH
71182: CALL 60612 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
71186: LD_ADDR_EXP 81
71190: PUSH
71191: LD_EXP 81
71195: PPUSH
71196: LD_VAR 0 2
71200: PPUSH
71201: EMPTY
71202: PPUSH
71203: CALL_OW 1
71207: ST_TO_ADDR
// end ; continue ;
71208: GO 71012
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
71210: LD_EXP 80
71214: PUSH
71215: LD_VAR 0 2
71219: ARRAY
71220: PUSH
71221: LD_INT 1
71223: ARRAY
71224: PUSH
71225: LD_INT 1
71227: ARRAY
71228: PPUSH
71229: LD_EXP 80
71233: PUSH
71234: LD_VAR 0 2
71238: ARRAY
71239: PUSH
71240: LD_INT 1
71242: ARRAY
71243: PUSH
71244: LD_INT 2
71246: ARRAY
71247: PPUSH
71248: LD_EXP 70
71252: PUSH
71253: LD_VAR 0 2
71257: ARRAY
71258: PPUSH
71259: CALL_OW 440
71263: IFFALSE 71306
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
71265: LD_ADDR_EXP 80
71269: PUSH
71270: LD_EXP 80
71274: PPUSH
71275: LD_VAR 0 2
71279: PPUSH
71280: LD_EXP 80
71284: PUSH
71285: LD_VAR 0 2
71289: ARRAY
71290: PPUSH
71291: LD_INT 1
71293: PPUSH
71294: CALL_OW 3
71298: PPUSH
71299: CALL_OW 1
71303: ST_TO_ADDR
71304: GO 71553
// begin if not mc_deposits_finder [ i ] then
71306: LD_EXP 81
71310: PUSH
71311: LD_VAR 0 2
71315: ARRAY
71316: NOT
71317: IFFALSE 71369
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
71319: LD_ADDR_EXP 81
71323: PUSH
71324: LD_EXP 81
71328: PPUSH
71329: LD_VAR 0 2
71333: PPUSH
71334: LD_VAR 0 3
71338: PUSH
71339: LD_INT 1
71341: ARRAY
71342: PUSH
71343: EMPTY
71344: LIST
71345: PPUSH
71346: CALL_OW 1
71350: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
71351: LD_VAR 0 3
71355: PUSH
71356: LD_INT 1
71358: ARRAY
71359: PPUSH
71360: LD_INT 125
71362: PPUSH
71363: CALL_OW 109
// end else
71367: GO 71553
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
71369: LD_EXP 81
71373: PUSH
71374: LD_VAR 0 2
71378: ARRAY
71379: PUSH
71380: LD_INT 1
71382: ARRAY
71383: PPUSH
71384: CALL_OW 310
71388: IFFALSE 71411
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
71390: LD_EXP 81
71394: PUSH
71395: LD_VAR 0 2
71399: ARRAY
71400: PUSH
71401: LD_INT 1
71403: ARRAY
71404: PPUSH
71405: CALL_OW 122
71409: GO 71553
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
71411: LD_EXP 81
71415: PUSH
71416: LD_VAR 0 2
71420: ARRAY
71421: PUSH
71422: LD_INT 1
71424: ARRAY
71425: PPUSH
71426: CALL_OW 314
71430: NOT
71431: PUSH
71432: LD_EXP 81
71436: PUSH
71437: LD_VAR 0 2
71441: ARRAY
71442: PUSH
71443: LD_INT 1
71445: ARRAY
71446: PPUSH
71447: LD_EXP 80
71451: PUSH
71452: LD_VAR 0 2
71456: ARRAY
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PPUSH
71466: LD_EXP 80
71470: PUSH
71471: LD_VAR 0 2
71475: ARRAY
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PUSH
71481: LD_INT 2
71483: ARRAY
71484: PPUSH
71485: CALL_OW 297
71489: PUSH
71490: LD_INT 6
71492: GREATER
71493: AND
71494: IFFALSE 71553
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
71496: LD_EXP 81
71500: PUSH
71501: LD_VAR 0 2
71505: ARRAY
71506: PUSH
71507: LD_INT 1
71509: ARRAY
71510: PPUSH
71511: LD_EXP 80
71515: PUSH
71516: LD_VAR 0 2
71520: ARRAY
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PUSH
71526: LD_INT 1
71528: ARRAY
71529: PPUSH
71530: LD_EXP 80
71534: PUSH
71535: LD_VAR 0 2
71539: ARRAY
71540: PUSH
71541: LD_INT 1
71543: ARRAY
71544: PUSH
71545: LD_INT 2
71547: ARRAY
71548: PPUSH
71549: CALL_OW 111
// end ; end ; end ;
71553: GO 71012
71555: POP
71556: POP
// end ;
71557: LD_VAR 0 1
71561: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
71562: LD_INT 0
71564: PPUSH
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
71569: PPUSH
71570: PPUSH
71571: PPUSH
71572: PPUSH
// if not mc_bases then
71573: LD_EXP 44
71577: NOT
71578: IFFALSE 71582
// exit ;
71580: GO 72080
// for i = 1 to mc_bases do
71582: LD_ADDR_VAR 0 2
71586: PUSH
71587: DOUBLE
71588: LD_INT 1
71590: DEC
71591: ST_TO_ADDR
71592: LD_EXP 44
71596: PUSH
71597: FOR_TO
71598: IFFALSE 72078
// begin if not mc_bases [ i ] then
71600: LD_EXP 44
71604: PUSH
71605: LD_VAR 0 2
71609: ARRAY
71610: NOT
71611: IFFALSE 71615
// continue ;
71613: GO 71597
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71615: LD_ADDR_VAR 0 7
71619: PUSH
71620: LD_EXP 44
71624: PUSH
71625: LD_VAR 0 2
71629: ARRAY
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PPUSH
71635: CALL_OW 248
71639: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
71640: LD_VAR 0 7
71644: PUSH
71645: LD_INT 1
71647: NONEQUAL
71648: PUSH
71649: LD_EXP 63
71653: PUSH
71654: LD_VAR 0 2
71658: ARRAY
71659: PUSH
71660: LD_EXP 66
71664: PUSH
71665: LD_VAR 0 2
71669: ARRAY
71670: UNION
71671: PPUSH
71672: LD_INT 33
71674: PUSH
71675: LD_INT 2
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PPUSH
71682: CALL_OW 72
71686: NOT
71687: OR
71688: IFFALSE 71692
// continue ;
71690: GO 71597
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71692: LD_ADDR_VAR 0 9
71696: PUSH
71697: LD_EXP 44
71701: PUSH
71702: LD_VAR 0 2
71706: ARRAY
71707: PPUSH
71708: LD_INT 30
71710: PUSH
71711: LD_INT 36
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PPUSH
71718: CALL_OW 72
71722: ST_TO_ADDR
// if not cts then
71723: LD_VAR 0 9
71727: NOT
71728: IFFALSE 71732
// continue ;
71730: GO 71597
// if mc_remote_driver [ i ] then
71732: LD_EXP 83
71736: PUSH
71737: LD_VAR 0 2
71741: ARRAY
71742: IFFALSE 71891
// for j in mc_remote_driver [ i ] do
71744: LD_ADDR_VAR 0 3
71748: PUSH
71749: LD_EXP 83
71753: PUSH
71754: LD_VAR 0 2
71758: ARRAY
71759: PUSH
71760: FOR_IN
71761: IFFALSE 71889
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
71763: LD_VAR 0 3
71767: PPUSH
71768: CALL_OW 310
71772: NOT
71773: PUSH
71774: LD_VAR 0 3
71778: PPUSH
71779: CALL_OW 310
71783: PPUSH
71784: CALL_OW 266
71788: PUSH
71789: LD_INT 36
71791: NONEQUAL
71792: OR
71793: IFFALSE 71887
// begin if IsInUnit ( j ) then
71795: LD_VAR 0 3
71799: PPUSH
71800: CALL_OW 310
71804: IFFALSE 71815
// ComExitBuilding ( j ) ;
71806: LD_VAR 0 3
71810: PPUSH
71811: CALL_OW 122
// ct := 0 ;
71815: LD_ADDR_VAR 0 8
71819: PUSH
71820: LD_INT 0
71822: ST_TO_ADDR
// for k in cts do
71823: LD_ADDR_VAR 0 4
71827: PUSH
71828: LD_VAR 0 9
71832: PUSH
71833: FOR_IN
71834: IFFALSE 71865
// if UnitsInside ( k ) < 3 then
71836: LD_VAR 0 4
71840: PPUSH
71841: CALL_OW 313
71845: PUSH
71846: LD_INT 3
71848: LESS
71849: IFFALSE 71863
// begin ct := k ;
71851: LD_ADDR_VAR 0 8
71855: PUSH
71856: LD_VAR 0 4
71860: ST_TO_ADDR
// break ;
71861: GO 71865
// end ;
71863: GO 71833
71865: POP
71866: POP
// if ct then
71867: LD_VAR 0 8
71871: IFFALSE 71887
// AddComEnterUnit ( j , ct ) ;
71873: LD_VAR 0 3
71877: PPUSH
71878: LD_VAR 0 8
71882: PPUSH
71883: CALL_OW 180
// end ;
71887: GO 71760
71889: POP
71890: POP
// places := 0 ;
71891: LD_ADDR_VAR 0 5
71895: PUSH
71896: LD_INT 0
71898: ST_TO_ADDR
// for j = 1 to cts do
71899: LD_ADDR_VAR 0 3
71903: PUSH
71904: DOUBLE
71905: LD_INT 1
71907: DEC
71908: ST_TO_ADDR
71909: LD_VAR 0 9
71913: PUSH
71914: FOR_TO
71915: IFFALSE 71933
// places := places + 3 ;
71917: LD_ADDR_VAR 0 5
71921: PUSH
71922: LD_VAR 0 5
71926: PUSH
71927: LD_INT 3
71929: PLUS
71930: ST_TO_ADDR
71931: GO 71914
71933: POP
71934: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
71935: LD_ADDR_VAR 0 6
71939: PUSH
71940: LD_EXP 44
71944: PUSH
71945: LD_VAR 0 2
71949: ARRAY
71950: PPUSH
71951: LD_INT 25
71953: PUSH
71954: LD_INT 3
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PPUSH
71961: CALL_OW 72
71965: PUSH
71966: LD_EXP 83
71970: PUSH
71971: LD_VAR 0 2
71975: ARRAY
71976: DIFF
71977: ST_TO_ADDR
// if not tmp then
71978: LD_VAR 0 6
71982: NOT
71983: IFFALSE 71987
// continue ;
71985: GO 71597
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
71987: LD_ADDR_VAR 0 5
71991: PUSH
71992: LD_VAR 0 5
71996: PUSH
71997: LD_EXP 83
72001: PUSH
72002: LD_VAR 0 2
72006: ARRAY
72007: PUSH
72008: LD_INT 1
72010: PLUS
72011: MINUS
72012: ST_TO_ADDR
// if places then
72013: LD_VAR 0 5
72017: IFFALSE 72076
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
72019: LD_ADDR_EXP 83
72023: PUSH
72024: LD_EXP 83
72028: PPUSH
72029: LD_VAR 0 2
72033: PPUSH
72034: LD_EXP 83
72038: PUSH
72039: LD_VAR 0 2
72043: ARRAY
72044: PUSH
72045: LD_VAR 0 6
72049: PUSH
72050: LD_INT 1
72052: ARRAY
72053: UNION
72054: PPUSH
72055: CALL_OW 1
72059: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
72060: LD_VAR 0 6
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PPUSH
72069: LD_INT 126
72071: PPUSH
72072: CALL_OW 109
// end ; end ;
72076: GO 71597
72078: POP
72079: POP
// end ;
72080: LD_VAR 0 1
72084: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72085: LD_INT 0
72087: PPUSH
72088: PPUSH
72089: PPUSH
72090: PPUSH
72091: PPUSH
72092: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72093: LD_VAR 0 1
72097: NOT
72098: PUSH
72099: LD_VAR 0 2
72103: NOT
72104: OR
72105: PUSH
72106: LD_VAR 0 3
72110: NOT
72111: OR
72112: PUSH
72113: LD_VAR 0 4
72117: PUSH
72118: LD_INT 1
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: LD_INT 3
72126: PUSH
72127: LD_INT 4
72129: PUSH
72130: LD_INT 5
72132: PUSH
72133: LD_INT 8
72135: PUSH
72136: LD_INT 9
72138: PUSH
72139: LD_INT 15
72141: PUSH
72142: LD_INT 16
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: IN
72156: NOT
72157: OR
72158: IFFALSE 72162
// exit ;
72160: GO 73062
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72162: LD_ADDR_VAR 0 2
72166: PUSH
72167: LD_VAR 0 2
72171: PPUSH
72172: LD_INT 21
72174: PUSH
72175: LD_INT 3
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 24
72184: PUSH
72185: LD_INT 250
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PPUSH
72196: CALL_OW 72
72200: ST_TO_ADDR
// case class of 1 , 15 :
72201: LD_VAR 0 4
72205: PUSH
72206: LD_INT 1
72208: DOUBLE
72209: EQUAL
72210: IFTRUE 72220
72212: LD_INT 15
72214: DOUBLE
72215: EQUAL
72216: IFTRUE 72220
72218: GO 72305
72220: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72221: LD_ADDR_VAR 0 8
72225: PUSH
72226: LD_VAR 0 2
72230: PPUSH
72231: LD_INT 2
72233: PUSH
72234: LD_INT 30
72236: PUSH
72237: LD_INT 32
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 30
72246: PUSH
72247: LD_INT 31
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: LIST
72258: PPUSH
72259: CALL_OW 72
72263: PUSH
72264: LD_VAR 0 2
72268: PPUSH
72269: LD_INT 2
72271: PUSH
72272: LD_INT 30
72274: PUSH
72275: LD_INT 4
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 30
72284: PUSH
72285: LD_INT 5
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: PPUSH
72297: CALL_OW 72
72301: ADD
72302: ST_TO_ADDR
72303: GO 72551
72305: LD_INT 2
72307: DOUBLE
72308: EQUAL
72309: IFTRUE 72319
72311: LD_INT 16
72313: DOUBLE
72314: EQUAL
72315: IFTRUE 72319
72317: GO 72365
72319: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72320: LD_ADDR_VAR 0 8
72324: PUSH
72325: LD_VAR 0 2
72329: PPUSH
72330: LD_INT 2
72332: PUSH
72333: LD_INT 30
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 30
72345: PUSH
72346: LD_INT 1
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: LIST
72357: PPUSH
72358: CALL_OW 72
72362: ST_TO_ADDR
72363: GO 72551
72365: LD_INT 3
72367: DOUBLE
72368: EQUAL
72369: IFTRUE 72373
72371: GO 72419
72373: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72374: LD_ADDR_VAR 0 8
72378: PUSH
72379: LD_VAR 0 2
72383: PPUSH
72384: LD_INT 2
72386: PUSH
72387: LD_INT 30
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 30
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: LIST
72411: PPUSH
72412: CALL_OW 72
72416: ST_TO_ADDR
72417: GO 72551
72419: LD_INT 4
72421: DOUBLE
72422: EQUAL
72423: IFTRUE 72427
72425: GO 72484
72427: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72428: LD_ADDR_VAR 0 8
72432: PUSH
72433: LD_VAR 0 2
72437: PPUSH
72438: LD_INT 2
72440: PUSH
72441: LD_INT 30
72443: PUSH
72444: LD_INT 6
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 30
72453: PUSH
72454: LD_INT 7
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 30
72463: PUSH
72464: LD_INT 8
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: PPUSH
72477: CALL_OW 72
72481: ST_TO_ADDR
72482: GO 72551
72484: LD_INT 5
72486: DOUBLE
72487: EQUAL
72488: IFTRUE 72504
72490: LD_INT 8
72492: DOUBLE
72493: EQUAL
72494: IFTRUE 72504
72496: LD_INT 9
72498: DOUBLE
72499: EQUAL
72500: IFTRUE 72504
72502: GO 72550
72504: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72505: LD_ADDR_VAR 0 8
72509: PUSH
72510: LD_VAR 0 2
72514: PPUSH
72515: LD_INT 2
72517: PUSH
72518: LD_INT 30
72520: PUSH
72521: LD_INT 4
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 30
72530: PUSH
72531: LD_INT 5
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: PPUSH
72543: CALL_OW 72
72547: ST_TO_ADDR
72548: GO 72551
72550: POP
// if not tmp then
72551: LD_VAR 0 8
72555: NOT
72556: IFFALSE 72560
// exit ;
72558: GO 73062
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72560: LD_VAR 0 4
72564: PUSH
72565: LD_INT 1
72567: PUSH
72568: LD_INT 15
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: IN
72575: PUSH
72576: LD_EXP 53
72580: PUSH
72581: LD_VAR 0 1
72585: ARRAY
72586: AND
72587: IFFALSE 72743
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72589: LD_ADDR_VAR 0 9
72593: PUSH
72594: LD_EXP 53
72598: PUSH
72599: LD_VAR 0 1
72603: ARRAY
72604: PUSH
72605: LD_INT 1
72607: ARRAY
72608: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72609: LD_VAR 0 9
72613: PUSH
72614: LD_EXP 54
72618: PUSH
72619: LD_VAR 0 1
72623: ARRAY
72624: IN
72625: NOT
72626: IFFALSE 72741
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72628: LD_ADDR_EXP 54
72632: PUSH
72633: LD_EXP 54
72637: PPUSH
72638: LD_VAR 0 1
72642: PUSH
72643: LD_EXP 54
72647: PUSH
72648: LD_VAR 0 1
72652: ARRAY
72653: PUSH
72654: LD_INT 1
72656: PLUS
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PPUSH
72662: LD_VAR 0 9
72666: PPUSH
72667: CALL 22864 0 3
72671: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72672: LD_ADDR_EXP 53
72676: PUSH
72677: LD_EXP 53
72681: PPUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: LD_EXP 53
72691: PUSH
72692: LD_VAR 0 1
72696: ARRAY
72697: PUSH
72698: LD_VAR 0 9
72702: DIFF
72703: PPUSH
72704: CALL_OW 1
72708: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72709: LD_VAR 0 3
72713: PPUSH
72714: LD_EXP 54
72718: PUSH
72719: LD_VAR 0 1
72723: ARRAY
72724: PUSH
72725: LD_EXP 54
72729: PUSH
72730: LD_VAR 0 1
72734: ARRAY
72735: ARRAY
72736: PPUSH
72737: CALL_OW 120
// end ; exit ;
72741: GO 73062
// end ; if tmp > 1 then
72743: LD_VAR 0 8
72747: PUSH
72748: LD_INT 1
72750: GREATER
72751: IFFALSE 72855
// for i = 2 to tmp do
72753: LD_ADDR_VAR 0 6
72757: PUSH
72758: DOUBLE
72759: LD_INT 2
72761: DEC
72762: ST_TO_ADDR
72763: LD_VAR 0 8
72767: PUSH
72768: FOR_TO
72769: IFFALSE 72853
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72771: LD_VAR 0 8
72775: PUSH
72776: LD_VAR 0 6
72780: ARRAY
72781: PPUSH
72782: CALL_OW 461
72786: PUSH
72787: LD_INT 6
72789: EQUAL
72790: IFFALSE 72851
// begin x := tmp [ i ] ;
72792: LD_ADDR_VAR 0 9
72796: PUSH
72797: LD_VAR 0 8
72801: PUSH
72802: LD_VAR 0 6
72806: ARRAY
72807: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72808: LD_ADDR_VAR 0 8
72812: PUSH
72813: LD_VAR 0 8
72817: PPUSH
72818: LD_VAR 0 6
72822: PPUSH
72823: CALL_OW 3
72827: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72828: LD_ADDR_VAR 0 8
72832: PUSH
72833: LD_VAR 0 8
72837: PPUSH
72838: LD_INT 1
72840: PPUSH
72841: LD_VAR 0 9
72845: PPUSH
72846: CALL_OW 2
72850: ST_TO_ADDR
// end ;
72851: GO 72768
72853: POP
72854: POP
// for i in tmp do
72855: LD_ADDR_VAR 0 6
72859: PUSH
72860: LD_VAR 0 8
72864: PUSH
72865: FOR_IN
72866: IFFALSE 72935
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72868: LD_VAR 0 6
72872: PPUSH
72873: CALL_OW 313
72877: PUSH
72878: LD_INT 6
72880: LESS
72881: PUSH
72882: LD_VAR 0 6
72886: PPUSH
72887: CALL_OW 266
72891: PUSH
72892: LD_INT 31
72894: PUSH
72895: LD_INT 32
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: IN
72902: NOT
72903: AND
72904: PUSH
72905: LD_VAR 0 6
72909: PPUSH
72910: CALL_OW 313
72914: PUSH
72915: LD_INT 0
72917: EQUAL
72918: OR
72919: IFFALSE 72933
// begin j := i ;
72921: LD_ADDR_VAR 0 7
72925: PUSH
72926: LD_VAR 0 6
72930: ST_TO_ADDR
// break ;
72931: GO 72935
// end ; end ;
72933: GO 72865
72935: POP
72936: POP
// if j then
72937: LD_VAR 0 7
72941: IFFALSE 72959
// ComEnterUnit ( unit , j ) else
72943: LD_VAR 0 3
72947: PPUSH
72948: LD_VAR 0 7
72952: PPUSH
72953: CALL_OW 120
72957: GO 73062
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72959: LD_ADDR_VAR 0 10
72963: PUSH
72964: LD_VAR 0 2
72968: PPUSH
72969: LD_INT 2
72971: PUSH
72972: LD_INT 30
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 30
72984: PUSH
72985: LD_INT 1
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: LIST
72996: PPUSH
72997: CALL_OW 72
73001: ST_TO_ADDR
// if depot then
73002: LD_VAR 0 10
73006: IFFALSE 73062
// begin depot := NearestUnitToUnit ( depot , unit ) ;
73008: LD_ADDR_VAR 0 10
73012: PUSH
73013: LD_VAR 0 10
73017: PPUSH
73018: LD_VAR 0 3
73022: PPUSH
73023: CALL_OW 74
73027: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
73028: LD_VAR 0 3
73032: PPUSH
73033: LD_VAR 0 10
73037: PPUSH
73038: CALL_OW 296
73042: PUSH
73043: LD_INT 10
73045: GREATER
73046: IFFALSE 73062
// ComStandNearbyBuilding ( unit , depot ) ;
73048: LD_VAR 0 3
73052: PPUSH
73053: LD_VAR 0 10
73057: PPUSH
73058: CALL 17106 0 2
// end ; end ; end ;
73062: LD_VAR 0 5
73066: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
73067: LD_INT 0
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
// if not mc_bases then
73073: LD_EXP 44
73077: NOT
73078: IFFALSE 73082
// exit ;
73080: GO 73321
// for i = 1 to mc_bases do
73082: LD_ADDR_VAR 0 2
73086: PUSH
73087: DOUBLE
73088: LD_INT 1
73090: DEC
73091: ST_TO_ADDR
73092: LD_EXP 44
73096: PUSH
73097: FOR_TO
73098: IFFALSE 73319
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73100: LD_ADDR_VAR 0 4
73104: PUSH
73105: LD_EXP 44
73109: PUSH
73110: LD_VAR 0 2
73114: ARRAY
73115: PPUSH
73116: LD_INT 21
73118: PUSH
73119: LD_INT 1
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PPUSH
73126: CALL_OW 72
73130: PUSH
73131: LD_EXP 73
73135: PUSH
73136: LD_VAR 0 2
73140: ARRAY
73141: UNION
73142: ST_TO_ADDR
// if not tmp then
73143: LD_VAR 0 4
73147: NOT
73148: IFFALSE 73152
// continue ;
73150: GO 73097
// for j in tmp do
73152: LD_ADDR_VAR 0 3
73156: PUSH
73157: LD_VAR 0 4
73161: PUSH
73162: FOR_IN
73163: IFFALSE 73315
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73165: LD_VAR 0 3
73169: PPUSH
73170: CALL_OW 110
73174: NOT
73175: PUSH
73176: LD_VAR 0 3
73180: PPUSH
73181: CALL_OW 314
73185: NOT
73186: AND
73187: PUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: CALL_OW 311
73197: NOT
73198: AND
73199: PUSH
73200: LD_VAR 0 3
73204: PPUSH
73205: CALL_OW 310
73209: NOT
73210: AND
73211: PUSH
73212: LD_VAR 0 3
73216: PUSH
73217: LD_EXP 47
73221: PUSH
73222: LD_VAR 0 2
73226: ARRAY
73227: PUSH
73228: LD_INT 1
73230: ARRAY
73231: IN
73232: NOT
73233: AND
73234: PUSH
73235: LD_VAR 0 3
73239: PUSH
73240: LD_EXP 47
73244: PUSH
73245: LD_VAR 0 2
73249: ARRAY
73250: PUSH
73251: LD_INT 2
73253: ARRAY
73254: IN
73255: NOT
73256: AND
73257: PUSH
73258: LD_VAR 0 3
73262: PUSH
73263: LD_EXP 56
73267: PUSH
73268: LD_VAR 0 2
73272: ARRAY
73273: IN
73274: NOT
73275: AND
73276: IFFALSE 73313
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73278: LD_VAR 0 2
73282: PPUSH
73283: LD_EXP 44
73287: PUSH
73288: LD_VAR 0 2
73292: ARRAY
73293: PPUSH
73294: LD_VAR 0 3
73298: PPUSH
73299: LD_VAR 0 3
73303: PPUSH
73304: CALL_OW 257
73308: PPUSH
73309: CALL 72085 0 4
// end ;
73313: GO 73162
73315: POP
73316: POP
// end ;
73317: GO 73097
73319: POP
73320: POP
// end ;
73321: LD_VAR 0 1
73325: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73326: LD_INT 0
73328: PPUSH
73329: PPUSH
73330: PPUSH
73331: PPUSH
73332: PPUSH
73333: PPUSH
// if not mc_bases [ base ] then
73334: LD_EXP 44
73338: PUSH
73339: LD_VAR 0 1
73343: ARRAY
73344: NOT
73345: IFFALSE 73349
// exit ;
73347: GO 73531
// tmp := [ ] ;
73349: LD_ADDR_VAR 0 6
73353: PUSH
73354: EMPTY
73355: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73356: LD_ADDR_VAR 0 7
73360: PUSH
73361: LD_VAR 0 3
73365: PPUSH
73366: LD_INT 0
73368: PPUSH
73369: CALL_OW 517
73373: ST_TO_ADDR
// if not list then
73374: LD_VAR 0 7
73378: NOT
73379: IFFALSE 73383
// exit ;
73381: GO 73531
// for i = 1 to amount do
73383: LD_ADDR_VAR 0 5
73387: PUSH
73388: DOUBLE
73389: LD_INT 1
73391: DEC
73392: ST_TO_ADDR
73393: LD_VAR 0 2
73397: PUSH
73398: FOR_TO
73399: IFFALSE 73479
// begin x := rand ( 1 , list [ 1 ] ) ;
73401: LD_ADDR_VAR 0 8
73405: PUSH
73406: LD_INT 1
73408: PPUSH
73409: LD_VAR 0 7
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PPUSH
73418: CALL_OW 12
73422: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73423: LD_ADDR_VAR 0 6
73427: PUSH
73428: LD_VAR 0 6
73432: PPUSH
73433: LD_VAR 0 5
73437: PPUSH
73438: LD_VAR 0 7
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PUSH
73447: LD_VAR 0 8
73451: ARRAY
73452: PUSH
73453: LD_VAR 0 7
73457: PUSH
73458: LD_INT 2
73460: ARRAY
73461: PUSH
73462: LD_VAR 0 8
73466: ARRAY
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PPUSH
73472: CALL_OW 1
73476: ST_TO_ADDR
// end ;
73477: GO 73398
73479: POP
73480: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73481: LD_ADDR_EXP 57
73485: PUSH
73486: LD_EXP 57
73490: PPUSH
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_VAR 0 6
73500: PPUSH
73501: CALL_OW 1
73505: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73506: LD_ADDR_EXP 59
73510: PUSH
73511: LD_EXP 59
73515: PPUSH
73516: LD_VAR 0 1
73520: PPUSH
73521: LD_VAR 0 3
73525: PPUSH
73526: CALL_OW 1
73530: ST_TO_ADDR
// end ;
73531: LD_VAR 0 4
73535: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73536: LD_INT 0
73538: PPUSH
// if not mc_bases [ base ] then
73539: LD_EXP 44
73543: PUSH
73544: LD_VAR 0 1
73548: ARRAY
73549: NOT
73550: IFFALSE 73554
// exit ;
73552: GO 73579
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73554: LD_ADDR_EXP 49
73558: PUSH
73559: LD_EXP 49
73563: PPUSH
73564: LD_VAR 0 1
73568: PPUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: CALL_OW 1
73578: ST_TO_ADDR
// end ;
73579: LD_VAR 0 3
73583: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73584: LD_INT 0
73586: PPUSH
// if not mc_bases [ base ] then
73587: LD_EXP 44
73591: PUSH
73592: LD_VAR 0 1
73596: ARRAY
73597: NOT
73598: IFFALSE 73602
// exit ;
73600: GO 73658
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
73602: LD_ADDR_EXP 49
73606: PUSH
73607: LD_EXP 49
73611: PPUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: LD_EXP 49
73621: PUSH
73622: LD_VAR 0 1
73626: ARRAY
73627: PPUSH
73628: LD_EXP 49
73632: PUSH
73633: LD_VAR 0 1
73637: ARRAY
73638: PUSH
73639: LD_INT 1
73641: PLUS
73642: PPUSH
73643: LD_VAR 0 2
73647: PPUSH
73648: CALL_OW 2
73652: PPUSH
73653: CALL_OW 1
73657: ST_TO_ADDR
// end ;
73658: LD_VAR 0 3
73662: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73663: LD_INT 0
73665: PPUSH
// if not mc_bases [ base ] then
73666: LD_EXP 44
73670: PUSH
73671: LD_VAR 0 1
73675: ARRAY
73676: NOT
73677: IFFALSE 73681
// exit ;
73679: GO 73706
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73681: LD_ADDR_EXP 65
73685: PUSH
73686: LD_EXP 65
73690: PPUSH
73691: LD_VAR 0 1
73695: PPUSH
73696: LD_VAR 0 2
73700: PPUSH
73701: CALL_OW 1
73705: ST_TO_ADDR
// end ;
73706: LD_VAR 0 3
73710: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
73711: LD_INT 0
73713: PPUSH
// if not mc_bases [ base ] then
73714: LD_EXP 44
73718: PUSH
73719: LD_VAR 0 1
73723: ARRAY
73724: NOT
73725: IFFALSE 73729
// exit ;
73727: GO 73769
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
73729: LD_ADDR_EXP 65
73733: PUSH
73734: LD_EXP 65
73738: PPUSH
73739: LD_VAR 0 1
73743: PPUSH
73744: LD_EXP 65
73748: PUSH
73749: LD_VAR 0 1
73753: ARRAY
73754: PUSH
73755: LD_VAR 0 2
73759: PUSH
73760: EMPTY
73761: LIST
73762: ADD
73763: PPUSH
73764: CALL_OW 1
73768: ST_TO_ADDR
// end ;
73769: LD_VAR 0 3
73773: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73774: LD_INT 0
73776: PPUSH
// if not mc_bases [ base ] then
73777: LD_EXP 44
73781: PUSH
73782: LD_VAR 0 1
73786: ARRAY
73787: NOT
73788: IFFALSE 73792
// exit ;
73790: GO 73904
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73792: LD_ADDR_EXP 66
73796: PUSH
73797: LD_EXP 66
73801: PPUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_VAR 0 2
73811: PPUSH
73812: CALL_OW 1
73816: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73817: LD_ADDR_EXP 55
73821: PUSH
73822: LD_EXP 55
73826: PPUSH
73827: LD_VAR 0 1
73831: PPUSH
73832: LD_VAR 0 2
73836: PUSH
73837: LD_INT 0
73839: PLUS
73840: PPUSH
73841: CALL_OW 1
73845: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
73846: LD_ADDR_EXP 63
73850: PUSH
73851: LD_EXP 63
73855: PPUSH
73856: LD_VAR 0 1
73860: PPUSH
73861: LD_EXP 63
73865: PUSH
73866: LD_VAR 0 1
73870: ARRAY
73871: PUSH
73872: LD_EXP 66
73876: PUSH
73877: LD_VAR 0 1
73881: ARRAY
73882: PPUSH
73883: LD_INT 21
73885: PUSH
73886: LD_INT 2
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PPUSH
73893: CALL_OW 72
73897: UNION
73898: PPUSH
73899: CALL_OW 1
73903: ST_TO_ADDR
// end ;
73904: LD_VAR 0 3
73908: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73909: LD_INT 0
73911: PPUSH
// if not mc_bases [ base ] then
73912: LD_EXP 44
73916: PUSH
73917: LD_VAR 0 1
73921: ARRAY
73922: NOT
73923: IFFALSE 73927
// exit ;
73925: GO 73952
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73927: LD_ADDR_EXP 55
73931: PUSH
73932: LD_EXP 55
73936: PPUSH
73937: LD_VAR 0 1
73941: PPUSH
73942: LD_VAR 0 2
73946: PPUSH
73947: CALL_OW 1
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 3
73956: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
73961: PPUSH
73962: PPUSH
// if not mc_bases [ base ] then
73963: LD_EXP 44
73967: PUSH
73968: LD_VAR 0 1
73972: ARRAY
73973: NOT
73974: IFFALSE 73978
// exit ;
73976: GO 74043
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73978: LD_ADDR_EXP 64
73982: PUSH
73983: LD_EXP 64
73987: PPUSH
73988: LD_VAR 0 1
73992: PUSH
73993: LD_EXP 64
73997: PUSH
73998: LD_VAR 0 1
74002: ARRAY
74003: PUSH
74004: LD_INT 1
74006: PLUS
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PPUSH
74012: LD_VAR 0 1
74016: PUSH
74017: LD_VAR 0 2
74021: PUSH
74022: LD_VAR 0 3
74026: PUSH
74027: LD_VAR 0 4
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: PPUSH
74038: CALL 22864 0 3
74042: ST_TO_ADDR
// end ;
74043: LD_VAR 0 5
74047: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
74048: LD_INT 0
74050: PPUSH
// if not mc_bases [ base ] then
74051: LD_EXP 44
74055: PUSH
74056: LD_VAR 0 1
74060: ARRAY
74061: NOT
74062: IFFALSE 74066
// exit ;
74064: GO 74091
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
74066: LD_ADDR_EXP 80
74070: PUSH
74071: LD_EXP 80
74075: PPUSH
74076: LD_VAR 0 1
74080: PPUSH
74081: LD_VAR 0 2
74085: PPUSH
74086: CALL_OW 1
74090: ST_TO_ADDR
// end ;
74091: LD_VAR 0 3
74095: RET
// export function MC_GetMinesField ( base ) ; begin
74096: LD_INT 0
74098: PPUSH
// result := mc_mines [ base ] ;
74099: LD_ADDR_VAR 0 2
74103: PUSH
74104: LD_EXP 57
74108: PUSH
74109: LD_VAR 0 1
74113: ARRAY
74114: ST_TO_ADDR
// end ;
74115: LD_VAR 0 2
74119: RET
// export function MC_GetProduceList ( base ) ; begin
74120: LD_INT 0
74122: PPUSH
// result := mc_produce [ base ] ;
74123: LD_ADDR_VAR 0 2
74127: PUSH
74128: LD_EXP 65
74132: PUSH
74133: LD_VAR 0 1
74137: ARRAY
74138: ST_TO_ADDR
// end ;
74139: LD_VAR 0 2
74143: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
74144: LD_INT 0
74146: PPUSH
74147: PPUSH
// if not mc_bases then
74148: LD_EXP 44
74152: NOT
74153: IFFALSE 74157
// exit ;
74155: GO 74222
// if mc_bases [ base ] then
74157: LD_EXP 44
74161: PUSH
74162: LD_VAR 0 1
74166: ARRAY
74167: IFFALSE 74222
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74169: LD_ADDR_VAR 0 3
74173: PUSH
74174: LD_EXP 44
74178: PUSH
74179: LD_VAR 0 1
74183: ARRAY
74184: PPUSH
74185: LD_INT 30
74187: PUSH
74188: LD_VAR 0 2
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PPUSH
74197: CALL_OW 72
74201: ST_TO_ADDR
// if result then
74202: LD_VAR 0 3
74206: IFFALSE 74222
// result := result [ 1 ] ;
74208: LD_ADDR_VAR 0 3
74212: PUSH
74213: LD_VAR 0 3
74217: PUSH
74218: LD_INT 1
74220: ARRAY
74221: ST_TO_ADDR
// end ; end ;
74222: LD_VAR 0 3
74226: RET
// export function MC_SetTame ( base , area ) ; begin
74227: LD_INT 0
74229: PPUSH
// if not mc_bases or not base then
74230: LD_EXP 44
74234: NOT
74235: PUSH
74236: LD_VAR 0 1
74240: NOT
74241: OR
74242: IFFALSE 74246
// exit ;
74244: GO 74271
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74246: LD_ADDR_EXP 72
74250: PUSH
74251: LD_EXP 72
74255: PPUSH
74256: LD_VAR 0 1
74260: PPUSH
74261: LD_VAR 0 2
74265: PPUSH
74266: CALL_OW 1
74270: ST_TO_ADDR
// end ;
74271: LD_VAR 0 3
74275: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74276: LD_INT 0
74278: PPUSH
74279: PPUSH
// if not mc_bases or not base then
74280: LD_EXP 44
74284: NOT
74285: PUSH
74286: LD_VAR 0 1
74290: NOT
74291: OR
74292: IFFALSE 74296
// exit ;
74294: GO 74398
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74296: LD_ADDR_VAR 0 4
74300: PUSH
74301: LD_EXP 44
74305: PUSH
74306: LD_VAR 0 1
74310: ARRAY
74311: PPUSH
74312: LD_INT 30
74314: PUSH
74315: LD_VAR 0 2
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PPUSH
74324: CALL_OW 72
74328: ST_TO_ADDR
// if not tmp then
74329: LD_VAR 0 4
74333: NOT
74334: IFFALSE 74338
// exit ;
74336: GO 74398
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74338: LD_ADDR_EXP 76
74342: PUSH
74343: LD_EXP 76
74347: PPUSH
74348: LD_VAR 0 1
74352: PPUSH
74353: LD_EXP 76
74357: PUSH
74358: LD_VAR 0 1
74362: ARRAY
74363: PPUSH
74364: LD_EXP 76
74368: PUSH
74369: LD_VAR 0 1
74373: ARRAY
74374: PUSH
74375: LD_INT 1
74377: PLUS
74378: PPUSH
74379: LD_VAR 0 4
74383: PUSH
74384: LD_INT 1
74386: ARRAY
74387: PPUSH
74388: CALL_OW 2
74392: PPUSH
74393: CALL_OW 1
74397: ST_TO_ADDR
// end ;
74398: LD_VAR 0 3
74402: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74403: LD_INT 0
74405: PPUSH
74406: PPUSH
// if not mc_bases or not base or not kinds then
74407: LD_EXP 44
74411: NOT
74412: PUSH
74413: LD_VAR 0 1
74417: NOT
74418: OR
74419: PUSH
74420: LD_VAR 0 2
74424: NOT
74425: OR
74426: IFFALSE 74430
// exit ;
74428: GO 74491
// for i in kinds do
74430: LD_ADDR_VAR 0 4
74434: PUSH
74435: LD_VAR 0 2
74439: PUSH
74440: FOR_IN
74441: IFFALSE 74489
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74443: LD_ADDR_EXP 78
74447: PUSH
74448: LD_EXP 78
74452: PPUSH
74453: LD_VAR 0 1
74457: PUSH
74458: LD_EXP 78
74462: PUSH
74463: LD_VAR 0 1
74467: ARRAY
74468: PUSH
74469: LD_INT 1
74471: PLUS
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PPUSH
74477: LD_VAR 0 4
74481: PPUSH
74482: CALL 22864 0 3
74486: ST_TO_ADDR
74487: GO 74440
74489: POP
74490: POP
// end ;
74491: LD_VAR 0 3
74495: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74496: LD_INT 0
74498: PPUSH
// if not mc_bases or not base or not areas then
74499: LD_EXP 44
74503: NOT
74504: PUSH
74505: LD_VAR 0 1
74509: NOT
74510: OR
74511: PUSH
74512: LD_VAR 0 2
74516: NOT
74517: OR
74518: IFFALSE 74522
// exit ;
74520: GO 74547
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74522: LD_ADDR_EXP 62
74526: PUSH
74527: LD_EXP 62
74531: PPUSH
74532: LD_VAR 0 1
74536: PPUSH
74537: LD_VAR 0 2
74541: PPUSH
74542: CALL_OW 1
74546: ST_TO_ADDR
// end ;
74547: LD_VAR 0 3
74551: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
74552: LD_INT 0
74554: PPUSH
// if not mc_bases or not base then
74555: LD_EXP 44
74559: NOT
74560: PUSH
74561: LD_VAR 0 1
74565: NOT
74566: OR
74567: IFFALSE 74571
// exit ;
74569: GO 74605
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
74571: LD_ADDR_EXP 79
74575: PUSH
74576: LD_EXP 79
74580: PPUSH
74581: LD_VAR 0 1
74585: PPUSH
74586: LD_VAR 0 2
74590: PUSH
74591: LD_VAR 0 3
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PPUSH
74600: CALL_OW 1
74604: ST_TO_ADDR
// end ;
74605: LD_VAR 0 4
74609: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74610: LD_INT 0
74612: PPUSH
74613: PPUSH
74614: PPUSH
// if not mc_bases or not base or not ext_list then
74615: LD_EXP 44
74619: NOT
74620: PUSH
74621: LD_VAR 0 1
74625: NOT
74626: OR
74627: PUSH
74628: LD_VAR 0 5
74632: NOT
74633: OR
74634: IFFALSE 74638
// exit ;
74636: GO 74811
// tmp := GetFacExtXYD ( x , y , d ) ;
74638: LD_ADDR_VAR 0 8
74642: PUSH
74643: LD_VAR 0 2
74647: PPUSH
74648: LD_VAR 0 3
74652: PPUSH
74653: LD_VAR 0 4
74657: PPUSH
74658: CALL 55562 0 3
74662: ST_TO_ADDR
// if not tmp then
74663: LD_VAR 0 8
74667: NOT
74668: IFFALSE 74672
// exit ;
74670: GO 74811
// for i in tmp do
74672: LD_ADDR_VAR 0 7
74676: PUSH
74677: LD_VAR 0 8
74681: PUSH
74682: FOR_IN
74683: IFFALSE 74809
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74685: LD_ADDR_EXP 49
74689: PUSH
74690: LD_EXP 49
74694: PPUSH
74695: LD_VAR 0 1
74699: PPUSH
74700: LD_EXP 49
74704: PUSH
74705: LD_VAR 0 1
74709: ARRAY
74710: PPUSH
74711: LD_EXP 49
74715: PUSH
74716: LD_VAR 0 1
74720: ARRAY
74721: PUSH
74722: LD_INT 1
74724: PLUS
74725: PPUSH
74726: LD_VAR 0 5
74730: PUSH
74731: LD_INT 1
74733: ARRAY
74734: PUSH
74735: LD_VAR 0 7
74739: PUSH
74740: LD_INT 1
74742: ARRAY
74743: PUSH
74744: LD_VAR 0 7
74748: PUSH
74749: LD_INT 2
74751: ARRAY
74752: PUSH
74753: LD_VAR 0 7
74757: PUSH
74758: LD_INT 3
74760: ARRAY
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: PPUSH
74768: CALL_OW 2
74772: PPUSH
74773: CALL_OW 1
74777: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74778: LD_ADDR_VAR 0 5
74782: PUSH
74783: LD_VAR 0 5
74787: PPUSH
74788: LD_INT 1
74790: PPUSH
74791: CALL_OW 3
74795: ST_TO_ADDR
// if not ext_list then
74796: LD_VAR 0 5
74800: NOT
74801: IFFALSE 74807
// exit ;
74803: POP
74804: POP
74805: GO 74811
// end ;
74807: GO 74682
74809: POP
74810: POP
// end ;
74811: LD_VAR 0 6
74815: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74816: LD_INT 0
74818: PPUSH
// if not mc_bases or not base or not weapon_list then
74819: LD_EXP 44
74823: NOT
74824: PUSH
74825: LD_VAR 0 1
74829: NOT
74830: OR
74831: PUSH
74832: LD_VAR 0 2
74836: NOT
74837: OR
74838: IFFALSE 74842
// exit ;
74840: GO 74867
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74842: LD_ADDR_EXP 82
74846: PUSH
74847: LD_EXP 82
74851: PPUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_VAR 0 2
74861: PPUSH
74862: CALL_OW 1
74866: ST_TO_ADDR
// end ;
74867: LD_VAR 0 3
74871: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74872: LD_INT 0
74874: PPUSH
// if not mc_bases or not base or not tech_list then
74875: LD_EXP 44
74879: NOT
74880: PUSH
74881: LD_VAR 0 1
74885: NOT
74886: OR
74887: PUSH
74888: LD_VAR 0 2
74892: NOT
74893: OR
74894: IFFALSE 74898
// exit ;
74896: GO 74923
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74898: LD_ADDR_EXP 71
74902: PUSH
74903: LD_EXP 71
74907: PPUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: LD_VAR 0 2
74917: PPUSH
74918: CALL_OW 1
74922: ST_TO_ADDR
// end ;
74923: LD_VAR 0 3
74927: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74928: LD_INT 0
74930: PPUSH
// if not mc_bases or not parking_area or not base then
74931: LD_EXP 44
74935: NOT
74936: PUSH
74937: LD_VAR 0 2
74941: NOT
74942: OR
74943: PUSH
74944: LD_VAR 0 1
74948: NOT
74949: OR
74950: IFFALSE 74954
// exit ;
74952: GO 74979
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74954: LD_ADDR_EXP 68
74958: PUSH
74959: LD_EXP 68
74963: PPUSH
74964: LD_VAR 0 1
74968: PPUSH
74969: LD_VAR 0 2
74973: PPUSH
74974: CALL_OW 1
74978: ST_TO_ADDR
// end ;
74979: LD_VAR 0 3
74983: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74984: LD_INT 0
74986: PPUSH
// if not mc_bases or not base or not scan_area then
74987: LD_EXP 44
74991: NOT
74992: PUSH
74993: LD_VAR 0 1
74997: NOT
74998: OR
74999: PUSH
75000: LD_VAR 0 2
75004: NOT
75005: OR
75006: IFFALSE 75010
// exit ;
75008: GO 75035
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
75010: LD_ADDR_EXP 69
75014: PUSH
75015: LD_EXP 69
75019: PPUSH
75020: LD_VAR 0 1
75024: PPUSH
75025: LD_VAR 0 2
75029: PPUSH
75030: CALL_OW 1
75034: ST_TO_ADDR
// end ; end_of_file
75035: LD_VAR 0 3
75039: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75040: LD_INT 0
75042: PPUSH
75043: PPUSH
75044: PPUSH
// if not mc_bases then
75045: LD_EXP 44
75049: NOT
75050: IFFALSE 75054
// exit ;
75052: GO 75219
// for i = 1 to mc_bases do
75054: LD_ADDR_VAR 0 4
75058: PUSH
75059: DOUBLE
75060: LD_INT 1
75062: DEC
75063: ST_TO_ADDR
75064: LD_EXP 44
75068: PUSH
75069: FOR_TO
75070: IFFALSE 75217
// begin if sci in mc_bases [ i ] then
75072: LD_VAR 0 2
75076: PUSH
75077: LD_EXP 44
75081: PUSH
75082: LD_VAR 0 4
75086: ARRAY
75087: IN
75088: IFFALSE 75215
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75090: LD_ADDR_EXP 73
75094: PUSH
75095: LD_EXP 73
75099: PPUSH
75100: LD_VAR 0 4
75104: PUSH
75105: LD_EXP 73
75109: PUSH
75110: LD_VAR 0 4
75114: ARRAY
75115: PUSH
75116: LD_INT 1
75118: PLUS
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PPUSH
75124: LD_VAR 0 1
75128: PPUSH
75129: CALL 22864 0 3
75133: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75134: LD_ADDR_VAR 0 5
75138: PUSH
75139: LD_EXP 44
75143: PUSH
75144: LD_VAR 0 4
75148: ARRAY
75149: PPUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 30
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 30
75165: PUSH
75166: LD_INT 1
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: PPUSH
75178: CALL_OW 72
75182: PPUSH
75183: LD_VAR 0 1
75187: PPUSH
75188: CALL_OW 74
75192: ST_TO_ADDR
// if tmp then
75193: LD_VAR 0 5
75197: IFFALSE 75213
// ComStandNearbyBuilding ( ape , tmp ) ;
75199: LD_VAR 0 1
75203: PPUSH
75204: LD_VAR 0 5
75208: PPUSH
75209: CALL 17106 0 2
// break ;
75213: GO 75217
// end ; end ;
75215: GO 75069
75217: POP
75218: POP
// end ;
75219: LD_VAR 0 3
75223: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75224: LD_INT 0
75226: PPUSH
75227: PPUSH
75228: PPUSH
// if not mc_bases then
75229: LD_EXP 44
75233: NOT
75234: IFFALSE 75238
// exit ;
75236: GO 75327
// for i = 1 to mc_bases do
75238: LD_ADDR_VAR 0 4
75242: PUSH
75243: DOUBLE
75244: LD_INT 1
75246: DEC
75247: ST_TO_ADDR
75248: LD_EXP 44
75252: PUSH
75253: FOR_TO
75254: IFFALSE 75325
// begin if building in mc_busy_turret_list [ i ] then
75256: LD_VAR 0 1
75260: PUSH
75261: LD_EXP 54
75265: PUSH
75266: LD_VAR 0 4
75270: ARRAY
75271: IN
75272: IFFALSE 75323
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75274: LD_ADDR_VAR 0 5
75278: PUSH
75279: LD_EXP 54
75283: PUSH
75284: LD_VAR 0 4
75288: ARRAY
75289: PUSH
75290: LD_VAR 0 1
75294: DIFF
75295: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75296: LD_ADDR_EXP 54
75300: PUSH
75301: LD_EXP 54
75305: PPUSH
75306: LD_VAR 0 4
75310: PPUSH
75311: LD_VAR 0 5
75315: PPUSH
75316: CALL_OW 1
75320: ST_TO_ADDR
// break ;
75321: GO 75325
// end ; end ;
75323: GO 75253
75325: POP
75326: POP
// end ;
75327: LD_VAR 0 3
75331: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75332: LD_INT 0
75334: PPUSH
75335: PPUSH
75336: PPUSH
// if not mc_bases then
75337: LD_EXP 44
75341: NOT
75342: IFFALSE 75346
// exit ;
75344: GO 75545
// for i = 1 to mc_bases do
75346: LD_ADDR_VAR 0 5
75350: PUSH
75351: DOUBLE
75352: LD_INT 1
75354: DEC
75355: ST_TO_ADDR
75356: LD_EXP 44
75360: PUSH
75361: FOR_TO
75362: IFFALSE 75543
// if building in mc_bases [ i ] then
75364: LD_VAR 0 1
75368: PUSH
75369: LD_EXP 44
75373: PUSH
75374: LD_VAR 0 5
75378: ARRAY
75379: IN
75380: IFFALSE 75541
// begin tmp := mc_bases [ i ] diff building ;
75382: LD_ADDR_VAR 0 6
75386: PUSH
75387: LD_EXP 44
75391: PUSH
75392: LD_VAR 0 5
75396: ARRAY
75397: PUSH
75398: LD_VAR 0 1
75402: DIFF
75403: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75404: LD_ADDR_EXP 44
75408: PUSH
75409: LD_EXP 44
75413: PPUSH
75414: LD_VAR 0 5
75418: PPUSH
75419: LD_VAR 0 6
75423: PPUSH
75424: CALL_OW 1
75428: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75429: LD_VAR 0 1
75433: PUSH
75434: LD_EXP 52
75438: PUSH
75439: LD_VAR 0 5
75443: ARRAY
75444: IN
75445: IFFALSE 75484
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75447: LD_ADDR_EXP 52
75451: PUSH
75452: LD_EXP 52
75456: PPUSH
75457: LD_VAR 0 5
75461: PPUSH
75462: LD_EXP 52
75466: PUSH
75467: LD_VAR 0 5
75471: ARRAY
75472: PUSH
75473: LD_VAR 0 1
75477: DIFF
75478: PPUSH
75479: CALL_OW 1
75483: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75484: LD_VAR 0 1
75488: PUSH
75489: LD_EXP 53
75493: PUSH
75494: LD_VAR 0 5
75498: ARRAY
75499: IN
75500: IFFALSE 75539
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75502: LD_ADDR_EXP 53
75506: PUSH
75507: LD_EXP 53
75511: PPUSH
75512: LD_VAR 0 5
75516: PPUSH
75517: LD_EXP 53
75521: PUSH
75522: LD_VAR 0 5
75526: ARRAY
75527: PUSH
75528: LD_VAR 0 1
75532: DIFF
75533: PPUSH
75534: CALL_OW 1
75538: ST_TO_ADDR
// break ;
75539: GO 75543
// end ;
75541: GO 75361
75543: POP
75544: POP
// end ;
75545: LD_VAR 0 4
75549: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75550: LD_INT 0
75552: PPUSH
75553: PPUSH
75554: PPUSH
// if not mc_bases or not side in mc_sides then
75555: LD_EXP 44
75559: NOT
75560: PUSH
75561: LD_VAR 0 3
75565: PUSH
75566: LD_EXP 70
75570: IN
75571: NOT
75572: OR
75573: IFFALSE 75577
// exit ;
75575: GO 75700
// for i = 1 to mc_vehicles do
75577: LD_ADDR_VAR 0 6
75581: PUSH
75582: DOUBLE
75583: LD_INT 1
75585: DEC
75586: ST_TO_ADDR
75587: LD_EXP 63
75591: PUSH
75592: FOR_TO
75593: IFFALSE 75698
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75595: LD_VAR 0 2
75599: PUSH
75600: LD_EXP 63
75604: PUSH
75605: LD_VAR 0 6
75609: ARRAY
75610: IN
75611: PUSH
75612: LD_VAR 0 1
75616: PUSH
75617: LD_EXP 63
75621: PUSH
75622: LD_VAR 0 6
75626: ARRAY
75627: IN
75628: OR
75629: IFFALSE 75696
// begin tmp := mc_vehicles [ i ] diff old ;
75631: LD_ADDR_VAR 0 7
75635: PUSH
75636: LD_EXP 63
75640: PUSH
75641: LD_VAR 0 6
75645: ARRAY
75646: PUSH
75647: LD_VAR 0 2
75651: DIFF
75652: ST_TO_ADDR
// tmp := tmp diff new ;
75653: LD_ADDR_VAR 0 7
75657: PUSH
75658: LD_VAR 0 7
75662: PUSH
75663: LD_VAR 0 1
75667: DIFF
75668: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75669: LD_ADDR_EXP 63
75673: PUSH
75674: LD_EXP 63
75678: PPUSH
75679: LD_VAR 0 6
75683: PPUSH
75684: LD_VAR 0 7
75688: PPUSH
75689: CALL_OW 1
75693: ST_TO_ADDR
// break ;
75694: GO 75698
// end ;
75696: GO 75592
75698: POP
75699: POP
// end ;
75700: LD_VAR 0 5
75704: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75705: LD_INT 0
75707: PPUSH
75708: PPUSH
75709: PPUSH
75710: PPUSH
// if not mc_bases then
75711: LD_EXP 44
75715: NOT
75716: IFFALSE 75720
// exit ;
75718: GO 76012
// side := GetSide ( vehicle ) ;
75720: LD_ADDR_VAR 0 5
75724: PUSH
75725: LD_VAR 0 1
75729: PPUSH
75730: CALL_OW 255
75734: ST_TO_ADDR
// for i = 1 to mc_bases do
75735: LD_ADDR_VAR 0 4
75739: PUSH
75740: DOUBLE
75741: LD_INT 1
75743: DEC
75744: ST_TO_ADDR
75745: LD_EXP 44
75749: PUSH
75750: FOR_TO
75751: IFFALSE 76010
// begin if factory in mc_bases [ i ] then
75753: LD_VAR 0 2
75757: PUSH
75758: LD_EXP 44
75762: PUSH
75763: LD_VAR 0 4
75767: ARRAY
75768: IN
75769: IFFALSE 76008
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
75771: LD_EXP 66
75775: PUSH
75776: LD_VAR 0 4
75780: ARRAY
75781: PUSH
75782: LD_EXP 55
75786: PUSH
75787: LD_VAR 0 4
75791: ARRAY
75792: LESS
75793: IFFALSE 75964
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
75795: LD_ADDR_EXP 66
75799: PUSH
75800: LD_EXP 66
75804: PPUSH
75805: LD_VAR 0 4
75809: PPUSH
75810: LD_EXP 66
75814: PUSH
75815: LD_VAR 0 4
75819: ARRAY
75820: PUSH
75821: LD_VAR 0 1
75825: ADD
75826: PPUSH
75827: CALL_OW 1
75831: ST_TO_ADDR
// if not mc_scan [ i ] then
75832: LD_EXP 67
75836: PUSH
75837: LD_VAR 0 4
75841: ARRAY
75842: NOT
75843: IFFALSE 75962
// begin if GetControl ( vehicle ) = control_remote then
75845: LD_VAR 0 1
75849: PPUSH
75850: CALL_OW 263
75854: PUSH
75855: LD_INT 2
75857: EQUAL
75858: IFFALSE 75878
// repeat wait ( 0 0$1 ) ;
75860: LD_INT 35
75862: PPUSH
75863: CALL_OW 67
// until IsControledBy ( vehicle ) ;
75867: LD_VAR 0 1
75871: PPUSH
75872: CALL_OW 312
75876: IFFALSE 75860
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
75878: LD_VAR 0 1
75882: PPUSH
75883: LD_EXP 68
75887: PUSH
75888: LD_VAR 0 4
75892: ARRAY
75893: PPUSH
75894: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
75898: LD_VAR 0 1
75902: PPUSH
75903: CALL_OW 263
75907: PUSH
75908: LD_INT 1
75910: NONEQUAL
75911: IFFALSE 75915
// break ;
75913: GO 76010
// repeat wait ( 0 0$1 ) ;
75915: LD_INT 35
75917: PPUSH
75918: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
75922: LD_VAR 0 1
75926: PPUSH
75927: LD_EXP 68
75931: PUSH
75932: LD_VAR 0 4
75936: ARRAY
75937: PPUSH
75938: CALL_OW 308
75942: IFFALSE 75915
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
75944: LD_VAR 0 1
75948: PPUSH
75949: CALL_OW 311
75953: PPUSH
75954: CALL_OW 121
// exit ;
75958: POP
75959: POP
75960: GO 76012
// end ; end else
75962: GO 76008
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
75964: LD_ADDR_EXP 63
75968: PUSH
75969: LD_EXP 63
75973: PPUSH
75974: LD_VAR 0 4
75978: PUSH
75979: LD_EXP 63
75983: PUSH
75984: LD_VAR 0 4
75988: ARRAY
75989: PUSH
75990: LD_INT 1
75992: PLUS
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PPUSH
75998: LD_VAR 0 1
76002: PPUSH
76003: CALL 22864 0 3
76007: ST_TO_ADDR
// end ; end ;
76008: GO 75750
76010: POP
76011: POP
// end ;
76012: LD_VAR 0 3
76016: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76017: LD_INT 0
76019: PPUSH
76020: PPUSH
76021: PPUSH
76022: PPUSH
// if not mc_bases then
76023: LD_EXP 44
76027: NOT
76028: IFFALSE 76032
// exit ;
76030: GO 76385
// repeat wait ( 0 0$1 ) ;
76032: LD_INT 35
76034: PPUSH
76035: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76039: LD_VAR 0 2
76043: PPUSH
76044: LD_VAR 0 3
76048: PPUSH
76049: CALL_OW 284
76053: IFFALSE 76032
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76055: LD_VAR 0 2
76059: PPUSH
76060: LD_VAR 0 3
76064: PPUSH
76065: CALL_OW 283
76069: PUSH
76070: LD_INT 4
76072: EQUAL
76073: IFFALSE 76077
// exit ;
76075: GO 76385
// for i = 1 to mc_bases do
76077: LD_ADDR_VAR 0 7
76081: PUSH
76082: DOUBLE
76083: LD_INT 1
76085: DEC
76086: ST_TO_ADDR
76087: LD_EXP 44
76091: PUSH
76092: FOR_TO
76093: IFFALSE 76383
// begin if mc_crates_area [ i ] then
76095: LD_EXP 62
76099: PUSH
76100: LD_VAR 0 7
76104: ARRAY
76105: IFFALSE 76216
// for j in mc_crates_area [ i ] do
76107: LD_ADDR_VAR 0 8
76111: PUSH
76112: LD_EXP 62
76116: PUSH
76117: LD_VAR 0 7
76121: ARRAY
76122: PUSH
76123: FOR_IN
76124: IFFALSE 76214
// if InArea ( x , y , j ) then
76126: LD_VAR 0 2
76130: PPUSH
76131: LD_VAR 0 3
76135: PPUSH
76136: LD_VAR 0 8
76140: PPUSH
76141: CALL_OW 309
76145: IFFALSE 76212
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76147: LD_ADDR_EXP 60
76151: PUSH
76152: LD_EXP 60
76156: PPUSH
76157: LD_VAR 0 7
76161: PUSH
76162: LD_EXP 60
76166: PUSH
76167: LD_VAR 0 7
76171: ARRAY
76172: PUSH
76173: LD_INT 1
76175: PLUS
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PPUSH
76181: LD_VAR 0 4
76185: PUSH
76186: LD_VAR 0 2
76190: PUSH
76191: LD_VAR 0 3
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: LIST
76200: PPUSH
76201: CALL 22864 0 3
76205: ST_TO_ADDR
// exit ;
76206: POP
76207: POP
76208: POP
76209: POP
76210: GO 76385
// end ;
76212: GO 76123
76214: POP
76215: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76216: LD_ADDR_VAR 0 9
76220: PUSH
76221: LD_EXP 44
76225: PUSH
76226: LD_VAR 0 7
76230: ARRAY
76231: PPUSH
76232: LD_INT 2
76234: PUSH
76235: LD_INT 30
76237: PUSH
76238: LD_INT 0
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 30
76247: PUSH
76248: LD_INT 1
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: LIST
76259: PPUSH
76260: CALL_OW 72
76264: ST_TO_ADDR
// if not depot then
76265: LD_VAR 0 9
76269: NOT
76270: IFFALSE 76274
// continue ;
76272: GO 76092
// for j in depot do
76274: LD_ADDR_VAR 0 8
76278: PUSH
76279: LD_VAR 0 9
76283: PUSH
76284: FOR_IN
76285: IFFALSE 76379
// if GetDistUnitXY ( j , x , y ) < 30 then
76287: LD_VAR 0 8
76291: PPUSH
76292: LD_VAR 0 2
76296: PPUSH
76297: LD_VAR 0 3
76301: PPUSH
76302: CALL_OW 297
76306: PUSH
76307: LD_INT 30
76309: LESS
76310: IFFALSE 76377
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76312: LD_ADDR_EXP 60
76316: PUSH
76317: LD_EXP 60
76321: PPUSH
76322: LD_VAR 0 7
76326: PUSH
76327: LD_EXP 60
76331: PUSH
76332: LD_VAR 0 7
76336: ARRAY
76337: PUSH
76338: LD_INT 1
76340: PLUS
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PPUSH
76346: LD_VAR 0 4
76350: PUSH
76351: LD_VAR 0 2
76355: PUSH
76356: LD_VAR 0 3
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: LIST
76365: PPUSH
76366: CALL 22864 0 3
76370: ST_TO_ADDR
// exit ;
76371: POP
76372: POP
76373: POP
76374: POP
76375: GO 76385
// end ;
76377: GO 76284
76379: POP
76380: POP
// end ;
76381: GO 76092
76383: POP
76384: POP
// end ;
76385: LD_VAR 0 6
76389: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76390: LD_INT 0
76392: PPUSH
76393: PPUSH
76394: PPUSH
76395: PPUSH
// side := GetSide ( lab ) ;
76396: LD_ADDR_VAR 0 4
76400: PUSH
76401: LD_VAR 0 2
76405: PPUSH
76406: CALL_OW 255
76410: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76411: LD_VAR 0 4
76415: PUSH
76416: LD_EXP 70
76420: IN
76421: NOT
76422: PUSH
76423: LD_EXP 71
76427: NOT
76428: OR
76429: PUSH
76430: LD_EXP 44
76434: NOT
76435: OR
76436: IFFALSE 76440
// exit ;
76438: GO 76673
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76440: LD_ADDR_EXP 71
76444: PUSH
76445: LD_EXP 71
76449: PPUSH
76450: LD_VAR 0 4
76454: PPUSH
76455: LD_EXP 71
76459: PUSH
76460: LD_VAR 0 4
76464: ARRAY
76465: PUSH
76466: LD_VAR 0 1
76470: DIFF
76471: PPUSH
76472: CALL_OW 1
76476: ST_TO_ADDR
// for i = 1 to mc_bases do
76477: LD_ADDR_VAR 0 5
76481: PUSH
76482: DOUBLE
76483: LD_INT 1
76485: DEC
76486: ST_TO_ADDR
76487: LD_EXP 44
76491: PUSH
76492: FOR_TO
76493: IFFALSE 76671
// begin if lab in mc_bases [ i ] then
76495: LD_VAR 0 2
76499: PUSH
76500: LD_EXP 44
76504: PUSH
76505: LD_VAR 0 5
76509: ARRAY
76510: IN
76511: IFFALSE 76669
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76513: LD_VAR 0 1
76517: PUSH
76518: LD_INT 11
76520: PUSH
76521: LD_INT 4
76523: PUSH
76524: LD_INT 3
76526: PUSH
76527: LD_INT 2
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: IN
76536: PUSH
76537: LD_EXP 74
76541: PUSH
76542: LD_VAR 0 5
76546: ARRAY
76547: AND
76548: IFFALSE 76669
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76550: LD_ADDR_VAR 0 6
76554: PUSH
76555: LD_EXP 74
76559: PUSH
76560: LD_VAR 0 5
76564: ARRAY
76565: PUSH
76566: LD_INT 1
76568: ARRAY
76569: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76570: LD_ADDR_EXP 74
76574: PUSH
76575: LD_EXP 74
76579: PPUSH
76580: LD_VAR 0 5
76584: PPUSH
76585: EMPTY
76586: PPUSH
76587: CALL_OW 1
76591: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76592: LD_VAR 0 6
76596: PPUSH
76597: LD_INT 0
76599: PPUSH
76600: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76604: LD_VAR 0 6
76608: PPUSH
76609: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76613: LD_ADDR_EXP 73
76617: PUSH
76618: LD_EXP 73
76622: PPUSH
76623: LD_VAR 0 5
76627: PPUSH
76628: LD_EXP 73
76632: PUSH
76633: LD_VAR 0 5
76637: ARRAY
76638: PPUSH
76639: LD_INT 1
76641: PPUSH
76642: LD_VAR 0 6
76646: PPUSH
76647: CALL_OW 2
76651: PPUSH
76652: CALL_OW 1
76656: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76657: LD_VAR 0 5
76661: PPUSH
76662: LD_INT 112
76664: PPUSH
76665: CALL 60612 0 2
// end ; end ; end ;
76669: GO 76492
76671: POP
76672: POP
// end ;
76673: LD_VAR 0 3
76677: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
76678: LD_INT 0
76680: PPUSH
76681: PPUSH
76682: PPUSH
76683: PPUSH
76684: PPUSH
76685: PPUSH
76686: PPUSH
76687: PPUSH
// if not mc_bases then
76688: LD_EXP 44
76692: NOT
76693: IFFALSE 76697
// exit ;
76695: GO 77622
// for i = 1 to mc_bases do
76697: LD_ADDR_VAR 0 3
76701: PUSH
76702: DOUBLE
76703: LD_INT 1
76705: DEC
76706: ST_TO_ADDR
76707: LD_EXP 44
76711: PUSH
76712: FOR_TO
76713: IFFALSE 77620
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
76715: LD_VAR 0 1
76719: PUSH
76720: LD_EXP 44
76724: PUSH
76725: LD_VAR 0 3
76729: ARRAY
76730: IN
76731: PUSH
76732: LD_VAR 0 1
76736: PUSH
76737: LD_EXP 51
76741: PUSH
76742: LD_VAR 0 3
76746: ARRAY
76747: IN
76748: OR
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_EXP 63
76759: PUSH
76760: LD_VAR 0 3
76764: ARRAY
76765: IN
76766: OR
76767: PUSH
76768: LD_VAR 0 1
76772: PUSH
76773: LD_EXP 73
76777: PUSH
76778: LD_VAR 0 3
76782: ARRAY
76783: IN
76784: OR
76785: PUSH
76786: LD_VAR 0 1
76790: PUSH
76791: LD_EXP 74
76795: PUSH
76796: LD_VAR 0 3
76800: ARRAY
76801: IN
76802: OR
76803: IFFALSE 77618
// begin if un in mc_ape [ i ] then
76805: LD_VAR 0 1
76809: PUSH
76810: LD_EXP 73
76814: PUSH
76815: LD_VAR 0 3
76819: ARRAY
76820: IN
76821: IFFALSE 76860
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
76823: LD_ADDR_EXP 73
76827: PUSH
76828: LD_EXP 73
76832: PPUSH
76833: LD_VAR 0 3
76837: PPUSH
76838: LD_EXP 73
76842: PUSH
76843: LD_VAR 0 3
76847: ARRAY
76848: PUSH
76849: LD_VAR 0 1
76853: DIFF
76854: PPUSH
76855: CALL_OW 1
76859: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
76860: LD_VAR 0 1
76864: PUSH
76865: LD_EXP 74
76869: PUSH
76870: LD_VAR 0 3
76874: ARRAY
76875: IN
76876: IFFALSE 76900
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76878: LD_ADDR_EXP 74
76882: PUSH
76883: LD_EXP 74
76887: PPUSH
76888: LD_VAR 0 3
76892: PPUSH
76893: EMPTY
76894: PPUSH
76895: CALL_OW 1
76899: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
76900: LD_VAR 0 1
76904: PPUSH
76905: CALL_OW 247
76909: PUSH
76910: LD_INT 2
76912: EQUAL
76913: PUSH
76914: LD_VAR 0 1
76918: PPUSH
76919: CALL_OW 110
76923: PUSH
76924: LD_INT 20
76926: EQUAL
76927: AND
76928: IFFALSE 77031
// begin fac := MC_GetBuilding ( i , b_factory ) ;
76930: LD_ADDR_VAR 0 8
76934: PUSH
76935: LD_VAR 0 3
76939: PPUSH
76940: LD_INT 3
76942: PPUSH
76943: CALL 74144 0 2
76947: ST_TO_ADDR
// if fac then
76948: LD_VAR 0 8
76952: IFFALSE 77031
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
76954: LD_ADDR_VAR 0 9
76958: PUSH
76959: LD_VAR 0 8
76963: PPUSH
76964: LD_VAR 0 1
76968: PPUSH
76969: CALL_OW 265
76973: PPUSH
76974: LD_VAR 0 1
76978: PPUSH
76979: CALL_OW 262
76983: PPUSH
76984: LD_VAR 0 1
76988: PPUSH
76989: CALL_OW 263
76993: PPUSH
76994: LD_VAR 0 1
76998: PPUSH
76999: CALL_OW 264
77003: PPUSH
77004: CALL 20029 0 5
77008: ST_TO_ADDR
// if components then
77009: LD_VAR 0 9
77013: IFFALSE 77029
// MC_InsertProduceList ( i , components ) ;
77015: LD_VAR 0 3
77019: PPUSH
77020: LD_VAR 0 9
77024: PPUSH
77025: CALL 73711 0 2
// break ;
77029: GO 77620
// end ; end ; if GetType ( un ) = unit_building then
77031: LD_VAR 0 1
77035: PPUSH
77036: CALL_OW 247
77040: PUSH
77041: LD_INT 3
77043: EQUAL
77044: IFFALSE 77341
// begin btype := GetBType ( un ) ;
77046: LD_ADDR_VAR 0 5
77050: PUSH
77051: LD_VAR 0 1
77055: PPUSH
77056: CALL_OW 266
77060: ST_TO_ADDR
// if btype = b_warehouse then
77061: LD_VAR 0 5
77065: PUSH
77066: LD_INT 1
77068: EQUAL
77069: IFFALSE 77087
// begin btype := b_depot ;
77071: LD_ADDR_VAR 0 5
77075: PUSH
77076: LD_INT 0
77078: ST_TO_ADDR
// pos := 1 ;
77079: LD_ADDR_VAR 0 6
77083: PUSH
77084: LD_INT 1
77086: ST_TO_ADDR
// end ; if btype = b_factory then
77087: LD_VAR 0 5
77091: PUSH
77092: LD_INT 3
77094: EQUAL
77095: IFFALSE 77113
// begin btype := b_workshop ;
77097: LD_ADDR_VAR 0 5
77101: PUSH
77102: LD_INT 2
77104: ST_TO_ADDR
// pos := 1 ;
77105: LD_ADDR_VAR 0 6
77109: PUSH
77110: LD_INT 1
77112: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
77113: LD_VAR 0 5
77117: PUSH
77118: LD_INT 7
77120: PUSH
77121: LD_INT 8
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: IN
77128: IFFALSE 77138
// btype := b_lab ;
77130: LD_ADDR_VAR 0 5
77134: PUSH
77135: LD_INT 6
77137: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77138: LD_ADDR_EXP 49
77142: PUSH
77143: LD_EXP 49
77147: PPUSH
77148: LD_VAR 0 3
77152: PUSH
77153: LD_EXP 49
77157: PUSH
77158: LD_VAR 0 3
77162: ARRAY
77163: PUSH
77164: LD_INT 1
77166: PLUS
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PPUSH
77172: LD_VAR 0 5
77176: PUSH
77177: LD_VAR 0 1
77181: PPUSH
77182: CALL_OW 250
77186: PUSH
77187: LD_VAR 0 1
77191: PPUSH
77192: CALL_OW 251
77196: PUSH
77197: LD_VAR 0 1
77201: PPUSH
77202: CALL_OW 254
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: PPUSH
77213: CALL 22864 0 3
77217: ST_TO_ADDR
// if pos = 1 then
77218: LD_VAR 0 6
77222: PUSH
77223: LD_INT 1
77225: EQUAL
77226: IFFALSE 77341
// begin tmp := mc_build_list [ i ] ;
77228: LD_ADDR_VAR 0 7
77232: PUSH
77233: LD_EXP 49
77237: PUSH
77238: LD_VAR 0 3
77242: ARRAY
77243: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77244: LD_VAR 0 7
77248: PPUSH
77249: LD_INT 2
77251: PUSH
77252: LD_INT 30
77254: PUSH
77255: LD_INT 0
77257: PUSH
77258: EMPTY
77259: LIST
77260: LIST
77261: PUSH
77262: LD_INT 30
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: LIST
77276: PPUSH
77277: CALL_OW 72
77281: IFFALSE 77291
// pos := 2 ;
77283: LD_ADDR_VAR 0 6
77287: PUSH
77288: LD_INT 2
77290: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
77291: LD_ADDR_VAR 0 7
77295: PUSH
77296: LD_VAR 0 7
77300: PPUSH
77301: LD_VAR 0 6
77305: PPUSH
77306: LD_VAR 0 7
77310: PPUSH
77311: CALL 22755 0 3
77315: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
77316: LD_ADDR_EXP 49
77320: PUSH
77321: LD_EXP 49
77325: PPUSH
77326: LD_VAR 0 3
77330: PPUSH
77331: LD_VAR 0 7
77335: PPUSH
77336: CALL_OW 1
77340: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
77341: LD_VAR 0 1
77345: PUSH
77346: LD_EXP 44
77350: PUSH
77351: LD_VAR 0 3
77355: ARRAY
77356: IN
77357: IFFALSE 77396
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
77359: LD_ADDR_EXP 44
77363: PUSH
77364: LD_EXP 44
77368: PPUSH
77369: LD_VAR 0 3
77373: PPUSH
77374: LD_EXP 44
77378: PUSH
77379: LD_VAR 0 3
77383: ARRAY
77384: PUSH
77385: LD_VAR 0 1
77389: DIFF
77390: PPUSH
77391: CALL_OW 1
77395: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
77396: LD_VAR 0 1
77400: PUSH
77401: LD_EXP 51
77405: PUSH
77406: LD_VAR 0 3
77410: ARRAY
77411: IN
77412: IFFALSE 77451
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
77414: LD_ADDR_EXP 51
77418: PUSH
77419: LD_EXP 51
77423: PPUSH
77424: LD_VAR 0 3
77428: PPUSH
77429: LD_EXP 51
77433: PUSH
77434: LD_VAR 0 3
77438: ARRAY
77439: PUSH
77440: LD_VAR 0 1
77444: DIFF
77445: PPUSH
77446: CALL_OW 1
77450: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
77451: LD_VAR 0 1
77455: PUSH
77456: LD_EXP 63
77460: PUSH
77461: LD_VAR 0 3
77465: ARRAY
77466: IN
77467: IFFALSE 77506
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
77469: LD_ADDR_EXP 63
77473: PUSH
77474: LD_EXP 63
77478: PPUSH
77479: LD_VAR 0 3
77483: PPUSH
77484: LD_EXP 63
77488: PUSH
77489: LD_VAR 0 3
77493: ARRAY
77494: PUSH
77495: LD_VAR 0 1
77499: DIFF
77500: PPUSH
77501: CALL_OW 1
77505: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
77506: LD_VAR 0 1
77510: PUSH
77511: LD_EXP 53
77515: PUSH
77516: LD_VAR 0 3
77520: ARRAY
77521: IN
77522: IFFALSE 77561
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
77524: LD_ADDR_EXP 53
77528: PUSH
77529: LD_EXP 53
77533: PPUSH
77534: LD_VAR 0 3
77538: PPUSH
77539: LD_EXP 53
77543: PUSH
77544: LD_VAR 0 3
77548: ARRAY
77549: PUSH
77550: LD_VAR 0 1
77554: DIFF
77555: PPUSH
77556: CALL_OW 1
77560: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
77561: LD_VAR 0 1
77565: PUSH
77566: LD_EXP 52
77570: PUSH
77571: LD_VAR 0 3
77575: ARRAY
77576: IN
77577: IFFALSE 77616
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
77579: LD_ADDR_EXP 52
77583: PUSH
77584: LD_EXP 52
77588: PPUSH
77589: LD_VAR 0 3
77593: PPUSH
77594: LD_EXP 52
77598: PUSH
77599: LD_VAR 0 3
77603: ARRAY
77604: PUSH
77605: LD_VAR 0 1
77609: DIFF
77610: PPUSH
77611: CALL_OW 1
77615: ST_TO_ADDR
// end ; break ;
77616: GO 77620
// end ;
77618: GO 76712
77620: POP
77621: POP
// end ;
77622: LD_VAR 0 2
77626: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
77627: LD_INT 0
77629: PPUSH
77630: PPUSH
77631: PPUSH
// if not mc_bases then
77632: LD_EXP 44
77636: NOT
77637: IFFALSE 77641
// exit ;
77639: GO 77856
// for i = 1 to mc_bases do
77641: LD_ADDR_VAR 0 3
77645: PUSH
77646: DOUBLE
77647: LD_INT 1
77649: DEC
77650: ST_TO_ADDR
77651: LD_EXP 44
77655: PUSH
77656: FOR_TO
77657: IFFALSE 77854
// begin if building in mc_construct_list [ i ] then
77659: LD_VAR 0 1
77663: PUSH
77664: LD_EXP 51
77668: PUSH
77669: LD_VAR 0 3
77673: ARRAY
77674: IN
77675: IFFALSE 77852
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77677: LD_ADDR_EXP 51
77681: PUSH
77682: LD_EXP 51
77686: PPUSH
77687: LD_VAR 0 3
77691: PPUSH
77692: LD_EXP 51
77696: PUSH
77697: LD_VAR 0 3
77701: ARRAY
77702: PUSH
77703: LD_VAR 0 1
77707: DIFF
77708: PPUSH
77709: CALL_OW 1
77713: ST_TO_ADDR
// if building in mc_lab [ i ] then
77714: LD_VAR 0 1
77718: PUSH
77719: LD_EXP 77
77723: PUSH
77724: LD_VAR 0 3
77728: ARRAY
77729: IN
77730: IFFALSE 77785
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
77732: LD_ADDR_EXP 78
77736: PUSH
77737: LD_EXP 78
77741: PPUSH
77742: LD_VAR 0 3
77746: PPUSH
77747: LD_EXP 78
77751: PUSH
77752: LD_VAR 0 3
77756: ARRAY
77757: PPUSH
77758: LD_INT 1
77760: PPUSH
77761: LD_EXP 78
77765: PUSH
77766: LD_VAR 0 3
77770: ARRAY
77771: PPUSH
77772: LD_INT 0
77774: PPUSH
77775: CALL 21847 0 4
77779: PPUSH
77780: CALL_OW 1
77784: ST_TO_ADDR
// if not building in mc_bases [ i ] then
77785: LD_VAR 0 1
77789: PUSH
77790: LD_EXP 44
77794: PUSH
77795: LD_VAR 0 3
77799: ARRAY
77800: IN
77801: NOT
77802: IFFALSE 77848
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77804: LD_ADDR_EXP 44
77808: PUSH
77809: LD_EXP 44
77813: PPUSH
77814: LD_VAR 0 3
77818: PUSH
77819: LD_EXP 44
77823: PUSH
77824: LD_VAR 0 3
77828: ARRAY
77829: PUSH
77830: LD_INT 1
77832: PLUS
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PPUSH
77838: LD_VAR 0 1
77842: PPUSH
77843: CALL 22864 0 3
77847: ST_TO_ADDR
// exit ;
77848: POP
77849: POP
77850: GO 77856
// end ; end ;
77852: GO 77656
77854: POP
77855: POP
// end ;
77856: LD_VAR 0 2
77860: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
77869: PPUSH
// if not mc_bases then
77870: LD_EXP 44
77874: NOT
77875: IFFALSE 77879
// exit ;
77877: GO 78540
// for i = 1 to mc_bases do
77879: LD_ADDR_VAR 0 3
77883: PUSH
77884: DOUBLE
77885: LD_INT 1
77887: DEC
77888: ST_TO_ADDR
77889: LD_EXP 44
77893: PUSH
77894: FOR_TO
77895: IFFALSE 78538
// begin if building in mc_construct_list [ i ] then
77897: LD_VAR 0 1
77901: PUSH
77902: LD_EXP 51
77906: PUSH
77907: LD_VAR 0 3
77911: ARRAY
77912: IN
77913: IFFALSE 78536
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77915: LD_ADDR_EXP 51
77919: PUSH
77920: LD_EXP 51
77924: PPUSH
77925: LD_VAR 0 3
77929: PPUSH
77930: LD_EXP 51
77934: PUSH
77935: LD_VAR 0 3
77939: ARRAY
77940: PUSH
77941: LD_VAR 0 1
77945: DIFF
77946: PPUSH
77947: CALL_OW 1
77951: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77952: LD_ADDR_EXP 44
77956: PUSH
77957: LD_EXP 44
77961: PPUSH
77962: LD_VAR 0 3
77966: PUSH
77967: LD_EXP 44
77971: PUSH
77972: LD_VAR 0 3
77976: ARRAY
77977: PUSH
77978: LD_INT 1
77980: PLUS
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PPUSH
77986: LD_VAR 0 1
77990: PPUSH
77991: CALL 22864 0 3
77995: ST_TO_ADDR
// btype := GetBType ( building ) ;
77996: LD_ADDR_VAR 0 5
78000: PUSH
78001: LD_VAR 0 1
78005: PPUSH
78006: CALL_OW 266
78010: ST_TO_ADDR
// side := GetSide ( building ) ;
78011: LD_ADDR_VAR 0 8
78015: PUSH
78016: LD_VAR 0 1
78020: PPUSH
78021: CALL_OW 255
78025: ST_TO_ADDR
// if btype = b_lab then
78026: LD_VAR 0 5
78030: PUSH
78031: LD_INT 6
78033: EQUAL
78034: IFFALSE 78084
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78036: LD_ADDR_EXP 77
78040: PUSH
78041: LD_EXP 77
78045: PPUSH
78046: LD_VAR 0 3
78050: PUSH
78051: LD_EXP 77
78055: PUSH
78056: LD_VAR 0 3
78060: ARRAY
78061: PUSH
78062: LD_INT 1
78064: PLUS
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PPUSH
78070: LD_VAR 0 1
78074: PPUSH
78075: CALL 22864 0 3
78079: ST_TO_ADDR
// exit ;
78080: POP
78081: POP
78082: GO 78540
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78084: LD_VAR 0 5
78088: PUSH
78089: LD_INT 0
78091: PUSH
78092: LD_INT 2
78094: PUSH
78095: LD_INT 4
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: LIST
78102: IN
78103: IFFALSE 78227
// begin if btype = b_armoury then
78105: LD_VAR 0 5
78109: PUSH
78110: LD_INT 4
78112: EQUAL
78113: IFFALSE 78123
// btype := b_barracks ;
78115: LD_ADDR_VAR 0 5
78119: PUSH
78120: LD_INT 5
78122: ST_TO_ADDR
// if btype = b_depot then
78123: LD_VAR 0 5
78127: PUSH
78128: LD_INT 0
78130: EQUAL
78131: IFFALSE 78141
// btype := b_warehouse ;
78133: LD_ADDR_VAR 0 5
78137: PUSH
78138: LD_INT 1
78140: ST_TO_ADDR
// if btype = b_workshop then
78141: LD_VAR 0 5
78145: PUSH
78146: LD_INT 2
78148: EQUAL
78149: IFFALSE 78159
// btype := b_factory ;
78151: LD_ADDR_VAR 0 5
78155: PUSH
78156: LD_INT 3
78158: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78159: LD_VAR 0 5
78163: PPUSH
78164: LD_VAR 0 8
78168: PPUSH
78169: CALL_OW 323
78173: PUSH
78174: LD_INT 1
78176: EQUAL
78177: IFFALSE 78223
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78179: LD_ADDR_EXP 76
78183: PUSH
78184: LD_EXP 76
78188: PPUSH
78189: LD_VAR 0 3
78193: PUSH
78194: LD_EXP 76
78198: PUSH
78199: LD_VAR 0 3
78203: ARRAY
78204: PUSH
78205: LD_INT 1
78207: PLUS
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PPUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: CALL 22864 0 3
78222: ST_TO_ADDR
// exit ;
78223: POP
78224: POP
78225: GO 78540
// end ; if btype in [ b_bunker , b_turret ] then
78227: LD_VAR 0 5
78231: PUSH
78232: LD_INT 32
78234: PUSH
78235: LD_INT 33
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: IN
78242: IFFALSE 78532
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
78244: LD_ADDR_EXP 52
78248: PUSH
78249: LD_EXP 52
78253: PPUSH
78254: LD_VAR 0 3
78258: PUSH
78259: LD_EXP 52
78263: PUSH
78264: LD_VAR 0 3
78268: ARRAY
78269: PUSH
78270: LD_INT 1
78272: PLUS
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: PPUSH
78278: LD_VAR 0 1
78282: PPUSH
78283: CALL 22864 0 3
78287: ST_TO_ADDR
// if btype = b_bunker then
78288: LD_VAR 0 5
78292: PUSH
78293: LD_INT 32
78295: EQUAL
78296: IFFALSE 78532
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78298: LD_ADDR_EXP 53
78302: PUSH
78303: LD_EXP 53
78307: PPUSH
78308: LD_VAR 0 3
78312: PUSH
78313: LD_EXP 53
78317: PUSH
78318: LD_VAR 0 3
78322: ARRAY
78323: PUSH
78324: LD_INT 1
78326: PLUS
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PPUSH
78332: LD_VAR 0 1
78336: PPUSH
78337: CALL 22864 0 3
78341: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
78342: LD_ADDR_VAR 0 6
78346: PUSH
78347: LD_EXP 44
78351: PUSH
78352: LD_VAR 0 3
78356: ARRAY
78357: PPUSH
78358: LD_INT 25
78360: PUSH
78361: LD_INT 1
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 3
78370: PUSH
78371: LD_INT 54
78373: PUSH
78374: EMPTY
78375: LIST
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: PPUSH
78385: CALL_OW 72
78389: ST_TO_ADDR
// if tmp then
78390: LD_VAR 0 6
78394: IFFALSE 78400
// exit ;
78396: POP
78397: POP
78398: GO 78540
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78400: LD_ADDR_VAR 0 6
78404: PUSH
78405: LD_EXP 44
78409: PUSH
78410: LD_VAR 0 3
78414: ARRAY
78415: PPUSH
78416: LD_INT 2
78418: PUSH
78419: LD_INT 30
78421: PUSH
78422: LD_INT 4
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 30
78431: PUSH
78432: LD_INT 5
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: LIST
78443: PPUSH
78444: CALL_OW 72
78448: ST_TO_ADDR
// if not tmp then
78449: LD_VAR 0 6
78453: NOT
78454: IFFALSE 78460
// exit ;
78456: POP
78457: POP
78458: GO 78540
// for j in tmp do
78460: LD_ADDR_VAR 0 4
78464: PUSH
78465: LD_VAR 0 6
78469: PUSH
78470: FOR_IN
78471: IFFALSE 78530
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
78473: LD_ADDR_VAR 0 7
78477: PUSH
78478: LD_VAR 0 4
78482: PPUSH
78483: CALL_OW 313
78487: PPUSH
78488: LD_INT 25
78490: PUSH
78491: LD_INT 1
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PPUSH
78498: CALL_OW 72
78502: ST_TO_ADDR
// if units then
78503: LD_VAR 0 7
78507: IFFALSE 78528
// begin ComExitBuilding ( units [ 1 ] ) ;
78509: LD_VAR 0 7
78513: PUSH
78514: LD_INT 1
78516: ARRAY
78517: PPUSH
78518: CALL_OW 122
// exit ;
78522: POP
78523: POP
78524: POP
78525: POP
78526: GO 78540
// end ; end ;
78528: GO 78470
78530: POP
78531: POP
// end ; end ; exit ;
78532: POP
78533: POP
78534: GO 78540
// end ; end ;
78536: GO 77894
78538: POP
78539: POP
// end ;
78540: LD_VAR 0 2
78544: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
78545: LD_INT 0
78547: PPUSH
78548: PPUSH
78549: PPUSH
78550: PPUSH
78551: PPUSH
78552: PPUSH
78553: PPUSH
// if not mc_bases then
78554: LD_EXP 44
78558: NOT
78559: IFFALSE 78563
// exit ;
78561: GO 78794
// btype := GetBType ( building ) ;
78563: LD_ADDR_VAR 0 6
78567: PUSH
78568: LD_VAR 0 1
78572: PPUSH
78573: CALL_OW 266
78577: ST_TO_ADDR
// x := GetX ( building ) ;
78578: LD_ADDR_VAR 0 7
78582: PUSH
78583: LD_VAR 0 1
78587: PPUSH
78588: CALL_OW 250
78592: ST_TO_ADDR
// y := GetY ( building ) ;
78593: LD_ADDR_VAR 0 8
78597: PUSH
78598: LD_VAR 0 1
78602: PPUSH
78603: CALL_OW 251
78607: ST_TO_ADDR
// d := GetDir ( building ) ;
78608: LD_ADDR_VAR 0 9
78612: PUSH
78613: LD_VAR 0 1
78617: PPUSH
78618: CALL_OW 254
78622: ST_TO_ADDR
// for i = 1 to mc_bases do
78623: LD_ADDR_VAR 0 4
78627: PUSH
78628: DOUBLE
78629: LD_INT 1
78631: DEC
78632: ST_TO_ADDR
78633: LD_EXP 44
78637: PUSH
78638: FOR_TO
78639: IFFALSE 78792
// begin if not mc_build_list [ i ] then
78641: LD_EXP 49
78645: PUSH
78646: LD_VAR 0 4
78650: ARRAY
78651: NOT
78652: IFFALSE 78656
// continue ;
78654: GO 78638
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
78656: LD_VAR 0 6
78660: PUSH
78661: LD_VAR 0 7
78665: PUSH
78666: LD_VAR 0 8
78670: PUSH
78671: LD_VAR 0 9
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: LIST
78680: LIST
78681: PPUSH
78682: LD_EXP 49
78686: PUSH
78687: LD_VAR 0 4
78691: ARRAY
78692: PUSH
78693: LD_INT 1
78695: ARRAY
78696: PPUSH
78697: CALL 28501 0 2
78701: IFFALSE 78790
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
78703: LD_ADDR_EXP 49
78707: PUSH
78708: LD_EXP 49
78712: PPUSH
78713: LD_VAR 0 4
78717: PPUSH
78718: LD_EXP 49
78722: PUSH
78723: LD_VAR 0 4
78727: ARRAY
78728: PPUSH
78729: LD_INT 1
78731: PPUSH
78732: CALL_OW 3
78736: PPUSH
78737: CALL_OW 1
78741: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
78742: LD_ADDR_EXP 51
78746: PUSH
78747: LD_EXP 51
78751: PPUSH
78752: LD_VAR 0 4
78756: PUSH
78757: LD_EXP 51
78761: PUSH
78762: LD_VAR 0 4
78766: ARRAY
78767: PUSH
78768: LD_INT 1
78770: PLUS
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PPUSH
78776: LD_VAR 0 1
78780: PPUSH
78781: CALL 22864 0 3
78785: ST_TO_ADDR
// exit ;
78786: POP
78787: POP
78788: GO 78794
// end ; end ;
78790: GO 78638
78792: POP
78793: POP
// end ;
78794: LD_VAR 0 3
78798: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
78799: LD_INT 0
78801: PPUSH
78802: PPUSH
78803: PPUSH
// if not mc_bases then
78804: LD_EXP 44
78808: NOT
78809: IFFALSE 78813
// exit ;
78811: GO 79003
// for i = 1 to mc_bases do
78813: LD_ADDR_VAR 0 4
78817: PUSH
78818: DOUBLE
78819: LD_INT 1
78821: DEC
78822: ST_TO_ADDR
78823: LD_EXP 44
78827: PUSH
78828: FOR_TO
78829: IFFALSE 78916
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
78831: LD_VAR 0 1
78835: PUSH
78836: LD_EXP 52
78840: PUSH
78841: LD_VAR 0 4
78845: ARRAY
78846: IN
78847: PUSH
78848: LD_VAR 0 1
78852: PUSH
78853: LD_EXP 53
78857: PUSH
78858: LD_VAR 0 4
78862: ARRAY
78863: IN
78864: NOT
78865: AND
78866: IFFALSE 78914
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78868: LD_ADDR_EXP 53
78872: PUSH
78873: LD_EXP 53
78877: PPUSH
78878: LD_VAR 0 4
78882: PUSH
78883: LD_EXP 53
78887: PUSH
78888: LD_VAR 0 4
78892: ARRAY
78893: PUSH
78894: LD_INT 1
78896: PLUS
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PPUSH
78902: LD_VAR 0 1
78906: PPUSH
78907: CALL 22864 0 3
78911: ST_TO_ADDR
// break ;
78912: GO 78916
// end ; end ;
78914: GO 78828
78916: POP
78917: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
78918: LD_VAR 0 1
78922: PPUSH
78923: CALL_OW 257
78927: PUSH
78928: LD_EXP 70
78932: IN
78933: PUSH
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 266
78943: PUSH
78944: LD_INT 5
78946: EQUAL
78947: AND
78948: PUSH
78949: LD_VAR 0 2
78953: PPUSH
78954: CALL_OW 110
78958: PUSH
78959: LD_INT 18
78961: NONEQUAL
78962: AND
78963: IFFALSE 79003
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
78965: LD_VAR 0 2
78969: PPUSH
78970: CALL_OW 257
78974: PUSH
78975: LD_INT 5
78977: PUSH
78978: LD_INT 8
78980: PUSH
78981: LD_INT 9
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: LIST
78988: IN
78989: IFFALSE 79003
// SetClass ( unit , 1 ) ;
78991: LD_VAR 0 2
78995: PPUSH
78996: LD_INT 1
78998: PPUSH
78999: CALL_OW 336
// end ;
79003: LD_VAR 0 3
79007: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79008: LD_INT 0
79010: PPUSH
79011: PPUSH
// if not mc_bases then
79012: LD_EXP 44
79016: NOT
79017: IFFALSE 79021
// exit ;
79019: GO 79137
// if GetLives ( abandoned_vehicle ) > 250 then
79021: LD_VAR 0 2
79025: PPUSH
79026: CALL_OW 256
79030: PUSH
79031: LD_INT 250
79033: GREATER
79034: IFFALSE 79038
// exit ;
79036: GO 79137
// for i = 1 to mc_bases do
79038: LD_ADDR_VAR 0 6
79042: PUSH
79043: DOUBLE
79044: LD_INT 1
79046: DEC
79047: ST_TO_ADDR
79048: LD_EXP 44
79052: PUSH
79053: FOR_TO
79054: IFFALSE 79135
// begin if driver in mc_bases [ i ] then
79056: LD_VAR 0 1
79060: PUSH
79061: LD_EXP 44
79065: PUSH
79066: LD_VAR 0 6
79070: ARRAY
79071: IN
79072: IFFALSE 79133
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79074: LD_VAR 0 1
79078: PPUSH
79079: LD_EXP 44
79083: PUSH
79084: LD_VAR 0 6
79088: ARRAY
79089: PPUSH
79090: LD_INT 2
79092: PUSH
79093: LD_INT 30
79095: PUSH
79096: LD_INT 0
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: PUSH
79103: LD_INT 30
79105: PUSH
79106: LD_INT 1
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: LIST
79117: PPUSH
79118: CALL_OW 72
79122: PUSH
79123: LD_INT 1
79125: ARRAY
79126: PPUSH
79127: CALL_OW 112
// break ;
79131: GO 79135
// end ; end ;
79133: GO 79053
79135: POP
79136: POP
// end ;
79137: LD_VAR 0 5
79141: RET
