// export MissionBegin , RussianAssaultStopped , readyForAttack ; export AMAttack , AMWesternArmor ; export LaserTanks , personnel , WesternEngineers , EasternEngineers , EasternBase ; export attack_group ; export ts , tk , tlz , t1 , t2 , t3 ; export game_start ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitMacro ;
   8: CALL 57709 0 0
// game_start := false ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ingame_video = true ;
  20: LD_ADDR_OWVAR 52
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// interface_hidden = true ;
  28: LD_ADDR_OWVAR 54
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// PlaceSeeing ( 70 , 139 , 7 , - 99 ) ;
  36: LD_INT 70
  38: PPUSH
  39: LD_INT 139
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 99
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 70 , 139 , 7 ) ;
  53: LD_INT 70
  55: PPUSH
  56: LD_INT 139
  58: PPUSH
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 331
// PrepareLaserTanks ;
  66: CALL 11303 0 0
// LaserTanks := [ ts , tk , tlz , t1 , t2 , t3 ] ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_EXP 12
  79: PUSH
  80: LD_EXP 13
  84: PUSH
  85: LD_EXP 14
  89: PUSH
  90: LD_EXP 15
  94: PUSH
  95: LD_EXP 16
  99: PUSH
 100: LD_EXP 17
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: ST_TO_ADDR
// attack_group = FilterUnitsExceptArea ( MainRUBase , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
 113: LD_ADDR_EXP 11
 117: PUSH
 118: LD_INT 9
 120: PPUSH
 121: LD_INT 22
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 50
 133: PUSH
 134: EMPTY
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 71
 145: ST_TO_ADDR
// CreatePersonnel ;
 146: CALL 3636 0 0
// PrepareDifficulty ;
 150: CALL 10907 0 0
// Garrison_Buildings ( 3 ) ;
 154: LD_INT 3
 156: PPUSH
 157: CALL 4673 0 1
// Garrison_Buildings_AM ( 1 ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL 5425 0 1
// Assemble_Barracks ( 3 ) ;
 168: LD_INT 3
 170: PPUSH
 171: CALL 6159 0 1
// Assemble_Barracks ( 1 ) ;
 175: LD_INT 1
 177: PPUSH
 178: CALL 6159 0 1
// PrepareNature ( 7 , 3 , 17 , 9 , 3 , 0 , 0 , Nat_GenArea , 0 ) ;
 182: LD_INT 7
 184: PPUSH
 185: LD_INT 3
 187: PPUSH
 188: LD_INT 17
 190: PPUSH
 191: LD_INT 9
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: LD_INT 19
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: CALL 49930 0 9
// WesternEngineers = UnitsInside ( base2 ) ;
 213: LD_ADDR_EXP 8
 217: PUSH
 218: LD_INT 1
 220: PPUSH
 221: CALL_OW 313
 225: ST_TO_ADDR
// EasternEngineers = UnitsInside ( base1 ) ;
 226: LD_ADDR_EXP 9
 230: PUSH
 231: LD_INT 3
 233: PPUSH
 234: CALL_OW 313
 238: ST_TO_ADDR
// music_class = 1 ;
 239: LD_ADDR_OWVAR 72
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// game_start := true ;
 247: LD_ADDR_EXP 18
 251: PUSH
 252: LD_INT 1
 254: ST_TO_ADDR
// PlaceHumanInUnit ( Simone , ts ) ;
 255: LD_EXP 19
 259: PPUSH
 260: LD_EXP 12
 264: PPUSH
 265: CALL_OW 52
// PlaceHumanInUnit ( Kathryn , tk ) ;
 269: LD_EXP 20
 273: PPUSH
 274: LD_EXP 13
 278: PPUSH
 279: CALL_OW 52
// PlaceHumanInUnit ( Lazarfeld , tlz ) ;
 283: LD_EXP 24
 287: PPUSH
 288: LD_EXP 14
 292: PPUSH
 293: CALL_OW 52
// PlaceHumanInUnit ( Gomez , t1 ) ;
 297: LD_EXP 23
 301: PPUSH
 302: LD_EXP 15
 306: PPUSH
 307: CALL_OW 52
// PlaceHumanInUnit ( Mirron , t2 ) ;
 311: LD_EXP 21
 315: PPUSH
 316: LD_EXP 16
 320: PPUSH
 321: CALL_OW 52
// PlaceHumanInUnit ( Valheim , t3 ) ;
 325: LD_EXP 22
 329: PPUSH
 330: LD_EXP 17
 334: PPUSH
 335: CALL_OW 52
// ComAgressiveMove ( Lazarfeld , 75 , 71 ) ;
 339: LD_EXP 24
 343: PPUSH
 344: LD_INT 75
 346: PPUSH
 347: LD_INT 71
 349: PPUSH
 350: CALL_OW 114
// ComAgressiveMove ( Mirron , 61 , 67 ) ;
 354: LD_EXP 21
 358: PPUSH
 359: LD_INT 61
 361: PPUSH
 362: LD_INT 67
 364: PPUSH
 365: CALL_OW 114
// ComAgressiveMove ( Valheim , 86 , 79 ) ;
 369: LD_EXP 22
 373: PPUSH
 374: LD_INT 86
 376: PPUSH
 377: LD_INT 79
 379: PPUSH
 380: CALL_OW 114
// ComAgressiveMove ( Simone , 125 , 81 ) ;
 384: LD_EXP 19
 388: PPUSH
 389: LD_INT 125
 391: PPUSH
 392: LD_INT 81
 394: PPUSH
 395: CALL_OW 114
// ComMoveXY ( Kathryn , 124 , 75 ) ;
 399: LD_EXP 20
 403: PPUSH
 404: LD_INT 124
 406: PPUSH
 407: LD_INT 75
 409: PPUSH
 410: CALL_OW 111
// ComAgressiveMove ( Gomez , 135 , 94 ) ;
 414: LD_EXP 23
 418: PPUSH
 419: LD_INT 135
 421: PPUSH
 422: LD_INT 94
 424: PPUSH
 425: CALL_OW 114
// ComMoveXY ( AMcrane , 65 , 56 ) ;
 429: LD_INT 124
 431: PPUSH
 432: LD_INT 65
 434: PPUSH
 435: LD_INT 56
 437: PPUSH
 438: CALL_OW 111
// DoNotAttack ( 3 , Simone ) ;
 442: LD_INT 3
 444: PPUSH
 445: LD_EXP 19
 449: PPUSH
 450: CALL_OW 471
// DoNotAttack ( 3 , Kathryn ) ;
 454: LD_INT 3
 456: PPUSH
 457: LD_EXP 20
 461: PPUSH
 462: CALL_OW 471
// DoNotAttack ( 3 , Gomez ) ;
 466: LD_INT 3
 468: PPUSH
 469: LD_EXP 23
 473: PPUSH
 474: CALL_OW 471
// CenterNowOnXY ( 61 , 96 ) ;
 478: LD_INT 61
 480: PPUSH
 481: LD_INT 96
 483: PPUSH
 484: CALL_OW 86
// Wait ( 0 0$2 ) ;
 488: LD_INT 70
 490: PPUSH
 491: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-2 ) ;
 495: LD_EXP 24
 499: PPUSH
 500: LD_STRING D1-Lazar-2
 502: PPUSH
 503: CALL_OW 94
// Wait ( 0 0$1 ) ;
 507: LD_INT 35
 509: PPUSH
 510: CALL_OW 67
// CenterOnXY ( 124 , 116 ) ;
 514: LD_INT 124
 516: PPUSH
 517: LD_INT 116
 519: PPUSH
 520: CALL_OW 84
// Wait ( 0 0$2 ) ;
 524: LD_INT 70
 526: PPUSH
 527: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-1 ) ;
 531: LD_EXP 24
 535: PPUSH
 536: LD_STRING D1-Lazar-1
 538: PPUSH
 539: CALL_OW 94
// Wait ( 0 0$3 ) ;
 543: LD_INT 105
 545: PPUSH
 546: CALL_OW 67
// CenterOnXY ( 127 , 89 ) ;
 550: LD_INT 127
 552: PPUSH
 553: LD_INT 89
 555: PPUSH
 556: CALL_OW 84
// Wait ( 0 0$15 ) ;
 560: LD_INT 525
 562: PPUSH
 563: CALL_OW 67
// SayRadio ( Lazarfeld , D1-Lazar-3 ) ;
 567: LD_EXP 24
 571: PPUSH
 572: LD_STRING D1-Lazar-3
 574: PPUSH
 575: CALL_OW 94
// Wait ( 0 0$3 ) ;
 579: LD_INT 105
 581: PPUSH
 582: CALL_OW 67
// ingame_video = false ;
 586: LD_ADDR_OWVAR 52
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// interface_hidden = false ;
 594: LD_ADDR_OWVAR 54
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// SayRadio ( Lazarfeld , D1a-Lazar-1 ) ;
 602: LD_EXP 24
 606: PPUSH
 607: LD_STRING D1a-Lazar-1
 609: PPUSH
 610: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-1 ) ;
 614: LD_EXP 27
 618: PPUSH
 619: LD_STRING D1a-Off-1
 621: PPUSH
 622: CALL_OW 94
// SayRadio ( Loghain , D1a-Off-2 ) ;
 626: LD_EXP 27
 630: PPUSH
 631: LD_STRING D1a-Off-2
 633: PPUSH
 634: CALL_OW 94
// SayRadio ( Lazarfeld , D1a-Lazar-2 ) ;
 638: LD_EXP 24
 642: PPUSH
 643: LD_STRING D1a-Lazar-2
 645: PPUSH
 646: CALL_OW 94
// Say ( Simone , D1a-Simone-1 ) ;
 650: LD_EXP 19
 654: PPUSH
 655: LD_STRING D1a-Simone-1
 657: PPUSH
 658: CALL_OW 88
// SayRadio ( Lazarfeld , D1a-Lazar-3 ) ;
 662: LD_EXP 24
 666: PPUSH
 667: LD_STRING D1a-Lazar-3
 669: PPUSH
 670: CALL_OW 94
// music_class = 0 ;
 674: LD_ADDR_OWVAR 72
 678: PUSH
 679: LD_INT 0
 681: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
 682: LD_STRING M1
 684: PPUSH
 685: CALL_OW 337
// NormalAttack ( 3 , Simone ) ;
 689: LD_INT 3
 691: PPUSH
 692: LD_EXP 19
 696: PPUSH
 697: CALL_OW 472
// NormalAttack ( 3 , Kathryn ) ;
 701: LD_INT 3
 703: PPUSH
 704: LD_EXP 20
 708: PPUSH
 709: CALL_OW 472
// NormalAttack ( 3 , Gomez ) ;
 713: LD_INT 3
 715: PPUSH
 716: LD_EXP 23
 720: PPUSH
 721: CALL_OW 472
// ComAgressiveMove ( WesternEngineers , 76 , 76 ) ;
 725: LD_EXP 8
 729: PPUSH
 730: LD_INT 76
 732: PPUSH
 733: LD_INT 76
 735: PPUSH
 736: CALL_OW 114
// ComAgressiveMove ( EasternEngineers , 126 , 91 ) ;
 740: LD_EXP 9
 744: PPUSH
 745: LD_INT 126
 747: PPUSH
 748: LD_INT 91
 750: PPUSH
 751: CALL_OW 114
// EasternBase = FilterUnitsInArea ( AMBaseEast , [ f_side , 1 ] ) ^ EasternEngineers ^ UnitsInside ( EastLab ) ^ UnitsInside ( Factor ) ^ UnitsInside ( EastArmor ) diff WesternEngineers ;
 755: LD_ADDR_EXP 10
 759: PUSH
 760: LD_INT 11
 762: PPUSH
 763: LD_INT 22
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PPUSH
 773: CALL_OW 70
 777: PUSH
 778: LD_EXP 9
 782: ADD
 783: PUSH
 784: LD_INT 12
 786: PPUSH
 787: CALL_OW 313
 791: ADD
 792: PUSH
 793: LD_INT 5
 795: PPUSH
 796: CALL_OW 313
 800: ADD
 801: PUSH
 802: LD_INT 4
 804: PPUSH
 805: CALL_OW 313
 809: ADD
 810: PUSH
 811: LD_EXP 8
 815: DIFF
 816: ST_TO_ADDR
// SetSide ( EasternBase , 7 ) ;
 817: LD_EXP 10
 821: PPUSH
 822: LD_INT 7
 824: PPUSH
 825: CALL_OW 235
// SaveForQuickRestart ;
 829: CALL_OW 22
// MissionBegin = true ;
 833: LD_ADDR_EXP 1
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// end ;
 841: END
// every 0 0$1 trigger MissionBegin do
 842: LD_EXP 1
 846: IFFALSE 2137
 848: GO 850
 850: DISABLE
// begin Wait ( 0 0$42 ) ;
 851: LD_INT 1470
 853: PPUSH
 854: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-1 , D2-FemScout-1 ) ;
 858: LD_EXP 30
 862: PPUSH
 863: LD_STRING D2-Scout-1
 865: PPUSH
 866: LD_STRING D2-FemScout-1
 868: PPUSH
 869: CALL 14234 0 3
// Say ( Simone , D2-Simone-1 ) ;
 873: LD_EXP 19
 877: PPUSH
 878: LD_STRING D2-Simone-1
 880: PPUSH
 881: CALL_OW 88
// Say ( Kathryn , D2-Kathryn-1 ) ;
 885: LD_EXP 20
 889: PPUSH
 890: LD_STRING D2-Kathryn-1
 892: PPUSH
 893: CALL_OW 88
// DoNotAttack ( 3 , tlz ) ;
 897: LD_INT 3
 899: PPUSH
 900: LD_EXP 14
 904: PPUSH
 905: CALL_OW 471
// DoNotAttack ( 3 , t2 ) ;
 909: LD_INT 3
 911: PPUSH
 912: LD_EXP 16
 916: PPUSH
 917: CALL_OW 471
// DoNotAttack ( 3 , t3 ) ;
 921: LD_INT 3
 923: PPUSH
 924: LD_EXP 17
 928: PPUSH
 929: CALL_OW 471
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
 933: LD_INT 3
 935: PPUSH
 936: LD_INT 3
 938: PPUSH
 939: LD_INT 6
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 0
 953: PPUSH
 954: LD_EXP 37
 958: PPUSH
 959: LD_EXP 38
 963: PPUSH
 964: CALL_OW 12
 968: PPUSH
 969: LD_INT 3
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 3 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
 982: LD_INT 3
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: LD_INT 3
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_EXP 37
1007: PPUSH
1008: LD_EXP 38
1012: PPUSH
1013: CALL_OW 12
1017: PPUSH
1018: LD_INT 8
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL 8049 0 11
// Wait ( 0 0$8 ) ;
1031: LD_INT 280
1033: PPUSH
1034: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 1
1046: PPUSH
1047: LD_EXP 37
1051: PPUSH
1052: LD_EXP 38
1056: PPUSH
1057: CALL_OW 12
1061: PPUSH
1062: LD_INT 3
1064: PPUSH
1065: LD_INT 3
1067: PPUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: LD_INT 43
1080: PUSH
1081: LD_INT 44
1083: PUSH
1084: LD_INT 42
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PPUSH
1092: EMPTY
1093: PPUSH
1094: EMPTY
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: LD_INT 1
1101: PPUSH
1102: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1106: LD_INT 8
1108: PPUSH
1109: LD_INT 3
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_EXP 37
1119: PPUSH
1120: LD_EXP 38
1124: PPUSH
1125: CALL_OW 12
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: LD_INT 3
1135: PPUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PPUSH
1146: LD_INT 43
1148: PUSH
1149: LD_INT 44
1151: PUSH
1152: LD_INT 42
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PPUSH
1160: EMPTY
1161: PPUSH
1162: EMPTY
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL 6443 0 12
// Wait ( 3 3$20 ) ;
1174: LD_INT 7000
1176: PPUSH
1177: CALL_OW 67
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1181: LD_INT 3
1183: PPUSH
1184: LD_INT 3
1186: PPUSH
1187: LD_INT 5
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 0
1201: PPUSH
1202: LD_EXP 37
1206: PPUSH
1207: LD_EXP 38
1211: PPUSH
1212: CALL_OW 12
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1230: LD_INT 3
1232: PPUSH
1233: LD_INT 3
1235: PPUSH
1236: LD_INT 5
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: LD_INT 1
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_EXP 37
1255: PPUSH
1256: LD_EXP 38
1260: PPUSH
1261: CALL_OW 12
1265: PPUSH
1266: LD_INT 8
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1279: LD_INT 1050
1281: PPUSH
1282: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1286: LD_INT 3
1288: PPUSH
1289: LD_INT 3
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: LD_EXP 37
1299: PPUSH
1300: LD_EXP 38
1304: PPUSH
1305: CALL_OW 12
1309: PPUSH
1310: LD_INT 3
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: LD_INT 1
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PPUSH
1326: LD_INT 43
1328: PUSH
1329: LD_INT 44
1331: PUSH
1332: LD_INT 42
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: EMPTY
1341: PPUSH
1342: EMPTY
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: LD_INT 1
1349: PPUSH
1350: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1354: LD_INT 8
1356: PPUSH
1357: LD_INT 3
1359: PPUSH
1360: LD_INT 5
1362: PPUSH
1363: LD_EXP 37
1367: PPUSH
1368: LD_EXP 38
1372: PPUSH
1373: CALL_OW 12
1377: PPUSH
1378: LD_INT 3
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 1
1386: PUSH
1387: LD_INT 3
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PPUSH
1394: LD_INT 43
1396: PUSH
1397: LD_INT 44
1399: PUSH
1400: LD_INT 42
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PPUSH
1408: EMPTY
1409: PPUSH
1410: EMPTY
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL 6443 0 12
// Wait ( 2 2$30 ) ;
1422: LD_INT 5250
1424: PPUSH
1425: CALL_OW 67
// SayRadio ( Lazarfeld , D3-Lazar-1 ) ;
1429: LD_EXP 24
1433: PPUSH
1434: LD_STRING D3-Lazar-1
1436: PPUSH
1437: CALL_OW 94
// SayRadio ( Loghain , D3-Off-1 ) ;
1441: LD_EXP 27
1445: PPUSH
1446: LD_STRING D3-Off-1
1448: PPUSH
1449: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-2 ) ;
1453: LD_EXP 24
1457: PPUSH
1458: LD_STRING D3-Lazar-2
1460: PPUSH
1461: CALL_OW 94
// SayRadio ( Barnes , D3-Comm-1 ) ;
1465: LD_EXP 26
1469: PPUSH
1470: LD_STRING D3-Comm-1
1472: PPUSH
1473: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-3 ) ;
1477: LD_EXP 24
1481: PPUSH
1482: LD_STRING D3-Lazar-3
1484: PPUSH
1485: CALL_OW 94
// SayRadio ( Lazarfeld , D3-Lazar-4 ) ;
1489: LD_EXP 24
1493: PPUSH
1494: LD_STRING D3-Lazar-4
1496: PPUSH
1497: CALL_OW 94
// Say ( Simone , D3-Simone-1 ) ;
1501: LD_EXP 19
1505: PPUSH
1506: LD_STRING D3-Simone-1
1508: PPUSH
1509: CALL_OW 88
// ComMoveXY ( EasternEngineers , 127 , 94 ) ;
1513: LD_EXP 9
1517: PPUSH
1518: LD_INT 127
1520: PPUSH
1521: LD_INT 94
1523: PPUSH
1524: CALL_OW 111
// ComMoveXY ( Lazarfeld , 65 , 70 ) ;
1528: LD_EXP 24
1532: PPUSH
1533: LD_INT 65
1535: PPUSH
1536: LD_INT 70
1538: PPUSH
1539: CALL_OW 111
// ComBuild ( WesternEngineers , b_armoury , 75 , 70 , 3 ) ;
1543: LD_EXP 8
1547: PPUSH
1548: LD_INT 4
1550: PPUSH
1551: LD_INT 75
1553: PPUSH
1554: LD_INT 70
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 145
// Wait ( 3 3$30 ) ;
1564: LD_INT 7350
1566: PPUSH
1567: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-2 , D2-FemScout-2 ) ;
1571: LD_EXP 30
1575: PPUSH
1576: LD_STRING D2-Scout-2
1578: PPUSH
1579: LD_STRING D2-FemScout-2
1581: PPUSH
1582: CALL 14234 0 3
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1586: LD_INT 3
1588: PPUSH
1589: LD_INT 3
1591: PPUSH
1592: LD_INT 5
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 0
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 0
1606: PPUSH
1607: LD_EXP 37
1611: PPUSH
1612: LD_EXP 38
1616: PPUSH
1617: CALL_OW 12
1621: PPUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 2 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1635: LD_INT 3
1637: PPUSH
1638: LD_INT 3
1640: PPUSH
1641: LD_INT 6
1643: PPUSH
1644: LD_INT 0
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: LD_EXP 37
1660: PPUSH
1661: LD_EXP 38
1665: PPUSH
1666: CALL_OW 12
1670: PPUSH
1671: LD_INT 8
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1684: LD_INT 1050
1686: PPUSH
1687: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1691: LD_INT 3
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: LD_EXP 37
1704: PPUSH
1705: LD_EXP 38
1709: PPUSH
1710: CALL_OW 12
1714: PPUSH
1715: LD_INT 3
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 3
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PPUSH
1731: LD_INT 43
1733: PUSH
1734: LD_INT 44
1736: PUSH
1737: LD_INT 42
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PPUSH
1745: EMPTY
1746: PPUSH
1747: EMPTY
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 1
1754: PPUSH
1755: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
1759: LD_INT 8
1761: PPUSH
1762: LD_INT 3
1764: PPUSH
1765: LD_INT 4
1767: PPUSH
1768: LD_EXP 37
1772: PPUSH
1773: LD_EXP 38
1777: PPUSH
1778: CALL_OW 12
1782: PPUSH
1783: LD_INT 3
1785: PPUSH
1786: LD_INT 3
1788: PPUSH
1789: LD_INT 1
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PPUSH
1799: LD_INT 43
1801: PUSH
1802: LD_INT 44
1804: PUSH
1805: LD_INT 42
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: EMPTY
1814: PPUSH
1815: EMPTY
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL 6443 0 12
// Wait ( 2 2$10 ) ;
1827: LD_INT 4550
1829: PPUSH
1830: CALL_OW 67
// ComUpgrade ( AMWesternArmor ) ;
1834: LD_EXP 5
1838: PPUSH
1839: CALL_OW 146
// Wait ( 2 2$10 ) ;
1843: LD_INT 4550
1845: PPUSH
1846: CALL_OW 67
// ComAgressiveMove ( tlz , 60 , 53 ) ;
1850: LD_EXP 14
1854: PPUSH
1855: LD_INT 60
1857: PPUSH
1858: LD_INT 53
1860: PPUSH
1861: CALL_OW 114
// PriorityAttack ( 3 , tlz ) ;
1865: LD_INT 3
1867: PPUSH
1868: LD_EXP 14
1872: PPUSH
1873: CALL_OW 470
// RespawnAttackInfantry ( 3 , 3 , 6 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
1877: LD_INT 3
1879: PPUSH
1880: LD_INT 3
1882: PPUSH
1883: LD_INT 6
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: LD_EXP 37
1902: PPUSH
1903: LD_EXP 38
1907: PPUSH
1908: CALL_OW 12
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: LD_INT 1
1921: PPUSH
1922: CALL 8049 0 11
// RespawnAttackInfantry ( 3 , 3 , 5 , 0 , 2 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianHealArea1 , false , false ) ;
1926: LD_INT 3
1928: PPUSH
1929: LD_INT 3
1931: PPUSH
1932: LD_INT 5
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 2
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: LD_EXP 37
1951: PPUSH
1952: LD_EXP 38
1956: PPUSH
1957: CALL_OW 12
1961: PPUSH
1962: LD_INT 8
1964: PPUSH
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL 8049 0 11
// Wait ( 0 0$30 ) ;
1975: LD_INT 1050
1977: PPUSH
1978: CALL_OW 67
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , true ) ;
1982: LD_INT 3
1984: PPUSH
1985: LD_INT 3
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: LD_EXP 37
1995: PPUSH
1996: LD_EXP 38
2000: PPUSH
2001: CALL_OW 12
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: LD_INT 1
2014: PUSH
2015: LD_INT 3
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PPUSH
2022: LD_INT 43
2024: PUSH
2025: LD_INT 44
2027: PUSH
2028: LD_INT 42
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PPUSH
2036: EMPTY
2037: PPUSH
2038: EMPTY
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL 6443 0 12
// RespawnAttackVehicle ( RussianHealArea1 , 3 , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 42 ] , [ ] , [ ] , false , false ) ;
2050: LD_INT 8
2052: PPUSH
2053: LD_INT 3
2055: PPUSH
2056: LD_INT 5
2058: PPUSH
2059: LD_EXP 37
2063: PPUSH
2064: LD_EXP 38
2068: PPUSH
2069: CALL_OW 12
2073: PPUSH
2074: LD_INT 3
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 1
2082: PUSH
2083: LD_INT 3
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: LD_INT 43
2092: PUSH
2093: LD_INT 44
2095: PUSH
2096: LD_INT 42
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PPUSH
2104: EMPTY
2105: PPUSH
2106: EMPTY
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: LD_INT 0
2113: PPUSH
2114: CALL 6443 0 12
// Wait ( 3 3$20 ) ;
2118: LD_INT 7000
2120: PPUSH
2121: CALL_OW 67
// SetLives ( tlz , 250 ) ;
2125: LD_EXP 14
2129: PPUSH
2130: LD_INT 250
2132: PPUSH
2133: CALL_OW 234
// end ;
2137: END
// every 0 0$1 trigger GetLives ( tlz ) < 251 do
2138: LD_EXP 14
2142: PPUSH
2143: CALL_OW 256
2147: PUSH
2148: LD_INT 251
2150: LESS
2151: IFFALSE 2888
2153: GO 2155
2155: DISABLE
// begin CenterOnUnits ( tlz ) ;
2156: LD_EXP 14
2160: PPUSH
2161: CALL_OW 85
// Wait ( 0 0$1 ) ;
2165: LD_INT 35
2167: PPUSH
2168: CALL_OW 67
// DialogueOn ;
2172: CALL_OW 6
// SayRadio ( Lazarfeld , D4-Lazar-1 ) ;
2176: LD_EXP 24
2180: PPUSH
2181: LD_STRING D4-Lazar-1
2183: PPUSH
2184: CALL_OW 94
// SetLives ( Lazarfeld , 0 ) ;
2188: LD_EXP 24
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 234
// SetLives ( tlz , 0 ) ;
2200: LD_EXP 14
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 234
// DialogueOff ;
2212: CALL_OW 7
// ComMoveXY ( Mirron , 77 , 98 ) ;
2216: LD_EXP 21
2220: PPUSH
2221: LD_INT 77
2223: PPUSH
2224: LD_INT 98
2226: PPUSH
2227: CALL_OW 111
// ComMoveXY ( Valheim , 77 , 98 ) ;
2231: LD_EXP 22
2235: PPUSH
2236: LD_INT 77
2238: PPUSH
2239: LD_INT 98
2241: PPUSH
2242: CALL_OW 111
// NormalAttack ( 3 , t2 ) ;
2246: LD_INT 3
2248: PPUSH
2249: LD_EXP 16
2253: PPUSH
2254: CALL_OW 472
// NormalAttack ( 3 , t3 ) ;
2258: LD_INT 3
2260: PPUSH
2261: LD_EXP 17
2265: PPUSH
2266: CALL_OW 472
// SayRadio ( Valheim , D4-Valheim-1 ) ;
2270: LD_EXP 22
2274: PPUSH
2275: LD_STRING D4-Valheim-1
2277: PPUSH
2278: CALL_OW 94
// Say ( Kathryn , D4-Kathryn-1 ) ;
2282: LD_EXP 20
2286: PPUSH
2287: LD_STRING D4-Kathryn-1
2289: PPUSH
2290: CALL_OW 88
// Say ( Gomez , D4-Gomez-1 ) ;
2294: LD_EXP 23
2298: PPUSH
2299: LD_STRING D4-Gomez-1
2301: PPUSH
2302: CALL_OW 88
// Say ( Simone , D4-Simone-1 ) ;
2306: LD_EXP 19
2310: PPUSH
2311: LD_STRING D4-Simone-1
2313: PPUSH
2314: CALL_OW 88
// Say ( Kathryn , D4-Kathryn-2 ) ;
2318: LD_EXP 20
2322: PPUSH
2323: LD_STRING D4-Kathryn-2
2325: PPUSH
2326: CALL_OW 88
// Say ( Loghain , D4-Off-1 ) ;
2330: LD_EXP 27
2334: PPUSH
2335: LD_STRING D4-Off-1
2337: PPUSH
2338: CALL_OW 88
// SayRadio ( Simone , D4-Simone-2 ) ;
2342: LD_EXP 19
2346: PPUSH
2347: LD_STRING D4-Simone-2
2349: PPUSH
2350: CALL_OW 94
// SetSide ( FilterAllUnits ( [ f_side , 1 ] ) , 7 ) ;
2354: LD_INT 22
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PPUSH
2364: CALL_OW 69
2368: PPUSH
2369: LD_INT 7
2371: PPUSH
2372: CALL_OW 235
// Wait ( 0 0$30 ) ;
2376: LD_INT 1050
2378: PPUSH
2379: CALL_OW 67
// RespawnAttackInfantry ( 3 , 3 , 7 , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_SE , false , true ) ;
2383: LD_INT 3
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: LD_INT 7
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: LD_INT 0
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: LD_EXP 37
2408: PPUSH
2409: LD_EXP 38
2413: PPUSH
2414: CALL_OW 12
2418: PPUSH
2419: LD_INT 5
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_INT 1
2427: PPUSH
2428: CALL 8049 0 11
// Wait ( 0 0$5 ) ;
2432: LD_INT 175
2434: PPUSH
2435: CALL_OW 67
// SayRadioSex ( Scout , D2-Scout-3 , D2-FemScout-3 ) ;
2439: LD_EXP 30
2443: PPUSH
2444: LD_STRING D2-Scout-3
2446: PPUSH
2447: LD_STRING D2-FemScout-3
2449: PPUSH
2450: CALL 14234 0 3
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , false , true ) ;
2454: LD_INT 3
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: LD_INT 4
2462: PPUSH
2463: LD_EXP 37
2467: PPUSH
2468: LD_EXP 38
2472: PPUSH
2473: CALL_OW 12
2477: PPUSH
2478: LD_INT 3
2480: PPUSH
2481: LD_INT 3
2483: PPUSH
2484: LD_INT 1
2486: PUSH
2487: LD_INT 3
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PPUSH
2494: LD_INT 43
2496: PUSH
2497: LD_INT 44
2499: PUSH
2500: LD_INT 45
2502: PUSH
2503: LD_INT 46
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: EMPTY
2513: PPUSH
2514: EMPTY
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL 6443 0 12
// RespawnAttackInfantry ( 3 , 3 , 8 , 0 , 1 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , false , true ) ;
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: LD_INT 8
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: LD_INT 1
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: LD_INT 0
2546: PPUSH
2547: LD_EXP 37
2551: PPUSH
2552: LD_EXP 38
2556: PPUSH
2557: CALL_OW 12
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 1
2570: PPUSH
2571: CALL 8049 0 11
// Wait ( 1 1$10 ) ;
2575: LD_INT 2450
2577: PPUSH
2578: CALL_OW 67
// ReinforcementArrival ;
2582: CALL 13637 0 0
// Say ( Loghain , D4a-Off-1 ) ;
2586: LD_EXP 27
2590: PPUSH
2591: LD_STRING D4a-Off-1
2593: PPUSH
2594: CALL_OW 88
// SetSide ( FilterAllUnits ( [ f_side , 1 ] ) , 7 ) ;
2598: LD_INT 22
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: PPUSH
2613: LD_INT 7
2615: PPUSH
2616: CALL_OW 235
// Say ( Simone , D4a-Simone-1 ) ;
2620: LD_EXP 19
2624: PPUSH
2625: LD_STRING D4a-Simone-1
2627: PPUSH
2628: CALL_OW 88
// Say ( Kathryn , D4a-Kathryn-1 ) ;
2632: LD_EXP 20
2636: PPUSH
2637: LD_STRING D4a-Kathryn-1
2639: PPUSH
2640: CALL_OW 88
// Wait ( 1 1$0 ) ;
2644: LD_INT 2100
2646: PPUSH
2647: CALL_OW 67
// DialogueOn ;
2651: CALL_OW 6
// Say ( Miller , D4b-Miller-1 ) ;
2655: LD_EXP 25
2659: PPUSH
2660: LD_STRING D4b-Miller-1
2662: PPUSH
2663: CALL_OW 88
// Say ( Simone , D4b-Simone-1 ) ;
2667: LD_EXP 19
2671: PPUSH
2672: LD_STRING D4b-Simone-1
2674: PPUSH
2675: CALL_OW 88
// Say ( Miller , D4b-Miller-2 ) ;
2679: LD_EXP 25
2683: PPUSH
2684: LD_STRING D4b-Miller-2
2686: PPUSH
2687: CALL_OW 88
// Say ( Simone , D4b-Simone-2 ) ;
2691: LD_EXP 19
2695: PPUSH
2696: LD_STRING D4b-Simone-2
2698: PPUSH
2699: CALL_OW 88
// Say ( Miller , D4b-Miller-3 ) ;
2703: LD_EXP 25
2707: PPUSH
2708: LD_STRING D4b-Miller-3
2710: PPUSH
2711: CALL_OW 88
// Say ( Simone , D4b-Simone-3 ) ;
2715: LD_EXP 19
2719: PPUSH
2720: LD_STRING D4b-Simone-3
2722: PPUSH
2723: CALL_OW 88
// Say ( Miller , D4b-Miller-4 ) ;
2727: LD_EXP 25
2731: PPUSH
2732: LD_STRING D4b-Miller-4
2734: PPUSH
2735: CALL_OW 88
// DialogueOff ;
2739: CALL_OW 7
// Wait ( 0 0$5 ) ;
2743: LD_INT 175
2745: PPUSH
2746: CALL_OW 67
// Say ( Loghain , D5-Off-1 ) ;
2750: LD_EXP 27
2754: PPUSH
2755: LD_STRING D5-Off-1
2757: PPUSH
2758: CALL_OW 88
// Say ( Simone , D5-Simone-1 ) ;
2762: LD_EXP 19
2766: PPUSH
2767: LD_STRING D5-Simone-1
2769: PPUSH
2770: CALL_OW 88
// SayRadioSex ( Scout , D5-Scout-1 , D5-FemScout-1 ) ;
2774: LD_EXP 30
2778: PPUSH
2779: LD_STRING D5-Scout-1
2781: PPUSH
2782: LD_STRING D5-FemScout-1
2784: PPUSH
2785: CALL 14234 0 3
// Say ( Kathryn , D5-Kathryn-1 ) ;
2789: LD_EXP 20
2793: PPUSH
2794: LD_STRING D5-Kathryn-1
2796: PPUSH
2797: CALL_OW 88
// Say ( Simone , D5-Simone-2 ) ;
2801: LD_EXP 19
2805: PPUSH
2806: LD_STRING D5-Simone-2
2808: PPUSH
2809: CALL_OW 88
// SayRadio ( Barnes , D5-Comm-1 ) ;
2813: LD_EXP 26
2817: PPUSH
2818: LD_STRING D5-Comm-1
2820: PPUSH
2821: CALL_OW 94
// SayRadio ( Barnes , D5-Comm-2 ) ;
2825: LD_EXP 26
2829: PPUSH
2830: LD_STRING D5-Comm-2
2832: PPUSH
2833: CALL_OW 94
// Say ( Simone , D5-Simone-3 ) ;
2837: LD_EXP 19
2841: PPUSH
2842: LD_STRING D5-Simone-3
2844: PPUSH
2845: CALL_OW 88
// Say ( Kathryn , D5-Kathryn-2 ) ;
2849: LD_EXP 20
2853: PPUSH
2854: LD_STRING D5-Kathryn-2
2856: PPUSH
2857: CALL_OW 88
// Say ( Simone , D5-Simone-4 ) ;
2861: LD_EXP 19
2865: PPUSH
2866: LD_STRING D5-Simone-4
2868: PPUSH
2869: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
2873: LD_STRING M2
2875: PPUSH
2876: CALL_OW 337
// RussianAssaultStopped = true ;
2880: LD_ADDR_EXP 2
2884: PUSH
2885: LD_INT 1
2887: ST_TO_ADDR
// end ;
2888: END
// every 0 0$1 trigger RussianAssaultStopped do
2889: LD_EXP 2
2893: IFFALSE 3082
2895: GO 2897
2897: DISABLE
// begin Wait ( 1 1$20 ) ;
2898: LD_INT 2800
2900: PPUSH
2901: CALL_OW 67
// PlaceUnitXY ( Scout , 40 , 5 , false ) ;
2905: LD_EXP 30
2909: PPUSH
2910: LD_INT 40
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: LD_INT 0
2918: PPUSH
2919: CALL_OW 48
// ComMoveXY ( Scout , 65 , 72 ) ;
2923: LD_EXP 30
2927: PPUSH
2928: LD_INT 65
2930: PPUSH
2931: LD_INT 72
2933: PPUSH
2934: CALL_OW 111
// Wait ( 0 0$30 ) ;
2938: LD_INT 1050
2940: PPUSH
2941: CALL_OW 67
// CenterOnUnits ( Scout ) ;
2945: LD_EXP 30
2949: PPUSH
2950: CALL_OW 85
// SaySex ( Scout , D5a-Scout-1 , D5a-FemScout-1 ) ;
2954: LD_EXP 30
2958: PPUSH
2959: LD_STRING D5a-Scout-1
2961: PPUSH
2962: LD_STRING D5a-FemScout-1
2964: PPUSH
2965: CALL 14183 0 3
// Say ( Simone , D5a-Simone-1 ) ;
2969: LD_EXP 19
2973: PPUSH
2974: LD_STRING D5a-Simone-1
2976: PPUSH
2977: CALL_OW 88
// SetSide ( Scout , 7 ) ;
2981: LD_EXP 30
2985: PPUSH
2986: LD_INT 7
2988: PPUSH
2989: CALL_OW 235
// if difficulty > 1 then
2993: LD_OWVAR 67
2997: PUSH
2998: LD_INT 1
3000: GREATER
3001: IFFALSE 3082
// begin Wait ( 0 0$10 ) ;
3003: LD_INT 350
3005: PPUSH
3006: CALL_OW 67
// SaySex ( Scout , D5b-Scout-1 , D5b-FemScout-1 ) ;
3010: LD_EXP 30
3014: PPUSH
3015: LD_STRING D5b-Scout-1
3017: PPUSH
3018: LD_STRING D5b-FemScout-1
3020: PPUSH
3021: CALL 14183 0 3
// Say ( Simone , D5b-Simone-1 ) ;
3025: LD_EXP 19
3029: PPUSH
3030: LD_STRING D5b-Simone-1
3032: PPUSH
3033: CALL_OW 88
// SaySex ( Scout , D5b-Scout-1 , D5b-FemScout-1 ) ;
3037: LD_EXP 30
3041: PPUSH
3042: LD_STRING D5b-Scout-1
3044: PPUSH
3045: LD_STRING D5b-FemScout-1
3047: PPUSH
3048: CALL 14183 0 3
// Say ( Simone , D5b-Simone-2 ) ;
3052: LD_EXP 19
3056: PPUSH
3057: LD_STRING D5b-Simone-2
3059: PPUSH
3060: CALL_OW 88
// Wait ( 1 1$10 ) ;
3064: LD_INT 2450
3066: PPUSH
3067: CALL_OW 67
// Prepare_RU2 ;
3071: CALL 15189 0 0
// ChangeMissionObjectives ( M2a ) ;
3075: LD_STRING M2a
3077: PPUSH
3078: CALL_OW 337
// end ; end ;
3082: END
// every 0 0$1 trigger IsDead ( tk ) do
3083: LD_EXP 13
3087: PPUSH
3088: CALL_OW 301
3092: IFFALSE 3109
3094: GO 3096
3096: DISABLE
// begin Say ( Kathryn , D7-Kathryn-1 ) ;
3097: LD_EXP 20
3101: PPUSH
3102: LD_STRING D7-Kathryn-1
3104: PPUSH
3105: CALL_OW 88
// end ;
3109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 4 do
3110: LD_INT 22
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 21
3122: PUSH
3123: LD_INT 1
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 69
3145: PUSH
3146: LD_INT 4
3148: LESS
3149: PUSH
3150: LD_INT 22
3152: PUSH
3153: LD_INT 6
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 50
3172: PUSH
3173: EMPTY
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 69
3185: PUSH
3186: LD_INT 4
3188: LESS
3189: AND
3190: IFFALSE 3635
3192: GO 3194
3194: DISABLE
// begin SayRadio ( Loghain , D6-Sol-1 ) ;
3195: LD_EXP 27
3199: PPUSH
3200: LD_STRING D6-Sol-1
3202: PPUSH
3203: CALL_OW 94
// SayRadio ( ROff , D6-ROff-1 ) ;
3207: LD_EXP 28
3211: PPUSH
3212: LD_STRING D6-ROff-1
3214: PPUSH
3215: CALL_OW 94
// SayRadio ( Sidor , D6-Sidor-1 ) ;
3219: LD_EXP 29
3223: PPUSH
3224: LD_STRING D6-Sidor-1
3226: PPUSH
3227: CALL_OW 94
// SayRadio ( ROff , D6-ROff-2 ) ;
3231: LD_EXP 28
3235: PPUSH
3236: LD_STRING D6-ROff-2
3238: PPUSH
3239: CALL_OW 94
// Say ( Kathryn , D6-Kathryn-1 ) ;
3243: LD_EXP 20
3247: PPUSH
3248: LD_STRING D6-Kathryn-1
3250: PPUSH
3251: CALL_OW 88
// Say ( Simone , D6-Simone-1 ) ;
3255: LD_EXP 19
3259: PPUSH
3260: LD_STRING D6-Simone-1
3262: PPUSH
3263: CALL_OW 88
// SayRadio ( Barnes , D6-Comm-1 ) ;
3267: LD_EXP 26
3271: PPUSH
3272: LD_STRING D6-Comm-1
3274: PPUSH
3275: CALL_OW 94
// SayRadio ( Barnes , D6-Comm-2 ) ;
3279: LD_EXP 26
3283: PPUSH
3284: LD_STRING D6-Comm-2
3286: PPUSH
3287: CALL_OW 94
// Say ( Simone , D6-Simone-2 ) ;
3291: LD_EXP 19
3295: PPUSH
3296: LD_STRING D6-Simone-2
3298: PPUSH
3299: CALL_OW 88
// if not IsDead ( tk ) then
3303: LD_EXP 13
3307: PPUSH
3308: CALL_OW 301
3312: NOT
3313: IFFALSE 3341
// begin Say ( Kathryn , D6-Kathryn-2 ) ;
3315: LD_EXP 20
3319: PPUSH
3320: LD_STRING D6-Kathryn-2
3322: PPUSH
3323: CALL_OW 88
// Say ( Simone , D6-Simone-3 ) ;
3327: LD_EXP 19
3331: PPUSH
3332: LD_STRING D6-Simone-3
3334: PPUSH
3335: CALL_OW 88
// end else
3339: GO 3377
// begin Say ( Kathryn , D6-Kathryn-2a ) ;
3341: LD_EXP 20
3345: PPUSH
3346: LD_STRING D6-Kathryn-2a
3348: PPUSH
3349: CALL_OW 88
// Say ( Simone , D6-Simone-3a ) ;
3353: LD_EXP 19
3357: PPUSH
3358: LD_STRING D6-Simone-3a
3360: PPUSH
3361: CALL_OW 88
// Say ( Kathryn , D6-Kathryn-3a ) ;
3365: LD_EXP 20
3369: PPUSH
3370: LD_STRING D6-Kathryn-3a
3372: PPUSH
3373: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
3377: LD_INT 35
3379: PPUSH
3380: CALL_OW 67
// if IsOK ( Gomez ) and IsOK ( Mirron ) and IsOK ( Valheim ) then
3384: LD_EXP 23
3388: PPUSH
3389: CALL_OW 302
3393: PUSH
3394: LD_EXP 21
3398: PPUSH
3399: CALL_OW 302
3403: AND
3404: PUSH
3405: LD_EXP 22
3409: PPUSH
3410: CALL_OW 302
3414: AND
3415: IFFALSE 3429
// AddMedal ( Personnel , 1 ) else
3417: LD_STRING Personnel
3419: PPUSH
3420: LD_INT 1
3422: PPUSH
3423: CALL_OW 101
3427: GO 3440
// AddMedal ( Personnel , - 1 ) ;
3429: LD_STRING Personnel
3431: PPUSH
3432: LD_INT 1
3434: NEG
3435: PPUSH
3436: CALL_OW 101
// if LaserTanks < 5 then
3440: LD_EXP 6
3444: PUSH
3445: LD_INT 5
3447: LESS
3448: IFFALSE 3463
// AddMedal ( Vehicles , - 1 ) else
3450: LD_STRING Vehicles
3452: PPUSH
3453: LD_INT 1
3455: NEG
3456: PPUSH
3457: CALL_OW 101
3461: GO 3473
// AddMedal ( Vehicles , 1 ) ;
3463: LD_STRING Vehicles
3465: PPUSH
3466: LD_INT 1
3468: PPUSH
3469: CALL_OW 101
// AddMedal ( Bases , 1 ) ;
3473: LD_STRING Bases
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 101
// GiveMedals ( Main ) ;
3483: LD_STRING Main
3485: PPUSH
3486: CALL_OW 102
// personnel = FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
3490: LD_ADDR_EXP 7
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 7
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 50
3517: PUSH
3518: EMPTY
3519: LIST
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: PPUSH
3526: CALL_OW 69
3530: ST_TO_ADDR
// RewardPeople ( personnel ) ;
3531: LD_EXP 7
3535: PPUSH
3536: CALL_OW 43
// SaveCharacters ( Kathryn , Kathryn ) ;
3540: LD_EXP 20
3544: PPUSH
3545: LD_STRING Kathryn
3547: PPUSH
3548: CALL_OW 38
// SaveCharacters ( Simone , Simone ) ;
3552: LD_EXP 19
3556: PPUSH
3557: LD_STRING Simone
3559: PPUSH
3560: CALL_OW 38
// SaveCharacters ( Loghain , Loghain ) ;
3564: LD_EXP 27
3568: PPUSH
3569: LD_STRING Loghain
3571: PPUSH
3572: CALL_OW 38
// SaveCharacters ( Miller , Miller ) ;
3576: LD_EXP 25
3580: PPUSH
3581: LD_STRING Miller
3583: PPUSH
3584: CALL_OW 38
// SaveCharacters ( personnel diff [ Kathryn , Simone , Loghain , Miller , 0 ] , AM01_Survivors ) ;
3588: LD_EXP 7
3592: PUSH
3593: LD_EXP 20
3597: PUSH
3598: LD_EXP 19
3602: PUSH
3603: LD_EXP 27
3607: PUSH
3608: LD_EXP 25
3612: PUSH
3613: LD_INT 0
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: DIFF
3623: PPUSH
3624: LD_STRING AM01_Survivors
3626: PPUSH
3627: CALL_OW 38
// YouWin ;
3631: CALL_OW 103
// end ; end_of_file
3635: END
// export Simone , Kathryn , Mirron , Valheim , Gomez , Lazarfeld , Miller , Barnes , Loghain , ROff , Sidor , Scout ; export RUBazookers , soldiersOK_list , vehicleOK_list , medic_list ; export MC_attack_group , attack_group2 ; export function CreatePersonnel ; begin
3636: LD_INT 0
3638: PPUSH
// uc_side := 7 ;
3639: LD_ADDR_OWVAR 20
3643: PUSH
3644: LD_INT 7
3646: ST_TO_ADDR
// hc_class = class_mechanic ;
3647: LD_ADDR_OWVAR 28
3651: PUSH
3652: LD_INT 3
3654: ST_TO_ADDR
// uc_nation := nation_american ;
3655: LD_ADDR_OWVAR 21
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_sex = sex_female ;
3663: LD_ADDR_OWVAR 27
3667: PUSH
3668: LD_INT 2
3670: ST_TO_ADDR
// hc_importance = 120 ;
3671: LD_ADDR_OWVAR 32
3675: PUSH
3676: LD_INT 120
3678: ST_TO_ADDR
// hc_basic_skills = [ 3 , 1 , 5 , 4 ] ;
3679: LD_ADDR_OWVAR 30
3683: PUSH
3684: LD_INT 3
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: LD_INT 5
3692: PUSH
3693: LD_INT 4
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: ST_TO_ADDR
// hc_skills = [ 4 , 3 , 5 , 4 ] ;
3702: LD_ADDR_OWVAR 31
3706: PUSH
3707: LD_INT 4
3709: PUSH
3710: LD_INT 3
3712: PUSH
3713: LD_INT 5
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
3725: LD_ADDR_OWVAR 29
3729: PUSH
3730: LD_INT 12
3732: PUSH
3733: LD_INT 10
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: ST_TO_ADDR
// hc_name := Simone ;
3740: LD_ADDR_OWVAR 26
3744: PUSH
3745: LD_STRING Simone
3747: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
3748: LD_ADDR_OWVAR 33
3752: PUSH
3753: LD_STRING ZieloneLaserki_Heroines
3755: ST_TO_ADDR
// hc_face_number := 1 ;
3756: LD_ADDR_OWVAR 34
3760: PUSH
3761: LD_INT 1
3763: ST_TO_ADDR
// Simone := CreateHuman ;
3764: LD_ADDR_EXP 19
3768: PUSH
3769: CALL_OW 44
3773: ST_TO_ADDR
// uc_nation := nation_american ;
3774: LD_ADDR_OWVAR 21
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// hc_importance = 110 ;
3782: LD_ADDR_OWVAR 32
3786: PUSH
3787: LD_INT 110
3789: ST_TO_ADDR
// hc_sex = sex_female ;
3790: LD_ADDR_OWVAR 27
3794: PUSH
3795: LD_INT 2
3797: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 2 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 3
3805: PUSH
3806: LD_INT 2
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills = [ 3 , 2 , 4 , 2 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 4
3834: PUSH
3835: LD_INT 2
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3844: LD_ADDR_OWVAR 29
3848: PUSH
3849: LD_INT 11
3851: PUSH
3852: LD_INT 10
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: ST_TO_ADDR
// hc_name := Kathryn ;
3859: LD_ADDR_OWVAR 26
3863: PUSH
3864: LD_STRING Kathryn
3866: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroines ;
3867: LD_ADDR_OWVAR 33
3871: PUSH
3872: LD_STRING ZieloneLaserki_Heroines
3874: ST_TO_ADDR
// hc_face_number := 2 ;
3875: LD_ADDR_OWVAR 34
3879: PUSH
3880: LD_INT 2
3882: ST_TO_ADDR
// Kathryn := CreateHuman ;
3883: LD_ADDR_EXP 20
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// hc_sex = sex_male ;
3893: LD_ADDR_OWVAR 27
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// uc_nation := nation_american ;
3901: LD_ADDR_OWVAR 21
3905: PUSH
3906: LD_INT 1
3908: ST_TO_ADDR
// hc_importance = 70 ;
3909: LD_ADDR_OWVAR 32
3913: PUSH
3914: LD_INT 70
3916: ST_TO_ADDR
// hc_skills = [ 3 , 3 , 4 , 1 ] ;
3917: LD_ADDR_OWVAR 31
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 1
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3940: LD_ADDR_OWVAR 29
3944: PUSH
3945: LD_INT 10
3947: PUSH
3948: LD_INT 10
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: ST_TO_ADDR
// hc_name := Mike Gomez ;
3955: LD_ADDR_OWVAR 26
3959: PUSH
3960: LD_STRING Mike Gomez
3962: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
3963: LD_ADDR_OWVAR 33
3967: PUSH
3968: LD_STRING ZieloneLaserki_Heroes
3970: ST_TO_ADDR
// hc_face_number := 7 ;
3971: LD_ADDR_OWVAR 34
3975: PUSH
3976: LD_INT 7
3978: ST_TO_ADDR
// Gomez := CreateHuman ;
3979: LD_ADDR_EXP 23
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// uc_side := 1 ;
3989: LD_ADDR_OWVAR 20
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// uc_nation := nation_american ;
3997: LD_ADDR_OWVAR 21
4001: PUSH
4002: LD_INT 1
4004: ST_TO_ADDR
// hc_importance = 70 ;
4005: LD_ADDR_OWVAR 32
4009: PUSH
4010: LD_INT 70
4012: ST_TO_ADDR
// hc_skills = [ 5 , 4 , 7 , 3 ] ;
4013: LD_ADDR_OWVAR 31
4017: PUSH
4018: LD_INT 5
4020: PUSH
4021: LD_INT 4
4023: PUSH
4024: LD_INT 7
4026: PUSH
4027: LD_INT 3
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4036: LD_ADDR_OWVAR 29
4040: PUSH
4041: LD_INT 10
4043: PUSH
4044: LD_INT 10
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: ST_TO_ADDR
// hc_name := Lazarfeld ;
4051: LD_ADDR_OWVAR 26
4055: PUSH
4056: LD_STRING Lazarfeld
4058: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING ZieloneLaserki_Heroes
4066: ST_TO_ADDR
// hc_face_number := 1 ;
4067: LD_ADDR_OWVAR 34
4071: PUSH
4072: LD_INT 1
4074: ST_TO_ADDR
// Lazarfeld := CreateHuman ;
4075: LD_ADDR_EXP 24
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// uc_nation := nation_american ;
4085: LD_ADDR_OWVAR 21
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// hc_importance = 70 ;
4093: LD_ADDR_OWVAR 32
4097: PUSH
4098: LD_INT 70
4100: ST_TO_ADDR
// hc_skills = [ 5 , 2 , 4 , 3 ] ;
4101: LD_ADDR_OWVAR 31
4105: PUSH
4106: LD_INT 5
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4124: LD_ADDR_OWVAR 29
4128: PUSH
4129: LD_INT 10
4131: PUSH
4132: LD_INT 10
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: ST_TO_ADDR
// hc_name := Geoff Mirron ;
4139: LD_ADDR_OWVAR 26
4143: PUSH
4144: LD_STRING Geoff Mirron
4146: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4147: LD_ADDR_OWVAR 33
4151: PUSH
4152: LD_STRING ZieloneLaserki_Heroes
4154: ST_TO_ADDR
// hc_face_number := 2 ;
4155: LD_ADDR_OWVAR 34
4159: PUSH
4160: LD_INT 2
4162: ST_TO_ADDR
// Mirron := CreateHuman ;
4163: LD_ADDR_EXP 21
4167: PUSH
4168: CALL_OW 44
4172: ST_TO_ADDR
// uc_nation := nation_american ;
4173: LD_ADDR_OWVAR 21
4177: PUSH
4178: LD_INT 1
4180: ST_TO_ADDR
// hc_importance = 70 ;
4181: LD_ADDR_OWVAR 32
4185: PUSH
4186: LD_INT 70
4188: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 4 , 2 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: LD_INT 2
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
4212: LD_ADDR_OWVAR 29
4216: PUSH
4217: LD_INT 10
4219: PUSH
4220: LD_INT 10
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: ST_TO_ADDR
// hc_name := Pavel Valheim ;
4227: LD_ADDR_OWVAR 26
4231: PUSH
4232: LD_STRING Pavel Valheim
4234: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4235: LD_ADDR_OWVAR 33
4239: PUSH
4240: LD_STRING ZieloneLaserki_Heroes
4242: ST_TO_ADDR
// hc_face_number := 5 ;
4243: LD_ADDR_OWVAR 34
4247: PUSH
4248: LD_INT 5
4250: ST_TO_ADDR
// Valheim := CreateHuman ;
4251: LD_ADDR_EXP 22
4255: PUSH
4256: CALL_OW 44
4260: ST_TO_ADDR
// hc_class = class_soldier ;
4261: LD_ADDR_OWVAR 28
4265: PUSH
4266: LD_INT 1
4268: ST_TO_ADDR
// uc_nation := nation_american ;
4269: LD_ADDR_OWVAR 21
4273: PUSH
4274: LD_INT 1
4276: ST_TO_ADDR
// hc_importance = 70 ;
4277: LD_ADDR_OWVAR 32
4281: PUSH
4282: LD_INT 70
4284: ST_TO_ADDR
// PrepareSoldier ( 1 , 8 ) ;
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 8
4290: PPUSH
4291: CALL_OW 381
// hc_attr = [ 10 , 10 ] ;
4295: LD_ADDR_OWVAR 29
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 10
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
// hc_name := Barnes ;
4310: LD_ADDR_OWVAR 26
4314: PUSH
4315: LD_STRING Barnes
4317: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
4318: LD_ADDR_OWVAR 33
4322: PUSH
4323: LD_STRING ZieloneLaserki_Commanders
4325: ST_TO_ADDR
// hc_face_number := 2 ;
4326: LD_ADDR_OWVAR 34
4330: PUSH
4331: LD_INT 2
4333: ST_TO_ADDR
// Barnes := CreateHuman ;
4334: LD_ADDR_EXP 26
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// uc_nation := nation_american ;
4344: LD_ADDR_OWVAR 21
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// hc_importance = 50 ;
4352: LD_ADDR_OWVAR 32
4356: PUSH
4357: LD_INT 50
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 6 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 6
4365: PPUSH
4366: CALL_OW 381
// hc_name := Loghain ;
4370: LD_ADDR_OWVAR 26
4374: PUSH
4375: LD_STRING Loghain
4377: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4378: LD_ADDR_OWVAR 33
4382: PUSH
4383: LD_STRING ZieloneLaserki_Heroes
4385: ST_TO_ADDR
// hc_face_number := 6 ;
4386: LD_ADDR_OWVAR 34
4390: PUSH
4391: LD_INT 6
4393: ST_TO_ADDR
// Loghain := CreateHuman ;
4394: LD_ADDR_EXP 27
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// uc_side := 1 ;
4404: LD_ADDR_OWVAR 20
4408: PUSH
4409: LD_INT 1
4411: ST_TO_ADDR
// uc_nation := nation_american ;
4412: LD_ADDR_OWVAR 21
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// hc_importance = 105 ;
4420: LD_ADDR_OWVAR 32
4424: PUSH
4425: LD_INT 105
4427: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
4428: LD_INT 1
4430: PPUSH
4431: LD_INT 5
4433: PPUSH
4434: CALL_OW 381
// hc_name := Arthur Miller ;
4438: LD_ADDR_OWVAR 26
4442: PUSH
4443: LD_STRING Arthur Miller
4445: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4446: LD_ADDR_OWVAR 33
4450: PUSH
4451: LD_STRING ZieloneLaserki_Heroes
4453: ST_TO_ADDR
// hc_face_number := 3 ;
4454: LD_ADDR_OWVAR 34
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// Miller := CreateHuman ;
4462: LD_ADDR_EXP 25
4466: PUSH
4467: CALL_OW 44
4471: ST_TO_ADDR
// uc_side := 3 ;
4472: LD_ADDR_OWVAR 20
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// uc_nation := nation_russian ;
4480: LD_ADDR_OWVAR 21
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// hc_importance = 50 ;
4488: LD_ADDR_OWVAR 32
4492: PUSH
4493: LD_INT 50
4495: ST_TO_ADDR
// PrepareSoldier ( 1 , 5 ) ;
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 5
4501: PPUSH
4502: CALL_OW 381
// hc_name := Nikolaj Barinski ;
4506: LD_ADDR_OWVAR 26
4510: PUSH
4511: LD_STRING Nikolaj Barinski
4513: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Commanders ;
4514: LD_ADDR_OWVAR 33
4518: PUSH
4519: LD_STRING ZieloneLaserki_Commanders
4521: ST_TO_ADDR
// hc_face_number := 8 ;
4522: LD_ADDR_OWVAR 34
4526: PUSH
4527: LD_INT 8
4529: ST_TO_ADDR
// ROff := CreateHuman ;
4530: LD_ADDR_EXP 28
4534: PUSH
4535: CALL_OW 44
4539: ST_TO_ADDR
// uc_side := 3 ;
4540: LD_ADDR_OWVAR 20
4544: PUSH
4545: LD_INT 3
4547: ST_TO_ADDR
// uc_nation := nation_russian ;
4548: LD_ADDR_OWVAR 21
4552: PUSH
4553: LD_INT 3
4555: ST_TO_ADDR
// hc_importance = 50 ;
4556: LD_ADDR_OWVAR 32
4560: PUSH
4561: LD_INT 50
4563: ST_TO_ADDR
// PrepareSoldier ( 1 , 9 ) ;
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 9
4569: PPUSH
4570: CALL_OW 381
// hc_name := ??? ;
4574: LD_ADDR_OWVAR 26
4578: PUSH
4579: LD_STRING ???
4581: ST_TO_ADDR
// hc_gallery := ZieloneLaserki_Heroes ;
4582: LD_ADDR_OWVAR 33
4586: PUSH
4587: LD_STRING ZieloneLaserki_Heroes
4589: ST_TO_ADDR
// hc_face_number := 8 ;
4590: LD_ADDR_OWVAR 34
4594: PUSH
4595: LD_INT 8
4597: ST_TO_ADDR
// Sidor := CreateHuman ;
4598: LD_ADDR_EXP 29
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// uc_side := 4 ;
4608: LD_ADDR_OWVAR 20
4612: PUSH
4613: LD_INT 4
4615: ST_TO_ADDR
// uc_nation := nation_american ;
4616: LD_ADDR_OWVAR 21
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// hc_importance = 50 ;
4624: LD_ADDR_OWVAR 32
4628: PUSH
4629: LD_INT 50
4631: ST_TO_ADDR
// PrepareSoldier ( 0 , 5 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 5
4637: PPUSH
4638: CALL_OW 381
// hc_name :=  ;
4642: LD_ADDR_OWVAR 26
4646: PUSH
4647: LD_STRING 
4649: ST_TO_ADDR
// hc_gallery :=  ;
4650: LD_ADDR_OWVAR 33
4654: PUSH
4655: LD_STRING 
4657: ST_TO_ADDR
// Scout := CreateHuman ;
4658: LD_ADDR_EXP 30
4662: PUSH
4663: CALL_OW 44
4667: ST_TO_ADDR
// end ;
4668: LD_VAR 0 1
4672: RET
// export function Garrison_Buildings ( side ) ; var i , j , l , laby , zbrojnie , warsztaty , fabryki , sklad , ilu_ludzi , ludz , filter ; begin
4673: LD_INT 0
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
// laby := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab ] ] ) ;
4687: LD_ADDR_VAR 0 6
4691: PUSH
4692: LD_INT 22
4694: PUSH
4695: LD_VAR 0 1
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 30
4706: PUSH
4707: LD_INT 6
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PPUSH
4718: CALL_OW 69
4722: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
4723: LD_ADDR_VAR 0 6
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: LD_INT 22
4735: PUSH
4736: LD_VAR 0 1
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 30
4747: PUSH
4748: LD_INT 7
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ADD
4764: ST_TO_ADDR
// laby := laby ^ FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
4765: LD_ADDR_VAR 0 6
4769: PUSH
4770: LD_VAR 0 6
4774: PUSH
4775: LD_INT 22
4777: PUSH
4778: LD_VAR 0 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 30
4789: PUSH
4790: LD_INT 8
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ADD
4806: ST_TO_ADDR
// warsztaty := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_workshop ] ] ) ;
4807: LD_ADDR_VAR 0 8
4811: PUSH
4812: LD_INT 22
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 30
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 69
4842: ST_TO_ADDR
// fabryki := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
4843: LD_ADDR_VAR 0 9
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_VAR 0 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
4879: LD_ADDR_VAR 0 10
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_VAR 0 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 30
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: ST_TO_ADDR
// sklad := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
4915: LD_ADDR_VAR 0 10
4919: PUSH
4920: LD_INT 22
4922: PUSH
4923: LD_VAR 0 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 30
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// case side of 1 :
4951: LD_VAR 0 1
4955: PUSH
4956: LD_INT 1
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 4975
4964: POP
// uc_nation = nation_american ; 3 :
4965: LD_ADDR_OWVAR 21
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
4973: GO 4995
4975: LD_INT 3
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4994
4983: POP
// uc_nation = nation_russian ; end ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 3
4991: ST_TO_ADDR
4992: GO 4995
4994: POP
// for i = 1 to laby do
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_VAR 0 6
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5140
// begin if IsInUnit ( laby [ i ] ) = 0 then
5013: LD_VAR 0 6
5017: PUSH
5018: LD_VAR 0 3
5022: ARRAY
5023: PPUSH
5024: CALL_OW 310
5028: PUSH
5029: LD_INT 0
5031: EQUAL
5032: IFFALSE 5138
// begin uc_side = side ;
5034: LD_ADDR_OWVAR 20
5038: PUSH
5039: LD_VAR 0 1
5043: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
5044: LD_ADDR_VAR 0 11
5048: PUSH
5049: LD_INT 2
5051: PPUSH
5052: LD_INT 4
5054: PPUSH
5055: CALL_OW 12
5059: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5060: LD_ADDR_VAR 0 4
5064: PUSH
5065: DOUBLE
5066: LD_INT 1
5068: DEC
5069: ST_TO_ADDR
5070: LD_VAR 0 11
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5136
// begin PrepareScientist ( 0 , 4 ) ;
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 4
5083: PPUSH
5084: CALL_OW 384
// ludz = CreateHuman ;
5088: LD_ADDR_VAR 0 12
5092: PUSH
5093: CALL_OW 44
5097: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , laby [ i ] ) ;
5098: LD_VAR 0 12
5102: PPUSH
5103: LD_VAR 0 6
5107: PUSH
5108: LD_VAR 0 3
5112: ARRAY
5113: PPUSH
5114: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
5118: LD_ADDR_VAR 0 11
5122: PUSH
5123: LD_INT 2
5125: PPUSH
5126: LD_INT 4
5128: PPUSH
5129: CALL_OW 12
5133: ST_TO_ADDR
// end ;
5134: GO 5075
5136: POP
5137: POP
// end ; end ;
5138: GO 5010
5140: POP
5141: POP
// for i = 1 to fabryki do
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: DOUBLE
5148: LD_INT 1
5150: DEC
5151: ST_TO_ADDR
5152: LD_VAR 0 9
5156: PUSH
5157: FOR_TO
5158: IFFALSE 5287
// begin if IsInUnit ( fabryki [ i ] ) = 0 then
5160: LD_VAR 0 9
5164: PUSH
5165: LD_VAR 0 3
5169: ARRAY
5170: PPUSH
5171: CALL_OW 310
5175: PUSH
5176: LD_INT 0
5178: EQUAL
5179: IFFALSE 5285
// begin uc_side = side ;
5181: LD_ADDR_OWVAR 20
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 4 ) ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_INT 2
5198: PPUSH
5199: LD_INT 4
5201: PPUSH
5202: CALL_OW 12
5206: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5207: LD_ADDR_VAR 0 4
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_VAR 0 11
5221: PUSH
5222: FOR_TO
5223: IFFALSE 5283
// begin PrepareMechanic ( 0 , 4 ) ;
5225: LD_INT 0
5227: PPUSH
5228: LD_INT 4
5230: PPUSH
5231: CALL_OW 383
// ludz = CreateHuman ;
5235: LD_ADDR_VAR 0 12
5239: PUSH
5240: CALL_OW 44
5244: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , fabryki [ i ] ) ;
5245: LD_VAR 0 12
5249: PPUSH
5250: LD_VAR 0 9
5254: PUSH
5255: LD_VAR 0 3
5259: ARRAY
5260: PPUSH
5261: CALL_OW 52
// ilu_ludzi = Rand ( 2 , 4 ) ;
5265: LD_ADDR_VAR 0 11
5269: PUSH
5270: LD_INT 2
5272: PPUSH
5273: LD_INT 4
5275: PPUSH
5276: CALL_OW 12
5280: ST_TO_ADDR
// end ;
5281: GO 5222
5283: POP
5284: POP
// end ; end ;
5285: GO 5157
5287: POP
5288: POP
// for i = 1 to sklad do
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_VAR 0 10
5303: PUSH
5304: FOR_TO
5305: IFFALSE 5418
// begin if IsInUnit ( sklad [ i ] ) = 0 then
5307: LD_VAR 0 10
5311: PUSH
5312: LD_VAR 0 3
5316: ARRAY
5317: PPUSH
5318: CALL_OW 310
5322: PUSH
5323: LD_INT 0
5325: EQUAL
5326: IFFALSE 5416
// begin uc_side = side ;
5328: LD_ADDR_OWVAR 20
5332: PUSH
5333: LD_VAR 0 1
5337: ST_TO_ADDR
// ilu_ludzi = Rand ( 2 , 3 ) ;
5338: LD_ADDR_VAR 0 11
5342: PUSH
5343: LD_INT 2
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 12
5353: ST_TO_ADDR
// for j = 1 to ilu_ludzi do
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: DOUBLE
5360: LD_INT 1
5362: DEC
5363: ST_TO_ADDR
5364: LD_VAR 0 11
5368: PUSH
5369: FOR_TO
5370: IFFALSE 5414
// begin PrepareEngineer ( 0 , 4 ) ;
5372: LD_INT 0
5374: PPUSH
5375: LD_INT 4
5377: PPUSH
5378: CALL_OW 382
// ludz = CreateHuman ;
5382: LD_ADDR_VAR 0 12
5386: PUSH
5387: CALL_OW 44
5391: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , sklad [ i ] ) ;
5392: LD_VAR 0 12
5396: PPUSH
5397: LD_VAR 0 10
5401: PUSH
5402: LD_VAR 0 3
5406: ARRAY
5407: PPUSH
5408: CALL_OW 52
// end ;
5412: GO 5369
5414: POP
5415: POP
// end ; end ;
5416: GO 5304
5418: POP
5419: POP
// end ;
5420: LD_VAR 0 2
5424: RET
// export function Garrison_Buildings_AM ( side ) ; var i , j , l , labs , labs2 , factories , depots , how_many , ludz , filter ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
// labs := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_half ] ] ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_VAR 0 1
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 30
5457: PUSH
5458: LD_INT 7
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: ST_TO_ADDR
// labs2 := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_lab_full ] ] ) ;
5474: LD_ADDR_VAR 0 7
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_VAR 0 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 30
5493: PUSH
5494: LD_INT 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL_OW 69
5509: ST_TO_ADDR
// factories := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) ;
5510: LD_ADDR_VAR 0 8
5514: PUSH
5515: LD_INT 22
5517: PUSH
5518: LD_VAR 0 1
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 30
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// depots := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_depot ] ] ) ;
5546: LD_ADDR_VAR 0 9
5550: PUSH
5551: LD_INT 22
5553: PUSH
5554: LD_VAR 0 1
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 30
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 69
5581: ST_TO_ADDR
// depots := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5582: LD_ADDR_VAR 0 9
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_VAR 0 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 30
5601: PUSH
5602: LD_INT 1
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 69
5617: ST_TO_ADDR
// case side of 1 :
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 1
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5631
5629: GO 5642
5631: POP
// uc_nation = nation_american ; 3 :
5632: LD_ADDR_OWVAR 21
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
5640: GO 5662
5642: LD_INT 3
5644: DOUBLE
5645: EQUAL
5646: IFTRUE 5650
5648: GO 5661
5650: POP
// uc_nation = nation_russian ; end ;
5651: LD_ADDR_OWVAR 21
5655: PUSH
5656: LD_INT 3
5658: ST_TO_ADDR
5659: GO 5662
5661: POP
// for i = 1 to labs do
5662: LD_ADDR_VAR 0 3
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_VAR 0 6
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5783
// begin if IsInUnit ( labs [ i ] ) = 0 then
5680: LD_VAR 0 6
5684: PUSH
5685: LD_VAR 0 3
5689: ARRAY
5690: PPUSH
5691: CALL_OW 310
5695: PUSH
5696: LD_INT 0
5698: EQUAL
5699: IFFALSE 5781
// begin uc_side = side ;
5701: LD_ADDR_OWVAR 20
5705: PUSH
5706: LD_VAR 0 1
5710: ST_TO_ADDR
// how_many = 2 ;
5711: LD_ADDR_VAR 0 10
5715: PUSH
5716: LD_INT 2
5718: ST_TO_ADDR
// for j = 1 to how_many do
5719: LD_ADDR_VAR 0 4
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_VAR 0 10
5733: PUSH
5734: FOR_TO
5735: IFFALSE 5779
// begin PrepareScientist ( 0 , 4 ) ;
5737: LD_INT 0
5739: PPUSH
5740: LD_INT 4
5742: PPUSH
5743: CALL_OW 384
// ludz = CreateHuman ;
5747: LD_ADDR_VAR 0 11
5751: PUSH
5752: CALL_OW 44
5756: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , labs [ i ] ) ;
5757: LD_VAR 0 11
5761: PPUSH
5762: LD_VAR 0 6
5766: PUSH
5767: LD_VAR 0 3
5771: ARRAY
5772: PPUSH
5773: CALL_OW 52
// end ;
5777: GO 5734
5779: POP
5780: POP
// end ; end ;
5781: GO 5677
5783: POP
5784: POP
// for i = 1 to labs2 do
5785: LD_ADDR_VAR 0 3
5789: PUSH
5790: DOUBLE
5791: LD_INT 1
5793: DEC
5794: ST_TO_ADDR
5795: LD_VAR 0 7
5799: PUSH
5800: FOR_TO
5801: IFFALSE 5906
// begin if IsInUnit ( labs2 [ i ] ) = 0 then
5803: LD_VAR 0 7
5807: PUSH
5808: LD_VAR 0 3
5812: ARRAY
5813: PPUSH
5814: CALL_OW 310
5818: PUSH
5819: LD_INT 0
5821: EQUAL
5822: IFFALSE 5904
// begin uc_side = side ;
5824: LD_ADDR_OWVAR 20
5828: PUSH
5829: LD_VAR 0 1
5833: ST_TO_ADDR
// how_many = 3 ;
5834: LD_ADDR_VAR 0 10
5838: PUSH
5839: LD_INT 3
5841: ST_TO_ADDR
// for j = 1 to how_many do
5842: LD_ADDR_VAR 0 4
5846: PUSH
5847: DOUBLE
5848: LD_INT 1
5850: DEC
5851: ST_TO_ADDR
5852: LD_VAR 0 10
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5902
// begin PrepareScientist ( 0 , 5 ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 5
5865: PPUSH
5866: CALL_OW 384
// ludz = CreateHuman ;
5870: LD_ADDR_VAR 0 11
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , labs2 [ i ] ) ;
5880: LD_VAR 0 11
5884: PPUSH
5885: LD_VAR 0 7
5889: PUSH
5890: LD_VAR 0 3
5894: ARRAY
5895: PPUSH
5896: CALL_OW 52
// end ;
5900: GO 5857
5902: POP
5903: POP
// end ; end ;
5904: GO 5800
5906: POP
5907: POP
// for i = 1 to factories do
5908: LD_ADDR_VAR 0 3
5912: PUSH
5913: DOUBLE
5914: LD_INT 1
5916: DEC
5917: ST_TO_ADDR
5918: LD_VAR 0 8
5922: PUSH
5923: FOR_TO
5924: IFFALSE 6029
// begin if IsInUnit ( factories [ i ] ) = 0 then
5926: LD_VAR 0 8
5930: PUSH
5931: LD_VAR 0 3
5935: ARRAY
5936: PPUSH
5937: CALL_OW 310
5941: PUSH
5942: LD_INT 0
5944: EQUAL
5945: IFFALSE 6027
// begin uc_side = side ;
5947: LD_ADDR_OWVAR 20
5951: PUSH
5952: LD_VAR 0 1
5956: ST_TO_ADDR
// how_many = 3 ;
5957: LD_ADDR_VAR 0 10
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// for j = 1 to how_many do
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: DOUBLE
5971: LD_INT 1
5973: DEC
5974: ST_TO_ADDR
5975: LD_VAR 0 10
5979: PUSH
5980: FOR_TO
5981: IFFALSE 6025
// begin PrepareMechanic ( 0 , 4 ) ;
5983: LD_INT 0
5985: PPUSH
5986: LD_INT 4
5988: PPUSH
5989: CALL_OW 383
// ludz = CreateHuman ;
5993: LD_ADDR_VAR 0 11
5997: PUSH
5998: CALL_OW 44
6002: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , factories [ i ] ) ;
6003: LD_VAR 0 11
6007: PPUSH
6008: LD_VAR 0 8
6012: PUSH
6013: LD_VAR 0 3
6017: ARRAY
6018: PPUSH
6019: CALL_OW 52
// end ;
6023: GO 5980
6025: POP
6026: POP
// end ; end ;
6027: GO 5923
6029: POP
6030: POP
// for i = 1 to depots do
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_VAR 0 9
6045: PUSH
6046: FOR_TO
6047: IFFALSE 6152
// begin if IsInUnit ( depots [ i ] ) = 0 then
6049: LD_VAR 0 9
6053: PUSH
6054: LD_VAR 0 3
6058: ARRAY
6059: PPUSH
6060: CALL_OW 310
6064: PUSH
6065: LD_INT 0
6067: EQUAL
6068: IFFALSE 6150
// begin uc_side = side ;
6070: LD_ADDR_OWVAR 20
6074: PUSH
6075: LD_VAR 0 1
6079: ST_TO_ADDR
// how_many = 3 ;
6080: LD_ADDR_VAR 0 10
6084: PUSH
6085: LD_INT 3
6087: ST_TO_ADDR
// for j = 1 to how_many do
6088: LD_ADDR_VAR 0 4
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_VAR 0 10
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6148
// begin PrepareEngineer ( 0 , 4 ) ;
6106: LD_INT 0
6108: PPUSH
6109: LD_INT 4
6111: PPUSH
6112: CALL_OW 382
// ludz = CreateHuman ;
6116: LD_ADDR_VAR 0 11
6120: PUSH
6121: CALL_OW 44
6125: ST_TO_ADDR
// PlaceHumanInUnit ( ludz , depots [ i ] ) ;
6126: LD_VAR 0 11
6130: PPUSH
6131: LD_VAR 0 9
6135: PUSH
6136: LD_VAR 0 3
6140: ARRAY
6141: PPUSH
6142: CALL_OW 52
// end ;
6146: GO 6103
6148: POP
6149: POP
// end ; end ;
6150: GO 6046
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 2
6158: RET
// export function Assemble_Barracks ( side ) ; var i , j , barrack , soldat , filter ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
// case side of 1 :
6167: LD_VAR 0 1
6171: PUSH
6172: LD_INT 1
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6191
6180: POP
// uc_nation = nation_american ; 3 :
6181: LD_ADDR_OWVAR 21
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
6189: GO 6211
6191: LD_INT 3
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6210
6199: POP
// uc_nation = nation_russian ; end ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
6208: GO 6211
6210: POP
// barrack := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
6211: LD_ADDR_VAR 0 5
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_VAR 0 1
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 30
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 69
6246: ST_TO_ADDR
// for i = 1 to barrack do
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_VAR 0 5
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6436
// begin if IsInUnit ( barrack [ i ] ) = 0 then
6265: LD_VAR 0 5
6269: PUSH
6270: LD_VAR 0 3
6274: ARRAY
6275: PPUSH
6276: CALL_OW 310
6280: PUSH
6281: LD_INT 0
6283: EQUAL
6284: IFFALSE 6434
// begin uc_side = side ;
6286: LD_ADDR_OWVAR 20
6290: PUSH
6291: LD_VAR 0 1
6295: ST_TO_ADDR
// for j = 1 to 3 do
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: DOUBLE
6302: LD_INT 1
6304: DEC
6305: ST_TO_ADDR
6306: LD_INT 3
6308: PUSH
6309: FOR_TO
6310: IFFALSE 6354
// begin PrepareSoldier ( 0 , 5 ) ;
6312: LD_INT 0
6314: PPUSH
6315: LD_INT 5
6317: PPUSH
6318: CALL_OW 381
// soldat := CreateHuman ;
6322: LD_ADDR_VAR 0 6
6326: PUSH
6327: CALL_OW 44
6331: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
6332: LD_VAR 0 6
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_VAR 0 3
6346: ARRAY
6347: PPUSH
6348: CALL_OW 52
// end ;
6352: GO 6309
6354: POP
6355: POP
// if side = 3 then
6356: LD_VAR 0 1
6360: PUSH
6361: LD_INT 3
6363: EQUAL
6364: IFFALSE 6434
// for j = 1 to 2 do
6366: LD_ADDR_VAR 0 4
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 2
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6432
// begin PrepareSoldier ( 0 , 5 ) ;
6382: LD_INT 0
6384: PPUSH
6385: LD_INT 5
6387: PPUSH
6388: CALL_OW 381
// hc_class = class_bazooker ;
6392: LD_ADDR_OWVAR 28
6396: PUSH
6397: LD_INT 9
6399: ST_TO_ADDR
// soldat := CreateHuman ;
6400: LD_ADDR_VAR 0 6
6404: PUSH
6405: CALL_OW 44
6409: ST_TO_ADDR
// PlaceHumanInUnit ( soldat , barrack [ i ] ) ;
6410: LD_VAR 0 6
6414: PPUSH
6415: LD_VAR 0 5
6419: PUSH
6420: LD_VAR 0 3
6424: ARRAY
6425: PPUSH
6426: CALL_OW 52
// end ;
6430: GO 6379
6432: POP
6433: POP
// end ; end ;
6434: GO 6262
6436: POP
6437: POP
// end ;
6438: LD_VAR 0 2
6442: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , IsMCAttack , AttacksAlly ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , target1 , target2 ; begin
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
6451: PPUSH
6452: PPUSH
6453: PPUSH
6454: PPUSH
// amChassisTab = [ ] ;
6455: LD_ADDR_VAR 0 20
6459: PUSH
6460: EMPTY
6461: ST_TO_ADDR
// arChassisTab = [ ] ;
6462: LD_ADDR_VAR 0 19
6466: PUSH
6467: EMPTY
6468: ST_TO_ADDR
// ruChassisTab = [ ] ;
6469: LD_ADDR_VAR 0 18
6473: PUSH
6474: EMPTY
6475: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6476: LD_INT 35
6478: PPUSH
6479: CALL_OW 67
// if nation = 1 then
6483: LD_VAR 0 5
6487: PUSH
6488: LD_INT 1
6490: EQUAL
6491: IFFALSE 7060
// begin uc_side = side ;
6493: LD_ADDR_OWVAR 20
6497: PUSH
6498: LD_VAR 0 2
6502: ST_TO_ADDR
// uc_nation = nation ;
6503: LD_ADDR_OWVAR 21
6507: PUSH
6508: LD_VAR 0 5
6512: ST_TO_ADDR
// vc_engine = vehengine ;
6513: LD_ADDR_OWVAR 39
6517: PUSH
6518: LD_VAR 0 6
6522: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
6523: LD_ADDR_OWVAR 38
6527: PUSH
6528: LD_VAR 0 7
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_VAR 0 7
6540: PPUSH
6541: CALL_OW 12
6545: ARRAY
6546: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
6547: LD_ADDR_OWVAR 40
6551: PUSH
6552: LD_VAR 0 10
6556: PUSH
6557: LD_INT 1
6559: PPUSH
6560: LD_VAR 0 10
6564: PPUSH
6565: CALL_OW 12
6569: ARRAY
6570: ST_TO_ADDR
// for j = 1 to AMWeapon do
6571: LD_ADDR_VAR 0 15
6575: PUSH
6576: DOUBLE
6577: LD_INT 1
6579: DEC
6580: ST_TO_ADDR
6581: LD_VAR 0 10
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6888
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
6589: LD_VAR 0 10
6593: PUSH
6594: LD_VAR 0 15
6598: ARRAY
6599: PUSH
6600: LD_INT 2
6602: EQUAL
6603: PUSH
6604: LD_VAR 0 10
6608: PUSH
6609: LD_VAR 0 15
6613: ARRAY
6614: PUSH
6615: LD_INT 3
6617: EQUAL
6618: OR
6619: IFFALSE 6672
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
6621: LD_ADDR_VAR 0 20
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: LD_INT 4
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6648: LD_ADDR_OWVAR 37
6652: PUSH
6653: LD_VAR 0 20
6657: PUSH
6658: LD_INT 1
6660: PPUSH
6661: LD_VAR 0 20
6665: PPUSH
6666: CALL_OW 12
6670: ARRAY
6671: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
6672: LD_VAR 0 10
6676: PUSH
6677: LD_VAR 0 15
6681: ARRAY
6682: PUSH
6683: LD_INT 4
6685: EQUAL
6686: PUSH
6687: LD_VAR 0 10
6691: PUSH
6692: LD_VAR 0 15
6696: ARRAY
6697: PUSH
6698: LD_INT 5
6700: EQUAL
6701: OR
6702: PUSH
6703: LD_VAR 0 10
6707: PUSH
6708: LD_VAR 0 15
6712: ARRAY
6713: PUSH
6714: LD_INT 9
6716: EQUAL
6717: OR
6718: PUSH
6719: LD_VAR 0 10
6723: PUSH
6724: LD_VAR 0 15
6728: ARRAY
6729: PUSH
6730: LD_INT 11
6732: EQUAL
6733: OR
6734: PUSH
6735: LD_VAR 0 10
6739: PUSH
6740: LD_VAR 0 15
6744: ARRAY
6745: PUSH
6746: LD_INT 7
6748: EQUAL
6749: OR
6750: IFFALSE 6799
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
6752: LD_ADDR_VAR 0 20
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6775: LD_ADDR_OWVAR 37
6779: PUSH
6780: LD_VAR 0 20
6784: PUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_VAR 0 20
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
6799: LD_VAR 0 10
6803: PUSH
6804: LD_VAR 0 15
6808: ARRAY
6809: PUSH
6810: LD_INT 8
6812: EQUAL
6813: PUSH
6814: LD_VAR 0 10
6818: PUSH
6819: LD_VAR 0 15
6823: ARRAY
6824: PUSH
6825: LD_INT 6
6827: EQUAL
6828: OR
6829: PUSH
6830: LD_VAR 0 10
6834: PUSH
6835: LD_VAR 0 15
6839: ARRAY
6840: PUSH
6841: LD_INT 10
6843: EQUAL
6844: OR
6845: IFFALSE 6886
// begin amChassisTab = [ 4 , 5 ] ;
6847: LD_ADDR_VAR 0 20
6851: PUSH
6852: LD_INT 4
6854: PUSH
6855: LD_INT 5
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
6862: LD_ADDR_OWVAR 37
6866: PUSH
6867: LD_VAR 0 20
6871: PUSH
6872: LD_INT 1
6874: PPUSH
6875: LD_VAR 0 20
6879: PPUSH
6880: CALL_OW 12
6884: ARRAY
6885: ST_TO_ADDR
// end ; end ;
6886: GO 6586
6888: POP
6889: POP
// veh = CreateVehicle ;
6890: LD_ADDR_VAR 0 17
6894: PUSH
6895: CALL_OW 45
6899: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6900: LD_VAR 0 17
6904: PPUSH
6905: LD_VAR 0 1
6909: PPUSH
6910: LD_INT 0
6912: PPUSH
6913: CALL_OW 49
// if vc_control = 1 then
6917: LD_OWVAR 38
6921: PUSH
6922: LD_INT 1
6924: EQUAL
6925: IFFALSE 6982
// begin hc_gallery =  ;
6927: LD_ADDR_OWVAR 33
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// hc_name =  ;
6935: LD_ADDR_OWVAR 26
6939: PUSH
6940: LD_STRING 
6942: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_INT 3
6948: PPUSH
6949: LD_VAR 0 4
6953: PPUSH
6954: CALL_OW 380
// un = CreateHuman ;
6958: LD_ADDR_VAR 0 16
6962: PUSH
6963: CALL_OW 44
6967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6968: LD_VAR 0 16
6972: PPUSH
6973: LD_VAR 0 17
6977: PPUSH
6978: CALL_OW 52
// end ; if IsMCAttack then
6982: LD_VAR 0 11
6986: IFFALSE 7006
// MC_attack_group = MC_attack_group ^ veh else
6988: LD_ADDR_EXP 35
6992: PUSH
6993: LD_EXP 35
6997: PUSH
6998: LD_VAR 0 17
7002: ADD
7003: ST_TO_ADDR
7004: GO 7046
// if AttacksAlly then
7006: LD_VAR 0 12
7010: IFFALSE 7030
// attack_group = attack_group ^ veh else
7012: LD_ADDR_EXP 11
7016: PUSH
7017: LD_EXP 11
7021: PUSH
7022: LD_VAR 0 17
7026: ADD
7027: ST_TO_ADDR
7028: GO 7046
// attack_group2 = attack_group2 ^ veh ;
7030: LD_ADDR_EXP 36
7034: PUSH
7035: LD_EXP 36
7039: PUSH
7040: LD_VAR 0 17
7044: ADD
7045: ST_TO_ADDR
// i = i + 1 ;
7046: LD_ADDR_VAR 0 14
7050: PUSH
7051: LD_VAR 0 14
7055: PUSH
7056: LD_INT 1
7058: PLUS
7059: ST_TO_ADDR
// end ; if nation = 2 then
7060: LD_VAR 0 5
7064: PUSH
7065: LD_INT 2
7067: EQUAL
7068: IFFALSE 7554
// begin uc_side = side ;
7070: LD_ADDR_OWVAR 20
7074: PUSH
7075: LD_VAR 0 2
7079: ST_TO_ADDR
// uc_nation = nation ;
7080: LD_ADDR_OWVAR 21
7084: PUSH
7085: LD_VAR 0 5
7089: ST_TO_ADDR
// vc_engine = vehengine ;
7090: LD_ADDR_OWVAR 39
7094: PUSH
7095: LD_VAR 0 6
7099: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
7100: LD_ADDR_OWVAR 38
7104: PUSH
7105: LD_VAR 0 7
7109: PUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_VAR 0 7
7117: PPUSH
7118: CALL_OW 12
7122: ARRAY
7123: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
7124: LD_ADDR_OWVAR 40
7128: PUSH
7129: LD_VAR 0 9
7133: PUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_VAR 0 9
7141: PPUSH
7142: CALL_OW 12
7146: ARRAY
7147: ST_TO_ADDR
// for j = 1 to ARWeapons do
7148: LD_ADDR_VAR 0 15
7152: PUSH
7153: DOUBLE
7154: LD_INT 1
7156: DEC
7157: ST_TO_ADDR
7158: LD_VAR 0 9
7162: PUSH
7163: FOR_TO
7164: IFFALSE 7382
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
7166: LD_VAR 0 9
7170: PUSH
7171: LD_VAR 0 15
7175: ARRAY
7176: PUSH
7177: LD_INT 24
7179: EQUAL
7180: PUSH
7181: LD_VAR 0 9
7185: PUSH
7186: LD_VAR 0 15
7190: ARRAY
7191: PUSH
7192: LD_INT 22
7194: EQUAL
7195: OR
7196: PUSH
7197: LD_VAR 0 9
7201: PUSH
7202: LD_VAR 0 15
7206: ARRAY
7207: PUSH
7208: LD_INT 23
7210: EQUAL
7211: OR
7212: PUSH
7213: LD_VAR 0 9
7217: PUSH
7218: LD_VAR 0 15
7222: ARRAY
7223: PUSH
7224: LD_INT 30
7226: EQUAL
7227: OR
7228: IFFALSE 7265
// begin arChassisTab = [ 14 ] ;
7230: LD_ADDR_VAR 0 19
7234: PUSH
7235: LD_INT 14
7237: PUSH
7238: EMPTY
7239: LIST
7240: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7241: LD_ADDR_OWVAR 37
7245: PUSH
7246: LD_VAR 0 19
7250: PUSH
7251: LD_INT 1
7253: PPUSH
7254: LD_VAR 0 19
7258: PPUSH
7259: CALL_OW 12
7263: ARRAY
7264: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
7265: LD_VAR 0 9
7269: PUSH
7270: LD_VAR 0 15
7274: ARRAY
7275: PUSH
7276: LD_INT 29
7278: EQUAL
7279: PUSH
7280: LD_VAR 0 9
7284: PUSH
7285: LD_VAR 0 15
7289: ARRAY
7290: PUSH
7291: LD_INT 28
7293: EQUAL
7294: OR
7295: PUSH
7296: LD_VAR 0 9
7300: PUSH
7301: LD_VAR 0 15
7305: ARRAY
7306: PUSH
7307: LD_INT 27
7309: EQUAL
7310: OR
7311: PUSH
7312: LD_VAR 0 9
7316: PUSH
7317: LD_VAR 0 15
7321: ARRAY
7322: PUSH
7323: LD_INT 26
7325: EQUAL
7326: OR
7327: PUSH
7328: LD_VAR 0 9
7332: PUSH
7333: LD_VAR 0 15
7337: ARRAY
7338: PUSH
7339: LD_INT 25
7341: EQUAL
7342: OR
7343: IFFALSE 7380
// begin arChassisTab = [ 14 ] ;
7345: LD_ADDR_VAR 0 19
7349: PUSH
7350: LD_INT 14
7352: PUSH
7353: EMPTY
7354: LIST
7355: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
7356: LD_ADDR_OWVAR 37
7360: PUSH
7361: LD_VAR 0 19
7365: PUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_VAR 0 19
7373: PPUSH
7374: CALL_OW 12
7378: ARRAY
7379: ST_TO_ADDR
// end ; end ;
7380: GO 7163
7382: POP
7383: POP
// veh = CreateVehicle ;
7384: LD_ADDR_VAR 0 17
7388: PUSH
7389: CALL_OW 45
7393: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7394: LD_VAR 0 17
7398: PPUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 49
// if vc_control = 1 then
7411: LD_OWVAR 38
7415: PUSH
7416: LD_INT 1
7418: EQUAL
7419: IFFALSE 7476
// begin hc_gallery =  ;
7421: LD_ADDR_OWVAR 33
7425: PUSH
7426: LD_STRING 
7428: ST_TO_ADDR
// hc_name =  ;
7429: LD_ADDR_OWVAR 26
7433: PUSH
7434: LD_STRING 
7436: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7437: LD_INT 0
7439: PPUSH
7440: LD_INT 3
7442: PPUSH
7443: LD_VAR 0 4
7447: PPUSH
7448: CALL_OW 380
// un = CreateHuman ;
7452: LD_ADDR_VAR 0 16
7456: PUSH
7457: CALL_OW 44
7461: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7462: LD_VAR 0 16
7466: PPUSH
7467: LD_VAR 0 17
7471: PPUSH
7472: CALL_OW 52
// end ; if IsMCAttack then
7476: LD_VAR 0 11
7480: IFFALSE 7500
// MC_attack_group = MC_attack_group ^ veh else
7482: LD_ADDR_EXP 35
7486: PUSH
7487: LD_EXP 35
7491: PUSH
7492: LD_VAR 0 17
7496: ADD
7497: ST_TO_ADDR
7498: GO 7540
// if AttacksAlly then
7500: LD_VAR 0 12
7504: IFFALSE 7524
// attack_group = attack_group ^ veh else
7506: LD_ADDR_EXP 11
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 17
7520: ADD
7521: ST_TO_ADDR
7522: GO 7540
// attack_group2 = attack_group2 ^ veh ;
7524: LD_ADDR_EXP 36
7528: PUSH
7529: LD_EXP 36
7533: PUSH
7534: LD_VAR 0 17
7538: ADD
7539: ST_TO_ADDR
// i = i + 1 ;
7540: LD_ADDR_VAR 0 14
7544: PUSH
7545: LD_VAR 0 14
7549: PUSH
7550: LD_INT 1
7552: PLUS
7553: ST_TO_ADDR
// end ; if nation = 3 then
7554: LD_VAR 0 5
7558: PUSH
7559: LD_INT 3
7561: EQUAL
7562: IFFALSE 8032
// begin uc_side = side ;
7564: LD_ADDR_OWVAR 20
7568: PUSH
7569: LD_VAR 0 2
7573: ST_TO_ADDR
// uc_nation = nation ;
7574: LD_ADDR_OWVAR 21
7578: PUSH
7579: LD_VAR 0 5
7583: ST_TO_ADDR
// vc_engine = vehengine ;
7584: LD_ADDR_OWVAR 39
7588: PUSH
7589: LD_VAR 0 6
7593: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
7594: LD_ADDR_OWVAR 38
7598: PUSH
7599: LD_VAR 0 7
7603: PUSH
7604: LD_INT 1
7606: PPUSH
7607: LD_VAR 0 7
7611: PPUSH
7612: CALL_OW 12
7616: ARRAY
7617: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
7618: LD_ADDR_OWVAR 40
7622: PUSH
7623: LD_VAR 0 8
7627: PUSH
7628: LD_INT 1
7630: PPUSH
7631: LD_VAR 0 8
7635: PPUSH
7636: CALL_OW 12
7640: ARRAY
7641: ST_TO_ADDR
// for j = 1 to RuWeapons do
7642: LD_ADDR_VAR 0 15
7646: PUSH
7647: DOUBLE
7648: LD_INT 1
7650: DEC
7651: ST_TO_ADDR
7652: LD_VAR 0 8
7656: PUSH
7657: FOR_TO
7658: IFFALSE 7860
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
7660: LD_VAR 0 8
7664: PUSH
7665: LD_VAR 0 15
7669: ARRAY
7670: PUSH
7671: LD_INT 42
7673: EQUAL
7674: PUSH
7675: LD_VAR 0 8
7679: PUSH
7680: LD_VAR 0 15
7684: ARRAY
7685: PUSH
7686: LD_INT 43
7688: EQUAL
7689: OR
7690: PUSH
7691: LD_VAR 0 8
7695: PUSH
7696: LD_VAR 0 15
7700: ARRAY
7701: PUSH
7702: LD_INT 44
7704: EQUAL
7705: OR
7706: PUSH
7707: LD_VAR 0 8
7711: PUSH
7712: LD_VAR 0 15
7716: ARRAY
7717: PUSH
7718: LD_INT 45
7720: EQUAL
7721: OR
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_VAR 0 15
7732: ARRAY
7733: PUSH
7734: LD_INT 49
7736: EQUAL
7737: OR
7738: IFFALSE 7787
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
7740: LD_ADDR_VAR 0 18
7744: PUSH
7745: LD_INT 21
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 23
7753: PUSH
7754: LD_INT 24
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7763: LD_ADDR_OWVAR 37
7767: PUSH
7768: LD_VAR 0 18
7772: PUSH
7773: LD_INT 1
7775: PPUSH
7776: LD_VAR 0 18
7780: PPUSH
7781: CALL_OW 12
7785: ARRAY
7786: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
7787: LD_VAR 0 8
7791: PUSH
7792: LD_VAR 0 15
7796: ARRAY
7797: PUSH
7798: LD_INT 46
7800: EQUAL
7801: PUSH
7802: LD_VAR 0 8
7806: PUSH
7807: LD_VAR 0 15
7811: ARRAY
7812: PUSH
7813: LD_INT 47
7815: EQUAL
7816: OR
7817: IFFALSE 7858
// begin ruChassisTab = [ 23 , 24 ] ;
7819: LD_ADDR_VAR 0 18
7823: PUSH
7824: LD_INT 23
7826: PUSH
7827: LD_INT 24
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
7834: LD_ADDR_OWVAR 37
7838: PUSH
7839: LD_VAR 0 18
7843: PUSH
7844: LD_INT 1
7846: PPUSH
7847: LD_VAR 0 18
7851: PPUSH
7852: CALL_OW 12
7856: ARRAY
7857: ST_TO_ADDR
// end ; end ;
7858: GO 7657
7860: POP
7861: POP
// veh = CreateVehicle ;
7862: LD_ADDR_VAR 0 17
7866: PUSH
7867: CALL_OW 45
7871: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7872: LD_VAR 0 17
7876: PPUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 0
7884: PPUSH
7885: CALL_OW 49
// if vc_control = 1 then
7889: LD_OWVAR 38
7893: PUSH
7894: LD_INT 1
7896: EQUAL
7897: IFFALSE 7954
// begin hc_gallery =  ;
7899: LD_ADDR_OWVAR 33
7903: PUSH
7904: LD_STRING 
7906: ST_TO_ADDR
// hc_name =  ;
7907: LD_ADDR_OWVAR 26
7911: PUSH
7912: LD_STRING 
7914: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 3
7920: PPUSH
7921: LD_VAR 0 4
7925: PPUSH
7926: CALL_OW 380
// un = CreateHuman ;
7930: LD_ADDR_VAR 0 16
7934: PUSH
7935: CALL_OW 44
7939: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7940: LD_VAR 0 16
7944: PPUSH
7945: LD_VAR 0 17
7949: PPUSH
7950: CALL_OW 52
// end ; if IsMCAttack then
7954: LD_VAR 0 11
7958: IFFALSE 7978
// MC_attack_group = MC_attack_group ^ veh else
7960: LD_ADDR_EXP 35
7964: PUSH
7965: LD_EXP 35
7969: PUSH
7970: LD_VAR 0 17
7974: ADD
7975: ST_TO_ADDR
7976: GO 8018
// if AttacksAlly then
7978: LD_VAR 0 12
7982: IFFALSE 8002
// attack_group = attack_group ^ veh else
7984: LD_ADDR_EXP 11
7988: PUSH
7989: LD_EXP 11
7993: PUSH
7994: LD_VAR 0 17
7998: ADD
7999: ST_TO_ADDR
8000: GO 8018
// attack_group2 = attack_group2 ^ veh ;
8002: LD_ADDR_EXP 36
8006: PUSH
8007: LD_EXP 36
8011: PUSH
8012: LD_VAR 0 17
8016: ADD
8017: ST_TO_ADDR
// i = i + 1 ;
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: LD_VAR 0 14
8027: PUSH
8028: LD_INT 1
8030: PLUS
8031: ST_TO_ADDR
// end ; until i = vehCount ;
8032: LD_VAR 0 14
8036: PUSH
8037: LD_VAR 0 3
8041: EQUAL
8042: IFFALSE 6476
// end ;
8044: LD_VAR 0 13
8048: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , IsMCAttack , AttacksAlly ) ; var i , j , un , damageUnit_list , enemyUnits , und ; begin
8049: LD_INT 0
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
8055: PPUSH
8056: PPUSH
8057: PPUSH
// for i = 1 to medicCount do
8058: LD_ADDR_VAR 0 13
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_VAR 0 7
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8220
// begin uc_side = side ;
8076: LD_ADDR_OWVAR 20
8080: PUSH
8081: LD_VAR 0 1
8085: ST_TO_ADDR
// uc_nation = nation ;
8086: LD_ADDR_OWVAR 21
8090: PUSH
8091: LD_VAR 0 2
8095: ST_TO_ADDR
// hc_name =  ;
8096: LD_ADDR_OWVAR 26
8100: PUSH
8101: LD_STRING 
8103: ST_TO_ADDR
// hc_gallery =  ;
8104: LD_ADDR_OWVAR 33
8108: PUSH
8109: LD_STRING 
8111: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8112: LD_INT 0
8114: PPUSH
8115: LD_INT 4
8117: PPUSH
8118: LD_VAR 0 8
8122: PPUSH
8123: CALL_OW 380
// un = CreateHuman ;
8127: LD_ADDR_VAR 0 15
8131: PUSH
8132: CALL_OW 44
8136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8137: LD_VAR 0 15
8141: PPUSH
8142: LD_VAR 0 9
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 49
// if IsMCAttack then
8154: LD_VAR 0 10
8158: IFFALSE 8178
// MC_attack_group = MC_attack_group ^ un else
8160: LD_ADDR_EXP 35
8164: PUSH
8165: LD_EXP 35
8169: PUSH
8170: LD_VAR 0 15
8174: ADD
8175: ST_TO_ADDR
8176: GO 8218
// if AttacksAlly then
8178: LD_VAR 0 11
8182: IFFALSE 8202
// attack_group = attack_group ^ un else
8184: LD_ADDR_EXP 11
8188: PUSH
8189: LD_EXP 11
8193: PUSH
8194: LD_VAR 0 15
8198: ADD
8199: ST_TO_ADDR
8200: GO 8218
// attack_group2 = attack_group2 ^ un ;
8202: LD_ADDR_EXP 36
8206: PUSH
8207: LD_EXP 36
8211: PUSH
8212: LD_VAR 0 15
8216: ADD
8217: ST_TO_ADDR
// end ;
8218: GO 8073
8220: POP
8221: POP
// for i = 1 to soldierCount do
8222: LD_ADDR_VAR 0 13
8226: PUSH
8227: DOUBLE
8228: LD_INT 1
8230: DEC
8231: ST_TO_ADDR
8232: LD_VAR 0 3
8236: PUSH
8237: FOR_TO
8238: IFFALSE 8384
// begin uc_side = side ;
8240: LD_ADDR_OWVAR 20
8244: PUSH
8245: LD_VAR 0 1
8249: ST_TO_ADDR
// uc_nation = nation ;
8250: LD_ADDR_OWVAR 21
8254: PUSH
8255: LD_VAR 0 2
8259: ST_TO_ADDR
// hc_name =  ;
8260: LD_ADDR_OWVAR 26
8264: PUSH
8265: LD_STRING 
8267: ST_TO_ADDR
// hc_gallery =  ;
8268: LD_ADDR_OWVAR 33
8272: PUSH
8273: LD_STRING 
8275: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8276: LD_INT 0
8278: PPUSH
8279: LD_INT 1
8281: PPUSH
8282: LD_VAR 0 8
8286: PPUSH
8287: CALL_OW 380
// un = CreateHuman ;
8291: LD_ADDR_VAR 0 15
8295: PUSH
8296: CALL_OW 44
8300: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8301: LD_VAR 0 15
8305: PPUSH
8306: LD_VAR 0 9
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 49
// if IsMCAttack then
8318: LD_VAR 0 10
8322: IFFALSE 8342
// MC_attack_group = MC_attack_group ^ un else
8324: LD_ADDR_EXP 35
8328: PUSH
8329: LD_EXP 35
8333: PUSH
8334: LD_VAR 0 15
8338: ADD
8339: ST_TO_ADDR
8340: GO 8382
// if AttacksAlly then
8342: LD_VAR 0 11
8346: IFFALSE 8366
// attack_group = attack_group ^ un else
8348: LD_ADDR_EXP 11
8352: PUSH
8353: LD_EXP 11
8357: PUSH
8358: LD_VAR 0 15
8362: ADD
8363: ST_TO_ADDR
8364: GO 8382
// attack_group2 = attack_group2 ^ un ;
8366: LD_ADDR_EXP 36
8370: PUSH
8371: LD_EXP 36
8375: PUSH
8376: LD_VAR 0 15
8380: ADD
8381: ST_TO_ADDR
// end ;
8382: GO 8237
8384: POP
8385: POP
// for i = 1 to sniperCount do
8386: LD_ADDR_VAR 0 13
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 4
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8548
// begin uc_side = side ;
8404: LD_ADDR_OWVAR 20
8408: PUSH
8409: LD_VAR 0 1
8413: ST_TO_ADDR
// uc_nation = nation ;
8414: LD_ADDR_OWVAR 21
8418: PUSH
8419: LD_VAR 0 2
8423: ST_TO_ADDR
// hc_name =  ;
8424: LD_ADDR_OWVAR 26
8428: PUSH
8429: LD_STRING 
8431: ST_TO_ADDR
// hc_gallery =  ;
8432: LD_ADDR_OWVAR 33
8436: PUSH
8437: LD_STRING 
8439: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8440: LD_INT 0
8442: PPUSH
8443: LD_INT 5
8445: PPUSH
8446: LD_VAR 0 8
8450: PPUSH
8451: CALL_OW 380
// un = CreateHuman ;
8455: LD_ADDR_VAR 0 15
8459: PUSH
8460: CALL_OW 44
8464: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8465: LD_VAR 0 15
8469: PPUSH
8470: LD_VAR 0 9
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 49
// if IsMCAttack then
8482: LD_VAR 0 10
8486: IFFALSE 8506
// MC_attack_group = MC_attack_group ^ un else
8488: LD_ADDR_EXP 35
8492: PUSH
8493: LD_EXP 35
8497: PUSH
8498: LD_VAR 0 15
8502: ADD
8503: ST_TO_ADDR
8504: GO 8546
// if AttacksAlly then
8506: LD_VAR 0 11
8510: IFFALSE 8530
// attack_group = attack_group ^ un else
8512: LD_ADDR_EXP 11
8516: PUSH
8517: LD_EXP 11
8521: PUSH
8522: LD_VAR 0 15
8526: ADD
8527: ST_TO_ADDR
8528: GO 8546
// attack_group2 = attack_group2 ^ un ;
8530: LD_ADDR_EXP 36
8534: PUSH
8535: LD_EXP 36
8539: PUSH
8540: LD_VAR 0 15
8544: ADD
8545: ST_TO_ADDR
// end ;
8546: GO 8401
8548: POP
8549: POP
// for i = 1 to bazookCount do
8550: LD_ADDR_VAR 0 13
8554: PUSH
8555: DOUBLE
8556: LD_INT 1
8558: DEC
8559: ST_TO_ADDR
8560: LD_VAR 0 5
8564: PUSH
8565: FOR_TO
8566: IFFALSE 8712
// begin uc_side = side ;
8568: LD_ADDR_OWVAR 20
8572: PUSH
8573: LD_VAR 0 1
8577: ST_TO_ADDR
// uc_nation = nation ;
8578: LD_ADDR_OWVAR 21
8582: PUSH
8583: LD_VAR 0 2
8587: ST_TO_ADDR
// hc_name =  ;
8588: LD_ADDR_OWVAR 26
8592: PUSH
8593: LD_STRING 
8595: ST_TO_ADDR
// hc_gallery =  ;
8596: LD_ADDR_OWVAR 33
8600: PUSH
8601: LD_STRING 
8603: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8604: LD_INT 0
8606: PPUSH
8607: LD_INT 9
8609: PPUSH
8610: LD_VAR 0 8
8614: PPUSH
8615: CALL_OW 380
// un = CreateHuman ;
8619: LD_ADDR_VAR 0 15
8623: PUSH
8624: CALL_OW 44
8628: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8629: LD_VAR 0 15
8633: PPUSH
8634: LD_VAR 0 9
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 49
// if IsMCAttack then
8646: LD_VAR 0 10
8650: IFFALSE 8670
// MC_attack_group = MC_attack_group ^ un else
8652: LD_ADDR_EXP 35
8656: PUSH
8657: LD_EXP 35
8661: PUSH
8662: LD_VAR 0 15
8666: ADD
8667: ST_TO_ADDR
8668: GO 8710
// if AttacksAlly then
8670: LD_VAR 0 11
8674: IFFALSE 8694
// attack_group = attack_group ^ un else
8676: LD_ADDR_EXP 11
8680: PUSH
8681: LD_EXP 11
8685: PUSH
8686: LD_VAR 0 15
8690: ADD
8691: ST_TO_ADDR
8692: GO 8710
// attack_group2 = attack_group2 ^ un ;
8694: LD_ADDR_EXP 36
8698: PUSH
8699: LD_EXP 36
8703: PUSH
8704: LD_VAR 0 15
8708: ADD
8709: ST_TO_ADDR
// end ;
8710: GO 8565
8712: POP
8713: POP
// for i = 1 to mortalCount do
8714: LD_ADDR_VAR 0 13
8718: PUSH
8719: DOUBLE
8720: LD_INT 1
8722: DEC
8723: ST_TO_ADDR
8724: LD_VAR 0 6
8728: PUSH
8729: FOR_TO
8730: IFFALSE 8876
// begin uc_side = side ;
8732: LD_ADDR_OWVAR 20
8736: PUSH
8737: LD_VAR 0 1
8741: ST_TO_ADDR
// uc_nation = nation ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_VAR 0 2
8751: ST_TO_ADDR
// hc_name =  ;
8752: LD_ADDR_OWVAR 26
8756: PUSH
8757: LD_STRING 
8759: ST_TO_ADDR
// hc_gallery =  ;
8760: LD_ADDR_OWVAR 33
8764: PUSH
8765: LD_STRING 
8767: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8768: LD_INT 0
8770: PPUSH
8771: LD_INT 8
8773: PPUSH
8774: LD_VAR 0 8
8778: PPUSH
8779: CALL_OW 380
// un = CreateHuman ;
8783: LD_ADDR_VAR 0 15
8787: PUSH
8788: CALL_OW 44
8792: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8793: LD_VAR 0 15
8797: PPUSH
8798: LD_VAR 0 9
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 49
// if IsMCAttack then
8810: LD_VAR 0 10
8814: IFFALSE 8834
// MC_attack_group = MC_attack_group ^ un else
8816: LD_ADDR_EXP 35
8820: PUSH
8821: LD_EXP 35
8825: PUSH
8826: LD_VAR 0 15
8830: ADD
8831: ST_TO_ADDR
8832: GO 8874
// if AttacksAlly then
8834: LD_VAR 0 11
8838: IFFALSE 8858
// attack_group = attack_group ^ un else
8840: LD_ADDR_EXP 11
8844: PUSH
8845: LD_EXP 11
8849: PUSH
8850: LD_VAR 0 15
8854: ADD
8855: ST_TO_ADDR
8856: GO 8874
// attack_group2 = attack_group2 ^ un ;
8858: LD_ADDR_EXP 36
8862: PUSH
8863: LD_EXP 36
8867: PUSH
8868: LD_VAR 0 15
8872: ADD
8873: ST_TO_ADDR
// end ;
8874: GO 8729
8876: POP
8877: POP
// RUBazookers = RUBazookers ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 9 ] ] ) ;
8878: LD_ADDR_EXP 31
8882: PUSH
8883: LD_EXP 31
8887: PUSH
8888: LD_INT 9
8890: PPUSH
8891: LD_INT 22
8893: PUSH
8894: LD_VAR 0 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 25
8905: PUSH
8906: LD_INT 9
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 71
8921: ADD
8922: ST_TO_ADDR
// medic_list = medic_list ^ FilterUnitsExceptArea ( MainRUBase , [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8923: LD_ADDR_EXP 34
8927: PUSH
8928: LD_EXP 34
8932: PUSH
8933: LD_INT 9
8935: PPUSH
8936: LD_INT 22
8938: PUSH
8939: LD_VAR 0 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 25
8950: PUSH
8951: LD_INT 4
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 71
8966: ADD
8967: ST_TO_ADDR
// end ; end_of_file
8968: LD_VAR 0 12
8972: RET
// every 0 0$1 do
8973: GO 8975
8975: DISABLE
// begin enable ;
8976: ENABLE
// IntBazooka ( 3 , 1 , 7 ) ;
8977: LD_INT 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: LD_INT 7
8985: PPUSH
8986: CALL 12650 0 3
// end ;
8990: END
// every 0 0$1 do
8991: GO 8993
8993: DISABLE
// begin enable ;
8994: ENABLE
// RepairBuilding ( 3 , RuBase ) ;
8995: LD_INT 3
8997: PPUSH
8998: LD_INT 37
9000: PPUSH
9001: CALL 12293 0 2
// HealUnitInBase ( 3 , RussianHealArea1 , MainRUBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
9005: LD_INT 3
9007: PPUSH
9008: LD_INT 8
9010: PPUSH
9011: LD_INT 9
9013: PPUSH
9014: LD_INT 22
9016: PUSH
9017: LD_INT 3
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 21
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 30
9036: PUSH
9037: LD_INT 8
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 69
9053: PPUSH
9054: CALL 11745 0 4
// end ;
9058: END
// export function AIEngageEnemy ; var enemy , enemy2 , attacker ; begin
9059: LD_INT 0
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
// enemy = Filterallunits ( [ f_side , 1 ] ) ^ Filterallunits ( [ f_side , 7 ] ) ;
9065: LD_ADDR_VAR 0 2
9069: PUSH
9070: LD_INT 22
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 69
9084: PUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 7
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 69
9099: ADD
9100: ST_TO_ADDR
// enemy2 = Filterallunits ( [ f_side , 7 ] ) ;
9101: LD_ADDR_VAR 0 3
9105: PUSH
9106: LD_INT 22
9108: PUSH
9109: LD_INT 7
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 69
9120: ST_TO_ADDR
// for attacker in attack_group do
9121: LD_ADDR_VAR 0 4
9125: PUSH
9126: LD_EXP 11
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9160
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
9134: LD_VAR 0 4
9138: PPUSH
9139: LD_VAR 0 2
9143: PPUSH
9144: LD_VAR 0 4
9148: PPUSH
9149: CALL_OW 74
9153: PPUSH
9154: CALL_OW 115
9158: GO 9131
9160: POP
9161: POP
// for attacker in attack_group2 do
9162: LD_ADDR_VAR 0 4
9166: PUSH
9167: LD_EXP 36
9171: PUSH
9172: FOR_IN
9173: IFFALSE 9201
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy2 , attacker ) ) ;
9175: LD_VAR 0 4
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: LD_VAR 0 4
9189: PPUSH
9190: CALL_OW 74
9194: PPUSH
9195: CALL_OW 115
9199: GO 9172
9201: POP
9202: POP
// end ;
9203: LD_VAR 0 1
9207: RET
// every 0 0$1 do
9208: GO 9210
9210: DISABLE
// begin enable ;
9211: ENABLE
// AIEngageEnemy ;
9212: CALL 9059 0 0
// end ;
9216: END
// every 0 0$1 do var un ;
9217: GO 9219
9219: DISABLE
9220: LD_INT 0
9222: PPUSH
// begin enable ;
9223: ENABLE
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_engineer ] ] ) < 3 and RusEngReserve > 0 then
9224: LD_INT 22
9226: PUSH
9227: LD_INT 3
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 25
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PUSH
9253: LD_INT 3
9255: LESS
9256: PUSH
9257: LD_EXP 40
9261: PUSH
9262: LD_INT 0
9264: GREATER
9265: AND
9266: IFFALSE 9352
// begin uc_side = 3 ;
9268: LD_ADDR_OWVAR 20
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// uc_nation = 3 ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_INT 3
9283: ST_TO_ADDR
// hc_name =  ;
9284: LD_ADDR_OWVAR 26
9288: PUSH
9289: LD_STRING 
9291: ST_TO_ADDR
// hc_gallery =  ;
9292: LD_ADDR_OWVAR 33
9296: PUSH
9297: LD_STRING 
9299: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , 5 ) ;
9300: LD_INT 1
9302: PPUSH
9303: LD_INT 2
9305: PPUSH
9306: LD_INT 5
9308: PPUSH
9309: CALL_OW 380
// un = CreateHuman ;
9313: LD_ADDR_VAR 0 1
9317: PUSH
9318: CALL_OW 44
9322: ST_TO_ADDR
// PlaceUnitArea ( un , RU_Personnel_Spawn , false ) ;
9323: LD_VAR 0 1
9327: PPUSH
9328: LD_INT 12
9330: PPUSH
9331: LD_INT 0
9333: PPUSH
9334: CALL_OW 49
// RusEngReserve = RusEngReserve - 1 ;
9338: LD_ADDR_EXP 40
9342: PUSH
9343: LD_EXP 40
9347: PUSH
9348: LD_INT 1
9350: MINUS
9351: ST_TO_ADDR
// end ; end ;
9352: PPOPN 1
9354: END
// every 6 6$0 trigger russianAssaultStopped = 1 and IsOk ( rusFabr ) and GetSide ( rusFabr ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
9355: LD_EXP 2
9359: PUSH
9360: LD_INT 1
9362: EQUAL
9363: PUSH
9364: LD_INT 42
9366: PPUSH
9367: CALL_OW 302
9371: AND
9372: PUSH
9373: LD_INT 42
9375: PPUSH
9376: CALL_OW 255
9380: PUSH
9381: LD_INT 3
9383: EQUAL
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 33
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: PUSH
9426: LD_INT 0
9428: EQUAL
9429: AND
9430: IFFALSE 9611
9432: GO 9434
9434: DISABLE
// begin enable ;
9435: ENABLE
// if Difficulty = 1 then
9436: LD_OWVAR 67
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9497
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 4 , 5 ) , 7 , [ 43 , 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9446: LD_INT 3
9448: PPUSH
9449: LD_INT 42
9451: PPUSH
9452: LD_INT 4
9454: PPUSH
9455: LD_INT 5
9457: PPUSH
9458: CALL_OW 12
9462: PPUSH
9463: LD_INT 7
9465: PPUSH
9466: LD_INT 43
9468: PUSH
9469: LD_INT 44
9471: PUSH
9472: LD_INT 45
9474: PUSH
9475: LD_INT 46
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PPUSH
9484: LD_INT 3
9486: PPUSH
9487: LD_INT 3
9489: PPUSH
9490: LD_INT 22
9492: PPUSH
9493: CALL 13027 0 8
// if Difficulty = 2 then
9497: LD_OWVAR 67
9501: PUSH
9502: LD_INT 2
9504: EQUAL
9505: IFFALSE 9554
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 5 , 6 ) , 7 , [ 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9507: LD_INT 3
9509: PPUSH
9510: LD_INT 42
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: LD_INT 6
9518: PPUSH
9519: CALL_OW 12
9523: PPUSH
9524: LD_INT 7
9526: PPUSH
9527: LD_INT 44
9529: PUSH
9530: LD_INT 45
9532: PUSH
9533: LD_INT 46
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: LD_INT 3
9543: PPUSH
9544: LD_INT 3
9546: PPUSH
9547: LD_INT 22
9549: PPUSH
9550: CALL 13027 0 8
// if Difficulty = 3 then
9554: LD_OWVAR 67
9558: PUSH
9559: LD_INT 3
9561: EQUAL
9562: IFFALSE 9611
// BuildingVehicleAndAttackEnemy ( 3 , rusFabr , rand ( 7 , 8 ) , 7 , [ 44 , 45 , 46 ] , 3 , 3 , 22 ) ;
9564: LD_INT 3
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 8
9575: PPUSH
9576: CALL_OW 12
9580: PPUSH
9581: LD_INT 7
9583: PPUSH
9584: LD_INT 44
9586: PUSH
9587: LD_INT 45
9589: PUSH
9590: LD_INT 46
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: PPUSH
9598: LD_INT 3
9600: PPUSH
9601: LD_INT 3
9603: PPUSH
9604: LD_INT 22
9606: PPUSH
9607: CALL 13027 0 8
// end ;
9611: END
// every 5 5$0 + 1 1$30 trigger russianAssaultStopped = 1 and RusRearAttacks > 0 do
9612: LD_EXP 2
9616: PUSH
9617: LD_INT 1
9619: EQUAL
9620: PUSH
9621: LD_EXP 41
9625: PUSH
9626: LD_INT 0
9628: GREATER
9629: AND
9630: IFFALSE 9707
9632: GO 9634
9634: DISABLE
// begin enable ;
9635: ENABLE
// RespawnAttackInfantry ( 3 , 3 , Rand ( 3 , 5 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_SE , false , true ) ;
9636: LD_INT 3
9638: PPUSH
9639: LD_INT 3
9641: PPUSH
9642: LD_INT 3
9644: PPUSH
9645: LD_INT 5
9647: PPUSH
9648: CALL_OW 12
9652: PPUSH
9653: LD_INT 0
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: LD_EXP 37
9669: PPUSH
9670: LD_EXP 38
9674: PPUSH
9675: CALL_OW 12
9679: PPUSH
9680: LD_INT 5
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL 8049 0 11
// RusRearAttacks = RusRearAttacks - 1 ;
9693: LD_ADDR_EXP 41
9697: PUSH
9698: LD_EXP 41
9702: PUSH
9703: LD_INT 1
9705: MINUS
9706: ST_TO_ADDR
// end ;
9707: END
// every 6 6$0 + 2 2$20 trigger russianAssaultStopped = 1 and RusMainAttacks > 0 do var flags , coords ;
9708: LD_EXP 2
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: PUSH
9717: LD_EXP 42
9721: PUSH
9722: LD_INT 0
9724: GREATER
9725: AND
9726: IFFALSE 10268
9728: GO 9730
9730: DISABLE
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
// begin enable ;
9735: ENABLE
// flags := [ 0 , 1 , 0 , 1 , 0 , RussianHealArea2 , RussianHealArea2 , 0 , 0 , 1 ] ;
9736: LD_ADDR_VAR 0 1
9740: PUSH
9741: LD_INT 0
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 0
9755: PUSH
9756: LD_INT 7
9758: PUSH
9759: LD_INT 7
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: LD_INT 0
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// coords := [ ] ;
9783: LD_ADDR_VAR 0 2
9787: PUSH
9788: EMPTY
9789: ST_TO_ADDR
// case Rand ( 1 , 2 ) of 1 :
9790: LD_INT 1
9792: PPUSH
9793: LD_INT 2
9795: PPUSH
9796: CALL_OW 12
9800: PUSH
9801: LD_INT 1
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 10034
9809: POP
// begin RespawnAttackInfantry ( 3 , 3 , Rand ( 2 , 3 ) , 0 , Rand ( 0 , 2 ) , 0 , Rand ( 0 , 2 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N , true , true ) ;
9810: LD_INT 3
9812: PPUSH
9813: LD_INT 3
9815: PPUSH
9816: LD_INT 2
9818: PPUSH
9819: LD_INT 3
9821: PPUSH
9822: CALL_OW 12
9826: PPUSH
9827: LD_INT 0
9829: PPUSH
9830: LD_INT 0
9832: PPUSH
9833: LD_INT 2
9835: PPUSH
9836: CALL_OW 12
9840: PPUSH
9841: LD_INT 0
9843: PPUSH
9844: LD_INT 0
9846: PPUSH
9847: LD_INT 2
9849: PPUSH
9850: CALL_OW 12
9854: PPUSH
9855: LD_EXP 37
9859: PPUSH
9860: LD_EXP 38
9864: PPUSH
9865: CALL_OW 12
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 1
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL 8049 0 11
// RespawnAttackVehicle ( RU_SpawnZone_N , 3 , Rand ( 3 , 7 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RuWeaponArray , [ ] , [ ] , true , true ) ;
9883: LD_INT 3
9885: PPUSH
9886: LD_INT 3
9888: PPUSH
9889: LD_INT 3
9891: PPUSH
9892: LD_INT 7
9894: PPUSH
9895: CALL_OW 12
9899: PPUSH
9900: LD_EXP 37
9904: PPUSH
9905: LD_EXP 38
9909: PPUSH
9910: CALL_OW 12
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 3
9920: PPUSH
9921: LD_INT 1
9923: PUSH
9924: LD_INT 3
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PPUSH
9931: LD_EXP 39
9935: PPUSH
9936: EMPTY
9937: PPUSH
9938: EMPTY
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: LD_INT 1
9945: PPUSH
9946: CALL 6443 0 12
// RusMainAttacks = RusMainAttacks - 1 ;
9950: LD_ADDR_EXP 42
9954: PUSH
9955: LD_EXP 42
9959: PUSH
9960: LD_INT 1
9962: MINUS
9963: ST_TO_ADDR
// coords := [ [ 57 , 33 ] , [ 72 , 59 ] , [ 77 , 82 ] ] ;
9964: LD_ADDR_VAR 0 2
9968: PUSH
9969: LD_INT 57
9971: PUSH
9972: LD_INT 33
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 72
9981: PUSH
9982: LD_INT 59
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 77
9991: PUSH
9992: LD_INT 82
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: ST_TO_ADDR
// Attack ( [ 0 , MC_attack_group , coords , flags ] ) ;
10004: LD_INT 0
10006: PUSH
10007: LD_EXP 35
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: LD_VAR 0 1
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL 50715 0 1
// end ; 2 :
10032: GO 10268
10034: LD_INT 2
10036: DOUBLE
10037: EQUAL
10038: IFTRUE 10042
10040: GO 10267
10042: POP
// begin RespawnAttackInfantry ( 3 , 3 , Rand ( 2 , 3 ) , 0 , Rand ( 0 , 2 ) , 0 , Rand ( 0 , 2 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , RU_SpawnZone_N2 , true , true ) ;
10043: LD_INT 3
10045: PPUSH
10046: LD_INT 3
10048: PPUSH
10049: LD_INT 2
10051: PPUSH
10052: LD_INT 3
10054: PPUSH
10055: CALL_OW 12
10059: PPUSH
10060: LD_INT 0
10062: PPUSH
10063: LD_INT 0
10065: PPUSH
10066: LD_INT 2
10068: PPUSH
10069: CALL_OW 12
10073: PPUSH
10074: LD_INT 0
10076: PPUSH
10077: LD_INT 0
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: CALL_OW 12
10087: PPUSH
10088: LD_EXP 37
10092: PPUSH
10093: LD_EXP 38
10097: PPUSH
10098: CALL_OW 12
10102: PPUSH
10103: LD_INT 6
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL 8049 0 11
// RespawnAttackVehicle ( RU_SpawnZone_N2 , 3 , Rand ( 3 , 7 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_siberite , [ 1 , 3 ] , RuWeaponArray , [ ] , [ ] , true , true ) ;
10116: LD_INT 6
10118: PPUSH
10119: LD_INT 3
10121: PPUSH
10122: LD_INT 3
10124: PPUSH
10125: LD_INT 7
10127: PPUSH
10128: CALL_OW 12
10132: PPUSH
10133: LD_EXP 37
10137: PPUSH
10138: LD_EXP 38
10142: PPUSH
10143: CALL_OW 12
10147: PPUSH
10148: LD_INT 3
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_INT 1
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PPUSH
10164: LD_EXP 39
10168: PPUSH
10169: EMPTY
10170: PPUSH
10171: EMPTY
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL 6443 0 12
// RusMainAttacks = RusMainAttacks - 1 ;
10183: LD_ADDR_EXP 42
10187: PUSH
10188: LD_EXP 42
10192: PUSH
10193: LD_INT 1
10195: MINUS
10196: ST_TO_ADDR
// coords := [ [ 124 , 69 ] , [ 126 , 80 ] , [ 131 , 106 ] ] ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_INT 124
10204: PUSH
10205: LD_INT 69
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 126
10214: PUSH
10215: LD_INT 80
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 131
10224: PUSH
10225: LD_INT 106
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: ST_TO_ADDR
// Attack ( [ 0 , MC_attack_group , coords , flags ] ) ;
10237: LD_INT 0
10239: PUSH
10240: LD_EXP 35
10244: PUSH
10245: LD_VAR 0 2
10249: PUSH
10250: LD_VAR 0 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL 50715 0 1
// end ; end ;
10265: GO 10268
10267: POP
// end ;
10268: PPOPN 2
10270: END
// export function CustomInitMacro ( ) ; begin
10271: LD_INT 0
10273: PPUSH
// MC_SetScanArea ( 1 , RU2_Base_Area ) ;
10274: LD_INT 1
10276: PPUSH
10277: LD_INT 13
10279: PPUSH
10280: CALL 74999 0 2
// MC_SetParkingArea ( 1 , RU2_Base_Parking ) ;
10284: LD_INT 1
10286: PPUSH
10287: LD_INT 14
10289: PPUSH
10290: CALL 74943 0 2
// MC_SetDepositsXY ( 1 , [ [ 22 , 7 , 0 ] , [ 7 , 6 , 1 ] , ] ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 22
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: LD_INT 0
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 7
10313: PUSH
10314: LD_INT 6
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL 74063 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
10333: LD_INT 1
10335: PPUSH
10336: LD_INT 43
10338: PUSH
10339: LD_INT 46
10341: PUSH
10342: LD_INT 45
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL 74831 0 2
// MC_SetCratesArea ( 1 , RU2_Base_Crates ) ;
10354: LD_INT 1
10356: PPUSH
10357: LD_INT 15
10359: PPUSH
10360: CALL 74511 0 2
// MC_SetTame ( 1 , RU2_Base_ApeTame ) ;
10364: LD_INT 1
10366: PPUSH
10367: LD_INT 16
10369: PPUSH
10370: CALL 74242 0 2
// MC_SetDefenderLimit ( 1 , 5 ) ;
10374: LD_INT 1
10376: PPUSH
10377: LD_INT 5
10379: PPUSH
10380: CALL 73924 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ) ;
10384: LD_INT 1
10386: PPUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: LD_INT 43
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: LD_INT 3
10413: PUSH
10414: LD_INT 44
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 24
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 45
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: LD_INT 43
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 24
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: LD_INT 46
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL 73678 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 36 , 29 , 2 ] , [ b_armoury , 51 , 45 , 5 ] , [ b_armoury , 33 , 45 , 0 ] , [ b_lab , 38 , 16 , 1 ] , [ b_lab , 46 , 27 , 5 ] , [ b_workshop , 24 , 34 , 1 ] , [ b_oil_mine , 22 , 7 , 1 ] , [ b_siberite_mine , 7 , 6 , 1 ] , [ b_siberite_power , 15 , 24 , 1 ] , [ b_siberite_power , 20 , 26 , 2 ] , [ b_siberite_power , 26 , 27 , 5 ] , [ b_bunker , 27 , 42 , 0 ] , [ b_bunker , 42 , 47 , 5 ] , [ b_bunker , 49 , 48 , 5 ] , [ b_bunker , 53 , 43 , 5 ] , [ b_bunker , 54 , 39 , 4 ] , [ b_bunker , 55 , 36 , 5 ] , [ b_bunker , 53 , 31 , 4 ] , ] ) ;
10488: LD_INT 1
10490: PPUSH
10491: LD_INT 0
10493: PUSH
10494: LD_INT 36
10496: PUSH
10497: LD_INT 29
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 4
10511: PUSH
10512: LD_INT 51
10514: PUSH
10515: LD_INT 45
10517: PUSH
10518: LD_INT 5
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 33
10532: PUSH
10533: LD_INT 45
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 6
10547: PUSH
10548: LD_INT 38
10550: PUSH
10551: LD_INT 16
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 6
10565: PUSH
10566: LD_INT 46
10568: PUSH
10569: LD_INT 27
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 24
10586: PUSH
10587: LD_INT 34
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 29
10601: PUSH
10602: LD_INT 22
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 30
10619: PUSH
10620: LD_INT 7
10622: PUSH
10623: LD_INT 6
10625: PUSH
10626: LD_INT 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: LD_INT 15
10640: PUSH
10641: LD_INT 24
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 28
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 26
10661: PUSH
10662: LD_INT 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 28
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 27
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 32
10691: PUSH
10692: LD_INT 27
10694: PUSH
10695: LD_INT 42
10697: PUSH
10698: LD_INT 0
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 32
10709: PUSH
10710: LD_INT 42
10712: PUSH
10713: LD_INT 47
10715: PUSH
10716: LD_INT 5
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 32
10727: PUSH
10728: LD_INT 49
10730: PUSH
10731: LD_INT 48
10733: PUSH
10734: LD_INT 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 32
10745: PUSH
10746: LD_INT 53
10748: PUSH
10749: LD_INT 43
10751: PUSH
10752: LD_INT 5
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 32
10763: PUSH
10764: LD_INT 54
10766: PUSH
10767: LD_INT 39
10769: PUSH
10770: LD_INT 4
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: LD_INT 55
10784: PUSH
10785: LD_INT 36
10787: PUSH
10788: LD_INT 5
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 32
10799: PUSH
10800: LD_INT 53
10802: PUSH
10803: LD_INT 31
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL 73551 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
10839: LD_INT 1
10841: PPUSH
10842: LD_INT 10
10844: PUSH
10845: LD_INT 12
10847: PUSH
10848: LD_INT 14
10850: PUSH
10851: LD_INT 11
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PPUSH
10860: CALL 74418 0 2
// MC_SetFactoryExtension ( 1 , 24 , 34 , 1 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
10864: LD_INT 1
10866: PPUSH
10867: LD_INT 24
10869: PPUSH
10870: LD_INT 34
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: LD_INT 24
10878: PUSH
10879: LD_INT 16
10881: PUSH
10882: LD_INT 17
10884: PUSH
10885: LD_INT 18
10887: PUSH
10888: LD_INT 21
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PPUSH
10898: CALL 74625 0 5
// end ; end_of_file
10902: LD_VAR 0 1
10906: RET
// export RuSolMinLevel , RuSolMaxLevel , RuWeaponArray ; export RusEngReserve , RusRearAttacks , RusMainAttacks ; export function PrepareDifficulty ; begin
10907: LD_INT 0
10909: PPUSH
// if difficulty = 1 then
10910: LD_OWVAR 67
10914: PUSH
10915: LD_INT 1
10917: EQUAL
10918: IFFALSE 11005
// begin RuSolMinLevel = 3 ;
10920: LD_ADDR_EXP 37
10924: PUSH
10925: LD_INT 3
10927: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
10928: LD_ADDR_EXP 38
10932: PUSH
10933: LD_INT 4
10935: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
10936: LD_INT 51
10938: PPUSH
10939: LD_INT 3
10941: PPUSH
10942: LD_INT 2
10944: PPUSH
10945: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
10949: LD_INT 57
10951: PPUSH
10952: LD_INT 3
10954: PPUSH
10955: LD_INT 2
10957: PPUSH
10958: CALL_OW 322
// RusEngReserve = 3 ;
10962: LD_ADDR_EXP 40
10966: PUSH
10967: LD_INT 3
10969: ST_TO_ADDR
// RusRearAttacks = 2 ;
10970: LD_ADDR_EXP 41
10974: PUSH
10975: LD_INT 2
10977: ST_TO_ADDR
// RusMainAttacks = 3 ;
10978: LD_ADDR_EXP 42
10982: PUSH
10983: LD_INT 3
10985: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 42 ] ;
10986: LD_ADDR_EXP 39
10990: PUSH
10991: LD_INT 43
10993: PUSH
10994: LD_INT 44
10996: PUSH
10997: LD_INT 42
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: ST_TO_ADDR
// end ; if difficulty = 2 then
11005: LD_OWVAR 67
11009: PUSH
11010: LD_INT 2
11012: EQUAL
11013: IFFALSE 11147
// begin RuSolMinLevel = 4 ;
11015: LD_ADDR_EXP 37
11019: PUSH
11020: LD_INT 4
11022: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11023: LD_ADDR_EXP 38
11027: PUSH
11028: LD_INT 5
11030: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
11031: LD_INT 51
11033: PPUSH
11034: LD_INT 3
11036: PPUSH
11037: LD_INT 2
11039: PPUSH
11040: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
11044: LD_INT 52
11046: PPUSH
11047: LD_INT 3
11049: PPUSH
11050: LD_INT 2
11052: PPUSH
11053: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
11057: LD_INT 57
11059: PPUSH
11060: LD_INT 3
11062: PPUSH
11063: LD_INT 2
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
11070: LD_INT 58
11072: PPUSH
11073: LD_INT 3
11075: PPUSH
11076: LD_INT 2
11078: PPUSH
11079: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
11083: LD_INT 63
11085: PPUSH
11086: LD_INT 3
11088: PPUSH
11089: LD_INT 2
11091: PPUSH
11092: CALL_OW 322
// RusEngReserve = 6 ;
11096: LD_ADDR_EXP 40
11100: PUSH
11101: LD_INT 6
11103: ST_TO_ADDR
// RusRearAttacks = 3 ;
11104: LD_ADDR_EXP 41
11108: PUSH
11109: LD_INT 3
11111: ST_TO_ADDR
// RusMainAttacks = 5 ;
11112: LD_ADDR_EXP 42
11116: PUSH
11117: LD_INT 5
11119: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 42 , 45 , 46 ] ;
11120: LD_ADDR_EXP 39
11124: PUSH
11125: LD_INT 43
11127: PUSH
11128: LD_INT 44
11130: PUSH
11131: LD_INT 42
11133: PUSH
11134: LD_INT 45
11136: PUSH
11137: LD_INT 46
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: ST_TO_ADDR
// end ; if difficulty = 3 then
11147: LD_OWVAR 67
11151: PUSH
11152: LD_INT 3
11154: EQUAL
11155: IFFALSE 11298
// begin RuSolMinLevel = 5 ;
11157: LD_ADDR_EXP 37
11161: PUSH
11162: LD_INT 5
11164: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
11165: LD_ADDR_EXP 38
11169: PUSH
11170: LD_INT 6
11172: ST_TO_ADDR
// SetTech ( tech_Weap1 , 3 , state_researched ) ;
11173: LD_INT 51
11175: PPUSH
11176: LD_INT 3
11178: PPUSH
11179: LD_INT 2
11181: PPUSH
11182: CALL_OW 322
// SetTech ( tech_Comp1 , 3 , state_researched ) ;
11186: LD_INT 57
11188: PPUSH
11189: LD_INT 3
11191: PPUSH
11192: LD_INT 2
11194: PPUSH
11195: CALL_OW 322
// SetTech ( tech_Weap2 , 3 , state_researched ) ;
11199: LD_INT 52
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: LD_INT 2
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_Comp2 , 3 , state_researched ) ;
11212: LD_INT 58
11214: PPUSH
11215: LD_INT 3
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_ST1 , 3 , state_researched ) ;
11225: LD_INT 63
11227: PPUSH
11228: LD_INT 3
11230: PPUSH
11231: LD_INT 2
11233: PPUSH
11234: CALL_OW 322
// SetTech ( tech_ST2 , 3 , state_researched ) ;
11238: LD_INT 64
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: LD_INT 2
11246: PPUSH
11247: CALL_OW 322
// RusEngReserve = 9 ;
11251: LD_ADDR_EXP 40
11255: PUSH
11256: LD_INT 9
11258: ST_TO_ADDR
// RusRearAttacks = 5 ;
11259: LD_ADDR_EXP 41
11263: PUSH
11264: LD_INT 5
11266: ST_TO_ADDR
// RusMainAttacks = 7 ;
11267: LD_ADDR_EXP 42
11271: PUSH
11272: LD_INT 7
11274: ST_TO_ADDR
// RuWeaponArray = [ 43 , 44 , 45 , 46 ] ;
11275: LD_ADDR_EXP 39
11279: PUSH
11280: LD_INT 43
11282: PUSH
11283: LD_INT 44
11285: PUSH
11286: LD_INT 45
11288: PUSH
11289: LD_INT 46
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// end ; end ; end_of_file
11298: LD_VAR 0 1
11302: RET
// export function PrepareLaserTanks ; var i , xy ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// xy := [ [ 116 , 135 , 0 ] , [ 121 , 135 , 0 ] , [ 49 , 93 , 1 ] , [ 126 , 135 , 0 ] , [ 54 , 98 , 1 ] , [ 59 , 104 , 1 ] ] ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 116
11315: PUSH
11316: LD_INT 135
11318: PUSH
11319: LD_INT 0
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 121
11329: PUSH
11330: LD_INT 135
11332: PUSH
11333: LD_INT 0
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 49
11343: PUSH
11344: LD_INT 93
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 126
11357: PUSH
11358: LD_INT 135
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 54
11371: PUSH
11372: LD_INT 98
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 59
11385: PUSH
11386: LD_INT 104
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
// uc_nation := 1 ;
11405: LD_ADDR_OWVAR 21
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// for i = 1 to 6 do
11413: LD_ADDR_VAR 0 2
11417: PUSH
11418: DOUBLE
11419: LD_INT 1
11421: DEC
11422: ST_TO_ADDR
11423: LD_INT 6
11425: PUSH
11426: FOR_TO
11427: IFFALSE 11610
// begin if i < 4 then
11429: LD_VAR 0 2
11433: PUSH
11434: LD_INT 4
11436: LESS
11437: IFFALSE 11449
// uc_side := 7 else
11439: LD_ADDR_OWVAR 20
11443: PUSH
11444: LD_INT 7
11446: ST_TO_ADDR
11447: GO 11457
// uc_side := 1 ;
11449: LD_ADDR_OWVAR 20
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_double_laser , 100 ) ;
11457: LD_INT 5
11459: PPUSH
11460: LD_INT 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: LD_INT 10
11468: PPUSH
11469: LD_INT 100
11471: PPUSH
11472: CALL 22322 0 5
// case i of 1 :
11476: LD_VAR 0 2
11480: PUSH
11481: LD_INT 1
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11502
11489: POP
// ts := CreateVehicle ; 2 :
11490: LD_ADDR_EXP 12
11494: PUSH
11495: CALL_OW 45
11499: ST_TO_ADDR
11500: GO 11608
11502: LD_INT 2
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11523
11510: POP
// tk := CreateVehicle ; 3 :
11511: LD_ADDR_EXP 13
11515: PUSH
11516: CALL_OW 45
11520: ST_TO_ADDR
11521: GO 11608
11523: LD_INT 3
11525: DOUBLE
11526: EQUAL
11527: IFTRUE 11531
11529: GO 11544
11531: POP
// t1 := CreateVehicle ; 4 :
11532: LD_ADDR_EXP 15
11536: PUSH
11537: CALL_OW 45
11541: ST_TO_ADDR
11542: GO 11608
11544: LD_INT 4
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11565
11552: POP
// tlz := CreateVehicle ; 5 :
11553: LD_ADDR_EXP 14
11557: PUSH
11558: CALL_OW 45
11562: ST_TO_ADDR
11563: GO 11608
11565: LD_INT 5
11567: DOUBLE
11568: EQUAL
11569: IFTRUE 11573
11571: GO 11586
11573: POP
// t2 := CreateVehicle ; 6 :
11574: LD_ADDR_EXP 16
11578: PUSH
11579: CALL_OW 45
11583: ST_TO_ADDR
11584: GO 11608
11586: LD_INT 6
11588: DOUBLE
11589: EQUAL
11590: IFTRUE 11594
11592: GO 11607
11594: POP
// t3 := CreateVehicle ; end ;
11595: LD_ADDR_EXP 17
11599: PUSH
11600: CALL_OW 45
11604: ST_TO_ADDR
11605: GO 11608
11607: POP
// end ;
11608: GO 11426
11610: POP
11611: POP
// for i in [ ts , tk , tlz , t1 , t2 , t3 ] do
11612: LD_ADDR_VAR 0 2
11616: PUSH
11617: LD_EXP 12
11621: PUSH
11622: LD_EXP 13
11626: PUSH
11627: LD_EXP 14
11631: PUSH
11632: LD_EXP 15
11636: PUSH
11637: LD_EXP 16
11641: PUSH
11642: LD_EXP 17
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: FOR_IN
11656: IFFALSE 11738
// begin PlaceUnitXY ( i , xy [ 1 ] [ 1 ] , xy [ 1 ] [ 2 ] , false ) ;
11658: LD_VAR 0 2
11662: PPUSH
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: ARRAY
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PUSH
11685: LD_INT 2
11687: ARRAY
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: CALL_OW 48
// SetDir ( i , xy [ 1 ] [ 3 ] ) ;
11696: LD_VAR 0 2
11700: PPUSH
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: PUSH
11710: LD_INT 3
11712: ARRAY
11713: PPUSH
11714: CALL_OW 233
// xy := Delete ( xy , 1 ) ;
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 3
11735: ST_TO_ADDR
// end ;
11736: GO 11655
11738: POP
11739: POP
// end ;
11740: LD_VAR 0 1
11744: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
11756: LD_ADDR_VAR 0 6
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_VAR 0 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 25
11775: PUSH
11776: LD_INT 4
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 24
11785: PUSH
11786: LD_INT 251
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11803: LD_ADDR_VAR 0 7
11807: PUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 25
11827: PUSH
11828: LD_INT 4
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 50
11837: PUSH
11838: EMPTY
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 70
11850: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11851: LD_ADDR_VAR 0 10
11855: PUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 22
11863: PUSH
11864: LD_VAR 0 1
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 3
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: LD_INT 24
11905: PUSH
11906: LD_INT 750
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 70
11927: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11928: LD_ADDR_VAR 0 11
11932: PUSH
11933: LD_VAR 0 2
11937: PPUSH
11938: LD_INT 22
11940: PUSH
11941: LD_VAR 0 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 21
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: LD_INT 24
11982: PUSH
11983: LD_INT 1000
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 70
12004: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12005: LD_VAR 0 10
12009: NOT
12010: PUSH
12011: LD_VAR 0 7
12015: NOT
12016: AND
12017: PUSH
12018: LD_VAR 0 11
12022: NOT
12023: AND
12024: IFFALSE 12028
// exit ;
12026: GO 12288
// if damageUnits > 0 and sci_list > 0 then
12028: LD_VAR 0 10
12032: PUSH
12033: LD_INT 0
12035: GREATER
12036: PUSH
12037: LD_VAR 0 6
12041: PUSH
12042: LD_INT 0
12044: GREATER
12045: AND
12046: IFFALSE 12079
// for i in damageUnits do
12048: LD_ADDR_VAR 0 8
12052: PUSH
12053: LD_VAR 0 10
12057: PUSH
12058: FOR_IN
12059: IFFALSE 12077
// ComMoveToArea ( i , healArea ) ;
12061: LD_VAR 0 8
12065: PPUSH
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 113
12075: GO 12058
12077: POP
12078: POP
// if unitsToHeal > 0 and sci_list > 0 then
12079: LD_VAR 0 11
12083: PUSH
12084: LD_INT 0
12086: GREATER
12087: PUSH
12088: LD_VAR 0 6
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: AND
12097: IFFALSE 12156
// begin for i in sci_list do
12099: LD_ADDR_VAR 0 8
12103: PUSH
12104: LD_VAR 0 6
12108: PUSH
12109: FOR_IN
12110: IFFALSE 12154
// begin ComExitBuilding ( i ) ;
12112: LD_VAR 0 8
12116: PPUSH
12117: CALL_OW 122
// for j in unitsToHeal do
12121: LD_ADDR_VAR 0 9
12125: PUSH
12126: LD_VAR 0 11
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12150
// AddComHeal ( i , j ) ;
12134: LD_VAR 0 8
12138: PPUSH
12139: LD_VAR 0 9
12143: PPUSH
12144: CALL_OW 188
12148: GO 12131
12150: POP
12151: POP
// end ;
12152: GO 12109
12154: POP
12155: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12156: LD_VAR 0 10
12160: PUSH
12161: LD_INT 0
12163: EQUAL
12164: PUSH
12165: LD_VAR 0 11
12169: PUSH
12170: LD_INT 0
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 7
12179: PUSH
12180: LD_INT 0
12182: GREATER
12183: AND
12184: IFFALSE 12288
// for i in sci_listOutside do
12186: LD_ADDR_VAR 0 8
12190: PUSH
12191: LD_VAR 0 7
12195: PUSH
12196: FOR_IN
12197: IFFALSE 12286
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12199: LD_ADDR_VAR 0 12
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 21
12218: PUSH
12219: LD_INT 3
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 8
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12246: LD_ADDR_VAR 0 13
12250: PUSH
12251: LD_INT 1
12253: PPUSH
12254: LD_VAR 0 12
12258: PPUSH
12259: CALL_OW 12
12263: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
12264: LD_VAR 0 8
12268: PPUSH
12269: LD_VAR 0 12
12273: PUSH
12274: LD_VAR 0 13
12278: ARRAY
12279: PPUSH
12280: CALL_OW 120
// end ;
12284: GO 12196
12286: POP
12287: POP
// end ;
12288: LD_VAR 0 5
12292: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12301: LD_ADDR_VAR 0 6
12305: PUSH
12306: LD_VAR 0 2
12310: PPUSH
12311: CALL_OW 313
12315: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 7
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 24
12345: PUSH
12346: LD_INT 1000
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 3
12355: PUSH
12356: LD_INT 54
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) diff baracksdestr ;
12377: LD_ADDR_VAR 0 4
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 3
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 3
12406: PUSH
12407: LD_INT 24
12409: PUSH
12410: LD_INT 1000
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_INT 2
12436: DIFF
12437: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12438: LD_VAR 0 4
12442: NOT
12443: PUSH
12444: LD_VAR 0 7
12448: NOT
12449: AND
12450: IFFALSE 12454
// exit ;
12452: GO 12645
// if buildings_list > 0 and engineerOkInside then
12454: LD_VAR 0 4
12458: PUSH
12459: LD_INT 0
12461: GREATER
12462: PUSH
12463: LD_VAR 0 6
12467: AND
12468: IFFALSE 12522
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_VAR 0 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 25
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: PUSH
12506: FOR_IN
12507: IFFALSE 12520
// ComExitBuilding ( i ) ;
12509: LD_VAR 0 5
12513: PPUSH
12514: CALL_OW 122
12518: GO 12506
12520: POP
12521: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
12522: LD_VAR 0 4
12526: PUSH
12527: LD_INT 0
12529: GREATER
12530: PUSH
12531: LD_VAR 0 7
12535: PUSH
12536: LD_INT 0
12538: GREATER
12539: AND
12540: IFFALSE 12594
// begin for i in engineerOkOutside do
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: LD_VAR 0 7
12551: PUSH
12552: FOR_IN
12553: IFFALSE 12592
// for j in buildings_list do
12555: LD_ADDR_VAR 0 8
12559: PUSH
12560: LD_VAR 0 4
12564: PUSH
12565: FOR_IN
12566: IFFALSE 12588
// ComRepairBuilding ( i , j [ 1 ] ) ;
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_VAR 0 8
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: PPUSH
12582: CALL_OW 130
12586: GO 12565
12588: POP
12589: POP
12590: GO 12552
12592: POP
12593: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12594: LD_VAR 0 4
12598: PUSH
12599: LD_INT 0
12601: EQUAL
12602: PUSH
12603: LD_VAR 0 7
12607: PUSH
12608: LD_INT 0
12610: GREATER
12611: AND
12612: IFFALSE 12645
// for i in engineerOkOutside do
12614: LD_ADDR_VAR 0 5
12618: PUSH
12619: LD_VAR 0 7
12623: PUSH
12624: FOR_IN
12625: IFFALSE 12643
// ComEnterUnit ( i , building ) ;
12627: LD_VAR 0 5
12631: PPUSH
12632: LD_VAR 0 2
12636: PPUSH
12637: CALL_OW 120
12641: GO 12624
12643: POP
12644: POP
// end ;
12645: LD_VAR 0 3
12649: RET
// export function IntBazooka ( side , targetSide , targetSide2 ) ; var ta , c , i , list , filter ; begin
12650: LD_INT 0
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12658: LD_ADDR_VAR 0 8
12662: PUSH
12663: LD_INT 22
12665: PUSH
12666: LD_VAR 0 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 9
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12694: LD_ADDR_VAR 0 9
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_VAR 0 2
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: LD_INT 21
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// filter := filter ^ FilterAllUnits ( [ [ f_side , targetSide2 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12737: LD_ADDR_VAR 0 9
12741: PUSH
12742: LD_VAR 0 9
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_VAR 0 3
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 69
12784: ADD
12785: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12786: LD_ADDR_VAR 0 6
12790: PUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_INT 3
12796: PPUSH
12797: CALL_OW 12
12801: ST_TO_ADDR
// for i = 1 to list do
12802: LD_ADDR_VAR 0 7
12806: PUSH
12807: DOUBLE
12808: LD_INT 1
12810: DEC
12811: ST_TO_ADDR
12812: LD_VAR 0 8
12816: PUSH
12817: FOR_TO
12818: IFFALSE 13020
// for ta in filter do
12820: LD_ADDR_VAR 0 5
12824: PUSH
12825: LD_VAR 0 9
12829: PUSH
12830: FOR_IN
12831: IFFALSE 13016
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12833: LD_VAR 0 8
12837: PUSH
12838: LD_VAR 0 7
12842: ARRAY
12843: PPUSH
12844: LD_VAR 0 5
12848: PPUSH
12849: CALL_OW 296
12853: PUSH
12854: LD_INT 15
12856: LESSEQUAL
12857: IFFALSE 13014
// begin case c of 1 :
12859: LD_VAR 0 6
12863: PUSH
12864: LD_INT 1
12866: DOUBLE
12867: EQUAL
12868: IFTRUE 12872
12870: GO 12910
12872: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12873: LD_VAR 0 8
12877: PUSH
12878: LD_VAR 0 7
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 5
12888: PPUSH
12889: CALL_OW 250
12893: PPUSH
12894: LD_VAR 0 5
12898: PPUSH
12899: CALL_OW 251
12903: PPUSH
12904: CALL_OW 154
12908: GO 13014
12910: LD_INT 2
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 12982
12918: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12919: LD_VAR 0 8
12923: PUSH
12924: LD_VAR 0 7
12928: ARRAY
12929: PPUSH
12930: LD_VAR 0 5
12934: PPUSH
12935: CALL_OW 250
12939: PUSH
12940: LD_INT 1
12942: NEG
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 12
12951: PLUS
12952: PPUSH
12953: LD_VAR 0 5
12957: PPUSH
12958: CALL_OW 251
12962: PUSH
12963: LD_INT 1
12965: NEG
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 12
12974: PLUS
12975: PPUSH
12976: CALL_OW 153
12980: GO 13014
12982: LD_INT 3
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 13013
12990: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12991: LD_VAR 0 8
12995: PUSH
12996: LD_VAR 0 7
13000: ARRAY
13001: PPUSH
13002: LD_VAR 0 5
13006: PPUSH
13007: CALL_OW 115
13011: GO 13014
13013: POP
// end ; end ;
13014: GO 12830
13016: POP
13017: POP
13018: GO 12817
13020: POP
13021: POP
// end ;
13022: LD_VAR 0 4
13026: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13038: LD_INT 22
13040: PUSH
13041: LD_VAR 0 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PPUSH
13064: CALL_OW 69
13068: PUSH
13069: LD_VAR 0 3
13073: LESSEQUAL
13074: IFFALSE 13186
// for i = 1 to vehCount do
13076: LD_ADDR_VAR 0 10
13080: PUSH
13081: DOUBLE
13082: LD_INT 1
13084: DEC
13085: ST_TO_ADDR
13086: LD_VAR 0 3
13090: PUSH
13091: FOR_TO
13092: IFFALSE 13184
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
13094: LD_ADDR_VAR 0 12
13098: PUSH
13099: LD_VAR 0 5
13103: PUSH
13104: LD_INT 1
13106: PPUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: CALL_OW 12
13116: ARRAY
13117: ST_TO_ADDR
// if randWeapon = 46 then
13118: LD_VAR 0 12
13122: PUSH
13123: LD_INT 46
13125: EQUAL
13126: IFFALSE 13155
// AddComConstruct ( fabric , 24 , engine , 3 , randWeapon ) else
13128: LD_VAR 0 2
13132: PPUSH
13133: LD_INT 24
13135: PPUSH
13136: LD_VAR 0 6
13140: PPUSH
13141: LD_INT 3
13143: PPUSH
13144: LD_VAR 0 12
13148: PPUSH
13149: CALL_OW 185
13153: GO 13182
// AddComConstruct ( fabric , chassis , engine , 3 , randWeapon ) ;
13155: LD_VAR 0 2
13159: PPUSH
13160: LD_VAR 0 8
13164: PPUSH
13165: LD_VAR 0 6
13169: PPUSH
13170: LD_INT 3
13172: PPUSH
13173: LD_VAR 0 12
13177: PPUSH
13178: CALL_OW 185
// end ;
13182: GO 13091
13184: POP
13185: POP
// repeat wait ( 0 0$1 ) ;
13186: LD_INT 35
13188: PPUSH
13189: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
13193: LD_INT 22
13195: PUSH
13196: LD_VAR 0 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 21
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 24
13217: PUSH
13218: LD_INT 250
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: PUSH
13235: LD_VAR 0 3
13239: GREATEREQUAL
13240: IFFALSE 13186
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
13242: LD_INT 22
13244: PUSH
13245: LD_VAR 0 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 24
13266: PUSH
13267: LD_INT 250
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: PPUSH
13279: CALL_OW 69
13283: PUSH
13284: LD_VAR 0 3
13288: GREATEREQUAL
13289: IFFALSE 13632
// begin repeat begin wait ( 0 0$1 ) ;
13291: LD_INT 35
13293: PPUSH
13294: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
13298: LD_INT 22
13300: PUSH
13301: LD_VAR 0 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 24
13322: PUSH
13323: LD_INT 651
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: PUSH
13340: LD_INT 0
13342: GREATER
13343: IFFALSE 13571
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
13345: LD_ADDR_VAR 0 10
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_VAR 0 1
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 24
13374: PUSH
13375: LD_INT 651
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: PUSH
13392: FOR_IN
13393: IFFALSE 13569
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13395: LD_ADDR_VAR 0 16
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_VAR 0 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: PPUSH
13417: LD_VAR 0 10
13421: PPUSH
13422: CALL_OW 74
13426: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 59
13449: PUSH
13450: EMPTY
13451: LIST
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 21
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: PPUSH
13486: CALL_OW 69
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 74
13500: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13501: LD_VAR 0 10
13505: PPUSH
13506: LD_VAR 0 16
13510: PPUSH
13511: CALL_OW 296
13515: PUSH
13516: LD_INT 8
13518: PLUS
13519: PUSH
13520: LD_VAR 0 10
13524: PPUSH
13525: LD_VAR 0 17
13529: PPUSH
13530: CALL_OW 296
13534: LESS
13535: IFFALSE 13553
// begin ComAttackUnit ( i , target1 ) ;
13537: LD_VAR 0 10
13541: PPUSH
13542: LD_VAR 0 16
13546: PPUSH
13547: CALL_OW 115
// end else
13551: GO 13567
// begin ComAttackUnit ( i , target2 ) ;
13553: LD_VAR 0 10
13557: PPUSH
13558: LD_VAR 0 17
13562: PPUSH
13563: CALL_OW 115
// end ; end ;
13567: GO 13392
13569: POP
13570: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
13571: LD_INT 22
13573: PUSH
13574: LD_VAR 0 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 21
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PUSH
13602: LD_INT 0
13604: EQUAL
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_VAR 0 4
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: PUSH
13626: LD_INT 0
13628: EQUAL
13629: OR
13630: IFFALSE 13291
// end ; end ;
13632: LD_VAR 0 9
13636: RET
// export function ReinforcementArrival ( ) ; var i , un , mech , veh ; begin
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
// uc_side = 1 ;
13644: LD_ADDR_OWVAR 20
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// uc_nation = 1 ;
13652: LD_ADDR_OWVAR 21
13656: PUSH
13657: LD_INT 1
13659: ST_TO_ADDR
// for i = 1 to 3 do
13660: LD_ADDR_VAR 0 2
13664: PUSH
13665: DOUBLE
13666: LD_INT 1
13668: DEC
13669: ST_TO_ADDR
13670: LD_INT 3
13672: PUSH
13673: FOR_TO
13674: IFFALSE 13797
// begin PrepareMechanic ( 0 , 5 ) ;
13676: LD_INT 0
13678: PPUSH
13679: LD_INT 5
13681: PPUSH
13682: CALL_OW 383
// mech = CreateHuman ;
13686: LD_ADDR_VAR 0 4
13690: PUSH
13691: CALL_OW 44
13695: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
13696: LD_ADDR_OWVAR 37
13700: PUSH
13701: LD_INT 4
13703: ST_TO_ADDR
// vc_engine := engine_siberite ;
13704: LD_ADDR_OWVAR 39
13708: PUSH
13709: LD_INT 3
13711: ST_TO_ADDR
// vc_weapon := us_double_gun ;
13712: LD_ADDR_OWVAR 40
13716: PUSH
13717: LD_INT 5
13719: ST_TO_ADDR
// vc_control := control_manual ;
13720: LD_ADDR_OWVAR 38
13724: PUSH
13725: LD_INT 1
13727: ST_TO_ADDR
// veh := CreateVehicle ;
13728: LD_ADDR_VAR 0 5
13732: PUSH
13733: CALL_OW 45
13737: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
13738: LD_VAR 0 4
13742: PPUSH
13743: LD_VAR 0 5
13747: PPUSH
13748: CALL_OW 52
// PlaceUnitXYR ( veh , 126 , 134 , 5 , false ) ;
13752: LD_VAR 0 5
13756: PPUSH
13757: LD_INT 126
13759: PPUSH
13760: LD_INT 134
13762: PPUSH
13763: LD_INT 5
13765: PPUSH
13766: LD_INT 0
13768: PPUSH
13769: CALL_OW 50
// ComAgressiveMove ( veh , 128 , 98 ) ;
13773: LD_VAR 0 5
13777: PPUSH
13778: LD_INT 128
13780: PPUSH
13781: LD_INT 98
13783: PPUSH
13784: CALL_OW 114
// wait ( 0 0$2 ) ;
13788: LD_INT 70
13790: PPUSH
13791: CALL_OW 67
// end ;
13795: GO 13673
13797: POP
13798: POP
// for i = 1 to 2 do
13799: LD_ADDR_VAR 0 2
13803: PUSH
13804: DOUBLE
13805: LD_INT 1
13807: DEC
13808: ST_TO_ADDR
13809: LD_INT 2
13811: PUSH
13812: FOR_TO
13813: IFFALSE 13902
// begin uc_side = 1 ;
13815: LD_ADDR_OWVAR 20
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// uc_nation = 1 ;
13823: LD_ADDR_OWVAR 21
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// hc_name =  ;
13831: LD_ADDR_OWVAR 26
13835: PUSH
13836: LD_STRING 
13838: ST_TO_ADDR
// hc_gallery =  ;
13839: LD_ADDR_OWVAR 33
13843: PUSH
13844: LD_STRING 
13846: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 5 ) ;
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 5
13855: PPUSH
13856: CALL_OW 380
// un = CreateHuman ;
13860: LD_ADDR_VAR 0 3
13864: PUSH
13865: CALL_OW 44
13869: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_S , false ) ;
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_INT 0
13880: PPUSH
13881: CALL_OW 49
// ComAgressiveMove ( un , 128 , 98 ) ;
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 128
13892: PPUSH
13893: LD_INT 98
13895: PPUSH
13896: CALL_OW 114
// end ;
13900: GO 13812
13902: POP
13903: POP
// for i = 1 to 2 do
13904: LD_ADDR_VAR 0 2
13908: PUSH
13909: DOUBLE
13910: LD_INT 1
13912: DEC
13913: ST_TO_ADDR
13914: LD_INT 2
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14041
// begin PrepareMechanic ( 0 , 5 ) ;
13920: LD_INT 0
13922: PPUSH
13923: LD_INT 5
13925: PPUSH
13926: CALL_OW 383
// mech = CreateHuman ;
13930: LD_ADDR_VAR 0 4
13934: PUSH
13935: CALL_OW 44
13939: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
13940: LD_ADDR_OWVAR 37
13944: PUSH
13945: LD_INT 4
13947: ST_TO_ADDR
// vc_engine := engine_siberite ;
13948: LD_ADDR_OWVAR 39
13952: PUSH
13953: LD_INT 3
13955: ST_TO_ADDR
// vc_weapon := us_double_gun ;
13956: LD_ADDR_OWVAR 40
13960: PUSH
13961: LD_INT 5
13963: ST_TO_ADDR
// vc_control := control_manual ;
13964: LD_ADDR_OWVAR 38
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// veh := CreateVehicle ;
13972: LD_ADDR_VAR 0 5
13976: PUSH
13977: CALL_OW 45
13981: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
13982: LD_VAR 0 4
13986: PPUSH
13987: LD_VAR 0 5
13991: PPUSH
13992: CALL_OW 52
// PlaceUnitXYR ( veh , 51 , 95 , 1 , false ) ;
13996: LD_VAR 0 5
14000: PPUSH
14001: LD_INT 51
14003: PPUSH
14004: LD_INT 95
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: LD_INT 0
14012: PPUSH
14013: CALL_OW 50
// ComAgressiveMove ( veh , 75 , 80 ) ;
14017: LD_VAR 0 5
14021: PPUSH
14022: LD_INT 75
14024: PPUSH
14025: LD_INT 80
14027: PPUSH
14028: CALL_OW 114
// wait ( 0 0$2 ) ;
14032: LD_INT 70
14034: PPUSH
14035: CALL_OW 67
// end ;
14039: GO 13917
14041: POP
14042: POP
// for i = 1 to 3 do
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: DOUBLE
14049: LD_INT 1
14051: DEC
14052: ST_TO_ADDR
14053: LD_INT 3
14055: PUSH
14056: FOR_TO
14057: IFFALSE 14146
// begin uc_side = 1 ;
14059: LD_ADDR_OWVAR 20
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// uc_nation = 1 ;
14067: LD_ADDR_OWVAR 21
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// hc_name =  ;
14075: LD_ADDR_OWVAR 26
14079: PUSH
14080: LD_STRING 
14082: ST_TO_ADDR
// hc_gallery =  ;
14083: LD_ADDR_OWVAR 33
14087: PUSH
14088: LD_STRING 
14090: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 5 ) ;
14091: LD_INT 1
14093: PPUSH
14094: LD_INT 1
14096: PPUSH
14097: LD_INT 5
14099: PPUSH
14100: CALL_OW 380
// un = CreateHuman ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: CALL_OW 44
14113: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_W , false ) ;
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_INT 2
14121: PPUSH
14122: LD_INT 0
14124: PPUSH
14125: CALL_OW 49
// ComAgressiveMove ( un , 75 , 80 ) ;
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 75
14136: PPUSH
14137: LD_INT 80
14139: PPUSH
14140: CALL_OW 114
// end ;
14144: GO 14056
14146: POP
14147: POP
// PlaceUnitArea ( Miller , AM_SpawnZone_W , false ) ;
14148: LD_EXP 25
14152: PPUSH
14153: LD_INT 2
14155: PPUSH
14156: LD_INT 0
14158: PPUSH
14159: CALL_OW 49
// ComAgressiveMove ( Miller , 75 , 80 ) ;
14163: LD_EXP 25
14167: PPUSH
14168: LD_INT 75
14170: PPUSH
14171: LD_INT 80
14173: PPUSH
14174: CALL_OW 114
// end ;
14178: LD_VAR 0 1
14182: RET
// export function SaySex ( unit , dialogM , dialogF ) ; begin
14183: LD_INT 0
14185: PPUSH
// if not unit then
14186: LD_VAR 0 1
14190: NOT
14191: IFFALSE 14195
// exit ;
14193: GO 14229
// Say ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
14195: LD_VAR 0 1
14199: PPUSH
14200: LD_VAR 0 2
14204: PUSH
14205: LD_VAR 0 3
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 258
14223: ARRAY
14224: PPUSH
14225: CALL_OW 88
// end ;
14229: LD_VAR 0 4
14233: RET
// export function SayRadioSex ( unit , dialogM , dialogF ) ; begin
14234: LD_INT 0
14236: PPUSH
// if not unit then
14237: LD_VAR 0 1
14241: NOT
14242: IFFALSE 14246
// exit ;
14244: GO 14280
// SayRadio ( unit , [ dialogM , dialogF ] [ GetSex ( unit ) ] ) ;
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_VAR 0 2
14255: PUSH
14256: LD_VAR 0 3
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 258
14274: ARRAY
14275: PPUSH
14276: CALL_OW 94
// end ;
14280: LD_VAR 0 4
14284: RET
// every 0 0$1 trigger MissionBegin do
14285: LD_EXP 1
14289: IFFALSE 14390
14291: GO 14293
14293: DISABLE
// begin wait ( Rand ( 1 1$0 , 1 1$30 ) ) ;
14294: LD_INT 2100
14296: PPUSH
14297: LD_INT 3150
14299: PPUSH
14300: CALL_OW 12
14304: PPUSH
14305: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
14309: LD_INT 2
14311: PPUSH
14312: LD_INT 5
14314: PPUSH
14315: CALL_OW 12
14319: PPUSH
14320: LD_INT 17
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: CALL_OW 55
// case Rand ( 1 , 2 ) of 1 :
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 12
14340: PUSH
14341: LD_INT 1
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14388
14349: POP
// begin wait ( Rand ( 0 0$15 , 0 0$30 ) ) ;
14350: LD_INT 525
14352: PPUSH
14353: LD_INT 1050
14355: PPUSH
14356: CALL_OW 12
14360: PPUSH
14361: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
14365: LD_INT 2
14367: PPUSH
14368: LD_INT 5
14370: PPUSH
14371: CALL_OW 12
14375: PPUSH
14376: LD_INT 17
14378: PPUSH
14379: LD_INT 1
14381: PPUSH
14382: CALL_OW 55
// end ; end ;
14386: GO 14389
14388: POP
// enable ;
14389: ENABLE
// end ; end_of_file
14390: END
// on UnitDestroyed ( un ) do begin if un = Simone then
14391: LD_VAR 0 1
14395: PUSH
14396: LD_EXP 19
14400: EQUAL
14401: IFFALSE 14429
// begin ExclusiveOn ;
14403: CALL_OW 4
// Wait ( 0 0$2 ) ;
14407: LD_INT 70
14409: PPUSH
14410: CALL_OW 67
// YouLost ( Simone ) ;
14414: LD_STRING Simone
14416: PPUSH
14417: CALL_OW 104
// ExclusiveOff ;
14421: CALL_OW 5
// exit ;
14425: GO 14558
// end else
14427: GO 14549
// if un = Kathryn then
14429: LD_VAR 0 1
14433: PUSH
14434: LD_EXP 20
14438: EQUAL
14439: IFFALSE 14467
// begin ExclusiveOn ;
14441: CALL_OW 4
// Wait ( 0 0$2 ) ;
14445: LD_INT 70
14447: PPUSH
14448: CALL_OW 67
// YouLost ( Kathryn ) ;
14452: LD_STRING Kathryn
14454: PPUSH
14455: CALL_OW 104
// ExclusiveOff ;
14459: CALL_OW 5
// exit ;
14463: GO 14558
// end else
14465: GO 14549
// if un = Miller then
14467: LD_VAR 0 1
14471: PUSH
14472: LD_EXP 25
14476: EQUAL
14477: IFFALSE 14505
// begin ExclusiveOn ;
14479: CALL_OW 4
// Wait ( 0 0$2 ) ;
14483: LD_INT 70
14485: PPUSH
14486: CALL_OW 67
// YouLost ( Miller ) ;
14490: LD_STRING Miller
14492: PPUSH
14493: CALL_OW 104
// ExclusiveOff ;
14497: CALL_OW 5
// exit ;
14501: GO 14558
// end else
14503: GO 14549
// if un = base1 or un = base2 then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 3
14512: EQUAL
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: LD_INT 1
14521: EQUAL
14522: OR
14523: IFFALSE 14549
// begin ExclusiveOn ;
14525: CALL_OW 4
// Wait ( 0 0$2 ) ;
14529: LD_INT 70
14531: PPUSH
14532: CALL_OW 67
// YouLost ( Bases ) ;
14536: LD_STRING Bases
14538: PPUSH
14539: CALL_OW 104
// ExclusiveOff ;
14543: CALL_OW 5
// exit ;
14547: GO 14558
// end ; MCE_UnitDestroyed ( un ) ;
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL 76693 0 1
// end ;
14558: PPOPN 1
14560: END
// on UnitGoesToRed ( un ) do begin if un = baracksdestr then
14561: LD_VAR 0 1
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: IFFALSE 14590
// begin ComEnterUnit ( UnitsInside ( un ) , AMWesternArmor ) ;
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 313
14580: PPUSH
14581: LD_EXP 5
14585: PPUSH
14586: CALL_OW 120
// end ; end ;
14590: PPOPN 1
14592: END
// every 0 0$1 trigger LaserTanks < 2 and game_start do
14593: LD_EXP 6
14597: PUSH
14598: LD_INT 2
14600: LESS
14601: PUSH
14602: LD_EXP 18
14606: AND
14607: IFFALSE 14634
14609: GO 14611
14611: DISABLE
// begin ExclusiveOn ;
14612: CALL_OW 4
// Wait ( 0 0$2 ) ;
14616: LD_INT 70
14618: PPUSH
14619: CALL_OW 67
// YouLost ( Vehicles ) ;
14623: LD_STRING Vehicles
14625: PPUSH
14626: CALL_OW 104
// ExclusiveOff ;
14630: CALL_OW 5
// end ;
14634: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
14635: LD_VAR 0 1
14639: PPUSH
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL 78560 0 2
// end ;
14649: PPOPN 2
14651: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL 77642 0 1
// end ;
14661: PPOPN 1
14663: END
// on BuildingComplete ( building ) do var i , un ;
14664: LD_INT 0
14666: PPUSH
14667: PPUSH
// begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 1 then
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 266
14677: PUSH
14678: LD_INT 4
14680: EQUAL
14681: PUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 255
14691: PUSH
14692: LD_INT 1
14694: EQUAL
14695: AND
14696: IFFALSE 14814
// begin AMWesternArmor = building ;
14698: LD_ADDR_EXP 5
14702: PUSH
14703: LD_VAR 0 1
14707: ST_TO_ADDR
// for i = 1 to 2 do
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: DOUBLE
14714: LD_INT 1
14716: DEC
14717: ST_TO_ADDR
14718: LD_INT 2
14720: PUSH
14721: FOR_TO
14722: IFFALSE 14810
// begin uc_side = 1 ;
14724: LD_ADDR_OWVAR 20
14728: PUSH
14729: LD_INT 1
14731: ST_TO_ADDR
// uc_nation = 1 ;
14732: LD_ADDR_OWVAR 21
14736: PUSH
14737: LD_INT 1
14739: ST_TO_ADDR
// hc_name =  ;
14740: LD_ADDR_OWVAR 26
14744: PUSH
14745: LD_STRING 
14747: ST_TO_ADDR
// hc_gallery =  ;
14748: LD_ADDR_OWVAR 33
14752: PUSH
14753: LD_STRING 
14755: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
14756: LD_INT 1
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_INT 6
14764: PPUSH
14765: CALL_OW 380
// un = CreateHuman ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: CALL_OW 44
14778: ST_TO_ADDR
// PlaceUnitArea ( un , AM_SpawnZone_W , false ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 2
14786: PPUSH
14787: LD_INT 0
14789: PPUSH
14790: CALL_OW 49
// ComEnterUnit ( un , building ) ;
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 120
// end ;
14808: GO 14721
14810: POP
14811: POP
// end else
14812: GO 14904
// if ( GetSide ( building ) = 6 ) and ( GetBType ( building ) = b_depot ) then
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 255
14823: PUSH
14824: LD_INT 6
14826: EQUAL
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 0
14840: EQUAL
14841: AND
14842: IFFALSE 14904
// begin SetResourceType ( GetBase ( building ) , mat_cans , 500 ) ;
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 274
14853: PPUSH
14854: LD_INT 1
14856: PPUSH
14857: LD_INT 500
14859: PPUSH
14860: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_oil , 100 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 274
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: LD_INT 100
14879: PPUSH
14880: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_siberit , 50 ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 274
14893: PPUSH
14894: LD_INT 3
14896: PPUSH
14897: LD_INT 50
14899: PPUSH
14900: CALL_OW 277
// end ; MCE_BuildingComplete ( building ) ;
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL 77876 0 1
// end ;
14913: PPOPN 3
14915: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 2
14925: PPUSH
14926: CALL 76405 0 2
// end ;
14930: PPOPN 2
14932: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_VAR 0 2
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_VAR 0 4
14952: PPUSH
14953: LD_VAR 0 5
14957: PPUSH
14958: CALL 76032 0 5
// end ;
14962: PPOPN 5
14964: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
14965: LD_VAR 0 1
14969: PPUSH
14970: LD_VAR 0 2
14974: PPUSH
14975: CALL 75720 0 2
// end ;
14979: PPOPN 2
14981: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_VAR 0 4
15001: PPUSH
15002: CALL 75565 0 4
// end ;
15006: PPOPN 4
15008: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: LD_VAR 0 3
15023: PPUSH
15024: CALL 75347 0 3
// end ;
15028: PPOPN 3
15030: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
15031: LD_VAR 0 1
15035: PPUSH
15036: LD_VAR 0 2
15040: PPUSH
15041: CALL 75239 0 2
// end ;
15045: PPOPN 2
15047: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_VAR 0 2
15057: PPUSH
15058: CALL 78814 0 2
// end ;
15062: PPOPN 2
15064: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_VAR 0 4
15084: PPUSH
15085: CALL 79023 0 4
// end ;
15089: PPOPN 4
15091: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_VAR 0 2
15101: PPUSH
15102: CALL 75055 0 2
// end ;
15106: PPOPN 2
15108: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 7 and side2 = 1 ) or ( side1 = 1 and side2 = 7 ) then
15109: LD_VAR 0 1
15113: PUSH
15114: LD_INT 7
15116: EQUAL
15117: PUSH
15118: LD_VAR 0 2
15122: PUSH
15123: LD_INT 1
15125: EQUAL
15126: AND
15127: PUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_INT 1
15135: EQUAL
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: LD_INT 7
15144: EQUAL
15145: AND
15146: OR
15147: IFFALSE 15186
// begin ExclusiveOn ;
15149: CALL_OW 4
// DialogueOn ;
15153: CALL_OW 6
// Say ( Barnes , DFriendlyFire-Barnes-1 ) ;
15157: LD_EXP 26
15161: PPUSH
15162: LD_STRING DFriendlyFire-Barnes-1
15164: PPUSH
15165: CALL_OW 88
// DialogueOff ;
15169: CALL_OW 7
// YouLost ( FriendlyFire ) ;
15173: LD_STRING FriendlyFire
15175: PPUSH
15176: CALL_OW 104
// ExclusiveOff ;
15180: CALL_OW 5
// exit ;
15184: GO 15186
// end ; end ; end_of_file
15186: PPOPN 2
15188: END
// export function Prepare_RU2 ; var i , un ; begin
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
15193: PPUSH
// uc_side = 6 ;
15194: LD_ADDR_OWVAR 20
15198: PUSH
15199: LD_INT 6
15201: ST_TO_ADDR
// uc_nation = 3 ;
15202: LD_ADDR_OWVAR 21
15206: PUSH
15207: LD_INT 3
15209: ST_TO_ADDR
// for i = 1 to 20 do
15210: LD_ADDR_VAR 0 2
15214: PUSH
15215: DOUBLE
15216: LD_INT 1
15218: DEC
15219: ST_TO_ADDR
15220: LD_INT 20
15222: PUSH
15223: FOR_TO
15224: IFFALSE 15325
// begin uc_side = 6 ;
15226: LD_ADDR_OWVAR 20
15230: PUSH
15231: LD_INT 6
15233: ST_TO_ADDR
// uc_nation = 3 ;
15234: LD_ADDR_OWVAR 21
15238: PUSH
15239: LD_INT 3
15241: ST_TO_ADDR
// hc_gallery =  ;
15242: LD_ADDR_OWVAR 33
15246: PUSH
15247: LD_STRING 
15249: ST_TO_ADDR
// hc_name =  ;
15250: LD_ADDR_OWVAR 26
15254: PUSH
15255: LD_STRING 
15257: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15258: LD_INT 0
15260: PPUSH
15261: LD_INT 1
15263: PPUSH
15264: LD_EXP 37
15268: PPUSH
15269: LD_EXP 38
15273: PPUSH
15274: CALL_OW 12
15278: PPUSH
15279: CALL_OW 380
// un = CreateHuman ;
15283: LD_ADDR_VAR 0 3
15287: PUSH
15288: CALL_OW 44
15292: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 3
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 49
// ComAgressiveMove ( un , 45 , 28 ) ;
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 45
15315: PPUSH
15316: LD_INT 28
15318: PPUSH
15319: CALL_OW 114
// end ;
15323: GO 15223
15325: POP
15326: POP
// for i = 1 to 6 do
15327: LD_ADDR_VAR 0 2
15331: PUSH
15332: DOUBLE
15333: LD_INT 1
15335: DEC
15336: ST_TO_ADDR
15337: LD_INT 6
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15427
// begin uc_side = 6 ;
15343: LD_ADDR_OWVAR 20
15347: PUSH
15348: LD_INT 6
15350: ST_TO_ADDR
// uc_nation = 3 ;
15351: LD_ADDR_OWVAR 21
15355: PUSH
15356: LD_INT 3
15358: ST_TO_ADDR
// hc_gallery =  ;
15359: LD_ADDR_OWVAR 33
15363: PUSH
15364: LD_STRING 
15366: ST_TO_ADDR
// hc_name =  ;
15367: LD_ADDR_OWVAR 26
15371: PUSH
15372: LD_STRING 
15374: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15375: LD_INT 0
15377: PPUSH
15378: LD_INT 2
15380: PPUSH
15381: LD_EXP 37
15385: PPUSH
15386: LD_EXP 38
15390: PPUSH
15391: CALL_OW 12
15395: PPUSH
15396: CALL_OW 380
// un = CreateHuman ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: CALL_OW 44
15409: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_INT 3
15417: PPUSH
15418: LD_INT 0
15420: PPUSH
15421: CALL_OW 49
// end ;
15425: GO 15340
15427: POP
15428: POP
// for i = 1 to 6 do
15429: LD_ADDR_VAR 0 2
15433: PUSH
15434: DOUBLE
15435: LD_INT 1
15437: DEC
15438: ST_TO_ADDR
15439: LD_INT 6
15441: PUSH
15442: FOR_TO
15443: IFFALSE 15529
// begin uc_side = 6 ;
15445: LD_ADDR_OWVAR 20
15449: PUSH
15450: LD_INT 6
15452: ST_TO_ADDR
// uc_nation = 3 ;
15453: LD_ADDR_OWVAR 21
15457: PUSH
15458: LD_INT 3
15460: ST_TO_ADDR
// hc_gallery =  ;
15461: LD_ADDR_OWVAR 33
15465: PUSH
15466: LD_STRING 
15468: ST_TO_ADDR
// hc_name =  ;
15469: LD_ADDR_OWVAR 26
15473: PUSH
15474: LD_STRING 
15476: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15477: LD_INT 0
15479: PPUSH
15480: LD_INT 3
15482: PPUSH
15483: LD_EXP 37
15487: PPUSH
15488: LD_EXP 38
15492: PPUSH
15493: CALL_OW 12
15497: PPUSH
15498: CALL_OW 380
// un = CreateHuman ;
15502: LD_ADDR_VAR 0 3
15506: PUSH
15507: CALL_OW 44
15511: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15512: LD_VAR 0 3
15516: PPUSH
15517: LD_INT 3
15519: PPUSH
15520: LD_INT 0
15522: PPUSH
15523: CALL_OW 49
// end ;
15527: GO 15442
15529: POP
15530: POP
// for i = 1 to 4 do
15531: LD_ADDR_VAR 0 2
15535: PUSH
15536: DOUBLE
15537: LD_INT 1
15539: DEC
15540: ST_TO_ADDR
15541: LD_INT 4
15543: PUSH
15544: FOR_TO
15545: IFFALSE 15631
// begin uc_side = 6 ;
15547: LD_ADDR_OWVAR 20
15551: PUSH
15552: LD_INT 6
15554: ST_TO_ADDR
// uc_nation = 3 ;
15555: LD_ADDR_OWVAR 21
15559: PUSH
15560: LD_INT 3
15562: ST_TO_ADDR
// hc_gallery =  ;
15563: LD_ADDR_OWVAR 33
15567: PUSH
15568: LD_STRING 
15570: ST_TO_ADDR
// hc_name =  ;
15571: LD_ADDR_OWVAR 26
15575: PUSH
15576: LD_STRING 
15578: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15579: LD_INT 0
15581: PPUSH
15582: LD_INT 4
15584: PPUSH
15585: LD_EXP 37
15589: PPUSH
15590: LD_EXP 38
15594: PPUSH
15595: CALL_OW 12
15599: PPUSH
15600: CALL_OW 380
// un = CreateHuman ;
15604: LD_ADDR_VAR 0 3
15608: PUSH
15609: CALL_OW 44
15613: ST_TO_ADDR
// PlaceUnitArea ( un , RU_SpawnZone_N , false ) ;
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 3
15621: PPUSH
15622: LD_INT 0
15624: PPUSH
15625: CALL_OW 49
// end ;
15629: GO 15544
15631: POP
15632: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
15633: LD_ADDR_EXP 44
15637: PUSH
15638: LD_EXP 44
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: LD_INT 22
15648: PUSH
15649: LD_INT 6
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 21
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PPUSH
15670: CALL_OW 69
15674: PPUSH
15675: CALL_OW 1
15679: ST_TO_ADDR
// MC_Start ;
15680: CALL 58767 0 0
// end ; end_of_file
15684: LD_VAR 0 1
15688: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15689: LD_INT 0
15691: PPUSH
15692: PPUSH
// if exist_mode then
15693: LD_VAR 0 2
15697: IFFALSE 15722
// unit := CreateCharacter ( prefix & ident ) else
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 3
15708: PUSH
15709: LD_VAR 0 1
15713: STR
15714: PPUSH
15715: CALL_OW 34
15719: ST_TO_ADDR
15720: GO 15737
// unit := NewCharacter ( ident ) ;
15722: LD_ADDR_VAR 0 5
15726: PUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 25
15736: ST_TO_ADDR
// result := unit ;
15737: LD_ADDR_VAR 0 4
15741: PUSH
15742: LD_VAR 0 5
15746: ST_TO_ADDR
// end ;
15747: LD_VAR 0 4
15751: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
// if not side or not nation then
15756: LD_VAR 0 1
15760: NOT
15761: PUSH
15762: LD_VAR 0 2
15766: NOT
15767: OR
15768: IFFALSE 15772
// exit ;
15770: GO 16408
// case nation of nation_american :
15772: LD_VAR 0 2
15776: PUSH
15777: LD_INT 1
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 15955
15785: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
15786: LD_ADDR_VAR 0 4
15790: PUSH
15791: LD_INT 35
15793: PUSH
15794: LD_INT 45
15796: PUSH
15797: LD_INT 46
15799: PUSH
15800: LD_INT 47
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: LD_INT 6
15811: PUSH
15812: LD_INT 15
15814: PUSH
15815: LD_INT 16
15817: PUSH
15818: LD_INT 7
15820: PUSH
15821: LD_INT 12
15823: PUSH
15824: LD_INT 13
15826: PUSH
15827: LD_INT 10
15829: PUSH
15830: LD_INT 14
15832: PUSH
15833: LD_INT 20
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 22
15841: PUSH
15842: LD_INT 25
15844: PUSH
15845: LD_INT 32
15847: PUSH
15848: LD_INT 27
15850: PUSH
15851: LD_INT 36
15853: PUSH
15854: LD_INT 69
15856: PUSH
15857: LD_INT 39
15859: PUSH
15860: LD_INT 34
15862: PUSH
15863: LD_INT 40
15865: PUSH
15866: LD_INT 48
15868: PUSH
15869: LD_INT 49
15871: PUSH
15872: LD_INT 50
15874: PUSH
15875: LD_INT 51
15877: PUSH
15878: LD_INT 52
15880: PUSH
15881: LD_INT 53
15883: PUSH
15884: LD_INT 54
15886: PUSH
15887: LD_INT 55
15889: PUSH
15890: LD_INT 56
15892: PUSH
15893: LD_INT 57
15895: PUSH
15896: LD_INT 58
15898: PUSH
15899: LD_INT 59
15901: PUSH
15902: LD_INT 60
15904: PUSH
15905: LD_INT 61
15907: PUSH
15908: LD_INT 62
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
15953: GO 16332
15955: LD_INT 2
15957: DOUBLE
15958: EQUAL
15959: IFTRUE 15963
15961: GO 16141
15963: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
15964: LD_ADDR_VAR 0 4
15968: PUSH
15969: LD_INT 35
15971: PUSH
15972: LD_INT 45
15974: PUSH
15975: LD_INT 46
15977: PUSH
15978: LD_INT 47
15980: PUSH
15981: LD_INT 70
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 11
15989: PUSH
15990: LD_INT 3
15992: PUSH
15993: LD_INT 4
15995: PUSH
15996: LD_INT 5
15998: PUSH
15999: LD_INT 6
16001: PUSH
16002: LD_INT 15
16004: PUSH
16005: LD_INT 18
16007: PUSH
16008: LD_INT 7
16010: PUSH
16011: LD_INT 17
16013: PUSH
16014: LD_INT 8
16016: PUSH
16017: LD_INT 20
16019: PUSH
16020: LD_INT 21
16022: PUSH
16023: LD_INT 22
16025: PUSH
16026: LD_INT 72
16028: PUSH
16029: LD_INT 26
16031: PUSH
16032: LD_INT 69
16034: PUSH
16035: LD_INT 39
16037: PUSH
16038: LD_INT 40
16040: PUSH
16041: LD_INT 41
16043: PUSH
16044: LD_INT 42
16046: PUSH
16047: LD_INT 43
16049: PUSH
16050: LD_INT 48
16052: PUSH
16053: LD_INT 49
16055: PUSH
16056: LD_INT 50
16058: PUSH
16059: LD_INT 51
16061: PUSH
16062: LD_INT 52
16064: PUSH
16065: LD_INT 53
16067: PUSH
16068: LD_INT 54
16070: PUSH
16071: LD_INT 55
16073: PUSH
16074: LD_INT 56
16076: PUSH
16077: LD_INT 60
16079: PUSH
16080: LD_INT 61
16082: PUSH
16083: LD_INT 62
16085: PUSH
16086: LD_INT 66
16088: PUSH
16089: LD_INT 67
16091: PUSH
16092: LD_INT 68
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
16139: GO 16332
16141: LD_INT 3
16143: DOUBLE
16144: EQUAL
16145: IFTRUE 16149
16147: GO 16331
16149: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: LD_INT 46
16157: PUSH
16158: LD_INT 47
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: LD_INT 11
16169: PUSH
16170: LD_INT 9
16172: PUSH
16173: LD_INT 20
16175: PUSH
16176: LD_INT 19
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 24
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 25
16190: PUSH
16191: LD_INT 28
16193: PUSH
16194: LD_INT 29
16196: PUSH
16197: LD_INT 30
16199: PUSH
16200: LD_INT 31
16202: PUSH
16203: LD_INT 37
16205: PUSH
16206: LD_INT 38
16208: PUSH
16209: LD_INT 32
16211: PUSH
16212: LD_INT 27
16214: PUSH
16215: LD_INT 33
16217: PUSH
16218: LD_INT 69
16220: PUSH
16221: LD_INT 39
16223: PUSH
16224: LD_INT 34
16226: PUSH
16227: LD_INT 40
16229: PUSH
16230: LD_INT 71
16232: PUSH
16233: LD_INT 23
16235: PUSH
16236: LD_INT 44
16238: PUSH
16239: LD_INT 48
16241: PUSH
16242: LD_INT 49
16244: PUSH
16245: LD_INT 50
16247: PUSH
16248: LD_INT 51
16250: PUSH
16251: LD_INT 52
16253: PUSH
16254: LD_INT 53
16256: PUSH
16257: LD_INT 54
16259: PUSH
16260: LD_INT 55
16262: PUSH
16263: LD_INT 56
16265: PUSH
16266: LD_INT 57
16268: PUSH
16269: LD_INT 58
16271: PUSH
16272: LD_INT 59
16274: PUSH
16275: LD_INT 63
16277: PUSH
16278: LD_INT 64
16280: PUSH
16281: LD_INT 65
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: ST_TO_ADDR
16329: GO 16332
16331: POP
// if state > - 1 and state < 3 then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 1
16339: NEG
16340: GREATER
16341: PUSH
16342: LD_VAR 0 3
16346: PUSH
16347: LD_INT 3
16349: LESS
16350: AND
16351: IFFALSE 16408
// for i in result do
16353: LD_ADDR_VAR 0 5
16357: PUSH
16358: LD_VAR 0 4
16362: PUSH
16363: FOR_IN
16364: IFFALSE 16406
// if GetTech ( i , side ) <> state then
16366: LD_VAR 0 5
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 321
16380: PUSH
16381: LD_VAR 0 3
16385: NONEQUAL
16386: IFFALSE 16404
// result := result diff i ;
16388: LD_ADDR_VAR 0 4
16392: PUSH
16393: LD_VAR 0 4
16397: PUSH
16398: LD_VAR 0 5
16402: DIFF
16403: ST_TO_ADDR
16404: GO 16363
16406: POP
16407: POP
// end ;
16408: LD_VAR 0 4
16412: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// result := true ;
16418: LD_ADDR_VAR 0 3
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16426: LD_ADDR_VAR 0 5
16430: PUSH
16431: LD_VAR 0 2
16435: PPUSH
16436: CALL_OW 480
16440: ST_TO_ADDR
// if not tmp then
16441: LD_VAR 0 5
16445: NOT
16446: IFFALSE 16450
// exit ;
16448: GO 16499
// for i in tmp do
16450: LD_ADDR_VAR 0 4
16454: PUSH
16455: LD_VAR 0 5
16459: PUSH
16460: FOR_IN
16461: IFFALSE 16497
// if GetTech ( i , side ) <> state_researched then
16463: LD_VAR 0 4
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 321
16477: PUSH
16478: LD_INT 2
16480: NONEQUAL
16481: IFFALSE 16495
// begin result := false ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// exit ;
16491: POP
16492: POP
16493: GO 16499
// end ;
16495: GO 16460
16497: POP
16498: POP
// end ;
16499: LD_VAR 0 3
16503: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16504: LD_INT 0
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16519: LD_VAR 0 1
16523: NOT
16524: PUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 257
16534: PUSH
16535: LD_INT 9
16537: NONEQUAL
16538: OR
16539: IFFALSE 16543
// exit ;
16541: GO 17116
// side := GetSide ( unit ) ;
16543: LD_ADDR_VAR 0 9
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 255
16557: ST_TO_ADDR
// tech_space := tech_spacanom ;
16558: LD_ADDR_VAR 0 12
16562: PUSH
16563: LD_INT 29
16565: ST_TO_ADDR
// tech_time := tech_taurad ;
16566: LD_ADDR_VAR 0 13
16570: PUSH
16571: LD_INT 28
16573: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16574: LD_ADDR_VAR 0 11
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 310
16588: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16589: LD_VAR 0 11
16593: PPUSH
16594: CALL_OW 247
16598: PUSH
16599: LD_INT 2
16601: EQUAL
16602: IFFALSE 16606
// exit ;
16604: GO 17116
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16606: LD_ADDR_VAR 0 8
16610: PUSH
16611: LD_INT 81
16613: PUSH
16614: LD_VAR 0 9
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 3
16625: PUSH
16626: LD_INT 21
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 69
16648: ST_TO_ADDR
// if not tmp then
16649: LD_VAR 0 8
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 17116
// if in_unit then
16658: LD_VAR 0 11
16662: IFFALSE 16686
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16664: LD_ADDR_VAR 0 10
16668: PUSH
16669: LD_VAR 0 8
16673: PPUSH
16674: LD_VAR 0 11
16678: PPUSH
16679: CALL_OW 74
16683: ST_TO_ADDR
16684: GO 16706
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16686: LD_ADDR_VAR 0 10
16690: PUSH
16691: LD_VAR 0 8
16695: PPUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 74
16705: ST_TO_ADDR
// if not enemy then
16706: LD_VAR 0 10
16710: NOT
16711: IFFALSE 16715
// exit ;
16713: GO 17116
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16715: LD_VAR 0 11
16719: PUSH
16720: LD_VAR 0 11
16724: PPUSH
16725: LD_VAR 0 10
16729: PPUSH
16730: CALL_OW 296
16734: PUSH
16735: LD_INT 13
16737: GREATER
16738: AND
16739: PUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: LD_VAR 0 10
16749: PPUSH
16750: CALL_OW 296
16754: PUSH
16755: LD_INT 12
16757: GREATER
16758: OR
16759: IFFALSE 16763
// exit ;
16761: GO 17116
// missile := [ 1 ] ;
16763: LD_ADDR_VAR 0 14
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16774: LD_VAR 0 9
16778: PPUSH
16779: LD_VAR 0 12
16783: PPUSH
16784: CALL_OW 325
16788: IFFALSE 16817
// missile := Insert ( missile , missile + 1 , 2 ) ;
16790: LD_ADDR_VAR 0 14
16794: PUSH
16795: LD_VAR 0 14
16799: PPUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: PLUS
16808: PPUSH
16809: LD_INT 2
16811: PPUSH
16812: CALL_OW 2
16816: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16817: LD_VAR 0 9
16821: PPUSH
16822: LD_VAR 0 13
16826: PPUSH
16827: CALL_OW 325
16831: PUSH
16832: LD_VAR 0 10
16836: PPUSH
16837: CALL_OW 255
16841: PPUSH
16842: LD_VAR 0 13
16846: PPUSH
16847: CALL_OW 325
16851: NOT
16852: AND
16853: IFFALSE 16882
// missile := Insert ( missile , missile + 1 , 3 ) ;
16855: LD_ADDR_VAR 0 14
16859: PUSH
16860: LD_VAR 0 14
16864: PPUSH
16865: LD_VAR 0 14
16869: PUSH
16870: LD_INT 1
16872: PLUS
16873: PPUSH
16874: LD_INT 3
16876: PPUSH
16877: CALL_OW 2
16881: ST_TO_ADDR
// if missile < 2 then
16882: LD_VAR 0 14
16886: PUSH
16887: LD_INT 2
16889: LESS
16890: IFFALSE 16894
// exit ;
16892: GO 17116
// x := GetX ( enemy ) ;
16894: LD_ADDR_VAR 0 4
16898: PUSH
16899: LD_VAR 0 10
16903: PPUSH
16904: CALL_OW 250
16908: ST_TO_ADDR
// y := GetY ( enemy ) ;
16909: LD_ADDR_VAR 0 5
16913: PUSH
16914: LD_VAR 0 10
16918: PPUSH
16919: CALL_OW 251
16923: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16924: LD_ADDR_VAR 0 6
16928: PUSH
16929: LD_VAR 0 4
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 12
16945: PLUS
16946: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16947: LD_ADDR_VAR 0 7
16951: PUSH
16952: LD_VAR 0 5
16956: PUSH
16957: LD_INT 1
16959: NEG
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: CALL_OW 12
16968: PLUS
16969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16970: LD_VAR 0 6
16974: PPUSH
16975: LD_VAR 0 7
16979: PPUSH
16980: CALL_OW 488
16984: NOT
16985: IFFALSE 17007
// begin _x := x ;
16987: LD_ADDR_VAR 0 6
16991: PUSH
16992: LD_VAR 0 4
16996: ST_TO_ADDR
// _y := y ;
16997: LD_ADDR_VAR 0 7
17001: PUSH
17002: LD_VAR 0 5
17006: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17007: LD_ADDR_VAR 0 3
17011: PUSH
17012: LD_INT 1
17014: PPUSH
17015: LD_VAR 0 14
17019: PPUSH
17020: CALL_OW 12
17024: ST_TO_ADDR
// case i of 1 :
17025: LD_VAR 0 3
17029: PUSH
17030: LD_INT 1
17032: DOUBLE
17033: EQUAL
17034: IFTRUE 17038
17036: GO 17055
17038: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_VAR 0 10
17048: PPUSH
17049: CALL_OW 115
17053: GO 17116
17055: LD_INT 2
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17085
17063: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17064: LD_VAR 0 1
17068: PPUSH
17069: LD_VAR 0 6
17073: PPUSH
17074: LD_VAR 0 7
17078: PPUSH
17079: CALL_OW 153
17083: GO 17116
17085: LD_INT 3
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17115
17093: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_VAR 0 6
17103: PPUSH
17104: LD_VAR 0 7
17108: PPUSH
17109: CALL_OW 154
17113: GO 17116
17115: POP
// end ;
17116: LD_VAR 0 2
17120: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
// if not unit or not building then
17129: LD_VAR 0 1
17133: NOT
17134: PUSH
17135: LD_VAR 0 2
17139: NOT
17140: OR
17141: IFFALSE 17145
// exit ;
17143: GO 17303
// x := GetX ( building ) ;
17145: LD_ADDR_VAR 0 5
17149: PUSH
17150: LD_VAR 0 2
17154: PPUSH
17155: CALL_OW 250
17159: ST_TO_ADDR
// y := GetY ( building ) ;
17160: LD_ADDR_VAR 0 6
17164: PUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: CALL_OW 251
17174: ST_TO_ADDR
// for i = 0 to 5 do
17175: LD_ADDR_VAR 0 4
17179: PUSH
17180: DOUBLE
17181: LD_INT 0
17183: DEC
17184: ST_TO_ADDR
17185: LD_INT 5
17187: PUSH
17188: FOR_TO
17189: IFFALSE 17301
// begin _x := ShiftX ( x , i , 3 ) ;
17191: LD_ADDR_VAR 0 7
17195: PUSH
17196: LD_VAR 0 5
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_INT 3
17208: PPUSH
17209: CALL_OW 272
17213: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17214: LD_ADDR_VAR 0 8
17218: PUSH
17219: LD_VAR 0 6
17223: PPUSH
17224: LD_VAR 0 4
17228: PPUSH
17229: LD_INT 3
17231: PPUSH
17232: CALL_OW 273
17236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17237: LD_VAR 0 7
17241: PPUSH
17242: LD_VAR 0 8
17246: PPUSH
17247: CALL_OW 488
17251: NOT
17252: IFFALSE 17256
// continue ;
17254: GO 17188
// if HexInfo ( _x , _y ) = 0 then
17256: LD_VAR 0 7
17260: PPUSH
17261: LD_VAR 0 8
17265: PPUSH
17266: CALL_OW 428
17270: PUSH
17271: LD_INT 0
17273: EQUAL
17274: IFFALSE 17299
// begin ComMoveXY ( unit , _x , _y ) ;
17276: LD_VAR 0 1
17280: PPUSH
17281: LD_VAR 0 7
17285: PPUSH
17286: LD_VAR 0 8
17290: PPUSH
17291: CALL_OW 111
// exit ;
17295: POP
17296: POP
17297: GO 17303
// end ; end ;
17299: GO 17188
17301: POP
17302: POP
// end ;
17303: LD_VAR 0 3
17307: RET
// export function ScanBase ( side , base_area ) ; begin
17308: LD_INT 0
17310: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_VAR 0 2
17320: PPUSH
17321: LD_INT 81
17323: PUSH
17324: LD_VAR 0 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PPUSH
17333: CALL_OW 70
17337: ST_TO_ADDR
// end ;
17338: LD_VAR 0 3
17342: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
17343: LD_INT 0
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
17350: LD_VAR 0 1
17354: NOT
17355: PUSH
17356: LD_EXP 44
17360: PUSH
17361: LD_VAR 0 1
17365: ARRAY
17366: NOT
17367: OR
17368: PUSH
17369: LD_VAR 0 2
17373: NOT
17374: OR
17375: PUSH
17376: LD_VAR 0 3
17380: NOT
17381: OR
17382: IFFALSE 17386
// exit ;
17384: GO 17836
// side := mc_sides [ base ] ;
17386: LD_ADDR_VAR 0 6
17390: PUSH
17391: LD_EXP 70
17395: PUSH
17396: LD_VAR 0 1
17400: ARRAY
17401: ST_TO_ADDR
// if not side then
17402: LD_VAR 0 6
17406: NOT
17407: IFFALSE 17411
// exit ;
17409: GO 17836
// for i in solds do
17411: LD_ADDR_VAR 0 7
17415: PUSH
17416: LD_VAR 0 2
17420: PUSH
17421: FOR_IN
17422: IFFALSE 17483
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
17424: LD_VAR 0 7
17428: PPUSH
17429: CALL_OW 310
17433: PPUSH
17434: CALL_OW 266
17438: PUSH
17439: LD_INT 32
17441: PUSH
17442: LD_INT 31
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: IN
17449: IFFALSE 17469
// solds := solds diff i else
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: LD_VAR 0 7
17465: DIFF
17466: ST_TO_ADDR
17467: GO 17481
// SetTag ( i , 18 ) ;
17469: LD_VAR 0 7
17473: PPUSH
17474: LD_INT 18
17476: PPUSH
17477: CALL_OW 109
17481: GO 17421
17483: POP
17484: POP
// if not solds then
17485: LD_VAR 0 2
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17836
// repeat wait ( 0 0$1 ) ;
17494: LD_INT 35
17496: PPUSH
17497: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
17501: LD_ADDR_VAR 0 5
17505: PUSH
17506: LD_VAR 0 6
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: CALL 17308 0 2
17520: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
17521: LD_VAR 0 5
17525: NOT
17526: PUSH
17527: LD_VAR 0 5
17531: PUSH
17532: LD_INT 3
17534: GREATER
17535: OR
17536: PUSH
17537: LD_EXP 66
17541: PUSH
17542: LD_VAR 0 1
17546: ARRAY
17547: OR
17548: IFFALSE 17589
// begin for i in solds do
17550: LD_ADDR_VAR 0 7
17554: PUSH
17555: LD_VAR 0 2
17559: PUSH
17560: FOR_IN
17561: IFFALSE 17585
// if HasTask ( i ) then
17563: LD_VAR 0 7
17567: PPUSH
17568: CALL_OW 314
17572: IFFALSE 17583
// ComStop ( i ) ;
17574: LD_VAR 0 7
17578: PPUSH
17579: CALL_OW 141
17583: GO 17560
17585: POP
17586: POP
// break ;
17587: GO 17824
// end ; for i in solds do
17589: LD_ADDR_VAR 0 7
17593: PUSH
17594: LD_VAR 0 2
17598: PUSH
17599: FOR_IN
17600: IFFALSE 17816
// begin if IsInUnit ( i ) then
17602: LD_VAR 0 7
17606: PPUSH
17607: CALL_OW 310
17611: IFFALSE 17622
// ComExitBuilding ( i ) ;
17613: LD_VAR 0 7
17617: PPUSH
17618: CALL_OW 122
// if GetLives ( i ) > 333 then
17622: LD_VAR 0 7
17626: PPUSH
17627: CALL_OW 256
17631: PUSH
17632: LD_INT 333
17634: GREATER
17635: IFFALSE 17663
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
17637: LD_VAR 0 7
17641: PPUSH
17642: LD_VAR 0 5
17646: PPUSH
17647: LD_VAR 0 7
17651: PPUSH
17652: CALL_OW 74
17656: PPUSH
17657: CALL_OW 115
17661: GO 17814
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
17663: LD_ADDR_VAR 0 8
17667: PUSH
17668: LD_EXP 44
17672: PUSH
17673: LD_VAR 0 1
17677: ARRAY
17678: PPUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 30
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 6
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: PPUSH
17718: CALL_OW 72
17722: PPUSH
17723: LD_VAR 0 7
17727: PPUSH
17728: CALL_OW 74
17732: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
17733: LD_VAR 0 7
17737: PPUSH
17738: LD_VAR 0 8
17742: PPUSH
17743: CALL_OW 250
17747: PPUSH
17748: LD_INT 3
17750: PPUSH
17751: LD_INT 5
17753: PPUSH
17754: CALL_OW 272
17758: PPUSH
17759: LD_VAR 0 8
17763: PPUSH
17764: CALL_OW 251
17768: PPUSH
17769: LD_INT 3
17771: PPUSH
17772: LD_INT 5
17774: PPUSH
17775: CALL_OW 273
17779: PPUSH
17780: CALL_OW 111
// SetTag ( i , 0 ) ;
17784: LD_VAR 0 7
17788: PPUSH
17789: LD_INT 0
17791: PPUSH
17792: CALL_OW 109
// solds := solds diff i ;
17796: LD_ADDR_VAR 0 2
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: LD_VAR 0 7
17810: DIFF
17811: ST_TO_ADDR
// continue ;
17812: GO 17599
// end ; end ;
17814: GO 17599
17816: POP
17817: POP
// until solds ;
17818: LD_VAR 0 2
17822: IFFALSE 17494
// MC_Reset ( base , 18 ) ;
17824: LD_VAR 0 1
17828: PPUSH
17829: LD_INT 18
17831: PPUSH
17832: CALL 60627 0 2
// end ;
17836: LD_VAR 0 4
17840: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
17841: LD_INT 0
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
17854: PPUSH
17855: PPUSH
17856: PPUSH
17857: PPUSH
17858: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
17859: LD_ADDR_VAR 0 12
17863: PUSH
17864: LD_EXP 44
17868: PUSH
17869: LD_VAR 0 1
17873: ARRAY
17874: PPUSH
17875: LD_INT 25
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 72
17889: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
17890: LD_ADDR_VAR 0 8
17894: PUSH
17895: LD_EXP 44
17899: PUSH
17900: LD_VAR 0 1
17904: ARRAY
17905: PPUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 25
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 25
17921: PUSH
17922: LD_INT 5
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 25
17931: PUSH
17932: LD_INT 8
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 25
17941: PUSH
17942: LD_INT 9
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 72
17960: ST_TO_ADDR
// if not defenders and not solds then
17961: LD_VAR 0 2
17965: NOT
17966: PUSH
17967: LD_VAR 0 8
17971: NOT
17972: AND
17973: IFFALSE 17977
// exit ;
17975: GO 19343
// depot_under_attack := false ;
17977: LD_ADDR_VAR 0 16
17981: PUSH
17982: LD_INT 0
17984: ST_TO_ADDR
// sold_defenders := [ ] ;
17985: LD_ADDR_VAR 0 17
17989: PUSH
17990: EMPTY
17991: ST_TO_ADDR
// if mechs then
17992: LD_VAR 0 12
17996: IFFALSE 18125
// for i in defenders do
17998: LD_ADDR_VAR 0 5
18002: PUSH
18003: LD_VAR 0 2
18007: PUSH
18008: FOR_IN
18009: IFFALSE 18123
// begin SetTag ( i , 20 ) ;
18011: LD_VAR 0 5
18015: PPUSH
18016: LD_INT 20
18018: PPUSH
18019: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
18023: LD_VAR 0 5
18027: PPUSH
18028: CALL_OW 263
18032: PUSH
18033: LD_INT 1
18035: EQUAL
18036: PUSH
18037: LD_VAR 0 5
18041: PPUSH
18042: CALL_OW 311
18046: NOT
18047: AND
18048: PUSH
18049: LD_VAR 0 12
18053: AND
18054: IFFALSE 18121
// begin un := mechs [ 1 ] ;
18056: LD_ADDR_VAR 0 10
18060: PUSH
18061: LD_VAR 0 12
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: ST_TO_ADDR
// ComExitBuilding ( un ) ;
18070: LD_VAR 0 10
18074: PPUSH
18075: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
18079: LD_VAR 0 10
18083: PPUSH
18084: LD_VAR 0 5
18088: PPUSH
18089: CALL_OW 180
// SetTag ( un , 19 ) ;
18093: LD_VAR 0 10
18097: PPUSH
18098: LD_INT 19
18100: PPUSH
18101: CALL_OW 109
// mechs := mechs diff un ;
18105: LD_ADDR_VAR 0 12
18109: PUSH
18110: LD_VAR 0 12
18114: PUSH
18115: LD_VAR 0 10
18119: DIFF
18120: ST_TO_ADDR
// end ; end ;
18121: GO 18008
18123: POP
18124: POP
// if solds then
18125: LD_VAR 0 8
18129: IFFALSE 18188
// for i in solds do
18131: LD_ADDR_VAR 0 5
18135: PUSH
18136: LD_VAR 0 8
18140: PUSH
18141: FOR_IN
18142: IFFALSE 18186
// if not GetTag ( i ) then
18144: LD_VAR 0 5
18148: PPUSH
18149: CALL_OW 110
18153: NOT
18154: IFFALSE 18184
// begin defenders := defenders union i ;
18156: LD_ADDR_VAR 0 2
18160: PUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_VAR 0 5
18170: UNION
18171: ST_TO_ADDR
// SetTag ( i , 18 ) ;
18172: LD_VAR 0 5
18176: PPUSH
18177: LD_INT 18
18179: PPUSH
18180: CALL_OW 109
// end ;
18184: GO 18141
18186: POP
18187: POP
// repeat wait ( 0 0$1 ) ;
18188: LD_INT 35
18190: PPUSH
18191: CALL_OW 67
// enemy := mc_scan [ base ] ;
18195: LD_ADDR_VAR 0 3
18199: PUSH
18200: LD_EXP 67
18204: PUSH
18205: LD_VAR 0 1
18209: ARRAY
18210: ST_TO_ADDR
// for i in defenders do
18211: LD_ADDR_VAR 0 5
18215: PUSH
18216: LD_VAR 0 2
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18907
// begin e := NearestUnitToUnit ( enemy , i ) ;
18224: LD_ADDR_VAR 0 13
18228: PUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: LD_VAR 0 5
18238: PPUSH
18239: CALL_OW 74
18243: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
18244: LD_ADDR_VAR 0 16
18248: PUSH
18249: LD_EXP 44
18253: PUSH
18254: LD_VAR 0 1
18258: ARRAY
18259: PPUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 30
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 72
18292: NOT
18293: PUSH
18294: LD_EXP 44
18298: PUSH
18299: LD_VAR 0 1
18303: ARRAY
18304: PPUSH
18305: LD_INT 2
18307: PUSH
18308: LD_INT 30
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 30
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 72
18337: PPUSH
18338: CALL_OW 256
18342: PUSH
18343: LD_INT 600
18345: LESS
18346: OR
18347: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
18348: LD_VAR 0 5
18352: PPUSH
18353: CALL_OW 247
18357: PUSH
18358: LD_INT 2
18360: DOUBLE
18361: EQUAL
18362: IFTRUE 18366
18364: GO 18613
18366: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
18367: LD_VAR 0 5
18371: PPUSH
18372: CALL_OW 256
18376: PUSH
18377: LD_INT 650
18379: GREATER
18380: PUSH
18381: LD_VAR 0 5
18385: PPUSH
18386: LD_VAR 0 13
18390: PPUSH
18391: CALL_OW 296
18395: PUSH
18396: LD_INT 40
18398: LESS
18399: AND
18400: IFFALSE 18418
// ComAttackUnit ( i , e ) else
18402: LD_VAR 0 5
18406: PPUSH
18407: LD_VAR 0 13
18411: PPUSH
18412: CALL_OW 115
18416: GO 18496
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
18418: LD_VAR 0 5
18422: PPUSH
18423: LD_VAR 0 13
18427: PPUSH
18428: CALL_OW 296
18432: PUSH
18433: LD_INT 30
18435: GREATEREQUAL
18436: PUSH
18437: LD_VAR 0 5
18441: PPUSH
18442: CALL_OW 256
18446: PUSH
18447: LD_INT 650
18449: LESSEQUAL
18450: OR
18451: PUSH
18452: LD_VAR 0 5
18456: PPUSH
18457: LD_EXP 68
18461: PUSH
18462: LD_VAR 0 1
18466: ARRAY
18467: PPUSH
18468: CALL_OW 308
18472: NOT
18473: AND
18474: IFFALSE 18496
// ComMoveToArea ( i , mc_parking [ base ] ) ;
18476: LD_VAR 0 5
18480: PPUSH
18481: LD_EXP 68
18485: PUSH
18486: LD_VAR 0 1
18490: ARRAY
18491: PPUSH
18492: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
18496: LD_VAR 0 5
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 998
18508: LESS
18509: PUSH
18510: LD_VAR 0 5
18514: PPUSH
18515: CALL_OW 263
18519: PUSH
18520: LD_INT 1
18522: EQUAL
18523: AND
18524: PUSH
18525: LD_VAR 0 5
18529: PPUSH
18530: CALL_OW 311
18534: AND
18535: PUSH
18536: LD_VAR 0 5
18540: PPUSH
18541: LD_EXP 68
18545: PUSH
18546: LD_VAR 0 1
18550: ARRAY
18551: PPUSH
18552: CALL_OW 308
18556: AND
18557: IFFALSE 18611
// begin mech := IsDrivenBy ( i ) ;
18559: LD_ADDR_VAR 0 9
18563: PUSH
18564: LD_VAR 0 5
18568: PPUSH
18569: CALL_OW 311
18573: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18574: LD_VAR 0 9
18578: PPUSH
18579: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18583: LD_VAR 0 9
18587: PPUSH
18588: LD_VAR 0 5
18592: PPUSH
18593: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
18597: LD_VAR 0 9
18601: PPUSH
18602: LD_VAR 0 5
18606: PPUSH
18607: CALL_OW 180
// end ; end ; unit_human :
18611: GO 18878
18613: LD_INT 1
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18877
18621: POP
// begin b := IsInUnit ( i ) ;
18622: LD_ADDR_VAR 0 18
18626: PUSH
18627: LD_VAR 0 5
18631: PPUSH
18632: CALL_OW 310
18636: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
18637: LD_ADDR_VAR 0 19
18641: PUSH
18642: LD_VAR 0 18
18646: NOT
18647: PUSH
18648: LD_VAR 0 18
18652: PPUSH
18653: CALL_OW 266
18657: PUSH
18658: LD_INT 32
18660: PUSH
18661: LD_INT 31
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: IN
18668: OR
18669: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
18670: LD_VAR 0 16
18674: PUSH
18675: LD_VAR 0 2
18679: PPUSH
18680: LD_INT 21
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 72
18694: PUSH
18695: LD_INT 1
18697: LESSEQUAL
18698: OR
18699: PUSH
18700: LD_VAR 0 19
18704: AND
18705: PUSH
18706: LD_VAR 0 5
18710: PUSH
18711: LD_VAR 0 17
18715: IN
18716: NOT
18717: AND
18718: IFFALSE 18811
// begin if b then
18720: LD_VAR 0 18
18724: IFFALSE 18773
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
18726: LD_VAR 0 18
18730: PPUSH
18731: LD_VAR 0 3
18735: PPUSH
18736: LD_VAR 0 18
18740: PPUSH
18741: CALL_OW 74
18745: PPUSH
18746: CALL_OW 296
18750: PUSH
18751: LD_INT 10
18753: LESS
18754: PUSH
18755: LD_VAR 0 18
18759: PPUSH
18760: CALL_OW 461
18764: PUSH
18765: LD_INT 7
18767: NONEQUAL
18768: AND
18769: IFFALSE 18773
// continue ;
18771: GO 18221
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
18773: LD_ADDR_VAR 0 17
18777: PUSH
18778: LD_VAR 0 17
18782: PPUSH
18783: LD_VAR 0 17
18787: PUSH
18788: LD_INT 1
18790: PLUS
18791: PPUSH
18792: LD_VAR 0 5
18796: PPUSH
18797: CALL_OW 1
18801: ST_TO_ADDR
// ComExitBuilding ( i ) ;
18802: LD_VAR 0 5
18806: PPUSH
18807: CALL_OW 122
// end ; if sold_defenders then
18811: LD_VAR 0 17
18815: IFFALSE 18875
// if i in sold_defenders then
18817: LD_VAR 0 5
18821: PUSH
18822: LD_VAR 0 17
18826: IN
18827: IFFALSE 18875
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
18829: LD_VAR 0 5
18833: PPUSH
18834: CALL_OW 314
18838: NOT
18839: PUSH
18840: LD_VAR 0 5
18844: PPUSH
18845: LD_VAR 0 13
18849: PPUSH
18850: CALL_OW 296
18854: PUSH
18855: LD_INT 30
18857: LESS
18858: AND
18859: IFFALSE 18875
// ComAttackUnit ( i , e ) ;
18861: LD_VAR 0 5
18865: PPUSH
18866: LD_VAR 0 13
18870: PPUSH
18871: CALL_OW 115
// end ; end ; end ;
18875: GO 18878
18877: POP
// if IsDead ( i ) then
18878: LD_VAR 0 5
18882: PPUSH
18883: CALL_OW 301
18887: IFFALSE 18905
// defenders := defenders diff i ;
18889: LD_ADDR_VAR 0 2
18893: PUSH
18894: LD_VAR 0 2
18898: PUSH
18899: LD_VAR 0 5
18903: DIFF
18904: ST_TO_ADDR
// end ;
18905: GO 18221
18907: POP
18908: POP
// until not enemy or not defenders ;
18909: LD_VAR 0 3
18913: NOT
18914: PUSH
18915: LD_VAR 0 2
18919: NOT
18920: OR
18921: IFFALSE 18188
// MC_Reset ( base , 18 ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: LD_INT 18
18930: PPUSH
18931: CALL 60627 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
18935: LD_ADDR_VAR 0 2
18939: PUSH
18940: LD_VAR 0 2
18944: PUSH
18945: LD_VAR 0 2
18949: PPUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 5
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 8
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 25
18985: PUSH
18986: LD_INT 9
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 72
19004: DIFF
19005: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
19006: LD_VAR 0 3
19010: NOT
19011: PUSH
19012: LD_VAR 0 2
19016: PPUSH
19017: LD_INT 21
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 72
19031: AND
19032: IFFALSE 19294
// begin tmp := FilterByTag ( defenders , 19 ) ;
19034: LD_ADDR_VAR 0 11
19038: PUSH
19039: LD_VAR 0 2
19043: PPUSH
19044: LD_INT 19
19046: PPUSH
19047: CALL 55459 0 2
19051: ST_TO_ADDR
// if tmp then
19052: LD_VAR 0 11
19056: IFFALSE 19126
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
19058: LD_ADDR_VAR 0 11
19062: PUSH
19063: LD_VAR 0 11
19067: PPUSH
19068: LD_INT 25
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 72
19082: ST_TO_ADDR
// if tmp then
19083: LD_VAR 0 11
19087: IFFALSE 19126
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
19089: LD_ADDR_EXP 56
19093: PUSH
19094: LD_EXP 56
19098: PPUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: LD_EXP 56
19108: PUSH
19109: LD_VAR 0 1
19113: ARRAY
19114: PUSH
19115: LD_VAR 0 11
19119: UNION
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
19126: LD_VAR 0 1
19130: PPUSH
19131: LD_INT 19
19133: PPUSH
19134: CALL 60627 0 2
// repeat wait ( 0 0$1 ) ;
19138: LD_INT 35
19140: PPUSH
19141: CALL_OW 67
// for i in defenders do
19145: LD_ADDR_VAR 0 5
19149: PUSH
19150: LD_VAR 0 2
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19245
// begin if not IsInArea ( i , mc_parking [ base ] ) then
19158: LD_VAR 0 5
19162: PPUSH
19163: LD_EXP 68
19167: PUSH
19168: LD_VAR 0 1
19172: ARRAY
19173: PPUSH
19174: CALL_OW 308
19178: NOT
19179: IFFALSE 19203
// ComMoveToArea ( i , mc_parking [ base ] ) else
19181: LD_VAR 0 5
19185: PPUSH
19186: LD_EXP 68
19190: PUSH
19191: LD_VAR 0 1
19195: ARRAY
19196: PPUSH
19197: CALL_OW 113
19201: GO 19243
// if GetControl ( i ) = control_manual then
19203: LD_VAR 0 5
19207: PPUSH
19208: CALL_OW 263
19212: PUSH
19213: LD_INT 1
19215: EQUAL
19216: IFFALSE 19243
// if IsDrivenBy ( i ) then
19218: LD_VAR 0 5
19222: PPUSH
19223: CALL_OW 311
19227: IFFALSE 19243
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
19229: LD_VAR 0 5
19233: PPUSH
19234: CALL_OW 311
19238: PPUSH
19239: CALL_OW 121
// end ;
19243: GO 19155
19245: POP
19246: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
19247: LD_VAR 0 2
19251: PPUSH
19252: LD_INT 95
19254: PUSH
19255: LD_EXP 68
19259: PUSH
19260: LD_VAR 0 1
19264: ARRAY
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 72
19274: PUSH
19275: LD_VAR 0 2
19279: EQUAL
19280: PUSH
19281: LD_EXP 67
19285: PUSH
19286: LD_VAR 0 1
19290: ARRAY
19291: OR
19292: IFFALSE 19138
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
19294: LD_ADDR_EXP 66
19298: PUSH
19299: LD_EXP 66
19303: PPUSH
19304: LD_VAR 0 1
19308: PPUSH
19309: LD_EXP 66
19313: PUSH
19314: LD_VAR 0 1
19318: ARRAY
19319: PUSH
19320: LD_VAR 0 2
19324: UNION
19325: PPUSH
19326: CALL_OW 1
19330: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_INT 20
19338: PPUSH
19339: CALL 60627 0 2
// end ;
19343: LD_VAR 0 4
19347: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
19352: PPUSH
19353: PPUSH
// result := false ;
19354: LD_ADDR_VAR 0 2
19358: PUSH
19359: LD_INT 0
19361: ST_TO_ADDR
// side := GetSide ( unit ) ;
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 255
19376: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19377: LD_ADDR_VAR 0 4
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 248
19391: ST_TO_ADDR
// case nat of 1 :
19392: LD_VAR 0 4
19396: PUSH
19397: LD_INT 1
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19416
19405: POP
// tech := tech_lassight ; 2 :
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_INT 12
19413: ST_TO_ADDR
19414: GO 19455
19416: LD_INT 2
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19435
19424: POP
// tech := tech_mortar ; 3 :
19425: LD_ADDR_VAR 0 5
19429: PUSH
19430: LD_INT 41
19432: ST_TO_ADDR
19433: GO 19455
19435: LD_INT 3
19437: DOUBLE
19438: EQUAL
19439: IFTRUE 19443
19441: GO 19454
19443: POP
// tech := tech_bazooka ; end ;
19444: LD_ADDR_VAR 0 5
19448: PUSH
19449: LD_INT 44
19451: ST_TO_ADDR
19452: GO 19455
19454: POP
// if Researched ( side , tech ) then
19455: LD_VAR 0 3
19459: PPUSH
19460: LD_VAR 0 5
19464: PPUSH
19465: CALL_OW 325
19469: IFFALSE 19496
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 8
19481: PUSH
19482: LD_INT 9
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: PUSH
19490: LD_VAR 0 4
19494: ARRAY
19495: ST_TO_ADDR
// end ;
19496: LD_VAR 0 2
19500: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
19505: PPUSH
// if not mines then
19506: LD_VAR 0 2
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19659
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19515: LD_ADDR_VAR 0 5
19519: PUSH
19520: LD_INT 81
19522: PUSH
19523: LD_VAR 0 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 3
19534: PUSH
19535: LD_INT 21
19537: PUSH
19538: LD_INT 3
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// for i in mines do
19558: LD_ADDR_VAR 0 4
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: FOR_IN
19569: IFFALSE 19657
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19571: LD_VAR 0 4
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: LD_VAR 0 4
19584: PUSH
19585: LD_INT 2
19587: ARRAY
19588: PPUSH
19589: CALL_OW 458
19593: NOT
19594: IFFALSE 19598
// continue ;
19596: GO 19568
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19598: LD_VAR 0 4
19602: PUSH
19603: LD_INT 1
19605: ARRAY
19606: PPUSH
19607: LD_VAR 0 4
19611: PUSH
19612: LD_INT 2
19614: ARRAY
19615: PPUSH
19616: CALL_OW 428
19620: PUSH
19621: LD_VAR 0 5
19625: IN
19626: IFFALSE 19655
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19628: LD_VAR 0 4
19632: PUSH
19633: LD_INT 1
19635: ARRAY
19636: PPUSH
19637: LD_VAR 0 4
19641: PUSH
19642: LD_INT 2
19644: ARRAY
19645: PPUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 456
// end ;
19655: GO 19568
19657: POP
19658: POP
// end ;
19659: LD_VAR 0 3
19663: RET
// export function Count ( array ) ; var i ; begin
19664: LD_INT 0
19666: PPUSH
19667: PPUSH
// result := 0 ;
19668: LD_ADDR_VAR 0 2
19672: PUSH
19673: LD_INT 0
19675: ST_TO_ADDR
// for i in array do
19676: LD_ADDR_VAR 0 3
19680: PUSH
19681: LD_VAR 0 1
19685: PUSH
19686: FOR_IN
19687: IFFALSE 19711
// if i then
19689: LD_VAR 0 3
19693: IFFALSE 19709
// result := result + 1 ;
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_VAR 0 2
19704: PUSH
19705: LD_INT 1
19707: PLUS
19708: ST_TO_ADDR
19709: GO 19686
19711: POP
19712: POP
// end ;
19713: LD_VAR 0 2
19717: RET
// export function IsEmpty ( building ) ; begin
19718: LD_INT 0
19720: PPUSH
// if not building then
19721: LD_VAR 0 1
19725: NOT
19726: IFFALSE 19730
// exit ;
19728: GO 19773
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19730: LD_ADDR_VAR 0 2
19734: PUSH
19735: LD_VAR 0 1
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_VAR 0 1
19747: PPUSH
19748: CALL_OW 255
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 58
19759: PUSH
19760: EMPTY
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PPUSH
19767: CALL_OW 69
19771: IN
19772: ST_TO_ADDR
// end ;
19773: LD_VAR 0 2
19777: RET
// export function IsNotFull ( building ) ; begin
19778: LD_INT 0
19780: PPUSH
// if not building then
19781: LD_VAR 0 1
19785: NOT
19786: IFFALSE 19790
// exit ;
19788: GO 19809
// result := UnitsInside ( building ) < 6 ;
19790: LD_ADDR_VAR 0 2
19794: PUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 313
19804: PUSH
19805: LD_INT 6
19807: LESS
19808: ST_TO_ADDR
// end ;
19809: LD_VAR 0 2
19813: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19814: LD_INT 0
19816: PPUSH
19817: PPUSH
19818: PPUSH
19819: PPUSH
// tmp := [ ] ;
19820: LD_ADDR_VAR 0 3
19824: PUSH
19825: EMPTY
19826: ST_TO_ADDR
// list := [ ] ;
19827: LD_ADDR_VAR 0 5
19831: PUSH
19832: EMPTY
19833: ST_TO_ADDR
// for i = 16 to 25 do
19834: LD_ADDR_VAR 0 4
19838: PUSH
19839: DOUBLE
19840: LD_INT 16
19842: DEC
19843: ST_TO_ADDR
19844: LD_INT 25
19846: PUSH
19847: FOR_TO
19848: IFFALSE 19921
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19850: LD_ADDR_VAR 0 3
19854: PUSH
19855: LD_VAR 0 3
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_VAR 0 1
19867: PPUSH
19868: CALL_OW 255
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 91
19879: PUSH
19880: LD_VAR 0 1
19884: PUSH
19885: LD_INT 6
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 30
19895: PUSH
19896: LD_VAR 0 4
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: PPUSH
19913: CALL_OW 69
19917: ADD
19918: ST_TO_ADDR
19919: GO 19847
19921: POP
19922: POP
// for i = 1 to tmp do
19923: LD_ADDR_VAR 0 4
19927: PUSH
19928: DOUBLE
19929: LD_INT 1
19931: DEC
19932: ST_TO_ADDR
19933: LD_VAR 0 3
19937: PUSH
19938: FOR_TO
19939: IFFALSE 20027
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19941: LD_ADDR_VAR 0 5
19945: PUSH
19946: LD_VAR 0 5
19950: PUSH
19951: LD_VAR 0 3
19955: PUSH
19956: LD_VAR 0 4
19960: ARRAY
19961: PPUSH
19962: CALL_OW 266
19966: PUSH
19967: LD_VAR 0 3
19971: PUSH
19972: LD_VAR 0 4
19976: ARRAY
19977: PPUSH
19978: CALL_OW 250
19982: PUSH
19983: LD_VAR 0 3
19987: PUSH
19988: LD_VAR 0 4
19992: ARRAY
19993: PPUSH
19994: CALL_OW 251
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_VAR 0 4
20008: ARRAY
20009: PPUSH
20010: CALL_OW 254
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: ADD
20024: ST_TO_ADDR
20025: GO 19938
20027: POP
20028: POP
// result := list ;
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_VAR 0 5
20038: ST_TO_ADDR
// end ;
20039: LD_VAR 0 2
20043: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20044: LD_INT 0
20046: PPUSH
20047: PPUSH
20048: PPUSH
20049: PPUSH
20050: PPUSH
20051: PPUSH
20052: PPUSH
// if not factory then
20053: LD_VAR 0 1
20057: NOT
20058: IFFALSE 20062
// exit ;
20060: GO 20587
// if control = control_apeman then
20062: LD_VAR 0 4
20066: PUSH
20067: LD_INT 5
20069: EQUAL
20070: IFFALSE 20179
// begin tmp := UnitsInside ( factory ) ;
20072: LD_ADDR_VAR 0 8
20076: PUSH
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 313
20086: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20087: LD_VAR 0 8
20091: PPUSH
20092: LD_INT 25
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 72
20106: NOT
20107: IFFALSE 20117
// control := control_manual ;
20109: LD_ADDR_VAR 0 4
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20117: LD_ADDR_VAR 0 8
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL 19814 0 1
20131: ST_TO_ADDR
// if tmp then
20132: LD_VAR 0 8
20136: IFFALSE 20179
// begin for i in tmp do
20138: LD_ADDR_VAR 0 7
20142: PUSH
20143: LD_VAR 0 8
20147: PUSH
20148: FOR_IN
20149: IFFALSE 20177
// if i [ 1 ] = b_ext_radar then
20151: LD_VAR 0 7
20155: PUSH
20156: LD_INT 1
20158: ARRAY
20159: PUSH
20160: LD_INT 20
20162: EQUAL
20163: IFFALSE 20175
// begin control := control_remote ;
20165: LD_ADDR_VAR 0 4
20169: PUSH
20170: LD_INT 2
20172: ST_TO_ADDR
// break ;
20173: GO 20177
// end ;
20175: GO 20148
20177: POP
20178: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20179: LD_VAR 0 1
20183: PPUSH
20184: LD_VAR 0 2
20188: PPUSH
20189: LD_VAR 0 3
20193: PPUSH
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL_OW 448
20208: IFFALSE 20243
// begin result := [ chassis , engine , control , weapon ] ;
20210: LD_ADDR_VAR 0 6
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_VAR 0 3
20224: PUSH
20225: LD_VAR 0 4
20229: PUSH
20230: LD_VAR 0 5
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: ST_TO_ADDR
// exit ;
20241: GO 20587
// end ; _chassis := AvailableChassisList ( factory ) ;
20243: LD_ADDR_VAR 0 9
20247: PUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 475
20257: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20258: LD_ADDR_VAR 0 11
20262: PUSH
20263: LD_VAR 0 1
20267: PPUSH
20268: CALL_OW 476
20272: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20273: LD_ADDR_VAR 0 12
20277: PUSH
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 477
20287: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20288: LD_ADDR_VAR 0 10
20292: PUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: CALL_OW 478
20302: ST_TO_ADDR
// if not chassis in _chassis then
20303: LD_VAR 0 2
20307: PUSH
20308: LD_VAR 0 9
20312: IN
20313: NOT
20314: IFFALSE 20340
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20316: LD_ADDR_VAR 0 2
20320: PUSH
20321: LD_VAR 0 9
20325: PUSH
20326: LD_INT 1
20328: PPUSH
20329: LD_VAR 0 9
20333: PPUSH
20334: CALL_OW 12
20338: ARRAY
20339: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20340: LD_VAR 0 2
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: CALL 20592 0 2
20354: NOT
20355: IFFALSE 20414
// repeat engine := _engine [ 1 ] ;
20357: LD_ADDR_VAR 0 3
20361: PUSH
20362: LD_VAR 0 11
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20371: LD_ADDR_VAR 0 11
20375: PUSH
20376: LD_VAR 0 11
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL_OW 3
20388: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20389: LD_VAR 0 2
20393: PPUSH
20394: LD_VAR 0 3
20398: PPUSH
20399: CALL 20592 0 2
20403: PUSH
20404: LD_VAR 0 11
20408: PUSH
20409: EMPTY
20410: EQUAL
20411: OR
20412: IFFALSE 20357
// if not control in _control then
20414: LD_VAR 0 4
20418: PUSH
20419: LD_VAR 0 12
20423: IN
20424: NOT
20425: IFFALSE 20451
// control := _control [ rand ( 1 , _control ) ] ;
20427: LD_ADDR_VAR 0 4
20431: PUSH
20432: LD_VAR 0 12
20436: PUSH
20437: LD_INT 1
20439: PPUSH
20440: LD_VAR 0 12
20444: PPUSH
20445: CALL_OW 12
20449: ARRAY
20450: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20451: LD_VAR 0 2
20455: PPUSH
20456: LD_VAR 0 5
20460: PPUSH
20461: CALL 20812 0 2
20465: NOT
20466: IFFALSE 20525
// repeat weapon := _weapon [ 1 ] ;
20468: LD_ADDR_VAR 0 5
20472: PUSH
20473: LD_VAR 0 10
20477: PUSH
20478: LD_INT 1
20480: ARRAY
20481: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 10
20491: PPUSH
20492: LD_INT 1
20494: PPUSH
20495: CALL_OW 3
20499: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_VAR 0 5
20509: PPUSH
20510: CALL 20812 0 2
20514: PUSH
20515: LD_VAR 0 10
20519: PUSH
20520: EMPTY
20521: EQUAL
20522: OR
20523: IFFALSE 20468
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20525: LD_VAR 0 1
20529: PPUSH
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: LD_VAR 0 4
20544: PPUSH
20545: LD_VAR 0 5
20549: PPUSH
20550: CALL_OW 448
20554: IFFALSE 20587
// result := [ chassis , engine , control , weapon ] ;
20556: LD_ADDR_VAR 0 6
20560: PUSH
20561: LD_VAR 0 2
20565: PUSH
20566: LD_VAR 0 3
20570: PUSH
20571: LD_VAR 0 4
20575: PUSH
20576: LD_VAR 0 5
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: ST_TO_ADDR
// end ;
20587: LD_VAR 0 6
20591: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20592: LD_INT 0
20594: PPUSH
// if not chassis or not engine then
20595: LD_VAR 0 1
20599: NOT
20600: PUSH
20601: LD_VAR 0 2
20605: NOT
20606: OR
20607: IFFALSE 20611
// exit ;
20609: GO 20807
// case engine of engine_solar :
20611: LD_VAR 0 2
20615: PUSH
20616: LD_INT 2
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20662
20624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_INT 11
20632: PUSH
20633: LD_INT 12
20635: PUSH
20636: LD_INT 13
20638: PUSH
20639: LD_INT 14
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: ST_TO_ADDR
20660: GO 20791
20662: LD_INT 1
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20732
20670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20671: LD_ADDR_VAR 0 3
20675: PUSH
20676: LD_INT 11
20678: PUSH
20679: LD_INT 12
20681: PUSH
20682: LD_INT 13
20684: PUSH
20685: LD_INT 14
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: LD_INT 4
20699: PUSH
20700: LD_INT 5
20702: PUSH
20703: LD_INT 21
20705: PUSH
20706: LD_INT 23
20708: PUSH
20709: LD_INT 22
20711: PUSH
20712: LD_INT 24
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ST_TO_ADDR
20730: GO 20791
20732: LD_INT 3
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20790
20740: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20741: LD_ADDR_VAR 0 3
20745: PUSH
20746: LD_INT 13
20748: PUSH
20749: LD_INT 14
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 3
20757: PUSH
20758: LD_INT 4
20760: PUSH
20761: LD_INT 5
20763: PUSH
20764: LD_INT 21
20766: PUSH
20767: LD_INT 22
20769: PUSH
20770: LD_INT 23
20772: PUSH
20773: LD_INT 24
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: ST_TO_ADDR
20788: GO 20791
20790: POP
// result := ( chassis in result ) ;
20791: LD_ADDR_VAR 0 3
20795: PUSH
20796: LD_VAR 0 1
20800: PUSH
20801: LD_VAR 0 3
20805: IN
20806: ST_TO_ADDR
// end ;
20807: LD_VAR 0 3
20811: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20812: LD_INT 0
20814: PPUSH
// if not chassis or not weapon then
20815: LD_VAR 0 1
20819: NOT
20820: PUSH
20821: LD_VAR 0 2
20825: NOT
20826: OR
20827: IFFALSE 20831
// exit ;
20829: GO 21857
// case weapon of us_machine_gun :
20831: LD_VAR 0 2
20835: PUSH
20836: LD_INT 2
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20874
20844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 4
20861: PUSH
20862: LD_INT 5
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: ST_TO_ADDR
20872: GO 21841
20874: LD_INT 3
20876: DOUBLE
20877: EQUAL
20878: IFTRUE 20882
20880: GO 20912
20882: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 3
20896: PUSH
20897: LD_INT 4
20899: PUSH
20900: LD_INT 5
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: ST_TO_ADDR
20910: GO 21841
20912: LD_INT 11
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20950
20920: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20921: LD_ADDR_VAR 0 3
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 3
20934: PUSH
20935: LD_INT 4
20937: PUSH
20938: LD_INT 5
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: ST_TO_ADDR
20948: GO 21841
20950: LD_INT 4
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 20984
20958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: LD_INT 3
20969: PUSH
20970: LD_INT 4
20972: PUSH
20973: LD_INT 5
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: ST_TO_ADDR
20982: GO 21841
20984: LD_INT 5
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21018
20992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: LD_INT 3
21003: PUSH
21004: LD_INT 4
21006: PUSH
21007: LD_INT 5
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: ST_TO_ADDR
21016: GO 21841
21018: LD_INT 9
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 21052
21026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21027: LD_ADDR_VAR 0 3
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: LD_INT 3
21037: PUSH
21038: LD_INT 4
21040: PUSH
21041: LD_INT 5
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: ST_TO_ADDR
21050: GO 21841
21052: LD_INT 7
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21086
21060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 3
21071: PUSH
21072: LD_INT 4
21074: PUSH
21075: LD_INT 5
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: ST_TO_ADDR
21084: GO 21841
21086: LD_INT 12
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21120
21094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21095: LD_ADDR_VAR 0 3
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: LD_INT 4
21108: PUSH
21109: LD_INT 5
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 21841
21120: LD_INT 13
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21154
21128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 3
21139: PUSH
21140: LD_INT 4
21142: PUSH
21143: LD_INT 5
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: ST_TO_ADDR
21152: GO 21841
21154: LD_INT 14
21156: DOUBLE
21157: EQUAL
21158: IFTRUE 21162
21160: GO 21180
21162: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: LD_INT 4
21170: PUSH
21171: LD_INT 5
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: ST_TO_ADDR
21178: GO 21841
21180: LD_INT 6
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21206
21188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 5
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: ST_TO_ADDR
21204: GO 21841
21206: LD_INT 10
21208: DOUBLE
21209: EQUAL
21210: IFTRUE 21214
21212: GO 21232
21214: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21215: LD_ADDR_VAR 0 3
21219: PUSH
21220: LD_INT 4
21222: PUSH
21223: LD_INT 5
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 21841
21232: LD_INT 22
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21266
21240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_INT 11
21248: PUSH
21249: LD_INT 12
21251: PUSH
21252: LD_INT 13
21254: PUSH
21255: LD_INT 14
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: ST_TO_ADDR
21264: GO 21841
21266: LD_INT 23
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21274
21272: GO 21300
21274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21275: LD_ADDR_VAR 0 3
21279: PUSH
21280: LD_INT 11
21282: PUSH
21283: LD_INT 12
21285: PUSH
21286: LD_INT 13
21288: PUSH
21289: LD_INT 14
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: ST_TO_ADDR
21298: GO 21841
21300: LD_INT 24
21302: DOUBLE
21303: EQUAL
21304: IFTRUE 21308
21306: GO 21334
21308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21309: LD_ADDR_VAR 0 3
21313: PUSH
21314: LD_INT 11
21316: PUSH
21317: LD_INT 12
21319: PUSH
21320: LD_INT 13
21322: PUSH
21323: LD_INT 14
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: ST_TO_ADDR
21332: GO 21841
21334: LD_INT 30
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21368
21342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21343: LD_ADDR_VAR 0 3
21347: PUSH
21348: LD_INT 11
21350: PUSH
21351: LD_INT 12
21353: PUSH
21354: LD_INT 13
21356: PUSH
21357: LD_INT 14
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: ST_TO_ADDR
21366: GO 21841
21368: LD_INT 25
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21394
21376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21377: LD_ADDR_VAR 0 3
21381: PUSH
21382: LD_INT 13
21384: PUSH
21385: LD_INT 14
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: ST_TO_ADDR
21392: GO 21841
21394: LD_INT 27
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21420
21402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_INT 13
21410: PUSH
21411: LD_INT 14
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: ST_TO_ADDR
21418: GO 21841
21420: LD_INT 28
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21446
21428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21429: LD_ADDR_VAR 0 3
21433: PUSH
21434: LD_INT 13
21436: PUSH
21437: LD_INT 14
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: ST_TO_ADDR
21444: GO 21841
21446: LD_INT 29
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21472
21454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21455: LD_ADDR_VAR 0 3
21459: PUSH
21460: LD_INT 13
21462: PUSH
21463: LD_INT 14
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: ST_TO_ADDR
21470: GO 21841
21472: LD_INT 31
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21498
21480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21481: LD_ADDR_VAR 0 3
21485: PUSH
21486: LD_INT 13
21488: PUSH
21489: LD_INT 14
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: ST_TO_ADDR
21496: GO 21841
21498: LD_INT 26
21500: DOUBLE
21501: EQUAL
21502: IFTRUE 21506
21504: GO 21524
21506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21507: LD_ADDR_VAR 0 3
21511: PUSH
21512: LD_INT 13
21514: PUSH
21515: LD_INT 14
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: ST_TO_ADDR
21522: GO 21841
21524: LD_INT 42
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21558
21532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21533: LD_ADDR_VAR 0 3
21537: PUSH
21538: LD_INT 21
21540: PUSH
21541: LD_INT 22
21543: PUSH
21544: LD_INT 23
21546: PUSH
21547: LD_INT 24
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 21841
21558: LD_INT 43
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21592
21566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_INT 21
21574: PUSH
21575: LD_INT 22
21577: PUSH
21578: LD_INT 23
21580: PUSH
21581: LD_INT 24
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: ST_TO_ADDR
21590: GO 21841
21592: LD_INT 44
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21626
21600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21601: LD_ADDR_VAR 0 3
21605: PUSH
21606: LD_INT 21
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_INT 23
21614: PUSH
21615: LD_INT 24
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
21624: GO 21841
21626: LD_INT 45
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21660
21634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_INT 21
21642: PUSH
21643: LD_INT 22
21645: PUSH
21646: LD_INT 23
21648: PUSH
21649: LD_INT 24
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: ST_TO_ADDR
21658: GO 21841
21660: LD_INT 49
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21694
21668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_INT 21
21676: PUSH
21677: LD_INT 22
21679: PUSH
21680: LD_INT 23
21682: PUSH
21683: LD_INT 24
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: ST_TO_ADDR
21692: GO 21841
21694: LD_INT 51
21696: DOUBLE
21697: EQUAL
21698: IFTRUE 21702
21700: GO 21728
21702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21703: LD_ADDR_VAR 0 3
21707: PUSH
21708: LD_INT 21
21710: PUSH
21711: LD_INT 22
21713: PUSH
21714: LD_INT 23
21716: PUSH
21717: LD_INT 24
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: ST_TO_ADDR
21726: GO 21841
21728: LD_INT 52
21730: DOUBLE
21731: EQUAL
21732: IFTRUE 21736
21734: GO 21762
21736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21737: LD_ADDR_VAR 0 3
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_INT 23
21750: PUSH
21751: LD_INT 24
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: ST_TO_ADDR
21760: GO 21841
21762: LD_INT 53
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21788
21770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_INT 23
21778: PUSH
21779: LD_INT 24
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 21841
21788: LD_INT 46
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21814
21796: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21797: LD_ADDR_VAR 0 3
21801: PUSH
21802: LD_INT 23
21804: PUSH
21805: LD_INT 24
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: ST_TO_ADDR
21812: GO 21841
21814: LD_INT 47
21816: DOUBLE
21817: EQUAL
21818: IFTRUE 21822
21820: GO 21840
21822: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_INT 23
21830: PUSH
21831: LD_INT 24
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: ST_TO_ADDR
21838: GO 21841
21840: POP
// result := ( chassis in result ) ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_VAR 0 1
21850: PUSH
21851: LD_VAR 0 3
21855: IN
21856: ST_TO_ADDR
// end ;
21857: LD_VAR 0 3
21861: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
21869: PPUSH
21870: PPUSH
// result := array ;
21871: LD_ADDR_VAR 0 5
21875: PUSH
21876: LD_VAR 0 1
21880: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21881: LD_VAR 0 1
21885: NOT
21886: PUSH
21887: LD_VAR 0 2
21891: NOT
21892: OR
21893: PUSH
21894: LD_VAR 0 3
21898: NOT
21899: OR
21900: PUSH
21901: LD_VAR 0 2
21905: PUSH
21906: LD_VAR 0 1
21910: GREATER
21911: OR
21912: PUSH
21913: LD_VAR 0 3
21917: PUSH
21918: LD_VAR 0 1
21922: GREATER
21923: OR
21924: IFFALSE 21928
// exit ;
21926: GO 22224
// if direction then
21928: LD_VAR 0 4
21932: IFFALSE 21996
// begin d := 1 ;
21934: LD_ADDR_VAR 0 9
21938: PUSH
21939: LD_INT 1
21941: ST_TO_ADDR
// if i_from > i_to then
21942: LD_VAR 0 2
21946: PUSH
21947: LD_VAR 0 3
21951: GREATER
21952: IFFALSE 21978
// length := ( array - i_from ) + i_to else
21954: LD_ADDR_VAR 0 11
21958: PUSH
21959: LD_VAR 0 1
21963: PUSH
21964: LD_VAR 0 2
21968: MINUS
21969: PUSH
21970: LD_VAR 0 3
21974: PLUS
21975: ST_TO_ADDR
21976: GO 21994
// length := i_to - i_from ;
21978: LD_ADDR_VAR 0 11
21982: PUSH
21983: LD_VAR 0 3
21987: PUSH
21988: LD_VAR 0 2
21992: MINUS
21993: ST_TO_ADDR
// end else
21994: GO 22057
// begin d := - 1 ;
21996: LD_ADDR_VAR 0 9
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: ST_TO_ADDR
// if i_from > i_to then
22005: LD_VAR 0 2
22009: PUSH
22010: LD_VAR 0 3
22014: GREATER
22015: IFFALSE 22035
// length := i_from - i_to else
22017: LD_ADDR_VAR 0 11
22021: PUSH
22022: LD_VAR 0 2
22026: PUSH
22027: LD_VAR 0 3
22031: MINUS
22032: ST_TO_ADDR
22033: GO 22057
// length := ( array - i_to ) + i_from ;
22035: LD_ADDR_VAR 0 11
22039: PUSH
22040: LD_VAR 0 1
22044: PUSH
22045: LD_VAR 0 3
22049: MINUS
22050: PUSH
22051: LD_VAR 0 2
22055: PLUS
22056: ST_TO_ADDR
// end ; if not length then
22057: LD_VAR 0 11
22061: NOT
22062: IFFALSE 22066
// exit ;
22064: GO 22224
// tmp := array ;
22066: LD_ADDR_VAR 0 10
22070: PUSH
22071: LD_VAR 0 1
22075: ST_TO_ADDR
// for i = 1 to length do
22076: LD_ADDR_VAR 0 6
22080: PUSH
22081: DOUBLE
22082: LD_INT 1
22084: DEC
22085: ST_TO_ADDR
22086: LD_VAR 0 11
22090: PUSH
22091: FOR_TO
22092: IFFALSE 22212
// begin for j = 1 to array do
22094: LD_ADDR_VAR 0 7
22098: PUSH
22099: DOUBLE
22100: LD_INT 1
22102: DEC
22103: ST_TO_ADDR
22104: LD_VAR 0 1
22108: PUSH
22109: FOR_TO
22110: IFFALSE 22198
// begin k := j + d ;
22112: LD_ADDR_VAR 0 8
22116: PUSH
22117: LD_VAR 0 7
22121: PUSH
22122: LD_VAR 0 9
22126: PLUS
22127: ST_TO_ADDR
// if k > array then
22128: LD_VAR 0 8
22132: PUSH
22133: LD_VAR 0 1
22137: GREATER
22138: IFFALSE 22148
// k := 1 ;
22140: LD_ADDR_VAR 0 8
22144: PUSH
22145: LD_INT 1
22147: ST_TO_ADDR
// if not k then
22148: LD_VAR 0 8
22152: NOT
22153: IFFALSE 22165
// k := array ;
22155: LD_ADDR_VAR 0 8
22159: PUSH
22160: LD_VAR 0 1
22164: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22165: LD_ADDR_VAR 0 10
22169: PUSH
22170: LD_VAR 0 10
22174: PPUSH
22175: LD_VAR 0 8
22179: PPUSH
22180: LD_VAR 0 1
22184: PUSH
22185: LD_VAR 0 7
22189: ARRAY
22190: PPUSH
22191: CALL_OW 1
22195: ST_TO_ADDR
// end ;
22196: GO 22109
22198: POP
22199: POP
// array := tmp ;
22200: LD_ADDR_VAR 0 1
22204: PUSH
22205: LD_VAR 0 10
22209: ST_TO_ADDR
// end ;
22210: GO 22091
22212: POP
22213: POP
// result := array ;
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_VAR 0 1
22223: ST_TO_ADDR
// end ;
22224: LD_VAR 0 5
22228: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22229: LD_INT 0
22231: PPUSH
22232: PPUSH
// result := 0 ;
22233: LD_ADDR_VAR 0 3
22237: PUSH
22238: LD_INT 0
22240: ST_TO_ADDR
// if not array or not value in array then
22241: LD_VAR 0 1
22245: NOT
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: LD_VAR 0 1
22256: IN
22257: NOT
22258: OR
22259: IFFALSE 22263
// exit ;
22261: GO 22317
// for i = 1 to array do
22263: LD_ADDR_VAR 0 4
22267: PUSH
22268: DOUBLE
22269: LD_INT 1
22271: DEC
22272: ST_TO_ADDR
22273: LD_VAR 0 1
22277: PUSH
22278: FOR_TO
22279: IFFALSE 22315
// if value = array [ i ] then
22281: LD_VAR 0 2
22285: PUSH
22286: LD_VAR 0 1
22290: PUSH
22291: LD_VAR 0 4
22295: ARRAY
22296: EQUAL
22297: IFFALSE 22313
// begin result := i ;
22299: LD_ADDR_VAR 0 3
22303: PUSH
22304: LD_VAR 0 4
22308: ST_TO_ADDR
// exit ;
22309: POP
22310: POP
22311: GO 22317
// end ;
22313: GO 22278
22315: POP
22316: POP
// end ;
22317: LD_VAR 0 3
22321: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22322: LD_INT 0
22324: PPUSH
// vc_chassis := chassis ;
22325: LD_ADDR_OWVAR 37
22329: PUSH
22330: LD_VAR 0 1
22334: ST_TO_ADDR
// vc_engine := engine ;
22335: LD_ADDR_OWVAR 39
22339: PUSH
22340: LD_VAR 0 2
22344: ST_TO_ADDR
// vc_control := control ;
22345: LD_ADDR_OWVAR 38
22349: PUSH
22350: LD_VAR 0 3
22354: ST_TO_ADDR
// vc_weapon := weapon ;
22355: LD_ADDR_OWVAR 40
22359: PUSH
22360: LD_VAR 0 4
22364: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22365: LD_ADDR_OWVAR 41
22369: PUSH
22370: LD_VAR 0 5
22374: ST_TO_ADDR
// end ;
22375: LD_VAR 0 6
22379: RET
// export function WantPlant ( unit ) ; var task ; begin
22380: LD_INT 0
22382: PPUSH
22383: PPUSH
// result := false ;
22384: LD_ADDR_VAR 0 2
22388: PUSH
22389: LD_INT 0
22391: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22392: LD_ADDR_VAR 0 3
22396: PUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL_OW 437
22406: ST_TO_ADDR
// if task then
22407: LD_VAR 0 3
22411: IFFALSE 22439
// if task [ 1 ] [ 1 ] = p then
22413: LD_VAR 0 3
22417: PUSH
22418: LD_INT 1
22420: ARRAY
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PUSH
22426: LD_STRING p
22428: EQUAL
22429: IFFALSE 22439
// result := true ;
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
// end ;
22439: LD_VAR 0 2
22443: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
22449: PPUSH
// if pos < 1 then
22450: LD_VAR 0 2
22454: PUSH
22455: LD_INT 1
22457: LESS
22458: IFFALSE 22462
// exit ;
22460: GO 22765
// if pos = 1 then
22462: LD_VAR 0 2
22466: PUSH
22467: LD_INT 1
22469: EQUAL
22470: IFFALSE 22503
// result := Replace ( arr , pos [ 1 ] , value ) else
22472: LD_ADDR_VAR 0 4
22476: PUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: LD_VAR 0 2
22486: PUSH
22487: LD_INT 1
22489: ARRAY
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: CALL_OW 1
22500: ST_TO_ADDR
22501: GO 22765
// begin tmp := arr ;
22503: LD_ADDR_VAR 0 6
22507: PUSH
22508: LD_VAR 0 1
22512: ST_TO_ADDR
// s_arr := [ tmp ] ;
22513: LD_ADDR_VAR 0 7
22517: PUSH
22518: LD_VAR 0 6
22522: PUSH
22523: EMPTY
22524: LIST
22525: ST_TO_ADDR
// for i = 1 to pos - 1 do
22526: LD_ADDR_VAR 0 5
22530: PUSH
22531: DOUBLE
22532: LD_INT 1
22534: DEC
22535: ST_TO_ADDR
22536: LD_VAR 0 2
22540: PUSH
22541: LD_INT 1
22543: MINUS
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22591
// begin tmp := tmp [ pos [ i ] ] ;
22548: LD_ADDR_VAR 0 6
22552: PUSH
22553: LD_VAR 0 6
22557: PUSH
22558: LD_VAR 0 2
22562: PUSH
22563: LD_VAR 0 5
22567: ARRAY
22568: ARRAY
22569: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22570: LD_ADDR_VAR 0 7
22574: PUSH
22575: LD_VAR 0 7
22579: PUSH
22580: LD_VAR 0 6
22584: PUSH
22585: EMPTY
22586: LIST
22587: ADD
22588: ST_TO_ADDR
// end ;
22589: GO 22545
22591: POP
22592: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22593: LD_ADDR_VAR 0 6
22597: PUSH
22598: LD_VAR 0 6
22602: PPUSH
22603: LD_VAR 0 2
22607: PUSH
22608: LD_VAR 0 2
22612: ARRAY
22613: PPUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: CALL_OW 1
22623: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22624: LD_ADDR_VAR 0 7
22628: PUSH
22629: LD_VAR 0 7
22633: PPUSH
22634: LD_VAR 0 7
22638: PPUSH
22639: LD_VAR 0 6
22643: PPUSH
22644: CALL_OW 1
22648: ST_TO_ADDR
// for i = s_arr downto 2 do
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: DOUBLE
22655: LD_VAR 0 7
22659: INC
22660: ST_TO_ADDR
22661: LD_INT 2
22663: PUSH
22664: FOR_DOWNTO
22665: IFFALSE 22749
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22667: LD_ADDR_VAR 0 6
22671: PUSH
22672: LD_VAR 0 7
22676: PUSH
22677: LD_VAR 0 5
22681: PUSH
22682: LD_INT 1
22684: MINUS
22685: ARRAY
22686: PPUSH
22687: LD_VAR 0 2
22691: PUSH
22692: LD_VAR 0 5
22696: PUSH
22697: LD_INT 1
22699: MINUS
22700: ARRAY
22701: PPUSH
22702: LD_VAR 0 7
22706: PUSH
22707: LD_VAR 0 5
22711: ARRAY
22712: PPUSH
22713: CALL_OW 1
22717: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22718: LD_ADDR_VAR 0 7
22722: PUSH
22723: LD_VAR 0 7
22727: PPUSH
22728: LD_VAR 0 5
22732: PUSH
22733: LD_INT 1
22735: MINUS
22736: PPUSH
22737: LD_VAR 0 6
22741: PPUSH
22742: CALL_OW 1
22746: ST_TO_ADDR
// end ;
22747: GO 22664
22749: POP
22750: POP
// result := s_arr [ 1 ] ;
22751: LD_ADDR_VAR 0 4
22755: PUSH
22756: LD_VAR 0 7
22760: PUSH
22761: LD_INT 1
22763: ARRAY
22764: ST_TO_ADDR
// end ; end ;
22765: LD_VAR 0 4
22769: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22770: LD_INT 0
22772: PPUSH
22773: PPUSH
// if not list then
22774: LD_VAR 0 1
22778: NOT
22779: IFFALSE 22783
// exit ;
22781: GO 22874
// i := list [ pos1 ] ;
22783: LD_ADDR_VAR 0 5
22787: PUSH
22788: LD_VAR 0 1
22792: PUSH
22793: LD_VAR 0 2
22797: ARRAY
22798: ST_TO_ADDR
// if not i then
22799: LD_VAR 0 5
22803: NOT
22804: IFFALSE 22808
// exit ;
22806: GO 22874
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22808: LD_ADDR_VAR 0 1
22812: PUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: LD_VAR 0 2
22822: PPUSH
22823: LD_VAR 0 1
22827: PUSH
22828: LD_VAR 0 3
22832: ARRAY
22833: PPUSH
22834: CALL_OW 1
22838: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22839: LD_ADDR_VAR 0 1
22843: PUSH
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_VAR 0 3
22853: PPUSH
22854: LD_VAR 0 5
22858: PPUSH
22859: CALL_OW 1
22863: ST_TO_ADDR
// result := list ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_VAR 0 1
22873: ST_TO_ADDR
// end ;
22874: LD_VAR 0 4
22878: RET
// export function Add ( list , pos , val ) ; begin
22879: LD_INT 0
22881: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
22882: LD_ADDR_VAR 0 4
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: LD_VAR 0 2
22896: PPUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: CALL 22444 0 3
22906: ST_TO_ADDR
22907: LD_VAR 0 4
22911: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22912: LD_INT 0
22914: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22915: LD_ADDR_VAR 0 5
22919: PUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 250
22929: PPUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 251
22939: PPUSH
22940: LD_VAR 0 2
22944: PPUSH
22945: LD_VAR 0 3
22949: PPUSH
22950: LD_VAR 0 4
22954: PPUSH
22955: CALL 22965 0 5
22959: ST_TO_ADDR
// end ;
22960: LD_VAR 0 5
22964: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
// if not list then
22971: LD_VAR 0 3
22975: NOT
22976: IFFALSE 22980
// exit ;
22978: GO 23368
// result := [ ] ;
22980: LD_ADDR_VAR 0 6
22984: PUSH
22985: EMPTY
22986: ST_TO_ADDR
// for i in list do
22987: LD_ADDR_VAR 0 7
22991: PUSH
22992: LD_VAR 0 3
22996: PUSH
22997: FOR_IN
22998: IFFALSE 23200
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23000: LD_ADDR_VAR 0 9
23004: PUSH
23005: LD_VAR 0 7
23009: PPUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: LD_VAR 0 2
23019: PPUSH
23020: CALL_OW 297
23024: ST_TO_ADDR
// if not result then
23025: LD_VAR 0 6
23029: NOT
23030: IFFALSE 23056
// result := [ [ i , tmp ] ] else
23032: LD_ADDR_VAR 0 6
23036: PUSH
23037: LD_VAR 0 7
23041: PUSH
23042: LD_VAR 0 9
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: ST_TO_ADDR
23054: GO 23198
// begin if result [ result ] [ 2 ] < tmp then
23056: LD_VAR 0 6
23060: PUSH
23061: LD_VAR 0 6
23065: ARRAY
23066: PUSH
23067: LD_INT 2
23069: ARRAY
23070: PUSH
23071: LD_VAR 0 9
23075: LESS
23076: IFFALSE 23118
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23078: LD_ADDR_VAR 0 6
23082: PUSH
23083: LD_VAR 0 6
23087: PPUSH
23088: LD_VAR 0 6
23092: PUSH
23093: LD_INT 1
23095: PLUS
23096: PPUSH
23097: LD_VAR 0 7
23101: PUSH
23102: LD_VAR 0 9
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PPUSH
23111: CALL_OW 2
23115: ST_TO_ADDR
23116: GO 23198
// for j = 1 to result do
23118: LD_ADDR_VAR 0 8
23122: PUSH
23123: DOUBLE
23124: LD_INT 1
23126: DEC
23127: ST_TO_ADDR
23128: LD_VAR 0 6
23132: PUSH
23133: FOR_TO
23134: IFFALSE 23196
// begin if tmp < result [ j ] [ 2 ] then
23136: LD_VAR 0 9
23140: PUSH
23141: LD_VAR 0 6
23145: PUSH
23146: LD_VAR 0 8
23150: ARRAY
23151: PUSH
23152: LD_INT 2
23154: ARRAY
23155: LESS
23156: IFFALSE 23194
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23158: LD_ADDR_VAR 0 6
23162: PUSH
23163: LD_VAR 0 6
23167: PPUSH
23168: LD_VAR 0 8
23172: PPUSH
23173: LD_VAR 0 7
23177: PUSH
23178: LD_VAR 0 9
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PPUSH
23187: CALL_OW 2
23191: ST_TO_ADDR
// break ;
23192: GO 23196
// end ; end ;
23194: GO 23133
23196: POP
23197: POP
// end ; end ;
23198: GO 22997
23200: POP
23201: POP
// if result and not asc then
23202: LD_VAR 0 6
23206: PUSH
23207: LD_VAR 0 4
23211: NOT
23212: AND
23213: IFFALSE 23288
// begin tmp := result ;
23215: LD_ADDR_VAR 0 9
23219: PUSH
23220: LD_VAR 0 6
23224: ST_TO_ADDR
// for i = tmp downto 1 do
23225: LD_ADDR_VAR 0 7
23229: PUSH
23230: DOUBLE
23231: LD_VAR 0 9
23235: INC
23236: ST_TO_ADDR
23237: LD_INT 1
23239: PUSH
23240: FOR_DOWNTO
23241: IFFALSE 23286
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23243: LD_ADDR_VAR 0 6
23247: PUSH
23248: LD_VAR 0 6
23252: PPUSH
23253: LD_VAR 0 9
23257: PUSH
23258: LD_VAR 0 7
23262: MINUS
23263: PUSH
23264: LD_INT 1
23266: PLUS
23267: PPUSH
23268: LD_VAR 0 9
23272: PUSH
23273: LD_VAR 0 7
23277: ARRAY
23278: PPUSH
23279: CALL_OW 1
23283: ST_TO_ADDR
23284: GO 23240
23286: POP
23287: POP
// end ; tmp := [ ] ;
23288: LD_ADDR_VAR 0 9
23292: PUSH
23293: EMPTY
23294: ST_TO_ADDR
// if mode then
23295: LD_VAR 0 5
23299: IFFALSE 23368
// begin for i = 1 to result do
23301: LD_ADDR_VAR 0 7
23305: PUSH
23306: DOUBLE
23307: LD_INT 1
23309: DEC
23310: ST_TO_ADDR
23311: LD_VAR 0 6
23315: PUSH
23316: FOR_TO
23317: IFFALSE 23356
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23319: LD_ADDR_VAR 0 9
23323: PUSH
23324: LD_VAR 0 9
23328: PPUSH
23329: LD_VAR 0 7
23333: PPUSH
23334: LD_VAR 0 6
23338: PUSH
23339: LD_VAR 0 7
23343: ARRAY
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: PPUSH
23349: CALL_OW 1
23353: ST_TO_ADDR
23354: GO 23316
23356: POP
23357: POP
// result := tmp ;
23358: LD_ADDR_VAR 0 6
23362: PUSH
23363: LD_VAR 0 9
23367: ST_TO_ADDR
// end ; end ;
23368: LD_VAR 0 6
23372: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23373: LD_INT 0
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23381: LD_ADDR_VAR 0 5
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: ST_TO_ADDR
// if not x or not y then
23403: LD_VAR 0 2
23407: NOT
23408: PUSH
23409: LD_VAR 0 3
23413: NOT
23414: OR
23415: IFFALSE 23419
// exit ;
23417: GO 25065
// if not range then
23419: LD_VAR 0 4
23423: NOT
23424: IFFALSE 23434
// range := 10 ;
23426: LD_ADDR_VAR 0 4
23430: PUSH
23431: LD_INT 10
23433: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23434: LD_ADDR_VAR 0 8
23438: PUSH
23439: LD_INT 81
23441: PUSH
23442: LD_VAR 0 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 92
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_VAR 0 3
23463: PUSH
23464: LD_VAR 0 4
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 21
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: PPUSH
23497: CALL_OW 69
23501: ST_TO_ADDR
// if not tmp then
23502: LD_VAR 0 8
23506: NOT
23507: IFFALSE 23511
// exit ;
23509: GO 25065
// for i in tmp do
23511: LD_ADDR_VAR 0 6
23515: PUSH
23516: LD_VAR 0 8
23520: PUSH
23521: FOR_IN
23522: IFFALSE 25040
// begin points := [ 0 , 0 , 0 ] ;
23524: LD_ADDR_VAR 0 9
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: ST_TO_ADDR
// bpoints := 1 ;
23543: LD_ADDR_VAR 0 10
23547: PUSH
23548: LD_INT 1
23550: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23551: LD_VAR 0 6
23555: PPUSH
23556: CALL_OW 247
23560: PUSH
23561: LD_INT 1
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 24147
23569: POP
// begin if GetClass ( i ) = 1 then
23570: LD_VAR 0 6
23574: PPUSH
23575: CALL_OW 257
23579: PUSH
23580: LD_INT 1
23582: EQUAL
23583: IFFALSE 23604
// points := [ 10 , 5 , 3 ] ;
23585: LD_ADDR_VAR 0 9
23589: PUSH
23590: LD_INT 10
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23604: LD_VAR 0 6
23608: PPUSH
23609: CALL_OW 257
23613: PUSH
23614: LD_INT 2
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: LD_INT 4
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: IN
23628: IFFALSE 23649
// points := [ 3 , 2 , 1 ] ;
23630: LD_ADDR_VAR 0 9
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23649: LD_VAR 0 6
23653: PPUSH
23654: CALL_OW 257
23658: PUSH
23659: LD_INT 5
23661: EQUAL
23662: IFFALSE 23683
// points := [ 130 , 5 , 2 ] ;
23664: LD_ADDR_VAR 0 9
23668: PUSH
23669: LD_INT 130
23671: PUSH
23672: LD_INT 5
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23683: LD_VAR 0 6
23687: PPUSH
23688: CALL_OW 257
23692: PUSH
23693: LD_INT 8
23695: EQUAL
23696: IFFALSE 23717
// points := [ 35 , 35 , 30 ] ;
23698: LD_ADDR_VAR 0 9
23702: PUSH
23703: LD_INT 35
23705: PUSH
23706: LD_INT 35
23708: PUSH
23709: LD_INT 30
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23717: LD_VAR 0 6
23721: PPUSH
23722: CALL_OW 257
23726: PUSH
23727: LD_INT 9
23729: EQUAL
23730: IFFALSE 23751
// points := [ 20 , 55 , 40 ] ;
23732: LD_ADDR_VAR 0 9
23736: PUSH
23737: LD_INT 20
23739: PUSH
23740: LD_INT 55
23742: PUSH
23743: LD_INT 40
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23751: LD_VAR 0 6
23755: PPUSH
23756: CALL_OW 257
23760: PUSH
23761: LD_INT 12
23763: PUSH
23764: LD_INT 16
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: IN
23771: IFFALSE 23792
// points := [ 5 , 3 , 2 ] ;
23773: LD_ADDR_VAR 0 9
23777: PUSH
23778: LD_INT 5
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23792: LD_VAR 0 6
23796: PPUSH
23797: CALL_OW 257
23801: PUSH
23802: LD_INT 17
23804: EQUAL
23805: IFFALSE 23826
// points := [ 100 , 50 , 75 ] ;
23807: LD_ADDR_VAR 0 9
23811: PUSH
23812: LD_INT 100
23814: PUSH
23815: LD_INT 50
23817: PUSH
23818: LD_INT 75
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23826: LD_VAR 0 6
23830: PPUSH
23831: CALL_OW 257
23835: PUSH
23836: LD_INT 15
23838: EQUAL
23839: IFFALSE 23860
// points := [ 10 , 5 , 3 ] ;
23841: LD_ADDR_VAR 0 9
23845: PUSH
23846: LD_INT 10
23848: PUSH
23849: LD_INT 5
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23860: LD_VAR 0 6
23864: PPUSH
23865: CALL_OW 257
23869: PUSH
23870: LD_INT 14
23872: EQUAL
23873: IFFALSE 23894
// points := [ 10 , 0 , 0 ] ;
23875: LD_ADDR_VAR 0 9
23879: PUSH
23880: LD_INT 10
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23894: LD_VAR 0 6
23898: PPUSH
23899: CALL_OW 257
23903: PUSH
23904: LD_INT 11
23906: EQUAL
23907: IFFALSE 23928
// points := [ 30 , 10 , 5 ] ;
23909: LD_ADDR_VAR 0 9
23913: PUSH
23914: LD_INT 30
23916: PUSH
23917: LD_INT 10
23919: PUSH
23920: LD_INT 5
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_INT 5
23935: PPUSH
23936: CALL_OW 321
23940: PUSH
23941: LD_INT 2
23943: EQUAL
23944: IFFALSE 23961
// bpoints := bpoints * 1.8 ;
23946: LD_ADDR_VAR 0 10
23950: PUSH
23951: LD_VAR 0 10
23955: PUSH
23956: LD_REAL  1.80000000000000E+0000
23959: MUL
23960: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23961: LD_VAR 0 6
23965: PPUSH
23966: CALL_OW 257
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: IN
23989: PUSH
23990: LD_VAR 0 1
23994: PPUSH
23995: LD_INT 51
23997: PPUSH
23998: CALL_OW 321
24002: PUSH
24003: LD_INT 2
24005: EQUAL
24006: AND
24007: IFFALSE 24024
// bpoints := bpoints * 1.2 ;
24009: LD_ADDR_VAR 0 10
24013: PUSH
24014: LD_VAR 0 10
24018: PUSH
24019: LD_REAL  1.20000000000000E+0000
24022: MUL
24023: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24024: LD_VAR 0 6
24028: PPUSH
24029: CALL_OW 257
24033: PUSH
24034: LD_INT 5
24036: PUSH
24037: LD_INT 7
24039: PUSH
24040: LD_INT 9
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: IN
24048: PUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: LD_INT 52
24056: PPUSH
24057: CALL_OW 321
24061: PUSH
24062: LD_INT 2
24064: EQUAL
24065: AND
24066: IFFALSE 24083
// bpoints := bpoints * 1.5 ;
24068: LD_ADDR_VAR 0 10
24072: PUSH
24073: LD_VAR 0 10
24077: PUSH
24078: LD_REAL  1.50000000000000E+0000
24081: MUL
24082: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_INT 66
24090: PPUSH
24091: CALL_OW 321
24095: PUSH
24096: LD_INT 2
24098: EQUAL
24099: IFFALSE 24116
// bpoints := bpoints * 1.1 ;
24101: LD_ADDR_VAR 0 10
24105: PUSH
24106: LD_VAR 0 10
24110: PUSH
24111: LD_REAL  1.10000000000000E+0000
24114: MUL
24115: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24116: LD_ADDR_VAR 0 10
24120: PUSH
24121: LD_VAR 0 10
24125: PUSH
24126: LD_VAR 0 6
24130: PPUSH
24131: LD_INT 1
24133: PPUSH
24134: CALL_OW 259
24138: PUSH
24139: LD_REAL  1.15000000000000E+0000
24142: MUL
24143: MUL
24144: ST_TO_ADDR
// end ; unit_vehicle :
24145: GO 24969
24147: LD_INT 2
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24957
24155: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24156: LD_VAR 0 6
24160: PPUSH
24161: CALL_OW 264
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: LD_INT 42
24171: PUSH
24172: LD_INT 24
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: IN
24180: IFFALSE 24201
// points := [ 25 , 5 , 3 ] ;
24182: LD_ADDR_VAR 0 9
24186: PUSH
24187: LD_INT 25
24189: PUSH
24190: LD_INT 5
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24201: LD_VAR 0 6
24205: PPUSH
24206: CALL_OW 264
24210: PUSH
24211: LD_INT 4
24213: PUSH
24214: LD_INT 43
24216: PUSH
24217: LD_INT 25
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: IN
24225: IFFALSE 24246
// points := [ 40 , 15 , 5 ] ;
24227: LD_ADDR_VAR 0 9
24231: PUSH
24232: LD_INT 40
24234: PUSH
24235: LD_INT 15
24237: PUSH
24238: LD_INT 5
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24246: LD_VAR 0 6
24250: PPUSH
24251: CALL_OW 264
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 23
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: IN
24266: IFFALSE 24287
// points := [ 7 , 25 , 8 ] ;
24268: LD_ADDR_VAR 0 9
24272: PUSH
24273: LD_INT 7
24275: PUSH
24276: LD_INT 25
24278: PUSH
24279: LD_INT 8
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24287: LD_VAR 0 6
24291: PPUSH
24292: CALL_OW 264
24296: PUSH
24297: LD_INT 5
24299: PUSH
24300: LD_INT 27
24302: PUSH
24303: LD_INT 44
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: IN
24311: IFFALSE 24332
// points := [ 14 , 50 , 16 ] ;
24313: LD_ADDR_VAR 0 9
24317: PUSH
24318: LD_INT 14
24320: PUSH
24321: LD_INT 50
24323: PUSH
24324: LD_INT 16
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24332: LD_VAR 0 6
24336: PPUSH
24337: CALL_OW 264
24341: PUSH
24342: LD_INT 6
24344: PUSH
24345: LD_INT 46
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: IN
24352: IFFALSE 24373
// points := [ 32 , 120 , 70 ] ;
24354: LD_ADDR_VAR 0 9
24358: PUSH
24359: LD_INT 32
24361: PUSH
24362: LD_INT 120
24364: PUSH
24365: LD_INT 70
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24373: LD_VAR 0 6
24377: PPUSH
24378: CALL_OW 264
24382: PUSH
24383: LD_INT 7
24385: PUSH
24386: LD_INT 28
24388: PUSH
24389: LD_INT 45
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: IN
24397: IFFALSE 24418
// points := [ 35 , 20 , 45 ] ;
24399: LD_ADDR_VAR 0 9
24403: PUSH
24404: LD_INT 35
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 45
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 264
24427: PUSH
24428: LD_INT 47
24430: PUSH
24431: EMPTY
24432: LIST
24433: IN
24434: IFFALSE 24455
// points := [ 67 , 45 , 75 ] ;
24436: LD_ADDR_VAR 0 9
24440: PUSH
24441: LD_INT 67
24443: PUSH
24444: LD_INT 45
24446: PUSH
24447: LD_INT 75
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24455: LD_VAR 0 6
24459: PPUSH
24460: CALL_OW 264
24464: PUSH
24465: LD_INT 26
24467: PUSH
24468: EMPTY
24469: LIST
24470: IN
24471: IFFALSE 24492
// points := [ 120 , 30 , 80 ] ;
24473: LD_ADDR_VAR 0 9
24477: PUSH
24478: LD_INT 120
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 80
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24492: LD_VAR 0 6
24496: PPUSH
24497: CALL_OW 264
24501: PUSH
24502: LD_INT 22
24504: PUSH
24505: EMPTY
24506: LIST
24507: IN
24508: IFFALSE 24529
// points := [ 40 , 1 , 1 ] ;
24510: LD_ADDR_VAR 0 9
24514: PUSH
24515: LD_INT 40
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: LIST
24528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24529: LD_VAR 0 6
24533: PPUSH
24534: CALL_OW 264
24538: PUSH
24539: LD_INT 29
24541: PUSH
24542: EMPTY
24543: LIST
24544: IN
24545: IFFALSE 24566
// points := [ 70 , 200 , 400 ] ;
24547: LD_ADDR_VAR 0 9
24551: PUSH
24552: LD_INT 70
24554: PUSH
24555: LD_INT 200
24557: PUSH
24558: LD_INT 400
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24566: LD_VAR 0 6
24570: PPUSH
24571: CALL_OW 264
24575: PUSH
24576: LD_INT 14
24578: PUSH
24579: LD_INT 53
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: IN
24586: IFFALSE 24607
// points := [ 40 , 10 , 20 ] ;
24588: LD_ADDR_VAR 0 9
24592: PUSH
24593: LD_INT 40
24595: PUSH
24596: LD_INT 10
24598: PUSH
24599: LD_INT 20
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24607: LD_VAR 0 6
24611: PPUSH
24612: CALL_OW 264
24616: PUSH
24617: LD_INT 9
24619: PUSH
24620: EMPTY
24621: LIST
24622: IN
24623: IFFALSE 24644
// points := [ 5 , 70 , 20 ] ;
24625: LD_ADDR_VAR 0 9
24629: PUSH
24630: LD_INT 5
24632: PUSH
24633: LD_INT 70
24635: PUSH
24636: LD_INT 20
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24644: LD_VAR 0 6
24648: PPUSH
24649: CALL_OW 264
24653: PUSH
24654: LD_INT 10
24656: PUSH
24657: EMPTY
24658: LIST
24659: IN
24660: IFFALSE 24681
// points := [ 35 , 110 , 70 ] ;
24662: LD_ADDR_VAR 0 9
24666: PUSH
24667: LD_INT 35
24669: PUSH
24670: LD_INT 110
24672: PUSH
24673: LD_INT 70
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24681: LD_VAR 0 6
24685: PPUSH
24686: CALL_OW 265
24690: PUSH
24691: LD_INT 25
24693: EQUAL
24694: IFFALSE 24715
// points := [ 80 , 65 , 100 ] ;
24696: LD_ADDR_VAR 0 9
24700: PUSH
24701: LD_INT 80
24703: PUSH
24704: LD_INT 65
24706: PUSH
24707: LD_INT 100
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24715: LD_VAR 0 6
24719: PPUSH
24720: CALL_OW 263
24724: PUSH
24725: LD_INT 1
24727: EQUAL
24728: IFFALSE 24763
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24730: LD_ADDR_VAR 0 10
24734: PUSH
24735: LD_VAR 0 10
24739: PUSH
24740: LD_VAR 0 6
24744: PPUSH
24745: CALL_OW 311
24749: PPUSH
24750: LD_INT 3
24752: PPUSH
24753: CALL_OW 259
24757: PUSH
24758: LD_INT 4
24760: MUL
24761: MUL
24762: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24763: LD_VAR 0 6
24767: PPUSH
24768: CALL_OW 263
24772: PUSH
24773: LD_INT 2
24775: EQUAL
24776: IFFALSE 24827
// begin j := IsControledBy ( i ) ;
24778: LD_ADDR_VAR 0 7
24782: PUSH
24783: LD_VAR 0 6
24787: PPUSH
24788: CALL_OW 312
24792: ST_TO_ADDR
// if j then
24793: LD_VAR 0 7
24797: IFFALSE 24827
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24799: LD_ADDR_VAR 0 10
24803: PUSH
24804: LD_VAR 0 10
24808: PUSH
24809: LD_VAR 0 7
24813: PPUSH
24814: LD_INT 3
24816: PPUSH
24817: CALL_OW 259
24821: PUSH
24822: LD_INT 3
24824: MUL
24825: MUL
24826: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24827: LD_VAR 0 6
24831: PPUSH
24832: CALL_OW 264
24836: PUSH
24837: LD_INT 5
24839: PUSH
24840: LD_INT 6
24842: PUSH
24843: LD_INT 46
24845: PUSH
24846: LD_INT 44
24848: PUSH
24849: LD_INT 47
24851: PUSH
24852: LD_INT 45
24854: PUSH
24855: LD_INT 28
24857: PUSH
24858: LD_INT 7
24860: PUSH
24861: LD_INT 27
24863: PUSH
24864: LD_INT 29
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: IN
24879: PUSH
24880: LD_VAR 0 1
24884: PPUSH
24885: LD_INT 52
24887: PPUSH
24888: CALL_OW 321
24892: PUSH
24893: LD_INT 2
24895: EQUAL
24896: AND
24897: IFFALSE 24914
// bpoints := bpoints * 1.2 ;
24899: LD_ADDR_VAR 0 10
24903: PUSH
24904: LD_VAR 0 10
24908: PUSH
24909: LD_REAL  1.20000000000000E+0000
24912: MUL
24913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24914: LD_VAR 0 6
24918: PPUSH
24919: CALL_OW 264
24923: PUSH
24924: LD_INT 6
24926: PUSH
24927: LD_INT 46
24929: PUSH
24930: LD_INT 47
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: IN
24938: IFFALSE 24955
// bpoints := bpoints * 1.2 ;
24940: LD_ADDR_VAR 0 10
24944: PUSH
24945: LD_VAR 0 10
24949: PUSH
24950: LD_REAL  1.20000000000000E+0000
24953: MUL
24954: ST_TO_ADDR
// end ; unit_building :
24955: GO 24969
24957: LD_INT 3
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24968
24965: POP
// ; end ;
24966: GO 24969
24968: POP
// for j = 1 to 3 do
24969: LD_ADDR_VAR 0 7
24973: PUSH
24974: DOUBLE
24975: LD_INT 1
24977: DEC
24978: ST_TO_ADDR
24979: LD_INT 3
24981: PUSH
24982: FOR_TO
24983: IFFALSE 25036
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: LD_VAR 0 5
24994: PPUSH
24995: LD_VAR 0 7
24999: PPUSH
25000: LD_VAR 0 5
25004: PUSH
25005: LD_VAR 0 7
25009: ARRAY
25010: PUSH
25011: LD_VAR 0 9
25015: PUSH
25016: LD_VAR 0 7
25020: ARRAY
25021: PUSH
25022: LD_VAR 0 10
25026: MUL
25027: PLUS
25028: PPUSH
25029: CALL_OW 1
25033: ST_TO_ADDR
25034: GO 24982
25036: POP
25037: POP
// end ;
25038: GO 23521
25040: POP
25041: POP
// result := Replace ( result , 4 , tmp ) ;
25042: LD_ADDR_VAR 0 5
25046: PUSH
25047: LD_VAR 0 5
25051: PPUSH
25052: LD_INT 4
25054: PPUSH
25055: LD_VAR 0 8
25059: PPUSH
25060: CALL_OW 1
25064: ST_TO_ADDR
// end ;
25065: LD_VAR 0 5
25069: RET
// export function DangerAtRange ( unit , range ) ; begin
25070: LD_INT 0
25072: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25073: LD_ADDR_VAR 0 3
25077: PUSH
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL_OW 255
25087: PPUSH
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL_OW 250
25097: PPUSH
25098: LD_VAR 0 1
25102: PPUSH
25103: CALL_OW 251
25107: PPUSH
25108: LD_VAR 0 2
25112: PPUSH
25113: CALL 23373 0 4
25117: ST_TO_ADDR
// end ;
25118: LD_VAR 0 3
25122: RET
// export function DangerInArea ( side , area ) ; begin
25123: LD_INT 0
25125: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_VAR 0 2
25135: PPUSH
25136: LD_INT 81
25138: PUSH
25139: LD_VAR 0 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 70
25152: ST_TO_ADDR
// end ;
25153: LD_VAR 0 3
25157: RET
// export function IsExtension ( b ) ; begin
25158: LD_INT 0
25160: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25161: LD_ADDR_VAR 0 2
25165: PUSH
25166: LD_VAR 0 1
25170: PUSH
25171: LD_INT 23
25173: PUSH
25174: LD_INT 20
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_INT 17
25182: PUSH
25183: LD_INT 24
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 19
25191: PUSH
25192: LD_INT 16
25194: PUSH
25195: LD_INT 25
25197: PUSH
25198: LD_INT 18
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: IN
25213: ST_TO_ADDR
// end ;
25214: LD_VAR 0 2
25218: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
25223: PPUSH
// result := [ ] ;
25224: LD_ADDR_VAR 0 2
25228: PUSH
25229: EMPTY
25230: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: LD_INT 21
25238: PUSH
25239: LD_INT 3
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: ST_TO_ADDR
// if not tmp then
25251: LD_VAR 0 3
25255: NOT
25256: IFFALSE 25260
// exit ;
25258: GO 25310
// for i in tmp do
25260: LD_ADDR_VAR 0 4
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: FOR_IN
25271: IFFALSE 25308
// if GetBase ( i ) = base then
25273: LD_VAR 0 4
25277: PPUSH
25278: CALL_OW 274
25282: PUSH
25283: LD_VAR 0 1
25287: EQUAL
25288: IFFALSE 25306
// result := result ^ i ;
25290: LD_ADDR_VAR 0 2
25294: PUSH
25295: LD_VAR 0 2
25299: PUSH
25300: LD_VAR 0 4
25304: ADD
25305: ST_TO_ADDR
25306: GO 25270
25308: POP
25309: POP
// end ;
25310: LD_VAR 0 2
25314: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25315: LD_INT 0
25317: PPUSH
25318: PPUSH
// if BuildingStatus ( b ) = bs_build then
25319: LD_VAR 0 2
25323: PPUSH
25324: CALL_OW 461
25328: PUSH
25329: LD_INT 1
25331: EQUAL
25332: IFFALSE 25392
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25334: LD_VAR 0 1
25338: PPUSH
25339: LD_STRING h
25341: PUSH
25342: LD_VAR 0 2
25346: PPUSH
25347: CALL_OW 250
25351: PUSH
25352: LD_VAR 0 2
25356: PPUSH
25357: CALL_OW 251
25361: PUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: PPUSH
25388: CALL_OW 446
// end ;
25392: LD_VAR 0 3
25396: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25397: LD_INT 0
25399: PPUSH
25400: PPUSH
25401: PPUSH
25402: PPUSH
25403: PPUSH
25404: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25405: LD_VAR 0 1
25409: NOT
25410: PUSH
25411: LD_VAR 0 1
25415: PPUSH
25416: CALL_OW 263
25420: PUSH
25421: LD_INT 2
25423: EQUAL
25424: NOT
25425: OR
25426: IFFALSE 25430
// exit ;
25428: GO 25746
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25430: LD_ADDR_VAR 0 6
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_VAR 0 1
25442: PPUSH
25443: CALL_OW 255
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 30
25457: PUSH
25458: LD_INT 36
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 34
25467: PUSH
25468: LD_INT 31
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PPUSH
25484: CALL_OW 69
25488: ST_TO_ADDR
// if not tmp then
25489: LD_VAR 0 6
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25746
// result := [ ] ;
25498: LD_ADDR_VAR 0 2
25502: PUSH
25503: EMPTY
25504: ST_TO_ADDR
// for i in tmp do
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_VAR 0 6
25514: PUSH
25515: FOR_IN
25516: IFFALSE 25587
// begin t := UnitsInside ( i ) ;
25518: LD_ADDR_VAR 0 4
25522: PUSH
25523: LD_VAR 0 3
25527: PPUSH
25528: CALL_OW 313
25532: ST_TO_ADDR
// if t then
25533: LD_VAR 0 4
25537: IFFALSE 25585
// for j in t do
25539: LD_ADDR_VAR 0 7
25543: PUSH
25544: LD_VAR 0 4
25548: PUSH
25549: FOR_IN
25550: IFFALSE 25583
// result := Insert ( result , result + 1 , j ) ;
25552: LD_ADDR_VAR 0 2
25556: PUSH
25557: LD_VAR 0 2
25561: PPUSH
25562: LD_VAR 0 2
25566: PUSH
25567: LD_INT 1
25569: PLUS
25570: PPUSH
25571: LD_VAR 0 7
25575: PPUSH
25576: CALL_OW 2
25580: ST_TO_ADDR
25581: GO 25549
25583: POP
25584: POP
// end ;
25585: GO 25515
25587: POP
25588: POP
// if not result then
25589: LD_VAR 0 2
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25746
// mech := result [ 1 ] ;
25598: LD_ADDR_VAR 0 5
25602: PUSH
25603: LD_VAR 0 2
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: ST_TO_ADDR
// if result > 1 then
25612: LD_VAR 0 2
25616: PUSH
25617: LD_INT 1
25619: GREATER
25620: IFFALSE 25732
// for i = 2 to result do
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: DOUBLE
25628: LD_INT 2
25630: DEC
25631: ST_TO_ADDR
25632: LD_VAR 0 2
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25730
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25640: LD_ADDR_VAR 0 4
25644: PUSH
25645: LD_VAR 0 2
25649: PUSH
25650: LD_VAR 0 3
25654: ARRAY
25655: PPUSH
25656: LD_INT 3
25658: PPUSH
25659: CALL_OW 259
25663: PUSH
25664: LD_VAR 0 2
25668: PUSH
25669: LD_VAR 0 3
25673: ARRAY
25674: PPUSH
25675: CALL_OW 432
25679: MINUS
25680: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25681: LD_VAR 0 4
25685: PUSH
25686: LD_VAR 0 5
25690: PPUSH
25691: LD_INT 3
25693: PPUSH
25694: CALL_OW 259
25698: PUSH
25699: LD_VAR 0 5
25703: PPUSH
25704: CALL_OW 432
25708: MINUS
25709: GREATEREQUAL
25710: IFFALSE 25728
// mech := result [ i ] ;
25712: LD_ADDR_VAR 0 5
25716: PUSH
25717: LD_VAR 0 2
25721: PUSH
25722: LD_VAR 0 3
25726: ARRAY
25727: ST_TO_ADDR
// end ;
25728: GO 25637
25730: POP
25731: POP
// ComLinkTo ( vehicle , mech ) ;
25732: LD_VAR 0 1
25736: PPUSH
25737: LD_VAR 0 5
25741: PPUSH
25742: CALL_OW 135
// end ;
25746: LD_VAR 0 2
25750: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25751: LD_INT 0
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
// result := [ ] ;
25766: LD_ADDR_VAR 0 6
25770: PUSH
25771: EMPTY
25772: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 266
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: IN
25793: NOT
25794: IFFALSE 25798
// exit ;
25796: GO 27317
// if name then
25798: LD_VAR 0 2
25802: IFFALSE 25818
// SetBName ( base_dep , name ) ;
25804: LD_VAR 0 1
25808: PPUSH
25809: LD_VAR 0 2
25813: PPUSH
25814: CALL_OW 500
// base := GetBase ( base_dep ) ;
25818: LD_ADDR_VAR 0 14
25822: PUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 274
25832: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25833: LD_ADDR_VAR 0 15
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 255
25847: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25848: LD_ADDR_VAR 0 16
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 248
25862: ST_TO_ADDR
// if sources then
25863: LD_VAR 0 4
25867: IFFALSE 25914
// for i = 1 to 3 do
25869: LD_ADDR_VAR 0 7
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_INT 3
25881: PUSH
25882: FOR_TO
25883: IFFALSE 25912
// AddResourceType ( base , i , sources [ i ] ) ;
25885: LD_VAR 0 14
25889: PPUSH
25890: LD_VAR 0 7
25894: PPUSH
25895: LD_VAR 0 4
25899: PUSH
25900: LD_VAR 0 7
25904: ARRAY
25905: PPUSH
25906: CALL_OW 276
25910: GO 25882
25912: POP
25913: POP
// buildings := GetBaseBuildings ( base ) ;
25914: LD_ADDR_VAR 0 17
25918: PUSH
25919: LD_VAR 0 14
25923: PPUSH
25924: CALL 25219 0 1
25928: ST_TO_ADDR
// InitHc ;
25929: CALL_OW 19
// InitUc ;
25933: CALL_OW 18
// uc_side := side ;
25937: LD_ADDR_OWVAR 20
25941: PUSH
25942: LD_VAR 0 15
25946: ST_TO_ADDR
// uc_nation := nation ;
25947: LD_ADDR_OWVAR 21
25951: PUSH
25952: LD_VAR 0 16
25956: ST_TO_ADDR
// if buildings then
25957: LD_VAR 0 17
25961: IFFALSE 27176
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25963: LD_VAR 0 17
25967: PPUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 30
25973: PUSH
25974: LD_INT 32
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 30
25983: PUSH
25984: LD_INT 33
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 72
26000: IFFALSE 26083
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26002: LD_ADDR_VAR 0 7
26006: PUSH
26007: LD_VAR 0 17
26011: PPUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 30
26017: PUSH
26018: LD_INT 32
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 30
26027: PUSH
26028: LD_INT 33
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: PPUSH
26040: CALL_OW 72
26044: PUSH
26045: FOR_IN
26046: IFFALSE 26081
// begin if not GetBWeapon ( i ) then
26048: LD_VAR 0 7
26052: PPUSH
26053: CALL_OW 269
26057: NOT
26058: IFFALSE 26079
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
26060: LD_VAR 0 7
26064: PPUSH
26065: LD_VAR 0 7
26069: PPUSH
26070: CALL 27322 0 1
26074: PPUSH
26075: CALL_OW 431
// end ;
26079: GO 26045
26081: POP
26082: POP
// end ; for i = 1 to personel do
26083: LD_ADDR_VAR 0 7
26087: PUSH
26088: DOUBLE
26089: LD_INT 1
26091: DEC
26092: ST_TO_ADDR
26093: LD_VAR 0 5
26097: PUSH
26098: FOR_TO
26099: IFFALSE 27156
// begin if i > 4 then
26101: LD_VAR 0 7
26105: PUSH
26106: LD_INT 4
26108: GREATER
26109: IFFALSE 26113
// break ;
26111: GO 27156
// case i of 1 :
26113: LD_VAR 0 7
26117: PUSH
26118: LD_INT 1
26120: DOUBLE
26121: EQUAL
26122: IFTRUE 26126
26124: GO 26199
26126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26127: LD_ADDR_VAR 0 11
26131: PUSH
26132: LD_VAR 0 17
26136: PPUSH
26137: LD_INT 22
26139: PUSH
26140: LD_VAR 0 15
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 30
26154: PUSH
26155: LD_INT 32
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 30
26164: PUSH
26165: LD_INT 4
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 30
26174: PUSH
26175: LD_INT 5
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PPUSH
26192: CALL_OW 72
26196: ST_TO_ADDR
26197: GO 26421
26199: LD_INT 2
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26269
26207: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26208: LD_ADDR_VAR 0 11
26212: PUSH
26213: LD_VAR 0 17
26217: PPUSH
26218: LD_INT 22
26220: PUSH
26221: LD_VAR 0 15
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 30
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 30
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PPUSH
26262: CALL_OW 72
26266: ST_TO_ADDR
26267: GO 26421
26269: LD_INT 3
26271: DOUBLE
26272: EQUAL
26273: IFTRUE 26277
26275: GO 26339
26277: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26278: LD_ADDR_VAR 0 11
26282: PUSH
26283: LD_VAR 0 17
26287: PPUSH
26288: LD_INT 22
26290: PUSH
26291: LD_VAR 0 15
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 30
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 30
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 72
26336: ST_TO_ADDR
26337: GO 26421
26339: LD_INT 4
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26420
26347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26348: LD_ADDR_VAR 0 11
26352: PUSH
26353: LD_VAR 0 17
26357: PPUSH
26358: LD_INT 22
26360: PUSH
26361: LD_VAR 0 15
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: LD_INT 30
26375: PUSH
26376: LD_INT 6
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 30
26385: PUSH
26386: LD_INT 7
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 8
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PPUSH
26413: CALL_OW 72
26417: ST_TO_ADDR
26418: GO 26421
26420: POP
// if i = 1 then
26421: LD_VAR 0 7
26425: PUSH
26426: LD_INT 1
26428: EQUAL
26429: IFFALSE 26540
// begin tmp := [ ] ;
26431: LD_ADDR_VAR 0 18
26435: PUSH
26436: EMPTY
26437: ST_TO_ADDR
// for j in f do
26438: LD_ADDR_VAR 0 8
26442: PUSH
26443: LD_VAR 0 11
26447: PUSH
26448: FOR_IN
26449: IFFALSE 26522
// if GetBType ( j ) = b_bunker then
26451: LD_VAR 0 8
26455: PPUSH
26456: CALL_OW 266
26460: PUSH
26461: LD_INT 32
26463: EQUAL
26464: IFFALSE 26491
// tmp := Insert ( tmp , 1 , j ) else
26466: LD_ADDR_VAR 0 18
26470: PUSH
26471: LD_VAR 0 18
26475: PPUSH
26476: LD_INT 1
26478: PPUSH
26479: LD_VAR 0 8
26483: PPUSH
26484: CALL_OW 2
26488: ST_TO_ADDR
26489: GO 26520
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26491: LD_ADDR_VAR 0 18
26495: PUSH
26496: LD_VAR 0 18
26500: PPUSH
26501: LD_VAR 0 18
26505: PUSH
26506: LD_INT 1
26508: PLUS
26509: PPUSH
26510: LD_VAR 0 8
26514: PPUSH
26515: CALL_OW 2
26519: ST_TO_ADDR
26520: GO 26448
26522: POP
26523: POP
// if tmp then
26524: LD_VAR 0 18
26528: IFFALSE 26540
// f := tmp ;
26530: LD_ADDR_VAR 0 11
26534: PUSH
26535: LD_VAR 0 18
26539: ST_TO_ADDR
// end ; x := personel [ i ] ;
26540: LD_ADDR_VAR 0 12
26544: PUSH
26545: LD_VAR 0 5
26549: PUSH
26550: LD_VAR 0 7
26554: ARRAY
26555: ST_TO_ADDR
// if x = - 1 then
26556: LD_VAR 0 12
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: EQUAL
26565: IFFALSE 26774
// begin for j in f do
26567: LD_ADDR_VAR 0 8
26571: PUSH
26572: LD_VAR 0 11
26576: PUSH
26577: FOR_IN
26578: IFFALSE 26770
// repeat InitHc ;
26580: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26584: LD_VAR 0 8
26588: PPUSH
26589: CALL_OW 266
26593: PUSH
26594: LD_INT 5
26596: EQUAL
26597: IFFALSE 26667
// begin if UnitsInside ( j ) < 3 then
26599: LD_VAR 0 8
26603: PPUSH
26604: CALL_OW 313
26608: PUSH
26609: LD_INT 3
26611: LESS
26612: IFFALSE 26648
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26614: LD_INT 0
26616: PPUSH
26617: LD_INT 5
26619: PUSH
26620: LD_INT 8
26622: PUSH
26623: LD_INT 9
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: PUSH
26631: LD_VAR 0 16
26635: ARRAY
26636: PPUSH
26637: LD_VAR 0 3
26641: PPUSH
26642: CALL_OW 380
26646: GO 26665
// PrepareHuman ( false , i , skill ) ;
26648: LD_INT 0
26650: PPUSH
26651: LD_VAR 0 7
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: CALL_OW 380
// end else
26665: GO 26684
// PrepareHuman ( false , i , skill ) ;
26667: LD_INT 0
26669: PPUSH
26670: LD_VAR 0 7
26674: PPUSH
26675: LD_VAR 0 3
26679: PPUSH
26680: CALL_OW 380
// un := CreateHuman ;
26684: LD_ADDR_VAR 0 13
26688: PUSH
26689: CALL_OW 44
26693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26694: LD_ADDR_VAR 0 6
26698: PUSH
26699: LD_VAR 0 6
26703: PPUSH
26704: LD_INT 1
26706: PPUSH
26707: LD_VAR 0 13
26711: PPUSH
26712: CALL_OW 2
26716: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26717: LD_VAR 0 13
26721: PPUSH
26722: LD_VAR 0 8
26726: PPUSH
26727: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26731: LD_VAR 0 8
26735: PPUSH
26736: CALL_OW 313
26740: PUSH
26741: LD_INT 6
26743: EQUAL
26744: PUSH
26745: LD_VAR 0 8
26749: PPUSH
26750: CALL_OW 266
26754: PUSH
26755: LD_INT 32
26757: PUSH
26758: LD_INT 31
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: IN
26765: OR
26766: IFFALSE 26580
26768: GO 26577
26770: POP
26771: POP
// end else
26772: GO 27154
// for j = 1 to x do
26774: LD_ADDR_VAR 0 8
26778: PUSH
26779: DOUBLE
26780: LD_INT 1
26782: DEC
26783: ST_TO_ADDR
26784: LD_VAR 0 12
26788: PUSH
26789: FOR_TO
26790: IFFALSE 27152
// begin InitHc ;
26792: CALL_OW 19
// if not f then
26796: LD_VAR 0 11
26800: NOT
26801: IFFALSE 26890
// begin PrepareHuman ( false , i , skill ) ;
26803: LD_INT 0
26805: PPUSH
26806: LD_VAR 0 7
26810: PPUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 380
// un := CreateHuman ;
26820: LD_ADDR_VAR 0 13
26824: PUSH
26825: CALL_OW 44
26829: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26830: LD_ADDR_VAR 0 6
26834: PUSH
26835: LD_VAR 0 6
26839: PPUSH
26840: LD_INT 1
26842: PPUSH
26843: LD_VAR 0 13
26847: PPUSH
26848: CALL_OW 2
26852: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26853: LD_VAR 0 13
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 250
26867: PPUSH
26868: LD_VAR 0 1
26872: PPUSH
26873: CALL_OW 251
26877: PPUSH
26878: LD_INT 10
26880: PPUSH
26881: LD_INT 0
26883: PPUSH
26884: CALL_OW 50
// continue ;
26888: GO 26789
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26890: LD_VAR 0 11
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: PPUSH
26899: CALL_OW 313
26903: PUSH
26904: LD_VAR 0 11
26908: PUSH
26909: LD_INT 1
26911: ARRAY
26912: PPUSH
26913: CALL_OW 266
26917: PUSH
26918: LD_INT 32
26920: PUSH
26921: LD_INT 31
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: IN
26928: AND
26929: PUSH
26930: LD_VAR 0 11
26934: PUSH
26935: LD_INT 1
26937: ARRAY
26938: PPUSH
26939: CALL_OW 313
26943: PUSH
26944: LD_INT 6
26946: EQUAL
26947: OR
26948: IFFALSE 26968
// f := Delete ( f , 1 ) ;
26950: LD_ADDR_VAR 0 11
26954: PUSH
26955: LD_VAR 0 11
26959: PPUSH
26960: LD_INT 1
26962: PPUSH
26963: CALL_OW 3
26967: ST_TO_ADDR
// if not f then
26968: LD_VAR 0 11
26972: NOT
26973: IFFALSE 26991
// begin x := x + 2 ;
26975: LD_ADDR_VAR 0 12
26979: PUSH
26980: LD_VAR 0 12
26984: PUSH
26985: LD_INT 2
26987: PLUS
26988: ST_TO_ADDR
// continue ;
26989: GO 26789
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26991: LD_VAR 0 11
26995: PUSH
26996: LD_INT 1
26998: ARRAY
26999: PPUSH
27000: CALL_OW 266
27004: PUSH
27005: LD_INT 5
27007: EQUAL
27008: IFFALSE 27082
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27010: LD_VAR 0 11
27014: PUSH
27015: LD_INT 1
27017: ARRAY
27018: PPUSH
27019: CALL_OW 313
27023: PUSH
27024: LD_INT 3
27026: LESS
27027: IFFALSE 27063
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27029: LD_INT 0
27031: PPUSH
27032: LD_INT 5
27034: PUSH
27035: LD_INT 8
27037: PUSH
27038: LD_INT 9
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: PUSH
27046: LD_VAR 0 16
27050: ARRAY
27051: PPUSH
27052: LD_VAR 0 3
27056: PPUSH
27057: CALL_OW 380
27061: GO 27080
// PrepareHuman ( false , i , skill ) ;
27063: LD_INT 0
27065: PPUSH
27066: LD_VAR 0 7
27070: PPUSH
27071: LD_VAR 0 3
27075: PPUSH
27076: CALL_OW 380
// end else
27080: GO 27099
// PrepareHuman ( false , i , skill ) ;
27082: LD_INT 0
27084: PPUSH
27085: LD_VAR 0 7
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: CALL_OW 380
// un := CreateHuman ;
27099: LD_ADDR_VAR 0 13
27103: PUSH
27104: CALL_OW 44
27108: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27109: LD_ADDR_VAR 0 6
27113: PUSH
27114: LD_VAR 0 6
27118: PPUSH
27119: LD_INT 1
27121: PPUSH
27122: LD_VAR 0 13
27126: PPUSH
27127: CALL_OW 2
27131: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27132: LD_VAR 0 13
27136: PPUSH
27137: LD_VAR 0 11
27141: PUSH
27142: LD_INT 1
27144: ARRAY
27145: PPUSH
27146: CALL_OW 52
// end ;
27150: GO 26789
27152: POP
27153: POP
// end ;
27154: GO 26098
27156: POP
27157: POP
// result := result ^ buildings ;
27158: LD_ADDR_VAR 0 6
27162: PUSH
27163: LD_VAR 0 6
27167: PUSH
27168: LD_VAR 0 17
27172: ADD
27173: ST_TO_ADDR
// end else
27174: GO 27317
// begin for i = 1 to personel do
27176: LD_ADDR_VAR 0 7
27180: PUSH
27181: DOUBLE
27182: LD_INT 1
27184: DEC
27185: ST_TO_ADDR
27186: LD_VAR 0 5
27190: PUSH
27191: FOR_TO
27192: IFFALSE 27315
// begin if i > 4 then
27194: LD_VAR 0 7
27198: PUSH
27199: LD_INT 4
27201: GREATER
27202: IFFALSE 27206
// break ;
27204: GO 27315
// x := personel [ i ] ;
27206: LD_ADDR_VAR 0 12
27210: PUSH
27211: LD_VAR 0 5
27215: PUSH
27216: LD_VAR 0 7
27220: ARRAY
27221: ST_TO_ADDR
// if x = - 1 then
27222: LD_VAR 0 12
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: EQUAL
27231: IFFALSE 27235
// continue ;
27233: GO 27191
// PrepareHuman ( false , i , skill ) ;
27235: LD_INT 0
27237: PPUSH
27238: LD_VAR 0 7
27242: PPUSH
27243: LD_VAR 0 3
27247: PPUSH
27248: CALL_OW 380
// un := CreateHuman ;
27252: LD_ADDR_VAR 0 13
27256: PUSH
27257: CALL_OW 44
27261: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27262: LD_VAR 0 13
27266: PPUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 250
27276: PPUSH
27277: LD_VAR 0 1
27281: PPUSH
27282: CALL_OW 251
27286: PPUSH
27287: LD_INT 10
27289: PPUSH
27290: LD_INT 0
27292: PPUSH
27293: CALL_OW 50
// result := result ^ un ;
27297: LD_ADDR_VAR 0 6
27301: PUSH
27302: LD_VAR 0 6
27306: PUSH
27307: LD_VAR 0 13
27311: ADD
27312: ST_TO_ADDR
// end ;
27313: GO 27191
27315: POP
27316: POP
// end ; end ;
27317: LD_VAR 0 6
27321: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
// result := false ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 0
27347: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27348: LD_VAR 0 1
27352: NOT
27353: PUSH
27354: LD_VAR 0 1
27358: PPUSH
27359: CALL_OW 266
27363: PUSH
27364: LD_INT 32
27366: PUSH
27367: LD_INT 33
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: IN
27374: NOT
27375: OR
27376: IFFALSE 27380
// exit ;
27378: GO 28511
// nat := GetNation ( tower ) ;
27380: LD_ADDR_VAR 0 11
27384: PUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 248
27394: ST_TO_ADDR
// side := GetSide ( tower ) ;
27395: LD_ADDR_VAR 0 15
27399: PUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 255
27409: ST_TO_ADDR
// x := GetX ( tower ) ;
27410: LD_ADDR_VAR 0 9
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 250
27424: ST_TO_ADDR
// y := GetY ( tower ) ;
27425: LD_ADDR_VAR 0 10
27429: PUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 251
27439: ST_TO_ADDR
// if not x or not y then
27440: LD_VAR 0 9
27444: NOT
27445: PUSH
27446: LD_VAR 0 10
27450: NOT
27451: OR
27452: IFFALSE 27456
// exit ;
27454: GO 28511
// weapon := 0 ;
27456: LD_ADDR_VAR 0 17
27460: PUSH
27461: LD_INT 0
27463: ST_TO_ADDR
// fac_list := [ ] ;
27464: LD_ADDR_VAR 0 16
27468: PUSH
27469: EMPTY
27470: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
27471: LD_ADDR_VAR 0 5
27475: PUSH
27476: LD_VAR 0 1
27480: PPUSH
27481: CALL_OW 274
27485: PPUSH
27486: CALL 25219 0 1
27490: PPUSH
27491: LD_INT 30
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PPUSH
27501: CALL_OW 72
27505: ST_TO_ADDR
// if not factories then
27506: LD_VAR 0 5
27510: NOT
27511: IFFALSE 27515
// exit ;
27513: GO 28511
// for i in factories do
27515: LD_ADDR_VAR 0 7
27519: PUSH
27520: LD_VAR 0 5
27524: PUSH
27525: FOR_IN
27526: IFFALSE 27551
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27528: LD_ADDR_VAR 0 16
27532: PUSH
27533: LD_VAR 0 16
27537: PUSH
27538: LD_VAR 0 7
27542: PPUSH
27543: CALL_OW 478
27547: UNION
27548: ST_TO_ADDR
27549: GO 27525
27551: POP
27552: POP
// if not fac_list then
27553: LD_VAR 0 16
27557: NOT
27558: IFFALSE 27562
// exit ;
27560: GO 28511
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27562: LD_ADDR_VAR 0 4
27566: PUSH
27567: LD_INT 4
27569: PUSH
27570: LD_INT 5
27572: PUSH
27573: LD_INT 9
27575: PUSH
27576: LD_INT 10
27578: PUSH
27579: LD_INT 6
27581: PUSH
27582: LD_INT 7
27584: PUSH
27585: LD_INT 11
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 27
27599: PUSH
27600: LD_INT 28
27602: PUSH
27603: LD_INT 26
27605: PUSH
27606: LD_INT 30
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 43
27617: PUSH
27618: LD_INT 44
27620: PUSH
27621: LD_INT 46
27623: PUSH
27624: LD_INT 45
27626: PUSH
27627: LD_INT 47
27629: PUSH
27630: LD_INT 49
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: PUSH
27646: LD_VAR 0 11
27650: ARRAY
27651: ST_TO_ADDR
// for i in list do
27652: LD_ADDR_VAR 0 7
27656: PUSH
27657: LD_VAR 0 4
27661: PUSH
27662: FOR_IN
27663: IFFALSE 27696
// if not i in fac_list then
27665: LD_VAR 0 7
27669: PUSH
27670: LD_VAR 0 16
27674: IN
27675: NOT
27676: IFFALSE 27694
// list := list diff i ;
27678: LD_ADDR_VAR 0 4
27682: PUSH
27683: LD_VAR 0 4
27687: PUSH
27688: LD_VAR 0 7
27692: DIFF
27693: ST_TO_ADDR
27694: GO 27662
27696: POP
27697: POP
// if not list then
27698: LD_VAR 0 4
27702: NOT
27703: IFFALSE 27707
// exit ;
27705: GO 28511
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27707: LD_VAR 0 11
27711: PUSH
27712: LD_INT 3
27714: EQUAL
27715: PUSH
27716: LD_INT 49
27718: PUSH
27719: LD_VAR 0 4
27723: IN
27724: AND
27725: PUSH
27726: LD_INT 31
27728: PPUSH
27729: LD_VAR 0 15
27733: PPUSH
27734: CALL_OW 321
27738: PUSH
27739: LD_INT 2
27741: EQUAL
27742: AND
27743: IFFALSE 27803
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27745: LD_INT 22
27747: PUSH
27748: LD_VAR 0 15
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 35
27759: PUSH
27760: LD_INT 49
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 91
27769: PUSH
27770: LD_VAR 0 1
27774: PUSH
27775: LD_INT 10
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: NOT
27793: IFFALSE 27803
// weapon := ru_time_lapser ;
27795: LD_ADDR_VAR 0 17
27799: PUSH
27800: LD_INT 49
27802: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27803: LD_VAR 0 11
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: IN
27818: PUSH
27819: LD_INT 11
27821: PUSH
27822: LD_VAR 0 4
27826: IN
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_VAR 0 4
27835: IN
27836: OR
27837: AND
27838: PUSH
27839: LD_INT 6
27841: PPUSH
27842: LD_VAR 0 15
27846: PPUSH
27847: CALL_OW 321
27851: PUSH
27852: LD_INT 2
27854: EQUAL
27855: AND
27856: IFFALSE 28021
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27858: LD_INT 22
27860: PUSH
27861: LD_VAR 0 15
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 35
27875: PUSH
27876: LD_INT 11
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 35
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 91
27900: PUSH
27901: LD_VAR 0 1
27905: PUSH
27906: LD_INT 18
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: PPUSH
27919: CALL_OW 69
27923: NOT
27924: PUSH
27925: LD_INT 22
27927: PUSH
27928: LD_VAR 0 15
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 30
27942: PUSH
27943: LD_INT 32
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 30
27952: PUSH
27953: LD_INT 33
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 91
27967: PUSH
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: PPUSH
27989: CALL_OW 69
27993: PUSH
27994: LD_INT 2
27996: GREATER
27997: AND
27998: IFFALSE 28021
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28000: LD_ADDR_VAR 0 17
28004: PUSH
28005: LD_INT 11
28007: PUSH
28008: LD_INT 30
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_VAR 0 11
28019: ARRAY
28020: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28021: LD_VAR 0 17
28025: NOT
28026: PUSH
28027: LD_INT 40
28029: PPUSH
28030: LD_VAR 0 15
28034: PPUSH
28035: CALL_OW 321
28039: PUSH
28040: LD_INT 2
28042: EQUAL
28043: AND
28044: PUSH
28045: LD_INT 7
28047: PUSH
28048: LD_VAR 0 4
28052: IN
28053: PUSH
28054: LD_INT 28
28056: PUSH
28057: LD_VAR 0 4
28061: IN
28062: OR
28063: PUSH
28064: LD_INT 45
28066: PUSH
28067: LD_VAR 0 4
28071: IN
28072: OR
28073: AND
28074: IFFALSE 28328
// begin hex := GetHexInfo ( x , y ) ;
28076: LD_ADDR_VAR 0 3
28080: PUSH
28081: LD_VAR 0 9
28085: PPUSH
28086: LD_VAR 0 10
28090: PPUSH
28091: CALL_OW 546
28095: ST_TO_ADDR
// if hex [ 1 ] then
28096: LD_VAR 0 3
28100: PUSH
28101: LD_INT 1
28103: ARRAY
28104: IFFALSE 28108
// exit ;
28106: GO 28511
// height := hex [ 2 ] ;
28108: LD_ADDR_VAR 0 14
28112: PUSH
28113: LD_VAR 0 3
28117: PUSH
28118: LD_INT 2
28120: ARRAY
28121: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28122: LD_ADDR_VAR 0 13
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 3
28135: PUSH
28136: LD_INT 5
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: ST_TO_ADDR
// for i in tmp do
28145: LD_ADDR_VAR 0 7
28149: PUSH
28150: LD_VAR 0 13
28154: PUSH
28155: FOR_IN
28156: IFFALSE 28326
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28158: LD_ADDR_VAR 0 8
28162: PUSH
28163: LD_VAR 0 9
28167: PPUSH
28168: LD_VAR 0 7
28172: PPUSH
28173: LD_INT 5
28175: PPUSH
28176: CALL_OW 272
28180: PUSH
28181: LD_VAR 0 10
28185: PPUSH
28186: LD_VAR 0 7
28190: PPUSH
28191: LD_INT 5
28193: PPUSH
28194: CALL_OW 273
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28203: LD_VAR 0 8
28207: PUSH
28208: LD_INT 1
28210: ARRAY
28211: PPUSH
28212: LD_VAR 0 8
28216: PUSH
28217: LD_INT 2
28219: ARRAY
28220: PPUSH
28221: CALL_OW 488
28225: IFFALSE 28324
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28227: LD_ADDR_VAR 0 3
28231: PUSH
28232: LD_VAR 0 8
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PPUSH
28241: LD_VAR 0 8
28245: PUSH
28246: LD_INT 2
28248: ARRAY
28249: PPUSH
28250: CALL_OW 546
28254: ST_TO_ADDR
// if hex [ 1 ] then
28255: LD_VAR 0 3
28259: PUSH
28260: LD_INT 1
28262: ARRAY
28263: IFFALSE 28267
// continue ;
28265: GO 28155
// h := hex [ 2 ] ;
28267: LD_ADDR_VAR 0 12
28271: PUSH
28272: LD_VAR 0 3
28276: PUSH
28277: LD_INT 2
28279: ARRAY
28280: ST_TO_ADDR
// if h + 7 < height then
28281: LD_VAR 0 12
28285: PUSH
28286: LD_INT 7
28288: PLUS
28289: PUSH
28290: LD_VAR 0 14
28294: LESS
28295: IFFALSE 28324
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28297: LD_ADDR_VAR 0 17
28301: PUSH
28302: LD_INT 7
28304: PUSH
28305: LD_INT 28
28307: PUSH
28308: LD_INT 45
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: LD_VAR 0 11
28320: ARRAY
28321: ST_TO_ADDR
// break ;
28322: GO 28326
// end ; end ; end ;
28324: GO 28155
28326: POP
28327: POP
// end ; if not weapon then
28328: LD_VAR 0 17
28332: NOT
28333: IFFALSE 28393
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28335: LD_ADDR_VAR 0 4
28339: PUSH
28340: LD_VAR 0 4
28344: PUSH
28345: LD_INT 11
28347: PUSH
28348: LD_INT 30
28350: PUSH
28351: LD_INT 49
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: DIFF
28359: ST_TO_ADDR
// if not list then
28360: LD_VAR 0 4
28364: NOT
28365: IFFALSE 28369
// exit ;
28367: GO 28511
// weapon := list [ rand ( 1 , list ) ] ;
28369: LD_ADDR_VAR 0 17
28373: PUSH
28374: LD_VAR 0 4
28378: PUSH
28379: LD_INT 1
28381: PPUSH
28382: LD_VAR 0 4
28386: PPUSH
28387: CALL_OW 12
28391: ARRAY
28392: ST_TO_ADDR
// end ; if weapon then
28393: LD_VAR 0 17
28397: IFFALSE 28511
// begin tmp := CostOfWeapon ( weapon ) ;
28399: LD_ADDR_VAR 0 13
28403: PUSH
28404: LD_VAR 0 17
28408: PPUSH
28409: CALL_OW 451
28413: ST_TO_ADDR
// j := GetBase ( tower ) ;
28414: LD_ADDR_VAR 0 8
28418: PUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL_OW 274
28428: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28429: LD_VAR 0 8
28433: PPUSH
28434: LD_INT 1
28436: PPUSH
28437: CALL_OW 275
28441: PUSH
28442: LD_VAR 0 13
28446: PUSH
28447: LD_INT 1
28449: ARRAY
28450: GREATEREQUAL
28451: PUSH
28452: LD_VAR 0 8
28456: PPUSH
28457: LD_INT 2
28459: PPUSH
28460: CALL_OW 275
28464: PUSH
28465: LD_VAR 0 13
28469: PUSH
28470: LD_INT 2
28472: ARRAY
28473: GREATEREQUAL
28474: AND
28475: PUSH
28476: LD_VAR 0 8
28480: PPUSH
28481: LD_INT 3
28483: PPUSH
28484: CALL_OW 275
28488: PUSH
28489: LD_VAR 0 13
28493: PUSH
28494: LD_INT 3
28496: ARRAY
28497: GREATEREQUAL
28498: AND
28499: IFFALSE 28511
// result := weapon ;
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_VAR 0 17
28510: ST_TO_ADDR
// end ; end ;
28511: LD_VAR 0 2
28515: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28516: LD_INT 0
28518: PPUSH
28519: PPUSH
// result := true ;
28520: LD_ADDR_VAR 0 3
28524: PUSH
28525: LD_INT 1
28527: ST_TO_ADDR
// if array1 = array2 then
28528: LD_VAR 0 1
28532: PUSH
28533: LD_VAR 0 2
28537: EQUAL
28538: IFFALSE 28598
// begin for i = 1 to array1 do
28540: LD_ADDR_VAR 0 4
28544: PUSH
28545: DOUBLE
28546: LD_INT 1
28548: DEC
28549: ST_TO_ADDR
28550: LD_VAR 0 1
28554: PUSH
28555: FOR_TO
28556: IFFALSE 28594
// if array1 [ i ] <> array2 [ i ] then
28558: LD_VAR 0 1
28562: PUSH
28563: LD_VAR 0 4
28567: ARRAY
28568: PUSH
28569: LD_VAR 0 2
28573: PUSH
28574: LD_VAR 0 4
28578: ARRAY
28579: NONEQUAL
28580: IFFALSE 28592
// begin result := false ;
28582: LD_ADDR_VAR 0 3
28586: PUSH
28587: LD_INT 0
28589: ST_TO_ADDR
// break ;
28590: GO 28594
// end ;
28592: GO 28555
28594: POP
28595: POP
// end else
28596: GO 28606
// result := false ;
28598: LD_ADDR_VAR 0 3
28602: PUSH
28603: LD_INT 0
28605: ST_TO_ADDR
// end ;
28606: LD_VAR 0 3
28610: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
28615: PPUSH
// pom := GetBase ( fac ) ;
28616: LD_ADDR_VAR 0 5
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 274
28630: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28631: LD_ADDR_VAR 0 4
28635: PUSH
28636: LD_VAR 0 2
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: PPUSH
28645: LD_VAR 0 2
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: PPUSH
28654: LD_VAR 0 2
28658: PUSH
28659: LD_INT 3
28661: ARRAY
28662: PPUSH
28663: LD_VAR 0 2
28667: PUSH
28668: LD_INT 4
28670: ARRAY
28671: PPUSH
28672: CALL_OW 449
28676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28677: LD_ADDR_VAR 0 3
28681: PUSH
28682: LD_VAR 0 5
28686: PPUSH
28687: LD_INT 1
28689: PPUSH
28690: CALL_OW 275
28694: PUSH
28695: LD_VAR 0 4
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: GREATEREQUAL
28704: PUSH
28705: LD_VAR 0 5
28709: PPUSH
28710: LD_INT 2
28712: PPUSH
28713: CALL_OW 275
28717: PUSH
28718: LD_VAR 0 4
28722: PUSH
28723: LD_INT 2
28725: ARRAY
28726: GREATEREQUAL
28727: AND
28728: PUSH
28729: LD_VAR 0 5
28733: PPUSH
28734: LD_INT 3
28736: PPUSH
28737: CALL_OW 275
28741: PUSH
28742: LD_VAR 0 4
28746: PUSH
28747: LD_INT 3
28749: ARRAY
28750: GREATEREQUAL
28751: AND
28752: ST_TO_ADDR
// end ;
28753: LD_VAR 0 3
28757: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28758: LD_INT 0
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
// pom := GetBase ( building ) ;
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 274
28778: ST_TO_ADDR
// if not pom then
28779: LD_VAR 0 3
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 28958
// btype := GetBType ( building ) ;
28788: LD_ADDR_VAR 0 5
28792: PUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 266
28802: ST_TO_ADDR
// if btype = b_armoury then
28803: LD_VAR 0 5
28807: PUSH
28808: LD_INT 4
28810: EQUAL
28811: IFFALSE 28821
// btype := b_barracks ;
28813: LD_ADDR_VAR 0 5
28817: PUSH
28818: LD_INT 5
28820: ST_TO_ADDR
// if btype = b_depot then
28821: LD_VAR 0 5
28825: PUSH
28826: LD_INT 0
28828: EQUAL
28829: IFFALSE 28839
// btype := b_warehouse ;
28831: LD_ADDR_VAR 0 5
28835: PUSH
28836: LD_INT 1
28838: ST_TO_ADDR
// if btype = b_workshop then
28839: LD_VAR 0 5
28843: PUSH
28844: LD_INT 2
28846: EQUAL
28847: IFFALSE 28857
// btype := b_factory ;
28849: LD_ADDR_VAR 0 5
28853: PUSH
28854: LD_INT 3
28856: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28857: LD_ADDR_VAR 0 4
28861: PUSH
28862: LD_VAR 0 5
28866: PPUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 248
28876: PPUSH
28877: CALL_OW 450
28881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28882: LD_ADDR_VAR 0 2
28886: PUSH
28887: LD_VAR 0 3
28891: PPUSH
28892: LD_INT 1
28894: PPUSH
28895: CALL_OW 275
28899: PUSH
28900: LD_VAR 0 4
28904: PUSH
28905: LD_INT 1
28907: ARRAY
28908: GREATEREQUAL
28909: PUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: LD_INT 2
28917: PPUSH
28918: CALL_OW 275
28922: PUSH
28923: LD_VAR 0 4
28927: PUSH
28928: LD_INT 2
28930: ARRAY
28931: GREATEREQUAL
28932: AND
28933: PUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: LD_INT 3
28941: PPUSH
28942: CALL_OW 275
28946: PUSH
28947: LD_VAR 0 4
28951: PUSH
28952: LD_INT 3
28954: ARRAY
28955: GREATEREQUAL
28956: AND
28957: ST_TO_ADDR
// end ;
28958: LD_VAR 0 2
28962: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28963: LD_INT 0
28965: PPUSH
28966: PPUSH
28967: PPUSH
// pom := GetBase ( building ) ;
28968: LD_ADDR_VAR 0 4
28972: PUSH
28973: LD_VAR 0 1
28977: PPUSH
28978: CALL_OW 274
28982: ST_TO_ADDR
// if not pom then
28983: LD_VAR 0 4
28987: NOT
28988: IFFALSE 28992
// exit ;
28990: GO 29093
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28992: LD_ADDR_VAR 0 5
28996: PUSH
28997: LD_VAR 0 2
29001: PPUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 248
29011: PPUSH
29012: CALL_OW 450
29016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: LD_INT 1
29029: PPUSH
29030: CALL_OW 275
29034: PUSH
29035: LD_VAR 0 5
29039: PUSH
29040: LD_INT 1
29042: ARRAY
29043: GREATEREQUAL
29044: PUSH
29045: LD_VAR 0 4
29049: PPUSH
29050: LD_INT 2
29052: PPUSH
29053: CALL_OW 275
29057: PUSH
29058: LD_VAR 0 5
29062: PUSH
29063: LD_INT 2
29065: ARRAY
29066: GREATEREQUAL
29067: AND
29068: PUSH
29069: LD_VAR 0 4
29073: PPUSH
29074: LD_INT 3
29076: PPUSH
29077: CALL_OW 275
29081: PUSH
29082: LD_VAR 0 5
29086: PUSH
29087: LD_INT 3
29089: ARRAY
29090: GREATEREQUAL
29091: AND
29092: ST_TO_ADDR
// end ;
29093: LD_VAR 0 3
29097: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29098: LD_INT 0
29100: PPUSH
29101: PPUSH
29102: PPUSH
29103: PPUSH
29104: PPUSH
29105: PPUSH
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
// result := false ;
29110: LD_ADDR_VAR 0 6
29114: PUSH
29115: LD_INT 0
29117: ST_TO_ADDR
// if not base or not btype or not x or not y then
29118: LD_VAR 0 1
29122: NOT
29123: PUSH
29124: LD_VAR 0 2
29128: NOT
29129: OR
29130: PUSH
29131: LD_VAR 0 3
29135: NOT
29136: OR
29137: PUSH
29138: LD_VAR 0 4
29142: NOT
29143: OR
29144: IFFALSE 29148
// exit ;
29146: GO 29662
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29148: LD_ADDR_VAR 0 12
29152: PUSH
29153: LD_VAR 0 2
29157: PPUSH
29158: LD_VAR 0 3
29162: PPUSH
29163: LD_VAR 0 4
29167: PPUSH
29168: LD_VAR 0 5
29172: PPUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: PPUSH
29182: CALL_OW 248
29186: PPUSH
29187: LD_INT 0
29189: PPUSH
29190: CALL 30491 0 6
29194: ST_TO_ADDR
// if not hexes then
29195: LD_VAR 0 12
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29662
// for i = 1 to hexes do
29204: LD_ADDR_VAR 0 7
29208: PUSH
29209: DOUBLE
29210: LD_INT 1
29212: DEC
29213: ST_TO_ADDR
29214: LD_VAR 0 12
29218: PUSH
29219: FOR_TO
29220: IFFALSE 29660
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29222: LD_ADDR_VAR 0 11
29226: PUSH
29227: LD_VAR 0 12
29231: PUSH
29232: LD_VAR 0 7
29236: ARRAY
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PPUSH
29242: LD_VAR 0 12
29246: PUSH
29247: LD_VAR 0 7
29251: ARRAY
29252: PUSH
29253: LD_INT 2
29255: ARRAY
29256: PPUSH
29257: CALL_OW 428
29261: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
29262: LD_VAR 0 11
29266: NOT
29267: PUSH
29268: LD_VAR 0 11
29272: PPUSH
29273: CALL_OW 247
29277: PUSH
29278: LD_INT 3
29280: EQUAL
29281: OR
29282: IFFALSE 29286
// continue ;
29284: GO 29219
// result := true ;
29286: LD_ADDR_VAR 0 6
29290: PUSH
29291: LD_INT 1
29293: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29294: LD_ADDR_VAR 0 15
29298: PUSH
29299: LD_INT 22
29301: PUSH
29302: LD_VAR 0 11
29306: PPUSH
29307: CALL_OW 255
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 30
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: ST_TO_ADDR
// if dep then
29353: LD_VAR 0 15
29357: IFFALSE 29493
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29359: LD_ADDR_VAR 0 14
29363: PUSH
29364: LD_VAR 0 15
29368: PUSH
29369: LD_INT 1
29371: ARRAY
29372: PPUSH
29373: CALL_OW 250
29377: PPUSH
29378: LD_VAR 0 15
29382: PUSH
29383: LD_INT 1
29385: ARRAY
29386: PPUSH
29387: CALL_OW 254
29391: PPUSH
29392: LD_INT 5
29394: PPUSH
29395: CALL_OW 272
29399: PUSH
29400: LD_VAR 0 15
29404: PUSH
29405: LD_INT 1
29407: ARRAY
29408: PPUSH
29409: CALL_OW 251
29413: PPUSH
29414: LD_VAR 0 15
29418: PUSH
29419: LD_INT 1
29421: ARRAY
29422: PPUSH
29423: CALL_OW 254
29427: PPUSH
29428: LD_INT 5
29430: PPUSH
29431: CALL_OW 273
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29440: LD_VAR 0 14
29444: PUSH
29445: LD_INT 1
29447: ARRAY
29448: PPUSH
29449: LD_VAR 0 14
29453: PUSH
29454: LD_INT 2
29456: ARRAY
29457: PPUSH
29458: CALL_OW 488
29462: IFFALSE 29493
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29464: LD_VAR 0 11
29468: PPUSH
29469: LD_VAR 0 14
29473: PUSH
29474: LD_INT 1
29476: ARRAY
29477: PPUSH
29478: LD_VAR 0 14
29482: PUSH
29483: LD_INT 2
29485: ARRAY
29486: PPUSH
29487: CALL_OW 111
// continue ;
29491: GO 29219
// end ; end ; r := GetDir ( tmp ) ;
29493: LD_ADDR_VAR 0 13
29497: PUSH
29498: LD_VAR 0 11
29502: PPUSH
29503: CALL_OW 254
29507: ST_TO_ADDR
// if r = 5 then
29508: LD_VAR 0 13
29512: PUSH
29513: LD_INT 5
29515: EQUAL
29516: IFFALSE 29526
// r := 0 ;
29518: LD_ADDR_VAR 0 13
29522: PUSH
29523: LD_INT 0
29525: ST_TO_ADDR
// for j = r to 5 do
29526: LD_ADDR_VAR 0 8
29530: PUSH
29531: DOUBLE
29532: LD_VAR 0 13
29536: DEC
29537: ST_TO_ADDR
29538: LD_INT 5
29540: PUSH
29541: FOR_TO
29542: IFFALSE 29656
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29544: LD_ADDR_VAR 0 9
29548: PUSH
29549: LD_VAR 0 11
29553: PPUSH
29554: CALL_OW 250
29558: PPUSH
29559: LD_VAR 0 8
29563: PPUSH
29564: LD_INT 2
29566: PPUSH
29567: CALL_OW 272
29571: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29572: LD_ADDR_VAR 0 10
29576: PUSH
29577: LD_VAR 0 11
29581: PPUSH
29582: CALL_OW 251
29586: PPUSH
29587: LD_VAR 0 8
29591: PPUSH
29592: LD_INT 2
29594: PPUSH
29595: CALL_OW 273
29599: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29600: LD_VAR 0 9
29604: PPUSH
29605: LD_VAR 0 10
29609: PPUSH
29610: CALL_OW 488
29614: PUSH
29615: LD_VAR 0 9
29619: PPUSH
29620: LD_VAR 0 10
29624: PPUSH
29625: CALL_OW 428
29629: NOT
29630: AND
29631: IFFALSE 29654
// begin ComMoveXY ( tmp , _x , _y ) ;
29633: LD_VAR 0 11
29637: PPUSH
29638: LD_VAR 0 9
29642: PPUSH
29643: LD_VAR 0 10
29647: PPUSH
29648: CALL_OW 111
// break ;
29652: GO 29656
// end ; end ;
29654: GO 29541
29656: POP
29657: POP
// end ;
29658: GO 29219
29660: POP
29661: POP
// end ;
29662: LD_VAR 0 6
29666: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
29677: PPUSH
// result := false ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_INT 0
29685: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 266
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: IN
29712: NOT
29713: OR
29714: PUSH
29715: LD_VAR 0 2
29719: NOT
29720: OR
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 4
29741: PUSH
29742: LD_INT 5
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: IN
29753: NOT
29754: OR
29755: PUSH
29756: LD_VAR 0 3
29760: PPUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: CALL_OW 488
29770: NOT
29771: OR
29772: IFFALSE 29776
// exit ;
29774: GO 30486
// pom := GetBase ( bdepot ) ;
29776: LD_ADDR_VAR 0 9
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 274
29790: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
29791: LD_ADDR_VAR 0 10
29795: PUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 248
29810: PPUSH
29811: CALL_OW 450
29815: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29816: LD_VAR 0 9
29820: PPUSH
29821: LD_INT 1
29823: PPUSH
29824: CALL_OW 275
29828: PUSH
29829: LD_VAR 0 10
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: GREATEREQUAL
29838: PUSH
29839: LD_VAR 0 9
29843: PPUSH
29844: LD_INT 2
29846: PPUSH
29847: CALL_OW 275
29851: PUSH
29852: LD_VAR 0 10
29856: PUSH
29857: LD_INT 2
29859: ARRAY
29860: GREATEREQUAL
29861: AND
29862: PUSH
29863: LD_VAR 0 9
29867: PPUSH
29868: LD_INT 3
29870: PPUSH
29871: CALL_OW 275
29875: PUSH
29876: LD_VAR 0 10
29880: PUSH
29881: LD_INT 3
29883: ARRAY
29884: GREATEREQUAL
29885: AND
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 30486
// if GetBType ( bdepot ) = b_depot then
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 266
29900: PUSH
29901: LD_INT 0
29903: EQUAL
29904: IFFALSE 29916
// dist := 28 else
29906: LD_ADDR_VAR 0 13
29910: PUSH
29911: LD_INT 28
29913: ST_TO_ADDR
29914: GO 29924
// dist := 36 ;
29916: LD_ADDR_VAR 0 13
29920: PUSH
29921: LD_INT 36
29923: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
29924: LD_VAR 0 1
29928: PPUSH
29929: LD_VAR 0 3
29933: PPUSH
29934: LD_VAR 0 4
29938: PPUSH
29939: CALL_OW 297
29943: PUSH
29944: LD_VAR 0 13
29948: GREATER
29949: IFFALSE 29953
// exit ;
29951: GO 30486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
29953: LD_ADDR_VAR 0 11
29957: PUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: LD_VAR 0 4
29972: PPUSH
29973: LD_VAR 0 5
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 248
29987: PPUSH
29988: LD_INT 0
29990: PPUSH
29991: CALL 30491 0 6
29995: ST_TO_ADDR
// if not hexes then
29996: LD_VAR 0 11
30000: NOT
30001: IFFALSE 30005
// exit ;
30003: GO 30486
// hex := GetHexInfo ( x , y ) ;
30005: LD_ADDR_VAR 0 14
30009: PUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 4
30019: PPUSH
30020: CALL_OW 546
30024: ST_TO_ADDR
// if hex [ 1 ] then
30025: LD_VAR 0 14
30029: PUSH
30030: LD_INT 1
30032: ARRAY
30033: IFFALSE 30037
// exit ;
30035: GO 30486
// height := hex [ 2 ] ;
30037: LD_ADDR_VAR 0 12
30041: PUSH
30042: LD_VAR 0 14
30046: PUSH
30047: LD_INT 2
30049: ARRAY
30050: ST_TO_ADDR
// for i = 1 to hexes do
30051: LD_ADDR_VAR 0 7
30055: PUSH
30056: DOUBLE
30057: LD_INT 1
30059: DEC
30060: ST_TO_ADDR
30061: LD_VAR 0 11
30065: PUSH
30066: FOR_TO
30067: IFFALSE 30395
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30069: LD_VAR 0 11
30073: PUSH
30074: LD_VAR 0 7
30078: ARRAY
30079: PUSH
30080: LD_INT 1
30082: ARRAY
30083: PPUSH
30084: LD_VAR 0 11
30088: PUSH
30089: LD_VAR 0 7
30093: ARRAY
30094: PUSH
30095: LD_INT 2
30097: ARRAY
30098: PPUSH
30099: CALL_OW 488
30103: NOT
30104: IFFALSE 30108
// continue ;
30106: GO 30066
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30108: LD_ADDR_VAR 0 8
30112: PUSH
30113: LD_VAR 0 11
30117: PUSH
30118: LD_VAR 0 7
30122: ARRAY
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: LD_VAR 0 11
30132: PUSH
30133: LD_VAR 0 7
30137: ARRAY
30138: PUSH
30139: LD_INT 2
30141: ARRAY
30142: PPUSH
30143: CALL_OW 546
30147: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30148: LD_VAR 0 8
30152: PUSH
30153: LD_INT 1
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 8
30161: PUSH
30162: LD_INT 2
30164: ARRAY
30165: PUSH
30166: LD_VAR 0 12
30170: PUSH
30171: LD_INT 2
30173: PLUS
30174: GREATER
30175: OR
30176: PUSH
30177: LD_VAR 0 8
30181: PUSH
30182: LD_INT 2
30184: ARRAY
30185: PUSH
30186: LD_VAR 0 12
30190: PUSH
30191: LD_INT 2
30193: MINUS
30194: LESS
30195: OR
30196: PUSH
30197: LD_VAR 0 8
30201: PUSH
30202: LD_INT 3
30204: ARRAY
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 8
30211: PUSH
30212: LD_INT 9
30214: PUSH
30215: LD_INT 10
30217: PUSH
30218: LD_INT 11
30220: PUSH
30221: LD_INT 12
30223: PUSH
30224: LD_INT 13
30226: PUSH
30227: LD_INT 16
30229: PUSH
30230: LD_INT 17
30232: PUSH
30233: LD_INT 18
30235: PUSH
30236: LD_INT 19
30238: PUSH
30239: LD_INT 20
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: IN
30260: NOT
30261: OR
30262: PUSH
30263: LD_VAR 0 8
30267: PUSH
30268: LD_INT 5
30270: ARRAY
30271: NOT
30272: OR
30273: PUSH
30274: LD_VAR 0 8
30278: PUSH
30279: LD_INT 6
30281: ARRAY
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 7
30291: PUSH
30292: LD_INT 9
30294: PUSH
30295: LD_INT 10
30297: PUSH
30298: LD_INT 11
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: IN
30309: NOT
30310: OR
30311: PUSH
30312: LD_VAR 0 11
30316: PUSH
30317: LD_VAR 0 7
30321: ARRAY
30322: PUSH
30323: LD_INT 1
30325: ARRAY
30326: PPUSH
30327: LD_VAR 0 11
30331: PUSH
30332: LD_VAR 0 7
30336: ARRAY
30337: PUSH
30338: LD_INT 2
30340: ARRAY
30341: PPUSH
30342: CALL_OW 428
30346: PUSH
30347: LD_INT 0
30349: GREATER
30350: OR
30351: PUSH
30352: LD_VAR 0 11
30356: PUSH
30357: LD_VAR 0 7
30361: ARRAY
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 11
30371: PUSH
30372: LD_VAR 0 7
30376: ARRAY
30377: PUSH
30378: LD_INT 2
30380: ARRAY
30381: PPUSH
30382: CALL_OW 351
30386: OR
30387: IFFALSE 30393
// exit ;
30389: POP
30390: POP
30391: GO 30486
// end ;
30393: GO 30066
30395: POP
30396: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 255
30406: PPUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: LD_VAR 0 4
30416: PPUSH
30417: LD_INT 20
30419: PPUSH
30420: CALL 23373 0 4
30424: PUSH
30425: LD_INT 4
30427: ARRAY
30428: IFFALSE 30432
// exit ;
30430: GO 30486
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
30432: LD_VAR 0 2
30436: PUSH
30437: LD_INT 29
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: IN
30447: PUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: LD_VAR 0 4
30457: PPUSH
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL_OW 255
30467: PPUSH
30468: CALL_OW 440
30472: NOT
30473: AND
30474: IFFALSE 30478
// exit ;
30476: GO 30486
// result := true ;
30478: LD_ADDR_VAR 0 6
30482: PUSH
30483: LD_INT 1
30485: ST_TO_ADDR
// end ;
30486: LD_VAR 0 6
30490: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
// result = [ ] ;
30551: LD_ADDR_VAR 0 7
30555: PUSH
30556: EMPTY
30557: ST_TO_ADDR
// temp_list = [ ] ;
30558: LD_ADDR_VAR 0 9
30562: PUSH
30563: EMPTY
30564: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30565: LD_VAR 0 4
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 4
30584: PUSH
30585: LD_INT 5
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: IN
30596: NOT
30597: PUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: IN
30613: PUSH
30614: LD_VAR 0 5
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: IN
30633: NOT
30634: AND
30635: OR
30636: IFFALSE 30640
// exit ;
30638: GO 49025
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30640: LD_VAR 0 1
30644: PUSH
30645: LD_INT 6
30647: PUSH
30648: LD_INT 7
30650: PUSH
30651: LD_INT 8
30653: PUSH
30654: LD_INT 13
30656: PUSH
30657: LD_INT 12
30659: PUSH
30660: LD_INT 15
30662: PUSH
30663: LD_INT 11
30665: PUSH
30666: LD_INT 14
30668: PUSH
30669: LD_INT 10
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: IN
30683: IFFALSE 30693
// btype = b_lab ;
30685: LD_ADDR_VAR 0 1
30689: PUSH
30690: LD_INT 6
30692: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30693: LD_VAR 0 6
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: IN
30712: NOT
30713: PUSH
30714: LD_VAR 0 1
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: LD_INT 3
30730: PUSH
30731: LD_INT 6
30733: PUSH
30734: LD_INT 36
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: LD_INT 5
30742: PUSH
30743: LD_INT 31
30745: PUSH
30746: LD_INT 32
30748: PUSH
30749: LD_INT 33
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: IN
30765: NOT
30766: PUSH
30767: LD_VAR 0 6
30771: PUSH
30772: LD_INT 1
30774: EQUAL
30775: AND
30776: OR
30777: PUSH
30778: LD_VAR 0 1
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: IN
30793: NOT
30794: PUSH
30795: LD_VAR 0 6
30799: PUSH
30800: LD_INT 2
30802: EQUAL
30803: AND
30804: OR
30805: IFFALSE 30815
// mode = 0 ;
30807: LD_ADDR_VAR 0 6
30811: PUSH
30812: LD_INT 0
30814: ST_TO_ADDR
// case mode of 0 :
30815: LD_VAR 0 6
30819: PUSH
30820: LD_INT 0
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 42281
30828: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30829: LD_ADDR_VAR 0 11
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 3
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31022: LD_ADDR_VAR 0 12
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: NEG
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: NEG
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: NEG
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31218: LD_ADDR_VAR 0 13
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: LD_INT 2
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: LD_INT 3
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31417: LD_ADDR_VAR 0 14
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 2
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 3
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 3
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31613: LD_ADDR_VAR 0 15
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 1
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31806: LD_ADDR_VAR 0 16
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 3
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 3
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31999: LD_ADDR_VAR 0 17
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 2
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32229: LD_ADDR_VAR 0 18
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32459: LD_ADDR_VAR 0 19
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32689: LD_ADDR_VAR 0 20
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32919: LD_ADDR_VAR 0 21
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33149: LD_ADDR_VAR 0 22
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33379: LD_ADDR_VAR 0 23
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 2
33555: NEG
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 3
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33659: LD_ADDR_VAR 0 24
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 2
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33935: LD_ADDR_VAR 0 25
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 3
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34209: LD_ADDR_VAR 0 26
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 3
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 3
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34485: LD_ADDR_VAR 0 27
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 3
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 3
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34765: LD_ADDR_VAR 0 28
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: LD_INT 2
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 2
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: LD_INT 3
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 3
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 3
35000: NEG
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 3
35012: NEG
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35047: LD_ADDR_VAR 0 29
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: LD_INT 2
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 3
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35326: LD_ADDR_VAR 0 30
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 2
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 2
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 3
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 3
35569: NEG
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35604: LD_ADDR_VAR 0 31
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 3
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 3
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 3
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35882: LD_ADDR_VAR 0 32
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 2
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 3
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 3
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36160: LD_ADDR_VAR 0 33
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: LD_INT 3
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 3
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 3
36404: NEG
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36439: LD_ADDR_VAR 0 34
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 2
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: LD_INT 3
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36719: LD_ADDR_VAR 0 35
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36831: LD_ADDR_VAR 0 36
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36943: LD_ADDR_VAR 0 37
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37055: LD_ADDR_VAR 0 38
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37167: LD_ADDR_VAR 0 39
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37279: LD_ADDR_VAR 0 40
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37391: LD_ADDR_VAR 0 41
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 3
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 3
37665: NEG
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: NEG
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37741: LD_ADDR_VAR 0 42
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: LD_INT 3
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 3
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 3
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 3
38038: NEG
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: LD_INT 3
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38091: LD_ADDR_VAR 0 43
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 2
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38439: LD_ADDR_VAR 0 44
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: LD_INT 3
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 3
38713: NEG
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: NEG
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: LD_INT 3
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38789: LD_ADDR_VAR 0 45
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: LD_INT 2
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: LD_INT 3
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 3
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 3
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39139: LD_ADDR_VAR 0 46
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 3
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: NEG
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39487: LD_ADDR_VAR 0 47
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39638: LD_ADDR_VAR 0 48
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39785: LD_ADDR_VAR 0 49
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39929: LD_ADDR_VAR 0 50
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40073: LD_ADDR_VAR 0 51
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40220: LD_ADDR_VAR 0 52
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40371: LD_ADDR_VAR 0 53
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40601: LD_ADDR_VAR 0 54
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40831: LD_ADDR_VAR 0 55
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41061: LD_ADDR_VAR 0 56
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41291: LD_ADDR_VAR 0 57
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41521: LD_ADDR_VAR 0 58
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41751: LD_ADDR_VAR 0 59
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41839: LD_ADDR_VAR 0 60
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41927: LD_ADDR_VAR 0 61
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42015: LD_ADDR_VAR 0 62
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42103: LD_ADDR_VAR 0 63
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42191: LD_ADDR_VAR 0 64
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// end ; 1 :
42279: GO 48176
42281: LD_INT 1
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42289
42287: GO 44912
42289: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42290: LD_ADDR_VAR 0 11
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42334: LD_ADDR_VAR 0 12
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42375: LD_ADDR_VAR 0 13
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: LD_INT 3
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42415: LD_ADDR_VAR 0 14
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42456: LD_ADDR_VAR 0 15
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42500: LD_ADDR_VAR 0 16
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 3
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42546: LD_ADDR_VAR 0 17
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 3
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42590: LD_ADDR_VAR 0 18
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42631: LD_ADDR_VAR 0 19
42635: PUSH
42636: LD_INT 3
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: LIST
42670: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42671: LD_ADDR_VAR 0 20
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42712: LD_ADDR_VAR 0 21
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42756: LD_ADDR_VAR 0 22
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42802: LD_ADDR_VAR 0 23
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 4
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42846: LD_ADDR_VAR 0 24
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 4
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42887: LD_ADDR_VAR 0 25
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 4
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 4
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42927: LD_ADDR_VAR 0 26
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 4
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42968: LD_ADDR_VAR 0 27
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: NEG
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 4
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43012: LD_ADDR_VAR 0 28
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: LD_INT 4
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 4
43043: NEG
43044: PUSH
43045: LD_INT 3
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43058: LD_ADDR_VAR 0 29
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 4
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 4
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 5
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 5
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 4
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 6
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 6
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 5
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43213: LD_ADDR_VAR 0 30
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 4
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 4
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 5
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 5
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 5
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 6
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 6
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43356: LD_ADDR_VAR 0 31
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 4
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 4
43403: PUSH
43404: LD_INT 4
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: LD_INT 4
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 5
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 5
43433: PUSH
43434: LD_INT 5
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 4
43443: PUSH
43444: LD_INT 5
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 6
43453: PUSH
43454: LD_INT 5
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 6
43463: PUSH
43464: LD_INT 6
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: LD_INT 6
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43495: LD_ADDR_VAR 0 32
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 4
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 4
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 5
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 5
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 6
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 6
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43638: LD_ADDR_VAR 0 33
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 3
43656: NEG
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 4
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 4
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 4
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 5
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 5
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 5
43747: NEG
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 6
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 6
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43793: LD_ADDR_VAR 0 34
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: LD_INT 3
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: LD_INT 4
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 4
43848: NEG
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 4
43860: NEG
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 4
43872: NEG
43873: PUSH
43874: LD_INT 5
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 5
43884: NEG
43885: PUSH
43886: LD_INT 4
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 5
43896: NEG
43897: PUSH
43898: LD_INT 5
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 5
43908: NEG
43909: PUSH
43910: LD_INT 6
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 6
43920: NEG
43921: PUSH
43922: LD_INT 5
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 6
43932: NEG
43933: PUSH
43934: LD_INT 6
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43956: LD_ADDR_VAR 0 41
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44000: LD_ADDR_VAR 0 42
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44041: LD_ADDR_VAR 0 43
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44081: LD_ADDR_VAR 0 44
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44122: LD_ADDR_VAR 0 45
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44166: LD_ADDR_VAR 0 46
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44212: LD_ADDR_VAR 0 47
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44245: LD_ADDR_VAR 0 48
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44276: LD_ADDR_VAR 0 49
44280: PUSH
44281: LD_INT 3
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44305: LD_ADDR_VAR 0 50
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44334: LD_ADDR_VAR 0 51
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44365: LD_ADDR_VAR 0 52
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44398: LD_ADDR_VAR 0 53
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44442: LD_ADDR_VAR 0 54
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 3
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44483: LD_ADDR_VAR 0 55
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44523: LD_ADDR_VAR 0 56
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 3
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44564: LD_ADDR_VAR 0 57
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44608: LD_ADDR_VAR 0 58
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 3
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44654: LD_ADDR_VAR 0 59
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44698: LD_ADDR_VAR 0 60
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44739: LD_ADDR_VAR 0 61
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44779: LD_ADDR_VAR 0 62
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44820: LD_ADDR_VAR 0 63
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44864: LD_ADDR_VAR 0 64
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// end ; 2 :
44910: GO 48176
44912: LD_INT 2
44914: DOUBLE
44915: EQUAL
44916: IFTRUE 44920
44918: GO 48175
44920: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44921: LD_ADDR_VAR 0 29
44925: PUSH
44926: LD_INT 4
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 4
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 5
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 5
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 4
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 5
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 4
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 4
45051: PUSH
45052: LD_INT 4
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: LD_INT 4
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 4
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 4
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 4
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 3
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 4
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 5
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 5
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 4
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 4
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 4
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 4
45306: NEG
45307: PUSH
45308: LD_INT 4
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 4
45318: NEG
45319: PUSH
45320: LD_INT 5
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: LD_INT 4
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: NEG
45343: PUSH
45344: LD_INT 3
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 4
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 5
45366: NEG
45367: PUSH
45368: LD_INT 4
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 5
45378: NEG
45379: PUSH
45380: LD_INT 5
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 3
45390: NEG
45391: PUSH
45392: LD_INT 5
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 5
45402: NEG
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45459: LD_ADDR_VAR 0 30
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: LD_INT 4
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 4
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 5
45486: PUSH
45487: LD_INT 4
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: LD_INT 5
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 4
45506: PUSH
45507: LD_INT 5
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 3
45516: PUSH
45517: LD_INT 4
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 5
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: LD_INT 5
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 4
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 4
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 4
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 4
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 4
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 5
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 5
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: LD_INT 4
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 4
45811: NEG
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 4
45823: NEG
45824: PUSH
45825: LD_INT 4
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 4
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 4
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 4
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 5
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 4
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 5
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: LD_INT 5
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46006: LD_ADDR_VAR 0 31
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 4
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 4
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 5
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 5
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 4
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 5
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 4
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 4
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 4
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 4
46208: NEG
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: LD_INT 5
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 4
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 4
46256: NEG
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 5
46268: NEG
46269: PUSH
46270: LD_INT 4
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 5
46280: NEG
46281: PUSH
46282: LD_INT 5
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: LD_INT 5
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 5
46304: NEG
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 3
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 4
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 3
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 4
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 4
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 4
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 5
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 4
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 5
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46556: LD_ADDR_VAR 0 32
46560: PUSH
46561: LD_INT 4
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 4
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 4
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 5
46619: NEG
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 5
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 5
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 4
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 4
46725: NEG
46726: PUSH
46727: LD_INT 3
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 4
46737: NEG
46738: PUSH
46739: LD_INT 4
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 4
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 5
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 4
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 3
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 4
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 5
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 5
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 4
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 4
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 4
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: PUSH
46969: LD_INT 4
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 5
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 5
46998: PUSH
46999: LD_INT 5
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 4
47008: PUSH
47009: LD_INT 5
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 3
47018: PUSH
47019: LD_INT 4
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 5
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 5
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47103: LD_ADDR_VAR 0 33
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 4
47122: NEG
47123: PUSH
47124: LD_INT 5
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 4
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 5
47170: NEG
47171: PUSH
47172: LD_INT 4
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 5
47182: NEG
47183: PUSH
47184: LD_INT 5
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 3
47194: NEG
47195: PUSH
47196: LD_INT 5
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 5
47206: NEG
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 3
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 3
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 4
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 4
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 4
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 5
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 4
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 5
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 4
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 4
47443: PUSH
47444: LD_INT 4
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 4
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 4
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 4
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 4
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 3
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 4
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47641: LD_ADDR_VAR 0 34
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 4
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 5
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 4
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 4
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 5
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 5
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 4
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 4
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 4
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 4
47843: PUSH
47844: LD_INT 4
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 5
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: LD_INT 5
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 4
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 4
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 4
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 4
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 4
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 5
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 5
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 5
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// end ; end ;
48173: GO 48176
48175: POP
// case btype of b_depot , b_warehouse :
48176: LD_VAR 0 1
48180: PUSH
48181: LD_INT 0
48183: DOUBLE
48184: EQUAL
48185: IFTRUE 48195
48187: LD_INT 1
48189: DOUBLE
48190: EQUAL
48191: IFTRUE 48195
48193: GO 48396
48195: POP
// case nation of nation_american :
48196: LD_VAR 0 5
48200: PUSH
48201: LD_INT 1
48203: DOUBLE
48204: EQUAL
48205: IFTRUE 48209
48207: GO 48265
48209: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
48210: LD_ADDR_VAR 0 9
48214: PUSH
48215: LD_VAR 0 11
48219: PUSH
48220: LD_VAR 0 12
48224: PUSH
48225: LD_VAR 0 13
48229: PUSH
48230: LD_VAR 0 14
48234: PUSH
48235: LD_VAR 0 15
48239: PUSH
48240: LD_VAR 0 16
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: PUSH
48253: LD_VAR 0 4
48257: PUSH
48258: LD_INT 1
48260: PLUS
48261: ARRAY
48262: ST_TO_ADDR
48263: GO 48394
48265: LD_INT 2
48267: DOUBLE
48268: EQUAL
48269: IFTRUE 48273
48271: GO 48329
48273: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
48274: LD_ADDR_VAR 0 9
48278: PUSH
48279: LD_VAR 0 17
48283: PUSH
48284: LD_VAR 0 18
48288: PUSH
48289: LD_VAR 0 19
48293: PUSH
48294: LD_VAR 0 20
48298: PUSH
48299: LD_VAR 0 21
48303: PUSH
48304: LD_VAR 0 22
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: LD_VAR 0 4
48321: PUSH
48322: LD_INT 1
48324: PLUS
48325: ARRAY
48326: ST_TO_ADDR
48327: GO 48394
48329: LD_INT 3
48331: DOUBLE
48332: EQUAL
48333: IFTRUE 48337
48335: GO 48393
48337: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48338: LD_ADDR_VAR 0 9
48342: PUSH
48343: LD_VAR 0 23
48347: PUSH
48348: LD_VAR 0 24
48352: PUSH
48353: LD_VAR 0 25
48357: PUSH
48358: LD_VAR 0 26
48362: PUSH
48363: LD_VAR 0 27
48367: PUSH
48368: LD_VAR 0 28
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: PUSH
48381: LD_VAR 0 4
48385: PUSH
48386: LD_INT 1
48388: PLUS
48389: ARRAY
48390: ST_TO_ADDR
48391: GO 48394
48393: POP
48394: GO 48943
48396: LD_INT 2
48398: DOUBLE
48399: EQUAL
48400: IFTRUE 48410
48402: LD_INT 3
48404: DOUBLE
48405: EQUAL
48406: IFTRUE 48410
48408: GO 48466
48410: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48411: LD_ADDR_VAR 0 9
48415: PUSH
48416: LD_VAR 0 29
48420: PUSH
48421: LD_VAR 0 30
48425: PUSH
48426: LD_VAR 0 31
48430: PUSH
48431: LD_VAR 0 32
48435: PUSH
48436: LD_VAR 0 33
48440: PUSH
48441: LD_VAR 0 34
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: PUSH
48454: LD_VAR 0 4
48458: PUSH
48459: LD_INT 1
48461: PLUS
48462: ARRAY
48463: ST_TO_ADDR
48464: GO 48943
48466: LD_INT 16
48468: DOUBLE
48469: EQUAL
48470: IFTRUE 48522
48472: LD_INT 17
48474: DOUBLE
48475: EQUAL
48476: IFTRUE 48522
48478: LD_INT 18
48480: DOUBLE
48481: EQUAL
48482: IFTRUE 48522
48484: LD_INT 19
48486: DOUBLE
48487: EQUAL
48488: IFTRUE 48522
48490: LD_INT 20
48492: DOUBLE
48493: EQUAL
48494: IFTRUE 48522
48496: LD_INT 21
48498: DOUBLE
48499: EQUAL
48500: IFTRUE 48522
48502: LD_INT 23
48504: DOUBLE
48505: EQUAL
48506: IFTRUE 48522
48508: LD_INT 24
48510: DOUBLE
48511: EQUAL
48512: IFTRUE 48522
48514: LD_INT 25
48516: DOUBLE
48517: EQUAL
48518: IFTRUE 48522
48520: GO 48578
48522: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48523: LD_ADDR_VAR 0 9
48527: PUSH
48528: LD_VAR 0 35
48532: PUSH
48533: LD_VAR 0 36
48537: PUSH
48538: LD_VAR 0 37
48542: PUSH
48543: LD_VAR 0 38
48547: PUSH
48548: LD_VAR 0 39
48552: PUSH
48553: LD_VAR 0 40
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: PUSH
48566: LD_VAR 0 4
48570: PUSH
48571: LD_INT 1
48573: PLUS
48574: ARRAY
48575: ST_TO_ADDR
48576: GO 48943
48578: LD_INT 6
48580: DOUBLE
48581: EQUAL
48582: IFTRUE 48634
48584: LD_INT 7
48586: DOUBLE
48587: EQUAL
48588: IFTRUE 48634
48590: LD_INT 8
48592: DOUBLE
48593: EQUAL
48594: IFTRUE 48634
48596: LD_INT 13
48598: DOUBLE
48599: EQUAL
48600: IFTRUE 48634
48602: LD_INT 12
48604: DOUBLE
48605: EQUAL
48606: IFTRUE 48634
48608: LD_INT 15
48610: DOUBLE
48611: EQUAL
48612: IFTRUE 48634
48614: LD_INT 11
48616: DOUBLE
48617: EQUAL
48618: IFTRUE 48634
48620: LD_INT 14
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48634
48626: LD_INT 10
48628: DOUBLE
48629: EQUAL
48630: IFTRUE 48634
48632: GO 48690
48634: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
48635: LD_ADDR_VAR 0 9
48639: PUSH
48640: LD_VAR 0 41
48644: PUSH
48645: LD_VAR 0 42
48649: PUSH
48650: LD_VAR 0 43
48654: PUSH
48655: LD_VAR 0 44
48659: PUSH
48660: LD_VAR 0 45
48664: PUSH
48665: LD_VAR 0 46
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: PUSH
48678: LD_VAR 0 4
48682: PUSH
48683: LD_INT 1
48685: PLUS
48686: ARRAY
48687: ST_TO_ADDR
48688: GO 48943
48690: LD_INT 36
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48754
48698: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: LD_VAR 0 47
48708: PUSH
48709: LD_VAR 0 48
48713: PUSH
48714: LD_VAR 0 49
48718: PUSH
48719: LD_VAR 0 50
48723: PUSH
48724: LD_VAR 0 51
48728: PUSH
48729: LD_VAR 0 52
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: PUSH
48742: LD_VAR 0 4
48746: PUSH
48747: LD_INT 1
48749: PLUS
48750: ARRAY
48751: ST_TO_ADDR
48752: GO 48943
48754: LD_INT 4
48756: DOUBLE
48757: EQUAL
48758: IFTRUE 48780
48760: LD_INT 5
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48780
48766: LD_INT 34
48768: DOUBLE
48769: EQUAL
48770: IFTRUE 48780
48772: LD_INT 37
48774: DOUBLE
48775: EQUAL
48776: IFTRUE 48780
48778: GO 48836
48780: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48781: LD_ADDR_VAR 0 9
48785: PUSH
48786: LD_VAR 0 53
48790: PUSH
48791: LD_VAR 0 54
48795: PUSH
48796: LD_VAR 0 55
48800: PUSH
48801: LD_VAR 0 56
48805: PUSH
48806: LD_VAR 0 57
48810: PUSH
48811: LD_VAR 0 58
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: PUSH
48824: LD_VAR 0 4
48828: PUSH
48829: LD_INT 1
48831: PLUS
48832: ARRAY
48833: ST_TO_ADDR
48834: GO 48943
48836: LD_INT 31
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48886
48842: LD_INT 32
48844: DOUBLE
48845: EQUAL
48846: IFTRUE 48886
48848: LD_INT 33
48850: DOUBLE
48851: EQUAL
48852: IFTRUE 48886
48854: LD_INT 27
48856: DOUBLE
48857: EQUAL
48858: IFTRUE 48886
48860: LD_INT 26
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48886
48866: LD_INT 28
48868: DOUBLE
48869: EQUAL
48870: IFTRUE 48886
48872: LD_INT 29
48874: DOUBLE
48875: EQUAL
48876: IFTRUE 48886
48878: LD_INT 30
48880: DOUBLE
48881: EQUAL
48882: IFTRUE 48886
48884: GO 48942
48886: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
48887: LD_ADDR_VAR 0 9
48891: PUSH
48892: LD_VAR 0 59
48896: PUSH
48897: LD_VAR 0 60
48901: PUSH
48902: LD_VAR 0 61
48906: PUSH
48907: LD_VAR 0 62
48911: PUSH
48912: LD_VAR 0 63
48916: PUSH
48917: LD_VAR 0 64
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: LD_VAR 0 4
48934: PUSH
48935: LD_INT 1
48937: PLUS
48938: ARRAY
48939: ST_TO_ADDR
48940: GO 48943
48942: POP
// temp_list2 = [ ] ;
48943: LD_ADDR_VAR 0 10
48947: PUSH
48948: EMPTY
48949: ST_TO_ADDR
// for i in temp_list do
48950: LD_ADDR_VAR 0 8
48954: PUSH
48955: LD_VAR 0 9
48959: PUSH
48960: FOR_IN
48961: IFFALSE 49013
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48963: LD_ADDR_VAR 0 10
48967: PUSH
48968: LD_VAR 0 10
48972: PUSH
48973: LD_VAR 0 8
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: PUSH
48982: LD_VAR 0 2
48986: PLUS
48987: PUSH
48988: LD_VAR 0 8
48992: PUSH
48993: LD_INT 2
48995: ARRAY
48996: PUSH
48997: LD_VAR 0 3
49001: PLUS
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: ADD
49010: ST_TO_ADDR
49011: GO 48960
49013: POP
49014: POP
// result = temp_list2 ;
49015: LD_ADDR_VAR 0 7
49019: PUSH
49020: LD_VAR 0 10
49024: ST_TO_ADDR
// end ;
49025: LD_VAR 0 7
49029: RET
// export function EnemyInRange ( unit , dist ) ; begin
49030: LD_INT 0
49032: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49033: LD_ADDR_VAR 0 3
49037: PUSH
49038: LD_VAR 0 1
49042: PPUSH
49043: CALL_OW 255
49047: PPUSH
49048: LD_VAR 0 1
49052: PPUSH
49053: CALL_OW 250
49057: PPUSH
49058: LD_VAR 0 1
49062: PPUSH
49063: CALL_OW 251
49067: PPUSH
49068: LD_VAR 0 2
49072: PPUSH
49073: CALL 23373 0 4
49077: PUSH
49078: LD_INT 4
49080: ARRAY
49081: ST_TO_ADDR
// end ;
49082: LD_VAR 0 3
49086: RET
// export function PlayerSeeMe ( unit ) ; begin
49087: LD_INT 0
49089: PPUSH
// result := See ( your_side , unit ) ;
49090: LD_ADDR_VAR 0 2
49094: PUSH
49095: LD_OWVAR 2
49099: PPUSH
49100: LD_VAR 0 1
49104: PPUSH
49105: CALL_OW 292
49109: ST_TO_ADDR
// end ;
49110: LD_VAR 0 2
49114: RET
// export function ReverseDir ( unit ) ; begin
49115: LD_INT 0
49117: PPUSH
// if not unit then
49118: LD_VAR 0 1
49122: NOT
49123: IFFALSE 49127
// exit ;
49125: GO 49173
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
49127: LD_ADDR_VAR 0 2
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: LD_INT 4
49137: PUSH
49138: LD_INT 5
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: PUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 254
49167: PUSH
49168: LD_INT 1
49170: PLUS
49171: ARRAY
49172: ST_TO_ADDR
// end ;
49173: LD_VAR 0 2
49177: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49178: LD_INT 0
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
// if not hexes then
49185: LD_VAR 0 2
49189: NOT
49190: IFFALSE 49194
// exit ;
49192: GO 49342
// dist := 9999 ;
49194: LD_ADDR_VAR 0 5
49198: PUSH
49199: LD_INT 9999
49201: ST_TO_ADDR
// for i = 1 to hexes do
49202: LD_ADDR_VAR 0 4
49206: PUSH
49207: DOUBLE
49208: LD_INT 1
49210: DEC
49211: ST_TO_ADDR
49212: LD_VAR 0 2
49216: PUSH
49217: FOR_TO
49218: IFFALSE 49330
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_VAR 0 2
49229: PUSH
49230: LD_VAR 0 4
49234: ARRAY
49235: PUSH
49236: LD_INT 1
49238: ARRAY
49239: PPUSH
49240: LD_VAR 0 2
49244: PUSH
49245: LD_VAR 0 4
49249: ARRAY
49250: PUSH
49251: LD_INT 2
49253: ARRAY
49254: PPUSH
49255: CALL_OW 297
49259: PUSH
49260: LD_VAR 0 5
49264: LESS
49265: IFFALSE 49328
// begin hex := hexes [ i ] ;
49267: LD_ADDR_VAR 0 7
49271: PUSH
49272: LD_VAR 0 2
49276: PUSH
49277: LD_VAR 0 4
49281: ARRAY
49282: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49283: LD_ADDR_VAR 0 5
49287: PUSH
49288: LD_VAR 0 1
49292: PPUSH
49293: LD_VAR 0 2
49297: PUSH
49298: LD_VAR 0 4
49302: ARRAY
49303: PUSH
49304: LD_INT 1
49306: ARRAY
49307: PPUSH
49308: LD_VAR 0 2
49312: PUSH
49313: LD_VAR 0 4
49317: ARRAY
49318: PUSH
49319: LD_INT 2
49321: ARRAY
49322: PPUSH
49323: CALL_OW 297
49327: ST_TO_ADDR
// end ; end ;
49328: GO 49217
49330: POP
49331: POP
// result := hex ;
49332: LD_ADDR_VAR 0 3
49336: PUSH
49337: LD_VAR 0 7
49341: ST_TO_ADDR
// end ;
49342: LD_VAR 0 3
49346: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49347: LD_INT 0
49349: PPUSH
49350: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49351: LD_VAR 0 1
49355: NOT
49356: PUSH
49357: LD_VAR 0 1
49361: PUSH
49362: LD_INT 21
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 23
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PPUSH
49386: CALL_OW 69
49390: IN
49391: NOT
49392: OR
49393: IFFALSE 49397
// exit ;
49395: GO 49444
// for i = 1 to 3 do
49397: LD_ADDR_VAR 0 3
49401: PUSH
49402: DOUBLE
49403: LD_INT 1
49405: DEC
49406: ST_TO_ADDR
49407: LD_INT 3
49409: PUSH
49410: FOR_TO
49411: IFFALSE 49442
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49413: LD_VAR 0 1
49417: PPUSH
49418: CALL_OW 250
49422: PPUSH
49423: LD_VAR 0 1
49427: PPUSH
49428: CALL_OW 251
49432: PPUSH
49433: LD_INT 1
49435: PPUSH
49436: CALL_OW 453
49440: GO 49410
49442: POP
49443: POP
// end ;
49444: LD_VAR 0 2
49448: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49449: LD_INT 0
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49457: LD_VAR 0 1
49461: NOT
49462: PUSH
49463: LD_VAR 0 2
49467: NOT
49468: OR
49469: PUSH
49470: LD_VAR 0 1
49474: PPUSH
49475: CALL_OW 314
49479: OR
49480: IFFALSE 49484
// exit ;
49482: GO 49925
// x := GetX ( enemy_unit ) ;
49484: LD_ADDR_VAR 0 7
49488: PUSH
49489: LD_VAR 0 2
49493: PPUSH
49494: CALL_OW 250
49498: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49499: LD_ADDR_VAR 0 8
49503: PUSH
49504: LD_VAR 0 2
49508: PPUSH
49509: CALL_OW 251
49513: ST_TO_ADDR
// if not x or not y then
49514: LD_VAR 0 7
49518: NOT
49519: PUSH
49520: LD_VAR 0 8
49524: NOT
49525: OR
49526: IFFALSE 49530
// exit ;
49528: GO 49925
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49530: LD_ADDR_VAR 0 6
49534: PUSH
49535: LD_VAR 0 7
49539: PPUSH
49540: LD_INT 0
49542: PPUSH
49543: LD_INT 4
49545: PPUSH
49546: CALL_OW 272
49550: PUSH
49551: LD_VAR 0 8
49555: PPUSH
49556: LD_INT 0
49558: PPUSH
49559: LD_INT 4
49561: PPUSH
49562: CALL_OW 273
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_VAR 0 7
49575: PPUSH
49576: LD_INT 1
49578: PPUSH
49579: LD_INT 4
49581: PPUSH
49582: CALL_OW 272
49586: PUSH
49587: LD_VAR 0 8
49591: PPUSH
49592: LD_INT 1
49594: PPUSH
49595: LD_INT 4
49597: PPUSH
49598: CALL_OW 273
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_VAR 0 7
49611: PPUSH
49612: LD_INT 2
49614: PPUSH
49615: LD_INT 4
49617: PPUSH
49618: CALL_OW 272
49622: PUSH
49623: LD_VAR 0 8
49627: PPUSH
49628: LD_INT 2
49630: PPUSH
49631: LD_INT 4
49633: PPUSH
49634: CALL_OW 273
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_VAR 0 7
49647: PPUSH
49648: LD_INT 3
49650: PPUSH
49651: LD_INT 4
49653: PPUSH
49654: CALL_OW 272
49658: PUSH
49659: LD_VAR 0 8
49663: PPUSH
49664: LD_INT 3
49666: PPUSH
49667: LD_INT 4
49669: PPUSH
49670: CALL_OW 273
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_VAR 0 7
49683: PPUSH
49684: LD_INT 4
49686: PPUSH
49687: LD_INT 4
49689: PPUSH
49690: CALL_OW 272
49694: PUSH
49695: LD_VAR 0 8
49699: PPUSH
49700: LD_INT 4
49702: PPUSH
49703: LD_INT 4
49705: PPUSH
49706: CALL_OW 273
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_VAR 0 7
49719: PPUSH
49720: LD_INT 5
49722: PPUSH
49723: LD_INT 4
49725: PPUSH
49726: CALL_OW 272
49730: PUSH
49731: LD_VAR 0 8
49735: PPUSH
49736: LD_INT 5
49738: PPUSH
49739: LD_INT 4
49741: PPUSH
49742: CALL_OW 273
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// for i = tmp downto 1 do
49759: LD_ADDR_VAR 0 4
49763: PUSH
49764: DOUBLE
49765: LD_VAR 0 6
49769: INC
49770: ST_TO_ADDR
49771: LD_INT 1
49773: PUSH
49774: FOR_DOWNTO
49775: IFFALSE 49876
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49777: LD_VAR 0 6
49781: PUSH
49782: LD_VAR 0 4
49786: ARRAY
49787: PUSH
49788: LD_INT 1
49790: ARRAY
49791: PPUSH
49792: LD_VAR 0 6
49796: PUSH
49797: LD_VAR 0 4
49801: ARRAY
49802: PUSH
49803: LD_INT 2
49805: ARRAY
49806: PPUSH
49807: CALL_OW 488
49811: NOT
49812: PUSH
49813: LD_VAR 0 6
49817: PUSH
49818: LD_VAR 0 4
49822: ARRAY
49823: PUSH
49824: LD_INT 1
49826: ARRAY
49827: PPUSH
49828: LD_VAR 0 6
49832: PUSH
49833: LD_VAR 0 4
49837: ARRAY
49838: PUSH
49839: LD_INT 2
49841: ARRAY
49842: PPUSH
49843: CALL_OW 428
49847: PUSH
49848: LD_INT 0
49850: NONEQUAL
49851: OR
49852: IFFALSE 49874
// tmp := Delete ( tmp , i ) ;
49854: LD_ADDR_VAR 0 6
49858: PUSH
49859: LD_VAR 0 6
49863: PPUSH
49864: LD_VAR 0 4
49868: PPUSH
49869: CALL_OW 3
49873: ST_TO_ADDR
49874: GO 49774
49876: POP
49877: POP
// j := GetClosestHex ( unit , tmp ) ;
49878: LD_ADDR_VAR 0 5
49882: PUSH
49883: LD_VAR 0 1
49887: PPUSH
49888: LD_VAR 0 6
49892: PPUSH
49893: CALL 49178 0 2
49897: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49898: LD_VAR 0 1
49902: PPUSH
49903: LD_VAR 0 5
49907: PUSH
49908: LD_INT 1
49910: ARRAY
49911: PPUSH
49912: LD_VAR 0 5
49916: PUSH
49917: LD_INT 2
49919: ARRAY
49920: PPUSH
49921: CALL_OW 111
// end ;
49925: LD_VAR 0 3
49929: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
49934: PPUSH
// uc_side = 0 ;
49935: LD_ADDR_OWVAR 20
49939: PUSH
49940: LD_INT 0
49942: ST_TO_ADDR
// uc_nation = 0 ;
49943: LD_ADDR_OWVAR 21
49947: PUSH
49948: LD_INT 0
49950: ST_TO_ADDR
// InitHc ;
49951: CALL_OW 19
// InitVc ;
49955: CALL_OW 20
// if mastodonts then
49959: LD_VAR 0 6
49963: IFFALSE 50030
// for i = 1 to mastodonts do
49965: LD_ADDR_VAR 0 11
49969: PUSH
49970: DOUBLE
49971: LD_INT 1
49973: DEC
49974: ST_TO_ADDR
49975: LD_VAR 0 6
49979: PUSH
49980: FOR_TO
49981: IFFALSE 50028
// begin vc_chassis := 31 ;
49983: LD_ADDR_OWVAR 37
49987: PUSH
49988: LD_INT 31
49990: ST_TO_ADDR
// vc_control := control_rider ;
49991: LD_ADDR_OWVAR 38
49995: PUSH
49996: LD_INT 4
49998: ST_TO_ADDR
// animal := CreateVehicle ;
49999: LD_ADDR_VAR 0 12
50003: PUSH
50004: CALL_OW 45
50008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50009: LD_VAR 0 12
50013: PPUSH
50014: LD_VAR 0 8
50018: PPUSH
50019: LD_INT 0
50021: PPUSH
50022: CALL 56736 0 3
// end ;
50026: GO 49980
50028: POP
50029: POP
// if horses then
50030: LD_VAR 0 5
50034: IFFALSE 50101
// for i = 1 to horses do
50036: LD_ADDR_VAR 0 11
50040: PUSH
50041: DOUBLE
50042: LD_INT 1
50044: DEC
50045: ST_TO_ADDR
50046: LD_VAR 0 5
50050: PUSH
50051: FOR_TO
50052: IFFALSE 50099
// begin hc_class := 21 ;
50054: LD_ADDR_OWVAR 28
50058: PUSH
50059: LD_INT 21
50061: ST_TO_ADDR
// hc_gallery :=  ;
50062: LD_ADDR_OWVAR 33
50066: PUSH
50067: LD_STRING 
50069: ST_TO_ADDR
// animal := CreateHuman ;
50070: LD_ADDR_VAR 0 12
50074: PUSH
50075: CALL_OW 44
50079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50080: LD_VAR 0 12
50084: PPUSH
50085: LD_VAR 0 8
50089: PPUSH
50090: LD_INT 0
50092: PPUSH
50093: CALL 56736 0 3
// end ;
50097: GO 50051
50099: POP
50100: POP
// if birds then
50101: LD_VAR 0 1
50105: IFFALSE 50172
// for i = 1 to birds do
50107: LD_ADDR_VAR 0 11
50111: PUSH
50112: DOUBLE
50113: LD_INT 1
50115: DEC
50116: ST_TO_ADDR
50117: LD_VAR 0 1
50121: PUSH
50122: FOR_TO
50123: IFFALSE 50170
// begin hc_class = 18 ;
50125: LD_ADDR_OWVAR 28
50129: PUSH
50130: LD_INT 18
50132: ST_TO_ADDR
// hc_gallery =  ;
50133: LD_ADDR_OWVAR 33
50137: PUSH
50138: LD_STRING 
50140: ST_TO_ADDR
// animal := CreateHuman ;
50141: LD_ADDR_VAR 0 12
50145: PUSH
50146: CALL_OW 44
50150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50151: LD_VAR 0 12
50155: PPUSH
50156: LD_VAR 0 8
50160: PPUSH
50161: LD_INT 0
50163: PPUSH
50164: CALL 56736 0 3
// end ;
50168: GO 50122
50170: POP
50171: POP
// if tigers then
50172: LD_VAR 0 2
50176: IFFALSE 50260
// for i = 1 to tigers do
50178: LD_ADDR_VAR 0 11
50182: PUSH
50183: DOUBLE
50184: LD_INT 1
50186: DEC
50187: ST_TO_ADDR
50188: LD_VAR 0 2
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50258
// begin hc_class = class_tiger ;
50196: LD_ADDR_OWVAR 28
50200: PUSH
50201: LD_INT 14
50203: ST_TO_ADDR
// hc_gallery =  ;
50204: LD_ADDR_OWVAR 33
50208: PUSH
50209: LD_STRING 
50211: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50212: LD_ADDR_OWVAR 35
50216: PUSH
50217: LD_INT 7
50219: NEG
50220: PPUSH
50221: LD_INT 7
50223: PPUSH
50224: CALL_OW 12
50228: ST_TO_ADDR
// animal := CreateHuman ;
50229: LD_ADDR_VAR 0 12
50233: PUSH
50234: CALL_OW 44
50238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50239: LD_VAR 0 12
50243: PPUSH
50244: LD_VAR 0 8
50248: PPUSH
50249: LD_INT 0
50251: PPUSH
50252: CALL 56736 0 3
// end ;
50256: GO 50193
50258: POP
50259: POP
// if apemans then
50260: LD_VAR 0 3
50264: IFFALSE 50387
// for i = 1 to apemans do
50266: LD_ADDR_VAR 0 11
50270: PUSH
50271: DOUBLE
50272: LD_INT 1
50274: DEC
50275: ST_TO_ADDR
50276: LD_VAR 0 3
50280: PUSH
50281: FOR_TO
50282: IFFALSE 50385
// begin hc_class = class_apeman ;
50284: LD_ADDR_OWVAR 28
50288: PUSH
50289: LD_INT 12
50291: ST_TO_ADDR
// hc_gallery =  ;
50292: LD_ADDR_OWVAR 33
50296: PUSH
50297: LD_STRING 
50299: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50300: LD_ADDR_OWVAR 35
50304: PUSH
50305: LD_INT 5
50307: NEG
50308: PPUSH
50309: LD_INT 5
50311: PPUSH
50312: CALL_OW 12
50316: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50317: LD_ADDR_OWVAR 31
50321: PUSH
50322: LD_INT 1
50324: PPUSH
50325: LD_INT 3
50327: PPUSH
50328: CALL_OW 12
50332: PUSH
50333: LD_INT 1
50335: PPUSH
50336: LD_INT 3
50338: PPUSH
50339: CALL_OW 12
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: ST_TO_ADDR
// animal := CreateHuman ;
50356: LD_ADDR_VAR 0 12
50360: PUSH
50361: CALL_OW 44
50365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50366: LD_VAR 0 12
50370: PPUSH
50371: LD_VAR 0 8
50375: PPUSH
50376: LD_INT 0
50378: PPUSH
50379: CALL 56736 0 3
// end ;
50383: GO 50281
50385: POP
50386: POP
// if enchidnas then
50387: LD_VAR 0 4
50391: IFFALSE 50458
// for i = 1 to enchidnas do
50393: LD_ADDR_VAR 0 11
50397: PUSH
50398: DOUBLE
50399: LD_INT 1
50401: DEC
50402: ST_TO_ADDR
50403: LD_VAR 0 4
50407: PUSH
50408: FOR_TO
50409: IFFALSE 50456
// begin hc_class = 13 ;
50411: LD_ADDR_OWVAR 28
50415: PUSH
50416: LD_INT 13
50418: ST_TO_ADDR
// hc_gallery =  ;
50419: LD_ADDR_OWVAR 33
50423: PUSH
50424: LD_STRING 
50426: ST_TO_ADDR
// animal := CreateHuman ;
50427: LD_ADDR_VAR 0 12
50431: PUSH
50432: CALL_OW 44
50436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50437: LD_VAR 0 12
50441: PPUSH
50442: LD_VAR 0 8
50446: PPUSH
50447: LD_INT 0
50449: PPUSH
50450: CALL 56736 0 3
// end ;
50454: GO 50408
50456: POP
50457: POP
// if fishes then
50458: LD_VAR 0 7
50462: IFFALSE 50529
// for i = 1 to fishes do
50464: LD_ADDR_VAR 0 11
50468: PUSH
50469: DOUBLE
50470: LD_INT 1
50472: DEC
50473: ST_TO_ADDR
50474: LD_VAR 0 7
50478: PUSH
50479: FOR_TO
50480: IFFALSE 50527
// begin hc_class = 20 ;
50482: LD_ADDR_OWVAR 28
50486: PUSH
50487: LD_INT 20
50489: ST_TO_ADDR
// hc_gallery =  ;
50490: LD_ADDR_OWVAR 33
50494: PUSH
50495: LD_STRING 
50497: ST_TO_ADDR
// animal := CreateHuman ;
50498: LD_ADDR_VAR 0 12
50502: PUSH
50503: CALL_OW 44
50507: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50508: LD_VAR 0 12
50512: PPUSH
50513: LD_VAR 0 9
50517: PPUSH
50518: LD_INT 0
50520: PPUSH
50521: CALL 56736 0 3
// end ;
50525: GO 50479
50527: POP
50528: POP
// end ;
50529: LD_VAR 0 10
50533: RET
// export function WantHeal ( sci , unit ) ; begin
50534: LD_INT 0
50536: PPUSH
// if GetTaskList ( sci ) > 0 then
50537: LD_VAR 0 1
50541: PPUSH
50542: CALL_OW 437
50546: PUSH
50547: LD_INT 0
50549: GREATER
50550: IFFALSE 50620
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50552: LD_VAR 0 1
50556: PPUSH
50557: CALL_OW 437
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: PUSH
50566: LD_INT 1
50568: ARRAY
50569: PUSH
50570: LD_STRING l
50572: EQUAL
50573: PUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: CALL_OW 437
50583: PUSH
50584: LD_INT 1
50586: ARRAY
50587: PUSH
50588: LD_INT 4
50590: ARRAY
50591: PUSH
50592: LD_VAR 0 2
50596: EQUAL
50597: AND
50598: IFFALSE 50610
// result := true else
50600: LD_ADDR_VAR 0 3
50604: PUSH
50605: LD_INT 1
50607: ST_TO_ADDR
50608: GO 50618
// result := false ;
50610: LD_ADDR_VAR 0 3
50614: PUSH
50615: LD_INT 0
50617: ST_TO_ADDR
// end else
50618: GO 50628
// result := false ;
50620: LD_ADDR_VAR 0 3
50624: PUSH
50625: LD_INT 0
50627: ST_TO_ADDR
// end ;
50628: LD_VAR 0 3
50632: RET
// export function HealTarget ( sci ) ; begin
50633: LD_INT 0
50635: PPUSH
// if not sci then
50636: LD_VAR 0 1
50640: NOT
50641: IFFALSE 50645
// exit ;
50643: GO 50710
// result := 0 ;
50645: LD_ADDR_VAR 0 2
50649: PUSH
50650: LD_INT 0
50652: ST_TO_ADDR
// if GetTaskList ( sci ) then
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 437
50662: IFFALSE 50710
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50664: LD_VAR 0 1
50668: PPUSH
50669: CALL_OW 437
50673: PUSH
50674: LD_INT 1
50676: ARRAY
50677: PUSH
50678: LD_INT 1
50680: ARRAY
50681: PUSH
50682: LD_STRING l
50684: EQUAL
50685: IFFALSE 50710
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50687: LD_ADDR_VAR 0 2
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: CALL_OW 437
50701: PUSH
50702: LD_INT 1
50704: ARRAY
50705: PUSH
50706: LD_INT 4
50708: ARRAY
50709: ST_TO_ADDR
// end ;
50710: LD_VAR 0 2
50714: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
50715: LD_INT 0
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
// if not list then
50750: LD_VAR 0 1
50754: NOT
50755: IFFALSE 50759
// exit ;
50757: GO 55347
// base := list [ 1 ] ;
50759: LD_ADDR_VAR 0 3
50763: PUSH
50764: LD_VAR 0 1
50768: PUSH
50769: LD_INT 1
50771: ARRAY
50772: ST_TO_ADDR
// group := list [ 2 ] ;
50773: LD_ADDR_VAR 0 4
50777: PUSH
50778: LD_VAR 0 1
50782: PUSH
50783: LD_INT 2
50785: ARRAY
50786: ST_TO_ADDR
// path := list [ 3 ] ;
50787: LD_ADDR_VAR 0 5
50791: PUSH
50792: LD_VAR 0 1
50796: PUSH
50797: LD_INT 3
50799: ARRAY
50800: ST_TO_ADDR
// flags := list [ 4 ] ;
50801: LD_ADDR_VAR 0 6
50805: PUSH
50806: LD_VAR 0 1
50810: PUSH
50811: LD_INT 4
50813: ARRAY
50814: ST_TO_ADDR
// mined := [ ] ;
50815: LD_ADDR_VAR 0 27
50819: PUSH
50820: EMPTY
50821: ST_TO_ADDR
// bombed := [ ] ;
50822: LD_ADDR_VAR 0 28
50826: PUSH
50827: EMPTY
50828: ST_TO_ADDR
// healers := [ ] ;
50829: LD_ADDR_VAR 0 31
50833: PUSH
50834: EMPTY
50835: ST_TO_ADDR
// to_heal := [ ] ;
50836: LD_ADDR_VAR 0 30
50840: PUSH
50841: EMPTY
50842: ST_TO_ADDR
// repairs := [ ] ;
50843: LD_ADDR_VAR 0 33
50847: PUSH
50848: EMPTY
50849: ST_TO_ADDR
// to_repair := [ ] ;
50850: LD_ADDR_VAR 0 32
50854: PUSH
50855: EMPTY
50856: ST_TO_ADDR
// if not group or not path then
50857: LD_VAR 0 4
50861: NOT
50862: PUSH
50863: LD_VAR 0 5
50867: NOT
50868: OR
50869: IFFALSE 50873
// exit ;
50871: GO 55347
// if flags then
50873: LD_VAR 0 6
50877: IFFALSE 51021
// begin f_ignore_area := flags [ 1 ] ;
50879: LD_ADDR_VAR 0 17
50883: PUSH
50884: LD_VAR 0 6
50888: PUSH
50889: LD_INT 1
50891: ARRAY
50892: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
50893: LD_ADDR_VAR 0 18
50897: PUSH
50898: LD_VAR 0 6
50902: PUSH
50903: LD_INT 2
50905: ARRAY
50906: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
50907: LD_ADDR_VAR 0 19
50911: PUSH
50912: LD_VAR 0 6
50916: PUSH
50917: LD_INT 3
50919: ARRAY
50920: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
50921: LD_ADDR_VAR 0 20
50925: PUSH
50926: LD_VAR 0 6
50930: PUSH
50931: LD_INT 4
50933: ARRAY
50934: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
50935: LD_ADDR_VAR 0 21
50939: PUSH
50940: LD_VAR 0 6
50944: PUSH
50945: LD_INT 5
50947: ARRAY
50948: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
50949: LD_ADDR_VAR 0 22
50953: PUSH
50954: LD_VAR 0 6
50958: PUSH
50959: LD_INT 6
50961: ARRAY
50962: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
50963: LD_ADDR_VAR 0 23
50967: PUSH
50968: LD_VAR 0 6
50972: PUSH
50973: LD_INT 7
50975: ARRAY
50976: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
50977: LD_ADDR_VAR 0 24
50981: PUSH
50982: LD_VAR 0 6
50986: PUSH
50987: LD_INT 8
50989: ARRAY
50990: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
50991: LD_ADDR_VAR 0 25
50995: PUSH
50996: LD_VAR 0 6
51000: PUSH
51001: LD_INT 9
51003: ARRAY
51004: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
51005: LD_ADDR_VAR 0 26
51009: PUSH
51010: LD_VAR 0 6
51014: PUSH
51015: LD_INT 10
51017: ARRAY
51018: ST_TO_ADDR
// end else
51019: GO 51101
// begin f_ignore_area := false ;
51021: LD_ADDR_VAR 0 17
51025: PUSH
51026: LD_INT 0
51028: ST_TO_ADDR
// f_capture := false ;
51029: LD_ADDR_VAR 0 18
51033: PUSH
51034: LD_INT 0
51036: ST_TO_ADDR
// f_ignore_civ := false ;
51037: LD_ADDR_VAR 0 19
51041: PUSH
51042: LD_INT 0
51044: ST_TO_ADDR
// f_murder := false ;
51045: LD_ADDR_VAR 0 20
51049: PUSH
51050: LD_INT 0
51052: ST_TO_ADDR
// f_mines := false ;
51053: LD_ADDR_VAR 0 21
51057: PUSH
51058: LD_INT 0
51060: ST_TO_ADDR
// f_repair := false ;
51061: LD_ADDR_VAR 0 22
51065: PUSH
51066: LD_INT 0
51068: ST_TO_ADDR
// f_heal := false ;
51069: LD_ADDR_VAR 0 23
51073: PUSH
51074: LD_INT 0
51076: ST_TO_ADDR
// f_spacetime := false ;
51077: LD_ADDR_VAR 0 24
51081: PUSH
51082: LD_INT 0
51084: ST_TO_ADDR
// f_attack_depot := false ;
51085: LD_ADDR_VAR 0 25
51089: PUSH
51090: LD_INT 0
51092: ST_TO_ADDR
// f_crawl := false ;
51093: LD_ADDR_VAR 0 26
51097: PUSH
51098: LD_INT 0
51100: ST_TO_ADDR
// end ; if f_heal then
51101: LD_VAR 0 23
51105: IFFALSE 51132
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
51107: LD_ADDR_VAR 0 31
51111: PUSH
51112: LD_VAR 0 4
51116: PPUSH
51117: LD_INT 25
51119: PUSH
51120: LD_INT 4
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PPUSH
51127: CALL_OW 72
51131: ST_TO_ADDR
// if f_repair then
51132: LD_VAR 0 22
51136: IFFALSE 51163
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
51138: LD_ADDR_VAR 0 33
51142: PUSH
51143: LD_VAR 0 4
51147: PPUSH
51148: LD_INT 25
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PPUSH
51158: CALL_OW 72
51162: ST_TO_ADDR
// units_path := [ ] ;
51163: LD_ADDR_VAR 0 16
51167: PUSH
51168: EMPTY
51169: ST_TO_ADDR
// for i = 1 to group do
51170: LD_ADDR_VAR 0 7
51174: PUSH
51175: DOUBLE
51176: LD_INT 1
51178: DEC
51179: ST_TO_ADDR
51180: LD_VAR 0 4
51184: PUSH
51185: FOR_TO
51186: IFFALSE 51215
// units_path := Replace ( units_path , i , path ) ;
51188: LD_ADDR_VAR 0 16
51192: PUSH
51193: LD_VAR 0 16
51197: PPUSH
51198: LD_VAR 0 7
51202: PPUSH
51203: LD_VAR 0 5
51207: PPUSH
51208: CALL_OW 1
51212: ST_TO_ADDR
51213: GO 51185
51215: POP
51216: POP
// repeat for i = group downto 1 do
51217: LD_ADDR_VAR 0 7
51221: PUSH
51222: DOUBLE
51223: LD_VAR 0 4
51227: INC
51228: ST_TO_ADDR
51229: LD_INT 1
51231: PUSH
51232: FOR_DOWNTO
51233: IFFALSE 55329
// begin wait ( 5 ) ;
51235: LD_INT 5
51237: PPUSH
51238: CALL_OW 67
// tmp := [ ] ;
51242: LD_ADDR_VAR 0 14
51246: PUSH
51247: EMPTY
51248: ST_TO_ADDR
// attacking := false ;
51249: LD_ADDR_VAR 0 29
51253: PUSH
51254: LD_INT 0
51256: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
51257: LD_VAR 0 4
51261: PUSH
51262: LD_VAR 0 7
51266: ARRAY
51267: PPUSH
51268: CALL_OW 301
51272: PUSH
51273: LD_VAR 0 4
51277: PUSH
51278: LD_VAR 0 7
51282: ARRAY
51283: NOT
51284: OR
51285: IFFALSE 51394
// begin if GetType ( group [ i ] ) = unit_human then
51287: LD_VAR 0 4
51291: PUSH
51292: LD_VAR 0 7
51296: ARRAY
51297: PPUSH
51298: CALL_OW 247
51302: PUSH
51303: LD_INT 1
51305: EQUAL
51306: IFFALSE 51352
// begin to_heal := to_heal diff group [ i ] ;
51308: LD_ADDR_VAR 0 30
51312: PUSH
51313: LD_VAR 0 30
51317: PUSH
51318: LD_VAR 0 4
51322: PUSH
51323: LD_VAR 0 7
51327: ARRAY
51328: DIFF
51329: ST_TO_ADDR
// healers := healers diff group [ i ] ;
51330: LD_ADDR_VAR 0 31
51334: PUSH
51335: LD_VAR 0 31
51339: PUSH
51340: LD_VAR 0 4
51344: PUSH
51345: LD_VAR 0 7
51349: ARRAY
51350: DIFF
51351: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
51352: LD_ADDR_VAR 0 4
51356: PUSH
51357: LD_VAR 0 4
51361: PPUSH
51362: LD_VAR 0 7
51366: PPUSH
51367: CALL_OW 3
51371: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
51372: LD_ADDR_VAR 0 16
51376: PUSH
51377: LD_VAR 0 16
51381: PPUSH
51382: LD_VAR 0 7
51386: PPUSH
51387: CALL_OW 3
51391: ST_TO_ADDR
// continue ;
51392: GO 51232
// end ; if f_repair then
51394: LD_VAR 0 22
51398: IFFALSE 51887
// begin if GetType ( group [ i ] ) = unit_vehicle then
51400: LD_VAR 0 4
51404: PUSH
51405: LD_VAR 0 7
51409: ARRAY
51410: PPUSH
51411: CALL_OW 247
51415: PUSH
51416: LD_INT 2
51418: EQUAL
51419: IFFALSE 51609
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
51421: LD_VAR 0 4
51425: PUSH
51426: LD_VAR 0 7
51430: ARRAY
51431: PPUSH
51432: CALL_OW 256
51436: PUSH
51437: LD_INT 700
51439: LESS
51440: PUSH
51441: LD_VAR 0 4
51445: PUSH
51446: LD_VAR 0 7
51450: ARRAY
51451: PUSH
51452: LD_VAR 0 32
51456: IN
51457: NOT
51458: AND
51459: IFFALSE 51483
// to_repair := to_repair union group [ i ] ;
51461: LD_ADDR_VAR 0 32
51465: PUSH
51466: LD_VAR 0 32
51470: PUSH
51471: LD_VAR 0 4
51475: PUSH
51476: LD_VAR 0 7
51480: ARRAY
51481: UNION
51482: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
51483: LD_VAR 0 4
51487: PUSH
51488: LD_VAR 0 7
51492: ARRAY
51493: PPUSH
51494: CALL_OW 256
51498: PUSH
51499: LD_INT 1000
51501: EQUAL
51502: PUSH
51503: LD_VAR 0 4
51507: PUSH
51508: LD_VAR 0 7
51512: ARRAY
51513: PUSH
51514: LD_VAR 0 32
51518: IN
51519: AND
51520: IFFALSE 51544
// to_repair := to_repair diff group [ i ] ;
51522: LD_ADDR_VAR 0 32
51526: PUSH
51527: LD_VAR 0 32
51531: PUSH
51532: LD_VAR 0 4
51536: PUSH
51537: LD_VAR 0 7
51541: ARRAY
51542: DIFF
51543: ST_TO_ADDR
// if group [ i ] in to_repair then
51544: LD_VAR 0 4
51548: PUSH
51549: LD_VAR 0 7
51553: ARRAY
51554: PUSH
51555: LD_VAR 0 32
51559: IN
51560: IFFALSE 51607
// begin if not IsInArea ( group [ i ] , f_repair ) then
51562: LD_VAR 0 4
51566: PUSH
51567: LD_VAR 0 7
51571: ARRAY
51572: PPUSH
51573: LD_VAR 0 22
51577: PPUSH
51578: CALL_OW 308
51582: NOT
51583: IFFALSE 51605
// ComMoveToArea ( group [ i ] , f_repair ) ;
51585: LD_VAR 0 4
51589: PUSH
51590: LD_VAR 0 7
51594: ARRAY
51595: PPUSH
51596: LD_VAR 0 22
51600: PPUSH
51601: CALL_OW 113
// continue ;
51605: GO 51232
// end ; end else
51607: GO 51887
// if group [ i ] in repairs then
51609: LD_VAR 0 4
51613: PUSH
51614: LD_VAR 0 7
51618: ARRAY
51619: PUSH
51620: LD_VAR 0 33
51624: IN
51625: IFFALSE 51887
// begin if IsInUnit ( group [ i ] ) then
51627: LD_VAR 0 4
51631: PUSH
51632: LD_VAR 0 7
51636: ARRAY
51637: PPUSH
51638: CALL_OW 310
51642: IFFALSE 51710
// begin z := IsInUnit ( group [ i ] ) ;
51644: LD_ADDR_VAR 0 13
51648: PUSH
51649: LD_VAR 0 4
51653: PUSH
51654: LD_VAR 0 7
51658: ARRAY
51659: PPUSH
51660: CALL_OW 310
51664: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
51665: LD_VAR 0 13
51669: PUSH
51670: LD_VAR 0 32
51674: IN
51675: PUSH
51676: LD_VAR 0 13
51680: PPUSH
51681: LD_VAR 0 22
51685: PPUSH
51686: CALL_OW 308
51690: AND
51691: IFFALSE 51708
// ComExitVehicle ( group [ i ] ) ;
51693: LD_VAR 0 4
51697: PUSH
51698: LD_VAR 0 7
51702: ARRAY
51703: PPUSH
51704: CALL_OW 121
// end else
51708: GO 51887
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
51710: LD_ADDR_VAR 0 13
51714: PUSH
51715: LD_VAR 0 4
51719: PPUSH
51720: LD_INT 95
51722: PUSH
51723: LD_VAR 0 22
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 58
51734: PUSH
51735: EMPTY
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PPUSH
51742: CALL_OW 72
51746: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
51747: LD_VAR 0 4
51751: PUSH
51752: LD_VAR 0 7
51756: ARRAY
51757: PPUSH
51758: CALL_OW 314
51762: NOT
51763: IFFALSE 51885
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
51765: LD_ADDR_VAR 0 10
51769: PUSH
51770: LD_VAR 0 13
51774: PPUSH
51775: LD_VAR 0 4
51779: PUSH
51780: LD_VAR 0 7
51784: ARRAY
51785: PPUSH
51786: CALL_OW 74
51790: ST_TO_ADDR
// if not x then
51791: LD_VAR 0 10
51795: NOT
51796: IFFALSE 51800
// continue ;
51798: GO 51232
// if GetLives ( x ) < 1000 then
51800: LD_VAR 0 10
51804: PPUSH
51805: CALL_OW 256
51809: PUSH
51810: LD_INT 1000
51812: LESS
51813: IFFALSE 51837
// ComRepairVehicle ( group [ i ] , x ) else
51815: LD_VAR 0 4
51819: PUSH
51820: LD_VAR 0 7
51824: ARRAY
51825: PPUSH
51826: LD_VAR 0 10
51830: PPUSH
51831: CALL_OW 129
51835: GO 51885
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
51837: LD_VAR 0 23
51841: PUSH
51842: LD_VAR 0 4
51846: PUSH
51847: LD_VAR 0 7
51851: ARRAY
51852: PPUSH
51853: CALL_OW 256
51857: PUSH
51858: LD_INT 1000
51860: LESS
51861: AND
51862: NOT
51863: IFFALSE 51885
// ComEnterUnit ( group [ i ] , x ) ;
51865: LD_VAR 0 4
51869: PUSH
51870: LD_VAR 0 7
51874: ARRAY
51875: PPUSH
51876: LD_VAR 0 10
51880: PPUSH
51881: CALL_OW 120
// end ; continue ;
51885: GO 51232
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
51887: LD_VAR 0 23
51891: PUSH
51892: LD_VAR 0 4
51896: PUSH
51897: LD_VAR 0 7
51901: ARRAY
51902: PPUSH
51903: CALL_OW 247
51907: PUSH
51908: LD_INT 1
51910: EQUAL
51911: AND
51912: IFFALSE 52390
// begin if group [ i ] in healers then
51914: LD_VAR 0 4
51918: PUSH
51919: LD_VAR 0 7
51923: ARRAY
51924: PUSH
51925: LD_VAR 0 31
51929: IN
51930: IFFALSE 52203
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
51932: LD_VAR 0 4
51936: PUSH
51937: LD_VAR 0 7
51941: ARRAY
51942: PPUSH
51943: LD_VAR 0 23
51947: PPUSH
51948: CALL_OW 308
51952: NOT
51953: PUSH
51954: LD_VAR 0 4
51958: PUSH
51959: LD_VAR 0 7
51963: ARRAY
51964: PPUSH
51965: CALL_OW 314
51969: NOT
51970: AND
51971: IFFALSE 51995
// ComMoveToArea ( group [ i ] , f_heal ) else
51973: LD_VAR 0 4
51977: PUSH
51978: LD_VAR 0 7
51982: ARRAY
51983: PPUSH
51984: LD_VAR 0 23
51988: PPUSH
51989: CALL_OW 113
51993: GO 52201
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
51995: LD_VAR 0 4
51999: PUSH
52000: LD_VAR 0 7
52004: ARRAY
52005: PPUSH
52006: CALL 50633 0 1
52010: PPUSH
52011: CALL_OW 256
52015: PUSH
52016: LD_INT 1000
52018: EQUAL
52019: IFFALSE 52038
// ComStop ( group [ i ] ) else
52021: LD_VAR 0 4
52025: PUSH
52026: LD_VAR 0 7
52030: ARRAY
52031: PPUSH
52032: CALL_OW 141
52036: GO 52201
// if not HasTask ( group [ i ] ) and to_heal then
52038: LD_VAR 0 4
52042: PUSH
52043: LD_VAR 0 7
52047: ARRAY
52048: PPUSH
52049: CALL_OW 314
52053: NOT
52054: PUSH
52055: LD_VAR 0 30
52059: AND
52060: IFFALSE 52201
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
52062: LD_ADDR_VAR 0 13
52066: PUSH
52067: LD_VAR 0 30
52071: PPUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 54
52077: PUSH
52078: EMPTY
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PPUSH
52085: CALL_OW 72
52089: PPUSH
52090: LD_VAR 0 4
52094: PUSH
52095: LD_VAR 0 7
52099: ARRAY
52100: PPUSH
52101: CALL_OW 74
52105: ST_TO_ADDR
// if z then
52106: LD_VAR 0 13
52110: IFFALSE 52201
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
52112: LD_INT 91
52114: PUSH
52115: LD_VAR 0 13
52119: PUSH
52120: LD_INT 10
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 81
52130: PUSH
52131: LD_VAR 0 13
52135: PPUSH
52136: CALL_OW 255
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PPUSH
52149: CALL_OW 69
52153: PUSH
52154: LD_INT 0
52156: EQUAL
52157: IFFALSE 52181
// ComHeal ( group [ i ] , z ) else
52159: LD_VAR 0 4
52163: PUSH
52164: LD_VAR 0 7
52168: ARRAY
52169: PPUSH
52170: LD_VAR 0 13
52174: PPUSH
52175: CALL_OW 128
52179: GO 52201
// ComMoveToArea ( group [ i ] , f_heal ) ;
52181: LD_VAR 0 4
52185: PUSH
52186: LD_VAR 0 7
52190: ARRAY
52191: PPUSH
52192: LD_VAR 0 23
52196: PPUSH
52197: CALL_OW 113
// end ; continue ;
52201: GO 51232
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
52203: LD_VAR 0 4
52207: PUSH
52208: LD_VAR 0 7
52212: ARRAY
52213: PPUSH
52214: CALL_OW 256
52218: PUSH
52219: LD_INT 700
52221: LESS
52222: PUSH
52223: LD_VAR 0 4
52227: PUSH
52228: LD_VAR 0 7
52232: ARRAY
52233: PUSH
52234: LD_VAR 0 30
52238: IN
52239: NOT
52240: AND
52241: IFFALSE 52265
// to_heal := to_heal union group [ i ] ;
52243: LD_ADDR_VAR 0 30
52247: PUSH
52248: LD_VAR 0 30
52252: PUSH
52253: LD_VAR 0 4
52257: PUSH
52258: LD_VAR 0 7
52262: ARRAY
52263: UNION
52264: ST_TO_ADDR
// if group [ i ] in to_heal then
52265: LD_VAR 0 4
52269: PUSH
52270: LD_VAR 0 7
52274: ARRAY
52275: PUSH
52276: LD_VAR 0 30
52280: IN
52281: IFFALSE 52390
// begin if GetLives ( group [ i ] ) = 1000 then
52283: LD_VAR 0 4
52287: PUSH
52288: LD_VAR 0 7
52292: ARRAY
52293: PPUSH
52294: CALL_OW 256
52298: PUSH
52299: LD_INT 1000
52301: EQUAL
52302: IFFALSE 52328
// to_heal := to_heal diff group [ i ] else
52304: LD_ADDR_VAR 0 30
52308: PUSH
52309: LD_VAR 0 30
52313: PUSH
52314: LD_VAR 0 4
52318: PUSH
52319: LD_VAR 0 7
52323: ARRAY
52324: DIFF
52325: ST_TO_ADDR
52326: GO 52390
// begin if not IsInArea ( group [ i ] , to_heal ) then
52328: LD_VAR 0 4
52332: PUSH
52333: LD_VAR 0 7
52337: ARRAY
52338: PPUSH
52339: LD_VAR 0 30
52343: PPUSH
52344: CALL_OW 308
52348: NOT
52349: IFFALSE 52373
// ComMoveToArea ( group [ i ] , f_heal ) else
52351: LD_VAR 0 4
52355: PUSH
52356: LD_VAR 0 7
52360: ARRAY
52361: PPUSH
52362: LD_VAR 0 23
52366: PPUSH
52367: CALL_OW 113
52371: GO 52388
// ComHold ( group [ i ] ) ;
52373: LD_VAR 0 4
52377: PUSH
52378: LD_VAR 0 7
52382: ARRAY
52383: PPUSH
52384: CALL_OW 140
// continue ;
52388: GO 51232
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
52390: LD_VAR 0 4
52394: PUSH
52395: LD_VAR 0 7
52399: ARRAY
52400: PPUSH
52401: LD_INT 10
52403: PPUSH
52404: CALL 49030 0 2
52408: NOT
52409: PUSH
52410: LD_VAR 0 16
52414: PUSH
52415: LD_VAR 0 7
52419: ARRAY
52420: PUSH
52421: EMPTY
52422: EQUAL
52423: NOT
52424: AND
52425: IFFALSE 52691
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
52427: LD_VAR 0 4
52431: PUSH
52432: LD_VAR 0 7
52436: ARRAY
52437: PPUSH
52438: CALL_OW 262
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: IN
52453: IFFALSE 52494
// if GetFuel ( group [ i ] ) < 10 then
52455: LD_VAR 0 4
52459: PUSH
52460: LD_VAR 0 7
52464: ARRAY
52465: PPUSH
52466: CALL_OW 261
52470: PUSH
52471: LD_INT 10
52473: LESS
52474: IFFALSE 52494
// SetFuel ( group [ i ] , 12 ) ;
52476: LD_VAR 0 4
52480: PUSH
52481: LD_VAR 0 7
52485: ARRAY
52486: PPUSH
52487: LD_INT 12
52489: PPUSH
52490: CALL_OW 240
// if units_path [ i ] then
52494: LD_VAR 0 16
52498: PUSH
52499: LD_VAR 0 7
52503: ARRAY
52504: IFFALSE 52689
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
52506: LD_VAR 0 4
52510: PUSH
52511: LD_VAR 0 7
52515: ARRAY
52516: PPUSH
52517: LD_VAR 0 16
52521: PUSH
52522: LD_VAR 0 7
52526: ARRAY
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PUSH
52532: LD_INT 1
52534: ARRAY
52535: PPUSH
52536: LD_VAR 0 16
52540: PUSH
52541: LD_VAR 0 7
52545: ARRAY
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PUSH
52551: LD_INT 2
52553: ARRAY
52554: PPUSH
52555: CALL_OW 297
52559: PUSH
52560: LD_INT 6
52562: GREATER
52563: IFFALSE 52638
// begin if not HasTask ( group [ i ] ) then
52565: LD_VAR 0 4
52569: PUSH
52570: LD_VAR 0 7
52574: ARRAY
52575: PPUSH
52576: CALL_OW 314
52580: NOT
52581: IFFALSE 52636
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
52583: LD_VAR 0 4
52587: PUSH
52588: LD_VAR 0 7
52592: ARRAY
52593: PPUSH
52594: LD_VAR 0 16
52598: PUSH
52599: LD_VAR 0 7
52603: ARRAY
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PPUSH
52613: LD_VAR 0 16
52617: PUSH
52618: LD_VAR 0 7
52622: ARRAY
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 2
52630: ARRAY
52631: PPUSH
52632: CALL_OW 114
// end else
52636: GO 52689
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
52638: LD_ADDR_VAR 0 15
52642: PUSH
52643: LD_VAR 0 16
52647: PUSH
52648: LD_VAR 0 7
52652: ARRAY
52653: PPUSH
52654: LD_INT 1
52656: PPUSH
52657: CALL_OW 3
52661: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
52662: LD_ADDR_VAR 0 16
52666: PUSH
52667: LD_VAR 0 16
52671: PPUSH
52672: LD_VAR 0 7
52676: PPUSH
52677: LD_VAR 0 15
52681: PPUSH
52682: CALL_OW 1
52686: ST_TO_ADDR
// continue ;
52687: GO 51232
// end ; end ; end else
52689: GO 55327
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
52691: LD_ADDR_VAR 0 14
52695: PUSH
52696: LD_INT 81
52698: PUSH
52699: LD_VAR 0 4
52703: PUSH
52704: LD_VAR 0 7
52708: ARRAY
52709: PPUSH
52710: CALL_OW 255
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PPUSH
52719: CALL_OW 69
52723: ST_TO_ADDR
// if not tmp then
52724: LD_VAR 0 14
52728: NOT
52729: IFFALSE 52733
// continue ;
52731: GO 51232
// if f_ignore_area then
52733: LD_VAR 0 17
52737: IFFALSE 52825
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
52739: LD_ADDR_VAR 0 15
52743: PUSH
52744: LD_VAR 0 14
52748: PPUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 92
52754: PUSH
52755: LD_VAR 0 17
52759: PUSH
52760: LD_INT 1
52762: ARRAY
52763: PUSH
52764: LD_VAR 0 17
52768: PUSH
52769: LD_INT 2
52771: ARRAY
52772: PUSH
52773: LD_VAR 0 17
52777: PUSH
52778: LD_INT 3
52780: ARRAY
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PPUSH
52792: CALL_OW 72
52796: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
52797: LD_VAR 0 14
52801: PUSH
52802: LD_VAR 0 15
52806: DIFF
52807: IFFALSE 52825
// tmp := tmp diff tmp2 ;
52809: LD_ADDR_VAR 0 14
52813: PUSH
52814: LD_VAR 0 14
52818: PUSH
52819: LD_VAR 0 15
52823: DIFF
52824: ST_TO_ADDR
// end ; if not f_murder then
52825: LD_VAR 0 20
52829: NOT
52830: IFFALSE 52888
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
52832: LD_ADDR_VAR 0 15
52836: PUSH
52837: LD_VAR 0 14
52841: PPUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 50
52847: PUSH
52848: EMPTY
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PPUSH
52855: CALL_OW 72
52859: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
52860: LD_VAR 0 14
52864: PUSH
52865: LD_VAR 0 15
52869: DIFF
52870: IFFALSE 52888
// tmp := tmp diff tmp2 ;
52872: LD_ADDR_VAR 0 14
52876: PUSH
52877: LD_VAR 0 14
52881: PUSH
52882: LD_VAR 0 15
52886: DIFF
52887: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
52888: LD_ADDR_VAR 0 14
52892: PUSH
52893: LD_VAR 0 4
52897: PUSH
52898: LD_VAR 0 7
52902: ARRAY
52903: PPUSH
52904: LD_VAR 0 14
52908: PPUSH
52909: LD_INT 1
52911: PPUSH
52912: LD_INT 1
52914: PPUSH
52915: CALL 22912 0 4
52919: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
52920: LD_VAR 0 4
52924: PUSH
52925: LD_VAR 0 7
52929: ARRAY
52930: PPUSH
52931: CALL_OW 257
52935: PUSH
52936: LD_INT 1
52938: EQUAL
52939: IFFALSE 53387
// begin if WantPlant ( group [ i ] ) then
52941: LD_VAR 0 4
52945: PUSH
52946: LD_VAR 0 7
52950: ARRAY
52951: PPUSH
52952: CALL 22380 0 1
52956: IFFALSE 52960
// continue ;
52958: GO 51232
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
52960: LD_VAR 0 18
52964: PUSH
52965: LD_VAR 0 4
52969: PUSH
52970: LD_VAR 0 7
52974: ARRAY
52975: PPUSH
52976: CALL_OW 310
52980: NOT
52981: AND
52982: PUSH
52983: LD_VAR 0 14
52987: PUSH
52988: LD_INT 1
52990: ARRAY
52991: PUSH
52992: LD_VAR 0 14
52996: PPUSH
52997: LD_INT 21
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 58
53009: PUSH
53010: EMPTY
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PPUSH
53017: CALL_OW 72
53021: IN
53022: AND
53023: IFFALSE 53059
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
53025: LD_VAR 0 4
53029: PUSH
53030: LD_VAR 0 7
53034: ARRAY
53035: PPUSH
53036: LD_VAR 0 14
53040: PUSH
53041: LD_INT 1
53043: ARRAY
53044: PPUSH
53045: CALL_OW 120
// attacking := true ;
53049: LD_ADDR_VAR 0 29
53053: PUSH
53054: LD_INT 1
53056: ST_TO_ADDR
// continue ;
53057: GO 51232
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
53059: LD_VAR 0 26
53063: PUSH
53064: LD_VAR 0 4
53068: PUSH
53069: LD_VAR 0 7
53073: ARRAY
53074: PPUSH
53075: CALL_OW 257
53079: PUSH
53080: LD_INT 1
53082: EQUAL
53083: AND
53084: PUSH
53085: LD_VAR 0 4
53089: PUSH
53090: LD_VAR 0 7
53094: ARRAY
53095: PPUSH
53096: CALL_OW 256
53100: PUSH
53101: LD_INT 800
53103: LESS
53104: AND
53105: PUSH
53106: LD_VAR 0 4
53110: PUSH
53111: LD_VAR 0 7
53115: ARRAY
53116: PPUSH
53117: CALL_OW 318
53121: NOT
53122: AND
53123: IFFALSE 53140
// ComCrawl ( group [ i ] ) ;
53125: LD_VAR 0 4
53129: PUSH
53130: LD_VAR 0 7
53134: ARRAY
53135: PPUSH
53136: CALL_OW 137
// if f_mines then
53140: LD_VAR 0 21
53144: IFFALSE 53387
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
53146: LD_VAR 0 14
53150: PUSH
53151: LD_INT 1
53153: ARRAY
53154: PPUSH
53155: CALL_OW 247
53159: PUSH
53160: LD_INT 3
53162: EQUAL
53163: PUSH
53164: LD_VAR 0 14
53168: PUSH
53169: LD_INT 1
53171: ARRAY
53172: PUSH
53173: LD_VAR 0 27
53177: IN
53178: NOT
53179: AND
53180: IFFALSE 53387
// begin x := GetX ( tmp [ 1 ] ) ;
53182: LD_ADDR_VAR 0 10
53186: PUSH
53187: LD_VAR 0 14
53191: PUSH
53192: LD_INT 1
53194: ARRAY
53195: PPUSH
53196: CALL_OW 250
53200: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
53201: LD_ADDR_VAR 0 11
53205: PUSH
53206: LD_VAR 0 14
53210: PUSH
53211: LD_INT 1
53213: ARRAY
53214: PPUSH
53215: CALL_OW 251
53219: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
53220: LD_ADDR_VAR 0 12
53224: PUSH
53225: LD_VAR 0 4
53229: PUSH
53230: LD_VAR 0 7
53234: ARRAY
53235: PPUSH
53236: CALL 49115 0 1
53240: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
53241: LD_VAR 0 4
53245: PUSH
53246: LD_VAR 0 7
53250: ARRAY
53251: PPUSH
53252: LD_VAR 0 10
53256: PPUSH
53257: LD_VAR 0 11
53261: PPUSH
53262: LD_VAR 0 14
53266: PUSH
53267: LD_INT 1
53269: ARRAY
53270: PPUSH
53271: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
53275: LD_VAR 0 4
53279: PUSH
53280: LD_VAR 0 7
53284: ARRAY
53285: PPUSH
53286: LD_VAR 0 10
53290: PPUSH
53291: LD_VAR 0 12
53295: PPUSH
53296: LD_INT 7
53298: PPUSH
53299: CALL_OW 272
53303: PPUSH
53304: LD_VAR 0 11
53308: PPUSH
53309: LD_VAR 0 12
53313: PPUSH
53314: LD_INT 7
53316: PPUSH
53317: CALL_OW 273
53321: PPUSH
53322: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
53326: LD_VAR 0 4
53330: PUSH
53331: LD_VAR 0 7
53335: ARRAY
53336: PPUSH
53337: LD_INT 71
53339: PPUSH
53340: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
53344: LD_ADDR_VAR 0 27
53348: PUSH
53349: LD_VAR 0 27
53353: PPUSH
53354: LD_VAR 0 27
53358: PUSH
53359: LD_INT 1
53361: PLUS
53362: PPUSH
53363: LD_VAR 0 14
53367: PUSH
53368: LD_INT 1
53370: ARRAY
53371: PPUSH
53372: CALL_OW 1
53376: ST_TO_ADDR
// attacking := true ;
53377: LD_ADDR_VAR 0 29
53381: PUSH
53382: LD_INT 1
53384: ST_TO_ADDR
// continue ;
53385: GO 51232
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
53387: LD_VAR 0 4
53391: PUSH
53392: LD_VAR 0 7
53396: ARRAY
53397: PPUSH
53398: CALL_OW 257
53402: PUSH
53403: LD_INT 17
53405: EQUAL
53406: PUSH
53407: LD_VAR 0 4
53411: PUSH
53412: LD_VAR 0 7
53416: ARRAY
53417: PPUSH
53418: CALL_OW 110
53422: PUSH
53423: LD_INT 71
53425: EQUAL
53426: NOT
53427: AND
53428: IFFALSE 53574
// begin attacking := false ;
53430: LD_ADDR_VAR 0 29
53434: PUSH
53435: LD_INT 0
53437: ST_TO_ADDR
// k := 5 ;
53438: LD_ADDR_VAR 0 9
53442: PUSH
53443: LD_INT 5
53445: ST_TO_ADDR
// if tmp < k then
53446: LD_VAR 0 14
53450: PUSH
53451: LD_VAR 0 9
53455: LESS
53456: IFFALSE 53468
// k := tmp ;
53458: LD_ADDR_VAR 0 9
53462: PUSH
53463: LD_VAR 0 14
53467: ST_TO_ADDR
// for j = 1 to k do
53468: LD_ADDR_VAR 0 8
53472: PUSH
53473: DOUBLE
53474: LD_INT 1
53476: DEC
53477: ST_TO_ADDR
53478: LD_VAR 0 9
53482: PUSH
53483: FOR_TO
53484: IFFALSE 53572
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
53486: LD_VAR 0 14
53490: PUSH
53491: LD_VAR 0 8
53495: ARRAY
53496: PUSH
53497: LD_VAR 0 14
53501: PPUSH
53502: LD_INT 58
53504: PUSH
53505: EMPTY
53506: LIST
53507: PPUSH
53508: CALL_OW 72
53512: IN
53513: NOT
53514: IFFALSE 53570
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
53516: LD_VAR 0 4
53520: PUSH
53521: LD_VAR 0 7
53525: ARRAY
53526: PPUSH
53527: LD_VAR 0 14
53531: PUSH
53532: LD_VAR 0 8
53536: ARRAY
53537: PPUSH
53538: CALL_OW 115
// attacking := true ;
53542: LD_ADDR_VAR 0 29
53546: PUSH
53547: LD_INT 1
53549: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
53550: LD_VAR 0 4
53554: PUSH
53555: LD_VAR 0 7
53559: ARRAY
53560: PPUSH
53561: LD_INT 71
53563: PPUSH
53564: CALL_OW 109
// continue ;
53568: GO 53483
// end ; end ;
53570: GO 53483
53572: POP
53573: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
53574: LD_VAR 0 4
53578: PUSH
53579: LD_VAR 0 7
53583: ARRAY
53584: PPUSH
53585: CALL_OW 257
53589: PUSH
53590: LD_INT 8
53592: EQUAL
53593: PUSH
53594: LD_VAR 0 4
53598: PUSH
53599: LD_VAR 0 7
53603: ARRAY
53604: PPUSH
53605: CALL_OW 264
53609: PUSH
53610: LD_INT 28
53612: PUSH
53613: LD_INT 45
53615: PUSH
53616: LD_INT 7
53618: PUSH
53619: LD_INT 47
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: IN
53628: OR
53629: IFFALSE 53859
// begin attacking := false ;
53631: LD_ADDR_VAR 0 29
53635: PUSH
53636: LD_INT 0
53638: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
53639: LD_VAR 0 14
53643: PUSH
53644: LD_INT 1
53646: ARRAY
53647: PPUSH
53648: CALL_OW 266
53652: PUSH
53653: LD_INT 32
53655: PUSH
53656: LD_INT 31
53658: PUSH
53659: LD_INT 33
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 5
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: IN
53675: IFFALSE 53859
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
53677: LD_ADDR_VAR 0 9
53681: PUSH
53682: LD_VAR 0 14
53686: PUSH
53687: LD_INT 1
53689: ARRAY
53690: PPUSH
53691: CALL_OW 266
53695: PPUSH
53696: LD_VAR 0 14
53700: PUSH
53701: LD_INT 1
53703: ARRAY
53704: PPUSH
53705: CALL_OW 250
53709: PPUSH
53710: LD_VAR 0 14
53714: PUSH
53715: LD_INT 1
53717: ARRAY
53718: PPUSH
53719: CALL_OW 251
53723: PPUSH
53724: LD_VAR 0 14
53728: PUSH
53729: LD_INT 1
53731: ARRAY
53732: PPUSH
53733: CALL_OW 254
53737: PPUSH
53738: LD_VAR 0 14
53742: PUSH
53743: LD_INT 1
53745: ARRAY
53746: PPUSH
53747: CALL_OW 248
53751: PPUSH
53752: LD_INT 0
53754: PPUSH
53755: CALL 30491 0 6
53759: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
53760: LD_ADDR_VAR 0 8
53764: PUSH
53765: LD_VAR 0 4
53769: PUSH
53770: LD_VAR 0 7
53774: ARRAY
53775: PPUSH
53776: LD_VAR 0 9
53780: PPUSH
53781: CALL 49178 0 2
53785: ST_TO_ADDR
// if j then
53786: LD_VAR 0 8
53790: IFFALSE 53859
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53792: LD_VAR 0 8
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PPUSH
53801: LD_VAR 0 8
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: PPUSH
53810: CALL_OW 488
53814: IFFALSE 53859
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
53816: LD_VAR 0 4
53820: PUSH
53821: LD_VAR 0 7
53825: ARRAY
53826: PPUSH
53827: LD_VAR 0 8
53831: PUSH
53832: LD_INT 1
53834: ARRAY
53835: PPUSH
53836: LD_VAR 0 8
53840: PUSH
53841: LD_INT 2
53843: ARRAY
53844: PPUSH
53845: CALL_OW 116
// attacking := true ;
53849: LD_ADDR_VAR 0 29
53853: PUSH
53854: LD_INT 1
53856: ST_TO_ADDR
// continue ;
53857: GO 51232
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
53859: LD_VAR 0 4
53863: PUSH
53864: LD_VAR 0 7
53868: ARRAY
53869: PPUSH
53870: CALL_OW 265
53874: PUSH
53875: LD_INT 11
53877: EQUAL
53878: IFFALSE 54156
// begin k := 10 ;
53880: LD_ADDR_VAR 0 9
53884: PUSH
53885: LD_INT 10
53887: ST_TO_ADDR
// x := 0 ;
53888: LD_ADDR_VAR 0 10
53892: PUSH
53893: LD_INT 0
53895: ST_TO_ADDR
// if tmp < k then
53896: LD_VAR 0 14
53900: PUSH
53901: LD_VAR 0 9
53905: LESS
53906: IFFALSE 53918
// k := tmp ;
53908: LD_ADDR_VAR 0 9
53912: PUSH
53913: LD_VAR 0 14
53917: ST_TO_ADDR
// for j = k downto 1 do
53918: LD_ADDR_VAR 0 8
53922: PUSH
53923: DOUBLE
53924: LD_VAR 0 9
53928: INC
53929: ST_TO_ADDR
53930: LD_INT 1
53932: PUSH
53933: FOR_DOWNTO
53934: IFFALSE 54009
// begin if GetType ( tmp [ j ] ) = unit_human then
53936: LD_VAR 0 14
53940: PUSH
53941: LD_VAR 0 8
53945: ARRAY
53946: PPUSH
53947: CALL_OW 247
53951: PUSH
53952: LD_INT 1
53954: EQUAL
53955: IFFALSE 54007
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
53957: LD_VAR 0 4
53961: PUSH
53962: LD_VAR 0 7
53966: ARRAY
53967: PPUSH
53968: LD_VAR 0 14
53972: PUSH
53973: LD_VAR 0 8
53977: ARRAY
53978: PPUSH
53979: CALL 49449 0 2
// x := tmp [ j ] ;
53983: LD_ADDR_VAR 0 10
53987: PUSH
53988: LD_VAR 0 14
53992: PUSH
53993: LD_VAR 0 8
53997: ARRAY
53998: ST_TO_ADDR
// attacking := true ;
53999: LD_ADDR_VAR 0 29
54003: PUSH
54004: LD_INT 1
54006: ST_TO_ADDR
// end ; end ;
54007: GO 53933
54009: POP
54010: POP
// if not x then
54011: LD_VAR 0 10
54015: NOT
54016: IFFALSE 54156
// begin attacking := true ;
54018: LD_ADDR_VAR 0 29
54022: PUSH
54023: LD_INT 1
54025: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
54026: LD_VAR 0 4
54030: PUSH
54031: LD_VAR 0 7
54035: ARRAY
54036: PPUSH
54037: CALL_OW 250
54041: PPUSH
54042: LD_VAR 0 4
54046: PUSH
54047: LD_VAR 0 7
54051: ARRAY
54052: PPUSH
54053: CALL_OW 251
54057: PPUSH
54058: CALL_OW 546
54062: PUSH
54063: LD_INT 2
54065: ARRAY
54066: PUSH
54067: LD_VAR 0 14
54071: PUSH
54072: LD_INT 1
54074: ARRAY
54075: PPUSH
54076: CALL_OW 250
54080: PPUSH
54081: LD_VAR 0 14
54085: PUSH
54086: LD_INT 1
54088: ARRAY
54089: PPUSH
54090: CALL_OW 251
54094: PPUSH
54095: CALL_OW 546
54099: PUSH
54100: LD_INT 2
54102: ARRAY
54103: EQUAL
54104: IFFALSE 54132
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
54106: LD_VAR 0 4
54110: PUSH
54111: LD_VAR 0 7
54115: ARRAY
54116: PPUSH
54117: LD_VAR 0 14
54121: PUSH
54122: LD_INT 1
54124: ARRAY
54125: PPUSH
54126: CALL 49449 0 2
54130: GO 54156
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
54132: LD_VAR 0 4
54136: PUSH
54137: LD_VAR 0 7
54141: ARRAY
54142: PPUSH
54143: LD_VAR 0 14
54147: PUSH
54148: LD_INT 1
54150: ARRAY
54151: PPUSH
54152: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
54156: LD_VAR 0 4
54160: PUSH
54161: LD_VAR 0 7
54165: ARRAY
54166: PPUSH
54167: CALL_OW 264
54171: PUSH
54172: LD_INT 29
54174: EQUAL
54175: IFFALSE 54541
// begin if WantsToAttack ( group [ i ] ) in bombed then
54177: LD_VAR 0 4
54181: PUSH
54182: LD_VAR 0 7
54186: ARRAY
54187: PPUSH
54188: CALL_OW 319
54192: PUSH
54193: LD_VAR 0 28
54197: IN
54198: IFFALSE 54202
// continue ;
54200: GO 51232
// k := 8 ;
54202: LD_ADDR_VAR 0 9
54206: PUSH
54207: LD_INT 8
54209: ST_TO_ADDR
// x := 0 ;
54210: LD_ADDR_VAR 0 10
54214: PUSH
54215: LD_INT 0
54217: ST_TO_ADDR
// if tmp < k then
54218: LD_VAR 0 14
54222: PUSH
54223: LD_VAR 0 9
54227: LESS
54228: IFFALSE 54240
// k := tmp ;
54230: LD_ADDR_VAR 0 9
54234: PUSH
54235: LD_VAR 0 14
54239: ST_TO_ADDR
// for j = 1 to k do
54240: LD_ADDR_VAR 0 8
54244: PUSH
54245: DOUBLE
54246: LD_INT 1
54248: DEC
54249: ST_TO_ADDR
54250: LD_VAR 0 9
54254: PUSH
54255: FOR_TO
54256: IFFALSE 54388
// begin if GetType ( tmp [ j ] ) = unit_building then
54258: LD_VAR 0 14
54262: PUSH
54263: LD_VAR 0 8
54267: ARRAY
54268: PPUSH
54269: CALL_OW 247
54273: PUSH
54274: LD_INT 3
54276: EQUAL
54277: IFFALSE 54386
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
54279: LD_VAR 0 14
54283: PUSH
54284: LD_VAR 0 8
54288: ARRAY
54289: PUSH
54290: LD_VAR 0 28
54294: IN
54295: NOT
54296: PUSH
54297: LD_VAR 0 14
54301: PUSH
54302: LD_VAR 0 8
54306: ARRAY
54307: PPUSH
54308: CALL_OW 313
54312: AND
54313: IFFALSE 54386
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
54315: LD_VAR 0 4
54319: PUSH
54320: LD_VAR 0 7
54324: ARRAY
54325: PPUSH
54326: LD_VAR 0 14
54330: PUSH
54331: LD_VAR 0 8
54335: ARRAY
54336: PPUSH
54337: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
54341: LD_ADDR_VAR 0 28
54345: PUSH
54346: LD_VAR 0 28
54350: PPUSH
54351: LD_VAR 0 28
54355: PUSH
54356: LD_INT 1
54358: PLUS
54359: PPUSH
54360: LD_VAR 0 14
54364: PUSH
54365: LD_VAR 0 8
54369: ARRAY
54370: PPUSH
54371: CALL_OW 1
54375: ST_TO_ADDR
// attacking := true ;
54376: LD_ADDR_VAR 0 29
54380: PUSH
54381: LD_INT 1
54383: ST_TO_ADDR
// break ;
54384: GO 54388
// end ; end ;
54386: GO 54255
54388: POP
54389: POP
// if not attacking and f_attack_depot then
54390: LD_VAR 0 29
54394: NOT
54395: PUSH
54396: LD_VAR 0 25
54400: AND
54401: IFFALSE 54496
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54403: LD_ADDR_VAR 0 13
54407: PUSH
54408: LD_VAR 0 14
54412: PPUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 30
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 30
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: PPUSH
54441: CALL_OW 72
54445: ST_TO_ADDR
// if z then
54446: LD_VAR 0 13
54450: IFFALSE 54496
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
54452: LD_VAR 0 4
54456: PUSH
54457: LD_VAR 0 7
54461: ARRAY
54462: PPUSH
54463: LD_VAR 0 13
54467: PPUSH
54468: LD_VAR 0 4
54472: PUSH
54473: LD_VAR 0 7
54477: ARRAY
54478: PPUSH
54479: CALL_OW 74
54483: PPUSH
54484: CALL_OW 115
// attacking := true ;
54488: LD_ADDR_VAR 0 29
54492: PUSH
54493: LD_INT 1
54495: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
54496: LD_VAR 0 4
54500: PUSH
54501: LD_VAR 0 7
54505: ARRAY
54506: PPUSH
54507: CALL_OW 256
54511: PUSH
54512: LD_INT 500
54514: LESS
54515: IFFALSE 54541
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
54517: LD_VAR 0 4
54521: PUSH
54522: LD_VAR 0 7
54526: ARRAY
54527: PPUSH
54528: LD_VAR 0 14
54532: PUSH
54533: LD_INT 1
54535: ARRAY
54536: PPUSH
54537: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
54541: LD_VAR 0 4
54545: PUSH
54546: LD_VAR 0 7
54550: ARRAY
54551: PPUSH
54552: CALL_OW 264
54556: PUSH
54557: LD_INT 49
54559: EQUAL
54560: IFFALSE 54681
// begin if not HasTask ( group [ i ] ) then
54562: LD_VAR 0 4
54566: PUSH
54567: LD_VAR 0 7
54571: ARRAY
54572: PPUSH
54573: CALL_OW 314
54577: NOT
54578: IFFALSE 54681
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_INT 81
54587: PUSH
54588: LD_VAR 0 4
54592: PUSH
54593: LD_VAR 0 7
54597: ARRAY
54598: PPUSH
54599: CALL_OW 255
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PPUSH
54608: CALL_OW 69
54612: PPUSH
54613: LD_VAR 0 4
54617: PUSH
54618: LD_VAR 0 7
54622: ARRAY
54623: PPUSH
54624: CALL_OW 74
54628: ST_TO_ADDR
// if k then
54629: LD_VAR 0 9
54633: IFFALSE 54681
// if GetDistUnits ( group [ i ] , k ) > 10 then
54635: LD_VAR 0 4
54639: PUSH
54640: LD_VAR 0 7
54644: ARRAY
54645: PPUSH
54646: LD_VAR 0 9
54650: PPUSH
54651: CALL_OW 296
54655: PUSH
54656: LD_INT 10
54658: GREATER
54659: IFFALSE 54681
// ComMoveUnit ( group [ i ] , k ) ;
54661: LD_VAR 0 4
54665: PUSH
54666: LD_VAR 0 7
54670: ARRAY
54671: PPUSH
54672: LD_VAR 0 9
54676: PPUSH
54677: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54681: LD_VAR 0 4
54685: PUSH
54686: LD_VAR 0 7
54690: ARRAY
54691: PPUSH
54692: CALL_OW 256
54696: PUSH
54697: LD_INT 250
54699: LESS
54700: PUSH
54701: LD_VAR 0 4
54705: PUSH
54706: LD_VAR 0 7
54710: ARRAY
54711: PUSH
54712: LD_INT 21
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 23
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PPUSH
54736: CALL_OW 69
54740: IN
54741: AND
54742: IFFALSE 54867
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
54744: LD_ADDR_VAR 0 9
54748: PUSH
54749: LD_OWVAR 3
54753: PUSH
54754: LD_VAR 0 4
54758: PUSH
54759: LD_VAR 0 7
54763: ARRAY
54764: DIFF
54765: PPUSH
54766: LD_VAR 0 4
54770: PUSH
54771: LD_VAR 0 7
54775: ARRAY
54776: PPUSH
54777: CALL_OW 74
54781: ST_TO_ADDR
// if not k then
54782: LD_VAR 0 9
54786: NOT
54787: IFFALSE 54791
// continue ;
54789: GO 51232
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
54791: LD_VAR 0 9
54795: PUSH
54796: LD_INT 81
54798: PUSH
54799: LD_VAR 0 4
54803: PUSH
54804: LD_VAR 0 7
54808: ARRAY
54809: PPUSH
54810: CALL_OW 255
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PPUSH
54819: CALL_OW 69
54823: IN
54824: PUSH
54825: LD_VAR 0 9
54829: PPUSH
54830: LD_VAR 0 4
54834: PUSH
54835: LD_VAR 0 7
54839: ARRAY
54840: PPUSH
54841: CALL_OW 296
54845: PUSH
54846: LD_INT 5
54848: LESS
54849: AND
54850: IFFALSE 54867
// ComAutodestruct ( group [ i ] ) ;
54852: LD_VAR 0 4
54856: PUSH
54857: LD_VAR 0 7
54861: ARRAY
54862: PPUSH
54863: CALL 49347 0 1
// end ; if f_attack_depot then
54867: LD_VAR 0 25
54871: IFFALSE 54983
// begin k := 6 ;
54873: LD_ADDR_VAR 0 9
54877: PUSH
54878: LD_INT 6
54880: ST_TO_ADDR
// if tmp < k then
54881: LD_VAR 0 14
54885: PUSH
54886: LD_VAR 0 9
54890: LESS
54891: IFFALSE 54903
// k := tmp ;
54893: LD_ADDR_VAR 0 9
54897: PUSH
54898: LD_VAR 0 14
54902: ST_TO_ADDR
// for j = 1 to k do
54903: LD_ADDR_VAR 0 8
54907: PUSH
54908: DOUBLE
54909: LD_INT 1
54911: DEC
54912: ST_TO_ADDR
54913: LD_VAR 0 9
54917: PUSH
54918: FOR_TO
54919: IFFALSE 54981
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
54921: LD_VAR 0 8
54925: PPUSH
54926: CALL_OW 266
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: IN
54941: IFFALSE 54979
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
54943: LD_VAR 0 4
54947: PUSH
54948: LD_VAR 0 7
54952: ARRAY
54953: PPUSH
54954: LD_VAR 0 14
54958: PUSH
54959: LD_VAR 0 8
54963: ARRAY
54964: PPUSH
54965: CALL_OW 115
// attacking := true ;
54969: LD_ADDR_VAR 0 29
54973: PUSH
54974: LD_INT 1
54976: ST_TO_ADDR
// break ;
54977: GO 54981
// end ;
54979: GO 54918
54981: POP
54982: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
54983: LD_VAR 0 4
54987: PUSH
54988: LD_VAR 0 7
54992: ARRAY
54993: PPUSH
54994: CALL_OW 302
54998: PUSH
54999: LD_VAR 0 29
55003: NOT
55004: AND
55005: IFFALSE 55327
// begin if GetTag ( group [ i ] ) = 71 then
55007: LD_VAR 0 4
55011: PUSH
55012: LD_VAR 0 7
55016: ARRAY
55017: PPUSH
55018: CALL_OW 110
55022: PUSH
55023: LD_INT 71
55025: EQUAL
55026: IFFALSE 55067
// begin if HasTask ( group [ i ] ) then
55028: LD_VAR 0 4
55032: PUSH
55033: LD_VAR 0 7
55037: ARRAY
55038: PPUSH
55039: CALL_OW 314
55043: IFFALSE 55049
// continue else
55045: GO 51232
55047: GO 55067
// SetTag ( group [ i ] , 0 ) ;
55049: LD_VAR 0 4
55053: PUSH
55054: LD_VAR 0 7
55058: ARRAY
55059: PPUSH
55060: LD_INT 0
55062: PPUSH
55063: CALL_OW 109
// end ; k := 8 ;
55067: LD_ADDR_VAR 0 9
55071: PUSH
55072: LD_INT 8
55074: ST_TO_ADDR
// x := 0 ;
55075: LD_ADDR_VAR 0 10
55079: PUSH
55080: LD_INT 0
55082: ST_TO_ADDR
// if tmp < k then
55083: LD_VAR 0 14
55087: PUSH
55088: LD_VAR 0 9
55092: LESS
55093: IFFALSE 55105
// k := tmp ;
55095: LD_ADDR_VAR 0 9
55099: PUSH
55100: LD_VAR 0 14
55104: ST_TO_ADDR
// for j = 1 to k do
55105: LD_ADDR_VAR 0 8
55109: PUSH
55110: DOUBLE
55111: LD_INT 1
55113: DEC
55114: ST_TO_ADDR
55115: LD_VAR 0 9
55119: PUSH
55120: FOR_TO
55121: IFFALSE 55219
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
55123: LD_VAR 0 14
55127: PUSH
55128: LD_VAR 0 8
55132: ARRAY
55133: PPUSH
55134: CALL_OW 247
55138: PUSH
55139: LD_INT 1
55141: EQUAL
55142: PUSH
55143: LD_VAR 0 14
55147: PUSH
55148: LD_VAR 0 8
55152: ARRAY
55153: PPUSH
55154: CALL_OW 256
55158: PUSH
55159: LD_INT 250
55161: LESS
55162: PUSH
55163: LD_VAR 0 20
55167: AND
55168: PUSH
55169: LD_VAR 0 20
55173: NOT
55174: PUSH
55175: LD_VAR 0 14
55179: PUSH
55180: LD_VAR 0 8
55184: ARRAY
55185: PPUSH
55186: CALL_OW 256
55190: PUSH
55191: LD_INT 250
55193: GREATEREQUAL
55194: AND
55195: OR
55196: AND
55197: IFFALSE 55217
// begin x := tmp [ j ] ;
55199: LD_ADDR_VAR 0 10
55203: PUSH
55204: LD_VAR 0 14
55208: PUSH
55209: LD_VAR 0 8
55213: ARRAY
55214: ST_TO_ADDR
// break ;
55215: GO 55219
// end ;
55217: GO 55120
55219: POP
55220: POP
// if x then
55221: LD_VAR 0 10
55225: IFFALSE 55249
// ComAttackUnit ( group [ i ] , x ) else
55227: LD_VAR 0 4
55231: PUSH
55232: LD_VAR 0 7
55236: ARRAY
55237: PPUSH
55238: LD_VAR 0 10
55242: PPUSH
55243: CALL_OW 115
55247: GO 55273
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
55249: LD_VAR 0 4
55253: PUSH
55254: LD_VAR 0 7
55258: ARRAY
55259: PPUSH
55260: LD_VAR 0 14
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PPUSH
55269: CALL_OW 115
// if not HasTask ( group [ i ] ) then
55273: LD_VAR 0 4
55277: PUSH
55278: LD_VAR 0 7
55282: ARRAY
55283: PPUSH
55284: CALL_OW 314
55288: NOT
55289: IFFALSE 55327
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
55291: LD_VAR 0 4
55295: PUSH
55296: LD_VAR 0 7
55300: ARRAY
55301: PPUSH
55302: LD_VAR 0 14
55306: PPUSH
55307: LD_VAR 0 4
55311: PUSH
55312: LD_VAR 0 7
55316: ARRAY
55317: PPUSH
55318: CALL_OW 74
55322: PPUSH
55323: CALL_OW 115
// end ; end ; end ;
55327: GO 51232
55329: POP
55330: POP
// wait ( 0 0$1 ) ;
55331: LD_INT 35
55333: PPUSH
55334: CALL_OW 67
// until group = [ ] ;
55338: LD_VAR 0 4
55342: PUSH
55343: EMPTY
55344: EQUAL
55345: IFFALSE 51217
// end ;
55347: LD_VAR 0 2
55351: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55352: LD_INT 0
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
// if not base_units then
55358: LD_VAR 0 1
55362: NOT
55363: IFFALSE 55367
// exit ;
55365: GO 55454
// result := false ;
55367: LD_ADDR_VAR 0 2
55371: PUSH
55372: LD_INT 0
55374: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55375: LD_ADDR_VAR 0 5
55379: PUSH
55380: LD_VAR 0 1
55384: PPUSH
55385: LD_INT 21
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PPUSH
55395: CALL_OW 72
55399: ST_TO_ADDR
// if not tmp then
55400: LD_VAR 0 5
55404: NOT
55405: IFFALSE 55409
// exit ;
55407: GO 55454
// for i in tmp do
55409: LD_ADDR_VAR 0 3
55413: PUSH
55414: LD_VAR 0 5
55418: PUSH
55419: FOR_IN
55420: IFFALSE 55452
// begin result := EnemyInRange ( i , 22 ) ;
55422: LD_ADDR_VAR 0 2
55426: PUSH
55427: LD_VAR 0 3
55431: PPUSH
55432: LD_INT 22
55434: PPUSH
55435: CALL 49030 0 2
55439: ST_TO_ADDR
// if result then
55440: LD_VAR 0 2
55444: IFFALSE 55450
// exit ;
55446: POP
55447: POP
55448: GO 55454
// end ;
55450: GO 55419
55452: POP
55453: POP
// end ;
55454: LD_VAR 0 2
55458: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55459: LD_INT 0
55461: PPUSH
55462: PPUSH
// if not units then
55463: LD_VAR 0 1
55467: NOT
55468: IFFALSE 55472
// exit ;
55470: GO 55542
// result := [ ] ;
55472: LD_ADDR_VAR 0 3
55476: PUSH
55477: EMPTY
55478: ST_TO_ADDR
// for i in units do
55479: LD_ADDR_VAR 0 4
55483: PUSH
55484: LD_VAR 0 1
55488: PUSH
55489: FOR_IN
55490: IFFALSE 55540
// if GetTag ( i ) = tag then
55492: LD_VAR 0 4
55496: PPUSH
55497: CALL_OW 110
55501: PUSH
55502: LD_VAR 0 2
55506: EQUAL
55507: IFFALSE 55538
// result := Insert ( result , result + 1 , i ) ;
55509: LD_ADDR_VAR 0 3
55513: PUSH
55514: LD_VAR 0 3
55518: PPUSH
55519: LD_VAR 0 3
55523: PUSH
55524: LD_INT 1
55526: PLUS
55527: PPUSH
55528: LD_VAR 0 4
55532: PPUSH
55533: CALL_OW 2
55537: ST_TO_ADDR
55538: GO 55489
55540: POP
55541: POP
// end ;
55542: LD_VAR 0 3
55546: RET
// export function IsDriver ( un ) ; begin
55547: LD_INT 0
55549: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55550: LD_ADDR_VAR 0 2
55554: PUSH
55555: LD_VAR 0 1
55559: PUSH
55560: LD_INT 55
55562: PUSH
55563: EMPTY
55564: LIST
55565: PPUSH
55566: CALL_OW 69
55570: IN
55571: ST_TO_ADDR
// end ;
55572: LD_VAR 0 2
55576: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55577: LD_INT 0
55579: PPUSH
55580: PPUSH
// list := [ ] ;
55581: LD_ADDR_VAR 0 5
55585: PUSH
55586: EMPTY
55587: ST_TO_ADDR
// case d of 0 :
55588: LD_VAR 0 3
55592: PUSH
55593: LD_INT 0
55595: DOUBLE
55596: EQUAL
55597: IFTRUE 55601
55599: GO 55734
55601: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55602: LD_ADDR_VAR 0 5
55606: PUSH
55607: LD_VAR 0 1
55611: PUSH
55612: LD_INT 4
55614: MINUS
55615: PUSH
55616: LD_VAR 0 2
55620: PUSH
55621: LD_INT 4
55623: MINUS
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: PUSH
55633: LD_VAR 0 1
55637: PUSH
55638: LD_INT 3
55640: MINUS
55641: PUSH
55642: LD_VAR 0 2
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: PUSH
55655: LD_VAR 0 1
55659: PUSH
55660: LD_INT 4
55662: PLUS
55663: PUSH
55664: LD_VAR 0 2
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: PUSH
55677: LD_VAR 0 1
55681: PUSH
55682: LD_INT 3
55684: PLUS
55685: PUSH
55686: LD_VAR 0 2
55690: PUSH
55691: LD_INT 3
55693: PLUS
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: PUSH
55703: LD_VAR 0 1
55707: PUSH
55708: LD_VAR 0 2
55712: PUSH
55713: LD_INT 4
55715: PLUS
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: ST_TO_ADDR
// end ; 1 :
55732: GO 56432
55734: LD_INT 1
55736: DOUBLE
55737: EQUAL
55738: IFTRUE 55742
55740: GO 55875
55742: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55743: LD_ADDR_VAR 0 5
55747: PUSH
55748: LD_VAR 0 1
55752: PUSH
55753: LD_VAR 0 2
55757: PUSH
55758: LD_INT 4
55760: MINUS
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: PUSH
55770: LD_VAR 0 1
55774: PUSH
55775: LD_INT 3
55777: MINUS
55778: PUSH
55779: LD_VAR 0 2
55783: PUSH
55784: LD_INT 3
55786: MINUS
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: PUSH
55796: LD_VAR 0 1
55800: PUSH
55801: LD_INT 4
55803: MINUS
55804: PUSH
55805: LD_VAR 0 2
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: PUSH
55818: LD_VAR 0 1
55822: PUSH
55823: LD_VAR 0 2
55827: PUSH
55828: LD_INT 3
55830: PLUS
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: PUSH
55840: LD_VAR 0 1
55844: PUSH
55845: LD_INT 4
55847: PLUS
55848: PUSH
55849: LD_VAR 0 2
55853: PUSH
55854: LD_INT 4
55856: PLUS
55857: PUSH
55858: LD_INT 5
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// end ; 2 :
55873: GO 56432
55875: LD_INT 2
55877: DOUBLE
55878: EQUAL
55879: IFTRUE 55883
55881: GO 56012
55883: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55884: LD_ADDR_VAR 0 5
55888: PUSH
55889: LD_VAR 0 1
55893: PUSH
55894: LD_VAR 0 2
55898: PUSH
55899: LD_INT 3
55901: MINUS
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: PUSH
55911: LD_VAR 0 1
55915: PUSH
55916: LD_INT 4
55918: PLUS
55919: PUSH
55920: LD_VAR 0 2
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: PUSH
55933: LD_VAR 0 1
55937: PUSH
55938: LD_VAR 0 2
55942: PUSH
55943: LD_INT 4
55945: PLUS
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: PUSH
55955: LD_VAR 0 1
55959: PUSH
55960: LD_INT 3
55962: MINUS
55963: PUSH
55964: LD_VAR 0 2
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: PUSH
55977: LD_VAR 0 1
55981: PUSH
55982: LD_INT 4
55984: MINUS
55985: PUSH
55986: LD_VAR 0 2
55990: PUSH
55991: LD_INT 4
55993: MINUS
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// end ; 3 :
56010: GO 56432
56012: LD_INT 3
56014: DOUBLE
56015: EQUAL
56016: IFTRUE 56020
56018: GO 56153
56020: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56021: LD_ADDR_VAR 0 5
56025: PUSH
56026: LD_VAR 0 1
56030: PUSH
56031: LD_INT 3
56033: PLUS
56034: PUSH
56035: LD_VAR 0 2
56039: PUSH
56040: LD_INT 4
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: PUSH
56048: LD_VAR 0 1
56052: PUSH
56053: LD_INT 4
56055: PLUS
56056: PUSH
56057: LD_VAR 0 2
56061: PUSH
56062: LD_INT 4
56064: PLUS
56065: PUSH
56066: LD_INT 5
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: PUSH
56074: LD_VAR 0 1
56078: PUSH
56079: LD_INT 4
56081: MINUS
56082: PUSH
56083: LD_VAR 0 2
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: PUSH
56096: LD_VAR 0 1
56100: PUSH
56101: LD_VAR 0 2
56105: PUSH
56106: LD_INT 4
56108: MINUS
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: PUSH
56118: LD_VAR 0 1
56122: PUSH
56123: LD_INT 3
56125: MINUS
56126: PUSH
56127: LD_VAR 0 2
56131: PUSH
56132: LD_INT 3
56134: MINUS
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// end ; 4 :
56151: GO 56432
56153: LD_INT 4
56155: DOUBLE
56156: EQUAL
56157: IFTRUE 56161
56159: GO 56294
56161: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56162: LD_ADDR_VAR 0 5
56166: PUSH
56167: LD_VAR 0 1
56171: PUSH
56172: LD_VAR 0 2
56176: PUSH
56177: LD_INT 4
56179: PLUS
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: PUSH
56189: LD_VAR 0 1
56193: PUSH
56194: LD_INT 3
56196: PLUS
56197: PUSH
56198: LD_VAR 0 2
56202: PUSH
56203: LD_INT 3
56205: PLUS
56206: PUSH
56207: LD_INT 5
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: LD_VAR 0 1
56219: PUSH
56220: LD_INT 4
56222: PLUS
56223: PUSH
56224: LD_VAR 0 2
56228: PUSH
56229: LD_INT 4
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: PUSH
56237: LD_VAR 0 1
56241: PUSH
56242: LD_VAR 0 2
56246: PUSH
56247: LD_INT 3
56249: MINUS
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: PUSH
56259: LD_VAR 0 1
56263: PUSH
56264: LD_INT 4
56266: MINUS
56267: PUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_INT 4
56275: MINUS
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: ST_TO_ADDR
// end ; 5 :
56292: GO 56432
56294: LD_INT 5
56296: DOUBLE
56297: EQUAL
56298: IFTRUE 56302
56300: GO 56431
56302: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56303: LD_ADDR_VAR 0 5
56307: PUSH
56308: LD_VAR 0 1
56312: PUSH
56313: LD_INT 4
56315: MINUS
56316: PUSH
56317: LD_VAR 0 2
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: PUSH
56330: LD_VAR 0 1
56334: PUSH
56335: LD_VAR 0 2
56339: PUSH
56340: LD_INT 4
56342: MINUS
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: PUSH
56352: LD_VAR 0 1
56356: PUSH
56357: LD_INT 4
56359: PLUS
56360: PUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_INT 4
56368: PLUS
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: PUSH
56378: LD_VAR 0 1
56382: PUSH
56383: LD_INT 3
56385: PLUS
56386: PUSH
56387: LD_VAR 0 2
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: PUSH
56400: LD_VAR 0 1
56404: PUSH
56405: LD_VAR 0 2
56409: PUSH
56410: LD_INT 3
56412: PLUS
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// end ; end ;
56429: GO 56432
56431: POP
// result := list ;
56432: LD_ADDR_VAR 0 4
56436: PUSH
56437: LD_VAR 0 5
56441: ST_TO_ADDR
// end ;
56442: LD_VAR 0 4
56446: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56447: LD_INT 0
56449: PPUSH
56450: PPUSH
56451: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56452: LD_VAR 0 1
56456: NOT
56457: PUSH
56458: LD_VAR 0 2
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: IN
56481: NOT
56482: OR
56483: IFFALSE 56487
// exit ;
56485: GO 56579
// tmp := [ ] ;
56487: LD_ADDR_VAR 0 5
56491: PUSH
56492: EMPTY
56493: ST_TO_ADDR
// for i in units do
56494: LD_ADDR_VAR 0 4
56498: PUSH
56499: LD_VAR 0 1
56503: PUSH
56504: FOR_IN
56505: IFFALSE 56548
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56507: LD_ADDR_VAR 0 5
56511: PUSH
56512: LD_VAR 0 5
56516: PPUSH
56517: LD_VAR 0 5
56521: PUSH
56522: LD_INT 1
56524: PLUS
56525: PPUSH
56526: LD_VAR 0 4
56530: PPUSH
56531: LD_VAR 0 2
56535: PPUSH
56536: CALL_OW 259
56540: PPUSH
56541: CALL_OW 2
56545: ST_TO_ADDR
56546: GO 56504
56548: POP
56549: POP
// if not tmp then
56550: LD_VAR 0 5
56554: NOT
56555: IFFALSE 56559
// exit ;
56557: GO 56579
// result := SortListByListDesc ( units , tmp ) ;
56559: LD_ADDR_VAR 0 3
56563: PUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: LD_VAR 0 5
56573: PPUSH
56574: CALL_OW 77
56578: ST_TO_ADDR
// end ;
56579: LD_VAR 0 3
56583: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56584: LD_INT 0
56586: PPUSH
56587: PPUSH
56588: PPUSH
// x := GetX ( building ) ;
56589: LD_ADDR_VAR 0 4
56593: PUSH
56594: LD_VAR 0 2
56598: PPUSH
56599: CALL_OW 250
56603: ST_TO_ADDR
// y := GetY ( building ) ;
56604: LD_ADDR_VAR 0 5
56608: PUSH
56609: LD_VAR 0 2
56613: PPUSH
56614: CALL_OW 251
56618: ST_TO_ADDR
// if GetTaskList ( unit ) then
56619: LD_VAR 0 1
56623: PPUSH
56624: CALL_OW 437
56628: IFFALSE 56723
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56630: LD_STRING e
56632: PUSH
56633: LD_VAR 0 1
56637: PPUSH
56638: CALL_OW 437
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: EQUAL
56651: PUSH
56652: LD_VAR 0 4
56656: PUSH
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 437
56666: PUSH
56667: LD_INT 1
56669: ARRAY
56670: PUSH
56671: LD_INT 2
56673: ARRAY
56674: EQUAL
56675: AND
56676: PUSH
56677: LD_VAR 0 5
56681: PUSH
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL_OW 437
56691: PUSH
56692: LD_INT 1
56694: ARRAY
56695: PUSH
56696: LD_INT 3
56698: ARRAY
56699: EQUAL
56700: AND
56701: IFFALSE 56713
// result := true else
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_INT 1
56710: ST_TO_ADDR
56711: GO 56721
// result := false ;
56713: LD_ADDR_VAR 0 3
56717: PUSH
56718: LD_INT 0
56720: ST_TO_ADDR
// end else
56721: GO 56731
// result := false ;
56723: LD_ADDR_VAR 0 3
56727: PUSH
56728: LD_INT 0
56730: ST_TO_ADDR
// end ;
56731: LD_VAR 0 3
56735: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56736: LD_INT 0
56738: PPUSH
56739: PPUSH
56740: PPUSH
56741: PPUSH
// if not unit or not area then
56742: LD_VAR 0 1
56746: NOT
56747: PUSH
56748: LD_VAR 0 2
56752: NOT
56753: OR
56754: IFFALSE 56758
// exit ;
56756: GO 56923
// tmp := AreaToList ( area , i ) ;
56758: LD_ADDR_VAR 0 6
56762: PUSH
56763: LD_VAR 0 2
56767: PPUSH
56768: LD_VAR 0 5
56772: PPUSH
56773: CALL_OW 517
56777: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56778: LD_ADDR_VAR 0 5
56782: PUSH
56783: DOUBLE
56784: LD_INT 1
56786: DEC
56787: ST_TO_ADDR
56788: LD_VAR 0 6
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PUSH
56797: FOR_TO
56798: IFFALSE 56913
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56800: LD_ADDR_VAR 0 7
56804: PUSH
56805: LD_VAR 0 6
56809: PUSH
56810: LD_INT 1
56812: ARRAY
56813: PUSH
56814: LD_VAR 0 5
56818: ARRAY
56819: PUSH
56820: LD_VAR 0 6
56824: PUSH
56825: LD_INT 2
56827: ARRAY
56828: PUSH
56829: LD_VAR 0 5
56833: ARRAY
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56839: LD_VAR 0 7
56843: PUSH
56844: LD_INT 1
56846: ARRAY
56847: PPUSH
56848: LD_VAR 0 7
56852: PUSH
56853: LD_INT 2
56855: ARRAY
56856: PPUSH
56857: CALL_OW 428
56861: PUSH
56862: LD_INT 0
56864: EQUAL
56865: IFFALSE 56911
// begin result := true ;
56867: LD_ADDR_VAR 0 4
56871: PUSH
56872: LD_INT 1
56874: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56875: LD_VAR 0 1
56879: PPUSH
56880: LD_VAR 0 7
56884: PUSH
56885: LD_INT 1
56887: ARRAY
56888: PPUSH
56889: LD_VAR 0 7
56893: PUSH
56894: LD_INT 2
56896: ARRAY
56897: PPUSH
56898: LD_VAR 0 3
56902: PPUSH
56903: CALL_OW 48
// exit ;
56907: POP
56908: POP
56909: GO 56923
// end ; end ;
56911: GO 56797
56913: POP
56914: POP
// result := false ;
56915: LD_ADDR_VAR 0 4
56919: PUSH
56920: LD_INT 0
56922: ST_TO_ADDR
// end ;
56923: LD_VAR 0 4
56927: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56928: LD_INT 0
56930: PPUSH
56931: PPUSH
56932: PPUSH
// if not side or side > 8 then
56933: LD_VAR 0 1
56937: NOT
56938: PUSH
56939: LD_VAR 0 1
56943: PUSH
56944: LD_INT 8
56946: GREATER
56947: OR
56948: IFFALSE 56952
// exit ;
56950: GO 57139
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56952: LD_ADDR_VAR 0 4
56956: PUSH
56957: LD_INT 22
56959: PUSH
56960: LD_VAR 0 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 21
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PPUSH
56983: CALL_OW 69
56987: ST_TO_ADDR
// if not tmp then
56988: LD_VAR 0 4
56992: NOT
56993: IFFALSE 56997
// exit ;
56995: GO 57139
// enable_addtolog := true ;
56997: LD_ADDR_OWVAR 81
57001: PUSH
57002: LD_INT 1
57004: ST_TO_ADDR
// AddToLog ( [ ) ;
57005: LD_STRING [
57007: PPUSH
57008: CALL_OW 561
// for i in tmp do
57012: LD_ADDR_VAR 0 3
57016: PUSH
57017: LD_VAR 0 4
57021: PUSH
57022: FOR_IN
57023: IFFALSE 57130
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57025: LD_STRING [
57027: PUSH
57028: LD_VAR 0 3
57032: PPUSH
57033: CALL_OW 266
57037: STR
57038: PUSH
57039: LD_STRING , 
57041: STR
57042: PUSH
57043: LD_VAR 0 3
57047: PPUSH
57048: CALL_OW 250
57052: STR
57053: PUSH
57054: LD_STRING , 
57056: STR
57057: PUSH
57058: LD_VAR 0 3
57062: PPUSH
57063: CALL_OW 251
57067: STR
57068: PUSH
57069: LD_STRING , 
57071: STR
57072: PUSH
57073: LD_VAR 0 3
57077: PPUSH
57078: CALL_OW 254
57082: STR
57083: PUSH
57084: LD_STRING , 
57086: STR
57087: PUSH
57088: LD_VAR 0 3
57092: PPUSH
57093: LD_INT 1
57095: PPUSH
57096: CALL_OW 268
57100: STR
57101: PUSH
57102: LD_STRING , 
57104: STR
57105: PUSH
57106: LD_VAR 0 3
57110: PPUSH
57111: LD_INT 2
57113: PPUSH
57114: CALL_OW 268
57118: STR
57119: PUSH
57120: LD_STRING ],
57122: STR
57123: PPUSH
57124: CALL_OW 561
// end ;
57128: GO 57022
57130: POP
57131: POP
// AddToLog ( ]; ) ;
57132: LD_STRING ];
57134: PPUSH
57135: CALL_OW 561
// end ;
57139: LD_VAR 0 2
57143: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
57149: PPUSH
57150: PPUSH
// if not area or not rate or not max then
57151: LD_VAR 0 1
57155: NOT
57156: PUSH
57157: LD_VAR 0 2
57161: NOT
57162: OR
57163: PUSH
57164: LD_VAR 0 4
57168: NOT
57169: OR
57170: IFFALSE 57174
// exit ;
57172: GO 57366
// while 1 do
57174: LD_INT 1
57176: IFFALSE 57366
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57178: LD_ADDR_VAR 0 9
57182: PUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: LD_INT 1
57190: PPUSH
57191: CALL_OW 287
57195: PUSH
57196: LD_INT 10
57198: MUL
57199: ST_TO_ADDR
// r := rate / 10 ;
57200: LD_ADDR_VAR 0 7
57204: PUSH
57205: LD_VAR 0 2
57209: PUSH
57210: LD_INT 10
57212: DIVREAL
57213: ST_TO_ADDR
// time := 1 1$00 ;
57214: LD_ADDR_VAR 0 8
57218: PUSH
57219: LD_INT 2100
57221: ST_TO_ADDR
// if amount < min then
57222: LD_VAR 0 9
57226: PUSH
57227: LD_VAR 0 3
57231: LESS
57232: IFFALSE 57250
// r := r * 2 else
57234: LD_ADDR_VAR 0 7
57238: PUSH
57239: LD_VAR 0 7
57243: PUSH
57244: LD_INT 2
57246: MUL
57247: ST_TO_ADDR
57248: GO 57276
// if amount > max then
57250: LD_VAR 0 9
57254: PUSH
57255: LD_VAR 0 4
57259: GREATER
57260: IFFALSE 57276
// r := r / 2 ;
57262: LD_ADDR_VAR 0 7
57266: PUSH
57267: LD_VAR 0 7
57271: PUSH
57272: LD_INT 2
57274: DIVREAL
57275: ST_TO_ADDR
// time := time / r ;
57276: LD_ADDR_VAR 0 8
57280: PUSH
57281: LD_VAR 0 8
57285: PUSH
57286: LD_VAR 0 7
57290: DIVREAL
57291: ST_TO_ADDR
// if time < 0 then
57292: LD_VAR 0 8
57296: PUSH
57297: LD_INT 0
57299: LESS
57300: IFFALSE 57317
// time := time * - 1 ;
57302: LD_ADDR_VAR 0 8
57306: PUSH
57307: LD_VAR 0 8
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: MUL
57316: ST_TO_ADDR
// wait ( time ) ;
57317: LD_VAR 0 8
57321: PPUSH
57322: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57326: LD_INT 35
57328: PPUSH
57329: LD_INT 875
57331: PPUSH
57332: CALL_OW 12
57336: PPUSH
57337: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57341: LD_INT 1
57343: PPUSH
57344: LD_INT 5
57346: PPUSH
57347: CALL_OW 12
57351: PPUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: LD_INT 1
57359: PPUSH
57360: CALL_OW 55
// end ;
57364: GO 57174
// end ;
57366: LD_VAR 0 5
57370: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57371: LD_INT 0
57373: PPUSH
57374: PPUSH
57375: PPUSH
57376: PPUSH
57377: PPUSH
57378: PPUSH
57379: PPUSH
57380: PPUSH
// if not turrets or not factories then
57381: LD_VAR 0 1
57385: NOT
57386: PUSH
57387: LD_VAR 0 2
57391: NOT
57392: OR
57393: IFFALSE 57397
// exit ;
57395: GO 57704
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57397: LD_ADDR_VAR 0 10
57401: PUSH
57402: LD_INT 5
57404: PUSH
57405: LD_INT 6
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: LD_INT 5
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 24
57439: PUSH
57440: LD_INT 25
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 23
57449: PUSH
57450: LD_INT 27
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 42
57463: PUSH
57464: LD_INT 43
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 44
57473: PUSH
57474: LD_INT 46
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 45
57483: PUSH
57484: LD_INT 47
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: ST_TO_ADDR
// result := [ ] ;
57501: LD_ADDR_VAR 0 3
57505: PUSH
57506: EMPTY
57507: ST_TO_ADDR
// for i in turrets do
57508: LD_ADDR_VAR 0 4
57512: PUSH
57513: LD_VAR 0 1
57517: PUSH
57518: FOR_IN
57519: IFFALSE 57702
// begin nat := GetNation ( i ) ;
57521: LD_ADDR_VAR 0 7
57525: PUSH
57526: LD_VAR 0 4
57530: PPUSH
57531: CALL_OW 248
57535: ST_TO_ADDR
// weapon := 0 ;
57536: LD_ADDR_VAR 0 8
57540: PUSH
57541: LD_INT 0
57543: ST_TO_ADDR
// if not nat then
57544: LD_VAR 0 7
57548: NOT
57549: IFFALSE 57553
// continue ;
57551: GO 57518
// for j in list [ nat ] do
57553: LD_ADDR_VAR 0 5
57557: PUSH
57558: LD_VAR 0 10
57562: PUSH
57563: LD_VAR 0 7
57567: ARRAY
57568: PUSH
57569: FOR_IN
57570: IFFALSE 57611
// if GetBWeapon ( i ) = j [ 1 ] then
57572: LD_VAR 0 4
57576: PPUSH
57577: CALL_OW 269
57581: PUSH
57582: LD_VAR 0 5
57586: PUSH
57587: LD_INT 1
57589: ARRAY
57590: EQUAL
57591: IFFALSE 57609
// begin weapon := j [ 2 ] ;
57593: LD_ADDR_VAR 0 8
57597: PUSH
57598: LD_VAR 0 5
57602: PUSH
57603: LD_INT 2
57605: ARRAY
57606: ST_TO_ADDR
// break ;
57607: GO 57611
// end ;
57609: GO 57569
57611: POP
57612: POP
// if not weapon then
57613: LD_VAR 0 8
57617: NOT
57618: IFFALSE 57622
// continue ;
57620: GO 57518
// for k in factories do
57622: LD_ADDR_VAR 0 6
57626: PUSH
57627: LD_VAR 0 2
57631: PUSH
57632: FOR_IN
57633: IFFALSE 57698
// begin weapons := AvailableWeaponList ( k ) ;
57635: LD_ADDR_VAR 0 9
57639: PUSH
57640: LD_VAR 0 6
57644: PPUSH
57645: CALL_OW 478
57649: ST_TO_ADDR
// if not weapons then
57650: LD_VAR 0 9
57654: NOT
57655: IFFALSE 57659
// continue ;
57657: GO 57632
// if weapon in weapons then
57659: LD_VAR 0 8
57663: PUSH
57664: LD_VAR 0 9
57668: IN
57669: IFFALSE 57696
// begin result := [ i , weapon ] ;
57671: LD_ADDR_VAR 0 3
57675: PUSH
57676: LD_VAR 0 4
57680: PUSH
57681: LD_VAR 0 8
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// exit ;
57690: POP
57691: POP
57692: POP
57693: POP
57694: GO 57704
// end ; end ;
57696: GO 57632
57698: POP
57699: POP
// end ;
57700: GO 57518
57702: POP
57703: POP
// end ; end_of_file
57704: LD_VAR 0 3
57708: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
57709: LD_INT 0
57711: PPUSH
57712: PPUSH
// skirmish := false ;
57713: LD_ADDR_EXP 43
57717: PUSH
57718: LD_INT 0
57720: ST_TO_ADDR
// mc_bases := [ ] ;
57721: LD_ADDR_EXP 44
57725: PUSH
57726: EMPTY
57727: ST_TO_ADDR
// mc_sides := [ ] ;
57728: LD_ADDR_EXP 70
57732: PUSH
57733: EMPTY
57734: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
57735: LD_ADDR_EXP 45
57739: PUSH
57740: EMPTY
57741: ST_TO_ADDR
// mc_building_repairs := [ ] ;
57742: LD_ADDR_EXP 46
57746: PUSH
57747: EMPTY
57748: ST_TO_ADDR
// mc_need_heal := [ ] ;
57749: LD_ADDR_EXP 47
57753: PUSH
57754: EMPTY
57755: ST_TO_ADDR
// mc_healers := [ ] ;
57756: LD_ADDR_EXP 48
57760: PUSH
57761: EMPTY
57762: ST_TO_ADDR
// mc_build_list := [ ] ;
57763: LD_ADDR_EXP 49
57767: PUSH
57768: EMPTY
57769: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
57770: LD_ADDR_EXP 76
57774: PUSH
57775: EMPTY
57776: ST_TO_ADDR
// mc_builders := [ ] ;
57777: LD_ADDR_EXP 50
57781: PUSH
57782: EMPTY
57783: ST_TO_ADDR
// mc_construct_list := [ ] ;
57784: LD_ADDR_EXP 51
57788: PUSH
57789: EMPTY
57790: ST_TO_ADDR
// mc_turret_list := [ ] ;
57791: LD_ADDR_EXP 52
57795: PUSH
57796: EMPTY
57797: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
57798: LD_ADDR_EXP 53
57802: PUSH
57803: EMPTY
57804: ST_TO_ADDR
// mc_miners := [ ] ;
57805: LD_ADDR_EXP 58
57809: PUSH
57810: EMPTY
57811: ST_TO_ADDR
// mc_mines := [ ] ;
57812: LD_ADDR_EXP 57
57816: PUSH
57817: EMPTY
57818: ST_TO_ADDR
// mc_minefields := [ ] ;
57819: LD_ADDR_EXP 59
57823: PUSH
57824: EMPTY
57825: ST_TO_ADDR
// mc_crates := [ ] ;
57826: LD_ADDR_EXP 60
57830: PUSH
57831: EMPTY
57832: ST_TO_ADDR
// mc_crates_collector := [ ] ;
57833: LD_ADDR_EXP 61
57837: PUSH
57838: EMPTY
57839: ST_TO_ADDR
// mc_crates_area := [ ] ;
57840: LD_ADDR_EXP 62
57844: PUSH
57845: EMPTY
57846: ST_TO_ADDR
// mc_vehicles := [ ] ;
57847: LD_ADDR_EXP 63
57851: PUSH
57852: EMPTY
57853: ST_TO_ADDR
// mc_attack := [ ] ;
57854: LD_ADDR_EXP 64
57858: PUSH
57859: EMPTY
57860: ST_TO_ADDR
// mc_produce := [ ] ;
57861: LD_ADDR_EXP 65
57865: PUSH
57866: EMPTY
57867: ST_TO_ADDR
// mc_defender := [ ] ;
57868: LD_ADDR_EXP 66
57872: PUSH
57873: EMPTY
57874: ST_TO_ADDR
// mc_parking := [ ] ;
57875: LD_ADDR_EXP 68
57879: PUSH
57880: EMPTY
57881: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
57882: LD_ADDR_EXP 54
57886: PUSH
57887: EMPTY
57888: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
57889: LD_ADDR_EXP 56
57893: PUSH
57894: EMPTY
57895: ST_TO_ADDR
// mc_scan := [ ] ;
57896: LD_ADDR_EXP 67
57900: PUSH
57901: EMPTY
57902: ST_TO_ADDR
// mc_scan_area := [ ] ;
57903: LD_ADDR_EXP 69
57907: PUSH
57908: EMPTY
57909: ST_TO_ADDR
// mc_tech := [ ] ;
57910: LD_ADDR_EXP 71
57914: PUSH
57915: EMPTY
57916: ST_TO_ADDR
// end ;
57917: LD_VAR 0 1
57921: RET
// export function MC_Kill ( base ) ; begin
57922: LD_INT 0
57924: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
57925: LD_ADDR_EXP 44
57929: PUSH
57930: LD_EXP 44
57934: PPUSH
57935: LD_VAR 0 1
57939: PPUSH
57940: EMPTY
57941: PPUSH
57942: CALL_OW 1
57946: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57947: LD_ADDR_EXP 45
57951: PUSH
57952: LD_EXP 45
57956: PPUSH
57957: LD_VAR 0 1
57961: PPUSH
57962: EMPTY
57963: PPUSH
57964: CALL_OW 1
57968: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57969: LD_ADDR_EXP 46
57973: PUSH
57974: LD_EXP 46
57978: PPUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: EMPTY
57985: PPUSH
57986: CALL_OW 1
57990: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57991: LD_ADDR_EXP 47
57995: PUSH
57996: LD_EXP 47
58000: PPUSH
58001: LD_VAR 0 1
58005: PPUSH
58006: EMPTY
58007: PPUSH
58008: CALL_OW 1
58012: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
58013: LD_ADDR_EXP 48
58017: PUSH
58018: LD_EXP 48
58022: PPUSH
58023: LD_VAR 0 1
58027: PPUSH
58028: EMPTY
58029: PPUSH
58030: CALL_OW 1
58034: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
58035: LD_ADDR_EXP 49
58039: PUSH
58040: LD_EXP 49
58044: PPUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: EMPTY
58051: PPUSH
58052: CALL_OW 1
58056: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
58057: LD_ADDR_EXP 50
58061: PUSH
58062: LD_EXP 50
58066: PPUSH
58067: LD_VAR 0 1
58071: PPUSH
58072: EMPTY
58073: PPUSH
58074: CALL_OW 1
58078: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
58079: LD_ADDR_EXP 51
58083: PUSH
58084: LD_EXP 51
58088: PPUSH
58089: LD_VAR 0 1
58093: PPUSH
58094: EMPTY
58095: PPUSH
58096: CALL_OW 1
58100: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
58101: LD_ADDR_EXP 52
58105: PUSH
58106: LD_EXP 52
58110: PPUSH
58111: LD_VAR 0 1
58115: PPUSH
58116: EMPTY
58117: PPUSH
58118: CALL_OW 1
58122: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
58123: LD_ADDR_EXP 53
58127: PUSH
58128: LD_EXP 53
58132: PPUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: EMPTY
58139: PPUSH
58140: CALL_OW 1
58144: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
58145: LD_ADDR_EXP 54
58149: PUSH
58150: LD_EXP 54
58154: PPUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: EMPTY
58161: PPUSH
58162: CALL_OW 1
58166: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
58167: LD_ADDR_EXP 55
58171: PUSH
58172: LD_EXP 55
58176: PPUSH
58177: LD_VAR 0 1
58181: PPUSH
58182: LD_INT 0
58184: PPUSH
58185: CALL_OW 1
58189: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
58190: LD_ADDR_EXP 56
58194: PUSH
58195: LD_EXP 56
58199: PPUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: EMPTY
58206: PPUSH
58207: CALL_OW 1
58211: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
58212: LD_ADDR_EXP 57
58216: PUSH
58217: LD_EXP 57
58221: PPUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: EMPTY
58228: PPUSH
58229: CALL_OW 1
58233: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
58234: LD_ADDR_EXP 58
58238: PUSH
58239: LD_EXP 58
58243: PPUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: EMPTY
58250: PPUSH
58251: CALL_OW 1
58255: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
58256: LD_ADDR_EXP 59
58260: PUSH
58261: LD_EXP 59
58265: PPUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: EMPTY
58272: PPUSH
58273: CALL_OW 1
58277: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
58278: LD_ADDR_EXP 60
58282: PUSH
58283: LD_EXP 60
58287: PPUSH
58288: LD_VAR 0 1
58292: PPUSH
58293: EMPTY
58294: PPUSH
58295: CALL_OW 1
58299: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
58300: LD_ADDR_EXP 61
58304: PUSH
58305: LD_EXP 61
58309: PPUSH
58310: LD_VAR 0 1
58314: PPUSH
58315: EMPTY
58316: PPUSH
58317: CALL_OW 1
58321: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
58322: LD_ADDR_EXP 62
58326: PUSH
58327: LD_EXP 62
58331: PPUSH
58332: LD_VAR 0 1
58336: PPUSH
58337: EMPTY
58338: PPUSH
58339: CALL_OW 1
58343: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
58344: LD_ADDR_EXP 63
58348: PUSH
58349: LD_EXP 63
58353: PPUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: EMPTY
58360: PPUSH
58361: CALL_OW 1
58365: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
58366: LD_ADDR_EXP 64
58370: PUSH
58371: LD_EXP 64
58375: PPUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: EMPTY
58382: PPUSH
58383: CALL_OW 1
58387: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
58388: LD_ADDR_EXP 65
58392: PUSH
58393: LD_EXP 65
58397: PPUSH
58398: LD_VAR 0 1
58402: PPUSH
58403: EMPTY
58404: PPUSH
58405: CALL_OW 1
58409: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
58410: LD_ADDR_EXP 66
58414: PUSH
58415: LD_EXP 66
58419: PPUSH
58420: LD_VAR 0 1
58424: PPUSH
58425: EMPTY
58426: PPUSH
58427: CALL_OW 1
58431: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
58432: LD_ADDR_EXP 67
58436: PUSH
58437: LD_EXP 67
58441: PPUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: EMPTY
58448: PPUSH
58449: CALL_OW 1
58453: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
58454: LD_ADDR_EXP 68
58458: PUSH
58459: LD_EXP 68
58463: PPUSH
58464: LD_VAR 0 1
58468: PPUSH
58469: EMPTY
58470: PPUSH
58471: CALL_OW 1
58475: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
58476: LD_ADDR_EXP 69
58480: PUSH
58481: LD_EXP 69
58485: PPUSH
58486: LD_VAR 0 1
58490: PPUSH
58491: EMPTY
58492: PPUSH
58493: CALL_OW 1
58497: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
58498: LD_ADDR_EXP 71
58502: PUSH
58503: LD_EXP 71
58507: PPUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: EMPTY
58514: PPUSH
58515: CALL_OW 1
58519: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58520: LD_ADDR_EXP 73
58524: PUSH
58525: LD_EXP 73
58529: PPUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: EMPTY
58536: PPUSH
58537: CALL_OW 1
58541: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58542: LD_ADDR_EXP 74
58546: PUSH
58547: LD_EXP 74
58551: PPUSH
58552: LD_VAR 0 1
58556: PPUSH
58557: EMPTY
58558: PPUSH
58559: CALL_OW 1
58563: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
58564: LD_ADDR_EXP 75
58568: PUSH
58569: LD_EXP 75
58573: PPUSH
58574: LD_VAR 0 1
58578: PPUSH
58579: EMPTY
58580: PPUSH
58581: CALL_OW 1
58585: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
58586: LD_ADDR_EXP 76
58590: PUSH
58591: LD_EXP 76
58595: PPUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: EMPTY
58602: PPUSH
58603: CALL_OW 1
58607: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
58608: LD_ADDR_EXP 77
58612: PUSH
58613: LD_EXP 77
58617: PPUSH
58618: LD_VAR 0 1
58622: PPUSH
58623: EMPTY
58624: PPUSH
58625: CALL_OW 1
58629: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
58630: LD_ADDR_EXP 78
58634: PUSH
58635: LD_EXP 78
58639: PPUSH
58640: LD_VAR 0 1
58644: PPUSH
58645: EMPTY
58646: PPUSH
58647: CALL_OW 1
58651: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
58652: LD_ADDR_EXP 79
58656: PUSH
58657: LD_EXP 79
58661: PPUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: EMPTY
58668: PPUSH
58669: CALL_OW 1
58673: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
58674: LD_ADDR_EXP 80
58678: PUSH
58679: LD_EXP 80
58683: PPUSH
58684: LD_VAR 0 1
58688: PPUSH
58689: EMPTY
58690: PPUSH
58691: CALL_OW 1
58695: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
58696: LD_ADDR_EXP 81
58700: PUSH
58701: LD_EXP 81
58705: PPUSH
58706: LD_VAR 0 1
58710: PPUSH
58711: EMPTY
58712: PPUSH
58713: CALL_OW 1
58717: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
58718: LD_ADDR_EXP 82
58722: PUSH
58723: LD_EXP 82
58727: PPUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: EMPTY
58734: PPUSH
58735: CALL_OW 1
58739: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
58740: LD_ADDR_EXP 83
58744: PUSH
58745: LD_EXP 83
58749: PPUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: EMPTY
58756: PPUSH
58757: CALL_OW 1
58761: ST_TO_ADDR
// end ;
58762: LD_VAR 0 2
58766: RET
// export function MC_Start ( ) ; var i ; begin
58767: LD_INT 0
58769: PPUSH
58770: PPUSH
// for i = 1 to mc_bases do
58771: LD_ADDR_VAR 0 2
58775: PUSH
58776: DOUBLE
58777: LD_INT 1
58779: DEC
58780: ST_TO_ADDR
58781: LD_EXP 44
58785: PUSH
58786: FOR_TO
58787: IFFALSE 59720
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
58789: LD_ADDR_EXP 45
58793: PUSH
58794: LD_EXP 45
58798: PPUSH
58799: LD_VAR 0 2
58803: PPUSH
58804: EMPTY
58805: PPUSH
58806: CALL_OW 1
58810: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58811: LD_ADDR_EXP 46
58815: PUSH
58816: LD_EXP 46
58820: PPUSH
58821: LD_VAR 0 2
58825: PPUSH
58826: EMPTY
58827: PPUSH
58828: CALL_OW 1
58832: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58833: LD_ADDR_EXP 47
58837: PUSH
58838: LD_EXP 47
58842: PPUSH
58843: LD_VAR 0 2
58847: PPUSH
58848: EMPTY
58849: PPUSH
58850: CALL_OW 1
58854: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58855: LD_ADDR_EXP 48
58859: PUSH
58860: LD_EXP 48
58864: PPUSH
58865: LD_VAR 0 2
58869: PPUSH
58870: EMPTY
58871: PUSH
58872: EMPTY
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PPUSH
58878: CALL_OW 1
58882: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58883: LD_ADDR_EXP 49
58887: PUSH
58888: LD_EXP 49
58892: PPUSH
58893: LD_VAR 0 2
58897: PPUSH
58898: EMPTY
58899: PPUSH
58900: CALL_OW 1
58904: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58905: LD_ADDR_EXP 76
58909: PUSH
58910: LD_EXP 76
58914: PPUSH
58915: LD_VAR 0 2
58919: PPUSH
58920: EMPTY
58921: PPUSH
58922: CALL_OW 1
58926: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58927: LD_ADDR_EXP 50
58931: PUSH
58932: LD_EXP 50
58936: PPUSH
58937: LD_VAR 0 2
58941: PPUSH
58942: EMPTY
58943: PPUSH
58944: CALL_OW 1
58948: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58949: LD_ADDR_EXP 51
58953: PUSH
58954: LD_EXP 51
58958: PPUSH
58959: LD_VAR 0 2
58963: PPUSH
58964: EMPTY
58965: PPUSH
58966: CALL_OW 1
58970: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
58971: LD_ADDR_EXP 52
58975: PUSH
58976: LD_EXP 52
58980: PPUSH
58981: LD_VAR 0 2
58985: PPUSH
58986: EMPTY
58987: PPUSH
58988: CALL_OW 1
58992: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58993: LD_ADDR_EXP 53
58997: PUSH
58998: LD_EXP 53
59002: PPUSH
59003: LD_VAR 0 2
59007: PPUSH
59008: LD_EXP 44
59012: PUSH
59013: LD_VAR 0 2
59017: ARRAY
59018: PPUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 30
59024: PUSH
59025: LD_INT 32
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 30
59034: PUSH
59035: LD_INT 31
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 58
59049: PUSH
59050: EMPTY
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PPUSH
59057: CALL_OW 72
59061: PPUSH
59062: CALL_OW 1
59066: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
59067: LD_ADDR_EXP 54
59071: PUSH
59072: LD_EXP 54
59076: PPUSH
59077: LD_VAR 0 2
59081: PPUSH
59082: EMPTY
59083: PPUSH
59084: CALL_OW 1
59088: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
59089: LD_ADDR_EXP 58
59093: PUSH
59094: LD_EXP 58
59098: PPUSH
59099: LD_VAR 0 2
59103: PPUSH
59104: EMPTY
59105: PPUSH
59106: CALL_OW 1
59110: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
59111: LD_ADDR_EXP 57
59115: PUSH
59116: LD_EXP 57
59120: PPUSH
59121: LD_VAR 0 2
59125: PPUSH
59126: EMPTY
59127: PPUSH
59128: CALL_OW 1
59132: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
59133: LD_ADDR_EXP 59
59137: PUSH
59138: LD_EXP 59
59142: PPUSH
59143: LD_VAR 0 2
59147: PPUSH
59148: EMPTY
59149: PPUSH
59150: CALL_OW 1
59154: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
59155: LD_ADDR_EXP 60
59159: PUSH
59160: LD_EXP 60
59164: PPUSH
59165: LD_VAR 0 2
59169: PPUSH
59170: EMPTY
59171: PPUSH
59172: CALL_OW 1
59176: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59177: LD_ADDR_EXP 61
59181: PUSH
59182: LD_EXP 61
59186: PPUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: EMPTY
59193: PPUSH
59194: CALL_OW 1
59198: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
59199: LD_ADDR_EXP 62
59203: PUSH
59204: LD_EXP 62
59208: PPUSH
59209: LD_VAR 0 2
59213: PPUSH
59214: EMPTY
59215: PPUSH
59216: CALL_OW 1
59220: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
59221: LD_ADDR_EXP 63
59225: PUSH
59226: LD_EXP 63
59230: PPUSH
59231: LD_VAR 0 2
59235: PPUSH
59236: EMPTY
59237: PPUSH
59238: CALL_OW 1
59242: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
59243: LD_ADDR_EXP 64
59247: PUSH
59248: LD_EXP 64
59252: PPUSH
59253: LD_VAR 0 2
59257: PPUSH
59258: EMPTY
59259: PPUSH
59260: CALL_OW 1
59264: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
59265: LD_ADDR_EXP 65
59269: PUSH
59270: LD_EXP 65
59274: PPUSH
59275: LD_VAR 0 2
59279: PPUSH
59280: EMPTY
59281: PPUSH
59282: CALL_OW 1
59286: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
59287: LD_ADDR_EXP 66
59291: PUSH
59292: LD_EXP 66
59296: PPUSH
59297: LD_VAR 0 2
59301: PPUSH
59302: EMPTY
59303: PPUSH
59304: CALL_OW 1
59308: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
59309: LD_ADDR_EXP 55
59313: PUSH
59314: LD_EXP 55
59318: PPUSH
59319: LD_VAR 0 2
59323: PPUSH
59324: LD_INT 0
59326: PPUSH
59327: CALL_OW 1
59331: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
59332: LD_ADDR_EXP 68
59336: PUSH
59337: LD_EXP 68
59341: PPUSH
59342: LD_VAR 0 2
59346: PPUSH
59347: LD_INT 0
59349: PPUSH
59350: CALL_OW 1
59354: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59355: LD_ADDR_EXP 56
59359: PUSH
59360: LD_EXP 56
59364: PPUSH
59365: LD_VAR 0 2
59369: PPUSH
59370: EMPTY
59371: PPUSH
59372: CALL_OW 1
59376: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
59377: LD_ADDR_EXP 67
59381: PUSH
59382: LD_EXP 67
59386: PPUSH
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_INT 0
59394: PPUSH
59395: CALL_OW 1
59399: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
59400: LD_ADDR_EXP 69
59404: PUSH
59405: LD_EXP 69
59409: PPUSH
59410: LD_VAR 0 2
59414: PPUSH
59415: EMPTY
59416: PPUSH
59417: CALL_OW 1
59421: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
59422: LD_ADDR_EXP 72
59426: PUSH
59427: LD_EXP 72
59431: PPUSH
59432: LD_VAR 0 2
59436: PPUSH
59437: LD_INT 0
59439: PPUSH
59440: CALL_OW 1
59444: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
59445: LD_ADDR_EXP 73
59449: PUSH
59450: LD_EXP 73
59454: PPUSH
59455: LD_VAR 0 2
59459: PPUSH
59460: EMPTY
59461: PPUSH
59462: CALL_OW 1
59466: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
59467: LD_ADDR_EXP 74
59471: PUSH
59472: LD_EXP 74
59476: PPUSH
59477: LD_VAR 0 2
59481: PPUSH
59482: EMPTY
59483: PPUSH
59484: CALL_OW 1
59488: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59489: LD_ADDR_EXP 75
59493: PUSH
59494: LD_EXP 75
59498: PPUSH
59499: LD_VAR 0 2
59503: PPUSH
59504: EMPTY
59505: PPUSH
59506: CALL_OW 1
59510: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
59511: LD_ADDR_EXP 77
59515: PUSH
59516: LD_EXP 77
59520: PPUSH
59521: LD_VAR 0 2
59525: PPUSH
59526: LD_EXP 44
59530: PUSH
59531: LD_VAR 0 2
59535: ARRAY
59536: PPUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 30
59542: PUSH
59543: LD_INT 6
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 30
59552: PUSH
59553: LD_INT 7
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 30
59562: PUSH
59563: LD_INT 8
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: PPUSH
59576: CALL_OW 72
59580: PPUSH
59581: CALL_OW 1
59585: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
59586: LD_ADDR_EXP 78
59590: PUSH
59591: LD_EXP 78
59595: PPUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: EMPTY
59602: PPUSH
59603: CALL_OW 1
59607: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
59608: LD_ADDR_EXP 79
59612: PUSH
59613: LD_EXP 79
59617: PPUSH
59618: LD_VAR 0 2
59622: PPUSH
59623: EMPTY
59624: PPUSH
59625: CALL_OW 1
59629: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
59630: LD_ADDR_EXP 80
59634: PUSH
59635: LD_EXP 80
59639: PPUSH
59640: LD_VAR 0 2
59644: PPUSH
59645: EMPTY
59646: PPUSH
59647: CALL_OW 1
59651: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59652: LD_ADDR_EXP 81
59656: PUSH
59657: LD_EXP 81
59661: PPUSH
59662: LD_VAR 0 2
59666: PPUSH
59667: EMPTY
59668: PPUSH
59669: CALL_OW 1
59673: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
59674: LD_ADDR_EXP 82
59678: PUSH
59679: LD_EXP 82
59683: PPUSH
59684: LD_VAR 0 2
59688: PPUSH
59689: EMPTY
59690: PPUSH
59691: CALL_OW 1
59695: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
59696: LD_ADDR_EXP 83
59700: PUSH
59701: LD_EXP 83
59705: PPUSH
59706: LD_VAR 0 2
59710: PPUSH
59711: EMPTY
59712: PPUSH
59713: CALL_OW 1
59717: ST_TO_ADDR
// end ;
59718: GO 58786
59720: POP
59721: POP
// MC_InitSides ( ) ;
59722: CALL 60008 0 0
// MC_InitResearch ( ) ;
59726: CALL 59747 0 0
// CustomInitMacro ( ) ;
59730: CALL 10271 0 0
// skirmish := true ;
59734: LD_ADDR_EXP 43
59738: PUSH
59739: LD_INT 1
59741: ST_TO_ADDR
// end ;
59742: LD_VAR 0 1
59746: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59747: LD_INT 0
59749: PPUSH
59750: PPUSH
59751: PPUSH
59752: PPUSH
59753: PPUSH
59754: PPUSH
// if not mc_bases then
59755: LD_EXP 44
59759: NOT
59760: IFFALSE 59764
// exit ;
59762: GO 60003
// for i = 1 to 8 do
59764: LD_ADDR_VAR 0 2
59768: PUSH
59769: DOUBLE
59770: LD_INT 1
59772: DEC
59773: ST_TO_ADDR
59774: LD_INT 8
59776: PUSH
59777: FOR_TO
59778: IFFALSE 59804
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59780: LD_ADDR_EXP 71
59784: PUSH
59785: LD_EXP 71
59789: PPUSH
59790: LD_VAR 0 2
59794: PPUSH
59795: EMPTY
59796: PPUSH
59797: CALL_OW 1
59801: ST_TO_ADDR
59802: GO 59777
59804: POP
59805: POP
// tmp := [ ] ;
59806: LD_ADDR_VAR 0 5
59810: PUSH
59811: EMPTY
59812: ST_TO_ADDR
// for i = 1 to mc_sides do
59813: LD_ADDR_VAR 0 2
59817: PUSH
59818: DOUBLE
59819: LD_INT 1
59821: DEC
59822: ST_TO_ADDR
59823: LD_EXP 70
59827: PUSH
59828: FOR_TO
59829: IFFALSE 59887
// if not mc_sides [ i ] in tmp then
59831: LD_EXP 70
59835: PUSH
59836: LD_VAR 0 2
59840: ARRAY
59841: PUSH
59842: LD_VAR 0 5
59846: IN
59847: NOT
59848: IFFALSE 59885
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59850: LD_ADDR_VAR 0 5
59854: PUSH
59855: LD_VAR 0 5
59859: PPUSH
59860: LD_VAR 0 5
59864: PUSH
59865: LD_INT 1
59867: PLUS
59868: PPUSH
59869: LD_EXP 70
59873: PUSH
59874: LD_VAR 0 2
59878: ARRAY
59879: PPUSH
59880: CALL_OW 2
59884: ST_TO_ADDR
59885: GO 59828
59887: POP
59888: POP
// if not tmp then
59889: LD_VAR 0 5
59893: NOT
59894: IFFALSE 59898
// exit ;
59896: GO 60003
// for j in tmp do
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_VAR 0 5
59907: PUSH
59908: FOR_IN
59909: IFFALSE 60001
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59911: LD_ADDR_VAR 0 6
59915: PUSH
59916: LD_INT 22
59918: PUSH
59919: LD_VAR 0 3
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PPUSH
59928: CALL_OW 69
59932: ST_TO_ADDR
// if not un then
59933: LD_VAR 0 6
59937: NOT
59938: IFFALSE 59942
// continue ;
59940: GO 59908
// nation := GetNation ( un [ 1 ] ) ;
59942: LD_ADDR_VAR 0 4
59946: PUSH
59947: LD_VAR 0 6
59951: PUSH
59952: LD_INT 1
59954: ARRAY
59955: PPUSH
59956: CALL_OW 248
59960: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59961: LD_ADDR_EXP 71
59965: PUSH
59966: LD_EXP 71
59970: PPUSH
59971: LD_VAR 0 3
59975: PPUSH
59976: LD_VAR 0 3
59980: PPUSH
59981: LD_VAR 0 4
59985: PPUSH
59986: LD_INT 1
59988: PPUSH
59989: CALL 15752 0 3
59993: PPUSH
59994: CALL_OW 1
59998: ST_TO_ADDR
// end ;
59999: GO 59908
60001: POP
60002: POP
// end ;
60003: LD_VAR 0 1
60007: RET
// export function MC_InitSides ( ) ; var i ; begin
60008: LD_INT 0
60010: PPUSH
60011: PPUSH
// if not mc_bases then
60012: LD_EXP 44
60016: NOT
60017: IFFALSE 60021
// exit ;
60019: GO 60095
// for i = 1 to mc_bases do
60021: LD_ADDR_VAR 0 2
60025: PUSH
60026: DOUBLE
60027: LD_INT 1
60029: DEC
60030: ST_TO_ADDR
60031: LD_EXP 44
60035: PUSH
60036: FOR_TO
60037: IFFALSE 60093
// if mc_bases [ i ] then
60039: LD_EXP 44
60043: PUSH
60044: LD_VAR 0 2
60048: ARRAY
60049: IFFALSE 60091
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
60051: LD_ADDR_EXP 70
60055: PUSH
60056: LD_EXP 70
60060: PPUSH
60061: LD_VAR 0 2
60065: PPUSH
60066: LD_EXP 44
60070: PUSH
60071: LD_VAR 0 2
60075: ARRAY
60076: PUSH
60077: LD_INT 1
60079: ARRAY
60080: PPUSH
60081: CALL_OW 255
60085: PPUSH
60086: CALL_OW 1
60090: ST_TO_ADDR
60091: GO 60036
60093: POP
60094: POP
// end ;
60095: LD_VAR 0 1
60099: RET
// every 0 0$01 trigger skirmish do
60100: LD_EXP 43
60104: IFFALSE 60237
60106: GO 60108
60108: DISABLE
// begin enable ;
60109: ENABLE
// MC_CheckBuildings ( ) ;
60110: CALL 60722 0 0
// MC_CheckPeopleLife ( ) ;
60114: CALL 60847 0 0
// RaiseSailEvent ( 103 ) ;
60118: LD_INT 103
60120: PPUSH
60121: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
60125: LD_INT 104
60127: PPUSH
60128: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
60132: LD_INT 105
60134: PPUSH
60135: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
60139: LD_INT 106
60141: PPUSH
60142: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
60146: LD_INT 107
60148: PPUSH
60149: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
60153: LD_INT 108
60155: PPUSH
60156: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
60160: LD_INT 109
60162: PPUSH
60163: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
60167: LD_INT 110
60169: PPUSH
60170: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
60174: LD_INT 111
60176: PPUSH
60177: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
60181: LD_INT 112
60183: PPUSH
60184: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
60188: LD_INT 120
60190: PPUSH
60191: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
60195: LD_INT 121
60197: PPUSH
60198: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
60202: LD_INT 122
60204: PPUSH
60205: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
60209: LD_INT 123
60211: PPUSH
60212: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
60216: LD_INT 125
60218: PPUSH
60219: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
60223: LD_INT 126
60225: PPUSH
60226: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
60230: LD_INT 200
60232: PPUSH
60233: CALL_OW 427
// end ;
60237: END
// every 10 trigger skirmish do var i ;
60238: LD_EXP 43
60242: IFFALSE 60341
60244: GO 60246
60246: DISABLE
60247: LD_INT 0
60249: PPUSH
// begin enable ;
60250: ENABLE
// if not mc_bases then
60251: LD_EXP 44
60255: NOT
60256: IFFALSE 60260
// exit ;
60258: GO 60341
// for i = 1 to mc_bases do
60260: LD_ADDR_VAR 0 1
60264: PUSH
60265: DOUBLE
60266: LD_INT 1
60268: DEC
60269: ST_TO_ADDR
60270: LD_EXP 44
60274: PUSH
60275: FOR_TO
60276: IFFALSE 60339
// if mc_mines [ i ] and mc_miners [ i ] then
60278: LD_EXP 57
60282: PUSH
60283: LD_VAR 0 1
60287: ARRAY
60288: PUSH
60289: LD_EXP 58
60293: PUSH
60294: LD_VAR 0 1
60298: ARRAY
60299: AND
60300: IFFALSE 60337
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
60302: LD_EXP 58
60306: PUSH
60307: LD_VAR 0 1
60311: ARRAY
60312: PUSH
60313: LD_INT 1
60315: ARRAY
60316: PPUSH
60317: CALL_OW 255
60321: PPUSH
60322: LD_EXP 57
60326: PUSH
60327: LD_VAR 0 1
60331: ARRAY
60332: PPUSH
60333: CALL 19501 0 2
60337: GO 60275
60339: POP
60340: POP
// end ;
60341: PPOPN 1
60343: END
// on SailEvent ( event ) do begin if event = 101 then
60344: LD_VAR 0 1
60348: PUSH
60349: LD_INT 101
60351: EQUAL
60352: IFFALSE 60358
// MC_RepairBuildings ( ) ;
60354: CALL 61405 0 0
// if event = 102 then
60358: LD_VAR 0 1
60362: PUSH
60363: LD_INT 102
60365: EQUAL
60366: IFFALSE 60372
// MC_Heal ( ) ;
60368: CALL 61811 0 0
// if event = 103 then
60372: LD_VAR 0 1
60376: PUSH
60377: LD_INT 103
60379: EQUAL
60380: IFFALSE 60386
// MC_Build ( ) ;
60382: CALL 62233 0 0
// if event = 104 then
60386: LD_VAR 0 1
60390: PUSH
60391: LD_INT 104
60393: EQUAL
60394: IFFALSE 60400
// MC_TurretWeapon ( ) ;
60396: CALL 63672 0 0
// if event = 105 then
60400: LD_VAR 0 1
60404: PUSH
60405: LD_INT 105
60407: EQUAL
60408: IFFALSE 60414
// MC_BuildUpgrade ( ) ;
60410: CALL 63223 0 0
// if event = 106 then
60414: LD_VAR 0 1
60418: PUSH
60419: LD_INT 106
60421: EQUAL
60422: IFFALSE 60428
// MC_PlantMines ( ) ;
60424: CALL 64024 0 0
// if event = 107 then
60428: LD_VAR 0 1
60432: PUSH
60433: LD_INT 107
60435: EQUAL
60436: IFFALSE 60442
// MC_CollectCrates ( ) ;
60438: CALL 65031 0 0
// if event = 108 then
60442: LD_VAR 0 1
60446: PUSH
60447: LD_INT 108
60449: EQUAL
60450: IFFALSE 60456
// MC_LinkRemoteControl ( ) ;
60452: CALL 66535 0 0
// if event = 109 then
60456: LD_VAR 0 1
60460: PUSH
60461: LD_INT 109
60463: EQUAL
60464: IFFALSE 60470
// MC_ProduceVehicle ( ) ;
60466: CALL 66716 0 0
// if event = 110 then
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 110
60477: EQUAL
60478: IFFALSE 60484
// MC_SendAttack ( ) ;
60480: CALL 67197 0 0
// if event = 111 then
60484: LD_VAR 0 1
60488: PUSH
60489: LD_INT 111
60491: EQUAL
60492: IFFALSE 60498
// MC_Defend ( ) ;
60494: CALL 67305 0 0
// if event = 112 then
60498: LD_VAR 0 1
60502: PUSH
60503: LD_INT 112
60505: EQUAL
60506: IFFALSE 60512
// MC_Research ( ) ;
60508: CALL 67703 0 0
// if event = 120 then
60512: LD_VAR 0 1
60516: PUSH
60517: LD_INT 120
60519: EQUAL
60520: IFFALSE 60526
// MC_RepairVehicle ( ) ;
60522: CALL 68672 0 0
// if event = 121 then
60526: LD_VAR 0 1
60530: PUSH
60531: LD_INT 121
60533: EQUAL
60534: IFFALSE 60540
// MC_TameApe ( ) ;
60536: CALL 69361 0 0
// if event = 122 then
60540: LD_VAR 0 1
60544: PUSH
60545: LD_INT 122
60547: EQUAL
60548: IFFALSE 60554
// MC_ChangeApeClass ( ) ;
60550: CALL 70124 0 0
// if event = 123 then
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 123
60561: EQUAL
60562: IFFALSE 60568
// MC_Bazooka ( ) ;
60564: CALL 70758 0 0
// if event = 124 then
60568: LD_VAR 0 1
60572: PUSH
60573: LD_INT 124
60575: EQUAL
60576: IFFALSE 60582
// MC_TeleportExit ( ) ;
60578: CALL 70956 0 0
// if event = 125 then
60582: LD_VAR 0 1
60586: PUSH
60587: LD_INT 125
60589: EQUAL
60590: IFFALSE 60596
// MC_Deposits ( ) ;
60592: CALL 70998 0 0
// if event = 126 then
60596: LD_VAR 0 1
60600: PUSH
60601: LD_INT 126
60603: EQUAL
60604: IFFALSE 60610
// MC_RemoteDriver ( ) ;
60606: CALL 71577 0 0
// if event = 200 then
60610: LD_VAR 0 1
60614: PUSH
60615: LD_INT 200
60617: EQUAL
60618: IFFALSE 60624
// MC_Idle ( ) ;
60620: CALL 73082 0 0
// end ;
60624: PPOPN 1
60626: END
// export function MC_Reset ( base , tag ) ; var i ; begin
60627: LD_INT 0
60629: PPUSH
60630: PPUSH
// if not mc_bases [ base ] or not tag then
60631: LD_EXP 44
60635: PUSH
60636: LD_VAR 0 1
60640: ARRAY
60641: NOT
60642: PUSH
60643: LD_VAR 0 2
60647: NOT
60648: OR
60649: IFFALSE 60653
// exit ;
60651: GO 60717
// for i in mc_bases [ base ] union mc_ape [ base ] do
60653: LD_ADDR_VAR 0 4
60657: PUSH
60658: LD_EXP 44
60662: PUSH
60663: LD_VAR 0 1
60667: ARRAY
60668: PUSH
60669: LD_EXP 73
60673: PUSH
60674: LD_VAR 0 1
60678: ARRAY
60679: UNION
60680: PUSH
60681: FOR_IN
60682: IFFALSE 60715
// if GetTag ( i ) = tag then
60684: LD_VAR 0 4
60688: PPUSH
60689: CALL_OW 110
60693: PUSH
60694: LD_VAR 0 2
60698: EQUAL
60699: IFFALSE 60713
// SetTag ( i , 0 ) ;
60701: LD_VAR 0 4
60705: PPUSH
60706: LD_INT 0
60708: PPUSH
60709: CALL_OW 109
60713: GO 60681
60715: POP
60716: POP
// end ;
60717: LD_VAR 0 3
60721: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
60722: LD_INT 0
60724: PPUSH
60725: PPUSH
60726: PPUSH
// if not mc_bases then
60727: LD_EXP 44
60731: NOT
60732: IFFALSE 60736
// exit ;
60734: GO 60842
// for i = 1 to mc_bases do
60736: LD_ADDR_VAR 0 2
60740: PUSH
60741: DOUBLE
60742: LD_INT 1
60744: DEC
60745: ST_TO_ADDR
60746: LD_EXP 44
60750: PUSH
60751: FOR_TO
60752: IFFALSE 60833
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
60754: LD_ADDR_VAR 0 3
60758: PUSH
60759: LD_EXP 44
60763: PUSH
60764: LD_VAR 0 2
60768: ARRAY
60769: PPUSH
60770: LD_INT 21
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 24
60785: PUSH
60786: LD_INT 1000
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PPUSH
60801: CALL_OW 72
60805: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
60806: LD_ADDR_EXP 45
60810: PUSH
60811: LD_EXP 45
60815: PPUSH
60816: LD_VAR 0 2
60820: PPUSH
60821: LD_VAR 0 3
60825: PPUSH
60826: CALL_OW 1
60830: ST_TO_ADDR
// end ;
60831: GO 60751
60833: POP
60834: POP
// RaiseSailEvent ( 101 ) ;
60835: LD_INT 101
60837: PPUSH
60838: CALL_OW 427
// end ;
60842: LD_VAR 0 1
60846: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
60847: LD_INT 0
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
60853: PPUSH
60854: PPUSH
60855: PPUSH
// if not mc_bases then
60856: LD_EXP 44
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 61400
// for i = 1 to mc_bases do
60865: LD_ADDR_VAR 0 2
60869: PUSH
60870: DOUBLE
60871: LD_INT 1
60873: DEC
60874: ST_TO_ADDR
60875: LD_EXP 44
60879: PUSH
60880: FOR_TO
60881: IFFALSE 61391
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
60883: LD_ADDR_VAR 0 5
60887: PUSH
60888: LD_EXP 44
60892: PUSH
60893: LD_VAR 0 2
60897: ARRAY
60898: PUSH
60899: LD_EXP 73
60903: PUSH
60904: LD_VAR 0 2
60908: ARRAY
60909: UNION
60910: PPUSH
60911: LD_INT 21
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 54
60929: PUSH
60930: EMPTY
60931: LIST
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 24
60942: PUSH
60943: LD_INT 700
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PPUSH
60963: CALL_OW 72
60967: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
60968: LD_ADDR_VAR 0 6
60972: PUSH
60973: LD_EXP 44
60977: PUSH
60978: LD_VAR 0 2
60982: ARRAY
60983: PPUSH
60984: LD_INT 21
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 54
61002: PUSH
61003: EMPTY
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: LD_INT 24
61015: PUSH
61016: LD_INT 250
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PPUSH
61036: CALL_OW 72
61040: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61041: LD_ADDR_VAR 0 7
61045: PUSH
61046: LD_VAR 0 5
61050: PUSH
61051: LD_VAR 0 6
61055: DIFF
61056: ST_TO_ADDR
// if not need_heal_1 then
61057: LD_VAR 0 6
61061: NOT
61062: IFFALSE 61095
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
61064: LD_ADDR_EXP 47
61068: PUSH
61069: LD_EXP 47
61073: PPUSH
61074: LD_VAR 0 2
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PPUSH
61086: EMPTY
61087: PPUSH
61088: CALL 22879 0 3
61092: ST_TO_ADDR
61093: GO 61127
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
61095: LD_ADDR_EXP 47
61099: PUSH
61100: LD_EXP 47
61104: PPUSH
61105: LD_VAR 0 2
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PPUSH
61117: LD_VAR 0 6
61121: PPUSH
61122: CALL 22879 0 3
61126: ST_TO_ADDR
// if not need_heal_2 then
61127: LD_VAR 0 7
61131: NOT
61132: IFFALSE 61165
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
61134: LD_ADDR_EXP 47
61138: PUSH
61139: LD_EXP 47
61143: PPUSH
61144: LD_VAR 0 2
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PPUSH
61156: EMPTY
61157: PPUSH
61158: CALL 22879 0 3
61162: ST_TO_ADDR
61163: GO 61197
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
61165: LD_ADDR_EXP 47
61169: PUSH
61170: LD_EXP 47
61174: PPUSH
61175: LD_VAR 0 2
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PPUSH
61187: LD_VAR 0 7
61191: PPUSH
61192: CALL 22879 0 3
61196: ST_TO_ADDR
// if need_heal_2 then
61197: LD_VAR 0 7
61201: IFFALSE 61373
// for j in need_heal_2 do
61203: LD_ADDR_VAR 0 3
61207: PUSH
61208: LD_VAR 0 7
61212: PUSH
61213: FOR_IN
61214: IFFALSE 61371
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
61216: LD_ADDR_VAR 0 5
61220: PUSH
61221: LD_EXP 44
61225: PUSH
61226: LD_VAR 0 2
61230: ARRAY
61231: PPUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 30
61237: PUSH
61238: LD_INT 6
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 30
61247: PUSH
61248: LD_INT 7
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 30
61257: PUSH
61258: LD_INT 8
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 30
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 30
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 25
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: PPUSH
61304: CALL_OW 72
61308: ST_TO_ADDR
// if tmp then
61309: LD_VAR 0 5
61313: IFFALSE 61369
// begin k := NearestUnitToUnit ( tmp , j ) ;
61315: LD_ADDR_VAR 0 4
61319: PUSH
61320: LD_VAR 0 5
61324: PPUSH
61325: LD_VAR 0 3
61329: PPUSH
61330: CALL_OW 74
61334: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
61335: LD_VAR 0 3
61339: PPUSH
61340: LD_VAR 0 4
61344: PPUSH
61345: CALL_OW 296
61349: PUSH
61350: LD_INT 7
61352: GREATER
61353: IFFALSE 61369
// ComMoveUnit ( j , k ) ;
61355: LD_VAR 0 3
61359: PPUSH
61360: LD_VAR 0 4
61364: PPUSH
61365: CALL_OW 112
// end ; end ;
61369: GO 61213
61371: POP
61372: POP
// if not need_heal_1 and not need_heal_2 then
61373: LD_VAR 0 6
61377: NOT
61378: PUSH
61379: LD_VAR 0 7
61383: NOT
61384: AND
61385: IFFALSE 61389
// continue ;
61387: GO 60880
// end ;
61389: GO 60880
61391: POP
61392: POP
// RaiseSailEvent ( 102 ) ;
61393: LD_INT 102
61395: PPUSH
61396: CALL_OW 427
// end ;
61400: LD_VAR 0 1
61404: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
61405: LD_INT 0
61407: PPUSH
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
// if not mc_bases then
61412: LD_EXP 44
61416: NOT
61417: IFFALSE 61421
// exit ;
61419: GO 61806
// for i = 1 to mc_bases do
61421: LD_ADDR_VAR 0 2
61425: PUSH
61426: DOUBLE
61427: LD_INT 1
61429: DEC
61430: ST_TO_ADDR
61431: LD_EXP 44
61435: PUSH
61436: FOR_TO
61437: IFFALSE 61804
// begin if not mc_building_need_repair [ i ] then
61439: LD_EXP 45
61443: PUSH
61444: LD_VAR 0 2
61448: ARRAY
61449: NOT
61450: IFFALSE 61488
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61452: LD_ADDR_EXP 46
61456: PUSH
61457: LD_EXP 46
61461: PPUSH
61462: LD_VAR 0 2
61466: PPUSH
61467: EMPTY
61468: PPUSH
61469: CALL_OW 1
61473: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_INT 101
61481: PPUSH
61482: CALL 60627 0 2
// continue ;
61486: GO 61436
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
61488: LD_ADDR_EXP 50
61492: PUSH
61493: LD_EXP 50
61497: PPUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: EMPTY
61504: PPUSH
61505: CALL_OW 1
61509: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
61510: LD_VAR 0 2
61514: PPUSH
61515: LD_INT 103
61517: PPUSH
61518: CALL 60627 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
61522: LD_ADDR_VAR 0 5
61526: PUSH
61527: LD_EXP 44
61531: PUSH
61532: LD_VAR 0 2
61536: ARRAY
61537: PUSH
61538: LD_EXP 73
61542: PUSH
61543: LD_VAR 0 2
61547: ARRAY
61548: UNION
61549: PPUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 25
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 25
61565: PUSH
61566: LD_INT 16
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: PUSH
61578: EMPTY
61579: LIST
61580: PPUSH
61581: CALL_OW 72
61585: ST_TO_ADDR
// if not tmp then
61586: LD_VAR 0 5
61590: NOT
61591: IFFALSE 61595
// continue ;
61593: GO 61436
// for j in tmp do
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: LD_VAR 0 5
61604: PUSH
61605: FOR_IN
61606: IFFALSE 61800
// begin if mc_need_heal [ i ] then
61608: LD_EXP 47
61612: PUSH
61613: LD_VAR 0 2
61617: ARRAY
61618: IFFALSE 61666
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
61620: LD_VAR 0 3
61624: PUSH
61625: LD_EXP 47
61629: PUSH
61630: LD_VAR 0 2
61634: ARRAY
61635: PUSH
61636: LD_INT 1
61638: ARRAY
61639: IN
61640: PUSH
61641: LD_VAR 0 3
61645: PUSH
61646: LD_EXP 47
61650: PUSH
61651: LD_VAR 0 2
61655: ARRAY
61656: PUSH
61657: LD_INT 2
61659: ARRAY
61660: IN
61661: OR
61662: IFFALSE 61666
// continue ;
61664: GO 61605
// if IsInUnit ( j ) then
61666: LD_VAR 0 3
61670: PPUSH
61671: CALL_OW 310
61675: IFFALSE 61686
// ComExitBuilding ( j ) ;
61677: LD_VAR 0 3
61681: PPUSH
61682: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
61686: LD_VAR 0 3
61690: PUSH
61691: LD_EXP 46
61695: PUSH
61696: LD_VAR 0 2
61700: ARRAY
61701: IN
61702: NOT
61703: IFFALSE 61761
// begin SetTag ( j , 101 ) ;
61705: LD_VAR 0 3
61709: PPUSH
61710: LD_INT 101
61712: PPUSH
61713: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
61717: LD_ADDR_EXP 46
61721: PUSH
61722: LD_EXP 46
61726: PPUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_EXP 46
61736: PUSH
61737: LD_VAR 0 2
61741: ARRAY
61742: PUSH
61743: LD_INT 1
61745: PLUS
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PPUSH
61751: LD_VAR 0 3
61755: PPUSH
61756: CALL 22879 0 3
61760: ST_TO_ADDR
// end ; Wait ( 3 ) ;
61761: LD_INT 3
61763: PPUSH
61764: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
61768: LD_VAR 0 3
61772: PPUSH
61773: LD_EXP 45
61777: PUSH
61778: LD_VAR 0 2
61782: ARRAY
61783: PPUSH
61784: LD_VAR 0 3
61788: PPUSH
61789: CALL_OW 74
61793: PPUSH
61794: CALL_OW 130
// end ;
61798: GO 61605
61800: POP
61801: POP
// end ;
61802: GO 61436
61804: POP
61805: POP
// end ;
61806: LD_VAR 0 1
61810: RET
// export function MC_Heal ; var i , j , tmp ; begin
61811: LD_INT 0
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
// if not mc_bases then
61817: LD_EXP 44
61821: NOT
61822: IFFALSE 61826
// exit ;
61824: GO 62228
// for i = 1 to mc_bases do
61826: LD_ADDR_VAR 0 2
61830: PUSH
61831: DOUBLE
61832: LD_INT 1
61834: DEC
61835: ST_TO_ADDR
61836: LD_EXP 44
61840: PUSH
61841: FOR_TO
61842: IFFALSE 62226
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
61844: LD_EXP 47
61848: PUSH
61849: LD_VAR 0 2
61853: ARRAY
61854: PUSH
61855: LD_INT 1
61857: ARRAY
61858: NOT
61859: PUSH
61860: LD_EXP 47
61864: PUSH
61865: LD_VAR 0 2
61869: ARRAY
61870: PUSH
61871: LD_INT 2
61873: ARRAY
61874: NOT
61875: AND
61876: IFFALSE 61914
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
61878: LD_ADDR_EXP 48
61882: PUSH
61883: LD_EXP 48
61887: PPUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: EMPTY
61894: PPUSH
61895: CALL_OW 1
61899: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
61900: LD_VAR 0 2
61904: PPUSH
61905: LD_INT 102
61907: PPUSH
61908: CALL 60627 0 2
// continue ;
61912: GO 61841
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
61914: LD_ADDR_VAR 0 4
61918: PUSH
61919: LD_EXP 44
61923: PUSH
61924: LD_VAR 0 2
61928: ARRAY
61929: PPUSH
61930: LD_INT 25
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PPUSH
61940: CALL_OW 72
61944: ST_TO_ADDR
// if not tmp then
61945: LD_VAR 0 4
61949: NOT
61950: IFFALSE 61954
// continue ;
61952: GO 61841
// if mc_taming [ i ] then
61954: LD_EXP 75
61958: PUSH
61959: LD_VAR 0 2
61963: ARRAY
61964: IFFALSE 61988
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
61966: LD_ADDR_EXP 75
61970: PUSH
61971: LD_EXP 75
61975: PPUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: EMPTY
61982: PPUSH
61983: CALL_OW 1
61987: ST_TO_ADDR
// for j in tmp do
61988: LD_ADDR_VAR 0 3
61992: PUSH
61993: LD_VAR 0 4
61997: PUSH
61998: FOR_IN
61999: IFFALSE 62222
// begin if IsInUnit ( j ) then
62001: LD_VAR 0 3
62005: PPUSH
62006: CALL_OW 310
62010: IFFALSE 62021
// ComExitBuilding ( j ) ;
62012: LD_VAR 0 3
62016: PPUSH
62017: CALL_OW 122
// if not j in mc_healers [ i ] then
62021: LD_VAR 0 3
62025: PUSH
62026: LD_EXP 48
62030: PUSH
62031: LD_VAR 0 2
62035: ARRAY
62036: IN
62037: NOT
62038: IFFALSE 62084
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62040: LD_ADDR_EXP 48
62044: PUSH
62045: LD_EXP 48
62049: PPUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_EXP 48
62059: PUSH
62060: LD_VAR 0 2
62064: ARRAY
62065: PUSH
62066: LD_INT 1
62068: PLUS
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PPUSH
62074: LD_VAR 0 3
62078: PPUSH
62079: CALL 22879 0 3
62083: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62084: LD_VAR 0 3
62088: PPUSH
62089: CALL_OW 110
62093: PUSH
62094: LD_INT 102
62096: NONEQUAL
62097: IFFALSE 62111
// SetTag ( j , 102 ) ;
62099: LD_VAR 0 3
62103: PPUSH
62104: LD_INT 102
62106: PPUSH
62107: CALL_OW 109
// Wait ( 3 ) ;
62111: LD_INT 3
62113: PPUSH
62114: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62118: LD_EXP 47
62122: PUSH
62123: LD_VAR 0 2
62127: ARRAY
62128: PUSH
62129: LD_INT 1
62131: ARRAY
62132: IFFALSE 62164
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62134: LD_VAR 0 3
62138: PPUSH
62139: LD_EXP 47
62143: PUSH
62144: LD_VAR 0 2
62148: ARRAY
62149: PUSH
62150: LD_INT 1
62152: ARRAY
62153: PUSH
62154: LD_INT 1
62156: ARRAY
62157: PPUSH
62158: CALL_OW 128
62162: GO 62220
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
62164: LD_VAR 0 3
62168: PPUSH
62169: CALL_OW 314
62173: NOT
62174: PUSH
62175: LD_EXP 47
62179: PUSH
62180: LD_VAR 0 2
62184: ARRAY
62185: PUSH
62186: LD_INT 2
62188: ARRAY
62189: AND
62190: IFFALSE 62220
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
62192: LD_VAR 0 3
62196: PPUSH
62197: LD_EXP 47
62201: PUSH
62202: LD_VAR 0 2
62206: ARRAY
62207: PUSH
62208: LD_INT 2
62210: ARRAY
62211: PUSH
62212: LD_INT 1
62214: ARRAY
62215: PPUSH
62216: CALL_OW 128
// end ;
62220: GO 61998
62222: POP
62223: POP
// end ;
62224: GO 61841
62226: POP
62227: POP
// end ;
62228: LD_VAR 0 1
62232: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
62233: LD_INT 0
62235: PPUSH
62236: PPUSH
62237: PPUSH
62238: PPUSH
62239: PPUSH
// if not mc_bases then
62240: LD_EXP 44
62244: NOT
62245: IFFALSE 62249
// exit ;
62247: GO 63218
// for i = 1 to mc_bases do
62249: LD_ADDR_VAR 0 2
62253: PUSH
62254: DOUBLE
62255: LD_INT 1
62257: DEC
62258: ST_TO_ADDR
62259: LD_EXP 44
62263: PUSH
62264: FOR_TO
62265: IFFALSE 63216
// begin if mc_scan [ i ] then
62267: LD_EXP 67
62271: PUSH
62272: LD_VAR 0 2
62276: ARRAY
62277: IFFALSE 62281
// continue ;
62279: GO 62264
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
62281: LD_EXP 49
62285: PUSH
62286: LD_VAR 0 2
62290: ARRAY
62291: NOT
62292: PUSH
62293: LD_EXP 51
62297: PUSH
62298: LD_VAR 0 2
62302: ARRAY
62303: NOT
62304: AND
62305: PUSH
62306: LD_EXP 50
62310: PUSH
62311: LD_VAR 0 2
62315: ARRAY
62316: AND
62317: IFFALSE 62355
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
62319: LD_ADDR_EXP 50
62323: PUSH
62324: LD_EXP 50
62328: PPUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: EMPTY
62335: PPUSH
62336: CALL_OW 1
62340: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62341: LD_VAR 0 2
62345: PPUSH
62346: LD_INT 103
62348: PPUSH
62349: CALL 60627 0 2
// continue ;
62353: GO 62264
// end ; if mc_construct_list [ i ] then
62355: LD_EXP 51
62359: PUSH
62360: LD_VAR 0 2
62364: ARRAY
62365: IFFALSE 62585
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62367: LD_ADDR_VAR 0 4
62371: PUSH
62372: LD_EXP 44
62376: PUSH
62377: LD_VAR 0 2
62381: ARRAY
62382: PPUSH
62383: LD_INT 25
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PPUSH
62393: CALL_OW 72
62397: PUSH
62398: LD_EXP 46
62402: PUSH
62403: LD_VAR 0 2
62407: ARRAY
62408: DIFF
62409: ST_TO_ADDR
// if not tmp then
62410: LD_VAR 0 4
62414: NOT
62415: IFFALSE 62419
// continue ;
62417: GO 62264
// for j in tmp do
62419: LD_ADDR_VAR 0 3
62423: PUSH
62424: LD_VAR 0 4
62428: PUSH
62429: FOR_IN
62430: IFFALSE 62581
// begin if not mc_builders [ i ] then
62432: LD_EXP 50
62436: PUSH
62437: LD_VAR 0 2
62441: ARRAY
62442: NOT
62443: IFFALSE 62501
// begin SetTag ( j , 103 ) ;
62445: LD_VAR 0 3
62449: PPUSH
62450: LD_INT 103
62452: PPUSH
62453: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62457: LD_ADDR_EXP 50
62461: PUSH
62462: LD_EXP 50
62466: PPUSH
62467: LD_VAR 0 2
62471: PUSH
62472: LD_EXP 50
62476: PUSH
62477: LD_VAR 0 2
62481: ARRAY
62482: PUSH
62483: LD_INT 1
62485: PLUS
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PPUSH
62491: LD_VAR 0 3
62495: PPUSH
62496: CALL 22879 0 3
62500: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62501: LD_VAR 0 3
62505: PPUSH
62506: CALL_OW 310
62510: IFFALSE 62521
// ComExitBuilding ( j ) ;
62512: LD_VAR 0 3
62516: PPUSH
62517: CALL_OW 122
// wait ( 3 ) ;
62521: LD_INT 3
62523: PPUSH
62524: CALL_OW 67
// if not mc_construct_list [ i ] then
62528: LD_EXP 51
62532: PUSH
62533: LD_VAR 0 2
62537: ARRAY
62538: NOT
62539: IFFALSE 62543
// break ;
62541: GO 62581
// if not HasTask ( j ) then
62543: LD_VAR 0 3
62547: PPUSH
62548: CALL_OW 314
62552: NOT
62553: IFFALSE 62579
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
62555: LD_VAR 0 3
62559: PPUSH
62560: LD_EXP 51
62564: PUSH
62565: LD_VAR 0 2
62569: ARRAY
62570: PUSH
62571: LD_INT 1
62573: ARRAY
62574: PPUSH
62575: CALL 25315 0 2
// end ;
62579: GO 62429
62581: POP
62582: POP
// end else
62583: GO 63214
// if mc_build_list [ i ] then
62585: LD_EXP 49
62589: PUSH
62590: LD_VAR 0 2
62594: ARRAY
62595: IFFALSE 63214
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62597: LD_ADDR_VAR 0 5
62601: PUSH
62602: LD_EXP 44
62606: PUSH
62607: LD_VAR 0 2
62611: ARRAY
62612: PPUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 30
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 30
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: PPUSH
62641: CALL_OW 72
62645: ST_TO_ADDR
// if depot then
62646: LD_VAR 0 5
62650: IFFALSE 62668
// depot := depot [ 1 ] else
62652: LD_ADDR_VAR 0 5
62656: PUSH
62657: LD_VAR 0 5
62661: PUSH
62662: LD_INT 1
62664: ARRAY
62665: ST_TO_ADDR
62666: GO 62676
// depot := 0 ;
62668: LD_ADDR_VAR 0 5
62672: PUSH
62673: LD_INT 0
62675: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
62676: LD_EXP 49
62680: PUSH
62681: LD_VAR 0 2
62685: ARRAY
62686: PUSH
62687: LD_INT 1
62689: ARRAY
62690: PUSH
62691: LD_INT 1
62693: ARRAY
62694: PUSH
62695: LD_INT 0
62697: EQUAL
62698: PUSH
62699: LD_VAR 0 5
62703: PUSH
62704: LD_VAR 0 5
62708: PPUSH
62709: LD_EXP 49
62713: PUSH
62714: LD_VAR 0 2
62718: ARRAY
62719: PUSH
62720: LD_INT 1
62722: ARRAY
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PPUSH
62728: LD_EXP 49
62732: PUSH
62733: LD_VAR 0 2
62737: ARRAY
62738: PUSH
62739: LD_INT 1
62741: ARRAY
62742: PUSH
62743: LD_INT 2
62745: ARRAY
62746: PPUSH
62747: LD_EXP 49
62751: PUSH
62752: LD_VAR 0 2
62756: ARRAY
62757: PUSH
62758: LD_INT 1
62760: ARRAY
62761: PUSH
62762: LD_INT 3
62764: ARRAY
62765: PPUSH
62766: LD_EXP 49
62770: PUSH
62771: LD_VAR 0 2
62775: ARRAY
62776: PUSH
62777: LD_INT 1
62779: ARRAY
62780: PUSH
62781: LD_INT 4
62783: ARRAY
62784: PPUSH
62785: CALL 29667 0 5
62789: AND
62790: OR
62791: IFFALSE 63072
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62793: LD_ADDR_VAR 0 4
62797: PUSH
62798: LD_EXP 44
62802: PUSH
62803: LD_VAR 0 2
62807: ARRAY
62808: PPUSH
62809: LD_INT 25
62811: PUSH
62812: LD_INT 2
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PPUSH
62819: CALL_OW 72
62823: PUSH
62824: LD_EXP 46
62828: PUSH
62829: LD_VAR 0 2
62833: ARRAY
62834: DIFF
62835: ST_TO_ADDR
// if not tmp then
62836: LD_VAR 0 4
62840: NOT
62841: IFFALSE 62845
// continue ;
62843: GO 62264
// for j in tmp do
62845: LD_ADDR_VAR 0 3
62849: PUSH
62850: LD_VAR 0 4
62854: PUSH
62855: FOR_IN
62856: IFFALSE 63068
// begin if not mc_builders [ i ] then
62858: LD_EXP 50
62862: PUSH
62863: LD_VAR 0 2
62867: ARRAY
62868: NOT
62869: IFFALSE 62927
// begin SetTag ( j , 103 ) ;
62871: LD_VAR 0 3
62875: PPUSH
62876: LD_INT 103
62878: PPUSH
62879: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62883: LD_ADDR_EXP 50
62887: PUSH
62888: LD_EXP 50
62892: PPUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_EXP 50
62902: PUSH
62903: LD_VAR 0 2
62907: ARRAY
62908: PUSH
62909: LD_INT 1
62911: PLUS
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PPUSH
62917: LD_VAR 0 3
62921: PPUSH
62922: CALL 22879 0 3
62926: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62927: LD_VAR 0 3
62931: PPUSH
62932: CALL_OW 310
62936: IFFALSE 62947
// ComExitBuilding ( j ) ;
62938: LD_VAR 0 3
62942: PPUSH
62943: CALL_OW 122
// wait ( 3 ) ;
62947: LD_INT 3
62949: PPUSH
62950: CALL_OW 67
// if not mc_build_list [ i ] then
62954: LD_EXP 49
62958: PUSH
62959: LD_VAR 0 2
62963: ARRAY
62964: NOT
62965: IFFALSE 62969
// break ;
62967: GO 63068
// if not HasTask ( j ) then
62969: LD_VAR 0 3
62973: PPUSH
62974: CALL_OW 314
62978: NOT
62979: IFFALSE 63066
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
62981: LD_VAR 0 3
62985: PPUSH
62986: LD_EXP 49
62990: PUSH
62991: LD_VAR 0 2
62995: ARRAY
62996: PUSH
62997: LD_INT 1
62999: ARRAY
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PPUSH
63005: LD_EXP 49
63009: PUSH
63010: LD_VAR 0 2
63014: ARRAY
63015: PUSH
63016: LD_INT 1
63018: ARRAY
63019: PUSH
63020: LD_INT 2
63022: ARRAY
63023: PPUSH
63024: LD_EXP 49
63028: PUSH
63029: LD_VAR 0 2
63033: ARRAY
63034: PUSH
63035: LD_INT 1
63037: ARRAY
63038: PUSH
63039: LD_INT 3
63041: ARRAY
63042: PPUSH
63043: LD_EXP 49
63047: PUSH
63048: LD_VAR 0 2
63052: ARRAY
63053: PUSH
63054: LD_INT 1
63056: ARRAY
63057: PUSH
63058: LD_INT 4
63060: ARRAY
63061: PPUSH
63062: CALL_OW 145
// end ;
63066: GO 62855
63068: POP
63069: POP
// end else
63070: GO 63214
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
63072: LD_EXP 44
63076: PUSH
63077: LD_VAR 0 2
63081: ARRAY
63082: PPUSH
63083: LD_EXP 49
63087: PUSH
63088: LD_VAR 0 2
63092: ARRAY
63093: PUSH
63094: LD_INT 1
63096: ARRAY
63097: PUSH
63098: LD_INT 1
63100: ARRAY
63101: PPUSH
63102: LD_EXP 49
63106: PUSH
63107: LD_VAR 0 2
63111: ARRAY
63112: PUSH
63113: LD_INT 1
63115: ARRAY
63116: PUSH
63117: LD_INT 2
63119: ARRAY
63120: PPUSH
63121: LD_EXP 49
63125: PUSH
63126: LD_VAR 0 2
63130: ARRAY
63131: PUSH
63132: LD_INT 1
63134: ARRAY
63135: PUSH
63136: LD_INT 3
63138: ARRAY
63139: PPUSH
63140: LD_EXP 49
63144: PUSH
63145: LD_VAR 0 2
63149: ARRAY
63150: PUSH
63151: LD_INT 1
63153: ARRAY
63154: PUSH
63155: LD_INT 4
63157: ARRAY
63158: PPUSH
63159: CALL 29098 0 5
63163: NOT
63164: IFFALSE 63214
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
63166: LD_ADDR_EXP 49
63170: PUSH
63171: LD_EXP 49
63175: PPUSH
63176: LD_VAR 0 2
63180: PPUSH
63181: LD_EXP 49
63185: PUSH
63186: LD_VAR 0 2
63190: ARRAY
63191: PPUSH
63192: LD_INT 1
63194: PPUSH
63195: LD_INT 1
63197: NEG
63198: PPUSH
63199: LD_INT 0
63201: PPUSH
63202: CALL 21862 0 4
63206: PPUSH
63207: CALL_OW 1
63211: ST_TO_ADDR
// continue ;
63212: GO 62264
// end ; end ; end ;
63214: GO 62264
63216: POP
63217: POP
// end ;
63218: LD_VAR 0 1
63222: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
63223: LD_INT 0
63225: PPUSH
63226: PPUSH
63227: PPUSH
63228: PPUSH
63229: PPUSH
63230: PPUSH
// if not mc_bases then
63231: LD_EXP 44
63235: NOT
63236: IFFALSE 63240
// exit ;
63238: GO 63667
// for i = 1 to mc_bases do
63240: LD_ADDR_VAR 0 2
63244: PUSH
63245: DOUBLE
63246: LD_INT 1
63248: DEC
63249: ST_TO_ADDR
63250: LD_EXP 44
63254: PUSH
63255: FOR_TO
63256: IFFALSE 63665
// begin tmp := mc_build_upgrade [ i ] ;
63258: LD_ADDR_VAR 0 4
63262: PUSH
63263: LD_EXP 76
63267: PUSH
63268: LD_VAR 0 2
63272: ARRAY
63273: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
63274: LD_ADDR_VAR 0 6
63278: PUSH
63279: LD_EXP 77
63283: PUSH
63284: LD_VAR 0 2
63288: ARRAY
63289: PPUSH
63290: LD_INT 2
63292: PUSH
63293: LD_INT 30
63295: PUSH
63296: LD_INT 6
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 30
63305: PUSH
63306: LD_INT 7
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: PPUSH
63318: CALL_OW 72
63322: ST_TO_ADDR
// if not tmp and not lab then
63323: LD_VAR 0 4
63327: NOT
63328: PUSH
63329: LD_VAR 0 6
63333: NOT
63334: AND
63335: IFFALSE 63339
// continue ;
63337: GO 63255
// if tmp then
63339: LD_VAR 0 4
63343: IFFALSE 63463
// for j in tmp do
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: LD_VAR 0 4
63354: PUSH
63355: FOR_IN
63356: IFFALSE 63461
// begin if UpgradeCost ( j ) then
63358: LD_VAR 0 3
63362: PPUSH
63363: CALL 28758 0 1
63367: IFFALSE 63459
// begin ComUpgrade ( j ) ;
63369: LD_VAR 0 3
63373: PPUSH
63374: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
63378: LD_ADDR_EXP 76
63382: PUSH
63383: LD_EXP 76
63387: PPUSH
63388: LD_VAR 0 2
63392: PPUSH
63393: LD_EXP 76
63397: PUSH
63398: LD_VAR 0 2
63402: ARRAY
63403: PUSH
63404: LD_VAR 0 3
63408: DIFF
63409: PPUSH
63410: CALL_OW 1
63414: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63415: LD_ADDR_EXP 51
63419: PUSH
63420: LD_EXP 51
63424: PPUSH
63425: LD_VAR 0 2
63429: PUSH
63430: LD_EXP 51
63434: PUSH
63435: LD_VAR 0 2
63439: ARRAY
63440: PUSH
63441: LD_INT 1
63443: PLUS
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PPUSH
63449: LD_VAR 0 3
63453: PPUSH
63454: CALL 22879 0 3
63458: ST_TO_ADDR
// end ; end ;
63459: GO 63355
63461: POP
63462: POP
// if not lab or not mc_lab_upgrade [ i ] then
63463: LD_VAR 0 6
63467: NOT
63468: PUSH
63469: LD_EXP 78
63473: PUSH
63474: LD_VAR 0 2
63478: ARRAY
63479: NOT
63480: OR
63481: IFFALSE 63485
// continue ;
63483: GO 63255
// for j in lab do
63485: LD_ADDR_VAR 0 3
63489: PUSH
63490: LD_VAR 0 6
63494: PUSH
63495: FOR_IN
63496: IFFALSE 63661
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
63498: LD_VAR 0 3
63502: PPUSH
63503: CALL_OW 266
63507: PUSH
63508: LD_INT 6
63510: PUSH
63511: LD_INT 7
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: IN
63518: PUSH
63519: LD_VAR 0 3
63523: PPUSH
63524: CALL_OW 461
63528: PUSH
63529: LD_INT 1
63531: NONEQUAL
63532: AND
63533: IFFALSE 63659
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
63535: LD_VAR 0 3
63539: PPUSH
63540: LD_EXP 78
63544: PUSH
63545: LD_VAR 0 2
63549: ARRAY
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PPUSH
63555: CALL 28963 0 2
63559: IFFALSE 63659
// begin ComCancel ( j ) ;
63561: LD_VAR 0 3
63565: PPUSH
63566: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
63570: LD_VAR 0 3
63574: PPUSH
63575: LD_EXP 78
63579: PUSH
63580: LD_VAR 0 2
63584: ARRAY
63585: PUSH
63586: LD_INT 1
63588: ARRAY
63589: PPUSH
63590: CALL_OW 207
// if not j in mc_construct_list [ i ] then
63594: LD_VAR 0 3
63598: PUSH
63599: LD_EXP 51
63603: PUSH
63604: LD_VAR 0 2
63608: ARRAY
63609: IN
63610: NOT
63611: IFFALSE 63657
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63613: LD_ADDR_EXP 51
63617: PUSH
63618: LD_EXP 51
63622: PPUSH
63623: LD_VAR 0 2
63627: PUSH
63628: LD_EXP 51
63632: PUSH
63633: LD_VAR 0 2
63637: ARRAY
63638: PUSH
63639: LD_INT 1
63641: PLUS
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PPUSH
63647: LD_VAR 0 3
63651: PPUSH
63652: CALL 22879 0 3
63656: ST_TO_ADDR
// break ;
63657: GO 63661
// end ; end ; end ;
63659: GO 63495
63661: POP
63662: POP
// end ;
63663: GO 63255
63665: POP
63666: POP
// end ;
63667: LD_VAR 0 1
63671: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
63672: LD_INT 0
63674: PPUSH
63675: PPUSH
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
// if not mc_bases then
63681: LD_EXP 44
63685: NOT
63686: IFFALSE 63690
// exit ;
63688: GO 64019
// for i = 1 to mc_bases do
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: DOUBLE
63696: LD_INT 1
63698: DEC
63699: ST_TO_ADDR
63700: LD_EXP 44
63704: PUSH
63705: FOR_TO
63706: IFFALSE 64017
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
63708: LD_EXP 52
63712: PUSH
63713: LD_VAR 0 2
63717: ARRAY
63718: NOT
63719: PUSH
63720: LD_EXP 44
63724: PUSH
63725: LD_VAR 0 2
63729: ARRAY
63730: PPUSH
63731: LD_INT 30
63733: PUSH
63734: LD_INT 3
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PPUSH
63741: CALL_OW 72
63745: NOT
63746: OR
63747: IFFALSE 63751
// continue ;
63749: GO 63705
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
63751: LD_EXP 52
63755: PUSH
63756: LD_VAR 0 2
63760: ARRAY
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: PPUSH
63766: CALL_OW 269
63770: IFFALSE 63836
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
63772: LD_ADDR_VAR 0 4
63776: PUSH
63777: LD_EXP 52
63781: PUSH
63782: LD_VAR 0 2
63786: ARRAY
63787: PPUSH
63788: LD_INT 1
63790: PPUSH
63791: CALL_OW 3
63795: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
63796: LD_ADDR_EXP 52
63800: PUSH
63801: LD_EXP 52
63805: PPUSH
63806: LD_VAR 0 2
63810: PPUSH
63811: LD_VAR 0 4
63815: PPUSH
63816: CALL_OW 1
63820: ST_TO_ADDR
// if not mc_turret_list [ i ] then
63821: LD_EXP 52
63825: PUSH
63826: LD_VAR 0 2
63830: ARRAY
63831: NOT
63832: IFFALSE 63836
// continue ;
63834: GO 63705
// end ; busy := false ;
63836: LD_ADDR_VAR 0 6
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63844: LD_ADDR_VAR 0 4
63848: PUSH
63849: LD_EXP 44
63853: PUSH
63854: LD_VAR 0 2
63858: ARRAY
63859: PPUSH
63860: LD_INT 30
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PPUSH
63870: CALL_OW 72
63874: ST_TO_ADDR
// for j in tmp do
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: LD_VAR 0 4
63884: PUSH
63885: FOR_IN
63886: IFFALSE 63914
// if not BuildingStatus ( j ) = bs_idle then
63888: LD_VAR 0 3
63892: PPUSH
63893: CALL_OW 461
63897: PUSH
63898: LD_INT 2
63900: EQUAL
63901: NOT
63902: IFFALSE 63912
// busy := true ;
63904: LD_ADDR_VAR 0 6
63908: PUSH
63909: LD_INT 1
63911: ST_TO_ADDR
63912: GO 63885
63914: POP
63915: POP
// if busy then
63916: LD_VAR 0 6
63920: IFFALSE 63924
// continue ;
63922: GO 63705
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
63924: LD_ADDR_VAR 0 7
63928: PUSH
63929: LD_EXP 52
63933: PUSH
63934: LD_VAR 0 2
63938: ARRAY
63939: PUSH
63940: LD_INT 1
63942: ARRAY
63943: PPUSH
63944: CALL 27322 0 1
63948: ST_TO_ADDR
// if not weapon then
63949: LD_VAR 0 7
63953: NOT
63954: IFFALSE 63958
// continue ;
63956: GO 63705
// if mc_allowed_tower_weapons [ i ] then
63958: LD_EXP 82
63962: PUSH
63963: LD_VAR 0 2
63967: ARRAY
63968: IFFALSE 63991
// if not weapon in mc_allowed_tower_weapons [ i ] then
63970: LD_VAR 0 7
63974: PUSH
63975: LD_EXP 82
63979: PUSH
63980: LD_VAR 0 2
63984: ARRAY
63985: IN
63986: NOT
63987: IFFALSE 63991
// continue ;
63989: GO 63705
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
63991: LD_EXP 52
63995: PUSH
63996: LD_VAR 0 2
64000: ARRAY
64001: PUSH
64002: LD_INT 1
64004: ARRAY
64005: PPUSH
64006: LD_VAR 0 7
64010: PPUSH
64011: CALL_OW 148
// end ;
64015: GO 63705
64017: POP
64018: POP
// end ;
64019: LD_VAR 0 1
64023: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
64024: LD_INT 0
64026: PPUSH
64027: PPUSH
64028: PPUSH
64029: PPUSH
64030: PPUSH
64031: PPUSH
// if not mc_bases then
64032: LD_EXP 44
64036: NOT
64037: IFFALSE 64041
// exit ;
64039: GO 65026
// for i = 1 to mc_bases do
64041: LD_ADDR_VAR 0 2
64045: PUSH
64046: DOUBLE
64047: LD_INT 1
64049: DEC
64050: ST_TO_ADDR
64051: LD_EXP 44
64055: PUSH
64056: FOR_TO
64057: IFFALSE 65024
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
64059: LD_EXP 57
64063: PUSH
64064: LD_VAR 0 2
64068: ARRAY
64069: NOT
64070: PUSH
64071: LD_EXP 57
64075: PUSH
64076: LD_VAR 0 2
64080: ARRAY
64081: PUSH
64082: LD_EXP 58
64086: PUSH
64087: LD_VAR 0 2
64091: ARRAY
64092: EQUAL
64093: OR
64094: IFFALSE 64098
// continue ;
64096: GO 64056
// if mc_miners [ i ] then
64098: LD_EXP 58
64102: PUSH
64103: LD_VAR 0 2
64107: ARRAY
64108: IFFALSE 64711
// begin k := 1 ;
64110: LD_ADDR_VAR 0 4
64114: PUSH
64115: LD_INT 1
64117: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
64118: LD_ADDR_VAR 0 3
64122: PUSH
64123: DOUBLE
64124: LD_EXP 58
64128: PUSH
64129: LD_VAR 0 2
64133: ARRAY
64134: INC
64135: ST_TO_ADDR
64136: LD_INT 1
64138: PUSH
64139: FOR_DOWNTO
64140: IFFALSE 64709
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
64142: LD_EXP 58
64146: PUSH
64147: LD_VAR 0 2
64151: ARRAY
64152: PUSH
64153: LD_VAR 0 3
64157: ARRAY
64158: PPUSH
64159: CALL_OW 301
64163: IFFALSE 64226
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
64165: LD_ADDR_VAR 0 5
64169: PUSH
64170: LD_EXP 58
64174: PUSH
64175: LD_VAR 0 2
64179: ARRAY
64180: PUSH
64181: LD_EXP 58
64185: PUSH
64186: LD_VAR 0 2
64190: ARRAY
64191: PUSH
64192: LD_VAR 0 3
64196: ARRAY
64197: DIFF
64198: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
64199: LD_ADDR_EXP 58
64203: PUSH
64204: LD_EXP 58
64208: PPUSH
64209: LD_VAR 0 2
64213: PPUSH
64214: LD_VAR 0 5
64218: PPUSH
64219: CALL_OW 1
64223: ST_TO_ADDR
// continue ;
64224: GO 64139
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
64226: LD_EXP 58
64230: PUSH
64231: LD_VAR 0 2
64235: ARRAY
64236: PUSH
64237: LD_VAR 0 3
64241: ARRAY
64242: PPUSH
64243: CALL 22380 0 1
64247: PUSH
64248: LD_EXP 58
64252: PUSH
64253: LD_VAR 0 2
64257: ARRAY
64258: PUSH
64259: LD_VAR 0 3
64263: ARRAY
64264: PPUSH
64265: CALL_OW 255
64269: PPUSH
64270: LD_EXP 57
64274: PUSH
64275: LD_VAR 0 2
64279: ARRAY
64280: PUSH
64281: LD_VAR 0 4
64285: ARRAY
64286: PUSH
64287: LD_INT 1
64289: ARRAY
64290: PPUSH
64291: LD_EXP 57
64295: PUSH
64296: LD_VAR 0 2
64300: ARRAY
64301: PUSH
64302: LD_VAR 0 4
64306: ARRAY
64307: PUSH
64308: LD_INT 2
64310: ARRAY
64311: PPUSH
64312: LD_INT 15
64314: PPUSH
64315: CALL 23373 0 4
64319: PUSH
64320: LD_INT 4
64322: ARRAY
64323: PUSH
64324: LD_EXP 58
64328: PUSH
64329: LD_VAR 0 2
64333: ARRAY
64334: PUSH
64335: LD_VAR 0 3
64339: ARRAY
64340: PPUSH
64341: LD_INT 10
64343: PPUSH
64344: CALL 25070 0 2
64348: PUSH
64349: LD_INT 4
64351: ARRAY
64352: OR
64353: AND
64354: IFFALSE 64377
// ComStop ( mc_miners [ i ] [ j ] ) ;
64356: LD_EXP 58
64360: PUSH
64361: LD_VAR 0 2
64365: ARRAY
64366: PUSH
64367: LD_VAR 0 3
64371: ARRAY
64372: PPUSH
64373: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
64377: LD_EXP 58
64381: PUSH
64382: LD_VAR 0 2
64386: ARRAY
64387: PUSH
64388: LD_VAR 0 3
64392: ARRAY
64393: PPUSH
64394: CALL_OW 257
64398: PUSH
64399: LD_INT 1
64401: EQUAL
64402: PUSH
64403: LD_EXP 58
64407: PUSH
64408: LD_VAR 0 2
64412: ARRAY
64413: PUSH
64414: LD_VAR 0 3
64418: ARRAY
64419: PPUSH
64420: CALL_OW 459
64424: NOT
64425: AND
64426: PUSH
64427: LD_EXP 58
64431: PUSH
64432: LD_VAR 0 2
64436: ARRAY
64437: PUSH
64438: LD_VAR 0 3
64442: ARRAY
64443: PPUSH
64444: CALL_OW 255
64448: PPUSH
64449: LD_EXP 57
64453: PUSH
64454: LD_VAR 0 2
64458: ARRAY
64459: PUSH
64460: LD_VAR 0 4
64464: ARRAY
64465: PUSH
64466: LD_INT 1
64468: ARRAY
64469: PPUSH
64470: LD_EXP 57
64474: PUSH
64475: LD_VAR 0 2
64479: ARRAY
64480: PUSH
64481: LD_VAR 0 4
64485: ARRAY
64486: PUSH
64487: LD_INT 2
64489: ARRAY
64490: PPUSH
64491: LD_INT 15
64493: PPUSH
64494: CALL 23373 0 4
64498: PUSH
64499: LD_INT 4
64501: ARRAY
64502: PUSH
64503: LD_INT 0
64505: EQUAL
64506: AND
64507: PUSH
64508: LD_EXP 58
64512: PUSH
64513: LD_VAR 0 2
64517: ARRAY
64518: PUSH
64519: LD_VAR 0 3
64523: ARRAY
64524: PPUSH
64525: CALL_OW 314
64529: NOT
64530: AND
64531: IFFALSE 64707
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
64533: LD_EXP 58
64537: PUSH
64538: LD_VAR 0 2
64542: ARRAY
64543: PUSH
64544: LD_VAR 0 3
64548: ARRAY
64549: PPUSH
64550: CALL_OW 310
64554: IFFALSE 64577
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
64556: LD_EXP 58
64560: PUSH
64561: LD_VAR 0 2
64565: ARRAY
64566: PUSH
64567: LD_VAR 0 3
64571: ARRAY
64572: PPUSH
64573: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
64577: LD_EXP 58
64581: PUSH
64582: LD_VAR 0 2
64586: ARRAY
64587: PUSH
64588: LD_VAR 0 3
64592: ARRAY
64593: PPUSH
64594: CALL_OW 314
64598: NOT
64599: IFFALSE 64667
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
64601: LD_EXP 58
64605: PUSH
64606: LD_VAR 0 2
64610: ARRAY
64611: PUSH
64612: LD_VAR 0 3
64616: ARRAY
64617: PPUSH
64618: LD_EXP 57
64622: PUSH
64623: LD_VAR 0 2
64627: ARRAY
64628: PUSH
64629: LD_VAR 0 4
64633: ARRAY
64634: PUSH
64635: LD_INT 1
64637: ARRAY
64638: PPUSH
64639: LD_EXP 57
64643: PUSH
64644: LD_VAR 0 2
64648: ARRAY
64649: PUSH
64650: LD_VAR 0 4
64654: ARRAY
64655: PUSH
64656: LD_INT 2
64658: ARRAY
64659: PPUSH
64660: LD_INT 0
64662: PPUSH
64663: CALL_OW 193
// k := k + 1 ;
64667: LD_ADDR_VAR 0 4
64671: PUSH
64672: LD_VAR 0 4
64676: PUSH
64677: LD_INT 1
64679: PLUS
64680: ST_TO_ADDR
// if k > mc_mines [ i ] then
64681: LD_VAR 0 4
64685: PUSH
64686: LD_EXP 57
64690: PUSH
64691: LD_VAR 0 2
64695: ARRAY
64696: GREATER
64697: IFFALSE 64707
// k := 1 ;
64699: LD_ADDR_VAR 0 4
64703: PUSH
64704: LD_INT 1
64706: ST_TO_ADDR
// end ; end ;
64707: GO 64139
64709: POP
64710: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
64711: LD_ADDR_VAR 0 5
64715: PUSH
64716: LD_EXP 44
64720: PUSH
64721: LD_VAR 0 2
64725: ARRAY
64726: PPUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 30
64732: PUSH
64733: LD_INT 4
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 30
64742: PUSH
64743: LD_INT 5
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 30
64752: PUSH
64753: LD_INT 32
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: PPUSH
64766: CALL_OW 72
64770: ST_TO_ADDR
// if not tmp then
64771: LD_VAR 0 5
64775: NOT
64776: IFFALSE 64780
// continue ;
64778: GO 64056
// list := [ ] ;
64780: LD_ADDR_VAR 0 6
64784: PUSH
64785: EMPTY
64786: ST_TO_ADDR
// for j in tmp do
64787: LD_ADDR_VAR 0 3
64791: PUSH
64792: LD_VAR 0 5
64796: PUSH
64797: FOR_IN
64798: IFFALSE 64867
// begin for k in UnitsInside ( j ) do
64800: LD_ADDR_VAR 0 4
64804: PUSH
64805: LD_VAR 0 3
64809: PPUSH
64810: CALL_OW 313
64814: PUSH
64815: FOR_IN
64816: IFFALSE 64863
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
64818: LD_VAR 0 4
64822: PPUSH
64823: CALL_OW 257
64827: PUSH
64828: LD_INT 1
64830: EQUAL
64831: PUSH
64832: LD_VAR 0 4
64836: PPUSH
64837: CALL_OW 459
64841: NOT
64842: AND
64843: IFFALSE 64861
// list := list ^ k ;
64845: LD_ADDR_VAR 0 6
64849: PUSH
64850: LD_VAR 0 6
64854: PUSH
64855: LD_VAR 0 4
64859: ADD
64860: ST_TO_ADDR
64861: GO 64815
64863: POP
64864: POP
// end ;
64865: GO 64797
64867: POP
64868: POP
// list := list diff mc_miners [ i ] ;
64869: LD_ADDR_VAR 0 6
64873: PUSH
64874: LD_VAR 0 6
64878: PUSH
64879: LD_EXP 58
64883: PUSH
64884: LD_VAR 0 2
64888: ARRAY
64889: DIFF
64890: ST_TO_ADDR
// if not list then
64891: LD_VAR 0 6
64895: NOT
64896: IFFALSE 64900
// continue ;
64898: GO 64056
// k := mc_mines [ i ] - mc_miners [ i ] ;
64900: LD_ADDR_VAR 0 4
64904: PUSH
64905: LD_EXP 57
64909: PUSH
64910: LD_VAR 0 2
64914: ARRAY
64915: PUSH
64916: LD_EXP 58
64920: PUSH
64921: LD_VAR 0 2
64925: ARRAY
64926: MINUS
64927: ST_TO_ADDR
// if k > list then
64928: LD_VAR 0 4
64932: PUSH
64933: LD_VAR 0 6
64937: GREATER
64938: IFFALSE 64950
// k := list ;
64940: LD_ADDR_VAR 0 4
64944: PUSH
64945: LD_VAR 0 6
64949: ST_TO_ADDR
// for j = 1 to k do
64950: LD_ADDR_VAR 0 3
64954: PUSH
64955: DOUBLE
64956: LD_INT 1
64958: DEC
64959: ST_TO_ADDR
64960: LD_VAR 0 4
64964: PUSH
64965: FOR_TO
64966: IFFALSE 65020
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
64968: LD_ADDR_EXP 58
64972: PUSH
64973: LD_EXP 58
64977: PPUSH
64978: LD_VAR 0 2
64982: PUSH
64983: LD_EXP 58
64987: PUSH
64988: LD_VAR 0 2
64992: ARRAY
64993: PUSH
64994: LD_INT 1
64996: PLUS
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PPUSH
65002: LD_VAR 0 6
65006: PUSH
65007: LD_VAR 0 3
65011: ARRAY
65012: PPUSH
65013: CALL 22879 0 3
65017: ST_TO_ADDR
65018: GO 64965
65020: POP
65021: POP
// end ;
65022: GO 64056
65024: POP
65025: POP
// end ;
65026: LD_VAR 0 1
65030: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
65031: LD_INT 0
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
65040: PPUSH
65041: PPUSH
// if not mc_bases then
65042: LD_EXP 44
65046: NOT
65047: IFFALSE 65051
// exit ;
65049: GO 66530
// for i = 1 to mc_bases do
65051: LD_ADDR_VAR 0 2
65055: PUSH
65056: DOUBLE
65057: LD_INT 1
65059: DEC
65060: ST_TO_ADDR
65061: LD_EXP 44
65065: PUSH
65066: FOR_TO
65067: IFFALSE 66528
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
65069: LD_EXP 44
65073: PUSH
65074: LD_VAR 0 2
65078: ARRAY
65079: NOT
65080: PUSH
65081: LD_EXP 51
65085: PUSH
65086: LD_VAR 0 2
65090: ARRAY
65091: OR
65092: IFFALSE 65096
// continue ;
65094: GO 65066
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
65096: LD_EXP 60
65100: PUSH
65101: LD_VAR 0 2
65105: ARRAY
65106: NOT
65107: PUSH
65108: LD_EXP 61
65112: PUSH
65113: LD_VAR 0 2
65117: ARRAY
65118: AND
65119: IFFALSE 65157
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65121: LD_ADDR_EXP 61
65125: PUSH
65126: LD_EXP 61
65130: PPUSH
65131: LD_VAR 0 2
65135: PPUSH
65136: EMPTY
65137: PPUSH
65138: CALL_OW 1
65142: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
65143: LD_VAR 0 2
65147: PPUSH
65148: LD_INT 107
65150: PPUSH
65151: CALL 60627 0 2
// continue ;
65155: GO 65066
// end ; target := [ ] ;
65157: LD_ADDR_VAR 0 5
65161: PUSH
65162: EMPTY
65163: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: DOUBLE
65170: LD_EXP 60
65174: PUSH
65175: LD_VAR 0 2
65179: ARRAY
65180: INC
65181: ST_TO_ADDR
65182: LD_INT 1
65184: PUSH
65185: FOR_DOWNTO
65186: IFFALSE 65446
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
65188: LD_EXP 60
65192: PUSH
65193: LD_VAR 0 2
65197: ARRAY
65198: PUSH
65199: LD_VAR 0 3
65203: ARRAY
65204: PUSH
65205: LD_INT 2
65207: ARRAY
65208: PPUSH
65209: LD_EXP 60
65213: PUSH
65214: LD_VAR 0 2
65218: ARRAY
65219: PUSH
65220: LD_VAR 0 3
65224: ARRAY
65225: PUSH
65226: LD_INT 3
65228: ARRAY
65229: PPUSH
65230: CALL_OW 488
65234: PUSH
65235: LD_EXP 60
65239: PUSH
65240: LD_VAR 0 2
65244: ARRAY
65245: PUSH
65246: LD_VAR 0 3
65250: ARRAY
65251: PUSH
65252: LD_INT 2
65254: ARRAY
65255: PPUSH
65256: LD_EXP 60
65260: PUSH
65261: LD_VAR 0 2
65265: ARRAY
65266: PUSH
65267: LD_VAR 0 3
65271: ARRAY
65272: PUSH
65273: LD_INT 3
65275: ARRAY
65276: PPUSH
65277: CALL_OW 284
65281: PUSH
65282: LD_INT 0
65284: EQUAL
65285: AND
65286: IFFALSE 65341
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
65288: LD_ADDR_VAR 0 4
65292: PUSH
65293: LD_EXP 60
65297: PUSH
65298: LD_VAR 0 2
65302: ARRAY
65303: PPUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: CALL_OW 3
65313: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
65314: LD_ADDR_EXP 60
65318: PUSH
65319: LD_EXP 60
65323: PPUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: LD_VAR 0 4
65333: PPUSH
65334: CALL_OW 1
65338: ST_TO_ADDR
// continue ;
65339: GO 65185
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
65341: LD_EXP 44
65345: PUSH
65346: LD_VAR 0 2
65350: ARRAY
65351: PUSH
65352: LD_INT 1
65354: ARRAY
65355: PPUSH
65356: CALL_OW 255
65360: PPUSH
65361: LD_EXP 60
65365: PUSH
65366: LD_VAR 0 2
65370: ARRAY
65371: PUSH
65372: LD_VAR 0 3
65376: ARRAY
65377: PUSH
65378: LD_INT 2
65380: ARRAY
65381: PPUSH
65382: LD_EXP 60
65386: PUSH
65387: LD_VAR 0 2
65391: ARRAY
65392: PUSH
65393: LD_VAR 0 3
65397: ARRAY
65398: PUSH
65399: LD_INT 3
65401: ARRAY
65402: PPUSH
65403: LD_INT 20
65405: PPUSH
65406: CALL 23373 0 4
65410: PUSH
65411: LD_INT 4
65413: ARRAY
65414: PUSH
65415: LD_INT 0
65417: EQUAL
65418: IFFALSE 65444
// begin target := mc_crates [ i ] [ j ] ;
65420: LD_ADDR_VAR 0 5
65424: PUSH
65425: LD_EXP 60
65429: PUSH
65430: LD_VAR 0 2
65434: ARRAY
65435: PUSH
65436: LD_VAR 0 3
65440: ARRAY
65441: ST_TO_ADDR
// break ;
65442: GO 65446
// end ; end ;
65444: GO 65185
65446: POP
65447: POP
// if not target then
65448: LD_VAR 0 5
65452: NOT
65453: IFFALSE 65457
// continue ;
65455: GO 65066
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
65457: LD_ADDR_VAR 0 6
65461: PUSH
65462: LD_EXP 63
65466: PUSH
65467: LD_VAR 0 2
65471: ARRAY
65472: PPUSH
65473: LD_INT 2
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: LD_INT 58
65481: PUSH
65482: EMPTY
65483: LIST
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 61
65491: PUSH
65492: EMPTY
65493: LIST
65494: PUSH
65495: LD_INT 33
65497: PUSH
65498: LD_INT 5
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 33
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 34
65527: PUSH
65528: LD_INT 32
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 34
65537: PUSH
65538: LD_INT 51
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 34
65547: PUSH
65548: LD_INT 12
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PPUSH
65565: CALL_OW 72
65569: ST_TO_ADDR
// if not cargo then
65570: LD_VAR 0 6
65574: NOT
65575: IFFALSE 66063
// begin if mc_crates_collector [ i ] < 5 then
65577: LD_EXP 61
65581: PUSH
65582: LD_VAR 0 2
65586: ARRAY
65587: PUSH
65588: LD_INT 5
65590: LESS
65591: IFFALSE 65877
// begin if mc_ape [ i ] then
65593: LD_EXP 73
65597: PUSH
65598: LD_VAR 0 2
65602: ARRAY
65603: IFFALSE 65650
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
65605: LD_ADDR_VAR 0 4
65609: PUSH
65610: LD_EXP 73
65614: PUSH
65615: LD_VAR 0 2
65619: ARRAY
65620: PPUSH
65621: LD_INT 25
65623: PUSH
65624: LD_INT 16
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 24
65633: PUSH
65634: LD_INT 750
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PPUSH
65645: CALL_OW 72
65649: ST_TO_ADDR
// if not tmp then
65650: LD_VAR 0 4
65654: NOT
65655: IFFALSE 65704
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
65657: LD_ADDR_VAR 0 4
65661: PUSH
65662: LD_EXP 44
65666: PUSH
65667: LD_VAR 0 2
65671: ARRAY
65672: PPUSH
65673: LD_INT 25
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 24
65685: PUSH
65686: LD_INT 750
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PPUSH
65697: CALL_OW 72
65701: ST_TO_ADDR
65702: GO 65765
// if tmp < 5 then
65704: LD_VAR 0 4
65708: PUSH
65709: LD_INT 5
65711: LESS
65712: IFFALSE 65765
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
65714: LD_ADDR_VAR 0 4
65718: PUSH
65719: LD_VAR 0 4
65723: PUSH
65724: LD_EXP 44
65728: PUSH
65729: LD_VAR 0 2
65733: ARRAY
65734: PPUSH
65735: LD_INT 25
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 24
65747: PUSH
65748: LD_INT 750
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 72
65763: UNION
65764: ST_TO_ADDR
// if not tmp then
65765: LD_VAR 0 4
65769: NOT
65770: IFFALSE 65774
// continue ;
65772: GO 65066
// for j in tmp do
65774: LD_ADDR_VAR 0 3
65778: PUSH
65779: LD_VAR 0 4
65783: PUSH
65784: FOR_IN
65785: IFFALSE 65875
// if not GetTag ( j ) then
65787: LD_VAR 0 3
65791: PPUSH
65792: CALL_OW 110
65796: NOT
65797: IFFALSE 65873
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
65799: LD_ADDR_EXP 61
65803: PUSH
65804: LD_EXP 61
65808: PPUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_EXP 61
65818: PUSH
65819: LD_VAR 0 2
65823: ARRAY
65824: PUSH
65825: LD_INT 1
65827: PLUS
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PPUSH
65833: LD_VAR 0 3
65837: PPUSH
65838: CALL 22879 0 3
65842: ST_TO_ADDR
// SetTag ( j , 107 ) ;
65843: LD_VAR 0 3
65847: PPUSH
65848: LD_INT 107
65850: PPUSH
65851: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
65855: LD_EXP 61
65859: PUSH
65860: LD_VAR 0 2
65864: ARRAY
65865: PUSH
65866: LD_INT 5
65868: GREATEREQUAL
65869: IFFALSE 65873
// break ;
65871: GO 65875
// end ;
65873: GO 65784
65875: POP
65876: POP
// end ; if mc_crates_collector [ i ] and target then
65877: LD_EXP 61
65881: PUSH
65882: LD_VAR 0 2
65886: ARRAY
65887: PUSH
65888: LD_VAR 0 5
65892: AND
65893: IFFALSE 66061
// begin if mc_crates_collector [ i ] < target [ 1 ] then
65895: LD_EXP 61
65899: PUSH
65900: LD_VAR 0 2
65904: ARRAY
65905: PUSH
65906: LD_VAR 0 5
65910: PUSH
65911: LD_INT 1
65913: ARRAY
65914: LESS
65915: IFFALSE 65935
// tmp := mc_crates_collector [ i ] else
65917: LD_ADDR_VAR 0 4
65921: PUSH
65922: LD_EXP 61
65926: PUSH
65927: LD_VAR 0 2
65931: ARRAY
65932: ST_TO_ADDR
65933: GO 65949
// tmp := target [ 1 ] ;
65935: LD_ADDR_VAR 0 4
65939: PUSH
65940: LD_VAR 0 5
65944: PUSH
65945: LD_INT 1
65947: ARRAY
65948: ST_TO_ADDR
// for j = 1 to tmp do
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: DOUBLE
65955: LD_INT 1
65957: DEC
65958: ST_TO_ADDR
65959: LD_VAR 0 4
65963: PUSH
65964: FOR_TO
65965: IFFALSE 66059
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
65967: LD_EXP 61
65971: PUSH
65972: LD_VAR 0 2
65976: ARRAY
65977: PUSH
65978: LD_VAR 0 3
65982: ARRAY
65983: PPUSH
65984: CALL_OW 310
65988: IFFALSE 66011
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
65990: LD_EXP 61
65994: PUSH
65995: LD_VAR 0 2
65999: ARRAY
66000: PUSH
66001: LD_VAR 0 3
66005: ARRAY
66006: PPUSH
66007: CALL_OW 122
// wait ( 3 ) ;
66011: LD_INT 3
66013: PPUSH
66014: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
66018: LD_EXP 61
66022: PUSH
66023: LD_VAR 0 2
66027: ARRAY
66028: PUSH
66029: LD_VAR 0 3
66033: ARRAY
66034: PPUSH
66035: LD_VAR 0 5
66039: PUSH
66040: LD_INT 2
66042: ARRAY
66043: PPUSH
66044: LD_VAR 0 5
66048: PUSH
66049: LD_INT 3
66051: ARRAY
66052: PPUSH
66053: CALL_OW 117
// end ;
66057: GO 65964
66059: POP
66060: POP
// end ; end else
66061: GO 66526
// begin for j in cargo do
66063: LD_ADDR_VAR 0 3
66067: PUSH
66068: LD_VAR 0 6
66072: PUSH
66073: FOR_IN
66074: IFFALSE 66524
// begin if GetTag ( j ) <> 0 then
66076: LD_VAR 0 3
66080: PPUSH
66081: CALL_OW 110
66085: PUSH
66086: LD_INT 0
66088: NONEQUAL
66089: IFFALSE 66093
// continue ;
66091: GO 66073
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
66093: LD_VAR 0 3
66097: PPUSH
66098: CALL_OW 262
66102: PUSH
66103: LD_INT 2
66105: EQUAL
66106: PUSH
66107: LD_VAR 0 3
66111: PPUSH
66112: CALL_OW 261
66116: PUSH
66117: LD_INT 15
66119: LESS
66120: AND
66121: IFFALSE 66125
// continue ;
66123: GO 66073
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
66125: LD_VAR 0 3
66129: PPUSH
66130: CALL_OW 262
66134: PUSH
66135: LD_INT 1
66137: EQUAL
66138: PUSH
66139: LD_VAR 0 3
66143: PPUSH
66144: CALL_OW 261
66148: PUSH
66149: LD_INT 10
66151: LESS
66152: AND
66153: IFFALSE 66463
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66155: LD_ADDR_VAR 0 7
66159: PUSH
66160: LD_EXP 44
66164: PUSH
66165: LD_VAR 0 2
66169: ARRAY
66170: PPUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 30
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 30
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: PPUSH
66199: CALL_OW 72
66203: ST_TO_ADDR
// if not depot then
66204: LD_VAR 0 7
66208: NOT
66209: IFFALSE 66213
// continue ;
66211: GO 66073
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
66213: LD_VAR 0 3
66217: PPUSH
66218: LD_VAR 0 7
66222: PPUSH
66223: LD_VAR 0 3
66227: PPUSH
66228: CALL_OW 74
66232: PPUSH
66233: CALL_OW 296
66237: PUSH
66238: LD_INT 6
66240: LESS
66241: IFFALSE 66257
// SetFuel ( j , 100 ) else
66243: LD_VAR 0 3
66247: PPUSH
66248: LD_INT 100
66250: PPUSH
66251: CALL_OW 240
66255: GO 66463
// if GetFuel ( j ) = 0 then
66257: LD_VAR 0 3
66261: PPUSH
66262: CALL_OW 261
66266: PUSH
66267: LD_INT 0
66269: EQUAL
66270: IFFALSE 66463
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
66272: LD_ADDR_EXP 63
66276: PUSH
66277: LD_EXP 63
66281: PPUSH
66282: LD_VAR 0 2
66286: PPUSH
66287: LD_EXP 63
66291: PUSH
66292: LD_VAR 0 2
66296: ARRAY
66297: PUSH
66298: LD_VAR 0 3
66302: DIFF
66303: PPUSH
66304: CALL_OW 1
66308: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
66309: LD_VAR 0 3
66313: PPUSH
66314: CALL_OW 263
66318: PUSH
66319: LD_INT 1
66321: EQUAL
66322: IFFALSE 66338
// ComExitVehicle ( IsInUnit ( j ) ) ;
66324: LD_VAR 0 3
66328: PPUSH
66329: CALL_OW 310
66333: PPUSH
66334: CALL_OW 121
// if GetControl ( j ) = control_remote then
66338: LD_VAR 0 3
66342: PPUSH
66343: CALL_OW 263
66347: PUSH
66348: LD_INT 2
66350: EQUAL
66351: IFFALSE 66362
// ComUnlink ( j ) ;
66353: LD_VAR 0 3
66357: PPUSH
66358: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
66362: LD_ADDR_VAR 0 8
66366: PUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: LD_INT 3
66374: PPUSH
66375: CALL 74159 0 2
66379: ST_TO_ADDR
// if fac then
66380: LD_VAR 0 8
66384: IFFALSE 66461
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
66386: LD_ADDR_VAR 0 9
66390: PUSH
66391: LD_VAR 0 8
66395: PPUSH
66396: LD_VAR 0 3
66400: PPUSH
66401: CALL_OW 265
66405: PPUSH
66406: LD_VAR 0 3
66410: PPUSH
66411: CALL_OW 262
66415: PPUSH
66416: LD_VAR 0 3
66420: PPUSH
66421: CALL_OW 263
66425: PPUSH
66426: LD_VAR 0 3
66430: PPUSH
66431: CALL_OW 264
66435: PPUSH
66436: CALL 20044 0 5
66440: ST_TO_ADDR
// if components then
66441: LD_VAR 0 9
66445: IFFALSE 66461
// MC_InsertProduceList ( i , components ) ;
66447: LD_VAR 0 2
66451: PPUSH
66452: LD_VAR 0 9
66456: PPUSH
66457: CALL 73726 0 2
// end ; continue ;
66461: GO 66073
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
66463: LD_VAR 0 3
66467: PPUSH
66468: LD_INT 1
66470: PPUSH
66471: CALL_OW 289
66475: PUSH
66476: LD_INT 100
66478: LESS
66479: PUSH
66480: LD_VAR 0 3
66484: PPUSH
66485: CALL_OW 314
66489: NOT
66490: AND
66491: IFFALSE 66520
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
66493: LD_VAR 0 3
66497: PPUSH
66498: LD_VAR 0 5
66502: PUSH
66503: LD_INT 2
66505: ARRAY
66506: PPUSH
66507: LD_VAR 0 5
66511: PUSH
66512: LD_INT 3
66514: ARRAY
66515: PPUSH
66516: CALL_OW 117
// break ;
66520: GO 66524
// end ;
66522: GO 66073
66524: POP
66525: POP
// end ; end ;
66526: GO 65066
66528: POP
66529: POP
// end ;
66530: LD_VAR 0 1
66534: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
66535: LD_INT 0
66537: PPUSH
66538: PPUSH
66539: PPUSH
66540: PPUSH
// if not mc_bases then
66541: LD_EXP 44
66545: NOT
66546: IFFALSE 66550
// exit ;
66548: GO 66711
// for i = 1 to mc_bases do
66550: LD_ADDR_VAR 0 2
66554: PUSH
66555: DOUBLE
66556: LD_INT 1
66558: DEC
66559: ST_TO_ADDR
66560: LD_EXP 44
66564: PUSH
66565: FOR_TO
66566: IFFALSE 66709
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
66568: LD_ADDR_VAR 0 4
66572: PUSH
66573: LD_EXP 63
66577: PUSH
66578: LD_VAR 0 2
66582: ARRAY
66583: PUSH
66584: LD_EXP 66
66588: PUSH
66589: LD_VAR 0 2
66593: ARRAY
66594: ADD
66595: PPUSH
66596: LD_INT 33
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PPUSH
66606: CALL_OW 72
66610: ST_TO_ADDR
// if tmp then
66611: LD_VAR 0 4
66615: IFFALSE 66707
// for j in tmp do
66617: LD_ADDR_VAR 0 3
66621: PUSH
66622: LD_VAR 0 4
66626: PUSH
66627: FOR_IN
66628: IFFALSE 66705
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
66630: LD_VAR 0 3
66634: PPUSH
66635: CALL_OW 312
66639: NOT
66640: PUSH
66641: LD_VAR 0 3
66645: PPUSH
66646: CALL_OW 256
66650: PUSH
66651: LD_INT 250
66653: GREATEREQUAL
66654: AND
66655: IFFALSE 66668
// Connect ( j ) else
66657: LD_VAR 0 3
66661: PPUSH
66662: CALL 25397 0 1
66666: GO 66703
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
66668: LD_VAR 0 3
66672: PPUSH
66673: CALL_OW 256
66677: PUSH
66678: LD_INT 250
66680: LESS
66681: PUSH
66682: LD_VAR 0 3
66686: PPUSH
66687: CALL_OW 312
66691: AND
66692: IFFALSE 66703
// ComUnlink ( j ) ;
66694: LD_VAR 0 3
66698: PPUSH
66699: CALL_OW 136
66703: GO 66627
66705: POP
66706: POP
// end ;
66707: GO 66565
66709: POP
66710: POP
// end ;
66711: LD_VAR 0 1
66715: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
66721: PPUSH
66722: PPUSH
// if not mc_bases then
66723: LD_EXP 44
66727: NOT
66728: IFFALSE 66732
// exit ;
66730: GO 67192
// for i = 1 to mc_bases do
66732: LD_ADDR_VAR 0 2
66736: PUSH
66737: DOUBLE
66738: LD_INT 1
66740: DEC
66741: ST_TO_ADDR
66742: LD_EXP 44
66746: PUSH
66747: FOR_TO
66748: IFFALSE 67190
// begin if not mc_produce [ i ] then
66750: LD_EXP 65
66754: PUSH
66755: LD_VAR 0 2
66759: ARRAY
66760: NOT
66761: IFFALSE 66765
// continue ;
66763: GO 66747
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66765: LD_ADDR_VAR 0 5
66769: PUSH
66770: LD_EXP 44
66774: PUSH
66775: LD_VAR 0 2
66779: ARRAY
66780: PPUSH
66781: LD_INT 30
66783: PUSH
66784: LD_INT 3
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PPUSH
66791: CALL_OW 72
66795: ST_TO_ADDR
// if not fac then
66796: LD_VAR 0 5
66800: NOT
66801: IFFALSE 66805
// continue ;
66803: GO 66747
// for j in fac do
66805: LD_ADDR_VAR 0 3
66809: PUSH
66810: LD_VAR 0 5
66814: PUSH
66815: FOR_IN
66816: IFFALSE 67186
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
66818: LD_VAR 0 3
66822: PPUSH
66823: CALL_OW 461
66827: PUSH
66828: LD_INT 2
66830: NONEQUAL
66831: PUSH
66832: LD_VAR 0 3
66836: PPUSH
66837: LD_INT 15
66839: PPUSH
66840: CALL 25070 0 2
66844: PUSH
66845: LD_INT 4
66847: ARRAY
66848: OR
66849: PUSH
66850: LD_VAR 0 3
66854: PPUSH
66855: CALL_OW 313
66859: PUSH
66860: LD_INT 0
66862: EQUAL
66863: OR
66864: IFFALSE 66868
// continue ;
66866: GO 66815
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
66868: LD_VAR 0 3
66872: PPUSH
66873: LD_EXP 65
66877: PUSH
66878: LD_VAR 0 2
66882: ARRAY
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PPUSH
66892: LD_EXP 65
66896: PUSH
66897: LD_VAR 0 2
66901: ARRAY
66902: PUSH
66903: LD_INT 1
66905: ARRAY
66906: PUSH
66907: LD_INT 2
66909: ARRAY
66910: PPUSH
66911: LD_EXP 65
66915: PUSH
66916: LD_VAR 0 2
66920: ARRAY
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PUSH
66926: LD_INT 3
66928: ARRAY
66929: PPUSH
66930: LD_EXP 65
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PUSH
66945: LD_INT 4
66947: ARRAY
66948: PPUSH
66949: CALL_OW 448
66953: PUSH
66954: LD_VAR 0 3
66958: PPUSH
66959: LD_EXP 65
66963: PUSH
66964: LD_VAR 0 2
66968: ARRAY
66969: PUSH
66970: LD_INT 1
66972: ARRAY
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: PUSH
66978: LD_EXP 65
66982: PUSH
66983: LD_VAR 0 2
66987: ARRAY
66988: PUSH
66989: LD_INT 1
66991: ARRAY
66992: PUSH
66993: LD_INT 2
66995: ARRAY
66996: PUSH
66997: LD_EXP 65
67001: PUSH
67002: LD_VAR 0 2
67006: ARRAY
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: PUSH
67012: LD_INT 3
67014: ARRAY
67015: PUSH
67016: LD_EXP 65
67020: PUSH
67021: LD_VAR 0 2
67025: ARRAY
67026: PUSH
67027: LD_INT 1
67029: ARRAY
67030: PUSH
67031: LD_INT 4
67033: ARRAY
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: PPUSH
67041: CALL 28611 0 2
67045: AND
67046: IFFALSE 67184
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
67048: LD_VAR 0 3
67052: PPUSH
67053: LD_EXP 65
67057: PUSH
67058: LD_VAR 0 2
67062: ARRAY
67063: PUSH
67064: LD_INT 1
67066: ARRAY
67067: PUSH
67068: LD_INT 1
67070: ARRAY
67071: PPUSH
67072: LD_EXP 65
67076: PUSH
67077: LD_VAR 0 2
67081: ARRAY
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PUSH
67087: LD_INT 2
67089: ARRAY
67090: PPUSH
67091: LD_EXP 65
67095: PUSH
67096: LD_VAR 0 2
67100: ARRAY
67101: PUSH
67102: LD_INT 1
67104: ARRAY
67105: PUSH
67106: LD_INT 3
67108: ARRAY
67109: PPUSH
67110: LD_EXP 65
67114: PUSH
67115: LD_VAR 0 2
67119: ARRAY
67120: PUSH
67121: LD_INT 1
67123: ARRAY
67124: PUSH
67125: LD_INT 4
67127: ARRAY
67128: PPUSH
67129: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
67133: LD_ADDR_VAR 0 4
67137: PUSH
67138: LD_EXP 65
67142: PUSH
67143: LD_VAR 0 2
67147: ARRAY
67148: PPUSH
67149: LD_INT 1
67151: PPUSH
67152: CALL_OW 3
67156: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
67157: LD_ADDR_EXP 65
67161: PUSH
67162: LD_EXP 65
67166: PPUSH
67167: LD_VAR 0 2
67171: PPUSH
67172: LD_VAR 0 4
67176: PPUSH
67177: CALL_OW 1
67181: ST_TO_ADDR
// break ;
67182: GO 67186
// end ; end ;
67184: GO 66815
67186: POP
67187: POP
// end ;
67188: GO 66747
67190: POP
67191: POP
// end ;
67192: LD_VAR 0 1
67196: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
67201: PPUSH
// if not mc_bases then
67202: LD_EXP 44
67206: NOT
67207: IFFALSE 67211
// exit ;
67209: GO 67300
// for i = 1 to mc_bases do
67211: LD_ADDR_VAR 0 2
67215: PUSH
67216: DOUBLE
67217: LD_INT 1
67219: DEC
67220: ST_TO_ADDR
67221: LD_EXP 44
67225: PUSH
67226: FOR_TO
67227: IFFALSE 67298
// begin if mc_attack [ i ] then
67229: LD_EXP 64
67233: PUSH
67234: LD_VAR 0 2
67238: ARRAY
67239: IFFALSE 67296
// begin tmp := mc_attack [ i ] [ 1 ] ;
67241: LD_ADDR_VAR 0 3
67245: PUSH
67246: LD_EXP 64
67250: PUSH
67251: LD_VAR 0 2
67255: ARRAY
67256: PUSH
67257: LD_INT 1
67259: ARRAY
67260: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
67261: LD_ADDR_EXP 64
67265: PUSH
67266: LD_EXP 64
67270: PPUSH
67271: LD_VAR 0 2
67275: PPUSH
67276: EMPTY
67277: PPUSH
67278: CALL_OW 1
67282: ST_TO_ADDR
// Attack ( tmp ) ;
67283: LD_VAR 0 3
67287: PPUSH
67288: CALL 50715 0 1
// exit ;
67292: POP
67293: POP
67294: GO 67300
// end ; end ;
67296: GO 67226
67298: POP
67299: POP
// end ;
67300: LD_VAR 0 1
67304: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
67305: LD_INT 0
67307: PPUSH
67308: PPUSH
67309: PPUSH
67310: PPUSH
67311: PPUSH
67312: PPUSH
67313: PPUSH
// if not mc_bases then
67314: LD_EXP 44
67318: NOT
67319: IFFALSE 67323
// exit ;
67321: GO 67698
// for i = 1 to mc_bases do
67323: LD_ADDR_VAR 0 2
67327: PUSH
67328: DOUBLE
67329: LD_INT 1
67331: DEC
67332: ST_TO_ADDR
67333: LD_EXP 44
67337: PUSH
67338: FOR_TO
67339: IFFALSE 67696
// begin if not mc_bases [ i ] then
67341: LD_EXP 44
67345: PUSH
67346: LD_VAR 0 2
67350: ARRAY
67351: NOT
67352: IFFALSE 67356
// continue ;
67354: GO 67338
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
67356: LD_ADDR_VAR 0 7
67360: PUSH
67361: LD_EXP 44
67365: PUSH
67366: LD_VAR 0 2
67370: ARRAY
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PPUSH
67376: CALL 19348 0 1
67380: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
67381: LD_ADDR_EXP 67
67385: PUSH
67386: LD_EXP 67
67390: PPUSH
67391: LD_VAR 0 2
67395: PPUSH
67396: LD_EXP 44
67400: PUSH
67401: LD_VAR 0 2
67405: ARRAY
67406: PUSH
67407: LD_INT 1
67409: ARRAY
67410: PPUSH
67411: CALL_OW 255
67415: PPUSH
67416: LD_EXP 69
67420: PUSH
67421: LD_VAR 0 2
67425: ARRAY
67426: PPUSH
67427: CALL 17308 0 2
67431: PPUSH
67432: CALL_OW 1
67436: ST_TO_ADDR
// if not mc_scan [ i ] then
67437: LD_EXP 67
67441: PUSH
67442: LD_VAR 0 2
67446: ARRAY
67447: NOT
67448: IFFALSE 67603
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67450: LD_ADDR_VAR 0 4
67454: PUSH
67455: LD_EXP 44
67459: PUSH
67460: LD_VAR 0 2
67464: ARRAY
67465: PPUSH
67466: LD_INT 2
67468: PUSH
67469: LD_INT 25
67471: PUSH
67472: LD_INT 5
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 25
67481: PUSH
67482: LD_INT 8
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 25
67491: PUSH
67492: LD_INT 9
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: PPUSH
67505: CALL_OW 72
67509: ST_TO_ADDR
// if not tmp then
67510: LD_VAR 0 4
67514: NOT
67515: IFFALSE 67519
// continue ;
67517: GO 67338
// for j in tmp do
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 4
67528: PUSH
67529: FOR_IN
67530: IFFALSE 67601
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
67532: LD_VAR 0 3
67536: PPUSH
67537: CALL_OW 310
67541: PPUSH
67542: CALL_OW 266
67546: PUSH
67547: LD_INT 5
67549: EQUAL
67550: PUSH
67551: LD_VAR 0 3
67555: PPUSH
67556: CALL_OW 257
67560: PUSH
67561: LD_INT 1
67563: EQUAL
67564: AND
67565: PUSH
67566: LD_VAR 0 3
67570: PPUSH
67571: CALL_OW 459
67575: NOT
67576: AND
67577: PUSH
67578: LD_VAR 0 7
67582: AND
67583: IFFALSE 67599
// ComChangeProfession ( j , class ) ;
67585: LD_VAR 0 3
67589: PPUSH
67590: LD_VAR 0 7
67594: PPUSH
67595: CALL_OW 123
67599: GO 67529
67601: POP
67602: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
67603: LD_EXP 67
67607: PUSH
67608: LD_VAR 0 2
67612: ARRAY
67613: PUSH
67614: LD_EXP 66
67618: PUSH
67619: LD_VAR 0 2
67623: ARRAY
67624: AND
67625: IFFALSE 67694
// begin tmp := mc_defender [ i ] ;
67627: LD_ADDR_VAR 0 4
67631: PUSH
67632: LD_EXP 66
67636: PUSH
67637: LD_VAR 0 2
67641: ARRAY
67642: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
67643: LD_ADDR_EXP 66
67647: PUSH
67648: LD_EXP 66
67652: PPUSH
67653: LD_VAR 0 2
67657: PPUSH
67658: EMPTY
67659: PPUSH
67660: CALL_OW 1
67664: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
67665: LD_VAR 0 2
67669: PPUSH
67670: LD_VAR 0 4
67674: PPUSH
67675: LD_EXP 67
67679: PUSH
67680: LD_VAR 0 2
67684: ARRAY
67685: PPUSH
67686: CALL 17841 0 3
// exit ;
67690: POP
67691: POP
67692: GO 67698
// end ; end ;
67694: GO 67338
67696: POP
67697: POP
// end ;
67698: LD_VAR 0 1
67702: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
67703: LD_INT 0
67705: PPUSH
67706: PPUSH
67707: PPUSH
67708: PPUSH
67709: PPUSH
67710: PPUSH
67711: PPUSH
67712: PPUSH
67713: PPUSH
// if not mc_bases then
67714: LD_EXP 44
67718: NOT
67719: IFFALSE 67723
// exit ;
67721: GO 68667
// for i = 1 to mc_bases do
67723: LD_ADDR_VAR 0 2
67727: PUSH
67728: DOUBLE
67729: LD_INT 1
67731: DEC
67732: ST_TO_ADDR
67733: LD_EXP 44
67737: PUSH
67738: FOR_TO
67739: IFFALSE 68665
// begin tmp := mc_lab [ i ] ;
67741: LD_ADDR_VAR 0 6
67745: PUSH
67746: LD_EXP 77
67750: PUSH
67751: LD_VAR 0 2
67755: ARRAY
67756: ST_TO_ADDR
// if not tmp then
67757: LD_VAR 0 6
67761: NOT
67762: IFFALSE 67766
// continue ;
67764: GO 67738
// for j in tmp do
67766: LD_ADDR_VAR 0 3
67770: PUSH
67771: LD_VAR 0 6
67775: PUSH
67776: FOR_IN
67777: IFFALSE 68661
// begin side := GetSide ( j ) ;
67779: LD_ADDR_VAR 0 4
67783: PUSH
67784: LD_VAR 0 3
67788: PPUSH
67789: CALL_OW 255
67793: ST_TO_ADDR
// if not mc_tech [ side ] then
67794: LD_EXP 71
67798: PUSH
67799: LD_VAR 0 4
67803: ARRAY
67804: NOT
67805: IFFALSE 67809
// continue ;
67807: GO 67776
// if BuildingStatus ( j ) = bs_idle then
67809: LD_VAR 0 3
67813: PPUSH
67814: CALL_OW 461
67818: PUSH
67819: LD_INT 2
67821: EQUAL
67822: IFFALSE 67895
// for t in mc_tech [ side ] do
67824: LD_ADDR_VAR 0 5
67828: PUSH
67829: LD_EXP 71
67833: PUSH
67834: LD_VAR 0 4
67838: ARRAY
67839: PUSH
67840: FOR_IN
67841: IFFALSE 67893
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
67843: LD_VAR 0 3
67847: PPUSH
67848: LD_VAR 0 5
67852: PPUSH
67853: CALL_OW 430
67857: PUSH
67858: LD_VAR 0 4
67862: PPUSH
67863: LD_VAR 0 5
67867: PPUSH
67868: CALL 16413 0 2
67872: AND
67873: IFFALSE 67891
// begin ComResearch ( j , t ) ;
67875: LD_VAR 0 3
67879: PPUSH
67880: LD_VAR 0 5
67884: PPUSH
67885: CALL_OW 124
// break ;
67889: GO 67893
// end ;
67891: GO 67840
67893: POP
67894: POP
// if BuildingStatus ( j ) = bs_need_ape then
67895: LD_VAR 0 3
67899: PPUSH
67900: CALL_OW 461
67904: PUSH
67905: LD_INT 10
67907: EQUAL
67908: IFFALSE 68496
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
67910: LD_EXP 73
67914: PUSH
67915: LD_VAR 0 2
67919: ARRAY
67920: NOT
67921: PUSH
67922: LD_EXP 74
67926: PUSH
67927: LD_VAR 0 2
67931: ARRAY
67932: NOT
67933: AND
67934: PUSH
67935: LD_EXP 71
67939: PUSH
67940: LD_VAR 0 4
67944: ARRAY
67945: PUSH
67946: LD_INT 1
67948: GREATER
67949: AND
67950: IFFALSE 68081
// begin ComCancel ( j ) ;
67952: LD_VAR 0 3
67956: PPUSH
67957: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
67961: LD_ADDR_EXP 71
67965: PUSH
67966: LD_EXP 71
67970: PPUSH
67971: LD_VAR 0 4
67975: PPUSH
67976: LD_EXP 71
67980: PUSH
67981: LD_VAR 0 4
67985: ARRAY
67986: PPUSH
67987: LD_EXP 71
67991: PUSH
67992: LD_VAR 0 4
67996: ARRAY
67997: PUSH
67998: LD_INT 1
68000: MINUS
68001: PPUSH
68002: LD_EXP 71
68006: PUSH
68007: LD_VAR 0 4
68011: ARRAY
68012: PPUSH
68013: LD_INT 0
68015: PPUSH
68016: CALL 21862 0 4
68020: PPUSH
68021: CALL_OW 1
68025: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
68026: LD_ADDR_EXP 71
68030: PUSH
68031: LD_EXP 71
68035: PPUSH
68036: LD_VAR 0 4
68040: PPUSH
68041: LD_EXP 71
68045: PUSH
68046: LD_VAR 0 4
68050: ARRAY
68051: PPUSH
68052: LD_EXP 71
68056: PUSH
68057: LD_VAR 0 4
68061: ARRAY
68062: PPUSH
68063: LD_INT 1
68065: PPUSH
68066: LD_INT 0
68068: PPUSH
68069: CALL 21862 0 4
68073: PPUSH
68074: CALL_OW 1
68078: ST_TO_ADDR
// continue ;
68079: GO 67776
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
68081: LD_EXP 73
68085: PUSH
68086: LD_VAR 0 2
68090: ARRAY
68091: PUSH
68092: LD_EXP 74
68096: PUSH
68097: LD_VAR 0 2
68101: ARRAY
68102: NOT
68103: AND
68104: IFFALSE 68231
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
68106: LD_ADDR_EXP 74
68110: PUSH
68111: LD_EXP 74
68115: PPUSH
68116: LD_VAR 0 2
68120: PUSH
68121: LD_EXP 74
68125: PUSH
68126: LD_VAR 0 2
68130: ARRAY
68131: PUSH
68132: LD_INT 1
68134: PLUS
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PPUSH
68140: LD_EXP 73
68144: PUSH
68145: LD_VAR 0 2
68149: ARRAY
68150: PUSH
68151: LD_INT 1
68153: ARRAY
68154: PPUSH
68155: CALL 22879 0 3
68159: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
68160: LD_EXP 73
68164: PUSH
68165: LD_VAR 0 2
68169: ARRAY
68170: PUSH
68171: LD_INT 1
68173: ARRAY
68174: PPUSH
68175: LD_INT 112
68177: PPUSH
68178: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
68182: LD_ADDR_VAR 0 9
68186: PUSH
68187: LD_EXP 73
68191: PUSH
68192: LD_VAR 0 2
68196: ARRAY
68197: PPUSH
68198: LD_INT 1
68200: PPUSH
68201: CALL_OW 3
68205: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
68206: LD_ADDR_EXP 73
68210: PUSH
68211: LD_EXP 73
68215: PPUSH
68216: LD_VAR 0 2
68220: PPUSH
68221: LD_VAR 0 9
68225: PPUSH
68226: CALL_OW 1
68230: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
68231: LD_EXP 73
68235: PUSH
68236: LD_VAR 0 2
68240: ARRAY
68241: PUSH
68242: LD_EXP 74
68246: PUSH
68247: LD_VAR 0 2
68251: ARRAY
68252: AND
68253: PUSH
68254: LD_EXP 74
68258: PUSH
68259: LD_VAR 0 2
68263: ARRAY
68264: PUSH
68265: LD_INT 1
68267: ARRAY
68268: PPUSH
68269: CALL_OW 310
68273: NOT
68274: AND
68275: PUSH
68276: LD_VAR 0 3
68280: PPUSH
68281: CALL_OW 313
68285: PUSH
68286: LD_INT 6
68288: EQUAL
68289: AND
68290: IFFALSE 68346
// begin tmp2 := UnitsInside ( j ) ;
68292: LD_ADDR_VAR 0 9
68296: PUSH
68297: LD_VAR 0 3
68301: PPUSH
68302: CALL_OW 313
68306: ST_TO_ADDR
// if tmp2 = 6 then
68307: LD_VAR 0 9
68311: PUSH
68312: LD_INT 6
68314: EQUAL
68315: IFFALSE 68346
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
68317: LD_VAR 0 9
68321: PUSH
68322: LD_INT 1
68324: ARRAY
68325: PPUSH
68326: LD_INT 112
68328: PPUSH
68329: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
68333: LD_VAR 0 9
68337: PUSH
68338: LD_INT 1
68340: ARRAY
68341: PPUSH
68342: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
68346: LD_EXP 74
68350: PUSH
68351: LD_VAR 0 2
68355: ARRAY
68356: PUSH
68357: LD_EXP 74
68361: PUSH
68362: LD_VAR 0 2
68366: ARRAY
68367: PUSH
68368: LD_INT 1
68370: ARRAY
68371: PPUSH
68372: CALL_OW 314
68376: NOT
68377: AND
68378: PUSH
68379: LD_EXP 74
68383: PUSH
68384: LD_VAR 0 2
68388: ARRAY
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PPUSH
68394: CALL_OW 310
68398: NOT
68399: AND
68400: IFFALSE 68426
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
68402: LD_EXP 74
68406: PUSH
68407: LD_VAR 0 2
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_VAR 0 3
68421: PPUSH
68422: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
68426: LD_EXP 74
68430: PUSH
68431: LD_VAR 0 2
68435: ARRAY
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: PPUSH
68441: CALL_OW 310
68445: PUSH
68446: LD_EXP 74
68450: PUSH
68451: LD_VAR 0 2
68455: ARRAY
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: PPUSH
68461: CALL_OW 310
68465: PPUSH
68466: CALL_OW 461
68470: PUSH
68471: LD_INT 3
68473: NONEQUAL
68474: AND
68475: IFFALSE 68496
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
68477: LD_EXP 74
68481: PUSH
68482: LD_VAR 0 2
68486: ARRAY
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PPUSH
68492: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
68496: LD_VAR 0 3
68500: PPUSH
68501: CALL_OW 461
68505: PUSH
68506: LD_INT 6
68508: EQUAL
68509: PUSH
68510: LD_VAR 0 6
68514: PUSH
68515: LD_INT 1
68517: GREATER
68518: AND
68519: IFFALSE 68659
// begin sci := [ ] ;
68521: LD_ADDR_VAR 0 8
68525: PUSH
68526: EMPTY
68527: ST_TO_ADDR
// for x in tmp diff j do
68528: LD_ADDR_VAR 0 7
68532: PUSH
68533: LD_VAR 0 6
68537: PUSH
68538: LD_VAR 0 3
68542: DIFF
68543: PUSH
68544: FOR_IN
68545: IFFALSE 68585
// begin if BuildingStatus ( x ) = bs_idle then
68547: LD_VAR 0 7
68551: PPUSH
68552: CALL_OW 461
68556: PUSH
68557: LD_INT 2
68559: EQUAL
68560: IFFALSE 68583
// sci := sci ^ UnitsInside ( x ) ;
68562: LD_ADDR_VAR 0 8
68566: PUSH
68567: LD_VAR 0 8
68571: PUSH
68572: LD_VAR 0 7
68576: PPUSH
68577: CALL_OW 313
68581: ADD
68582: ST_TO_ADDR
// end ;
68583: GO 68544
68585: POP
68586: POP
// if not sci then
68587: LD_VAR 0 8
68591: NOT
68592: IFFALSE 68596
// continue ;
68594: GO 67776
// for x in sci do
68596: LD_ADDR_VAR 0 7
68600: PUSH
68601: LD_VAR 0 8
68605: PUSH
68606: FOR_IN
68607: IFFALSE 68657
// if IsInUnit ( x ) and not HasTask ( x ) then
68609: LD_VAR 0 7
68613: PPUSH
68614: CALL_OW 310
68618: PUSH
68619: LD_VAR 0 7
68623: PPUSH
68624: CALL_OW 314
68628: NOT
68629: AND
68630: IFFALSE 68655
// begin ComExitBuilding ( x ) ;
68632: LD_VAR 0 7
68636: PPUSH
68637: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
68641: LD_VAR 0 7
68645: PPUSH
68646: LD_VAR 0 3
68650: PPUSH
68651: CALL_OW 180
// end ;
68655: GO 68606
68657: POP
68658: POP
// end ; end ;
68659: GO 67776
68661: POP
68662: POP
// end ;
68663: GO 67738
68665: POP
68666: POP
// end ;
68667: LD_VAR 0 1
68671: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
68672: LD_INT 0
68674: PPUSH
68675: PPUSH
68676: PPUSH
68677: PPUSH
68678: PPUSH
68679: PPUSH
68680: PPUSH
68681: PPUSH
// if not mc_bases or not mc_parking then
68682: LD_EXP 44
68686: NOT
68687: PUSH
68688: LD_EXP 68
68692: NOT
68693: OR
68694: IFFALSE 68698
// exit ;
68696: GO 69356
// for i = 1 to mc_bases do
68698: LD_ADDR_VAR 0 2
68702: PUSH
68703: DOUBLE
68704: LD_INT 1
68706: DEC
68707: ST_TO_ADDR
68708: LD_EXP 44
68712: PUSH
68713: FOR_TO
68714: IFFALSE 69354
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
68716: LD_EXP 44
68720: PUSH
68721: LD_VAR 0 2
68725: ARRAY
68726: NOT
68727: PUSH
68728: LD_EXP 68
68732: PUSH
68733: LD_VAR 0 2
68737: ARRAY
68738: NOT
68739: OR
68740: IFFALSE 68744
// continue ;
68742: GO 68713
// if mc_scan [ i ] then
68744: LD_EXP 67
68748: PUSH
68749: LD_VAR 0 2
68753: ARRAY
68754: IFFALSE 68780
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
68756: LD_ADDR_EXP 56
68760: PUSH
68761: LD_EXP 56
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: EMPTY
68772: PPUSH
68773: CALL_OW 1
68777: ST_TO_ADDR
// continue ;
68778: GO 68713
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
68780: LD_ADDR_VAR 0 5
68784: PUSH
68785: LD_EXP 44
68789: PUSH
68790: LD_VAR 0 2
68794: ARRAY
68795: PUSH
68796: LD_INT 1
68798: ARRAY
68799: PPUSH
68800: CALL_OW 255
68804: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68805: LD_ADDR_VAR 0 6
68809: PUSH
68810: LD_EXP 44
68814: PUSH
68815: LD_VAR 0 2
68819: ARRAY
68820: PPUSH
68821: LD_INT 30
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PPUSH
68831: CALL_OW 72
68835: ST_TO_ADDR
// if not fac then
68836: LD_VAR 0 6
68840: NOT
68841: IFFALSE 68892
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68843: LD_ADDR_VAR 0 6
68847: PUSH
68848: LD_EXP 44
68852: PUSH
68853: LD_VAR 0 2
68857: ARRAY
68858: PPUSH
68859: LD_INT 2
68861: PUSH
68862: LD_INT 30
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 30
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: PPUSH
68887: CALL_OW 72
68891: ST_TO_ADDR
// if not fac then
68892: LD_VAR 0 6
68896: NOT
68897: IFFALSE 68901
// continue ;
68899: GO 68713
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
68901: LD_ADDR_VAR 0 7
68905: PUSH
68906: LD_EXP 68
68910: PUSH
68911: LD_VAR 0 2
68915: ARRAY
68916: PPUSH
68917: LD_INT 22
68919: PUSH
68920: LD_VAR 0 5
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 21
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: LD_INT 24
68944: PUSH
68945: LD_INT 1000
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: PPUSH
68961: CALL_OW 70
68965: PUSH
68966: LD_INT 22
68968: PUSH
68969: LD_VAR 0 5
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 91
68980: PUSH
68981: LD_VAR 0 6
68985: PUSH
68986: LD_INT 1
68988: ARRAY
68989: PUSH
68990: LD_INT 25
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 21
69000: PUSH
69001: LD_INT 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: LD_INT 24
69013: PUSH
69014: LD_INT 1000
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: PPUSH
69031: CALL_OW 69
69035: UNION
69036: ST_TO_ADDR
// if not vehs then
69037: LD_VAR 0 7
69041: NOT
69042: IFFALSE 69068
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
69044: LD_ADDR_EXP 56
69048: PUSH
69049: LD_EXP 56
69053: PPUSH
69054: LD_VAR 0 2
69058: PPUSH
69059: EMPTY
69060: PPUSH
69061: CALL_OW 1
69065: ST_TO_ADDR
// continue ;
69066: GO 68713
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69068: LD_ADDR_VAR 0 8
69072: PUSH
69073: LD_EXP 44
69077: PUSH
69078: LD_VAR 0 2
69082: ARRAY
69083: PPUSH
69084: LD_INT 30
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PPUSH
69094: CALL_OW 72
69098: ST_TO_ADDR
// if tmp then
69099: LD_VAR 0 8
69103: IFFALSE 69206
// begin for j in tmp do
69105: LD_ADDR_VAR 0 3
69109: PUSH
69110: LD_VAR 0 8
69114: PUSH
69115: FOR_IN
69116: IFFALSE 69204
// for k in UnitsInside ( j ) do
69118: LD_ADDR_VAR 0 4
69122: PUSH
69123: LD_VAR 0 3
69127: PPUSH
69128: CALL_OW 313
69132: PUSH
69133: FOR_IN
69134: IFFALSE 69200
// if k then
69136: LD_VAR 0 4
69140: IFFALSE 69198
// if not k in mc_repair_vehicle [ i ] then
69142: LD_VAR 0 4
69146: PUSH
69147: LD_EXP 56
69151: PUSH
69152: LD_VAR 0 2
69156: ARRAY
69157: IN
69158: NOT
69159: IFFALSE 69198
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
69161: LD_ADDR_EXP 56
69165: PUSH
69166: LD_EXP 56
69170: PPUSH
69171: LD_VAR 0 2
69175: PPUSH
69176: LD_EXP 56
69180: PUSH
69181: LD_VAR 0 2
69185: ARRAY
69186: PUSH
69187: LD_VAR 0 4
69191: UNION
69192: PPUSH
69193: CALL_OW 1
69197: ST_TO_ADDR
69198: GO 69133
69200: POP
69201: POP
69202: GO 69115
69204: POP
69205: POP
// end ; if not mc_repair_vehicle [ i ] then
69206: LD_EXP 56
69210: PUSH
69211: LD_VAR 0 2
69215: ARRAY
69216: NOT
69217: IFFALSE 69221
// continue ;
69219: GO 68713
// for j in mc_repair_vehicle [ i ] do
69221: LD_ADDR_VAR 0 3
69225: PUSH
69226: LD_EXP 56
69230: PUSH
69231: LD_VAR 0 2
69235: ARRAY
69236: PUSH
69237: FOR_IN
69238: IFFALSE 69350
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69240: LD_VAR 0 3
69244: PPUSH
69245: CALL_OW 311
69249: NOT
69250: PUSH
69251: LD_VAR 0 3
69255: PUSH
69256: LD_EXP 47
69260: PUSH
69261: LD_VAR 0 2
69265: ARRAY
69266: PUSH
69267: LD_INT 1
69269: ARRAY
69270: IN
69271: NOT
69272: AND
69273: PUSH
69274: LD_VAR 0 3
69278: PUSH
69279: LD_EXP 47
69283: PUSH
69284: LD_VAR 0 2
69288: ARRAY
69289: PUSH
69290: LD_INT 2
69292: ARRAY
69293: IN
69294: NOT
69295: AND
69296: IFFALSE 69348
// begin if IsInUnit ( j ) then
69298: LD_VAR 0 3
69302: PPUSH
69303: CALL_OW 310
69307: IFFALSE 69318
// ComExitBuilding ( j ) ;
69309: LD_VAR 0 3
69313: PPUSH
69314: CALL_OW 122
// if not HasTask ( j ) then
69318: LD_VAR 0 3
69322: PPUSH
69323: CALL_OW 314
69327: NOT
69328: IFFALSE 69348
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
69330: LD_VAR 0 3
69334: PPUSH
69335: LD_VAR 0 7
69339: PUSH
69340: LD_INT 1
69342: ARRAY
69343: PPUSH
69344: CALL_OW 189
// end ; end ;
69348: GO 69237
69350: POP
69351: POP
// end ;
69352: GO 68713
69354: POP
69355: POP
// end ;
69356: LD_VAR 0 1
69360: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
69361: LD_INT 0
69363: PPUSH
69364: PPUSH
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
69370: PPUSH
69371: PPUSH
69372: PPUSH
69373: PPUSH
// if not mc_bases then
69374: LD_EXP 44
69378: NOT
69379: IFFALSE 69383
// exit ;
69381: GO 70119
// for i = 1 to mc_bases do
69383: LD_ADDR_VAR 0 2
69387: PUSH
69388: DOUBLE
69389: LD_INT 1
69391: DEC
69392: ST_TO_ADDR
69393: LD_EXP 44
69397: PUSH
69398: FOR_TO
69399: IFFALSE 70117
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
69401: LD_EXP 72
69405: PUSH
69406: LD_VAR 0 2
69410: ARRAY
69411: NOT
69412: PUSH
69413: LD_EXP 47
69417: PUSH
69418: LD_VAR 0 2
69422: ARRAY
69423: PUSH
69424: LD_INT 1
69426: ARRAY
69427: OR
69428: PUSH
69429: LD_EXP 47
69433: PUSH
69434: LD_VAR 0 2
69438: ARRAY
69439: PUSH
69440: LD_INT 2
69442: ARRAY
69443: OR
69444: PUSH
69445: LD_EXP 70
69449: PUSH
69450: LD_VAR 0 2
69454: ARRAY
69455: PPUSH
69456: LD_INT 1
69458: PPUSH
69459: CALL_OW 325
69463: NOT
69464: OR
69465: PUSH
69466: LD_EXP 67
69470: PUSH
69471: LD_VAR 0 2
69475: ARRAY
69476: OR
69477: IFFALSE 69481
// continue ;
69479: GO 69398
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
69481: LD_ADDR_VAR 0 8
69485: PUSH
69486: LD_EXP 44
69490: PUSH
69491: LD_VAR 0 2
69495: ARRAY
69496: PPUSH
69497: LD_INT 25
69499: PUSH
69500: LD_INT 4
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 50
69509: PUSH
69510: EMPTY
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: LD_INT 60
69518: PUSH
69519: EMPTY
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: PPUSH
69531: CALL_OW 72
69535: PUSH
69536: LD_EXP 48
69540: PUSH
69541: LD_VAR 0 2
69545: ARRAY
69546: DIFF
69547: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69548: LD_ADDR_VAR 0 9
69552: PUSH
69553: LD_EXP 44
69557: PUSH
69558: LD_VAR 0 2
69562: ARRAY
69563: PPUSH
69564: LD_INT 2
69566: PUSH
69567: LD_INT 30
69569: PUSH
69570: LD_INT 0
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 30
69579: PUSH
69580: LD_INT 1
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: PPUSH
69592: CALL_OW 72
69596: ST_TO_ADDR
// if not tmp or not dep then
69597: LD_VAR 0 8
69601: NOT
69602: PUSH
69603: LD_VAR 0 9
69607: NOT
69608: OR
69609: IFFALSE 69613
// continue ;
69611: GO 69398
// side := GetSide ( tmp [ 1 ] ) ;
69613: LD_ADDR_VAR 0 11
69617: PUSH
69618: LD_VAR 0 8
69622: PUSH
69623: LD_INT 1
69625: ARRAY
69626: PPUSH
69627: CALL_OW 255
69631: ST_TO_ADDR
// dep := dep [ 1 ] ;
69632: LD_ADDR_VAR 0 9
69636: PUSH
69637: LD_VAR 0 9
69641: PUSH
69642: LD_INT 1
69644: ARRAY
69645: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
69646: LD_ADDR_VAR 0 7
69650: PUSH
69651: LD_EXP 72
69655: PUSH
69656: LD_VAR 0 2
69660: ARRAY
69661: PPUSH
69662: LD_INT 22
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 25
69674: PUSH
69675: LD_INT 12
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PPUSH
69686: CALL_OW 70
69690: PUSH
69691: LD_INT 22
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 25
69703: PUSH
69704: LD_INT 12
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 91
69713: PUSH
69714: LD_VAR 0 9
69718: PUSH
69719: LD_INT 20
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: LIST
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: LIST
69731: PPUSH
69732: CALL_OW 69
69736: UNION
69737: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
69738: LD_ADDR_VAR 0 10
69742: PUSH
69743: LD_EXP 72
69747: PUSH
69748: LD_VAR 0 2
69752: ARRAY
69753: PPUSH
69754: LD_INT 81
69756: PUSH
69757: LD_VAR 0 11
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PPUSH
69766: CALL_OW 70
69770: ST_TO_ADDR
// if not apes or danger_at_area then
69771: LD_VAR 0 7
69775: NOT
69776: PUSH
69777: LD_VAR 0 10
69781: OR
69782: IFFALSE 69832
// begin if mc_taming [ i ] then
69784: LD_EXP 75
69788: PUSH
69789: LD_VAR 0 2
69793: ARRAY
69794: IFFALSE 69830
// begin MC_Reset ( i , 121 ) ;
69796: LD_VAR 0 2
69800: PPUSH
69801: LD_INT 121
69803: PPUSH
69804: CALL 60627 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
69808: LD_ADDR_EXP 75
69812: PUSH
69813: LD_EXP 75
69817: PPUSH
69818: LD_VAR 0 2
69822: PPUSH
69823: EMPTY
69824: PPUSH
69825: CALL_OW 1
69829: ST_TO_ADDR
// end ; continue ;
69830: GO 69398
// end ; for j in tmp do
69832: LD_ADDR_VAR 0 3
69836: PUSH
69837: LD_VAR 0 8
69841: PUSH
69842: FOR_IN
69843: IFFALSE 70113
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
69845: LD_VAR 0 3
69849: PUSH
69850: LD_EXP 75
69854: PUSH
69855: LD_VAR 0 2
69859: ARRAY
69860: IN
69861: NOT
69862: PUSH
69863: LD_EXP 75
69867: PUSH
69868: LD_VAR 0 2
69872: ARRAY
69873: PUSH
69874: LD_INT 3
69876: LESS
69877: AND
69878: IFFALSE 69936
// begin SetTag ( j , 121 ) ;
69880: LD_VAR 0 3
69884: PPUSH
69885: LD_INT 121
69887: PPUSH
69888: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
69892: LD_ADDR_EXP 75
69896: PUSH
69897: LD_EXP 75
69901: PPUSH
69902: LD_VAR 0 2
69906: PUSH
69907: LD_EXP 75
69911: PUSH
69912: LD_VAR 0 2
69916: ARRAY
69917: PUSH
69918: LD_INT 1
69920: PLUS
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PPUSH
69926: LD_VAR 0 3
69930: PPUSH
69931: CALL 22879 0 3
69935: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
69936: LD_VAR 0 3
69940: PUSH
69941: LD_EXP 75
69945: PUSH
69946: LD_VAR 0 2
69950: ARRAY
69951: IN
69952: IFFALSE 70111
// begin if IsInUnit ( j ) then
69954: LD_VAR 0 3
69958: PPUSH
69959: CALL_OW 310
69963: IFFALSE 69974
// ComExitBuilding ( j ) ;
69965: LD_VAR 0 3
69969: PPUSH
69970: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
69974: LD_ADDR_VAR 0 6
69978: PUSH
69979: LD_VAR 0 7
69983: PPUSH
69984: LD_VAR 0 3
69988: PPUSH
69989: CALL_OW 74
69993: ST_TO_ADDR
// if not ape then
69994: LD_VAR 0 6
69998: NOT
69999: IFFALSE 70003
// break ;
70001: GO 70113
// x := GetX ( ape ) ;
70003: LD_ADDR_VAR 0 4
70007: PUSH
70008: LD_VAR 0 6
70012: PPUSH
70013: CALL_OW 250
70017: ST_TO_ADDR
// y := GetY ( ape ) ;
70018: LD_ADDR_VAR 0 5
70022: PUSH
70023: LD_VAR 0 6
70027: PPUSH
70028: CALL_OW 251
70032: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
70033: LD_VAR 0 4
70037: PPUSH
70038: LD_VAR 0 5
70042: PPUSH
70043: CALL_OW 488
70047: NOT
70048: PUSH
70049: LD_VAR 0 11
70053: PPUSH
70054: LD_VAR 0 4
70058: PPUSH
70059: LD_VAR 0 5
70063: PPUSH
70064: LD_INT 20
70066: PPUSH
70067: CALL 23373 0 4
70071: PUSH
70072: LD_INT 4
70074: ARRAY
70075: OR
70076: IFFALSE 70080
// break ;
70078: GO 70113
// if not HasTask ( j ) then
70080: LD_VAR 0 3
70084: PPUSH
70085: CALL_OW 314
70089: NOT
70090: IFFALSE 70111
// ComTameXY ( j , x , y ) ;
70092: LD_VAR 0 3
70096: PPUSH
70097: LD_VAR 0 4
70101: PPUSH
70102: LD_VAR 0 5
70106: PPUSH
70107: CALL_OW 131
// end ; end ;
70111: GO 69842
70113: POP
70114: POP
// end ;
70115: GO 69398
70117: POP
70118: POP
// end ;
70119: LD_VAR 0 1
70123: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
70124: LD_INT 0
70126: PPUSH
70127: PPUSH
70128: PPUSH
70129: PPUSH
70130: PPUSH
70131: PPUSH
70132: PPUSH
70133: PPUSH
// if not mc_bases then
70134: LD_EXP 44
70138: NOT
70139: IFFALSE 70143
// exit ;
70141: GO 70753
// for i = 1 to mc_bases do
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: DOUBLE
70149: LD_INT 1
70151: DEC
70152: ST_TO_ADDR
70153: LD_EXP 44
70157: PUSH
70158: FOR_TO
70159: IFFALSE 70751
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
70161: LD_EXP 73
70165: PUSH
70166: LD_VAR 0 2
70170: ARRAY
70171: NOT
70172: PUSH
70173: LD_EXP 73
70177: PUSH
70178: LD_VAR 0 2
70182: ARRAY
70183: PPUSH
70184: LD_INT 25
70186: PUSH
70187: LD_INT 12
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PPUSH
70194: CALL_OW 72
70198: NOT
70199: OR
70200: IFFALSE 70204
// continue ;
70202: GO 70158
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
70204: LD_ADDR_VAR 0 5
70208: PUSH
70209: LD_EXP 73
70213: PUSH
70214: LD_VAR 0 2
70218: ARRAY
70219: PUSH
70220: LD_INT 1
70222: ARRAY
70223: PPUSH
70224: CALL_OW 255
70228: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
70229: LD_VAR 0 5
70233: PPUSH
70234: LD_INT 2
70236: PPUSH
70237: CALL_OW 325
70241: IFFALSE 70486
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
70243: LD_ADDR_VAR 0 4
70247: PUSH
70248: LD_EXP 73
70252: PUSH
70253: LD_VAR 0 2
70257: ARRAY
70258: PPUSH
70259: LD_INT 25
70261: PUSH
70262: LD_INT 16
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PPUSH
70269: CALL_OW 72
70273: ST_TO_ADDR
// if tmp < 6 then
70274: LD_VAR 0 4
70278: PUSH
70279: LD_INT 6
70281: LESS
70282: IFFALSE 70486
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70284: LD_ADDR_VAR 0 6
70288: PUSH
70289: LD_EXP 44
70293: PUSH
70294: LD_VAR 0 2
70298: ARRAY
70299: PPUSH
70300: LD_INT 2
70302: PUSH
70303: LD_INT 30
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 30
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: PPUSH
70328: CALL_OW 72
70332: ST_TO_ADDR
// if depot then
70333: LD_VAR 0 6
70337: IFFALSE 70486
// begin for j in depot do
70339: LD_ADDR_VAR 0 3
70343: PUSH
70344: LD_VAR 0 6
70348: PUSH
70349: FOR_IN
70350: IFFALSE 70381
// begin if UnitsInside ( j ) < 6 then
70352: LD_VAR 0 3
70356: PPUSH
70357: CALL_OW 313
70361: PUSH
70362: LD_INT 6
70364: LESS
70365: IFFALSE 70379
// begin selected := j ;
70367: LD_ADDR_VAR 0 7
70371: PUSH
70372: LD_VAR 0 3
70376: ST_TO_ADDR
// break ;
70377: GO 70381
// end ; end ;
70379: GO 70349
70381: POP
70382: POP
// if selected then
70383: LD_VAR 0 7
70387: IFFALSE 70486
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
70389: LD_ADDR_VAR 0 3
70393: PUSH
70394: LD_EXP 73
70398: PUSH
70399: LD_VAR 0 2
70403: ARRAY
70404: PPUSH
70405: LD_INT 25
70407: PUSH
70408: LD_INT 12
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PPUSH
70415: CALL_OW 72
70419: PUSH
70420: FOR_IN
70421: IFFALSE 70484
// if not HasTask ( j ) then
70423: LD_VAR 0 3
70427: PPUSH
70428: CALL_OW 314
70432: NOT
70433: IFFALSE 70482
// begin if not IsInUnit ( j ) then
70435: LD_VAR 0 3
70439: PPUSH
70440: CALL_OW 310
70444: NOT
70445: IFFALSE 70461
// ComEnterUnit ( j , selected ) ;
70447: LD_VAR 0 3
70451: PPUSH
70452: LD_VAR 0 7
70456: PPUSH
70457: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
70461: LD_VAR 0 3
70465: PPUSH
70466: LD_INT 16
70468: PPUSH
70469: CALL_OW 183
// AddComExitBuilding ( j ) ;
70473: LD_VAR 0 3
70477: PPUSH
70478: CALL_OW 182
// end ;
70482: GO 70420
70484: POP
70485: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
70486: LD_VAR 0 5
70490: PPUSH
70491: LD_INT 11
70493: PPUSH
70494: CALL_OW 325
70498: IFFALSE 70749
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
70500: LD_ADDR_VAR 0 4
70504: PUSH
70505: LD_EXP 73
70509: PUSH
70510: LD_VAR 0 2
70514: ARRAY
70515: PPUSH
70516: LD_INT 25
70518: PUSH
70519: LD_INT 16
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PPUSH
70526: CALL_OW 72
70530: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
70531: LD_VAR 0 4
70535: PUSH
70536: LD_INT 6
70538: GREATEREQUAL
70539: PUSH
70540: LD_VAR 0 5
70544: PPUSH
70545: LD_INT 2
70547: PPUSH
70548: CALL_OW 325
70552: NOT
70553: OR
70554: IFFALSE 70749
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
70556: LD_ADDR_VAR 0 8
70560: PUSH
70561: LD_EXP 44
70565: PUSH
70566: LD_VAR 0 2
70570: ARRAY
70571: PPUSH
70572: LD_INT 2
70574: PUSH
70575: LD_INT 30
70577: PUSH
70578: LD_INT 4
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 30
70587: PUSH
70588: LD_INT 5
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: LIST
70599: PPUSH
70600: CALL_OW 72
70604: ST_TO_ADDR
// if barracks then
70605: LD_VAR 0 8
70609: IFFALSE 70749
// begin for j in barracks do
70611: LD_ADDR_VAR 0 3
70615: PUSH
70616: LD_VAR 0 8
70620: PUSH
70621: FOR_IN
70622: IFFALSE 70653
// begin if UnitsInside ( j ) < 6 then
70624: LD_VAR 0 3
70628: PPUSH
70629: CALL_OW 313
70633: PUSH
70634: LD_INT 6
70636: LESS
70637: IFFALSE 70651
// begin selected := j ;
70639: LD_ADDR_VAR 0 7
70643: PUSH
70644: LD_VAR 0 3
70648: ST_TO_ADDR
// break ;
70649: GO 70653
// end ; end ;
70651: GO 70621
70653: POP
70654: POP
// if selected then
70655: LD_VAR 0 7
70659: IFFALSE 70749
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
70661: LD_ADDR_VAR 0 3
70665: PUSH
70666: LD_EXP 73
70670: PUSH
70671: LD_VAR 0 2
70675: ARRAY
70676: PPUSH
70677: LD_INT 25
70679: PUSH
70680: LD_INT 12
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PPUSH
70687: CALL_OW 72
70691: PUSH
70692: FOR_IN
70693: IFFALSE 70747
// if not IsInUnit ( j ) and not HasTask ( j ) then
70695: LD_VAR 0 3
70699: PPUSH
70700: CALL_OW 310
70704: NOT
70705: PUSH
70706: LD_VAR 0 3
70710: PPUSH
70711: CALL_OW 314
70715: NOT
70716: AND
70717: IFFALSE 70745
// begin ComEnterUnit ( j , selected ) ;
70719: LD_VAR 0 3
70723: PPUSH
70724: LD_VAR 0 7
70728: PPUSH
70729: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
70733: LD_VAR 0 3
70737: PPUSH
70738: LD_INT 15
70740: PPUSH
70741: CALL_OW 183
// end ;
70745: GO 70692
70747: POP
70748: POP
// end ; end ; end ; end ; end ;
70749: GO 70158
70751: POP
70752: POP
// end ;
70753: LD_VAR 0 1
70757: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
70758: LD_INT 0
70760: PPUSH
70761: PPUSH
70762: PPUSH
70763: PPUSH
// if not mc_bases then
70764: LD_EXP 44
70768: NOT
70769: IFFALSE 70773
// exit ;
70771: GO 70951
// for i = 1 to mc_bases do
70773: LD_ADDR_VAR 0 2
70777: PUSH
70778: DOUBLE
70779: LD_INT 1
70781: DEC
70782: ST_TO_ADDR
70783: LD_EXP 44
70787: PUSH
70788: FOR_TO
70789: IFFALSE 70949
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
70791: LD_ADDR_VAR 0 4
70795: PUSH
70796: LD_EXP 44
70800: PUSH
70801: LD_VAR 0 2
70805: ARRAY
70806: PPUSH
70807: LD_INT 25
70809: PUSH
70810: LD_INT 9
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PPUSH
70817: CALL_OW 72
70821: ST_TO_ADDR
// if not tmp then
70822: LD_VAR 0 4
70826: NOT
70827: IFFALSE 70831
// continue ;
70829: GO 70788
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
70831: LD_EXP 70
70835: PUSH
70836: LD_VAR 0 2
70840: ARRAY
70841: PPUSH
70842: LD_INT 29
70844: PPUSH
70845: CALL_OW 325
70849: NOT
70850: PUSH
70851: LD_EXP 70
70855: PUSH
70856: LD_VAR 0 2
70860: ARRAY
70861: PPUSH
70862: LD_INT 28
70864: PPUSH
70865: CALL_OW 325
70869: NOT
70870: AND
70871: IFFALSE 70875
// continue ;
70873: GO 70788
// for j in tmp do
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 4
70884: PUSH
70885: FOR_IN
70886: IFFALSE 70945
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
70888: LD_VAR 0 3
70892: PUSH
70893: LD_EXP 47
70897: PUSH
70898: LD_VAR 0 2
70902: ARRAY
70903: PUSH
70904: LD_INT 1
70906: ARRAY
70907: IN
70908: NOT
70909: PUSH
70910: LD_VAR 0 3
70914: PUSH
70915: LD_EXP 47
70919: PUSH
70920: LD_VAR 0 2
70924: ARRAY
70925: PUSH
70926: LD_INT 2
70928: ARRAY
70929: IN
70930: NOT
70931: AND
70932: IFFALSE 70943
// ComSpaceTimeShoot ( j ) ;
70934: LD_VAR 0 3
70938: PPUSH
70939: CALL 16504 0 1
70943: GO 70885
70945: POP
70946: POP
// end ;
70947: GO 70788
70949: POP
70950: POP
// end ;
70951: LD_VAR 0 1
70955: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
70956: LD_INT 0
70958: PPUSH
70959: PPUSH
70960: PPUSH
70961: PPUSH
// if not mc_bases then
70962: LD_EXP 44
70966: NOT
70967: IFFALSE 70971
// exit ;
70969: GO 70993
// for i = 1 to mc_bases do
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_EXP 44
70985: PUSH
70986: FOR_TO
70987: IFFALSE 70991
// begin end ;
70989: GO 70986
70991: POP
70992: POP
// end ;
70993: LD_VAR 0 1
70997: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70998: LD_INT 0
71000: PPUSH
71001: PPUSH
71002: PPUSH
// if not mc_bases then
71003: LD_EXP 44
71007: NOT
71008: IFFALSE 71012
// exit ;
71010: GO 71572
// for i = 1 to mc_bases do
71012: LD_ADDR_VAR 0 2
71016: PUSH
71017: DOUBLE
71018: LD_INT 1
71020: DEC
71021: ST_TO_ADDR
71022: LD_EXP 44
71026: PUSH
71027: FOR_TO
71028: IFFALSE 71570
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71030: LD_ADDR_VAR 0 3
71034: PUSH
71035: LD_EXP 44
71039: PUSH
71040: LD_VAR 0 2
71044: ARRAY
71045: PPUSH
71046: LD_INT 25
71048: PUSH
71049: LD_INT 4
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PPUSH
71056: CALL_OW 72
71060: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
71061: LD_VAR 0 3
71065: NOT
71066: PUSH
71067: LD_EXP 80
71071: PUSH
71072: LD_VAR 0 2
71076: ARRAY
71077: NOT
71078: OR
71079: IFFALSE 71129
// begin if mc_deposits_finder [ i ] then
71081: LD_EXP 81
71085: PUSH
71086: LD_VAR 0 2
71090: ARRAY
71091: IFFALSE 71127
// begin MC_Reset ( i , 125 ) ;
71093: LD_VAR 0 2
71097: PPUSH
71098: LD_INT 125
71100: PPUSH
71101: CALL 60627 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
71105: LD_ADDR_EXP 81
71109: PUSH
71110: LD_EXP 81
71114: PPUSH
71115: LD_VAR 0 2
71119: PPUSH
71120: EMPTY
71121: PPUSH
71122: CALL_OW 1
71126: ST_TO_ADDR
// end ; continue ;
71127: GO 71027
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
71129: LD_EXP 80
71133: PUSH
71134: LD_VAR 0 2
71138: ARRAY
71139: PUSH
71140: LD_INT 1
71142: ARRAY
71143: PUSH
71144: LD_INT 3
71146: ARRAY
71147: PUSH
71148: LD_INT 1
71150: EQUAL
71151: PUSH
71152: LD_INT 20
71154: PPUSH
71155: LD_EXP 70
71159: PUSH
71160: LD_VAR 0 2
71164: ARRAY
71165: PPUSH
71166: CALL_OW 321
71170: PUSH
71171: LD_INT 2
71173: NONEQUAL
71174: AND
71175: IFFALSE 71225
// begin if mc_deposits_finder [ i ] then
71177: LD_EXP 81
71181: PUSH
71182: LD_VAR 0 2
71186: ARRAY
71187: IFFALSE 71223
// begin MC_Reset ( i , 125 ) ;
71189: LD_VAR 0 2
71193: PPUSH
71194: LD_INT 125
71196: PPUSH
71197: CALL 60627 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
71201: LD_ADDR_EXP 81
71205: PUSH
71206: LD_EXP 81
71210: PPUSH
71211: LD_VAR 0 2
71215: PPUSH
71216: EMPTY
71217: PPUSH
71218: CALL_OW 1
71222: ST_TO_ADDR
// end ; continue ;
71223: GO 71027
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
71225: LD_EXP 80
71229: PUSH
71230: LD_VAR 0 2
71234: ARRAY
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: PUSH
71240: LD_INT 1
71242: ARRAY
71243: PPUSH
71244: LD_EXP 80
71248: PUSH
71249: LD_VAR 0 2
71253: ARRAY
71254: PUSH
71255: LD_INT 1
71257: ARRAY
71258: PUSH
71259: LD_INT 2
71261: ARRAY
71262: PPUSH
71263: LD_EXP 70
71267: PUSH
71268: LD_VAR 0 2
71272: ARRAY
71273: PPUSH
71274: CALL_OW 440
71278: IFFALSE 71321
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
71280: LD_ADDR_EXP 80
71284: PUSH
71285: LD_EXP 80
71289: PPUSH
71290: LD_VAR 0 2
71294: PPUSH
71295: LD_EXP 80
71299: PUSH
71300: LD_VAR 0 2
71304: ARRAY
71305: PPUSH
71306: LD_INT 1
71308: PPUSH
71309: CALL_OW 3
71313: PPUSH
71314: CALL_OW 1
71318: ST_TO_ADDR
71319: GO 71568
// begin if not mc_deposits_finder [ i ] then
71321: LD_EXP 81
71325: PUSH
71326: LD_VAR 0 2
71330: ARRAY
71331: NOT
71332: IFFALSE 71384
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
71334: LD_ADDR_EXP 81
71338: PUSH
71339: LD_EXP 81
71343: PPUSH
71344: LD_VAR 0 2
71348: PPUSH
71349: LD_VAR 0 3
71353: PUSH
71354: LD_INT 1
71356: ARRAY
71357: PUSH
71358: EMPTY
71359: LIST
71360: PPUSH
71361: CALL_OW 1
71365: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
71366: LD_VAR 0 3
71370: PUSH
71371: LD_INT 1
71373: ARRAY
71374: PPUSH
71375: LD_INT 125
71377: PPUSH
71378: CALL_OW 109
// end else
71382: GO 71568
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
71384: LD_EXP 81
71388: PUSH
71389: LD_VAR 0 2
71393: ARRAY
71394: PUSH
71395: LD_INT 1
71397: ARRAY
71398: PPUSH
71399: CALL_OW 310
71403: IFFALSE 71426
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
71405: LD_EXP 81
71409: PUSH
71410: LD_VAR 0 2
71414: ARRAY
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PPUSH
71420: CALL_OW 122
71424: GO 71568
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
71426: LD_EXP 81
71430: PUSH
71431: LD_VAR 0 2
71435: ARRAY
71436: PUSH
71437: LD_INT 1
71439: ARRAY
71440: PPUSH
71441: CALL_OW 314
71445: NOT
71446: PUSH
71447: LD_EXP 81
71451: PUSH
71452: LD_VAR 0 2
71456: ARRAY
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PPUSH
71462: LD_EXP 80
71466: PUSH
71467: LD_VAR 0 2
71471: ARRAY
71472: PUSH
71473: LD_INT 1
71475: ARRAY
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PPUSH
71481: LD_EXP 80
71485: PUSH
71486: LD_VAR 0 2
71490: ARRAY
71491: PUSH
71492: LD_INT 1
71494: ARRAY
71495: PUSH
71496: LD_INT 2
71498: ARRAY
71499: PPUSH
71500: CALL_OW 297
71504: PUSH
71505: LD_INT 6
71507: GREATER
71508: AND
71509: IFFALSE 71568
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
71511: LD_EXP 81
71515: PUSH
71516: LD_VAR 0 2
71520: ARRAY
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PPUSH
71526: LD_EXP 80
71530: PUSH
71531: LD_VAR 0 2
71535: ARRAY
71536: PUSH
71537: LD_INT 1
71539: ARRAY
71540: PUSH
71541: LD_INT 1
71543: ARRAY
71544: PPUSH
71545: LD_EXP 80
71549: PUSH
71550: LD_VAR 0 2
71554: ARRAY
71555: PUSH
71556: LD_INT 1
71558: ARRAY
71559: PUSH
71560: LD_INT 2
71562: ARRAY
71563: PPUSH
71564: CALL_OW 111
// end ; end ; end ;
71568: GO 71027
71570: POP
71571: POP
// end ;
71572: LD_VAR 0 1
71576: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
71577: LD_INT 0
71579: PPUSH
71580: PPUSH
71581: PPUSH
71582: PPUSH
71583: PPUSH
71584: PPUSH
71585: PPUSH
71586: PPUSH
71587: PPUSH
// if not mc_bases then
71588: LD_EXP 44
71592: NOT
71593: IFFALSE 71597
// exit ;
71595: GO 72095
// for i = 1 to mc_bases do
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: DOUBLE
71603: LD_INT 1
71605: DEC
71606: ST_TO_ADDR
71607: LD_EXP 44
71611: PUSH
71612: FOR_TO
71613: IFFALSE 72093
// begin if not mc_bases [ i ] then
71615: LD_EXP 44
71619: PUSH
71620: LD_VAR 0 2
71624: ARRAY
71625: NOT
71626: IFFALSE 71630
// continue ;
71628: GO 71612
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71630: LD_ADDR_VAR 0 7
71634: PUSH
71635: LD_EXP 44
71639: PUSH
71640: LD_VAR 0 2
71644: ARRAY
71645: PUSH
71646: LD_INT 1
71648: ARRAY
71649: PPUSH
71650: CALL_OW 248
71654: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
71655: LD_VAR 0 7
71659: PUSH
71660: LD_INT 1
71662: NONEQUAL
71663: PUSH
71664: LD_EXP 63
71668: PUSH
71669: LD_VAR 0 2
71673: ARRAY
71674: PUSH
71675: LD_EXP 66
71679: PUSH
71680: LD_VAR 0 2
71684: ARRAY
71685: UNION
71686: PPUSH
71687: LD_INT 33
71689: PUSH
71690: LD_INT 2
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PPUSH
71697: CALL_OW 72
71701: NOT
71702: OR
71703: IFFALSE 71707
// continue ;
71705: GO 71612
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71707: LD_ADDR_VAR 0 9
71711: PUSH
71712: LD_EXP 44
71716: PUSH
71717: LD_VAR 0 2
71721: ARRAY
71722: PPUSH
71723: LD_INT 30
71725: PUSH
71726: LD_INT 36
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PPUSH
71733: CALL_OW 72
71737: ST_TO_ADDR
// if not cts then
71738: LD_VAR 0 9
71742: NOT
71743: IFFALSE 71747
// continue ;
71745: GO 71612
// if mc_remote_driver [ i ] then
71747: LD_EXP 83
71751: PUSH
71752: LD_VAR 0 2
71756: ARRAY
71757: IFFALSE 71906
// for j in mc_remote_driver [ i ] do
71759: LD_ADDR_VAR 0 3
71763: PUSH
71764: LD_EXP 83
71768: PUSH
71769: LD_VAR 0 2
71773: ARRAY
71774: PUSH
71775: FOR_IN
71776: IFFALSE 71904
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
71778: LD_VAR 0 3
71782: PPUSH
71783: CALL_OW 310
71787: NOT
71788: PUSH
71789: LD_VAR 0 3
71793: PPUSH
71794: CALL_OW 310
71798: PPUSH
71799: CALL_OW 266
71803: PUSH
71804: LD_INT 36
71806: NONEQUAL
71807: OR
71808: IFFALSE 71902
// begin if IsInUnit ( j ) then
71810: LD_VAR 0 3
71814: PPUSH
71815: CALL_OW 310
71819: IFFALSE 71830
// ComExitBuilding ( j ) ;
71821: LD_VAR 0 3
71825: PPUSH
71826: CALL_OW 122
// ct := 0 ;
71830: LD_ADDR_VAR 0 8
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// for k in cts do
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_VAR 0 9
71847: PUSH
71848: FOR_IN
71849: IFFALSE 71880
// if UnitsInside ( k ) < 3 then
71851: LD_VAR 0 4
71855: PPUSH
71856: CALL_OW 313
71860: PUSH
71861: LD_INT 3
71863: LESS
71864: IFFALSE 71878
// begin ct := k ;
71866: LD_ADDR_VAR 0 8
71870: PUSH
71871: LD_VAR 0 4
71875: ST_TO_ADDR
// break ;
71876: GO 71880
// end ;
71878: GO 71848
71880: POP
71881: POP
// if ct then
71882: LD_VAR 0 8
71886: IFFALSE 71902
// AddComEnterUnit ( j , ct ) ;
71888: LD_VAR 0 3
71892: PPUSH
71893: LD_VAR 0 8
71897: PPUSH
71898: CALL_OW 180
// end ;
71902: GO 71775
71904: POP
71905: POP
// places := 0 ;
71906: LD_ADDR_VAR 0 5
71910: PUSH
71911: LD_INT 0
71913: ST_TO_ADDR
// for j = 1 to cts do
71914: LD_ADDR_VAR 0 3
71918: PUSH
71919: DOUBLE
71920: LD_INT 1
71922: DEC
71923: ST_TO_ADDR
71924: LD_VAR 0 9
71928: PUSH
71929: FOR_TO
71930: IFFALSE 71948
// places := places + 3 ;
71932: LD_ADDR_VAR 0 5
71936: PUSH
71937: LD_VAR 0 5
71941: PUSH
71942: LD_INT 3
71944: PLUS
71945: ST_TO_ADDR
71946: GO 71929
71948: POP
71949: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
71950: LD_ADDR_VAR 0 6
71954: PUSH
71955: LD_EXP 44
71959: PUSH
71960: LD_VAR 0 2
71964: ARRAY
71965: PPUSH
71966: LD_INT 25
71968: PUSH
71969: LD_INT 3
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PPUSH
71976: CALL_OW 72
71980: PUSH
71981: LD_EXP 83
71985: PUSH
71986: LD_VAR 0 2
71990: ARRAY
71991: DIFF
71992: ST_TO_ADDR
// if not tmp then
71993: LD_VAR 0 6
71997: NOT
71998: IFFALSE 72002
// continue ;
72000: GO 71612
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
72002: LD_ADDR_VAR 0 5
72006: PUSH
72007: LD_VAR 0 5
72011: PUSH
72012: LD_EXP 83
72016: PUSH
72017: LD_VAR 0 2
72021: ARRAY
72022: PUSH
72023: LD_INT 1
72025: PLUS
72026: MINUS
72027: ST_TO_ADDR
// if places then
72028: LD_VAR 0 5
72032: IFFALSE 72091
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
72034: LD_ADDR_EXP 83
72038: PUSH
72039: LD_EXP 83
72043: PPUSH
72044: LD_VAR 0 2
72048: PPUSH
72049: LD_EXP 83
72053: PUSH
72054: LD_VAR 0 2
72058: ARRAY
72059: PUSH
72060: LD_VAR 0 6
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: UNION
72069: PPUSH
72070: CALL_OW 1
72074: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
72075: LD_VAR 0 6
72079: PUSH
72080: LD_INT 1
72082: ARRAY
72083: PPUSH
72084: LD_INT 126
72086: PPUSH
72087: CALL_OW 109
// end ; end ;
72091: GO 71612
72093: POP
72094: POP
// end ;
72095: LD_VAR 0 1
72099: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72100: LD_INT 0
72102: PPUSH
72103: PPUSH
72104: PPUSH
72105: PPUSH
72106: PPUSH
72107: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72108: LD_VAR 0 1
72112: NOT
72113: PUSH
72114: LD_VAR 0 2
72118: NOT
72119: OR
72120: PUSH
72121: LD_VAR 0 3
72125: NOT
72126: OR
72127: PUSH
72128: LD_VAR 0 4
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: LD_INT 2
72138: PUSH
72139: LD_INT 3
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: LD_INT 5
72147: PUSH
72148: LD_INT 8
72150: PUSH
72151: LD_INT 9
72153: PUSH
72154: LD_INT 15
72156: PUSH
72157: LD_INT 16
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: IN
72171: NOT
72172: OR
72173: IFFALSE 72177
// exit ;
72175: GO 73077
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72177: LD_ADDR_VAR 0 2
72181: PUSH
72182: LD_VAR 0 2
72186: PPUSH
72187: LD_INT 21
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 24
72199: PUSH
72200: LD_INT 250
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PPUSH
72211: CALL_OW 72
72215: ST_TO_ADDR
// case class of 1 , 15 :
72216: LD_VAR 0 4
72220: PUSH
72221: LD_INT 1
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72235
72227: LD_INT 15
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72235
72233: GO 72320
72235: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72236: LD_ADDR_VAR 0 8
72240: PUSH
72241: LD_VAR 0 2
72245: PPUSH
72246: LD_INT 2
72248: PUSH
72249: LD_INT 30
72251: PUSH
72252: LD_INT 32
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 30
72261: PUSH
72262: LD_INT 31
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: LIST
72273: PPUSH
72274: CALL_OW 72
72278: PUSH
72279: LD_VAR 0 2
72283: PPUSH
72284: LD_INT 2
72286: PUSH
72287: LD_INT 30
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 30
72299: PUSH
72300: LD_INT 5
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: PPUSH
72312: CALL_OW 72
72316: ADD
72317: ST_TO_ADDR
72318: GO 72566
72320: LD_INT 2
72322: DOUBLE
72323: EQUAL
72324: IFTRUE 72334
72326: LD_INT 16
72328: DOUBLE
72329: EQUAL
72330: IFTRUE 72334
72332: GO 72380
72334: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72335: LD_ADDR_VAR 0 8
72339: PUSH
72340: LD_VAR 0 2
72344: PPUSH
72345: LD_INT 2
72347: PUSH
72348: LD_INT 30
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 30
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: PPUSH
72373: CALL_OW 72
72377: ST_TO_ADDR
72378: GO 72566
72380: LD_INT 3
72382: DOUBLE
72383: EQUAL
72384: IFTRUE 72388
72386: GO 72434
72388: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72389: LD_ADDR_VAR 0 8
72393: PUSH
72394: LD_VAR 0 2
72398: PPUSH
72399: LD_INT 2
72401: PUSH
72402: LD_INT 30
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 30
72414: PUSH
72415: LD_INT 3
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: PPUSH
72427: CALL_OW 72
72431: ST_TO_ADDR
72432: GO 72566
72434: LD_INT 4
72436: DOUBLE
72437: EQUAL
72438: IFTRUE 72442
72440: GO 72499
72442: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72443: LD_ADDR_VAR 0 8
72447: PUSH
72448: LD_VAR 0 2
72452: PPUSH
72453: LD_INT 2
72455: PUSH
72456: LD_INT 30
72458: PUSH
72459: LD_INT 6
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 30
72468: PUSH
72469: LD_INT 7
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 30
72478: PUSH
72479: LD_INT 8
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: PPUSH
72492: CALL_OW 72
72496: ST_TO_ADDR
72497: GO 72566
72499: LD_INT 5
72501: DOUBLE
72502: EQUAL
72503: IFTRUE 72519
72505: LD_INT 8
72507: DOUBLE
72508: EQUAL
72509: IFTRUE 72519
72511: LD_INT 9
72513: DOUBLE
72514: EQUAL
72515: IFTRUE 72519
72517: GO 72565
72519: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72520: LD_ADDR_VAR 0 8
72524: PUSH
72525: LD_VAR 0 2
72529: PPUSH
72530: LD_INT 2
72532: PUSH
72533: LD_INT 30
72535: PUSH
72536: LD_INT 4
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 30
72545: PUSH
72546: LD_INT 5
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: LIST
72557: PPUSH
72558: CALL_OW 72
72562: ST_TO_ADDR
72563: GO 72566
72565: POP
// if not tmp then
72566: LD_VAR 0 8
72570: NOT
72571: IFFALSE 72575
// exit ;
72573: GO 73077
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72575: LD_VAR 0 4
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: LD_INT 15
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: IN
72590: PUSH
72591: LD_EXP 53
72595: PUSH
72596: LD_VAR 0 1
72600: ARRAY
72601: AND
72602: IFFALSE 72758
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72604: LD_ADDR_VAR 0 9
72608: PUSH
72609: LD_EXP 53
72613: PUSH
72614: LD_VAR 0 1
72618: ARRAY
72619: PUSH
72620: LD_INT 1
72622: ARRAY
72623: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72624: LD_VAR 0 9
72628: PUSH
72629: LD_EXP 54
72633: PUSH
72634: LD_VAR 0 1
72638: ARRAY
72639: IN
72640: NOT
72641: IFFALSE 72756
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72643: LD_ADDR_EXP 54
72647: PUSH
72648: LD_EXP 54
72652: PPUSH
72653: LD_VAR 0 1
72657: PUSH
72658: LD_EXP 54
72662: PUSH
72663: LD_VAR 0 1
72667: ARRAY
72668: PUSH
72669: LD_INT 1
72671: PLUS
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PPUSH
72677: LD_VAR 0 9
72681: PPUSH
72682: CALL 22879 0 3
72686: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72687: LD_ADDR_EXP 53
72691: PUSH
72692: LD_EXP 53
72696: PPUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: LD_EXP 53
72706: PUSH
72707: LD_VAR 0 1
72711: ARRAY
72712: PUSH
72713: LD_VAR 0 9
72717: DIFF
72718: PPUSH
72719: CALL_OW 1
72723: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72724: LD_VAR 0 3
72728: PPUSH
72729: LD_EXP 54
72733: PUSH
72734: LD_VAR 0 1
72738: ARRAY
72739: PUSH
72740: LD_EXP 54
72744: PUSH
72745: LD_VAR 0 1
72749: ARRAY
72750: ARRAY
72751: PPUSH
72752: CALL_OW 120
// end ; exit ;
72756: GO 73077
// end ; if tmp > 1 then
72758: LD_VAR 0 8
72762: PUSH
72763: LD_INT 1
72765: GREATER
72766: IFFALSE 72870
// for i = 2 to tmp do
72768: LD_ADDR_VAR 0 6
72772: PUSH
72773: DOUBLE
72774: LD_INT 2
72776: DEC
72777: ST_TO_ADDR
72778: LD_VAR 0 8
72782: PUSH
72783: FOR_TO
72784: IFFALSE 72868
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72786: LD_VAR 0 8
72790: PUSH
72791: LD_VAR 0 6
72795: ARRAY
72796: PPUSH
72797: CALL_OW 461
72801: PUSH
72802: LD_INT 6
72804: EQUAL
72805: IFFALSE 72866
// begin x := tmp [ i ] ;
72807: LD_ADDR_VAR 0 9
72811: PUSH
72812: LD_VAR 0 8
72816: PUSH
72817: LD_VAR 0 6
72821: ARRAY
72822: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72823: LD_ADDR_VAR 0 8
72827: PUSH
72828: LD_VAR 0 8
72832: PPUSH
72833: LD_VAR 0 6
72837: PPUSH
72838: CALL_OW 3
72842: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72843: LD_ADDR_VAR 0 8
72847: PUSH
72848: LD_VAR 0 8
72852: PPUSH
72853: LD_INT 1
72855: PPUSH
72856: LD_VAR 0 9
72860: PPUSH
72861: CALL_OW 2
72865: ST_TO_ADDR
// end ;
72866: GO 72783
72868: POP
72869: POP
// for i in tmp do
72870: LD_ADDR_VAR 0 6
72874: PUSH
72875: LD_VAR 0 8
72879: PUSH
72880: FOR_IN
72881: IFFALSE 72950
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72883: LD_VAR 0 6
72887: PPUSH
72888: CALL_OW 313
72892: PUSH
72893: LD_INT 6
72895: LESS
72896: PUSH
72897: LD_VAR 0 6
72901: PPUSH
72902: CALL_OW 266
72906: PUSH
72907: LD_INT 31
72909: PUSH
72910: LD_INT 32
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: IN
72917: NOT
72918: AND
72919: PUSH
72920: LD_VAR 0 6
72924: PPUSH
72925: CALL_OW 313
72929: PUSH
72930: LD_INT 0
72932: EQUAL
72933: OR
72934: IFFALSE 72948
// begin j := i ;
72936: LD_ADDR_VAR 0 7
72940: PUSH
72941: LD_VAR 0 6
72945: ST_TO_ADDR
// break ;
72946: GO 72950
// end ; end ;
72948: GO 72880
72950: POP
72951: POP
// if j then
72952: LD_VAR 0 7
72956: IFFALSE 72974
// ComEnterUnit ( unit , j ) else
72958: LD_VAR 0 3
72962: PPUSH
72963: LD_VAR 0 7
72967: PPUSH
72968: CALL_OW 120
72972: GO 73077
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72974: LD_ADDR_VAR 0 10
72978: PUSH
72979: LD_VAR 0 2
72983: PPUSH
72984: LD_INT 2
72986: PUSH
72987: LD_INT 30
72989: PUSH
72990: LD_INT 0
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 30
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: LIST
73011: PPUSH
73012: CALL_OW 72
73016: ST_TO_ADDR
// if depot then
73017: LD_VAR 0 10
73021: IFFALSE 73077
// begin depot := NearestUnitToUnit ( depot , unit ) ;
73023: LD_ADDR_VAR 0 10
73027: PUSH
73028: LD_VAR 0 10
73032: PPUSH
73033: LD_VAR 0 3
73037: PPUSH
73038: CALL_OW 74
73042: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
73043: LD_VAR 0 3
73047: PPUSH
73048: LD_VAR 0 10
73052: PPUSH
73053: CALL_OW 296
73057: PUSH
73058: LD_INT 10
73060: GREATER
73061: IFFALSE 73077
// ComStandNearbyBuilding ( unit , depot ) ;
73063: LD_VAR 0 3
73067: PPUSH
73068: LD_VAR 0 10
73072: PPUSH
73073: CALL 17121 0 2
// end ; end ; end ;
73077: LD_VAR 0 5
73081: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
73082: LD_INT 0
73084: PPUSH
73085: PPUSH
73086: PPUSH
73087: PPUSH
// if not mc_bases then
73088: LD_EXP 44
73092: NOT
73093: IFFALSE 73097
// exit ;
73095: GO 73336
// for i = 1 to mc_bases do
73097: LD_ADDR_VAR 0 2
73101: PUSH
73102: DOUBLE
73103: LD_INT 1
73105: DEC
73106: ST_TO_ADDR
73107: LD_EXP 44
73111: PUSH
73112: FOR_TO
73113: IFFALSE 73334
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73115: LD_ADDR_VAR 0 4
73119: PUSH
73120: LD_EXP 44
73124: PUSH
73125: LD_VAR 0 2
73129: ARRAY
73130: PPUSH
73131: LD_INT 21
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PPUSH
73141: CALL_OW 72
73145: PUSH
73146: LD_EXP 73
73150: PUSH
73151: LD_VAR 0 2
73155: ARRAY
73156: UNION
73157: ST_TO_ADDR
// if not tmp then
73158: LD_VAR 0 4
73162: NOT
73163: IFFALSE 73167
// continue ;
73165: GO 73112
// for j in tmp do
73167: LD_ADDR_VAR 0 3
73171: PUSH
73172: LD_VAR 0 4
73176: PUSH
73177: FOR_IN
73178: IFFALSE 73330
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73180: LD_VAR 0 3
73184: PPUSH
73185: CALL_OW 110
73189: NOT
73190: PUSH
73191: LD_VAR 0 3
73195: PPUSH
73196: CALL_OW 314
73200: NOT
73201: AND
73202: PUSH
73203: LD_VAR 0 3
73207: PPUSH
73208: CALL_OW 311
73212: NOT
73213: AND
73214: PUSH
73215: LD_VAR 0 3
73219: PPUSH
73220: CALL_OW 310
73224: NOT
73225: AND
73226: PUSH
73227: LD_VAR 0 3
73231: PUSH
73232: LD_EXP 47
73236: PUSH
73237: LD_VAR 0 2
73241: ARRAY
73242: PUSH
73243: LD_INT 1
73245: ARRAY
73246: IN
73247: NOT
73248: AND
73249: PUSH
73250: LD_VAR 0 3
73254: PUSH
73255: LD_EXP 47
73259: PUSH
73260: LD_VAR 0 2
73264: ARRAY
73265: PUSH
73266: LD_INT 2
73268: ARRAY
73269: IN
73270: NOT
73271: AND
73272: PUSH
73273: LD_VAR 0 3
73277: PUSH
73278: LD_EXP 56
73282: PUSH
73283: LD_VAR 0 2
73287: ARRAY
73288: IN
73289: NOT
73290: AND
73291: IFFALSE 73328
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73293: LD_VAR 0 2
73297: PPUSH
73298: LD_EXP 44
73302: PUSH
73303: LD_VAR 0 2
73307: ARRAY
73308: PPUSH
73309: LD_VAR 0 3
73313: PPUSH
73314: LD_VAR 0 3
73318: PPUSH
73319: CALL_OW 257
73323: PPUSH
73324: CALL 72100 0 4
// end ;
73328: GO 73177
73330: POP
73331: POP
// end ;
73332: GO 73112
73334: POP
73335: POP
// end ;
73336: LD_VAR 0 1
73340: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73341: LD_INT 0
73343: PPUSH
73344: PPUSH
73345: PPUSH
73346: PPUSH
73347: PPUSH
73348: PPUSH
// if not mc_bases [ base ] then
73349: LD_EXP 44
73353: PUSH
73354: LD_VAR 0 1
73358: ARRAY
73359: NOT
73360: IFFALSE 73364
// exit ;
73362: GO 73546
// tmp := [ ] ;
73364: LD_ADDR_VAR 0 6
73368: PUSH
73369: EMPTY
73370: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73371: LD_ADDR_VAR 0 7
73375: PUSH
73376: LD_VAR 0 3
73380: PPUSH
73381: LD_INT 0
73383: PPUSH
73384: CALL_OW 517
73388: ST_TO_ADDR
// if not list then
73389: LD_VAR 0 7
73393: NOT
73394: IFFALSE 73398
// exit ;
73396: GO 73546
// for i = 1 to amount do
73398: LD_ADDR_VAR 0 5
73402: PUSH
73403: DOUBLE
73404: LD_INT 1
73406: DEC
73407: ST_TO_ADDR
73408: LD_VAR 0 2
73412: PUSH
73413: FOR_TO
73414: IFFALSE 73494
// begin x := rand ( 1 , list [ 1 ] ) ;
73416: LD_ADDR_VAR 0 8
73420: PUSH
73421: LD_INT 1
73423: PPUSH
73424: LD_VAR 0 7
73428: PUSH
73429: LD_INT 1
73431: ARRAY
73432: PPUSH
73433: CALL_OW 12
73437: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73438: LD_ADDR_VAR 0 6
73442: PUSH
73443: LD_VAR 0 6
73447: PPUSH
73448: LD_VAR 0 5
73452: PPUSH
73453: LD_VAR 0 7
73457: PUSH
73458: LD_INT 1
73460: ARRAY
73461: PUSH
73462: LD_VAR 0 8
73466: ARRAY
73467: PUSH
73468: LD_VAR 0 7
73472: PUSH
73473: LD_INT 2
73475: ARRAY
73476: PUSH
73477: LD_VAR 0 8
73481: ARRAY
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PPUSH
73487: CALL_OW 1
73491: ST_TO_ADDR
// end ;
73492: GO 73413
73494: POP
73495: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73496: LD_ADDR_EXP 57
73500: PUSH
73501: LD_EXP 57
73505: PPUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: LD_VAR 0 6
73515: PPUSH
73516: CALL_OW 1
73520: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73521: LD_ADDR_EXP 59
73525: PUSH
73526: LD_EXP 59
73530: PPUSH
73531: LD_VAR 0 1
73535: PPUSH
73536: LD_VAR 0 3
73540: PPUSH
73541: CALL_OW 1
73545: ST_TO_ADDR
// end ;
73546: LD_VAR 0 4
73550: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73551: LD_INT 0
73553: PPUSH
// if not mc_bases [ base ] then
73554: LD_EXP 44
73558: PUSH
73559: LD_VAR 0 1
73563: ARRAY
73564: NOT
73565: IFFALSE 73569
// exit ;
73567: GO 73594
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73569: LD_ADDR_EXP 49
73573: PUSH
73574: LD_EXP 49
73578: PPUSH
73579: LD_VAR 0 1
73583: PPUSH
73584: LD_VAR 0 2
73588: PPUSH
73589: CALL_OW 1
73593: ST_TO_ADDR
// end ;
73594: LD_VAR 0 3
73598: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73599: LD_INT 0
73601: PPUSH
// if not mc_bases [ base ] then
73602: LD_EXP 44
73606: PUSH
73607: LD_VAR 0 1
73611: ARRAY
73612: NOT
73613: IFFALSE 73617
// exit ;
73615: GO 73673
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
73617: LD_ADDR_EXP 49
73621: PUSH
73622: LD_EXP 49
73626: PPUSH
73627: LD_VAR 0 1
73631: PPUSH
73632: LD_EXP 49
73636: PUSH
73637: LD_VAR 0 1
73641: ARRAY
73642: PPUSH
73643: LD_EXP 49
73647: PUSH
73648: LD_VAR 0 1
73652: ARRAY
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: PPUSH
73658: LD_VAR 0 2
73662: PPUSH
73663: CALL_OW 2
73667: PPUSH
73668: CALL_OW 1
73672: ST_TO_ADDR
// end ;
73673: LD_VAR 0 3
73677: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73678: LD_INT 0
73680: PPUSH
// if not mc_bases [ base ] then
73681: LD_EXP 44
73685: PUSH
73686: LD_VAR 0 1
73690: ARRAY
73691: NOT
73692: IFFALSE 73696
// exit ;
73694: GO 73721
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73696: LD_ADDR_EXP 65
73700: PUSH
73701: LD_EXP 65
73705: PPUSH
73706: LD_VAR 0 1
73710: PPUSH
73711: LD_VAR 0 2
73715: PPUSH
73716: CALL_OW 1
73720: ST_TO_ADDR
// end ;
73721: LD_VAR 0 3
73725: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
73726: LD_INT 0
73728: PPUSH
// if not mc_bases [ base ] then
73729: LD_EXP 44
73733: PUSH
73734: LD_VAR 0 1
73738: ARRAY
73739: NOT
73740: IFFALSE 73744
// exit ;
73742: GO 73784
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
73744: LD_ADDR_EXP 65
73748: PUSH
73749: LD_EXP 65
73753: PPUSH
73754: LD_VAR 0 1
73758: PPUSH
73759: LD_EXP 65
73763: PUSH
73764: LD_VAR 0 1
73768: ARRAY
73769: PUSH
73770: LD_VAR 0 2
73774: PUSH
73775: EMPTY
73776: LIST
73777: ADD
73778: PPUSH
73779: CALL_OW 1
73783: ST_TO_ADDR
// end ;
73784: LD_VAR 0 3
73788: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73789: LD_INT 0
73791: PPUSH
// if not mc_bases [ base ] then
73792: LD_EXP 44
73796: PUSH
73797: LD_VAR 0 1
73801: ARRAY
73802: NOT
73803: IFFALSE 73807
// exit ;
73805: GO 73919
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73807: LD_ADDR_EXP 66
73811: PUSH
73812: LD_EXP 66
73816: PPUSH
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_VAR 0 2
73826: PPUSH
73827: CALL_OW 1
73831: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73832: LD_ADDR_EXP 55
73836: PUSH
73837: LD_EXP 55
73841: PPUSH
73842: LD_VAR 0 1
73846: PPUSH
73847: LD_VAR 0 2
73851: PUSH
73852: LD_INT 0
73854: PLUS
73855: PPUSH
73856: CALL_OW 1
73860: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
73861: LD_ADDR_EXP 63
73865: PUSH
73866: LD_EXP 63
73870: PPUSH
73871: LD_VAR 0 1
73875: PPUSH
73876: LD_EXP 63
73880: PUSH
73881: LD_VAR 0 1
73885: ARRAY
73886: PUSH
73887: LD_EXP 66
73891: PUSH
73892: LD_VAR 0 1
73896: ARRAY
73897: PPUSH
73898: LD_INT 21
73900: PUSH
73901: LD_INT 2
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PPUSH
73908: CALL_OW 72
73912: UNION
73913: PPUSH
73914: CALL_OW 1
73918: ST_TO_ADDR
// end ;
73919: LD_VAR 0 3
73923: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73924: LD_INT 0
73926: PPUSH
// if not mc_bases [ base ] then
73927: LD_EXP 44
73931: PUSH
73932: LD_VAR 0 1
73936: ARRAY
73937: NOT
73938: IFFALSE 73942
// exit ;
73940: GO 73967
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73942: LD_ADDR_EXP 55
73946: PUSH
73947: LD_EXP 55
73951: PPUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL_OW 1
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 3
73971: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73972: LD_INT 0
73974: PPUSH
73975: PPUSH
73976: PPUSH
73977: PPUSH
// if not mc_bases [ base ] then
73978: LD_EXP 44
73982: PUSH
73983: LD_VAR 0 1
73987: ARRAY
73988: NOT
73989: IFFALSE 73993
// exit ;
73991: GO 74058
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73993: LD_ADDR_EXP 64
73997: PUSH
73998: LD_EXP 64
74002: PPUSH
74003: LD_VAR 0 1
74007: PUSH
74008: LD_EXP 64
74012: PUSH
74013: LD_VAR 0 1
74017: ARRAY
74018: PUSH
74019: LD_INT 1
74021: PLUS
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PPUSH
74027: LD_VAR 0 1
74031: PUSH
74032: LD_VAR 0 2
74036: PUSH
74037: LD_VAR 0 3
74041: PUSH
74042: LD_VAR 0 4
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: PPUSH
74053: CALL 22879 0 3
74057: ST_TO_ADDR
// end ;
74058: LD_VAR 0 5
74062: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
74063: LD_INT 0
74065: PPUSH
// if not mc_bases [ base ] then
74066: LD_EXP 44
74070: PUSH
74071: LD_VAR 0 1
74075: ARRAY
74076: NOT
74077: IFFALSE 74081
// exit ;
74079: GO 74106
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
74081: LD_ADDR_EXP 80
74085: PUSH
74086: LD_EXP 80
74090: PPUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_VAR 0 2
74100: PPUSH
74101: CALL_OW 1
74105: ST_TO_ADDR
// end ;
74106: LD_VAR 0 3
74110: RET
// export function MC_GetMinesField ( base ) ; begin
74111: LD_INT 0
74113: PPUSH
// result := mc_mines [ base ] ;
74114: LD_ADDR_VAR 0 2
74118: PUSH
74119: LD_EXP 57
74123: PUSH
74124: LD_VAR 0 1
74128: ARRAY
74129: ST_TO_ADDR
// end ;
74130: LD_VAR 0 2
74134: RET
// export function MC_GetProduceList ( base ) ; begin
74135: LD_INT 0
74137: PPUSH
// result := mc_produce [ base ] ;
74138: LD_ADDR_VAR 0 2
74142: PUSH
74143: LD_EXP 65
74147: PUSH
74148: LD_VAR 0 1
74152: ARRAY
74153: ST_TO_ADDR
// end ;
74154: LD_VAR 0 2
74158: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
74159: LD_INT 0
74161: PPUSH
74162: PPUSH
// if not mc_bases then
74163: LD_EXP 44
74167: NOT
74168: IFFALSE 74172
// exit ;
74170: GO 74237
// if mc_bases [ base ] then
74172: LD_EXP 44
74176: PUSH
74177: LD_VAR 0 1
74181: ARRAY
74182: IFFALSE 74237
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74184: LD_ADDR_VAR 0 3
74188: PUSH
74189: LD_EXP 44
74193: PUSH
74194: LD_VAR 0 1
74198: ARRAY
74199: PPUSH
74200: LD_INT 30
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PPUSH
74212: CALL_OW 72
74216: ST_TO_ADDR
// if result then
74217: LD_VAR 0 3
74221: IFFALSE 74237
// result := result [ 1 ] ;
74223: LD_ADDR_VAR 0 3
74227: PUSH
74228: LD_VAR 0 3
74232: PUSH
74233: LD_INT 1
74235: ARRAY
74236: ST_TO_ADDR
// end ; end ;
74237: LD_VAR 0 3
74241: RET
// export function MC_SetTame ( base , area ) ; begin
74242: LD_INT 0
74244: PPUSH
// if not mc_bases or not base then
74245: LD_EXP 44
74249: NOT
74250: PUSH
74251: LD_VAR 0 1
74255: NOT
74256: OR
74257: IFFALSE 74261
// exit ;
74259: GO 74286
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74261: LD_ADDR_EXP 72
74265: PUSH
74266: LD_EXP 72
74270: PPUSH
74271: LD_VAR 0 1
74275: PPUSH
74276: LD_VAR 0 2
74280: PPUSH
74281: CALL_OW 1
74285: ST_TO_ADDR
// end ;
74286: LD_VAR 0 3
74290: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74291: LD_INT 0
74293: PPUSH
74294: PPUSH
// if not mc_bases or not base then
74295: LD_EXP 44
74299: NOT
74300: PUSH
74301: LD_VAR 0 1
74305: NOT
74306: OR
74307: IFFALSE 74311
// exit ;
74309: GO 74413
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74311: LD_ADDR_VAR 0 4
74315: PUSH
74316: LD_EXP 44
74320: PUSH
74321: LD_VAR 0 1
74325: ARRAY
74326: PPUSH
74327: LD_INT 30
74329: PUSH
74330: LD_VAR 0 2
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PPUSH
74339: CALL_OW 72
74343: ST_TO_ADDR
// if not tmp then
74344: LD_VAR 0 4
74348: NOT
74349: IFFALSE 74353
// exit ;
74351: GO 74413
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74353: LD_ADDR_EXP 76
74357: PUSH
74358: LD_EXP 76
74362: PPUSH
74363: LD_VAR 0 1
74367: PPUSH
74368: LD_EXP 76
74372: PUSH
74373: LD_VAR 0 1
74377: ARRAY
74378: PPUSH
74379: LD_EXP 76
74383: PUSH
74384: LD_VAR 0 1
74388: ARRAY
74389: PUSH
74390: LD_INT 1
74392: PLUS
74393: PPUSH
74394: LD_VAR 0 4
74398: PUSH
74399: LD_INT 1
74401: ARRAY
74402: PPUSH
74403: CALL_OW 2
74407: PPUSH
74408: CALL_OW 1
74412: ST_TO_ADDR
// end ;
74413: LD_VAR 0 3
74417: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74418: LD_INT 0
74420: PPUSH
74421: PPUSH
// if not mc_bases or not base or not kinds then
74422: LD_EXP 44
74426: NOT
74427: PUSH
74428: LD_VAR 0 1
74432: NOT
74433: OR
74434: PUSH
74435: LD_VAR 0 2
74439: NOT
74440: OR
74441: IFFALSE 74445
// exit ;
74443: GO 74506
// for i in kinds do
74445: LD_ADDR_VAR 0 4
74449: PUSH
74450: LD_VAR 0 2
74454: PUSH
74455: FOR_IN
74456: IFFALSE 74504
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74458: LD_ADDR_EXP 78
74462: PUSH
74463: LD_EXP 78
74467: PPUSH
74468: LD_VAR 0 1
74472: PUSH
74473: LD_EXP 78
74477: PUSH
74478: LD_VAR 0 1
74482: ARRAY
74483: PUSH
74484: LD_INT 1
74486: PLUS
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PPUSH
74492: LD_VAR 0 4
74496: PPUSH
74497: CALL 22879 0 3
74501: ST_TO_ADDR
74502: GO 74455
74504: POP
74505: POP
// end ;
74506: LD_VAR 0 3
74510: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74511: LD_INT 0
74513: PPUSH
// if not mc_bases or not base or not areas then
74514: LD_EXP 44
74518: NOT
74519: PUSH
74520: LD_VAR 0 1
74524: NOT
74525: OR
74526: PUSH
74527: LD_VAR 0 2
74531: NOT
74532: OR
74533: IFFALSE 74537
// exit ;
74535: GO 74562
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74537: LD_ADDR_EXP 62
74541: PUSH
74542: LD_EXP 62
74546: PPUSH
74547: LD_VAR 0 1
74551: PPUSH
74552: LD_VAR 0 2
74556: PPUSH
74557: CALL_OW 1
74561: ST_TO_ADDR
// end ;
74562: LD_VAR 0 3
74566: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
74567: LD_INT 0
74569: PPUSH
// if not mc_bases or not base then
74570: LD_EXP 44
74574: NOT
74575: PUSH
74576: LD_VAR 0 1
74580: NOT
74581: OR
74582: IFFALSE 74586
// exit ;
74584: GO 74620
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
74586: LD_ADDR_EXP 79
74590: PUSH
74591: LD_EXP 79
74595: PPUSH
74596: LD_VAR 0 1
74600: PPUSH
74601: LD_VAR 0 2
74605: PUSH
74606: LD_VAR 0 3
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PPUSH
74615: CALL_OW 1
74619: ST_TO_ADDR
// end ;
74620: LD_VAR 0 4
74624: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74625: LD_INT 0
74627: PPUSH
74628: PPUSH
74629: PPUSH
// if not mc_bases or not base or not ext_list then
74630: LD_EXP 44
74634: NOT
74635: PUSH
74636: LD_VAR 0 1
74640: NOT
74641: OR
74642: PUSH
74643: LD_VAR 0 5
74647: NOT
74648: OR
74649: IFFALSE 74653
// exit ;
74651: GO 74826
// tmp := GetFacExtXYD ( x , y , d ) ;
74653: LD_ADDR_VAR 0 8
74657: PUSH
74658: LD_VAR 0 2
74662: PPUSH
74663: LD_VAR 0 3
74667: PPUSH
74668: LD_VAR 0 4
74672: PPUSH
74673: CALL 55577 0 3
74677: ST_TO_ADDR
// if not tmp then
74678: LD_VAR 0 8
74682: NOT
74683: IFFALSE 74687
// exit ;
74685: GO 74826
// for i in tmp do
74687: LD_ADDR_VAR 0 7
74691: PUSH
74692: LD_VAR 0 8
74696: PUSH
74697: FOR_IN
74698: IFFALSE 74824
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74700: LD_ADDR_EXP 49
74704: PUSH
74705: LD_EXP 49
74709: PPUSH
74710: LD_VAR 0 1
74714: PPUSH
74715: LD_EXP 49
74719: PUSH
74720: LD_VAR 0 1
74724: ARRAY
74725: PPUSH
74726: LD_EXP 49
74730: PUSH
74731: LD_VAR 0 1
74735: ARRAY
74736: PUSH
74737: LD_INT 1
74739: PLUS
74740: PPUSH
74741: LD_VAR 0 5
74745: PUSH
74746: LD_INT 1
74748: ARRAY
74749: PUSH
74750: LD_VAR 0 7
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PUSH
74759: LD_VAR 0 7
74763: PUSH
74764: LD_INT 2
74766: ARRAY
74767: PUSH
74768: LD_VAR 0 7
74772: PUSH
74773: LD_INT 3
74775: ARRAY
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: PPUSH
74783: CALL_OW 2
74787: PPUSH
74788: CALL_OW 1
74792: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74793: LD_ADDR_VAR 0 5
74797: PUSH
74798: LD_VAR 0 5
74802: PPUSH
74803: LD_INT 1
74805: PPUSH
74806: CALL_OW 3
74810: ST_TO_ADDR
// if not ext_list then
74811: LD_VAR 0 5
74815: NOT
74816: IFFALSE 74822
// exit ;
74818: POP
74819: POP
74820: GO 74826
// end ;
74822: GO 74697
74824: POP
74825: POP
// end ;
74826: LD_VAR 0 6
74830: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74831: LD_INT 0
74833: PPUSH
// if not mc_bases or not base or not weapon_list then
74834: LD_EXP 44
74838: NOT
74839: PUSH
74840: LD_VAR 0 1
74844: NOT
74845: OR
74846: PUSH
74847: LD_VAR 0 2
74851: NOT
74852: OR
74853: IFFALSE 74857
// exit ;
74855: GO 74882
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74857: LD_ADDR_EXP 82
74861: PUSH
74862: LD_EXP 82
74866: PPUSH
74867: LD_VAR 0 1
74871: PPUSH
74872: LD_VAR 0 2
74876: PPUSH
74877: CALL_OW 1
74881: ST_TO_ADDR
// end ;
74882: LD_VAR 0 3
74886: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74887: LD_INT 0
74889: PPUSH
// if not mc_bases or not base or not tech_list then
74890: LD_EXP 44
74894: NOT
74895: PUSH
74896: LD_VAR 0 1
74900: NOT
74901: OR
74902: PUSH
74903: LD_VAR 0 2
74907: NOT
74908: OR
74909: IFFALSE 74913
// exit ;
74911: GO 74938
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74913: LD_ADDR_EXP 71
74917: PUSH
74918: LD_EXP 71
74922: PPUSH
74923: LD_VAR 0 1
74927: PPUSH
74928: LD_VAR 0 2
74932: PPUSH
74933: CALL_OW 1
74937: ST_TO_ADDR
// end ;
74938: LD_VAR 0 3
74942: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74943: LD_INT 0
74945: PPUSH
// if not mc_bases or not parking_area or not base then
74946: LD_EXP 44
74950: NOT
74951: PUSH
74952: LD_VAR 0 2
74956: NOT
74957: OR
74958: PUSH
74959: LD_VAR 0 1
74963: NOT
74964: OR
74965: IFFALSE 74969
// exit ;
74967: GO 74994
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74969: LD_ADDR_EXP 68
74973: PUSH
74974: LD_EXP 68
74978: PPUSH
74979: LD_VAR 0 1
74983: PPUSH
74984: LD_VAR 0 2
74988: PPUSH
74989: CALL_OW 1
74993: ST_TO_ADDR
// end ;
74994: LD_VAR 0 3
74998: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74999: LD_INT 0
75001: PPUSH
// if not mc_bases or not base or not scan_area then
75002: LD_EXP 44
75006: NOT
75007: PUSH
75008: LD_VAR 0 1
75012: NOT
75013: OR
75014: PUSH
75015: LD_VAR 0 2
75019: NOT
75020: OR
75021: IFFALSE 75025
// exit ;
75023: GO 75050
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
75025: LD_ADDR_EXP 69
75029: PUSH
75030: LD_EXP 69
75034: PPUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: LD_VAR 0 2
75044: PPUSH
75045: CALL_OW 1
75049: ST_TO_ADDR
// end ; end_of_file
75050: LD_VAR 0 3
75054: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75055: LD_INT 0
75057: PPUSH
75058: PPUSH
75059: PPUSH
// if not mc_bases then
75060: LD_EXP 44
75064: NOT
75065: IFFALSE 75069
// exit ;
75067: GO 75234
// for i = 1 to mc_bases do
75069: LD_ADDR_VAR 0 4
75073: PUSH
75074: DOUBLE
75075: LD_INT 1
75077: DEC
75078: ST_TO_ADDR
75079: LD_EXP 44
75083: PUSH
75084: FOR_TO
75085: IFFALSE 75232
// begin if sci in mc_bases [ i ] then
75087: LD_VAR 0 2
75091: PUSH
75092: LD_EXP 44
75096: PUSH
75097: LD_VAR 0 4
75101: ARRAY
75102: IN
75103: IFFALSE 75230
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75105: LD_ADDR_EXP 73
75109: PUSH
75110: LD_EXP 73
75114: PPUSH
75115: LD_VAR 0 4
75119: PUSH
75120: LD_EXP 73
75124: PUSH
75125: LD_VAR 0 4
75129: ARRAY
75130: PUSH
75131: LD_INT 1
75133: PLUS
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PPUSH
75139: LD_VAR 0 1
75143: PPUSH
75144: CALL 22879 0 3
75148: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75149: LD_ADDR_VAR 0 5
75153: PUSH
75154: LD_EXP 44
75158: PUSH
75159: LD_VAR 0 4
75163: ARRAY
75164: PPUSH
75165: LD_INT 2
75167: PUSH
75168: LD_INT 30
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 30
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: PPUSH
75193: CALL_OW 72
75197: PPUSH
75198: LD_VAR 0 1
75202: PPUSH
75203: CALL_OW 74
75207: ST_TO_ADDR
// if tmp then
75208: LD_VAR 0 5
75212: IFFALSE 75228
// ComStandNearbyBuilding ( ape , tmp ) ;
75214: LD_VAR 0 1
75218: PPUSH
75219: LD_VAR 0 5
75223: PPUSH
75224: CALL 17121 0 2
// break ;
75228: GO 75232
// end ; end ;
75230: GO 75084
75232: POP
75233: POP
// end ;
75234: LD_VAR 0 3
75238: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75239: LD_INT 0
75241: PPUSH
75242: PPUSH
75243: PPUSH
// if not mc_bases then
75244: LD_EXP 44
75248: NOT
75249: IFFALSE 75253
// exit ;
75251: GO 75342
// for i = 1 to mc_bases do
75253: LD_ADDR_VAR 0 4
75257: PUSH
75258: DOUBLE
75259: LD_INT 1
75261: DEC
75262: ST_TO_ADDR
75263: LD_EXP 44
75267: PUSH
75268: FOR_TO
75269: IFFALSE 75340
// begin if building in mc_busy_turret_list [ i ] then
75271: LD_VAR 0 1
75275: PUSH
75276: LD_EXP 54
75280: PUSH
75281: LD_VAR 0 4
75285: ARRAY
75286: IN
75287: IFFALSE 75338
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75289: LD_ADDR_VAR 0 5
75293: PUSH
75294: LD_EXP 54
75298: PUSH
75299: LD_VAR 0 4
75303: ARRAY
75304: PUSH
75305: LD_VAR 0 1
75309: DIFF
75310: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75311: LD_ADDR_EXP 54
75315: PUSH
75316: LD_EXP 54
75320: PPUSH
75321: LD_VAR 0 4
75325: PPUSH
75326: LD_VAR 0 5
75330: PPUSH
75331: CALL_OW 1
75335: ST_TO_ADDR
// break ;
75336: GO 75340
// end ; end ;
75338: GO 75268
75340: POP
75341: POP
// end ;
75342: LD_VAR 0 3
75346: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75347: LD_INT 0
75349: PPUSH
75350: PPUSH
75351: PPUSH
// if not mc_bases then
75352: LD_EXP 44
75356: NOT
75357: IFFALSE 75361
// exit ;
75359: GO 75560
// for i = 1 to mc_bases do
75361: LD_ADDR_VAR 0 5
75365: PUSH
75366: DOUBLE
75367: LD_INT 1
75369: DEC
75370: ST_TO_ADDR
75371: LD_EXP 44
75375: PUSH
75376: FOR_TO
75377: IFFALSE 75558
// if building in mc_bases [ i ] then
75379: LD_VAR 0 1
75383: PUSH
75384: LD_EXP 44
75388: PUSH
75389: LD_VAR 0 5
75393: ARRAY
75394: IN
75395: IFFALSE 75556
// begin tmp := mc_bases [ i ] diff building ;
75397: LD_ADDR_VAR 0 6
75401: PUSH
75402: LD_EXP 44
75406: PUSH
75407: LD_VAR 0 5
75411: ARRAY
75412: PUSH
75413: LD_VAR 0 1
75417: DIFF
75418: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75419: LD_ADDR_EXP 44
75423: PUSH
75424: LD_EXP 44
75428: PPUSH
75429: LD_VAR 0 5
75433: PPUSH
75434: LD_VAR 0 6
75438: PPUSH
75439: CALL_OW 1
75443: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75444: LD_VAR 0 1
75448: PUSH
75449: LD_EXP 52
75453: PUSH
75454: LD_VAR 0 5
75458: ARRAY
75459: IN
75460: IFFALSE 75499
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75462: LD_ADDR_EXP 52
75466: PUSH
75467: LD_EXP 52
75471: PPUSH
75472: LD_VAR 0 5
75476: PPUSH
75477: LD_EXP 52
75481: PUSH
75482: LD_VAR 0 5
75486: ARRAY
75487: PUSH
75488: LD_VAR 0 1
75492: DIFF
75493: PPUSH
75494: CALL_OW 1
75498: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75499: LD_VAR 0 1
75503: PUSH
75504: LD_EXP 53
75508: PUSH
75509: LD_VAR 0 5
75513: ARRAY
75514: IN
75515: IFFALSE 75554
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75517: LD_ADDR_EXP 53
75521: PUSH
75522: LD_EXP 53
75526: PPUSH
75527: LD_VAR 0 5
75531: PPUSH
75532: LD_EXP 53
75536: PUSH
75537: LD_VAR 0 5
75541: ARRAY
75542: PUSH
75543: LD_VAR 0 1
75547: DIFF
75548: PPUSH
75549: CALL_OW 1
75553: ST_TO_ADDR
// break ;
75554: GO 75558
// end ;
75556: GO 75376
75558: POP
75559: POP
// end ;
75560: LD_VAR 0 4
75564: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75565: LD_INT 0
75567: PPUSH
75568: PPUSH
75569: PPUSH
// if not mc_bases or not side in mc_sides then
75570: LD_EXP 44
75574: NOT
75575: PUSH
75576: LD_VAR 0 3
75580: PUSH
75581: LD_EXP 70
75585: IN
75586: NOT
75587: OR
75588: IFFALSE 75592
// exit ;
75590: GO 75715
// for i = 1 to mc_vehicles do
75592: LD_ADDR_VAR 0 6
75596: PUSH
75597: DOUBLE
75598: LD_INT 1
75600: DEC
75601: ST_TO_ADDR
75602: LD_EXP 63
75606: PUSH
75607: FOR_TO
75608: IFFALSE 75713
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75610: LD_VAR 0 2
75614: PUSH
75615: LD_EXP 63
75619: PUSH
75620: LD_VAR 0 6
75624: ARRAY
75625: IN
75626: PUSH
75627: LD_VAR 0 1
75631: PUSH
75632: LD_EXP 63
75636: PUSH
75637: LD_VAR 0 6
75641: ARRAY
75642: IN
75643: OR
75644: IFFALSE 75711
// begin tmp := mc_vehicles [ i ] diff old ;
75646: LD_ADDR_VAR 0 7
75650: PUSH
75651: LD_EXP 63
75655: PUSH
75656: LD_VAR 0 6
75660: ARRAY
75661: PUSH
75662: LD_VAR 0 2
75666: DIFF
75667: ST_TO_ADDR
// tmp := tmp diff new ;
75668: LD_ADDR_VAR 0 7
75672: PUSH
75673: LD_VAR 0 7
75677: PUSH
75678: LD_VAR 0 1
75682: DIFF
75683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75684: LD_ADDR_EXP 63
75688: PUSH
75689: LD_EXP 63
75693: PPUSH
75694: LD_VAR 0 6
75698: PPUSH
75699: LD_VAR 0 7
75703: PPUSH
75704: CALL_OW 1
75708: ST_TO_ADDR
// break ;
75709: GO 75713
// end ;
75711: GO 75607
75713: POP
75714: POP
// end ;
75715: LD_VAR 0 5
75719: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75720: LD_INT 0
75722: PPUSH
75723: PPUSH
75724: PPUSH
75725: PPUSH
// if not mc_bases then
75726: LD_EXP 44
75730: NOT
75731: IFFALSE 75735
// exit ;
75733: GO 76027
// side := GetSide ( vehicle ) ;
75735: LD_ADDR_VAR 0 5
75739: PUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 255
75749: ST_TO_ADDR
// for i = 1 to mc_bases do
75750: LD_ADDR_VAR 0 4
75754: PUSH
75755: DOUBLE
75756: LD_INT 1
75758: DEC
75759: ST_TO_ADDR
75760: LD_EXP 44
75764: PUSH
75765: FOR_TO
75766: IFFALSE 76025
// begin if factory in mc_bases [ i ] then
75768: LD_VAR 0 2
75772: PUSH
75773: LD_EXP 44
75777: PUSH
75778: LD_VAR 0 4
75782: ARRAY
75783: IN
75784: IFFALSE 76023
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
75786: LD_EXP 66
75790: PUSH
75791: LD_VAR 0 4
75795: ARRAY
75796: PUSH
75797: LD_EXP 55
75801: PUSH
75802: LD_VAR 0 4
75806: ARRAY
75807: LESS
75808: IFFALSE 75979
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
75810: LD_ADDR_EXP 66
75814: PUSH
75815: LD_EXP 66
75819: PPUSH
75820: LD_VAR 0 4
75824: PPUSH
75825: LD_EXP 66
75829: PUSH
75830: LD_VAR 0 4
75834: ARRAY
75835: PUSH
75836: LD_VAR 0 1
75840: ADD
75841: PPUSH
75842: CALL_OW 1
75846: ST_TO_ADDR
// if not mc_scan [ i ] then
75847: LD_EXP 67
75851: PUSH
75852: LD_VAR 0 4
75856: ARRAY
75857: NOT
75858: IFFALSE 75977
// begin if GetControl ( vehicle ) = control_remote then
75860: LD_VAR 0 1
75864: PPUSH
75865: CALL_OW 263
75869: PUSH
75870: LD_INT 2
75872: EQUAL
75873: IFFALSE 75893
// repeat wait ( 0 0$1 ) ;
75875: LD_INT 35
75877: PPUSH
75878: CALL_OW 67
// until IsControledBy ( vehicle ) ;
75882: LD_VAR 0 1
75886: PPUSH
75887: CALL_OW 312
75891: IFFALSE 75875
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_EXP 68
75902: PUSH
75903: LD_VAR 0 4
75907: ARRAY
75908: PPUSH
75909: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
75913: LD_VAR 0 1
75917: PPUSH
75918: CALL_OW 263
75922: PUSH
75923: LD_INT 1
75925: NONEQUAL
75926: IFFALSE 75930
// break ;
75928: GO 76025
// repeat wait ( 0 0$1 ) ;
75930: LD_INT 35
75932: PPUSH
75933: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
75937: LD_VAR 0 1
75941: PPUSH
75942: LD_EXP 68
75946: PUSH
75947: LD_VAR 0 4
75951: ARRAY
75952: PPUSH
75953: CALL_OW 308
75957: IFFALSE 75930
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
75959: LD_VAR 0 1
75963: PPUSH
75964: CALL_OW 311
75968: PPUSH
75969: CALL_OW 121
// exit ;
75973: POP
75974: POP
75975: GO 76027
// end ; end else
75977: GO 76023
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
75979: LD_ADDR_EXP 63
75983: PUSH
75984: LD_EXP 63
75988: PPUSH
75989: LD_VAR 0 4
75993: PUSH
75994: LD_EXP 63
75998: PUSH
75999: LD_VAR 0 4
76003: ARRAY
76004: PUSH
76005: LD_INT 1
76007: PLUS
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PPUSH
76013: LD_VAR 0 1
76017: PPUSH
76018: CALL 22879 0 3
76022: ST_TO_ADDR
// end ; end ;
76023: GO 75765
76025: POP
76026: POP
// end ;
76027: LD_VAR 0 3
76031: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
76037: PPUSH
// if not mc_bases then
76038: LD_EXP 44
76042: NOT
76043: IFFALSE 76047
// exit ;
76045: GO 76400
// repeat wait ( 0 0$1 ) ;
76047: LD_INT 35
76049: PPUSH
76050: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76054: LD_VAR 0 2
76058: PPUSH
76059: LD_VAR 0 3
76063: PPUSH
76064: CALL_OW 284
76068: IFFALSE 76047
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76070: LD_VAR 0 2
76074: PPUSH
76075: LD_VAR 0 3
76079: PPUSH
76080: CALL_OW 283
76084: PUSH
76085: LD_INT 4
76087: EQUAL
76088: IFFALSE 76092
// exit ;
76090: GO 76400
// for i = 1 to mc_bases do
76092: LD_ADDR_VAR 0 7
76096: PUSH
76097: DOUBLE
76098: LD_INT 1
76100: DEC
76101: ST_TO_ADDR
76102: LD_EXP 44
76106: PUSH
76107: FOR_TO
76108: IFFALSE 76398
// begin if mc_crates_area [ i ] then
76110: LD_EXP 62
76114: PUSH
76115: LD_VAR 0 7
76119: ARRAY
76120: IFFALSE 76231
// for j in mc_crates_area [ i ] do
76122: LD_ADDR_VAR 0 8
76126: PUSH
76127: LD_EXP 62
76131: PUSH
76132: LD_VAR 0 7
76136: ARRAY
76137: PUSH
76138: FOR_IN
76139: IFFALSE 76229
// if InArea ( x , y , j ) then
76141: LD_VAR 0 2
76145: PPUSH
76146: LD_VAR 0 3
76150: PPUSH
76151: LD_VAR 0 8
76155: PPUSH
76156: CALL_OW 309
76160: IFFALSE 76227
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76162: LD_ADDR_EXP 60
76166: PUSH
76167: LD_EXP 60
76171: PPUSH
76172: LD_VAR 0 7
76176: PUSH
76177: LD_EXP 60
76181: PUSH
76182: LD_VAR 0 7
76186: ARRAY
76187: PUSH
76188: LD_INT 1
76190: PLUS
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: PPUSH
76196: LD_VAR 0 4
76200: PUSH
76201: LD_VAR 0 2
76205: PUSH
76206: LD_VAR 0 3
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: LIST
76215: PPUSH
76216: CALL 22879 0 3
76220: ST_TO_ADDR
// exit ;
76221: POP
76222: POP
76223: POP
76224: POP
76225: GO 76400
// end ;
76227: GO 76138
76229: POP
76230: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76231: LD_ADDR_VAR 0 9
76235: PUSH
76236: LD_EXP 44
76240: PUSH
76241: LD_VAR 0 7
76245: ARRAY
76246: PPUSH
76247: LD_INT 2
76249: PUSH
76250: LD_INT 30
76252: PUSH
76253: LD_INT 0
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 30
76262: PUSH
76263: LD_INT 1
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: LIST
76274: PPUSH
76275: CALL_OW 72
76279: ST_TO_ADDR
// if not depot then
76280: LD_VAR 0 9
76284: NOT
76285: IFFALSE 76289
// continue ;
76287: GO 76107
// for j in depot do
76289: LD_ADDR_VAR 0 8
76293: PUSH
76294: LD_VAR 0 9
76298: PUSH
76299: FOR_IN
76300: IFFALSE 76394
// if GetDistUnitXY ( j , x , y ) < 30 then
76302: LD_VAR 0 8
76306: PPUSH
76307: LD_VAR 0 2
76311: PPUSH
76312: LD_VAR 0 3
76316: PPUSH
76317: CALL_OW 297
76321: PUSH
76322: LD_INT 30
76324: LESS
76325: IFFALSE 76392
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76327: LD_ADDR_EXP 60
76331: PUSH
76332: LD_EXP 60
76336: PPUSH
76337: LD_VAR 0 7
76341: PUSH
76342: LD_EXP 60
76346: PUSH
76347: LD_VAR 0 7
76351: ARRAY
76352: PUSH
76353: LD_INT 1
76355: PLUS
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PPUSH
76361: LD_VAR 0 4
76365: PUSH
76366: LD_VAR 0 2
76370: PUSH
76371: LD_VAR 0 3
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: LIST
76380: PPUSH
76381: CALL 22879 0 3
76385: ST_TO_ADDR
// exit ;
76386: POP
76387: POP
76388: POP
76389: POP
76390: GO 76400
// end ;
76392: GO 76299
76394: POP
76395: POP
// end ;
76396: GO 76107
76398: POP
76399: POP
// end ;
76400: LD_VAR 0 6
76404: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76405: LD_INT 0
76407: PPUSH
76408: PPUSH
76409: PPUSH
76410: PPUSH
// side := GetSide ( lab ) ;
76411: LD_ADDR_VAR 0 4
76415: PUSH
76416: LD_VAR 0 2
76420: PPUSH
76421: CALL_OW 255
76425: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76426: LD_VAR 0 4
76430: PUSH
76431: LD_EXP 70
76435: IN
76436: NOT
76437: PUSH
76438: LD_EXP 71
76442: NOT
76443: OR
76444: PUSH
76445: LD_EXP 44
76449: NOT
76450: OR
76451: IFFALSE 76455
// exit ;
76453: GO 76688
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76455: LD_ADDR_EXP 71
76459: PUSH
76460: LD_EXP 71
76464: PPUSH
76465: LD_VAR 0 4
76469: PPUSH
76470: LD_EXP 71
76474: PUSH
76475: LD_VAR 0 4
76479: ARRAY
76480: PUSH
76481: LD_VAR 0 1
76485: DIFF
76486: PPUSH
76487: CALL_OW 1
76491: ST_TO_ADDR
// for i = 1 to mc_bases do
76492: LD_ADDR_VAR 0 5
76496: PUSH
76497: DOUBLE
76498: LD_INT 1
76500: DEC
76501: ST_TO_ADDR
76502: LD_EXP 44
76506: PUSH
76507: FOR_TO
76508: IFFALSE 76686
// begin if lab in mc_bases [ i ] then
76510: LD_VAR 0 2
76514: PUSH
76515: LD_EXP 44
76519: PUSH
76520: LD_VAR 0 5
76524: ARRAY
76525: IN
76526: IFFALSE 76684
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76528: LD_VAR 0 1
76532: PUSH
76533: LD_INT 11
76535: PUSH
76536: LD_INT 4
76538: PUSH
76539: LD_INT 3
76541: PUSH
76542: LD_INT 2
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: IN
76551: PUSH
76552: LD_EXP 74
76556: PUSH
76557: LD_VAR 0 5
76561: ARRAY
76562: AND
76563: IFFALSE 76684
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76565: LD_ADDR_VAR 0 6
76569: PUSH
76570: LD_EXP 74
76574: PUSH
76575: LD_VAR 0 5
76579: ARRAY
76580: PUSH
76581: LD_INT 1
76583: ARRAY
76584: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76585: LD_ADDR_EXP 74
76589: PUSH
76590: LD_EXP 74
76594: PPUSH
76595: LD_VAR 0 5
76599: PPUSH
76600: EMPTY
76601: PPUSH
76602: CALL_OW 1
76606: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76607: LD_VAR 0 6
76611: PPUSH
76612: LD_INT 0
76614: PPUSH
76615: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76619: LD_VAR 0 6
76623: PPUSH
76624: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76628: LD_ADDR_EXP 73
76632: PUSH
76633: LD_EXP 73
76637: PPUSH
76638: LD_VAR 0 5
76642: PPUSH
76643: LD_EXP 73
76647: PUSH
76648: LD_VAR 0 5
76652: ARRAY
76653: PPUSH
76654: LD_INT 1
76656: PPUSH
76657: LD_VAR 0 6
76661: PPUSH
76662: CALL_OW 2
76666: PPUSH
76667: CALL_OW 1
76671: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76672: LD_VAR 0 5
76676: PPUSH
76677: LD_INT 112
76679: PPUSH
76680: CALL 60627 0 2
// end ; end ; end ;
76684: GO 76507
76686: POP
76687: POP
// end ;
76688: LD_VAR 0 3
76692: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
76693: LD_INT 0
76695: PPUSH
76696: PPUSH
76697: PPUSH
76698: PPUSH
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
// if not mc_bases then
76703: LD_EXP 44
76707: NOT
76708: IFFALSE 76712
// exit ;
76710: GO 77637
// for i = 1 to mc_bases do
76712: LD_ADDR_VAR 0 3
76716: PUSH
76717: DOUBLE
76718: LD_INT 1
76720: DEC
76721: ST_TO_ADDR
76722: LD_EXP 44
76726: PUSH
76727: FOR_TO
76728: IFFALSE 77635
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
76730: LD_VAR 0 1
76734: PUSH
76735: LD_EXP 44
76739: PUSH
76740: LD_VAR 0 3
76744: ARRAY
76745: IN
76746: PUSH
76747: LD_VAR 0 1
76751: PUSH
76752: LD_EXP 51
76756: PUSH
76757: LD_VAR 0 3
76761: ARRAY
76762: IN
76763: OR
76764: PUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_EXP 63
76774: PUSH
76775: LD_VAR 0 3
76779: ARRAY
76780: IN
76781: OR
76782: PUSH
76783: LD_VAR 0 1
76787: PUSH
76788: LD_EXP 73
76792: PUSH
76793: LD_VAR 0 3
76797: ARRAY
76798: IN
76799: OR
76800: PUSH
76801: LD_VAR 0 1
76805: PUSH
76806: LD_EXP 74
76810: PUSH
76811: LD_VAR 0 3
76815: ARRAY
76816: IN
76817: OR
76818: IFFALSE 77633
// begin if un in mc_ape [ i ] then
76820: LD_VAR 0 1
76824: PUSH
76825: LD_EXP 73
76829: PUSH
76830: LD_VAR 0 3
76834: ARRAY
76835: IN
76836: IFFALSE 76875
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
76838: LD_ADDR_EXP 73
76842: PUSH
76843: LD_EXP 73
76847: PPUSH
76848: LD_VAR 0 3
76852: PPUSH
76853: LD_EXP 73
76857: PUSH
76858: LD_VAR 0 3
76862: ARRAY
76863: PUSH
76864: LD_VAR 0 1
76868: DIFF
76869: PPUSH
76870: CALL_OW 1
76874: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
76875: LD_VAR 0 1
76879: PUSH
76880: LD_EXP 74
76884: PUSH
76885: LD_VAR 0 3
76889: ARRAY
76890: IN
76891: IFFALSE 76915
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76893: LD_ADDR_EXP 74
76897: PUSH
76898: LD_EXP 74
76902: PPUSH
76903: LD_VAR 0 3
76907: PPUSH
76908: EMPTY
76909: PPUSH
76910: CALL_OW 1
76914: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
76915: LD_VAR 0 1
76919: PPUSH
76920: CALL_OW 247
76924: PUSH
76925: LD_INT 2
76927: EQUAL
76928: PUSH
76929: LD_VAR 0 1
76933: PPUSH
76934: CALL_OW 110
76938: PUSH
76939: LD_INT 20
76941: EQUAL
76942: AND
76943: IFFALSE 77046
// begin fac := MC_GetBuilding ( i , b_factory ) ;
76945: LD_ADDR_VAR 0 8
76949: PUSH
76950: LD_VAR 0 3
76954: PPUSH
76955: LD_INT 3
76957: PPUSH
76958: CALL 74159 0 2
76962: ST_TO_ADDR
// if fac then
76963: LD_VAR 0 8
76967: IFFALSE 77046
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
76969: LD_ADDR_VAR 0 9
76973: PUSH
76974: LD_VAR 0 8
76978: PPUSH
76979: LD_VAR 0 1
76983: PPUSH
76984: CALL_OW 265
76988: PPUSH
76989: LD_VAR 0 1
76993: PPUSH
76994: CALL_OW 262
76998: PPUSH
76999: LD_VAR 0 1
77003: PPUSH
77004: CALL_OW 263
77008: PPUSH
77009: LD_VAR 0 1
77013: PPUSH
77014: CALL_OW 264
77018: PPUSH
77019: CALL 20044 0 5
77023: ST_TO_ADDR
// if components then
77024: LD_VAR 0 9
77028: IFFALSE 77044
// MC_InsertProduceList ( i , components ) ;
77030: LD_VAR 0 3
77034: PPUSH
77035: LD_VAR 0 9
77039: PPUSH
77040: CALL 73726 0 2
// break ;
77044: GO 77635
// end ; end ; if GetType ( un ) = unit_building then
77046: LD_VAR 0 1
77050: PPUSH
77051: CALL_OW 247
77055: PUSH
77056: LD_INT 3
77058: EQUAL
77059: IFFALSE 77356
// begin btype := GetBType ( un ) ;
77061: LD_ADDR_VAR 0 5
77065: PUSH
77066: LD_VAR 0 1
77070: PPUSH
77071: CALL_OW 266
77075: ST_TO_ADDR
// if btype = b_warehouse then
77076: LD_VAR 0 5
77080: PUSH
77081: LD_INT 1
77083: EQUAL
77084: IFFALSE 77102
// begin btype := b_depot ;
77086: LD_ADDR_VAR 0 5
77090: PUSH
77091: LD_INT 0
77093: ST_TO_ADDR
// pos := 1 ;
77094: LD_ADDR_VAR 0 6
77098: PUSH
77099: LD_INT 1
77101: ST_TO_ADDR
// end ; if btype = b_factory then
77102: LD_VAR 0 5
77106: PUSH
77107: LD_INT 3
77109: EQUAL
77110: IFFALSE 77128
// begin btype := b_workshop ;
77112: LD_ADDR_VAR 0 5
77116: PUSH
77117: LD_INT 2
77119: ST_TO_ADDR
// pos := 1 ;
77120: LD_ADDR_VAR 0 6
77124: PUSH
77125: LD_INT 1
77127: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
77128: LD_VAR 0 5
77132: PUSH
77133: LD_INT 7
77135: PUSH
77136: LD_INT 8
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: IN
77143: IFFALSE 77153
// btype := b_lab ;
77145: LD_ADDR_VAR 0 5
77149: PUSH
77150: LD_INT 6
77152: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77153: LD_ADDR_EXP 49
77157: PUSH
77158: LD_EXP 49
77162: PPUSH
77163: LD_VAR 0 3
77167: PUSH
77168: LD_EXP 49
77172: PUSH
77173: LD_VAR 0 3
77177: ARRAY
77178: PUSH
77179: LD_INT 1
77181: PLUS
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PPUSH
77187: LD_VAR 0 5
77191: PUSH
77192: LD_VAR 0 1
77196: PPUSH
77197: CALL_OW 250
77201: PUSH
77202: LD_VAR 0 1
77206: PPUSH
77207: CALL_OW 251
77211: PUSH
77212: LD_VAR 0 1
77216: PPUSH
77217: CALL_OW 254
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: PPUSH
77228: CALL 22879 0 3
77232: ST_TO_ADDR
// if pos = 1 then
77233: LD_VAR 0 6
77237: PUSH
77238: LD_INT 1
77240: EQUAL
77241: IFFALSE 77356
// begin tmp := mc_build_list [ i ] ;
77243: LD_ADDR_VAR 0 7
77247: PUSH
77248: LD_EXP 49
77252: PUSH
77253: LD_VAR 0 3
77257: ARRAY
77258: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77259: LD_VAR 0 7
77263: PPUSH
77264: LD_INT 2
77266: PUSH
77267: LD_INT 30
77269: PUSH
77270: LD_INT 0
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 30
77279: PUSH
77280: LD_INT 1
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: LIST
77291: PPUSH
77292: CALL_OW 72
77296: IFFALSE 77306
// pos := 2 ;
77298: LD_ADDR_VAR 0 6
77302: PUSH
77303: LD_INT 2
77305: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
77306: LD_ADDR_VAR 0 7
77310: PUSH
77311: LD_VAR 0 7
77315: PPUSH
77316: LD_VAR 0 6
77320: PPUSH
77321: LD_VAR 0 7
77325: PPUSH
77326: CALL 22770 0 3
77330: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
77331: LD_ADDR_EXP 49
77335: PUSH
77336: LD_EXP 49
77340: PPUSH
77341: LD_VAR 0 3
77345: PPUSH
77346: LD_VAR 0 7
77350: PPUSH
77351: CALL_OW 1
77355: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
77356: LD_VAR 0 1
77360: PUSH
77361: LD_EXP 44
77365: PUSH
77366: LD_VAR 0 3
77370: ARRAY
77371: IN
77372: IFFALSE 77411
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
77374: LD_ADDR_EXP 44
77378: PUSH
77379: LD_EXP 44
77383: PPUSH
77384: LD_VAR 0 3
77388: PPUSH
77389: LD_EXP 44
77393: PUSH
77394: LD_VAR 0 3
77398: ARRAY
77399: PUSH
77400: LD_VAR 0 1
77404: DIFF
77405: PPUSH
77406: CALL_OW 1
77410: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
77411: LD_VAR 0 1
77415: PUSH
77416: LD_EXP 51
77420: PUSH
77421: LD_VAR 0 3
77425: ARRAY
77426: IN
77427: IFFALSE 77466
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
77429: LD_ADDR_EXP 51
77433: PUSH
77434: LD_EXP 51
77438: PPUSH
77439: LD_VAR 0 3
77443: PPUSH
77444: LD_EXP 51
77448: PUSH
77449: LD_VAR 0 3
77453: ARRAY
77454: PUSH
77455: LD_VAR 0 1
77459: DIFF
77460: PPUSH
77461: CALL_OW 1
77465: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
77466: LD_VAR 0 1
77470: PUSH
77471: LD_EXP 63
77475: PUSH
77476: LD_VAR 0 3
77480: ARRAY
77481: IN
77482: IFFALSE 77521
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
77484: LD_ADDR_EXP 63
77488: PUSH
77489: LD_EXP 63
77493: PPUSH
77494: LD_VAR 0 3
77498: PPUSH
77499: LD_EXP 63
77503: PUSH
77504: LD_VAR 0 3
77508: ARRAY
77509: PUSH
77510: LD_VAR 0 1
77514: DIFF
77515: PPUSH
77516: CALL_OW 1
77520: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
77521: LD_VAR 0 1
77525: PUSH
77526: LD_EXP 53
77530: PUSH
77531: LD_VAR 0 3
77535: ARRAY
77536: IN
77537: IFFALSE 77576
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
77539: LD_ADDR_EXP 53
77543: PUSH
77544: LD_EXP 53
77548: PPUSH
77549: LD_VAR 0 3
77553: PPUSH
77554: LD_EXP 53
77558: PUSH
77559: LD_VAR 0 3
77563: ARRAY
77564: PUSH
77565: LD_VAR 0 1
77569: DIFF
77570: PPUSH
77571: CALL_OW 1
77575: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
77576: LD_VAR 0 1
77580: PUSH
77581: LD_EXP 52
77585: PUSH
77586: LD_VAR 0 3
77590: ARRAY
77591: IN
77592: IFFALSE 77631
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
77594: LD_ADDR_EXP 52
77598: PUSH
77599: LD_EXP 52
77603: PPUSH
77604: LD_VAR 0 3
77608: PPUSH
77609: LD_EXP 52
77613: PUSH
77614: LD_VAR 0 3
77618: ARRAY
77619: PUSH
77620: LD_VAR 0 1
77624: DIFF
77625: PPUSH
77626: CALL_OW 1
77630: ST_TO_ADDR
// end ; break ;
77631: GO 77635
// end ;
77633: GO 76727
77635: POP
77636: POP
// end ;
77637: LD_VAR 0 2
77641: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
77642: LD_INT 0
77644: PPUSH
77645: PPUSH
77646: PPUSH
// if not mc_bases then
77647: LD_EXP 44
77651: NOT
77652: IFFALSE 77656
// exit ;
77654: GO 77871
// for i = 1 to mc_bases do
77656: LD_ADDR_VAR 0 3
77660: PUSH
77661: DOUBLE
77662: LD_INT 1
77664: DEC
77665: ST_TO_ADDR
77666: LD_EXP 44
77670: PUSH
77671: FOR_TO
77672: IFFALSE 77869
// begin if building in mc_construct_list [ i ] then
77674: LD_VAR 0 1
77678: PUSH
77679: LD_EXP 51
77683: PUSH
77684: LD_VAR 0 3
77688: ARRAY
77689: IN
77690: IFFALSE 77867
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77692: LD_ADDR_EXP 51
77696: PUSH
77697: LD_EXP 51
77701: PPUSH
77702: LD_VAR 0 3
77706: PPUSH
77707: LD_EXP 51
77711: PUSH
77712: LD_VAR 0 3
77716: ARRAY
77717: PUSH
77718: LD_VAR 0 1
77722: DIFF
77723: PPUSH
77724: CALL_OW 1
77728: ST_TO_ADDR
// if building in mc_lab [ i ] then
77729: LD_VAR 0 1
77733: PUSH
77734: LD_EXP 77
77738: PUSH
77739: LD_VAR 0 3
77743: ARRAY
77744: IN
77745: IFFALSE 77800
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
77747: LD_ADDR_EXP 78
77751: PUSH
77752: LD_EXP 78
77756: PPUSH
77757: LD_VAR 0 3
77761: PPUSH
77762: LD_EXP 78
77766: PUSH
77767: LD_VAR 0 3
77771: ARRAY
77772: PPUSH
77773: LD_INT 1
77775: PPUSH
77776: LD_EXP 78
77780: PUSH
77781: LD_VAR 0 3
77785: ARRAY
77786: PPUSH
77787: LD_INT 0
77789: PPUSH
77790: CALL 21862 0 4
77794: PPUSH
77795: CALL_OW 1
77799: ST_TO_ADDR
// if not building in mc_bases [ i ] then
77800: LD_VAR 0 1
77804: PUSH
77805: LD_EXP 44
77809: PUSH
77810: LD_VAR 0 3
77814: ARRAY
77815: IN
77816: NOT
77817: IFFALSE 77863
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77819: LD_ADDR_EXP 44
77823: PUSH
77824: LD_EXP 44
77828: PPUSH
77829: LD_VAR 0 3
77833: PUSH
77834: LD_EXP 44
77838: PUSH
77839: LD_VAR 0 3
77843: ARRAY
77844: PUSH
77845: LD_INT 1
77847: PLUS
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PPUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: CALL 22879 0 3
77862: ST_TO_ADDR
// exit ;
77863: POP
77864: POP
77865: GO 77871
// end ; end ;
77867: GO 77671
77869: POP
77870: POP
// end ;
77871: LD_VAR 0 2
77875: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
77876: LD_INT 0
77878: PPUSH
77879: PPUSH
77880: PPUSH
77881: PPUSH
77882: PPUSH
77883: PPUSH
77884: PPUSH
// if not mc_bases then
77885: LD_EXP 44
77889: NOT
77890: IFFALSE 77894
// exit ;
77892: GO 78555
// for i = 1 to mc_bases do
77894: LD_ADDR_VAR 0 3
77898: PUSH
77899: DOUBLE
77900: LD_INT 1
77902: DEC
77903: ST_TO_ADDR
77904: LD_EXP 44
77908: PUSH
77909: FOR_TO
77910: IFFALSE 78553
// begin if building in mc_construct_list [ i ] then
77912: LD_VAR 0 1
77916: PUSH
77917: LD_EXP 51
77921: PUSH
77922: LD_VAR 0 3
77926: ARRAY
77927: IN
77928: IFFALSE 78551
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77930: LD_ADDR_EXP 51
77934: PUSH
77935: LD_EXP 51
77939: PPUSH
77940: LD_VAR 0 3
77944: PPUSH
77945: LD_EXP 51
77949: PUSH
77950: LD_VAR 0 3
77954: ARRAY
77955: PUSH
77956: LD_VAR 0 1
77960: DIFF
77961: PPUSH
77962: CALL_OW 1
77966: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77967: LD_ADDR_EXP 44
77971: PUSH
77972: LD_EXP 44
77976: PPUSH
77977: LD_VAR 0 3
77981: PUSH
77982: LD_EXP 44
77986: PUSH
77987: LD_VAR 0 3
77991: ARRAY
77992: PUSH
77993: LD_INT 1
77995: PLUS
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PPUSH
78001: LD_VAR 0 1
78005: PPUSH
78006: CALL 22879 0 3
78010: ST_TO_ADDR
// btype := GetBType ( building ) ;
78011: LD_ADDR_VAR 0 5
78015: PUSH
78016: LD_VAR 0 1
78020: PPUSH
78021: CALL_OW 266
78025: ST_TO_ADDR
// side := GetSide ( building ) ;
78026: LD_ADDR_VAR 0 8
78030: PUSH
78031: LD_VAR 0 1
78035: PPUSH
78036: CALL_OW 255
78040: ST_TO_ADDR
// if btype = b_lab then
78041: LD_VAR 0 5
78045: PUSH
78046: LD_INT 6
78048: EQUAL
78049: IFFALSE 78099
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78051: LD_ADDR_EXP 77
78055: PUSH
78056: LD_EXP 77
78060: PPUSH
78061: LD_VAR 0 3
78065: PUSH
78066: LD_EXP 77
78070: PUSH
78071: LD_VAR 0 3
78075: ARRAY
78076: PUSH
78077: LD_INT 1
78079: PLUS
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PPUSH
78085: LD_VAR 0 1
78089: PPUSH
78090: CALL 22879 0 3
78094: ST_TO_ADDR
// exit ;
78095: POP
78096: POP
78097: GO 78555
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78099: LD_VAR 0 5
78103: PUSH
78104: LD_INT 0
78106: PUSH
78107: LD_INT 2
78109: PUSH
78110: LD_INT 4
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: LIST
78117: IN
78118: IFFALSE 78242
// begin if btype = b_armoury then
78120: LD_VAR 0 5
78124: PUSH
78125: LD_INT 4
78127: EQUAL
78128: IFFALSE 78138
// btype := b_barracks ;
78130: LD_ADDR_VAR 0 5
78134: PUSH
78135: LD_INT 5
78137: ST_TO_ADDR
// if btype = b_depot then
78138: LD_VAR 0 5
78142: PUSH
78143: LD_INT 0
78145: EQUAL
78146: IFFALSE 78156
// btype := b_warehouse ;
78148: LD_ADDR_VAR 0 5
78152: PUSH
78153: LD_INT 1
78155: ST_TO_ADDR
// if btype = b_workshop then
78156: LD_VAR 0 5
78160: PUSH
78161: LD_INT 2
78163: EQUAL
78164: IFFALSE 78174
// btype := b_factory ;
78166: LD_ADDR_VAR 0 5
78170: PUSH
78171: LD_INT 3
78173: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78174: LD_VAR 0 5
78178: PPUSH
78179: LD_VAR 0 8
78183: PPUSH
78184: CALL_OW 323
78188: PUSH
78189: LD_INT 1
78191: EQUAL
78192: IFFALSE 78238
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78194: LD_ADDR_EXP 76
78198: PUSH
78199: LD_EXP 76
78203: PPUSH
78204: LD_VAR 0 3
78208: PUSH
78209: LD_EXP 76
78213: PUSH
78214: LD_VAR 0 3
78218: ARRAY
78219: PUSH
78220: LD_INT 1
78222: PLUS
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PPUSH
78228: LD_VAR 0 1
78232: PPUSH
78233: CALL 22879 0 3
78237: ST_TO_ADDR
// exit ;
78238: POP
78239: POP
78240: GO 78555
// end ; if btype in [ b_bunker , b_turret ] then
78242: LD_VAR 0 5
78246: PUSH
78247: LD_INT 32
78249: PUSH
78250: LD_INT 33
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: IN
78257: IFFALSE 78547
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
78259: LD_ADDR_EXP 52
78263: PUSH
78264: LD_EXP 52
78268: PPUSH
78269: LD_VAR 0 3
78273: PUSH
78274: LD_EXP 52
78278: PUSH
78279: LD_VAR 0 3
78283: ARRAY
78284: PUSH
78285: LD_INT 1
78287: PLUS
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PPUSH
78293: LD_VAR 0 1
78297: PPUSH
78298: CALL 22879 0 3
78302: ST_TO_ADDR
// if btype = b_bunker then
78303: LD_VAR 0 5
78307: PUSH
78308: LD_INT 32
78310: EQUAL
78311: IFFALSE 78547
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78313: LD_ADDR_EXP 53
78317: PUSH
78318: LD_EXP 53
78322: PPUSH
78323: LD_VAR 0 3
78327: PUSH
78328: LD_EXP 53
78332: PUSH
78333: LD_VAR 0 3
78337: ARRAY
78338: PUSH
78339: LD_INT 1
78341: PLUS
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PPUSH
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL 22879 0 3
78356: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
78357: LD_ADDR_VAR 0 6
78361: PUSH
78362: LD_EXP 44
78366: PUSH
78367: LD_VAR 0 3
78371: ARRAY
78372: PPUSH
78373: LD_INT 25
78375: PUSH
78376: LD_INT 1
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: PUSH
78383: LD_INT 3
78385: PUSH
78386: LD_INT 54
78388: PUSH
78389: EMPTY
78390: LIST
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PPUSH
78400: CALL_OW 72
78404: ST_TO_ADDR
// if tmp then
78405: LD_VAR 0 6
78409: IFFALSE 78415
// exit ;
78411: POP
78412: POP
78413: GO 78555
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78415: LD_ADDR_VAR 0 6
78419: PUSH
78420: LD_EXP 44
78424: PUSH
78425: LD_VAR 0 3
78429: ARRAY
78430: PPUSH
78431: LD_INT 2
78433: PUSH
78434: LD_INT 30
78436: PUSH
78437: LD_INT 4
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 30
78446: PUSH
78447: LD_INT 5
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: LIST
78458: PPUSH
78459: CALL_OW 72
78463: ST_TO_ADDR
// if not tmp then
78464: LD_VAR 0 6
78468: NOT
78469: IFFALSE 78475
// exit ;
78471: POP
78472: POP
78473: GO 78555
// for j in tmp do
78475: LD_ADDR_VAR 0 4
78479: PUSH
78480: LD_VAR 0 6
78484: PUSH
78485: FOR_IN
78486: IFFALSE 78545
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
78488: LD_ADDR_VAR 0 7
78492: PUSH
78493: LD_VAR 0 4
78497: PPUSH
78498: CALL_OW 313
78502: PPUSH
78503: LD_INT 25
78505: PUSH
78506: LD_INT 1
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PPUSH
78513: CALL_OW 72
78517: ST_TO_ADDR
// if units then
78518: LD_VAR 0 7
78522: IFFALSE 78543
// begin ComExitBuilding ( units [ 1 ] ) ;
78524: LD_VAR 0 7
78528: PUSH
78529: LD_INT 1
78531: ARRAY
78532: PPUSH
78533: CALL_OW 122
// exit ;
78537: POP
78538: POP
78539: POP
78540: POP
78541: GO 78555
// end ; end ;
78543: GO 78485
78545: POP
78546: POP
// end ; end ; exit ;
78547: POP
78548: POP
78549: GO 78555
// end ; end ;
78551: GO 77909
78553: POP
78554: POP
// end ;
78555: LD_VAR 0 2
78559: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
78560: LD_INT 0
78562: PPUSH
78563: PPUSH
78564: PPUSH
78565: PPUSH
78566: PPUSH
78567: PPUSH
78568: PPUSH
// if not mc_bases then
78569: LD_EXP 44
78573: NOT
78574: IFFALSE 78578
// exit ;
78576: GO 78809
// btype := GetBType ( building ) ;
78578: LD_ADDR_VAR 0 6
78582: PUSH
78583: LD_VAR 0 1
78587: PPUSH
78588: CALL_OW 266
78592: ST_TO_ADDR
// x := GetX ( building ) ;
78593: LD_ADDR_VAR 0 7
78597: PUSH
78598: LD_VAR 0 1
78602: PPUSH
78603: CALL_OW 250
78607: ST_TO_ADDR
// y := GetY ( building ) ;
78608: LD_ADDR_VAR 0 8
78612: PUSH
78613: LD_VAR 0 1
78617: PPUSH
78618: CALL_OW 251
78622: ST_TO_ADDR
// d := GetDir ( building ) ;
78623: LD_ADDR_VAR 0 9
78627: PUSH
78628: LD_VAR 0 1
78632: PPUSH
78633: CALL_OW 254
78637: ST_TO_ADDR
// for i = 1 to mc_bases do
78638: LD_ADDR_VAR 0 4
78642: PUSH
78643: DOUBLE
78644: LD_INT 1
78646: DEC
78647: ST_TO_ADDR
78648: LD_EXP 44
78652: PUSH
78653: FOR_TO
78654: IFFALSE 78807
// begin if not mc_build_list [ i ] then
78656: LD_EXP 49
78660: PUSH
78661: LD_VAR 0 4
78665: ARRAY
78666: NOT
78667: IFFALSE 78671
// continue ;
78669: GO 78653
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
78671: LD_VAR 0 6
78675: PUSH
78676: LD_VAR 0 7
78680: PUSH
78681: LD_VAR 0 8
78685: PUSH
78686: LD_VAR 0 9
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: LIST
78695: LIST
78696: PPUSH
78697: LD_EXP 49
78701: PUSH
78702: LD_VAR 0 4
78706: ARRAY
78707: PUSH
78708: LD_INT 1
78710: ARRAY
78711: PPUSH
78712: CALL 28516 0 2
78716: IFFALSE 78805
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
78718: LD_ADDR_EXP 49
78722: PUSH
78723: LD_EXP 49
78727: PPUSH
78728: LD_VAR 0 4
78732: PPUSH
78733: LD_EXP 49
78737: PUSH
78738: LD_VAR 0 4
78742: ARRAY
78743: PPUSH
78744: LD_INT 1
78746: PPUSH
78747: CALL_OW 3
78751: PPUSH
78752: CALL_OW 1
78756: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
78757: LD_ADDR_EXP 51
78761: PUSH
78762: LD_EXP 51
78766: PPUSH
78767: LD_VAR 0 4
78771: PUSH
78772: LD_EXP 51
78776: PUSH
78777: LD_VAR 0 4
78781: ARRAY
78782: PUSH
78783: LD_INT 1
78785: PLUS
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PPUSH
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL 22879 0 3
78800: ST_TO_ADDR
// exit ;
78801: POP
78802: POP
78803: GO 78809
// end ; end ;
78805: GO 78653
78807: POP
78808: POP
// end ;
78809: LD_VAR 0 3
78813: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
78814: LD_INT 0
78816: PPUSH
78817: PPUSH
78818: PPUSH
// if not mc_bases then
78819: LD_EXP 44
78823: NOT
78824: IFFALSE 78828
// exit ;
78826: GO 79018
// for i = 1 to mc_bases do
78828: LD_ADDR_VAR 0 4
78832: PUSH
78833: DOUBLE
78834: LD_INT 1
78836: DEC
78837: ST_TO_ADDR
78838: LD_EXP 44
78842: PUSH
78843: FOR_TO
78844: IFFALSE 78931
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
78846: LD_VAR 0 1
78850: PUSH
78851: LD_EXP 52
78855: PUSH
78856: LD_VAR 0 4
78860: ARRAY
78861: IN
78862: PUSH
78863: LD_VAR 0 1
78867: PUSH
78868: LD_EXP 53
78872: PUSH
78873: LD_VAR 0 4
78877: ARRAY
78878: IN
78879: NOT
78880: AND
78881: IFFALSE 78929
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78883: LD_ADDR_EXP 53
78887: PUSH
78888: LD_EXP 53
78892: PPUSH
78893: LD_VAR 0 4
78897: PUSH
78898: LD_EXP 53
78902: PUSH
78903: LD_VAR 0 4
78907: ARRAY
78908: PUSH
78909: LD_INT 1
78911: PLUS
78912: PUSH
78913: EMPTY
78914: LIST
78915: LIST
78916: PPUSH
78917: LD_VAR 0 1
78921: PPUSH
78922: CALL 22879 0 3
78926: ST_TO_ADDR
// break ;
78927: GO 78931
// end ; end ;
78929: GO 78843
78931: POP
78932: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
78933: LD_VAR 0 1
78937: PPUSH
78938: CALL_OW 257
78942: PUSH
78943: LD_EXP 70
78947: IN
78948: PUSH
78949: LD_VAR 0 1
78953: PPUSH
78954: CALL_OW 266
78958: PUSH
78959: LD_INT 5
78961: EQUAL
78962: AND
78963: PUSH
78964: LD_VAR 0 2
78968: PPUSH
78969: CALL_OW 110
78973: PUSH
78974: LD_INT 18
78976: NONEQUAL
78977: AND
78978: IFFALSE 79018
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
78980: LD_VAR 0 2
78984: PPUSH
78985: CALL_OW 257
78989: PUSH
78990: LD_INT 5
78992: PUSH
78993: LD_INT 8
78995: PUSH
78996: LD_INT 9
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: LIST
79003: IN
79004: IFFALSE 79018
// SetClass ( unit , 1 ) ;
79006: LD_VAR 0 2
79010: PPUSH
79011: LD_INT 1
79013: PPUSH
79014: CALL_OW 336
// end ;
79018: LD_VAR 0 3
79022: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79023: LD_INT 0
79025: PPUSH
79026: PPUSH
// if not mc_bases then
79027: LD_EXP 44
79031: NOT
79032: IFFALSE 79036
// exit ;
79034: GO 79152
// if GetLives ( abandoned_vehicle ) > 250 then
79036: LD_VAR 0 2
79040: PPUSH
79041: CALL_OW 256
79045: PUSH
79046: LD_INT 250
79048: GREATER
79049: IFFALSE 79053
// exit ;
79051: GO 79152
// for i = 1 to mc_bases do
79053: LD_ADDR_VAR 0 6
79057: PUSH
79058: DOUBLE
79059: LD_INT 1
79061: DEC
79062: ST_TO_ADDR
79063: LD_EXP 44
79067: PUSH
79068: FOR_TO
79069: IFFALSE 79150
// begin if driver in mc_bases [ i ] then
79071: LD_VAR 0 1
79075: PUSH
79076: LD_EXP 44
79080: PUSH
79081: LD_VAR 0 6
79085: ARRAY
79086: IN
79087: IFFALSE 79148
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79089: LD_VAR 0 1
79093: PPUSH
79094: LD_EXP 44
79098: PUSH
79099: LD_VAR 0 6
79103: ARRAY
79104: PPUSH
79105: LD_INT 2
79107: PUSH
79108: LD_INT 30
79110: PUSH
79111: LD_INT 0
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_INT 30
79120: PUSH
79121: LD_INT 1
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: LIST
79132: PPUSH
79133: CALL_OW 72
79137: PUSH
79138: LD_INT 1
79140: ARRAY
79141: PPUSH
79142: CALL_OW 112
// break ;
79146: GO 79150
// end ; end ;
79148: GO 79068
79150: POP
79151: POP
// end ;
79152: LD_VAR 0 5
79156: RET
